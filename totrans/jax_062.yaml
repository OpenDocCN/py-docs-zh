- en: Building from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/developer.html`](https://jax.readthedocs.io/en/latest/developer.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'First, obtain the JAX source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Building JAX involves two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Building or installing `jaxlib`, the C++ support library for `jax`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the `jax` Python package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building or installing `jaxlib`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing `jaxlib` with pip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you’re only modifying Python portions of JAX, we recommend installing `jaxlib`
    from a prebuilt wheel using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See the [JAX readme](https://github.com/google/jax#installation) for full guidance
    on pip installation (e.g., for GPU and TPU support).
  prefs: []
  type: TYPE_NORMAL
- en: Building `jaxlib` from source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To build `jaxlib` from source, you must also install some prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: a C++ compiler (g++, clang, or MSVC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Ubuntu or Debian you can install the necessary prerequisites with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are building on a Mac, make sure XCode and the XCode command line tools
    are installed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See below for Windows build instructions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: there is no need to install Python dependencies locally, as your system Python
    will be ignored during the build; please check Managing hermetic Python for details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To build `jaxlib` for CPU or TPU, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To build a wheel for a version of Python different from your current system
    installation pass `--python_version` flag to the build command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The rest of this document assumes that you are building for Python version matching
    your current system installation. If you need to build for a different version,
    simply append `--python_version=<py version>` flag every time you call `python
    build/build.py`. Note, the Bazel build will always use a hermetic Python installation
    regardless of whether the `--python_version` parameter is passed or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to build `jaxlib` with CUDA support: (1) use `python build/build.py
    --enable_cuda` to generate a jaxlib wheel with cuda support, or (2) use `python
    build/build.py --enable_cuda --build_gpu_plugin --gpu_plugin_cuda_version=12`
    to generate three wheels (jaxlib without cuda, jax-cuda-plugin, and jax-cuda-pjrt).
    You can set `gpu_plugin_cuda_version` to 11 or 12.'
  prefs: []
  type: TYPE_NORMAL
- en: See `python build/build.py --help` for configuration options, including ways
    to specify the paths to CUDA and CUDNN, which you must have installed. Here `python`
    should be the name of your Python 3 interpreter; on some systems, you may need
    to use `python3` instead. Despite calling the script with `python`, Bazel will
    always use its own hermetic Python interpreter and dependencies, only the `build/build.py`
    script itself will be processed by your system Python interpreter. By default,
    the wheel is written to the `dist/` subdirectory of the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: Building jaxlib from source with a modified XLA repository.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JAX depends on XLA, whose source code is in the [XLA GitHub repository](https://github.com/openxla/xla).
    By default JAX uses a pinned copy of the XLA repository, but we often want to
    use a locally-modified copy of XLA when working on JAX. There are two ways to
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'use Bazel’s `override_repository` feature, which you can pass as a command
    line flag to `build.py` as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: modify the `WORKSPACE` file in the root of the JAX source tree to point to a
    different XLA tree.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To contribute changes back to XLA, send PRs to the XLA repository.
  prefs: []
  type: TYPE_NORMAL
- en: The version of XLA pinned by JAX is regularly updated, but is updated in particular
    before each `jaxlib` release.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Notes for Building `jaxlib` from source on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Windows, follow [Install Visual Studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2019)
    to set up a C++ toolchain. Visual Studio 2019 version 16.5 or newer is required.
    If you need to build with CUDA enabled, follow the [CUDA Installation Guide](https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html)
    to set up a CUDA environment.
  prefs: []
  type: TYPE_NORMAL
- en: JAX builds use symbolic links, which require that you activate [Developer Mode](https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development).
  prefs: []
  type: TYPE_NORMAL
- en: You can either install Python using its [Windows installer](https://www.python.org/downloads/),
    or if you prefer, you can use [Anaconda](https://docs.anaconda.com/anaconda/install/windows/)
    or [Miniconda](https://docs.conda.io/en/latest/miniconda.html#windows-installers)
    to set up a Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some targets of Bazel use bash utilities to do scripting, so [MSYS2](https://www.msys2.org)
    is needed. See [Installing Bazel on Windows](https://bazel.build/install/windows#install-compilers)
    for more details. Install the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once coreutils is installed, the realpath command should be present in your
    shell’s path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once everything is installed. Open PowerShell, and make sure MSYS2 is in the
    path of the current session. Ensure `bazel`, `patch` and `realpath` are accessible.
    Activate the conda environment. The following command builds with CUDA enabled,
    adjust it to whatever suitable for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To build with debug information, add the flag `--bazel_options='--copt=/Z7'`.
  prefs: []
  type: TYPE_NORMAL
- en: Additional notes for building a ROCM `jaxlib` for AMD GPUs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You need several ROCM/HIP libraries installed to build for ROCM. For example,
    on a Ubuntu machine with [AMD’s `apt` repositories available](https://rocm.docs.amd.com/en/latest/deploy/linux/quick_start.html),
    you need a number of packages installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To build jaxlib with ROCM support, you can run the following build command,
    suitably adjusted for your paths and ROCM version.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'AMD’s fork of the XLA repository may include fixes not present in the upstream
    XLA repository. If you experience problems with the upstream repository, you can
    try AMD’s fork, by cloning their repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'and override the XLA repository with which JAX is built:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Managing hermetic Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make sure that JAX’s build is reproducible, behaves uniformly across supported
    platforms (Linux, Windows, MacOS) and is properly isolated from specifics of a
    local system, we rely on hermetic Python (see [rules_python](https://github.com/bazelbuild/rules_python))
    for all build and test commands executed via Bazel. This means that your system
    Python installation will be ignored during the build and Python interpreter itself
    as well as all the Python dependencies will be managed by bazel directly.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying Python version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you run `build/build.py` tool, the version of hermetic Python is set automatically
    to match the version of the Python you used to run `build/build.py` script. To
    choose a specific version explicitly you may pass `--python_version` argument
    to the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the hood, the hermetic Python version is controlled by `HERMETIC_PYTHON_VERSION`
    environment variable, which is set automatically when you run `build/build.py`.
    In case you run bazel directly you may need to set the variable explicitly in
    one of the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You may run builds and tests against different versions of Python sequentially
    on the same machine by simply switching the value of `--python_version` between
    the runs. All the python-agnostic parts of the build cache from the previous build
    will be preserved and reused for the subsequent builds.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying Python dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During bazel build all JAX’s Python dependencies are pinned to their specific
    versions. This is necessary to ensure reproducibility of the build. The pinned
    versions of the full transitive closure of JAX’s dependencies together with their
    corresponding hashes are specified in `build/requirements_lock_<python version>.txt`
    files ( e.g. `build/requirements_lock_3_12.txt` for `Python 3.12`).
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the lock files, make sure `build/requirements.in` contains the desired
    direct dependencies list and then execute the following command (which will call
    [pip-compile](https://pypi.org/project/pip-tools/) under the hood):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you need more control, you may run the bazel command directly
    (the two commands are equivalent):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: where `3.12` is the `Python` version you wish to update.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note, since it is still `pip` and `pip-compile` tools used under the hood,
    so most of the command line arguments and features supported by those tools will
    be acknowledged by the Bazel requirements updater command as well. For example,
    if you wish the updater to consider pre-release versions simply pass `--pre` argument
    to the bazel command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Specifying dependencies on local wheels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you need to depend on a local .whl file, for example on your newly built
    jaxlib wheel, you may add a path to the wheel in `build/requirements.in` and re-run
    the requirements updater command for a selected version of Python. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Specifying dependencies on nightly wheels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To build and test against the very latest, potentially unstable, set of Python
    dependencies we provide a special version of the dependency updater command as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, if you run `bazel` directly (the two commands are equivalent):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The difference between this and the regular updater is that by default it would
    accept pre-release, dev and nightly packages, it will also search https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
    as an extra index url and will not put hashes in the resultant requirements lock
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Building with pre-release Python version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We support all of the current versions of Python out of the box, but if you
    need to build and test against a different version (for example the latest unstable
    version which hasn’t been released officially yet) please follow the instructions
    below.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you have installed necessary linux packages needed to build Python
    interpreter itself and key packages (like `numpy` or `scipy`) from source. On
    a typical Debian system you may need to install the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Check your `WORKSPACE` file and make sure it has `custom_python_interpreter()`
    entry there, pointing to the version of Python you want to build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `bazel build @python_dev//:python_dev` to build Python interpreter. By default
    it will be built with GCC compiler. If you wish to build with clang, you need
    to set corresponding env variables to do so ( e.g. `--repo_env=CC=/usr/lib/llvm-17/bin/clang
    --repo_env=CXX=/usr/lib/llvm-17/bin/clang++`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the output of the previous command. At the very end of it you will find
    a code snippet for `python_register_toolchains()` entry with your newly built
    Python in it. Copy that code snippet in your `WORKSPACE` file either right after
    `python_init_toolchains()` entry (to add the new version of Python) or instead
    of it (to replace an existing version, like replacing 3.12 with custom built variant
    of 3.12). The code snippet is generated to match your actual setup, so it should
    work as is, but you can customize it if you choose so (for example to change location
    of Python’s `.tgz` file so it could be downloaded remotely instead of being on
    local machine).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure there is an entry for your Python’s version in `requirements` parameter
    for `python_init_repositories()` in your WORKSPACE file. For example for `Python
    3.13` it should have something like `"3.13": "//build:requirements_lock_3_13.txt"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For unstable versions of Python, optionally (but highly recommended) run `bazel
    build //build:all_py_deps --repo_env=HERMETIC_PYTHON_VERSION="3.13"`, where `3.13`
    is the version of Python interpreter you built on step 3. This will make `pip`
    pull and build from sources (for packages which don’t have binaries published
    yet, for example `numpy`, `scipy`, `matplotlib`, `zstandard`) all of the JAX’s
    python dependencies. It is recommended to do this step first (i.e. independently
    of actual JAX build) for all unstable versions of Python to avoid conflict between
    building JAX itself and building of its Python dependencies. For example, we normally
    build JAX with clang but building `matplotlib` from sources with clang fails out
    of the box due to differences in LTO behavior ( Link Time Optimization, triggered
    by `-flto` flag) between GCC and clang, and matplotlib assumes GCC by default.
    If you build against a stable version of Python, or in general you do not expect
    any of your Python dependencies to be built from sources (i.e. binary distributions
    for the corresponding Python version already exist in the repository) this step
    is not needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congrats, you’ve built and configured your custom Python for JAX project! You
    may now execute your built/test commands as usual, just make sure `HERMETIC_PYTHON_VERSION`
    environment variable is set and points to your new version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note, if you were building a pre-release version of Python, updating of `requirements_lock_<python_version>.txt`
    files with your newly built Python is likely to fail, because package repositories
    will not have matching binary packages. When there are no binary packages available
    `pip-compile` proceeds with building them from sources, which is likely to fail
    because it is more restrictive than doing the same thing during `pip` installation.
    The recommended way to update requirements lock file for unstable versions of
    Python is to update requirements for the latest stable version (e.g. `3.12`) without
    hashes (therefore special `//build:requirements_dev.update` target) and then copy
    the results to the unstable Python’s lock file (e.g. `3.13`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Installing `jax`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once `jaxlib` has been installed, you can install `jax` by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: To upgrade to the latest version from GitHub, just run `git pull` from the JAX
    repository root, and rebuild by running `build.py` or upgrading `jaxlib` if necessary.
    You shouldn’t have to reinstall `jax` because `pip install -e` sets up symbolic
    links from site-packages into the repository.
  prefs: []
  type: TYPE_NORMAL
- en: '## Running the tests'
  prefs: []
  type: TYPE_NORMAL
- en: There are two supported mechanisms for running the JAX tests, either using Bazel
    or using pytest.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bazel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, configure the JAX build by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You may pass additional options to `build.py` to configure the build; see the
    `jaxlib` build documentation for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default the Bazel build runs the JAX tests using `jaxlib` built from source.
    To run JAX tests, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`//tests:gpu_tests` and `//tests:tpu_tests` are also available, if you have
    the necessary hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a preinstalled `jaxlib` instead of building it you first need to make
    it available in the hermetic Python. To install a specific version of `jaxlib`
    within hermetic Python run (using `jaxlib >= 0.4.26` as an example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, to install `jaxlib` from a local wheel (assuming Python 3.12):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have `jaxlib` installed hermetically, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: A number of test behaviors can be controlled using environment variables (see
    below). Environment variables may be passed to JAX tests using the `--test_env=FLAG=value`
    flag to Bazel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of JAX tests are for multiple accelerators (i.e. GPUs, TPUs). When JAX
    is already installed, you can run GPUs tests like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can speed up single accelerator tests by running them in parallel on multiple
    accelerators. This also triggers multiple concurrent tests per accelerator. For
    GPUs, you can do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Using `pytest`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, install the dependencies by running `pip install -r build/test-requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: To run all the JAX tests using `pytest`, we recommend using `pytest-xdist`,
    which can run tests in parallel. It is installed as a part of `pip install -r
    build/test-requirements.txt` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the repository root directory run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Controlling test behavior
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JAX generates test cases combinatorially, and you can control the number of
    cases that are generated and checked for each test (default is 10) using the `JAX_NUM_GENERATED_CASES`
    environment variable. The automated tests currently use 25 by default.
  prefs: []
  type: TYPE_NORMAL
- en: For example, one might write
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The automated tests also run the tests with default 64-bit floats and ints
    (`JAX_ENABLE_X64`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run a more specific set of tests using [pytest](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)’s
    built-in selection mechanisms, or alternatively you can run a specific test file
    directly to see more detailed information about the cases being run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: You can skip a few tests known to be slow, by passing environment variable JAX_SKIP_SLOW_TESTS=1.
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify a particular set of tests to run from a test file, you can pass
    a string or regular expression via the `--test_targets` flag. For example, you
    can run all the tests of `jax.numpy.pad` using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The Colab notebooks are tested for errors as part of the documentation build.
  prefs: []
  type: TYPE_NORMAL
- en: Doctests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JAX uses pytest in doctest mode to test the code examples within the documentation.
    You can run this using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, JAX runs pytest in `doctest-modules` mode to ensure code examples
    in function docstrings will run correctly. You can run this locally using, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that there are several files that are marked to be skipped when
    the doctest command is run on the full package; you can see the details in [`ci-build.yaml`](https://github.com/google/jax/blob/main/.github/workflows/ci-build.yaml)
  prefs: []
  type: TYPE_NORMAL
- en: Type checking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use `mypy` to check the type hints. To check types locally the same way
    as the CI checks them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the [pre-commit](https://pre-commit.com/) framework
    to run this on all staged files in your git repository, automatically using the
    same mypy version as in the GitHub CI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Linting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JAX uses the [ruff](https://docs.astral.sh/ruff/) linter to ensure code quality.
    You can check your local changes by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the [pre-commit](https://pre-commit.com/) framework
    to run this on all staged files in your git repository, automatically using the
    same ruff version as the GitHub tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Update documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To rebuild the documentation, install several packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'And then run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This can take a long time because it executes many of the notebooks in the
    documentation source; if you’d prefer to build the docs without executing the
    notebooks, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: You can then see the generated documentation in `docs/build/html/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: The `-j auto` option controls the parallelism of the build. You can use a number
    in place of `auto` to control how many CPU cores to use.
  prefs: []
  type: TYPE_NORMAL
- en: '### Update notebooks'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use [jupytext](https://jupytext.readthedocs.io/) to maintain two synced
    copies of the notebooks in `docs/notebooks`: one in `ipynb` format, and one in
    `md` format. The advantage of the former is that it can be opened and executed
    directly in Colab; the advantage of the latter is that it makes it much easier
    to track diffs within version control.'
  prefs: []
  type: TYPE_NORMAL
- en: Editing `ipynb`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For making large changes that substantially modify code and outputs, it is easiest
    to edit the notebooks in Jupyter or in Colab. To edit notebooks in the Colab interface,
    open [`colab.research.google.com`](http://colab.research.google.com) and `Upload`
    from your local repo. Update it as needed, `Run all cells` then `Download ipynb`.
    You may want to test that it executes properly, using `sphinx-build` as explained
    above.
  prefs: []
  type: TYPE_NORMAL
- en: Editing `md`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For making smaller changes to the text content of the notebooks, it is easiest
    to edit the `.md` versions using a text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Syncing notebooks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'After editing either the ipynb or md versions of the notebooks, you can sync
    the two versions using [jupytext](https://jupytext.readthedocs.io/) by running
    `jupytext --sync` on the updated notebooks; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The jupytext version should match that specified in [.pre-commit-config.yaml](https://github.com/google/jax/blob/main/.pre-commit-config.yaml).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check that the markdown and ipynb files are properly synced, you may use
    the [pre-commit](https://pre-commit.com/) framework to perform the same check
    used by the github CI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Creating new notebooks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you are adding a new notebook to the documentation and would like to use
    the `jupytext --sync` command discussed here, you can set up your notebook for
    jupytext by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This works by adding a `"jupytext"` metadata field to the notebook file which
    specifies the desired formats, and which the `jupytext --sync` command recognizes
    when invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Notebooks within the Sphinx build
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Some of the notebooks are built automatically as part of the pre-submit checks
    and as part of the [Read the docs](https://jax.readthedocs.io/en/latest) build.
    The build will fail if cells raise errors. If the errors are intentional, you
    can either catch them, or tag the cell with `raises-exceptions` metadata ([example
    PR](https://github.com/google/jax/pull/2402/files)). You have to add this metadata
    by hand in the `.ipynb` file. It will be preserved when somebody else re-saves
    the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: We exclude some notebooks from the build, e.g., because they contain long computations.
    See `exclude_patterns` in [conf.py](https://github.com/google/jax/blob/main/docs/conf.py).
  prefs: []
  type: TYPE_NORMAL
- en: Documentation building on `readthedocs.io`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JAX’s auto-generated documentation is at [`jax.readthedocs.io/`](https://jax.readthedocs.io/).
  prefs: []
  type: TYPE_NORMAL
- en: The documentation building is controlled for the entire project by the [readthedocs
    JAX settings](https://readthedocs.org/dashboard/jax). The current settings trigger
    a documentation build as soon as code is pushed to the GitHub `main` branch. For
    each code version, the building process is driven by the `.readthedocs.yml` and
    the `docs/conf.py` configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: For each automated documentation build you can see the [documentation build
    logs](https://readthedocs.org/projects/jax/builds/).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to test the documentation generation on Readthedocs, you can push
    code to the `test-docs` branch. That branch is also built automatically, and you
    can see the generated documentation [here](https://jax.readthedocs.io/en/test-docs/).
    If the documentation build fails you may want to [wipe the build environment for
    test-docs](https://docs.readthedocs.io/en/stable/guides/wipe-environment.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'For a local test, I was able to do it in a fresh directory by replaying the
    commands I saw in the Readthedocs logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
