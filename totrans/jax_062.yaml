- en: Building from source
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建
- en: 原文：[`jax.readthedocs.io/en/latest/developer.html`](https://jax.readthedocs.io/en/latest/developer.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/developer.html`](https://jax.readthedocs.io/en/latest/developer.html)
- en: 'First, obtain the JAX source code:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，获取JAX源代码：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Building JAX involves two steps:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 构建JAX涉及两个步骤：
- en: Building or installing `jaxlib`, the C++ support library for `jax`.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建或安装用于`jax`的C++支持库`jaxlib`。
- en: Installing the `jax` Python package.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`jax` Python包。
- en: Building or installing `jaxlib`
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建或安装`jaxlib`
- en: Installing `jaxlib` with pip
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用pip安装`jaxlib`
- en: 'If you’re only modifying Python portions of JAX, we recommend installing `jaxlib`
    from a prebuilt wheel using pip:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只修改了JAX的Python部分，我们建议使用pip从预构建的wheel安装`jaxlib`：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See the [JAX readme](https://github.com/google/jax#installation) for full guidance
    on pip installation (e.g., for GPU and TPU support).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[JAX自述文件](https://github.com/google/jax#installation)获取有关pip安装的完整指南（例如，用于GPU和TPU支持）。
- en: Building `jaxlib` from source
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码构建`jaxlib`
- en: 'To build `jaxlib` from source, you must also install some prerequisites:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要从源代码构建`jaxlib`，还必须安装一些先决条件：
- en: a C++ compiler (g++, clang, or MSVC)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++编译器（g++、clang或MSVC）
- en: 'On Ubuntu or Debian you can install the necessary prerequisites with:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Ubuntu或Debian上，可以使用以下命令安装所需的先决条件：
- en: '[PRE2]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you are building on a Mac, make sure XCode and the XCode command line tools
    are installed.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在Mac上进行构建，请确保安装了XCode和XCode命令行工具。
- en: See below for Windows build instructions.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅下面的Windows构建说明。
- en: there is no need to install Python dependencies locally, as your system Python
    will be ignored during the build; please check Managing hermetic Python for details.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需在本地安装Python依赖项，因为在构建过程中将忽略你的系统Python；请查看有关管理封闭Python的详细信息。
- en: 'To build `jaxlib` for CPU or TPU, you can run:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要为CPU或TPU构建`jaxlib`，可以运行：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To build a wheel for a version of Python different from your current system
    installation pass `--python_version` flag to the build command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要为与当前系统安装的Python版本不同的版本构建wheel，请将`--python_version`标志传递给构建命令：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The rest of this document assumes that you are building for Python version matching
    your current system installation. If you need to build for a different version,
    simply append `--python_version=<py version>` flag every time you call `python
    build/build.py`. Note, the Bazel build will always use a hermetic Python installation
    regardless of whether the `--python_version` parameter is passed or not.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的其余部分假定你正在为与当前系统安装匹配的Python版本构建。如果需要为不同版本构建，只需每次调用`python build/build.py`时附加`--python_version=<py
    version>`标志。请注意，无论是否传递`--python_version`参数，Bazel构建始终将使用封闭的Python安装。
- en: 'There are two ways to build `jaxlib` with CUDA support: (1) use `python build/build.py
    --enable_cuda` to generate a jaxlib wheel with cuda support, or (2) use `python
    build/build.py --enable_cuda --build_gpu_plugin --gpu_plugin_cuda_version=12`
    to generate three wheels (jaxlib without cuda, jax-cuda-plugin, and jax-cuda-pjrt).
    You can set `gpu_plugin_cuda_version` to 11 or 12.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以使用CUDA支持构建`jaxlib`：(1) 使用`python build/build.py --enable_cuda`生成带有cuda支持的jaxlib
    wheel，或者 (2) 使用`python build/build.py --enable_cuda --build_gpu_plugin --gpu_plugin_cuda_version=12`生成三个wheel（不带cuda的jaxlib，jax-cuda-plugin和jax-cuda-pjrt）。你可以将`gpu_plugin_cuda_version`设置为11或12。
- en: See `python build/build.py --help` for configuration options, including ways
    to specify the paths to CUDA and CUDNN, which you must have installed. Here `python`
    should be the name of your Python 3 interpreter; on some systems, you may need
    to use `python3` instead. Despite calling the script with `python`, Bazel will
    always use its own hermetic Python interpreter and dependencies, only the `build/build.py`
    script itself will be processed by your system Python interpreter. By default,
    the wheel is written to the `dist/` subdirectory of the current directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`python build/build.py --help`以获取配置选项，包括指定CUDA和CUDNN路径的方法，这些必须已安装。这里的`python`应该是你的Python
    3解释器的名称；在某些系统上，你可能需要使用`python3`。尽管使用`python`调用脚本，但Bazel将始终使用其自己的封闭Python解释器和依赖项，只有`build/build.py`脚本本身将由你的系统Python解释器处理。默认情况下，wheel将写入当前目录的`dist/`子目录。
- en: Building jaxlib from source with a modified XLA repository.
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用修改后的XLA存储库从源代码构建jaxlib。
- en: 'JAX depends on XLA, whose source code is in the [XLA GitHub repository](https://github.com/openxla/xla).
    By default JAX uses a pinned copy of the XLA repository, but we often want to
    use a locally-modified copy of XLA when working on JAX. There are two ways to
    do this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JAX依赖于XLA，其源代码位于[XLA GitHub存储库](https://github.com/openxla/xla)中。默认情况下，JAX使用XLA存储库的固定副本，但在开发JAX时，我们经常希望使用本地修改的XLA副本。有两种方法可以做到这一点：
- en: 'use Bazel’s `override_repository` feature, which you can pass as a command
    line flag to `build.py` as follows:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bazel 的 `override_repository` 功能，您可以将其作为命令行标志传递给 `build.py`，如下所示：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: modify the `WORKSPACE` file in the root of the JAX source tree to point to a
    different XLA tree.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 JAX 源代码根目录中的 `WORKSPACE` 文件，以指向不同的 XLA 树。
- en: To contribute changes back to XLA, send PRs to the XLA repository.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要向 XLA 贡献更改，请向 XLA 代码库发送 PR。
- en: The version of XLA pinned by JAX is regularly updated, but is updated in particular
    before each `jaxlib` release.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 固定的 XLA 版本定期更新，但在每次 `jaxlib` 发布之前会进行特定更新。
- en: Additional Notes for Building `jaxlib` from source on Windows
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Windows 上从源代码构建 `jaxlib` 的附加说明
- en: On Windows, follow [Install Visual Studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2019)
    to set up a C++ toolchain. Visual Studio 2019 version 16.5 or newer is required.
    If you need to build with CUDA enabled, follow the [CUDA Installation Guide](https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html)
    to set up a CUDA environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，按照 [安装 Visual Studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2019)
    的指南来设置 C++ 工具链。需要使用 Visual Studio 2019 版本 16.5 或更新版本。如果需要启用 CUDA 进行构建，请按照 [CUDA
    安装指南](https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html)
    设置 CUDA 环境。
- en: JAX builds use symbolic links, which require that you activate [Developer Mode](https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 构建使用符号链接，需要您激活 [开发者模式](https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development)。
- en: You can either install Python using its [Windows installer](https://www.python.org/downloads/),
    or if you prefer, you can use [Anaconda](https://docs.anaconda.com/anaconda/install/windows/)
    or [Miniconda](https://docs.conda.io/en/latest/miniconda.html#windows-installers)
    to set up a Python environment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用其 [Windows 安装程序](https://www.python.org/downloads/) 安装 Python，或者如果您更喜欢，可以使用
    [Anaconda](https://docs.anaconda.com/anaconda/install/windows/) 或 [Miniconda](https://docs.conda.io/en/latest/miniconda.html#windows-installers)
    设置 Python 环境。
- en: 'Some targets of Bazel use bash utilities to do scripting, so [MSYS2](https://www.msys2.org)
    is needed. See [Installing Bazel on Windows](https://bazel.build/install/windows#install-compilers)
    for more details. Install the following packages:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Bazel 的某些目标使用 bash 实用程序进行脚本编写，因此需要 [MSYS2](https://www.msys2.org)。有关详细信息，请参阅
    [在 Windows 上安装 Bazel](https://bazel.build/install/windows#install-compilers)。安装以下软件包：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once coreutils is installed, the realpath command should be present in your
    shell’s path.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 coreutils 后，realpath 命令应存在于您的 shell 路径中。
- en: 'Once everything is installed. Open PowerShell, and make sure MSYS2 is in the
    path of the current session. Ensure `bazel`, `patch` and `realpath` are accessible.
    Activate the conda environment. The following command builds with CUDA enabled,
    adjust it to whatever suitable for you:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后。打开 PowerShell，并确保 MSYS2 在当前会话的路径中。确保 `bazel`、`patch` 和 `realpath` 可访问。激活
    conda 环境。以下命令启用 CUDA 并进行构建，请根据您的需求进行调整：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To build with debug information, add the flag `--bazel_options='--copt=/Z7'`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加调试信息进行构建，请加上标志 `--bazel_options='--copt=/Z7'`。
- en: Additional notes for building a ROCM `jaxlib` for AMD GPUs
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 AMD GPU 构建 ROCM `jaxlib` 的附加说明
- en: 'You need several ROCM/HIP libraries installed to build for ROCM. For example,
    on a Ubuntu machine with [AMD’s `apt` repositories available](https://rocm.docs.amd.com/en/latest/deploy/linux/quick_start.html),
    you need a number of packages installed:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装多个 ROCM/HIP 库以在 ROCM 上进行构建。例如，在具有 [AMD 的 `apt` 存储库](https://rocm.docs.amd.com/en/latest/deploy/linux/quick_start.html)
    的 Ubuntu 机器上，需要安装多个软件包：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To build jaxlib with ROCM support, you can run the following build command,
    suitably adjusted for your paths and ROCM version.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 ROCM 支持构建 jaxlib，可以运行以下构建命令，并根据您的路径和 ROCM 版本进行适当调整。
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'AMD’s fork of the XLA repository may include fixes not present in the upstream
    XLA repository. If you experience problems with the upstream repository, you can
    try AMD’s fork, by cloning their repository:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: AMD 的 XLA 代码库分支可能包含在上游 XLA 代码库中不存在的修复程序。如果遇到上游代码库的问题，可以尝试使用 AMD 的分支，方法是克隆他们的代码库：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'and override the XLA repository with which JAX is built:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用以下命令覆盖构建 JAX 所用的 XLA 代码库：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Managing hermetic Python
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理封闭 Python
- en: To make sure that JAX’s build is reproducible, behaves uniformly across supported
    platforms (Linux, Windows, MacOS) and is properly isolated from specifics of a
    local system, we rely on hermetic Python (see [rules_python](https://github.com/bazelbuild/rules_python))
    for all build and test commands executed via Bazel. This means that your system
    Python installation will be ignored during the build and Python interpreter itself
    as well as all the Python dependencies will be managed by bazel directly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保JAX的构建可复制，并在支持的平台（Linux、Windows、MacOS）上表现一致，并且正确隔离于本地系统的特定细节，我们依赖于隔离的Python（参见[rules_python](https://github.com/bazelbuild/rules_python)）来执行通过Bazel执行的所有构建和测试命令。这意味着在构建期间将忽略系统Python安装，并且Python解释器以及所有Python依赖项将由bazel直接管理。
- en: Specifying Python version
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定Python版本
- en: 'When you run `build/build.py` tool, the version of hermetic Python is set automatically
    to match the version of the Python you used to run `build/build.py` script. To
    choose a specific version explicitly you may pass `--python_version` argument
    to the tool:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`build/build.py`工具时，将自动设置隔离的Python版本，以匹配您用于运行`build/build.py`脚本的Python版本。若要显式选择特定版本，可以向该工具传递`--python_version`参数：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Under the hood, the hermetic Python version is controlled by `HERMETIC_PYTHON_VERSION`
    environment variable, which is set automatically when you run `build/build.py`.
    In case you run bazel directly you may need to set the variable explicitly in
    one of the following ways:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，隔离的Python版本由`HERMETIC_PYTHON_VERSION`环境变量控制，在运行`build/build.py`时将自动设置。如果直接运行bazel，则可能需要以以下某种方式显式设置该变量：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You may run builds and tests against different versions of Python sequentially
    on the same machine by simply switching the value of `--python_version` between
    the runs. All the python-agnostic parts of the build cache from the previous build
    will be preserved and reused for the subsequent builds.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在运行之间简单切换`--python_version`的值来在同一台机器上连续运行不同版本的Python进行构建和测试。构建缓存中的所有与Python无关的部分将保留并在后续构建中重用。
- en: Specifying Python dependencies
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定Python依赖项
- en: During bazel build all JAX’s Python dependencies are pinned to their specific
    versions. This is necessary to ensure reproducibility of the build. The pinned
    versions of the full transitive closure of JAX’s dependencies together with their
    corresponding hashes are specified in `build/requirements_lock_<python version>.txt`
    files ( e.g. `build/requirements_lock_3_12.txt` for `Python 3.12`).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在bazel构建期间，所有JAX的Python依赖项都被固定到它们的特定版本。这是确保构建可复制性所必需的。JAX依赖项的完整传递闭包以及其相应的哈希在`build/requirements_lock_<python
    version>.txt`文件中指定（例如，`Python 3.12`的`build/requirements_lock_3_12.txt`）。
- en: 'To update the lock files, make sure `build/requirements.in` contains the desired
    direct dependencies list and then execute the following command (which will call
    [pip-compile](https://pypi.org/project/pip-tools/) under the hood):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新锁定文件，请确保`build/requirements.in`包含所需的直接依赖项列表，然后执行以下命令（此命令将在幕后调用[pip-compile](https://pypi.org/project/pip-tools/)）：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Alternatively, if you need more control, you may run the bazel command directly
    (the two commands are equivalent):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果需要更多控制，可以直接运行bazel命令（这两个命令是等效的）：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: where `3.12` is the `Python` version you wish to update.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`3.12`是您希望更新的Python版本。
- en: 'Note, since it is still `pip` and `pip-compile` tools used under the hood,
    so most of the command line arguments and features supported by those tools will
    be acknowledged by the Bazel requirements updater command as well. For example,
    if you wish the updater to consider pre-release versions simply pass `--pre` argument
    to the bazel command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于仍然使用的是幕后的`pip`和`pip-compile`工具，因此大多数由这些工具支持的命令行参数和功能也将被Bazel要求更新命令所承认。例如，如果希望更新程序考虑预发布版本，只需将`--pre`参数传递给bazel命令：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Specifying dependencies on local wheels
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定本地构建的依赖项
- en: 'If you need to depend on a local .whl file, for example on your newly built
    jaxlib wheel, you may add a path to the wheel in `build/requirements.in` and re-run
    the requirements updater command for a selected version of Python. For example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要依赖于本地的`.whl`文件，例如您新构建的jaxlib wheel，可以在`build/requirements.in`中添加轮的路径，并重新运行所选Python版本的要求更新器命令。例如：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Specifying dependencies on nightly wheels
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定夜间构建的依赖项
- en: 'To build and test against the very latest, potentially unstable, set of Python
    dependencies we provide a special version of the dependency updater command as
    follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建和测试最新的、潜在不稳定的Python依赖关系集合，我们提供了一个特殊版本的依赖关系更新命令，如下所示：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Or, if you run `bazel` directly (the two commands are equivalent):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你直接运行`bazel`（这两个命令是等效的）：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The difference between this and the regular updater is that by default it would
    accept pre-release, dev and nightly packages, it will also search https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
    as an extra index url and will not put hashes in the resultant requirements lock
    file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规更新程序的区别在于，默认情况下它会接受预发布、开发和夜间包，还将搜索https://pypi.anaconda.org/scientific-python-nightly-wheels/simple作为额外的索引URL，并且不会在生成的要求锁文件中放置哈希值。
- en: Building with pre-release Python version
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用预发布版本的Python进行构建
- en: We support all of the current versions of Python out of the box, but if you
    need to build and test against a different version (for example the latest unstable
    version which hasn’t been released officially yet) please follow the instructions
    below.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们支持所有当前版本的Python，但如果你需要针对不同版本（例如尚未正式发布的最新不稳定版本）进行构建和测试，请按照以下说明操作。
- en: 'Make sure you have installed necessary linux packages needed to build Python
    interpreter itself and key packages (like `numpy` or `scipy`) from source. On
    a typical Debian system you may need to install the following packages:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已安装构建Python解释器本身所需的必要Linux软件包，以及从源代码安装关键软件包（如`numpy`或`scipy`）。在典型的Debian系统上，你可能需要安装以下软件包：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Check your `WORKSPACE` file and make sure it has `custom_python_interpreter()`
    entry there, pointing to the version of Python you want to build.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的`WORKSPACE`文件，并确保其中有指向你想要构建的Python版本的`custom_python_interpreter()`条目。
- en: Run `bazel build @python_dev//:python_dev` to build Python interpreter. By default
    it will be built with GCC compiler. If you wish to build with clang, you need
    to set corresponding env variables to do so ( e.g. `--repo_env=CC=/usr/lib/llvm-17/bin/clang
    --repo_env=CXX=/usr/lib/llvm-17/bin/clang++`).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`bazel build @python_dev//:python_dev`来构建Python解释器。默认情况下，它将使用GCC编译器进行构建。如果你希望使用clang进行构建，则需要设置相应的环境变量（例如
    `--repo_env=CC=/usr/lib/llvm-17/bin/clang --repo_env=CXX=/usr/lib/llvm-17/bin/clang++`）。
- en: Check the output of the previous command. At the very end of it you will find
    a code snippet for `python_register_toolchains()` entry with your newly built
    Python in it. Copy that code snippet in your `WORKSPACE` file either right after
    `python_init_toolchains()` entry (to add the new version of Python) or instead
    of it (to replace an existing version, like replacing 3.12 with custom built variant
    of 3.12). The code snippet is generated to match your actual setup, so it should
    work as is, but you can customize it if you choose so (for example to change location
    of Python’s `.tgz` file so it could be downloaded remotely instead of being on
    local machine).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查上一个命令的输出。在其末尾，你会找到一个`python_register_toolchains()`入口的代码片段，其中包含你新构建的Python。将该代码片段复制到你的`WORKSPACE`文件中，可以选择是在`python_init_toolchains()`入口后面（添加新版本的Python），还是替换它（替换类似于3.12的现有版本，例如替换为3.12的自定义构建变体）。代码片段是根据你的实际设置生成的，因此应该可以直接使用，但如果需要，你可以自定义它（例如更改Python
    `.tgz`文件的位置，以便可以远程下载而不是本地机器上）。
- en: 'Make sure there is an entry for your Python’s version in `requirements` parameter
    for `python_init_repositories()` in your WORKSPACE file. For example for `Python
    3.13` it should have something like `"3.13": "//build:requirements_lock_3_13.txt"`.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '确保在你的`WORKSPACE`文件中的`python_init_repositories()`的`requirements`参数中有关于你的Python版本的条目。例如，对于`Python
    3.13`，它应该有类似于`"3.13": "//build:requirements_lock_3_13.txt"`的内容。'
- en: For unstable versions of Python, optionally (but highly recommended) run `bazel
    build //build:all_py_deps --repo_env=HERMETIC_PYTHON_VERSION="3.13"`, where `3.13`
    is the version of Python interpreter you built on step 3. This will make `pip`
    pull and build from sources (for packages which don’t have binaries published
    yet, for example `numpy`, `scipy`, `matplotlib`, `zstandard`) all of the JAX’s
    python dependencies. It is recommended to do this step first (i.e. independently
    of actual JAX build) for all unstable versions of Python to avoid conflict between
    building JAX itself and building of its Python dependencies. For example, we normally
    build JAX with clang but building `matplotlib` from sources with clang fails out
    of the box due to differences in LTO behavior ( Link Time Optimization, triggered
    by `-flto` flag) between GCC and clang, and matplotlib assumes GCC by default.
    If you build against a stable version of Python, or in general you do not expect
    any of your Python dependencies to be built from sources (i.e. binary distributions
    for the corresponding Python version already exist in the repository) this step
    is not needed.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于不稳定版本的 Python，可选择（但强烈建议）运行 `bazel build //build:all_py_deps --repo_env=HERMETIC_PYTHON_VERSION="3.13"`，其中
    `3.13` 是您在第三步构建的 Python 解释器版本。这将使 `pip` 从源代码拉取并构建 JAX 所有依赖的 Python 包（例如 `numpy`、`scipy`、`matplotlib`、`zstandard`）。建议首先执行此步骤（即独立于实际
    JAX 构建之外），以避免在构建 JAX 本身和其 Python 依赖项时发生冲突。例如，我们通常使用 clang 构建 JAX，但使用 clang 从源代码构建
    `matplotlib` 由于 GCC 和 clang 在链接时优化行为（通过 `-flto` 标志触发的链接时优化）的差异而直接失败，默认情况下 matplotlib
    默认假定 GCC。如果您针对稳定版本的 Python 进行构建，或者一般情况下不期望任何 Python 依赖项从源代码构建（即相应 Python 版本的二进制分发包已经存在于仓库中），则不需要执行此步骤。
- en: Congrats, you’ve built and configured your custom Python for JAX project! You
    may now execute your built/test commands as usual, just make sure `HERMETIC_PYTHON_VERSION`
    environment variable is set and points to your new version.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜，你已经为 JAX 项目构建和配置了自定义 Python！现在你可以像往常一样执行构建/测试命令，只需确保 `HERMETIC_PYTHON_VERSION`
    环境变量已设置并指向你的新版本。
- en: 'Note, if you were building a pre-release version of Python, updating of `requirements_lock_<python_version>.txt`
    files with your newly built Python is likely to fail, because package repositories
    will not have matching binary packages. When there are no binary packages available
    `pip-compile` proceeds with building them from sources, which is likely to fail
    because it is more restrictive than doing the same thing during `pip` installation.
    The recommended way to update requirements lock file for unstable versions of
    Python is to update requirements for the latest stable version (e.g. `3.12`) without
    hashes (therefore special `//build:requirements_dev.update` target) and then copy
    the results to the unstable Python’s lock file (e.g. `3.13`):'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，如果你正在构建 Python 的预发布版本，则更新 `requirements_lock_<python_version>.txt` 文件以与新构建的
    Python 匹配可能会失败，因为软件包仓库没有相应的二进制包。当没有二进制包可用时，`pip-compile` 将继续从源代码构建，这可能会失败，因为其比在
    `pip` 安装期间执行同样操作更为严格。建议为不稳定版本的 Python 更新要求锁定文件的方法是更新最新稳定版本（例如 `3.12`）的要求（因此特殊的
    `//build:requirements_dev.update` 目标），然后将结果复制到不稳定 Python 的锁定文件（例如 `3.13`）中：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Installing `jax`
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 `jax`
- en: 'Once `jaxlib` has been installed, you can install `jax` by running:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成 `jaxlib` 后，可以通过运行以下命令安装 `jax`：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To upgrade to the latest version from GitHub, just run `git pull` from the JAX
    repository root, and rebuild by running `build.py` or upgrading `jaxlib` if necessary.
    You shouldn’t have to reinstall `jax` because `pip install -e` sets up symbolic
    links from site-packages into the repository.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 GitHub 升级到最新版本，只需从 JAX 仓库根目录运行 `git pull`，然后通过运行 `build.py` 或必要时升级 `jaxlib`
    进行重新构建。你不应该需要重新安装 `jax`，因为 `pip install -e` 会设置从 site-packages 到仓库的符号链接。
- en: '## Running the tests'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '## 运行测试'
- en: There are two supported mechanisms for running the JAX tests, either using Bazel
    or using pytest.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种支持的机制可以运行 JAX 测试，即使用 Bazel 或使用 pytest。
- en: Using Bazel
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Bazel
- en: 'First, configure the JAX build by running:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过运行以下命令配置 JAX 构建：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You may pass additional options to `build.py` to configure the build; see the
    `jaxlib` build documentation for details.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向 `build.py` 传递额外选项以配置构建；请查看 `jaxlib` 构建文档获取详细信息。
- en: 'By default the Bazel build runs the JAX tests using `jaxlib` built from source.
    To run JAX tests, run:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Bazel 构建使用从源代码构建的 `jaxlib` 运行 JAX 测试。要运行 JAX 测试，请运行：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`//tests:gpu_tests` and `//tests:tpu_tests` are also available, if you have
    the necessary hardware.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有必要的硬件，还可以使用`//tests:gpu_tests`和`//tests:tpu_tests`。
- en: 'To use a preinstalled `jaxlib` instead of building it you first need to make
    it available in the hermetic Python. To install a specific version of `jaxlib`
    within hermetic Python run (using `jaxlib >= 0.4.26` as an example):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用预安装的`jaxlib`而不是构建它，您首先需要在hermetic Python中使其可用。要在hermetic Python中安装特定版本的`jaxlib`，请运行以下命令（以`jaxlib
    >= 0.4.26`为例）：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Alternatively, to install `jaxlib` from a local wheel (assuming Python 3.12):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要从本地wheel安装`jaxlib`（假设Python 3.12）：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once you have `jaxlib` installed hermetically, run:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在hermetic中安装了`jaxlib`，请运行：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A number of test behaviors can be controlled using environment variables (see
    below). Environment variables may be passed to JAX tests using the `--test_env=FLAG=value`
    flag to Bazel.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用环境变量来控制多个测试行为（参见下文）。环境变量可以通过`--test_env=FLAG=value`标志传递给Bazel的JAX测试。
- en: 'Some of JAX tests are for multiple accelerators (i.e. GPUs, TPUs). When JAX
    is already installed, you can run GPUs tests like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: JAX的一些测试适用于多个加速器（例如GPU、TPU）。当JAX已安装时，您可以像这样运行GPU测试：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can speed up single accelerator tests by running them in parallel on multiple
    accelerators. This also triggers multiple concurrent tests per accelerator. For
    GPUs, you can do it like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在多个加速器上并行运行单个加速器测试来加速测试。这也会触发每个加速器的多个并发测试。对于GPU，您可以像这样操作：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Using `pytest`
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`pytest`
- en: First, install the dependencies by running `pip install -r build/test-requirements.txt`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过运行`pip install -r build/test-requirements.txt`安装依赖项。
- en: To run all the JAX tests using `pytest`, we recommend using `pytest-xdist`,
    which can run tests in parallel. It is installed as a part of `pip install -r
    build/test-requirements.txt` command.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pytest`运行所有JAX测试时，建议使用`pytest-xdist`，它可以并行运行测试。它作为`pip install -r build/test-requirements.txt`命令的一部分安装。
- en: 'From the repository root directory run:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从存储库根目录运行：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Controlling test behavior
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制测试行为
- en: JAX generates test cases combinatorially, and you can control the number of
    cases that are generated and checked for each test (default is 10) using the `JAX_NUM_GENERATED_CASES`
    environment variable. The automated tests currently use 25 by default.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: JAX以组合方式生成测试用例，您可以使用`JAX_NUM_GENERATED_CASES`环境变量控制为每个测试生成和检查的案例数（默认为10）。自动化测试当前默认使用25个。
- en: For example, one might write
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以这样编写
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: or
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The automated tests also run the tests with default 64-bit floats and ints
    (`JAX_ENABLE_X64`):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试还使用默认的64位浮点数和整数运行测试（`JAX_ENABLE_X64`）：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can run a more specific set of tests using [pytest](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)’s
    built-in selection mechanisms, or alternatively you can run a specific test file
    directly to see more detailed information about the cases being run:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[pytest](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)的内置选择机制运行更具体的测试集，或者直接运行特定的测试文件以查看有关正在运行的案例的更详细信息：
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You can skip a few tests known to be slow, by passing environment variable JAX_SKIP_SLOW_TESTS=1.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过传递环境变量`JAX_SKIP_SLOW_TESTS=1`来跳过一些已知的运行缓慢的测试。
- en: 'To specify a particular set of tests to run from a test file, you can pass
    a string or regular expression via the `--test_targets` flag. For example, you
    can run all the tests of `jax.numpy.pad` using:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定从测试文件运行的特定一组测试，您可以通过`--test_targets`标志传递字符串或正则表达式。例如，您可以使用以下命令运行`jax.numpy.pad`的所有测试：
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The Colab notebooks are tested for errors as part of the documentation build.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Colab笔记本在文档构建过程中会进行错误测试。
- en: Doctests
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Doctests
- en: JAX uses pytest in doctest mode to test the code examples within the documentation.
    You can run this using
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: JAX使用pytest以doctest模式测试文档中的代码示例。您可以使用以下命令运行：
- en: '[PRE36]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Additionally, JAX runs pytest in `doctest-modules` mode to ensure code examples
    in function docstrings will run correctly. You can run this locally using, for
    example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，JAX以`doctest-modules`模式运行pytest，以确保函数文档字符串中的代码示例能够正确运行。例如，您可以在本地运行如下命令：
- en: '[PRE37]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Keep in mind that there are several files that are marked to be skipped when
    the doctest command is run on the full package; you can see the details in [`ci-build.yaml`](https://github.com/google/jax/blob/main/.github/workflows/ci-build.yaml)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当在完整包上运行doctest命令时，有几个文件被标记为跳过；您可以在[`ci-build.yaml`](https://github.com/google/jax/blob/main/.github/workflows/ci-build.yaml)中查看详细信息。
- en: Type checking
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型检查
- en: 'We use `mypy` to check the type hints. To check types locally the same way
    as the CI checks them:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `mypy` 来检查类型提示。要像 CI 一样在本地检查类型：
- en: '[PRE38]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Alternatively, you can use the [pre-commit](https://pre-commit.com/) framework
    to run this on all staged files in your git repository, automatically using the
    same mypy version as in the GitHub CI:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 [pre-commit](https://pre-commit.com/) 框架在 git 存储库中的所有暂存文件上运行此命令，自动使用与
    GitHub CI 中相同的 mypy 版本：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Linting
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码检查
- en: 'JAX uses the [ruff](https://docs.astral.sh/ruff/) linter to ensure code quality.
    You can check your local changes by running:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 使用 [ruff](https://docs.astral.sh/ruff/) linter 来确保代码质量。您可以通过运行以下命令检查本地更改：
- en: '[PRE40]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Alternatively, you can use the [pre-commit](https://pre-commit.com/) framework
    to run this on all staged files in your git repository, automatically using the
    same ruff version as the GitHub tests:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 [pre-commit](https://pre-commit.com/) 框架在 git 存储库中的所有暂存文件上运行此命令，自动使用与
    GitHub 测试中相同的 ruff 版本：
- en: '[PRE41]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Update documentation
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新文档
- en: 'To rebuild the documentation, install several packages:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新构建文档，请安装几个包：
- en: '[PRE42]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And then run:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行：
- en: '[PRE43]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This can take a long time because it executes many of the notebooks in the
    documentation source; if you’d prefer to build the docs without executing the
    notebooks, you can run:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要很长时间，因为它执行文档源中的许多笔记本；如果您希望在不执行笔记本的情况下构建文档，可以运行：
- en: '[PRE44]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: You can then see the generated documentation in `docs/build/html/index.html`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以在 `docs/build/html/index.html` 中看到生成的文档。
- en: The `-j auto` option controls the parallelism of the build. You can use a number
    in place of `auto` to control how many CPU cores to use.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`-j auto` 选项控制构建的并行性。您可以使用数字替换 `auto`，以控制使用多少 CPU 核心。'
- en: '### Update notebooks'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '### 更新笔记本'
- en: 'We use [jupytext](https://jupytext.readthedocs.io/) to maintain two synced
    copies of the notebooks in `docs/notebooks`: one in `ipynb` format, and one in
    `md` format. The advantage of the former is that it can be opened and executed
    directly in Colab; the advantage of the latter is that it makes it much easier
    to track diffs within version control.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 [jupytext](https://jupytext.readthedocs.io/) 来维护 `docs/notebooks` 中笔记本的两个同步副本：一个是
    `ipynb` 格式，另一个是 `md` 格式。前者的优点是可以直接在 Colab 中打开和执行；后者的优点是在版本控制中更容易跟踪差异。
- en: Editing `ipynb`
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编辑 `ipynb`
- en: For making large changes that substantially modify code and outputs, it is easiest
    to edit the notebooks in Jupyter or in Colab. To edit notebooks in the Colab interface,
    open [`colab.research.google.com`](http://colab.research.google.com) and `Upload`
    from your local repo. Update it as needed, `Run all cells` then `Download ipynb`.
    You may want to test that it executes properly, using `sphinx-build` as explained
    above.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对代码和输出进行重大修改的大型更改，最简单的方法是在 Jupyter 或 Colab 中编辑笔记本。要在 Colab 界面中编辑笔记本，请打开 [`colab.research.google.com`](http://colab.research.google.com)，从本地仓库`上传`。根据需要更新，`Run
    all cells` 然后 `Download ipynb`。您可能希望使用 `sphinx-build` 测试它是否正确执行，如上所述。
- en: Editing `md`
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编辑 `md`
- en: For making smaller changes to the text content of the notebooks, it is easiest
    to edit the `.md` versions using a text editor.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对笔记本文本内容进行较小更改的情况，最简单的方法是使用文本编辑器编辑 `.md` 版本。
- en: Syncing notebooks
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 同步笔记本
- en: 'After editing either the ipynb or md versions of the notebooks, you can sync
    the two versions using [jupytext](https://jupytext.readthedocs.io/) by running
    `jupytext --sync` on the updated notebooks; for example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑 ipynb 或 md 版本的笔记本后，您可以通过运行 `jupytext --sync` 来同步这两个版本的内容；例如：
- en: '[PRE45]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The jupytext version should match that specified in [.pre-commit-config.yaml](https://github.com/google/jax/blob/main/.pre-commit-config.yaml).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`jupytext` 版本应与 [.pre-commit-config.yaml](https://github.com/google/jax/blob/main/.pre-commit-config.yaml)
    中指定的版本匹配。'
- en: 'To check that the markdown and ipynb files are properly synced, you may use
    the [pre-commit](https://pre-commit.com/) framework to perform the same check
    used by the github CI:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 markdown 和 ipynb 文件是否正确同步，可以使用 [pre-commit](https://pre-commit.com/) 框架执行与
    github CI 相同的检查：
- en: '[PRE46]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Creating new notebooks
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建新的笔记本
- en: 'If you are adding a new notebook to the documentation and would like to use
    the `jupytext --sync` command discussed here, you can set up your notebook for
    jupytext by using the following command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要向文档添加新的笔记本，并希望使用此处讨论的 `jupytext --sync` 命令，可以通过以下命令设置您的笔记本以使用 jupytext：
- en: '[PRE47]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This works by adding a `"jupytext"` metadata field to the notebook file which
    specifies the desired formats, and which the `jupytext --sync` command recognizes
    when invoked.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过在笔记本文件中添加一个 `"jupytext"` 元数据字段来实现的，该字段指定了所需的格式，并在调用 `jupytext --sync` 命令时被识别。
- en: Notebooks within the Sphinx build
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Sphinx 构建内的笔记本
- en: Some of the notebooks are built automatically as part of the pre-submit checks
    and as part of the [Read the docs](https://jax.readthedocs.io/en/latest) build.
    The build will fail if cells raise errors. If the errors are intentional, you
    can either catch them, or tag the cell with `raises-exceptions` metadata ([example
    PR](https://github.com/google/jax/pull/2402/files)). You have to add this metadata
    by hand in the `.ipynb` file. It will be preserved when somebody else re-saves
    the notebook.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一些笔记本是作为预提交检查的一部分和作为 [Read the docs](https://jax.readthedocs.io/en/latest) 构建的一部分自动生成的。如果单元格引发错误，则构建将失败。如果错误是有意的，您可以捕获它们，或者将单元格标记为
    `raises-exceptions` 元数据（[示例 PR](https://github.com/google/jax/pull/2402/files)）。您必须在
    `.ipynb` 文件中手动添加此元数据。当其他人重新保存笔记本时，它将被保留。
- en: We exclude some notebooks from the build, e.g., because they contain long computations.
    See `exclude_patterns` in [conf.py](https://github.com/google/jax/blob/main/docs/conf.py).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们排除一些笔记本的构建，例如，因为它们包含长时间的计算。请参阅 [conf.py](https://github.com/google/jax/blob/main/docs/conf.py)
    中的 `exclude_patterns`。
- en: Documentation building on `readthedocs.io`
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `readthedocs.io` 上构建文档
- en: JAX’s auto-generated documentation is at [`jax.readthedocs.io/`](https://jax.readthedocs.io/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 的自动生成文档位于 [`jax.readthedocs.io/`](https://jax.readthedocs.io/)。
- en: The documentation building is controlled for the entire project by the [readthedocs
    JAX settings](https://readthedocs.org/dashboard/jax). The current settings trigger
    a documentation build as soon as code is pushed to the GitHub `main` branch. For
    each code version, the building process is driven by the `.readthedocs.yml` and
    the `docs/conf.py` configuration files.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 整个项目的文档构建受 [readthedocs JAX settings](https://readthedocs.org/dashboard/jax)
    的控制。当前的设置在代码推送到 GitHub 的 `main` 分支后会触发文档构建。对于每个代码版本，构建过程由 `.readthedocs.yml` 和
    `docs/conf.py` 配置文件驱动。
- en: For each automated documentation build you can see the [documentation build
    logs](https://readthedocs.org/projects/jax/builds/).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个自动化文档构建，您可以查看 [documentation build logs](https://readthedocs.org/projects/jax/builds/)。
- en: If you want to test the documentation generation on Readthedocs, you can push
    code to the `test-docs` branch. That branch is also built automatically, and you
    can see the generated documentation [here](https://jax.readthedocs.io/en/test-docs/).
    If the documentation build fails you may want to [wipe the build environment for
    test-docs](https://docs.readthedocs.io/en/stable/guides/wipe-environment.html).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在 Readthedocs 上测试文档生成，请将代码推送到 `test-docs` 分支。该分支也将自动构建，并且您可以在这里查看生成的文档 [here](https://jax.readthedocs.io/en/test-docs/)。如果文档构建失败，您可能希望
    [清除 test-docs 的构建环境](https://docs.readthedocs.io/en/stable/guides/wipe-environment.html)。
- en: 'For a local test, I was able to do it in a fresh directory by replaying the
    commands I saw in the Readthedocs logs:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地测试中，我能够在一个全新的目录中通过重放我在 Readthedocs 日志中看到的命令来完成：
- en: '[PRE48]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
