- en: ORM Exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/exceptions.html](https://docs.sqlalchemy.org/en/20/orm/exceptions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SQLAlchemy ORM exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [ConcurrentModificationError](#sqlalchemy.orm.exc.ConcurrentModificationError)
    | alias of [`StaleDataError`](#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")
    |'
  prefs: []
  type: TYPE_TB
- en: '| [NO_STATE](#sqlalchemy.orm.exc.NO_STATE) | Exception types that may be raised
    by instrumentation implementations. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`StaleDataError`](#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: An attempt to access unloaded attributes on a mapped instance that is detached.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.DetachedInstanceError`](#sqlalchemy.orm.exc.DetachedInstanceError
    "sqlalchemy.orm.exc.DetachedInstanceError") ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A invalid condition was detected during flush().
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.FlushError`](#sqlalchemy.orm.exc.FlushError "sqlalchemy.orm.exc.FlushError")
    ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: A loader strategy for an attribute does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.LoaderStrategyException`](#sqlalchemy.orm.exc.LoaderStrategyException
    "sqlalchemy.orm.exc.LoaderStrategyException") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Exception types that may be raised by instrumentation implementations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A refresh operation failed to retrieve the database row corresponding to an
    object’s known primary key identity.
  prefs: []
  type: TYPE_NORMAL
- en: A refresh operation proceeds when an expired attribute is accessed on an object,
    or when [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    is used to retrieve an object which is, upon retrieval, detected as expired. A
    SELECT is emitted for the target row based on primary key; if no row is returned,
    this exception is raised.
  prefs: []
  type: TYPE_NORMAL
- en: The true meaning of this exception is simply that no row exists for the primary
    key identifier associated with a persistent object. The row may have been deleted,
    or in some cases the primary key updated to a new value, outside of the ORM’s
    management of the target object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.ObjectDeletedError`](#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: An operation cannot complete due to an object being garbage collected.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.ObjectDereferencedError`](#sqlalchemy.orm.exc.ObjectDereferencedError
    "sqlalchemy.orm.exc.ObjectDereferencedError") ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: An operation encountered database state that is unaccounted for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditions which cause this to happen include:'
  prefs: []
  type: TYPE_NORMAL
- en: A flush may have attempted to update or delete rows and an unexpected number
    of rows were matched during the UPDATE or DELETE statement. Note that when version_id_col
    is used, rows in UPDATE or DELETE statements are also matched against the current
    known version identifier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mapped object with version_id_col was refreshed, and the version number coming
    back from the database does not match that of the object itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A object is detached from its parent object, however the object was previously
    attached to a different parent identity which was garbage collected, and a decision
    cannot be made if the new parent was really the most recent “parent”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.StaleDataError`](#sqlalchemy.orm.exc.StaleDataError
    "sqlalchemy.orm.exc.StaleDataError") ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: An mapping operation was requested for an unknown class.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.UnmappedClassError`](#sqlalchemy.orm.exc.UnmappedClassError
    "sqlalchemy.orm.exc.UnmappedClassError") ([`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError
    "sqlalchemy.orm.exc.UnmappedError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Mapping operation was requested on an unknown column.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.UnmappedColumnError`](#sqlalchemy.orm.exc.UnmappedColumnError
    "sqlalchemy.orm.exc.UnmappedColumnError") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Base for exceptions that involve expected mappings not present.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError
    "sqlalchemy.orm.exc.UnmappedError") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: An mapping operation was requested for an unknown instance.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.exc.UnmappedInstanceError`](#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError") ([`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError
    "sqlalchemy.orm.exc.UnmappedError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
