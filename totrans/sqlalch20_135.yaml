- en: 0.6 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0.6 变更日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_06.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_06.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_06.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_06.html)
- en: 0.6.9
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.9
- en: 'Released: Sat May 05 2012'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年5月5日星期六
- en: general
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Adjusted the “importlater” mechanism, which is used internally to resolve import
    cycles, such that the usage of __import__ is completed when the import of sqlalchemy
    or sqlalchemy.orm is done, thereby avoiding any usage of __import__ after the
    application starts new threads, fixes.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了“importlater”机制，该机制在内部用于解决导入循环，使得在导入 sqlalchemy 或 sqlalchemy.orm 之后完成对 __import__
    的使用，从而避免在应用程序启动新线程后继续使用 __import__，修复了问题。
- en: 'References: [#2279](https://www.sqlalchemy.org/trac/ticket/2279)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2279](https://www.sqlalchemy.org/trac/ticket/2279)
- en: orm
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: fixed inappropriate evaluation of user-mapped object in a boolean context within
    query.get().
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在查询.get()中对用户映射对象在布尔上下文中的不当评估。
- en: 'References: [#2310](https://www.sqlalchemy.org/trac/ticket/2310)'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2310](https://www.sqlalchemy.org/trac/ticket/2310)
- en: '**[orm] [bug]**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the error formatting raised when a tuple is inadvertently passed to session.query().
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当意外传递元组给 session.query() 时引发的错误格式化。
- en: 'References: [#2297](https://www.sqlalchemy.org/trac/ticket/2297)'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2297](https://www.sqlalchemy.org/trac/ticket/2297)
- en: '**[orm]**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the source clause used by query.join() would be inconsistent
    if against a column expression that combined multiple entities together.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即由 query.join() 使用的源子句在针对将多个实体组合在一起的列表达式时会不一致。
- en: 'References: [#2197](https://www.sqlalchemy.org/trac/ticket/2197)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2197](https://www.sqlalchemy.org/trac/ticket/2197)
- en: '**[orm]**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug apparent only in Python 3 whereby sorting of persistent + pending
    objects during flush would produce an illegal comparison, if the persistent object
    primary key is not a single integer.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了仅在 Python 3 中显现的错误，即在 flush 期间对持久性 + 待处理对象进行排序会产生非法比较，如果持久性对象的主键不是单个整数。
- en: 'References: [#2228](https://www.sqlalchemy.org/trac/ticket/2228)'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2228](https://www.sqlalchemy.org/trac/ticket/2228)
- en: '**[orm]**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where query.join() + aliased=True from a joined-inh structure to itself
    on relationship() with join condition on the child table would convert the lead
    entity into the joined one inappropriately.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在从具有 join 条件的子表到自身的 joined-inh 结构上使用 query.join() + aliased=True 时，将不适当地将主实体转换为连接实体。
- en: 'References: [#2234](https://www.sqlalchemy.org/trac/ticket/2234)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2234](https://www.sqlalchemy.org/trac/ticket/2234)
- en: '**[orm]**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper.order_by attribute would be ignored in the “inner”
    query within a subquery eager load. .
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即 mapper.order_by 属性在子查询急加载中的“内部”查询中将被忽略。
- en: 'References: [#2287](https://www.sqlalchemy.org/trac/ticket/2287)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2287](https://www.sqlalchemy.org/trac/ticket/2287)
- en: '**[orm]**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if a mapped class redefined __hash__() or __eq__() to something
    non-standard, which is a supported use case as SQLA should never consult these,
    the methods would be consulted if the class was part of a “composite” (i.e. non-single-entity)
    result set.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果映射类重新定义了 __hash__() 或 __eq__() 为非标准内容，这是一个受支持的用例，因为 SQLA 不应该查询这些内容，如果该类是“复合”（即非单个实体）结果集的一部分，则会查询这些方法。
- en: 'References: [#2215](https://www.sqlalchemy.org/trac/ticket/2215)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2215](https://www.sqlalchemy.org/trac/ticket/2215)
- en: '**[orm]**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed subtle bug that caused SQL to blow up if: column_property() against subquery
    + joinedload + LIMIT + order by the column property() occurred. .'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个微妙的错误，导致如果出现：column_property()针对子查询 + joinedload + LIMIT + 按列属性排序，则 SQL
    会崩溃。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[orm]**'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The join condition produced by with_parent as well as when using a “dynamic”
    relationship against a parent will generate unique bindparams, rather than incorrectly
    repeating the same bindparam. .
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由 with_parent 生成的连接条件以及针对父级使用“dynamic”关系时将生成唯一的 bindparams，而不是错误地重复相同的 bindparam。
- en: 'References: [#2207](https://www.sqlalchemy.org/trac/ticket/2207)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2207](https://www.sqlalchemy.org/trac/ticket/2207)
- en: '**[orm]**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the “no statement condition” assertion in Query which would attempt
    to raise if a generative method were called after from_statement() were called..
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中的“无语句条件”断言，如果在调用 from_statement() 后调用生成方法，则会尝试引发异常。
- en: 'References: [#2199](https://www.sqlalchemy.org/trac/ticket/2199)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2199](https://www.sqlalchemy.org/trac/ticket/2199)
- en: '**[orm]**'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Cls.column.collate(“some collation”) now works.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Cls.column.collate(“some collation”) 现在可用。
- en: 'References: [#1776](https://www.sqlalchemy.org/trac/ticket/1776)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1776](https://www.sqlalchemy.org/trac/ticket/1776)
- en: examples
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Adjusted dictlike-polymorphic.py example to apply the CAST such that it works
    on PG, other databases.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整 dictlike-polymorphic.py 示例以应用 CAST，使其在 PG 和其他数据库上运行。
- en: 'References: [#2266](https://www.sqlalchemy.org/trac/ticket/2266)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2266](https://www.sqlalchemy.org/trac/ticket/2266)
- en: engine
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Backported the fix for introduced in 0.7.4, which ensures that the connection
    is in a valid state before attempting to call rollback()/prepare()/release() on
    savepoint and two-phase transactions.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回溯了在 0.7.4 中引入的修复，确保在尝试在保存点和两阶段事务上调用 rollback()/prepare()/release() 之前连接处于有效状态。
- en: 'References: [#2317](https://www.sqlalchemy.org/trac/ticket/2317)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2317](https://www.sqlalchemy.org/trac/ticket/2317)
- en: sql
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql]**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed two subtle bugs involving column correspondence in a selectable, one with
    the same labeled subquery repeated, the other when the label has been “grouped”
    and loses itself. Affects.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个关于在可选择的列中的列对应的微妙错误，一个是重复使用相同标记的子查询，另一个是当标记被“分组”并丢失时。影响。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[sql]**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed bug whereby “warn on unicode” flag would get set for the String type when
    used with certain dialects. This bug is not in 0.7.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当与某些方言一起使用 String 类型时，“warn on unicode” 标志会被设置的 bug。这个 bug 不在 0.7 版本中。
- en: '**[sql]**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed bug whereby with_only_columns() method of Select would fail if a selectable
    were passed.. However, the FROM behavior is still incorrect here, so you need
    0.7 in any case for this use case to be usable.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Select 的 with_only_columns() 方法如果传递了可选择的话会失败的 bug。然而，这里的 FROM 行为仍然不正确，所以无论如何你需要
    0.7 版本才能使用这种用例。
- en: 'References: [#2270](https://www.sqlalchemy.org/trac/ticket/2270)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2270](https://www.sqlalchemy.org/trac/ticket/2270)
- en: schema
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Added an informative error message when ForeignKeyConstraint refers to a column
    name in the parent that is not found.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 ForeignKeyConstraint 引用父级中未找到的列名时，添加了一个信息性错误消息。
- en: postgresql
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: '**[postgresql]**'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug related to whereby the same modified index behavior in PG 9 affected
    primary key reflection on a renamed column..
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 PG 9 中相同修改的索引行为影响重���名列上的主键反射的 bug。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: mysql
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL
- en: '**[mysql]**'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed OurSQL dialect to use ansi-neutral quote symbol “’” for XA commands instead
    of ‘”’. .
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 OurSQL 方言在 XA 命令中使用 ansi-neutral 引号符“’”而不是‘”’的问题。
- en: 'References: [#2186](https://www.sqlalchemy.org/trac/ticket/2186)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2186](https://www.sqlalchemy.org/trac/ticket/2186)
- en: '**[mysql]**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a CREATE TABLE will put the COLLATE option after CHARSET, which appears to be
    part of MySQL’s arbitrary rules regarding if it will actually work or not.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CREATE TABLE 将在 CHARSET 之后放置 COLLATE 选项，这似乎是 MySQL 关于它是否实际上会起作用的任意规则的一部分。
- en: 'References: [#2225](https://www.sqlalchemy.org/trac/ticket/2225)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2225](https://www.sqlalchemy.org/trac/ticket/2225)
- en: mssql
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSSQL
- en: '**[mssql] [bug]**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Decode incoming values when retrieving list of index names and the names of
    columns within those indexes.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在检索索引名称列表和这些索引中的列名时解码传入的值。
- en: 'References: [#2269](https://www.sqlalchemy.org/trac/ticket/2269)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2269](https://www.sqlalchemy.org/trac/ticket/2269)
- en: oracle
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle]**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-00028 to disconnect codes, use cx_oracle _Error.code to get at the
    code,.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ORA-00028 添加到断开代码中，使用 cx_oracle _Error.code 来获取代码。
- en: 'References: [#2200](https://www.sqlalchemy.org/trac/ticket/2200)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2200](https://www.sqlalchemy.org/trac/ticket/2200)
- en: '**[oracle]**'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: repaired the oracle.RAW type which did not generate the correct DDL.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未生成正确 DDL 的 Oracle.RAW 类型。
- en: 'References: [#2220](https://www.sqlalchemy.org/trac/ticket/2220)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2220](https://www.sqlalchemy.org/trac/ticket/2220)
- en: '**[oracle]**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added CURRENT to reserved word list.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 CURRENT 添加到保留字列表中。
- en: 'References: [#2212](https://www.sqlalchemy.org/trac/ticket/2212)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2212](https://www.sqlalchemy.org/trac/ticket/2212)
- en: 0.6.8
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.8
- en: 'Released: Sun Jun 05 2011'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年6月5日 星期日
- en: orm
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Calling query.get() against a column-based entity is invalid, this condition
    now raises a deprecation warning.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对基于列的实体调用 query.get() 是无效的，现在会引发弃用警告。
- en: 'References: [#2144](https://www.sqlalchemy.org/trac/ticket/2144)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2144](https://www.sqlalchemy.org/trac/ticket/2144)
- en: '**[orm]**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: a non_primary mapper will inherit the _identity_class of the primary mapper.
    This so that a non_primary established against a class that’s normally in an inheritance
    mapping will produce results that are identity-map compatible with that of the
    primary mapper
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主映射器将继承主映射器的_identity_class。这样，针对通常处于继承映射中的类建立的非主映射器将产生与主映射器兼容的标识映射结果。
- en: 'References: [#2151](https://www.sqlalchemy.org/trac/ticket/2151)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2151](https://www.sqlalchemy.org/trac/ticket/2151)
- en: '**[orm]**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Backported 0.7’s identity map implementation, which does not use a mutex around
    removal. This as some users were still getting deadlocks despite the adjustments
    in 0.6.7; the 0.7 approach that doesn’t use a mutex does not appear to produce
    “dictionary changed size” issues, the original rationale for the mutex.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回溯了0.7的标识映射实现，该实现不在删除周围使用互斥体。由于一些用户尽管在0.6.7中进行了调整仍然遇到死锁问题；0.7不使用互斥体的方法似乎不会产生“字典更改大小”问题，这是互斥体的最初理由。
- en: 'References: [#2148](https://www.sqlalchemy.org/trac/ticket/2148)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2148](https://www.sqlalchemy.org/trac/ticket/2148)
- en: '**[orm]**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the error message emitted for “can’t execute syncrule for destination
    column ‘q’; mapper ‘X’ does not map this column” to reference the correct mapper.
    .
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法为目标列‘q’执行同步规则；映射‘X’未映射此列”发出的错误消息，以引用正确的映射器。
- en: 'References: [#2163](https://www.sqlalchemy.org/trac/ticket/2163)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2163](https://www.sqlalchemy.org/trac/ticket/2163)
- en: '**[orm]**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where determination of “self referential” relationship would fail
    with no workaround for joined-inh subclass related to itself, or joined-inh subclass
    related to a subclass of that with no cols in the sub-sub class in the join condition.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了确定“自引用”关系时出现的错误，对于没有与自身相关的joined-inh子类或与没有在连接条件中的子子类中的列相关的joined-inh子类，没有解决方法。
- en: 'References: [#2149](https://www.sqlalchemy.org/trac/ticket/2149)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2149](https://www.sqlalchemy.org/trac/ticket/2149)
- en: '**[orm]**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper() will ignore non-configured foreign keys to unrelated tables when determining
    inherit condition between parent and child class. This is equivalent to behavior
    already applied to declarative. Note that 0.7 has a more comprehensive solution
    to this, altering how join() itself determines an FK error.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定父类和子类之间的继承条件时，mapper()将忽略与不相关表的未配置外键。这等同于已应用于声明性的行为。请注意，0.7有一个更全面的解决方案，改变了join()本身如何确定FK错误。
- en: 'References: [#2153](https://www.sqlalchemy.org/trac/ticket/2153)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2153](https://www.sqlalchemy.org/trac/ticket/2153)
- en: '**[orm]**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper mapped to an anonymous alias would fail if logging
    were used, due to unescaped % sign in the alias name.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了映射到匿名别名的映射器如果使用日志记录将失败的错误，因为别名中的未转义%符号。
- en: 'References: [#2171](https://www.sqlalchemy.org/trac/ticket/2171)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2171](https://www.sqlalchemy.org/trac/ticket/2171)
- en: '**[orm]**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modify the text of the message which occurs when the “identity” key isn’t detected
    on flush, to include the common cause that the Column isn’t set up to detect auto-increment
    correctly;.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了在刷新时未检测到“identity”键时出现的消息文本，包括常见原因，即列未正确设置以检测自动增量。
- en: 'References: [#2170](https://www.sqlalchemy.org/trac/ticket/2170)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2170](https://www.sqlalchemy.org/trac/ticket/2170)
- en: '**[orm]**'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where transaction-level “deleted” collection wouldn’t be cleared of
    expunged states, raising an error if they later became transient.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事务级别的“已删除”集合不会清除已删除状态的错误，如果它们后来变为瞬态，则会引发错误。
- en: 'References: [#2182](https://www.sqlalchemy.org/trac/ticket/2182)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2182](https://www.sqlalchemy.org/trac/ticket/2182)
- en: engine
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Adjusted the __contains__() method of a RowProxy result row such that no exception
    throw is generated internally; NoSuchColumnError() also will generate its message
    regardless of whether or not the column construct can be coerced to a string..
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了RowProxy结果行的__contains__()方法，使其在内部不生成异常抛出；无论列构造是否可以强制转换为字符串，NoSuchColumnError()也将生成其消息。
- en: 'References: [#2178](https://www.sqlalchemy.org/trac/ticket/2178)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2178](https://www.sqlalchemy.org/trac/ticket/2178)
- en: sql
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby if FetchedValue was passed to column server_onupdate, it would
    not have its parent “column” assigned, added test coverage for all column default
    assignment patterns.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果将FetchedValue传递给列server_onupdate，则其父“列”不会被分配的错误，为所有列默认分配模式添加了��试覆盖。
- en: 'References: [#2147](https://www.sqlalchemy.org/trac/ticket/2147)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2147](https://www.sqlalchemy.org/trac/ticket/2147)
- en: '**[sql]**'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby nesting a label of a select() with another label in it would
    produce incorrect exported columns. Among other things this would break an ORM
    column_property() mapping against another column_property(). .
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将 select() 的标签嵌套在另一个标签中会产生不正确导出列的 bug。其中之一是这会破坏针对另一个 column_property() 的
    ORM column_property() 映射。
- en: 'References: [#2167](https://www.sqlalchemy.org/trac/ticket/2167)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2167](https://www.sqlalchemy.org/trac/ticket/2167)
- en: postgresql
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug affecting PG 9 whereby index reflection would fail if against a column
    whose name had changed. .
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响 PG 9 的 bug，即反射索引会失败，如果反射的列名已更改。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141)
- en: '**[postgresql]**'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Some unit test fixes regarding numeric arrays, MATCH operator. A potential floating-point
    inaccuracy issue was fixed, and certain tests of the MATCH operator only execute
    within an EN-oriented locale for now. .
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于数字数组、MATCH 运算符的一些单元测试修复。修复了潜在的浮点不准确性问题，并且目前某�� MATCH 运算符的测试仅在 EN 本地环境中执行。
- en: 'References: [#2175](https://www.sqlalchemy.org/trac/ticket/2175)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2175](https://www.sqlalchemy.org/trac/ticket/2175)
- en: mssql
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug in MSSQL dialect whereby the aliasing applied to a schema-qualified
    table would leak into enclosing select statements.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MSSQL 方言中的 bug，即应用于模式限定表的别名会泄漏到封闭的 select 语句中。
- en: 'References: [#2169](https://www.sqlalchemy.org/trac/ticket/2169)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2169](https://www.sqlalchemy.org/trac/ticket/2169)
- en: '**[mssql]**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug whereby DATETIME2 type would fail on the “adapt” step when used in
    result sets or bound parameters. This issue is not in 0.7.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 DATETIME2 类型在结果集或绑定参数中使用时在“适应”步骤中失败的 bug。此问题不在 0.7 版本中。
- en: 'References: [#2159](https://www.sqlalchemy.org/trac/ticket/2159)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2159](https://www.sqlalchemy.org/trac/ticket/2159)
- en: 0.6.7
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.7
- en: 'Released: Wed Apr 13 2011'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011 年 4 月 13 日（星期三）
- en: orm
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Tightened the iterate vs. remove mutex around the identity map iteration, attempting
    to reduce the chance of an (extremely rare) reentrant gc operation causing a deadlock.
    Might remove the mutex in 0.7.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加强了关于标识映射迭代与删除的互斥锁，试图减少极其罕见的重新进入 gc 操作导致死锁的机会。可能会在 0.7 版本中移除互斥锁。
- en: 'References: [#2087](https://www.sqlalchemy.org/trac/ticket/2087)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2087](https://www.sqlalchemy.org/trac/ticket/2087)
- en: '**[orm]**'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a name argument to Query.subquery(), to allow a fixed name to be assigned
    to the alias object.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query.subquery() 添加了一个 name 参数，以允许为别名对象分配固定名称。
- en: 'References: [#2030](https://www.sqlalchemy.org/trac/ticket/2030)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2030](https://www.sqlalchemy.org/trac/ticket/2030)
- en: '**[orm]**'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when a joined-table inheriting mapper has no primary keys
    on the locally mapped table (but has pks on the superclass table).
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当连接表继承的映射器在本地映射表上没有主键（但在超类表上有主键）时，会发出警告。
- en: 'References: [#2019](https://www.sqlalchemy.org/trac/ticket/2019)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2019](https://www.sqlalchemy.org/trac/ticket/2019)
- en: '**[orm]**'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where “middle” class in a polymorphic hierarchy would have no ‘polymorphic_on’
    column if it didn’t also specify a ‘polymorphic_identity’, leading to strange
    errors upon refresh, wrong class loaded when querying from that target. Also emits
    the correct WHERE criterion when using single table inheritance.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态层次结构中的“中间”类如果没有指定“polymorphic_identity”也没有“polymorphic_on”列时会出现奇怪错误的 bug，导致在查询该目标时加载错误的类。在使用单表继承时也会发出正确的
    WHERE 条件。
- en: 'References: [#2038](https://www.sqlalchemy.org/trac/ticket/2038)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2038](https://www.sqlalchemy.org/trac/ticket/2038)
- en: '**[orm]**'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where a column with a SQL or server side default that was excluded
    from a mapping with include_properties or exclude_properties would result in UnmappedColumnError.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了具有 SQL 或服务器端默认值的列，如果使用 include_properties 或 exclude_properties 从映射中排除，将导致
    UnmappedColumnError 的 bug。
- en: 'References: [#1995](https://www.sqlalchemy.org/trac/ticket/1995)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1995](https://www.sqlalchemy.org/trac/ticket/1995)
- en: '**[orm]**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. This will be an exception
    in 0.7.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罕见情况下，如果在父对象被取消引用后发生了追加或类似事件的情况，会发出警告，这会阻止将父对象标记为会话中的“脏”状态。这将在 0.7 版本中成为异常。
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: '**[orm]**'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.options() whereby a path applied to a lazyload using string
    keys could overlap a same named attribute on the wrong entity. Note 0.7 has an
    updated version of this fix.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 query.options() 中的一个 bug，其中应用于使用字符串键的延迟加载的路径可能会与错误的实体上的同名属性重叠。注意，0.7 版本已更新了此修复版本。
- en: 'References: [#2098](https://www.sqlalchemy.org/trac/ticket/2098)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2098](https://www.sqlalchemy.org/trac/ticket/2098)
- en: '**[orm]**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reworded the exception raised when a flush is attempted of a subclass that is
    not polymorphic against the supertype.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了尝试刷新非多态子类时引发的异常的异常信息。
- en: 'References: [#2063](https://www.sqlalchemy.org/trac/ticket/2063)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2063](https://www.sqlalchemy.org/trac/ticket/2063)
- en: '**[orm]**'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to the state handling regarding backrefs, typically when autoflush=False,
    where the back-referenced collection wouldn’t properly handle add/removes with
    no net change. Thanks to Richard Murri for the test case + patch.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于反向引用的状态处理进行了一些修复，通常在 autoflush=False 时，当反向引用的集合没有真正处理没有净变化的添加/删除时。感谢 Richard
    Murri 提供了测试用例 + 补丁。
- en: 'References: [#2123](https://www.sqlalchemy.org/trac/ticket/2123)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2123](https://www.sqlalchemy.org/trac/ticket/2123)
- en: '**[orm]**'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a “having” clause would be copied from the inside to the outside query if from_self()
    were used..
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用 from_self()，则“having”子句将从内部复制到外部查询中。
- en: 'References: [#2130](https://www.sqlalchemy.org/trac/ticket/2130)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2130](https://www.sqlalchemy.org/trac/ticket/2130)
- en: examples
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples]**'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: The Beaker caching example allows a “query_cls” argument to the query_callable()
    function.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker 缓存示例允许在 query_callable() 函数中使用 “query_cls” 参数。
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: engine
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed bug in QueuePool, SingletonThreadPool whereby connections that were discarded
    via overflow or periodic cleanup() were not explicitly closed, leaving garbage
    collection to the task instead. This generally only affects non-reference-counting
    backends like Jython and PyPy. Thanks to Jaimy Azle for spotting this.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 QueuePool、SingletonThreadPool 中的错误，在溢出或定期 cleanup() 时丢弃的连接未显式关闭，导致垃圾回收任务未执行。这通常只影响像
    Jython 和 PyPy 这样的非引用计数后端。感谢 Jaimy Azle 发现了这个问题。
- en: 'References: [#2102](https://www.sqlalchemy.org/trac/ticket/2102)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2102](https://www.sqlalchemy.org/trac/ticket/2102)
- en: sql
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy(), as used in table.tometadata(), copies the ‘doc’ attribute.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy()，如在 table.tometadata() 中使用，将复制 'doc' 属性。
- en: 'References: [#2028](https://www.sqlalchemy.org/trac/ticket/2028)'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2028](https://www.sqlalchemy.org/trac/ticket/2028)
- en: '**[sql]**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added some defs to the resultproxy.c extension so that the extension compiles
    and runs on Python 2.4.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 resultproxy.c 扩展中添加了一些 defs，以便扩展能够在 Python 2.4 上编译和运行。
- en: 'References: [#2023](https://www.sqlalchemy.org/trac/ticket/2023)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2023](https://www.sqlalchemy.org/trac/ticket/2023)
- en: '**[sql]**'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The compiler extension now supports overriding the default compilation of expression._BindParamClause
    including that the auto-generated binds within the VALUES/SET clause of an insert()/update()
    statement will also use the new compilation rules.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在支持重写 expression._BindParamClause 的默认编译，包括 insert()/update() 语句中 VALUES/SET
    子句中的自动生成绑定也将使用新的编译规则。
- en: 'References: [#2042](https://www.sqlalchemy.org/trac/ticket/2042)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2042](https://www.sqlalchemy.org/trac/ticket/2042)
- en: '**[sql]**'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added accessors to ResultProxy “returns_rows”, “is_insert”
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 ResultProxy 添加了访问器 “returns_rows”、“is_insert”
- en: 'References: [#2089](https://www.sqlalchemy.org/trac/ticket/2089)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2089](https://www.sqlalchemy.org/trac/ticket/2089)
- en: '**[sql]**'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The limit/offset keywords to select() as well as the value passed to select.limit()/offset()
    will be coerced to integer.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 中的 limit/offset 关键字以及传递给 select.limit()/offset() 的值将被强制转换为整数。
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: postgresql
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: When explicit sequence execution derives the name of the auto-generated sequence
    of a SERIAL column, which currently only occurs if implicit_returning=False, now
    accommodates if the table + column name is greater than 63 characters using the
    same logic PostgreSQL uses.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当显式序列执行派生 SERIAL 列的自动生成序列的名称时，目前只有在 implicit_returning=False 时才会发生，现在会适应如果表名
    + 列名大于 63 个字符，则使用与 PostgreSQL 相同的逻辑。
- en: 'References: [#1083](https://www.sqlalchemy.org/trac/ticket/1083)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1083](https://www.sqlalchemy.org/trac/ticket/1083)
- en: '**[postgresql]**'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added an additional libpq message to the list of “disconnect” exceptions, “could
    not receive data from server”
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个额外的 libpq 消息添加到“断开连接”异常列表中，“无法从服务器接收数据”
- en: 'References: [#2044](https://www.sqlalchemy.org/trac/ticket/2044)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2044](https://www.sqlalchemy.org/trac/ticket/2044)
- en: '**[postgresql]**'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added RESERVED_WORDS for postgresql dialect.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了postgresql方言的RESERVED_WORDS。
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[postgresql]**'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the BIT type to allow a “length” parameter, “varying” parameter. Reflection
    also fixed.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了BIT类型，允许“length”参数和“varying”参数。反射也修复了。
- en: 'References: [#2073](https://www.sqlalchemy.org/trac/ticket/2073)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2073](https://www.sqlalchemy.org/trac/ticket/2073)
- en: mysql
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL
- en: '**[mysql]**'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: oursql dialect accepts the same “ssl” arguments in create_engine() as that of
    MySQLdb.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在create_engine()中，oursql方言接受与MySQLdb相同的“ssl”参数。
- en: 'References: [#2047](https://www.sqlalchemy.org/trac/ticket/2047)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2047](https://www.sqlalchemy.org/trac/ticket/2047)
- en: sqlite
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQLite
- en: '**[sqlite]**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed bug where reflection of foreign key created as “REFERENCES <tablename>”
    without col name would fail.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了没有列名创建的外键反射失败的错误。
- en: 'References: [#2115](https://www.sqlalchemy.org/trac/ticket/2115)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2115](https://www.sqlalchemy.org/trac/ticket/2115)
- en: mssql
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSSQL
- en: '**[mssql]**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the query used to get the definition of a view, typically when using
    the Inspector interface, to use sys.sql_modules instead of the information schema,
    thereby allowing views definitions longer than 4000 characters to be fully returned.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了用于获取视图定义的查询，通常在使用Inspector接口时，使用sys.sql_modules而不是信息模式，从而允许完全返回超过4000个字符的视图定义。
- en: 'References: [#2071](https://www.sqlalchemy.org/trac/ticket/2071)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2071](https://www.sqlalchemy.org/trac/ticket/2071)
- en: oracle
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle]**'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Using column names that would require quotes for the column itself or for a
    name-generated bind parameter, such as names with special characters, underscores,
    non-ascii characters, now properly translate bind parameter keys when talking
    to cx_oracle.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在正确地将对cx_oracle的绑定参数键进行转换，以便与会引起列本身需要引号或者是为列生成的绑定参数，例如具有特殊字符、下划线、非ASCII字符的名称。
- en: 'References: [#2100](https://www.sqlalchemy.org/trac/ticket/2100)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2100](https://www.sqlalchemy.org/trac/ticket/2100)
- en: '**[oracle]**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle dialect adds use_binds_for_limits=False create_engine() flag, will render
    the LIMIT/OFFSET values inline instead of as binds, reported to modify the execution
    plan used by Oracle.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言添加了use_binds_for_limits=False create_engine()标志，将LIMIT/OFFSET值内联呈现，而不是作为绑定，据说修改了Oracle使用的执行计划。
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: misc
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '**[informix]**'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Added RESERVED_WORDS informix dialect.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了informix方言的RESERVED_WORDS。
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[firebird]**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The “implicit_returning” flag on create_engine() is honored if set to False.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将“implicit_returning”标志设置为False，则在create_engine()上将其视为有效。
- en: 'References: [#2083](https://www.sqlalchemy.org/trac/ticket/2083)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2083](https://www.sqlalchemy.org/trac/ticket/2083)
- en: '**[ext]**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The horizontal_shard ShardedSession class accepts the common Session argument
    “query_cls” as a constructor argument, to enable further subclassing of ShardedQuery.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: horizontal_shard ShardedSession类接受公共Session参数“query_cls”作为构造函数参数，以启用对ShardedQuery的进一步子类化。
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: '**[declarative]**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Added an explicit check for the case that the name ‘metadata’ is used for a
    column attribute on a declarative class.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对在声明类的列属性上使用名称‘metadata’的情况的明确检查。
- en: 'References: [#2050](https://www.sqlalchemy.org/trac/ticket/2050)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2050](https://www.sqlalchemy.org/trac/ticket/2050)
- en: '**[declarative]**'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fix error message referencing old @classproperty name to reference @declared_attr
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复错误消息引用旧的@classproperty名称以引用@declared_attr
- en: 'References: [#2061](https://www.sqlalchemy.org/trac/ticket/2061)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2061](https://www.sqlalchemy.org/trac/ticket/2061)
- en: '**[declarative]**'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Arguments in __mapper_args__ that aren’t “hashable” aren’t mistaken for always-hashable,
    possibly-column arguments.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __mapper_args__中的参数如果不是“可哈希的”，则不会被错误地视为总是可哈希的，可能是列参数。
- en: 'References: [#2091](https://www.sqlalchemy.org/trac/ticket/2091)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2091](https://www.sqlalchemy.org/trac/ticket/2091)
- en: '**[documentation]**'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Documented SQLite DATE/TIME/DATETIME types.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录了SQLite DATE/TIME/DATETIME类型。
- en: 'References: [#2029](https://www.sqlalchemy.org/trac/ticket/2029)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2029](https://www.sqlalchemy.org/trac/ticket/2029)
- en: 0.6.6
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.6
- en: 'Released: Sat Jan 08 2011'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年1月8日（星期六）
- en: orm
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby a non-“mutable” attribute modified event which occurred on
    an object that was clean except for preceding mutable attribute changes would
    fail to strongly reference itself in the identity map. This would cause the object
    to be garbage collected, losing track of any changes that weren’t previously saved
    in the “mutable changes” dictionary.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在干净的对象上发生非“mutable”属性修改事件，除了之前的可变属性更改之外，对象将无法强引用自身在标识映射中。这将导致对象被垃圾回收，丢失任何之前未保存在“mutable
    changes”字典中的更改。
- en: '**[orm]**'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby “passive_deletes=’all’” wasn’t passing the correct symbols
    to lazy loaders during flush, thereby causing an unwarranted load.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“passive_deletes='all'”未在flush期间向懒加载器传递正确符号的bug，从而导致不必要的加载。
- en: 'References: [#2013](https://www.sqlalchemy.org/trac/ticket/2013)'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2013](https://www.sqlalchemy.org/trac/ticket/2013)
- en: '**[orm]**'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which prevented composite mapped attributes from being used on a mapped
    select statement.. Note the workings of composite are slated to change significantly
    in 0.7.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止复合映射属性在映射选择语句中使用的bug。请注意，复合的工作方式在0.7中将发生重大变化。
- en: 'References: [#1997](https://www.sqlalchemy.org/trac/ticket/1997)'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1997](https://www.sqlalchemy.org/trac/ticket/1997)
- en: '**[orm]**'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: active_history flag also added to composite(). The flag has no effect in 0.6,
    but is instead a placeholder flag for forwards compatibility, as it applies in
    0.7 for composites.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: active_history标志也添加到composite()。该标志在0.6中没有效果，而是一个用于向前兼容性的占位符标志，因为它在0.7中适用于复合物。
- en: 'References: [#1976](https://www.sqlalchemy.org/trac/ticket/1976)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1976](https://www.sqlalchemy.org/trac/ticket/1976)
- en: '**[orm]**'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed uow bug whereby expired objects passed to Session.delete() would not have
    unloaded references or collections taken into account when deleting objects, despite
    passive_deletes remaining at its default of False.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了uow bug，即传递给Session.delete()的过期对象在删除对象时不会考虑未加载的引用或集合，尽管passive_deletes保持默认值False。
- en: 'References: [#2002](https://www.sqlalchemy.org/trac/ticket/2002)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2002](https://www.sqlalchemy.org/trac/ticket/2002)
- en: '**[orm]**'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when version_id_col is specified on an inheriting mapper
    when the inherited mapper already has one, if those column expressions are not
    the same.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在继承映射器上指定version_id_col时，如果继承的映射器已经有一个，并且这些列表达式不相同时，会发出警告。
- en: 'References: [#1987](https://www.sqlalchemy.org/trac/ticket/1987)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1987](https://www.sqlalchemy.org/trac/ticket/1987)
- en: '**[orm]**'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”innerjoin” flag doesn’t take effect along the chain of joinedload() joins if
    a previous join in that chain is an outer join, thus allowing primary rows without
    a referenced child row to be correctly returned in results.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在joinedload()连接链中的先前连接是外连接，则“innerjoin”标志不会沿着连接链生效，从而允许正确返回没有引用子行的主行。
- en: 'References: [#1954](https://www.sqlalchemy.org/trac/ticket/1954)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1954](https://www.sqlalchemy.org/trac/ticket/1954)
- en: '**[orm]**'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding “subqueryload” strategy whereby strategy would fail if the
    entity was an aliased() construct.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“subqueryload”策略的错误，即如果实体是aliased()构造，则策略将失败。
- en: 'References: [#1964](https://www.sqlalchemy.org/trac/ticket/1964)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1964](https://www.sqlalchemy.org/trac/ticket/1964)
- en: '**[orm]**'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding “subqueryload” strategy whereby the join would fail if using
    a multi-level load of the form from A->joined-subclass->C
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“subqueryload”策略的bug，即如果使用形式为A->joined-subclass->C的多级加载，则连接将失败。
- en: 'References: [#2014](https://www.sqlalchemy.org/trac/ticket/2014)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2014](https://www.sqlalchemy.org/trac/ticket/2014)
- en: '**[orm]**'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed indexing of Query objects by -1\. It was erroneously transformed to the
    empty slice -1:0 that resulted in IndexError.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通过-1对Query对象进行索引的错误。它错误地转换为导致IndexError的空切片-1:0。
- en: 'References: [#1968](https://www.sqlalchemy.org/trac/ticket/1968)'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1968](https://www.sqlalchemy.org/trac/ticket/1968)
- en: '**[orm]**'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The mapper argument “primary_key” can be passed as a single column as well as
    a list or tuple. The documentation examples that illustrated it as a scalar value
    have been changed to lists.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射器参数“primary_key”可以作为单个列传递，也可以作为列表或元组传递。以标量值为例的文档示例已更改为列表。
- en: 'References: [#1971](https://www.sqlalchemy.org/trac/ticket/1971)'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1971](https://www.sqlalchemy.org/trac/ticket/1971)
- en: '**[orm]**'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added active_history flag to relationship() and column_property(), forces attribute
    events to always load the “old” value, so that it’s available to attributes.get_history().
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向relationship()和column_property()添加了active_history标志，强制属性事件始终加载“旧”值，以便attributes.get_history()可以访问它。
- en: 'References: [#1961](https://www.sqlalchemy.org/trac/ticket/1961)'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1961](https://www.sqlalchemy.org/trac/ticket/1961)
- en: '**[orm]**'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.get() will raise if the number of params in a composite key is too large,
    as well as too small.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果复合键中的参数数量过大或过小，Query.get() 将会引发异常。
- en: 'References: [#1977](https://www.sqlalchemy.org/trac/ticket/1977)'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1977](https://www.sqlalchemy.org/trac/ticket/1977)
- en: '**[orm]**'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Backport of “optimized get” fix from 0.7, improves the generation of joined-inheritance
    “load expired row” behavior.
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 0.7 中回溯了“优化获取”修复，改善了联合继承“加载过期行”行为的生成。
- en: 'References: [#1992](https://www.sqlalchemy.org/trac/ticket/1992)'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1992](https://www.sqlalchemy.org/trac/ticket/1992)
- en: '**[orm]**'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A little more verbiage to the “primaryjoin” error, in an unusual condition that
    the join condition “works” for viewonly but doesn’t work for non-viewonly, and
    foreign_keys wasn’t used - adds “foreign_keys” to the suggestion. Also add “foreign_keys”
    to the suggestion for the generic “direction” error.
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“primaryjoin”错误中添加了更多详细信息，对于一个异常条件，join 条件对于 viewonly 工作但对于非 viewonly 不工作，且未使用
    foreign_keys - 在建议中添加“foreign_keys”。还将“foreign_keys”添加到一般的“direction”错误的建议中。
- en: examples
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: The versioning example now supports detection of changes in an associated relationship().
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本示例现在支持检测关联关系()中的更改。
- en: engine
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The “unicode warning” against non-unicode bind data is now raised only when
    the Unicode type is used explicitly; not when convert_unicode=True is used on
    the engine or String type.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当显式使用 Unicode 类型时，只有当 convert_unicode=True 用于引擎或 String 类型时，才会引发针对非 Unicode
    绑定数据的“unicode warning”，而不是当 convert_unicode=True 用于引擎或 String 类型时。
- en: '**[engine]**'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed memory leak in C version of Decimal result processor.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Decimal 结果处理器 C 版本的内存泄漏问题。
- en: 'References: [#1978](https://www.sqlalchemy.org/trac/ticket/1978)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1978](https://www.sqlalchemy.org/trac/ticket/1978)
- en: '**[engine]**'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Implemented sequence check capability for the C version of RowProxy, as well
    as 2.7 style “collections.Sequence” registration for RowProxy.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 RowProxy 的 C 版本实现了序列检查功能，以及对 RowProxy 实现了 2.7 风格的“collections.Sequence”注册。
- en: 'References: [#1871](https://www.sqlalchemy.org/trac/ticket/1871)'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1871](https://www.sqlalchemy.org/trac/ticket/1871)
- en: '**[engine]**'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Threadlocal engine methods rollback(), commit(), prepare() won’t raise if no
    transaction is in progress; this was a regression introduced in 0.6.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Threadlocal 引擎方法 rollback()、commit()、prepare() 在没有事务进行时不会引发异常；这是在 0.6 中引入的一个回归。
- en: 'References: [#1998](https://www.sqlalchemy.org/trac/ticket/1998)'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1998](https://www.sqlalchemy.org/trac/ticket/1998)
- en: '**[engine]**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Threadlocal engine returns itself upon begin(), begin_nested(); engine then
    implements contextmanager methods to allow the “with” statement.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Threadlocal 引擎在 begin()、begin_nested()后返回自身；然后引擎实现了上下文管理器方法，以允许“with”语句。
- en: 'References: [#2004](https://www.sqlalchemy.org/trac/ticket/2004)'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2004](https://www.sqlalchemy.org/trac/ticket/2004)
- en: sql
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed operator precedence rules for multiple chains of a single non-associative
    operator. I.e. “x - (y - z)” will compile as “x - (y - z)” and not “x - y - z”.
    Also works with labels, i.e. “x - (y - z).label(‘foo’)”
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单个非关联操作符链的操作符优先级规则。即“x - (y - z)”将编译为“x - (y - z)”而不是“x - y - z”。也适用于标签，即“x
    - (y - z).label('foo')”
- en: 'References: [#1984](https://www.sqlalchemy.org/trac/ticket/1984)'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1984](https://www.sqlalchemy.org/trac/ticket/1984)
- en: '**[sql]**'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The ‘info’ attribute of Column is copied during Column.copy(), i.e. as occurs
    when using columns in declarative mixins.
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Column.copy() 期间复制了 Column 的‘info’属性，即在声明性 mixin 中使用列时发生的情况。
- en: 'References: [#1967](https://www.sqlalchemy.org/trac/ticket/1967)'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1967](https://www.sqlalchemy.org/trac/ticket/1967)
- en: '**[sql]**'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a bind processor for booleans which coerces to int, for DBAPIs such as
    pymssql that naively call str() on values.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为布尔值添加了一个绑定处理器，将其强制转换为 int，用于像 pymssql 这样的 DBAPI，其对值简单地调用 str()。
- en: '**[sql]**'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: CheckConstraint will copy its ‘initially’, ‘deferrable’, and ‘_create_rule’
    attributes within a copy()/tometadata()
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CheckConstraint 将在 copy()/tometadata() 中复制其‘initially’、‘deferrable’和‘_create_rule’属性
- en: 'References: [#2000](https://www.sqlalchemy.org/trac/ticket/2000)'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2000](https://www.sqlalchemy.org/trac/ticket/2000)
- en: postgresql
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Single element tuple expressions inside an IN clause parenthesize correctly,
    also from
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IN 子句内的单元素元组表达式正确地加上了括号，同样来自于
- en: 'References: [#1984](https://www.sqlalchemy.org/trac/ticket/1984)'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1984](https://www.sqlalchemy.org/trac/ticket/1984)
- en: '**[postgresql]**'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Ensured every numeric, float, int code, scalar + array, are recognized by psycopg2
    and pg8000’s “numeric” base type.
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保 psycopg2 和 pg8000 的“numeric”基本类型能够识别每个数字、浮点数、整数代码、标量 + 数组。
- en: 'References: [#1955](https://www.sqlalchemy.org/trac/ticket/1955)'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1955](https://www.sqlalchemy.org/trac/ticket/1955)
- en: '**[postgresql]**'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added as_uuid=True flag to the UUID type, will receive and return values as
    Python UUID() objects rather than strings. Currently, the UUID type is only known
    to work with psycopg2.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 UUID 类型添加了 as_uuid=True 标志，将接收和返回值作为 Python UUID() 对象而不是字符串。目前，UUID 类型仅已知与
    psycopg2 兼容。
- en: 'References: [#1956](https://www.sqlalchemy.org/trac/ticket/1956)'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1956](https://www.sqlalchemy.org/trac/ticket/1956)
- en: '**[postgresql]**'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug whereby KeyError would occur with non-ENUM supported PG versions after
    a pool dispose+recreate would occur.
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在池销毁+重新创建后，非 ENUM 支持的 PG 版本会出现 KeyError。
- en: 'References: [#1989](https://www.sqlalchemy.org/trac/ticket/1989)'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1989](https://www.sqlalchemy.org/trac/ticket/1989)
- en: mysql
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed error handling for Jython + zxjdbc, such that has_table() property works
    again. Regression from 0.6.3 (we don’t have a Jython buildbot, sorry)
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Jython + zxjdbc 的错误处理，使 has_table() 属性再次有效。这是从 0.6.3 版本开始的回归（我们没有 Jython
    的构建机器，抱歉）
- en: 'References: [#1960](https://www.sqlalchemy.org/trac/ticket/1960)'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ��考：[#1960](https://www.sqlalchemy.org/trac/ticket/1960)
- en: sqlite
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: The REFERENCES clause in a CREATE TABLE that includes a remote schema to another
    table with the same schema name now renders the remote name without the schema
    clause, as required by SQLite.
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 CREATE TABLE 中的 REFERENCES 子句中，如果包含了指向具有相同模式名称的另一个表的远程模式，现在将按照 SQLite 的要求渲染远程名称而不包含模式子句。
- en: 'References: [#1851](https://www.sqlalchemy.org/trac/ticket/1851)'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1851](https://www.sqlalchemy.org/trac/ticket/1851)
- en: '**[sqlite]**'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: On the same theme, the REFERENCES clause in a CREATE TABLE that includes a remote
    schema to a *different* schema than that of the parent table doesn’t render at
    all, as cross-schema references do not appear to be supported.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在相同主题上，如果在 CREATE TABLE 中的 REFERENCES 子句中包含了指向父表模式不同的远程模式的表，则根本不会渲染，因为似乎不支持跨模式引用。
- en: mssql
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The rewrite of index reflection in was unfortunately not tested correctly, and
    returned incorrect results. This regression is now fixed.
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对索引反射的重写遗憾地没有经过正确测试，并返回了不正确的结果。这个回归现在已经修复。
- en: 'References: [#1770](https://www.sqlalchemy.org/trac/ticket/1770)'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1770](https://www.sqlalchemy.org/trac/ticket/1770)
- en: oracle
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The cx_oracle “decimal detection” logic, which takes place for result set columns
    with ambiguous numeric characteristics, now uses the decimal point character determined
    by the locale/ NLS_LANG setting, using an on-first-connect detection of this character.
    cx_oracle 5.0.3 or greater is also required when using a non-period-decimal-point
    NLS_LANG setting..
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_oracle 的“十进制检测”逻辑，用于具有模糊数值特征的结果集列，现在使用由区域设置/ NLS_LANG 设置确定的小数点字符，使用首次连接时检测此字符。在使用非句点小数点
    NLS_LANG 设置时，还需要 cx_oracle 5.0.3 或更高版本。
- en: 'References: [#1953](https://www.sqlalchemy.org/trac/ticket/1953)'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1953](https://www.sqlalchemy.org/trac/ticket/1953)
- en: misc
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[firebird]**'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird numeric type now checks for Decimal explicitly, lets float() pass right
    through, thereby allowing special values such as float(‘inf’).
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 数值类型现在明确检查 Decimal，让 float() 直接通过，从而允许特殊值如 float('inf')。
- en: 'References: [#2012](https://www.sqlalchemy.org/trac/ticket/2012)'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2012](https://www.sqlalchemy.org/trac/ticket/2012)
- en: '**[declarative]**'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: An error is raised if __table_args__ is not in tuple or dict format, and is
    not None.
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 __table_args__ 不是元组或字典格式，并且不是 None，则会引发错误。
- en: 'References: [#1972](https://www.sqlalchemy.org/trac/ticket/1972)'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1972](https://www.sqlalchemy.org/trac/ticket/1972)
- en: '**[sqlsoup]**'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: Added “map_to()” method to SqlSoup, which is a “master” method which accepts
    explicit arguments for each aspect of the selectable and mapping, including a
    base class per mapping.
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SqlSoup 添加了“map_to()”方法，这是一个“主”方法，接受每个可选择和映射的显式参数，包括每个映射的基类。
- en: 'References: [#1975](https://www.sqlalchemy.org/trac/ticket/1975)'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1975](https://www.sqlalchemy.org/trac/ticket/1975)
- en: '**[sqlsoup]**'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: Mapped selectables used with the map(), with_labels(), join() methods no longer
    put the given argument into the internal “cache” dictionary. Particularly since
    the join() and select() objects are created in the method itself this was pretty
    much a pure memory leaking behavior.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 map()、with_labels()、join() 方法一起使用的映射可选择不再将给定参数放入内部“缓存”字典中。特别是因为 join() 和 select()
    对象是在方法本身中创建的，这几乎是一种纯粹的内存泄漏行为。
- en: 0.6.5
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.5
- en: 'Released: Sun Oct 24 2010'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010年10月24日星期日
- en: orm
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a new “lazyload” option “immediateload”. Issues the usual “lazy” load
    operation automatically as the object is populated. The use case here is when
    loading objects to be placed in an offline cache, or otherwise used after the
    session isn’t available, and straight ‘select’ loading, not ‘joined’ or ‘subquery’,
    is desired.
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“lazyload”选项“immediateload”。在对象被填充时自动发出通常的“lazy”加载操作。这里的用例是在加载对象以放置在离线缓存中，或在会话不可用后使用时，希望进行直接的‘select’加载，而不是‘joined’或‘subquery’。
- en: 'References: [#1914](https://www.sqlalchemy.org/trac/ticket/1914)'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1914](https://www.sqlalchemy.org/trac/ticket/1914)
- en: '**[orm]**'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'New Query methods: query.label(name), query.as_scalar(), return the query’s
    statement as a scalar subquery with /without label; query.with_entities(*ent),
    replaces the SELECT list of the query with new entities. Roughly equivalent to
    a generative form of query.values() which accepts mapped entities as well as column
    expressions.'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的Query方法：query.label(name)，query.as_scalar()，将查询的语句作为标量子查询返回/不返回标签；query.with_entities(*ent)，用新实体替换查询的SELECT列表。大致相当于接受映射实体以及列表达式的query.values()的生成形式。
- en: 'References: [#1920](https://www.sqlalchemy.org/trac/ticket/1920)'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1920](https://www.sqlalchemy.org/trac/ticket/1920)
- en: '**[orm]**'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed recursion bug which could occur when moving an object from one reference
    to another, with backrefs involved, where the initiating parent was a subclass
    (with its own mapper) of the previous parent.
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了递归bug，当将一个对象从一个引用移动到另一个引用时可能发生，涉及到反向引用，其中发起父类是以前父类的子类（具有自己的mapper）。
- en: '**[orm]**'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a regression in 0.6.4 which occurred if you passed an empty list to “include_properties”
    on mapper()
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.6.4中的一个回归，如果您在mapper()上传递一个空列表给“include_properties”。
- en: 'References: [#1918](https://www.sqlalchemy.org/trac/ticket/1918)'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1918](https://www.sqlalchemy.org/trac/ticket/1918)
- en: '**[orm]**'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed labeling bug in Query whereby the NamedTuple would mis-apply labels if
    any of the column expressions were un-labeled.
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中的标签错误，如果任何列表达式未标记，则NamedTuple会错误应用标签。
- en: '**[orm]**'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Patched a case where query.join() would adapt the right side to the right side
    of the left’s join inappropriately
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即query.join()会不适当地将右侧适应为左侧连接的右侧
- en: 'References: [#1925](https://www.sqlalchemy.org/trac/ticket/1925)'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1925](https://www.sqlalchemy.org/trac/ticket/1925)
- en: '**[orm]**'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.select_from() has been beefed up to help ensure that a subsequent call
    to query.join() will use the select_from() entity, assuming it’s a mapped entity
    and not a plain selectable, as the default “left” side, not the first entity in
    the Query object’s list of entities.
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from()已经加强，以确保后续调用query.join()将使用select_from()实体，假设它是一个映射实体而不是一个普通可选择的实体，作为默认的“左”侧，而不是Query对象的实体列表中的第一个实体。
- en: '**[orm]**'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The exception raised by Session when it is used subsequent to a subtransaction
    rollback (which is what happens when a flush fails in autocommit=False mode) has
    now been reworded (this is the “inactive due to a rollback in a subtransaction”
    message). In particular, if the rollback was due to an exception during flush(),
    the message states this is the case, and reiterates the string form of the original
    exception that occurred during flush. If the session is closed due to explicit
    usage of subtransactions (not very common), the message just states this is the
    case.
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在子事务回滚后（这是在autocommit=False模式下刷新失败时发生的情况）继续使用Session时引发的异常现在已经重新表述（这是“由于子事务回滚而处于非活动状态”消息）。特别是，如果回滚是由于刷新期间的异常引起的，则消息会说明这种情况，并重申在刷新期间发生的原始异常的字符串形式。如果会话由于显式使用子事务而关闭（这种情况并不常见），消息只会说明这种情况。
- en: '**[orm]**'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The exception raised by Mapper when repeated requests to its initialization
    are made after initialization already failed no longer assumes the “hasattr” case,
    since there’s other scenarios in which this message gets emitted, and the message
    also does not compound onto itself multiple times - you get the same message for
    each attempt at usage. The misnomer “compiles” is being traded out for “initialize”.
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Mapper在初始化失败后重复请求其初始化时引发的异常不再假定“hasattr”情况，因为还有其他情况会发出此消息，并且消息也不会多次叠加 - 每次尝试使用时都会得到相同的消息。误称“编译”正在被“初始化”替换。
- en: '**[orm]**'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.update() where ‘evaluate’ or ‘fetch’ expiration would fail
    if the column expression key was a class attribute with a different keyname as
    the actual column name.
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.update()中的bug，其中‘evaluate’或‘fetch’到期会失败，如果列表达式键是具有不同键名的类属性作为实际列名。
- en: 'References: [#1935](https://www.sqlalchemy.org/trac/ticket/1935)'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1935](https://www.sqlalchemy.org/trac/ticket/1935)
- en: '**[orm]**'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an assertion during flush which ensures that no NULL-holding identity
    keys were generated on “newly persistent” objects. This can occur when user defined
    code inadvertently triggers flushes on not-fully-loaded objects.
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在flush期间添加了一个断言，确保“新持久”对象上没有生成包含NULL的标识键。当用户定义的代码无意中触发未完全加载的对象的flush时，可能会发生这种情况。
- en: '**[orm]**'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: lazy loads for relationship attributes now use the current state, not the “committed”
    state, of foreign and primary key attributes when issuing SQL, if a flush is not
    in process. Previously, only the database-committed state would be used. In particular,
    this would cause a many-to-one get()-on-lazyload operation to fail, as autoflush
    is not triggered on these loads when the attributes are determined and the “committed”
    state may not be available.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，关系属性的惰性加载在发出SQL时使用当前状态而不是“已提交”状态的外键和主键属性，如果没有进行flush。以前，只会使用数据库已提交的状态。特别是，这会导致许多对一的get()-on-lazyload操作失败，因为在这些加载时不会触发自动flush，属性被确定时“已提交”状态可能不可用。
- en: 'References: [#1910](https://www.sqlalchemy.org/trac/ticket/1910)'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1910](https://www.sqlalchemy.org/trac/ticket/1910)
- en: '**[orm]**'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A new flag on relationship(), load_on_pending, allows the lazy loader to fire
    off on pending objects without a flush taking place, as well as a transient object
    that’s been manually “attached” to the session. Note that this flag blocks attribute
    events from taking place when an object is loaded, so backrefs aren’t available
    until after a flush. The flag is only intended for very specific use cases.
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在relationship()上的一个新标志，load_on_pending，允许延迟加载器在未进行flush的情况下对待挂起的对象进行触发，以及手动“附加”到会话的瞬态对象。请注意，此标志在加载对象时阻止属性事件发生，因此直到flush之后才可用反向引用。该标志仅用于非常特定的用例。
- en: '**[orm]**'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Another new flag on relationship(), cascade_backrefs, disables the “save-update”
    cascade when the event was initiated on the “reverse” side of a bidirectional
    relationship. This is a cleaner behavior so that many-to-ones can be set on a
    transient object without it getting sucked into the child object’s session, while
    still allowing the forward collection to cascade. We *might* default this to False
    in 0.7.
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个新标志relationship()，cascade_backrefs，当事件在双向关系的“反向”侧启动时禁用“save-update”级联。这是一种更清晰的行为，使得可以在瞬态对象上设置多对一而不会被吸入子对象的会话，同时仍允许前向集合级联。我们*可能*会在0.7中将其默认设置为False。
- en: '**[orm]**'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Slight improvement to the behavior of “passive_updates=False” when placed only
    on the many-to-one side of a relationship; documentation has been clarified that
    passive_updates=False should really be on the one-to-many side.
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在关系上仅在多对一的一侧放置passive_updates=False时，对“passive_updates=False”行为进行了轻微改进；文档已澄清passive_updates=False应该真正放在一对多的一侧。
- en: '**[orm]**'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Placing passive_deletes=True on a many-to-one emits a warning, since you probably
    intended to put it on the one-to-many side.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多对一上放置passive_deletes=True会发出警告，因为您可能打算将其放在一对多的一侧。
- en: '**[orm]**'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug that would prevent “subqueryload” from working correctly with single
    table inheritance for a relationship from a subclass - the “where type in (x,
    y, z)” only gets placed on the inside, instead of repeatedly.
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug会阻止“subqueryload”与子类的关系在单表继承中正常工作-“where type in (x, y, z)”只会被放置在内部，而不是重复放置。
- en: '**[orm]**'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When using from_self() with single table inheritance, the “where type in (x,
    y, z)” is placed on the outside of the query only, instead of repeatedly. May
    make some more adjustments to this.
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在单表继承中使用from_self()时，“where type in (x, y, z)”仅放在查询的外部，而不是重复放置。可能需要对此进行一些调整。
- en: '**[orm]**'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: scoped_session emits a warning when configure() is called if a Session is already
    present (checks only the current thread)
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用configure()时，scoped_session会在当前线程中检查是否已经存在Session，如果存在则会发出警告。
- en: 'References: [#1924](https://www.sqlalchemy.org/trac/ticket/1924)'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1924](https://www.sqlalchemy.org/trac/ticket/1924)
- en: '**[orm]**'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: reworked the internals of mapper.cascade_iterator() to cut down method calls
    by about 9% in some circumstances.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了mapper.cascade_iterator()的内部，以在某些情况下减少约9%的方法调用。
- en: 'References: [#1932](https://www.sqlalchemy.org/trac/ticket/1932)'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1932](https://www.sqlalchemy.org/trac/ticket/1932)
- en: engine
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed a regression in 0.6.4 whereby the change that allowed cursor errors to
    be raised consistently broke the result.lastrowid accessor. Test coverage has
    been added for result.lastrowid. Note that lastrowid is only supported by Pysqlite
    and some MySQL drivers, so isn’t super-useful in the general case.
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.6.4中的一个回归，其中允许一致地引发游标错误的更改破坏了result.lastrowid访问器。为result.lastrowid添加了测试覆盖范围。请注意，lastrowid仅由Pysqlite和一些MySQL驱动程序支持，因此在一般情况下并不是特别有用。
- en: '**[engine]**'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: the logging message emitted by the engine when a connection is first used is
    now “BEGIN (implicit)” to emphasize that DBAPI has no explicit begin().
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当连接首次被使用时，引擎发出的日志消息现在是“BEGIN (implicit)”，以强调DBAPI没有显式的begin()。
- en: '**[engine]**'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: added “views=True” option to metadata.reflect(), will add the list of available
    views to those being reflected.
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“views=True”选项到metadata.reflect()，将向正在反映的视图列表中添加可用视图。
- en: 'References: [#1936](https://www.sqlalchemy.org/trac/ticket/1936)'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1936](https://www.sqlalchemy.org/trac/ticket/1936)
- en: '**[engine]**'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: engine_from_config() now accepts ‘debug’ for ‘echo’, ‘echo_pool’, ‘force’ for
    ‘convert_unicode’, boolean values for ‘use_native_unicode’.
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: engine_from_config()现在接受“debug”用于“echo”，“echo_pool”，“force”用于“convert_unicode”，布尔值用于“use_native_unicode”。
- en: 'References: [#1899](https://www.sqlalchemy.org/trac/ticket/1899)'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1899](https://www.sqlalchemy.org/trac/ticket/1899)
- en: sql
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in TypeDecorator whereby the dialect-specific type was getting pulled
    in to generate the DDL for a given type, which didn’t always return the correct
    result.
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了TypeDecorator中的错误，其中方言特定类型被引入以生成给定类型的DDL，这不总是返回正确的结果。
- en: '**[sql]**'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator can now have a fully constructed type specified as its “impl”,
    in addition to a type class.
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator现在可以将完全构造的类型指定为其“impl”，而不仅仅是类型类。
- en: '**[sql]**'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator will now place itself as the resulting type for a binary expression
    where the type coercion rules would normally return its impl type - previously,
    a copy of the impl type would be returned which would have the TypeDecorator embedded
    into it as the “dialect” impl, this was probably an unintentional way of achieving
    the desired effect.
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator现在会将自己作为二元表达式的结果类型，其中类型强制转换规则通常会返回其实现类型 - 以前，将返回impl类型的副本，该类型将TypeDecorator嵌入到其中作为“方言”实现，这可能是实现所需效果的无意之举。
- en: '**[sql]**'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator.load_dialect_impl() returns “self.impl” by default, i.e. not the
    dialect implementation type of “self.impl”. This to support compilation correctly.
    Behavior can be user-overridden in exactly the same way as before to the same
    effect.
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator.load_dialect_impl() 默认返回“self.impl”，即不返回“self.impl”的方言实现类型。这样做是为了支持正确的编译。行为可以像以前一样由用户重写，效果相同。
- en: '**[sql]**'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added type_coerce(expr, type_) expression element. Treats the given expression
    as the given type when evaluating expressions and processing result rows, but
    does not affect the generation of SQL, other than an anonymous label.
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了type_coerce(expr, type_)表达式元素。在评估表达式和处理结果行时，将给定表达式视为给定类型，但不影响SQL的生成，除了一个匿名标签。
- en: '**[sql]**'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.tometadata() now copies Index objects associated with the Table as well.
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.tometadata()现在还会复制与Table关联的Index对象。
- en: '**[sql]**'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.tometadata() issues a warning if the given Table is already present in
    the target MetaData - the existing Table object is returned.
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果给定的表已经存在于目标MetaData中，则Table.tometadata()会发出警告 - 将返回现有的Table对象。
- en: '**[sql]**'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: An informative error message is raised if a Column which has not yet been assigned
    a name, i.e. as in declarative, is used in a context where it is exported to the
    columns collection of an enclosing select() construct, or if any construct involving
    that column is compiled before its name is assigned.
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果尚未为列分配名称（即在声明时），则在将其导出到封闭的select()构造的列集合或在分配名称之前编译包含该列的任何构造的上下文中使用列，将引发一个信息性错误消息。
- en: '**[sql]**'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: as_scalar(), label() can be called on a selectable which contains a Column that
    is not yet named.
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: as_scalar()，label()可以在包含尚未命名列的可选项上调用。
- en: 'References: [#1862](https://www.sqlalchemy.org/trac/ticket/1862)'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1862](https://www.sqlalchemy.org/trac/ticket/1862)
- en: '**[sql]**'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed recursion overflow which could occur when operating with two expressions
    both of type “NullType”, but not the singleton NULLTYPE instance.
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了操作两个表达式都是“NullType”类型但不是单例NULLTYPE实例时可能发生的递归溢出。
- en: 'References: [#1907](https://www.sqlalchemy.org/trac/ticket/1907)'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1907](https://www.sqlalchemy.org/trac/ticket/1907)
- en: postgresql
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added “as_tuple” flag to ARRAY type, returns results as tuples instead of lists
    to allow hashing.
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为ARRAY类型添加了“as_tuple”标志，返回结果为元组而不是列表，以允许哈希。
- en: '**[postgresql]**'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug which prevented “domain” built from a custom type such as “enum” from
    being reflected.
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，阻止了从自定义类型（如“enum”）构建的“domain”被反射。
- en: 'References: [#1933](https://www.sqlalchemy.org/trac/ticket/1933)'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1933](https://www.sqlalchemy.org/trac/ticket/1933)
- en: mysql
  id: totrans-463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug involving reflection of CURRENT_TIMESTAMP default used with ON UPDATE
    clause, thanks to Taavi Burns
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及使用ON UPDATE子句的CURRENT_TIMESTAMP默认值的反射bug，感谢Taavi Burns。
- en: 'References: [#1940](https://www.sqlalchemy.org/trac/ticket/1940)'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1940](https://www.sqlalchemy.org/trac/ticket/1940)
- en: mssql
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed reflection bug which did not properly handle reflection of unknown types.
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个未能正确处理未知类型反射的bug。
- en: 'References: [#1946](https://www.sqlalchemy.org/trac/ticket/1946)'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1946](https://www.sqlalchemy.org/trac/ticket/1946)
- en: '**[mssql]**'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug where aliasing of tables with “schema” would fail to compile properly.
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“schema”别名表时无法正确编译的bug。
- en: 'References: [#1943](https://www.sqlalchemy.org/trac/ticket/1943)'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1943](https://www.sqlalchemy.org/trac/ticket/1943)
- en: '**[mssql]**'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the reflection of indexes to use sys. catalogs, so that column names
    of any configuration (spaces, embedded commas, etc.) can be reflected. Note that
    reflection of indexes requires SQL Server 2005 or greater.
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了索引的反射以使用sys.目录，以便反射任何配置的列名称（空格，嵌入逗号等）。请注意，反射索引需要SQL Server 2005或更高版本。
- en: 'References: [#1770](https://www.sqlalchemy.org/trac/ticket/1770)'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1770](https://www.sqlalchemy.org/trac/ticket/1770)
- en: '**[mssql]**'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: mssql+pymssql dialect now honors the “port” portion of the URL instead of discarding
    it.
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mssql+pymssql方言现在尊重URL的“port”部分，而不是丢弃它。
- en: 'References: [#1952](https://www.sqlalchemy.org/trac/ticket/1952)'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1952](https://www.sqlalchemy.org/trac/ticket/1952)
- en: oracle
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The implicit_returning argument to create_engine() is now honored regardless
    of detected version of Oracle. Previously, the flag would be forced to False if
    server version info was < 10.
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无论检测到的Oracle版本如何，create_engine()的implicit_returning参数现在都会被尊重。以前，如果服务器版本信息<10，则该标志将被强制为False。
- en: 'References: [#1878](https://www.sqlalchemy.org/trac/ticket/1878)'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1878](https://www.sqlalchemy.org/trac/ticket/1878)
- en: tests
  id: totrans-484
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests]**'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests]**'
- en: the NoseSQLAlchemyPlugin has been moved to a new package “sqlalchemy_nose” which
    installs along with “sqlalchemy”. This so that the “nosetests” script works as
    always but also allows the –with-coverage option to turn on coverage before SQLAlchemy
    modules are imported, allowing coverage to work correctly.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NoseSQLAlchemyPlugin已移至新包“sqlalchemy_nose”，该包与“sqlalchemy”一起安装。这样���“nosetests”脚本仍然可以正常工作，但也允许在导入SQLAlchemy模块之前打开覆盖率，从而使覆盖率能够正常工作。
- en: misc
  id: totrans-487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[declarative]**'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: '@classproperty (soon/now @declared_attr) takes effect for __mapper_args__,
    __table_args__, __tablename__ on a base class that is not a mixin, as well as
    mixins.'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@classproperty（即将/现在@declared_attr）对于不是mixin的基类以及mixins上的__mapper_args__，__table_args__，__tablename__生效。'
- en: 'References: [#1922](https://www.sqlalchemy.org/trac/ticket/1922)'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1922](https://www.sqlalchemy.org/trac/ticket/1922)
- en: '**[declarative]**'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: '@classproperty ‘s official name/location for usage with declarative is sqlalchemy.ext.declarative.declared_attr.
    Same thing, but moving there since it is more of a “marker” that’s specific to
    declarative, not just an attribute technique.'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@classproperty的官方名称/位置用于与declarative一起使用是sqlalchemy.ext.declarative.declared_attr。虽然是同一件事，但由于它更多地是一个特定于declarative的“标记”，而不仅仅是一个属性技术，所以将其移动到那里。'
- en: 'References: [#1915](https://www.sqlalchemy.org/trac/ticket/1915)'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1915](https://www.sqlalchemy.org/trac/ticket/1915)
- en: '**[declarative]**'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed bug whereby columns on a mixin wouldn’t propagate correctly to a single-table,
    or joined-table, inheritance scheme where the attribute name is different than
    that of the column.,.
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在一个mixin上的列无法正确传播到单表或联合表继承方案，其中属性名称与列的名称不同。
- en: 'References: [#1930](https://www.sqlalchemy.org/trac/ticket/1930), [#1931](https://www.sqlalchemy.org/trac/ticket/1931)'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1930](https://www.sqlalchemy.org/trac/ticket/1930)，[#1931](https://www.sqlalchemy.org/trac/ticket/1931)
- en: '**[declarative]**'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: A mixin can now specify a column that overrides a column of the same name associated
    with a superclass. Thanks to Oystein Haaland.
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，mixin可以指定一个覆盖与超类关联的同名列的列。感谢Oystein Haaland。
- en: '**[informix]**'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: '*Major* cleanup / modernization of the Informix dialect for 0.6, courtesy Florian
    Apolloner.'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*重大*清理/现代化Informix方言为0.6，感谢Florian Apolloner。'
- en: 'References: [#1906](https://www.sqlalchemy.org/trac/ticket/1906)'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1906](https://www.sqlalchemy.org/trac/ticket/1906)
- en: '**[misc]**'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc]**'
- en: CircularDependencyError now has .cycles and .edges members, which are the set
    of elements involved in one or more cycles, and the set of edges as 2-tuples.
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CircularDependencyError 现在有 .cycles 和 .edges 成员，它们是一个或多个循环中涉及的元素集合，以及作为 2 元组的边的集合。
- en: 'References: [#1890](https://www.sqlalchemy.org/trac/ticket/1890)'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1890](https://www.sqlalchemy.org/trac/ticket/1890)
- en: 0.6.4
  id: totrans-505
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.4
- en: 'Released: Tue Sep 07 2010'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Tue Sep 07 2010
- en: orm
  id: totrans-507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The name ConcurrentModificationError has been changed to StaleDataError, and
    descriptive error messages have been revised to reflect exactly what the issue
    is. Both names will remain available for the foreseeable future for schemes that
    may be specifying ConcurrentModificationError in an “except:” clause.
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ConcurrentModificationError 的名称已更改为 StaleDataError，并且描述性错误消息已经修订以准确反映问题所在。在可预见的未来，这两个名称都将保持可用，以供可能在“except:”子句中指定
    ConcurrentModificationError 的方案使用。
- en: '**[orm]**'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a mutex to the identity map which mutexes remove operations against iteration
    methods, which now pre-buffer before returning an iterable. This because asynchronous
    gc can remove items via the gc thread at any time.
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在标识映射中添加了一个互斥锁，该互斥锁对迭代方法中的删除操作进行了互斥，这些方法现在在返回可迭代对象之前进行了预缓冲。这是因为异步 gc 可以随时通过
    gc 线程删除项目。
- en: 'References: [#1891](https://www.sqlalchemy.org/trac/ticket/1891)'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1891](https://www.sqlalchemy.org/trac/ticket/1891)
- en: '**[orm]**'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The Session class is now present in sqlalchemy.orm.*. We’re moving away from
    the usage of create_session(), which has non-standard defaults, for those situations
    where a one-step Session constructor is desired. Most users should stick with
    sessionmaker() for general use, however.
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session 类现在存在于 sqlalchemy.orm.* 中。我们正在摆脱使用 create_session()，该函数具有非标准默认值，用于需要一步构造会话的情况。然而，大多数用户应该坚持使用
    sessionmaker() 进行一般用途。
- en: '**[orm]**'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.with_parent() now accepts transient objects and will use the non-persistent
    values of their pk/fk attributes in order to formulate the criterion. Docs are
    also clarified as to the purpose of with_parent().
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.with_parent() 现在接受瞬态对象，并将使用它们的 pk/fk 属性的非持久化值来制定条件。文档也澄清了 with_parent()
    的目的。
- en: '**[orm]**'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The include_properties and exclude_properties arguments to mapper() now accept
    Column objects as members in addition to strings. This so that same-named Column
    objects, such as those within a join(), can be disambiguated.
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: include_properties 和 exclude_properties 参数现在接受 Column 对象作为成员，而不仅仅是字符串。这样，可以消除
    join() 中的同名 Column 对象等歧义。
- en: '**[orm]**'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is now emitted if a mapper is created against a join or other single
    selectable that includes multiple columns with the same name in its .c. collection,
    and those columns aren’t explicitly named as part of the same or separate attributes
    (or excluded). In 0.7 this warning will be an exception. Note that this warning
    is not emitted when the combination occurs as a result of inheritance, so that
    attributes still allow being overridden naturally.. In 0.7 this will be improved
    further.
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果针对包含多个具有相同名称的列的 join 或其他单个可选择的映射器创建了一个映射器，并且这些列没有明确命名为相同或不同的属性（或排除），则现在会发出警告。在
    0.7 中，此警告将是一个异常。请注意，当组合发生时，不会发出此警告作为继承的结果，因此属性仍然允许自然覆盖。在 0.7 中，这将进一步改进。
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The primary_key argument to mapper() can now specify a series of columns that
    are only a subset of the calculated “primary key” columns of the mapped selectable,
    without an error being raised. This helps for situations where a selectable’s
    effective primary key is simpler than the number of columns in the selectable
    that are actually marked as “primary_key”, such as a join against two tables on
    their primary key columns.
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper() 的 primary_key 参数现在可以指定一系列列，这些列仅是映射可选择的计算“主键”列的子集，而不会引发错误。这有助于在可选择的有效主键比实际标记为“主键”的可选择的列数更简单的情况下，例如在两个表的主键列上进行连接时。
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An object that’s been deleted now gets a flag ‘deleted’, which prohibits the
    object from being re-add()ed to the session, as previously the object would live
    in the identity map silently until its attributes were accessed. The make_transient()
    function now resets this flag along with the “key” flag.
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除的对象现在会得到一个名为 'deleted' 的标志，这将阻止该对象被重新添加到会话中，因为以前该对象将悄悄地存在于标识映射中，直到其属性被访问。make_transient()
    函数现在重置此标志以及“key”标志。
- en: '**[orm]**'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: make_transient() can be safely called on an already transient instance.
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient() 可以安全地在已经瞬态的实例上调用。
- en: '**[orm]**'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a warning is emitted in mapper() if the polymorphic_on column is not present
    either in direct or derived form in the mapped selectable or in the with_polymorphic
    selectable, instead of silently ignoring it. Look for this to become an exception
    in 0.7.
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mapper() 中如果 polymorphic_on 列在映射的可选择对象或 with_polymorphic 可选择对象中以直接或派生形式不存在，则会发出警告，而不是悄悄地忽略它。请注意，预计在
    0.7 版本中会将此行为更改为异常。
- en: '**[orm]**'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Another pass through the series of error messages emitted when relationship()
    is configured with ambiguous arguments. The “foreign_keys” setting is no longer
    mentioned, as it is almost never needed and it is preferable users set up correct
    ForeignKey metadata, which is now the recommendation. If ‘foreign_keys’ is used
    and is incorrect, the message suggests the attribute is probably unnecessary.
    Docs for the attribute are beefed up. This because all confused relationship()
    users on the ML appear to be attempting to use foreign_keys due to the message,
    which only confuses them further since Table metadata is much clearer.
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 relationship() 配置具有模糊参数时，对发出的一系列错误消息进行另一次遍历。不再提及“foreign_keys”设置，因为它几乎从不需要，并且更推荐用户设置正确的
    ForeignKey 元数据，这也是现在的推荐做法。如果使用了'foreign_keys'并且不正确，该消息将建议该属性可能是不必要的。对属性的文档进行了加强。这是因为所有在
    ML 上困惑的 relationship() 用户似乎都试图使用 foreign_keys，而消息只会进一步使他们困惑，因为 Table 元数据更加清晰。
- en: '**[orm]**'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: If the “secondary” table has no ForeignKey metadata and no foreign_keys is set,
    even though the user is passing screwed up information, it is assumed that primary/secondaryjoin
    expressions should consider only and all cols in “secondary” to be foreign. It’s
    not possible with “secondary” for the foreign keys to be elsewhere in any case.
    A warning is now emitted instead of an error, and the mapping succeeds.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“secondary”表没有 ForeignKey 元数据并且没有设置 foreign_keys，即使用户传递了错误的信息，也假定主/辅助连接表达式应仅考虑“secondary”中的所有列作为外键。在任何情况下，“secondary”中的外键都不可能在其他地方。现在会发出警告而不是错误，并且映射成功。
- en: 'References: [#1877](https://www.sqlalchemy.org/trac/ticket/1877)'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1877](https://www.sqlalchemy.org/trac/ticket/1877)
- en: '**[orm]**'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Moving an o2m object from one collection to another, or vice versa changing
    the referenced object by an m2o, where the foreign key is also a member of the
    primary key, will now be more carefully checked during flush if the change in
    value of the foreign key on the “many” side is the result of a change in the primary
    key of the “one” side, or if the “one” is just a different object. In one case,
    a cascade-capable DB would have cascaded the value already and we need to look
    at the “new” PK value to do an UPDATE, in the other we need to continue looking
    at the “old”. We now look at the “old”, assuming passive_updates=True, unless
    we know it was a PK switch that triggered the change.
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 flush 期间，如果从一个集合中移动一个 o2m 对象到另一个集合，或者通过更改 m2o 引用的对象，其中外键也是主键的成员，现在将更加谨慎地检查，如果“多”一侧的外键值的更改是由于“一”侧主键的更改引起的，或者如果“一”侧只是一个不同的对象。在一种情况下，可进行级联的
    DB 已经级联了该值，我们需要查看“新”PK 值以进行 UPDATE，在另一种情况下，我们需要继续查看“旧”的PK。我们现在查看“旧”的PK，假设 passive_updates=True，除非我们知道触发更改的是
    PK 切换。
- en: 'References: [#1856](https://www.sqlalchemy.org/trac/ticket/1856)'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1856](https://www.sqlalchemy.org/trac/ticket/1856)
- en: '**[orm]**'
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The value of version_id_col can be changed manually, and this will result in
    an UPDATE of the row. Versioned UPDATEs and DELETEs now use the “committed” value
    of the version_id_col in the WHERE clause and not the pending changed value. The
    version generator is also bypassed if manual changes are present on the attribute.
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以手动更改 version_id_col 的值，这将导致行的 UPDATE。版本化的 UPDATE 和 DELETE 现在使用 version_id_col
    的“committed”值而不是待定的更改值作为 WHERE 子句，并且如果属性上存在手动更改，则版本生成器也会被绕过。
- en: 'References: [#1857](https://www.sqlalchemy.org/trac/ticket/1857)'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1857](https://www.sqlalchemy.org/trac/ticket/1857)
- en: '**[orm]**'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the usage of merge() when used with concrete inheriting mappers. Such
    mappers frequently have so-called “concrete” attributes, which are subclass attributes
    that “disable” propagation from the parent - these needed to allow a merge() operation
    to pass through without effect.
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与具体继承的映射器一起使用 merge() 时的使用情况。这种映射器经常具有所谓的“具体”属性，即“禁用”从父级传播的子类属性 - 这些属性需要允许
    merge() 操作通过而不产生效果。
- en: '**[orm]**'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Specifying a non-column based argument for column_mapped_collection, including
    string, text() etc., will raise an error message that specifically asks for a
    column element, no longer misleads with incorrect information about text() or
    literal().
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 column_mapped_collection 的非列基础参数的指定，包括 string、text() 等，将会引发一个错误消息，明确要求列元素，不再误导关于
    text() 或 literal() 的错误信息。
- en: 'References: [#1863](https://www.sqlalchemy.org/trac/ticket/1863)'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1863](https://www.sqlalchemy.org/trac/ticket/1863)
- en: '**[orm]**'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Similarly, for relationship(), foreign_keys, remote_side, order_by - all column-based
    expressions are enforced - lists of strings are explicitly disallowed since this
    is a very common error
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似地，对于 relationship()、foreign_keys、remote_side、order_by - 所有基于列的表达式都受到强制约束 -
    明确禁止使用字符串列表，因为这是一个非常常见的错误
- en: '**[orm]**'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Dynamic attributes don’t support collection population - added an assertion
    for when set_committed_value() is called, as well as when joinedload() or subqueryload()
    options are applied to a dynamic attribute, instead of failure / silent failure.
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动态属性不支持集合填充 - 当调用 set_committed_value() 时添加了一个断言，以及当对动态属性应用 joinedload() 或 subqueryload()
    选项时，而不是失败 / 静默失败。
- en: 'References: [#1864](https://www.sqlalchemy.org/trac/ticket/1864)'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1864](https://www.sqlalchemy.org/trac/ticket/1864)
- en: '**[orm]**'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby generating a Query derived from one which had the same column
    repeated with different label names, typically in some UNION situations, would
    fail to propagate the inner columns completely to the outer query.
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 导致从一个具有不同标签名重复的同一列的查询派生的查询，在一些 UNION 情况下通常会失败，无法完全传播内部列到外部查询。
- en: 'References: [#1852](https://www.sqlalchemy.org/trac/ticket/1852)'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1852](https://www.sqlalchemy.org/trac/ticket/1852)
- en: '**[orm]**'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: object_session() raises the proper UnmappedInstanceError when presented with
    an unmapped instance.
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当提供一个未映射实例时，object_session() 现在会引发正确的 UnmappedInstanceError。
- en: 'References: [#1881](https://www.sqlalchemy.org/trac/ticket/1881)'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1881](https://www.sqlalchemy.org/trac/ticket/1881)
- en: '**[orm]**'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Applied further memoizations to calculated Mapper properties, with significant
    (~90%) runtime mapper.py call count reduction in heavily polymorphic mapping configurations.
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对计算的 Mapper 属性进一步进行了记忆化处理，在高度多态映射配置中显著减少了（约 90%）运行时 mapper.py 的调用次数。
- en: '**[orm]**'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper _get_col_to_prop private method used by the versioning example is deprecated;
    now use mapper.get_property_by_column() which will remain the public method for
    this.
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被版本示例使用的 mapper _get_col_to_prop 私有方法已被弃用；现在使用 mapper.get_property_by_column()，该方法将保持对此的公共访问。
- en: '**[orm]**'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the versioning example works correctly now if versioning on a col that was formerly
    NULL.
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在版本示例在以前为 NULL 的列上进行版本控制时工作正常。
- en: examples
  id: totrans-564
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: The beaker_caching example has been reorganized such that the Session, cache
    manager, declarative_base are part of environment, and custom cache code is portable
    and now within “caching_query.py”. This allows the example to be easier to “drop
    in” to existing projects.
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: beaker_caching 示例已重新组织，使 Session、cache 管理器、declarative_base 成为环境的一部分，并且自定义缓存代码是可移植的，现在在“caching_query.py”中。这使得示例更容易“插入”到现有项目中。
- en: '**[examples]**'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: the history_meta versioning recipe sets “unique=False” when copying columns,
    so that the versioning table handles multiple rows with repeating values.
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当复制列时，history_meta 版本控制示例设置“unique=False”，以便版本控制表处理具有重复值的多行。
- en: 'References: [#1887](https://www.sqlalchemy.org/trac/ticket/1887)'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1887](https://www.sqlalchemy.org/trac/ticket/1887)
- en: engine
  id: totrans-570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Calling fetchone() or similar on a result that has already been exhausted, has
    been closed, or is not a result-returning result now raises ResourceClosedError,
    a subclass of InvalidRequestError, in all cases, regardless of backend. Previously,
    some DBAPIs would raise ProgrammingError (i.e. pysqlite), others would return
    None leading to downstream breakages (i.e. MySQL-python).
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对已经耗尽、已关闭或不是返回结果的结果执行 fetchone() 或类似操作现在会在所有情况下引发 ResourceClosedError，这是 InvalidRequestError
    的子类，无论后端如何。以前，一些 DBAPI 会引发 ProgrammingError（例如 pysqlite），其他会返回 None，导致下游断裂（例如
    MySQL-python）。
- en: '**[engine]**'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed bug in Connection whereby if a “disconnect” event occurred in the “initialize”
    phase of the first connection pool connect, an AttributeError would be raised
    when the Connection would attempt to invalidate the DBAPI connection.
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 `Connection` 中的一个错误，即如果在第一个连接池连接的“初始化”阶段发生“断开连接”事件，那么当 `Connection` 尝试使
    DBAPI 连接无效时将引发 `AttributeError`。
- en: 'References: [#1894](https://www.sqlalchemy.org/trac/ticket/1894)'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1894](https://www.sqlalchemy.org/trac/ticket/1894)
- en: '**[engine]**'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Connection, ResultProxy, as well as Session use ResourceClosedError for all
    “this connection/transaction/result is closed” types of errors.
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于所有“此连接/事务/结果已关闭”的错误类型，`Connection`、`ResultProxy` 以及 `Session` 现在使用 `ResourceClosedError`。
- en: '**[engine]**'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Connection.invalidate() can be called more than once and subsequent calls do
    nothing.
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Connection.invalidate()` 可以被多次调用，而后续的调用将不起作用。'
- en: sql
  id: totrans-580
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Calling execute() on an alias() construct is pending deprecation for 0.7, as
    it is not itself an “executable” construct. It currently “proxies” its inner element
    and is conditionally “executable” but this is not the kind of ambiguity we like
    these days.
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `alias()` 构造上调用 `execute()` 方法在 0.7 版本中将被废弃，因为它本身不是一个“可执行”构造。它目前“代理”其内部元素并且有条件地“可执行”，但这不是我们喜欢的模糊情况。
- en: '**[sql]**'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The execute() and scalar() methods of ClauseElement are now moved appropriately
    to the Executable subclass. ClauseElement.execute()/ scalar() are still present
    and are pending deprecation in 0.7, but note these would always raise an error
    anyway if you were not an Executable (unless you were an alias(), see previous
    note).
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ClauseElement` 的 `execute()` 和 `scalar()` 方法现在已经适当地移动到 `Executable` 子类中。`ClauseElement.execute()`
    / `scalar()` 仍然存在，并且在 0.7 版本中待废弃，但请注意，如果你不是 `Executable`（除非你是 `alias()`，请参阅前面的注释），这些方法将始终引发错误。'
- en: '**[sql]**'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added basic math expression coercion for Numeric->Integer, so that resulting
    type is Numeric regardless of the direction of the expression.
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Numeric->Integer 添加了基本的数学表达式强制转换，以便无论表达式的方向如何，结果类型都是 Numeric。
- en: '**[sql]**'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Changed the scheme used to generate truncated “auto” index names when using
    the “index=True” flag on Column. The truncation only takes place with the auto-generated
    name, not one that is user-defined (an error would be raised instead), and the
    truncation scheme itself is now based on a fragment of an md5 hash of the identifier
    name, so that multiple indexes on columns with similar names still have unique
    names.
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 Column 的 “index=True” 标志时，更改了用于生成截断的“自动”索引名称的方案。截断仅针对自动生成的名称进行，而不是用户定义的名称（会引发错误），截断方案本身现在基于标识符名称的
    md5 哈希片段，以便具有类似名称的多个列上的多个索引仍然具有唯一的名称。
- en: 'References: [#1855](https://www.sqlalchemy.org/trac/ticket/1855)'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1855](https://www.sqlalchemy.org/trac/ticket/1855)
- en: '**[sql]**'
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The generated index name also is based on a “max index name length” attribute
    which is separate from the “max identifier length” - this to appease MySQL who
    has a max length of 64 for index names, separate from their overall max length
    of 255.
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成的索引名称还基于一个“最大索引名称长度”属性，该属性与“最大标识符长度”分开 - 这是为了满足 MySQL，因为 MySQL 对索引名称的最大长度为
    64，与它们的总体最大长度 255 分开。
- en: 'References: [#1412](https://www.sqlalchemy.org/trac/ticket/1412)'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1412](https://www.sqlalchemy.org/trac/ticket/1412)
- en: '**[sql]**'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the text() construct, if placed in a column oriented situation, will at least
    return NULLTYPE for its type instead of None, allowing it to be used a little
    more freely for ad-hoc column expressions than before. literal_column() is still
    the better choice, however.
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将 `text()` 构造放置在面向列的情况下，它将至少返回其类型的 `NULLTYPE`，而不是 `None`，使得它可以比以前更自由地用于临时列表达式。但是，`literal_column()`
    仍然是更好的选择。
- en: '**[sql]**'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added full description of parent table/column, target table/column in error
    message raised when ForeignKey can’t resolve target.
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 `ForeignKey` 无法解析目标时，在错误消息中添加了对父表/列、目标表/列的完整描述。
- en: '**[sql]**'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby replacing composite foreign key columns in a reflected table
    would cause an attempt to remove the reflected constraint from the table a second
    time, raising a KeyError.
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在反射表中替换复合外键列将导致尝试第二次从表中删除反射约束，从而引发 `KeyError`。
- en: 'References: [#1865](https://www.sqlalchemy.org/trac/ticket/1865)'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1865](https://www.sqlalchemy.org/trac/ticket/1865)
- en: '**[sql]**'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the _Label construct, i.e. the one that is produced whenever you say somecol.label(),
    now counts itself in its “proxy_set” unioned with that of its contained column’s
    proxy set, instead of directly returning that of the contained column. This allows
    column correspondence operations which depend on the identity of the _Labels themselves
    to return the correct result
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Label 构造，即每当你说 somecol.label() 时产生的构造，现在在其“proxy_set”中计数自身与其包含列的代理集的并集，而不是直接返回包含列的代理集。这允许依赖于
    _Labels 本身身份的列对应操作返回正确的结果。
- en: '**[sql]**'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixes ORM bug.
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复 ORM bug。
- en: 'References: [#1852](https://www.sqlalchemy.org/trac/ticket/1852)'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1852](https://www.sqlalchemy.org/trac/ticket/1852)
- en: postgresql
  id: totrans-605
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the psycopg2 dialect to use its set_isolation_level() method instead of
    relying upon the base “SET SESSION ISOLATION” command, as psycopg2 resets the
    isolation level on each new transaction otherwise.
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 psycopg2 方言，使用其 set_isolation_level() 方法而不是依赖基本的 “SET SESSION ISOLATION”
    命令，因为否则 psycopg2 在每个新事务中重置隔离级别。
- en: mssql
  id: totrans-608
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed “default schema” query to work with pymssql backend.
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 pymssql 后端一起使用 “default schema” 查询的问题。
- en: oracle
  id: totrans-611
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ROWID type to the Oracle dialect, for those cases where an explicit CAST
    might be needed.
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 方言中添加了 ROWID 类型，用于那些可能需要显式 CAST 的情况。
- en: 'References: [#1879](https://www.sqlalchemy.org/trac/ticket/1879)'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1879](https://www.sqlalchemy.org/trac/ticket/1879)
- en: '**[oracle]**'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle reflection of indexes has been tuned so that indexes which include some
    or all primary key columns, but not the same set of columns as that of the primary
    key, are reflected. Indexes which contain the identical columns as that of the
    primary key are skipped within reflection, as the index in that case is assumed
    to be the auto-generated primary key index. Previously, any index with PK columns
    present would be skipped. Thanks to Kent Bower for the patch.
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 索引反映已经调整，以便反映包含一些或全部主键列的索引，但不包含与主键相同的列集的索引。在反映中跳过包含与主键相同列的索引，因为在这种情况下假定该索引是自动生成的主键索引。以前，任何包含
    PK 列的索引都会被跳过。感谢 Kent Bower 提供的补丁。
- en: 'References: [#1867](https://www.sqlalchemy.org/trac/ticket/1867)'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1867](https://www.sqlalchemy.org/trac/ticket/1867)
- en: '**[oracle]**'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle now reflects the names of primary key constraints - also thanks to Kent
    Bower.
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 现在反映主键约束的名称 - 还要感谢 Kent Bower。
- en: 'References: [#1868](https://www.sqlalchemy.org/trac/ticket/1868)'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1868](https://www.sqlalchemy.org/trac/ticket/1868)
- en: misc
  id: totrans-621
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: if @classproperty is used with a regular class-bound mapper property attribute,
    it will be called to get the actual attribute value during initialization. Currently,
    there’s no advantage to using @classproperty on a column or relationship attribute
    of a declarative class that isn’t a mixin - evaluation is at the same time as
    if @classproperty weren’t used. But here we at least allow it to function as expected.
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 @classproperty 与常规的类绑定映射器属性属性一起使用，它将在初始化期间被调用以获取实际属性值。目前，在声明类的列或关系属性上使用 @classproperty
    没有任何优势 - 评估与未使用 @classproperty 时同时进行。但至少在这里我们允许它按预期运行。
- en: '**[declarative]**'
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed bug where “Can’t add additional column” message would display the wrong
    name.
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法添加额外列”消息显示错误名称的 bug。
- en: '**[firebird]**'
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Fixed bug whereby a column default would fail to reflect if the “default” keyword
    were lower case.
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果 “default” 关键字为小写，则列默认值将无法反映。
- en: '**[informix]**'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Applied patches from to get basic Informix functionality up again. We rely upon
    end-user testing to ensure that Informix is working to some degree.
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用了来自的补丁，以再次使基本 Informix 功能正常运行。我们依赖最终用户测试来确保 Informix 在某种程度上正常工作。
- en: 'References: [#1904](https://www.sqlalchemy.org/trac/ticket/1904)'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1904](https://www.sqlalchemy.org/trac/ticket/1904)
- en: '**[documentation]**'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: The docs have been reorganized such that the “API Reference” section is gone
    - all the docstrings from there which were public API are moved into the context
    of the main doc section that talks about it. Main docs divided into “SQLAlchemy
    Core” and “SQLAlchemy ORM” sections, mapper/relationship docs have been broken
    out. Lots of sections rewritten and/or reorganized.
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档已重新组织，使“API 参考”部分消失 - 所有公共 API 的文档字符串都移动到主要文档部分的上下文中。主文档分为 “SQLAlchemy Core”
    和 “SQLAlchemy ORM” 部分，映射器/关系文档已拆分出来。许多部分已被重写和/或重新组织。
- en: 0.6.3
  id: totrans-633
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.3
- en: 'Released: Thu Jul 15 2010'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010 年 7 月 15 日
- en: orm
  id: totrans-635
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed errant many-to-many load in unitofwork which triggered unnecessarily
    on expired/unloaded collections. This load now takes place only if passive_updates
    is False and the parent primary key has changed, or if passive_deletes is False
    and a delete of the parent has occurred.
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在单元操作中触发的多对多加载错误，该错误在过期/未加载的集合上不必要地触发。现在，只有在 passive_updates 为 False 且父主键已更改，或者
    passive_deletes 为 False 且父项已删除时，才会进行此加载。
- en: 'References: [#1845](https://www.sqlalchemy.org/trac/ticket/1845)'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1845](https://www.sqlalchemy.org/trac/ticket/1845)
- en: '**[orm]**'
  id: totrans-639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Column-entities (i.e. query(Foo.id)) copy their state more fully when queries
    are derived from themselves + a selectable (i.e. from_self(), union(), etc.),
    so that join() and such have the correct state to work from.
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列实体（即 query(Foo.id)）在从自身派生的查询更全面地复制其状态时，以及从自身 + 可选择的查询（即 from_self()、union()
    等）派生的查询，以便 join() 等操作具有正确的状态。
- en: 'References: [#1853](https://www.sqlalchemy.org/trac/ticket/1853)'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1853](https://www.sqlalchemy.org/trac/ticket/1853)
- en: '**[orm]**'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query.join() would fail if querying a non-ORM column then joining
    without an on clause when a FROM clause is already present, now raises a checked
    exception the same way it does when the clause is not present.
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query.join() 在查询非 ORM 列然后在已经存在 FROM 子句的情况下没有加入 on 子句时会失败的错误，现在会像在没有子句的情况下一样引发一个经过检查的异常。
- en: 'References: [#1853](https://www.sqlalchemy.org/trac/ticket/1853)'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1853](https://www.sqlalchemy.org/trac/ticket/1853)
- en: '**[orm]**'
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the check for an “unmapped class”, including the case where the superclass
    is mapped but the subclass is not. Any attempts to access cls._sa_class_manager.mapper
    now raise UnmappedClassError().
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对“未映射类”的检查，包括超类已映射但子类未映射的情况。任何尝试访问 cls._sa_class_manager.mapper 现在都会引发 UnmappedClassError()。
- en: 'References: [#1142](https://www.sqlalchemy.org/trac/ticket/1142)'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1142](https://www.sqlalchemy.org/trac/ticket/1142)
- en: '**[orm]**'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added “column_descriptions” accessor to Query, returns a list of dictionaries
    containing naming/typing information about the entities the Query will return.
    Can be helpful for building GUIs on top of ORM queries.
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query 添加了“column_descriptions”访问器，返回一个包含有关查询将返回的实体的命名/类型信息的字典列表。对于在 ORM 查询之上构建
    GUI 非常有帮助。
- en: mysql
  id: totrans-650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The _extract_error_code() method now works correctly with each MySQL dialect
    ( MySQL-python, OurSQL, MySQL-Connector-Python, PyODBC). Previously, the reconnect
    logic would fail for OperationalError conditions, however since MySQLdb and OurSQL
    have their own reconnect feature, there was no symptom for these drivers here
    unless one watched the logs.
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _extract_error_code() 方法现在可以正确地与每个 MySQL 方言（MySQL-python、OurSQL、MySQL-Connector-Python、PyODBC）一起工作。以前，重新连接逻辑会在
    OperationalError 条件下失败，但由于 MySQLdb 和 OurSQL 有自己的重新连接功能，因此在这些驱动程序中没有任何症状，除非有人观看日志。
- en: 'References: [#1848](https://www.sqlalchemy.org/trac/ticket/1848)'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1848](https://www.sqlalchemy.org/trac/ticket/1848)
- en: oracle
  id: totrans-654
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: More tweaks to cx_oracle Decimal handling. “Ambiguous” numerics with no decimal
    place are coerced to int at the connection handler level. The advantage here is
    that ints come back as ints without SQLA type objects being involved and without
    needless conversion to Decimal first.
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 cx_oracle Decimal 处理进行了更多微调。没有小数点的“模糊”数值在连接处理程序级别被强制转换为 int。这里的优势是，int 以 int
    返回，而无需涉及 SQLA 类型对象，也无需先转换为 Decimal。
- en: Unfortunately, some exotic subquery cases can even see different types between
    individual result rows, so the Numeric handler, when instructed to return Decimal,
    can’t take full advantage of “native decimal” mode and must run isinstance() on
    every value to check if its Decimal already. Reopen of
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不幸的是，一些奇特的子查询情况甚至可以在单个结果行之间看到不同类型，因此当 Numeric 处理程序被指示返回 Decimal 时，无法充分利用“本机十进制”模式，必须对每个值运行
    isinstance() 来检查其是否已经是 Decimal。重新打开
- en: 'References: [#1840](https://www.sqlalchemy.org/trac/ticket/1840)'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1840](https://www.sqlalchemy.org/trac/ticket/1840)
- en: 0.6.2
  id: totrans-659
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.2
- en: 'Released: Tue Jul 06 2010'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Tue Jul 06 2010
- en: orm
  id: totrans-661
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join() will check for a call of the form query.join(target, clause_expression),
    i.e. missing the tuple, and raise an informative error message that this is the
    wrong calling form.
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join() 将检查是否调用了形式为 query.join(target, clause_expression) 的调用，即缺少元组，并提出信息性错误消息，说明这是错误的调用形式。
- en: '**[orm]**'
  id: totrans-664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding flushes on self-referential bi-directional many-to-many
    relationships, where two objects made to mutually reference each other in one
    flush would fail to insert a row for both sides. Regression from 0.5.
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于自引用双向多对多关系刷新的错误，其中在一个刷新中使两个对象相互引用的情况下，将无法为双方插入行。从 0.5 版本开始的回归。
- en: 'References: [#1824](https://www.sqlalchemy.org/trac/ticket/1824)'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1824](https://www.sqlalchemy.org/trac/ticket/1824)
- en: '**[orm]**'
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the post_update feature of relationship() has been reworked architecturally
    to integrate more closely with the new 0.6 unit of work. The motivation for the
    change is so that multiple “post update” calls, each affecting different foreign
    key columns of the same row, are executed in a single UPDATE statement, rather
    than one UPDATE statement per column per row. Multiple row updates are also batched
    into executemany()s as possible, while maintaining consistent row ordering.
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship()的post_update功能在架构上进行了重新设计，以更紧密地与新的0.6工作单元集成。更改的动机是为了使多个影响同一行不同外键列的“post
    update”调用在单个UPDATE语句中执行，而不是每列每行一个UPDATE语句。多行更新也尽可能地批量处理到executemany()中，同时保持一致的行顺序。
- en: '**[orm]**'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.statement, Query.subquery(), etc. now transfer the values of bind parameters,
    i.e. those specified by query.params(), into the resulting SQL expression. Previously
    the values would not be transferred and bind parameters would come out as None.
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.statement、Query.subquery()等现在将查询.params()指定的绑定参数的值传输到生成的SQL表达式中。以前，这些值不会被传输，绑定参数会变成None。
- en: '**[orm]**'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Subquery-eager-loading now works with Query objects which include params(),
    as well as get() Queries.
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 子查询预加载现在可以与包含params()的Query对象一起使用，以及get()查询。
- en: '**[orm]**'
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Can now call make_transient() on an instance that is referenced by parent objects
    via many-to-one, without the parent’s foreign key value getting temporarily set
    to None - this was a function of the “detect primary key switch” flush handler.
    It now ignores objects that are no longer in the “persistent” state, and the parent’s
    foreign key identifier is left unaffected.
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在被父对象通过多对一引用的实例上调用make_transient()，而不会导致父对象的外键值暂时设置为None - 这是“检测主键切换”刷新处理程序的功能。它现在忽略不再处于“持久”状态的对象，父对象的外键标识符保持不受影响。
- en: '**[orm]**'
  id: totrans-675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() now accepts False, which cancels any existing order_by() state
    on the Query, allowing subsequent generative methods to be called which do not
    support ORDER BY. This is not the same as the already existing feature of passing
    None, which suppresses any existing order_by() settings, including those configured
    on the mapper. False will make it as though order_by() was never called, while
    None is an active setting.
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by()现在接受False，取消Query上的任何现有order_by()状态，允许调用后续不支持ORDER BY的生成方法。这与已经存在的传递None的功能不同，后者会抑制任何现有的order_by()设置，包括在映射器上配置的设置。False将使order_by()好像从未调用过，而None是一个活动设置。
- en: '**[orm]**'
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An instance which is moved to “transient”, has an incomplete or missing set
    of primary key attributes, and contains expired attributes, will raise an InvalidRequestError
    if an expired attribute is accessed, instead of getting a recursion overflow.
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将移至“瞬态”状态的实例具有不完整或缺失的主键属性集，并且包含过期属性，则在访问过期属性时会引发InvalidRequestError，而不是出现递归溢出。
- en: '**[orm]**'
  id: totrans-679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The make_transient() function is now in the generated documentation.
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient()函数现在在生成的文档中。
- en: '**[orm]**'
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: make_transient() removes all “loader” callables from the state being made transient,
    removing any “expired” state - all unloaded attributes reset back to undefined,
    None/empty on access.
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient()从被设置为瞬态的状态中删除所有“loader”可调用项，删除任何“过期”状态 - 所有未加载的属性在访问时重置为未定义、None/空。
- en: sql
  id: totrans-683
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The warning emitted by the Unicode and String types with convert_unicode=True
    no longer embeds the actual value passed. This so that the Python warning registry
    does not continue to grow in size, the warning is emitted once as per the warning
    filter settings, and large string values don’t pollute the output.
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当convert_unicode=True的Unicode和String类型发出警告时，不再嵌入传递的实际值。这样做是为了避免Python警告注册表继续增长，根据警告过滤器设置，警告只会发出一次，大字符串值不会污染输出。
- en: 'References: [#1822](https://www.sqlalchemy.org/trac/ticket/1822)'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1822](https://www.sqlalchemy.org/trac/ticket/1822)
- en: '**[sql]**'
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug that would prevent overridden clause compilation from working for
    “annotated” expression elements, which are often generated by the ORM.
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug会阻止“annotated”表达式元素的重写子句编译正常工作，这些表达式元素通常由ORM生成。
- en: '**[sql]**'
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The argument to “ESCAPE” of a LIKE operator or similar is passed through render_literal_value(),
    which may implement escaping of backslashes.
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LIKE运算符或类似运算符的“ESCAPE”参数通过render_literal_value()传递，该方法可能实现反斜杠的转义。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: '**[sql]**'
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in Enum type which blew away native_enum flag when used with TypeDecorators
    or other adaption scenarios.
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Enum 类型的 bug，当与 TypeDecorators 或其他适配场景一起使用时会清除 native_enum 标志。
- en: '**[sql]**'
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Inspector hits bind.connect() when invoked to ensure initialize has been called.
    the internal name “.conn” is changed to “.bind”, since that’s what it is.
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用 Inspector 时，会触发 bind.connect() 以确保已调用 initialize。内部名称“.conn”更改为“.bind”，因为那才是它的名称。
- en: '**[sql]**'
  id: totrans-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Modified the internals of “column annotation” such that a custom Column subclass
    can safely override _constructor to return Column, for the purposes of making
    “configurational” column classes that aren’t involved in proxying, etc.
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了“列注释”的内部结构，使得自定义 Column 子类可以安全地重写 _constructor 以返回 Column，用于创建不涉及代理等的“配置”列类。
- en: '**[sql]**'
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy() takes along the “unique” attribute among others, fixes regarding
    declarative mixins
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy() 包括“unique”属性在内，修复了关于声明性混合的问题
- en: 'References: [#1829](https://www.sqlalchemy.org/trac/ticket/1829)'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1829](https://www.sqlalchemy.org/trac/ticket/1829)
- en: postgresql
  id: totrans-701
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: render_literal_value() is overridden which escapes backslashes, currently applies
    to the ESCAPE clause of LIKE and similar expressions. Ultimately this will have
    to detect the value of “standard_conforming_strings” for full behavior.
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: render_literal_value() 被重写以转义反斜杠，目前适用于 LIKE 等表达式的 ESCAPE 子句。最终，这将必须检测“standard_conforming_strings”的值以获得完整行为。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: '**[postgresql]**'
  id: totrans-705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Won’t generate “CREATE TYPE” / “DROP TYPE” if using types.Enum on a PG version
    prior to 8.3 - the supports_native_enum flag is fully honored.
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在 PG 版本低于 8.3 上使用 types.Enum，则不会生成“CREATE TYPE” / “DROP TYPE” - supports_native_enum
    标志将被完全遵守。
- en: 'References: [#1836](https://www.sqlalchemy.org/trac/ticket/1836)'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1836](https://www.sqlalchemy.org/trac/ticket/1836)
- en: mysql
  id: totrans-708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: MySQL dialect doesn’t emit CAST() for MySQL version detected < 4.0.2\. This
    allows the unicode check on connect to proceed.
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言在检测到 MySQL 版本小于 4.0.2 时不会发出 CAST()。这允许在连接时进行 unicode 检查。
- en: 'References: [#1826](https://www.sqlalchemy.org/trac/ticket/1826)'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1826](https://www.sqlalchemy.org/trac/ticket/1826)
- en: '**[mysql]**'
  id: totrans-712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: MySQL dialect now detects NO_BACKSLASH_ESCAPES sql mode, in addition to ANSI_QUOTES.
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在检测到 NO_BACKSLASH_ESCAPES sql 模式，除了 ANSI_QUOTES。
- en: '**[mysql]**'
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: render_literal_value() is overridden which escapes backslashes, currently applies
    to the ESCAPE clause of LIKE and similar expressions. This behavior is derived
    from detecting the value of NO_BACKSLASH_ESCAPES.
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: render_literal_value() 被重写以转义反斜杠，目前适用于 LIKE 等表达式的 ESCAPE 子句。此行为源自检测到 NO_BACKSLASH_ESCAPES
    的值。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: mssql
  id: totrans-717
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If server_version_info is outside the usual range of (8, ), (9, ), (10, ), a
    warning is emitted which suggests checking that the FreeTDS version configuration
    is using 7.0 or 8.0, not 4.2.
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 server_version_info 超出通常范围（8, ），（9, ），（10, ），则会发出警告，建议检查 FreeTDS 版本配置是否使用
    7.0 或 8.0，而不是 4.2。
- en: 'References: [#1825](https://www.sqlalchemy.org/trac/ticket/1825)'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1825](https://www.sqlalchemy.org/trac/ticket/1825)
- en: oracle
  id: totrans-721
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed ora-8 compatibility flags such that they don’t cache a stale value from
    before the first database connection actually occurs.
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ora-8 兼容性标志，使其不会缓存在第一次数据库连接之前的旧值。
- en: 'References: [#1819](https://www.sqlalchemy.org/trac/ticket/1819)'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1819](https://www.sqlalchemy.org/trac/ticket/1819)
- en: '**[oracle]**'
  id: totrans-725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle’s “native decimal” metadata begins to return ambiguous typing information
    about numerics when columns are embedded in subqueries as well as when ROWNUM
    is consulted with subqueries, as we do for limit/offset. We’ve added these ambiguous
    conditions to the cx_oracle “convert to Decimal()” handler, so that we receive
    numerics as Decimal in more cases instead of as floats. These are then converted,
    if requested, into Integer or Float, or otherwise kept as the lossless Decimal.
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 Oracle 的“本地十进制”元数据在子查询中嵌入列时以及在使用子查询进行 ROWNUM 查询时开始返回关于数值的模糊类型信息，就像我们为 limit/offset
    所做的那样。我们已将这些模糊条件添加到 cx_oracle 的“转换为 Decimal()”处理程序中，以便在更多情况下将数值作为 Decimal 而不是浮点数接收。然后，如果需要，这些数值将被转换为整数或浮点数，否则将保留为无损
    Decimal。
- en: 'References: [#1840](https://www.sqlalchemy.org/trac/ticket/1840)'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1840](https://www.sqlalchemy.org/trac/ticket/1840)
- en: misc
  id: totrans-728
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[firebird]**'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Fixed incorrect signature in do_execute(), error introduced in 0.6.1.
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 do_execute() 中的错误签名，在 0.6.1 中引入的错误。
- en: 'References: [#1823](https://www.sqlalchemy.org/trac/ticket/1823)'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1823](https://www.sqlalchemy.org/trac/ticket/1823)
- en: '**[firebird]**'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird dialect adds CHAR, VARCHAR types which accept a “charset” flag, to
    support Firebird “CHARACTER SET” clause.
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 方言添加了接受“charset”标志的 CHAR、VARCHAR 类型，以支持 Firebird 的“CHARACTER SET”子句。
- en: 'References: [#1813](https://www.sqlalchemy.org/trac/ticket/1813)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1813](https://www.sqlalchemy.org/trac/ticket/1813)
- en: '**[declarative]**'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Added support for @classproperty to provide any kind of schema/mapping construct
    from a declarative mixin, including columns with foreign keys, relationships,
    column_property, deferred. This solves all such issues on declarative mixins.
    An error is raised if any MapperProperty subclass is specified on a mixin without
    using @classproperty.
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 @classproperty 的支持，以从声明性 mixin 提供任何类型的模式/映射构造，包括具有外键、关系、column_property、deferred
    的列。如果在 mixin 上指定了任何 MapperProperty 子类，而不使用 @classproperty，则会引发错误。
- en: 'References: [#1751](https://www.sqlalchemy.org/trac/ticket/1751), [#1796](https://www.sqlalchemy.org/trac/ticket/1796),
    [#1805](https://www.sqlalchemy.org/trac/ticket/1805)'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1751](https://www.sqlalchemy.org/trac/ticket/1751), [#1796](https://www.sqlalchemy.org/trac/ticket/1796),
    [#1805](https://www.sqlalchemy.org/trac/ticket/1805)
- en: '**[declarative]**'
  id: totrans-738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: a mixin class can now define a column that matches one which is present on a
    __table__ defined on a subclass. It cannot, however, define one that is not present
    in the __table__, and the error message here now works.
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个 mixin 类现在可以定义一个与子类中定义的 __table__ 上存在的列相匹配的列。然而，它不能定义一个在 __table__ 中不存在的列，这里的错误消息现在已经可以正常工作。
- en: 'References: [#1821](https://www.sqlalchemy.org/trac/ticket/1821)'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1821](https://www.sqlalchemy.org/trac/ticket/1821)
- en: '**[compiler] [extension]**'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[compiler] [extension]**'
- en: The ‘default’ compiler is automatically copied over when overriding the compilation
    of a built in clause construct, so no KeyError is raised if the user-defined compiler
    is specific to certain backends and compilation for a different backend is invoked.
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当覆盖内置子句构造的编译时，“default”编译器会自动复制过去，因此如果用户定义的编译器特定于某些后端，并且调用了不同后端的编译，就不会引发 KeyError。
- en: 'References: [#1838](https://www.sqlalchemy.org/trac/ticket/1838)'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1838](https://www.sqlalchemy.org/trac/ticket/1838)
- en: '**[documentation]**'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Added documentation for the Inspector.
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Inspector 添加了文档。
- en: 'References: [#1820](https://www.sqlalchemy.org/trac/ticket/1820)'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1820](https://www.sqlalchemy.org/trac/ticket/1820)
- en: '**[documentation]**'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Fixed @memoized_property and @memoized_instancemethod decorators so that Sphinx
    documentation picks up these attributes and methods, such as ResultProxy.inserted_primary_key.
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 @memoized_property 和 @memoized_instancemethod 装饰器，以便 Sphinx 文档能够捕捉到这些属性和方法，例如
    ResultProxy.inserted_primary_key。
- en: 'References: [#1830](https://www.sqlalchemy.org/trac/ticket/1830)'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1830](https://www.sqlalchemy.org/trac/ticket/1830)
- en: 0.6.1
  id: totrans-750
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.1
- en: 'Released: Mon May 31 2010'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Mon May 31 2010
- en: orm
  id: totrans-752
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.6.0 involving improper history accounting on
    mutable attributes.
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.6.0 中引入的关于可变属性的不正确历史记录账务的回归。
- en: 'References: [#1782](https://www.sqlalchemy.org/trac/ticket/1782)'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1782](https://www.sqlalchemy.org/trac/ticket/1782)
- en: '**[orm]**'
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.6.0 unit of work refactor that broke updates
    for bi-directional relationship() with post_update=True.
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.6.0 中引入的工作单元重构中破坏了带有 post_update=True 的双向 relationship() 更新的回归。
- en: 'References: [#1807](https://www.sqlalchemy.org/trac/ticket/1807)'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1807](https://www.sqlalchemy.org/trac/ticket/1807)
- en: '**[orm]**'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() will not expire attributes on the returned instance if that
    instance is “pending”.
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果返回的实例是“pending”，session.merge() 将不会使返回的实例上的属性过期。
- en: 'References: [#1789](https://www.sqlalchemy.org/trac/ticket/1789)'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1789](https://www.sqlalchemy.org/trac/ticket/1789)
- en: '**[orm]**'
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed __setstate__ method of CollectionAdapter to not fail during deserialize
    where parent InstanceState not yet unserialized.
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CollectionAdapter 的 __setstate__ 方法，在未反序列化父 InstanceState 的情况下不会失败。
- en: 'References: [#1802](https://www.sqlalchemy.org/trac/ticket/1802)'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1802](https://www.sqlalchemy.org/trac/ticket/1802)
- en: '**[orm]**'
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added internal warning in case an instance without a full PK happened to be
    expired and then was asked to refresh.
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实例没有完整主键的情况下，添加了内部警告，如果实例已过期并且被要求刷新。
- en: 'References: [#1797](https://www.sqlalchemy.org/trac/ticket/1797)'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1797](https://www.sqlalchemy.org/trac/ticket/1797)
- en: '**[orm]**'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added more aggressive caching to the mapper’s usage of UPDATE, INSERT, and DELETE
    expressions. Assuming the statement has no per-object SQL expressions attached,
    the expression objects are cached by the mapper after the first create, and their
    compiled form is stored persistently in a cache dictionary for the duration of
    the related Engine. The cache is an LRUCache for the rare case that a mapper receives
    an extremely high number of different column patterns as UPDATEs.
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对映射器在使用UPDATE、INSERT和DELETE表达式时增加了更积极的缓存。假设语句没有附加每个对象的SQL表达式，表达式对象在第一次创建后会被映射器缓存，并且它们的编译形式会持久地存储在与相关引擎的持续时间相关的缓存字典中。对于极少数情况下，如果映射器接收到大量不同的列模式作为UPDATE，缓存是一个LRUCache。
- en: sql
  id: totrans-770
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: expr.in_() now accepts a text() construct as the argument. Grouping parenthesis
    are added automatically, i.e. usage is like col.in_(text(“select id from table”)).
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: expr.in_()现在接受一个text()构造作为参数。自动添加分组括号，即使用方式类似于col.in_(text(“select id from table”)).
- en: 'References: [#1793](https://www.sqlalchemy.org/trac/ticket/1793)'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1793](https://www.sqlalchemy.org/trac/ticket/1793)
- en: '**[sql]**'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Columns of _Binary type (i.e. LargeBinary, BLOB, etc.) will coerce a “basestring”
    on the right side into a _Binary as well so that required DBAPI processing takes
    place.
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Binary类型的列（即LargeBinary、BLOB等）将右侧的“basestring”强制转换为_Binary，以便进行必要的DBAPI处理。
- en: '**[sql]**'
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added table.add_is_dependent_on(othertable), allows manual placement of dependency
    rules between two Table objects for use within create_all(), drop_all(), sorted_tables.
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了table.add_is_dependent_on(othertable)，允许在create_all()、drop_all()、sorted_tables中手动放置两个Table对象之间的依赖规则。
- en: 'References: [#1801](https://www.sqlalchemy.org/trac/ticket/1801)'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1801](https://www.sqlalchemy.org/trac/ticket/1801)
- en: '**[sql]**'
  id: totrans-779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug that prevented implicit RETURNING from functioning properly with composite
    primary key that contained zeroes.
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug阻止了包含零的复合主键的隐式RETURNING功能正常运行。
- en: 'References: [#1778](https://www.sqlalchemy.org/trac/ticket/1778)'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1778](https://www.sqlalchemy.org/trac/ticket/1778)
- en: '**[sql]**'
  id: totrans-782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed errant space character when generating ADD CONSTRAINT for a named UNIQUE
    constraint.
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为命名的UNIQUE约束生成ADD CONSTRAINT时出现的额外空格字符。
- en: '**[sql]**'
  id: totrans-784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed “table” argument on constructor of ForeignKeyConstraint
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ForeignKeyConstraint构造函数中“table”参数的bug
- en: 'References: [#1571](https://www.sqlalchemy.org/trac/ticket/1571)'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1571](https://www.sqlalchemy.org/trac/ticket/1571)
- en: '**[sql]**'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in connection pool cursor wrapper whereby if a cursor threw an exception
    on close(), the logging of the message would fail.
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池游标包装器中的bug，即如果游标在close()时抛出异常，则消息的记录将失败。
- en: 'References: [#1786](https://www.sqlalchemy.org/trac/ticket/1786)'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1786](https://www.sqlalchemy.org/trac/ticket/1786)
- en: '**[sql]**'
  id: totrans-790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the _make_proxy() method of ColumnClause and Column now use self.__class__ to
    determine the class of object to be returned instead of hardcoding to ColumnClause/Column,
    making it slightly easier to produce specific subclasses of these which work in
    alias/subquery situations.
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnClause和Column的_make_proxy()方法现在使用self.__class__来确定要返回的对象类，而不是硬编码为ColumnClause/Column，这样更容易生成在别名/子查询情况下工作的特定子类。
- en: '**[sql]**'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.XXX() doesn’t inadvertently resolve to non-Function classes (e.g. fixes
    func.text()).
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.XXX()不会意外地解析为非Function类（例如修复了func.text()）。
- en: 'References: [#1798](https://www.sqlalchemy.org/trac/ticket/1798)'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1798](https://www.sqlalchemy.org/trac/ticket/1798)
- en: mysql
  id: totrans-795
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: func.sysdate() emits “SYSDATE()”, i.e. with the ending parenthesis, on MySQL.
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.sysdate()在MySQL上发出“SYSDATE()”，即带有结束括号。
- en: 'References: [#1794](https://www.sqlalchemy.org/trac/ticket/1794)'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1794](https://www.sqlalchemy.org/trac/ticket/1794)
- en: sqlite
  id: totrans-799
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed concatenation of constraints when “PRIMARY KEY” constraint gets moved
    to column level due to SQLite AUTOINCREMENT keyword being rendered.
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当“PRIMARY KEY”约束由于SQLite AUTOINCREMENT关键字被渲染时移动到列级别时约束的连接错误。
- en: 'References: [#1812](https://www.sqlalchemy.org/trac/ticket/1812)'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1812](https://www.sqlalchemy.org/trac/ticket/1812)
- en: oracle
  id: totrans-803
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added a check for cx_oracle versions lower than version 5, in which case the
    incompatible “output type handler” won’t be used. This will impact decimal accuracy
    and some unicode handling issues.
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对低于版本5的cx_oracle版本的检查，如果是这种情况，将不使用不兼容的“输出类型处理程序”。这将影响十进制精度和一些Unicode处理问题。
- en: 'References: [#1775](https://www.sqlalchemy.org/trac/ticket/1775)'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1775](https://www.sqlalchemy.org/trac/ticket/1775)
- en: '**[oracle]**'
  id: totrans-807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed use_ansi=False mode, which was producing broken WHERE clauses in pretty
    much all cases.
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 use_ansi=False 模式，在几乎所有情况下都会产生错误的 WHERE 子句。
- en: 'References: [#1790](https://www.sqlalchemy.org/trac/ticket/1790)'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1790](https://www.sqlalchemy.org/trac/ticket/1790)
- en: '**[oracle]**'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Re-established support for Oracle 8 with cx_oracle, including that use_ansi
    is set to False automatically, NVARCHAR2 and NCLOB are not rendered for Unicode,
    “native unicode” check doesn’t fail, cx_oracle “native unicode” mode is disabled,
    VARCHAR() is emitted with bytes count instead of char count.
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新支持使用 cx_oracle 的 Oracle 8，包括自动将 use_ansi 设置为 False，对于 Unicode，不会为 NVARCHAR2
    和 NCLOB 渲染，“native unicode” 检查不会失败，cx_oracle 的“native unicode” 模式被禁用，VARCHAR()
    以字节计数而不是字符计数发出。
- en: 'References: [#1808](https://www.sqlalchemy.org/trac/ticket/1808)'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1808](https://www.sqlalchemy.org/trac/ticket/1808)
- en: '**[oracle]**'
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: oracle_xe 5 doesn’t accept a Python unicode object in its connect string in
    normal Python 2.x mode - so we coerce to str() directly. non-ascii characters
    aren’t supported in connect strings here since we don’t know what encoding we
    could use.
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在正常的 Python 2.x 模式下，oracle_xe 5 不接受 Python Unicode 对象作为连接字符串 - 因此我们直接强制转换为 str()。由于我们不知道可以使用的编码，这里连接字符串中不支持非
    ASCII 字符。
- en: 'References: [#1670](https://www.sqlalchemy.org/trac/ticket/1670)'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1670](https://www.sqlalchemy.org/trac/ticket/1670)
- en: '**[oracle]**'
  id: totrans-816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: FOR UPDATE is emitted in the syntactically correct position when limit/offset
    is used, i.e. the ROWNUM subquery. However, Oracle can’t really handle FOR UPDATE
    with ORDER BY or with subqueries, so its still not very usable, but at least SQLA
    gets the SQL past the Oracle parser.
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 limit/offset 时，在语法上正确的位置发出 FOR UPDATE，即 ROWNUM 子查询。但是，Oracle 实际上无法处理带有 ORDER
    BY 或子查询的 FOR UPDATE，因此仍然不太可用，但至少 SQLA 能够将 SQL 传递给 Oracle 解析器。
- en: 'References: [#1815](https://www.sqlalchemy.org/trac/ticket/1815)'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1815](https://www.sqlalchemy.org/trac/ticket/1815)
- en: misc
  id: totrans-819
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engines]**'
  id: totrans-820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Fixed building the C extensions on Python 2.4.
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Python 2.4 上构建 C 扩展的问题。
- en: 'References: [#1781](https://www.sqlalchemy.org/trac/ticket/1781)'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1781](https://www.sqlalchemy.org/trac/ticket/1781)
- en: '**[engines]**'
  id: totrans-823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Pool classes will reuse the same “pool_logging_name” setting after a dispose()
    occurs.
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 dispose() 发生后，池类将重用相同的“pool_logging_name”设置。
- en: '**[engines]**'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Engine gains an “execution_options” argument and update_execution_options()
    method, which will apply to all connections generated by this engine.
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引擎获得了一个“execution_options”参数和 update_execution_options() 方法，将应用于此引擎生成的所有连接。
- en: '**[firebird]**'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added a label to the query used within has_table() and has_sequence() to work
    with older versions of Firebird that don’t provide labels for result columns.
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 has_table() 和 has_sequence() 中使用的查询中添加了一个标签，以便与不提供结果列标签的旧版本 Firebird 一起使用。
- en: 'References: [#1521](https://www.sqlalchemy.org/trac/ticket/1521)'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1521](https://www.sqlalchemy.org/trac/ticket/1521)
- en: '**[firebird]**'
  id: totrans-830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added integer coercion to the “type_conv” attribute when passed via query string,
    so that it is properly interpreted by Kinterbasdb.
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在通过查询字符串传递“type_conv”属性时，添加了整数强制转换，以便由 Kinterbasdb 正确解释。
- en: 'References: [#1779](https://www.sqlalchemy.org/trac/ticket/1779)'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1779](https://www.sqlalchemy.org/trac/ticket/1779)
- en: '**[firebird]**'
  id: totrans-833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added ‘connection shutdown’ to the list of exception strings which indicate
    a dropped connection.
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“连接关闭”添加到异常字符串列表中，表示连接已断开。
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1646](https://www.sqlalchemy.org/trac/ticket/1646)
- en: '**[sqlsoup]**'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: the SqlSoup constructor accepts a base argument which specifies the base class
    to use for mapped classes, the default being object.
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SqlSoup 构造函数接受一个 base 参数，指定用于映射类的基类，默认为 object。
- en: 'References: [#1783](https://www.sqlalchemy.org/trac/ticket/1783)'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1783](https://www.sqlalchemy.org/trac/ticket/1783)
- en: 0.6.0
  id: totrans-839
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.0
- en: 'Released: Sun Apr 18 2010'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sun Apr 18 2010
- en: orm
  id: totrans-841
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Unit of work internals have been rewritten. Units of work with large numbers
    of objects interdependent objects can now be flushed without recursion overflows
    as there is no longer reliance upon recursive calls. The number of internal structures
    now stays constant for a particular session state, regardless of how many relationships
    are present on mappings. The flow of events now corresponds to a linear list of
    steps, generated by the mappers and relationships based on actual work to be done,
    filtered through a single topological sort for correct ordering. Flush actions
    are assembled using far fewer steps and less memory.
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工作单元内部已经重写。具有大量相互依赖对象的工作单元现在可以在没有递归溢出的情况下刷新，因为不再依赖递归调用。对于特定会话状态，内部结构的数量现在保持恒定，而不管映射上存在多少关系。事件流现在对应于由映射器和基于实际工作的关系生成的线性步骤列表，通过单个拓扑排序进行正确排序。刷新操作使用的步骤更少，占用更少的内存。
- en: 'References: [#1081](https://www.sqlalchemy.org/trac/ticket/1081), [#1742](https://www.sqlalchemy.org/trac/ticket/1742)'
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1081](https://www.sqlalchemy.org/trac/ticket/1081), [#1742](https://www.sqlalchemy.org/trac/ticket/1742)
- en: '**[orm]**'
  id: totrans-845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Along with the UOW rewrite, this also removes an issue introduced in 0.6beta3
    regarding topological cycle detection for units of work with long dependency cycles.
    We now use an algorithm written by Guido (thanks Guido!).
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随着 UOW 重写，这也解决了 0.6beta3 中关于具有长依赖循环的工作单元的拓扑循环检测问题。我们现在使用 Guido 编写的算法（感谢 Guido！）。
- en: '**[orm]**'
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: one-to-many relationships now maintain a list of positive parent-child associations
    within the flush, preventing previous parents marked as deleted from cascading
    a delete or NULL foreign key set on those child objects, despite the end-user
    not removing the child from the old association.
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '一对多关系现在在 flush 中维护一个正的父子关联列表，防止之前标记为已删除的父项在级联删除或在旧关联中未将子项从中删除的情况下设置 NULL 外键。 '
- en: 'References: [#1764](https://www.sqlalchemy.org/trac/ticket/1764)'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1764](https://www.sqlalchemy.org/trac/ticket/1764)
- en: '**[orm]**'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A collection lazy load will switch off default eagerloading on the reverse many-to-one
    side, since that loading is by definition unnecessary.
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集合的延迟加载将关闭反向多对一端的默认急加载，因为该加载在定义上是不必要的。
- en: 'References: [#1495](https://www.sqlalchemy.org/trac/ticket/1495)'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1495](https://www.sqlalchemy.org/trac/ticket/1495)
- en: '**[orm]**'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.refresh() now does an equivalent expire() on the given instance first,
    so that the “refresh-expire” cascade is propagated. Previously, refresh() was
    not affected in any way by the presence of “refresh-expire” cascade. This is a
    change in behavior versus that of 0.6beta2, where the “lockmode” flag passed to
    refresh() would cause a version check to occur. Since the instance is first expired,
    refresh() always upgrades the object to the most recent version.
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 Session.refresh() 首先对给定实例执行等效的 expire()，以便“刷新-过期”级联被传播。以前，refresh() 不受“刷新-过期”级联的任何影响。这是与
    0.6beta2 的行为不同之处，其中传递给 refresh() 的“lockmode”标志会导致版本检查发生。由于实例首先被过期，refresh() 总是将对象升级到最新版本。
- en: '**[orm]**'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ‘refresh-expire’ cascade, when reaching a pending object, will expunge the
    object if the cascade also includes “delete-orphan”, or will simply detach it
    otherwise.
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当“刷新-过期”级联到达待处理对象时，如果级联还包括“删除孤儿”，则会将对象删除；否则，将简单分离它。
- en: 'References: [#1754](https://www.sqlalchemy.org/trac/ticket/1754)'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1754](https://www.sqlalchemy.org/trac/ticket/1754)
- en: '**[orm]**'
  id: totrans-858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: id(obj) is no longer used internally within topological.py, as the sorting functions
    now require hashable objects only.
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再在 topological.py 内部使用 id(obj)，因为排序函数现在仅需要可哈希对象。
- en: 'References: [#1756](https://www.sqlalchemy.org/trac/ticket/1756)'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1756](https://www.sqlalchemy.org/trac/ticket/1756)
- en: '**[orm]**'
  id: totrans-861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ORM will set the docstring of all generated descriptors to None by default.
    This can be overridden using ‘doc’ (or if using Sphinx, attribute docstrings work
    too).
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 现在默认将所有生成的描述符的文档字符串设置为 None。可以使用 'doc' 进行覆盖（或者如果使用 Sphinx，则属性文档字符串也有效）。
- en: '**[orm]**'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added kw argument ‘doc’ to all mapper property callables as well as Column().
    Will assemble the string ‘doc’ as the ‘__doc__’ attribute on the descriptor.
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有映射器属性可调用以及 Column() 中添加了 kw 参数 'doc'。将字符串 'doc' 组装为描述符上的 '__doc__' 属性。
- en: '**[orm]**'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Usage of version_id_col on a backend that supports cursor.rowcount for execute()
    but not executemany() now works when a delete is issued (already worked for saves,
    since those don’t use executemany()). For a backend that doesn’t support cursor.rowcount
    at all, a warning is emitted the same as with saves.
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在支持 cursor.rowcount 用于 execute() 但不支持 executemany() 的后端上，现在在发出删除时可以使用 version_id_col（已经适用于保存，因为这些不使用
    executemany()）。对于根本不支持 cursor.rowcount 的后端，与保存一样会发出警告。
- en: 'References: [#1761](https://www.sqlalchemy.org/trac/ticket/1761)'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1761](https://www.sqlalchemy.org/trac/ticket/1761)
- en: '**[orm]**'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ORM now short-term caches the “compiled” form of insert() and update() constructs
    when flushing lists of objects of all the same class, thereby avoiding redundant
    compilation per individual INSERT/UPDATE within an individual flush() call.
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 现在会在刷新相同类别对象列表时短期缓存 insert() 和 update() 构造的“编译”形式，从而避免在单个 flush() 调用中每个
    INSERT/UPDATE 都进行冗余编译。
- en: '**[orm]**'
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: internal getattr(), setattr(), getcommitted() methods on ColumnProperty, CompositeProperty,
    RelationshipProperty have been underscored (i.e. are private), signature has changed.
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnProperty、CompositeProperty、RelationshipProperty 上的内部 getattr()、setattr()、getcommitted()
    方法已经被下划线标记为私有（即私有），签名已更改。
- en: examples
  id: totrans-872
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Updated attribute_shard.py example to use a more robust method of searching
    a Query for binary expressions which compare columns against literal values.
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 attribute_shard.py 示例，使用了更健壮的方法来搜索查询中将列与文字值进行比较的二进制表达式。
- en: sql
  id: totrans-875
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored some bind-labeling logic from 0.5 which ensures that tables with column
    names that overlap another column of the form “<tablename>_<columnname>” won’t
    produce errors if column._label is used as a bind name during an UPDATE. Test
    coverage which wasn’t present in 0.5 has been added.
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.5版本中恢复了一些绑定标签逻辑，确保具有与“<tablename>_<columnname>”形式重叠列名的表在 UPDATE 过程中使用 column._label
    作为绑定名称时不会产生错误。增加了0.5版本中缺少的测试覆盖率。
- en: 'References: [#1755](https://www.sqlalchemy.org/trac/ticket/1755)'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1755](https://www.sqlalchemy.org/trac/ticket/1755)
- en: '**[sql]**'
  id: totrans-879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: somejoin.select(fold_equivalents=True) is no longer deprecated, and will eventually
    be rolled into a more comprehensive version of the feature for.
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: somejoin.select(fold_equivalents=True) 不再被弃用，并最终将被合并到更全面的功能版本中。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[sql]**'
  id: totrans-882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Numeric type raises an *enormous* warning when expected to convert floats
    to Decimal from a DBAPI that returns floats. This includes SQLite, Sybase, MS-SQL.
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Numeric 类型在期望从返回浮点数的 DBAPI 转换为 Decimal 时会引发*巨大*警告。这包括 SQLite、Sybase、MS-SQL。
- en: 'References: [#1759](https://www.sqlalchemy.org/trac/ticket/1759)'
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1759](https://www.sqlalchemy.org/trac/ticket/1759)
- en: '**[sql]**'
  id: totrans-885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed an error in expression typing which caused an endless loop for expressions
    with two NULL types.
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式类型错误的问题，导致具有两个NULL类型的表达式陷入无限循环。
- en: '**[sql]**'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in execution_options() feature whereby the existing Transaction and
    other state information from the parent connection would not be propagated to
    the sub-connection.
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 execution_options() 功能中的错误，其中来自父���接的现有事务和其他状态信息不会传播到子连接。
- en: '**[sql]**'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new ‘compiled_cache’ execution option. A dictionary where Compiled objects
    will be cached when the Connection compiles a clause expression into a dialect-
    and parameter- specific Compiled object. It is the user’s responsibility to manage
    the size of this dictionary, which will have keys corresponding to the dialect,
    clause element, the column names within the VALUES or SET clause of an INSERT
    or UPDATE, as well as the “batch” mode for an INSERT or UPDATE statement.
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的‘compiled_cache’执行选项。一个字典，当连接将一个子句表达式编译成特定于方言和参数的 Compiled 对象时，Compiled
    对象将被缓存。用户有责任管理这个字典的大小，它将具有与方言、子句元素、INSERT 或 UPDATE 语句的 VALUES 或 SET 子句中的列名以及 INSERT
    或 UPDATE 语句的“批处理”模式相对应的键。
- en: '**[sql]**'
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added get_pk_constraint() to reflection.Inspector, similar to get_primary_keys()
    except returns a dict that includes the name of the constraint, for supported
    backends (PG so far).
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 reflection.Inspector 中添加了 get_pk_constraint() 方法，类似于 get_primary_keys()，但返回一个包含约束名称的字典，适用于支持的后端（目前仅支持
    PG）。
- en: 'References: [#1769](https://www.sqlalchemy.org/trac/ticket/1769)'
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1769](https://www.sqlalchemy.org/trac/ticket/1769)
- en: '**[sql]**'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.create() and Table.drop() no longer apply metadata- level create/drop
    events.
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.create() 和 Table.drop() 不再应用于元数据级别的创建/删除事件。
- en: 'References: [#1771](https://www.sqlalchemy.org/trac/ticket/1771)'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1771](https://www.sqlalchemy.org/trac/ticket/1771)
- en: postgresql
  id: totrans-897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: PostgreSQL now reflects sequence names associated with SERIAL columns correctly,
    after the name of the sequence has been changed. Thanks to Kumar McMillan for
    the patch.
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 现在正确反映与 SERIAL 列关联的序列名称，之后序列名称已更改。感谢 Kumar McMillan 提供的补丁。
- en: 'References: [#1071](https://www.sqlalchemy.org/trac/ticket/1071)'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1071](https://www.sqlalchemy.org/trac/ticket/1071)
- en: '**[postgresql]**'
  id: totrans-901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Repaired missing import in psycopg2._PGNumeric type when unknown numeric is
    received.
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当接收到未知的数字时，修复了 psycopg2._PGNumeric 类型中缺失的导入。
- en: '**[postgresql]**'
  id: totrans-903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: psycopg2/pg8000 dialects now aware of REAL[], FLOAT[], DOUBLE_PRECISION[], NUMERIC[]
    return types without raising an exception.
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2/pg8000 方言现在能够识别 REAL[]、FLOAT[]、DOUBLE_PRECISION[]、NUMERIC[] 返回类型，而不会引发异常。
- en: '**[postgresql]**'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: PostgreSQL reflects the name of primary key constraints, if one exists.
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在主键约束，PostgreSQL 反映主键约束的名称。
- en: 'References: [#1769](https://www.sqlalchemy.org/trac/ticket/1769)'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1769](https://www.sqlalchemy.org/trac/ticket/1769)
- en: oracle
  id: totrans-908
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: 'Now using cx_oracle output converters so that the DBAPI returns natively the
    kinds of values we prefer:'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 cx_oracle 输出转换器，以便 DBAPI 原生返回我们喜欢的值类型：
- en: '**[oracle]**'
  id: totrans-911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: NUMBER values with positive precision + scale convert to cx_oracle.STRING and
    then to Decimal. This allows perfect precision for the Numeric type when using
    cx_oracle.
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有正精度 + 小数位数的 NUMBER 值转换为 cx_oracle.STRING，然后转换为 Decimal。这允许在使用 cx_oracle 时
    Numeric 类型具有完美的精度。
- en: 'References: [#1759](https://www.sqlalchemy.org/trac/ticket/1759)'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1759](https://www.sqlalchemy.org/trac/ticket/1759)
- en: '**[oracle]**'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: STRING/FIXED_CHAR now convert to unicode natively. SQLAlchemy’s String types
    then don’t need to apply any kind of conversions.
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: STRING/FIXED_CHAR 现在原生转换为 Unicode。SQLAlchemy 的 String 类型不需要应用任何类型的转换。
- en: misc
  id: totrans-916
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[engines]**'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: The C extension now also works with DBAPIs which use custom sequences as row
    (and not only tuples).
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C 扩展现在也适用于使用自定义序列作为行（而不仅仅是元组）的 DBAPI。
- en: 'References: [#1757](https://www.sqlalchemy.org/trac/ticket/1757)'
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1757](https://www.sqlalchemy.org/trac/ticket/1757)
- en: '**[ext]**'
  id: totrans-920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: the compiler extension now allows @compiles decorators on base classes that
    extend to child classes, @compiles decorators on child classes that aren’t broken
    by a @compiles decorator on the base class.
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在允许在扩展到子类的基类上使用 @compiles 装饰器，在子类上使用 @compiles 装饰器不会被基类上的 @compiles 装饰器破坏。
- en: '**[ext]**'
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Declarative will raise an informative error message if a non-mapped class attribute
    is referenced in the string-based relationship() arguments.
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在基于字符串的 relationship() 参数中引用非映射类属性时，Declarative 将引发一个信息性错误消息。
- en: '**[ext]**'
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Further reworked the “mixin” logic in declarative to additionally allow __mapper_args__
    as a @classproperty on a mixin, such as to dynamically assign polymorphic_identity.
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步重新调整了 declarative 中的“mixin”逻辑，还允许在 mixin 上作为 @classproperty 动态分配 polymorphic_identity
    等参数。
- en: '**[firebird]**'
  id: totrans-926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The functionality of result.rowcount can be disabled on a per-engine basis by
    setting ‘enable_rowcount=False’ on create_engine(). Normally, cursor.rowcount
    is called after any UPDATE or DELETE statement unconditionally, because the cursor
    is then closed and Firebird requires an open cursor in order to get a rowcount.
    This call is slightly expensive however so it can be disabled. To re-enable on
    a per-execution basis, the ‘enable_rowcount=True’ execution option may be used.
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过在 create_engine() 上设置 'enable_rowcount=False' 来在每个引擎上禁用 result.rowcount
    的功能。通常，在任何 UPDATE 或 DELETE 语句之后无条件地调用 cursor.rowcount，因为然后游标被关闭，而 Firebird 需要一个打开的游标才能获取
    rowcount。然而，这个调用略微昂贵，因此可以禁用。要在每次执行时重新启用，可以使用 'enable_rowcount=True' 执行选项。
- en: 0.6beta3
  id: totrans-928
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6beta3
- en: 'Released: Sun Mar 28 2010'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sun Mar 28 2010
- en: orm
  id: totrans-930
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major feature: Added new “subquery” loading capability to relationship(). This
    is an eager loading option which generates a second SELECT for each collection
    represented in a query, across all parents at once. The query re-issues the original
    end-user query wrapped in a subquery, applies joins out to the target collection,
    and loads all those collections fully in one result, similar to “joined” eager
    loading but using all inner joins and not re-fetching full parent rows repeatedly
    (as most DBAPIs seem to do, even if columns are skipped). Subquery loading is
    available at mapper config level using “lazy=’subquery’” and at the query options
    level using “subqueryload(props..)”, “subqueryload_all(props…)”.'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主要功能：向 relationship() 添加了新的“subquery”加载功能。这是一种急加载选项，为查询中表示的每个集合生成第二个 SELECT，跨所有父级一次加载。查询重新发出原始的最终用户查询，包装在一个子查询中，应用连接到目标集合，一次完全加载所有这些集合的结果，类似于“joined”急加载，但使用所有内连接，不会重复重新获取完整的父行（即使跳过列，大多数
    DBAPI 似乎也会这样做）。子查询加载在映射器配置级别使用“lazy='subquery'”和在查询选项级别使用“subqueryload(props..)”��“subqueryload_all(props…)”可用。
- en: 'References: [#1675](https://www.sqlalchemy.org/trac/ticket/1675)'
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1675](https://www.sqlalchemy.org/trac/ticket/1675)
- en: '**[orm]**'
  id: totrans-934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: To accommodate the fact that there are now two kinds of eager loading available,
    the new names for eagerload() and eagerload_all() are joinedload() and joinedload_all().
    The old names will remain as synonyms for the foreseeable future.
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应现在有两种可用的急加载类型的事实，eagerload() 和 eagerload_all() 的新名称分别为 joinedload() 和 joinedload_all()。旧名称将在可预见的未来保留为同义词。
- en: '**[orm]**'
  id: totrans-936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'The “lazy” flag on the relationship() function now accepts a string argument
    for all kinds of loading: “select”, “joined”, “subquery”, “noload” and “dynamic”,
    where the default is now “select”. The old values of True/ False/None still retain
    their usual meanings and will remain as synonyms for the foreseeable future.'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship() 函数上的“lazy”标志现在接受字符串参数，用于所有加载类型：“select”、“joined”、“subquery”、“noload”
    和 “dynamic”，其中默认值现在为“select”。True/False/None 的旧值仍保留其通常含义，并将在可预见的未来保留为同义词。
- en: '**[orm]**'
  id: totrans-938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added with_hint() method to Query() construct. This calls directly down to select().with_hint()
    and also accepts entities as well as tables and aliases. See with_hint() in the
    SQL section below.
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 with_hint() 方法到 Query() 构造中。这直接调用 select().with_hint()，并且还接受实体以及表和别名。请参见下面
    SQL 部分中的 with_hint()。
- en: 'References: [#921](https://www.sqlalchemy.org/trac/ticket/921)'
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#921](https://www.sqlalchemy.org/trac/ticket/921)
- en: '**[orm]**'
  id: totrans-941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query whereby calling q.join(prop).from_self(…). join(prop) would
    fail to render the second join outside the subquery, when joining on the same
    criterion as was on the inside.
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中的一个 bug，即调用 q.join(prop).from_self(…). join(prop) 时，当在内部使用相同的条件进行连接时，第二个连接未能在子查询之外呈现。
- en: '**[orm]**'
  id: totrans-943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query whereby the usage of aliased() constructs would fail if the
    underlying table (but not the actual alias) were referenced inside the subquery
    generated by q.from_self() or q.select_from().
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中的一个 bug，即在使用 aliased() 构造时，如果在 q.from_self() 或 q.select_from() 生成的子查询中引用了基础表（但实际别名未被引用），则会失败。
- en: '**[orm]**'
  id: totrans-945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which affected all eagerload() and similar options such that “remote”
    eager loads, i.e. eagerloads off of a lazy load such as query(A).options(eagerload(A.b,
    B.c)) wouldn’t eagerload anything, but using eagerload(“b.c”) would work fine.
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 影响了所有 eagerload() 和类似选项，即“remote” 急加载，即从延迟加载（例如 query(A).options(eagerload(A.b,
    B.c))）进行急加载不会加载任何内容，但使用 eagerload(“b.c”) 将正常工作。
- en: '**[orm]**'
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query gains an add_columns(*columns) method which is a multi- version of add_column(col).
    add_column(col) is future deprecated.
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 增加了一个 add_columns(*columns) 方法，这是 add_column(col) 的多版本。add_column(col)
    将在未来被弃用。
- en: '**[orm]**'
  id: totrans-949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join() will detect if the end result will be “FROM A JOIN A”, and will
    raise an error if so.
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join() 将检测最终结果是否为“FROM A JOIN A”，如果是，将引发错误。
- en: '**[orm]**'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join(Cls.propname, from_joinpoint=True) will check more carefully that
    “Cls” is compatible with the current joinpoint, and act the same way as Query.join(“propname”,
    from_joinpoint=True) in that regard.
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join(Cls.propname, from_joinpoint=True) 将更仔细地检查“Cls”是否与当前连接点兼容，并在这方面与
    Query.join(“propname”, from_joinpoint=True) 采取相同的方式。
- en: sql
  id: totrans-953
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added with_hint() method to select() construct. Specify a table/alias, hint
    text, and optional dialect name, and “hints” will be rendered in the appropriate
    place in the statement. Works for Oracle, Sybase, MySQL.
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 with_hint() 方法到 select() 构造中。指定表/别名、提示文本和可选的方言名称，“hints” 将在语句中的适当位置呈现。适用于
    Oracle、Sybase、MySQL。
- en: 'References: [#921](https://www.sqlalchemy.org/trac/ticket/921)'
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#921](https://www.sqlalchemy.org/trac/ticket/921)
- en: '**[sql]**'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug introduced in 0.6beta2 where column labels would render inside of
    column expressions already assigned a label.
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.6beta2 中引入的 bug，该 bug 会导致列标签在已分配标签的列表达式内部呈现。
- en: 'References: [#1747](https://www.sqlalchemy.org/trac/ticket/1747)'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1747](https://www.sqlalchemy.org/trac/ticket/1747)
- en: postgresql
  id: totrans-960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 dialect will log NOTICE messages via the “sqlalchemy.dialects.postgresql”
    logger name.
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 方言将通过 “sqlalchemy.dialects.postgresql” 记录器名称记录 NOTICE 消息。
- en: 'References: [#877](https://www.sqlalchemy.org/trac/ticket/877)'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#877](https://www.sqlalchemy.org/trac/ticket/877)
- en: '**[postgresql]**'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: the TIME and TIMESTAMP types are now available from the postgresql dialect directly,
    which add the PG-specific argument ‘precision’ to both. ‘precision’ and ‘timezone’
    are correctly reflected for both TIME and TIMEZONE types.
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TIME 和 TIMESTAMP 类型现在直接从 postgresql 方言中可用，这两个类型都添加了 PG 特定参数 'precision'。 对于
    TIME 和 TIMEZONE 类型，'precision' 和 'timezone' 也都正确反映。
- en: 'References: [#997](https://www.sqlalchemy.org/trac/ticket/997)'
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#997](https://www.sqlalchemy.org/trac/ticket/997)
- en: mysql
  id: totrans-967
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: No longer guessing that TINYINT(1) should be BOOLEAN when reflecting - TINYINT(1)
    is returned. Use Boolean/ BOOLEAN in table definition to get boolean conversion
    behavior.
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再猜测 TINYINT(1) 应该是 BOOLEAN 当进行反射时 - TINYINT(1) 被返回。在表定义中使用 Boolean/ BOOLEAN
    来获取布尔转换行为。
- en: 'References: [#1752](https://www.sqlalchemy.org/trac/ticket/1752)'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1752](https://www.sqlalchemy.org/trac/ticket/1752)
- en: oracle
  id: totrans-971
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The Oracle dialect will issue VARCHAR type definitions using character counts,
    i.e. VARCHAR2(50 CHAR), so that the column is sized in terms of characters and
    not bytes. Column reflection of character types will also use ALL_TAB_COLUMNS.CHAR_LENGTH
    instead of ALL_TAB_COLUMNS.DATA_LENGTH. Both of these behaviors take effect when
    the server version is 9 or higher - for version 8, the old behaviors are used.
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 方言将使用字符计数发出 VARCHAR 类型定义，即 VARCHAR2(50 CHAR)，因此列的大小是以字符而不是字节为单位。 字符类型的列反射也将使用
    ALL_TAB_COLUMNS.CHAR_LENGTH 而不是 ALL_TAB_COLUMNS.DATA_LENGTH。 当服务器版本为 9 或更高版本时，这两种行为都会生效
    - 对于版本 8，则使用旧行为。
- en: 'References: [#1744](https://www.sqlalchemy.org/trac/ticket/1744)'
  id: totrans-974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1744](https://www.sqlalchemy.org/trac/ticket/1744)
- en: misc
  id: totrans-975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Using a mixin won’t break if the mixin implements an unpredictable __getattribute__(),
    i.e. Zope interfaces.
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 mixin 实现了一个不可预测的 __getattribute__()，即 Zope 接口，使用 mixin 将不会出错。
- en: 'References: [#1746](https://www.sqlalchemy.org/trac/ticket/1746)'
  id: totrans-978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1746](https://www.sqlalchemy.org/trac/ticket/1746)
- en: '**[declarative]**'
  id: totrans-979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Using @classdecorator and similar on mixins to define __tablename__, __table_args__,
    etc. now works if the method references attributes on the ultimate subclass.
  id: totrans-980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mixins 上使用 @classdecorator 和类似方法来定义 __tablename__、__table_args__ 等，如果该方法引用了最终子类的属性，现在可以正常工作。
- en: 'References: [#1749](https://www.sqlalchemy.org/trac/ticket/1749)'
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1749](https://www.sqlalchemy.org/trac/ticket/1749)
- en: '**[declarative]**'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: relationships and columns with foreign keys aren’t allowed on declarative mixins,
    sorry.
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明式 mixins 上不允许有带外键的关系和列，抱歉。
- en: 'References: [#1751](https://www.sqlalchemy.org/trac/ticket/1751)'
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1751](https://www.sqlalchemy.org/trac/ticket/1751)
- en: '**[ext]**'
  id: totrans-985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: The sqlalchemy.orm.shard module now becomes an extension, sqlalchemy.ext.horizontal_shard.
    The old import works with a deprecation warning.
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.shard 模块现在成为扩展，即 sqlalchemy.ext.horizontal_shard。 旧的导入将带有弃用警告。
- en: 0.6beta2
  id: totrans-987
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6beta2
- en: 'Released: Sat Mar 20 2010'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sat Mar 20 2010
- en: orm
  id: totrans-989
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The official name for the relation() function is now relationship(), to eliminate
    confusion over the relational algebra term. relation() however will remain available
    in equal capacity for the foreseeable future.
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关系() 函数的官方名称现在是 relationship()，以消除对关系代数术语的混淆。 relation() 但是在可预见的将来仍将以相同的功能提供。
- en: 'References: [#1740](https://www.sqlalchemy.org/trac/ticket/1740)'
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1740](https://www.sqlalchemy.org/trac/ticket/1740)
- en: '**[orm]**'
  id: totrans-993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added “version_id_generator” argument to Mapper, this is a callable that, given
    the current value of the “version_id_col”, returns the next version number. Can
    be used for alternate versioning schemes such as uuid, timestamps.
  id: totrans-994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Mapper 中添加了 “version_id_generator” 参数，这是一个可调用对象，给定 “version_id_col” 的当前值，返回下一个版本号。
    可用于替代版本控制方案，如 uuid、时间戳。
- en: 'References: [#1692](https://www.sqlalchemy.org/trac/ticket/1692)'
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1692](https://www.sqlalchemy.org/trac/ticket/1692)
- en: '**[orm]**'
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: added “lockmode” kw argument to Session.refresh(), will pass through the string
    value to Query the same as in with_lockmode(), will also do version check for
    a version_id_col-enabled mapping.
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Session.refresh()添加了“lockmode”kw参数，将字符串值传递给Query与with_lockmode()中的相同值，还将对启用了version_id_col的映射进行版本检查。
- en: '**[orm]**'
  id: totrans-998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby calling query(A).join(A.bs).add_entity(B) in a joined inheritance
    scenario would double-add B as a target and produce an invalid query.
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在连接继承情景中调用query(A).join(A.bs).add_entity(B)会双重添加B作为目标并产生无效查询的bug。
- en: 'References: [#1188](https://www.sqlalchemy.org/trac/ticket/1188)'
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1188](https://www.sqlalchemy.org/trac/ticket/1188)
- en: '**[orm]**'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in session.rollback() which involved not removing formerly “pending”
    objects from the session before re-integrating “deleted” objects, typically occurred
    with natural primary keys. If there was a primary key conflict between them, the
    attach of the deleted would fail internally. The formerly “pending” objects are
    now expunged first.
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session.rollback()中的一个bug，涉及在将“已删除”对象重新整合到会话之前未删除以前“待定”对象的问题，通常出现在自然主键中。如果它们之间存在主键冲突，删除的附加将在内部失败。现在首先清除了以前“待定”的对象。
- en: 'References: [#1674](https://www.sqlalchemy.org/trac/ticket/1674)'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1674](https://www.sqlalchemy.org/trac/ticket/1674)
- en: '**[orm]**'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed a lot of logging that nobody really cares about, logging that remains
    will respond to live changes in the log level. No significant overhead is added.
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了很多没人真正关心的日志记录，剩下的日志记录将响应日志级别的实时更改。不会增加显著的开销。
- en: 'References: [#1719](https://www.sqlalchemy.org/trac/ticket/1719)'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1719](https://www.sqlalchemy.org/trac/ticket/1719)
- en: '**[orm]**'
  id: totrans-1007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in session.merge() which prevented dict-like collections from merging.
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session.merge()中的一个bug，该bug导致类似字典的集合无法合并。
- en: '**[orm]**'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() works with relations that specifically don’t include “merge”
    in their cascade options - the target is ignored completely.
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.merge()与明确不包括“merge”在其级联选项中的关系一起工作-目标将被完全忽略。
- en: '**[orm]**'
  id: totrans-1011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() will not expire existing scalar attributes on an existing target
    if the target has a value for that attribute, even if the incoming merged doesn’t
    have a value for the attribute. This prevents unnecessary loads on existing items.
    Will still mark the attr as expired if the destination doesn’t have the attr,
    though, which fulfills some contracts of deferred cols.
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果目标具有该属性的值，session.merge()将不会使现有目标上的现有标量属性过期，即使传入的合并对象没有该属性的值也是如此。这可以防止对现有项进行不必要的加载。但是，如果目标没有该属性，仍会将属性标记为过期，这样就可以满足某些延迟列的约定。
- en: 'References: [#1681](https://www.sqlalchemy.org/trac/ticket/1681)'
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1681](https://www.sqlalchemy.org/trac/ticket/1681)
- en: '**[orm]**'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “allow_null_pks” flag is now called “allow_partial_pks”, defaults to True,
    acts like it did in 0.5 again. Except, it also is implemented within merge() such
    that a SELECT won’t be issued for an incoming instance with partially NULL primary
    key if the flag is False.
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “allow_null_pks”标志现在称为“allow_partial_pks”，默认为True，再次起到0.5中的作用。除此之外，它也在merge()内实现，如果标志为False，则不会为具有部分NULL主键的传入实例发出SELECT。
- en: 'References: [#1680](https://www.sqlalchemy.org/trac/ticket/1680)'
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1680](https://www.sqlalchemy.org/trac/ticket/1680)
- en: '**[orm]**'
  id: totrans-1017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in 0.6-reworked “many-to-one” optimizations such that a many-to-one
    that is against a non-primary key column on the remote table (i.e. foreign key
    against a UNIQUE column) will pull the “old” value in from the database during
    a change, since if it’s in the session we will need it for proper history/backref
    accounting, and we can’t pull from the local identity map on a non-primary key
    column.
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.6重新制定的“多对一”优化中的一个bug，使得对远程表上的非主键列（即针对唯一列的外键）进行更改时，将“旧”值从数据库中拉入，因为如果它在会话中，我们将需要它来进行正确的历史/反向引用账务，而在非主键列上无法从本地标识图中拉取。
- en: 'References: [#1737](https://www.sqlalchemy.org/trac/ticket/1737)'
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1737](https://www.sqlalchemy.org/trac/ticket/1737)
- en: '**[orm]**'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed internal error which would occur if calling has() or similar complex expression
    on a single-table inheritance relation().
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在单表继承关系上调用has()或类似复杂表达式时可能发生的内部错误。
- en: 'References: [#1731](https://www.sqlalchemy.org/trac/ticket/1731)'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1731](https://www.sqlalchemy.org/trac/ticket/1731)
- en: '**[orm]**'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.one() no longer applies LIMIT to the query, this to ensure that it fully
    counts all object identities present in the result, even in the case where joins
    may conceal multiple identities for two or more rows. As a bonus, one() can now
    also be called with a query that issued from_statement() to start with since it
    no longer modifies the query.
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.one()不再对查询应用LIMIT，以确保完全计算结果中存在的所有对象标识，即使在连接可能隐藏两个或更多行的多个标识的情况下也是如此。作为奖励，由于不再修改查询，现在也可以使用从from_statement()开始的查询调用one()。
- en: 'References: [#1688](https://www.sqlalchemy.org/trac/ticket/1688)'
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1688](https://www.sqlalchemy.org/trac/ticket/1688)
- en: '**[orm]**'
  id: totrans-1026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() now returns None if queried for an identifier that is present in
    the identity map with a different class than the one requested, i.e. when using
    polymorphic loading.
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在如果查询一个在标识映射中具有不同类别的标识符的对象，则query.get()会返回None，即在使用多态加载时。
- en: 'References: [#1727](https://www.sqlalchemy.org/trac/ticket/1727)'
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1727](https://www.sqlalchemy.org/trac/ticket/1727)
- en: '**[orm]**'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A major fix in query.join(), when the “on” clause is an attribute of an aliased()
    construct, but there is already an existing join made out to a compatible target,
    query properly joins to the right aliased() construct instead of sticking onto
    the right side of the existing join.
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在query.join()中进行了重大修复，当“on”子句是aliased()构造的属性时，但已经存在一个指向兼容目标的现有连接时，query会正确地连接到正确的aliased()构造，而不是粘附到现有连接的右侧。
- en: 'References: [#1706](https://www.sqlalchemy.org/trac/ticket/1706)'
  id: totrans-1031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1706](https://www.sqlalchemy.org/trac/ticket/1706)
- en: '**[orm]**'
  id: totrans-1032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Slight improvement to the fix for to not issue needless updates of the primary
    key column during a so-called “row switch” operation, i.e. add + delete of two
    objects with the same PK.
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于不需要在所谓的“行切换”操作期间不必要地更新主键列的修复进行了轻微改进，即在添加+删除具有相同PK的两个对象时。
- en: 'References: [#1362](https://www.sqlalchemy.org/trac/ticket/1362)'
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1362](https://www.sqlalchemy.org/trac/ticket/1362)
- en: '**[orm]**'
  id: totrans-1035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Now uses sqlalchemy.orm.exc.DetachedInstanceError when an attribute load or
    refresh action fails due to object being detached from any Session. UnboundExecutionError
    is specific to engines bound to sessions and statements.
  id: totrans-1036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在属性加载或刷新操作由于对象从任何会话中分离而失败时，使用sqlalchemy.orm.exc.DetachedInstanceError。UnboundExecutionError特定于绑定到会话和语句的引擎。
- en: '**[orm]**'
  id: totrans-1037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query called in the context of an expression will render disambiguating labels
    in all cases. Note that this does not apply to the existing .statement and .subquery()
    accessor/method, which still honors the .with_labels() setting that defaults to
    False.
  id: totrans-1038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式上下文中调用的查询将在所有情况下呈现消除歧义的标签。请注意，这不适用于现有的.statement和.subquery()访问器/方法，它仍然遵循默认为False的.with_labels()设置。
- en: '**[orm]**'
  id: totrans-1039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.union() retains disambiguating labels within the returned statement, thus
    avoiding various SQL composition errors which can result from column name conflicts.
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.union()在返回的语句中保留了消除歧义的标签，从而避免了由于列名冲突而导致的各种SQL组合错误。
- en: 'References: [#1676](https://www.sqlalchemy.org/trac/ticket/1676)'
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1676](https://www.sqlalchemy.org/trac/ticket/1676)
- en: '**[orm]**'
  id: totrans-1042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in attribute history that inadvertently invoked __eq__ on mapped instances.
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性历史中的错误，无意中在映射实例上调用了__eq__。
- en: '**[orm]**'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some internal streamlining of object loading grants a small speedup for large
    results, estimates are around 10-15%. Gave the “state” internals a good solid
    cleanup with less complexity, datamembers, method calls, blank dictionary creates.
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对对象加载的一些内部优化使大结果的速度提高了一点，估计约为10-15%。对“state”内部进行了彻底的清理，减少了复杂性，数据成员，方法调用，空字典的创建。
- en: '**[orm]**'
  id: totrans-1046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Documentation clarification for query.delete()
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对query.delete()进行了文档澄清
- en: 'References: [#1689](https://www.sqlalchemy.org/trac/ticket/1689)'
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1689](https://www.sqlalchemy.org/trac/ticket/1689)
- en: '**[orm]**'
  id: totrans-1049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed cascade bug in many-to-one relation() when attribute was set to None,
    introduced in r6711 (cascade deleted items into session during add()).
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在many-to-one relation()中的级联错误，当属性设置为None时，在r6711中引入（在add()期间将删除的项目级联到会话中）。
- en: '**[orm]**'
  id: totrans-1051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Calling query.order_by() or query.distinct() before calling query.select_from(),
    query.with_polymorphic(), or query.from_statement() raises an exception now instead
    of silently dropping those criterion.
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在调用query.order_by()或query.distinct()之前调用query.select_from()、query.with_polymorphic()或query.from_statement()会引发异常，而不是悄悄地丢弃这些条件。
- en: 'References: [#1736](https://www.sqlalchemy.org/trac/ticket/1736)'
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1736](https://www.sqlalchemy.org/trac/ticket/1736)
- en: '**[orm]**'
  id: totrans-1054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.scalar() now raises an exception if more than one row is returned. All
    other behavior remains the same.
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.scalar() 现在如果返回多行将会引发异常。所有其他行为保持不变。
- en: 'References: [#1735](https://www.sqlalchemy.org/trac/ticket/1735)'
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1735](https://www.sqlalchemy.org/trac/ticket/1735)
- en: '**[orm]**'
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which caused “row switch” logic, that is an INSERT and DELETE replaced
    by an UPDATE, to fail when version_id_col was in use.
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，导致“行切换”逻辑（即 INSERT 和 DELETE 被替换为 UPDATE）在使用 version_id_col 时失败。
- en: 'References: [#1692](https://www.sqlalchemy.org/trac/ticket/1692)'
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1692](https://www.sqlalchemy.org/trac/ticket/1692)
- en: examples
  id: totrans-1060
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-1061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Changed the beaker cache example a bit to have a separate RelationCache option
    for lazyload caching. This object does a lookup among any number of potential
    attributes more efficiently by grouping several into a common structure. Both
    FromCache and RelationCache are simpler individually.
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍微修改了 beaker 缓存示例，为延迟加载缓存添加了一个单独的 RelationCache 选项。这个对象通过将多个潜在属性分组到一个共同的结构中，更有效地进行查找。FromCache
    和 RelationCache 单独使用更简单。
- en: sql
  id: totrans-1063
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: join() will now simulate a NATURAL JOIN by default. Meaning, if the left side
    is a join, it will attempt to join the right side to the rightmost side of the
    left first, and not raise any exceptions about ambiguous join conditions if successful
    even if there are further join targets across the rest of the left.
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: join() 现在默认会模拟自然连接（NATURAL JOIN）。也就是说，如果左侧是一个连接，它将尝试将右侧连接到左侧最右侧的一侧，即使在左侧的其余部分有进一步的连接目标时也不会引发任何关于模糊连接条件的异常。
- en: 'References: [#1714](https://www.sqlalchemy.org/trac/ticket/1714)'
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1714](https://www.sqlalchemy.org/trac/ticket/1714)
- en: '**[sql]**'
  id: totrans-1067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The most common result processors conversion function were moved to the new
    “processors” module. Dialect authors are encouraged to use those functions whenever
    they correspond to their needs instead of implementing custom ones.
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最常见的结果处理器转换函数已移至新的“processors”模块。鼓励方言作者在符合其需求时使用这些函数，而不是实现自定义函数。
- en: '**[sql]**'
  id: totrans-1069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SchemaType and subclasses Boolean, Enum are now serializable, including their
    ddl listener and other event callables.
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SchemaType 和其子类 Boolean、Enum 现在是可序列化的，包括它们的 ddl 监听器和其他事件可调用对象。
- en: 'References: [#1694](https://www.sqlalchemy.org/trac/ticket/1694), [#1698](https://www.sqlalchemy.org/trac/ticket/1698)'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1694](https://www.sqlalchemy.org/trac/ticket/1694), [#1698](https://www.sqlalchemy.org/trac/ticket/1698)
- en: '**[sql]**'
  id: totrans-1072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Some platforms will now interpret certain literal values as non-bind parameters,
    rendered literally into the SQL statement. This to support strict SQL-92 rules
    that are enforced by some platforms including MS-SQL and Sybase. In this model,
    bind parameters aren’t allowed in the columns clause of a SELECT, nor are certain
    ambiguous expressions like “?=?”. When this mode is enabled, the base compiler
    will render the binds as inline literals, but only across strings and numeric
    values. Other types such as dates will raise an error, unless the dialect subclass
    defines a literal rendering function for those. The bind parameter must have an
    embedded literal value already or an error is raised (i.e. won’t work with straight
    bindparam(‘x’)). Dialects can also expand upon the areas where binds are not accepted,
    such as within argument lists of functions (which don’t work on MS-SQL when native
    SQL binding is used).
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在一些平台将会将某些文字值解释为非绑定参数，直接呈现到 SQL 语句中。这是为了支持一些平台（包括 MS-SQL 和 Sybase）强制执行的严格 SQL-92
    规则。在这种模式下，绑定参数不允许出现在 SELECT 的列子句中，也不允许出现一些模糊的表达式如“?=?”。当启用此模式时，基础编译器将会将绑定参数呈现为内联文字，但仅限于字符串和数字值。其他类型如日期将会引发错误，除非方言子类为其定义了文字呈现函数。绑定参数必须已经包含嵌入的文字值，否则将引发错误（即不适用于直接的
    bindparam(‘x’)）。方言还可以扩展绑定不被接受的领域，比如在函数的参数列表中（当使用本地 SQL 绑定时在 MS-SQL 上不起作用）。
- en: '**[sql]**'
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “unicode_errors” parameter to String, Unicode, etc. Behaves like the ‘errors’
    keyword argument to the standard library’s string.decode() functions. This flag
    requires that convert_unicode is set to “force” - otherwise, SQLAlchemy is not
    guaranteed to handle the task of unicode conversion. Note that this flag adds
    significant performance overhead to row-fetching operations for backends that
    already return unicode objects natively (which most DBAPIs do). This flag should
    only be used as an absolute last resort for reading strings from a column with
    varied or corrupted encodings, which only applies to databases that accept invalid
    encodings in the first place (i.e. MySQL. *not* PG, Sqlite, etc.)
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 String、Unicode 等添加了“unicode_errors”参数。行为类似于标准库的 string.decode() 函数的‘errors’关键字参数。此标志要求
    convert_unicode 设置为“force” - 否则，不能保证 SQLAlchemy 处理 Unicode 转换的任务。请注意，对于已经原生返回
    Unicode 对象的后端（大多数 DBAPI 都是如此），此标志会给行提取操作带来显著的性能开销。此标志应仅作为从具有不同或损坏编码的列中读取字符串的绝对最后手段使用，这仅适用于首先接受无效编码的数据库（即
    MySQL，*不*是 PG、Sqlite 等）。
- en: '**[sql]**'
  id: totrans-1076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added math negation operator support, -x.
  id: totrans-1077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了数学取反运算符支持，-x。
- en: '**[sql]**'
  id: totrans-1078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: FunctionElement subclasses are now directly executable the same way any func.foo()
    construct is, with automatic SELECT being applied when passed to execute().
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: FunctionElement 子类现在可以直接执行，方式与任何 func.foo() 构造一样，在传递给 execute() 时会自动应用 SELECT。
- en: '**[sql]**'
  id: totrans-1080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The “type” and “bind” keyword arguments of a func.foo() construct are now local
    to “func.” constructs and are not part of the FunctionElement base class, allowing
    a “type” to be handled in a custom constructor or class-level variable.
  id: totrans-1081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.foo() 构造函数的“type”和“bind”关键字参数现在局限于“func.”构造中，并不是 FunctionElement 基类的一部分，允许“type”在自定义构造函数或类级变量中处理。
- en: '**[sql]**'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored the keys() method to ResultProxy.
  id: totrans-1083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 keys() 方法恢复到 ResultProxy。
- en: '**[sql]**'
  id: totrans-1084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The type/expression system now does a more complete job of determining the return
    type from an expression as well as the adaptation of the Python operator into
    a SQL operator, based on the full left/right/operator of the given expression.
    In particular the date/time/interval system created for PostgreSQL EXTRACT in
    has now been generalized into the type system. The previous behavior which often
    occurred of an expression “column + literal” forcing the type of “literal” to
    be the same as that of “column” will now usually not occur - the type of “literal”
    is first derived from the Python type of the literal, assuming standard native
    Python types + date types, before falling back to that of the known type on the
    other side of the expression. If the “fallback” type is compatible (i.e. CHAR
    from String), the literal side will use that. TypeDecorator types override this
    by default to coerce the “literal” side unconditionally, which can be changed
    by implementing the coerce_compared_value() method. Also part of.
  id: totrans-1085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型/表达式系统现在更完整地确定表达式的返回类型以及将 Python 运算符适应为 SQL 运算符，基于给定表达式的完整左/右/运算符。特别是为 PostgreSQL
    EXTRACT 创建的日期/时间/间隔系统现在已经泛化为类型系统。以前经常发生的表达式“column + literal”强制“literal”类型与“column”相同的行为现在通常不会发生
    - “literal” 的类型首先从字面量的 Python 类型派生，假设标准的本机 Python 类型 + 日期类型，然后回退到表达式另一侧的已知类型。如果“回退”类型兼容（即从
    String 到 CHAR），则字面量一侧将使用该类型。TypeDecorator 类型默认覆盖此行为，无条件地强制“literal”一侧，可以通过实现 coerce_compared_value()
    方法进行更改。还有一部分。
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647), [#1683](https://www.sqlalchemy.org/trac/ticket/1683)'
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1647](https://www.sqlalchemy.org/trac/ticket/1647), [#1683](https://www.sqlalchemy.org/trac/ticket/1683)
- en: '**[sql]**'
  id: totrans-1087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Made sqlalchemy.sql.expressions.Executable part of public API, used for any
    expression construct that can be sent to execute(). FunctionElement now inherits
    Executable so that it gains execution_options(), which are also propagated to
    the select() that’s generated within execute(). Executable in turn subclasses
    _Generative which marks any ClauseElement that supports the @_generative decorator
    - these may also become “public” for the benefit of the compiler extension at
    some point.
  id: totrans-1088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 sqlalchemy.sql.expressions.Executable 设为公共 API 的一部分，用于可以发送到 execute() 的任何表达式构造。FunctionElement
    现在继承 Executable，以便获得 execution_options()，这些选项也传播到 execute() 中生成的 select()。Executable
    又继承自 _Generative，标记任何支持 @_generative 装饰器的 ClauseElement - 这些也可能在某个时候成为编译器扩展的“公共”部分。
- en: '**[sql]**'
  id: totrans-1089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: A change to the solution for - an end-user defined bind parameter name that
    directly conflicts with a column-named bind generated directly from the SET or
    VALUES clause of an update/insert generates a compile error. This reduces call
    counts and eliminates some cases where undesirable name conflicts could still
    occur.
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 - 直接与更新/插入的 SET 或 VALUES 子句生成的与列命名绑定直接冲突的最终用户定义的绑定参数名称进行了解决方案更改，会生成编译错误。这减少了调用次数，并消除了一些仍然可能发生不良名称冲突的情况。
- en: 'References: [#1579](https://www.sqlalchemy.org/trac/ticket/1579)'
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1579](https://www.sqlalchemy.org/trac/ticket/1579)
- en: '**[sql]**'
  id: totrans-1092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column() requires a type if it has no foreign keys (this is not new). An error
    is now raised if a Column() has no type and no foreign keys.
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 Column() 没有外键，则需要一个类型（这不是新功能）。如果 Column() 没有类型和外键，则现在会引发错误。
- en: 'References: [#1705](https://www.sqlalchemy.org/trac/ticket/1705)'
  id: totrans-1094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1705](https://www.sqlalchemy.org/trac/ticket/1705)
- en: '**[sql]**'
  id: totrans-1095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “scale” argument of the Numeric() type is honored when coercing a returned
    floating point value into a string on its way to Decimal - this allows accuracy
    to function on SQLite, MySQL.
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将返回的浮点值强制转换为字符串时，Numeric() 类型的“scale”参数将被尊重 - 这允许在 SQLite、MySQL 上功能的准确性。
- en: 'References: [#1717](https://www.sqlalchemy.org/trac/ticket/1717)'
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1717](https://www.sqlalchemy.org/trac/ticket/1717)
- en: '**[sql]**'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the copy() method of Column now copies over uninitialized “on table attach”
    events. Helps with the new declarative “mixin” capability.
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column 的 copy() 方法现在会复制未初始化的“在表附加”事件。有助于新的声明式“mixin”功能。
- en: mysql
  id: totrans-1100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed reflection bug whereby when COLLATE was present, nullable flag and server
    defaults would not be reflected.
  id: totrans-1102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射错误，即当 COLLATE 存在时，将不会反映出可空标志和服务器默认值。
- en: 'References: [#1655](https://www.sqlalchemy.org/trac/ticket/1655)'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1655](https://www.sqlalchemy.org/trac/ticket/1655)
- en: '**[mysql]**'
  id: totrans-1104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed reflection of TINYINT(1) “boolean” columns defined with integer flags
    like UNSIGNED.
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对带有整数标志（如 UNSIGNED）定义的 TINYINT(1)“boolean”列的反射。
- en: '**[mysql]**'
  id: totrans-1106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Further fixes for the mysql-connector dialect.
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了 mysql-connector 方言的问题。
- en: 'References: [#1668](https://www.sqlalchemy.org/trac/ticket/1668)'
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1668](https://www.sqlalchemy.org/trac/ticket/1668)
- en: '**[mysql]**'
  id: totrans-1109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Composite PK table on InnoDB where the “autoincrement” column isn’t first will
    emit an explicit “KEY” phrase within CREATE TABLE thereby avoiding errors.
  id: totrans-1110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 InnoDB 上的 Composite PK 表中，“autoincrement” 列不是第一列将在 CREATE TABLE 中发出显式的 “KEY”
    短语，从而避免错误。
- en: 'References: [#1496](https://www.sqlalchemy.org/trac/ticket/1496)'
  id: totrans-1111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1496](https://www.sqlalchemy.org/trac/ticket/1496)
- en: '**[mysql]**'
  id: totrans-1112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added reflection/create table support for a wide range of MySQL keywords.
  id: totrans-1113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为广泛的 MySQL 关键字添加了反射/创建表格支持。
- en: 'References: [#1634](https://www.sqlalchemy.org/trac/ticket/1634)'
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1634](https://www.sqlalchemy.org/trac/ticket/1634)
- en: '**[mysql]**'
  id: totrans-1115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed import error which could occur reflecting tables on a Windows host
  id: totrans-1116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Windows 主机上反射表时可能出现的导入错误。
- en: 'References: [#1580](https://www.sqlalchemy.org/trac/ticket/1580)'
  id: totrans-1117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1580](https://www.sqlalchemy.org/trac/ticket/1580)
- en: sqlite
  id: totrans-1118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Added “native_datetime=True” flag to create_engine(). This will cause the DATE
    and TIMESTAMP types to skip all bind parameter and result row processing, under
    the assumption that PARSE_DECLTYPES has been enabled on the connection. Note that
    this is not entirely compatible with the “func.current_date()”, which will be
    returned as a string.
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 create_engine() 中添加了“native_datetime=True”标志。这将导致 DATE 和 TIMESTAMP 类型跳过所有绑定参数和结果行处理，假设已在连接上启用了
    PARSE_DECLTYPES。请注意，这与“func.current_date()”不完全兼容，它将作为字符串返回。
- en: 'References: [#1685](https://www.sqlalchemy.org/trac/ticket/1685)'
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1685](https://www.sqlalchemy.org/trac/ticket/1685)
- en: mssql
  id: totrans-1122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Re-established support for the pymssql dialect.
  id: totrans-1124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新建立了对 pymssql 方言的支持。
- en: '**[mssql]**'
  id: totrans-1125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Various fixes for implicit returning, reflection, etc. - the MS-SQL dialects
    aren’t quite complete in 0.6 yet (but are close)
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于隐式返回、反射等进行了各种修复 - 0.6 版本中的 MS-SQL 方言还不完全（但接近完善）
- en: '**[mssql]**'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added basic support for mxODBC.
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 mxODBC 的基本支持。
- en: 'References: [#1710](https://www.sqlalchemy.org/trac/ticket/1710)'
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1710](https://www.sqlalchemy.org/trac/ticket/1710)
- en: '**[mssql]**'
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Removed the text_as_varchar option.
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了 text_as_varchar 选项。
- en: oracle
  id: totrans-1132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: ”out” parameters require a type that is supported by cx_oracle. An error will
    be raised if no cx_oracle type can be found.
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “out” 参数需要一个由 cx_oracle 支持的类型。如果找不到 cx_oracle 类型，则会引发错误。
- en: '**[oracle]**'
  id: totrans-1135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle ‘DATE’ now does not perform any result processing, as the DATE type in
    Oracle stores full date+time objects, that’s what you’ll get. Note that the generic
    types.Date type *will* still call value.date() on incoming values, however. When
    reflecting a table, the reflected type will be ‘DATE’.
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle的‘DATE’现在不执行任何结果处理，因为Oracle中的DATE类型存储完整的日期+时间对象，这就是你会得到的。请注意，通用的types.Date类型仍将在传入值上调用value.date()。在反射表时，反射的类型将是‘DATE’。
- en: '**[oracle]**'
  id: totrans-1137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: Added preliminary support for Oracle’s WITH_UNICODE mode. At the very least
    this establishes initial support for cx_Oracle with Python 3\. When WITH_UNICODE
    mode is used in Python 2.xx, a large and scary warning is emitted asking that
    the user seriously consider the usage of this difficult mode of operation.
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对Oracle的WITH_UNICODE模式的初步支持。至少这为Python 3中的cx_Oracle建立了初始支持。当在Python 2.xx中使用WITH_UNICODE模式时，会发出一个大而可怕的警告，要求用户认真考虑这种困难的操作模式的使用。
- en: 'References: [#1670](https://www.sqlalchemy.org/trac/ticket/1670)'
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1670](https://www.sqlalchemy.org/trac/ticket/1670)
- en: '**[oracle]**'
  id: totrans-1140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: The except_() method now renders as MINUS on Oracle, which is more or less equivalent
    on that platform.
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: except_()方法现在在Oracle上呈现为MINUS，这在该平台上更或多是等效的。
- en: 'References: [#1712](https://www.sqlalchemy.org/trac/ticket/1712)'
  id: totrans-1142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1712](https://www.sqlalchemy.org/trac/ticket/1712)
- en: '**[oracle]**'
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: Added support for rendering and reflecting TIMESTAMP WITH TIME ZONE, i.e. TIMESTAMP(timezone=True).
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对渲染和反射TIMESTAMP WITH TIME ZONE，即TIMESTAMP(timezone=True)的支持。
- en: 'References: [#651](https://www.sqlalchemy.org/trac/ticket/651)'
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#651](https://www.sqlalchemy.org/trac/ticket/651)
- en: '**[oracle]**'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: Oracle INTERVAL type can now be reflected.
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle INTERVAL类型现在可以反射。
- en: misc
  id: totrans-1148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[py3k]**'
  id: totrans-1149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[py3k]**'
- en: Improved the installation/test setup regarding Python 3, now that Distribute
    runs on Py3k. distribute_setup.py is now included. See README.py3k for Python
    3 installation/ testing instructions.
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了关于Python 3的安装/测试设置，现在Distribute在Py3k上运行。现在包含distribute_setup.py。请参阅README.py3k以获取Python
    3的安装/测试说明。
- en: '**[engines]**'
  id: totrans-1151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Added an optional C extension to speed up the sql layer by reimplementing RowProxy
    and the most common result processors. The actual speedups will depend heavily
    on your DBAPI and the mix of datatypes used in your tables, and can vary from
    a 30% improvement to more than 200%. It also provides a modest (~15-20%) indirect
    improvement to ORM speed for large queries. Note that it is *not* built/installed
    by default. See README for installation instructions.
  id: totrans-1152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个可选的C扩展，通过重新实现RowProxy和最常见的结果处理器来加速sql层。实际的加速将严重依赖于您的DBAPI和表中使用的数据类型的混合，并且可以从30%的改进到200%以上。对于大查询，它还为ORM速度提供了适度的（~15-20%）间接改进。请注意，默认情况下*不*构建/安装它。请参阅README以获取安装说明。
- en: '**[engines]**'
  id: totrans-1153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the execution sequence pulls all rowcount/last inserted ID info from the cursor
    before commit() is called on the DBAPI connection in an “autocommit” scenario.
    This helps mxodbc with rowcount and is probably a good idea overall.
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“自动提交”场景中，在调用DBAPI连接上的commit()之前，执行顺序会从游标中提取所有的rowcount/last inserted ID信息。这有助于mxodbc处理rowcount，并且总体上可能是一个好主意。
- en: '**[engines]**'
  id: totrans-1155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Opened up logging a bit such that isEnabledFor() is called more often, so that
    changes to the log level for engine/pool will be reflected on next connect. This
    adds a small amount of method call overhead. It’s negligible and will make life
    a lot easier for all those situations when logging just happens to be configured
    after create_engine() is called.
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍微放宽了日志记录，以便更频繁地调用isEnabledFor()，这样对引擎/池的日志级别的更改将在下次连接时反映出来。这增加了一点方法调用开销。这是微不足道的，将使所有在调用create_engine()之后配置日志记录的情况变得更加容易。
- en: 'References: [#1719](https://www.sqlalchemy.org/trac/ticket/1719)'
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1719](https://www.sqlalchemy.org/trac/ticket/1719)
- en: '**[engines]**'
  id: totrans-1158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The assert_unicode flag is deprecated. SQLAlchemy will raise a warning in all
    cases where it is asked to encode a non-unicode Python string, as well as when
    a Unicode or UnicodeType type is explicitly passed a bytestring. The String type
    will do nothing for DBAPIs that already accept Python unicode objects.
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assert_unicode标志已被弃用。在要求对非Unicode Python字符串进行编码时，SQLAlchemy将在所有情况下引发警告，以及当显式传递字节字符串给Unicode或UnicodeType类型时。String类型对于已经接受Python
    Unicode对象的DBAPI不会执行任何操作。
- en: '**[engines]**'
  id: totrans-1160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Bind parameters are sent as a tuple instead of a list. Some backend drivers
    will not accept bind parameters as a list.
  id: totrans-1161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 绑定参数以元组形式发送，而不是列表。一些后端驱动程序不接受绑定参数作为列表。
- en: '**[engines]**'
  id: totrans-1162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: threadlocal engine wasn’t properly closing the connection upon close() - fixed
    that.
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: threadlocal 引擎在 close() 时没有正确关闭连接 - 已修复。
- en: '**[engines]**'
  id: totrans-1164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Transaction object doesn’t rollback or commit if it isn’t “active”, allows more
    accurate nesting of begin/rollback/commit.
  id: totrans-1165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事务对象不是“活动”的话，就不会回滚或提交，允许更准确地嵌套 begin/rollback/commit。
- en: '**[engines]**'
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Python unicode objects as binds result in the Unicode type, not string, thus
    eliminating a certain class of unicode errors on drivers that don’t support unicode
    binds.
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python unicode 对象作为绑定结果会产生 Unicode 类型，而不是字符串，从而消除了在不支持 unicode 绑定的驱动程序上的某类 unicode
    错误。
- en: '**[engines]**'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Added “logging_name” argument to create_engine(), Pool() constructor as well
    as “pool_logging_name” argument to create_engine() which filters down to that
    of Pool. Issues the given string name within the “name” field of logging messages
    instead of the default hex identifier string.
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 create_engine()、Pool() 构造函数以及 create_engine() 中添加了“logging_name”参数，该参数会传递到
    Pool 中的“pool_logging_name”参数。在日志消息的“name”字段中发出给定的字符串名称，而不是默认的十六进制标识符字符串。
- en: 'References: [#1555](https://www.sqlalchemy.org/trac/ticket/1555)'
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1555](https://www.sqlalchemy.org/trac/ticket/1555)
- en: '**[engines]**'
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The visit_pool() method of Dialect is removed, and replaced with on_connect().
    This method returns a callable which receives the raw DBAPI connection after each
    one is created. The callable is assembled into a first_connect/connect pool listener
    by the connection strategy if non-None. Provides a simpler interface for dialects.
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Dialect 的 visit_pool() 方法被移除，并替换为 on_connect()。该方法返回一个可调用对象，在每次创建原始 DBAPI 连接后接收该连接。如果非
    None，则该可调用对象会被连接策略组装成一个 first_connect/connect 池监听器。为方言提供了更简单的接口。
- en: '**[engines]**'
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: StaticPool now initializes, disposes and recreates without opening a new connection
    - the connection is only opened when first requested. dispose() also works on
    AssertionPool now.
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: StaticPool 现在在不打开新连接的情况下初始化、释放和重新创建 - 只有在首次请求时才会打开连接。dispose() 现在也适用于 AssertionPool。
- en: 'References: [#1728](https://www.sqlalchemy.org/trac/ticket/1728)'
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1728](https://www.sqlalchemy.org/trac/ticket/1728)
- en: '**[metadata] [ticket: 1673]**'
  id: totrans-1176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据] [票号: 1673]**'
- en: Added the ability to strip schema information when using “tometadata” by passing
    “schema=None” as an argument. If schema is not specified then the table’s schema
    is retained.
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了在使用“tometadata”时去除模式信息的功能，方法是通过传递“schema=None”作为参数。如果未指定模式，则保留表的模式。
- en: '**[declarative]**'
  id: totrans-1178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明性]**'
- en: DeclarativeMeta exclusively uses cls.__dict__ (not dict_) as the source of class
    information; _as_declarative exclusively uses the dict_ passed to it as the source
    of class information (which when using DeclarativeMeta is cls.__dict__). This
    should in theory make it easier for custom metaclasses to modify the state passed
    into _as_declarative.
  id: totrans-1179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DeclarativeMeta 专门使用 cls.__dict__（而不是 dict_）作为类信息的来源；_as_declarative 专门使用传递给它的
    dict_ 作为类信息的来源（当使用 DeclarativeMeta 时，这是 cls.__dict__）。理论上，这应该使得自定义元类更容易修改传递给_as_declarative的状态。
- en: '**[declarative]**'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明性]**'
- en: declarative now accepts mixin classes directly, as a means to provide common
    functional and column-based elements on all subclasses, as well as a means to
    propagate a fixed set of __table_args__ or __mapper_args__ to subclasses. For
    custom combinations of __table_args__/__mapper_args__ from an inherited mixin
    to local, descriptors can now be used. New details are all up in the Declarative
    documentation. Thanks to Chris Withers for putting up with my strife on this.
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 declarative 直接接受 mixin 类，作为在所有子类上提供常见功能和基于列的元素的手段，以及传播一组固定的__table_args__或__mapper_args__到子类的手段。对于从继承的
    mixin 到本地的__table_args__/__mapper_args__的自定义组合，现在可以使用描述符。新的详细信息都在声明性文档中。感谢 Chris
    Withers 在这方面对我的痛苦的包容。
- en: 'References: [#1707](https://www.sqlalchemy.org/trac/ticket/1707)'
  id: totrans-1182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1707](https://www.sqlalchemy.org/trac/ticket/1707)
- en: '**[declarative]**'
  id: totrans-1183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明性]**'
- en: the __mapper_args__ dict is copied when propagating to a subclass, and is taken
    straight off the class __dict__ to avoid any propagation from the parent. mapper
    inheritance already propagates the things you want from the parent mapper.
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传播到子类时，__mapper_args__ 字典会被复制，并直接从类__dict__中取出，以避免从父类传播。映射器继承已经传播了你从父映射器中想要的东西。
- en: 'References: [#1393](https://www.sqlalchemy.org/trac/ticket/1393)'
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1393](https://www.sqlalchemy.org/trac/ticket/1393)
- en: '**[declarative]**'
  id: totrans-1186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明性]**'
- en: An exception is raised when a single-table subclass specifies a column that
    is already present on the base class.
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当单表子类指定已经存在于基类上的列时，会引发异常。
- en: 'References: [#1732](https://www.sqlalchemy.org/trac/ticket/1732)'
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1732](https://www.sqlalchemy.org/trac/ticket/1732)
- en: '**[sybase]**'
  id: totrans-1189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sybase]**'
- en: Implemented a preliminary working dialect for Sybase, with sub-implementations
    for Python-Sybase as well as Pyodbc. Handles table creates/drops and basic round
    trip functionality. Does not yet include reflection or comprehensive support of
    unicode/special expressions/etc.
  id: totrans-1190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了一个初步可用的Sybase方言，包括对Python-Sybase和Pyodbc的子实现。处理表的创建/删除和基本的往返功能。尚未包括反射或全面支持unicode/特殊表达式等。
- en: '**[documentation]**'
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Major cleanup work in the docs to link class, function, and method names into
    the API docs.
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文档中进行了大量清理工作，将类、函数和方法名称链接到API文档中。
- en: 'References: [#1700](https://www.sqlalchemy.org/trac/ticket/1700)'
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1700](https://www.sqlalchemy.org/trac/ticket/1700)
- en: 0.6beta1
  id: totrans-1194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6beta1
- en: 'Released: Wed Feb 03 2010'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010年2月3日 星期三
- en: orm
  id: totrans-1196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Changes to query.update() and query.delete():'
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对query.update()和query.delete()的更改：
- en: the ‘expire’ option on query.update() has been renamed to ‘fetch’, thus matching
    that of query.delete(). ‘expire’ is deprecated and issues a warning.
  id: totrans-1199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query.update()上的‘expire’选项已更名为‘fetch’，与query.delete()的匹配。‘expire’已被弃用并发出警告。
- en: query.update() and query.delete() both default to ‘evaluate’ for the synchronize
    strategy.
  id: totrans-1200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query.update()和query.delete()默认都使用‘evaluate’作为同步策略。
- en: the ‘synchronize’ strategy for update() and delete() raises an error on failure.
    There is no implicit fallback onto “fetch”. Failure of evaluation is based on
    the structure of criteria, so success/failure is deterministic based on code structure.
  id: totrans-1201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: update()和delete()的‘synchronize’策略在失败时会引发错误。没有隐式回退到“fetch”。评估的失败基于条件的结构，因此成功/失败是基于代码结构确定性的。
- en: '**[orm]**'
  id: totrans-1202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Enhancements on many-to-one relations:'
  id: totrans-1203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对一关系的增强：
- en: many-to-one relations now fire off a lazyload in fewer cases, including in most
    cases will not fetch the “old” value when a new one is replaced.
  id: totrans-1204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多对一关系现在在较少的情况下触发延迟加载，包括在大多数情况下，当替换新值时不会获取“旧”值。
- en: many-to-one relation to a joined-table subclass now uses get() for a simple
    load (known as the “use_get” condition), i.e. Related->Sub(Base), without the
    need to redefine the primaryjoin condition in terms of the base table.
  id: totrans-1205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多对一关系到一个联接表子类现在使用get()进行简单加载（称为“use_get”条件），即Related->Sub(Base)，无需重新定义基表的主连接条件。
- en: specifying a foreign key with a declarative column, i.e. ForeignKey(MyRelatedClass.id)
    doesn’t break the “use_get” condition from taking place
  id: totrans-1206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用声明性列指定外键，即ForeignKey(MyRelatedClass.id)，不会破坏“use_get”条件的发生。
- en: relation(), eagerload(), and eagerload_all() now feature an option called “innerjoin”.
    Specify True or False to control whether an eager join is constructed as an INNER
    or OUTER join. Default is False as always. The mapper options will override whichever
    setting is specified on relation(). Should generally be set for many-to-one, not
    nullable foreign key relations to allow improved join performance.
  id: totrans-1207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: relation()、eagerload()和eagerload_all()现在具有一个名为“innerjoin”的选项。指定True或False来控制是否将急加载构造为INNER或OUTER连接。默认始终为False。映射器选项将覆盖relation()上指定的任何设置。通常应该为多对一、非空外键关系设置以允许改进的连接性能。
- en: the behavior of eagerloading such that the main query is wrapped in a subquery
    when LIMIT/OFFSET are present now makes an exception for the case when all eager
    loads are many-to-one joins. In those cases, the eager joins are against the parent
    table directly along with the limit/offset without the extra overhead of a subquery,
    since a many-to-one join does not add rows to the result.
  id: totrans-1208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: eagerloading的行为，当LIMIT/OFFSET存在时，主查询现在在大多数情况下被包装在子查询中，现在对于所有急加载都是多对一连接的情况做了一个例外。在这些情况下，急加载直接针对父表进行，同时具有limit/offset，而不会增加子查询的额外开销，因为多对一连接不会向结果添加行。
- en: 'References: [#1186](https://www.sqlalchemy.org/trac/ticket/1186), [#1492](https://www.sqlalchemy.org/trac/ticket/1492),
    [#1544](https://www.sqlalchemy.org/trac/ticket/1544)'
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1186](https://www.sqlalchemy.org/trac/ticket/1186), [#1492](https://www.sqlalchemy.org/trac/ticket/1492),
    [#1544](https://www.sqlalchemy.org/trac/ticket/1544)
- en: '**[orm]**'
  id: totrans-1210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Enhancements / Changes on Session.merge():'
  id: totrans-1211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()的增强/更改：
- en: '**[orm]**'
  id: totrans-1212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “dont_load=True” flag on Session.merge() is deprecated and is now “load=False”.
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()上的“dont_load=True”标志已被弃用，现在是“load=False”。
- en: '**[orm]**'
  id: totrans-1214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() is performance optimized, using half the call counts for “load=False”
    mode compared to 0.5 and significantly fewer SQL queries in the case of collections
    for “load=True” mode.
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()经过性能优化，在“load=False”模式下的调用次数减少了一半，与0.5相比，在“load=True”模式下对于集合的SQL查询显著减少。
- en: '**[orm]**'
  id: totrans-1216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() will not issue a needless merge of attributes if the given instance
    is the same instance which is already present.
  id: totrans-1217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果给定的实例与已经存在的实例相同，merge()将不会发出不必要的属性合并。
- en: '**[orm]**'
  id: totrans-1218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() now also merges the “options” associated with a given state, i.e. those
    passed through query.options() which follow along with an instance, such as options
    to eagerly- or lazyily- load various attributes. This is essential for the construction
    of highly integrated caching schemes. This is a subtle behavioral change vs. 0.5.
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge()现在还会合并与给定状态相关联的“options”，即通过query.options()传递的选项，这些选项随实例一起传递，例如选择各种属性进行eager-或lazy-加载的选项。这对于构建高度集成的缓存方案至关重要。这与0.5相比是一个细微的行为变化。
- en: '**[orm]**'
  id: totrans-1220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A bug was fixed regarding the serialization of the “loader path” present on
    an instance’s state, which is also necessary when combining the usage of merge()
    with serialized state and associated options that should be preserved.
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了有关“loader path”序列化的错误，该错误存在于实例状态中，并且在使用merge()与序列化状态和应保留的关联选项的组合时也是必要的。
- en: '**[orm]**'
  id: totrans-1222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The all new merge() is showcased in a new comprehensive example of how to integrate
    Beaker with SQLAlchemy. See the notes in the “examples” note below.
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全新的merge()在一个全面的新示例中展示了如何将Beaker与SQLAlchemy集成。请参阅下面的“示例”注意事项中的说明。
- en: '**[orm]**'
  id: totrans-1224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Primary key values can now be changed on a joined-table inheritance object,
    and ON UPDATE CASCADE will be taken into account when the flush happens. Set the
    new “passive_updates” flag to False on mapper() when using SQLite or MySQL/MyISAM.
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在联接表继承对象上现在可以更改主键值，并且在刷新时将考虑ON UPDATE CASCADE。当使用SQLite或MySQL/MyISAM时，在mapper()上设置新的“passive_updates”标志为False。
- en: 'References: [#1362](https://www.sqlalchemy.org/trac/ticket/1362)'
  id: totrans-1226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1362](https://www.sqlalchemy.org/trac/ticket/1362)
- en: '**[orm]**'
  id: totrans-1227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush() now detects when a primary key column was updated by an ON UPDATE CASCADE
    operation from another primary key, and can then locate the row for a subsequent
    UPDATE on the new PK value. This occurs when a relation() is there to establish
    the relationship as well as passive_updates=True.
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush()现在会检测到通过其他主键的ON UPDATE CASCADE操作更新主键列时，然后可以找到一个子后续UPDATE的新PK值的行。当关系()用于建立关系以及passive_updates=True时，会发生这种情况。
- en: 'References: [#1671](https://www.sqlalchemy.org/trac/ticket/1671)'
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1671](https://www.sqlalchemy.org/trac/ticket/1671)
- en: '**[orm]**'
  id: totrans-1230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “save-update” cascade will now cascade the pending *removed* values from
    a scalar or collection attribute into the new session during an add() operation.
    This so that the flush() operation will also delete or modify rows of those disconnected
    items.
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “save-update”级联现在将挂起的*removed*值从标量或集合属性级联到新会话中，以在add()操作期间删除或修改这些断开连接的项目的行。
- en: '**[orm]**'
  id: totrans-1232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using a “dynamic” loader with a “secondary” table now produces a query where
    the “secondary” table is *not* aliased. This allows the secondary Table object
    to be used in the “order_by” attribute of the relation(), and also allows it to
    be used in filter criterion against the dynamic relation.
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用“dynamic”加载器和“secondary”表现在产生一个查询，其中“secondary”表不被别名。这允许在关系()的“order_by”属性中使用次要Table对象，并且还允许在动态关系的过滤条件中使用它。
- en: 'References: [#1531](https://www.sqlalchemy.org/trac/ticket/1531)'
  id: totrans-1234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1531](https://www.sqlalchemy.org/trac/ticket/1531)
- en: '**[orm]**'
  id: totrans-1235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() with uselist=False will emit a warning when an eager or lazy load
    locates more than one valid value for the row. This may be due to primaryjoin/secondaryjoin
    conditions which aren’t appropriate for an eager LEFT OUTER JOIN or for other
    conditions.
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当eager或lazy加载找到一行中超过一个有效值时，relation()与uselist=False将发出警告。这可能是由于primaryjoin/secondaryjoin条件不适合eager
    LEFT OUTER JOIN或其他条件所致。
- en: 'References: [#1643](https://www.sqlalchemy.org/trac/ticket/1643)'
  id: totrans-1237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1643](https://www.sqlalchemy.org/trac/ticket/1643)
- en: '**[orm]**'
  id: totrans-1238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: an explicit check occurs when a synonym() is used with map_column=True, when
    a ColumnProperty (deferred or otherwise) exists separately in the properties dictionary
    sent to mapper with the same keyname. Instead of silently replacing the existing
    property (and possible options on that property), an error is raised.
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当synonym()与map_column=True一起使用时，会显式检查一个属性(延迟加载或其他)是否在分开发送到具有相同键名的mapper的属性字典中存在。而不是默默地替换现有属性(和可能存在的属性选项)，会引发错误。
- en: 'References: [#1633](https://www.sqlalchemy.org/trac/ticket/1633)'
  id: totrans-1240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1633](https://www.sqlalchemy.org/trac/ticket/1633)
- en: '**[orm]**'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a “dynamic” loader sets up its query criterion at construction time so that
    the actual query is returned from non-cloning accessors like “statement”.
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “动态”加载器在构建时设置其查询条件，以便从非克隆访问器（如“statement”）返回实际查询。
- en: '**[orm]**'
  id: totrans-1243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “named tuple” objects returned when iterating a Query() are now pickleable.
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当迭代一个 Query() 时返回的“命名元组”对象现在是可 pickle 的。
- en: '**[orm]**'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapping to a select() construct now requires that you make an alias() out of
    it distinctly. This to eliminate confusion over such issues as
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，将映射到select()构造的需要确保您对其进行明确的别名(alias())。这样可以消除诸如此类的混淆问题，例如
- en: 'References: [#1542](https://www.sqlalchemy.org/trac/ticket/1542)'
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1542](https://www.sqlalchemy.org/trac/ticket/1542)
- en: '**[orm]**'
  id: totrans-1248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join() has been reworked to provide more consistent behavior and more
    flexibility (includes)
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join() 已重新设计以提供更一致的行为和更灵活的方式（包括）
- en: 'References: [#1537](https://www.sqlalchemy.org/trac/ticket/1537)'
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1537](https://www.sqlalchemy.org/trac/ticket/1537)
- en: '**[orm]**'
  id: totrans-1251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.select_from() accepts multiple clauses to produce multiple comma separated
    entries within the FROM clause. Useful when selecting from multiple-homed join()
    clauses.
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.select_from() 接受多个子句以在 FROM 子句中生成多个以逗号分隔的条目。在从多个 join() 子句中选择时很有用。
- en: '**[orm]**'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.select_from() also accepts mapped classes, aliased() constructs, and mappers
    as arguments. In particular this helps when querying from multiple joined-table
    classes to ensure the full join gets rendered.
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.select_from() 也接受映射类、aliased() 构造和 mappers 作为参数。特别是在从多个连接表类中查询时，这有助于确保完整的连接得到呈现。
- en: '**[orm]**'
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() can be used with a mapping to an outer join where one or more of
    the primary key values are None.
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 query.get() 与映射到外连接的映射，其中一个或多个主键值为 None。
- en: 'References: [#1135](https://www.sqlalchemy.org/trac/ticket/1135)'
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1135](https://www.sqlalchemy.org/trac/ticket/1135)
- en: '**[orm]**'
  id: totrans-1258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.from_self(), query.union(), others which do a “SELECT * from (SELECT…)”
    type of nesting will do a better job translating column expressions within the
    subquery to the columns clause of the outer query. This is potentially backwards
    incompatible with 0.5, in that this may break queries with literal expressions
    that do not have labels applied (i.e. literal(‘foo’), etc.)
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.from_self()、query.union() 等执行“SELECT * from (SELECT…)”类型嵌套的操作现在更好地将子查询中的列表达式转换为外部查询的列子句。这可能与
    0.5 不兼容，因为这可能会破坏没有应用标签的文字表达式的查询（即 literal(‘foo’) 等）。
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568)'
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1568](https://www.sqlalchemy.org/trac/ticket/1568)
- en: '**[orm]**'
  id: totrans-1261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation primaryjoin and secondaryjoin now check that they are column-expressions,
    not just clause elements. this prohibits things like FROM expressions being placed
    there directly.
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation primaryjoin 和 secondaryjoin 现在检查它们是否是列表达式，而不仅仅是子句元素。这禁止了像 FROM 表达式直接放在那里的事情。
- en: 'References: [#1622](https://www.sqlalchemy.org/trac/ticket/1622)'
  id: totrans-1263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1622](https://www.sqlalchemy.org/trac/ticket/1622)
- en: '**[orm]**'
  id: totrans-1264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: expression.null() is fully understood the same way None is when comparing an
    object/collection-referencing attribute within query.filter(), filter_by(), etc.
  id: totrans-1265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询.filter()、filter_by() 等中比较对象/集合引用属性时，expression.null() 完全像 None 一样被理解。
- en: 'References: [#1415](https://www.sqlalchemy.org/trac/ticket/1415)'
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1415](https://www.sqlalchemy.org/trac/ticket/1415)
- en: '**[orm]**'
  id: totrans-1267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “make_transient()” helper function which transforms a persistent/ detached
    instance into a transient one (i.e. deletes the instance_key and removes from
    any session.)
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“make_transient()”辅助函数，该函数将持久化/分离实例转换为瞬时实例（即删除实例键并从任何会话中删除）。
- en: 'References: [#1052](https://www.sqlalchemy.org/trac/ticket/1052)'
  id: totrans-1269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1052](https://www.sqlalchemy.org/trac/ticket/1052)
- en: '**[orm]**'
  id: totrans-1270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the allow_null_pks flag on mapper() is deprecated, and the feature is turned
    “on” by default. This means that a row which has a non-null value for any of its
    primary key columns will be considered an identity. The need for this scenario
    typically only occurs when mapping to an outer join.
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper() 上的 allow_null_pks 标志已弃用，并且该功能默认处于“on”状态。这意味着对于任何主键列的值非空的行将被视为标识。仅当映射到外连接时才会出现此场景的需求。
- en: 'References: [#1339](https://www.sqlalchemy.org/trac/ticket/1339)'
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1339](https://www.sqlalchemy.org/trac/ticket/1339)
- en: '**[orm]**'
  id: totrans-1273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the mechanics of “backref” have been fully merged into the finer grained “back_populates”
    system, and take place entirely within the _generate_backref() method of RelationProperty.
    This makes the initialization procedure of RelationProperty simpler and allows
    easier propagation of settings (such as from subclasses of RelationProperty) into
    the reverse reference. The internal BackRef() is gone and backref() returns a
    plain tuple that is understood by RelationProperty.
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “backref”的机制已完全合并到更细粒度的 “back_populates” 系统中，并且完全在 RelationProperty 的 _generate_backref()
    方法中进行。这使得 RelationProperty 的初始化过程更简单，并且允许更容易地传播设置（例如从 RelationProperty 的子类）到反向引用中。内部的
    BackRef() 已经消失，backref() 返回一个普通的元组，RelationProperty 可以理解。
- en: '**[orm]**'
  id: totrans-1275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The version_id_col feature on mapper() will raise a warning when used with dialects
    that don’t support “rowcount” adequately.
  id: totrans-1276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper() 上的 version_id_col 功能在与不适当支持 “rowcount” 的方言一起使用时会引发警告。
- en: 'References: [#1569](https://www.sqlalchemy.org/trac/ticket/1569)'
  id: totrans-1277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1569](https://www.sqlalchemy.org/trac/ticket/1569)
- en: '**[orm]**'
  id: totrans-1278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “execution_options()” to Query, to so options can be passed to the resulting
    statement. Currently only Select-statements have these options, and the only option
    used is “stream_results”, and the only dialect which knows “stream_results” is
    psycopg2.
  id: totrans-1279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 上添加了 “execution_options()”，以便可以将选项传递给生成的语句。目前只有 Select 语句具有这些选项，使用的唯一选项是
    “stream_results”，而且唯一知道 “stream_results” 的方言是 psycopg2。
- en: '**[orm]**'
  id: totrans-1280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.yield_per() will set the “stream_results” statement option automatically.
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.yield_per() 将自动设置 “stream_results” 语句选项。
- en: '**[orm]**'
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Deprecated or removed:'
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用或移除：
- en: ’allow_null_pks’ flag on mapper() is deprecated. It does nothing now and the
    setting is “on” in all cases.
  id: totrans-1284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: mapper() 上的 ‘allow_null_pks’ 标志被弃用。它现在不起作用，而且在所有情况下都是 “on”。
- en: ’transactional’ flag on sessionmaker() and others is removed. Use ‘autocommit=True’
    to indicate ‘transactional=False’.
  id: totrans-1285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: sessionmaker() 和其他地方的 ‘transactional’ 标志已被移除。使用 ‘autocommit=True’ 表示 ‘transactional=False’。
- en: ’polymorphic_fetch’ argument on mapper() is removed. Loading can be controlled
    using the ‘with_polymorphic’ option.
  id: totrans-1286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: mapper() 上的 ‘polymorphic_fetch’ 参数已移除。可以使用 ‘with_polymorphic’ 选项来控制加载。
- en: ’select_table’ argument on mapper() is removed. Use ‘with_polymorphic=(“*”,
    <some selectable>)’ for this functionality.
  id: totrans-1287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: mapper() 上的 ‘select_table’ 参数已移除。对于此功能，请使用 ‘with_polymorphic=(“*”, <some selectable>)’。
- en: ’proxy’ argument on synonym() is removed. This flag did nothing throughout 0.5,
    as the “proxy generation” behavior is now automatic.
  id: totrans-1288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: synonym() 上的 ‘proxy’ 参数已被移除。在 0.5 版本中，此标志在整个期间都没有起作用，因为 “proxy 生成” 行为现在是自动的。
- en: Passing a single list of elements to eagerload(), eagerload_all(), contains_eager(),
    lazyload(), defer(), and undefer() instead of multiple positional *args is deprecated.
  id: totrans-1289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将单个元素列表传递给 eagerload()、eagerload_all()、contains_eager()、lazyload()、defer() 和
    undefer()，而不是多个位置参数 *args 已被弃用。
- en: Passing a single list of elements to query.order_by(), query.group_by(), query.join(),
    or query.outerjoin() instead of multiple positional *args is deprecated.
  id: totrans-1290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将单个元素列表传递给 query.order_by()、query.group_by()、query.join() 或 query.outerjoin()，而不是多个位置参数
    *args 已被弃用。
- en: query.iterate_instances() is removed. Use query.instances().
  id: totrans-1291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query.iterate_instances() 被移除。使用 query.instances()。
- en: Query.query_from_parent() is removed. Use the sqlalchemy.orm.with_parent() function
    to produce a “parent” clause, or alternatively query.with_parent().
  id: totrans-1292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Query.query_from_parent() 被移除了。使用 sqlalchemy.orm.with_parent() 函数生成“parent”子句，或者使用
    query.with_parent()。
- en: query._from_self() is removed, use query.from_self() instead.
  id: totrans-1293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query._from_self() 已移除，改用 query.from_self()。
- en: the “comparator” argument to composite() is removed. Use “comparator_factory”.
  id: totrans-1294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: composite() 的 “comparator” 参数已被移除。使用 “comparator_factory”。
- en: RelationProperty._get_join() is removed.
  id: totrans-1295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RelationProperty._get_join() 已被移除。
- en: the ‘echo_uow’ flag on Session is removed. Use logging on the “sqlalchemy.orm.unitofwork”
    name.
  id: totrans-1296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Session 上的 ‘echo_uow’ 标志已被移除。在 “sqlalchemy.orm.unitofwork” 名称上记录日志。
- en: session.clear() is removed. use session.expunge_all().
  id: totrans-1297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.clear() 已被移除。使用 session.expunge_all()。
- en: session.save(), session.update(), session.save_or_update() are removed. Use
    session.add() and session.add_all().
  id: totrans-1298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.save()、session.update()、session.save_or_update() 被移除。使用 session.add()
    和 session.add_all()。
- en: the “objects” flag on session.flush() remains deprecated.
  id: totrans-1299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.flush() 上的 “objects” 标志仍然被弃用。
- en: the “dont_load=True” flag on session.merge() is deprecated in favor of “load=False”.
  id: totrans-1300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.merge() 上的 “dont_load=True” 标志已被弃用，改用 “load=False”。
- en: ScopedSession.mapper remains deprecated. See the usage recipe at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
  id: totrans-1301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ScopedSession.mapper 仍然被弃用。请参阅 [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    上的用法示例。
- en: passing an InstanceState (internal SQLAlchemy state object) to attributes.init_collection()
    or attributes.get_history() is deprecated. These functions are public API and
    normally expect a regular mapped object instance.
  id: totrans-1302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个InstanceState（内部SQLAlchemy状态对象）传递给attributes.init_collection()或attributes.get_history()已被弃用。这些函数是公共API，并且通常希望接受正常映射的对象实例。
- en: the ‘engine’ parameter to declarative_base() is removed. Use the ‘bind’ keyword
    argument.
  id: totrans-1303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: declarative_base()的‘engine’参数已删除。请使用‘bind’关键字参数。
- en: sql
  id: totrans-1304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “autocommit” flag on select() and text() as well as select().autocommit()
    are deprecated - now call .execution_options(autocommit=True) on either of those
    constructs, also available directly on Connection and orm.Query.
  id: totrans-1306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选中（select()）和文本（text()）上的“autocommit”标志以及select().autocommit()都已被弃用 - 现在在这些结构的任意一个上调用.execution_options(autocommit=True)，也可以直接在Connection和orm.Query上使用。
- en: '**[sql]**'
  id: totrans-1307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the autoincrement flag on column now indicates the column which should be linked
    to cursor.lastrowid, if that method is used. See the API docs for details.
  id: totrans-1308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column上的autoincrement标志现在指示应该链接到cursor.lastrowid的列，如果使用了该方法。有关详细信息，请参阅API文档。
- en: '**[sql]**'
  id: totrans-1309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: an executemany() now requires that all bound parameter sets require that all
    keys are present which are present in the first bound parameter set. The structure
    and behavior of an insert/update statement is very much determined by the first
    parameter set, including which defaults are going to fire off, and a minimum of
    guesswork is performed with all the rest so that performance is not impacted.
    For this reason defaults would otherwise silently “fail” for missing parameters,
    so this is now guarded against.
  id: totrans-1310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，executemany()要求所有绑定的参数集中的所有键都必须与第一个绑定的参数集中存在的键相同。插入/更新语句的结构和行为在很大程度上由第一个参数集确定，包括哪些默认值将触发，而对其余的参数不进行最小量的猜测，以确保不影响性能。因此，否则默认值会对缺少的参数“失败”，因此现在进行了保护。
- en: 'References: [#1566](https://www.sqlalchemy.org/trac/ticket/1566)'
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1566](https://www.sqlalchemy.org/trac/ticket/1566)
- en: '**[sql]**'
  id: totrans-1312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: returning() support is native to insert(), update(), delete(). Implementations
    of varying levels of functionality exist for PostgreSQL, Firebird, MSSQL and Oracle.
    returning() can be called explicitly with column expressions which are then returned
    in the resultset, usually via fetchone() or first().
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: returning()支持已经内置到insert()、update()、delete()。对于PostgreSQL、Firebird、MSSQL和Oracle，具有不同功能级别的实现存在。可以显式调用returning()，并提供列表达式，然后这些表达式将在结果集中返回，通常通过fetchone()或first()。
- en: insert() constructs will also use RETURNING implicitly to get newly generated
    primary key values, if the database version in use supports it (a version number
    check is performed). This occurs if no end-user returning() was specified.
  id: totrans-1314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果正在使用的数据库版本支持（执行版本号检查），则insert()构造还将隐式使用RETURNING来获取新生成的主键值。如果没有指定最终用户的returning()，则会发生这种情况。
- en: '**[sql]**'
  id: totrans-1315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: union(), intersect(), except() and other “compound” types of statements have
    more consistent behavior w.r.t. parenthesizing. Each compound element embedded
    within another will now be grouped with parenthesis - previously, the first compound
    element in the list would not be grouped, as SQLite doesn’t like a statement to
    start with parenthesis. However, PostgreSQL in particular has precedence rules
    regarding INTERSECT, and it is more consistent for parenthesis to be applied equally
    to all sub-elements. So now, the workaround for SQLite is also what the workaround
    for PG was previously - when nesting compound elements, the first one usually
    needs “.alias().select()” called on it to wrap it inside of a subquery.
  id: totrans-1316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: union()、intersect()、except()和其他“复合”类型的语句在括号使用上具有更一致的行为。现在，嵌入到另一个元素中的每个复合元素都将与括号分组
    - 以前，列表中的第一个复合元素不会被分组，因为SQLite不喜欢以括号开始的语句。但是，特别是PostgreSQL具有关于INTERSECT的优先规则，并且将括号应用于所有子元素更一致。因此，现在，SQLite的解决方法也是以前PG的解决方法
    - 在嵌套复合元素时，通常需要在其上调用“.alias().select()”以将其包装在子查询中。
- en: 'References: [#1665](https://www.sqlalchemy.org/trac/ticket/1665)'
  id: totrans-1317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1665](https://www.sqlalchemy.org/trac/ticket/1665)
- en: '**[sql]**'
  id: totrans-1318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: insert() and update() constructs can now embed bindparam() objects using names
    that match the keys of columns. These bind parameters will circumvent the usual
    route to those keys showing up in the VALUES or SET clause of the generated SQL.
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: insert()和update()构造现在可以使用与列键匹配的名称嵌入bindparam()对象。这些绑定参数将绕过生成的SQL的VALUES或SET子句中出现的这些键的通常路线。
- en: 'References: [#1579](https://www.sqlalchemy.org/trac/ticket/1579)'
  id: totrans-1320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1579](https://www.sqlalchemy.org/trac/ticket/1579)
- en: '**[sql]**'
  id: totrans-1321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Binary type now returns data as a Python string (or a “bytes” type in Python
    3), instead of the built- in “buffer” type. This allows symmetric round trips
    of binary data.
  id: totrans-1322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Binary 类型现在将数据作为 Python 字符串返回（在 Python 3 中为“bytes”类型），而不是内置的“buffer”类型。这允许二进制数据的对称往返。
- en: 'References: [#1524](https://www.sqlalchemy.org/trac/ticket/1524)'
  id: totrans-1323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1524](https://www.sqlalchemy.org/trac/ticket/1524)
- en: '**[sql]**'
  id: totrans-1324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added a tuple_() construct, allows sets of expressions to be compared to another
    set, typically with IN against composite primary keys or similar. Also accepts
    an IN with multiple columns. The “scalar select can have only one column” error
    message is removed - will rely upon the database to report problems with col mismatch.
  id: totrans-1325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 tuple_() 构造，允许将一组表达式与另一组表达式进行比较，通常与复合主键或类似的 IN 进行比较。也接受具有多列的 IN。已移除了“标量选择只能有一列”错误消息
    - 将依赖数据库报告列不匹配的问题。
- en: '**[sql]**'
  id: totrans-1326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: User-defined “default” and “onupdate” callables which accept a context should
    now call upon “context.current_parameters” to get at the dictionary of bind parameters
    currently being processed. This dict is available in the same way regardless of
    single-execute or executemany-style statement execution.
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户定义的“default”和“onupdate”可调用项现在应调用“context.current_parameters”来获取当前正在处理的绑定参数字典。无论是单次执行还是
    executemany-style 语句执行，此字典都以相同的方式可用。
- en: '**[sql]**'
  id: totrans-1328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: multi-part schema names, i.e. with dots such as “dbo.master”, are now rendered
    in select() labels with underscores for dots, i.e. “dbo_master_table_column”.
    This is a “friendly” label that behaves better in result sets.
  id: totrans-1329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多部分模式名称，例如带有点的名称，如“dbo.master”，现在在 select() 标签中以下划线形式呈现，例如“dbo_master_table_column”。这是一个“友好”的标签，在结果集中的行为更好。
- en: 'References: [#1428](https://www.sqlalchemy.org/trac/ticket/1428)'
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1428](https://www.sqlalchemy.org/trac/ticket/1428)
- en: '**[sql]**'
  id: totrans-1331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: removed needless “counter” behavior with select() labelnames that match a column
    name in the table, i.e. generates “tablename_id” for “id”, instead of “tablename_id_1”
    in an attempt to avoid naming conflicts, when the table has a column actually
    named “tablename_id” - this is because the labeling logic is always applied to
    all columns so a naming conflict will never occur.
  id: totrans-1332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了不必要的“计数器”行为，即使选择() 标签名称与表中的列名匹配，例如为“id”生成“tablename_id”，而不是在尝试避免命名冲突时为“tablename_id_1”生成“tablename_id”，当表实际上具有一个名为“tablename_id”的列时
    - 这是因为标签逻辑总是应用于所有列，因此永远不会发生命名冲突。
- en: '**[sql]**'
  id: totrans-1333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: calling expr.in_([]), i.e. with an empty list, emits a warning before issuing
    the usual “expr != expr” clause. The “expr != expr” can be very expensive, and
    it’s preferred that the user not issue in_() if the list is empty, instead simply
    not querying, or modifying the criterion as appropriate for more complex situations.
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用 expr.in_([])，即使用空列表，会在发出通常的“expr != expr”子句之前发出警告。 “expr != expr”可能非常昂贵，建议用户如果列表为空，则不要发出
    in_()，而是简单地不查询，或根据更复杂的情况修改条件。
- en: 'References: [#1628](https://www.sqlalchemy.org/trac/ticket/1628)'
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1628](https://www.sqlalchemy.org/trac/ticket/1628)
- en: '**[sql]**'
  id: totrans-1336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added “execution_options()” to select()/text(), which set the default options
    for the Connection. See the note in “engines”.
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 select()/text() 中添加了“execution_options()”，它设置了连接的默认选项。请参阅“engines”中的说明。
- en: '**[sql]**'
  id: totrans-1338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: 'Deprecated or removed:'
  id: totrans-1339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用或移除：
- en: ”scalar” flag on select() is removed, use select.as_scalar().
  id: totrans-1340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 select() 上的“scalar”标志已被移除，请使用 select.as_scalar()。
- en: ”shortname” attribute on bindparam() is removed.
  id: totrans-1341
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 bindparam() 上的“shortname”属性已被移除。
- en: postgres_returning, firebird_returning flags on insert(), update(), delete()
    are deprecated, use the new returning() method.
  id: totrans-1342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 insert()、update()、delete() 上的 postgres_returning、firebird_returning 标志已被弃用，请使用新的
    returning() 方法。
- en: fold_equivalents flag on join is deprecated (will remain until is implemented)
  id: totrans-1343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 join 上的 fold_equivalents 标志已被弃用（将保留直到实现）。
- en: 'References: [#1131](https://www.sqlalchemy.org/trac/ticket/1131)'
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1131](https://www.sqlalchemy.org/trac/ticket/1131)
- en: schema
  id: totrans-1345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-1346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: the __contains__() method of MetaData now accepts strings or Table objects as
    arguments. If given a Table, the argument is converted to table.key first, i.e.
    “[schemaname.]<tablename>”
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData 的 __contains__() 方法现在接受字符串或表对象作为参数。如果给定了一个表，参数首先被转换为 table.key，即“[模式名.]<表名>”。
- en: 'References: [#1541](https://www.sqlalchemy.org/trac/ticket/1541)'
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1541](https://www.sqlalchemy.org/trac/ticket/1541)
- en: '**[schema]**'
  id: totrans-1349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: deprecated MetaData.connect() and ThreadLocalMetaData.connect() have been removed
    - send the “bind” attribute to bind a metadata.
  id: totrans-1350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除了已弃用的 MetaData.connect() 和 ThreadLocalMetaData.connect() - 将“bind”属性发送到绑定元数据。
- en: '**[schema]**'
  id: totrans-1351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: deprecated metadata.table_iterator() method removed (use sorted_tables)
  id: totrans-1352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了弃用的 metadata.table_iterator() 方法（使用 sorted_tables）
- en: '**[schema]**'
  id: totrans-1353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: deprecated PassiveDefault - use DefaultClause.
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用的 PassiveDefault - 使用 DefaultClause。
- en: '**[schema]**'
  id: totrans-1355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: the “metadata” argument is removed from DefaultGenerator and subclasses, but
    remains locally present on Sequence, which is a standalone construct in DDL.
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “metadata”参数已从 DefaultGenerator 和其子类中删除，但仍然在 Sequence 上本地存在，Sequence 是 DDL 中的独立构造。
- en: '**[schema]**'
  id: totrans-1357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: 'Removed public mutability from Index and Constraint objects:'
  id: totrans-1358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从索引和约束对象中删除了公共的可变性：
- en: ForeignKeyConstraint.append_element()
  id: totrans-1359
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ForeignKeyConstraint.append_element()
- en: ''
  id: totrans-1360
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1361
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Index.append_column()
  id: totrans-1362
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Index.append_column()
- en: ''
  id: totrans-1363
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1364
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: UniqueConstraint.append_column()
  id: totrans-1365
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: UniqueConstraint.append_column()
- en: ''
  id: totrans-1366
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1367
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PrimaryKeyConstraint.add()
  id: totrans-1368
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PrimaryKeyConstraint.add()
- en: ''
  id: totrans-1369
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1370
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PrimaryKeyConstraint.remove()
  id: totrans-1371
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PrimaryKeyConstraint.remove()
- en: These should be constructed declaratively (i.e. in one construction).
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些应该被声明式构建（即一次构建）。
- en: '**[schema]**'
  id: totrans-1373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The “start” and “increment” attributes on Sequence now generate “START WITH”
    and “INCREMENT BY” by default, on Oracle and PostgreSQL. Firebird doesn’t support
    these keywords right now.
  id: totrans-1374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sequence 上的“start”和“increment”属性现在默认生成 Oracle 和 PostgreSQL 上的“START WITH”和“INCREMENT
    BY”。 Firebird 目前不支持这些关键字。
- en: 'References: [#1545](https://www.sqlalchemy.org/trac/ticket/1545)'
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1545](https://www.sqlalchemy.org/trac/ticket/1545)
- en: '**[schema]**'
  id: totrans-1376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: UniqueConstraint, Index, PrimaryKeyConstraint all accept lists of column names
    or column objects as arguments.
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: UniqueConstraint、Index、PrimaryKeyConstraint 接受列名或列对象列表作为参数。
- en: '**[schema]**'
  id: totrans-1378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: 'Other removed things:'
  id: totrans-1379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他已移除的东西：
- en: Table.key (no idea what this was for)
  id: totrans-1380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Table.key（不知道这是干什么的）
- en: Table.primary_key is not assignable - use table.append_constraint(PrimaryKeyConstraint(…))
  id: totrans-1381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Table.primary_key 不可分配 - 使用 table.append_constraint(PrimaryKeyConstraint(…))。
- en: Column.bind (get via column.table.bind)
  id: totrans-1382
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.bind（通过 column.table.bind 获得）
- en: Column.metadata (get via column.table.metadata)
  id: totrans-1383
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.metadata（通过 column.table.metadata 获得）
- en: Column.sequence (use column.default)
  id: totrans-1384
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.sequence（使用 column.default）
- en: ForeignKey(constraint=some_parent) (is now private _constraint)
  id: totrans-1385
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ForeignKey（constraint=some_parent）（现在是私有 _constraint）
- en: '**[schema]**'
  id: totrans-1386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The use_alter flag on ForeignKey is now a shortcut option for operations that
    can be hand-constructed using the DDL() event system. A side effect of this refactor
    is that ForeignKeyConstraint objects with use_alter=True will *not* be emitted
    on SQLite, which does not support ALTER for foreign keys.
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey 上的 use_alter 标志现在是手工构建使用 DDL() 事件系统的操作的快捷选项。此重构的副作用是，具有 use_alter=True
    的 ForeignKeyConstraint 对象将不会在 SQLite 上发出，SQLite 不支持外键的 ALTER。
- en: '**[schema]**'
  id: totrans-1388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: ForeignKey and ForeignKeyConstraint objects now correctly copy() all their public
    keyword arguments.
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey 和 ForeignKeyConstraint 对象现在正确地复制了它们所有的公共关键字参数。
- en: 'References: [#1605](https://www.sqlalchemy.org/trac/ticket/1605)'
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1605](https://www.sqlalchemy.org/trac/ticket/1605)
- en: postgresql
  id: totrans-1391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: 'New dialects: pg8000, zxjdbc, and pypostgresql on py3k.'
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新方言：pg8000、zxjdbc 和 py3k 上的 pypostgresql。
- en: '**[postgresql]**'
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: 'The “postgres” dialect is now named “postgresql” ! Connection strings look
    like:'
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “postgres”方言现在被命名为“postgresql”！连接字符串如下：
- en: postgresql://scott:tiger@localhost/test postgresql+pg8000://scott:tiger@localhost/test
  id: totrans-1396
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: postgresql://scott:tiger@localhost/test postgresql+pg8000://scott:tiger@localhost/test
- en: ''
  id: totrans-1397
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The “postgres” name remains for backwards compatibility in the following ways:'
  id: totrans-1398
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “postgres”名称以以下方式保留向后兼容性：
- en: ''
  id: totrans-1399
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is a “postgres.py” dummy dialect which allows old URLs to work, i.e. postgres://scott:tiger@localhost/test
  id: totrans-1400
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一个“postgres.py”虚拟方言，允许旧的 URL 正常工作，即 postgres://scott:tiger@localhost/test
- en: ''
  id: totrans-1401
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1402
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The “postgres” name can be imported from the old “databases” module, i.e. “from
    sqlalchemy.databases import postgres” as well as “dialects”, “from sqlalchemy.dialects.postgres
    import base as pg”, will send a deprecation warning.
  id: totrans-1403
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以从旧的“databases”模块中导入“postgres”名称，即“from sqlalchemy.databases import postgres”，以及“dialects”，“from
    sqlalchemy.dialects.postgres import base as pg”，将发送一个弃用警告。
- en: ''
  id: totrans-1404
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1405
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Special expression arguments are now named “postgresql_returning” and “postgresql_where”,
    but the older “postgres_returning” and “postgres_where” names still work with
    a deprecation warning.
  id: totrans-1406
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在特殊的表达式参数被命名为“postgresql_returning”和“postgresql_where”，但是旧的“postgres_returning”和“postgres_where”名称仍然与弃用警告一起工作。
- en: '**[postgresql]**'
  id: totrans-1407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: ”postgresql_where” now accepts SQL expressions which can also include literals,
    which will be quoted as needed.
  id: totrans-1408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “postgresql_where”现在接受 SQL 表达式，这些表达式也可以包含文字，需要时将进行引用。
- en: '**[postgresql]**'
  id: totrans-1409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 dialect now uses psycopg2’s “unicode extension” on all new connections,
    which allows all String/Text/etc. types to skip the need to post-process bytestrings
    into unicode (an expensive step due to its volume). Other dialects which return
    unicode natively (pg8000, zxjdbc) also skip unicode post-processing.
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 方言现在在所有新连接上使用 psycopg2 的“unicode extension”，这允许所有 String/Text/等类型跳过将字节字符串后处理为
    unicode 的步骤（这是一个昂贵的步骤，因为其量大）。其他本地返回 unicode 的方言（如 pg8000，zxjdbc）也跳过了 unicode 后处理。
- en: '**[postgresql]**'
  id: totrans-1411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added new ENUM type, which exists as a schema-level construct and extends the
    generic Enum type. Automatically associates itself with tables and their parent
    metadata to issue the appropriate CREATE TYPE/DROP TYPE commands as needed, supports
    unicode labels, supports reflection.
  id: totrans-1412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 ENUM 类型，它作为一个模式级别的构造存在，并扩展了通用的 Enum 类型。自动将自己与表及其父元数据关联起来，以在需要时发出适当的 CREATE
    TYPE/DROP TYPE 命令，支持 unicode 标签，支持反射。
- en: 'References: [#1511](https://www.sqlalchemy.org/trac/ticket/1511)'
  id: totrans-1413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1511](https://www.sqlalchemy.org/trac/ticket/1511)
- en: '**[postgresql]**'
  id: totrans-1414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: INTERVAL supports an optional “precision” argument corresponding to the argument
    that PG accepts.
  id: totrans-1415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: INTERVAL 支持一个可选的“precision”参数，对应 PG 接受的参数。
- en: '**[postgresql]**'
  id: totrans-1416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的 dialect.initialize() 功能来设置版本相关的行为。
- en: '**[postgresql]**'
  id: totrans-1418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: somewhat better support for % signs in table/column names; psycopg2 can’t handle
    a bind parameter name of %(foobar)s however and SQLA doesn’t want to add overhead
    just to treat that one non-existent use case.
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对表/列名称中的%符号提供了更好的支持；然而 psycopg2 无法处理绑定参数名为 %(foobar)s 的情况，SQLA 不想添加额外开销来处理那个不存在的用例。
- en: 'References: [#1279](https://www.sqlalchemy.org/trac/ticket/1279)'
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1279](https://www.sqlalchemy.org/trac/ticket/1279)
- en: '**[postgresql]**'
  id: totrans-1421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Inserting NULL into a primary key + foreign key column will allow the “not null
    constraint” error to raise, not an attempt to execute a nonexistent “col_id_seq”
    sequence.
  id: totrans-1422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 插入 NULL 到主键 + 外键列将引发“非空约束”错误，而不是尝试执行不存在的“col_id_seq”序列。
- en: 'References: [#1516](https://www.sqlalchemy.org/trac/ticket/1516)'
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1516](https://www.sqlalchemy.org/trac/ticket/1516)
- en: '**[postgresql]**'
  id: totrans-1424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: autoincrement SELECT statements, i.e. those which select from a procedure that
    modifies rows, now work with server-side cursor mode (the named cursor isn’t used
    for such statements.)
  id: totrans-1425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自增 SELECT 语句，即从修改行的过程中选择的语句，现在可以与服务器端游标模式一起工作（对于这样的语句不使用命名游标）。
- en: '**[postgresql]**'
  id: totrans-1426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: postgresql dialect can properly detect pg “devel” version strings, i.e. “8.5devel”
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql 方言现在可以正确检测 pg 的“devel”版本字符串，即“8.5devel”。
- en: 'References: [#1636](https://www.sqlalchemy.org/trac/ticket/1636)'
  id: totrans-1428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1636](https://www.sqlalchemy.org/trac/ticket/1636)
- en: '**[postgresql]**'
  id: totrans-1429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 now respects the statement option “stream_results”. This option
    overrides the connection setting “server_side_cursors”. If true, server side cursors
    will be used for the statement. If false, they will not be used, even if “server_side_cursors”
    is true on the connection.
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 现在支持语句选项“stream_results”。此选项将覆盖连接设置“server_side_cursors”。如果为true，则将使用服务器端游标执行语句。如果为false，则不会使用，即使连接上的“server_side_cursors”为true。
- en: 'References: [#1619](https://www.sqlalchemy.org/trac/ticket/1619)'
  id: totrans-1431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1619](https://www.sqlalchemy.org/trac/ticket/1619)
- en: mysql
  id: totrans-1432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: 'New dialects: oursql, a new native dialect, MySQL Connector/Python, a native
    Python port of MySQLdb, and of course zxjdbc on Jython.'
  id: totrans-1434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的方言：oursql，一个新的本地方言，MySQL Connector/Python，MySQLdb 的一个本地 Python 移植，当然还有 Jython
    上的 zxjdbc。
- en: '**[mysql]**'
  id: totrans-1435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: VARCHAR/NVARCHAR will not render without a length, raises an error before passing
    to MySQL. Doesn’t impact CAST since VARCHAR is not allowed in MySQL CAST anyway,
    the dialect renders CHAR/NCHAR in those cases.
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: VARCHAR/NVARCHAR 在没有长度的情况下不会渲染，在传递到 MySQL 之前会引发错误。在 CAST 中没有影响，因为在 MySQL CAST
    中不允许 VARCHAR，方言在这些情况下会渲染 CHAR/NCHAR。
- en: '**[mysql]**'
  id: totrans-1437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: all the _detect_XXX() functions now run once underneath dialect.initialize()
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有的 _detect_XXX() 函数现在都在 dialect.initialize() 下运行一次。
- en: '**[mysql]**'
  id: totrans-1439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: somewhat better support for % signs in table/column names; MySQLdb can’t handle
    % signs in SQL when executemany() is used, and SQLA doesn’t want to add overhead
    just to treat that one non-existent use case.
  id: totrans-1440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对表/列名称中的%符号提供了更好的支持；当使用 executemany() 时，MySQLdb 无法处理 SQL 中的%符号，而 SQLA 不想添加额外开销来处理那个不存在的用例。
- en: 'References: [#1279](https://www.sqlalchemy.org/trac/ticket/1279)'
  id: totrans-1441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1279](https://www.sqlalchemy.org/trac/ticket/1279)
- en: '**[mysql]**'
  id: totrans-1442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the BINARY and MSBinary types now generate “BINARY” in all cases. Omitting the
    “length” parameter will generate “BINARY” with no length. Use BLOB to generate
    an unlengthed binary column.
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BINARY和MSBinary类型现在在所有情况下生成“BINARY”。省略“length”参数将生成没有长度的“BINARY”。使用BLOB生成一个无长度的二进制列。
- en: '**[mysql]**'
  id: totrans-1444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the “quoting=’quoted’” argument to MSEnum/ENUM is deprecated. It’s best to rely
    upon the automatic quoting.
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “quoting=’quoted’”参数对MSEnum/ENUM已经不推荐使用。最好依赖自动引用。
- en: '**[mysql]**'
  id: totrans-1446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ENUM now subclasses the new generic Enum type, and also handles unicode values
    implicitly, if the given labelnames are unicode objects.
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ENUM现在是新的通用Enum类型的子类，并且如果给定的标签名称是Unicode对象，则隐式处理Unicode值。
- en: '**[mysql]**'
  id: totrans-1448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a column of type TIMESTAMP now defaults to NULL if “nullable=False” is not passed
    to Column(), and no default is present. This is now consistent with all other
    types, and in the case of TIMESTAMP explicitly renders “NULL” due to MySQL’s “switching”
    of default nullability for TIMESTAMP columns.
  id: totrans-1449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TIMESTAMP类型的列现在默认为NULL，如果未传递“nullable=False”给Column()，并且没有默认值。这现在与所有其他类型一致，并且在TIMESTAMP的情况下明确渲染为“NULL”，因为MySQL对TIMESTAMP列的默认可空性进行了“切换”。
- en: 'References: [#1539](https://www.sqlalchemy.org/trac/ticket/1539)'
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1539](https://www.sqlalchemy.org/trac/ticket/1539)
- en: sqlite
  id: totrans-1451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: DATE, TIME and DATETIME types can now take optional storage_format and regexp
    argument. storage_format can be used to store those types using a custom string
    format. regexp allows to use a custom regular expression to match string values
    from the database.
  id: totrans-1453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DATE、TIME和DATETIME类型现在可以接受可选的storage_format和regexp参数。storage_format可用于使用自定义字符串格式存储这些类型。regexp允许使用自定义正则表达式匹配数据库中的字符串值。
- en: '**[sqlite]**'
  id: totrans-1454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Time and DateTime types now use by a default a stricter regular expression to
    match strings from the database. Use the regexp argument if you are using data
    stored in a legacy format.
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Time和DateTime类型现在默认使用更严格的正则表达式来匹配数据库中的字符串。如果使用存储在旧格式中的数据，请使用regexp参数。
- en: '**[sqlite]**'
  id: totrans-1456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: __legacy_microseconds__ on SQLite Time and DateTime types is not supported anymore.
    You should use the storage_format argument instead.
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite Time和DateTime类型上的__legacy_microseconds__不再受支持。您应该使用storage_format参数。
- en: '**[sqlite]**'
  id: totrans-1458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: 'Date, Time and DateTime types are now stricter in what they accept as bind
    parameters: Date type only accepts date objects (and datetime ones, because they
    inherit from date), Time only accepts time objects, and DateTime only accepts
    date and datetime objects.'
  id: totrans-1459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Date、Time和DateTime类型现在在接受绑定参数时更严格：Date类型只接受日期对象（和日期时间对象，因为它们继承自日期），Time只接受时间对象，DateTime���接受日期和日期时间对象。
- en: '**[sqlite]**'
  id: totrans-1460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Table() supports a keyword argument “sqlite_autoincrement”, which applies the
    SQLite keyword “AUTOINCREMENT” to the single integer primary key column when generating
    DDL. Will prevent generation of a separate PRIMARY KEY constraint.
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table()支持一个关键字参数“sqlite_autoincrement”，在生成DDL时将SQLite关键字“AUTOINCREMENT”应用于单个整数主键列。将阻止生成单独的PRIMARY
    KEY约束。
- en: 'References: [#1016](https://www.sqlalchemy.org/trac/ticket/1016)'
  id: totrans-1462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1016](https://www.sqlalchemy.org/trac/ticket/1016)
- en: mssql
  id: totrans-1463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: MSSQL + Pyodbc + FreeTDS now works for the most part, with possible exceptions
    regarding binary data as well as unicode schema identifiers.
  id: totrans-1465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL + Pyodbc + FreeTDS现在大部分情况下可以正常工作，可能会有关于二进制数据以及Unicode模式标识符的异常情况。
- en: '**[mssql]**'
  id: totrans-1466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the “has_window_funcs” flag is removed. LIMIT/OFFSET usage will use ROW NUMBER
    as always, and if on an older version of SQL Server, the operation fails. The
    behavior is exactly the same except the error is raised by SQL server instead
    of the dialect, and no flag setting is required to enable it.
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “has_window_funcs”标志已被移除。LIMIT/OFFSET使用将始终使用ROW NUMBER，如果在较旧版本的SQL Server上，则操作将失败。行为完全相同，只是错误由SQL服务器而不是方言引发，并且不需要设置标志来启用它。
- en: '**[mssql]**'
  id: totrans-1468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the “auto_identity_insert” flag is removed. This feature always takes effect
    when an INSERT statement overrides a column that is known to have a sequence on
    it. As with “has_window_funcs”, if the underlying driver doesn’t support this,
    then you can’t do this operation in any case, so there’s no point in having a
    flag.
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “auto_identity_insert”标志已被移除。当INSERT语句覆盖已知具有序列的列时，此功能始终生效。与“has_window_funcs”一样，如果底层驱动程序不支持此功能，则无论如何都无法执行此操作，因此没有必要设置标志。
- en: '**[mssql]**'
  id: totrans-1470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-1471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的dialect.initialize()功能来设置版本相关的行为。
- en: '**[mssql]**'
  id: totrans-1472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: removed references to sequence which is no longer used. implicit identities
    in mssql work the same as implicit sequences on any other dialects. Explicit sequences
    are enabled through the use of “default=Sequence()”. See the MSSQL dialect documentation
    for more information.
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了不再使用的序列引用。在mssql中，隐式标识与其他方言上的隐式序列相同。通过使用“default=Sequence()”启用显式序列。有关更多信息，请参阅MSSQL方言文档。
- en: oracle
  id: totrans-1474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: unit tests pass 100% with cx_oracle !
  id: totrans-1476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试与cx_oracle完全通过！
- en: '**[oracle]**'
  id: totrans-1477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: support for cx_Oracle’s “native unicode” mode which does not require NLS_LANG
    to be set. Use the latest 5.0.2 or later of cx_oracle.
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持cx_Oracle的“本地unicode”模式，不需要设置NLS_LANG��请使用最新的cx_oracle 5.0.2或更高版本。
- en: '**[oracle]**'
  id: totrans-1479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: an NCLOB type is added to the base types.
  id: totrans-1480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了NCLOB类型到基本类型。
- en: '**[oracle]**'
  id: totrans-1481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: use_ansi=False won’t leak into the FROM/WHERE clause of a statement that’s selecting
    from a subquery that also uses JOIN/OUTERJOIN.
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: use_ansi=False不会泄漏到选择子查询的FROM/WHERE子句中，该子查询还使用JOIN/OUTERJOIN。
- en: '**[oracle]**'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added native INTERVAL type to the dialect. This supports only the DAY TO SECOND
    interval type so far due to lack of support in cx_oracle for YEAR TO MONTH.
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向方言添加了本机INTERVAL类型。目前仅支持DAY TO SECOND间隔类型，因为cx_oracle不支持YEAR TO MONTH。
- en: 'References: [#1467](https://www.sqlalchemy.org/trac/ticket/1467)'
  id: totrans-1485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1467](https://www.sqlalchemy.org/trac/ticket/1467)
- en: '**[oracle]**'
  id: totrans-1486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: usage of the CHAR type results in cx_oracle’s FIXED_CHAR dbapi type being bound
    to statements.
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用CHAR类型会导致cx_oracle的FIXED_CHAR dbapi类型绑定到语句。
- en: '**[oracle]**'
  id: totrans-1488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: the Oracle dialect now features NUMBER which intends to act justlike Oracle’s
    NUMBER type. It is the primary numeric type returned by table reflection and attempts
    to return Decimal()/float/int based on the precision/scale parameters.
  id: totrans-1489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言现在具有NUMBER，旨在像Oracle的NUMBER类型一样运行。它是通过表反射返回的主要数值类型，并尝试根据精度/比例参数返回Decimal()/float/int。
- en: 'References: [#885](https://www.sqlalchemy.org/trac/ticket/885)'
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#885](https://www.sqlalchemy.org/trac/ticket/885)
- en: '**[oracle]**'
  id: totrans-1491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: func.char_length is a generic function for LENGTH
  id: totrans-1492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.char_length是用于LENGTH的通用函数
- en: '**[oracle]**'
  id: totrans-1493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: ForeignKey() which includes onupdate=<value> will emit a warning, not emit ON
    UPDATE CASCADE which is unsupported by oracle
  id: totrans-1494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含onupdate=<value>的ForeignKey()将发出警告，不会发出不受Oracle支持的ON UPDATE CASCADE
- en: '**[oracle]**'
  id: totrans-1495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: the keys() method of RowProxy() now returns the result column names *normalized*
    to be SQLAlchemy case insensitive names. This means they will be lower case for
    case insensitive names, whereas the DBAPI would normally return them as UPPERCASE
    names. This allows row keys() to be compatible with further SQLAlchemy operations.
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy()的keys()方法现在返回结果列名*规范化*为SQLAlchemy不区分大小写的名称。这意味着对于不区分大小写的名称，它们将是小写，而DBAPI通常会将它们返回为大写名称。这使得行键()与进一步的SQLAlchemy操作兼容。
- en: '**[oracle]**'
  id: totrans-1497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的dialect.initialize()功能设置版本相关行为。
- en: '**[oracle]**'
  id: totrans-1499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: using types.BigInteger with Oracle will generate NUMBER(19)
  id: totrans-1500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Oracle中使用types.BigInteger将生成NUMBER(19)
- en: 'References: [#1125](https://www.sqlalchemy.org/trac/ticket/1125)'
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1125](https://www.sqlalchemy.org/trac/ticket/1125)
- en: '**[oracle]**'
  id: totrans-1502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: ”case sensitivity” feature will detect an all-lowercase case-sensitive column
    name during reflect and add “quote=True” to the generated Column, so that proper
    quoting is maintained.
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”区分大小写”功能将在反射期间检测到全小写的区分大小写列名，并向生成的Column添加“quote=True”，以便保持适当的引用。
- en: misc
  id: totrans-1504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[major] [release]**'
  id: totrans-1505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[major] [release]**'
- en: For the full set of feature descriptions, see [https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html)
    . This document is a work in progress.
  id: totrans-1506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关功能描述的完整集合，请参阅[https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html)。此文档正在进行中。
- en: '**[major] [release]**'
  id: totrans-1507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[major] [release]**'
- en: All bug fixes and feature enhancements from the most recent 0.5 version and
    below are also included within 0.6.
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有最新0.5版本及以下的错误修复和功能增强也包含在0.6中。
- en: '**[major] [release]**'
  id: totrans-1509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[major] [release]**'
- en: Platforms targeted now include Python 2.4/2.5/2.6, Python 3.1, Jython2.5.
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在针对的平台包括Python 2.4/2.5/2.6，Python 3.1，Jython2.5。
- en: '**[engines]**'
  id: totrans-1511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: transaction isolation level may be specified with create_engine(… isolation_level=”…”);
    available on postgresql and sqlite.
  id: totrans-1512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用create_engine(… isolation_level=”…”)指定事务隔离级别；适用于postgresql和sqlite。
- en: 'References: [#443](https://www.sqlalchemy.org/trac/ticket/443)'
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#443](https://www.sqlalchemy.org/trac/ticket/443)
- en: '**[engines]**'
  id: totrans-1514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Connection has execution_options(), generative method which accepts keywords
    that affect how the statement is executed w.r.t. the DBAPI. Currently supports
    “stream_results”, causes psycopg2 to use a server side cursor for that statement,
    as well as “autocommit”, which is the new location for the “autocommit” option
    from select() and text(). select() and text() also have .execution_options() as
    well as ORM Query().
  id: totrans-1515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection 具有 execution_options()，生成方法接受影响语句在 DBAPI 方面执行方式的关键字。当前支持“stream_results”，导致
    psycopg2 使用服务器端游标执行该语句，以及“autocommit”，这是 select() 和 text() 中“autocommit”选项的新位置。select()
    和 text() 也有 .execution_options()，以及 ORM Query()。
- en: '**[engines]**'
  id: totrans-1516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: fixed the import for entrypoint-driven dialects to not rely upon silly tb_info
    trick to determine import error status.
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 entrypoint 驱动的方言导入，不再依赖愚蠢的 tb_info 技巧来确定导入错误状态。
- en: 'References: [#1630](https://www.sqlalchemy.org/trac/ticket/1630)'
  id: totrans-1518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1630](https://www.sqlalchemy.org/trac/ticket/1630)
- en: '**[engines]**'
  id: totrans-1519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: added first() method to ResultProxy, returns first row and closes result set
    immediately.
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 ResultProxy 添加了 first() 方法，返回第一行并立即关闭结果集。
- en: '**[engines]**'
  id: totrans-1521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: RowProxy objects are now pickleable, i.e. the object returned by result.fetchone(),
    result.fetchall() etc.
  id: totrans-1522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy 对象现在可以被 pickle 化，即 result.fetchone()、result.fetchall() 等返回的对象。
- en: '**[engines]**'
  id: totrans-1523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: RowProxy no longer has a close() method, as the row no longer maintains a reference
    to the parent. Call close() on the parent ResultProxy instead, or use autoclose.
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy 不再有 close() 方法，因为行不再保持对父级的引用。而是在父级 ResultProxy 上调用 close()，或者使用 autoclose。
- en: '**[engines]**'
  id: totrans-1525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: ResultProxy internals have been overhauled to greatly reduce method call counts
    when fetching columns. Can provide a large speed improvement (up to more than
    100%) when fetching large result sets. The improvement is larger when fetching
    columns that have no type-level processing applied and when using results as tuples
    (instead of as dictionaries). Many thanks to Elixir’s Gaëtan de Menten for this
    dramatic improvement !
  id: totrans-1526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy 内部已进行了大幅改进，大大减少了在提取列时的方法调用次数。在提取大型结果集时，可以提供大幅度的速度提升（高达 100%以上）。当提取没有应用类型级处理的列，并且将结果作为元组（而不是字典）时，提升效果更大。非常感谢
    Elixir 的 Gaëtan de Menten 带来了这一巨大的改进！
- en: 'References: [#1586](https://www.sqlalchemy.org/trac/ticket/1586)'
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1586](https://www.sqlalchemy.org/trac/ticket/1586)
- en: '**[engines]**'
  id: totrans-1528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Databases which rely upon postfetch of “last inserted id” to get at a generated
    sequence value (i.e. MySQL, MS-SQL) now work correctly when there is a composite
    primary key where the “autoincrement” column is not the first primary key column
    in the table.
  id: totrans-1529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 依赖于“最后插入 id”后获取生成序列值的数据库（例如 MySQL、MS-SQL）现在在表中“自增”列不是第一个主键列时，可以正确工作。
- en: '**[engines]**'
  id: totrans-1530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the last_inserted_ids() method has been renamed to the descriptor “inserted_primary_key”.
  id: totrans-1531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: last_inserted_ids() 方法已重命名为描述符“inserted_primary_key”。
- en: '**[engines]**'
  id: totrans-1532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: setting echo=False on create_engine() now sets the loglevel to WARN instead
    of NOTSET. This so that logging can be disabled for a particular engine even if
    logging for “sqlalchemy.engine” is enabled overall. Note that the default setting
    of “echo” is None.
  id: totrans-1533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 create_engine() 上设置 echo=False 现在将日志级别设置为 WARN 而不是 NOTSET。这样，即使总体上启用了“sqlalchemy.engine”的日志记录，也可以为特定引擎禁用日志记录。请注意，“echo”的默认设置是
    None。
- en: 'References: [#1554](https://www.sqlalchemy.org/trac/ticket/1554)'
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1554](https://www.sqlalchemy.org/trac/ticket/1554)
- en: '**[engines]**'
  id: totrans-1535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: ConnectionProxy now has wrapper methods for all transaction lifecycle events,
    including begin(), rollback(), commit() begin_nested(), begin_prepared(), prepare(),
    release_savepoint(), etc.
  id: totrans-1536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ConnectionProxy 现在为所有事务生命周期事件提供包装方法，包括 begin()、rollback()、commit()、begin_nested()、begin_prepared()、prepare()、release_savepoint()
    等。
- en: '**[engines]**'
  id: totrans-1537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection pool logging now uses both INFO and DEBUG log levels for logging.
    INFO is for major events such as invalidated connections, DEBUG for all the acquire/return
    logging. echo_pool can be False, None, True or “debug” the same way as echo works.
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池日志现在使用 INFO 和 DEBUG 日志级别进行记录。INFO 用于主要事件，如无效的连接，DEBUG 用于所有获取/返回日志记录。echo_pool
    可以是 False、None、True 或“debug”，与 echo 的工作方式相同。
- en: '**[engines]**'
  id: totrans-1539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: All pyodbc-dialects now support extra pyodbc-specific kw arguments ‘ansi’, ‘unicode_results’,
    ‘autocommit’.
  id: totrans-1540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有 pyodbc 方言现在支持额外的 pyodbc 特定关键字参数 'ansi'、'unicode_results'、'autocommit'。
- en: 'References: [#1621](https://www.sqlalchemy.org/trac/ticket/1621)'
  id: totrans-1541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1621](https://www.sqlalchemy.org/trac/ticket/1621)
- en: '**[engines]**'
  id: totrans-1542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the “threadlocal” engine has been rewritten and simplified and now supports
    SAVEPOINT operations.
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “threadlocal” 引擎已经重写和简化，现在支持 SAVEPOINT 操作。
- en: '**[engines]**'
  id: totrans-1544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: deprecated or removed
  id: totrans-1545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用或移除
- en: result.last_inserted_ids() is deprecated. Use result.inserted_primary_key
  id: totrans-1546
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: result.last_inserted_ids()已弃用。使用result.inserted_primary_key
- en: dialect.get_default_schema_name(connection) is now public via dialect.default_schema_name.
  id: totrans-1547
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: dialect.get_default_schema_name(connection)现在通过dialect.default_schema_name公开。
- en: the “connection” argument from engine.transaction() and engine.run_callable()
    is removed - Connection itself now has those methods. All four methods accept
    *args and **kwargs which are passed to the given callable, as well as the operating
    connection.
  id: totrans-1548
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从engine.transaction()和engine.run_callable()中删除了“connection”参数 - Connection本身现在具有这些方法。所有四种方法都接受*args和**kwargs，这些参数将传递给给定的可调用对象，以及操作连接。
- en: '**[reflection/inspection]**'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[反射/检查]**'
- en: Table reflection has been expanded and generalized into a new API called “sqlalchemy.engine.reflection.Inspector”.
    The Inspector object provides fine-grained information about a wide variety of
    schema information, with room for expansion, including table names, column names,
    view definitions, sequences, indexes, etc.
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表反射已扩展并泛化为一个名为“sqlalchemy.engine.reflection.Inspector”的新API。 Inspector对象提供有关各种模式信息的细粒度信息，包括表名、列名、视图定义、序列、索引等，还有扩展的空间。
- en: '**[reflection/inspection]**'
  id: totrans-1551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[反射/检查]**'
- en: Views are now reflectable as ordinary Table objects. The same Table constructor
    is used, with the caveat that “effective” primary and foreign key constraints
    aren’t part of the reflection results; these have to be specified explicitly if
    desired.
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图现在可以反映为普通的Table对象。使用相同的Table构造函数，但要注意“有效”的主键和外键约束不是反射结果的一部分；如果需要，必须显式指定这些约束。
- en: '**[reflection/inspection]**'
  id: totrans-1553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[反射/检查]**'
- en: The existing autoload=True system now uses Inspector underneath so that each
    dialect need only return “raw” data about tables and other objects - Inspector
    is the single place that information is compiled into Table objects so that consistency
    is at a maximum.
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现有的autoload=True系统现在在底层使用Inspector，因此每个方言只需返回关于表和其他对象的“原始”数据 - Inspector是将信息编译成Table对象的唯一位置，以便一致性最大化。
- en: '**[ddl]**'
  id: totrans-1555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ddl]**'
- en: 'the DDL system has been greatly expanded. the DDL() class now extends the more
    generic DDLElement(), which forms the basis of many new constructs:'
  id: totrans-1556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL系统已大大扩展。 DDL()类现在扩展了更通用的DDLElement()，后者构成了许多新构造的基础：
- en: CreateTable()
  id: totrans-1557
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateTable()
- en: ''
  id: totrans-1558
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1559
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropTable()
  id: totrans-1560
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropTable()
- en: ''
  id: totrans-1561
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1562
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: AddConstraint()
  id: totrans-1563
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: AddConstraint()
- en: ''
  id: totrans-1564
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1565
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropConstraint()
  id: totrans-1566
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropConstraint()
- en: ''
  id: totrans-1567
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1568
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: CreateIndex()
  id: totrans-1569
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateIndex()
- en: ''
  id: totrans-1570
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1571
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropIndex()
  id: totrans-1572
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropIndex()
- en: ''
  id: totrans-1573
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1574
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: CreateSequence()
  id: totrans-1575
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateSequence()
- en: ''
  id: totrans-1576
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1577
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropSequence()
  id: totrans-1578
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropSequence()
- en: ''
  id: totrans-1579
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: These support “on” and “execute-at()” just like plain DDL() does. User-defined
    DDLElement subclasses can be created and linked to a compiler using the sqlalchemy.ext.compiler
    extension.
  id: totrans-1580
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些支持“on”和“execute-at()”，就像普通的DDL()一样。用户定义的DDLElement子类可以被创建并链接到一个编译器，使用sqlalchemy.ext.compiler扩展。
- en: '**[ddl]**'
  id: totrans-1581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ddl]**'
- en: 'The signature of the “on” callable passed to DDL() and DDLElement() is revised
    as follows:'
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给DDL()和DDLElement()的“on”可调用的签名如下所示：
- en: ddl
  id: totrans-1583
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ddl
- en: ''
  id: totrans-1584
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the DDLElement object itself
  id: totrans-1585
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DDLElement对象本身
- en: ''
  id: totrans-1586
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: event
  id: totrans-1587
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 事件
- en: ''
  id: totrans-1588
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the string event name.
  id: totrans-1589
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 字符串事件名称。
- en: ''
  id: totrans-1590
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: target
  id: totrans-1591
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 目标
- en: ''
  id: totrans-1592
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: previously “schema_item”, the Table or MetaData object triggering the event.
  id: totrans-1593
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以前是“schema_item”，触发事件的Table或MetaData对象。
- en: ''
  id: totrans-1594
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: connection
  id: totrans-1595
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 连接
- en: ''
  id: totrans-1596
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the Connection object in use for the operation.
  id: totrans-1597
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于操作的Connection对象。
- en: ''
  id: totrans-1598
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**kw'
  id: totrans-1599
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**kw'
- en: ''
  id: totrans-1600
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: keyword arguments. In the case of MetaData before/after create/drop, the list
    of Table objects for which CREATE/DROP DDL is to be issued is passed as the kw
    argument “tables”. This is necessary for metadata-level DDL that is dependent
    on the presence of specific tables.
  id: totrans-1601
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数。在MetaData之前/之后创建/删除的情况下，要发出CREATE/DROP DDL的Table对象列表作为kw参数“tables”传递。这对于依赖于特定表存在的元数据级DDL是必要的。
- en: The “schema_item” attribute of DDL has been renamed to
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL的���schema_item”属性已更名为
- en: ”target”.
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”目标”。
- en: '**[dialect] [refactor]**'
  id: totrans-1604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: Dialect modules are now broken into database dialects plus DBAPI implementations.
    Connect URLs are now preferred to be specified using dialect+driver://…, i.e.
    “mysql+mysqldb://scott:tiger@localhost/test”. See the 0.6 documentation for examples.
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言模块现在分为数据库方言和DBAPI实现。现在更倾向于使用dialect+driver://…指定连接URL，即“mysql+mysqldb://scott:tiger@localhost/test”。有关示例，请参阅0.6文档。
- en: '**[dialect] [refactor]**'
  id: totrans-1606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: the setuptools entrypoint for external dialects is now called “sqlalchemy.dialects”.
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外部方言的setuptools入口现在称为“sqlalchemy.dialects”。
- en: '**[dialect] [refactor]**'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: the “owner” keyword argument is removed from Table. Use “schema” to represent
    any namespaces to be prepended to the table name.
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “owner” 关键字参数已从 Table 中移除。使用 “schema” 来表示要预置到表名前面的任何命名空间。
- en: '**[dialect] [refactor]**'
  id: totrans-1610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: server_version_info becomes a static attribute.
  id: totrans-1611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: server_version_info 变成了一个静态属性。
- en: '**[dialect] [refactor]**'
  id: totrans-1612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: dialects receive an initialize() event on initial connection to determine connection
    properties.
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言在初始连接时接收 initialize() 事件以确定连接属性。
- en: '**[dialect] [refactor]**'
  id: totrans-1614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: dialects receive a visit_pool event have an opportunity to establish pool listeners.
  id: totrans-1615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言接收 visit_pool 事件有机会建立池监听器。
- en: '**[dialect] [refactor]**'
  id: totrans-1616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: cached TypeEngine classes are cached per-dialect class instead of per-dialect.
  id: totrans-1617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缓存的 TypeEngine 类现在按方言类而不是按方言缓存。
- en: '**[dialect] [refactor]**'
  id: totrans-1618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: new UserDefinedType should be used as a base class for new types, which preserves
    the 0.5 behavior of get_col_spec().
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 UserDefinedType 应该作为新类型的基类，保留了 get_col_spec() 的 0.5 版本行为。
- en: '**[dialect] [refactor]**'
  id: totrans-1620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: The result_processor() method of all type classes now accepts a second argument
    “coltype”, which is the DBAPI type argument from cursor.description. This argument
    can help some types decide on the most efficient processing of result values.
  id: totrans-1621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有类型类的 result_processor() 方法现在接受第二个参数“coltype”，这是来自 cursor.description 的 DBAPI
    类型参数。这个参数可以帮助一些类型决定对结果值进行最有效的处理。
- en: '**[dialect] [refactor]**'
  id: totrans-1622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: Deprecated Dialect.get_params() removed.
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 废弃的 Dialect.get_params() 已移除。
- en: '**[dialect] [refactor]**'
  id: totrans-1624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: Dialect.get_rowcount() has been renamed to a descriptor “rowcount”, and calls
    cursor.rowcount directly. Dialects which need to hardwire a rowcount in for certain
    calls should override the method to provide different behavior.
  id: totrans-1625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Dialect.get_rowcount() 已重命名为描述符 “rowcount”，并直接调用 cursor.rowcount。需要为某些调用硬编码
    rowcount 的方言应该重写该方法以提供不同的行为。
- en: '**[dialect] [refactor]**'
  id: totrans-1626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: DefaultRunner and subclasses have been removed. The job of this object has been
    simplified and moved into ExecutionContext. Dialects which support sequences should
    add a fire_sequence() method to their execution context implementation.
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DefaultRunner 和其子类已被移除。这个对象的工作已经简化并移至 ExecutionContext 中。支持序列的方言应该在其执行上下文实现中添加一个
    fire_sequence() 方法。
- en: 'References: [#1566](https://www.sqlalchemy.org/trac/ticket/1566)'
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1566](https://www.sqlalchemy.org/trac/ticket/1566)
- en: '**[dialect] [refactor]**'
  id: totrans-1629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: Functions and operators generated by the compiler now use (almost) regular dispatch
    functions of the form “visit_<opname>” and “visit_<funcname>_fn” to provide customed
    processing. This replaces the need to copy the “functions” and “operators” dictionaries
    in compiler subclasses with straightforward visitor methods, and also allows compiler
    subclasses complete control over rendering, as the full _Function or _BinaryExpression
    object is passed in.
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器生成的函数和操作现在使用（几乎）常规的分发函数形式 “visit_<opname>” 和 “visit_<funcname>_fn” 来提供定制处理。这取代了在编译器子类中复制
    “functions” 和 “operators” 字典的需要，改为使用直接的访问方法，并且还允许编译器子类完全控制渲染，因为完整的 _Function 或
    _BinaryExpression 对象被传递进来。
- en: '**[firebird]**'
  id: totrans-1631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: the keys() method of RowProxy() now returns the result column names *normalized*
    to be SQLAlchemy case insensitive names. This means they will be lower case for
    case insensitive names, whereas the DBAPI would normally return them as UPPERCASE
    names. This allows row keys() to be compatible with further SQLAlchemy operations.
  id: totrans-1632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy() 的 keys() 方法现在返回 *规范化* 为 SQLAlchemy 不区分大小写名称的结果列名。这意味着对于不区分大小写的名称，它们将是小写的，而
    DBAPI 通常会将它们返回为大写名称。这使得行键() 可与进一步的 SQLAlchemy 操作兼容。
- en: '**[firebird]**'
  id: totrans-1633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的 dialect.initialize() 特性来设置版本相关的行为。
- en: '**[firebird]**'
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: ”case sensitivity” feature will detect an all-lowercase case-sensitive column
    name during reflect and add “quote=True” to the generated Column, so that proper
    quoting is maintained.
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “case sensitivity” 特性将在反射期间检测到全小写的区分大小写的列名，并在生成的 Column 中添加 “quote=True”，以便保持正确的引用。
- en: '**[types]**'
  id: totrans-1637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The construction of types within dialects has been totally overhauled. Dialects
    now define publicly available types as UPPERCASE names exclusively, and internal
    implementation types using underscore identifiers (i.e. are private). The system
    by which types are expressed in SQL and DDL has been moved to the compiler system.
    This has the effect that there are much fewer type objects within most dialects.
    A detailed document on this architecture for dialect authors is in lib/sqlalchemy/dialects/type_migration_guidelines.txt
    .
  id: totrans-1638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言内的类型构造已经彻底改写。方言现在只以大写名称定义公开可用的类型，使用下划线标识符（即私有）定义内部实现类型。类型在 SQL 和 DDL 中的表示方式已经移到编译器系统。这样做的效果是，在大多数方言中类型对象大大减少了。有关方言作者的此体系结构的详细文档位于
    lib/sqlalchemy/dialects/type_migration_guidelines.txt 中。
- en: '**[types]**'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Types no longer make any guesses as to default parameters. In particular, Numeric,
    Float, NUMERIC, FLOAT, DECIMAL don’t generate any length or scale unless specified.
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型不再对默认参数进行任何猜测。特别是，Numeric、Float、NUMERIC、FLOAT、DECIMAL 不会生成任何长度或标度，除非指定。
- en: '**[types]**'
  id: totrans-1641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: types.Binary is renamed to types.LargeBinary, it only produces BLOB, BYTEA,
    or a similar “long binary” type. New base BINARY and VARBINARY types have been
    added to access these MySQL/MS-SQL specific types in an agnostic way.
  id: totrans-1642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: types.Binary 被重命名为 types.LargeBinary，它只生成 BLOB、BYTEA 或类似的“长二进制”类型。新增了基础的 BINARY
    和 VARBINARY 类型，以便以一种不可知的方式访问这些 MySQL/MS-SQL 特定的类型。
- en: 'References: [#1664](https://www.sqlalchemy.org/trac/ticket/1664)'
  id: totrans-1643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1664](https://www.sqlalchemy.org/trac/ticket/1664)
- en: '**[types]**'
  id: totrans-1644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: String/Text/Unicode types now skip the unicode() check on each result column
    value if the dialect has detected the DBAPI as returning Python unicode objects
    natively. This check is issued on first connect using “SELECT CAST ‘some text’
    AS VARCHAR(10)” or equivalent, then checking if the returned object is a Python
    unicode. This allows vast performance increases for native-unicode DBAPIs, including
    pysqlite/sqlite3, psycopg2, and pg8000.
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串/文本/Unicode 类型现在如果方言检测到 DBAPI 原生返回 Python Unicode 对象，则会跳过对每个结果列值的 unicode()
    检查。在首次连接时使用“SELECT CAST 'some text' AS VARCHAR(10)”或等价物，然后检查返回的对象是否为 Python Unicode。这允许原生
    Unicode DBAPI（包括 pysqlite/sqlite3、psycopg2 和 pg8000）获得巨大的性能提升。
- en: '**[types]**'
  id: totrans-1646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: 'Most types result processors have been checked for possible speed improvements.
    Specifically, the following generic types have been optimized, resulting in varying
    speed improvements: Unicode, PickleType, Interval, TypeDecorator, Binary. Also
    the following dbapi-specific implementations have been improved: Time, Date and
    DateTime on Sqlite, ARRAY on PostgreSQL, Time on MySQL, Numeric(as_decimal=False)
    on MySQL, oursql and pypostgresql, DateTime on cx_oracle and LOB-based types on
    cx_oracle.'
  id: totrans-1647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数类型结果处理器都已经检查过可能的速度改进。具体而言，已经优化了以下通用类型，产生了不同程度的速度提升：Unicode、PickleType、Interval、TypeDecorator、Binary。此外，以下特定于
    dbapi 的实现已经得到改进：Sqlite 上的 Time、Date 和 DateTime，PostgreSQL 上的 ARRAY，MySQL 上的 Time，MySQL
    上的 Numeric（as_decimal=False），oursql 和 pypostgresql，cx_oracle 上的 DateTime 和基于 LOB
    的类型。
- en: '**[types]**'
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Reflection of types now returns the exact UPPERCASE type within types.py, or
    the UPPERCASE type within the dialect itself if the type is not a standard SQL
    type. This means reflection now returns more accurate information about reflected
    types.
  id: totrans-1649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在类型的反射会返回 types.py 中的确切大写类型，或者如果类型不是标准 SQL 类型，则返回方言本身的大写类型。这意味着反射现在返回有关反射类型的更准确的信息。
- en: '**[types]**'
  id: totrans-1650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Added a new Enum generic type. Enum is a schema-aware object to support databases
    which require specific DDL in order to use enum or equivalent; in the case of
    PG it handles the details of CREATE TYPE, and on other databases without native
    enum support will by generate VARCHAR + an inline CHECK constraint to enforce
    the enum.
  id: totrans-1651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 Enum 通用类型。Enum 是一个模式感知对象，支持需要特定 DDL 才能使用枚举或等效的数据库；在 PG 的情况下，它处理 CREATE
    TYPE 的详细信息，在其他没有原生枚举支持的数据库上，它将生成 VARCHAR + 内联 CHECK 约束以强制执行枚举。
- en: 'References: [#1109](https://www.sqlalchemy.org/trac/ticket/1109), [#1511](https://www.sqlalchemy.org/trac/ticket/1511)'
  id: totrans-1652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1109](https://www.sqlalchemy.org/trac/ticket/1109)，[#1511](https://www.sqlalchemy.org/trac/ticket/1511)
- en: '**[types]**'
  id: totrans-1653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The Interval type includes a “native” flag which controls if native INTERVAL
    types (postgresql + oracle) are selected if available, or not. “day_precision”
    and “second_precision” arguments are also added which propagate as appropriately
    to these native types. Related to.
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Interval 类型包括一个“native”标志，控制是否选择原生的 INTERVAL 类型（postgresql + oracle），如果可用，则选择。还添加了“day_precision”和“second_precision”参数，适当地传递到这些原生类型。相关联。
- en: 'References: [#1467](https://www.sqlalchemy.org/trac/ticket/1467)'
  id: totrans-1655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1467](https://www.sqlalchemy.org/trac/ticket/1467)
- en: '**[types]**'
  id: totrans-1656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The Boolean type, when used on a backend that doesn’t have native boolean support,
    will generate a CHECK constraint “col IN (0, 1)” along with the int/smallint-
    based column type. This can be switched off if desired with create_constraint=False.
    Note that MySQL has no native boolean *or* CHECK constraint support so this feature
    isn’t available on that platform.
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在不具有本地布尔支持的后端使用布尔类型时，将生成一个 CHECK 约束“col IN (0, 1)”以及基于 int/smallint 的列类型。如果需要，可以通过
    create_constraint=False 关闭此功能。请注意，MySQL 没有本地布尔或 CHECK 约束支持，因此该功能在该平台上不可用。
- en: 'References: [#1589](https://www.sqlalchemy.org/trac/ticket/1589)'
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1589](https://www.sqlalchemy.org/trac/ticket/1589)
- en: '**[types]**'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: PickleType now uses == for comparison of values when mutable=True, unless the
    “comparator” argument with a comparison function is specified to the type. Objects
    being pickled will be compared based on identity (which defeats the purpose of
    mutable=True) if __eq__() is not overridden or a comparison function is not provided.
  id: totrans-1660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 mutable=True 时，PickleType 现在使用 == 进行值比较，除非为该类型指定了带有比较函数的“comparator”参数。如果未重写
    __eq__() 或未提供比较函数，则将基于标识比较被 pickled 的对象（这会使 mutable=True 失去意义）。
- en: '**[types]**'
  id: totrans-1661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The default “precision” and “scale” arguments of Numeric and Float have been
    removed and now default to None. NUMERIC and FLOAT will be rendered with no numeric
    arguments by default unless these values are provided.
  id: totrans-1662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Numeric 和 Float 的默认“精度”和“标度”参数已被移除，现在默认为 None。NUMERIC 和 FLOAT 将默认不带任何数字参数呈现，除非提供这些值。
- en: '**[types]**'
  id: totrans-1663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: AbstractType.get_search_list() is removed - the games that was used for are
    no longer necessary.
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AbstractType.get_search_list() 已被移除 - 不再需要使用它的游戏。
- en: '**[types]**'
  id: totrans-1665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Added a generic BigInteger type, compiles to BIGINT or NUMBER(19).
  id: totrans-1666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个通用的 BigInteger 类型，编译为 BIGINT 或 NUMBER(19)。
- en: 'References: [#1125](https://www.sqlalchemy.org/trac/ticket/1125)'
  id: totrans-1667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1125](https://www.sqlalchemy.org/trac/ticket/1125)
- en: '**[types]**'
  id: totrans-1668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: sqlsoup has been overhauled to explicitly support an 0.5 style session, using
    autocommit=False, autoflush=True. Default behavior of SQLSoup now requires the
    usual usage of commit() and rollback(), which have been added to its interface.
    An explicit Session or scoped_session can be passed to the constructor, allowing
    these arguments to be overridden.
  id: totrans-1669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 已进行了全面改进，明确支持 0.5 风格的会话，使用 autocommit=False、autoflush=True。SQLSoup 的默认行为现在需要常规的
    commit() 和 rollback() 使用，这些方法已添加到其接口中。可以将显式的 Session 或 scoped_session 传递给构造函数，允许覆盖这些参数。
- en: '**[types]**'
  id: totrans-1670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: sqlsoup db.<sometable>.update() and delete() now call query(cls).update() and
    delete(), respectively.
  id: totrans-1671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup db.<sometable>.update() 和 delete() 现在分别调用 query(cls).update() 和 delete()。
- en: '**[types]**'
  id: totrans-1672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: sqlsoup now has execute() and connection(), which call upon the Session methods
    of those names, ensuring that the bind is in terms of the SqlSoup object’s bind.
  id: totrans-1673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 现在具有 execute() 和 connection()，这两个方法调用了具有相同名称的 Session 方法，确保绑定是基于 SqlSoup
    对象的绑定。
- en: '**[types]**'
  id: totrans-1674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: sqlsoup objects no longer have the ‘query’ attribute - it’s not needed for sqlsoup’s
    usage paradigm and it gets in the way of a column that is actually named ‘query’.
  id: totrans-1675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 对象不再具有 ‘query’ 属性 - 对于 sqlsoup 的使用范例而言，这并不需要，而且实际上会妨碍一个名为 ‘query’ 的列。
- en: '**[types]**'
  id: totrans-1676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The signature of the proxy_factory callable passed to association_proxy is now
    (lazy_collection, creator, value_attr, association_proxy), adding a fourth argument
    that is the parent AssociationProxy argument. Allows serializability and subclassing
    of the built in collections.
  id: totrans-1677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给 association_proxy 的 proxy_factory 可调用对象的签名现在是 (lazy_collection, creator,
    value_attr, association_proxy)，添加了第四个参数，即父 AssociationProxy 参数。允许内置集合的��列化和子类化。
- en: 'References: [#1259](https://www.sqlalchemy.org/trac/ticket/1259)'
  id: totrans-1678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1259](https://www.sqlalchemy.org/trac/ticket/1259)
- en: '**[types]**'
  id: totrans-1679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: association_proxy now has basic comparator methods .any(), .has(), .contains(),
    ==, !=, thanks to Scott Torborg.
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: association_proxy 现在具有基本的比较方法 .any()、.has()、.contains()、==、!=，感谢 Scott Torborg。
- en: 'References: [#1372](https://www.sqlalchemy.org/trac/ticket/1372)'
  id: totrans-1681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1372](https://www.sqlalchemy.org/trac/ticket/1372)
- en: 0.6.9
  id: totrans-1682
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.9
- en: 'Released: Sat May 05 2012'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年5月5日 星期六
- en: general
  id: totrans-1684
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-1685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般]**'
- en: Adjusted the “importlater” mechanism, which is used internally to resolve import
    cycles, such that the usage of __import__ is completed when the import of sqlalchemy
    or sqlalchemy.orm is done, thereby avoiding any usage of __import__ after the
    application starts new threads, fixes.
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了“importlater”机制，该机制在内部用于解决导入循环，使得在导入sqlalchemy或sqlalchemy.orm完成时使用__import__，从而避免在应用程序启动新线程后使用__import__，修复了问题。
- en: 'References: [#2279](https://www.sqlalchemy.org/trac/ticket/2279)'
  id: totrans-1687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2279](https://www.sqlalchemy.org/trac/ticket/2279)
- en: orm
  id: totrans-1688
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: fixed inappropriate evaluation of user-mapped object in a boolean context within
    query.get().
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在query.get()中对用户映射对象在布尔上下文中的不当评估。
- en: 'References: [#2310](https://www.sqlalchemy.org/trac/ticket/2310)'
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2310](https://www.sqlalchemy.org/trac/ticket/2310)
- en: '**[orm] [bug]**'
  id: totrans-1692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the error formatting raised when a tuple is inadvertently passed to session.query().
  id: totrans-1693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当意外传递元组给session.query()时引发的错误格式化问题。
- en: 'References: [#2297](https://www.sqlalchemy.org/trac/ticket/2297)'
  id: totrans-1694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2297](https://www.sqlalchemy.org/trac/ticket/2297)
- en: '**[orm]**'
  id: totrans-1695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the source clause used by query.join() would be inconsistent
    if against a column expression that combined multiple entities together.
  id: totrans-1696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即query.join()使用的源子句在针对将多个实体组合在一起的列表达式时会不一致。
- en: 'References: [#2197](https://www.sqlalchemy.org/trac/ticket/2197)'
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2197](https://www.sqlalchemy.org/trac/ticket/2197)
- en: '**[orm]**'
  id: totrans-1698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug apparent only in Python 3 whereby sorting of persistent + pending
    objects during flush would produce an illegal comparison, if the persistent object
    primary key is not a single integer.
  id: totrans-1699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了仅在Python 3中显现的错误，即在flush期间对持久性+挂起对象进行排序会产生非法比较，如果持久性对象的主键不是单个整数。
- en: 'References: [#2228](https://www.sqlalchemy.org/trac/ticket/2228)'
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2228](https://www.sqlalchemy.org/trac/ticket/2228)
- en: '**[orm]**'
  id: totrans-1701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where query.join() + aliased=True from a joined-inh structure to itself
    on relationship() with join condition on the child table would convert the lead
    entity into the joined one inappropriately.
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在relationship()上使用join条件将查询.join() + aliased=True从一个连接到自身的连接结构时，会不适当地将主实体转换为连接实体。
- en: 'References: [#2234](https://www.sqlalchemy.org/trac/ticket/2234)'
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2234](https://www.sqlalchemy.org/trac/ticket/2234)
- en: '**[orm]**'
  id: totrans-1704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper.order_by attribute would be ignored in the “inner”
    query within a subquery eager load. .
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即mapper.order_by属性在子查询急加载中的“内部”查询中将被忽略。
- en: 'References: [#2287](https://www.sqlalchemy.org/trac/ticket/2287)'
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2287](https://www.sqlalchemy.org/trac/ticket/2287)
- en: '**[orm]**'
  id: totrans-1707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if a mapped class redefined __hash__() or __eq__() to something
    non-standard, which is a supported use case as SQLA should never consult these,
    the methods would be consulted if the class was part of a “composite” (i.e. non-single-entity)
    result set.
  id: totrans-1708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果映射类重新定义了__hash__()或__eq__()为非标准内容，这是一个受支持的用例，因为SQLA不应该查询这些内容，如果类是“composite”（即非单实体）结果集的一部分，则会查询这些方法。
- en: 'References: [#2215](https://www.sqlalchemy.org/trac/ticket/2215)'
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2215](https://www.sqlalchemy.org/trac/ticket/2215)
- en: '**[orm]**'
  id: totrans-1710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed subtle bug that caused SQL to blow up if: column_property() against subquery
    + joinedload + LIMIT + order by the column property() occurred. .'
  id: totrans-1711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个微妙的错误，即如果发生：对子查询的column_property() + joinedload + LIMIT +按列属性排序，则会导致SQL崩溃。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-1712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[orm]**'
  id: totrans-1713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The join condition produced by with_parent as well as when using a “dynamic”
    relationship against a parent will generate unique bindparams, rather than incorrectly
    repeating the same bindparam. .
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由with_parent生成的连接条件以及针对父级使用“dynamic”关系时，将生成唯一的绑定参数，而不是错误地重复相同的绑定参数。
- en: 'References: [#2207](https://www.sqlalchemy.org/trac/ticket/2207)'
  id: totrans-1715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2207](https://www.sqlalchemy.org/trac/ticket/2207)
- en: '**[orm]**'
  id: totrans-1716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the “no statement condition” assertion in Query which would attempt
    to raise if a generative method were called after from_statement() were called..
  id: totrans-1717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在查询中“无语句条件”断言的问题，该问题会在调用from_statement()后调用生成方法时尝试引发异常。
- en: 'References: [#2199](https://www.sqlalchemy.org/trac/ticket/2199)'
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2199](https://www.sqlalchemy.org/trac/ticket/2199)
- en: '**[orm]**'
  id: totrans-1719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Cls.column.collate(“some collation”) now works.
  id: totrans-1720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Cls.column.collate(“some collation”) 现在可以正常工作。
- en: 'References: [#1776](https://www.sqlalchemy.org/trac/ticket/1776)'
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1776](https://www.sqlalchemy.org/trac/ticket/1776)
- en: examples
  id: totrans-1722
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-1723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Adjusted dictlike-polymorphic.py example to apply the CAST such that it works
    on PG, other databases.
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了dictlike-polymorphic.py示例，以便在PG和其他数据库上运行CAST。
- en: 'References: [#2266](https://www.sqlalchemy.org/trac/ticket/2266)'
  id: totrans-1725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2266](https://www.sqlalchemy.org/trac/ticket/2266)
- en: engine
  id: totrans-1726
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-1727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Backported the fix for introduced in 0.7.4, which ensures that the connection
    is in a valid state before attempting to call rollback()/prepare()/release() on
    savepoint and two-phase transactions.
  id: totrans-1728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回溯了在0.7.4中引入的修复，确保在尝试在保存点和两阶段事务上调用rollback()/prepare()/release()之前，连接处于有效状态。
- en: 'References: [#2317](https://www.sqlalchemy.org/trac/ticket/2317)'
  id: totrans-1729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2317](https://www.sqlalchemy.org/trac/ticket/2317)
- en: sql
  id: totrans-1730
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed two subtle bugs involving column correspondence in a selectable, one with
    the same labeled subquery repeated, the other when the label has been “grouped”
    and loses itself. Affects.
  id: totrans-1732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在可选择项中涉及列对应的两个微妙错误，一个是重复的具有相同标记的子查询，另一个是当标记已被“分组”并丢失自身时。影响。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-1733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[sql]**'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby “warn on unicode” flag would get set for the String type when
    used with certain dialects. This bug is not in 0.7.
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些方言中与String类型一起使用时“warn on unicode”标志会被设置的bug。此bug不在0.7中。
- en: '**[sql]**'
  id: totrans-1736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby with_only_columns() method of Select would fail if a selectable
    were passed.. However, the FROM behavior is still incorrect here, so you need
    0.7 in any case for this use case to be usable.
  id: totrans-1737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Select的with_only_columns()方法如果传递了可选择项，则会失败的错误。但是，在这里FROM的行为仍然不正确，因此无论如何，您需要0.7才能使此用例可用。
- en: 'References: [#2270](https://www.sqlalchemy.org/trac/ticket/2270)'
  id: totrans-1738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2270](https://www.sqlalchemy.org/trac/ticket/2270)
- en: schema
  id: totrans-1739
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-1740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added an informative error message when ForeignKeyConstraint refers to a column
    name in the parent that is not found.
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ForeignKeyConstraint引用父级中未找到的列名时，添加了一个信息性错误消息。
- en: postgresql
  id: totrans-1742
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug related to whereby the same modified index behavior in PG 9 affected
    primary key reflection on a renamed column..
  id: totrans-1744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与PG 9中相同的修改索引行为影响重命名列上的主键反射的bug。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-1745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: mysql
  id: totrans-1746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed OurSQL dialect to use ansi-neutral quote symbol “’” for XA commands instead
    of ‘”’. .
  id: totrans-1748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了OurSQL方言在XA命令中使用ansi-neutral引号符“’”而不是‘”’的bug。
- en: 'References: [#2186](https://www.sqlalchemy.org/trac/ticket/2186)'
  id: totrans-1749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2186](https://www.sqlalchemy.org/trac/ticket/2186)
- en: '**[mysql]**'
  id: totrans-1750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a CREATE TABLE will put the COLLATE option after CHARSET, which appears to be
    part of MySQL’s arbitrary rules regarding if it will actually work or not.
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CREATE TABLE将在CHARSET之后放置COLLATE选项，这似乎是MySQL关于它是否实际工作的任意规则的一部分。
- en: 'References: [#2225](https://www.sqlalchemy.org/trac/ticket/2225)'
  id: totrans-1752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2225](https://www.sqlalchemy.org/trac/ticket/2225)
- en: mssql
  id: totrans-1753
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Decode incoming values when retrieving list of index names and the names of
    columns within those indexes.
  id: totrans-1755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在检索索引名称列表和这些索引中的列名称时解码传入值。
- en: 'References: [#2269](https://www.sqlalchemy.org/trac/ticket/2269)'
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2269](https://www.sqlalchemy.org/trac/ticket/2269)
- en: oracle
  id: totrans-1757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-00028 to disconnect codes, use cx_oracle _Error.code to get at the
    code,.
  id: totrans-1759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-00028添加到断开代码中，使用cx_oracle _Error.code来获取代码。
- en: 'References: [#2200](https://www.sqlalchemy.org/trac/ticket/2200)'
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2200](https://www.sqlalchemy.org/trac/ticket/2200)
- en: '**[oracle]**'
  id: totrans-1761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: repaired the oracle.RAW type which did not generate the correct DDL.
  id: totrans-1762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未生成正确DDL的oracle.RAW类型。
- en: 'References: [#2220](https://www.sqlalchemy.org/trac/ticket/2220)'
  id: totrans-1763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2220](https://www.sqlalchemy.org/trac/ticket/2220)
- en: '**[oracle]**'
  id: totrans-1764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added CURRENT to reserved word list.
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将CURRENT添加到保留字列表中。
- en: 'References: [#2212](https://www.sqlalchemy.org/trac/ticket/2212)'
  id: totrans-1766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2212](https://www.sqlalchemy.org/trac/ticket/2212)
- en: general
  id: totrans-1767
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-1768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Adjusted the “importlater” mechanism, which is used internally to resolve import
    cycles, such that the usage of __import__ is completed when the import of sqlalchemy
    or sqlalchemy.orm is done, thereby avoiding any usage of __import__ after the
    application starts new threads, fixes.
  id: totrans-1769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了“importlater”机制，该机制在内部用于解决导入循环，使得在导入sqlalchemy或sqlalchemy.orm之后完成__import__的使用，从而避免在应用程序启动新线程后使用__import__，���复了。
- en: 'References: [#2279](https://www.sqlalchemy.org/trac/ticket/2279)'
  id: totrans-1770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2279](https://www.sqlalchemy.org/trac/ticket/2279)
- en: orm
  id: totrans-1771
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-1772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: fixed inappropriate evaluation of user-mapped object in a boolean context within
    query.get().
  id: totrans-1773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在query.get()中对用户映射对象进行布尔上下文中不适当评估的bug。
- en: 'References: [#2310](https://www.sqlalchemy.org/trac/ticket/2310)'
  id: totrans-1774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2310](https://www.sqlalchemy.org/trac/ticket/2310)
- en: '**[orm] [bug]**'
  id: totrans-1775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the error formatting raised when a tuple is inadvertently passed to session.query().
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当不小心将元组传递给session.query()时引发的错误格式化。
- en: 'References: [#2297](https://www.sqlalchemy.org/trac/ticket/2297)'
  id: totrans-1777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2297](https://www.sqlalchemy.org/trac/ticket/2297)
- en: '**[orm]**'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the source clause used by query.join() would be inconsistent
    if against a column expression that combined multiple entities together.
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.join()使用的源子句如果针对将多个实体组合在一起的列表达式，则会不一致的bug。
- en: 'References: [#2197](https://www.sqlalchemy.org/trac/ticket/2197)'
  id: totrans-1780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2197](https://www.sqlalchemy.org/trac/ticket/2197)
- en: '**[orm]**'
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug apparent only in Python 3 whereby sorting of persistent + pending
    objects during flush would produce an illegal comparison, if the persistent object
    primary key is not a single integer.
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了仅在Python 3中显现的bug，即在flush期间对持久性+挂起对象进行排序会产生非法比较，如果持久性对象的主键不是单个整数。
- en: 'References: [#2228](https://www.sqlalchemy.org/trac/ticket/2228)'
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2228](https://www.sqlalchemy.org/trac/ticket/2228)
- en: '**[orm]**'
  id: totrans-1784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where query.join() + aliased=True from a joined-inh structure to itself
    on relationship() with join condition on the child table would convert the lead
    entity into the joined one inappropriately.
  id: totrans-1785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当从一个关系()上的joined-inh结构到自身的query.join() + aliased=True，并且关系()上的连接条件在子表上时，会不适当地将主实体转换为连接实体。
- en: 'References: [#2234](https://www.sqlalchemy.org/trac/ticket/2234)'
  id: totrans-1786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2234](https://www.sqlalchemy.org/trac/ticket/2234)
- en: '**[orm]**'
  id: totrans-1787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper.order_by attribute would be ignored in the “inner”
    query within a subquery eager load. .
  id: totrans-1788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mapper.order_by属性在子查询急加载中的“内部”查询中将被忽略的bug。
- en: 'References: [#2287](https://www.sqlalchemy.org/trac/ticket/2287)'
  id: totrans-1789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2287](https://www.sqlalchemy.org/trac/ticket/2287)
- en: '**[orm]**'
  id: totrans-1790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if a mapped class redefined __hash__() or __eq__() to something
    non-standard, which is a supported use case as SQLA should never consult these,
    the methods would be consulted if the class was part of a “composite” (i.e. non-single-entity)
    result set.
  id: totrans-1791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果一个映射类重新定义了__hash__()或__eq__()为非标准内容，这是一个支持的用例，因为SQLA不应该查询这些方法，但如果该类是“复合”（即非单实体）结果集的一部分，则这些方法将被查询。
- en: 'References: [#2215](https://www.sqlalchemy.org/trac/ticket/2215)'
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2215](https://www.sqlalchemy.org/trac/ticket/2215)
- en: '**[orm]**'
  id: totrans-1793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed subtle bug that caused SQL to blow up if: column_property() against subquery
    + joinedload + LIMIT + order by the column property() occurred. .'
  id: totrans-1794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个微妙的bug，导致如果：column_property()针对子查询+joinedload+LIMIT+按列属性()排序，则SQL会崩溃。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-1795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[orm]**'
  id: totrans-1796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The join condition produced by with_parent as well as when using a “dynamic”
    relationship against a parent will generate unique bindparams, rather than incorrectly
    repeating the same bindparam. .
  id: totrans-1797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由with_parent生成的连接条件以及使用“动态”关系针对父级时将生成唯一的bindparams，而不是错误地重复相同的bindparam。
- en: 'References: [#2207](https://www.sqlalchemy.org/trac/ticket/2207)'
  id: totrans-1798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2207](https://www.sqlalchemy.org/trac/ticket/2207)
- en: '**[orm]**'
  id: totrans-1799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the “no statement condition” assertion in Query which would attempt
    to raise if a generative method were called after from_statement() were called..
  id: totrans-1800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中的“无语句条件”断言，如果在调用from_statement()之后调用生成方法，则会尝试引发异常。
- en: 'References: [#2199](https://www.sqlalchemy.org/trac/ticket/2199)'
  id: totrans-1801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2199](https://www.sqlalchemy.org/trac/ticket/2199)
- en: '**[orm]**'
  id: totrans-1802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Cls.column.collate(“some collation”) now works.
  id: totrans-1803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Cls.column.collate(“some collation”)现��可以工作。
- en: 'References: [#1776](https://www.sqlalchemy.org/trac/ticket/1776)'
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1776](https://www.sqlalchemy.org/trac/ticket/1776)
- en: examples
  id: totrans-1805
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-1806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Adjusted dictlike-polymorphic.py example to apply the CAST such that it works
    on PG, other databases.
  id: totrans-1807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了dictlike-polymorphic.py示例，以应用CAST，使其在PG和其他数据库上运行。
- en: 'References: [#2266](https://www.sqlalchemy.org/trac/ticket/2266)'
  id: totrans-1808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2266](https://www.sqlalchemy.org/trac/ticket/2266)
- en: engine
  id: totrans-1809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-1810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Backported the fix for introduced in 0.7.4, which ensures that the connection
    is in a valid state before attempting to call rollback()/prepare()/release() on
    savepoint and two-phase transactions.
  id: totrans-1811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回溯了在0.7.4中引入的修复，确保在尝试在保存点和两阶段事务上调用rollback()/prepare()/release()之前，连接处于有效状态。
- en: 'References: [#2317](https://www.sqlalchemy.org/trac/ticket/2317)'
  id: totrans-1812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2317](https://www.sqlalchemy.org/trac/ticket/2317)
- en: sql
  id: totrans-1813
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed two subtle bugs involving column correspondence in a selectable, one with
    the same labeled subquery repeated, the other when the label has been “grouped”
    and loses itself. Affects.
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个关于可选列的微妙 bug，一个是同一标记的子查询重复出现，另一个是当标签被“分组”且失去自身时。影响到。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-1816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[sql]**'
  id: totrans-1817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby “warn on unicode” flag would get set for the String type when
    used with certain dialects. This bug is not in 0.7.
  id: totrans-1818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当与某些方言一起使用时，“warn on unicode” 标志会设置为 String 类型。这个 bug 不在 0.7 中。
- en: '**[sql]**'
  id: totrans-1819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby with_only_columns() method of Select would fail if a selectable
    were passed.. However, the FROM behavior is still incorrect here, so you need
    0.7 in any case for this use case to be usable.
  id: totrans-1820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当可选列被传递时，Select 的 with_only_columns() 方法会失败。但是，这里的 FROM 行为仍然不正确，因此无论如何您都需要
    0.7 才能使用这种用法。
- en: 'References: [#2270](https://www.sqlalchemy.org/trac/ticket/2270)'
  id: totrans-1821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2270](https://www.sqlalchemy.org/trac/ticket/2270)
- en: schema
  id: totrans-1822
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-1823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added an informative error message when ForeignKeyConstraint refers to a column
    name in the parent that is not found.
  id: totrans-1824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 ForeignKeyConstraint 引用在父级中找不到的列名时，添加了一条信息性错误消息。
- en: postgresql
  id: totrans-1825
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug related to whereby the same modified index behavior in PG 9 affected
    primary key reflection on a renamed column..
  id: totrans-1827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个与 PG 9 中相同的修改索引行为相关的 bug，该 bug 影响了对重命名列上的主键反射。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-1828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: mysql
  id: totrans-1829
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed OurSQL dialect to use ansi-neutral quote symbol “’” for XA commands instead
    of ‘”’. .
  id: totrans-1831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 OurSQL 方言，在 XA 命令中使用了 ANSI 中性的引号符“’”而不是‘”’。
- en: 'References: [#2186](https://www.sqlalchemy.org/trac/ticket/2186)'
  id: totrans-1832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2186](https://www.sqlalchemy.org/trac/ticket/2186)
- en: '**[mysql]**'
  id: totrans-1833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a CREATE TABLE will put the COLLATE option after CHARSET, which appears to be
    part of MySQL’s arbitrary rules regarding if it will actually work or not.
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CREATE TABLE 将在 CHARSET 之后放置 COLLATE 选项，这似乎是 MySQL 关于其是否实际工作的任意规则的一部分。
- en: 'References: [#2225](https://www.sqlalchemy.org/trac/ticket/2225)'
  id: totrans-1835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2225](https://www.sqlalchemy.org/trac/ticket/2225)
- en: mssql
  id: totrans-1836
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Decode incoming values when retrieving list of index names and the names of
    columns within those indexes.
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解码传入值时，检索索引名称列表及这些索引内列的名称。
- en: 'References: [#2269](https://www.sqlalchemy.org/trac/ticket/2269)'
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2269](https://www.sqlalchemy.org/trac/ticket/2269)
- en: oracle
  id: totrans-1840
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-00028 to disconnect codes, use cx_oracle _Error.code to get at the
    code,.
  id: totrans-1842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ORA-00028 添加到断开连接代码中，使用 cx_oracle _Error.code 获取代码。
- en: 'References: [#2200](https://www.sqlalchemy.org/trac/ticket/2200)'
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2200](https://www.sqlalchemy.org/trac/ticket/2200)
- en: '**[oracle]**'
  id: totrans-1844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: repaired the oracle.RAW type which did not generate the correct DDL.
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未生成正确 DDL 的 oracle.RAW 类型。
- en: 'References: [#2220](https://www.sqlalchemy.org/trac/ticket/2220)'
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2220](https://www.sqlalchemy.org/trac/ticket/2220)
- en: '**[oracle]**'
  id: totrans-1847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added CURRENT to reserved word list.
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 CURRENT 添加到保留字列表中。
- en: 'References: [#2212](https://www.sqlalchemy.org/trac/ticket/2212)'
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2212](https://www.sqlalchemy.org/trac/ticket/2212)
- en: 0.6.8
  id: totrans-1850
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.8
- en: 'Released: Sun Jun 05 2011'
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011 年 6 月 5 日
- en: orm
  id: totrans-1852
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Calling query.get() against a column-based entity is invalid, this condition
    now raises a deprecation warning.
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对基于列的实体调用 query.get() 是无效的，现在会引发弃用警告。
- en: 'References: [#2144](https://www.sqlalchemy.org/trac/ticket/2144)'
  id: totrans-1855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2144](https://www.sqlalchemy.org/trac/ticket/2144)
- en: '**[orm]**'
  id: totrans-1856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a non_primary mapper will inherit the _identity_class of the primary mapper.
    This so that a non_primary established against a class that’s normally in an inheritance
    mapping will produce results that are identity-map compatible with that of the
    primary mapper
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主映射器将继承主映射器的 _identity_class。这样，针对通常处于继承映射中的类建立的非主映射器将产生与主映射器兼容的标识映射结果。
- en: 'References: [#2151](https://www.sqlalchemy.org/trac/ticket/2151)'
  id: totrans-1858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2151](https://www.sqlalchemy.org/trac/ticket/2151)
- en: '**[orm]**'
  id: totrans-1859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Backported 0.7’s identity map implementation, which does not use a mutex around
    removal. This as some users were still getting deadlocks despite the adjustments
    in 0.6.7; the 0.7 approach that doesn’t use a mutex does not appear to produce
    “dictionary changed size” issues, the original rationale for the mutex.
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回溯到了 0.7 的标识映射实现，它在删除时不使用互斥锁。因为一些用户仍然在 0.6.7 中进行了调整，尽管这个版本没有使用互斥锁的 0.7 方法似乎不会产生“字典更改大小”问题，这是原始互斥锁的理由。
- en: 'References: [#2148](https://www.sqlalchemy.org/trac/ticket/2148)'
  id: totrans-1861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2148](https://www.sqlalchemy.org/trac/ticket/2148)
- en: '**[orm]**'
  id: totrans-1862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the error message emitted for “can’t execute syncrule for destination
    column ‘q’; mapper ‘X’ does not map this column” to reference the correct mapper.
    .
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法为目标列‘q’执行syncrule；mapper‘X’未映射此列”发出的错误消息，以引用正确的mapper。
- en: 'References: [#2163](https://www.sqlalchemy.org/trac/ticket/2163)'
  id: totrans-1864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2163](https://www.sqlalchemy.org/trac/ticket/2163)
- en: '**[orm]**'
  id: totrans-1865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where determination of “self referential” relationship would fail
    with no workaround for joined-inh subclass related to itself, or joined-inh subclass
    related to a subclass of that with no cols in the sub-sub class in the join condition.
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“自引用”关系的确定失败的bug，对于没有解决方案的joined-inh子类与自身相关联，或者与没有子类中的列在连接条件中的子子类相关联。
- en: 'References: [#2149](https://www.sqlalchemy.org/trac/ticket/2149)'
  id: totrans-1867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2149](https://www.sqlalchemy.org/trac/ticket/2149)
- en: '**[orm]**'
  id: totrans-1868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper() will ignore non-configured foreign keys to unrelated tables when determining
    inherit condition between parent and child class. This is equivalent to behavior
    already applied to declarative. Note that 0.7 has a more comprehensive solution
    to this, altering how join() itself determines an FK error.
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定父类和子类之间的继承条件时，mapper()将忽略与无关表的未配置外键。这等同于已应用于declarative的行为。请注意，0.7版本对此有更全面的解决方案，改变了join()本身如何确定FK错误。
- en: 'References: [#2153](https://www.sqlalchemy.org/trac/ticket/2153)'
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2153](https://www.sqlalchemy.org/trac/ticket/2153)
- en: '**[orm]**'
  id: totrans-1871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper mapped to an anonymous alias would fail if logging
    were used, due to unescaped % sign in the alias name.
  id: totrans-1872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果mapper映射到匿名别名，则在使用日志记录时会失败的bug，因为别名中有未转义的%符号。
- en: 'References: [#2171](https://www.sqlalchemy.org/trac/ticket/2171)'
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2171](https://www.sqlalchemy.org/trac/ticket/2171)
- en: '**[orm]**'
  id: totrans-1874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modify the text of the message which occurs when the “identity” key isn’t detected
    on flush, to include the common cause that the Column isn’t set up to detect auto-increment
    correctly;.
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了当在flush时未检测到“identity”键时出现的消息文本，以包括常见原因，即Column未设置正确检测自增。
- en: 'References: [#2170](https://www.sqlalchemy.org/trac/ticket/2170)'
  id: totrans-1876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2170](https://www.sqlalchemy.org/trac/ticket/2170)
- en: '**[orm]**'
  id: totrans-1877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where transaction-level “deleted” collection wouldn’t be cleared of
    expunged states, raising an error if they later became transient.
  id: totrans-1878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事务级别的“已删除”集合不会在后来变为瞬态时清除已删除状态的错误，导致后续出现错误。
- en: 'References: [#2182](https://www.sqlalchemy.org/trac/ticket/2182)'
  id: totrans-1879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2182](https://www.sqlalchemy.org/trac/ticket/2182)
- en: engine
  id: totrans-1880
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-1881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Adjusted the __contains__() method of a RowProxy result row such that no exception
    throw is generated internally; NoSuchColumnError() also will generate its message
    regardless of whether or not the column construct can be coerced to a string..
  id: totrans-1882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了RowProxy结果行的__contains__()方法，以便在内部不生成异常抛出；无论列构造是否可以强制转换为字符串，NoSuchColumnError()也将生成其消息。
- en: 'References: [#2178](https://www.sqlalchemy.org/trac/ticket/2178)'
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2178](https://www.sqlalchemy.org/trac/ticket/2178)
- en: sql
  id: totrans-1884
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby if FetchedValue was passed to column server_onupdate, it would
    not have its parent “column” assigned, added test coverage for all column default
    assignment patterns.
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果将FetchedValue传递给column server_onupdate，则其父“column”不会被分配的bug，为所有列默认分配模式添加了测试覆盖。
- en: 'References: [#2147](https://www.sqlalchemy.org/trac/ticket/2147)'
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2147](https://www.sqlalchemy.org/trac/ticket/2147)
- en: '**[sql]**'
  id: totrans-1888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby nesting a label of a select() with another label in it would
    produce incorrect exported columns. Among other things this would break an ORM
    column_property() mapping against another column_property(). .
  id: totrans-1889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了嵌套一个带有另一个标签的select()的标签会产生不正确导出列的错误的bug。其中之一是这会破坏对另一个column_property()的ORM
    column_property()映射。
- en: 'References: [#2167](https://www.sqlalchemy.org/trac/ticket/2167)'
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2167](https://www.sqlalchemy.org/trac/ticket/2167)
- en: postgresql
  id: totrans-1891
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug affecting PG 9 whereby index reflection would fail if against a column
    whose name had changed. .
  id: totrans-1893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响PG 9的bug，即反射索引会失败，如果反射的列名已更改。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141)'
  id: totrans-1894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141)
- en: '**[postgresql]**'
  id: totrans-1895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Some unit test fixes regarding numeric arrays, MATCH operator. A potential floating-point
    inaccuracy issue was fixed, and certain tests of the MATCH operator only execute
    within an EN-oriented locale for now. .
  id: totrans-1896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于数字数组、MATCH运算符的一些单元测试问题。修复了潜在的浮点不精确性问题，并且目前只有在EN定向区域设置内才执行MATCH运算符的某些测试。.
- en: 'References: [#2175](https://www.sqlalchemy.org/trac/ticket/2175)'
  id: totrans-1897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2175](https://www.sqlalchemy.org/trac/ticket/2175)
- en: mssql
  id: totrans-1898
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug in MSSQL dialect whereby the aliasing applied to a schema-qualified
    table would leak into enclosing select statements.
  id: totrans-1900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MSSQL方言中的一个bug，即应用于模式限定表的别名会泄漏到封闭的select语句中。
- en: 'References: [#2169](https://www.sqlalchemy.org/trac/ticket/2169)'
  id: totrans-1901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2169](https://www.sqlalchemy.org/trac/ticket/2169)
- en: '**[mssql]**'
  id: totrans-1902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug whereby DATETIME2 type would fail on the “adapt” step when used in
    result sets or bound parameters. This issue is not in 0.7.
  id: totrans-1903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在结果集或绑定参数中使用DATETIME2类型时，在“适应”步骤中会失败。这个问题不在0.7中。
- en: 'References: [#2159](https://www.sqlalchemy.org/trac/ticket/2159)'
  id: totrans-1904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2159](https://www.sqlalchemy.org/trac/ticket/2159)
- en: orm
  id: totrans-1905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Calling query.get() against a column-based entity is invalid, this condition
    now raises a deprecation warning.
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对基于列的实体调用query.get()是无效的，现在会引发弃用警告。
- en: 'References: [#2144](https://www.sqlalchemy.org/trac/ticket/2144)'
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2144](https://www.sqlalchemy.org/trac/ticket/2144)
- en: '**[orm]**'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a non_primary mapper will inherit the _identity_class of the primary mapper.
    This so that a non_primary established against a class that’s normally in an inheritance
    mapping will produce results that are identity-map compatible with that of the
    primary mapper
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主映射器将继承主映射器的_identity_class。这样，针对通常处于继承映射中的类建立的非主映射器将产生与主映射器的身份映射兼容的结果。
- en: 'References: [#2151](https://www.sqlalchemy.org/trac/ticket/2151)'
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2151](https://www.sqlalchemy.org/trac/ticket/2151)
- en: '**[orm]**'
  id: totrans-1912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Backported 0.7’s identity map implementation, which does not use a mutex around
    removal. This as some users were still getting deadlocks despite the adjustments
    in 0.6.7; the 0.7 approach that doesn’t use a mutex does not appear to produce
    “dictionary changed size” issues, the original rationale for the mutex.
  id: totrans-1913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回溯了0.7的身份映射实现，不使用互斥锁进行删除。这是因为一些用户尽管在0.6.7中进行了调整，仍然出现死锁；不使用互斥锁的0.7方法似乎不会产生“字典更改大小”问题，这是互斥锁的最初原因。
- en: 'References: [#2148](https://www.sqlalchemy.org/trac/ticket/2148)'
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2148](https://www.sqlalchemy.org/trac/ticket/2148)
- en: '**[orm]**'
  id: totrans-1915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the error message emitted for “can’t execute syncrule for destination
    column ‘q’; mapper ‘X’ does not map this column” to reference the correct mapper.
    .
  id: totrans-1916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法为目标列‘q’执行syncrule；映射器‘X’未映射此列”的错误消息，以引用正确的映射器。。
- en: 'References: [#2163](https://www.sqlalchemy.org/trac/ticket/2163)'
  id: totrans-1917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2163](https://www.sqlalchemy.org/trac/ticket/2163)
- en: '**[orm]**'
  id: totrans-1918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where determination of “self referential” relationship would fail
    with no workaround for joined-inh subclass related to itself, or joined-inh subclass
    related to a subclass of that with no cols in the sub-sub class in the join condition.
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在没有解决方案的情况下，确定“自引用”关系会失败，或者与自身相关的joined-inh子类，或者与没有在子子类中的列在连接条件中的子类相关的joined-inh子类。
- en: 'References: [#2149](https://www.sqlalchemy.org/trac/ticket/2149)'
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2149](https://www.sqlalchemy.org/trac/ticket/2149)
- en: '**[orm]**'
  id: totrans-1921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper() will ignore non-configured foreign keys to unrelated tables when determining
    inherit condition between parent and child class. This is equivalent to behavior
    already applied to declarative. Note that 0.7 has a more comprehensive solution
    to this, altering how join() itself determines an FK error.
  id: totrans-1922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定父类和子类之间的继承条件时，mapper()将忽略与不相关表的非配置外键。这等同于已应用于declarative的行为。请注意，0.7有一个更全面的解决方案，改变了join()本身如何确定FK错误。
- en: 'References: [#2153](https://www.sqlalchemy.org/trac/ticket/2153)'
  id: totrans-1923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2153](https://www.sqlalchemy.org/trac/ticket/2153)
- en: '**[orm]**'
  id: totrans-1924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper mapped to an anonymous alias would fail if logging
    were used, due to unescaped % sign in the alias name.
  id: totrans-1925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即映射到匿名别名的映射器在使用日志记录时会失败，因为别名中有未转义的%符号。
- en: 'References: [#2171](https://www.sqlalchemy.org/trac/ticket/2171)'
  id: totrans-1926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2171](https://www.sqlalchemy.org/trac/ticket/2171)
- en: '**[orm]**'
  id: totrans-1927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modify the text of the message which occurs when the “identity” key isn’t detected
    on flush, to include the common cause that the Column isn’t set up to detect auto-increment
    correctly;.
  id: totrans-1928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了当在刷新时未检测到“identity”键时发生的消息文本，以包括列未设置正确检测自增的常见原因;。
- en: 'References: [#2170](https://www.sqlalchemy.org/trac/ticket/2170)'
  id: totrans-1929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2170](https://www.sqlalchemy.org/trac/ticket/2170)
- en: '**[orm]**'
  id: totrans-1930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where transaction-level “deleted” collection wouldn’t be cleared of
    expunged states, raising an error if they later became transient.
  id: totrans-1931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事务级别的“已删除”集合不会清除已删除状态，如果它们后来变为瞬态会引发错误的 bug。
- en: 'References: [#2182](https://www.sqlalchemy.org/trac/ticket/2182)'
  id: totrans-1932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2182](https://www.sqlalchemy.org/trac/ticket/2182)
- en: engine
  id: totrans-1933
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-1934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Adjusted the __contains__() method of a RowProxy result row such that no exception
    throw is generated internally; NoSuchColumnError() also will generate its message
    regardless of whether or not the column construct can be coerced to a string..
  id: totrans-1935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 RowProxy 结果行的 __contains__() 方法，使其在内部不生成异常抛出；无论列构造是否可以强制转换为字符串，NoSuchColumnError()
    也会生成其消息。
- en: 'References: [#2178](https://www.sqlalchemy.org/trac/ticket/2178)'
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2178](https://www.sqlalchemy.org/trac/ticket/2178)
- en: sql
  id: totrans-1937
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby if FetchedValue was passed to column server_onupdate, it would
    not have its parent “column” assigned, added test coverage for all column default
    assignment patterns.
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果将 FetchedValue 传递给列 server_onupdate，它将不会分配其父“列”的 bug，为所有列默认分配模式添加了测试覆盖。
- en: 'References: [#2147](https://www.sqlalchemy.org/trac/ticket/2147)'
  id: totrans-1940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2147](https://www.sqlalchemy.org/trac/ticket/2147)
- en: '**[sql]**'
  id: totrans-1941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby nesting a label of a select() with another label in it would
    produce incorrect exported columns. Among other things this would break an ORM
    column_property() mapping against another column_property(). .
  id: totrans-1942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一个 select() 的标签中嵌套另一个标签会产生不正确导出列的 bug。其中一个问题是会破坏针对另一个 column_property()
    的 ORM column_property() 映射。
- en: 'References: [#2167](https://www.sqlalchemy.org/trac/ticket/2167)'
  id: totrans-1943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2167](https://www.sqlalchemy.org/trac/ticket/2167)
- en: postgresql
  id: totrans-1944
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug affecting PG 9 whereby index reflection would fail if against a column
    whose name had changed. .
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响 PG 9 的 bug，即反射索引会失败，如果针对一个列名已更改的列。。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141)'
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141)
- en: '**[postgresql]**'
  id: totrans-1948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Some unit test fixes regarding numeric arrays, MATCH operator. A potential floating-point
    inaccuracy issue was fixed, and certain tests of the MATCH operator only execute
    within an EN-oriented locale for now. .
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些关于数字数组、MATCH 运算符的单元测试修复。修复了潜在的浮点不精确问题，并且目前只有在 EN 定向区域设置内执行 MATCH 运算符的某些测试。
- en: 'References: [#2175](https://www.sqlalchemy.org/trac/ticket/2175)'
  id: totrans-1950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2175](https://www.sqlalchemy.org/trac/ticket/2175)
- en: mssql
  id: totrans-1951
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug in MSSQL dialect whereby the aliasing applied to a schema-qualified
    table would leak into enclosing select statements.
  id: totrans-1953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MSSQL 方言中的 bug，即应用于模式限定表的别名会泄漏到封闭的 select 语句中。
- en: 'References: [#2169](https://www.sqlalchemy.org/trac/ticket/2169)'
  id: totrans-1954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2169](https://www.sqlalchemy.org/trac/ticket/2169)
- en: '**[mssql]**'
  id: totrans-1955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug whereby DATETIME2 type would fail on the “adapt” step when used in
    result sets or bound parameters. This issue is not in 0.7.
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 DATETIME2 类型在结果集或绑定参数中使用时在“适应”步骤中失败的 bug。此问题不在 0.7 版本中出现。
- en: 'References: [#2159](https://www.sqlalchemy.org/trac/ticket/2159)'
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2159](https://www.sqlalchemy.org/trac/ticket/2159)
- en: 0.6.7
  id: totrans-1958
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.7
- en: 'Released: Wed Apr 13 2011'
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011 年 4 月 13 日
- en: orm
  id: totrans-1960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Tightened the iterate vs. remove mutex around the identity map iteration, attempting
    to reduce the chance of an (extremely rare) reentrant gc operation causing a deadlock.
    Might remove the mutex in 0.7.
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加强了在身份映射迭代周围的迭代与移除互斥锁，试图减少极其罕见的重新进入 gc 操作导致死锁的机会。可能会在 0.7 版本中移除互斥锁。
- en: 'References: [#2087](https://www.sqlalchemy.org/trac/ticket/2087)'
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2087](https://www.sqlalchemy.org/trac/ticket/2087)
- en: '**[orm]**'
  id: totrans-1964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a name argument to Query.subquery(), to allow a fixed name to be assigned
    to the alias object.
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query.subquery() 添加了一个 name 参数，允许为别名对象分配一个固定名称。
- en: 'References: [#2030](https://www.sqlalchemy.org/trac/ticket/2030)'
  id: totrans-1966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2030](https://www.sqlalchemy.org/trac/ticket/2030)
- en: '**[orm]**'
  id: totrans-1967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when a joined-table inheriting mapper has no primary keys
    on the locally mapped table (but has pks on the superclass table).
  id: totrans-1968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个联接表继承映射器在本地映射表上没有主键（但在超类表上有主键）时，会发出警告。
- en: 'References: [#2019](https://www.sqlalchemy.org/trac/ticket/2019)'
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2019](https://www.sqlalchemy.org/trac/ticket/2019)
- en: '**[orm]**'
  id: totrans-1970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where “middle” class in a polymorphic hierarchy would have no ‘polymorphic_on’
    column if it didn’t also specify a ‘polymorphic_identity’, leading to strange
    errors upon refresh, wrong class loaded when querying from that target. Also emits
    the correct WHERE criterion when using single table inheritance.
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即多态层次结构中的“中间”类如果没有指定‘polymorphic_identity’，则不会有‘polymorphic_on’列，导致在刷新时出现奇怪的错误，从该目标查询时加载错误的类。还在使用单表继承时发出正确的WHERE条件。
- en: 'References: [#2038](https://www.sqlalchemy.org/trac/ticket/2038)'
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2038](https://www.sqlalchemy.org/trac/ticket/2038)
- en: '**[orm]**'
  id: totrans-1973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where a column with a SQL or server side default that was excluded
    from a mapping with include_properties or exclude_properties would result in UnmappedColumnError.
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即具有SQL或服务器端默认值的列，如果在使用include_properties或exclude_properties时被排除在映射之外，将导致UnmappedColumnError。
- en: 'References: [#1995](https://www.sqlalchemy.org/trac/ticket/1995)'
  id: totrans-1975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1995](https://www.sqlalchemy.org/trac/ticket/1995)
- en: '**[orm]**'
  id: totrans-1976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. This will be an exception
    in 0.7.
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在集合上发生附加或类似事件之后，如果父对象已被取消引用，将发出警告，这将阻止父对象在会话中被标记为“脏”。在0.7中将是一个异常。
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: '**[orm]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.options() whereby a path applied to a lazyload using string
    keys could overlap a same named attribute on the wrong entity. Note 0.7 has an
    updated version of this fix.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.options()中的一个bug，即应用于使用字符串键的lazyload的路径可能与错误实体上的同名属性重叠。请注意，0.7版本已更新了此修复版本。
- en: 'References: [#2098](https://www.sqlalchemy.org/trac/ticket/2098)'
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2098](https://www.sqlalchemy.org/trac/ticket/2098)
- en: '**[orm]**'
  id: totrans-1982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reworded the exception raised when a flush is attempted of a subclass that is
    not polymorphic against the supertype.
  id: totrans-1983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新定义了当尝试刷新一个不与超类型多态化的子类时引发的异常。
- en: 'References: [#2063](https://www.sqlalchemy.org/trac/ticket/2063)'
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2063](https://www.sqlalchemy.org/trac/ticket/2063)
- en: '**[orm]**'
  id: totrans-1985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to the state handling regarding backrefs, typically when autoflush=False,
    where the back-referenced collection wouldn’t properly handle add/removes with
    no net change. Thanks to Richard Murri for the test case + patch.
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于反向引用(backrefs)的状态处理进行了一些修复，通常在autoflush=False时，当反向引用的集合没有净变化时，不会正确处理添加/删除操作。感谢Richard
    Murri提供的测试用例和补丁。
- en: 'References: [#2123](https://www.sqlalchemy.org/trac/ticket/2123)'
  id: totrans-1987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2123](https://www.sqlalchemy.org/trac/ticket/2123)
- en: '**[orm]**'
  id: totrans-1988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a “having” clause would be copied from the inside to the outside query if from_self()
    were used..
  id: totrans-1989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用from_self()，则“having”子句将从内部复制到外部查询中。
- en: 'References: [#2130](https://www.sqlalchemy.org/trac/ticket/2130)'
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2130](https://www.sqlalchemy.org/trac/ticket/2130)
- en: examples
  id: totrans-1991
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-1992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: The Beaker caching example allows a “query_cls” argument to the query_callable()
    function.
  id: totrans-1993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker缓存示例允许在query_callable()函数中使用“query_cls”参数。
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: engine
  id: totrans-1995
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-1996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed bug in QueuePool, SingletonThreadPool whereby connections that were discarded
    via overflow or periodic cleanup() were not explicitly closed, leaving garbage
    collection to the task instead. This generally only affects non-reference-counting
    backends like Jython and PyPy. Thanks to Jaimy Azle for spotting this.
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了QueuePool、SingletonThreadPool中的bug，即通过溢出或定期cleanup()丢弃的连接没有被显式关闭，而是留给任务进行垃圾回收。这通常只影响像Jython和PyPy这样的非引用计数后端。感谢Jaimy
    Azle发现这个问题。
- en: 'References: [#2102](https://www.sqlalchemy.org/trac/ticket/2102)'
  id: totrans-1998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2102](https://www.sqlalchemy.org/trac/ticket/2102)
- en: sql
  id: totrans-1999
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy(), as used in table.tometadata(), copies the ‘doc’ attribute.
  id: totrans-2001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy()，在table.tometadata()中使用，会复制‘doc’属性。
- en: 'References: [#2028](https://www.sqlalchemy.org/trac/ticket/2028)'
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2028](https://www.sqlalchemy.org/trac/ticket/2028)
- en: '**[sql]**'
  id: totrans-2003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added some defs to the resultproxy.c extension so that the extension compiles
    and runs on Python 2.4.
  id: totrans-2004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在resultproxy.c扩展中添加了一些defs，以便该扩展在Python 2.4上编译和运行。
- en: 'References: [#2023](https://www.sqlalchemy.org/trac/ticket/2023)'
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2023](https://www.sqlalchemy.org/trac/ticket/2023)
- en: '**[sql]**'
  id: totrans-2006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The compiler extension now supports overriding the default compilation of expression._BindParamClause
    including that the auto-generated binds within the VALUES/SET clause of an insert()/update()
    statement will also use the new compilation rules.
  id: totrans-2007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在支持覆盖 expression._BindParamClause 的默认编译，包括 insert()/update() 语句的 VALUES/SET
    子句内自动生成的绑定也将使用新的编译规则。
- en: 'References: [#2042](https://www.sqlalchemy.org/trac/ticket/2042)'
  id: totrans-2008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2042](https://www.sqlalchemy.org/trac/ticket/2042)
- en: '**[sql]**'
  id: totrans-2009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added accessors to ResultProxy “returns_rows”, “is_insert”
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 ResultProxy 的访问器“returns_rows”、“is_insert”
- en: 'References: [#2089](https://www.sqlalchemy.org/trac/ticket/2089)'
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2089](https://www.sqlalchemy.org/trac/ticket/2089)
- en: '**[sql]**'
  id: totrans-2012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The limit/offset keywords to select() as well as the value passed to select.limit()/offset()
    will be coerced to integer.
  id: totrans-2013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 中的 limit/offset 关键字以及传递给 select.limit()/offset() 的值将被强制转换为整数。
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: postgresql
  id: totrans-2015
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: When explicit sequence execution derives the name of the auto-generated sequence
    of a SERIAL column, which currently only occurs if implicit_returning=False, now
    accommodates if the table + column name is greater than 63 characters using the
    same logic PostgreSQL uses.
  id: totrans-2017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当显式序列执行推导出 SERIAL 列的自动生成序列的名称时，目前仅在 implicit_returning=False 时发生，现在如果表 + 列名大于
    63 个字符，则使用与 PostgreSQL 相同的逻辑。
- en: 'References: [#1083](https://www.sqlalchemy.org/trac/ticket/1083)'
  id: totrans-2018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1083](https://www.sqlalchemy.org/trac/ticket/1083)
- en: '**[postgresql]**'
  id: totrans-2019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added an additional libpq message to the list of “disconnect” exceptions, “could
    not receive data from server”
  id: totrans-2020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个额外的 libpq 消息到“断开连接”异常列表中，“无法从服务器接收数据”
- en: 'References: [#2044](https://www.sqlalchemy.org/trac/ticket/2044)'
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2044](https://www.sqlalchemy.org/trac/ticket/2044)
- en: '**[postgresql]**'
  id: totrans-2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added RESERVED_WORDS for postgresql dialect.
  id: totrans-2023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 postgresql 方言添加了 RESERVED_WORDS。
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-2024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[postgresql]**'
  id: totrans-2025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the BIT type to allow a “length” parameter, “varying” parameter. Reflection
    also fixed.
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 BIT 类型允许“length”参数、“varying”参数的问题。反射也已修复。
- en: 'References: [#2073](https://www.sqlalchemy.org/trac/ticket/2073)'
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2073](https://www.sqlalchemy.org/trac/ticket/2073)
- en: mysql
  id: totrans-2028
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: oursql dialect accepts the same “ssl” arguments in create_engine() as that of
    MySQLdb.
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oursql 方言接受与 MySQLdb 相同的“ssl”参数。
- en: 'References: [#2047](https://www.sqlalchemy.org/trac/ticket/2047)'
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2047](https://www.sqlalchemy.org/trac/ticket/2047)
- en: sqlite
  id: totrans-2032
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed bug where reflection of foreign key created as “REFERENCES <tablename>”
    without col name would fail.
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当外键反射创建为 “REFERENCES <tablename>” 而没有列名时失败的 bug。
- en: 'References: [#2115](https://www.sqlalchemy.org/trac/ticket/2115)'
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2115](https://www.sqlalchemy.org/trac/ticket/2115)
- en: mssql
  id: totrans-2036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the query used to get the definition of a view, typically when using
    the Inspector interface, to use sys.sql_modules instead of the information schema,
    thereby allowing views definitions longer than 4000 characters to be fully returned.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了用于获取视图定义的查询，通常在使用 Inspector 接口时使用，改为使用 sys.sql_modules 而不是信息模式，从而允许完整返回超过
    4000 个字符的视图定义。
- en: 'References: [#2071](https://www.sqlalchemy.org/trac/ticket/2071)'
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2071](https://www.sqlalchemy.org/trac/ticket/2071)
- en: oracle
  id: totrans-2040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Using column names that would require quotes for the column itself or for a
    name-generated bind parameter, such as names with special characters, underscores,
    non-ascii characters, now properly translate bind parameter keys when talking
    to cx_oracle.
  id: totrans-2042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用需要引号的列名用于列本身或为名称生成的绑定参数，例如具有特殊字符、下划线、非 ASCII 字符的名称时，现在在与 cx_oracle 通信时会正确翻译绑定参数键。
- en: 'References: [#2100](https://www.sqlalchemy.org/trac/ticket/2100)'
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2100](https://www.sqlalchemy.org/trac/ticket/2100)
- en: '**[oracle]**'
  id: totrans-2044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle dialect adds use_binds_for_limits=False create_engine() flag, will render
    the LIMIT/OFFSET values inline instead of as binds, reported to modify the execution
    plan used by Oracle.
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 方言添加了 use_binds_for_limits=False create_engine() 标志，将限制/偏移值内联渲染而不是作为绑定，据报告修改了
    Oracle 使用的执行计划。
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: misc
  id: totrans-2047
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[informix]**'
  id: totrans-2048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Added RESERVED_WORDS informix dialect.
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 RESERVED_WORDS informix 方言。
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[firebird]**'
  id: totrans-2051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The “implicit_returning” flag on create_engine() is honored if set to False.
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 create_engine() 上设置为 False 时，“implicit_returning” 标志会被尊重。
- en: 'References: [#2083](https://www.sqlalchemy.org/trac/ticket/2083)'
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2083](https://www.sqlalchemy.org/trac/ticket/2083)
- en: '**[ext]**'
  id: totrans-2054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The horizontal_shard ShardedSession class accepts the common Session argument
    “query_cls” as a constructor argument, to enable further subclassing of ShardedQuery.
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: horizontal_shard ShardedSession 类接受常见的 Session 参数“query_cls”作为构造函数参数，以便进一步对
    ShardedQuery 进行子类化。
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: '**[declarative]**'
  id: totrans-2057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Added an explicit check for the case that the name ‘metadata’ is used for a
    column attribute on a declarative class.
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个明确的检查，以确保在声明类的列属性上使用名称‘metadata’的情况。
- en: 'References: [#2050](https://www.sqlalchemy.org/trac/ticket/2050)'
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2050](https://www.sqlalchemy.org/trac/ticket/2050)
- en: '**[declarative]**'
  id: totrans-2060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fix error message referencing old @classproperty name to reference @declared_attr
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复错误消息引用旧的 @classproperty 名称以引用 @declared_attr
- en: 'References: [#2061](https://www.sqlalchemy.org/trac/ticket/2061)'
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2061](https://www.sqlalchemy.org/trac/ticket/2061)
- en: '**[declarative]**'
  id: totrans-2063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Arguments in __mapper_args__ that aren’t “hashable” aren’t mistaken for always-hashable,
    possibly-column arguments.
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 __mapper_args__ 中不可“哈希化”的参数不会被误认为始终可哈希化，可能会被误认为列参数。
- en: 'References: [#2091](https://www.sqlalchemy.org/trac/ticket/2091)'
  id: totrans-2065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2091](https://www.sqlalchemy.org/trac/ticket/2091)
- en: '**[documentation]**'
  id: totrans-2066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Documented SQLite DATE/TIME/DATETIME types.
  id: totrans-2067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录了 SQLite DATE/TIME/DATETIME 类型。
- en: 'References: [#2029](https://www.sqlalchemy.org/trac/ticket/2029)'
  id: totrans-2068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2029](https://www.sqlalchemy.org/trac/ticket/2029)
- en: orm
  id: totrans-2069
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Tightened the iterate vs. remove mutex around the identity map iteration, attempting
    to reduce the chance of an (extremely rare) reentrant gc operation causing a deadlock.
    Might remove the mutex in 0.7.
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加强了关于身份映射迭代与删除互斥锁的控制，试图减少（极其罕见的）重新进入的 gc 操作导致死锁的机会。可能会在 0.7 版本中移除互斥锁。
- en: 'References: [#2087](https://www.sqlalchemy.org/trac/ticket/2087)'
  id: totrans-2072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2087](https://www.sqlalchemy.org/trac/ticket/2087)
- en: '**[orm]**'
  id: totrans-2073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a name argument to Query.subquery(), to allow a fixed name to be assigned
    to the alias object.
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query.subquery() 添加了一个 name 参数，以允许为别名对象分配一个固定的名称。
- en: 'References: [#2030](https://www.sqlalchemy.org/trac/ticket/2030)'
  id: totrans-2075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2030](https://www.sqlalchemy.org/trac/ticket/2030)
- en: '**[orm]**'
  id: totrans-2076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when a joined-table inheriting mapper has no primary keys
    on the locally mapped table (but has pks on the superclass table).
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当连接表继承映射器在本地映射表上没有主键（但在超类表上有主键）时，会发出警告。
- en: 'References: [#2019](https://www.sqlalchemy.org/trac/ticket/2019)'
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2019](https://www.sqlalchemy.org/trac/ticket/2019)
- en: '**[orm]**'
  id: totrans-2079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where “middle” class in a polymorphic hierarchy would have no ‘polymorphic_on’
    column if it didn’t also specify a ‘polymorphic_identity’, leading to strange
    errors upon refresh, wrong class loaded when querying from that target. Also emits
    the correct WHERE criterion when using single table inheritance.
  id: totrans-2080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态层次结构中的“中间”类没有‘polymorphic_on’列的 bug，如果它没有指定‘polymorphic_identity’，则在刷新时会导致奇怪的错误，从该目标查询时加载错误的类。在使用单表继承时，还会发出正确的
    WHERE 条件。
- en: 'References: [#2038](https://www.sqlalchemy.org/trac/ticket/2038)'
  id: totrans-2081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2038](https://www.sqlalchemy.org/trac/ticket/2038)
- en: '**[orm]**'
  id: totrans-2082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where a column with a SQL or server side default that was excluded
    from a mapping with include_properties or exclude_properties would result in UnmappedColumnError.
  id: totrans-2083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即具有 SQL 或服务器端默认值的列，如果使用 include_properties 或 exclude_properties 从映射中排除，将导致
    UnmappedColumnError。
- en: 'References: [#1995](https://www.sqlalchemy.org/trac/ticket/1995)'
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1995](https://www.sqlalchemy.org/trac/ticket/1995)
- en: '**[orm]**'
  id: totrans-2085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. This will be an exception
    in 0.7.
  id: totrans-2086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罕见情况下，如果在父对象被取消引用后发生附加或类似事件的情况，将发出警告，这会阻止父对象在会话中被标记为“脏”。这将在 0.7 版本中成为异常。
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-2087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: '**[orm]**'
  id: totrans-2088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.options() whereby a path applied to a lazyload using string
    keys could overlap a same named attribute on the wrong entity. Note 0.7 has an
    updated version of this fix.
  id: totrans-2089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 query.options() 中的 bug，即应用于使用字符串键的延迟加载的路径可能会与错误实体上的同名属性重叠。请注意，0.7 版本中有此修复的更新版本。
- en: 'References: [#2098](https://www.sqlalchemy.org/trac/ticket/2098)'
  id: totrans-2090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2098](https://www.sqlalchemy.org/trac/ticket/2098)
- en: '**[orm]**'
  id: totrans-2091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reworded the exception raised when a flush is attempted of a subclass that is
    not polymorphic against the supertype.
  id: totrans-2092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新修订了当尝试刷新不与超类型多态的子类时引发的异常。
- en: 'References: [#2063](https://www.sqlalchemy.org/trac/ticket/2063)'
  id: totrans-2093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2063](https://www.sqlalchemy.org/trac/ticket/2063)
- en: '**[orm]**'
  id: totrans-2094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to the state handling regarding backrefs, typically when autoflush=False,
    where the back-referenced collection wouldn’t properly handle add/removes with
    no net change. Thanks to Richard Murri for the test case + patch.
  id: totrans-2095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于反向引用(backrefs)的状态处理进行了一些修复，通常在autoflush=False时，当反向引用集合未正确处理没有净变化的add/remove时。感谢Richard
    Murri提供测试用例和补丁。
- en: 'References: [#2123](https://www.sqlalchemy.org/trac/ticket/2123)'
  id: totrans-2096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2123](https://www.sqlalchemy.org/trac/ticket/2123)
- en: '**[orm]**'
  id: totrans-2097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a “having” clause would be copied from the inside to the outside query if from_self()
    were used..
  id: totrans-2098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用from_self()，则“having”子句将从内部复制到外部查询中。
- en: 'References: [#2130](https://www.sqlalchemy.org/trac/ticket/2130)'
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2130](https://www.sqlalchemy.org/trac/ticket/2130)
- en: examples
  id: totrans-2100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples]**'
  id: totrans-2101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: The Beaker caching example allows a “query_cls” argument to the query_callable()
    function.
  id: totrans-2102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker缓存示例允许“query_cls”参数传递给query_callable()函数。
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: engine
  id: totrans-2104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-2105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed bug in QueuePool, SingletonThreadPool whereby connections that were discarded
    via overflow or periodic cleanup() were not explicitly closed, leaving garbage
    collection to the task instead. This generally only affects non-reference-counting
    backends like Jython and PyPy. Thanks to Jaimy Azle for spotting this.
  id: totrans-2106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了QueuePool、SingletonThreadPool中的bug，其中通过溢出或定期cleanup()丢弃的连接没有明确关闭，导致垃圾回收任务。这通常只影响像Jython和PyPy这样不支持引用计数的后端。感谢Jaimy
    Azle发现了这个问题。
- en: 'References: [#2102](https://www.sqlalchemy.org/trac/ticket/2102)'
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2102](https://www.sqlalchemy.org/trac/ticket/2102)
- en: sql
  id: totrans-2108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy(), as used in table.tometadata(), copies the ‘doc’ attribute.
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy()，如在table.tometadata()中使用，将复制‘doc’属性。
- en: 'References: [#2028](https://www.sqlalchemy.org/trac/ticket/2028)'
  id: totrans-2111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2028](https://www.sqlalchemy.org/trac/ticket/2028)
- en: '**[sql]**'
  id: totrans-2112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added some defs to the resultproxy.c extension so that the extension compiles
    and runs on Python 2.4.
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为resultproxy.c扩展添加了一些defs，以便该扩展在Python 2.4上编译和运行。
- en: 'References: [#2023](https://www.sqlalchemy.org/trac/ticket/2023)'
  id: totrans-2114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2023](https://www.sqlalchemy.org/trac/ticket/2023)
- en: '**[sql]**'
  id: totrans-2115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The compiler extension now supports overriding the default compilation of expression._BindParamClause
    including that the auto-generated binds within the VALUES/SET clause of an insert()/update()
    statement will also use the new compilation rules.
  id: totrans-2116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在支持覆盖expression._BindParamClause的默认编译，包括insert()/update()语句的VALUES/SET子句中的自动生成绑定也将使用新的编译规则。
- en: 'References: [#2042](https://www.sqlalchemy.org/trac/ticket/2042)'
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2042](https://www.sqlalchemy.org/trac/ticket/2042)
- en: '**[sql]**'
  id: totrans-2118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added accessors to ResultProxy “returns_rows”, “is_insert”
  id: totrans-2119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为ResultProxy添加了访问器“returns_rows”、“is_insert”
- en: 'References: [#2089](https://www.sqlalchemy.org/trac/ticket/2089)'
  id: totrans-2120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2089](https://www.sqlalchemy.org/trac/ticket/2089)
- en: '**[sql]**'
  id: totrans-2121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The limit/offset keywords to select() as well as the value passed to select.limit()/offset()
    will be coerced to integer.
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()中的limit/offset关键字以及传递给select.limit()/offset()的值将被强制转换为整数。
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-2123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: postgresql
  id: totrans-2124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: When explicit sequence execution derives the name of the auto-generated sequence
    of a SERIAL column, which currently only occurs if implicit_returning=False, now
    accommodates if the table + column name is greater than 63 characters using the
    same logic PostgreSQL uses.
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当显式序列执行派生SERIAL列的自动生成序列的名称时，当前仅在implicit_returning=False时发生，现在适应了如果表+列名大于63个字符，则使用PostgreSQL使用的相同逻辑。
- en: 'References: [#1083](https://www.sqlalchemy.org/trac/ticket/1083)'
  id: totrans-2127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1083](https://www.sqlalchemy.org/trac/ticket/1083)
- en: '**[postgresql]**'
  id: totrans-2128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added an additional libpq message to the list of “disconnect” exceptions, “could
    not receive data from server”
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“disconnect”异常列表中的另一个libpq消息“could not receive data from server”添加到列表中。
- en: 'References: [#2044](https://www.sqlalchemy.org/trac/ticket/2044)'
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2044](https://www.sqlalchemy.org/trac/ticket/2044)
- en: '**[postgresql]**'
  id: totrans-2131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added RESERVED_WORDS for postgresql dialect.
  id: totrans-2132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为postgresql方言添加了RESERVED_WORDS。
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[postgresql]**'
  id: totrans-2134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the BIT type to allow a “length” parameter, “varying” parameter. Reflection
    also fixed.
  id: totrans-2135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了BIT类型以允许“length”参数，“varying”参数。反射也已修复。
- en: 'References: [#2073](https://www.sqlalchemy.org/trac/ticket/2073)'
  id: totrans-2136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2073](https://www.sqlalchemy.org/trac/ticket/2073)
- en: mysql
  id: totrans-2137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: oursql dialect accepts the same “ssl” arguments in create_engine() as that of
    MySQLdb.
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oursql方言在create_engine()中接受与MySQLdb相同的“ssl”参数。
- en: 'References: [#2047](https://www.sqlalchemy.org/trac/ticket/2047)'
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2047](https://www.sqlalchemy.org/trac/ticket/2047)
- en: sqlite
  id: totrans-2141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed bug where reflection of foreign key created as “REFERENCES <tablename>”
    without col name would fail.
  id: totrans-2143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了外键反射创建为“REFERENCES <tablename>”而没有列名的bug。
- en: 'References: [#2115](https://www.sqlalchemy.org/trac/ticket/2115)'
  id: totrans-2144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2115](https://www.sqlalchemy.org/trac/ticket/2115)
- en: mssql
  id: totrans-2145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the query used to get the definition of a view, typically when using
    the Inspector interface, to use sys.sql_modules instead of the information schema,
    thereby allowing views definitions longer than 4000 characters to be fully returned.
  id: totrans-2147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了用于获取视图定义的查询，通常在使用Inspector接口时使用sys.sql_modules而不是信息模式，从而允许完全返回长于4000个字符的视图定义。
- en: 'References: [#2071](https://www.sqlalchemy.org/trac/ticket/2071)'
  id: totrans-2148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2071](https://www.sqlalchemy.org/trac/ticket/2071)
- en: oracle
  id: totrans-2149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Using column names that would require quotes for the column itself or for a
    name-generated bind parameter, such as names with special characters, underscores,
    non-ascii characters, now properly translate bind parameter keys when talking
    to cx_oracle.
  id: totrans-2151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用需要为列本身或为名称生成的绑定参数需要引号的列名，例如具有特殊字符、下划线、非ASCII字符的名称，现在在与cx_oracle通信时正确地转换绑定参数键。
- en: 'References: [#2100](https://www.sqlalchemy.org/trac/ticket/2100)'
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2100](https://www.sqlalchemy.org/trac/ticket/2100)
- en: '**[oracle]**'
  id: totrans-2153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle dialect adds use_binds_for_limits=False create_engine() flag, will render
    the LIMIT/OFFSET values inline instead of as binds, reported to modify the execution
    plan used by Oracle.
  id: totrans-2154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言添加了use_binds_for_limits=False create_engine()标志，将在行内呈现LIMIT/OFFSET值，而不是作为绑定，据报道修改了Oracle使用的执行计划。
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-2155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: misc
  id: totrans-2156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[informix]**'
  id: totrans-2157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Added RESERVED_WORDS informix dialect.
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了RESERVED_WORDS informix方言。
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-2159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[firebird]**'
  id: totrans-2160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The “implicit_returning” flag on create_engine() is honored if set to False.
  id: totrans-2161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将“implicit_returning”标志设置为False，则create_engine()上的“implicit_returning”标志将被尊重。
- en: 'References: [#2083](https://www.sqlalchemy.org/trac/ticket/2083)'
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2083](https://www.sqlalchemy.org/trac/ticket/2083)
- en: '**[ext]**'
  id: totrans-2163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The horizontal_shard ShardedSession class accepts the common Session argument
    “query_cls” as a constructor argument, to enable further subclassing of ShardedQuery.
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: horizontal_shard ShardedSession类接受常见的Session参数“query_cls”作为构造函数参数，以启用ShardedQuery的进一步子类化。
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: '**[declarative]**'
  id: totrans-2166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Added an explicit check for the case that the name ‘metadata’ is used for a
    column attribute on a declarative class.
  id: totrans-2167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 明确检查了在声明类上的列属性中使用名称“metadata”的情况。
- en: 'References: [#2050](https://www.sqlalchemy.org/trac/ticket/2050)'
  id: totrans-2168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2050](https://www.sqlalchemy.org/trac/ticket/2050)
- en: '**[declarative]**'
  id: totrans-2169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fix error message referencing old @classproperty name to reference @declared_attr
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复错误消息引用旧的@classproperty名称以引用@declared_attr
- en: 'References: [#2061](https://www.sqlalchemy.org/trac/ticket/2061)'
  id: totrans-2171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2061](https://www.sqlalchemy.org/trac/ticket/2061)
- en: '**[declarative]**'
  id: totrans-2172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Arguments in __mapper_args__ that aren’t “hashable” aren’t mistaken for always-hashable,
    possibly-column arguments.
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在__mapper_args__中的参数如果不是“可哈希”的，则不会被误认为始终是可哈希的，可能是列参数。
- en: 'References: [#2091](https://www.sqlalchemy.org/trac/ticket/2091)'
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2091](https://www.sqlalchemy.org/trac/ticket/2091)
- en: '**[documentation]**'
  id: totrans-2175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Documented SQLite DATE/TIME/DATETIME types.
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录了SQLite DATE/TIME/DATETIME类型。
- en: 'References: [#2029](https://www.sqlalchemy.org/trac/ticket/2029)'
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2029](https://www.sqlalchemy.org/trac/ticket/2029)
- en: 0.6.6
  id: totrans-2178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.6
- en: 'Released: Sat Jan 08 2011'
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年1月8日星期六
- en: orm
  id: totrans-2180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby a non-“mutable” attribute modified event which occurred on
    an object that was clean except for preceding mutable attribute changes would
    fail to strongly reference itself in the identity map. This would cause the object
    to be garbage collected, losing track of any changes that weren’t previously saved
    in the “mutable changes” dictionary.
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了非“mutable”属性修改事件发生在干净对象上，除了之前保存在“mutable changes”字典中的更改之外，将无法强引用自身在标识映射中。这将导致对象被垃圾回收，丢失任何之前未保存在“mutable
    changes”字典中的更改。
- en: '**[orm]**'
  id: totrans-2183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby “passive_deletes=’all’” wasn’t passing the correct symbols
    to lazy loaders during flush, thereby causing an unwarranted load.
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“passive_deletes='all'”在flush期间未将正确符号传递给懒加载程序的错误，从而导致不必要的加载。
- en: 'References: [#2013](https://www.sqlalchemy.org/trac/ticket/2013)'
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2013](https://www.sqlalchemy.org/trac/ticket/2013)
- en: '**[orm]**'
  id: totrans-2186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which prevented composite mapped attributes from being used on a mapped
    select statement.. Note the workings of composite are slated to change significantly
    in 0.7.
  id: totrans-2187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止复合映射属性在映射的选择语句中使用的错误。请注意，复合的工作方式在0.7中将发生重大变化。
- en: 'References: [#1997](https://www.sqlalchemy.org/trac/ticket/1997)'
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1997](https://www.sqlalchemy.org/trac/ticket/1997)
- en: '**[orm]**'
  id: totrans-2189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: active_history flag also added to composite(). The flag has no effect in 0.6,
    but is instead a placeholder flag for forwards compatibility, as it applies in
    0.7 for composites.
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还向composite()添加了active_history标志。该标志在0.6中没有效果，而是一个用于向前兼容的占位符标志，因为它在0.7中适用于composites。
- en: 'References: [#1976](https://www.sqlalchemy.org/trac/ticket/1976)'
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1976](https://www.sqlalchemy.org/trac/ticket/1976)
- en: '**[orm]**'
  id: totrans-2192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed uow bug whereby expired objects passed to Session.delete() would not have
    unloaded references or collections taken into account when deleting objects, despite
    passive_deletes remaining at its default of False.
  id: totrans-2193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了uow错误，即当传递到Session.delete()的过期对象在删除对象时不考虑未加载的引用或集合时，尽管passive_deletes保持默认值False。
- en: 'References: [#2002](https://www.sqlalchemy.org/trac/ticket/2002)'
  id: totrans-2194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2002](https://www.sqlalchemy.org/trac/ticket/2002)
- en: '**[orm]**'
  id: totrans-2195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when version_id_col is specified on an inheriting mapper
    when the inherited mapper already has one, if those column expressions are not
    the same.
  id: totrans-2196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当继承的映射器上已经指定version_id_col时，在继承的映射器上指定version_id_col时会发出警告，如果这些列表达式不相同。
- en: 'References: [#1987](https://www.sqlalchemy.org/trac/ticket/1987)'
  id: totrans-2197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1987](https://www.sqlalchemy.org/trac/ticket/1987)
- en: '**[orm]**'
  id: totrans-2198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”innerjoin” flag doesn’t take effect along the chain of joinedload() joins if
    a previous join in that chain is an outer join, thus allowing primary rows without
    a referenced child row to be correctly returned in results.
  id: totrans-2199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在joinedload()连接链中的先前连接是外连接，则“innerjoin”标志不会沿着连接链生效，因此允许正确返回没有引用子行的主行结果。
- en: 'References: [#1954](https://www.sqlalchemy.org/trac/ticket/1954)'
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1954](https://www.sqlalchemy.org/trac/ticket/1954)
- en: '**[orm]**'
  id: totrans-2201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding “subqueryload” strategy whereby strategy would fail if the
    entity was an aliased() construct.
  id: totrans-2202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“subqueryload”策略的错误，即如果实体是一个aliased()构造，则策略将失败。
- en: 'References: [#1964](https://www.sqlalchemy.org/trac/ticket/1964)'
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1964](https://www.sqlalchemy.org/trac/ticket/1964)
- en: '**[orm]**'
  id: totrans-2204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding “subqueryload” strategy whereby the join would fail if using
    a multi-level load of the form from A->joined-subclass->C
  id: totrans-2205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“subqueryload”策略的错误，即如果使用形式为从A->joined-subclass->C的多级加载，则连接将失败。
- en: 'References: [#2014](https://www.sqlalchemy.org/trac/ticket/2014)'
  id: totrans-2206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2014](https://www.sqlalchemy.org/trac/ticket/2014)
- en: '**[orm]**'
  id: totrans-2207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed indexing of Query objects by -1\. It was erroneously transformed to the
    empty slice -1:0 that resulted in IndexError.
  id: totrans-2208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通过-1对Query对象进行索引的错误。它错误地转换为空切片-1:0，导致IndexError。
- en: 'References: [#1968](https://www.sqlalchemy.org/trac/ticket/1968)'
  id: totrans-2209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1968](https://www.sqlalchemy.org/trac/ticket/1968)
- en: '**[orm]**'
  id: totrans-2210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The mapper argument “primary_key” can be passed as a single column as well as
    a list or tuple. The documentation examples that illustrated it as a scalar value
    have been changed to lists.
  id: totrans-2211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper参数“primary_key”可以传递为单个列，也可以传递为列表或元组。文档中将其示例更改为列表。
- en: 'References: [#1971](https://www.sqlalchemy.org/trac/ticket/1971)'
  id: totrans-2212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1971](https://www.sqlalchemy.org/trac/ticket/1971)
- en: '**[orm]**'
  id: totrans-2213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added active_history flag to relationship() and column_property(), forces attribute
    events to always load the “old” value, so that it’s available to attributes.get_history().
  id: totrans-2214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向relationship()和column_property()添加了active_history标志，强制属性事件始终加载“旧”值，以便它在attributes.get_history()中可用。
- en: 'References: [#1961](https://www.sqlalchemy.org/trac/ticket/1961)'
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1961](https://www.sqlalchemy.org/trac/ticket/1961)
- en: '**[orm]**'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Query.get() will raise if the number of params in a composite key is too large,
    as well as too small.
  id: totrans-2217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果复合键中的参数数量过大或过小，Query.get() 将引发异常。
- en: 'References: [#1977](https://www.sqlalchemy.org/trac/ticket/1977)'
  id: totrans-2218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1977](https://www.sqlalchemy.org/trac/ticket/1977)
- en: '**[orm]**'
  id: totrans-2219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Backport of “optimized get” fix from 0.7, improves the generation of joined-inheritance
    “load expired row” behavior.
  id: totrans-2220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 0.7 中回退了“优化的获取”修复，改进了联合继承“加载过期行”行为的生成。
- en: 'References: [#1992](https://www.sqlalchemy.org/trac/ticket/1992)'
  id: totrans-2221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1992](https://www.sqlalchemy.org/trac/ticket/1992)
- en: '**[orm]**'
  id: totrans-2222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: A little more verbiage to the “primaryjoin” error, in an unusual condition that
    the join condition “works” for viewonly but doesn’t work for non-viewonly, and
    foreign_keys wasn’t used - adds “foreign_keys” to the suggestion. Also add “foreign_keys”
    to the suggestion for the generic “direction” error.
  id: totrans-2223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在视图只读时 join 条件“有效”但在非视图只读时不起作用的异常条件下，为“primaryjoin”错误添加了更多描述，且未使用 foreign_keys
    - 在建议中添加了“foreign_keys”。还为通用“direction”错误的建议添加了“foreign_keys”。
- en: examples
  id: totrans-2224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-2225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: The versioning example now supports detection of changes in an associated relationship().
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本示例现在支持检测关联关系中的更改。
- en: engine
  id: totrans-2227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-2228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The “unicode warning” against non-unicode bind data is now raised only when
    the Unicode type is used explicitly; not when convert_unicode=True is used on
    the engine or String type.
  id: totrans-2229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当显式使用 Unicode 类型时，只有在引擎或字符串类型上使用 convert_unicode=True 时才会引发“unicode 警告”；而不是在绑定数据为非
    Unicode 时。
- en: '**[engine]**'
  id: totrans-2230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Fixed memory leak in C version of Decimal result processor.
  id: totrans-2231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Decimal 结果处理器的 C 版本中的内存泄漏。
- en: 'References: [#1978](https://www.sqlalchemy.org/trac/ticket/1978)'
  id: totrans-2232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1978](https://www.sqlalchemy.org/trac/ticket/1978)
- en: '**[engine]**'
  id: totrans-2233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Implemented sequence check capability for the C version of RowProxy, as well
    as 2.7 style “collections.Sequence” registration for RowProxy.
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 RowProxy 的 C 版本实现了序列检查功能，以及对 RowProxy 的 2.7 风格“collections.Sequence”注册。
- en: 'References: [#1871](https://www.sqlalchemy.org/trac/ticket/1871)'
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1871](https://www.sqlalchemy.org/trac/ticket/1871)
- en: '**[engine]**'
  id: totrans-2236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Threadlocal engine methods rollback(), commit(), prepare() won’t raise if no
    transaction is in progress; this was a regression introduced in 0.6.
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Threadlocal 引擎方法 rollback()、commit()、prepare() 在没有事务进行时不会引发异常；这是 0.6 中引入的一个回归。
- en: 'References: [#1998](https://www.sqlalchemy.org/trac/ticket/1998)'
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1998](https://www.sqlalchemy.org/trac/ticket/1998)
- en: '**[engine]**'
  id: totrans-2239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Threadlocal engine returns itself upon begin(), begin_nested(); engine then
    implements contextmanager methods to allow the “with” statement.
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Threadlocal 引擎在 begin()、begin_nested() 后返回自身；然后引擎实现上下文管理器方法，以允许“with”语句。
- en: 'References: [#2004](https://www.sqlalchemy.org/trac/ticket/2004)'
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2004](https://www.sqlalchemy.org/trac/ticket/2004)
- en: sql
  id: totrans-2242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql]**'
  id: totrans-2243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed operator precedence rules for multiple chains of a single non-associative
    operator. I.e. “x - (y - z)” will compile as “x - (y - z)” and not “x - y - z”.
    Also works with labels, i.e. “x - (y - z).label(‘foo’)”
  id: totrans-2244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单个非关联运算符链的运算符优先级规则。即“x - (y - z)”将编译为“x - (y - z)”而不是“x - y - z”。也适用于标签，即“x
    - (y - z).label(‘foo’)”
- en: 'References: [#1984](https://www.sqlalchemy.org/trac/ticket/1984)'
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1984](https://www.sqlalchemy.org/trac/ticket/1984)
- en: '**[sql]**'
  id: totrans-2246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: The ‘info’ attribute of Column is copied during Column.copy(), i.e. as occurs
    when using columns in declarative mixins.
  id: totrans-2247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column 的 ‘info’ 属性在 Column.copy() 期间被复制，即在声明性 mixin 中使用列时发生的情况。
- en: 'References: [#1967](https://www.sqlalchemy.org/trac/ticket/1967)'
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1967](https://www.sqlalchemy.org/trac/ticket/1967)
- en: '**[sql]**'
  id: totrans-2249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added a bind processor for booleans which coerces to int, for DBAPIs such as
    pymssql that naively call str() on values.
  id: totrans-2250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为布尔值添加了一个绑定处理器，将其强制转换为 int，用于像 pymssql 这样的 DBAPI，在值上天真地调用 str()。
- en: '**[sql]**'
  id: totrans-2251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: CheckConstraint will copy its ‘initially’, ‘deferrable’, and ‘_create_rule’
    attributes within a copy()/tometadata()
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CheckConstraint 将在 copy()/tometadata() 中复制其‘initially’、‘deferrable’和‘_create_rule’属性。
- en: 'References: [#2000](https://www.sqlalchemy.org/trac/ticket/2000)'
  id: totrans-2253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2000](https://www.sqlalchemy.org/trac/ticket/2000)
- en: postgresql
  id: totrans-2254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: '**[postgresql]**'
  id: totrans-2255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[PostgreSQL]**'
- en: Single element tuple expressions inside an IN clause parenthesize correctly,
    also from
  id: totrans-2256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IN 子句中的单个元组表达式正确地加括号，也来自
- en: 'References: [#1984](https://www.sqlalchemy.org/trac/ticket/1984)'
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1984](https://www.sqlalchemy.org/trac/ticket/1984)
- en: '**[postgresql]**'
  id: totrans-2258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[PostgreSQL]**'
- en: Ensured every numeric, float, int code, scalar + array, are recognized by psycopg2
    and pg8000’s “numeric” base type.
  id: totrans-2259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保 psycopg2 和 pg8000 的“numeric”基本类型识别每个数字、浮点数、整数代码、标量 + 数组。
- en: 'References: [#1955](https://www.sqlalchemy.org/trac/ticket/1955)'
  id: totrans-2260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1955](https://www.sqlalchemy.org/trac/ticket/1955)
- en: '**[postgresql]**'
  id: totrans-2261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added as_uuid=True flag to the UUID type, will receive and return values as
    Python UUID() objects rather than strings. Currently, the UUID type is only known
    to work with psycopg2.
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对UUID类型添加了as_uuid=True标志，将接收和返回值作为Python UUID()对象而不是字符串。目前，UUID类型只能与psycopg2一起使用。
- en: 'References: [#1956](https://www.sqlalchemy.org/trac/ticket/1956)'
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1956](https://www.sqlalchemy.org/trac/ticket/1956)
- en: '**[postgresql]**'
  id: totrans-2264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug whereby KeyError would occur with non-ENUM supported PG versions after
    a pool dispose+recreate would occur.
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在池处理+重新创建后，非ENUM支持的PG版本会出现KeyError的错误。
- en: 'References: [#1989](https://www.sqlalchemy.org/trac/ticket/1989)'
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1989](https://www.sqlalchemy.org/trac/ticket/1989)
- en: mysql
  id: totrans-2267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed error handling for Jython + zxjdbc, such that has_table() property works
    again. Regression from 0.6.3 (we don’t have a Jython buildbot, sorry)
  id: totrans-2269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Jython + zxjdbc的错误处理，使has_table()属性再次起作用。这是从0.6.3开始的回归（我们没有Jython构建机，抱歉）
- en: 'References: [#1960](https://www.sqlalchemy.org/trac/ticket/1960)'
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1960](https://www.sqlalchemy.org/trac/ticket/1960)
- en: sqlite
  id: totrans-2271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: The REFERENCES clause in a CREATE TABLE that includes a remote schema to another
    table with the same schema name now renders the remote name without the schema
    clause, as required by SQLite.
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在CREATE TABLE中包含对具有相同模式名称的另一个表的远程模式的REFERENCES子句现在呈现远程名称而不包含模式子句，这是SQLite所要求的。
- en: 'References: [#1851](https://www.sqlalchemy.org/trac/ticket/1851)'
  id: totrans-2274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1851](https://www.sqlalchemy.org/trac/ticket/1851)
- en: '**[sqlite]**'
  id: totrans-2275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: On the same theme, the REFERENCES clause in a CREATE TABLE that includes a remote
    schema to a *different* schema than that of the parent table doesn’t render at
    all, as cross-schema references do not appear to be supported.
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在相同的主题上，在CREATE TABLE中包含对*不同*模式的远程模式的REFERENCES子句不会呈现，因为似乎不支持跨模式引用。
- en: mssql
  id: totrans-2277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The rewrite of index reflection in was unfortunately not tested correctly, and
    returned incorrect results. This regression is now fixed.
  id: totrans-2279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对索引反射的重写不幸地没有经过正确测试，并返回了不正确的结果。这个回归现在已经修复。
- en: 'References: [#1770](https://www.sqlalchemy.org/trac/ticket/1770)'
  id: totrans-2280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1770](https://www.sqlalchemy.org/trac/ticket/1770)
- en: oracle
  id: totrans-2281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The cx_oracle “decimal detection” logic, which takes place for result set columns
    with ambiguous numeric characteristics, now uses the decimal point character determined
    by the locale/ NLS_LANG setting, using an on-first-connect detection of this character.
    cx_oracle 5.0.3 or greater is also required when using a non-period-decimal-point
    NLS_LANG setting..
  id: totrans-2283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_oracle的“十进制检测”逻辑，对于具有模糊数值特征的结果集列，现在使用由locale/NLS_LANG设置确定的小数点字符，使用首次连接时检测此字符。在使用非句点小数点NLS_LANG设置时，还需要cx_oracle
    5.0.3或更高版本。
- en: 'References: [#1953](https://www.sqlalchemy.org/trac/ticket/1953)'
  id: totrans-2284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1953](https://www.sqlalchemy.org/trac/ticket/1953)
- en: misc
  id: totrans-2285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[firebird]**'
  id: totrans-2286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird numeric type now checks for Decimal explicitly, lets float() pass right
    through, thereby allowing special values such as float(‘inf’).
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird数值类型现在明确检查Decimal，让float()直接通过，从而允许特殊值如float('inf')。
- en: 'References: [#2012](https://www.sqlalchemy.org/trac/ticket/2012)'
  id: totrans-2288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2012](https://www.sqlalchemy.org/trac/ticket/2012)
- en: '**[declarative]**'
  id: totrans-2289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: An error is raised if __table_args__ is not in tuple or dict format, and is
    not None.
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果__table_args__不是元组或字典格式，并且不是None，则会引发错误。
- en: 'References: [#1972](https://www.sqlalchemy.org/trac/ticket/1972)'
  id: totrans-2291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1972](https://www.sqlalchemy.org/trac/ticket/1972)
- en: '**[sqlsoup]**'
  id: totrans-2292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: Added “map_to()” method to SqlSoup, which is a “master” method which accepts
    explicit arguments for each aspect of the selectable and mapping, including a
    base class per mapping.
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向SqlSoup添加了“map_to()”方法，这是一个“主”方法，接受每个可选择对象和映射的显式参数，包括每个映射的基类。
- en: 'References: [#1975](https://www.sqlalchemy.org/trac/ticket/1975)'
  id: totrans-2294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1975](https://www.sqlalchemy.org/trac/ticket/1975)
- en: '**[sqlsoup]**'
  id: totrans-2295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: Mapped selectables used with the map(), with_labels(), join() methods no longer
    put the given argument into the internal “cache” dictionary. Particularly since
    the join() and select() objects are created in the method itself this was pretty
    much a pure memory leaking behavior.
  id: totrans-2296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与map()、with_labels()、join()方法一起使用的映射可选择对象不再将给定参数放入内部“缓存”字典中。特别是因为join()和select()对象是在方法本身中创建的，这几乎是一种纯粹的内存泄漏行为。
- en: orm
  id: totrans-2297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby a non-“mutable” attribute modified event which occurred on
    an object that was clean except for preceding mutable attribute changes would
    fail to strongly reference itself in the identity map. This would cause the object
    to be garbage collected, losing track of any changes that weren’t previously saved
    in the “mutable changes” dictionary.
  id: totrans-2299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在干净的对象上发生的非“mutable”属性修改事件，除了之前保存在“mutable changes”字典中的更改之外，不会强引用自身在标识映射中。这将导致对象被垃圾回收，丢失任何之前未保存在“mutable
    changes”字典中的更改的跟踪。
- en: '**[orm]**'
  id: totrans-2300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby “passive_deletes=’all’” wasn’t passing the correct symbols
    to lazy loaders during flush, thereby causing an unwarranted load.
  id: totrans-2301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即“passive_deletes='all'”在 flush 期间未将正确的符号传递给 lazy loaders，从而导致不必要的加载。
- en: 'References: [#2013](https://www.sqlalchemy.org/trac/ticket/2013)'
  id: totrans-2302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2013](https://www.sqlalchemy.org/trac/ticket/2013)
- en: '**[orm]**'
  id: totrans-2303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which prevented composite mapped attributes from being used on a mapped
    select statement.. Note the workings of composite are slated to change significantly
    in 0.7.
  id: totrans-2304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，阻止了复合映射属性在映射的选择语句中使用。请注意，复合的工作方式在 0.7 中将发生重大变化。
- en: 'References: [#1997](https://www.sqlalchemy.org/trac/ticket/1997)'
  id: totrans-2305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1997](https://www.sqlalchemy.org/trac/ticket/1997)
- en: '**[orm]**'
  id: totrans-2306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: active_history flag also added to composite(). The flag has no effect in 0.6,
    but is instead a placeholder flag for forwards compatibility, as it applies in
    0.7 for composites.
  id: totrans-2307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: active_history 标志也添加到 composite()。该标志在 0.6 中没有效果，而是一个用于向前兼容性的占位符标志，因为它在 0.7
    中适用于 composites。
- en: 'References: [#1976](https://www.sqlalchemy.org/trac/ticket/1976)'
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1976](https://www.sqlalchemy.org/trac/ticket/1976)
- en: '**[orm]**'
  id: totrans-2309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed uow bug whereby expired objects passed to Session.delete() would not have
    unloaded references or collections taken into account when deleting objects, despite
    passive_deletes remaining at its default of False.
  id: totrans-2310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 uow bug，即当传递到 Session.delete() 的过期对象在删除对象时不考虑未加载的引用或集合，尽管 passive_deletes
    仍保持默认值 False。
- en: 'References: [#2002](https://www.sqlalchemy.org/trac/ticket/2002)'
  id: totrans-2311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2002](https://www.sqlalchemy.org/trac/ticket/2002)
- en: '**[orm]**'
  id: totrans-2312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when version_id_col is specified on an inheriting mapper
    when the inherited mapper already has one, if those column expressions are not
    the same.
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当继承的映射器上指定 version_id_col 时，如果继承的映射器已经有一个，并且这些列表达式不相同时，将发出警告。
- en: 'References: [#1987](https://www.sqlalchemy.org/trac/ticket/1987)'
  id: totrans-2314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1987](https://www.sqlalchemy.org/trac/ticket/1987)
- en: '**[orm]**'
  id: totrans-2315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”innerjoin” flag doesn’t take effect along the chain of joinedload() joins if
    a previous join in that chain is an outer join, thus allowing primary rows without
    a referenced child row to be correctly returned in results.
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果链中的先前连接是外连接，则“innerjoin”标志不会沿着 joinedload() 连接链生效，从而允许正确返回没有引用子行的主行结果。
- en: 'References: [#1954](https://www.sqlalchemy.org/trac/ticket/1954)'
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1954](https://www.sqlalchemy.org/trac/ticket/1954)
- en: '**[orm]**'
  id: totrans-2318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding “subqueryload” strategy whereby strategy would fail if the
    entity was an aliased() construct.
  id: totrans-2319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“subqueryload”策略的 bug，即如果实体是 aliased() 构造，则策略将失败。
- en: 'References: [#1964](https://www.sqlalchemy.org/trac/ticket/1964)'
  id: totrans-2320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1964](https://www.sqlalchemy.org/trac/ticket/1964)
- en: '**[orm]**'
  id: totrans-2321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding “subqueryload” strategy whereby the join would fail if using
    a multi-level load of the form from A->joined-subclass->C
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“subqueryload”策略的 bug，即如果使用形式从 A->joined-subclass->C 的多级加载，则连接将失败。
- en: 'References: [#2014](https://www.sqlalchemy.org/trac/ticket/2014)'
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2014](https://www.sqlalchemy.org/trac/ticket/2014)
- en: '**[orm]**'
  id: totrans-2324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed indexing of Query objects by -1\. It was erroneously transformed to the
    empty slice -1:0 that resulted in IndexError.
  id: totrans-2325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 Query 对象按 -1 进行索引的错误。它错误地转换为空切片 -1:0，导致 IndexError。
- en: 'References: [#1968](https://www.sqlalchemy.org/trac/ticket/1968)'
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1968](https://www.sqlalchemy.org/trac/ticket/1968)
- en: '**[orm]**'
  id: totrans-2327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The mapper argument “primary_key” can be passed as a single column as well as
    a list or tuple. The documentation examples that illustrated it as a scalar value
    have been changed to lists.
  id: totrans-2328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper 参数“primary_key”可以传递为单个列，也可以传递为列表或元组。文档中以标量值示例的示例已更改为列表。
- en: 'References: [#1971](https://www.sqlalchemy.org/trac/ticket/1971)'
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1971](https://www.sqlalchemy.org/trac/ticket/1971)
- en: '**[orm]**'
  id: totrans-2330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added active_history flag to relationship() and column_property(), forces attribute
    events to always load the “old” value, so that it’s available to attributes.get_history().
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 relationship() 和 column_property() 中添加了 active_history 标志，强制属性事件始终加载“旧”值，以便它在
    attributes.get_history() 中可用。
- en: 'References: [#1961](https://www.sqlalchemy.org/trac/ticket/1961)'
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1961](https://www.sqlalchemy.org/trac/ticket/1961)
- en: '**[orm]**'
  id: totrans-2333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.get() will raise if the number of params in a composite key is too large,
    as well as too small.
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果复合键中的参数数量过大或过小，Query.get()将引发异常。
- en: 'References: [#1977](https://www.sqlalchemy.org/trac/ticket/1977)'
  id: totrans-2335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1977](https://www.sqlalchemy.org/trac/ticket/1977)
- en: '**[orm]**'
  id: totrans-2336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Backport of “optimized get” fix from 0.7, improves the generation of joined-inheritance
    “load expired row” behavior.
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.7中回退了“优化的获取”修复，改进了联合继承“加载过期行”行为的生成。
- en: 'References: [#1992](https://www.sqlalchemy.org/trac/ticket/1992)'
  id: totrans-2338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1992](https://www.sqlalchemy.org/trac/ticket/1992)
- en: '**[orm]**'
  id: totrans-2339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A little more verbiage to the “primaryjoin” error, in an unusual condition that
    the join condition “works” for viewonly but doesn’t work for non-viewonly, and
    foreign_keys wasn’t used - adds “foreign_keys” to the suggestion. Also add “foreign_keys”
    to the suggestion for the generic “direction” error.
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“primaryjoin”错误中增加了更多描述，对于一个不寻常的情况，即连���条件对于viewonly有效但对于非viewonly无效，并且未使用foreign_keys
    - 在建议中添加了“foreign_keys”。还在通用的“direction”错误建议中添加了“foreign_keys”。
- en: examples
  id: totrans-2341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-2342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: The versioning example now supports detection of changes in an associated relationship().
  id: totrans-2343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本示例现在支持检测关联关系中的更改。
- en: engine
  id: totrans-2344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-2345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The “unicode warning” against non-unicode bind data is now raised only when
    the Unicode type is used explicitly; not when convert_unicode=True is used on
    the engine or String type.
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “unicode警告”只有在显式使用Unicode类型时才会引发，而不是在引擎或String类型上使用convert_unicode=True时。
- en: '**[engine]**'
  id: totrans-2347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed memory leak in C version of Decimal result processor.
  id: totrans-2348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Decimal结果处理器的C版本中的内存泄漏。
- en: 'References: [#1978](https://www.sqlalchemy.org/trac/ticket/1978)'
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1978](https://www.sqlalchemy.org/trac/ticket/1978)
- en: '**[engine]**'
  id: totrans-2350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Implemented sequence check capability for the C version of RowProxy, as well
    as 2.7 style “collections.Sequence” registration for RowProxy.
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为RowProxy的C版本实现了序列检查功能，以及对RowProxy的2.7风格“collections.Sequence”注册。
- en: 'References: [#1871](https://www.sqlalchemy.org/trac/ticket/1871)'
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1871](https://www.sqlalchemy.org/trac/ticket/1871)
- en: '**[engine]**'
  id: totrans-2353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Threadlocal engine methods rollback(), commit(), prepare() won’t raise if no
    transaction is in progress; this was a regression introduced in 0.6.
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Threadlocal引擎方法rollback()、commit()、prepare()如果没有事务正在进行，则不会引发异常；这是0.6中引入的一个回归。
- en: 'References: [#1998](https://www.sqlalchemy.org/trac/ticket/1998)'
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1998](https://www.sqlalchemy.org/trac/ticket/1998)
- en: '**[engine]**'
  id: totrans-2356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Threadlocal engine returns itself upon begin(), begin_nested(); engine then
    implements contextmanager methods to allow the “with” statement.
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Threadlocal引擎在begin()、begin_nested()时返回自身；然后引擎实现了上下文管理器方法，以允许“with”语句。
- en: 'References: [#2004](https://www.sqlalchemy.org/trac/ticket/2004)'
  id: totrans-2358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2004](https://www.sqlalchemy.org/trac/ticket/2004)
- en: sql
  id: totrans-2359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed operator precedence rules for multiple chains of a single non-associative
    operator. I.e. “x - (y - z)” will compile as “x - (y - z)” and not “x - y - z”.
    Also works with labels, i.e. “x - (y - z).label(‘foo’)”
  id: totrans-2361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单个非关联运算符链的运算符优先级规则。即“x - (y - z)”将编译为“x - (y - z)”而不是“x - y - z”。也适用于标签，即“x
    - (y - z).label(‘foo’)”
- en: 'References: [#1984](https://www.sqlalchemy.org/trac/ticket/1984)'
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1984](https://www.sqlalchemy.org/trac/ticket/1984)
- en: '**[sql]**'
  id: totrans-2363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The ‘info’ attribute of Column is copied during Column.copy(), i.e. as occurs
    when using columns in declarative mixins.
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column的‘info’属性在Column.copy()期间被复制，即在声明性mixin中使用列时发生的情况。
- en: 'References: [#1967](https://www.sqlalchemy.org/trac/ticket/1967)'
  id: totrans-2365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1967](https://www.sqlalchemy.org/trac/ticket/1967)
- en: '**[sql]**'
  id: totrans-2366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a bind processor for booleans which coerces to int, for DBAPIs such as
    pymssql that naively call str() on values.
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为布尔值添加了一个绑定处理器，将其强制转换为int，用于像pymssql这样的DBAPI，它们会简单地对值调用str()。
- en: '**[sql]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: CheckConstraint will copy its ‘initially’, ‘deferrable’, and ‘_create_rule’
    attributes within a copy()/tometadata()
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CheckConstraint将在copy()/tometadata()中复制其‘initially’、‘deferrable’和‘_create_rule’属性
- en: 'References: [#2000](https://www.sqlalchemy.org/trac/ticket/2000)'
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2000](https://www.sqlalchemy.org/trac/ticket/2000)
- en: postgresql
  id: totrans-2371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Single element tuple expressions inside an IN clause parenthesize correctly,
    also from
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元素元组表达式在IN子句中正确地加括号，也来自
- en: 'References: [#1984](https://www.sqlalchemy.org/trac/ticket/1984)'
  id: totrans-2374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1984](https://www.sqlalchemy.org/trac/ticket/1984)
- en: '**[postgresql]**'
  id: totrans-2375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Ensured every numeric, float, int code, scalar + array, are recognized by psycopg2
    and pg8000’s “numeric” base type.
  id: totrans-2376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保每个数字、浮点数、整数代码、标量+数组都被psycopg2和pg8000的“numeric”基本类型识别。
- en: 'References: [#1955](https://www.sqlalchemy.org/trac/ticket/1955)'
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1955](https://www.sqlalchemy.org/trac/ticket/1955)
- en: '**[postgresql]**'
  id: totrans-2378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added as_uuid=True flag to the UUID type, will receive and return values as
    Python UUID() objects rather than strings. Currently, the UUID type is only known
    to work with psycopg2.
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了as_uuid=True标志到UUID类型，将接收和返回Python UUID()对象而不是字符串。目前，UUID类型只能与psycopg2一起使用。
- en: 'References: [#1956](https://www.sqlalchemy.org/trac/ticket/1956)'
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1956](https://www.sqlalchemy.org/trac/ticket/1956)
- en: '**[postgresql]**'
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug whereby KeyError would occur with non-ENUM supported PG versions after
    a pool dispose+recreate would occur.
  id: totrans-2382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在池销毁+重新创建后，对不支持ENUM的PG版本会出现KeyError的错误。
- en: 'References: [#1989](https://www.sqlalchemy.org/trac/ticket/1989)'
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1989](https://www.sqlalchemy.org/trac/ticket/1989)
- en: mysql
  id: totrans-2384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed error handling for Jython + zxjdbc, such that has_table() property works
    again. Regression from 0.6.3 (we don’t have a Jython buildbot, sorry)
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Jython + zxjdbc的错误处理，使has_table()属性再次有效。从0.6.3开始的退化（我们没有Jython buildbot，抱歉）
- en: 'References: [#1960](https://www.sqlalchemy.org/trac/ticket/1960)'
  id: totrans-2387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1960](https://www.sqlalchemy.org/trac/ticket/1960)
- en: sqlite
  id: totrans-2388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: The REFERENCES clause in a CREATE TABLE that includes a remote schema to another
    table with the same schema name now renders the remote name without the schema
    clause, as required by SQLite.
  id: totrans-2390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在包含远程模式的CREATE TABLE中的REFERENCES子句指向具有相同模式名称的另一表时，现在呈现远程名称而不带模式子句，这是SQLite所要求的。
- en: 'References: [#1851](https://www.sqlalchemy.org/trac/ticket/1851)'
  id: totrans-2391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1851](https://www.sqlalchemy.org/trac/ticket/1851)
- en: '**[sqlite]**'
  id: totrans-2392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: On the same theme, the REFERENCES clause in a CREATE TABLE that includes a remote
    schema to a *different* schema than that of the parent table doesn’t render at
    all, as cross-schema references do not appear to be supported.
  id: totrans-2393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在同一主题下，包含远程模式的CREATE TABLE中的REFERENCES子句指向与父表不同的模式，由于不支持跨模式引用，因此根本不会呈现。
- en: mssql
  id: totrans-2394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The rewrite of index reflection in was unfortunately not tested correctly, and
    returned incorrect results. This regression is now fixed.
  id: totrans-2396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不幸地，索引反射的重写没有经过正确测试，返回了不正确的结果。这个退化现在已经修复。
- en: 'References: [#1770](https://www.sqlalchemy.org/trac/ticket/1770)'
  id: totrans-2397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1770](https://www.sqlalchemy.org/trac/ticket/1770)
- en: oracle
  id: totrans-2398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The cx_oracle “decimal detection” logic, which takes place for result set columns
    with ambiguous numeric characteristics, now uses the decimal point character determined
    by the locale/ NLS_LANG setting, using an on-first-connect detection of this character.
    cx_oracle 5.0.3 or greater is also required when using a non-period-decimal-point
    NLS_LANG setting..
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_oracle的“十进制检测”逻辑，用于具有模糊数值特征的结果集列，现在使用由locale/NLS_LANG设置确定的小数点字符，使用首次连接时检测此字符。在使用非句点小数点NLS_LANG设置时，还需要cx_oracle
    5.0.3或更高版本。
- en: 'References: [#1953](https://www.sqlalchemy.org/trac/ticket/1953)'
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1953](https://www.sqlalchemy.org/trac/ticket/1953)
- en: misc
  id: totrans-2402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[firebird]**'
  id: totrans-2403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird numeric type now checks for Decimal explicitly, lets float() pass right
    through, thereby allowing special values such as float(‘inf’).
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird数字类型现在明确检查Decimal，让float()直接通过，从而允许特殊值如float(‘inf’)。
- en: 'References: [#2012](https://www.sqlalchemy.org/trac/ticket/2012)'
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2012](https://www.sqlalchemy.org/trac/ticket/2012)
- en: '**[declarative]**'
  id: totrans-2406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: An error is raised if __table_args__ is not in tuple or dict format, and is
    not None.
  id: totrans-2407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果__table_args__不是元组或字典格式，并且不是None，则会引发错误。
- en: 'References: [#1972](https://www.sqlalchemy.org/trac/ticket/1972)'
  id: totrans-2408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1972](https://www.sqlalchemy.org/trac/ticket/1972)
- en: '**[sqlsoup]**'
  id: totrans-2409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: Added “map_to()” method to SqlSoup, which is a “master” method which accepts
    explicit arguments for each aspect of the selectable and mapping, including a
    base class per mapping.
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向SqlSoup添加了“map_to()”方法，这是一个“主”方法，接受每个可选择和映射的显式参数，包括每个映射的基类。
- en: 'References: [#1975](https://www.sqlalchemy.org/trac/ticket/1975)'
  id: totrans-2411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1975](https://www.sqlalchemy.org/trac/ticket/1975)
- en: '**[sqlsoup]**'
  id: totrans-2412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: Mapped selectables used with the map(), with_labels(), join() methods no longer
    put the given argument into the internal “cache” dictionary. Particularly since
    the join() and select() objects are created in the method itself this was pretty
    much a pure memory leaking behavior.
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与map()、with_labels()、join()方法一起使用的映射可选择现在不再将给定参数放入内部“缓存”字典中。特别是由于join()和select()对象是在方法本身中创建的，这几乎是一种纯粹的内存泄漏行为。
- en: 0.6.5
  id: totrans-2414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.5
- en: 'Released: Sun Oct 24 2010'
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010年10月24日星期日
- en: orm
  id: totrans-2416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a new “lazyload” option “immediateload”. Issues the usual “lazy” load
    operation automatically as the object is populated. The use case here is when
    loading objects to be placed in an offline cache, or otherwise used after the
    session isn’t available, and straight ‘select’ loading, not ‘joined’ or ‘subquery’,
    is desired.
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“lazyload”选项“immediateload”。当对象被填充时，自动执行常规的“lazy”加载操作。这里的用例是当加载对象以放置在离线缓存中，或在会话不可用后使用对象时，以及希望使用直接的‘select’加载而不是‘joined’或‘subquery’时。
- en: 'References: [#1914](https://www.sqlalchemy.org/trac/ticket/1914)'
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1914](https://www.sqlalchemy.org/trac/ticket/1914)
- en: '**[orm]**'
  id: totrans-2420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'New Query methods: query.label(name), query.as_scalar(), return the query’s
    statement as a scalar subquery with /without label; query.with_entities(*ent),
    replaces the SELECT list of the query with new entities. Roughly equivalent to
    a generative form of query.values() which accepts mapped entities as well as column
    expressions.'
  id: totrans-2421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 Query 方法：query.label(name)、query.as_scalar()，返回查询的语句作为标量子查询，带/不带标签；query.with_entities(*ent)，用新的实体替换查询的
    SELECT 列表。与 query.values() 的生成形式大致等效，接受映射实体以及列表达式。
- en: 'References: [#1920](https://www.sqlalchemy.org/trac/ticket/1920)'
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1920](https://www.sqlalchemy.org/trac/ticket/1920)
- en: '**[orm]**'
  id: totrans-2423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed recursion bug which could occur when moving an object from one reference
    to another, with backrefs involved, where the initiating parent was a subclass
    (with its own mapper) of the previous parent.
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了递归错误，当将对象从一个引用移动到另一个引用时，涉及到反向引用，其中启动父类是前一个父类的子类（带有自己的映射器）时，可能会出现递归错误。
- en: '**[orm]**'
  id: totrans-2425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a regression in 0.6.4 which occurred if you passed an empty list to “include_properties”
    on mapper()
  id: totrans-2426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.6.4 中出现的一个回归，如果你在 mapper() 上传递一个空列表给“include_properties”，就会出现这个问题。
- en: 'References: [#1918](https://www.sqlalchemy.org/trac/ticket/1918)'
  id: totrans-2427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1918](https://www.sqlalchemy.org/trac/ticket/1918)
- en: '**[orm]**'
  id: totrans-2428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed labeling bug in Query whereby the NamedTuple would mis-apply labels if
    any of the column expressions were un-labeled.
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中的标记错误，即如果任何列表达式未标记，则 NamedTuple 会错误地应用标签。
- en: '**[orm]**'
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Patched a case where query.join() would adapt the right side to the right side
    of the left’s join inappropriately
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修补了一个情况，其中 query.join() 会不适当地将右侧适应为左侧连接的右侧
- en: 'References: [#1925](https://www.sqlalchemy.org/trac/ticket/1925)'
  id: totrans-2432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1925](https://www.sqlalchemy.org/trac/ticket/1925)
- en: '**[orm]**'
  id: totrans-2433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.select_from() has been beefed up to help ensure that a subsequent call
    to query.join() will use the select_from() entity, assuming it’s a mapped entity
    and not a plain selectable, as the default “left” side, not the first entity in
    the Query object’s list of entities.
  id: totrans-2434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from() 已经增强，以确保后续对 query.join() 的调用将使用 select_from() 实体，假设它是一个映射实体而不是一个普通的可选择对象，作为默认的“左”侧，而不是查询对象的实体列表中的第一个实体。
- en: '**[orm]**'
  id: totrans-2435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The exception raised by Session when it is used subsequent to a subtransaction
    rollback (which is what happens when a flush fails in autocommit=False mode) has
    now been reworded (this is the “inactive due to a rollback in a subtransaction”
    message). In particular, if the rollback was due to an exception during flush(),
    the message states this is the case, and reiterates the string form of the original
    exception that occurred during flush. If the session is closed due to explicit
    usage of subtransactions (not very common), the message just states this is the
    case.
  id: totrans-2436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当会话在子事务回滚后（这是在 autocommit=False 模式下发生刷新失败时发生的情况）被用于后续操作时，会话引发的异常现在已经被重新表述了（这是“由于子事务中的回滚而无效”消息）。特别是，如果回滚是由于刷新期间的异常引起的，消息将说明这是情况，并重申在刷新期间发生的原始异常的字符串形式。如果会话由于显式使用子事务而关闭（这种情况并不常见），消息只说明这是情况。
- en: '**[orm]**'
  id: totrans-2437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The exception raised by Mapper when repeated requests to its initialization
    are made after initialization already failed no longer assumes the “hasattr” case,
    since there’s other scenarios in which this message gets emitted, and the message
    also does not compound onto itself multiple times - you get the same message for
    each attempt at usage. The misnomer “compiles” is being traded out for “initialize”.
  id: totrans-2438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当初始化已经失败后，如果对 Mapper 进行重复请求，则不再假设“hasattr”情况，因为这个消息被发出的其他场景，并且消息也不会多次叠加 - 每次尝试使用时都会得到相同的消息。误用的“compiles”正在被“initialize”替换。
- en: '**[orm]**'
  id: totrans-2439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.update() where ‘evaluate’ or ‘fetch’ expiration would fail
    if the column expression key was a class attribute with a different keyname as
    the actual column name.
  id: totrans-2440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 query.update() 中的错误，在这里‘evaluate’或‘fetch’过期将失败，如果列表达式键是具有不同键名的类属性作为实际列名。
- en: 'References: [#1935](https://www.sqlalchemy.org/trac/ticket/1935)'
  id: totrans-2441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1935](https://www.sqlalchemy.org/trac/ticket/1935)
- en: '**[orm]**'
  id: totrans-2442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an assertion during flush which ensures that no NULL-holding identity
    keys were generated on “newly persistent” objects. This can occur when user defined
    code inadvertently triggers flushes on not-fully-loaded objects.
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 flush 过程中添加了一个断言，确保“新持久化”对象上没有生成持有 NULL 的标识键。当用户定义的代码无意中触发了对未完全加载的对象的 flush
    时，就会出现这种情况。
- en: '**[orm]**'
  id: totrans-2444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: lazy loads for relationship attributes now use the current state, not the “committed”
    state, of foreign and primary key attributes when issuing SQL, if a flush is not
    in process. Previously, only the database-committed state would be used. In particular,
    this would cause a many-to-one get()-on-lazyload operation to fail, as autoflush
    is not triggered on these loads when the attributes are determined and the “committed”
    state may not be available.
  id: totrans-2445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当关系属性的延迟加载使用当前状态而不是“已提交”状态的外键和主键属性发出 SQL 时，如果没有进行 flush，则现在会使用当前状态。以前，只会使用数据库已提交的状态。特别是，这会导致许多对一的
    get()-on-lazyload 操作失败，因为在这些加载时不会触发自动 flush，当确定属性时，“已提交”状态可能不可用。
- en: 'References: [#1910](https://www.sqlalchemy.org/trac/ticket/1910)'
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1910](https://www.sqlalchemy.org/trac/ticket/1910)
- en: '**[orm]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A new flag on relationship(), load_on_pending, allows the lazy loader to fire
    off on pending objects without a flush taking place, as well as a transient object
    that’s been manually “attached” to the session. Note that this flag blocks attribute
    events from taking place when an object is loaded, so backrefs aren’t available
    until after a flush. The flag is only intended for very specific use cases.
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship() 上的一个新标志 load_on_pending，允许延迟加载器在未进行 flush 的情况下对待待定对象进行触发，以及手动“附加”到会话的瞬态对象。请注意，此标志在加载对象时阻止属性事件发生，因此直到
    flush 之后才可用反向引用。该标志仅用于非常特定的用例。
- en: '**[orm]**'
  id: totrans-2449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Another new flag on relationship(), cascade_backrefs, disables the “save-update”
    cascade when the event was initiated on the “reverse” side of a bidirectional
    relationship. This is a cleaner behavior so that many-to-ones can be set on a
    transient object without it getting sucked into the child object’s session, while
    still allowing the forward collection to cascade. We *might* default this to False
    in 0.7.
  id: totrans-2450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个 relationship() 上的新标志 cascade_backrefs，在“反向”关系的事件被初始化时禁用“save-update”级联。这是一种更干净的行为，使得可以在瞬态对象上设置许多对一，而不会被吸入子对象的会话，同时仍允许前向集合级联。我们*可能*会在
    0.7 中将其默认设置为 False。
- en: '**[orm]**'
  id: totrans-2451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Slight improvement to the behavior of “passive_updates=False” when placed only
    on the many-to-one side of a relationship; documentation has been clarified that
    passive_updates=False should really be on the one-to-many side.
  id: totrans-2452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在关系的“passive_updates=False”行为略有改进，当仅放在关系的多对一侧时；文档已经澄清 passive_updates=False
    应该真正放在一对多侧。
- en: '**[orm]**'
  id: totrans-2453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Placing passive_deletes=True on a many-to-one emits a warning, since you probably
    intended to put it on the one-to-many side.
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多对一上放置 passive_deletes=True 会发出警告，因为您可能打算将其放在一对多侧。
- en: '**[orm]**'
  id: totrans-2455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug that would prevent “subqueryload” from working correctly with single
    table inheritance for a relationship from a subclass - the “where type in (x,
    y, z)” only gets placed on the inside, instead of repeatedly.
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 会导致“subqueryload”与子类的关系在单表继承中无法正常工作 - “where type in (x, y,
    z)” 只会放在内部，而不是重复出现。
- en: '**[orm]**'
  id: totrans-2457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When using from_self() with single table inheritance, the “where type in (x,
    y, z)” is placed on the outside of the query only, instead of repeatedly. May
    make some more adjustments to this.
  id: totrans-2458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 from_self() 与单表继承时，“where type in (x, y, z)” 只会放在查询的外部，而不是重复出现。可能会对此进行一些调整。
- en: '**[orm]**'
  id: totrans-2459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: scoped_session emits a warning when configure() is called if a Session is already
    present (checks only the current thread)
  id: totrans-2460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 configure() 被调用时，scoped_session 会发出警告，如果已经存在一个 Session（仅检查当前线程）
- en: 'References: [#1924](https://www.sqlalchemy.org/trac/ticket/1924)'
  id: totrans-2461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1924](https://www.sqlalchemy.org/trac/ticket/1924)
- en: '**[orm]**'
  id: totrans-2462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: reworked the internals of mapper.cascade_iterator() to cut down method calls
    by about 9% in some circumstances.
  id: totrans-2463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了 mapper.cascade_iterator() 的内部结构，在某些情况下减少了约 9% 的方法调用。
- en: 'References: [#1932](https://www.sqlalchemy.org/trac/ticket/1932)'
  id: totrans-2464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1932](https://www.sqlalchemy.org/trac/ticket/1932)
- en: engine
  id: totrans-2465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-2466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed a regression in 0.6.4 whereby the change that allowed cursor errors to
    be raised consistently broke the result.lastrowid accessor. Test coverage has
    been added for result.lastrowid. Note that lastrowid is only supported by Pysqlite
    and some MySQL drivers, so isn’t super-useful in the general case.
  id: totrans-2467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.6.4中的一个回归，即允许一致引发游标错误的更改破坏了result.lastrowid访问器。为result.lastrowid添加了测试覆盖。请注意，lastrowid仅受Pysqlite和一些MySQL驱动程序支持，因此在一般情况下并不是特别有用。
- en: '**[engine]**'
  id: totrans-2468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: the logging message emitted by the engine when a connection is first used is
    now “BEGIN (implicit)” to emphasize that DBAPI has no explicit begin().
  id: totrans-2469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当首次使用连接时，引擎发出的日志消息现在是“BEGIN (implicit)”，以强调DBAPI没有显式的begin()。
- en: '**[engine]**'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: added “views=True” option to metadata.reflect(), will add the list of available
    views to those being reflected.
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在metadata.reflect()中添加了“views=True”选项，将添加可用视图列表到被反射的视图中。
- en: 'References: [#1936](https://www.sqlalchemy.org/trac/ticket/1936)'
  id: totrans-2472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1936](https://www.sqlalchemy.org/trac/ticket/1936)
- en: '**[engine]**'
  id: totrans-2473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: engine_from_config() now accepts ‘debug’ for ‘echo’, ‘echo_pool’, ‘force’ for
    ‘convert_unicode’, boolean values for ‘use_native_unicode’.
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: engine_from_config()现在接受‘debug’作为‘echo’，‘echo_pool’的‘force’，‘convert_unicode’的布尔值作为‘use_native_unicode’。
- en: 'References: [#1899](https://www.sqlalchemy.org/trac/ticket/1899)'
  id: totrans-2475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1899](https://www.sqlalchemy.org/trac/ticket/1899)
- en: sql
  id: totrans-2476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in TypeDecorator whereby the dialect-specific type was getting pulled
    in to generate the DDL for a given type, which didn’t always return the correct
    result.
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了TypeDecorator中的错误，其中特定于方言的类型被拉入以生成给定类型的DDL，这并不总是返回正确的结果。
- en: '**[sql]**'
  id: totrans-2479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator can now have a fully constructed type specified as its “impl”,
    in addition to a type class.
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator现在可以将一个完全构造的类型指定为其“impl”，而不仅仅是一个类型类。
- en: '**[sql]**'
  id: totrans-2481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator will now place itself as the resulting type for a binary expression
    where the type coercion rules would normally return its impl type - previously,
    a copy of the impl type would be returned which would have the TypeDecorator embedded
    into it as the “dialect” impl, this was probably an unintentional way of achieving
    the desired effect.
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator现在将自身放置为二进制表达式的结果类型，其中类型强制转换规则通常会返回其impl类型 - 以前，将返回impl类型的副本，该副本将TypeDecorator嵌入其中作为“dialect”
    impl，这可能是实现所需效果的无意的方式。
- en: '**[sql]**'
  id: totrans-2483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator.load_dialect_impl() returns “self.impl” by default, i.e. not the
    dialect implementation type of “self.impl”. This to support compilation correctly.
    Behavior can be user-overridden in exactly the same way as before to the same
    effect.
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator.load_dialect_impl()默认返回“self.impl”，即不返回“self.impl”的方言实现类型。这是为了正确支持编译。行为可以像以前一样被用户覆盖，产生相同的效果。
- en: '**[sql]**'
  id: totrans-2485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added type_coerce(expr, type_) expression element. Treats the given expression
    as the given type when evaluating expressions and processing result rows, but
    does not affect the generation of SQL, other than an anonymous label.
  id: totrans-2486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了type_coerce(expr, type_)表达式元素。在评估表达式和处理结果行时，将给定表达式视为给定类型，但不影响SQL的生成，除了一个匿名标签。
- en: '**[sql]**'
  id: totrans-2487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.tometadata() now copies Index objects associated with the Table as well.
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.tometadata()现在也复制与Table关联的Index对象。
- en: '**[sql]**'
  id: totrans-2489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.tometadata() issues a warning if the given Table is already present in
    the target MetaData - the existing Table object is returned.
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.tometadata()如果给定的Table已经存在于目标MetaData中，则会发出警告 - 返回现有的Table对象。
- en: '**[sql]**'
  id: totrans-2491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: An informative error message is raised if a Column which has not yet been assigned
    a name, i.e. as in declarative, is used in a context where it is exported to the
    columns collection of an enclosing select() construct, or if any construct involving
    that column is compiled before its name is assigned.
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个尚未分配名称的列（即在声明中）在导出到封闭select()构造的列集合的上下文中使用，或者在分配其名称之前编译涉及该列的任何构造时，将引发一个信息性错误消息。
- en: '**[sql]**'
  id: totrans-2493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: as_scalar(), label() can be called on a selectable which contains a Column that
    is not yet named.
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: as_scalar()，label()可以在包含尚未命名的列的可选择项上调用。
- en: 'References: [#1862](https://www.sqlalchemy.org/trac/ticket/1862)'
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1862](https://www.sqlalchemy.org/trac/ticket/1862)
- en: '**[sql]**'
  id: totrans-2496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed recursion overflow which could occur when operating with two expressions
    both of type “NullType”, but not the singleton NULLTYPE instance.
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在操作两个类型均为“NullType”但不是单例NULLTYPE实例时可能发生的递归溢出。
- en: 'References: [#1907](https://www.sqlalchemy.org/trac/ticket/1907)'
  id: totrans-2498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1907](https://www.sqlalchemy.org/trac/ticket/1907)
- en: postgresql
  id: totrans-2499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added “as_tuple” flag to ARRAY type, returns results as tuples instead of lists
    to allow hashing.
  id: totrans-2501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为ARRAY类型添加了“as_tuple”标志，返回结果作为元组而不是列表以允许哈希。
- en: '**[postgresql]**'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug which prevented “domain” built from a custom type such as “enum” from
    being reflected.
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止从自定义类型（如“enum”）构建的“domain”被反射的错误。
- en: 'References: [#1933](https://www.sqlalchemy.org/trac/ticket/1933)'
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1933](https://www.sqlalchemy.org/trac/ticket/1933)
- en: mysql
  id: totrans-2505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug involving reflection of CURRENT_TIMESTAMP default used with ON UPDATE
    clause, thanks to Taavi Burns
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及使用ON UPDATE子句的CURRENT_TIMESTAMP默认值的反射错误，感谢Taavi Burns。
- en: 'References: [#1940](https://www.sqlalchemy.org/trac/ticket/1940)'
  id: totrans-2508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1940](https://www.sqlalchemy.org/trac/ticket/1940)
- en: mssql
  id: totrans-2509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed reflection bug which did not properly handle reflection of unknown types.
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未正确处理未知类型反射的错误。
- en: 'References: [#1946](https://www.sqlalchemy.org/trac/ticket/1946)'
  id: totrans-2512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1946](https://www.sqlalchemy.org/trac/ticket/1946)
- en: '**[mssql]**'
  id: totrans-2513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug where aliasing of tables with “schema” would fail to compile properly.
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“schema”别名表时无法正确编译的错误。
- en: 'References: [#1943](https://www.sqlalchemy.org/trac/ticket/1943)'
  id: totrans-2515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1943](https://www.sqlalchemy.org/trac/ticket/1943)
- en: '**[mssql]**'
  id: totrans-2516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the reflection of indexes to use sys. catalogs, so that column names
    of any configuration (spaces, embedded commas, etc.) can be reflected. Note that
    reflection of indexes requires SQL Server 2005 or greater.
  id: totrans-2517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了索引的反射，使用sys.目录，以便可以反射任何配置的列名称（空格、嵌入逗号等）。请注意，反射索引需要SQL Server 2005或更高版本。
- en: 'References: [#1770](https://www.sqlalchemy.org/trac/ticket/1770)'
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1770](https://www.sqlalchemy.org/trac/ticket/1770)
- en: '**[mssql]**'
  id: totrans-2519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: mssql+pymssql dialect now honors the “port” portion of the URL instead of discarding
    it.
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mssql+pymssql方言现在尊重URL中的“port”���分，而不是丢弃它。
- en: 'References: [#1952](https://www.sqlalchemy.org/trac/ticket/1952)'
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1952](https://www.sqlalchemy.org/trac/ticket/1952)
- en: oracle
  id: totrans-2522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The implicit_returning argument to create_engine() is now honored regardless
    of detected version of Oracle. Previously, the flag would be forced to False if
    server version info was < 10.
  id: totrans-2524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在无论检测到的Oracle版本如何，create_engine()中的implicit_returning参数都会被尊重。以前，如果服务器版本信息<10，则该标志将被强制为False。
- en: 'References: [#1878](https://www.sqlalchemy.org/trac/ticket/1878)'
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1878](https://www.sqlalchemy.org/trac/ticket/1878)
- en: tests
  id: totrans-2526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests]**'
  id: totrans-2527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试]**'
- en: the NoseSQLAlchemyPlugin has been moved to a new package “sqlalchemy_nose” which
    installs along with “sqlalchemy”. This so that the “nosetests” script works as
    always but also allows the –with-coverage option to turn on coverage before SQLAlchemy
    modules are imported, allowing coverage to work correctly.
  id: totrans-2528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NoseSQLAlchemyPlugin已移至新包“sqlalchemy_nose”，与“sqlalchemy”一起安装。这样，“nosetests”脚本仍然可以正常工作，但也允许在导入SQLAlchemy模块之前打开覆盖率，从而使覆盖率能够正确工作。
- en: misc
  id: totrans-2529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-2530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: '@classproperty (soon/now @declared_attr) takes effect for __mapper_args__,
    __table_args__, __tablename__ on a base class that is not a mixin, as well as
    mixins.'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@classproperty（即将/现在 @declared_attr）对于不是混合类的基类上的__mapper_args__、__table_args__、__tablename__以及混合类都生效。'
- en: 'References: [#1922](https://www.sqlalchemy.org/trac/ticket/1922)'
  id: totrans-2532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1922](https://www.sqlalchemy.org/trac/ticket/1922)
- en: '**[declarative]**'
  id: totrans-2533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: '@classproperty ‘s official name/location for usage with declarative is sqlalchemy.ext.declarative.declared_attr.
    Same thing, but moving there since it is more of a “marker” that’s specific to
    declarative, not just an attribute technique.'
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@classproperty 在声明式中的官方名称/位置是sqlalchemy.ext.declarative.declared_attr。虽然是同一件事情，但由于它更像是一个特定于声明式的“标记”，而不仅仅是一个属性技术，所以将其移动到那里。'
- en: 'References: [#1915](https://www.sqlalchemy.org/trac/ticket/1915)'
  id: totrans-2535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1915](https://www.sqlalchemy.org/trac/ticket/1915)
- en: '**[declarative]**'
  id: totrans-2536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Fixed bug whereby columns on a mixin wouldn’t propagate correctly to a single-table,
    or joined-table, inheritance scheme where the attribute name is different than
    that of the column.,.
  id: totrans-2537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了混合类上的列无法正确传播到单表或联接表继承方案的错误，其中属性名称与列的名称不同。
- en: 'References: [#1930](https://www.sqlalchemy.org/trac/ticket/1930), [#1931](https://www.sqlalchemy.org/trac/ticket/1931)'
  id: totrans-2538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1930](https://www.sqlalchemy.org/trac/ticket/1930)，[#1931](https://www.sqlalchemy.org/trac/ticket/1931)
- en: '**[declarative]**'
  id: totrans-2539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: A mixin can now specify a column that overrides a column of the same name associated
    with a superclass. Thanks to Oystein Haaland.
  id: totrans-2540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在混合类可以指定一个列，该列覆盖了与超类关联的同名列。感谢Oystein Haaland。
- en: '**[informix]**'
  id: totrans-2541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: '*Major* cleanup / modernization of the Informix dialect for 0.6, courtesy Florian
    Apolloner.'
  id: totrans-2542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对Informix方言进行了*重大*清理/现代化，感谢Florian Apolloner。
- en: 'References: [#1906](https://www.sqlalchemy.org/trac/ticket/1906)'
  id: totrans-2543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1906](https://www.sqlalchemy.org/trac/ticket/1906)
- en: '**[misc]**'
  id: totrans-2544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【杂项】**'
- en: CircularDependencyError now has .cycles and .edges members, which are the set
    of elements involved in one or more cycles, and the set of edges as 2-tuples.
  id: totrans-2545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CircularDependencyError 现在具有 .cycles 和 .edges 成员，它们是一个或多个循环中涉及的元素集合，以及2元组的边集合。
- en: 'References: [#1890](https://www.sqlalchemy.org/trac/ticket/1890)'
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1890](https://www.sqlalchemy.org/trac/ticket/1890)
- en: orm
  id: totrans-2547
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: Added a new “lazyload” option “immediateload”. Issues the usual “lazy” load
    operation automatically as the object is populated. The use case here is when
    loading objects to be placed in an offline cache, or otherwise used after the
    session isn’t available, and straight ‘select’ loading, not ‘joined’ or ‘subquery’,
    is desired.
  id: totrans-2549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“lazyload”选项“immediateload”。在对象填充时自动发出通常的“lazy”加载操作。这里的用例是在加载要放置在离线缓存中的对象或在会话不可用后使用，并且希望进行直接的“select”加载，而不是“joined”或“subquery”。
- en: 'References: [#1914](https://www.sqlalchemy.org/trac/ticket/1914)'
  id: totrans-2550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1914](https://www.sqlalchemy.org/trac/ticket/1914)
- en: '**[orm]**'
  id: totrans-2551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: 'New Query methods: query.label(name), query.as_scalar(), return the query’s
    statement as a scalar subquery with /without label; query.with_entities(*ent),
    replaces the SELECT list of the query with new entities. Roughly equivalent to
    a generative form of query.values() which accepts mapped entities as well as column
    expressions.'
  id: totrans-2552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 Query 方法：query.label(name)，query.as_scalar()，将查询的语句返回为带有/不带有标签的标量子查询；query.with_entities(*ent)，用新实体替换查询的
    SELECT 列表。大致相当于 query.values() 的生成形式，它接受映射实体以及列表达式。
- en: 'References: [#1920](https://www.sqlalchemy.org/trac/ticket/1920)'
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1920](https://www.sqlalchemy.org/trac/ticket/1920)
- en: '**[orm]**'
  id: totrans-2554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: Fixed recursion bug which could occur when moving an object from one reference
    to another, with backrefs involved, where the initiating parent was a subclass
    (with its own mapper) of the previous parent.
  id: totrans-2555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了递归错误，该错误可能在将对象从一个引用移动到另一个引用时发生，并涉及反向引用，其中发起父级是前一个父级的子类（具有自己的映射器）。
- en: '**[orm]**'
  id: totrans-2556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: Fixed a regression in 0.6.4 which occurred if you passed an empty list to “include_properties”
    on mapper()
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.6.4中发生的回归，如果您将空列表传递给“include_properties”在 mapper() 上
- en: 'References: [#1918](https://www.sqlalchemy.org/trac/ticket/1918)'
  id: totrans-2558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1918](https://www.sqlalchemy.org/trac/ticket/1918)
- en: '**[orm]**'
  id: totrans-2559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: Fixed labeling bug in Query whereby the NamedTuple would mis-apply labels if
    any of the column expressions were un-labeled.
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了查询中的标签错误，在其中，如果任何列表达式未标记，则命名元组会错误地应用标签。
- en: '**[orm]**'
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: Patched a case where query.join() would adapt the right side to the right side
    of the left’s join inappropriately
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 query.join() 在不适当地将右侧适应为左侧连接的右侧的情况下的情况
- en: 'References: [#1925](https://www.sqlalchemy.org/trac/ticket/1925)'
  id: totrans-2563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1925](https://www.sqlalchemy.org/trac/ticket/1925)
- en: '**[orm]**'
  id: totrans-2564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: Query.select_from() has been beefed up to help ensure that a subsequent call
    to query.join() will use the select_from() entity, assuming it’s a mapped entity
    and not a plain selectable, as the default “left” side, not the first entity in
    the Query object’s list of entities.
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from() 已经得到加强，以确保后续调用 query.join() 将使用 select_from() 实体，假设它是一个映射实体而不是一个普通可选择项，并且默认“左”侧，而不是查询对象的实体列表中的第一个实体。
- en: '**[orm]**'
  id: totrans-2566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: The exception raised by Session when it is used subsequent to a subtransaction
    rollback (which is what happens when a flush fails in autocommit=False mode) has
    now been reworded (this is the “inactive due to a rollback in a subtransaction”
    message). In particular, if the rollback was due to an exception during flush(),
    the message states this is the case, and reiterates the string form of the original
    exception that occurred during flush. If the session is closed due to explicit
    usage of subtransactions (not very common), the message just states this is the
    case.
  id: totrans-2567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 Session 在子事务回滚后（这是在 autocommit=False 模式下刷新失败时发生的情况）后续使用时引发的异常已经被重新措辞（这是“由于子事务回滚而不活跃”消息）。特别地，如果回滚是由于刷新期间发生异常引起的，则消息说明了这一点，并且重申了在刷新期间发生的原始异常的字符串形式。如果会话由于明确使用子事务而关闭（并不常见），则消息只是说明了这一点。
- en: '**[orm]**'
  id: totrans-2568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】**'
- en: The exception raised by Mapper when repeated requests to its initialization
    are made after initialization already failed no longer assumes the “hasattr” case,
    since there’s other scenarios in which this message gets emitted, and the message
    also does not compound onto itself multiple times - you get the same message for
    each attempt at usage. The misnomer “compiles” is being traded out for “initialize”.
  id: totrans-2569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 Mapper 在初始化失败后再次对其进行重复请求时，引发的异常不再假定“hasattr”情况，因为还有其他情况会导致该消息被发出，并且该消息也不会多次复合
    - 每次尝试使用时都会得到相同的消息。误称“compiles”正在被“initialize”交换。
- en: '**[orm]**'
  id: totrans-2570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.update() where ‘evaluate’ or ‘fetch’ expiration would fail
    if the column expression key was a class attribute with a different keyname as
    the actual column name.
  id: totrans-2571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 query.update() 中的一个 bug，即当列表达式键是一个具有不同键名的类属性时，“evaluate”或“fetch”过期会失败。
- en: 'References: [#1935](https://www.sqlalchemy.org/trac/ticket/1935)'
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1935](https://www.sqlalchemy.org/trac/ticket/1935)
- en: '**[orm]**'
  id: totrans-2573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an assertion during flush which ensures that no NULL-holding identity
    keys were generated on “newly persistent” objects. This can occur when user defined
    code inadvertently triggers flushes on not-fully-loaded objects.
  id: totrans-2574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在刷新过程中添加了一个断言，确保“新持久化”对象上没有生成包含 NULL 的标识键。当用户定义的代码无意中触发了对尚未完全加载的对象的刷新时，就会发生这种情况。
- en: '**[orm]**'
  id: totrans-2575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: lazy loads for relationship attributes now use the current state, not the “committed”
    state, of foreign and primary key attributes when issuing SQL, if a flush is not
    in process. Previously, only the database-committed state would be used. In particular,
    this would cause a many-to-one get()-on-lazyload operation to fail, as autoflush
    is not triggered on these loads when the attributes are determined and the “committed”
    state may not be available.
  id: totrans-2576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当发出 SQL 时，关系属性的惰性加载现在使用当前状态，而不是“已提交”状态，如果刷新未在进行中。以前，只会使用数据库提交的状态。特别是，这将导致许多对一的
    get()-on-lazyload 操作失败，因为这些加载时不会触发自动刷新，并且可能无法使用“已提交”状态。
- en: 'References: [#1910](https://www.sqlalchemy.org/trac/ticket/1910)'
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1910](https://www.sqlalchemy.org/trac/ticket/1910)
- en: '**[orm]**'
  id: totrans-2578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A new flag on relationship(), load_on_pending, allows the lazy loader to fire
    off on pending objects without a flush taking place, as well as a transient object
    that’s been manually “attached” to the session. Note that this flag blocks attribute
    events from taking place when an object is loaded, so backrefs aren’t available
    until after a flush. The flag is only intended for very specific use cases.
  id: totrans-2579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 relationship() 上的一个新标志，load_on_pending，允许懒加载器在不进行刷新的情况下对待挂起的对象进行处理，以及手动“附加”到会话的临时对象。请注意，当加载对象时，此标志会阻止属性事件发生，因此在刷新后才能使用反向引用。该标志仅用于非常特定的用例。
- en: '**[orm]**'
  id: totrans-2580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Another new flag on relationship(), cascade_backrefs, disables the “save-update”
    cascade when the event was initiated on the “reverse” side of a bidirectional
    relationship. This is a cleaner behavior so that many-to-ones can be set on a
    transient object without it getting sucked into the child object’s session, while
    still allowing the forward collection to cascade. We *might* default this to False
    in 0.7.
  id: totrans-2581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 relationship() 上的另一个新标志，cascade_backrefs，在双向关系的“反向”一侧启动事件时禁用了“save-update”级联。这是一种更清晰的行为，以便可以在临时对象上设置多对一，而不会被吸入到子对象的会话中，同时仍允许向前集合进行级联。我们*可能*会在
    0.7 中将其默认设置为 False。
- en: '**[orm]**'
  id: totrans-2582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Slight improvement to the behavior of “passive_updates=False” when placed only
    on the many-to-one side of a relationship; documentation has been clarified that
    passive_updates=False should really be on the one-to-many side.
  id: totrans-2583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 passive_updates=False 仅放置在关系的多对一一侧时，对“passive_updates=False”的行为进行了轻微改进；文档已经澄清，passive_updates=False
    实际上应该放在一对多的一侧。
- en: '**[orm]**'
  id: totrans-2584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Placing passive_deletes=True on a many-to-one emits a warning, since you probably
    intended to put it on the one-to-many side.
  id: totrans-2585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多对一上放置 passive_deletes=True 会发出警告，因为您可能打算将其放在一对多的一侧。
- en: '**[orm]**'
  id: totrans-2586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug that would prevent “subqueryload” from working correctly with single
    table inheritance for a relationship from a subclass - the “where type in (x,
    y, z)” only gets placed on the inside, instead of repeatedly.
  id: totrans-2587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 会阻止“subqueryload”与单表继承一起使用时正常工作，即从子类到关系的关系 - “where type in
    (x, y, z)” 只会放置在内部，而不是重复出现。
- en: '**[orm]**'
  id: totrans-2588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When using from_self() with single table inheritance, the “where type in (x,
    y, z)” is placed on the outside of the query only, instead of repeatedly. May
    make some more adjustments to this.
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用单表继承时，from_self()中的“where type in (x, y, z)”仅放在查询的外部，而不是重复出现。可能需要对此进行一些调整。
- en: '**[orm]**'
  id: totrans-2590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: scoped_session emits a warning when configure() is called if a Session is already
    present (checks only the current thread)
  id: totrans-2591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果已经存在一个Session（仅检查当前线程），则scoped_session在调用configure()时会发出警告。
- en: 'References: [#1924](https://www.sqlalchemy.org/trac/ticket/1924)'
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1924](https://www.sqlalchemy.org/trac/ticket/1924)
- en: '**[orm]**'
  id: totrans-2593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: reworked the internals of mapper.cascade_iterator() to cut down method calls
    by about 9% in some circumstances.
  id: totrans-2594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了mapper.cascade_iterator()的内部结构，在某些情况下减少了约9%的方法调用。
- en: 'References: [#1932](https://www.sqlalchemy.org/trac/ticket/1932)'
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1932](https://www.sqlalchemy.org/trac/ticket/1932)
- en: engine
  id: totrans-2596
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-2597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed a regression in 0.6.4 whereby the change that allowed cursor errors to
    be raised consistently broke the result.lastrowid accessor. Test coverage has
    been added for result.lastrowid. Note that lastrowid is only supported by Pysqlite
    and some MySQL drivers, so isn’t super-useful in the general case.
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.6.4中的一个回归问题，即允许一致引发游标错误的更改破坏了result.lastrowid访问器。为result.lastrowid添加了测试覆盖。请注意，lastrowid仅由Pysqlite和一些MySQL驱动程序支持，在一般情况下并不是特别有用。
- en: '**[engine]**'
  id: totrans-2599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: the logging message emitted by the engine when a connection is first used is
    now “BEGIN (implicit)” to emphasize that DBAPI has no explicit begin().
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当连接首次被使用时，引擎发出的日志消息现在是“BEGIN (implicit)”，以强调DBAPI没有显式的begin()。
- en: '**[engine]**'
  id: totrans-2601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: added “views=True” option to metadata.reflect(), will add the list of available
    views to those being reflected.
  id: totrans-2602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在metadata.reflect()中添加了“views=True”选项，将可用视图列表添加到要反射的视图中。
- en: 'References: [#1936](https://www.sqlalchemy.org/trac/ticket/1936)'
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1936](https://www.sqlalchemy.org/trac/ticket/1936)
- en: '**[engine]**'
  id: totrans-2604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: engine_from_config() now accepts ‘debug’ for ‘echo’, ‘echo_pool’, ‘force’ for
    ‘convert_unicode’, boolean values for ‘use_native_unicode’.
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: engine_from_config()现在接受‘debug’作为‘echo’的‘echo_pool’，‘force’作为‘convert_unicode’，布尔值作为‘use_native_unicode’。
- en: 'References: [#1899](https://www.sqlalchemy.org/trac/ticket/1899)'
  id: totrans-2606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1899](https://www.sqlalchemy.org/trac/ticket/1899)
- en: sql
  id: totrans-2607
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in TypeDecorator whereby the dialect-specific type was getting pulled
    in to generate the DDL for a given type, which didn’t always return the correct
    result.
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了TypeDecorator中的一个错误，即方言特定类型被引入以生成给定类型的DDL，这并不总是返回正确的结果。
- en: '**[sql]**'
  id: totrans-2610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator can now have a fully constructed type specified as its “impl”,
    in addition to a type class.
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator现在可以指定一个完全构造的类型作为其“impl”，而不仅仅是一个类型类。
- en: '**[sql]**'
  id: totrans-2612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator will now place itself as the resulting type for a binary expression
    where the type coercion rules would normally return its impl type - previously,
    a copy of the impl type would be returned which would have the TypeDecorator embedded
    into it as the “dialect” impl, this was probably an unintentional way of achieving
    the desired effect.
  id: totrans-2613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator现在会将自身作为二进制表达式的结果类型，其中类型强制转换规则通常会返回其实现类型 - 以前，会返回一个impl类型的副本，其中TypeDecorator被嵌入其中作为“方言”实现，这可能是一种无意中实现所需效果的方式。
- en: '**[sql]**'
  id: totrans-2614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator.load_dialect_impl() returns “self.impl” by default, i.e. not the
    dialect implementation type of “self.impl”. This to support compilation correctly.
    Behavior can be user-overridden in exactly the same way as before to the same
    effect.
  id: totrans-2615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator.load_dialect_impl()默认返回“self.impl”，即不返回“self.impl”的方言实现类型。这样可以支持正确的编译。行为可以像以前一样被用户覆盖，产生相同的效果。
- en: '**[sql]**'
  id: totrans-2616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added type_coerce(expr, type_) expression element. Treats the given expression
    as the given type when evaluating expressions and processing result rows, but
    does not affect the generation of SQL, other than an anonymous label.
  id: totrans-2617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了type_coerce(expr, type_)表达式元素。在评估表达式和处理结果行时，将给定表达式视为给定类型，但不影响SQL的生成，除了一个匿名标签。
- en: '**[sql]**'
  id: totrans-2618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.tometadata() now copies Index objects associated with the Table as well.
  id: totrans-2619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.tometadata()现在也会复制与Table相关联的Index对象。
- en: '**[sql]**'
  id: totrans-2620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.tometadata() issues a warning if the given Table is already present in
    the target MetaData - the existing Table object is returned.
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.tometadata()如果给定的Table已经存在于目标MetaData中，则会发出警告 - 返回现有的Table对象。
- en: '**[sql]**'
  id: totrans-2622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: An informative error message is raised if a Column which has not yet been assigned
    a name, i.e. as in declarative, is used in a context where it is exported to the
    columns collection of an enclosing select() construct, or if any construct involving
    that column is compiled before its name is assigned.
  id: totrans-2623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个尚未分配名称的 Column，在声明时使用，在导出到封闭的 select() 构造的 columns 集合中使用，或者在分配名称之前编译涉及该列的任何构造时，会引发一个信息性错误消息。
- en: '**[sql]**'
  id: totrans-2624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: as_scalar(), label() can be called on a selectable which contains a Column that
    is not yet named.
  id: totrans-2625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`as_scalar()`、`label()` 可以在包含尚未命名的 Column 的可选对象上调用。'
- en: 'References: [#1862](https://www.sqlalchemy.org/trac/ticket/1862)'
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1862](https://www.sqlalchemy.org/trac/ticket/1862)
- en: '**[sql]**'
  id: totrans-2627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed recursion overflow which could occur when operating with two expressions
    both of type “NullType”, but not the singleton NULLTYPE instance.
  id: totrans-2628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了操作两个类型均为 “NullType” 的表达式时可能发生的递归溢出，但不是单例 NULLTYPE 实例。
- en: 'References: [#1907](https://www.sqlalchemy.org/trac/ticket/1907)'
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1907](https://www.sqlalchemy.org/trac/ticket/1907)
- en: postgresql
  id: totrans-2630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added “as_tuple” flag to ARRAY type, returns results as tuples instead of lists
    to allow hashing.
  id: totrans-2632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ARRAY 类型中添加了 “as_tuple” 标志，返回结果为元组而不是列表，以允许哈希。
- en: '**[postgresql]**'
  id: totrans-2633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug which prevented “domain” built from a custom type such as “enum” from
    being reflected.
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，阻止了从自定义类型（如 “enum”）构建的 “domain” 反射。
- en: 'References: [#1933](https://www.sqlalchemy.org/trac/ticket/1933)'
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1933](https://www.sqlalchemy.org/trac/ticket/1933)
- en: mysql
  id: totrans-2636
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug involving reflection of CURRENT_TIMESTAMP default used with ON UPDATE
    clause, thanks to Taavi Burns
  id: totrans-2638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 ON UPDATE 子句一起使用的 CURRENT_TIMESTAMP 默认值的反射bug，感谢 Taavi Burns。
- en: 'References: [#1940](https://www.sqlalchemy.org/trac/ticket/1940)'
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1940](https://www.sqlalchemy.org/trac/ticket/1940)
- en: mssql
  id: totrans-2640
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed reflection bug which did not properly handle reflection of unknown types.
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个反射bug，未能正确处理未知类型的反射。
- en: 'References: [#1946](https://www.sqlalchemy.org/trac/ticket/1946)'
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1946](https://www.sqlalchemy.org/trac/ticket/1946)
- en: '**[mssql]**'
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug where aliasing of tables with “schema” would fail to compile properly.
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了带有 “schema” 别名的表的别名化可能无法正确编译的bug。
- en: 'References: [#1943](https://www.sqlalchemy.org/trac/ticket/1943)'
  id: totrans-2646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1943](https://www.sqlalchemy.org/trac/ticket/1943)
- en: '**[mssql]**'
  id: totrans-2647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the reflection of indexes to use sys. catalogs, so that column names
    of any configuration (spaces, embedded commas, etc.) can be reflected. Note that
    reflection of indexes requires SQL Server 2005 or greater.
  id: totrans-2648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了索引的反射，以使用 sys. 目录，以便可以反射任何配置的列名（空格，嵌入逗号等）。请注意，反射索引需要 SQL Server 2005 或更高版本。
- en: 'References: [#1770](https://www.sqlalchemy.org/trac/ticket/1770)'
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1770](https://www.sqlalchemy.org/trac/ticket/1770)
- en: '**[mssql]**'
  id: totrans-2650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: mssql+pymssql dialect now honors the “port” portion of the URL instead of discarding
    it.
  id: totrans-2651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mssql+pymssql 方言现在会尊重 URL 中的 “port” 部分，而不是将其丢弃。
- en: 'References: [#1952](https://www.sqlalchemy.org/trac/ticket/1952)'
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1952](https://www.sqlalchemy.org/trac/ticket/1952)
- en: oracle
  id: totrans-2653
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The implicit_returning argument to create_engine() is now honored regardless
    of detected version of Oracle. Previously, the flag would be forced to False if
    server version info was < 10.
  id: totrans-2655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，不管 Oracle 检测到的版本如何，`create_engine()` 的 `implicit_returning` 参数都会被正确处理。以前，如果服务器版本信息小于
    10，则该标志会被强制设为 False。
- en: 'References: [#1878](https://www.sqlalchemy.org/trac/ticket/1878)'
  id: totrans-2656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1878](https://www.sqlalchemy.org/trac/ticket/1878)
- en: tests
  id: totrans-2657
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests]**'
  id: totrans-2658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests]**'
- en: the NoseSQLAlchemyPlugin has been moved to a new package “sqlalchemy_nose” which
    installs along with “sqlalchemy”. This so that the “nosetests” script works as
    always but also allows the –with-coverage option to turn on coverage before SQLAlchemy
    modules are imported, allowing coverage to work correctly.
  id: totrans-2659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NoseSQLAlchemyPlugin 已移至新包 “sqlalchemy_nose”，该包随 “sqlalchemy” 一起安装。这样，“nosetests”
    脚本仍然可以正常工作，但也允许使用 --with-coverage 选项在导入 SQLAlchemy 模块之前打开覆盖，从而使覆盖工作正常。
- en: misc
  id: totrans-2660
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[declarative]**'
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: '@classproperty (soon/now @declared_attr) takes effect for __mapper_args__,
    __table_args__, __tablename__ on a base class that is not a mixin, as well as
    mixins.'
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@classproperty（即将/现在 @declared_attr）对于不是 mixin 的基类上的 __mapper_args__、__table_args__、__tablename__
    以及 mixins 都生效。'
- en: 'References: [#1922](https://www.sqlalchemy.org/trac/ticket/1922)'
  id: totrans-2663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1922](https://www.sqlalchemy.org/trac/ticket/1922)
- en: '**[declarative]**'
  id: totrans-2664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: '@classproperty ‘s official name/location for usage with declarative is sqlalchemy.ext.declarative.declared_attr.
    Same thing, but moving there since it is more of a “marker” that’s specific to
    declarative, not just an attribute technique.'
  id: totrans-2665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@classproperty的官方名称/位置，用于与declarative一起使用的是sqlalchemy.ext.declarative.declared_attr。虽然是同一件事情，但由于它更像是一个特定于declarative的“标记”，而不仅仅是一个属性技术，所以将其移动到那里。'
- en: 'References: [#1915](https://www.sqlalchemy.org/trac/ticket/1915)'
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1915](https://www.sqlalchemy.org/trac/ticket/1915)
- en: '**[declarative]**'
  id: totrans-2667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed bug whereby columns on a mixin wouldn’t propagate correctly to a single-table,
    or joined-table, inheritance scheme where the attribute name is different than
    that of the column.,.
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即mixin上的列无法正确传播到单表或联合表继承方案中，其中属性名称与列的名称不同。
- en: 'References: [#1930](https://www.sqlalchemy.org/trac/ticket/1930), [#1931](https://www.sqlalchemy.org/trac/ticket/1931)'
  id: totrans-2669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1930](https://www.sqlalchemy.org/trac/ticket/1930), [#1931](https://www.sqlalchemy.org/trac/ticket/1931)
- en: '**[declarative]**'
  id: totrans-2670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: A mixin can now specify a column that overrides a column of the same name associated
    with a superclass. Thanks to Oystein Haaland.
  id: totrans-2671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在mixin可以指定一个列，该列覆盖了与超类关联的同名列。感谢Oystein Haaland。
- en: '**[informix]**'
  id: totrans-2672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: '*Major* cleanup / modernization of the Informix dialect for 0.6, courtesy Florian
    Apolloner.'
  id: totrans-2673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*重大*清理/现代化Informix方言为0.6，由Florian Apolloner提供。'
- en: 'References: [#1906](https://www.sqlalchemy.org/trac/ticket/1906)'
  id: totrans-2674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1906](https://www.sqlalchemy.org/trac/ticket/1906)
- en: '**[misc]**'
  id: totrans-2675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc]**'
- en: CircularDependencyError now has .cycles and .edges members, which are the set
    of elements involved in one or more cycles, and the set of edges as 2-tuples.
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CircularDependencyError现在具有.cycles和.edges成员，它们是一个或多个循环中涉及的元素集合，以及作为2元组的边集合。
- en: 'References: [#1890](https://www.sqlalchemy.org/trac/ticket/1890)'
  id: totrans-2677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1890](https://www.sqlalchemy.org/trac/ticket/1890)
- en: 0.6.4
  id: totrans-2678
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.4
- en: 'Released: Tue Sep 07 2010'
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Tue Sep 07 2010
- en: orm
  id: totrans-2680
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The name ConcurrentModificationError has been changed to StaleDataError, and
    descriptive error messages have been revised to reflect exactly what the issue
    is. Both names will remain available for the foreseeable future for schemes that
    may be specifying ConcurrentModificationError in an “except:” clause.
  id: totrans-2682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ConcurrentModificationError的名称已更改为StaleDataError，并且描述性错误消息已经修订，以准确反映问题所在。在可预见的未来，这两个名称都将保持可用，以供可能在“except:”子句中指定ConcurrentModificationError的方案使用。
- en: '**[orm]**'
  id: totrans-2683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a mutex to the identity map which mutexes remove operations against iteration
    methods, which now pre-buffer before returning an iterable. This because asynchronous
    gc can remove items via the gc thread at any time.
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向identity map添加了一个互斥锁，该互斥锁对迭代方法中的删除操作进行了互斥，现在在返回可迭代对象之前会预先缓冲。这是因为异步gc可以随时通过gc线程删除项目。
- en: 'References: [#1891](https://www.sqlalchemy.org/trac/ticket/1891)'
  id: totrans-2685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1891](https://www.sqlalchemy.org/trac/ticket/1891)
- en: '**[orm]**'
  id: totrans-2686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The Session class is now present in sqlalchemy.orm.*. We’re moving away from
    the usage of create_session(), which has non-standard defaults, for those situations
    where a one-step Session constructor is desired. Most users should stick with
    sessionmaker() for general use, however.
  id: totrans-2687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session类现在存在于sqlalchemy.orm.*中。我们正在摆脱create_session()的使用，该方法具有非标准的默认值，用于那些需要一步构造Session的情况。然而，大多数用户应该继续使用sessionmaker()进行一般用途。
- en: '**[orm]**'
  id: totrans-2688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.with_parent() now accepts transient objects and will use the non-persistent
    values of their pk/fk attributes in order to formulate the criterion. Docs are
    also clarified as to the purpose of with_parent().
  id: totrans-2689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.with_parent()现在接受瞬态对象，并将使用它们的主键/外键属性的非持久化值来制定条件。文档也对with_parent()的目的进行了澄清。
- en: '**[orm]**'
  id: totrans-2690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The include_properties and exclude_properties arguments to mapper() now accept
    Column objects as members in addition to strings. This so that same-named Column
    objects, such as those within a join(), can be disambiguated.
  id: totrans-2691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()的include_properties和exclude_properties参数现在除了字符串外，还接受列对象作为成员。这样，可以消除join()中的同名列对象等情况。
- en: '**[orm]**'
  id: totrans-2692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is now emitted if a mapper is created against a join or other single
    selectable that includes multiple columns with the same name in its .c. collection,
    and those columns aren’t explicitly named as part of the same or separate attributes
    (or excluded). In 0.7 this warning will be an exception. Note that this warning
    is not emitted when the combination occurs as a result of inheritance, so that
    attributes still allow being overridden naturally.. In 0.7 this will be improved
    further.
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果对包含多个具有相同名称的列的join或其他单个可选择项创建了映射器，并且这些列没有明确命名为相同或不同的属性（或排除），则现在会发出警告。在0.7版本中，此警告将变为异常。请注意，当组合发生在继承的结果时，不会发出此警告，因此属性仍然可以自然地被覆盖。在0.7版本中，这将进一步改进。
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-2694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-2695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The primary_key argument to mapper() can now specify a series of columns that
    are only a subset of the calculated “primary key” columns of the mapped selectable,
    without an error being raised. This helps for situations where a selectable’s
    effective primary key is simpler than the number of columns in the selectable
    that are actually marked as “primary_key”, such as a join against two tables on
    their primary key columns.
  id: totrans-2696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()的primary_key参数现在可以指定一系列列，这些列仅是映射可选择项的计算“主键”列的子集，而不会引发错误。这有助于处理情况，其中可选择项的有效主键比实际标记为“主键”的可选择项中的列数更简单，例如在两个表的主键列上进行连接。
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-2698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An object that’s been deleted now gets a flag ‘deleted’, which prohibits the
    object from being re-add()ed to the session, as previously the object would live
    in the identity map silently until its attributes were accessed. The make_transient()
    function now resets this flag along with the “key” flag.
  id: totrans-2699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在已删除的对象会得到一个名为‘deleted’的标志，这会阻止将对象重新添加到会话中，因为以前对象会在其属性被访问之前悄悄地存在于标识映射中。make_transient()函数现在会重置此标志以及“key”标志。
- en: '**[orm]**'
  id: totrans-2700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: make_transient() can be safely called on an already transient instance.
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient()可以安全地在已经是瞬态实例上调用。
- en: '**[orm]**'
  id: totrans-2702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a warning is emitted in mapper() if the polymorphic_on column is not present
    either in direct or derived form in the mapped selectable or in the with_polymorphic
    selectable, instead of silently ignoring it. Look for this to become an exception
    in 0.7.
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在mapper()中没有在映射的可选择项中或在with_polymorphic可选择项中以直接或派生形式存在polymorphic_on列，则会发出警告，而不是默默地忽略它。预计在0.7版本中将变为异常。
- en: '**[orm]**'
  id: totrans-2704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Another pass through the series of error messages emitted when relationship()
    is configured with ambiguous arguments. The “foreign_keys” setting is no longer
    mentioned, as it is almost never needed and it is preferable users set up correct
    ForeignKey metadata, which is now the recommendation. If ‘foreign_keys’ is used
    and is incorrect, the message suggests the attribute is probably unnecessary.
    Docs for the attribute are beefed up. This because all confused relationship()
    users on the ML appear to be attempting to use foreign_keys due to the message,
    which only confuses them further since Table metadata is much clearer.
  id: totrans-2705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当relationship()配置具有模糊参数时，再次查看发出的一系列错误消息。现在不再提到“foreign_keys”设置，因为几乎不需要，最好用户设置正确的ForeignKey元数据，这是现在的建议。如果使用了‘foreign_keys’并且不正确，消息会建议该属性可能是不必要的。增加了属性的文档。这是因为ML上所有困惑的relationship()用户似乎都试图使用foreign_keys，因为消息只会让他们更加困惑，因为Table元数据更加清晰。
- en: '**[orm]**'
  id: totrans-2706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: If the “secondary” table has no ForeignKey metadata and no foreign_keys is set,
    even though the user is passing screwed up information, it is assumed that primary/secondaryjoin
    expressions should consider only and all cols in “secondary” to be foreign. It’s
    not possible with “secondary” for the foreign keys to be elsewhere in any case.
    A warning is now emitted instead of an error, and the mapping succeeds.
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“secondary”表没有ForeignKey元数据并且没有设置foreign_keys，即使用户传递了错误的信息，也假定primary/secondaryjoin表达式应仅考虑“secondary”中的所有列为外键。在任何情况下，“secondary”中的外键都不可能在其他地方。现在发出警告而不是错误，并且映射成功。
- en: 'References: [#1877](https://www.sqlalchemy.org/trac/ticket/1877)'
  id: totrans-2708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1877](https://www.sqlalchemy.org/trac/ticket/1877)
- en: '**[orm]**'
  id: totrans-2709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Moving an o2m object from one collection to another, or vice versa changing
    the referenced object by an m2o, where the foreign key is also a member of the
    primary key, will now be more carefully checked during flush if the change in
    value of the foreign key on the “many” side is the result of a change in the primary
    key of the “one” side, or if the “one” is just a different object. In one case,
    a cascade-capable DB would have cascaded the value already and we need to look
    at the “new” PK value to do an UPDATE, in the other we need to continue looking
    at the “old”. We now look at the “old”, assuming passive_updates=True, unless
    we know it was a PK switch that triggered the change.
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个o2m对象从一个集合移动到另一个集合，或者通过m2o更改引用对象，其中外键也是主键的成员，现在在flush期间将更加仔细地检查，如果“多”一侧的外键值的变化是由于“一”一侧主键的变化引起的，或者如果“一”只是一个不同的对象。在一个情况下，具有级联功能的数据库可能已经级联了该值，我们需要查看“新”的PK值来执行UPDATE，在另一种情况下，我们需要继续查看“旧”的PK值。我们现在查看“旧”的PK值，假设passive_updates=True，除非我们知道触发更改的是PK切换。
- en: 'References: [#1856](https://www.sqlalchemy.org/trac/ticket/1856)'
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1856](https://www.sqlalchemy.org/trac/ticket/1856)
- en: '**[orm]**'
  id: totrans-2712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The value of version_id_col can be changed manually, and this will result in
    an UPDATE of the row. Versioned UPDATEs and DELETEs now use the “committed” value
    of the version_id_col in the WHERE clause and not the pending changed value. The
    version generator is also bypassed if manual changes are present on the attribute.
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: version_id_col的值可以手动更改，这将导致行的UPDATE。版本化的UPDATE和DELETE现在使用version_id_col的“已提交”值作为WHERE子句，而不是挂起的更改值。如果属性上存在手动更改，则版本生成器也会被绕过。
- en: 'References: [#1857](https://www.sqlalchemy.org/trac/ticket/1857)'
  id: totrans-2714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1857](https://www.sqlalchemy.org/trac/ticket/1857)
- en: '**[orm]**'
  id: totrans-2715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the usage of merge() when used with concrete inheriting mappers. Such
    mappers frequently have so-called “concrete” attributes, which are subclass attributes
    that “disable” propagation from the parent - these needed to allow a merge() operation
    to pass through without effect.
  id: totrans-2716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与具体继承映射器一起使用merge()时的问题。这样的映射器经常具有所谓的“具体”属性，即“禁用”从父类传播的子类属性 - 这些属性需要允许merge()操作无效。
- en: '**[orm]**'
  id: totrans-2717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Specifying a non-column based argument for column_mapped_collection, including
    string, text() etc., will raise an error message that specifically asks for a
    column element, no longer misleads with incorrect information about text() or
    literal().
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为column_mapped_collection指定非基于列的参数，包括字符串、text()等，将引发一个错误消息，明确要求一个列元素，不再提供关于text()或literal()的错误信息。
- en: 'References: [#1863](https://www.sqlalchemy.org/trac/ticket/1863)'
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1863](https://www.sqlalchemy.org/trac/ticket/1863)
- en: '**[orm]**'
  id: totrans-2720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Similarly, for relationship(), foreign_keys, remote_side, order_by - all column-based
    expressions are enforced - lists of strings are explicitly disallowed since this
    is a very common error
  id: totrans-2721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样地，对于relationship()、foreign_keys、remote_side、order_by等 - 所有基于列的表达式都是强制执行的 -
    字符串列表明确禁止，因为这是一个非常常见的错误。
- en: '**[orm]**'
  id: totrans-2722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Dynamic attributes don’t support collection population - added an assertion
    for when set_committed_value() is called, as well as when joinedload() or subqueryload()
    options are applied to a dynamic attribute, instead of failure / silent failure.
  id: totrans-2723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动态属性不支持集合填充 - 当调用set_committed_value()时添加了一个断言，以及当将joinedload()或subqueryload()选项应用于动态属性时，而不是失败/静默失败。
- en: 'References: [#1864](https://www.sqlalchemy.org/trac/ticket/1864)'
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1864](https://www.sqlalchemy.org/trac/ticket/1864)
- en: '**[orm]**'
  id: totrans-2725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby generating a Query derived from one which had the same column
    repeated with different label names, typically in some UNION situations, would
    fail to propagate the inner columns completely to the outer query.
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即从一个具有相同列但具有不同标签名称的Query生成的Query，在某些UNION情况下通常会失败，无法完全将内部列传播到外部查询。
- en: 'References: [#1852](https://www.sqlalchemy.org/trac/ticket/1852)'
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1852](https://www.sqlalchemy.org/trac/ticket/1852)
- en: '**[orm]**'
  id: totrans-2728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: object_session() raises the proper UnmappedInstanceError when presented with
    an unmapped instance.
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当提供一个未映射的实例时，object_session()会引发正确的UnmappedInstanceError。
- en: 'References: [#1881](https://www.sqlalchemy.org/trac/ticket/1881)'
  id: totrans-2730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1881](https://www.sqlalchemy.org/trac/ticket/1881)
- en: '**[orm]**'
  id: totrans-2731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Applied further memoizations to calculated Mapper properties, with significant
    (~90%) runtime mapper.py call count reduction in heavily polymorphic mapping configurations.
  id: totrans-2732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对计算的Mapper属性应用了进一步的记忆化，显著减少了在高度多态映射配置中的运行时mapper.py调用次数（约90%）。
- en: '**[orm]**'
  id: totrans-2733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper _get_col_to_prop private method used by the versioning example is deprecated;
    now use mapper.get_property_by_column() which will remain the public method for
    this.
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由版本控制示例使用的 mapper _get_col_to_prop 私有方法已经过时；现在请使用 mapper.get_property_by_column()，这将保持为此公共方法。
- en: '**[orm]**'
  id: totrans-2735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: the versioning example works correctly now if versioning on a col that was formerly
    NULL.
  id: totrans-2736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在以前是 NULL 的列上进行版本控制，那么版本示例现在可以正确地工作了。
- en: examples
  id: totrans-2737
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-2738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: The beaker_caching example has been reorganized such that the Session, cache
    manager, declarative_base are part of environment, and custom cache code is portable
    and now within “caching_query.py”. This allows the example to be easier to “drop
    in” to existing projects.
  id: totrans-2739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: beaker_caching 示例已经重新组织，使得 Session、缓存管理器、declarative_base 成为环境的一部分，并且自定义的缓存代码是可移植的，现在在“caching_query.py”中。这样可以让示例更容易“插入”到现有项目中。
- en: '**[examples]**'
  id: totrans-2740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: the history_meta versioning recipe sets “unique=False” when copying columns,
    so that the versioning table handles multiple rows with repeating values.
  id: totrans-2741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: history_meta 版本控制示例在复制列时设置了“unique=False”，这样版本控制表就可以处理具有重复值的多行。
- en: 'References: [#1887](https://www.sqlalchemy.org/trac/ticket/1887)'
  id: totrans-2742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1887](https://www.sqlalchemy.org/trac/ticket/1887)
- en: engine
  id: totrans-2743
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-2744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Calling fetchone() or similar on a result that has already been exhausted, has
    been closed, or is not a result-returning result now raises ResourceClosedError,
    a subclass of InvalidRequestError, in all cases, regardless of backend. Previously,
    some DBAPIs would raise ProgrammingError (i.e. pysqlite), others would return
    None leading to downstream breakages (i.e. MySQL-python).
  id: totrans-2745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对已经耗尽、已经关闭或者不是返回结果的结果集调用 fetchone() 或类似方法现在会在所有情况下都引发 ResourceClosedError 错误，这是
    InvalidRequestError 的子类，无论后端如何。以前，一些 DBAPI 会引发 ProgrammingError（例如 pysqlite），其他一些则会返回
    None，导致下游出现故障（例如 MySQL-python）。
- en: '**[engine]**'
  id: totrans-2746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Fixed bug in Connection whereby if a “disconnect” event occurred in the “initialize”
    phase of the first connection pool connect, an AttributeError would be raised
    when the Connection would attempt to invalidate the DBAPI connection.
  id: totrans-2747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Connection 中的一个 bug，即如果在第一个连接池连接的“初始化”阶段发生了“断开”事件，那么当 Connection 尝试使 DBAPI
    连接无效时会引发 AttributeError。
- en: 'References: [#1894](https://www.sqlalchemy.org/trac/ticket/1894)'
  id: totrans-2748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1894](https://www.sqlalchemy.org/trac/ticket/1894)
- en: '**[engine]**'
  id: totrans-2749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection, ResultProxy, as well as Session use ResourceClosedError for all
    “this connection/transaction/result is closed” types of errors.
  id: totrans-2750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection、ResultProxy 以及 Session 现在对于所有“此连接/事务/结果已关闭”类型的错误使用 ResourceClosedError。
- en: '**[engine]**'
  id: totrans-2751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection.invalidate() can be called more than once and subsequent calls do
    nothing.
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.invalidate() 可以被多次调用，后续调用不会产生任何效果。
- en: sql
  id: totrans-2753
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql]**'
  id: totrans-2754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Calling execute() on an alias() construct is pending deprecation for 0.7, as
    it is not itself an “executable” construct. It currently “proxies” its inner element
    and is conditionally “executable” but this is not the kind of ambiguity we like
    these days.
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 alias() 构造调用 execute() 方法将在 0.7 版本中待废弃，因为它本身不是一个“可执行”的构造。它当前“代理”其内部元素，并且条件上是“可执行”的，但这不是我们当前喜欢的模糊性。
- en: '**[sql]**'
  id: totrans-2756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: The execute() and scalar() methods of ClauseElement are now moved appropriately
    to the Executable subclass. ClauseElement.execute()/ scalar() are still present
    and are pending deprecation in 0.7, but note these would always raise an error
    anyway if you were not an Executable (unless you were an alias(), see previous
    note).
  id: totrans-2757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ClauseElement 的 execute() 和 scalar() 方法现在已经适当地移动到了 Executable 子类。ClauseElement.execute()/
    scalar() 仍然存在，并在 0.7 版本中待废弃，但请注意，如果你不是 Executable（除非你是 alias()，请参阅前面的注释），这些方法总是会引发错误。
- en: '**[sql]**'
  id: totrans-2758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added basic math expression coercion for Numeric->Integer, so that resulting
    type is Numeric regardless of the direction of the expression.
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Numeric->Integer 添加了基本的数学表达式强制转换，以便无论表达式的方向如何，结果类型都是 Numeric。
- en: '**[sql]**'
  id: totrans-2760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Changed the scheme used to generate truncated “auto” index names when using
    the “index=True” flag on Column. The truncation only takes place with the auto-generated
    name, not one that is user-defined (an error would be raised instead), and the
    truncation scheme itself is now based on a fragment of an md5 hash of the identifier
    name, so that multiple indexes on columns with similar names still have unique
    names.
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了在 Column 上使用“index=True”标志生成截断的“auto”索引名称的方案。截断只对自动生成的名称起作用，不适用于用户定义的名称（会引发错误），截断方案本身现在基于标识符名称的
    md5 哈希的片段，这样具有相似名称的多个列的索引仍然具有唯一的名称。
- en: 'References: [#1855](https://www.sqlalchemy.org/trac/ticket/1855)'
  id: totrans-2762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1855](https://www.sqlalchemy.org/trac/ticket/1855)
- en: '**[sql]**'
  id: totrans-2763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The generated index name also is based on a “max index name length” attribute
    which is separate from the “max identifier length” - this to appease MySQL who
    has a max length of 64 for index names, separate from their overall max length
    of 255.
  id: totrans-2764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成的索引名称也是基于“最大索引名称长度”属性的，这个属性与“最大标识符长度”是分开的 - 这是为了迎合 MySQL，因为 MySQL 对索引名称的最大长度为
    64，与其总体最大长度 255 是分开的。
- en: 'References: [#1412](https://www.sqlalchemy.org/trac/ticket/1412)'
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1412](https://www.sqlalchemy.org/trac/ticket/1412)
- en: '**[sql]**'
  id: totrans-2766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the text() construct, if placed in a column oriented situation, will at least
    return NULLTYPE for its type instead of None, allowing it to be used a little
    more freely for ad-hoc column expressions than before. literal_column() is still
    the better choice, however.
  id: totrans-2767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将 text() 构造放置在面向列的情况下，它至少会返回 NULLTYPE 作为其类型，而不是 None，这使得它可以比以前更自由地用于临时列表达式。然而，literal_column()
    仍然是更好的选择。
- en: '**[sql]**'
  id: totrans-2768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added full description of parent table/column, target table/column in error
    message raised when ForeignKey can’t resolve target.
  id: totrans-2769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ForeignKey 无法解析目标时，错误消息中添加了父表/列、目标表/列的完整描述。
- en: '**[sql]**'
  id: totrans-2770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby replacing composite foreign key columns in a reflected table
    would cause an attempt to remove the reflected constraint from the table a second
    time, raising a KeyError.
  id: totrans-2771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在反射表中替换复合外键列会导致尝试第二次从表中删除反射的约束，从而引发 KeyError。
- en: 'References: [#1865](https://www.sqlalchemy.org/trac/ticket/1865)'
  id: totrans-2772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1865](https://www.sqlalchemy.org/trac/ticket/1865)
- en: '**[sql]**'
  id: totrans-2773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the _Label construct, i.e. the one that is produced whenever you say somecol.label(),
    now counts itself in its “proxy_set” unioned with that of its contained column’s
    proxy set, instead of directly returning that of the contained column. This allows
    column correspondence operations which depend on the identity of the _Labels themselves
    to return the correct result
  id: totrans-2774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Label 构造，即每当你说 somecol.label() 时产生的构造，现在在其“proxy_set”中计算自身与其包含列的代理集的并集，而不是直接返回包含列的代理集。这允许依赖于
    _Labels 本身身份的列对应操作返回正确的结果。
- en: '**[sql]**'
  id: totrans-2775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixes ORM bug.
  id: totrans-2776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复 ORM bug。
- en: 'References: [#1852](https://www.sqlalchemy.org/trac/ticket/1852)'
  id: totrans-2777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1852](https://www.sqlalchemy.org/trac/ticket/1852)
- en: postgresql
  id: totrans-2778
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the psycopg2 dialect to use its set_isolation_level() method instead of
    relying upon the base “SET SESSION ISOLATION” command, as psycopg2 resets the
    isolation level on each new transaction otherwise.
  id: totrans-2780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 psycopg2 方言，使用其 set_isolation_level() 方法，而不是依赖于基本的 “SET SESSION ISOLATION”
    命令，因为否则 psycopg2 在每个新事务中重置隔离级别。
- en: mssql
  id: totrans-2781
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed “default schema” query to work with pymssql backend.
  id: totrans-2783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 pymssql 后端一起使用“默认模式”查询的问题。
- en: oracle
  id: totrans-2784
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ROWID type to the Oracle dialect, for those cases where an explicit CAST
    might be needed.
  id: totrans-2786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 方言中添加了 ROWID 类型，用于那些可能需要显式 CAST 的情况。
- en: 'References: [#1879](https://www.sqlalchemy.org/trac/ticket/1879)'
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1879](https://www.sqlalchemy.org/trac/ticket/1879)
- en: '**[oracle]**'
  id: totrans-2788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle reflection of indexes has been tuned so that indexes which include some
    or all primary key columns, but not the same set of columns as that of the primary
    key, are reflected. Indexes which contain the identical columns as that of the
    primary key are skipped within reflection, as the index in that case is assumed
    to be the auto-generated primary key index. Previously, any index with PK columns
    present would be skipped. Thanks to Kent Bower for the patch.
  id: totrans-2789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 反射索引已经调整，以便反射包含一些或全部主键列的索引，但不包含与主键相同的列集的索引。在反射中跳过包含与主键相同列的索引，因为在这种情况下，该索引被假定为自动生成的主键索引。以前，任何包含
    PK 列的索引都会被跳过。感谢 Kent Bower 提供的补丁。
- en: 'References: [#1867](https://www.sqlalchemy.org/trac/ticket/1867)'
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1867](https://www.sqlalchemy.org/trac/ticket/1867)
- en: '**[oracle]**'
  id: totrans-2791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle now reflects the names of primary key constraints - also thanks to Kent
    Bower.
  id: totrans-2792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 现在反映主键约束的名称 - 还要感谢 Kent Bower。
- en: 'References: [#1868](https://www.sqlalchemy.org/trac/ticket/1868)'
  id: totrans-2793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1868](https://www.sqlalchemy.org/trac/ticket/1868)
- en: misc
  id: totrans-2794
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-2795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: if @classproperty is used with a regular class-bound mapper property attribute,
    it will be called to get the actual attribute value during initialization. Currently,
    there’s no advantage to using @classproperty on a column or relationship attribute
    of a declarative class that isn’t a mixin - evaluation is at the same time as
    if @classproperty weren’t used. But here we at least allow it to function as expected.
  id: totrans-2796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果@classproperty与常规类绑定的mapper属性属性一起使用，它将在初始化期间被调用以获取实际属性值。目前，在不是mixin的声明类的列或关系属性上使用@classproperty没有任何优势
    - 评估与未使用@classproperty时同时进行。但至少在这里，我们允许其按预期运行。
- en: '**[declarative]**'
  id: totrans-2797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Fixed bug where “Can’t add additional column” message would display the wrong
    name.
  id: totrans-2798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法添加额外列”的错误，显示的名称不正确的问题。
- en: '**[firebird]**'
  id: totrans-2799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Firebird]**'
- en: Fixed bug whereby a column default would fail to reflect if the “default” keyword
    were lower case.
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果“default”关键字为小写，则列默认值将无法反映。
- en: '**[informix]**'
  id: totrans-2801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Informix]**'
- en: Applied patches from to get basic Informix functionality up again. We rely upon
    end-user testing to ensure that Informix is working to some degree.
  id: totrans-2802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用了来自的补丁，以重新启用基本的Informix功能。我们依赖最终用户的测试来确保Informix在某种程度上正常工作。
- en: 'References: [#1904](https://www.sqlalchemy.org/trac/ticket/1904)'
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1904](https://www.sqlalchemy.org/trac/ticket/1904)
- en: '**[documentation]**'
  id: totrans-2804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: The docs have been reorganized such that the “API Reference” section is gone
    - all the docstrings from there which were public API are moved into the context
    of the main doc section that talks about it. Main docs divided into “SQLAlchemy
    Core” and “SQLAlchemy ORM” sections, mapper/relationship docs have been broken
    out. Lots of sections rewritten and/or reorganized.
  id: totrans-2805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档已重新组织，删除了“API参考”部分 - 所有公共API的docstrings都移动到了讨论它的主要文档部分的上下文中。主要文档分为“SQLAlchemy核心”和“SQLAlchemy
    ORM”部分，mapper/relationship文档已拆分出来。许多部分已被重写和/或重新组织。
- en: orm
  id: totrans-2806
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The name ConcurrentModificationError has been changed to StaleDataError, and
    descriptive error messages have been revised to reflect exactly what the issue
    is. Both names will remain available for the foreseeable future for schemes that
    may be specifying ConcurrentModificationError in an “except:” clause.
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ConcurrentModificationError的名称已更改为StaleDataError，并且描述性错误消息已经修订以准确反映问题所在。在可预见的未来，这两个名称将保持可用，以供在“except:”子句中指定ConcurrentModificationError的方案使用。
- en: '**[orm]**'
  id: totrans-2809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added a mutex to the identity map which mutexes remove operations against iteration
    methods, which now pre-buffer before returning an iterable. This because asynchronous
    gc can remove items via the gc thread at any time.
  id: totrans-2810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向identity map添加了互斥锁，该锁用于互斥删除操作，这些操作针对迭代方法，在返回可迭代对象之前现在会预先缓冲。这是因为异步gc可以随时通过gc线程删除项目。
- en: 'References: [#1891](https://www.sqlalchemy.org/trac/ticket/1891)'
  id: totrans-2811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1891](https://www.sqlalchemy.org/trac/ticket/1891)
- en: '**[orm]**'
  id: totrans-2812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The Session class is now present in sqlalchemy.orm.*. We’re moving away from
    the usage of create_session(), which has non-standard defaults, for those situations
    where a one-step Session constructor is desired. Most users should stick with
    sessionmaker() for general use, however.
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session类现在存在于sqlalchemy.orm.*中。我们正在摆脱使用create_session()，对于需要一步构造Session的情况，它具有非标准的默认值。大多数用户应该继续使用sessionmaker()进行一般用途，然而。
- en: '**[orm]**'
  id: totrans-2814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: query.with_parent() now accepts transient objects and will use the non-persistent
    values of their pk/fk attributes in order to formulate the criterion. Docs are
    also clarified as to the purpose of with_parent().
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.with_parent()现在接受瞬态对象，并将使用其pk/fk属性的非持久化值来制定条件。文档还澄清了with_parent()的目的。
- en: '**[orm]**'
  id: totrans-2816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The include_properties and exclude_properties arguments to mapper() now accept
    Column objects as members in addition to strings. This so that same-named Column
    objects, such as those within a join(), can be disambiguated.
  id: totrans-2817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()的include_properties和exclude_properties参数现在除了字符串外还接受列对象作为成员。这样，可以消除在join()中存在的同名列对象的歧义。
- en: '**[orm]**'
  id: totrans-2818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: A warning is now emitted if a mapper is created against a join or other single
    selectable that includes multiple columns with the same name in its .c. collection,
    and those columns aren’t explicitly named as part of the same or separate attributes
    (or excluded). In 0.7 this warning will be an exception. Note that this warning
    is not emitted when the combination occurs as a result of inheritance, so that
    attributes still allow being overridden naturally.. In 0.7 this will be improved
    further.
  id: totrans-2819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果对一个连接或其他单个可选择的映射器创建了一个包含多个具有相同名称的列的警告，而这些列没有明确命名为相同或不同的属性（或排除），则会发出警告。在0.7版本中，此警告将变为异常。请注意，当组合发生在继承的结果时，不会发出此警告，因此属性仍然允许自然覆盖。在0.7版本中，这将进一步改进。
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-2821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The primary_key argument to mapper() can now specify a series of columns that
    are only a subset of the calculated “primary key” columns of the mapped selectable,
    without an error being raised. This helps for situations where a selectable’s
    effective primary key is simpler than the number of columns in the selectable
    that are actually marked as “primary_key”, such as a join against two tables on
    their primary key columns.
  id: totrans-2822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()的primary_key参数现在可以指定一系列列，这些列仅是映射可选择的“主键”列的子集，而不会引发错误。这对于可选择的有效主键比实际标记为“primary_key”的列数更简单的情况很有帮助，例如在两个表的主键列上进行连接。
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-2824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An object that’s been deleted now gets a flag ‘deleted’, which prohibits the
    object from being re-add()ed to the session, as previously the object would live
    in the identity map silently until its attributes were accessed. The make_transient()
    function now resets this flag along with the “key” flag.
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除的对象现在会得到一个名为‘deleted’的标志，这会阻止该对象重新添加到会话中，因为以前对象会悄无声息地存在于标识映射中，直到访问其属性。make_transient()函数现在会重置此标志以及“key”标志。
- en: '**[orm]**'
  id: totrans-2826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: make_transient() can be safely called on an already transient instance.
  id: totrans-2827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient()现在可以安全地在已经是瞬态实例上调用。
- en: '**[orm]**'
  id: totrans-2828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a warning is emitted in mapper() if the polymorphic_on column is not present
    either in direct or derived form in the mapped selectable or in the with_polymorphic
    selectable, instead of silently ignoring it. Look for this to become an exception
    in 0.7.
  id: totrans-2829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在映射器()中发出警告，如果polymorphic_on列在映射的可选择中或在with_polymorphic可选择中不存在，而不是悄悄地忽略它。在0.7版本中，预计这将变为异常。
- en: '**[orm]**'
  id: totrans-2830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Another pass through the series of error messages emitted when relationship()
    is configured with ambiguous arguments. The “foreign_keys” setting is no longer
    mentioned, as it is almost never needed and it is preferable users set up correct
    ForeignKey metadata, which is now the recommendation. If ‘foreign_keys’ is used
    and is incorrect, the message suggests the attribute is probably unnecessary.
    Docs for the attribute are beefed up. This because all confused relationship()
    users on the ML appear to be attempting to use foreign_keys due to the message,
    which only confuses them further since Table metadata is much clearer.
  id: totrans-2831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当relationship()配置具有模糊参数时，再次通过一系列错误消息。不再提及“foreign_keys”设置，因为几乎从不需要，并且更希望用户设置正确的ForeignKey元数据，这现在是推荐的做法。如果使用了‘foreign_keys’并且不正确，消息会建议该属性可能是不必要的。属性的文档得到加强。这是因为所有在ML上困惑的relationship()用户似乎都试图使用foreign_keys，因为消息只会进一步使他们困惑，而Table元数据则更清晰。
- en: '**[orm]**'
  id: totrans-2832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: If the “secondary” table has no ForeignKey metadata and no foreign_keys is set,
    even though the user is passing screwed up information, it is assumed that primary/secondaryjoin
    expressions should consider only and all cols in “secondary” to be foreign. It’s
    not possible with “secondary” for the foreign keys to be elsewhere in any case.
    A warning is now emitted instead of an error, and the mapping succeeds.
  id: totrans-2833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“secondary”表没有ForeignKey元数据并且没有设置foreign_keys，即使用户传递了错误的信息，也假定主/次级联表达式应仅考虑“secondary”中的所有列为外键。在任何情况下，“secondary”中的外键都不可能在其他地方。现在发出警告而不是错误，并且映射成功。
- en: 'References: [#1877](https://www.sqlalchemy.org/trac/ticket/1877)'
  id: totrans-2834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1877](https://www.sqlalchemy.org/trac/ticket/1877)
- en: '**[orm]**'
  id: totrans-2835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Moving an o2m object from one collection to another, or vice versa changing
    the referenced object by an m2o, where the foreign key is also a member of the
    primary key, will now be more carefully checked during flush if the change in
    value of the foreign key on the “many” side is the result of a change in the primary
    key of the “one” side, or if the “one” is just a different object. In one case,
    a cascade-capable DB would have cascaded the value already and we need to look
    at the “new” PK value to do an UPDATE, in the other we need to continue looking
    at the “old”. We now look at the “old”, assuming passive_updates=True, unless
    we know it was a PK switch that triggered the change.
  id: totrans-2836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个 o2m 对象从一个集合移动到另一个集合，或者通过 m2o 更改引用对象，其中外键也是主键的成员，现在在 flush 期间将更加仔细地进行检查，如果“many”一侧的外键值的更改是由于“one”一侧主键的更改导致的，或者如果“one”只是一个不同的对象。在一个情况下，可级联的
    DB 已经级联了该值，我们需要查看“new”PK 值来执行 UPDATE，在另一个情况下，我们需要继续查看“old”。我们现在查看“old”，假设 passive_updates=True，除非我们知道它是触发更改的
    PK 切换。
- en: 'References: [#1856](https://www.sqlalchemy.org/trac/ticket/1856)'
  id: totrans-2837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1856](https://www.sqlalchemy.org/trac/ticket/1856)
- en: '**[orm]**'
  id: totrans-2838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The value of version_id_col can be changed manually, and this will result in
    an UPDATE of the row. Versioned UPDATEs and DELETEs now use the “committed” value
    of the version_id_col in the WHERE clause and not the pending changed value. The
    version generator is also bypassed if manual changes are present on the attribute.
  id: totrans-2839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: version_id_col 的值可以手动更改，这将导致行的 UPDATE。现在，版本化的 UPDATE 和 DELETE 使用 WHERE 子句中的
    version_id_col 的“committed”值，而不是挂起的更改值。如果属性上存在手动更改，则版本生成器也将被绕过。
- en: 'References: [#1857](https://www.sqlalchemy.org/trac/ticket/1857)'
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1857](https://www.sqlalchemy.org/trac/ticket/1857)
- en: '**[orm]**'
  id: totrans-2841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the usage of merge() when used with concrete inheriting mappers. Such
    mappers frequently have so-called “concrete” attributes, which are subclass attributes
    that “disable” propagation from the parent - these needed to allow a merge() operation
    to pass through without effect.
  id: totrans-2842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与具体继承的映射器一起使用 merge() 时的使用情况。这样的映射器经常具有所谓的“具体”属性，这些属性是“禁用”从父类传播的子类属性 - 这些属性需要允许
    merge() 操作通过而不产生效果。
- en: '**[orm]**'
  id: totrans-2843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Specifying a non-column based argument for column_mapped_collection, including
    string, text() etc., will raise an error message that specifically asks for a
    column element, no longer misleads with incorrect information about text() or
    literal().
  id: totrans-2844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定非基于列的参数作为 column_mapped_collection，包括字符串、text() 等，将会触发错误消息，明确要求使用列元素，不再误导使用
    text() 或 literal() 关于不正确的信息。
- en: 'References: [#1863](https://www.sqlalchemy.org/trac/ticket/1863)'
  id: totrans-2845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1863](https://www.sqlalchemy.org/trac/ticket/1863)
- en: '**[orm]**'
  id: totrans-2846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Similarly, for relationship(), foreign_keys, remote_side, order_by - all column-based
    expressions are enforced - lists of strings are explicitly disallowed since this
    is a very common error
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似地，对于 relationship()、foreign_keys、remote_side、order_by - 所有基于列的表达式都被强制执行 -
    字符串列表明确不允许，因为这是一个非常常见的错误。
- en: '**[orm]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Dynamic attributes don’t support collection population - added an assertion
    for when set_committed_value() is called, as well as when joinedload() or subqueryload()
    options are applied to a dynamic attribute, instead of failure / silent failure.
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动态属性不支持集合填充 - 当调用 set_committed_value() 时，以及将 joinedload() 或 subqueryload()
    选项应用于动态属性时，添加了一个断言，而不是失败/静默失败。
- en: 'References: [#1864](https://www.sqlalchemy.org/trac/ticket/1864)'
  id: totrans-2850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1864](https://www.sqlalchemy.org/trac/ticket/1864)
- en: '**[orm]**'
  id: totrans-2851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby generating a Query derived from one which had the same column
    repeated with different label names, typically in some UNION situations, would
    fail to propagate the inner columns completely to the outer query.
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即从具有相同列但具有不同标签名称的列重复的 Query 生成的 Query 在某些 UNION 情况下会无法完全传播内部列到外部查询。
- en: 'References: [#1852](https://www.sqlalchemy.org/trac/ticket/1852)'
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1852](https://www.sqlalchemy.org/trac/ticket/1852)
- en: '**[orm]**'
  id: totrans-2854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: object_session() raises the proper UnmappedInstanceError when presented with
    an unmapped instance.
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当出现未映射实例时，object_session() 会引发正确的 UnmappedInstanceError。
- en: 'References: [#1881](https://www.sqlalchemy.org/trac/ticket/1881)'
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1881](https://www.sqlalchemy.org/trac/ticket/1881)
- en: '**[orm]**'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Applied further memoizations to calculated Mapper properties, with significant
    (~90%) runtime mapper.py call count reduction in heavily polymorphic mapping configurations.
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对计算的 Mapper 属性应用了更进一步的记忆化，在重度多态映射配置中减少了显著（约 90%）的 runtime mapper.py 调用次数。
- en: '**[orm]**'
  id: totrans-2859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper _get_col_to_prop private method used by the versioning example is deprecated;
    now use mapper.get_property_by_column() which will remain the public method for
    this.
  id: totrans-2860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本示例中使用的mapper _get_col_to_prop私有方法已被弃用；现在请使用mapper.get_property_by_column()，这将保持为此公共方法。
- en: '**[orm]**'
  id: totrans-2861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: the versioning example works correctly now if versioning on a col that was formerly
    NULL.
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本示例现在在以前为NULL的列上进行版本控制时可以正常工作。
- en: examples
  id: totrans-2863
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-2864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: The beaker_caching example has been reorganized such that the Session, cache
    manager, declarative_base are part of environment, and custom cache code is portable
    and now within “caching_query.py”. This allows the example to be easier to “drop
    in” to existing projects.
  id: totrans-2865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: beaker_caching示例已重新组织，使得Session、缓存管理器、declarative_base成为环境的一部分，自定义缓存代码现在在“caching_query.py”中，这使得示例更容易“插入”到现有项目中。
- en: '**[examples]**'
  id: totrans-2866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: the history_meta versioning recipe sets “unique=False” when copying columns,
    so that the versioning table handles multiple rows with repeating values.
  id: totrans-2867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: history_meta版本控制方案在复制列时设置“unique=False”，以便版本控制表处理具有重复值的多行。
- en: 'References: [#1887](https://www.sqlalchemy.org/trac/ticket/1887)'
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1887](https://www.sqlalchemy.org/trac/ticket/1887)
- en: engine
  id: totrans-2869
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-2870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Calling fetchone() or similar on a result that has already been exhausted, has
    been closed, or is not a result-returning result now raises ResourceClosedError,
    a subclass of InvalidRequestError, in all cases, regardless of backend. Previously,
    some DBAPIs would raise ProgrammingError (i.e. pysqlite), others would return
    None leading to downstream breakages (i.e. MySQL-python).
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在已经耗尽、已关闭或不是返回结果的结果上调用fetchone()或类似方法现在会在所有情况下引发ResourceClosedError，这是InvalidRequestError的子类，不受后端影响。以前，一些DBAPI会引发ProgrammingError（例如pysqlite），其他会返回None导致下游故障（例如MySQL-python）。
- en: '**[engine]**'
  id: totrans-2872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Fixed bug in Connection whereby if a “disconnect” event occurred in the “initialize”
    phase of the first connection pool connect, an AttributeError would be raised
    when the Connection would attempt to invalidate the DBAPI connection.
  id: totrans-2873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Connection中的错误，如果在第一个连接池连接的“初始化”阶段发生“断开”事件，那么当Connection尝试使DBAPI连接无效时会引发AttributeError。
- en: 'References: [#1894](https://www.sqlalchemy.org/trac/ticket/1894)'
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1894](https://www.sqlalchemy.org/trac/ticket/1894)
- en: '**[engine]**'
  id: totrans-2875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection, ResultProxy, as well as Session use ResourceClosedError for all
    “this connection/transaction/result is closed” types of errors.
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection、ResultProxy以及Session现在对所有“此连接/事务/结果已关闭”类型的错误使用ResourceClosedError。
- en: '**[engine]**'
  id: totrans-2877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection.invalidate() can be called more than once and subsequent calls do
    nothing.
  id: totrans-2878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.invalidate()可以被多次调用，后续调用不会产生任何效果。
- en: sql
  id: totrans-2879
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql]**'
  id: totrans-2880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Calling execute() on an alias() construct is pending deprecation for 0.7, as
    it is not itself an “executable” construct. It currently “proxies” its inner element
    and is conditionally “executable” but this is not the kind of ambiguity we like
    these days.
  id: totrans-2881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在alias()构造上调用execute()在0.7版本中将被��用，因为它本身不是一个“可执行”构造。它当前“代理”其内部元素，并且有条件地“可执行”，但这不是我们现在喜欢的模糊性。
- en: '**[sql]**'
  id: totrans-2882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: The execute() and scalar() methods of ClauseElement are now moved appropriately
    to the Executable subclass. ClauseElement.execute()/ scalar() are still present
    and are pending deprecation in 0.7, but note these would always raise an error
    anyway if you were not an Executable (unless you were an alias(), see previous
    note).
  id: totrans-2883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ClauseElement的execute()和scalar()方法现在适当地移动到了Executable子类中。ClauseElement.execute()/scalar()仍然存在，并且在0.7版本中将被弃用，但请注意，如果您不是Executable（除非您是alias()，请参见前面的说明），这些方法无论如何都会引发错误。
- en: '**[sql]**'
  id: totrans-2884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added basic math expression coercion for Numeric->Integer, so that resulting
    type is Numeric regardless of the direction of the expression.
  id: totrans-2885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Numeric->Integer添加了基本的数学表达式强制转换，以便无论表达式的方向如何，结果类型始终为Numeric。
- en: '**[sql]**'
  id: totrans-2886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Changed the scheme used to generate truncated “auto” index names when using
    the “index=True” flag on Column. The truncation only takes place with the auto-generated
    name, not one that is user-defined (an error would be raised instead), and the
    truncation scheme itself is now based on a fragment of an md5 hash of the identifier
    name, so that multiple indexes on columns with similar names still have unique
    names.
  id: totrans-2887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了在Column上使用“index=True”标志生成截断的“auto”索引名称的方案。截断仅在自动生成的名称上进行，而不是在用户定义的名称上（否则会引发错误），截断方案本身现在基于标识符名称的md5哈希的片段，以便具有类似名称的列上的多个索引仍具有唯一名称。
- en: 'References: [#1855](https://www.sqlalchemy.org/trac/ticket/1855)'
  id: totrans-2888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1855](https://www.sqlalchemy.org/trac/ticket/1855)
- en: '**[sql]**'
  id: totrans-2889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The generated index name also is based on a “max index name length” attribute
    which is separate from the “max identifier length” - this to appease MySQL who
    has a max length of 64 for index names, separate from their overall max length
    of 255.
  id: totrans-2890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成的索引名称也基于“最大索引名称长度”属性，该属性与“最大标识符长度”分开 - 这是为了取悦MySQL，因为MySQL对索引名称的最大长度为64，而总体最大长度为255。
- en: 'References: [#1412](https://www.sqlalchemy.org/trac/ticket/1412)'
  id: totrans-2891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1412](https://www.sqlalchemy.org/trac/ticket/1412)
- en: '**[sql]**'
  id: totrans-2892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the text() construct, if placed in a column oriented situation, will at least
    return NULLTYPE for its type instead of None, allowing it to be used a little
    more freely for ad-hoc column expressions than before. literal_column() is still
    the better choice, however.
  id: totrans-2893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将text()构造放置在面向列的情况下，它至少会返回NULLTYPE作为其类型，而不是None，这使得它可以比以前更自由地用于临时列表达式。但是，literal_column()仍然是更好的选择。
- en: '**[sql]**'
  id: totrans-2894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added full description of parent table/column, target table/column in error
    message raised when ForeignKey can’t resolve target.
  id: totrans-2895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ForeignKey无法解析目标时引发错误消息时，添加了父表/列，目标表/列的完整描述。
- en: '**[sql]**'
  id: totrans-2896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby replacing composite foreign key columns in a reflected table
    would cause an attempt to remove the reflected constraint from the table a second
    time, raising a KeyError.
  id: totrans-2897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在反射表中替换复合外键列会导致尝试第二次从表中删除反射的约束，从而引发KeyError。
- en: 'References: [#1865](https://www.sqlalchemy.org/trac/ticket/1865)'
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1865](https://www.sqlalchemy.org/trac/ticket/1865)
- en: '**[sql]**'
  id: totrans-2899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the _Label construct, i.e. the one that is produced whenever you say somecol.label(),
    now counts itself in its “proxy_set” unioned with that of its contained column’s
    proxy set, instead of directly returning that of the contained column. This allows
    column correspondence operations which depend on the identity of the _Labels themselves
    to return the correct result
  id: totrans-2900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Label构造，即每当您说somecol.label()时产生的构造，现在将其自身计入其“proxy_set”中，与其包含的列的proxy set相结合，而不是直接返回包含的列的proxy
    set。这允许依赖_Label本身身份的列对应操作返回正确的结果。
- en: '**[sql]**'
  id: totrans-2901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixes ORM bug.
  id: totrans-2902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM错误。
- en: 'References: [#1852](https://www.sqlalchemy.org/trac/ticket/1852)'
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1852](https://www.sqlalchemy.org/trac/ticket/1852)
- en: postgresql
  id: totrans-2904
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the psycopg2 dialect to use its set_isolation_level() method instead of
    relying upon the base “SET SESSION ISOLATION” command, as psycopg2 resets the
    isolation level on each new transaction otherwise.
  id: totrans-2906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了psycopg2方言，使用其set_isolation_level()方法，而不是依赖基本的“SET SESSION ISOLATION”命令，否则psycopg2会在每个新事务中重置隔离级别。
- en: mssql
  id: totrans-2907
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed “default schema” query to work with pymssql backend.
  id: totrans-2909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与pymssql后端一起使用“默认模式”查询的问题。
- en: oracle
  id: totrans-2910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ROWID type to the Oracle dialect, for those cases where an explicit CAST
    might be needed.
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Oracle方言中添加了ROWID类型，用于那些可能需要显式CAST的情况。
- en: 'References: [#1879](https://www.sqlalchemy.org/trac/ticket/1879)'
  id: totrans-2913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1879](https://www.sqlalchemy.org/trac/ticket/1879)
- en: '**[oracle]**'
  id: totrans-2914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle reflection of indexes has been tuned so that indexes which include some
    or all primary key columns, but not the same set of columns as that of the primary
    key, are reflected. Indexes which contain the identical columns as that of the
    primary key are skipped within reflection, as the index in that case is assumed
    to be the auto-generated primary key index. Previously, any index with PK columns
    present would be skipped. Thanks to Kent Bower for the patch.
  id: totrans-2915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle反射索引已经调整，以便反射包含一些或全部主键列，但不包含与主键相同的列集的索引。在反射中跳过包含与主键相同列的索引，因为在这种情况下，该索引被假定为自动生成的主键索引。以前，任何包含PK列的索引都会被跳过。感谢Kent
    Bower的补丁。
- en: 'References: [#1867](https://www.sqlalchemy.org/trac/ticket/1867)'
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1867](https://www.sqlalchemy.org/trac/ticket/1867)
- en: '**[oracle]**'
  id: totrans-2917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle now reflects the names of primary key constraints - also thanks to Kent
    Bower.
  id: totrans-2918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在Oracle反映了主键约束的名称 - 这也要感谢Kent Bower。
- en: 'References: [#1868](https://www.sqlalchemy.org/trac/ticket/1868)'
  id: totrans-2919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1868](https://www.sqlalchemy.org/trac/ticket/1868)
- en: misc
  id: totrans-2920
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-2921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: if @classproperty is used with a regular class-bound mapper property attribute,
    it will be called to get the actual attribute value during initialization. Currently,
    there’s no advantage to using @classproperty on a column or relationship attribute
    of a declarative class that isn’t a mixin - evaluation is at the same time as
    if @classproperty weren’t used. But here we at least allow it to function as expected.
  id: totrans-2922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 @classproperty 与常规的类绑定映射器属性属性一起使用，则在初始化期间将调用它以获取实际的属性值。目前，在不是 mixin 的声明类的列或关系属性上使用
    @classproperty 没有任何优势 - 评估的时间与未使用 @classproperty 时相同。但是在这里，我们至少允许它按预期工作。
- en: '**[declarative]**'
  id: totrans-2923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed bug where “Can’t add additional column” message would display the wrong
    name.
  id: totrans-2924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法添加额外列”的错误消息显示错误名称的 bug。
- en: '**[firebird]**'
  id: totrans-2925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Fixed bug whereby a column default would fail to reflect if the “default” keyword
    were lower case.
  id: totrans-2926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果“default”关键字为小写，则列默认值将失败反映。
- en: '**[informix]**'
  id: totrans-2927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Applied patches from to get basic Informix functionality up again. We rely upon
    end-user testing to ensure that Informix is working to some degree.
  id: totrans-2928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用了来自的补丁，以重新启用基本的 Informix 功能。我们依赖最终用户的测试来确保 Informix 在某种程度上正常工作。
- en: 'References: [#1904](https://www.sqlalchemy.org/trac/ticket/1904)'
  id: totrans-2929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1904](https://www.sqlalchemy.org/trac/ticket/1904)
- en: '**[documentation]**'
  id: totrans-2930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: The docs have been reorganized such that the “API Reference” section is gone
    - all the docstrings from there which were public API are moved into the context
    of the main doc section that talks about it. Main docs divided into “SQLAlchemy
    Core” and “SQLAlchemy ORM” sections, mapper/relationship docs have been broken
    out. Lots of sections rewritten and/or reorganized.
  id: totrans-2931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档已重新组织，以至于“API 参考”部分已经消失 - 所有从那里的文档字符串中公开的 API 都移动到了主文档部分的上下文中，该部分讨论了它。主文档分为“SQLAlchemy
    Core”和“SQLAlchemy ORM”两个部分，映射器/关系文档已被拆分。许多部分已被重写和/或重新组织。
- en: 0.6.3
  id: totrans-2932
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.3
- en: 'Released: Thu Jul 15 2010'
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Jul 15 2010
- en: orm
  id: totrans-2934
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed errant many-to-many load in unitofwork which triggered unnecessarily
    on expired/unloaded collections. This load now takes place only if passive_updates
    is False and the parent primary key has changed, or if passive_deletes is False
    and a delete of the parent has occurred.
  id: totrans-2936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在单元测试中移除了不必要的多对多加载，该加载在已过期/未加载的集合上不必要地触发。现在，仅当 passive_updates 为 False 且父级主键已更改，或者
    passive_deletes 为 False 且已删除父级时，才执行此加载。
- en: 'References: [#1845](https://www.sqlalchemy.org/trac/ticket/1845)'
  id: totrans-2937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1845](https://www.sqlalchemy.org/trac/ticket/1845)
- en: '**[orm]**'
  id: totrans-2938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Column-entities (i.e. query(Foo.id)) copy their state more fully when queries
    are derived from themselves + a selectable (i.e. from_self(), union(), etc.),
    so that join() and such have the correct state to work from.
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列实体（即 query(Foo.id)）在查询从自身派生的查询时更全面地复制其状态+可选择的（即 from_self()、union() 等），以便 join()
    等从正确的状态开始工作。
- en: 'References: [#1853](https://www.sqlalchemy.org/trac/ticket/1853)'
  id: totrans-2940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1853](https://www.sqlalchemy.org/trac/ticket/1853)
- en: '**[orm]**'
  id: totrans-2941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query.join() would fail if querying a non-ORM column then joining
    without an on clause when a FROM clause is already present, now raises a checked
    exception the same way it does when the clause is not present.
  id: totrans-2942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query.join() 在查询非 ORM 列然后在已经存在 FROM 子句的情况下没有使用 on 子句进行连接时会失败的 bug，现在会像没有子句时一样引发一个经过检查的异常。
- en: 'References: [#1853](https://www.sqlalchemy.org/trac/ticket/1853)'
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1853](https://www.sqlalchemy.org/trac/ticket/1853)
- en: '**[orm]**'
  id: totrans-2944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the check for an “unmapped class”, including the case where the superclass
    is mapped but the subclass is not. Any attempts to access cls._sa_class_manager.mapper
    now raise UnmappedClassError().
  id: totrans-2945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对“未映射类”的检查，包括超类已映射但子类未映射的情况。任何尝试访问 cls._sa_class_manager.mapper 现在都会引发 UnmappedClassError()。
- en: 'References: [#1142](https://www.sqlalchemy.org/trac/ticket/1142)'
  id: totrans-2946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1142](https://www.sqlalchemy.org/trac/ticket/1142)
- en: '**[orm]**'
  id: totrans-2947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added “column_descriptions” accessor to Query, returns a list of dictionaries
    containing naming/typing information about the entities the Query will return.
    Can be helpful for building GUIs on top of ORM queries.
  id: totrans-2948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“column_descriptions”访问器到 Query，返回一个包含查询将返回的实体的命名/类型信息的字典列表。对于在 ORM 查询之上构建
    GUI 很有帮助。
- en: mysql
  id: totrans-2949
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The _extract_error_code() method now works correctly with each MySQL dialect
    ( MySQL-python, OurSQL, MySQL-Connector-Python, PyODBC). Previously, the reconnect
    logic would fail for OperationalError conditions, however since MySQLdb and OurSQL
    have their own reconnect feature, there was no symptom for these drivers here
    unless one watched the logs.
  id: totrans-2951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _extract_error_code() 方法现在可以正确地与每个 MySQL 方言（MySQL-python、OurSQL、MySQL-Connector-Python、PyODBC）一起工作。以前，重新连接逻辑会在
    OperationalError 条件下失败，但由于 MySQLdb 和 OurSQL 有自己的重新连接功能，因此除非观察日志，否则这些驱动程序在这里没有任何症状。
- en: 'References: [#1848](https://www.sqlalchemy.org/trac/ticket/1848)'
  id: totrans-2952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1848](https://www.sqlalchemy.org/trac/ticket/1848)
- en: oracle
  id: totrans-2953
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: More tweaks to cx_oracle Decimal handling. “Ambiguous” numerics with no decimal
    place are coerced to int at the connection handler level. The advantage here is
    that ints come back as ints without SQLA type objects being involved and without
    needless conversion to Decimal first.
  id: totrans-2955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 cx_oracle Decimal 处理进行了更多微调。没有小数点的“模糊”数值在连接处理程序级别被强制转换为 int。这里的优势在于 ints 以
    int 形式返回，而无需涉及 SQLA 类型对象，也无需先转换为 Decimal。
- en: Unfortunately, some exotic subquery cases can even see different types between
    individual result rows, so the Numeric handler, when instructed to return Decimal,
    can’t take full advantage of “native decimal” mode and must run isinstance() on
    every value to check if its Decimal already. Reopen of
  id: totrans-2956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不幸的是，一些奇特的子查询情况甚至可能在单个结果行之间看到不同的类型，因此当 Numeric 处理程序被指示返回 Decimal 时，无法充分利用“本机十进制”模式，必须对每个值运行
    isinstance() 来检查其��否已经是 Decimal。重新打开
- en: 'References: [#1840](https://www.sqlalchemy.org/trac/ticket/1840)'
  id: totrans-2957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1840](https://www.sqlalchemy.org/trac/ticket/1840)
- en: orm
  id: totrans-2958
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed errant many-to-many load in unitofwork which triggered unnecessarily
    on expired/unloaded collections. This load now takes place only if passive_updates
    is False and the parent primary key has changed, or if passive_deletes is False
    and a delete of the parent has occurred.
  id: totrans-2960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 unitofwork 中删除了错误的多对多加载，这会在过期/未加载的集合上不必要地触发。现在，只有在 passive_updates 为 False
    且父主键已更改，或者 passive_deletes 为 False 且父项已删除时，才会进行此加载。
- en: 'References: [#1845](https://www.sqlalchemy.org/trac/ticket/1845)'
  id: totrans-2961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1845](https://www.sqlalchemy.org/trac/ticket/1845)
- en: '**[orm]**'
  id: totrans-2962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Column-entities (i.e. query(Foo.id)) copy their state more fully when queries
    are derived from themselves + a selectable (i.e. from_self(), union(), etc.),
    so that join() and such have the correct state to work from.
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column-entities（即 query(Foo.id)）在从自身派生的查询（即 from_self()、union() 等）中更全面地复制其状态，以便
    join() 等操作可以正确地进行。
- en: 'References: [#1853](https://www.sqlalchemy.org/trac/ticket/1853)'
  id: totrans-2964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1853](https://www.sqlalchemy.org/trac/ticket/1853)
- en: '**[orm]**'
  id: totrans-2965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query.join() would fail if querying a non-ORM column then joining
    without an on clause when a FROM clause is already present, now raises a checked
    exception the same way it does when the clause is not present.
  id: totrans-2966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query.join() 在查询非 ORM 列然后在已经存在 FROM 子句的情况下没有 on 子句进行连接时会失败的 bug，现在会像没有子句时一样引发一个经过检查的异常。
- en: 'References: [#1853](https://www.sqlalchemy.org/trac/ticket/1853)'
  id: totrans-2967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1853](https://www.sqlalchemy.org/trac/ticket/1853)
- en: '**[orm]**'
  id: totrans-2968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the check for an “unmapped class”, including the case where the superclass
    is mapped but the subclass is not. Any attempts to access cls._sa_class_manager.mapper
    now raise UnmappedClassError().
  id: totrans-2969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对“未映射类”的检查，包括超类已映射但子类未映射的情况。任何尝试访问 cls._sa_class_manager.mapper 现在都会引发 UnmappedClassError()。
- en: 'References: [#1142](https://www.sqlalchemy.org/trac/ticket/1142)'
  id: totrans-2970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1142](https://www.sqlalchemy.org/trac/ticket/1142)
- en: '**[orm]**'
  id: totrans-2971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added “column_descriptions” accessor to Query, returns a list of dictionaries
    containing naming/typing information about the entities the Query will return.
    Can be helpful for building GUIs on top of ORM queries.
  id: totrans-2972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query 添加了 “column_descriptions” 访问器，返回一个包含查询将返回的实体的命名/类型信息的字典列表。对于在 ORM 查询之上构建
    GUI 非常有帮助。
- en: mysql
  id: totrans-2973
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The _extract_error_code() method now works correctly with each MySQL dialect
    ( MySQL-python, OurSQL, MySQL-Connector-Python, PyODBC). Previously, the reconnect
    logic would fail for OperationalError conditions, however since MySQLdb and OurSQL
    have their own reconnect feature, there was no symptom for these drivers here
    unless one watched the logs.
  id: totrans-2975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _extract_error_code() 方法现在可以正确地与每个 MySQL 方言（MySQL-python、OurSQL、MySQL-Connector-Python、PyODBC）一起工作。以前，重新连接逻辑会在
    OperationalError 条件下失败，但由于 MySQLdb 和 OurSQL 有自己的重新连接功能，因此除非观察日志，否则这些驱动程序在这里没有任何症状。
- en: 'References: [#1848](https://www.sqlalchemy.org/trac/ticket/1848)'
  id: totrans-2976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1848](https://www.sqlalchemy.org/trac/ticket/1848)
- en: oracle
  id: totrans-2977
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: More tweaks to cx_oracle Decimal handling. “Ambiguous” numerics with no decimal
    place are coerced to int at the connection handler level. The advantage here is
    that ints come back as ints without SQLA type objects being involved and without
    needless conversion to Decimal first.
  id: totrans-2979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 cx_oracle Decimal 处理进行了更多调整。没有小数点的“模糊”数值在连接处理程序级别被强制转换为 int。这里的优势在于 ints 会作为
    ints 返回，而不涉及 SQLA 类型对象，也不会不必要地先转换为 Decimal。
- en: Unfortunately, some exotic subquery cases can even see different types between
    individual result rows, so the Numeric handler, when instructed to return Decimal,
    can’t take full advantage of “native decimal” mode and must run isinstance() on
    every value to check if its Decimal already. Reopen of
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不幸的是，一些奇特的子查询情况甚至可能在单个结果行之间看到不同的类型，因此当 Numeric 处理程序被指示返回 Decimal 时，无法充分利用“本地十进制”模式，必须对每个值运行
    isinstance() 来检查它是否已经是 Decimal。重新打开
- en: 'References: [#1840](https://www.sqlalchemy.org/trac/ticket/1840)'
  id: totrans-2981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1840](https://www.sqlalchemy.org/trac/ticket/1840)
- en: 0.6.2
  id: totrans-2982
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.2
- en: 'Released: Tue Jul 06 2010'
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Tue Jul 06 2010
- en: orm
  id: totrans-2984
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join() will check for a call of the form query.join(target, clause_expression),
    i.e. missing the tuple, and raise an informative error message that this is the
    wrong calling form.
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join() 将检查是否调用了 query.join(target, clause_expression) 形式的调用，即缺少元组，并提出信息性错误消息，说明这是错误的调用形式。
- en: '**[orm]**'
  id: totrans-2987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding flushes on self-referential bi-directional many-to-many
    relationships, where two objects made to mutually reference each other in one
    flush would fail to insert a row for both sides. Regression from 0.5.
  id: totrans-2988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于自引用双向多对多关系刷新的 bug，在一个刷新中使两个对象相互引用会导致两侧都无法插入行。从 0.5 开始的回归。
- en: 'References: [#1824](https://www.sqlalchemy.org/trac/ticket/1824)'
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1824](https://www.sqlalchemy.org/trac/ticket/1824)
- en: '**[orm]**'
  id: totrans-2990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the post_update feature of relationship() has been reworked architecturally
    to integrate more closely with the new 0.6 unit of work. The motivation for the
    change is so that multiple “post update” calls, each affecting different foreign
    key columns of the same row, are executed in a single UPDATE statement, rather
    than one UPDATE statement per column per row. Multiple row updates are also batched
    into executemany()s as possible, while maintaining consistent row ordering.
  id: totrans-2991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship() 的 post_update 功能在架构上进行了重新设计，以更紧密地与新的 0.6 工作单元集成。更改的动机是，多个影响同一行的不同外键列的“post
    update”调用将在单个 UPDATE 语句中执行，而不是每列每行一个 UPDATE 语句。多行更新也尽可能批量执行，同时保持一致的行顺序。
- en: '**[orm]**'
  id: totrans-2992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.statement, Query.subquery(), etc. now transfer the values of bind parameters,
    i.e. those specified by query.params(), into the resulting SQL expression. Previously
    the values would not be transferred and bind parameters would come out as None.
  id: totrans-2993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.statement, Query.subquery(), 等现在会将绑定参数的值，即由 query.params() 指定的值，传递到生成的
    SQL 表达式中。以前这些值不会被传递，绑定参数会变成 None。
- en: '**[orm]**'
  id: totrans-2994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Subquery-eager-loading now works with Query objects which include params(),
    as well as get() Queries.
  id: totrans-2995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在子查询预加载可以与包括 params() 的 Query 对象一起工作，以及 get() 查询。
- en: '**[orm]**'
  id: totrans-2996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Can now call make_transient() on an instance that is referenced by parent objects
    via many-to-one, without the parent’s foreign key value getting temporarily set
    to None - this was a function of the “detect primary key switch” flush handler.
    It now ignores objects that are no longer in the “persistent” state, and the parent’s
    foreign key identifier is left unaffected.
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在被父对象通过多对一引用的实例上调用 make_transient()，而不会暂时将父对象的外键值设置为 None - 这是“检测主键切换”刷新处理程序的功能。它现在会忽略不再处于“持久”状态的对象，父对象的外键标识符也不受影响。
- en: '**[orm]**'
  id: totrans-2998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() now accepts False, which cancels any existing order_by() state
    on the Query, allowing subsequent generative methods to be called which do not
    support ORDER BY. This is not the same as the already existing feature of passing
    None, which suppresses any existing order_by() settings, including those configured
    on the mapper. False will make it as though order_by() was never called, while
    None is an active setting.
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by() 现在接受 False，这会取消 Query 上任何现有的 order_by() 状态，允许调用后续不支持 ORDER
    BY 的生成方法。这与已经存在的传递 None 的功能不同，后者会抑制任何现有的 order_by() 设置，包括在映射器上配置的设置。False 会使 order_by()
    就好像从未调用过一样，而 None 是一个活跃的设置。
- en: '**[orm]**'
  id: totrans-3000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An instance which is moved to “transient”, has an incomplete or missing set
    of primary key attributes, and contains expired attributes, will raise an InvalidRequestError
    if an expired attribute is accessed, instead of getting a recursion overflow.
  id: totrans-3001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个被移至“瞬态”状态的实例具有不完整或缺失的主键属性集，并且包含过期属性时，如果访问了一个过期属性，将会引发 InvalidRequestError，而不是递归溢出。
- en: '**[orm]**'
  id: totrans-3002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The make_transient() function is now in the generated documentation.
  id: totrans-3003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient() 函数现在在生成的文档中。
- en: '**[orm]**'
  id: totrans-3004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: make_transient() removes all “loader” callables from the state being made transient,
    removing any “expired” state - all unloaded attributes reset back to undefined,
    None/empty on access.
  id: totrans-3005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient() 会将所有“loader”可调用函数从被设置为瞬态的状态中移除，将任何“过期”状态重置为未定义的、None/空值。
- en: sql
  id: totrans-3006
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The warning emitted by the Unicode and String types with convert_unicode=True
    no longer embeds the actual value passed. This so that the Python warning registry
    does not continue to grow in size, the warning is emitted once as per the warning
    filter settings, and large string values don’t pollute the output.
  id: totrans-3008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 convert_unicode=True 时，Unicode 和 String 类型发出的警告不再嵌入传递的实际值。这样做是为了避免 Python
    警告注册表继续增长，警告根据警告过滤器设置只发出一次，并且大字符串值不会污染输出。
- en: 'References: [#1822](https://www.sqlalchemy.org/trac/ticket/1822)'
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1822](https://www.sqlalchemy.org/trac/ticket/1822)
- en: '**[sql]**'
  id: totrans-3010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug that would prevent overridden clause compilation from working for
    “annotated” expression elements, which are often generated by the ORM.
  id: totrans-3011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 会阻止对“带注��”的表达式元素进行重写子句编译，这些表达式元素通常由 ORM 生成。
- en: '**[sql]**'
  id: totrans-3012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The argument to “ESCAPE” of a LIKE operator or similar is passed through render_literal_value(),
    which may implement escaping of backslashes.
  id: totrans-3013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LIKE 操作符或类似操作符的“ESCAPE”参数会通过 render_literal_value() 进行处理，该函数可能会实现反斜杠的转义。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-3014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: '**[sql]**'
  id: totrans-3015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in Enum type which blew away native_enum flag when used with TypeDecorators
    or other adaption scenarios.
  id: totrans-3016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Enum 类型的一个 bug，当与 TypeDecorators 或其他适配场景一起使用时，会破坏 native_enum 标志。
- en: '**[sql]**'
  id: totrans-3017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Inspector hits bind.connect() when invoked to ensure initialize has been called.
    the internal name “.conn” is changed to “.bind”, since that’s what it is.
  id: totrans-3018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 Inspector 被调用时，会调用 bind.connect() 来确保 initialize 已被调用。内部名称“.conn”被更改为“.bind”，因为那才是它的实际名称。
- en: '**[sql]**'
  id: totrans-3019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Modified the internals of “column annotation” such that a custom Column subclass
    can safely override _constructor to return Column, for the purposes of making
    “configurational” column classes that aren’t involved in proxying, etc.
  id: totrans-3020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了“列注释”的内部机制，使得自定义 Column 子类可以安全地重写 _constructor 返回 Column，用于创建不涉及代理等的“配置”列类。
- en: '**[sql]**'
  id: totrans-3021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy() takes along the “unique” attribute among others, fixes regarding
    declarative mixins
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy() 包括“unique”属性在内，修复了关于声明性 mixin 的问题
- en: 'References: [#1829](https://www.sqlalchemy.org/trac/ticket/1829)'
  id: totrans-3023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1829](https://www.sqlalchemy.org/trac/ticket/1829)
- en: postgresql
  id: totrans-3024
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: render_literal_value() is overridden which escapes backslashes, currently applies
    to the ESCAPE clause of LIKE and similar expressions. Ultimately this will have
    to detect the value of “standard_conforming_strings” for full behavior.
  id: totrans-3026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: render_literal_value() 被重写以转义反斜杠，目前适用于 LIKE 和类似表达式的 ESCAPE 子句。最终，这将需要检测“standard_conforming_strings”的值以实现完整的行为。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: '**[postgresql]**'
  id: totrans-3028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Won’t generate “CREATE TYPE” / “DROP TYPE” if using types.Enum on a PG version
    prior to 8.3 - the supports_native_enum flag is fully honored.
  id: totrans-3029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在 PG 版本低于 8.3 上使用 types.Enum，则不会生成“CREATE TYPE” / “DROP TYPE” - supports_native_enum
    标志将被完全遵守。
- en: 'References: [#1836](https://www.sqlalchemy.org/trac/ticket/1836)'
  id: totrans-3030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1836](https://www.sqlalchemy.org/trac/ticket/1836)
- en: mysql
  id: totrans-3031
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: MySQL dialect doesn’t emit CAST() for MySQL version detected < 4.0.2\. This
    allows the unicode check on connect to proceed.
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言在检测到 MySQL 版本小于 4.0.2 时不会发出 CAST()。这允许在连接时进行 unicode 检查。
- en: 'References: [#1826](https://www.sqlalchemy.org/trac/ticket/1826)'
  id: totrans-3034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1826](https://www.sqlalchemy.org/trac/ticket/1826)
- en: '**[mysql]**'
  id: totrans-3035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: MySQL dialect now detects NO_BACKSLASH_ESCAPES sql mode, in addition to ANSI_QUOTES.
  id: totrans-3036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在检测到 NO_BACKSLASH_ESCAPES sql 模式，除了 ANSI_QUOTES。
- en: '**[mysql]**'
  id: totrans-3037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: render_literal_value() is overridden which escapes backslashes, currently applies
    to the ESCAPE clause of LIKE and similar expressions. This behavior is derived
    from detecting the value of NO_BACKSLASH_ESCAPES.
  id: totrans-3038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 覆盖了 render_literal_value()，它会转义反斜杠，目前适用于 LIKE 和类似表达式的 ESCAPE 子句。��行为源自检测 NO_BACKSLASH_ESCAPES
    的值。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-3039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: mssql
  id: totrans-3040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If server_version_info is outside the usual range of (8, ), (9, ), (10, ), a
    warning is emitted which suggests checking that the FreeTDS version configuration
    is using 7.0 or 8.0, not 4.2.
  id: totrans-3042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 server_version_info 超出通常范围（8, ）、（9, ）、（10, ），则会发出警告，建议检查 FreeTDS 版本配置是否使用
    7.0 或 8.0，而不是 4.2。
- en: 'References: [#1825](https://www.sqlalchemy.org/trac/ticket/1825)'
  id: totrans-3043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1825](https://www.sqlalchemy.org/trac/ticket/1825)
- en: oracle
  id: totrans-3044
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed ora-8 compatibility flags such that they don’t cache a stale value from
    before the first database connection actually occurs.
  id: totrans-3046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ora-8 兼容性标志，使其不会缓存在第一次数据库连接之前的过时值。
- en: 'References: [#1819](https://www.sqlalchemy.org/trac/ticket/1819)'
  id: totrans-3047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1819](https://www.sqlalchemy.org/trac/ticket/1819)
- en: '**[oracle]**'
  id: totrans-3048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle’s “native decimal” metadata begins to return ambiguous typing information
    about numerics when columns are embedded in subqueries as well as when ROWNUM
    is consulted with subqueries, as we do for limit/offset. We’ve added these ambiguous
    conditions to the cx_oracle “convert to Decimal()” handler, so that we receive
    numerics as Decimal in more cases instead of as floats. These are then converted,
    if requested, into Integer or Float, or otherwise kept as the lossless Decimal.
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当列嵌入子查询时，Oracle 的“本地十进制”元数据开始返回关于数值的模糊类型信息，以及当在子查询中查询 ROWNUM 时，我们用于 limit/offset
    时。我们已将这些模糊条件添加到 cx_oracle 的“转换为 Decimal()”处理程序中，以便在更多情况下将数值作为 Decimal 而不是浮点数接收。然后，如果需要，将其转换为
    Integer 或 Float，否则保留为无损 Decimal。
- en: 'References: [#1840](https://www.sqlalchemy.org/trac/ticket/1840)'
  id: totrans-3050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1840](https://www.sqlalchemy.org/trac/ticket/1840)
- en: misc
  id: totrans-3051
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[firebird]**'
  id: totrans-3052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Fixed incorrect signature in do_execute(), error introduced in 0.6.1.
  id: totrans-3053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 do_execute() 中的错误签名，该错误在 0.6.1 中引入。
- en: 'References: [#1823](https://www.sqlalchemy.org/trac/ticket/1823)'
  id: totrans-3054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1823](https://www.sqlalchemy.org/trac/ticket/1823)
- en: '**[firebird]**'
  id: totrans-3055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird dialect adds CHAR, VARCHAR types which accept a “charset” flag, to
    support Firebird “CHARACTER SET” clause.
  id: totrans-3056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 方言添加了接受“charset”标志的 CHAR、VARCHAR 类型，以支持 Firebird 的“CHARACTER SET”子句。
- en: 'References: [#1813](https://www.sqlalchemy.org/trac/ticket/1813)'
  id: totrans-3057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1813](https://www.sqlalchemy.org/trac/ticket/1813)
- en: '**[declarative]**'
  id: totrans-3058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Added support for @classproperty to provide any kind of schema/mapping construct
    from a declarative mixin, including columns with foreign keys, relationships,
    column_property, deferred. This solves all such issues on declarative mixins.
    An error is raised if any MapperProperty subclass is specified on a mixin without
    using @classproperty.
  id: totrans-3059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 @classproperty 的支持，以从声明性混合中提供任何类型的模式/映射构造，包括具有外键、关系、column_property、deferred
    的列。如果在混合中指定任何 MapperProperty 子类而不使用 @classproperty，则会引发错误。
- en: 'References: [#1751](https://www.sqlalchemy.org/trac/ticket/1751), [#1796](https://www.sqlalchemy.org/trac/ticket/1796),
    [#1805](https://www.sqlalchemy.org/trac/ticket/1805)'
  id: totrans-3060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1751](https://www.sqlalchemy.org/trac/ticket/1751), [#1796](https://www.sqlalchemy.org/trac/ticket/1796),
    [#1805](https://www.sqlalchemy.org/trac/ticket/1805)
- en: '**[declarative]**'
  id: totrans-3061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: a mixin class can now define a column that matches one which is present on a
    __table__ defined on a subclass. It cannot, however, define one that is not present
    in the __table__, and the error message here now works.
  id: totrans-3062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，一个混合类可以定义一个与子类上定义的 __table__ 上存在的列匹配的列。但是，它不能定义一个在 __table__ 中不存在的列，现在的错误消息可以正常工作。
- en: 'References: [#1821](https://www.sqlalchemy.org/trac/ticket/1821)'
  id: totrans-3063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1821](https://www.sqlalchemy.org/trac/ticket/1821)
- en: '**[compiler] [extension]**'
  id: totrans-3064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[编译器] [扩展]**'
- en: The ‘default’ compiler is automatically copied over when overriding the compilation
    of a built in clause construct, so no KeyError is raised if the user-defined compiler
    is specific to certain backends and compilation for a different backend is invoked.
  id: totrans-3065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当覆盖内置子句构造的编译时，“default”编译器会自动复制过去，因此如果调用不同后端的编译，不会引发 KeyError。
- en: 'References: [#1838](https://www.sqlalchemy.org/trac/ticket/1838)'
  id: totrans-3066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1838](https://www.sqlalchemy.org/trac/ticket/1838)
- en: '**[documentation]**'
  id: totrans-3067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Added documentation for the Inspector.
  id: totrans-3068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Inspector 添加了文档。
- en: 'References: [#1820](https://www.sqlalchemy.org/trac/ticket/1820)'
  id: totrans-3069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1820](https://www.sqlalchemy.org/trac/ticket/1820)
- en: '**[documentation]**'
  id: totrans-3070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Fixed @memoized_property and @memoized_instancemethod decorators so that Sphinx
    documentation picks up these attributes and methods, such as ResultProxy.inserted_primary_key.
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了@memoized_property和@memoized_instancemethod装饰器，以便Sphinx文档捕获这些属性和方法，例如ResultProxy.inserted_primary_key。
- en: 'References: [#1830](https://www.sqlalchemy.org/trac/ticket/1830)'
  id: totrans-3072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1830](https://www.sqlalchemy.org/trac/ticket/1830)
- en: orm
  id: totrans-3073
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join() will check for a call of the form query.join(target, clause_expression),
    i.e. missing the tuple, and raise an informative error message that this is the
    wrong calling form.
  id: totrans-3075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join()将检查是否调用了query.join(target, clause_expression)形式的调用，即缺少元组，并引发一个信息性错误消息，说明这是错误的调用形式。
- en: '**[orm]**'
  id: totrans-3076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding flushes on self-referential bi-directional many-to-many
    relationships, where two objects made to mutually reference each other in one
    flush would fail to insert a row for both sides. Regression from 0.5.
  id: totrans-3077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于自引用双向多对多关系刷新的错误，其中在一个刷新中使两个对象相互引用将无法为双方插入行。从0.5版本开始的回归。
- en: 'References: [#1824](https://www.sqlalchemy.org/trac/ticket/1824)'
  id: totrans-3078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1824](https://www.sqlalchemy.org/trac/ticket/1824)
- en: '**[orm]**'
  id: totrans-3079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the post_update feature of relationship() has been reworked architecturally
    to integrate more closely with the new 0.6 unit of work. The motivation for the
    change is so that multiple “post update” calls, each affecting different foreign
    key columns of the same row, are executed in a single UPDATE statement, rather
    than one UPDATE statement per column per row. Multiple row updates are also batched
    into executemany()s as possible, while maintaining consistent row ordering.
  id: totrans-3080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship()的post_update功能在架构上进行了重新设计，以更紧密地与新的0.6工作单元集成。更改的动机是，多个影响同一行的不同外键列的“post
    update”调用将在单个UPDATE语句中执行，而不是每列每行一个UPDATE语句。多行更新也尽可能批量处理为executemany()，同时保持一致的行顺序。
- en: '**[orm]**'
  id: totrans-3081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.statement, Query.subquery(), etc. now transfer the values of bind parameters,
    i.e. those specified by query.params(), into the resulting SQL expression. Previously
    the values would not be transferred and bind parameters would come out as None.
  id: totrans-3082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.statement，Query.subquery()等现在将绑定参数的值，即由query.params()指定的值，传输到生成的SQL表达式中。以前，这些值不会被传输，绑定参数将变为None。
- en: '**[orm]**'
  id: totrans-3083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Subquery-eager-loading now works with Query objects which include params(),
    as well as get() Queries.
  id: totrans-3084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 子查询预加载现在可以与包括params()的Query对象一起工作，以及get()查询。
- en: '**[orm]**'
  id: totrans-3085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Can now call make_transient() on an instance that is referenced by parent objects
    via many-to-one, without the parent’s foreign key value getting temporarily set
    to None - this was a function of the “detect primary key switch” flush handler.
    It now ignores objects that are no longer in the “persistent” state, and the parent’s
    foreign key identifier is left unaffected.
  id: totrans-3086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在通过多对一引用的父对象引用的实例上调用make_transient()，而不会将父对象的外键值临时设置为None - 这是“检测主键切换”刷新处理程序的功能。现在它会忽略不再处于“持久”状态的对象，并且父对象的外键标识符不受影响。
- en: '**[orm]**'
  id: totrans-3087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() now accepts False, which cancels any existing order_by() state
    on the Query, allowing subsequent generative methods to be called which do not
    support ORDER BY. This is not the same as the already existing feature of passing
    None, which suppresses any existing order_by() settings, including those configured
    on the mapper. False will make it as though order_by() was never called, while
    None is an active setting.
  id: totrans-3088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by()现在接受False，取消Query上的任何现有order_by()状态，允许调用不支持ORDER BY的后续生成方法。这与已存在的传递None的功能不同，后者会抑制任何现有的order_by()设置，包括在映射器上配置的设置。False将使order_by()好像从未被调用过，而None是一个活动设置。
- en: '**[orm]**'
  id: totrans-3089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An instance which is moved to “transient”, has an incomplete or missing set
    of primary key attributes, and contains expired attributes, will raise an InvalidRequestError
    if an expired attribute is accessed, instead of getting a recursion overflow.
  id: totrans-3090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将移至“瞬态”状态的实例，具有不完整或缺失的主键属性集，并包含已过期属性，如果访问了已过期属性，将引发InvalidRequestError，而不是出现递归溢出。
- en: '**[orm]**'
  id: totrans-3091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The make_transient() function is now in the generated documentation.
  id: totrans-3092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient()函数现在在生成的文档中。
- en: '**[orm]**'
  id: totrans-3093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: make_transient() removes all “loader” callables from the state being made transient,
    removing any “expired” state - all unloaded attributes reset back to undefined,
    None/empty on access.
  id: totrans-3094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: make_transient()从被转换为瞬态状态的状态中删除所有“加载器”可调用项，删除任何“过期”状态 - 所有未加载的属性在访问时重置为未定义，None/空。
- en: sql
  id: totrans-3095
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The warning emitted by the Unicode and String types with convert_unicode=True
    no longer embeds the actual value passed. This so that the Python warning registry
    does not continue to grow in size, the warning is emitted once as per the warning
    filter settings, and large string values don’t pollute the output.
  id: totrans-3097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当convert_unicode=True时，Unicode和String类型发出的警告不再嵌入传递的实际值。这样做是为了防止Python警告注册表继续增长，根据警告过滤器设置，警告只发出一次，并且大字符串值不会污染输出。
- en: 'References: [#1822](https://www.sqlalchemy.org/trac/ticket/1822)'
  id: totrans-3098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1822](https://www.sqlalchemy.org/trac/ticket/1822)
- en: '**[sql]**'
  id: totrans-3099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug that would prevent overridden clause compilation from working for
    “annotated” expression elements, which are often generated by the ORM.
  id: totrans-3100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，该错误会阻止“annotated”表达式元素的覆盖子句编译正常工作，这些元素通常由ORM生成。
- en: '**[sql]**'
  id: totrans-3101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The argument to “ESCAPE” of a LIKE operator or similar is passed through render_literal_value(),
    which may implement escaping of backslashes.
  id: totrans-3102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LIKE运算符或类似的“ESCAPE”的参数通过render_literal_value()传递，该函数可能会实现反斜杠的转义。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-3103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: '**[sql]**'
  id: totrans-3104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in Enum type which blew away native_enum flag when used with TypeDecorators
    or other adaption scenarios.
  id: totrans-3105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Enum类型中的错误修复了当与TypeDecorators或其他适配场景一起使用时会取消native_enum标志的情况。
- en: '**[sql]**'
  id: totrans-3106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Inspector hits bind.connect() when invoked to ensure initialize has been called.
    the internal name “.conn” is changed to “.bind”, since that’s what it is.
  id: totrans-3107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用Inspector时，确保initialize已被调用。内部名称“.conn”更改为“.bind”，因为这就是它的名称。
- en: '**[sql]**'
  id: totrans-3108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Modified the internals of “column annotation” such that a custom Column subclass
    can safely override _constructor to return Column, for the purposes of making
    “configurational” column classes that aren’t involved in proxying, etc.
  id: totrans-3109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了“列注释”的内部，使得自定义的Column子类可以安全地覆盖_constructor返回Column，用于创建“配置型”列类，这些类不涉及代理等。
- en: '**[sql]**'
  id: totrans-3110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy() takes along the “unique” attribute among others, fixes regarding
    declarative mixins
  id: totrans-3111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy()在其他属性中带有“unique”属性，修复有关声明性混合的问题
- en: 'References: [#1829](https://www.sqlalchemy.org/trac/ticket/1829)'
  id: totrans-3112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1829](https://www.sqlalchemy.org/trac/ticket/1829)
- en: postgresql
  id: totrans-3113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: render_literal_value() is overridden which escapes backslashes, currently applies
    to the ESCAPE clause of LIKE and similar expressions. Ultimately this will have
    to detect the value of “standard_conforming_strings” for full behavior.
  id: totrans-3115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: render_literal_value()被覆盖，其转义反斜杠，当前适用于LIKE及类似表达式的ESCAPE子句。最终这将需要检测“standard_conforming_strings”的值以实现完整的行为。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: '**[postgresql]**'
  id: totrans-3117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Won’t generate “CREATE TYPE” / “DROP TYPE” if using types.Enum on a PG version
    prior to 8.3 - the supports_native_enum flag is fully honored.
  id: totrans-3118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在8.3之前的PG版本上使用types.Enum，则不会生成“CREATE TYPE”/“DROP TYPE” - supports_native_enum标志完全受到尊重。
- en: 'References: [#1836](https://www.sqlalchemy.org/trac/ticket/1836)'
  id: totrans-3119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1836](https://www.sqlalchemy.org/trac/ticket/1836)
- en: mysql
  id: totrans-3120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: MySQL dialect doesn’t emit CAST() for MySQL version detected < 4.0.2\. This
    allows the unicode check on connect to proceed.
  id: totrans-3122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言不会为检测到的MySQL版本< 4.0.2发出CAST()。这允许在连接时进行unicode检查。
- en: 'References: [#1826](https://www.sqlalchemy.org/trac/ticket/1826)'
  id: totrans-3123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1826](https://www.sqlalchemy.org/trac/ticket/1826)
- en: '**[mysql]**'
  id: totrans-3124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: MySQL dialect now detects NO_BACKSLASH_ESCAPES sql mode, in addition to ANSI_QUOTES.
  id: totrans-3125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在检测到NO_BACKSLASH_ESCAPES sql模式，除了ANSI_QUOTES之外。
- en: '**[mysql]**'
  id: totrans-3126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: render_literal_value() is overridden which escapes backslashes, currently applies
    to the ESCAPE clause of LIKE and similar expressions. This behavior is derived
    from detecting the value of NO_BACKSLASH_ESCAPES.
  id: totrans-3127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: render_literal_value()被覆盖，其转义反斜杠，当前适用于LIKE及类似表达式的ESCAPE子句。此行为源自检测NO_BACKSLASH_ESCAPES的值。
- en: 'References: [#1400](https://www.sqlalchemy.org/trac/ticket/1400)'
  id: totrans-3128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1400](https://www.sqlalchemy.org/trac/ticket/1400)
- en: mssql
  id: totrans-3129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If server_version_info is outside the usual range of (8, ), (9, ), (10, ), a
    warning is emitted which suggests checking that the FreeTDS version configuration
    is using 7.0 or 8.0, not 4.2.
  id: totrans-3131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果server_version_info在常规范围之外（8，），（9，），（10，），则会发出警告，建议检查FreeTDS版本配置是否使用7.0或8.0，而不是4.2。
- en: 'References: [#1825](https://www.sqlalchemy.org/trac/ticket/1825)'
  id: totrans-3132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1825](https://www.sqlalchemy.org/trac/ticket/1825)
- en: oracle
  id: totrans-3133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed ora-8 compatibility flags such that they don’t cache a stale value from
    before the first database connection actually occurs.
  id: totrans-3135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ora-8 兼容性标志，使其不会缓存第一个数据库连接实际发生之前的过时值。
- en: 'References: [#1819](https://www.sqlalchemy.org/trac/ticket/1819)'
  id: totrans-3136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1819](https://www.sqlalchemy.org/trac/ticket/1819)
- en: '**[oracle]**'
  id: totrans-3137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle’s “native decimal” metadata begins to return ambiguous typing information
    about numerics when columns are embedded in subqueries as well as when ROWNUM
    is consulted with subqueries, as we do for limit/offset. We’ve added these ambiguous
    conditions to the cx_oracle “convert to Decimal()” handler, so that we receive
    numerics as Decimal in more cases instead of as floats. These are then converted,
    if requested, into Integer or Float, or otherwise kept as the lossless Decimal.
  id: totrans-3138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当列嵌入子查询时，Oracle 的“本机小数”元数据开始返回关于数值的模糊类型信息，以及当子查询中咨询 ROWNUM 时，我们对于 limit/offset
    所做的情况。我们已将这些模糊条件添加到 cx_oracle 的“转换为 Decimal()”处理程序中，以便我们在更多情况下将数值作为 Decimal 而不是作为浮点数接收。然后，如果请求，将其转换为
    Integer 或 Float，否则保留为无损 Decimal。
- en: 'References: [#1840](https://www.sqlalchemy.org/trac/ticket/1840)'
  id: totrans-3139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1840](https://www.sqlalchemy.org/trac/ticket/1840)
- en: misc
  id: totrans-3140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[firebird]**'
  id: totrans-3141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Fixed incorrect signature in do_execute(), error introduced in 0.6.1.
  id: totrans-3142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 do_execute() 中的错误签名，这是在 0.6.1 中引入的错误。
- en: 'References: [#1823](https://www.sqlalchemy.org/trac/ticket/1823)'
  id: totrans-3143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1823](https://www.sqlalchemy.org/trac/ticket/1823)
- en: '**[firebird]**'
  id: totrans-3144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird dialect adds CHAR, VARCHAR types which accept a “charset” flag, to
    support Firebird “CHARACTER SET” clause.
  id: totrans-3145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 方言添加了 CHAR、VARCHAR 类型，它们接受一个“charset”标志，以支持 Firebird 的“CHARACTER SET”子句。
- en: 'References: [#1813](https://www.sqlalchemy.org/trac/ticket/1813)'
  id: totrans-3146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1813](https://www.sqlalchemy.org/trac/ticket/1813)
- en: '**[declarative]**'
  id: totrans-3147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Added support for @classproperty to provide any kind of schema/mapping construct
    from a declarative mixin, including columns with foreign keys, relationships,
    column_property, deferred. This solves all such issues on declarative mixins.
    An error is raised if any MapperProperty subclass is specified on a mixin without
    using @classproperty.
  id: totrans-3148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 @classproperty 的支持，以从声明式混合中提供任何类型的模式/映射构造，包括具有外键、关系、column_property、deferred
    的列。如果在混合中指定任何 MapperProperty 子类而不使用 @classproperty，则会引发错误。
- en: 'References: [#1751](https://www.sqlalchemy.org/trac/ticket/1751), [#1796](https://www.sqlalchemy.org/trac/ticket/1796),
    [#1805](https://www.sqlalchemy.org/trac/ticket/1805)'
  id: totrans-3149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1751](https://www.sqlalchemy.org/trac/ticket/1751), [#1796](https://www.sqlalchemy.org/trac/ticket/1796),
    [#1805](https://www.sqlalchemy.org/trac/ticket/1805)
- en: '**[declarative]**'
  id: totrans-3150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: a mixin class can now define a column that matches one which is present on a
    __table__ defined on a subclass. It cannot, however, define one that is not present
    in the __table__, and the error message here now works.
  id: totrans-3151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在一个混合类可以定义一个与子类上定义的 __table__ 上存在的列相匹配的列。但是，它不能定义一个在 __table__ 中不存在的列，这里的错误消息现在可以工作。
- en: 'References: [#1821](https://www.sqlalchemy.org/trac/ticket/1821)'
  id: totrans-3152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1821](https://www.sqlalchemy.org/trac/ticket/1821)
- en: '**[compiler] [extension]**'
  id: totrans-3153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[编译器] [扩展]**'
- en: The ‘default’ compiler is automatically copied over when overriding the compilation
    of a built in clause construct, so no KeyError is raised if the user-defined compiler
    is specific to certain backends and compilation for a different backend is invoked.
  id: totrans-3154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当覆盖内置子句结构的编译时，默认编译器会自动复制过来，因此如果用户定义的编译器特定于某些后端，并且为不同后端调用了编译，就不会引发 KeyError。
- en: 'References: [#1838](https://www.sqlalchemy.org/trac/ticket/1838)'
  id: totrans-3155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1838](https://www.sqlalchemy.org/trac/ticket/1838)
- en: '**[documentation]**'
  id: totrans-3156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Added documentation for the Inspector.
  id: totrans-3157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 Inspector 的文档。
- en: 'References: [#1820](https://www.sqlalchemy.org/trac/ticket/1820)'
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1820](https://www.sqlalchemy.org/trac/ticket/1820)
- en: '**[documentation]**'
  id: totrans-3159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Fixed @memoized_property and @memoized_instancemethod decorators so that Sphinx
    documentation picks up these attributes and methods, such as ResultProxy.inserted_primary_key.
  id: totrans-3160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 @memoized_property 和 @memoized_instancemethod 装饰器，使 Sphinx 文档能够捕获这些属性和方法，例如
    ResultProxy.inserted_primary_key。
- en: 'References: [#1830](https://www.sqlalchemy.org/trac/ticket/1830)'
  id: totrans-3161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1830](https://www.sqlalchemy.org/trac/ticket/1830)
- en: 0.6.1
  id: totrans-3162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.1
- en: 'Released: Mon May 31 2010'
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010 年 5 月 31 日（星期一）
- en: orm
  id: totrans-3164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.6.0 involving improper history accounting on
    mutable attributes.
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.6.0 中引入的关于可变属性不正确历史记录的回归。
- en: 'References: [#1782](https://www.sqlalchemy.org/trac/ticket/1782)'
  id: totrans-3167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1782](https://www.sqlalchemy.org/trac/ticket/1782)
- en: '**[orm]**'
  id: totrans-3168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.6.0 unit of work refactor that broke updates
    for bi-directional relationship() with post_update=True.
  id: totrans-3169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.6.0 工作单元重构中引入的回归问题，导致带有 post_update=True 的双向 relationship() 更新失败。
- en: 'References: [#1807](https://www.sqlalchemy.org/trac/ticket/1807)'
  id: totrans-3170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1807](https://www.sqlalchemy.org/trac/ticket/1807)
- en: '**[orm]**'
  id: totrans-3171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() will not expire attributes on the returned instance if that
    instance is “pending”.
  id: totrans-3172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.merge() 不会使返回的实例上的属性过期，如果该实例处于 “pending” 状态。
- en: 'References: [#1789](https://www.sqlalchemy.org/trac/ticket/1789)'
  id: totrans-3173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1789](https://www.sqlalchemy.org/trac/ticket/1789)
- en: '**[orm]**'
  id: totrans-3174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed __setstate__ method of CollectionAdapter to not fail during deserialize
    where parent InstanceState not yet unserialized.
  id: totrans-3175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CollectionAdapter 的 __setstate__ 方法，在父 InstanceState 尚未反序列化时不会失败。
- en: 'References: [#1802](https://www.sqlalchemy.org/trac/ticket/1802)'
  id: totrans-3176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1802](https://www.sqlalchemy.org/trac/ticket/1802)
- en: '**[orm]**'
  id: totrans-3177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added internal warning in case an instance without a full PK happened to be
    expired and then was asked to refresh.
  id: totrans-3178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实例没有完整主键的情况下，如果发生过期并且被要求刷新，则会添加内部警告。
- en: 'References: [#1797](https://www.sqlalchemy.org/trac/ticket/1797)'
  id: totrans-3179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1797](https://www.sqlalchemy.org/trac/ticket/1797)
- en: '**[orm]**'
  id: totrans-3180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added more aggressive caching to the mapper’s usage of UPDATE, INSERT, and DELETE
    expressions. Assuming the statement has no per-object SQL expressions attached,
    the expression objects are cached by the mapper after the first create, and their
    compiled form is stored persistently in a cache dictionary for the duration of
    the related Engine. The cache is an LRUCache for the rare case that a mapper receives
    an extremely high number of different column patterns as UPDATEs.
  id: totrans-3181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对映射器在使用 UPDATE、INSERT 和 DELETE 表达式时进行了更积极的缓存。假设语句没有附加到每个对象的 SQL 表达式，那么在第一次创建后，映射器会将表达式对象缓存，并将其编译形式持久存储在与相关
    Engine 相关联的缓存字典中。对于极少数情况下，如果映射器接收到极高数量的不同列模式作为 UPDATE，缓存将是一个 LRUCache。
- en: sql
  id: totrans-3182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: expr.in_() now accepts a text() construct as the argument. Grouping parenthesis
    are added automatically, i.e. usage is like col.in_(text(“select id from table”)).
  id: totrans-3184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: expr.in_() 现在接受 text() 结构作为参数。自动添加了分组括号，即使用方式类似于 col.in_(text(“select id from
    table”))。
- en: 'References: [#1793](https://www.sqlalchemy.org/trac/ticket/1793)'
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1793](https://www.sqlalchemy.org/trac/ticket/1793)
- en: '**[sql]**'
  id: totrans-3186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Columns of _Binary type (i.e. LargeBinary, BLOB, etc.) will coerce a “basestring”
    on the right side into a _Binary as well so that required DBAPI processing takes
    place.
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Binary 类型的列（即 LargeBinary、BLOB 等）也会将右侧的 “basestring” 强制转换为 _Binary，以便进行必要的
    DBAPI 处理。
- en: '**[sql]**'
  id: totrans-3188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added table.add_is_dependent_on(othertable), allows manual placement of dependency
    rules between two Table objects for use within create_all(), drop_all(), sorted_tables.
  id: totrans-3189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 table.add_is_dependent_on(othertable)，允许手动在两个 Table 对象之间放置依赖规则，供 create_all()、drop_all()、sorted_tables
    使用。
- en: 'References: [#1801](https://www.sqlalchemy.org/trac/ticket/1801)'
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1801](https://www.sqlalchemy.org/trac/ticket/1801)
- en: '**[sql]**'
  id: totrans-3191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug that prevented implicit RETURNING from functioning properly with composite
    primary key that contained zeroes.
  id: totrans-3192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止具有包含零的复合主键的隐式 RETURNING 正常运行的错误。
- en: 'References: [#1778](https://www.sqlalchemy.org/trac/ticket/1778)'
  id: totrans-3193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1778](https://www.sqlalchemy.org/trac/ticket/1778)
- en: '**[sql]**'
  id: totrans-3194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed errant space character when generating ADD CONSTRAINT for a named UNIQUE
    constraint.
  id: totrans-3195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了生成具有命名 UNIQUE 约束的 ADD CONSTRAINT 时错误的空格字符。
- en: '**[sql]**'
  id: totrans-3196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed “table” argument on constructor of ForeignKeyConstraint
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ForeignKeyConstraint 构造函数中 “table” 参数的问题。
- en: 'References: [#1571](https://www.sqlalchemy.org/trac/ticket/1571)'
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1571](https://www.sqlalchemy.org/trac/ticket/1571)
- en: '**[sql]**'
  id: totrans-3199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in connection pool cursor wrapper whereby if a cursor threw an exception
    on close(), the logging of the message would fail.
  id: totrans-3200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池游标包装器中的错误，即如果游标在 close() 时抛出异常，则消息的记录将失败。
- en: 'References: [#1786](https://www.sqlalchemy.org/trac/ticket/1786)'
  id: totrans-3201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1786](https://www.sqlalchemy.org/trac/ticket/1786)
- en: '**[sql]**'
  id: totrans-3202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the _make_proxy() method of ColumnClause and Column now use self.__class__ to
    determine the class of object to be returned instead of hardcoding to ColumnClause/Column,
    making it slightly easier to produce specific subclasses of these which work in
    alias/subquery situations.
  id: totrans-3203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnClause 和 Column 的 _make_proxy() 方法现在使用 self.__class__ 来确定要返回的对象类，而不是硬编码到
    ColumnClause/Column，这使得更容易生成在别名/子查询情况下工作的特定子类。
- en: '**[sql]**'
  id: totrans-3204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.XXX() doesn’t inadvertently resolve to non-Function classes (e.g. fixes
    func.text()).
  id: totrans-3205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.XXX() 不会意外解析为非函数类（例如修复了 func.text()）。
- en: 'References: [#1798](https://www.sqlalchemy.org/trac/ticket/1798)'
  id: totrans-3206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1798](https://www.sqlalchemy.org/trac/ticket/1798)
- en: mysql
  id: totrans-3207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: func.sysdate() emits “SYSDATE()”, i.e. with the ending parenthesis, on MySQL.
  id: totrans-3209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.sysdate() 在 MySQL 上发出“SYSDATE()”，即带有结尾括号。
- en: 'References: [#1794](https://www.sqlalchemy.org/trac/ticket/1794)'
  id: totrans-3210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1794](https://www.sqlalchemy.org/trac/ticket/1794)
- en: sqlite
  id: totrans-3211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed concatenation of constraints when “PRIMARY KEY” constraint gets moved
    to column level due to SQLite AUTOINCREMENT keyword being rendered.
  id: totrans-3213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 SQLite AUTOINCREMENT 关键字被渲染时，将“PRIMARY KEY”约束移动到列级别时约束的连接。
- en: 'References: [#1812](https://www.sqlalchemy.org/trac/ticket/1812)'
  id: totrans-3214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1812](https://www.sqlalchemy.org/trac/ticket/1812)
- en: oracle
  id: totrans-3215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added a check for cx_oracle versions lower than version 5, in which case the
    incompatible “output type handler” won’t be used. This will impact decimal accuracy
    and some unicode handling issues.
  id: totrans-3217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对低于 5 版本的 cx_oracle 的检查，在这种情况下，不兼容的“输出类型处理程序”将不会被使用。这将影响小数精度和一些 Unicode 处理问题。
- en: 'References: [#1775](https://www.sqlalchemy.org/trac/ticket/1775)'
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1775](https://www.sqlalchemy.org/trac/ticket/1775)
- en: '**[oracle]**'
  id: totrans-3219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed use_ansi=False mode, which was producing broken WHERE clauses in pretty
    much all cases.
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 use_ansi=False 模式，该模式在几乎所有情况下都会产生损坏的 WHERE 子句。
- en: 'References: [#1790](https://www.sqlalchemy.org/trac/ticket/1790)'
  id: totrans-3221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1790](https://www.sqlalchemy.org/trac/ticket/1790)
- en: '**[oracle]**'
  id: totrans-3222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Re-established support for Oracle 8 with cx_oracle, including that use_ansi
    is set to False automatically, NVARCHAR2 and NCLOB are not rendered for Unicode,
    “native unicode” check doesn’t fail, cx_oracle “native unicode” mode is disabled,
    VARCHAR() is emitted with bytes count instead of char count.
  id: totrans-3223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新建立了对 Oracle 8 的 cx_oracle 支持，包括将 use_ansi 自动设置为 False，不为 Unicode 渲染 NVARCHAR2
    和 NCLOB，不会导致“本地 Unicode”检查失败，禁用 cx_oracle 的“本地 Unicode”模式，以字节计数形式发出 VARCHAR()。
- en: 'References: [#1808](https://www.sqlalchemy.org/trac/ticket/1808)'
  id: totrans-3224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1808](https://www.sqlalchemy.org/trac/ticket/1808)
- en: '**[oracle]**'
  id: totrans-3225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: oracle_xe 5 doesn’t accept a Python unicode object in its connect string in
    normal Python 2.x mode - so we coerce to str() directly. non-ascii characters
    aren’t supported in connect strings here since we don’t know what encoding we
    could use.
  id: totrans-3226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在正常的 Python 2.x 模式下，oracle_xe 5 不接受 Python unicode 对象作为其连接字符串 - 因此我们直接将其强制转换为
    str()。由于我们不知道可以使用的编码，因此这里的连接字符串不支持非 ASCII 字符。
- en: 'References: [#1670](https://www.sqlalchemy.org/trac/ticket/1670)'
  id: totrans-3227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1670](https://www.sqlalchemy.org/trac/ticket/1670)
- en: '**[oracle]**'
  id: totrans-3228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: FOR UPDATE is emitted in the syntactically correct position when limit/offset
    is used, i.e. the ROWNUM subquery. However, Oracle can’t really handle FOR UPDATE
    with ORDER BY or with subqueries, so its still not very usable, but at least SQLA
    gets the SQL past the Oracle parser.
  id: totrans-3229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 limit/offset 时，在语法上正确的位置发出 FOR UPDATE，即 ROWNUM 子查询。但是，Oracle 实际上无法处理带有 ORDER
    BY 或子查询的 FOR UPDATE，因此它仍然无法使用，但至少 SQLA 可以将 SQL 传递给 Oracle 解析器。
- en: 'References: [#1815](https://www.sqlalchemy.org/trac/ticket/1815)'
  id: totrans-3230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1815](https://www.sqlalchemy.org/trac/ticket/1815)
- en: misc
  id: totrans-3231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[engines]**'
  id: totrans-3232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Fixed building the C extensions on Python 2.4.
  id: totrans-3233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Python 2.4 上构建 C 扩展的问题。
- en: 'References: [#1781](https://www.sqlalchemy.org/trac/ticket/1781)'
  id: totrans-3234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1781](https://www.sqlalchemy.org/trac/ticket/1781)
- en: '**[engines]**'
  id: totrans-3235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Pool classes will reuse the same “pool_logging_name” setting after a dispose()
    occurs.
  id: totrans-3236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在dispose()发生后，池类将重用相同的“pool_logging_name”设置。
- en: '**[engines]**'
  id: totrans-3237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Engine gains an “execution_options” argument and update_execution_options()
    method, which will apply to all connections generated by this engine.
  id: totrans-3238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Engine 增加了一个“execution_options”参数和update_execution_options()方法，将应用于此引擎生成的所有连接。
- en: '**[firebird]**'
  id: totrans-3239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added a label to the query used within has_table() and has_sequence() to work
    with older versions of Firebird that don’t provide labels for result columns.
  id: totrans-3240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 has_table() 和 has_sequence() 中使用的查询中添加了一个标签，以适应不提供结果列标签的旧版本 Firebird。
- en: 'References: [#1521](https://www.sqlalchemy.org/trac/ticket/1521)'
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1521](https://www.sqlalchemy.org/trac/ticket/1521)
- en: '**[firebird]**'
  id: totrans-3242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added integer coercion to the “type_conv” attribute when passed via query string,
    so that it is properly interpreted by Kinterbasdb.
  id: totrans-3243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当通过查询字符串传递时，将整数强制转换为“type_conv”属性，以便 Kinterbasdb 正确解释它。
- en: 'References: [#1779](https://www.sqlalchemy.org/trac/ticket/1779)'
  id: totrans-3244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1779](https://www.sqlalchemy.org/trac/ticket/1779)
- en: '**[firebird]**'
  id: totrans-3245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added ‘connection shutdown’ to the list of exception strings which indicate
    a dropped connection.
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“连接关闭”添加到指示连接中断的异常字符串列表中。
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  id: totrans-3247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1646](https://www.sqlalchemy.org/trac/ticket/1646)
- en: '**[sqlsoup]**'
  id: totrans-3248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: the SqlSoup constructor accepts a base argument which specifies the base class
    to use for mapped classes, the default being object.
  id: totrans-3249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SqlSoup构造函数接受一个base参数，该参数指定用于映射类的基类，默认为object。
- en: 'References: [#1783](https://www.sqlalchemy.org/trac/ticket/1783)'
  id: totrans-3250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1783](https://www.sqlalchemy.org/trac/ticket/1783)
- en: orm
  id: totrans-3251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.6.0 involving improper history accounting on
    mutable attributes.
  id: totrans-3253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.6.0版本中引入的涉及可变属性不正确历史记录的回归问题。
- en: 'References: [#1782](https://www.sqlalchemy.org/trac/ticket/1782)'
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1782](https://www.sqlalchemy.org/trac/ticket/1782)
- en: '**[orm]**'
  id: totrans-3255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.6.0 unit of work refactor that broke updates
    for bi-directional relationship() with post_update=True.
  id: totrans-3256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.6.0版本中引入的回归问题，该问题破坏了具有post_update=True的双向relationship()的更新。
- en: 'References: [#1807](https://www.sqlalchemy.org/trac/ticket/1807)'
  id: totrans-3257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1807](https://www.sqlalchemy.org/trac/ticket/1807)
- en: '**[orm]**'
  id: totrans-3258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() will not expire attributes on the returned instance if that
    instance is “pending”.
  id: totrans-3259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ��果返回的实例是“pending”，session.merge()将不会使实例上的属性过期。
- en: 'References: [#1789](https://www.sqlalchemy.org/trac/ticket/1789)'
  id: totrans-3260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1789](https://www.sqlalchemy.org/trac/ticket/1789)
- en: '**[orm]**'
  id: totrans-3261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed __setstate__ method of CollectionAdapter to not fail during deserialize
    where parent InstanceState not yet unserialized.
  id: totrans-3262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CollectionAdapter的__setstate__方法，在反序列化时不会因为父InstanceState尚未反序列化而失败。
- en: 'References: [#1802](https://www.sqlalchemy.org/trac/ticket/1802)'
  id: totrans-3263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1802](https://www.sqlalchemy.org/trac/ticket/1802)
- en: '**[orm]**'
  id: totrans-3264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added internal warning in case an instance without a full PK happened to be
    expired and then was asked to refresh.
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实例没有完整主键的情况下，如果实例被过期并要求刷新，则会添加内部警告。
- en: 'References: [#1797](https://www.sqlalchemy.org/trac/ticket/1797)'
  id: totrans-3266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1797](https://www.sqlalchemy.org/trac/ticket/1797)
- en: '**[orm]**'
  id: totrans-3267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added more aggressive caching to the mapper’s usage of UPDATE, INSERT, and DELETE
    expressions. Assuming the statement has no per-object SQL expressions attached,
    the expression objects are cached by the mapper after the first create, and their
    compiled form is stored persistently in a cache dictionary for the duration of
    the related Engine. The cache is an LRUCache for the rare case that a mapper receives
    an extremely high number of different column patterns as UPDATEs.
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对mapper在使用UPDATE、INSERT和DELETE表达式时进行了更积极的缓存。假设语句没有附加到每个对象的SQL表达式，那么在第一次创建后，mapper会将表达式对象缓存，并且它们的编译形式将持久地存储在与相关Engine相关的缓存字典中。缓存是一个LRUCache，用于极少数情况下mapper接收到极高数量的不同列模式作为UPDATE。
- en: sql
  id: totrans-3269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: expr.in_() now accepts a text() construct as the argument. Grouping parenthesis
    are added automatically, i.e. usage is like col.in_(text(“select id from table”)).
  id: totrans-3271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: expr.in_()现在接受一个text()构造作为参数。自动添加分组括号，即使用方式类似于col.in_(text(“select id from table”)).
- en: 'References: [#1793](https://www.sqlalchemy.org/trac/ticket/1793)'
  id: totrans-3272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1793](https://www.sqlalchemy.org/trac/ticket/1793)
- en: '**[sql]**'
  id: totrans-3273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Columns of _Binary type (i.e. LargeBinary, BLOB, etc.) will coerce a “basestring”
    on the right side into a _Binary as well so that required DBAPI processing takes
    place.
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Binary类型的列（即LargeBinary、BLOB等）将右侧的“basestring”强制转换为_Binary，以便进行必要的DBAPI处理。
- en: '**[sql]**'
  id: totrans-3275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added table.add_is_dependent_on(othertable), allows manual placement of dependency
    rules between two Table objects for use within create_all(), drop_all(), sorted_tables.
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了table.add_is_dependent_on(othertable)，允许在create_all()、drop_all()、sorted_tables中手动设置两个Table对象之间的依赖规则。
- en: 'References: [#1801](https://www.sqlalchemy.org/trac/ticket/1801)'
  id: totrans-3277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1801](https://www.sqlalchemy.org/trac/ticket/1801)
- en: '**[sql]**'
  id: totrans-3278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug that prevented implicit RETURNING from functioning properly with composite
    primary key that contained zeroes.
  id: totrans-3279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止具有包含零的复合主键的隐式RETURNING正常运行的错误。
- en: 'References: [#1778](https://www.sqlalchemy.org/trac/ticket/1778)'
  id: totrans-3280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1778](https://www.sqlalchemy.org/trac/ticket/1778)
- en: '**[sql]**'
  id: totrans-3281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed errant space character when generating ADD CONSTRAINT for a named UNIQUE
    constraint.
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为命名UNIQUE约束生成ADD CONSTRAINT时生成的额外空格字符。
- en: '**[sql]**'
  id: totrans-3283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed “table” argument on constructor of ForeignKeyConstraint
  id: totrans-3284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ForeignKeyConstraint构造函数上的“table”参数。
- en: 'References: [#1571](https://www.sqlalchemy.org/trac/ticket/1571)'
  id: totrans-3285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1571](https://www.sqlalchemy.org/trac/ticket/1571)
- en: '**[sql]**'
  id: totrans-3286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in connection pool cursor wrapper whereby if a cursor threw an exception
    on close(), the logging of the message would fail.
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池游标包装器中的错误，即如果游标在close()时抛出异常，则消息的记录将失败。
- en: 'References: [#1786](https://www.sqlalchemy.org/trac/ticket/1786)'
  id: totrans-3288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1786](https://www.sqlalchemy.org/trac/ticket/1786)
- en: '**[sql]**'
  id: totrans-3289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the _make_proxy() method of ColumnClause and Column now use self.__class__ to
    determine the class of object to be returned instead of hardcoding to ColumnClause/Column,
    making it slightly easier to produce specific subclasses of these which work in
    alias/subquery situations.
  id: totrans-3290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnClause 和 Column 的 _make_proxy() 方法现在使用 self.__class__ 来确定要返回的对象类，而不是硬编码为
    ColumnClause/Column，这使得在别名/子查询情况下更容易生成特定的子类。
- en: '**[sql]**'
  id: totrans-3291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.XXX() doesn’t inadvertently resolve to non-Function classes (e.g. fixes
    func.text()).
  id: totrans-3292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.XXX() 不会错误地解析为非 Function 类（例如修复了 func.text()）。
- en: 'References: [#1798](https://www.sqlalchemy.org/trac/ticket/1798)'
  id: totrans-3293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1798](https://www.sqlalchemy.org/trac/ticket/1798)
- en: mysql
  id: totrans-3294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: func.sysdate() emits “SYSDATE()”, i.e. with the ending parenthesis, on MySQL.
  id: totrans-3296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.sysdate() 在 MySQL 上发出“SYSDATE()”，即带有结束括号。
- en: 'References: [#1794](https://www.sqlalchemy.org/trac/ticket/1794)'
  id: totrans-3297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1794](https://www.sqlalchemy.org/trac/ticket/1794)
- en: sqlite
  id: totrans-3298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed concatenation of constraints when “PRIMARY KEY” constraint gets moved
    to column level due to SQLite AUTOINCREMENT keyword being rendered.
  id: totrans-3300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当“PRIMARY KEY”约束由于 SQLite AUTOINCREMENT 关键字被渲染而移动到列级别时的约束连接。
- en: 'References: [#1812](https://www.sqlalchemy.org/trac/ticket/1812)'
  id: totrans-3301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1812](https://www.sqlalchemy.org/trac/ticket/1812)
- en: oracle
  id: totrans-3302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added a check for cx_oracle versions lower than version 5, in which case the
    incompatible “output type handler” won’t be used. This will impact decimal accuracy
    and some unicode handling issues.
  id: totrans-3304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个检查，用于低于版本 5 的 cx_oracle 版本，如果是这种情况，则不会使用不兼容的“output type handler”。这将影响十进制精度和一些
    Unicode 处理问题。
- en: 'References: [#1775](https://www.sqlalchemy.org/trac/ticket/1775)'
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1775](https://www.sqlalchemy.org/trac/ticket/1775)
- en: '**[oracle]**'
  id: totrans-3306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed use_ansi=False mode, which was producing broken WHERE clauses in pretty
    much all cases.
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 use_ansi=False 模式，在几乎所有情况下都会产生错误的 WHERE 子句。
- en: 'References: [#1790](https://www.sqlalchemy.org/trac/ticket/1790)'
  id: totrans-3308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1790](https://www.sqlalchemy.org/trac/ticket/1790)
- en: '**[oracle]**'
  id: totrans-3309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Re-established support for Oracle 8 with cx_oracle, including that use_ansi
    is set to False automatically, NVARCHAR2 and NCLOB are not rendered for Unicode,
    “native unicode” check doesn’t fail, cx_oracle “native unicode” mode is disabled,
    VARCHAR() is emitted with bytes count instead of char count.
  id: totrans-3310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新建立了对 Oracle 8 的 cx_oracle 支持，包括自动将 use_ansi 设置为 False，对 Unicode 不渲染 NVARCHAR2
    和 NCLOB，不会因为“native unicode”检查失败，禁用 cx_oracle 的“native unicode”模式，用字节计数而不是字符计数发出
    VARCHAR()。
- en: 'References: [#1808](https://www.sqlalchemy.org/trac/ticket/1808)'
  id: totrans-3311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1808](https://www.sqlalchemy.org/trac/ticket/1808)
- en: '**[oracle]**'
  id: totrans-3312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: oracle_xe 5 doesn’t accept a Python unicode object in its connect string in
    normal Python 2.x mode - so we coerce to str() directly. non-ascii characters
    aren’t supported in connect strings here since we don’t know what encoding we
    could use.
  id: totrans-3313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在正常的 Python 2.x 模式下，oracle_xe 5 不接受 Python unicode 对象作为其连接字符串 - 因此我们直接强制转换为
    str()。这里不支持连接字符串中的非 ASCII 字符，因为我们不知道可以使用什么编码。
- en: 'References: [#1670](https://www.sqlalchemy.org/trac/ticket/1670)'
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1670](https://www.sqlalchemy.org/trac/ticket/1670)
- en: '**[oracle]**'
  id: totrans-3315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: FOR UPDATE is emitted in the syntactically correct position when limit/offset
    is used, i.e. the ROWNUM subquery. However, Oracle can’t really handle FOR UPDATE
    with ORDER BY or with subqueries, so its still not very usable, but at least SQLA
    gets the SQL past the Oracle parser.
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 limit/offset 时，FOR UPDATE 被放置在语法正确的位置，即 ROWNUM 子查询。然而，Oracle 实际上无法处理带有 ORDER
    BY 或子查询的 FOR UPDATE，因此仍然不太可用，但至少 SQLA 能够将 SQL 传递给 Oracle 解析器。
- en: 'References: [#1815](https://www.sqlalchemy.org/trac/ticket/1815)'
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1815](https://www.sqlalchemy.org/trac/ticket/1815)
- en: misc
  id: totrans-3318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[engines]**'
  id: totrans-3319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Fixed building the C extensions on Python 2.4.
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Python 2.4 上构建 C 扩展的问题。
- en: 'References: [#1781](https://www.sqlalchemy.org/trac/ticket/1781)'
  id: totrans-3321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1781](https://www.sqlalchemy.org/trac/ticket/1781)
- en: '**[engines]**'
  id: totrans-3322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Pool classes will reuse the same “pool_logging_name” setting after a dispose()
    occurs.
  id: totrans-3323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 dispose() 发生后，Pool 类将重用相同的“pool_logging_name”设置。
- en: '**[engines]**'
  id: totrans-3324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Engine gains an “execution_options” argument and update_execution_options()
    method, which will apply to all connections generated by this engine.
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Engine 增加了“execution_options”参数和update_execution_options()方法，将应用于此 engine 生成的所有连接。
- en: '**[firebird]**'
  id: totrans-3326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added a label to the query used within has_table() and has_sequence() to work
    with older versions of Firebird that don’t provide labels for result columns.
  id: totrans-3327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 has_table() 和 has_sequence() 中使用的查询添加了一个标签，以便与不提供结果列标签的旧版本 Firebird 一起使用。
- en: 'References: [#1521](https://www.sqlalchemy.org/trac/ticket/1521)'
  id: totrans-3328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1521](https://www.sqlalchemy.org/trac/ticket/1521)
- en: '**[firebird]**'
  id: totrans-3329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added integer coercion to the “type_conv” attribute when passed via query string,
    so that it is properly interpreted by Kinterbasdb.
  id: totrans-3330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在通过查询字符串传递“type_conv”属性时，添加了整数强制转换，以便Kinterbasdb正确解释它。
- en: 'References: [#1779](https://www.sqlalchemy.org/trac/ticket/1779)'
  id: totrans-3331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1779](https://www.sqlalchemy.org/trac/ticket/1779)
- en: '**[firebird]**'
  id: totrans-3332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added ‘connection shutdown’ to the list of exception strings which indicate
    a dropped connection.
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“连接关闭”添加到指示连接中断的异常字符串列表中。
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  id: totrans-3334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1646](https://www.sqlalchemy.org/trac/ticket/1646)
- en: '**[sqlsoup]**'
  id: totrans-3335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlsoup]**'
- en: the SqlSoup constructor accepts a base argument which specifies the base class
    to use for mapped classes, the default being object.
  id: totrans-3336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SqlSoup构造函数接受一个base参数，该参数指定用于映射类的基类，默认为object。
- en: 'References: [#1783](https://www.sqlalchemy.org/trac/ticket/1783)'
  id: totrans-3337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1783](https://www.sqlalchemy.org/trac/ticket/1783)
- en: 0.6.0
  id: totrans-3338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6.0
- en: 'Released: Sun Apr 18 2010'
  id: totrans-3339
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010年4月18日星期日
- en: orm
  id: totrans-3340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Unit of work internals have been rewritten. Units of work with large numbers
    of objects interdependent objects can now be flushed without recursion overflows
    as there is no longer reliance upon recursive calls. The number of internal structures
    now stays constant for a particular session state, regardless of how many relationships
    are present on mappings. The flow of events now corresponds to a linear list of
    steps, generated by the mappers and relationships based on actual work to be done,
    filtered through a single topological sort for correct ordering. Flush actions
    are assembled using far fewer steps and less memory.
  id: totrans-3342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工作单元内部已经重写。具有大量相互依赖对象的工作单元现在可以在没有递归溢出的情况下刷新，因为不再依赖递归调用。对于特定会话状态，内部结构的数量现在保持恒定，无论映射上存在多少关系。事件流现在对应于由映射器和基于实际工作的关系生成的线性步骤列表，通过单个拓扑排序进行正确排序。刷新操作使用更少的步骤和更少的内存进行组装。
- en: 'References: [#1081](https://www.sqlalchemy.org/trac/ticket/1081), [#1742](https://www.sqlalchemy.org/trac/ticket/1742)'
  id: totrans-3343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1081](https://www.sqlalchemy.org/trac/ticket/1081)，[#1742](https://www.sqlalchemy.org/trac/ticket/1742)
- en: '**[orm]**'
  id: totrans-3344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Along with the UOW rewrite, this also removes an issue introduced in 0.6beta3
    regarding topological cycle detection for units of work with long dependency cycles.
    We now use an algorithm written by Guido (thanks Guido!).
  id: totrans-3345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了UOW重写之外，这还解决了0.6beta3中关于具有长依赖循环的工作单元的拓扑循环检测的问题。我们现在使用Guido编写的算法（感谢Guido！）。
- en: '**[orm]**'
  id: totrans-3346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: one-to-many relationships now maintain a list of positive parent-child associations
    within the flush, preventing previous parents marked as deleted from cascading
    a delete or NULL foreign key set on those child objects, despite the end-user
    not removing the child from the old association.
  id: totrans-3347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一对多关系现在在刷新时维护一个正的父子关联列表，防止之前标记为已删除的父项对这些子对象进行级联删除或设置为NULL外键，尽管最终用户没有从旧关联中移除子项。
- en: 'References: [#1764](https://www.sqlalchemy.org/trac/ticket/1764)'
  id: totrans-3348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1764](https://www.sqlalchemy.org/trac/ticket/1764)
- en: '**[orm]**'
  id: totrans-3349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A collection lazy load will switch off default eagerloading on the reverse many-to-one
    side, since that loading is by definition unnecessary.
  id: totrans-3350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集合的延迟加载将关闭反向的多对一端的默认急加载，因为根据定义，该加载是不必要的。
- en: 'References: [#1495](https://www.sqlalchemy.org/trac/ticket/1495)'
  id: totrans-3351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1495](https://www.sqlalchemy.org/trac/ticket/1495)
- en: '**[orm]**'
  id: totrans-3352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.refresh() now does an equivalent expire() on the given instance first,
    so that the “refresh-expire” cascade is propagated. Previously, refresh() was
    not affected in any way by the presence of “refresh-expire” cascade. This is a
    change in behavior versus that of 0.6beta2, where the “lockmode” flag passed to
    refresh() would cause a version check to occur. Since the instance is first expired,
    refresh() always upgrades the object to the most recent version.
  id: totrans-3353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.refresh()现在首先对给定实例执行等效的expire()，以便“refresh-expire”级联被传播。以前，refresh()不受“refresh-expire”级联的影响。这是与0.6beta2的行为不同之处，其中传递给refresh()的“lockmode”标志会导致版本检查发生。由于实例首先被过期，refresh()总是将对象升级到最新版本。
- en: '**[orm]**'
  id: totrans-3354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ‘refresh-expire’ cascade, when reaching a pending object, will expunge the
    object if the cascade also includes “delete-orphan”, or will simply detach it
    otherwise.
  id: totrans-3355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “refresh-expire”级联在到达挂起对象时，如果级联还包括“delete-orphan”，则会将对象清除；否则，将简单地分离它。
- en: 'References: [#1754](https://www.sqlalchemy.org/trac/ticket/1754)'
  id: totrans-3356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1754](https://www.sqlalchemy.org/trac/ticket/1754)
- en: '**[orm]**'
  id: totrans-3357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: id(obj) is no longer used internally within topological.py, as the sorting functions
    now require hashable objects only.
  id: totrans-3358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在topological.py中不再内部使用id(obj)，因为排序函数现在仅需要可哈希对象。
- en: 'References: [#1756](https://www.sqlalchemy.org/trac/ticket/1756)'
  id: totrans-3359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1756](https://www.sqlalchemy.org/trac/ticket/1756)
- en: '**[orm]**'
  id: totrans-3360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ORM will set the docstring of all generated descriptors to None by default.
    This can be overridden using ‘doc’ (or if using Sphinx, attribute docstrings work
    too).
  id: totrans-3361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM现在默认将所有生成的描述符的文档字符串设置为None。可以使用‘doc’进行覆盖（或者如果使用Sphinx，属性文档字符串也可以）。
- en: '**[orm]**'
  id: totrans-3362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added kw argument ‘doc’ to all mapper property callables as well as Column().
    Will assemble the string ‘doc’ as the ‘__doc__’ attribute on the descriptor.
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有映射器属性可调用的Column()添加了kw参数‘doc’。将字符串‘doc’组装为描述符上的‘__doc__’属性。
- en: '**[orm]**'
  id: totrans-3364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Usage of version_id_col on a backend that supports cursor.rowcount for execute()
    but not executemany() now works when a delete is issued (already worked for saves,
    since those don’t use executemany()). For a backend that doesn’t support cursor.rowcount
    at all, a warning is emitted the same as with saves.
  id: totrans-3365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在支持cursor.rowcount执行()但不支持executemany()的后端上，现在在发出删除时可以使用version_id_col（已经适用于保存，因为这些不使用executemany()）。对于根本不支持cursor.rowcount的后端，会发出与保存相同的警告。
- en: 'References: [#1761](https://www.sqlalchemy.org/trac/ticket/1761)'
  id: totrans-3366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1761](https://www.sqlalchemy.org/trac/ticket/1761)
- en: '**[orm]**'
  id: totrans-3367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ORM now short-term caches the “compiled” form of insert() and update() constructs
    when flushing lists of objects of all the same class, thereby avoiding redundant
    compilation per individual INSERT/UPDATE within an individual flush() call.
  id: totrans-3368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当刷新所有同一类对象列表时，ORM现在会短期缓存insert()和update()构造的“编译”形式，从而避免在单个flush()调用中每个INSERT/UPDATE都进行冗余编译。
- en: '**[orm]**'
  id: totrans-3369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: internal getattr(), setattr(), getcommitted() methods on ColumnProperty, CompositeProperty,
    RelationshipProperty have been underscored (i.e. are private), signature has changed.
  id: totrans-3370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnProperty、CompositeProperty、RelationshipProperty上的内部getattr()、setattr()、getcommitted()方法已被下划线标记（即为私有），签名已更改。
- en: examples
  id: totrans-3371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Updated attribute_shard.py example to use a more robust method of searching
    a Query for binary expressions which compare columns against literal values.
  id: totrans-3373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了attribute_shard.py示例，使用更健壮的方法搜索Query，比较列与文字值的二进制表达式。
- en: sql
  id: totrans-3374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored some bind-labeling logic from 0.5 which ensures that tables with column
    names that overlap another column of the form “<tablename>_<columnname>” won’t
    produce errors if column._label is used as a bind name during an UPDATE. Test
    coverage which wasn’t present in 0.5 has been added.
  id: totrans-3376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.5版本中恢复了一些绑定标签逻辑，确保具有与另一列重叠的列名的表，如“<tablename>_<columnname>”，在UPDATE期间使用column._label作为绑定名称时不会产生错误。添加了0.5版本中不存在的测试覆盖率。
- en: 'References: [#1755](https://www.sqlalchemy.org/trac/ticket/1755)'
  id: totrans-3377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1755](https://www.sqlalchemy.org/trac/ticket/1755)
- en: '**[sql]**'
  id: totrans-3378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: somejoin.select(fold_equivalents=True) is no longer deprecated, and will eventually
    be rolled into a more comprehensive version of the feature for.
  id: totrans-3379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: somejoin.select(fold_equivalents=True)不再被弃用，并最终将被整合到更全面的功能版本中。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-3380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[sql]**'
  id: totrans-3381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Numeric type raises an *enormous* warning when expected to convert floats
    to Decimal from a DBAPI that returns floats. This includes SQLite, Sybase, MS-SQL.
  id: totrans-3382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Numeric类型预期将浮点数转换为来自返回浮点数的DBAPI的Decimal时，会引发*巨大*警告。这包括SQLite、Sybase、MS-SQL。
- en: 'References: [#1759](https://www.sqlalchemy.org/trac/ticket/1759)'
  id: totrans-3383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1759](https://www.sqlalchemy.org/trac/ticket/1759)
- en: '**[sql]**'
  id: totrans-3384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed an error in expression typing which caused an endless loop for expressions
    with two NULL types.
  id: totrans-3385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式类型化中的错误，导致具有两个NULL类型的表达式出现无限循环。
- en: '**[sql]**'
  id: totrans-3386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in execution_options() feature whereby the existing Transaction and
    other state information from the parent connection would not be propagated to
    the sub-connection.
  id: totrans-3387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了execution_options()功能中的错误，即父连接中现有的事务和其他状态信息不会传播到子连接。
- en: '**[sql]**'
  id: totrans-3388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new ‘compiled_cache’ execution option. A dictionary where Compiled objects
    will be cached when the Connection compiles a clause expression into a dialect-
    and parameter- specific Compiled object. It is the user’s responsibility to manage
    the size of this dictionary, which will have keys corresponding to the dialect,
    clause element, the column names within the VALUES or SET clause of an INSERT
    or UPDATE, as well as the “batch” mode for an INSERT or UPDATE statement.
  id: totrans-3389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的‘compiled_cache’执行选项。一个字典，在Connection将一个子句表达式编译成特定于方言和参数的Compiled对象时，Compiled对象将被缓存。用户有责任管理这个字典的大小，它将具有对应于方言、子句元素、INSERT或UPDATE语句的VALUES或SET子句中的列名称，以及INSERT或UPDATE语句的“批量”模式的键。
- en: '**[sql]**'
  id: totrans-3390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added get_pk_constraint() to reflection.Inspector, similar to get_primary_keys()
    except returns a dict that includes the name of the constraint, for supported
    backends (PG so far).
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了get_pk_constraint()到reflection.Inspector，类似于get_primary_keys()，但返回一个包括约束名称的字典，用于支持的后端（目前为PG）。
- en: 'References: [#1769](https://www.sqlalchemy.org/trac/ticket/1769)'
  id: totrans-3392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1769](https://www.sqlalchemy.org/trac/ticket/1769)
- en: '**[sql]**'
  id: totrans-3393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.create() and Table.drop() no longer apply metadata- level create/drop
    events.
  id: totrans-3394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.create()和Table.drop()不再应用于元数据级别的创建/删除事件。
- en: 'References: [#1771](https://www.sqlalchemy.org/trac/ticket/1771)'
  id: totrans-3395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1771](https://www.sqlalchemy.org/trac/ticket/1771)
- en: postgresql
  id: totrans-3396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: PostgreSQL now reflects sequence names associated with SERIAL columns correctly,
    after the name of the sequence has been changed. Thanks to Kumar McMillan for
    the patch.
  id: totrans-3398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当序列的名称更改后，PostgreSQL会正确地反映与SERIAL列关联的序列名称。感谢Kumar McMillan提供的补丁。
- en: 'References: [#1071](https://www.sqlalchemy.org/trac/ticket/1071)'
  id: totrans-3399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1071](https://www.sqlalchemy.org/trac/ticket/1071)
- en: '**[postgresql]**'
  id: totrans-3400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Repaired missing import in psycopg2._PGNumeric type when unknown numeric is
    received.
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在接收到未知数字时，psycopg2._PGNumeric类型中缺少的导入。
- en: '**[postgresql]**'
  id: totrans-3402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: psycopg2/pg8000 dialects now aware of REAL[], FLOAT[], DOUBLE_PRECISION[], NUMERIC[]
    return types without raising an exception.
  id: totrans-3403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2/pg8000方言现在知道REAL[]、FLOAT[]、DOUBLE_PRECISION[]、NUMERIC[]返回类型，而不会引发异常。
- en: '**[postgresql]**'
  id: totrans-3404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: PostgreSQL reflects the name of primary key constraints, if one exists.
  id: totrans-3405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在，则PostgreSQL反映主键约束的名称。
- en: 'References: [#1769](https://www.sqlalchemy.org/trac/ticket/1769)'
  id: totrans-3406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1769](https://www.sqlalchemy.org/trac/ticket/1769)
- en: oracle
  id: totrans-3407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: 'Now using cx_oracle output converters so that the DBAPI returns natively the
    kinds of values we prefer:'
  id: totrans-3409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用cx_oracle输出转换器，以便DBAPI原生返回我们喜欢的值类型：
- en: '**[oracle]**'
  id: totrans-3410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: NUMBER values with positive precision + scale convert to cx_oracle.STRING and
    then to Decimal. This allows perfect precision for the Numeric type when using
    cx_oracle.
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有正精度+标度的NUMBER值将转换为cx_oracle.STRING，然后转换为Decimal。这样在使用cx_oracle时，Numeric类型可以完美精确。
- en: 'References: [#1759](https://www.sqlalchemy.org/trac/ticket/1759)'
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1759](https://www.sqlalchemy.org/trac/ticket/1759)
- en: '**[oracle]**'
  id: totrans-3413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: STRING/FIXED_CHAR now convert to unicode natively. SQLAlchemy’s String types
    then don’t need to apply any kind of conversions.
  id: totrans-3414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: STRING/FIXED_CHAR现在本地转换为unicode。因此，SQLAlchemy的String类型不需要应用任何类型的转换。
- en: misc
  id: totrans-3415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engines]**'
  id: totrans-3416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: The C extension now also works with DBAPIs which use custom sequences as row
    (and not only tuples).
  id: totrans-3417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在C扩展还适用于使用自定义序列作为行（而不仅仅是元组）的DBAPI。
- en: 'References: [#1757](https://www.sqlalchemy.org/trac/ticket/1757)'
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1757](https://www.sqlalchemy.org/trac/ticket/1757)
- en: '**[ext]**'
  id: totrans-3419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: the compiler extension now allows @compiles decorators on base classes that
    extend to child classes, @compiles decorators on child classes that aren’t broken
    by a @compiles decorator on the base class.
  id: totrans-3420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在允许在扩展到子类的基类上使用@compiles装饰器，在子类上使用@compiles装饰器不会被基类上的@compiles装饰器破坏。
- en: '**[ext]**'
  id: totrans-3421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Declarative will raise an informative error message if a non-mapped class attribute
    is referenced in the string-based relationship() arguments.
  id: totrans-3422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在基于字符串的relationship()参数中引用了非映射类属性，Declarative将引发信息性错误消息。
- en: '**[ext]**'
  id: totrans-3423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Further reworked the “mixin” logic in declarative to additionally allow __mapper_args__
    as a @classproperty on a mixin, such as to dynamically assign polymorphic_identity.
  id: totrans-3424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步重新设计了Declarative中的“mixin”逻辑，以允许__mapper_args__作为mixin上的@classproperty，例如动态分配polymorphic_identity。
- en: '**[firebird]**'
  id: totrans-3425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The functionality of result.rowcount can be disabled on a per-engine basis by
    setting ‘enable_rowcount=False’ on create_engine(). Normally, cursor.rowcount
    is called after any UPDATE or DELETE statement unconditionally, because the cursor
    is then closed and Firebird requires an open cursor in order to get a rowcount.
    This call is slightly expensive however so it can be disabled. To re-enable on
    a per-execution basis, the ‘enable_rowcount=True’ execution option may be used.
  id: totrans-3426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在每个引擎上可以通过在 create_engine() 上设置 'enable_rowcount=False' 来禁用 result.rowcount
    的功能。通常，在任何 UPDATE 或 DELETE 语句之后无条件地调用 cursor.rowcount，因为然后游标被关闭，而 Firebird 需要一个打开的游标才能获得行数。然而，这个调用稍微昂贵，所以可以禁用它。要在每个执行基础上重新启用，可以使用
    'enable_rowcount=True' 执行选项。
- en: orm
  id: totrans-3427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Unit of work internals have been rewritten. Units of work with large numbers
    of objects interdependent objects can now be flushed without recursion overflows
    as there is no longer reliance upon recursive calls. The number of internal structures
    now stays constant for a particular session state, regardless of how many relationships
    are present on mappings. The flow of events now corresponds to a linear list of
    steps, generated by the mappers and relationships based on actual work to be done,
    filtered through a single topological sort for correct ordering. Flush actions
    are assembled using far fewer steps and less memory.
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工作单元内部已被重写。具有大量相互依赖对象的工作单元现在可以在没有递归溢出的情况下刷新，因为不再依赖于递归调用。对于特定的会话状态，内部结构的数量现在保持不变，无论映射上存在多少关系。事件的流现在对应于由映射器和基于实际工作的关系生成的线性步骤列表，通过单个拓扑排序进行正确排序。刷新操作使用更少的步骤和更少的内存进行组装。
- en: 'References: [#1081](https://www.sqlalchemy.org/trac/ticket/1081), [#1742](https://www.sqlalchemy.org/trac/ticket/1742)'
  id: totrans-3430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1081](https://www.sqlalchemy.org/trac/ticket/1081), [#1742](https://www.sqlalchemy.org/trac/ticket/1742)
- en: '**[orm]**'
  id: totrans-3431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Along with the UOW rewrite, this also removes an issue introduced in 0.6beta3
    regarding topological cycle detection for units of work with long dependency cycles.
    We now use an algorithm written by Guido (thanks Guido!).
  id: totrans-3432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 伴随 UOW 重写，这还解决了在 0.6beta3 中引入的有关拓扑循环检测的问题，针对具有长依赖循环的工作单元。我们现在使用由 Guido 编写的算法（感谢
    Guido！）。
- en: '**[orm]**'
  id: totrans-3433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: one-to-many relationships now maintain a list of positive parent-child associations
    within the flush, preventing previous parents marked as deleted from cascading
    a delete or NULL foreign key set on those child objects, despite the end-user
    not removing the child from the old association.
  id: totrans-3434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一对多关系现在在刷新期间维护一个正父子关联的列表，防止以前标记为已删除的父项从级联删除或将空外键集设置在这些子对象上，尽管最终用户没有从旧关联中删除子项。
- en: 'References: [#1764](https://www.sqlalchemy.org/trac/ticket/1764)'
  id: totrans-3435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1764](https://www.sqlalchemy.org/trac/ticket/1764)
- en: '**[orm]**'
  id: totrans-3436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A collection lazy load will switch off default eagerloading on the reverse many-to-one
    side, since that loading is by definition unnecessary.
  id: totrans-3437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集合的延迟加载将关闭反向的多对一端上的默认急加载，因为该加载从定义上来说是不必要的。
- en: 'References: [#1495](https://www.sqlalchemy.org/trac/ticket/1495)'
  id: totrans-3438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1495](https://www.sqlalchemy.org/trac/ticket/1495)
- en: '**[orm]**'
  id: totrans-3439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.refresh() now does an equivalent expire() on the given instance first,
    so that the “refresh-expire” cascade is propagated. Previously, refresh() was
    not affected in any way by the presence of “refresh-expire” cascade. This is a
    change in behavior versus that of 0.6beta2, where the “lockmode” flag passed to
    refresh() would cause a version check to occur. Since the instance is first expired,
    refresh() always upgrades the object to the most recent version.
  id: totrans-3440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，Session.refresh() 首先对给定的实例执行等效的 expire()，以便“refresh-expire”级联被传播。之前，refresh()
    在任何方式上都不受“refresh-expire”级联的影响。这与0.6beta2的行为不同，在那里传递给 refresh() 的“lockmode”标志会导致版本检查发生。由于实例首先过期，因此
    refresh() 总是将对象升级到最新版本。
- en: '**[orm]**'
  id: totrans-3441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ‘refresh-expire’ cascade, when reaching a pending object, will expunge the
    object if the cascade also includes “delete-orphan”, or will simply detach it
    otherwise.
  id: totrans-3442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当“refresh-expire”级联到达挂起的对象时，如果级联还包括“delete-orphan”，则将清除该对象；否则，将简单地分离它。
- en: 'References: [#1754](https://www.sqlalchemy.org/trac/ticket/1754)'
  id: totrans-3443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1754](https://www.sqlalchemy.org/trac/ticket/1754)
- en: '**[orm]**'
  id: totrans-3444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: id(obj) is no longer used internally within topological.py, as the sorting functions
    now require hashable objects only.
  id: totrans-3445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: id(obj) 不再在 topological.py 内部使用，因为排序函数现在仅需要可哈希对象。
- en: 'References: [#1756](https://www.sqlalchemy.org/trac/ticket/1756)'
  id: totrans-3446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1756](https://www.sqlalchemy.org/trac/ticket/1756)
- en: '**[orm]**'
  id: totrans-3447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ORM will set the docstring of all generated descriptors to None by default.
    This can be overridden using ‘doc’ (or if using Sphinx, attribute docstrings work
    too).
  id: totrans-3448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM现在默认将所有生成的描述符的文档字符串设置为None。可以使用‘doc’进行覆盖（或者如果使用Sphinx，则属性文档字符串也有效）。
- en: '**[orm]**'
  id: totrans-3449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added kw argument ‘doc’ to all mapper property callables as well as Column().
    Will assemble the string ‘doc’ as the ‘__doc__’ attribute on the descriptor.
  id: totrans-3450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有mapper属性可调用对象以及Column()添加了kw参数‘doc’。将字符串‘doc’组装为描述符的‘__doc__’属性。
- en: '**[orm]**'
  id: totrans-3451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Usage of version_id_col on a backend that supports cursor.rowcount for execute()
    but not executemany() now works when a delete is issued (already worked for saves,
    since those don’t use executemany()). For a backend that doesn’t support cursor.rowcount
    at all, a warning is emitted the same as with saves.
  id: totrans-3452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在支持cursor.rowcount用于execute()但不支持executemany()的后端上，现在在发出删除时使用version_id_col可以正常工作（对于保存已经可以正常工作，因为它们不使用executemany()）。对于根本不支持cursor.rowcount的后端，与保存一样会发出警告。
- en: 'References: [#1761](https://www.sqlalchemy.org/trac/ticket/1761)'
  id: totrans-3453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1761](https://www.sqlalchemy.org/trac/ticket/1761)
- en: '**[orm]**'
  id: totrans-3454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The ORM now short-term caches the “compiled” form of insert() and update() constructs
    when flushing lists of objects of all the same class, thereby avoiding redundant
    compilation per individual INSERT/UPDATE within an individual flush() call.
  id: totrans-3455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当刷新相同类别对象列表时，ORM现在会短期缓存insert()和update()构造的“编译”形式，从而避免在单个flush()调用中每个INSERT/UPDATE都进行冗余编译。
- en: '**[orm]**'
  id: totrans-3456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: internal getattr(), setattr(), getcommitted() methods on ColumnProperty, CompositeProperty,
    RelationshipProperty have been underscored (i.e. are private), signature has changed.
  id: totrans-3457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnProperty、CompositeProperty、RelationshipProperty上的内部getattr()、setattr()、getcommitted()方法已被下划线标记（即为私有），签名已更改。
- en: examples
  id: totrans-3458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Updated attribute_shard.py example to use a more robust method of searching
    a Query for binary expressions which compare columns against literal values.
  id: totrans-3460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了attribute_shard.py示例，以使用更健壮的方法搜索Query，该方法将列与文字值进行比较。
- en: sql
  id: totrans-3461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored some bind-labeling logic from 0.5 which ensures that tables with column
    names that overlap another column of the form “<tablename>_<columnname>” won’t
    produce errors if column._label is used as a bind name during an UPDATE. Test
    coverage which wasn’t present in 0.5 has been added.
  id: totrans-3463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '从0.5版本中恢复了一些绑定标签逻辑，确保具有与另一列重叠的列名的表在UPDATE期间使用column._label作为绑定名称时不会产生错误。已添加0.5中不存在的测试覆盖率。 '
- en: 'References: [#1755](https://www.sqlalchemy.org/trac/ticket/1755)'
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1755](https://www.sqlalchemy.org/trac/ticket/1755)
- en: '**[sql]**'
  id: totrans-3465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: somejoin.select(fold_equivalents=True) is no longer deprecated, and will eventually
    be rolled into a more comprehensive version of the feature for.
  id: totrans-3466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: somejoin.select(fold_equivalents=True)不再被弃用，并最终将被合并到更全面的功能版本中。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-3467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[sql]**'
  id: totrans-3468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Numeric type raises an *enormous* warning when expected to convert floats
    to Decimal from a DBAPI that returns floats. This includes SQLite, Sybase, MS-SQL.
  id: totrans-3469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Numeric类型预期将浮点数转换为Decimal时，如果来自返回浮点数的DBAPI（包括SQLite、Sybase、MS-SQL）会引发*巨大*警告。
- en: 'References: [#1759](https://www.sqlalchemy.org/trac/ticket/1759)'
  id: totrans-3470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1759](https://www.sqlalchemy.org/trac/ticket/1759)
- en: '**[sql]**'
  id: totrans-3471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed an error in expression typing which caused an endless loop for expressions
    with two NULL types.
  id: totrans-3472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式类型化中的错误，该错误导致具有两个NULL类型的表达式陷入无限循环。
- en: '**[sql]**'
  id: totrans-3473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in execution_options() feature whereby the existing Transaction and
    other state information from the parent connection would not be propagated to
    the sub-connection.
  id: totrans-3474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了execution_options()功能中的错误，该错误导致父连接中的现有事务和其他状态信息无法传播到子连接。
- en: '**[sql]**'
  id: totrans-3475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new ‘compiled_cache’ execution option. A dictionary where Compiled objects
    will be cached when the Connection compiles a clause expression into a dialect-
    and parameter- specific Compiled object. It is the user’s responsibility to manage
    the size of this dictionary, which will have keys corresponding to the dialect,
    clause element, the column names within the VALUES or SET clause of an INSERT
    or UPDATE, as well as the “batch” mode for an INSERT or UPDATE statement.
  id: totrans-3476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的‘compiled_cache’执行选项。一个字典，当Connection将一个子句表达式编译成特定于方言和参数的Compiled对象时，Compiled对象将被缓存。用户有责任管理这个字典的大小，它将具有与方言、子句元素、INSERT或UPDATE的VALUES或SET子句中的列名以及INSERT或UPDATE语句的“batch”模式相对应的键。
- en: '**[sql]**'
  id: totrans-3477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added get_pk_constraint() to reflection.Inspector, similar to get_primary_keys()
    except returns a dict that includes the name of the constraint, for supported
    backends (PG so far).
  id: totrans-3478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 reflection.Inspector 中添加了 get_pk_constraint()，类似于 get_primary_keys()，但返回一个包含约束名称的字典，适用于支持的后端（目前仅支持
    PG）。
- en: 'References: [#1769](https://www.sqlalchemy.org/trac/ticket/1769)'
  id: totrans-3479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1769](https://www.sqlalchemy.org/trac/ticket/1769)
- en: '**[sql]**'
  id: totrans-3480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.create() and Table.drop() no longer apply metadata- level create/drop
    events.
  id: totrans-3481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.create() 和 Table.drop() 不再应用于元数据级别的创建/删除事件。
- en: 'References: [#1771](https://www.sqlalchemy.org/trac/ticket/1771)'
  id: totrans-3482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1771](https://www.sqlalchemy.org/trac/ticket/1771)
- en: postgresql
  id: totrans-3483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: PostgreSQL now reflects sequence names associated with SERIAL columns correctly,
    after the name of the sequence has been changed. Thanks to Kumar McMillan for
    the patch.
  id: totrans-3485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 现在正确反映了与 SERIAL 列关联的序列名称，序列名称已更改后。感谢 Kumar McMillan 提交的补丁。
- en: 'References: [#1071](https://www.sqlalchemy.org/trac/ticket/1071)'
  id: totrans-3486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1071](https://www.sqlalchemy.org/trac/ticket/1071)
- en: '**[postgresql]**'
  id: totrans-3487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Repaired missing import in psycopg2._PGNumeric type when unknown numeric is
    received.
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在接收到未知数字时 psycopg2._PGNumeric 类型中缺少的导入。
- en: '**[postgresql]**'
  id: totrans-3489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: psycopg2/pg8000 dialects now aware of REAL[], FLOAT[], DOUBLE_PRECISION[], NUMERIC[]
    return types without raising an exception.
  id: totrans-3490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2/pg8000 方言现在能够识别 REAL[]、FLOAT[]、DOUBLE_PRECISION[]、NUMERIC[] 返回类型，而不会引发异常。
- en: '**[postgresql]**'
  id: totrans-3491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: PostgreSQL reflects the name of primary key constraints, if one exists.
  id: totrans-3492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在主键约束，PostgreSQL 将反映主键约束的名称。
- en: 'References: [#1769](https://www.sqlalchemy.org/trac/ticket/1769)'
  id: totrans-3493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1769](https://www.sqlalchemy.org/trac/ticket/1769)
- en: oracle
  id: totrans-3494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: 'Now using cx_oracle output converters so that the DBAPI returns natively the
    kinds of values we prefer:'
  id: totrans-3496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 cx_oracle 输出转换器，以便 DBAPI 本地返回我们更喜欢的值类型：
- en: '**[oracle]**'
  id: totrans-3497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: NUMBER values with positive precision + scale convert to cx_oracle.STRING and
    then to Decimal. This allows perfect precision for the Numeric type when using
    cx_oracle.
  id: totrans-3498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有正精度 + 标度的 NUMBER 值转换为 cx_oracle.STRING，然后转换为 Decimal。这允许在使用 cx_oracle 时 Numeric
    类型具有完美的精度。
- en: 'References: [#1759](https://www.sqlalchemy.org/trac/ticket/1759)'
  id: totrans-3499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1759](https://www.sqlalchemy.org/trac/ticket/1759)
- en: '**[oracle]**'
  id: totrans-3500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: STRING/FIXED_CHAR now convert to unicode natively. SQLAlchemy’s String types
    then don’t need to apply any kind of conversions.
  id: totrans-3501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: STRING/FIXED_CHAR 现在本地转换为 unicode。因此，SQLAlchemy 的 String 类型不需要应用任何类型的转换。
- en: misc
  id: totrans-3502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engines]**'
  id: totrans-3503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The C extension now also works with DBAPIs which use custom sequences as row
    (and not only tuples).
  id: totrans-3504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C 扩展现在还可以与使用自定义序列作为行的 DBAPI 一起使用（不仅仅是元组）。
- en: 'References: [#1757](https://www.sqlalchemy.org/trac/ticket/1757)'
  id: totrans-3505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1757](https://www.sqlalchemy.org/trac/ticket/1757)
- en: '**[ext]**'
  id: totrans-3506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: the compiler extension now allows @compiles decorators on base classes that
    extend to child classes, @compiles decorators on child classes that aren’t broken
    by a @compiles decorator on the base class.
  id: totrans-3507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在允许在扩展到子类的基类上使用 @compiles 装饰器，在子类上使用 @compiles 装饰器不会被基类上的 @compiles 装饰器破坏。
- en: '**[ext]**'
  id: totrans-3508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Declarative will raise an informative error message if a non-mapped class attribute
    is referenced in the string-based relationship() arguments.
  id: totrans-3509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在基于字符串的 relationship() 参数中引用了非映射类属性，声明式将引发一个信息性错误消息。
- en: '**[ext]**'
  id: totrans-3510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Further reworked the “mixin” logic in declarative to additionally allow __mapper_args__
    as a @classproperty on a mixin, such as to dynamically assign polymorphic_identity.
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步重新调整了声明式中的“mixin”逻辑，还允许在 mixin 上作为 @classproperty 动态分配 polymorphic_identity，例如
    __mapper_args__。
- en: '**[firebird]**'
  id: totrans-3512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The functionality of result.rowcount can be disabled on a per-engine basis by
    setting ‘enable_rowcount=False’ on create_engine(). Normally, cursor.rowcount
    is called after any UPDATE or DELETE statement unconditionally, because the cursor
    is then closed and Firebird requires an open cursor in order to get a rowcount.
    This call is slightly expensive however so it can be disabled. To re-enable on
    a per-execution basis, the ‘enable_rowcount=True’ execution option may be used.
  id: totrans-3513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过在 create_engine() 上设置 'enable_rowcount=False' 来在每个引擎上禁用 result.rowcount
    的功能。通常，在任何 UPDATE 或 DELETE 语句之后无条件地调用 cursor.rowcount，因为然后游标将被关闭，而 Firebird 需要一个打开的游标才能获取行数。但是，这个调用稍微昂贵，因此可以禁用。要在每次执行时重新启用，可以使用
    'enable_rowcount=True' 执行选项。
- en: 0.6beta3
  id: totrans-3514
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6beta3
- en: 'Released: Sun Mar 28 2010'
  id: totrans-3515
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010年3月28日 星期日
- en: orm
  id: totrans-3516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major feature: Added new “subquery” loading capability to relationship(). This
    is an eager loading option which generates a second SELECT for each collection
    represented in a query, across all parents at once. The query re-issues the original
    end-user query wrapped in a subquery, applies joins out to the target collection,
    and loads all those collections fully in one result, similar to “joined” eager
    loading but using all inner joins and not re-fetching full parent rows repeatedly
    (as most DBAPIs seem to do, even if columns are skipped). Subquery loading is
    available at mapper config level using “lazy=’subquery’” and at the query options
    level using “subqueryload(props..)”, “subqueryload_all(props…)”.'
  id: totrans-3518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主要特性：为relationship()添加了新的“subquery”加载功能。这是一种急切加载选项，为查询中表示的每个集合生成第二个SELECT，跨所有父级一次性加载。该查询重新发出原始的最终用户查询，包装在一个子查询中，将连接应用到目标集合，并一次性完全加载所有这些集合的结果，类似于“joined”急切加载，但使用所有内连接，不会重复重新获取完整的父行（即使跳过列，大多数DBAPI似乎也会这样做）。子查询加载在映射器配置级别使用“lazy='subquery'”和在查询选项级别使用“subqueryload(props..)”，“subqueryload_all(props…)”可用。
- en: 'References: [#1675](https://www.sqlalchemy.org/trac/ticket/1675)'
  id: totrans-3519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1675](https://www.sqlalchemy.org/trac/ticket/1675)
- en: '**[orm]**'
  id: totrans-3520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: To accommodate the fact that there are now two kinds of eager loading available,
    the new names for eagerload() and eagerload_all() are joinedload() and joinedload_all().
    The old names will remain as synonyms for the foreseeable future.
  id: totrans-3521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应现在有两种可用的急��加载的事实，eagerload()和eagerload_all()的新名称是joinedload()和joinedload_all()。旧名称将作为可预见的将来的同义词保留。
- en: '**[orm]**'
  id: totrans-3522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'The “lazy” flag on the relationship() function now accepts a string argument
    for all kinds of loading: “select”, “joined”, “subquery”, “noload” and “dynamic”,
    where the default is now “select”. The old values of True/ False/None still retain
    their usual meanings and will remain as synonyms for the foreseeable future.'
  id: totrans-3523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship()函数上的“lazy”标志现在接受字符串参数，用于所有种类的加载：“select”、“joined”、“subquery”、“noload”和“dynamic”，其中默认值现在为“select”。True/False/None的旧值仍保留其通常含义，并将作为可预见的将来的同义词。
- en: '**[orm]**'
  id: totrans-3524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added with_hint() method to Query() construct. This calls directly down to select().with_hint()
    and also accepts entities as well as tables and aliases. See with_hint() in the
    SQL section below.
  id: totrans-3525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Query()构造添加了with_hint()方法。这直接调用select().with_hint()，并且还接受实体以及表和别名。请参见下面SQL部分中的with_hint()。
- en: 'References: [#921](https://www.sqlalchemy.org/trac/ticket/921)'
  id: totrans-3526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#921](https://www.sqlalchemy.org/trac/ticket/921)
- en: '**[orm]**'
  id: totrans-3527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query whereby calling q.join(prop).from_self(…). join(prop) would
    fail to render the second join outside the subquery, when joining on the same
    criterion as was on the inside.
  id: totrans-3528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中的一个bug，即调用q.join(prop).from_self(…). join(prop)会在内部连接的相同条件上连接第二个连接时，未能在子查询之外呈现第二个连接。
- en: '**[orm]**'
  id: totrans-3529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query whereby the usage of aliased() constructs would fail if the
    underlying table (but not the actual alias) were referenced inside the subquery
    generated by q.from_self() or q.select_from().
  id: totrans-3530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中的一个bug，即在q.from_self()或q.select_from()生成的子查询中引用aliased()构造会失败，如果引用了底层表（但实际别名未被引用）。
- en: '**[orm]**'
  id: totrans-3531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which affected all eagerload() and similar options such that “remote”
    eager loads, i.e. eagerloads off of a lazy load such as query(A).options(eagerload(A.b,
    B.c)) wouldn’t eagerload anything, but using eagerload(“b.c”) would work fine.
  id: totrans-3532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响所有eagerload()和类似选项的bug，即“remote”急切加载，即从延迟加载中进行急切加载，例如query(A).options(eagerload(A.b,
    B.c))不会急切加载任何内容，但使用eagerload(“b.c”)将正常工作。
- en: '**[orm]**'
  id: totrans-3533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query gains an add_columns(*columns) method which is a multi- version of add_column(col).
    add_column(col) is future deprecated.
  id: totrans-3534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query获得了一个add_columns(*columns)方法，这是add_column(col)的多版本。add_column(col)将来将被弃用。
- en: '**[orm]**'
  id: totrans-3535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join() will detect if the end result will be “FROM A JOIN A”, and will
    raise an error if so.
  id: totrans-3536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join()将检测最终结果是否为“FROM A JOIN A”，如果是，则会引发错误。
- en: '**[orm]**'
  id: totrans-3537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join(Cls.propname, from_joinpoint=True) will check more carefully that
    “Cls” is compatible with the current joinpoint, and act the same way as Query.join(“propname”,
    from_joinpoint=True) in that regard.
  id: totrans-3538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join(Cls.propname, from_joinpoint=True)将更仔细地检查“Cls”是否与当前连接点兼容，并在这方面与Query.join(“propname”,
    from_joinpoint=True)表现相同。
- en: sql
  id: totrans-3539
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added with_hint() method to select() construct. Specify a table/alias, hint
    text, and optional dialect name, and “hints” will be rendered in the appropriate
    place in the statement. Works for Oracle, Sybase, MySQL.
  id: totrans-3541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向select()构造添加了with_hint()方法。指定表/别名、提示文本和可选的方言名称，“hints”将在语句中适当的位置呈现。适用于Oracle、Sybase、MySQL。
- en: 'References: [#921](https://www.sqlalchemy.org/trac/ticket/921)'
  id: totrans-3542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#921](https://www.sqlalchemy.org/trac/ticket/921)
- en: '**[sql]**'
  id: totrans-3543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug introduced in 0.6beta2 where column labels would render inside of
    column expressions already assigned a label.
  id: totrans-3544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.6beta2中引入的bug，其中列标签会在已分配标签的列表达式内部呈现。
- en: 'References: [#1747](https://www.sqlalchemy.org/trac/ticket/1747)'
  id: totrans-3545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1747](https://www.sqlalchemy.org/trac/ticket/1747)
- en: postgresql
  id: totrans-3546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 dialect will log NOTICE messages via the “sqlalchemy.dialects.postgresql”
    logger name.
  id: totrans-3548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2方言将通过“sqlalchemy.dialects.postgresql”记录NOTICE消息。
- en: 'References: [#877](https://www.sqlalchemy.org/trac/ticket/877)'
  id: totrans-3549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#877](https://www.sqlalchemy.org/trac/ticket/877)
- en: '**[postgresql]**'
  id: totrans-3550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: the TIME and TIMESTAMP types are now available from the postgresql dialect directly,
    which add the PG-specific argument ‘precision’ to both. ‘precision’ and ‘timezone’
    are correctly reflected for both TIME and TIMEZONE types.
  id: totrans-3551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 时间和时间戳类型现在可以直接从postgresql方言中使用，这为两者都添加了PG特定参数‘precision’。‘precision’和‘timezone’对于时间和时区类型都正确反映。
- en: 'References: [#997](https://www.sqlalchemy.org/trac/ticket/997)'
  id: totrans-3552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#997](https://www.sqlalchemy.org/trac/ticket/997)
- en: mysql
  id: totrans-3553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: No longer guessing that TINYINT(1) should be BOOLEAN when reflecting - TINYINT(1)
    is returned. Use Boolean/ BOOLEAN in table definition to get boolean conversion
    behavior.
  id: totrans-3555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再猜测TINYINT(1)应该是BOOLEAN当反射时 - 返回TINYINT(1)。在表定义中使用Boolean/BOOLEAN以获得布尔转换行为。
- en: 'References: [#1752](https://www.sqlalchemy.org/trac/ticket/1752)'
  id: totrans-3556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1752](https://www.sqlalchemy.org/trac/ticket/1752)
- en: oracle
  id: totrans-3557
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The Oracle dialect will issue VARCHAR type definitions using character counts,
    i.e. VARCHAR2(50 CHAR), so that the column is sized in terms of characters and
    not bytes. Column reflection of character types will also use ALL_TAB_COLUMNS.CHAR_LENGTH
    instead of ALL_TAB_COLUMNS.DATA_LENGTH. Both of these behaviors take effect when
    the server version is 9 or higher - for version 8, the old behaviors are used.
  id: totrans-3559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言将使用字符计数发出VARCHAR类型定义，即VARCHAR2(50 CHAR)，因此列的大小是以字符而不是字节为单位。字符类型的列反射还将使用ALL_TAB_COLUMNS.CHAR_LENGTH而不是ALL_TAB_COLUMNS.DATA_LENGTH。这些行为在服务器版本为9或更高版本时生效
    - 对于版本8，将使用旧行为。
- en: 'References: [#1744](https://www.sqlalchemy.org/trac/ticket/1744)'
  id: totrans-3560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1744](https://www.sqlalchemy.org/trac/ticket/1744)
- en: misc
  id: totrans-3561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-3562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Using a mixin won’t break if the mixin implements an unpredictable __getattribute__(),
    i.e. Zope interfaces.
  id: totrans-3563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果mixin实现了不可预测的__getattribute__()，即Zope接口，使用mixin不会出错。
- en: 'References: [#1746](https://www.sqlalchemy.org/trac/ticket/1746)'
  id: totrans-3564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1746](https://www.sqlalchemy.org/trac/ticket/1746)
- en: '**[declarative]**'
  id: totrans-3565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Using @classdecorator and similar on mixins to define __tablename__, __table_args__,
    etc. now works if the method references attributes on the ultimate subclass.
  id: totrans-3566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在mixin上使用@classdecorator等来定义__tablename__、__table_args__等，如果方法引用了最终子类上的属性，现在可以正常工作。
- en: 'References: [#1749](https://www.sqlalchemy.org/trac/ticket/1749)'
  id: totrans-3567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1749](https://www.sqlalchemy.org/trac/ticket/1749)
- en: '**[declarative]**'
  id: totrans-3568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: relationships and columns with foreign keys aren’t allowed on declarative mixins,
    sorry.
  id: totrans-3569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明性mixin上不允许有带有外键的关系和列，抱歉。
- en: 'References: [#1751](https://www.sqlalchemy.org/trac/ticket/1751)'
  id: totrans-3570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1751](https://www.sqlalchemy.org/trac/ticket/1751)
- en: '**[ext]**'
  id: totrans-3571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The sqlalchemy.orm.shard module now becomes an extension, sqlalchemy.ext.horizontal_shard.
    The old import works with a deprecation warning.
  id: totrans-3572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.shard模块现在成为扩展，sqlalchemy.ext.horizontal_shard。旧的导入会有一个弃用警告。
- en: orm
  id: totrans-3573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major feature: Added new “subquery” loading capability to relationship(). This
    is an eager loading option which generates a second SELECT for each collection
    represented in a query, across all parents at once. The query re-issues the original
    end-user query wrapped in a subquery, applies joins out to the target collection,
    and loads all those collections fully in one result, similar to “joined” eager
    loading but using all inner joins and not re-fetching full parent rows repeatedly
    (as most DBAPIs seem to do, even if columns are skipped). Subquery loading is
    available at mapper config level using “lazy=’subquery’” and at the query options
    level using “subqueryload(props..)”, “subqueryload_all(props…)”.'
  id: totrans-3575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主要功能：为relationship()添加了新的“subquery”加载功能。这是一种急切加载选项，为查询中表示的每个集合生成第二个SELECT，跨所有父级一次性加载。查询重新发出原始的最终用户查询，包装在一个子查询中，应用连接到目标集合，一次性完全加载所有这些集合的结果，类似于“joined”急切加载，但使用所有内连接，不会重复重新获取完整的父行（即使跳过列，大多数DBAPI似乎也会这样做）。子查询加载在映射器配置级别使用“lazy=‘subquery’”和在查询选项级别使用“subqueryload(props..)”，“subqueryload_all(props…)”可用。
- en: 'References: [#1675](https://www.sqlalchemy.org/trac/ticket/1675)'
  id: totrans-3576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1675](https://www.sqlalchemy.org/trac/ticket/1675)
- en: '**[orm]**'
  id: totrans-3577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: To accommodate the fact that there are now two kinds of eager loading available,
    the new names for eagerload() and eagerload_all() are joinedload() and joinedload_all().
    The old names will remain as synonyms for the foreseeable future.
  id: totrans-3578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应现在有两种可用的 eager loading，eagerload() 和 eagerload_all() 的新名称分别为 joinedload()
    和 joinedload_all()。旧名称将在可预见的未来保留为同义词。
- en: '**[orm]**'
  id: totrans-3579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'The “lazy” flag on the relationship() function now accepts a string argument
    for all kinds of loading: “select”, “joined”, “subquery”, “noload” and “dynamic”,
    where the default is now “select”. The old values of True/ False/None still retain
    their usual meanings and will remain as synonyms for the foreseeable future.'
  id: totrans-3580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship() 函数上的 “lazy” 标志现在接受字符串参数用于所有加载类型：“select”、“joined”、“subquery”、“noload”
    和 “dynamic”，其中默认值现在为 “select”。True/False/None 的旧值仍保留其通常含义，并将在可预见的未来保留为同义词。
- en: '**[orm]**'
  id: totrans-3581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added with_hint() method to Query() construct. This calls directly down to select().with_hint()
    and also accepts entities as well as tables and aliases. See with_hint() in the
    SQL section below.
  id: totrans-3582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query() 构造添加了 with_hint() 方法。这直接调用 select().with_hint()，并且还接受实体以及表和别名。请参见下面
    SQL 部分中的 with_hint()。
- en: 'References: [#921](https://www.sqlalchemy.org/trac/ticket/921)'
  id: totrans-3583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#921](https://www.sqlalchemy.org/trac/ticket/921)
- en: '**[orm]**'
  id: totrans-3584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query whereby calling q.join(prop).from_self(…). join(prop) would
    fail to render the second join outside the subquery, when joining on the same
    criterion as was on the inside.
  id: totrans-3585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中的 bug，调用 q.join(prop).from_self(…).join(prop) 将无法在与内部相同的条件上连接第二个
    join 到子查询之外时失败。
- en: '**[orm]**'
  id: totrans-3586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query whereby the usage of aliased() constructs would fail if the
    underlying table (but not the actual alias) were referenced inside the subquery
    generated by q.from_self() or q.select_from().
  id: totrans-3587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中的 bug，如果在 q.from_self() 或 q.select_from() 生成的子查询中引用了基础表（但实际别名未被引用），则使用
    aliased() 构造将失败。
- en: '**[orm]**'
  id: totrans-3588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which affected all eagerload() and similar options such that “remote”
    eager loads, i.e. eagerloads off of a lazy load such as query(A).options(eagerload(A.b,
    B.c)) wouldn’t eagerload anything, but using eagerload(“b.c”) would work fine.
  id: totrans-3589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响所有 eagerload() 和类似选项的 bug，即“远程” eager loads，即从延迟加载（如 query(A).options(eagerload(A.b,
    B.c)）中的 eagerloads 不会加载任何内容，但使用 eagerload(“b.c”) 将正常工作。
- en: '**[orm]**'
  id: totrans-3590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query gains an add_columns(*columns) method which is a multi- version of add_column(col).
    add_column(col) is future deprecated.
  id: totrans-3591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 增加了 add_columns(*columns) 方法，这是 add_column(col) 的多版本。add_column(col) 将被未来弃用。
- en: '**[orm]**'
  id: totrans-3592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join() will detect if the end result will be “FROM A JOIN A”, and will
    raise an error if so.
  id: totrans-3593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join() 将检测结果是否为 “FROM A JOIN A”，如果是，则会引发错误。
- en: '**[orm]**'
  id: totrans-3594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join(Cls.propname, from_joinpoint=True) will check more carefully that
    “Cls” is compatible with the current joinpoint, and act the same way as Query.join(“propname”,
    from_joinpoint=True) in that regard.
  id: totrans-3595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join(Cls.propname, from_joinpoint=True) 将更仔细地检查 “Cls” 是否与当前连接点兼容，并在这方面与
    Query.join(“propname”, from_joinpoint=True) 表现相同。
- en: sql
  id: totrans-3596
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added with_hint() method to select() construct. Specify a table/alias, hint
    text, and optional dialect name, and “hints” will be rendered in the appropriate
    place in the statement. Works for Oracle, Sybase, MySQL.
  id: totrans-3598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 with_hint() 方法到 select() 构造中。指定表/别名、提示文本和可选的方言名称，“提示”将在语句中适当的位置呈现。适用于 Oracle、Sybase、MySQL。
- en: 'References: [#921](https://www.sqlalchemy.org/trac/ticket/921)'
  id: totrans-3599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#921](https://www.sqlalchemy.org/trac/ticket/921)
- en: '**[sql]**'
  id: totrans-3600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug introduced in 0.6beta2 where column labels would render inside of
    column expressions already assigned a label.
  id: totrans-3601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.6beta2 中引入的 bug，其中列标签会呈现在已分配标签的列表达式内部。
- en: 'References: [#1747](https://www.sqlalchemy.org/trac/ticket/1747)'
  id: totrans-3602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1747](https://www.sqlalchemy.org/trac/ticket/1747)
- en: postgresql
  id: totrans-3603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 dialect will log NOTICE messages via the “sqlalchemy.dialects.postgresql”
    logger name.
  id: totrans-3605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 方言将通过 “sqlalchemy.dialects.postgresql” 记录 NOTICE 消息。
- en: 'References: [#877](https://www.sqlalchemy.org/trac/ticket/877)'
  id: totrans-3606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#877](https://www.sqlalchemy.org/trac/ticket/877)
- en: '**[postgresql]**'
  id: totrans-3607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: the TIME and TIMESTAMP types are now available from the postgresql dialect directly,
    which add the PG-specific argument ‘precision’ to both. ‘precision’ and ‘timezone’
    are correctly reflected for both TIME and TIMEZONE types.
  id: totrans-3608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TIME 和 TIMESTAMP 类型现在可以直接从 postgresql 方言中使用，这为两者添加了 PG 特定的参数 ‘precision’。‘precision’
    和 ‘timezone’ 对于 TIME 和 TIMEZONE 类型都正确反映。
- en: 'References: [#997](https://www.sqlalchemy.org/trac/ticket/997)'
  id: totrans-3609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#997](https://www.sqlalchemy.org/trac/ticket/997)
- en: mysql
  id: totrans-3610
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: No longer guessing that TINYINT(1) should be BOOLEAN when reflecting - TINYINT(1)
    is returned. Use Boolean/ BOOLEAN in table definition to get boolean conversion
    behavior.
  id: totrans-3612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再猜测 TINYINT(1) 应该在反射时转换为 BOOLEAN - 返回的是 TINYINT(1)。在表定义中使用 Boolean/ BOOLEAN
    可以获得布尔转换行为。
- en: 'References: [#1752](https://www.sqlalchemy.org/trac/ticket/1752)'
  id: totrans-3613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1752](https://www.sqlalchemy.org/trac/ticket/1752)
- en: oracle
  id: totrans-3614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The Oracle dialect will issue VARCHAR type definitions using character counts,
    i.e. VARCHAR2(50 CHAR), so that the column is sized in terms of characters and
    not bytes. Column reflection of character types will also use ALL_TAB_COLUMNS.CHAR_LENGTH
    instead of ALL_TAB_COLUMNS.DATA_LENGTH. Both of these behaviors take effect when
    the server version is 9 or higher - for version 8, the old behaviors are used.
  id: totrans-3616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 方言将使用字符计数发出 VARCHAR 类型定义，即 VARCHAR2(50 CHAR)，因此列的大小是以字符而不是字节为单位。字符类型的列反射也将使用
    ALL_TAB_COLUMNS.CHAR_LENGTH 而不是 ALL_TAB_COLUMNS.DATA_LENGTH。这些行为在服务器版本为 9 或更高时生效
    - 对于版本 8，将使用旧的行为。
- en: 'References: [#1744](https://www.sqlalchemy.org/trac/ticket/1744)'
  id: totrans-3617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1744](https://www.sqlalchemy.org/trac/ticket/1744)
- en: misc
  id: totrans-3618
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-3619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Using a mixin won’t break if the mixin implements an unpredictable __getattribute__(),
    i.e. Zope interfaces.
  id: totrans-3620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 mixin 实现了不可预测的 __getattribute__()，即 Zope 接口，使用 mixin 不会出错。
- en: 'References: [#1746](https://www.sqlalchemy.org/trac/ticket/1746)'
  id: totrans-3621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1746](https://www.sqlalchemy.org/trac/ticket/1746)
- en: '**[declarative]**'
  id: totrans-3622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Using @classdecorator and similar on mixins to define __tablename__, __table_args__,
    etc. now works if the method references attributes on the ultimate subclass.
  id: totrans-3623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mixins 上使用 @classdecorator 和类似方法来定义 __tablename__、__table_args__ 等现在可以正常工作，如果方法引用了最终子类的属性。
- en: 'References: [#1749](https://www.sqlalchemy.org/trac/ticket/1749)'
  id: totrans-3624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1749](https://www.sqlalchemy.org/trac/ticket/1749)
- en: '**[declarative]**'
  id: totrans-3625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: relationships and columns with foreign keys aren’t allowed on declarative mixins,
    sorry.
  id: totrans-3626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不允许在声明性 mixins 上使用带有外键的关系和列，抱歉。
- en: 'References: [#1751](https://www.sqlalchemy.org/trac/ticket/1751)'
  id: totrans-3627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1751](https://www.sqlalchemy.org/trac/ticket/1751)
- en: '**[ext]**'
  id: totrans-3628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The sqlalchemy.orm.shard module now becomes an extension, sqlalchemy.ext.horizontal_shard.
    The old import works with a deprecation warning.
  id: totrans-3629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.shard 模块现在成为扩展，sqlalchemy.ext.horizontal_shard。旧的导入会有弃用警告。
- en: 0.6beta2
  id: totrans-3630
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6beta2
- en: 'Released: Sat Mar 20 2010'
  id: totrans-3631
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010 年 3 月 20 日
- en: orm
  id: totrans-3632
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The official name for the relation() function is now relationship(), to eliminate
    confusion over the relational algebra term. relation() however will remain available
    in equal capacity for the foreseeable future.
  id: totrans-3634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation() 函数的官方名称现在是 relationship()，以消除对关系代数术语的混淆。然而，relation() 在可预见的未来仍将以相同的能力可用。
- en: 'References: [#1740](https://www.sqlalchemy.org/trac/ticket/1740)'
  id: totrans-3635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1740](https://www.sqlalchemy.org/trac/ticket/1740)
- en: '**[orm]**'
  id: totrans-3636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added “version_id_generator” argument to Mapper, this is a callable that, given
    the current value of the “version_id_col”, returns the next version number. Can
    be used for alternate versioning schemes such as uuid, timestamps.
  id: totrans-3637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Mapper 添加了 “version_id_generator” 参数，这是一个可调用对象，给定 “version_id_col” 的当前值，返回下一个版本号。可用于替代版本控制方案，如
    uuid、timestamps。
- en: 'References: [#1692](https://www.sqlalchemy.org/trac/ticket/1692)'
  id: totrans-3638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1692](https://www.sqlalchemy.org/trac/ticket/1692)
- en: '**[orm]**'
  id: totrans-3639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “lockmode” kw argument to Session.refresh(), will pass through the string
    value to Query the same as in with_lockmode(), will also do version check for
    a version_id_col-enabled mapping.
  id: totrans-3640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Session.refresh() 中添加了 “lockmode” kw 参数，将字符串值传递给 Query，与 with_lockmode() 中的行为相同，还将为启用
    version_id_col 的映射执行版本检查。
- en: '**[orm]**'
  id: totrans-3641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby calling query(A).join(A.bs).add_entity(B) in a joined inheritance
    scenario would double-add B as a target and produce an invalid query.
  id: totrans-3642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在联合继承场景中调用 query(A).join(A.bs).add_entity(B) 会将 B 重复添加为目标并生成无效查询的 bug。
- en: 'References: [#1188](https://www.sqlalchemy.org/trac/ticket/1188)'
  id: totrans-3643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1188](https://www.sqlalchemy.org/trac/ticket/1188)
- en: '**[orm]**'
  id: totrans-3644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in session.rollback() which involved not removing formerly “pending”
    objects from the session before re-integrating “deleted” objects, typically occurred
    with natural primary keys. If there was a primary key conflict between them, the
    attach of the deleted would fail internally. The formerly “pending” objects are
    now expunged first.
  id: totrans-3645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 session.rollback() 中的 bug，涉及在重新整合“删除”对象之前未从会话中移除以前的“挂起”对象，通常发生在自然主键上。如果它们之间存在主键冲突，删除的附加将在内部失败。现在首先清除以前的“挂起”对象。
- en: 'References: [#1674](https://www.sqlalchemy.org/trac/ticket/1674)'
  id: totrans-3646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1674](https://www.sqlalchemy.org/trac/ticket/1674)
- en: '**[orm]**'
  id: totrans-3647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed a lot of logging that nobody really cares about, logging that remains
    will respond to live changes in the log level. No significant overhead is added.
  id: totrans-3648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了很多没有人真正关心的日志记录，保留的日志记录将响应日志级别的实时更改。不会增加显著的开销。
- en: 'References: [#1719](https://www.sqlalchemy.org/trac/ticket/1719)'
  id: totrans-3649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1719](https://www.sqlalchemy.org/trac/ticket/1719)
- en: '**[orm]**'
  id: totrans-3650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in session.merge() which prevented dict-like collections from merging.
  id: totrans-3651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session.merge()中的bug，该bug阻止了类似字典的集合的合并。
- en: '**[orm]**'
  id: totrans-3652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() works with relations that specifically don’t include “merge”
    in their cascade options - the target is ignored completely.
  id: totrans-3653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.merge()可以与明确不包括“merge”在其级联选项中的关系一起工作-目标完全被忽略。
- en: '**[orm]**'
  id: totrans-3654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() will not expire existing scalar attributes on an existing target
    if the target has a value for that attribute, even if the incoming merged doesn’t
    have a value for the attribute. This prevents unnecessary loads on existing items.
    Will still mark the attr as expired if the destination doesn’t have the attr,
    though, which fulfills some contracts of deferred cols.
  id: totrans-3655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果目标具有该属性的值，则session.merge()不会使现有目标上的现有标量属性过期，即使传入的合并没有该属性的值。这可以防止对现有项目进行不必要的加载。但是，如果目标没有该属性，它仍将标记为过期，这符合延迟列的某些约定。
- en: 'References: [#1681](https://www.sqlalchemy.org/trac/ticket/1681)'
  id: totrans-3656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1681](https://www.sqlalchemy.org/trac/ticket/1681)
- en: '**[orm]**'
  id: totrans-3657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “allow_null_pks” flag is now called “allow_partial_pks”, defaults to True,
    acts like it did in 0.5 again. Except, it also is implemented within merge() such
    that a SELECT won’t be issued for an incoming instance with partially NULL primary
    key if the flag is False.
  id: totrans-3658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “allow_null_pks”标志现在称为“allow_partial_pks”，默认为True，像0.5中一样起作用。除此之外，它还在merge()中实现，如果标志为False，则不会为具有部分NULL主键的传入实例发出SELECT。
- en: 'References: [#1680](https://www.sqlalchemy.org/trac/ticket/1680)'
  id: totrans-3659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1680](https://www.sqlalchemy.org/trac/ticket/1680)
- en: '**[orm]**'
  id: totrans-3660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in 0.6-reworked “many-to-one” optimizations such that a many-to-one
    that is against a non-primary key column on the remote table (i.e. foreign key
    against a UNIQUE column) will pull the “old” value in from the database during
    a change, since if it’s in the session we will need it for proper history/backref
    accounting, and we can’t pull from the local identity map on a non-primary key
    column.
  id: totrans-3661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.6重做的“多对一”优化中的bug，即针对远程表上的非主键列（即针对唯一列的外键）的多对一在更改时会从数据库中拉取“旧”值，因为如果它在会话中，我们将需要它进行正确的历史/反向引用记账，而在非主键列上无法从本地标识映射中拉取。
- en: 'References: [#1737](https://www.sqlalchemy.org/trac/ticket/1737)'
  id: totrans-3662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1737](https://www.sqlalchemy.org/trac/ticket/1737)
- en: '**[orm]**'
  id: totrans-3663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed internal error which would occur if calling has() or similar complex expression
    on a single-table inheritance relation().
  id: totrans-3664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在单表继承关系上调用has()或类似复杂表达式时可能发生的内部错误。
- en: 'References: [#1731](https://www.sqlalchemy.org/trac/ticket/1731)'
  id: totrans-3665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1731](https://www.sqlalchemy.org/trac/ticket/1731)
- en: '**[orm]**'
  id: totrans-3666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.one() no longer applies LIMIT to the query, this to ensure that it fully
    counts all object identities present in the result, even in the case where joins
    may conceal multiple identities for two or more rows. As a bonus, one() can now
    also be called with a query that issued from_statement() to start with since it
    no longer modifies the query.
  id: totrans-3667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.one()不再对查询应用LIMIT，以确保它完全计算结果中存在的所有对象标识，即使在连接可能隐藏两个或更多行的多个标识的情况下也是如此。作为奖励，由于它不再修改查询，现在也可以使用从from_statement()发出的查询调用one()。
- en: 'References: [#1688](https://www.sqlalchemy.org/trac/ticket/1688)'
  id: totrans-3668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1688](https://www.sqlalchemy.org/trac/ticket/1688)
- en: '**[orm]**'
  id: totrans-3669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() now returns None if queried for an identifier that is present in
    the identity map with a different class than the one requested, i.e. when using
    polymorphic loading.
  id: totrans-3670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用query.get()现在会返回None，如果查询的标识符在身份映射中以不同于请求的类的方式存在，即在使用多态加载时。
- en: 'References: [#1727](https://www.sqlalchemy.org/trac/ticket/1727)'
  id: totrans-3671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1727](https://www.sqlalchemy.org/trac/ticket/1727)
- en: '**[orm]**'
  id: totrans-3672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A major fix in query.join(), when the “on” clause is an attribute of an aliased()
    construct, but there is already an existing join made out to a compatible target,
    query properly joins to the right aliased() construct instead of sticking onto
    the right side of the existing join.
  id: totrans-3673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在query.join()中进行了重大修复，当“on”子句是aliased()构造的属性时，但已经存在对兼容目标的现有连接时，查询会正确地连接到正确的aliased()构造，而不是粘附到现有连接的右侧。
- en: 'References: [#1706](https://www.sqlalchemy.org/trac/ticket/1706)'
  id: totrans-3674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1706](https://www.sqlalchemy.org/trac/ticket/1706)
- en: '**[orm]**'
  id: totrans-3675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Slight improvement to the fix for to not issue needless updates of the primary
    key column during a so-called “row switch” operation, i.e. add + delete of two
    objects with the same PK.
  id: totrans-3676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于不会在所谓的“行切换”操作中不必要地更新主键列的修复进行了轻微改进，即对具有相同主键的两个对象进行添加 + 删除。
- en: 'References: [#1362](https://www.sqlalchemy.org/trac/ticket/1362)'
  id: totrans-3677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1362](https://www.sqlalchemy.org/trac/ticket/1362)
- en: '**[orm]**'
  id: totrans-3678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Now uses sqlalchemy.orm.exc.DetachedInstanceError when an attribute load or
    refresh action fails due to object being detached from any Session. UnboundExecutionError
    is specific to engines bound to sessions and statements.
  id: totrans-3679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在属性加载或刷新操作失败时使用 sqlalchemy.orm.exc.DetachedInstanceError，因为对象从任何会话中分离。UnboundExecutionError
    专用于绑定到会话和语句的引擎。
- en: '**[orm]**'
  id: totrans-3680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query called in the context of an expression will render disambiguating labels
    in all cases. Note that this does not apply to the existing .statement and .subquery()
    accessor/method, which still honors the .with_labels() setting that defaults to
    False.
  id: totrans-3681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式上下文中调用的 Query 将在所有情况下呈现消除歧义的标签。请注意，这不适用于现有的 .statement 和 .subquery() 访问器/方法，它仍然遵循默认值为
    False 的 .with_labels() 设置。
- en: '**[orm]**'
  id: totrans-3682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.union() retains disambiguating labels within the returned statement, thus
    avoiding various SQL composition errors which can result from column name conflicts.
  id: totrans-3683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.union() 在返回的语句中保留了消除歧义的标签，从而避免了由列名冲突导致的各种 SQL 组合错误。
- en: 'References: [#1676](https://www.sqlalchemy.org/trac/ticket/1676)'
  id: totrans-3684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1676](https://www.sqlalchemy.org/trac/ticket/1676)
- en: '**[orm]**'
  id: totrans-3685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in attribute history that inadvertently invoked __eq__ on mapped instances.
  id: totrans-3686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性历史中的错误，意外地在映射实例上调用了__eq__。
- en: '**[orm]**'
  id: totrans-3687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some internal streamlining of object loading grants a small speedup for large
    results, estimates are around 10-15%. Gave the “state” internals a good solid
    cleanup with less complexity, datamembers, method calls, blank dictionary creates.
  id: totrans-3688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对对象加载的一些内部优化使大型结果加速了一小部分，估计约为 10-15%。对“state”内部进行了彻底的清理，减少了复杂性、数据成员、方法调用以及空字典的创建。
- en: '**[orm]**'
  id: totrans-3689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Documentation clarification for query.delete()
  id: totrans-3690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 query.delete() 进行了文档澄清。
- en: 'References: [#1689](https://www.sqlalchemy.org/trac/ticket/1689)'
  id: totrans-3691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1689](https://www.sqlalchemy.org/trac/ticket/1689)
- en: '**[orm]**'
  id: totrans-3692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed cascade bug in many-to-one relation() when attribute was set to None,
    introduced in r6711 (cascade deleted items into session during add()).
  id: totrans-3693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了许多对一关系（many-to-one relation()）中级联 bug，在属性设置为 None 时引入，出现在 r6711 中（在 add()
    过程中将已删除的项级联到会话中）。
- en: '**[orm]**'
  id: totrans-3694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Calling query.order_by() or query.distinct() before calling query.select_from(),
    query.with_polymorphic(), or query.from_statement() raises an exception now instead
    of silently dropping those criterion.
  id: totrans-3695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用 query.select_from()、query.with_polymorphic() 或 query.from_statement() 之前调用
    query.order_by() 或 query.distinct() 现在会引发异常，而不是静默地删除这些条件。
- en: 'References: [#1736](https://www.sqlalchemy.org/trac/ticket/1736)'
  id: totrans-3696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1736](https://www.sqlalchemy.org/trac/ticket/1736)
- en: '**[orm]**'
  id: totrans-3697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.scalar() now raises an exception if more than one row is returned. All
    other behavior remains the same.
  id: totrans-3698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果返回多于一行，则 query.scalar() 现在会引发异常。所有其他行为保持不变。
- en: 'References: [#1735](https://www.sqlalchemy.org/trac/ticket/1735)'
  id: totrans-3699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1735](https://www.sqlalchemy.org/trac/ticket/1735)
- en: '**[orm]**'
  id: totrans-3700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which caused “row switch” logic, that is an INSERT and DELETE replaced
    by an UPDATE, to fail when version_id_col was in use.
  id: totrans-3701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 version_id_col 时“行切换”逻辑（即用 UPDATE 替换的 INSERT 和 DELETE）失败的 bug。
- en: 'References: [#1692](https://www.sqlalchemy.org/trac/ticket/1692)'
  id: totrans-3702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1692](https://www.sqlalchemy.org/trac/ticket/1692)
- en: examples
  id: totrans-3703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Changed the beaker cache example a bit to have a separate RelationCache option
    for lazyload caching. This object does a lookup among any number of potential
    attributes more efficiently by grouping several into a common structure. Both
    FromCache and RelationCache are simpler individually.
  id: totrans-3705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍微修改了 beaker 缓存示例，以便为懒加载缓存设置单独的 RelationCache 选项。通过将多个潜在属性分组到一个共同的结构中，此对象可以更有效地进行查找。FromCache
    和 RelationCache 分别更简单。
- en: sql
  id: totrans-3706
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: join() will now simulate a NATURAL JOIN by default. Meaning, if the left side
    is a join, it will attempt to join the right side to the rightmost side of the
    left first, and not raise any exceptions about ambiguous join conditions if successful
    even if there are further join targets across the rest of the left.
  id: totrans-3708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: join() 现在默认情况下会模拟 NATURAL JOIN。这意味着，如果左侧是一个连接，它将尝试首先将右侧连接到左侧的最右侧，并且如果成功，则不会引发有关模糊连接条件的任何异常，即使在左侧的其余连接目标中还有进一步的连接目标。
- en: 'References: [#1714](https://www.sqlalchemy.org/trac/ticket/1714)'
  id: totrans-3709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1714](https://www.sqlalchemy.org/trac/ticket/1714)
- en: '**[sql]**'
  id: totrans-3710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The most common result processors conversion function were moved to the new
    “processors” module. Dialect authors are encouraged to use those functions whenever
    they correspond to their needs instead of implementing custom ones.
  id: totrans-3711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最常见的结果处理器转换函数已移至新的“processors”模块。鼓励方言作者在需要时使用这些函数，而不是实现自定义函数。
- en: '**[sql]**'
  id: totrans-3712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SchemaType and subclasses Boolean, Enum are now serializable, including their
    ddl listener and other event callables.
  id: totrans-3713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SchemaType和子类Boolean、Enum现在是可序列化的，包括它们的ddl监听器和其他事件可调用函数。
- en: 'References: [#1694](https://www.sqlalchemy.org/trac/ticket/1694), [#1698](https://www.sqlalchemy.org/trac/ticket/1698)'
  id: totrans-3714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1694](https://www.sqlalchemy.org/trac/ticket/1694), [#1698](https://www.sqlalchemy.org/trac/ticket/1698)
- en: '**[sql]**'
  id: totrans-3715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Some platforms will now interpret certain literal values as non-bind parameters,
    rendered literally into the SQL statement. This to support strict SQL-92 rules
    that are enforced by some platforms including MS-SQL and Sybase. In this model,
    bind parameters aren’t allowed in the columns clause of a SELECT, nor are certain
    ambiguous expressions like “?=?”. When this mode is enabled, the base compiler
    will render the binds as inline literals, but only across strings and numeric
    values. Other types such as dates will raise an error, unless the dialect subclass
    defines a literal rendering function for those. The bind parameter must have an
    embedded literal value already or an error is raised (i.e. won’t work with straight
    bindparam(‘x’)). Dialects can also expand upon the areas where binds are not accepted,
    such as within argument lists of functions (which don’t work on MS-SQL when native
    SQL binding is used).
  id: totrans-3716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些平台现在会将某些文字值解释为非绑定参数，直接呈现在SQL语句中。这是为了支持某些平台（包括MS-SQL和Sybase）强制执行的严格SQL-92规则。在这种模式下，绑定参数不允许出现在SELECT的列子句中，也不允许出现某些模糊表达式如“?=?”。当启用此模式时，基本编译器将把绑定参数呈现为内联文字，但仅限于字符串和数值。其他类型如日期将会引发错误，除非方言子类为其定义了文字呈现函数。绑定参数必须已经包含嵌入的文字值，否则会引发错误（即无法使用直接的bindparam(‘x’)）。方言还可以扩展绑定不被接受的领域，比如在函数的参数列表中（当使用本地SQL绑定时，在MS-SQL上无法工作）。
- en: '**[sql]**'
  id: totrans-3717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “unicode_errors” parameter to String, Unicode, etc. Behaves like the ‘errors’
    keyword argument to the standard library’s string.decode() functions. This flag
    requires that convert_unicode is set to “force” - otherwise, SQLAlchemy is not
    guaranteed to handle the task of unicode conversion. Note that this flag adds
    significant performance overhead to row-fetching operations for backends that
    already return unicode objects natively (which most DBAPIs do). This flag should
    only be used as an absolute last resort for reading strings from a column with
    varied or corrupted encodings, which only applies to databases that accept invalid
    encodings in the first place (i.e. MySQL. *not* PG, Sqlite, etc.)
  id: totrans-3718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为String、Unicode等添加了“unicode_errors”参数。行为类似于标准库的string.decode()函数的‘errors’关键字参数。此标志要求convert_unicode设置为“force”
    - 否则，SQLAlchemy不能保证处理unicode转换的任务。请注意，对于已经本地返回unicode对象的后端（大多数DBAPI都是这样），此标志会给行提取操作带来显著的性能开销。此标志应仅作为从具有不同或损坏编码的列中读取字符串的绝对最后手段使用，这仅适用于首先接受无效编码的数据库（即MySQL，*不*是PG，Sqlite等）。
- en: '**[sql]**'
  id: totrans-3719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added math negation operator support, -x.
  id: totrans-3720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了数学否定运算符支持，-x。
- en: '**[sql]**'
  id: totrans-3721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: FunctionElement subclasses are now directly executable the same way any func.foo()
    construct is, with automatic SELECT being applied when passed to execute().
  id: totrans-3722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: FunctionElement子类现在可以直接执行，就像任何func.foo()构造一样，在传递给execute()时会自动应用SELECT。
- en: '**[sql]**'
  id: totrans-3723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The “type” and “bind” keyword arguments of a func.foo() construct are now local
    to “func.” constructs and are not part of the FunctionElement base class, allowing
    a “type” to be handled in a custom constructor or class-level variable.
  id: totrans-3724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.foo()构造的“type”和“bind”关键字参数现在局限于“func.”构造，并不是FunctionElement基类的一部分，允许在自定义构造函数或类级变量中处理“type”。
- en: '**[sql]**'
  id: totrans-3725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored the keys() method to ResultProxy.
  id: totrans-3726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将keys()方法恢复到ResultProxy。
- en: '**[sql]**'
  id: totrans-3727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The type/expression system now does a more complete job of determining the return
    type from an expression as well as the adaptation of the Python operator into
    a SQL operator, based on the full left/right/operator of the given expression.
    In particular the date/time/interval system created for PostgreSQL EXTRACT in
    has now been generalized into the type system. The previous behavior which often
    occurred of an expression “column + literal” forcing the type of “literal” to
    be the same as that of “column” will now usually not occur - the type of “literal”
    is first derived from the Python type of the literal, assuming standard native
    Python types + date types, before falling back to that of the known type on the
    other side of the expression. If the “fallback” type is compatible (i.e. CHAR
    from String), the literal side will use that. TypeDecorator types override this
    by default to coerce the “literal” side unconditionally, which can be changed
    by implementing the coerce_compared_value() method. Also part of.
  id: totrans-3728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，类型/表达式系统会更完整地确定表达式的返回类型以及将 Python 运算符适应为 SQL 运算符，这是根据给定表达式的完整 left/right/operator
    基础上进行的。特别是针对 PostgreSQL EXTRACT 创建的日期/时间/间隔系统现已被泛化到类型系统中。以前的行为通常是表达式“column +
    literal”强制“literal”的类型与“column”的类型相同，现在通常不会发生 - “literal”的类型首先是从字面的 Python 类型派生的，假设是标准的本机
    Python 类型 + 日期类型，然后再回退到表达式另一侧的已知类型。如果“回退”类型是兼容的（即 String 的 CHAR），则字面量侧将使用该类型。TypeDecorator
    类型默认覆盖此行为以无条件地强制转换“literal”侧，这可以通过实现 coerce_compared_value() 方法来更改。同样是部分。
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647), [#1683](https://www.sqlalchemy.org/trac/ticket/1683)'
  id: totrans-3729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1647](https://www.sqlalchemy.org/trac/ticket/1647), [#1683](https://www.sqlalchemy.org/trac/ticket/1683)
- en: '**[sql]**'
  id: totrans-3730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Made sqlalchemy.sql.expressions.Executable part of public API, used for any
    expression construct that can be sent to execute(). FunctionElement now inherits
    Executable so that it gains execution_options(), which are also propagated to
    the select() that’s generated within execute(). Executable in turn subclasses
    _Generative which marks any ClauseElement that supports the @_generative decorator
    - these may also become “public” for the benefit of the compiler extension at
    some point.
  id: totrans-3731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使 sqlalchemy.sql.expressions.Executable 成为公共 API 的一部分，用于可以发送到 execute() 的任何表达式构造。FunctionElement
    现在继承了 Executable，因此它获得了 execution_options()，这些选项也会传播到 execute() 内部生成的 select()。Executable
    又是 _Generative 的子类，标记了任何支持 @_generative 装饰器的 ClauseElement - 这些在某些时候也可能变为编译器扩展的“公共”。
- en: '**[sql]**'
  id: totrans-3732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: A change to the solution for - an end-user defined bind parameter name that
    directly conflicts with a column-named bind generated directly from the SET or
    VALUES clause of an update/insert generates a compile error. This reduces call
    counts and eliminates some cases where undesirable name conflicts could still
    occur.
  id: totrans-3733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决了 - 用户定义的绑定参数名称直接与 update/insert 的 SET 或 VALUES 子句生成的列名绑定发生冲突的解决方案生成编译错误。这降低了调用次数，并消除了一些仍可能发生不良名称冲突的情况。
- en: 'References: [#1579](https://www.sqlalchemy.org/trac/ticket/1579)'
  id: totrans-3734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1579](https://www.sqlalchemy.org/trac/ticket/1579)
- en: '**[sql]**'
  id: totrans-3735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column() requires a type if it has no foreign keys (this is not new). An error
    is now raised if a Column() has no type and no foreign keys.
  id: totrans-3736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 Column() 没有外键，则需要一个类型（这不是新的）。如果 Column() 没有类型和没有外键，则会引发错误。
- en: 'References: [#1705](https://www.sqlalchemy.org/trac/ticket/1705)'
  id: totrans-3737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1705](https://www.sqlalchemy.org/trac/ticket/1705)
- en: '**[sql]**'
  id: totrans-3738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “scale” argument of the Numeric() type is honored when coercing a returned
    floating point value into a string on its way to Decimal - this allows accuracy
    to function on SQLite, MySQL.
  id: totrans-3739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将返回的浮点值强制转换为 Decimal 的字符串时，Numeric() 类型的“scale”参数会受到尊重 - 这允许 SQLite、MySQL 上的准确性功能。
- en: 'References: [#1717](https://www.sqlalchemy.org/trac/ticket/1717)'
  id: totrans-3740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1717](https://www.sqlalchemy.org/trac/ticket/1717)
- en: '**[sql]**'
  id: totrans-3741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the copy() method of Column now copies over uninitialized “on table attach”
    events. Helps with the new declarative “mixin” capability.
  id: totrans-3742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column 的 copy() 方法现在会复制未初始化的“on table attach”事件。有助于新的声明性“mixin”功能。
- en: mysql
  id: totrans-3743
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed reflection bug whereby when COLLATE was present, nullable flag and server
    defaults would not be reflected.
  id: totrans-3745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射 bug，即当 COLLATE 存在时，nullable 标志和服务器默认值不会反映出来。
- en: 'References: [#1655](https://www.sqlalchemy.org/trac/ticket/1655)'
  id: totrans-3746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1655](https://www.sqlalchemy.org/trac/ticket/1655)
- en: '**[mysql]**'
  id: totrans-3747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed reflection of TINYINT(1) “boolean” columns defined with integer flags
    like UNSIGNED.
  id: totrans-3748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 TINYINT(1) “boolean” 列的反射问题，该列使用像 UNSIGNED 这样的整数标志定义。
- en: '**[mysql]**'
  id: totrans-3749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Further fixes for the mysql-connector dialect.
  id: totrans-3750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了mysql-connector方言。
- en: 'References: [#1668](https://www.sqlalchemy.org/trac/ticket/1668)'
  id: totrans-3751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1668](https://www.sqlalchemy.org/trac/ticket/1668)
- en: '**[mysql]**'
  id: totrans-3752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Composite PK table on InnoDB where the “autoincrement” column isn’t first will
    emit an explicit “KEY” phrase within CREATE TABLE thereby avoiding errors.
  id: totrans-3753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在InnoDB上的复合PK表中，“autoincrement”列不是第一个将在CREATE TABLE中发出显式的“KEY”短语，从而避免错误。
- en: 'References: [#1496](https://www.sqlalchemy.org/trac/ticket/1496)'
  id: totrans-3754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1496](https://www.sqlalchemy.org/trac/ticket/1496)
- en: '**[mysql]**'
  id: totrans-3755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added reflection/create table support for a wide range of MySQL keywords.
  id: totrans-3756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为广泛的MySQL关键字增加了反射/创建表支持。
- en: 'References: [#1634](https://www.sqlalchemy.org/trac/ticket/1634)'
  id: totrans-3757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1634](https://www.sqlalchemy.org/trac/ticket/1634)
- en: '**[mysql]**'
  id: totrans-3758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed import error which could occur reflecting tables on a Windows host
  id: totrans-3759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Windows主机上反射表时可能发生的导入错误
- en: 'References: [#1580](https://www.sqlalchemy.org/trac/ticket/1580)'
  id: totrans-3760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1580](https://www.sqlalchemy.org/trac/ticket/1580)
- en: sqlite
  id: totrans-3761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Added “native_datetime=True” flag to create_engine(). This will cause the DATE
    and TIMESTAMP types to skip all bind parameter and result row processing, under
    the assumption that PARSE_DECLTYPES has been enabled on the connection. Note that
    this is not entirely compatible with the “func.current_date()”, which will be
    returned as a string.
  id: totrans-3763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在create_engine()中添加了“native_datetime=True”标志。这将导致DATE和TIMESTAMP类型跳过所有绑定参数和结果行处理，假设连接上已启用PARSE_DECLTYPES。请注意，这与“func.current_date()”不完全兼容，它将作为字符串返回。
- en: 'References: [#1685](https://www.sqlalchemy.org/trac/ticket/1685)'
  id: totrans-3764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1685](https://www.sqlalchemy.org/trac/ticket/1685)
- en: mssql
  id: totrans-3765
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Re-established support for the pymssql dialect.
  id: totrans-3767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新建立了对pymssql方言的支持。
- en: '**[mssql]**'
  id: totrans-3768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Various fixes for implicit returning, reflection, etc. - the MS-SQL dialects
    aren’t quite complete in 0.6 yet (but are close)
  id: totrans-3769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 隐式返回、反射等的各种修复 - MS-SQL方言在0.6中还不完全（但接近了）
- en: '**[mssql]**'
  id: totrans-3770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added basic support for mxODBC.
  id: totrans-3771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对mxODBC的基本支持。
- en: 'References: [#1710](https://www.sqlalchemy.org/trac/ticket/1710)'
  id: totrans-3772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1710](https://www.sqlalchemy.org/trac/ticket/1710)
- en: '**[mssql]**'
  id: totrans-3773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Removed the text_as_varchar option.
  id: totrans-3774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了text_as_varchar选项。
- en: oracle
  id: totrans-3775
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: ”out” parameters require a type that is supported by cx_oracle. An error will
    be raised if no cx_oracle type can be found.
  id: totrans-3777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”out”参数需要一个cx_oracle支持的类型。如果找不到cx_oracle类型，将引发错误。
- en: '**[oracle]**'
  id: totrans-3778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle ‘DATE’ now does not perform any result processing, as the DATE type in
    Oracle stores full date+time objects, that’s what you’ll get. Note that the generic
    types.Date type *will* still call value.date() on incoming values, however. When
    reflecting a table, the reflected type will be ‘DATE’.
  id: totrans-3779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle的‘DATE’现在不执行任何结果处理，因为Oracle中的DATE类型存储完整的日期+时间对象，这就是你将得到的。请注意，通用类型.Date类型仍将在传入值上调用value.date()，但是在反射表时，反射的类型将是‘DATE’。
- en: '**[oracle]**'
  id: totrans-3780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added preliminary support for Oracle’s WITH_UNICODE mode. At the very least
    this establishes initial support for cx_Oracle with Python 3\. When WITH_UNICODE
    mode is used in Python 2.xx, a large and scary warning is emitted asking that
    the user seriously consider the usage of this difficult mode of operation.
  id: totrans-3781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对Oracle的WITH_UNICODE模式的初步支持。至少在Python 3中建立了与cx_Oracle的初始支持。在Python 2.xx中使用WITH_UNICODE模式时，会发出一个大而可怕的警告，要求用户认真考虑这种困难的操作模式。
- en: 'References: [#1670](https://www.sqlalchemy.org/trac/ticket/1670)'
  id: totrans-3782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1670](https://www.sqlalchemy.org/trac/ticket/1670)
- en: '**[oracle]**'
  id: totrans-3783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The except_() method now renders as MINUS on Oracle, which is more or less equivalent
    on that platform.
  id: totrans-3784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: except_()方法现在在Oracle上呈现为MINUS，这在该平台上更或多是等效的。
- en: 'References: [#1712](https://www.sqlalchemy.org/trac/ticket/1712)'
  id: totrans-3785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1712](https://www.sqlalchemy.org/trac/ticket/1712)
- en: '**[oracle]**'
  id: totrans-3786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added support for rendering and reflecting TIMESTAMP WITH TIME ZONE, i.e. TIMESTAMP(timezone=True).
  id: totrans-3787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对渲染和反射TIMESTAMP WITH TIME ZONE的支持，即TIMESTAMP(timezone=True)。
- en: 'References: [#651](https://www.sqlalchemy.org/trac/ticket/651)'
  id: totrans-3788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#651](https://www.sqlalchemy.org/trac/ticket/651)
- en: '**[oracle]**'
  id: totrans-3789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle INTERVAL type can now be reflected.
  id: totrans-3790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle INTERVAL类型现在可以反射。
- en: misc
  id: totrans-3791
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[py3k]**'
  id: totrans-3792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[py3k]**'
- en: Improved the installation/test setup regarding Python 3, now that Distribute
    runs on Py3k. distribute_setup.py is now included. See README.py3k for Python
    3 installation/ testing instructions.
  id: totrans-3793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了关于Python 3的安装/测试设置，现在Distribute在Py3k上运行。现在包含distribute_setup.py。请查看README.py3k以获取Python
    3的安装/测试说明。
- en: '**[engines]**'
  id: totrans-3794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Added an optional C extension to speed up the sql layer by reimplementing RowProxy
    and the most common result processors. The actual speedups will depend heavily
    on your DBAPI and the mix of datatypes used in your tables, and can vary from
    a 30% improvement to more than 200%. It also provides a modest (~15-20%) indirect
    improvement to ORM speed for large queries. Note that it is *not* built/installed
    by default. See README for installation instructions.
  id: totrans-3795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个可选的C扩展，通过重新实现RowProxy和最常见的结果处理器来加速sql层。实际的加速将严重依赖于您的DBAPI和表中使用的数据类型的混合，并且可以从30%的改进到200%以上不等。对于大查询，还为ORM速度提供了适度的（~15-20%）间接改进。请注意，默认情况下*不*构建/安装它。请参阅README以获取安装说明。
- en: '**[engines]**'
  id: totrans-3796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the execution sequence pulls all rowcount/last inserted ID info from the cursor
    before commit() is called on the DBAPI connection in an “autocommit” scenario.
    This helps mxodbc with rowcount and is probably a good idea overall.
  id: totrans-3797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“自动提交”场景中，在调用DBAPI连接上的commit()之前，执行顺序会从游标中提取所有的rowcount/last inserted ID信息。这有助于mxodbc处理rowcount，并且总体上可能是一个好主意。
- en: '**[engines]**'
  id: totrans-3798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Opened up logging a bit such that isEnabledFor() is called more often, so that
    changes to the log level for engine/pool will be reflected on next connect. This
    adds a small amount of method call overhead. It’s negligible and will make life
    a lot easier for all those situations when logging just happens to be configured
    after create_engine() is called.
  id: totrans-3799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开了日志记录，使得更频繁地调用isEnabledFor()，以便在下次连接时反映引擎/池的日志级别更改。这会增加一点方法调用开销。这是可以忽略的，将使得在调用create_engine()后配置日志记录的所有情况变得更加容易。
- en: 'References: [#1719](https://www.sqlalchemy.org/trac/ticket/1719)'
  id: totrans-3800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1719](https://www.sqlalchemy.org/trac/ticket/1719)
- en: '**[engines]**'
  id: totrans-3801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The assert_unicode flag is deprecated. SQLAlchemy will raise a warning in all
    cases where it is asked to encode a non-unicode Python string, as well as when
    a Unicode or UnicodeType type is explicitly passed a bytestring. The String type
    will do nothing for DBAPIs that already accept Python unicode objects.
  id: totrans-3802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assert_unicode标志已被弃用。当要求对非unicode Python字符串进行编码时，SQLAlchemy将在所有情况下引发警告，以及当显式传递一个bytestring给Unicode或UnicodeType类型时。String类型对于已经接受Python
    unicode对象的DBAPI不会执行任何操作。
- en: '**[engines]**'
  id: totrans-3803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Bind parameters are sent as a tuple instead of a list. Some backend drivers
    will not accept bind parameters as a list.
  id: totrans-3804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 绑定参数将作为元组而不是列表发送。一些后端驱动程序将不接受绑定参数作为列表。
- en: '**[engines]**'
  id: totrans-3805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: threadlocal engine wasn’t properly closing the connection upon close() - fixed
    that.
  id: totrans-3806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 线程本地引擎在close()时未正确关闭连接 - 已修复。
- en: '**[engines]**'
  id: totrans-3807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Transaction object doesn’t rollback or commit if it isn’t “active”, allows more
    accurate nesting of begin/rollback/commit.
  id: totrans-3808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事务对象不是“活动”的话，将不会回滚或提交，允许更准确地嵌套begin/rollback/commit。
- en: '**[engines]**'
  id: totrans-3809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Python unicode objects as binds result in the Unicode type, not string, thus
    eliminating a certain class of unicode errors on drivers that don’t support unicode
    binds.
  id: totrans-3810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python unicode对象作为绑定结果会产生Unicode类型，而不是字符串，从而消除了一定类别的不支持unicode绑定的驱动程序上的unicode错误。
- en: '**[engines]**'
  id: totrans-3811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Added “logging_name” argument to create_engine(), Pool() constructor as well
    as “pool_logging_name” argument to create_engine() which filters down to that
    of Pool. Issues the given string name within the “name” field of logging messages
    instead of the default hex identifier string.
  id: totrans-3812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在create_engine()、Pool()构造函数中添加了“logging_name”参数，以及在create_engine()中添加了“pool_logging_name”参数，该参数过滤到Pool的名称。在日志消息的“name”字段中发出给定的字符串名称，而不是默认的十六进制标识符字符串。
- en: 'References: [#1555](https://www.sqlalchemy.org/trac/ticket/1555)'
  id: totrans-3813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1555](https://www.sqlalchemy.org/trac/ticket/1555)
- en: '**[engines]**'
  id: totrans-3814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The visit_pool() method of Dialect is removed, and replaced with on_connect().
    This method returns a callable which receives the raw DBAPI connection after each
    one is created. The callable is assembled into a first_connect/connect pool listener
    by the connection strategy if non-None. Provides a simpler interface for dialects.
  id: totrans-3815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Dialect的visit_pool()方法已被移除，并替换为on_connect()。该方法返回一个可调用对象，在每次创建原始DBAPI连接后接收该连接。如果非None，则由连接策略将其组装成一个first_connect/connect池监听器。为方言提供了更简单的接口。
- en: '**[engines]**'
  id: totrans-3816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: StaticPool now initializes, disposes and recreates without opening a new connection
    - the connection is only opened when first requested. dispose() also works on
    AssertionPool now.
  id: totrans-3817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: StaticPool现在在不打开新连接的情况下初始化、处理和重新创建 - 仅在首次请求时才打开连接。dispose()现在也适用于AssertionPool。
- en: 'References: [#1728](https://www.sqlalchemy.org/trac/ticket/1728)'
  id: totrans-3818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1728](https://www.sqlalchemy.org/trac/ticket/1728)
- en: '**[metadata] [ticket: 1673]**'
  id: totrans-3819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据] [票号：1673]**'
- en: Added the ability to strip schema information when using “tometadata” by passing
    “schema=None” as an argument. If schema is not specified then the table’s schema
    is retained.
  id: totrans-3820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过传递“schema=None”作为参数，现在可以在使用“tometadata”时剥离模式信息。如果未指定模式，则保留表的模式。
- en: '**[declarative]**'
  id: totrans-3821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: DeclarativeMeta exclusively uses cls.__dict__ (not dict_) as the source of class
    information; _as_declarative exclusively uses the dict_ passed to it as the source
    of class information (which when using DeclarativeMeta is cls.__dict__). This
    should in theory make it easier for custom metaclasses to modify the state passed
    into _as_declarative.
  id: totrans-3822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DeclarativeMeta专门使用cls.__dict__（而不是dict_）作为类信息的来源；_as_declarative专门使用传递给它的dict_作为类信息的来源（当使用DeclarativeMeta时，这是cls.__dict__）。理论上，这应该使得自定义元类更容易修改传递给_as_declarative的状态。
- en: '**[declarative]**'
  id: totrans-3823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: declarative now accepts mixin classes directly, as a means to provide common
    functional and column-based elements on all subclasses, as well as a means to
    propagate a fixed set of __table_args__ or __mapper_args__ to subclasses. For
    custom combinations of __table_args__/__mapper_args__ from an inherited mixin
    to local, descriptors can now be used. New details are all up in the Declarative
    documentation. Thanks to Chris Withers for putting up with my strife on this.
  id: totrans-3824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declarative现在直接接受mixin类，作为在所有子类上提供共同功能和基于列的元素的手段，以及传播一组固定的__table_args__或__mapper_args__到子类的手段。对于从继承的mixin到本地的自定义组合__table_args__/__mapper_args，现在可以使用描述符。有关所有新细节，请参阅Declarative文档。感谢Chris
    Withers在这方面的支持。
- en: 'References: [#1707](https://www.sqlalchemy.org/trac/ticket/1707)'
  id: totrans-3825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1707](https://www.sqlalchemy.org/trac/ticket/1707)
- en: '**[declarative]**'
  id: totrans-3826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: the __mapper_args__ dict is copied when propagating to a subclass, and is taken
    straight off the class __dict__ to avoid any propagation from the parent. mapper
    inheritance already propagates the things you want from the parent mapper.
  id: totrans-3827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在传播到子类时，__mapper_args__字典被复制，并直接从类__dict__中取出，以避免从父类传播任何内容。映射器继承已经传播了您从父映射器中希望的内容。
- en: 'References: [#1393](https://www.sqlalchemy.org/trac/ticket/1393)'
  id: totrans-3828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1393](https://www.sqlalchemy.org/trac/ticket/1393)
- en: '**[declarative]**'
  id: totrans-3829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: An exception is raised when a single-table subclass specifies a column that
    is already present on the base class.
  id: totrans-3830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当单表子类指定已经存在于基类上的列时，会引发异常。
- en: 'References: [#1732](https://www.sqlalchemy.org/trac/ticket/1732)'
  id: totrans-3831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1732](https://www.sqlalchemy.org/trac/ticket/1732)
- en: '**[sybase]**'
  id: totrans-3832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sybase]**'
- en: Implemented a preliminary working dialect for Sybase, with sub-implementations
    for Python-Sybase as well as Pyodbc. Handles table creates/drops and basic round
    trip functionality. Does not yet include reflection or comprehensive support of
    unicode/special expressions/etc.
  id: totrans-3833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了针对Sybase的初步工作方言，包括Python-Sybase和Pyodbc的子实现。处理表的创建/删除和基本的往返功能。目前还不包括反射或全面支持unicode/特殊表达式等。
- en: '**[documentation]**'
  id: totrans-3834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Major cleanup work in the docs to link class, function, and method names into
    the API docs.
  id: totrans-3835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文档中进行了重要的清理工作，将类、函数和方法名称链接到API文档中。
- en: 'References: [#1700](https://www.sqlalchemy.org/trac/ticket/1700)'
  id: totrans-3836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1700](https://www.sqlalchemy.org/trac/ticket/1700)
- en: orm
  id: totrans-3837
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The official name for the relation() function is now relationship(), to eliminate
    confusion over the relational algebra term. relation() however will remain available
    in equal capacity for the foreseeable future.
  id: totrans-3839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation()函数的官方名称现在是relationship()，以消除关于关系代数术语的混淆。然而，relation()将在可预见的未来保持相同的功能。
- en: 'References: [#1740](https://www.sqlalchemy.org/trac/ticket/1740)'
  id: totrans-3840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1740](https://www.sqlalchemy.org/trac/ticket/1740)
- en: '**[orm]**'
  id: totrans-3841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added “version_id_generator” argument to Mapper, this is a callable that, given
    the current value of the “version_id_col”, returns the next version number. Can
    be used for alternate versioning schemes such as uuid, timestamps.
  id: totrans-3842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Mapper添加了“version_id_generator”参数，这是一个可调用对象，给定“version_id_col”的当前值，返回下一个版本号。可用于替代版本控制方案，如uuid、时间戳等。
- en: 'References: [#1692](https://www.sqlalchemy.org/trac/ticket/1692)'
  id: totrans-3843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1692](https://www.sqlalchemy.org/trac/ticket/1692)
- en: '**[orm]**'
  id: totrans-3844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “lockmode” kw argument to Session.refresh(), will pass through the string
    value to Query the same as in with_lockmode(), will also do version check for
    a version_id_col-enabled mapping.
  id: totrans-3845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Session.refresh()添加了“lockmode”关键字参数，将字符串值传递给Query，与with_lockmode()中的操作相同，还将为启用version_id_col的映射执行版本检查。
- en: '**[orm]**'
  id: totrans-3846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby calling query(A).join(A.bs).add_entity(B) in a joined inheritance
    scenario would double-add B as a target and produce an invalid query.
  id: totrans-3847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在联合继承场景中调用query(A).join(A.bs).add_entity(B)会将B重复添加为目标并生成无效查询的错误。
- en: 'References: [#1188](https://www.sqlalchemy.org/trac/ticket/1188)'
  id: totrans-3848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1188](https://www.sqlalchemy.org/trac/ticket/1188)
- en: '**[orm]**'
  id: totrans-3849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in session.rollback() which involved not removing formerly “pending”
    objects from the session before re-integrating “deleted” objects, typically occurred
    with natural primary keys. If there was a primary key conflict between them, the
    attach of the deleted would fail internally. The formerly “pending” objects are
    now expunged first.
  id: totrans-3850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session.rollback()中的错误，涉及在重新整合“已删除”对象之前未从会话中移除以前“挂起”对象的问题，通常出现在自然主键上。如果它们之间存在主键冲突，那么删除的附加将在内部失败。以前“挂起”的对象现在首先被清除。
- en: 'References: [#1674](https://www.sqlalchemy.org/trac/ticket/1674)'
  id: totrans-3851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1674](https://www.sqlalchemy.org/trac/ticket/1674)
- en: '**[orm]**'
  id: totrans-3852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed a lot of logging that nobody really cares about, logging that remains
    will respond to live changes in the log level. No significant overhead is added.
  id: totrans-3853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了很多没有人真正关心的日志记录，保留的日志记录将响应日志级别的实时更改。不会增加显著的开销。
- en: 'References: [#1719](https://www.sqlalchemy.org/trac/ticket/1719)'
  id: totrans-3854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1719](https://www.sqlalchemy.org/trac/ticket/1719)
- en: '**[orm]**'
  id: totrans-3855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in session.merge() which prevented dict-like collections from merging.
  id: totrans-3856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session.merge()中阻止类似字典的集合合并的错误。
- en: '**[orm]**'
  id: totrans-3857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() works with relations that specifically don’t include “merge”
    in their cascade options - the target is ignored completely.
  id: totrans-3858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.merge()与明确不包括“merge”在其级联选项中的关系一起工作-目标完全被忽略。
- en: '**[orm]**'
  id: totrans-3859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.merge() will not expire existing scalar attributes on an existing target
    if the target has a value for that attribute, even if the incoming merged doesn’t
    have a value for the attribute. This prevents unnecessary loads on existing items.
    Will still mark the attr as expired if the destination doesn’t have the attr,
    though, which fulfills some contracts of deferred cols.
  id: totrans-3860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果目标具有该属性的值，则session.merge()不会使现有目标上的现有标量属性过期，即使传入的合并没有该属性的值。这可以避免对现有项目进行不必要的加载。但是，如果目标没有该属性，它仍将标记为过期，这可以满足延迟列的某些约定。
- en: 'References: [#1681](https://www.sqlalchemy.org/trac/ticket/1681)'
  id: totrans-3861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1681](https://www.sqlalchemy.org/trac/ticket/1681)
- en: '**[orm]**'
  id: totrans-3862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “allow_null_pks” flag is now called “allow_partial_pks”, defaults to True,
    acts like it did in 0.5 again. Except, it also is implemented within merge() such
    that a SELECT won’t be issued for an incoming instance with partially NULL primary
    key if the flag is False.
  id: totrans-3863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “allow_null_pks”标志现在称为“allow_partial_pks”，默认为True，像0.5中一样起作用。但是，如果标志为False，则在merge()中实现了这一点，对于具有部分NULL主键的传入实例不会发出SELECT。
- en: 'References: [#1680](https://www.sqlalchemy.org/trac/ticket/1680)'
  id: totrans-3864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1680](https://www.sqlalchemy.org/trac/ticket/1680)
- en: '**[orm]**'
  id: totrans-3865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in 0.6-reworked “many-to-one” optimizations such that a many-to-one
    that is against a non-primary key column on the remote table (i.e. foreign key
    against a UNIQUE column) will pull the “old” value in from the database during
    a change, since if it’s in the session we will need it for proper history/backref
    accounting, and we can’t pull from the local identity map on a non-primary key
    column.
  id: totrans-3866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.6重做的“多对一”优化中的错误，使得针对远程表上的非主键列（即针对唯一列的外键）的多对一在更改时会从数据库中拉取“旧”值，因为如果它在会话中，我们将需要它进行正确的历史/反向引用计算，并且在非主键列上无法从本地标识映射中拉取。
- en: 'References: [#1737](https://www.sqlalchemy.org/trac/ticket/1737)'
  id: totrans-3867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1737](https://www.sqlalchemy.org/trac/ticket/1737)
- en: '**[orm]**'
  id: totrans-3868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed internal error which would occur if calling has() or similar complex expression
    on a single-table inheritance relation().
  id: totrans-3869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在单表继承关系上调用has()或类似复杂表达式时可能出现的内部错误。
- en: 'References: [#1731](https://www.sqlalchemy.org/trac/ticket/1731)'
  id: totrans-3870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1731](https://www.sqlalchemy.org/trac/ticket/1731)
- en: '**[orm]**'
  id: totrans-3871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.one() no longer applies LIMIT to the query, this to ensure that it fully
    counts all object identities present in the result, even in the case where joins
    may conceal multiple identities for two or more rows. As a bonus, one() can now
    also be called with a query that issued from_statement() to start with since it
    no longer modifies the query.
  id: totrans-3872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.one()不再对查询应用LIMIT，以确保它完全计算结果中存在的所有对象标识，即使在连接可能隐藏两个或更多行的多个标识的情况下也是如此。作为奖励，现在也可以使用从from_statement()发出的查询调用one()，因为它不再修改查询。
- en: 'References: [#1688](https://www.sqlalchemy.org/trac/ticket/1688)'
  id: totrans-3873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1688](https://www.sqlalchemy.org/trac/ticket/1688)
- en: '**[orm]**'
  id: totrans-3874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() now returns None if queried for an identifier that is present in
    the identity map with a different class than the one requested, i.e. when using
    polymorphic loading.
  id: totrans-3875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果查询一个在标识映射中具有不同类的标识符，即在使用多态加载时，query.get()会返回None。
- en: 'References: [#1727](https://www.sqlalchemy.org/trac/ticket/1727)'
  id: totrans-3876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1727](https://www.sqlalchemy.org/trac/ticket/1727)
- en: '**[orm]**'
  id: totrans-3877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A major fix in query.join(), when the “on” clause is an attribute of an aliased()
    construct, but there is already an existing join made out to a compatible target,
    query properly joins to the right aliased() construct instead of sticking onto
    the right side of the existing join.
  id: totrans-3878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在query.join()中进行了一个重大修复，当“on”子句是aliased()构造的属性时，但已经存在一个指向兼容目标的现有连接时，query会正确地连接到正确的aliased()构造，而不是粘附到现有连接的右侧。
- en: 'References: [#1706](https://www.sqlalchemy.org/trac/ticket/1706)'
  id: totrans-3879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1706](https://www.sqlalchemy.org/trac/ticket/1706)
- en: '**[orm]**'
  id: totrans-3880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Slight improvement to the fix for to not issue needless updates of the primary
    key column during a so-called “row switch” operation, i.e. add + delete of two
    objects with the same PK.
  id: totrans-3881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于不发出不必要的更新主键列的修复进行了轻微改进，即在所谓的“行切换”操作期间，即两个具有相同PK的对象的添加+删除。
- en: 'References: [#1362](https://www.sqlalchemy.org/trac/ticket/1362)'
  id: totrans-3882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1362](https://www.sqlalchemy.org/trac/ticket/1362)
- en: '**[orm]**'
  id: totrans-3883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Now uses sqlalchemy.orm.exc.DetachedInstanceError when an attribute load or
    refresh action fails due to object being detached from any Session. UnboundExecutionError
    is specific to engines bound to sessions and statements.
  id: totrans-3884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当由于对象与任何会话分离而导致属性加载或刷新操作失败时，会使用sqlalchemy.orm.exc.DetachedInstanceError。UnboundExecutionError特定于绑定到会话和语句的引擎。
- en: '**[orm]**'
  id: totrans-3885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query called in the context of an expression will render disambiguating labels
    in all cases. Note that this does not apply to the existing .statement and .subquery()
    accessor/method, which still honors the .with_labels() setting that defaults to
    False.
  id: totrans-3886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式上调用的Query将在所有情况下呈现消除歧义的标签。请注意，这不适用于现有的.statement和.subquery()访问器/方法，它仍然遵循默认为False的.with_labels()设置。
- en: '**[orm]**'
  id: totrans-3887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.union() retains disambiguating labels within the returned statement, thus
    avoiding various SQL composition errors which can result from column name conflicts.
  id: totrans-3888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.union()在返回的语句中保留了消除歧义的标签，从而避免了由于列名冲突而导致的各种SQL组合错误。
- en: 'References: [#1676](https://www.sqlalchemy.org/trac/ticket/1676)'
  id: totrans-3889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1676](https://www.sqlalchemy.org/trac/ticket/1676)
- en: '**[orm]**'
  id: totrans-3890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in attribute history that inadvertently invoked __eq__ on mapped instances.
  id: totrans-3891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性历史中的错误，无意中调用了映射实例上的__eq__。
- en: '**[orm]**'
  id: totrans-3892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some internal streamlining of object loading grants a small speedup for large
    results, estimates are around 10-15%. Gave the “state” internals a good solid
    cleanup with less complexity, datamembers, method calls, blank dictionary creates.
  id: totrans-3893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对对象加载进行了一些内部优化，为大结果提供了一点速度提升，估计在10-15%左右。对“state”内部进行了彻底的清理，减少了复杂性，数据成员，方法调用，空字典的创建。
- en: '**[orm]**'
  id: totrans-3894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Documentation clarification for query.delete()
  id: totrans-3895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对query.delete()进行了文档澄清
- en: 'References: [#1689](https://www.sqlalchemy.org/trac/ticket/1689)'
  id: totrans-3896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1689](https://www.sqlalchemy.org/trac/ticket/1689)
- en: '**[orm]**'
  id: totrans-3897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed cascade bug in many-to-one relation() when attribute was set to None,
    introduced in r6711 (cascade deleted items into session during add()).
  id: totrans-3898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了many-to-one relation()中的级联bug，当属性设置为None时，在r6711中引入（在add()期间将删除的项目级联到会话中）。
- en: '**[orm]**'
  id: totrans-3899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Calling query.order_by() or query.distinct() before calling query.select_from(),
    query.with_polymorphic(), or query.from_statement() raises an exception now instead
    of silently dropping those criterion.
  id: totrans-3900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用query.select_from()、query.with_polymorphic()或query.from_statement()之前调用query.order_by()或query.distinct()现在会引��异常，而不是悄悄地丢弃这些条件。
- en: 'References: [#1736](https://www.sqlalchemy.org/trac/ticket/1736)'
  id: totrans-3901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1736](https://www.sqlalchemy.org/trac/ticket/1736)
- en: '**[orm]**'
  id: totrans-3902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.scalar() now raises an exception if more than one row is returned. All
    other behavior remains the same.
  id: totrans-3903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果查询返回多行，query.scalar()会引发异常。所有其他行为保持不变。
- en: 'References: [#1735](https://www.sqlalchemy.org/trac/ticket/1735)'
  id: totrans-3904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1735](https://www.sqlalchemy.org/trac/ticket/1735)
- en: '**[orm]**'
  id: totrans-3905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which caused “row switch” logic, that is an INSERT and DELETE replaced
    by an UPDATE, to fail when version_id_col was in use.
  id: totrans-3906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当version_id_col在使用时，“行切换”逻辑失败，即INSERT和DELETE被UPDATE替换。
- en: 'References: [#1692](https://www.sqlalchemy.org/trac/ticket/1692)'
  id: totrans-3907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1692](https://www.sqlalchemy.org/trac/ticket/1692)
- en: examples
  id: totrans-3908
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Changed the beaker cache example a bit to have a separate RelationCache option
    for lazyload caching. This object does a lookup among any number of potential
    attributes more efficiently by grouping several into a common structure. Both
    FromCache and RelationCache are simpler individually.
  id: totrans-3910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍微修改了beaker缓存示例，为lazyload缓存添加了一个单独的RelationCache选项。这个对象通过将几个潜在属性分组到一个公共结构中，更有效地进行查找。FromCache和RelationCache两者单独来说更简单。
- en: sql
  id: totrans-3911
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: join() will now simulate a NATURAL JOIN by default. Meaning, if the left side
    is a join, it will attempt to join the right side to the rightmost side of the
    left first, and not raise any exceptions about ambiguous join conditions if successful
    even if there are further join targets across the rest of the left.
  id: totrans-3913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: join()现在默认模拟NATURAL JOIN。这意味着，如果左侧是一个连接，它将尝试首先将右侧连接到左侧的最右侧，并且如果成功，即使在左侧的其余部分有更多的连接目标，也不会引发任何关于模糊连接条件的异常。
- en: 'References: [#1714](https://www.sqlalchemy.org/trac/ticket/1714)'
  id: totrans-3914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1714](https://www.sqlalchemy.org/trac/ticket/1714)
- en: '**[sql]**'
  id: totrans-3915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The most common result processors conversion function were moved to the new
    “processors” module. Dialect authors are encouraged to use those functions whenever
    they correspond to their needs instead of implementing custom ones.
  id: totrans-3916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最常见的结果处理器转换函数已移至新的“processors”模块。鼓励方言作者在需要时使用这些函数，而不是实现自定义函数。
- en: '**[sql]**'
  id: totrans-3917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SchemaType and subclasses Boolean, Enum are now serializable, including their
    ddl listener and other event callables.
  id: totrans-3918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SchemaType和其子类Boolean、Enum现在是可序列化的，包括它们的ddl监听器和其他事件可调用对象。
- en: 'References: [#1694](https://www.sqlalchemy.org/trac/ticket/1694), [#1698](https://www.sqlalchemy.org/trac/ticket/1698)'
  id: totrans-3919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1694](https://www.sqlalchemy.org/trac/ticket/1694), [#1698](https://www.sqlalchemy.org/trac/ticket/1698)
- en: '**[sql]**'
  id: totrans-3920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Some platforms will now interpret certain literal values as non-bind parameters,
    rendered literally into the SQL statement. This to support strict SQL-92 rules
    that are enforced by some platforms including MS-SQL and Sybase. In this model,
    bind parameters aren’t allowed in the columns clause of a SELECT, nor are certain
    ambiguous expressions like “?=?”. When this mode is enabled, the base compiler
    will render the binds as inline literals, but only across strings and numeric
    values. Other types such as dates will raise an error, unless the dialect subclass
    defines a literal rendering function for those. The bind parameter must have an
    embedded literal value already or an error is raised (i.e. won’t work with straight
    bindparam(‘x’)). Dialects can also expand upon the areas where binds are not accepted,
    such as within argument lists of functions (which don’t work on MS-SQL when native
    SQL binding is used).
  id: totrans-3921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，某些平台将解释某些文字值为非绑定参数，直接呈现到SQL语句中。这是为了支持一些平台（包括MS-SQL和Sybase）强制执行的严格SQL-92规则。在这种模式下，不允许在SELECT的列子句中使用绑定参数，也不允许使用诸如“?=?”之类的模糊表达式。当启用此模式时，基本编译器将把绑定呈现为内联文字，但仅限于字符串和数值。其他类型如日期将引发错误，除非方言子类为其定义了文字呈现函数。绑定参数必须已经嵌入文字值，否则将引发错误（即不适用于直接bindparam(‘x’)）。方言还可以扩展绑定不被接受的领域，例如在函数的参数列表中（当使用本地SQL绑定时，在MS-SQL上不起作用）。
- en: '**[sql]**'
  id: totrans-3922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “unicode_errors” parameter to String, Unicode, etc. Behaves like the ‘errors’
    keyword argument to the standard library’s string.decode() functions. This flag
    requires that convert_unicode is set to “force” - otherwise, SQLAlchemy is not
    guaranteed to handle the task of unicode conversion. Note that this flag adds
    significant performance overhead to row-fetching operations for backends that
    already return unicode objects natively (which most DBAPIs do). This flag should
    only be used as an absolute last resort for reading strings from a column with
    varied or corrupted encodings, which only applies to databases that accept invalid
    encodings in the first place (i.e. MySQL. *not* PG, Sqlite, etc.)
  id: totrans-3923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在String、Unicode等中添加了“unicode_errors”参数。其行为类似于标准库的string.decode()函数的‘errors’关键字参数。此标志要求将convert_unicode设置为“force”
    - 否则，SQLAlchemy不能保证处理Unicode转换的任务。请注意，对于已经原生返回Unicode对象的后端（大多数DBAPI都是如此），此标志会给行提取操作增加显著的性能开销。此标志应仅在从具有不同或损坏编码的列中读取字符串时使用，这仅适用于首先接受无效编码的数据库（即MySQL。*不是*PG、Sqlite等）。
- en: '**[sql]**'
  id: totrans-3924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added math negation operator support, -x.
  id: totrans-3925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了数学否定运算符支持，-x。
- en: '**[sql]**'
  id: totrans-3926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: FunctionElement subclasses are now directly executable the same way any func.foo()
    construct is, with automatic SELECT being applied when passed to execute().
  id: totrans-3927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: FunctionElement 子类现在可以直接执行，与任何 func.foo() 结构一样，当传递给 execute() 时会自动应用 SELECT。
- en: '**[sql]**'
  id: totrans-3928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The “type” and “bind” keyword arguments of a func.foo() construct are now local
    to “func.” constructs and are not part of the FunctionElement base class, allowing
    a “type” to be handled in a custom constructor or class-level variable.
  id: totrans-3929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.foo() 结构的“type”和“bind”关键字参数现在仅局限于“func.” 结构，并不属于 FunctionElement 基类，允许在自定义构造函数或类级别变量中处理“type”。
- en: '**[sql]**'
  id: totrans-3930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored the keys() method to ResultProxy.
  id: totrans-3931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 ResultProxy 的 keys() 方法。
- en: '**[sql]**'
  id: totrans-3932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The type/expression system now does a more complete job of determining the return
    type from an expression as well as the adaptation of the Python operator into
    a SQL operator, based on the full left/right/operator of the given expression.
    In particular the date/time/interval system created for PostgreSQL EXTRACT in
    has now been generalized into the type system. The previous behavior which often
    occurred of an expression “column + literal” forcing the type of “literal” to
    be the same as that of “column” will now usually not occur - the type of “literal”
    is first derived from the Python type of the literal, assuming standard native
    Python types + date types, before falling back to that of the known type on the
    other side of the expression. If the “fallback” type is compatible (i.e. CHAR
    from String), the literal side will use that. TypeDecorator types override this
    by default to coerce the “literal” side unconditionally, which can be changed
    by implementing the coerce_compared_value() method. Also part of.
  id: totrans-3933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，类型/表达式系统在确定表达式的返回类型以及将 Python 运算符转换为 SQL 运算符方面做得更完整了，基于给定表达式的完整左/右/运算符。特别是为
    PostgreSQL 中的 EXTRACT 创建的日期/时间/间隔系统现在已经泛化为类型系统。以前经常发生的“列 + 文字”的表达式强制“文字”的类型与“列”的类型相同的行为现在通常不会发生
    - “文字”的类型首先从文字的 Python 类型推导出来，假设标准的原生 Python 类型 + 日期类型，然后再回退到表达式另一侧已知类型的类型。如果“回退”类型兼容（即来自
    String 的 CHAR），则文字一侧将使用该类型。TypeDecorator 类型默认覆盖此行为，无条件地强制“文字”一侧，这可以通过实现 coerce_compared_value()
    方法来更改。也是其中的一部分。
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647), [#1683](https://www.sqlalchemy.org/trac/ticket/1683)'
  id: totrans-3934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1647](https://www.sqlalchemy.org/trac/ticket/1647)，[#1683](https://www.sqlalchemy.org/trac/ticket/1683)
- en: '**[sql]**'
  id: totrans-3935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Made sqlalchemy.sql.expressions.Executable part of public API, used for any
    expression construct that can be sent to execute(). FunctionElement now inherits
    Executable so that it gains execution_options(), which are also propagated to
    the select() that’s generated within execute(). Executable in turn subclasses
    _Generative which marks any ClauseElement that supports the @_generative decorator
    - these may also become “public” for the benefit of the compiler extension at
    some point.
  id: totrans-3936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使 sqlalchemy.sql.expressions.Executable 成为公共 API 的一部分，用于可以发送到 execute() 的任何表达式构造。FunctionElement
    现在继承 Executable，以便获得 execution_options()，这些选项也传播到 execute() 中生成的 select()。Executable
    又继承了 _Generative，标记了任何支持 @_generative 装饰器的 ClauseElement - 这些也可能在某些时候成为编译器扩展的“公共”部分。
- en: '**[sql]**'
  id: totrans-3937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: A change to the solution for - an end-user defined bind parameter name that
    directly conflicts with a column-named bind generated directly from the SET or
    VALUES clause of an update/insert generates a compile error. This reduces call
    counts and eliminates some cases where undesirable name conflicts could still
    occur.
  id: totrans-3938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决方案的变更为 - 一个端用户定义的绑定参数名称，它直接与来自 update/insert 的 SET 或 VALUES 子句生成的列命名绑定发生冲突时，将生成编译错误。这减少了调用次数，并消除了一些仍可能发生不良名称冲突的情况。
- en: 'References: [#1579](https://www.sqlalchemy.org/trac/ticket/1579)'
  id: totrans-3939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1579](https://www.sqlalchemy.org/trac/ticket/1579)
- en: '**[sql]**'
  id: totrans-3940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column() requires a type if it has no foreign keys (this is not new). An error
    is now raised if a Column() has no type and no foreign keys.
  id: totrans-3941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 Column() 没有外键，则需要类型（这不是新内容）。如果 Column() 没有类型和外键，则现在会引发错误。
- en: 'References: [#1705](https://www.sqlalchemy.org/trac/ticket/1705)'
  id: totrans-3942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1705](https://www.sqlalchemy.org/trac/ticket/1705)
- en: '**[sql]**'
  id: totrans-3943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “scale” argument of the Numeric() type is honored when coercing a returned
    floating point value into a string on its way to Decimal - this allows accuracy
    to function on SQLite, MySQL.
  id: totrans-3944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Numeric() 类型的“scale”参数在将返回的浮点值转换为 Decimal 的字符串时被尊重 - 这允许 SQLite、MySQL 上的准确性工作。
- en: 'References: [#1717](https://www.sqlalchemy.org/trac/ticket/1717)'
  id: totrans-3945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1717](https://www.sqlalchemy.org/trac/ticket/1717)
- en: '**[sql]**'
  id: totrans-3946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the copy() method of Column now copies over uninitialized “on table attach”
    events. Helps with the new declarative “mixin” capability.
  id: totrans-3947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column的copy()方法现在会复制未初始化的“on table attach”事件。有助于新的声明性“mixin”功能。
- en: mysql
  id: totrans-3948
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed reflection bug whereby when COLLATE was present, nullable flag and server
    defaults would not be reflected.
  id: totrans-3950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射错误，即当COLLATE存在时，nullable标志和服务器默认值不会被反映。
- en: 'References: [#1655](https://www.sqlalchemy.org/trac/ticket/1655)'
  id: totrans-3951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1655](https://www.sqlalchemy.org/trac/ticket/1655)
- en: '**[mysql]**'
  id: totrans-3952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed reflection of TINYINT(1) “boolean” columns defined with integer flags
    like UNSIGNED.
  id: totrans-3953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射TINYINT(1)“boolean”列时定义为UNSIGNED的整数标志的问题。
- en: '**[mysql]**'
  id: totrans-3954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Further fixes for the mysql-connector dialect.
  id: totrans-3955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了mysql-connector方言的问题。
- en: 'References: [#1668](https://www.sqlalchemy.org/trac/ticket/1668)'
  id: totrans-3956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1668](https://www.sqlalchemy.org/trac/ticket/1668)
- en: '**[mysql]**'
  id: totrans-3957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Composite PK table on InnoDB where the “autoincrement” column isn’t first will
    emit an explicit “KEY” phrase within CREATE TABLE thereby avoiding errors.
  id: totrans-3958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在InnoDB上的复合主键表中，“autoincrement”列不是第一个将在CREATE TABLE中发出显式的“KEY”短语，从而避免错误。
- en: 'References: [#1496](https://www.sqlalchemy.org/trac/ticket/1496)'
  id: totrans-3959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1496](https://www.sqlalchemy.org/trac/ticket/1496)
- en: '**[mysql]**'
  id: totrans-3960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added reflection/create table support for a wide range of MySQL keywords.
  id: totrans-3961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为许多MySQL关键字添加了反射/创建表支持。
- en: 'References: [#1634](https://www.sqlalchemy.org/trac/ticket/1634)'
  id: totrans-3962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1634](https://www.sqlalchemy.org/trac/ticket/1634)
- en: '**[mysql]**'
  id: totrans-3963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed import error which could occur reflecting tables on a Windows host
  id: totrans-3964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Windows主机上反射表时可能发生的导入错误。
- en: 'References: [#1580](https://www.sqlalchemy.org/trac/ticket/1580)'
  id: totrans-3965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1580](https://www.sqlalchemy.org/trac/ticket/1580)
- en: sqlite
  id: totrans-3966
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Added “native_datetime=True” flag to create_engine(). This will cause the DATE
    and TIMESTAMP types to skip all bind parameter and result row processing, under
    the assumption that PARSE_DECLTYPES has been enabled on the connection. Note that
    this is not entirely compatible with the “func.current_date()”, which will be
    returned as a string.
  id: totrans-3968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“native_datetime=True”标志到create_engine()。这将导致DATE和TIMESTAMP类型跳过所有绑定参数和结果行处理，假设连接上已启用PARSE_DECLTYPES。请注意，这与“func.current_date()”不完全兼容，它将返回一个字符串。
- en: 'References: [#1685](https://www.sqlalchemy.org/trac/ticket/1685)'
  id: totrans-3969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1685](https://www.sqlalchemy.org/trac/ticket/1685)
- en: mssql
  id: totrans-3970
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Re-established support for the pymssql dialect.
  id: totrans-3972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新支持了pymssql方言。
- en: '**[mssql]**'
  id: totrans-3973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Various fixes for implicit returning, reflection, etc. - the MS-SQL dialects
    aren’t quite complete in 0.6 yet (but are close)
  id: totrans-3974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 隐式返回、反射等方面的各种修复 - MS-SQL方言在0.6版本中还不完全（但接近完成）
- en: '**[mssql]**'
  id: totrans-3975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added basic support for mxODBC.
  id: totrans-3976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对mxODBC的基本支持。
- en: 'References: [#1710](https://www.sqlalchemy.org/trac/ticket/1710)'
  id: totrans-3977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1710](https://www.sqlalchemy.org/trac/ticket/1710)
- en: '**[mssql]**'
  id: totrans-3978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Removed the text_as_varchar option.
  id: totrans-3979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了text_as_varchar选项。
- en: oracle
  id: totrans-3980
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: ”out” parameters require a type that is supported by cx_oracle. An error will
    be raised if no cx_oracle type can be found.
  id: totrans-3982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”out”参数需要cx_oracle支持的类型。如果找不到cx_oracle类型，将引发错误。
- en: '**[oracle]**'
  id: totrans-3983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle ‘DATE’ now does not perform any result processing, as the DATE type in
    Oracle stores full date+time objects, that’s what you’ll get. Note that the generic
    types.Date type *will* still call value.date() on incoming values, however. When
    reflecting a table, the reflected type will be ‘DATE’.
  id: totrans-3984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle的‘DATE’现在不执行任何结果处理，因为Oracle中的DATE类型存储完整的日期+时间对象，这就是你将得到的。请注意，通用类型Date类型*仍然*会在传入值上调用value.date()。在反射表时，反射的类型将是‘DATE’。
- en: '**[oracle]**'
  id: totrans-3985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added preliminary support for Oracle’s WITH_UNICODE mode. At the very least
    this establishes initial support for cx_Oracle with Python 3\. When WITH_UNICODE
    mode is used in Python 2.xx, a large and scary warning is emitted asking that
    the user seriously consider the usage of this difficult mode of operation.
  id: totrans-3986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对Oracle的WITH_UNICODE模式的初步支持。至少这为Python 3中的cx_Oracle建立了初始支持。在Python 2.xx中使用WITH_UNICODE模式时，会发出一个大而可怕的警告，要求用户认真考虑这种困难的操作模式的使用。
- en: 'References: [#1670](https://www.sqlalchemy.org/trac/ticket/1670)'
  id: totrans-3987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1670](https://www.sqlalchemy.org/trac/ticket/1670)
- en: '**[oracle]**'
  id: totrans-3988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The except_() method now renders as MINUS on Oracle, which is more or less equivalent
    on that platform.
  id: totrans-3989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Oracle��，except_()方法现在呈现为MINUS，这在该平台上更或多或少是等效的。
- en: 'References: [#1712](https://www.sqlalchemy.org/trac/ticket/1712)'
  id: totrans-3990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1712](https://www.sqlalchemy.org/trac/ticket/1712)
- en: '**[oracle]**'
  id: totrans-3991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added support for rendering and reflecting TIMESTAMP WITH TIME ZONE, i.e. TIMESTAMP(timezone=True).
  id: totrans-3992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对渲染和反射TIMESTAMP WITH TIME ZONE的支持，即TIMESTAMP(timezone=True)。
- en: 'References: [#651](https://www.sqlalchemy.org/trac/ticket/651)'
  id: totrans-3993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#651](https://www.sqlalchemy.org/trac/ticket/651)
- en: '**[oracle]**'
  id: totrans-3994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle INTERVAL type can now be reflected.
  id: totrans-3995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle INTERVAL类型现在可以反射。
- en: misc
  id: totrans-3996
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[py3k]**'
  id: totrans-3997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[py3k]**'
- en: Improved the installation/test setup regarding Python 3, now that Distribute
    runs on Py3k. distribute_setup.py is now included. See README.py3k for Python
    3 installation/ testing instructions.
  id: totrans-3998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了关于Python 3的安装/测试设置，现在Distribute在Py3k上运行。distribute_setup.py现在已包含在内。请参阅README.py3k以获取Python
    3安装/测试说明。
- en: '**[engines]**'
  id: totrans-3999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Added an optional C extension to speed up the sql layer by reimplementing RowProxy
    and the most common result processors. The actual speedups will depend heavily
    on your DBAPI and the mix of datatypes used in your tables, and can vary from
    a 30% improvement to more than 200%. It also provides a modest (~15-20%) indirect
    improvement to ORM speed for large queries. Note that it is *not* built/installed
    by default. See README for installation instructions.
  id: totrans-4000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个可选的C扩展，通过重新实现RowProxy和最常见的结果处理器来加速sql层。实际的加速将严重依赖于您的DBAPI和表中使用的数据类型的混合，并且可以从30%的改进到200%以上的变化。对于大查询，它还为ORM速度提供了适度的（~15-20%）间接改进。请注意，默认情况下*不*构建/安装它。请参阅README以获取安装说明。
- en: '**[engines]**'
  id: totrans-4001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: the execution sequence pulls all rowcount/last inserted ID info from the cursor
    before commit() is called on the DBAPI connection in an “autocommit” scenario.
    This helps mxodbc with rowcount and is probably a good idea overall.
  id: totrans-4002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“自动提交”场景中，在调用DBAPI连接上的commit()之前，执行顺序会从游标中提取所有rowcount/最后插入的ID信息。这有助于mxodbc处理rowcount，并且总体上可能是一个好主意。
- en: '**[engines]**'
  id: totrans-4003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Opened up logging a bit such that isEnabledFor() is called more often, so that
    changes to the log level for engine/pool will be reflected on next connect. This
    adds a small amount of method call overhead. It’s negligible and will make life
    a lot easier for all those situations when logging just happens to be configured
    after create_engine() is called.
  id: totrans-4004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开了日志记录，使得更频繁地调用isEnabledFor()，以便在下次连接时反映引擎/池的日志级别更改。这会增加一点方法调用开销。这是微不足道的，将使得在调用create_engine()之后配置日志记录变得更加容易。
- en: 'References: [#1719](https://www.sqlalchemy.org/trac/ticket/1719)'
  id: totrans-4005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1719](https://www.sqlalchemy.org/trac/ticket/1719)
- en: '**[engines]**'
  id: totrans-4006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: The assert_unicode flag is deprecated. SQLAlchemy will raise a warning in all
    cases where it is asked to encode a non-unicode Python string, as well as when
    a Unicode or UnicodeType type is explicitly passed a bytestring. The String type
    will do nothing for DBAPIs that already accept Python unicode objects.
  id: totrans-4007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assert_unicode标志已被弃用。在所有要求对非Unicode Python字符串进行编码的情况下，SQLAlchemy都会发出警告，以及当Unicode或UnicodeType类型明确传递了字节字符串时。String类型对于已经接受Python
    unicode对象的DBAPI不会执行任何操作。
- en: '**[engines]**'
  id: totrans-4008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Bind parameters are sent as a tuple instead of a list. Some backend drivers
    will not accept bind parameters as a list.
  id: totrans-4009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 绑定参数被发送为元组而不是列表。一些后端驱动程序将不接受绑定参数作为列表。
- en: '**[engines]**'
  id: totrans-4010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: threadlocal engine wasn’t properly closing the connection upon close() - fixed
    that.
  id: totrans-4011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: threadlocal引擎在close()时没有正确关闭连接 - 已修复。
- en: '**[engines]**'
  id: totrans-4012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Transaction object doesn’t rollback or commit if it isn’t “active”, allows more
    accurate nesting of begin/rollback/commit.
  id: totrans-4013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事务对象不是“活动”的话，就不会回滚或提交，允许更准确地嵌套begin/rollback/commit。
- en: '**[engines]**'
  id: totrans-4014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Python unicode objects as binds result in the Unicode type, not string, thus
    eliminating a certain class of unicode errors on drivers that don’t support unicode
    binds.
  id: totrans-4015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python unicode对象作为绑定结果会产生Unicode类型，而不是字符串，从而消除了一定类别的不支持Unicode绑定的驱动程序上的Unicode错误。
- en: '**[engines]**'
  id: totrans-4016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Added “logging_name” argument to create_engine(), Pool() constructor as well
    as “pool_logging_name” argument to create_engine() which filters down to that
    of Pool. Issues the given string name within the “name” field of logging messages
    instead of the default hex identifier string.
  id: totrans-4017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在create_engine()、Pool()构造函数以及create_engine()中添加了“logging_name”参数，该参数会过滤到Pool的名称。在日志消息的“name”字段中发出给定的字符串名称，而不是默认的十六进制标识符字符串。
- en: 'References: [#1555](https://www.sqlalchemy.org/trac/ticket/1555)'
  id: totrans-4018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1555](https://www.sqlalchemy.org/trac/ticket/1555)
- en: '**[engines]**'
  id: totrans-4019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: The visit_pool() method of Dialect is removed, and replaced with on_connect().
    This method returns a callable which receives the raw DBAPI connection after each
    one is created. The callable is assembled into a first_connect/connect pool listener
    by the connection strategy if non-None. Provides a simpler interface for dialects.
  id: totrans-4020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Dialect 的 visit_pool() 方法已被移除，并替换为 on_connect()。此方法返回一个可调用对象，在每次创建原始 DBAPI 连接后接收该连接。如果非
    None，则该可调用对象将被连接策略组装成一个 first_connect/connect 池监听器。为方言提供了更简单的接口。
- en: '**[engines]**'
  id: totrans-4021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: StaticPool now initializes, disposes and recreates without opening a new connection
    - the connection is only opened when first requested. dispose() also works on
    AssertionPool now.
  id: totrans-4022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: StaticPool 现在在不打开新连接的情况下初始化、释放和重新创建 - 只有在首次请求时才会打开连接。dispose() 现在也适用于 AssertionPool。
- en: 'References: [#1728](https://www.sqlalchemy.org/trac/ticket/1728)'
  id: totrans-4023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1728](https://www.sqlalchemy.org/trac/ticket/1728)
- en: '**[metadata] [ticket: 1673]**'
  id: totrans-4024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[metadata] [ticket: 1673]**'
- en: Added the ability to strip schema information when using “tometadata” by passing
    “schema=None” as an argument. If schema is not specified then the table’s schema
    is retained.
  id: totrans-4025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了在使用“tometadata”时剥离模式信息的能力，通过传递“schema=None”作为参数。如果未指定模式，则保留表的模式。
- en: '**[declarative]**'
  id: totrans-4026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: DeclarativeMeta exclusively uses cls.__dict__ (not dict_) as the source of class
    information; _as_declarative exclusively uses the dict_ passed to it as the source
    of class information (which when using DeclarativeMeta is cls.__dict__). This
    should in theory make it easier for custom metaclasses to modify the state passed
    into _as_declarative.
  id: totrans-4027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DeclarativeMeta 专门使用 cls.__dict__（而不是 dict_）作为类信息的来源；_as_declarative 专门使用传递给它的
    dict_ 作为类信息的来源（当使用 DeclarativeMeta 时是 cls.__dict__）。理论上，这应该使得自定义元类更容易修改传递给 _as_declarative
    的状态。
- en: '**[declarative]**'
  id: totrans-4028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: declarative now accepts mixin classes directly, as a means to provide common
    functional and column-based elements on all subclasses, as well as a means to
    propagate a fixed set of __table_args__ or __mapper_args__ to subclasses. For
    custom combinations of __table_args__/__mapper_args__ from an inherited mixin
    to local, descriptors can now be used. New details are all up in the Declarative
    documentation. Thanks to Chris Withers for putting up with my strife on this.
  id: totrans-4029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declarative 现在直接接受 mixin 类，作为在所有子类上提供常见功能和基于列的元素的手段，以及传播一组固定的 __table_args__
    或 __mapper_args__ 到子类的手段。对于从继承的 mixin 到本地的自定义组合的 __table_args__/__mapper_args__，现在可以使用描述符。有关所有新细节，请参阅
    Declarative 文档。感谢 Chris Withers 在这��面的支持。
- en: 'References: [#1707](https://www.sqlalchemy.org/trac/ticket/1707)'
  id: totrans-4030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1707](https://www.sqlalchemy.org/trac/ticket/1707)
- en: '**[declarative]**'
  id: totrans-4031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: the __mapper_args__ dict is copied when propagating to a subclass, and is taken
    straight off the class __dict__ to avoid any propagation from the parent. mapper
    inheritance already propagates the things you want from the parent mapper.
  id: totrans-4032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在传播到子类时，__mapper_args__ 字典被复制，并直接从类 __dict__ 中取出，以避免从父类传播。映射器继承已经传播了您从父映射器中想要的内容。
- en: 'References: [#1393](https://www.sqlalchemy.org/trac/ticket/1393)'
  id: totrans-4033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1393](https://www.sqlalchemy.org/trac/ticket/1393)
- en: '**[declarative]**'
  id: totrans-4034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: An exception is raised when a single-table subclass specifies a column that
    is already present on the base class.
  id: totrans-4035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当单表子类指定已经存在于基类上的列时，会引发异常。
- en: 'References: [#1732](https://www.sqlalchemy.org/trac/ticket/1732)'
  id: totrans-4036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1732](https://www.sqlalchemy.org/trac/ticket/1732)
- en: '**[sybase]**'
  id: totrans-4037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sybase]**'
- en: Implemented a preliminary working dialect for Sybase, with sub-implementations
    for Python-Sybase as well as Pyodbc. Handles table creates/drops and basic round
    trip functionality. Does not yet include reflection or comprehensive support of
    unicode/special expressions/etc.
  id: totrans-4038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了一个初步可用的 Sybase 方言，包括 Python-Sybase 和 Pyodbc 的子实现。处理表的创建/删除和基本的往返功能。尚未包括反射或全面支持
    unicode/特殊表达式等。
- en: '**[documentation]**'
  id: totrans-4039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Major cleanup work in the docs to link class, function, and method names into
    the API docs.
  id: totrans-4040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文档中进行了重大清理工作，将类、函数和方法名称链接到 API 文档中。
- en: 'References: [#1700](https://www.sqlalchemy.org/trac/ticket/1700)'
  id: totrans-4041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1700](https://www.sqlalchemy.org/trac/ticket/1700)
- en: 0.6beta1
  id: totrans-4042
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6beta1
- en: 'Released: Wed Feb 03 2010'
  id: totrans-4043
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010年2月3日 星期三
- en: orm
  id: totrans-4044
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-4045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Changes to query.update() and query.delete():'
  id: totrans-4046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.update() 和 query.delete() 的更改：
- en: the ‘expire’ option on query.update() has been renamed to ‘fetch’, thus matching
    that of query.delete(). ‘expire’ is deprecated and issues a warning.
  id: totrans-4047
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query.update() 上的 ‘expire’ 选项已重命名为 ‘fetch’，与 query.delete() 的匹配。‘expire’ 已被弃用并发出警告。
- en: query.update() and query.delete() both default to ‘evaluate’ for the synchronize
    strategy.
  id: totrans-4048
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query.update()和query.delete()在同步策略上默认为“evaluate”。
- en: the ‘synchronize’ strategy for update() and delete() raises an error on failure.
    There is no implicit fallback onto “fetch”. Failure of evaluation is based on
    the structure of criteria, so success/failure is deterministic based on code structure.
  id: totrans-4049
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于update()和delete()的“同步”策略在失败时会引发错误。没有隐式回退到“fetch”。评估的失败基于条件的结构，因此成功/失败是基于代码结构的确定性。
- en: '**[orm]**'
  id: totrans-4050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Enhancements on many-to-one relations:'
  id: totrans-4051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对一关系的增强：
- en: many-to-one relations now fire off a lazyload in fewer cases, including in most
    cases will not fetch the “old” value when a new one is replaced.
  id: totrans-4052
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多对一关系现在在更少的情况下触发延迟加载，包括在大多数情况下，当替换新值时不会获取“旧”值。
- en: many-to-one relation to a joined-table subclass now uses get() for a simple
    load (known as the “use_get” condition), i.e. Related->Sub(Base), without the
    need to redefine the primaryjoin condition in terms of the base table.
  id: totrans-4053
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多对一关系到一个连接表子类现在使用get()进行简单加载（称为“use_get”条件），即Related->Sub(Base)，无需重新定义基表的主连接条件。
- en: specifying a foreign key with a declarative column, i.e. ForeignKey(MyRelatedClass.id)
    doesn’t break the “use_get” condition from taking place
  id: totrans-4054
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用声明性列指定外键，即ForeignKey(MyRelatedClass.id)不会破坏“use_get”条件的发生
- en: relation(), eagerload(), and eagerload_all() now feature an option called “innerjoin”.
    Specify True or False to control whether an eager join is constructed as an INNER
    or OUTER join. Default is False as always. The mapper options will override whichever
    setting is specified on relation(). Should generally be set for many-to-one, not
    nullable foreign key relations to allow improved join performance.
  id: totrans-4055
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: relation()，eagerload()和eagerload_all()现在具有一个名为“innerjoin”的选项。指定True或False以控制急切连接是构建为内连接还是外连接。默认始终为False。映射器选项将覆盖relation()上指定的任何设置。通常应为多对一，非空外键关系设置，以允许改进的连接性能。
- en: the behavior of eagerloading such that the main query is wrapped in a subquery
    when LIMIT/OFFSET are present now makes an exception for the case when all eager
    loads are many-to-one joins. In those cases, the eager joins are against the parent
    table directly along with the limit/offset without the extra overhead of a subquery,
    since a many-to-one join does not add rows to the result.
  id: totrans-4056
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 急切加载的行为，即当LIMIT/OFFSET存在时，主查询被包装在子查询中，现在对所有急切加载都是多对一连接的情况做了一个例外。在这些情况下，急切连接直接针对父表进行，同时具有限制/偏移量，而不会增加子查询的额外开销，因为多对一连接不会向结果添加行。
- en: 'References: [#1186](https://www.sqlalchemy.org/trac/ticket/1186), [#1492](https://www.sqlalchemy.org/trac/ticket/1492),
    [#1544](https://www.sqlalchemy.org/trac/ticket/1544)'
  id: totrans-4057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1186](https://www.sqlalchemy.org/trac/ticket/1186), [#1492](https://www.sqlalchemy.org/trac/ticket/1492),
    [#1544](https://www.sqlalchemy.org/trac/ticket/1544)
- en: '**[orm]**'
  id: totrans-4058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Enhancements / Changes on Session.merge():'
  id: totrans-4059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()的增强/更改：
- en: '**[orm]**'
  id: totrans-4060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “dont_load=True” flag on Session.merge() is deprecated and is now “load=False”.
  id: totrans-4061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “dont_load=True”标志在Session.merge()上已被弃用，现在是“load=False”。
- en: '**[orm]**'
  id: totrans-4062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() is performance optimized, using half the call counts for “load=False”
    mode compared to 0.5 and significantly fewer SQL queries in the case of collections
    for “load=True” mode.
  id: totrans-4063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()经过性能优化，在“load=False”模式下调用次数减少一半，与0.5相比，在“load=True”模式下在集合的情况下显著减少SQL查询。
- en: '**[orm]**'
  id: totrans-4064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() will not issue a needless merge of attributes if the given instance
    is the same instance which is already present.
  id: totrans-4065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果给定实例与已经存在的实例相同，则merge()不会发出属性的不必要合并。
- en: '**[orm]**'
  id: totrans-4066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() now also merges the “options” associated with a given state, i.e. those
    passed through query.options() which follow along with an instance, such as options
    to eagerly- or lazyily- load various attributes. This is essential for the construction
    of highly integrated caching schemes. This is a subtle behavioral change vs. 0.5.
  id: totrans-4067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge()现在还会合并与给定状态相关联的“options”，即通过query.options()传递的那些随实例一起传递的选项，例如急切加载或懒加载各种属性的选项。这对于构建高度集成的缓存方案至关重要。这与0.5版本相比是一个微妙的行为变化。
- en: '**[orm]**'
  id: totrans-4068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A bug was fixed regarding the serialization of the “loader path” present on
    an instance’s state, which is also necessary when combining the usage of merge()
    with serialized state and associated options that should be preserved.
  id: totrans-4069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于实例状态上存在的“loader path”序列化的错误，这在将merge()与序列化状态和应保留的相关选项结合使用时也是必要的。
- en: '**[orm]**'
  id: totrans-4070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The all new merge() is showcased in a new comprehensive example of how to integrate
    Beaker with SQLAlchemy. See the notes in the “examples” note below.
  id: totrans-4071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全新的merge()在一个新的全面示例中展示了如何将Beaker与SQLAlchemy集成。请参见下面的“examples”注释中的说明。
- en: '**[orm]**'
  id: totrans-4072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Primary key values can now be changed on a joined-table inheritance object,
    and ON UPDATE CASCADE will be taken into account when the flush happens. Set the
    new “passive_updates” flag to False on mapper() when using SQLite or MySQL/MyISAM.
  id: totrans-4073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在联接表继承对象上更改主键值，并且在刷新时将考虑ON UPDATE CASCADE。在使用SQLite或MySQL/MyISAM时，在mapper()上设置新的“passive_updates”标志为False。
- en: 'References: [#1362](https://www.sqlalchemy.org/trac/ticket/1362)'
  id: totrans-4074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1362](https://www.sqlalchemy.org/trac/ticket/1362)
- en: '**[orm]**'
  id: totrans-4075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush() now detects when a primary key column was updated by an ON UPDATE CASCADE
    operation from another primary key, and can then locate the row for a subsequent
    UPDATE on the new PK value. This occurs when a relation() is there to establish
    the relationship as well as passive_updates=True.
  id: totrans-4076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush()现在可以检测到主键列是否被另一个主键的ON UPDATE CASCADE操作更新，并且可以在刷新时定位用于对新PK值进行后续UPDATE的行。当存在relation()以建立关系并且passive_updates=True时会发生这种情况。
- en: 'References: [#1671](https://www.sqlalchemy.org/trac/ticket/1671)'
  id: totrans-4077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1671](https://www.sqlalchemy.org/trac/ticket/1671)
- en: '**[orm]**'
  id: totrans-4078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “save-update” cascade will now cascade the pending *removed* values from
    a scalar or collection attribute into the new session during an add() operation.
    This so that the flush() operation will also delete or modify rows of those disconnected
    items.
  id: totrans-4079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “save-update”级联现在将挂起的*已移除*值级联到新会话中的add()操作中。这样，flush()操作也将删除或修改这些断开连接项目的行。
- en: '**[orm]**'
  id: totrans-4080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using a “dynamic” loader with a “secondary” table now produces a query where
    the “secondary” table is *not* aliased. This allows the secondary Table object
    to be used in the “order_by” attribute of the relation(), and also allows it to
    be used in filter criterion against the dynamic relation.
  id: totrans-4081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用“dynamic”加载器与“secondary”表现在会产生一个查询，其中“secondary”表不被别名化。这允许在relation()的“order_by”属性中使用secondary
    Table对象，并且还允许在动态关系的筛选条件中使用它。
- en: 'References: [#1531](https://www.sqlalchemy.org/trac/ticket/1531)'
  id: totrans-4082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1531](https://www.sqlalchemy.org/trac/ticket/1531)
- en: '**[orm]**'
  id: totrans-4083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() with uselist=False will emit a warning when an eager or lazy load
    locates more than one valid value for the row. This may be due to primaryjoin/secondaryjoin
    conditions which aren’t appropriate for an eager LEFT OUTER JOIN or for other
    conditions.
  id: totrans-4084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当relation()的uselist=False在急切或延迟加载中找到多个有效值时，将发出警告。这可能是由于不适合急切LEFT OUTER JOIN或其他条件的primaryjoin/secondaryjoin条件造成的。
- en: 'References: [#1643](https://www.sqlalchemy.org/trac/ticket/1643)'
  id: totrans-4085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1643](https://www.sqlalchemy.org/trac/ticket/1643)
- en: '**[orm]**'
  id: totrans-4086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: an explicit check occurs when a synonym() is used with map_column=True, when
    a ColumnProperty (deferred or otherwise) exists separately in the properties dictionary
    sent to mapper with the same keyname. Instead of silently replacing the existing
    property (and possible options on that property), an error is raised.
  id: totrans-4087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当synonym()与map_column=True一起使用时，会显式检查是否在与相同键名一起发送到mapper的属性字典中存在单独的ColumnProperty（延迟或其他）。而不是默默地替换现有属性（以及可能在该属性上的选项），会引发错误。
- en: 'References: [#1633](https://www.sqlalchemy.org/trac/ticket/1633)'
  id: totrans-4088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1633](https://www.sqlalchemy.org/trac/ticket/1633)
- en: '**[orm]**'
  id: totrans-4089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a “dynamic” loader sets up its query criterion at construction time so that
    the actual query is returned from non-cloning accessors like “statement”.
  id: totrans-4090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “dynamic”加载器在构造时设置其查询条件，以便从非克隆访问器（如“statement”）返回实际查询。
- en: '**[orm]**'
  id: totrans-4091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “named tuple” objects returned when iterating a Query() are now pickleable.
  id: totrans-4092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 迭代Query()时返回的“named tuple”对象现在是可pickle的。
- en: '**[orm]**'
  id: totrans-4093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapping to a select() construct now requires that you make an alias() out of
    it distinctly. This to eliminate confusion over such issues as
  id: totrans-4094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射到select()构造现在要求您将其明确地制作为别名()。这是为了消除对诸如
- en: 'References: [#1542](https://www.sqlalchemy.org/trac/ticket/1542)'
  id: totrans-4095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1542](https://www.sqlalchemy.org/trac/ticket/1542)
- en: '**[orm]**'
  id: totrans-4096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join() has been reworked to provide more consistent behavior and more
    flexibility (includes)
  id: totrans-4097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()已经重新设计，以提供更一致的行为和更多的灵活性（包括）
- en: 'References: [#1537](https://www.sqlalchemy.org/trac/ticket/1537)'
  id: totrans-4098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1537](https://www.sqlalchemy.org/trac/ticket/1537)
- en: '**[orm]**'
  id: totrans-4099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.select_from() accepts multiple clauses to produce multiple comma separated
    entries within the FROM clause. Useful when selecting from multiple-homed join()
    clauses.
  id: totrans-4100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.select_from() 接受多个子句以在FROM子句中产生多个逗号分隔的条目。在从多个join()子句选择时非常有用。
- en: '**[orm]**'
  id: totrans-4101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.select_from() also accepts mapped classes, aliased() constructs, and mappers
    as arguments. In particular this helps when querying from multiple joined-table
    classes to ensure the full join gets rendered.
  id: totrans-4102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.select_from() 也接受映射类、别名构造和映射器作为参数。特别是在从多个连接表类查询时，确保完整连接被渲染时非常有用。
- en: '**[orm]**'
  id: totrans-4103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() can be used with a mapping to an outer join where one or more of
    the primary key values are None.
  id: totrans-4104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.get() 可以与映射到外连接的情况一起使用，其中一个或多个主键值为None。
- en: 'References: [#1135](https://www.sqlalchemy.org/trac/ticket/1135)'
  id: totrans-4105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1135](https://www.sqlalchemy.org/trac/ticket/1135)
- en: '**[orm]**'
  id: totrans-4106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.from_self(), query.union(), others which do a “SELECT * from (SELECT…)”
    type of nesting will do a better job translating column expressions within the
    subquery to the columns clause of the outer query. This is potentially backwards
    incompatible with 0.5, in that this may break queries with literal expressions
    that do not have labels applied (i.e. literal(‘foo’), etc.)
  id: totrans-4107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.from_self(), query.union(), 其他执行“SELECT * from (SELECT…)”类型嵌套的操作将更好地将子查询中的列表达式转换为外部查询的列子句。这可能与0.5版本不兼容，因为这可能会破坏没有应用标签的文字表达式的查询（即literal(‘foo’),
    等等）。
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568)'
  id: totrans-4108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1568](https://www.sqlalchemy.org/trac/ticket/1568)
- en: '**[orm]**'
  id: totrans-4109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation primaryjoin and secondaryjoin now check that they are column-expressions,
    not just clause elements. this prohibits things like FROM expressions being placed
    there directly.
  id: totrans-4110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主连接和次连接现在检查它们是否是列表达式，而不仅仅是子句元素。这禁止了直接在那里放置FROM表达式等情况。
- en: 'References: [#1622](https://www.sqlalchemy.org/trac/ticket/1622)'
  id: totrans-4111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1622](https://www.sqlalchemy.org/trac/ticket/1622)
- en: '**[orm]**'
  id: totrans-4112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: expression.null() is fully understood the same way None is when comparing an
    object/collection-referencing attribute within query.filter(), filter_by(), etc.
  id: totrans-4113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: expression.null() 在使用query.filter()、filter_by()等方法时与None的比较方式完全相同。
- en: 'References: [#1415](https://www.sqlalchemy.org/trac/ticket/1415)'
  id: totrans-4114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1415](https://www.sqlalchemy.org/trac/ticket/1415)
- en: '**[orm]**'
  id: totrans-4115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “make_transient()” helper function which transforms a persistent/ detached
    instance into a transient one (i.e. deletes the instance_key and removes from
    any session.)
  id: totrans-4116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“make_transient()”辅助函数，将持久化/分离实例转换为瞬态实例（即删除实例键并从任何会话中移除）。
- en: 'References: [#1052](https://www.sqlalchemy.org/trac/ticket/1052)'
  id: totrans-4117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1052](https://www.sqlalchemy.org/trac/ticket/1052)
- en: '**[orm]**'
  id: totrans-4118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the allow_null_pks flag on mapper() is deprecated, and the feature is turned
    “on” by default. This means that a row which has a non-null value for any of its
    primary key columns will be considered an identity. The need for this scenario
    typically only occurs when mapping to an outer join.
  id: totrans-4119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()上的allow_null_pks标志已被弃用，并且该功能默认为“on”。这意味着对于任何主键列具有非空值的行将被视为标识。通常只有在映射到外连接时才会出现这种情况。
- en: 'References: [#1339](https://www.sqlalchemy.org/trac/ticket/1339)'
  id: totrans-4120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1339](https://www.sqlalchemy.org/trac/ticket/1339)
- en: '**[orm]**'
  id: totrans-4121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the mechanics of “backref” have been fully merged into the finer grained “back_populates”
    system, and take place entirely within the _generate_backref() method of RelationProperty.
    This makes the initialization procedure of RelationProperty simpler and allows
    easier propagation of settings (such as from subclasses of RelationProperty) into
    the reverse reference. The internal BackRef() is gone and backref() returns a
    plain tuple that is understood by RelationProperty.
  id: totrans-4122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “backref”的机制已完全合并到更精细的“back_populates”系统中，并完全在RelationProperty的_generate_backref()方法中进行。这使得RelationProperty的初始化过程更简单，允许更容易地将设置（例如从RelationProperty的子类）传播到反向引用中。内部的BackRef()已经消失，backref()返回一个普通元组，RelationProperty能够理解。
- en: '**[orm]**'
  id: totrans-4123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The version_id_col feature on mapper() will raise a warning when used with dialects
    that don’t support “rowcount” adequately.
  id: totrans-4124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()上的version_id_col功能在使用不充分支持“rowcount”的方言时将引发警告。
- en: 'References: [#1569](https://www.sqlalchemy.org/trac/ticket/1569)'
  id: totrans-4125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1569](https://www.sqlalchemy.org/trac/ticket/1569)
- en: '**[orm]**'
  id: totrans-4126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “execution_options()” to Query, to so options can be passed to the resulting
    statement. Currently only Select-statements have these options, and the only option
    used is “stream_results”, and the only dialect which knows “stream_results” is
    psycopg2.
  id: totrans-4127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了“execution_options()”，以便将选项传递给生成的语句。目前只有Select语句有这些选项，而且唯一使用的选项是“stream_results”，唯一知道“stream_results”的方言是psycopg2。
- en: '**[orm]**'
  id: totrans-4128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.yield_per() will set the “stream_results” statement option automatically.
  id: totrans-4129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.yield_per()将自动设置“stream_results”语句选项。
- en: '**[orm]**'
  id: totrans-4130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Deprecated or removed:'
  id: totrans-4131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用或移除：
- en: ’allow_null_pks’ flag on mapper() is deprecated. It does nothing now and the
    setting is “on” in all cases.
  id: totrans-4132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper()`上的‘allow_null_pks’标志已被弃用。现在它不起作用，设置在所有情况下都是“on”。'
- en: ’transactional’ flag on sessionmaker() and others is removed. Use ‘autocommit=True’
    to indicate ‘transactional=False’.
  id: totrans-4133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: sessionmaker()和其他地方的“transactional”标志已移除。使用‘autocommit=True’表示‘transactional=False’。
- en: ’polymorphic_fetch’ argument on mapper() is removed. Loading can be controlled
    using the ‘with_polymorphic’ option.
  id: totrans-4134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper()`中的‘polymorphic_fetch’参数已移除。加载可以通过‘with_polymorphic’选项进行控制。'
- en: ’select_table’ argument on mapper() is removed. Use ‘with_polymorphic=(“*”,
    <some selectable>)’ for this functionality.
  id: totrans-4135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper()`中的‘select_table’参数已移除。使用‘with_polymorphic=(“*”, <some selectable>)’来实现此功能。'
- en: ’proxy’ argument on synonym() is removed. This flag did nothing throughout 0.5,
    as the “proxy generation” behavior is now automatic.
  id: totrans-4136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`synonym()`中的‘proxy’参数已移除。此标志在0.5版本中没有任何作用，因为“proxy generation”行为现在是自动的。'
- en: Passing a single list of elements to eagerload(), eagerload_all(), contains_eager(),
    lazyload(), defer(), and undefer() instead of multiple positional *args is deprecated.
  id: totrans-4137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`eagerload()`、`eagerload_all()`、`contains_eager()`、`lazyload()`、`defer()`和`undefer()`传递单个元素列表而不是多个位置参数已被弃用。
- en: Passing a single list of elements to query.order_by(), query.group_by(), query.join(),
    or query.outerjoin() instead of multiple positional *args is deprecated.
  id: totrans-4138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`query.order_by()`、`query.group_by()`、`query.join()`或`query.outerjoin()`传递单个元素列表而不是多个位置参数已被弃用。
- en: query.iterate_instances() is removed. Use query.instances().
  id: totrans-4139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ��除了query.iterate_instances()。使用query.instances()。
- en: Query.query_from_parent() is removed. Use the sqlalchemy.orm.with_parent() function
    to produce a “parent” clause, or alternatively query.with_parent().
  id: totrans-4140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了Query.query_from_parent()。使用sqlalchemy.orm.with_parent()函数生成“parent”子句，或者使用query.with_parent()。
- en: query._from_self() is removed, use query.from_self() instead.
  id: totrans-4141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了query._from_self()，请改用query.from_self()。
- en: the “comparator” argument to composite() is removed. Use “comparator_factory”.
  id: totrans-4142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`composite()`中的“comparator”参数已移除。使用“comparator_factory”。'
- en: RelationProperty._get_join() is removed.
  id: totrans-4143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了RelationProperty._get_join()。
- en: the ‘echo_uow’ flag on Session is removed. Use logging on the “sqlalchemy.orm.unitofwork”
    name.
  id: totrans-4144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Session上的‘echo_uow’标志已移除。在“sqlalchemy.orm.unitofwork”名称上记录日志。
- en: session.clear() is removed. use session.expunge_all().
  id: totrans-4145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了session.clear()。使用session.expunge_all()。
- en: session.save(), session.update(), session.save_or_update() are removed. Use
    session.add() and session.add_all().
  id: totrans-4146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了session.save()、session.update()、session.save_or_update()。使用session.add()和session.add_all()。
- en: the “objects” flag on session.flush() remains deprecated.
  id: totrans-4147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.flush()上的“objects”标志仍然被弃用。
- en: the “dont_load=True” flag on session.merge() is deprecated in favor of “load=False”.
  id: totrans-4148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.merge()上的“dont_load=True”标志已被弃用，改用“load=False”。
- en: ScopedSession.mapper remains deprecated. See the usage recipe at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
  id: totrans-4149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ScopedSession.mapper仍然被弃用。请参阅[https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)中的用法示例。
- en: passing an InstanceState (internal SQLAlchemy state object) to attributes.init_collection()
    or attributes.get_history() is deprecated. These functions are public API and
    normally expect a regular mapped object instance.
  id: totrans-4150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将InstanceState（内部SQLAlchemy状态对象）传递给attributes.init_collection()或attributes.get_history()已被弃用。这些函数是公共API，通常期望一个常规映射对象实例。
- en: the ‘engine’ parameter to declarative_base() is removed. Use the ‘bind’ keyword
    argument.
  id: totrans-4151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: declarative_base()中的‘engine’参数已移除。使用‘bind’关键字参数。
- en: sql
  id: totrans-4152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-4153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “autocommit” flag on select() and text() as well as select().autocommit()
    are deprecated - now call .execution_options(autocommit=True) on either of those
    constructs, also available directly on Connection and orm.Query.
  id: totrans-4154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()和text()上的“autocommit”标志以及select().autocommit()已被弃用 - 现在在这些构造上调用.execution_options(autocommit=True)，也可以直接在Connection和orm.Query上使用。
- en: '**[sql]**'
  id: totrans-4155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the autoincrement flag on column now indicates the column which should be linked
    to cursor.lastrowid, if that method is used. See the API docs for details.
  id: totrans-4156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，列上的autoincrement标志表示应链接到cursor.lastrowid的列，如果使用该方法。有关详细信息，请参阅API文档。
- en: '**[sql]**'
  id: totrans-4157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: an executemany() now requires that all bound parameter sets require that all
    keys are present which are present in the first bound parameter set. The structure
    and behavior of an insert/update statement is very much determined by the first
    parameter set, including which defaults are going to fire off, and a minimum of
    guesswork is performed with all the rest so that performance is not impacted.
    For this reason defaults would otherwise silently “fail” for missing parameters,
    so this is now guarded against.
  id: totrans-4158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，executemany()要求所有绑定参数集中都要包含第一个绑定参数集中存在的所有键。插入/更新语句的结构和行为在很大程度上由第一个参数集确定，包括哪些默认值将触发，并且对其余所有参数不进行最少的猜测，以确保不影响性能。因此，否则默认值会对缺少的参数“失败”，因此现在已经防范。
- en: 'References: [#1566](https://www.sqlalchemy.org/trac/ticket/1566)'
  id: totrans-4159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1566](https://www.sqlalchemy.org/trac/ticket/1566)
- en: '**[sql]**'
  id: totrans-4160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: returning() support is native to insert(), update(), delete(). Implementations
    of varying levels of functionality exist for PostgreSQL, Firebird, MSSQL and Oracle.
    returning() can be called explicitly with column expressions which are then returned
    in the resultset, usually via fetchone() or first().
  id: totrans-4161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: returning()支持原生于insert()、update()、delete()。对于PostgreSQL、Firebird、MSSQL和Oracle，存在不同功能级别的实现。returning()可以显式调用列表达式，然后通过fetchone()或first()通常返回结果集。
- en: insert() constructs will also use RETURNING implicitly to get newly generated
    primary key values, if the database version in use supports it (a version number
    check is performed). This occurs if no end-user returning() was specified.
  id: totrans-4162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: insert()构造还将隐式使用RETURNING来获取新生成的主键值，如果正在使用的数据库版本支持它（执行版本号检查）。如果没有指定最终用户returning()，则会发生这种情况。
- en: '**[sql]**'
  id: totrans-4163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: union(), intersect(), except() and other “compound” types of statements have
    more consistent behavior w.r.t. parenthesizing. Each compound element embedded
    within another will now be grouped with parenthesis - previously, the first compound
    element in the list would not be grouped, as SQLite doesn’t like a statement to
    start with parenthesis. However, PostgreSQL in particular has precedence rules
    regarding INTERSECT, and it is more consistent for parenthesis to be applied equally
    to all sub-elements. So now, the workaround for SQLite is also what the workaround
    for PG was previously - when nesting compound elements, the first one usually
    needs “.alias().select()” called on it to wrap it inside of a subquery.
  id: totrans-4164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: union()、intersect()、except()和其他“复合”类型的语句在括号方面具有更一致的行为。现在，嵌入在另一个中的每个复合元素将使用括号分组
    - 以前，列表中的第一个复合元素不会被分组，因为SQLite不喜欢以括号开头的语句。然而，特别是PostgreSQL对于INTERSECT有优先规则，对于所有子元素应用括号更一致。因此，现在，SQLite的解决方法也是以前PG的解决方法
    - 在嵌套复合元素时，通常需要对第一个元素调用“.alias().select()”以将其包装在子查询中。
- en: 'References: [#1665](https://www.sqlalchemy.org/trac/ticket/1665)'
  id: totrans-4165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1665](https://www.sqlalchemy.org/trac/ticket/1665)
- en: '**[sql]**'
  id: totrans-4166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: insert() and update() constructs can now embed bindparam() objects using names
    that match the keys of columns. These bind parameters will circumvent the usual
    route to those keys showing up in the VALUES or SET clause of the generated SQL.
  id: totrans-4167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: insert()和update()构造现在可以使用与列键匹配的名称嵌入bindparam()对象。这些绑定参数将绕过通常的路径，使这些键出现在生成的SQL的VALUES或SET子句中。
- en: 'References: [#1579](https://www.sqlalchemy.org/trac/ticket/1579)'
  id: totrans-4168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1579](https://www.sqlalchemy.org/trac/ticket/1579)
- en: '**[sql]**'
  id: totrans-4169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Binary type now returns data as a Python string (or a “bytes” type in Python
    3), instead of the built- in “buffer” type. This allows symmetric round trips
    of binary data.
  id: totrans-4170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Binary类型现在将数据作为Python字符串（或Python 3中的“bytes”类型）返回，而不是内置的“buffer”类型。这允许二进制数据进行对称往返。
- en: 'References: [#1524](https://www.sqlalchemy.org/trac/ticket/1524)'
  id: totrans-4171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1524](https://www.sqlalchemy.org/trac/ticket/1524)
- en: '**[sql]**'
  id: totrans-4172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a tuple_() construct, allows sets of expressions to be compared to another
    set, typically with IN against composite primary keys or similar. Also accepts
    an IN with multiple columns. The “scalar select can have only one column” error
    message is removed - will rely upon the database to report problems with col mismatch.
  id: totrans-4173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个tuple_()构造，允许将一组表达式与另一组进行比较，通常使用IN针对复合主键或类似的情况。还接受具有多个列的IN。删除了“标量选择只能有一列”错误消息
    - 将依赖数据库报告列不匹配的问题。
- en: '**[sql]**'
  id: totrans-4174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: User-defined “default” and “onupdate” callables which accept a context should
    now call upon “context.current_parameters” to get at the dictionary of bind parameters
    currently being processed. This dict is available in the same way regardless of
    single-execute or executemany-style statement execution.
  id: totrans-4175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户定义的“default”和“onupdate”可调用函数现在应该调用“context.current_parameters”来获取当前正在处理的绑定参数字典。无论是单次执行还是executemany-style语句执行，这个字典都以相同的方式可用。
- en: '**[sql]**'
  id: totrans-4176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: multi-part schema names, i.e. with dots such as “dbo.master”, are now rendered
    in select() labels with underscores for dots, i.e. “dbo_master_table_column”.
    This is a “friendly” label that behaves better in result sets.
  id: totrans-4177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多部分模式名称，例如带有点号的“dbo.master”，现在在select()标签中用下划线代替点号，即“dbo_master_table_column”。这是一个在结果集中表现更好的“友好”标签。
- en: 'References: [#1428](https://www.sqlalchemy.org/trac/ticket/1428)'
  id: totrans-4178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1428](https://www.sqlalchemy.org/trac/ticket/1428)
- en: '**[sql]**'
  id: totrans-4179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: removed needless “counter” behavior with select() labelnames that match a column
    name in the table, i.e. generates “tablename_id” for “id”, instead of “tablename_id_1”
    in an attempt to avoid naming conflicts, when the table has a column actually
    named “tablename_id” - this is because the labeling logic is always applied to
    all columns so a naming conflict will never occur.
  id: totrans-4180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了不必要的“counter”行为，即对于与表中列名匹配的select()标签名生成“tablename_id”而不是“tablename_id_1”，以避免命名冲突，当表中实际上有一个名为“tablename_id”的列时
    - 这是因为标签逻辑总是应用于所有列，因此永远不会发生命名冲突。
- en: '**[sql]**'
  id: totrans-4181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: calling expr.in_([]), i.e. with an empty list, emits a warning before issuing
    the usual “expr != expr” clause. The “expr != expr” can be very expensive, and
    it’s preferred that the user not issue in_() if the list is empty, instead simply
    not querying, or modifying the criterion as appropriate for more complex situations.
  id: totrans-4182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用expr.in_([])，即使用空列表，会在发出通常的“expr != expr”子句之前发出警告。 “expr != expr”可能非常昂贵，最好是如果列表为空，则用户不发出in_()，而是简单地不查询，或根据更复杂的情况修改条件。
- en: 'References: [#1628](https://www.sqlalchemy.org/trac/ticket/1628)'
  id: totrans-4183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1628](https://www.sqlalchemy.org/trac/ticket/1628)
- en: '**[sql]**'
  id: totrans-4184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added “execution_options()” to select()/text(), which set the default options
    for the Connection. See the note in “engines”.
  id: totrans-4185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为select()/text()添加了“execution_options()”，用于设置Connection的默认选项。请参见“engines”中的说明。
- en: '**[sql]**'
  id: totrans-4186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: 'Deprecated or removed:'
  id: totrans-4187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用或移除：
- en: ”scalar” flag on select() is removed, use select.as_scalar().
  id: totrans-4188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: select()上的“scalar”标志已移除，使用select.as_scalar()。
- en: ”shortname” attribute on bindparam() is removed.
  id: totrans-4189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在bindparam()上的“shortname”属性已移除。
- en: postgres_returning, firebird_returning flags on insert(), update(), delete()
    are deprecated, use the new returning() method.
  id: totrans-4190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: insert()，update()，delete()上的postgres_returning，firebird_returning标志已弃用，使用新的returning()方法。
- en: fold_equivalents flag on join is deprecated (will remain until is implemented)
  id: totrans-4191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join上的fold_equivalents标志已弃用（将保留直到实现）
- en: 'References: [#1131](https://www.sqlalchemy.org/trac/ticket/1131)'
  id: totrans-4192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1131](https://www.sqlalchemy.org/trac/ticket/1131)
- en: schema
  id: totrans-4193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-4194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: the __contains__() method of MetaData now accepts strings or Table objects as
    arguments. If given a Table, the argument is converted to table.key first, i.e.
    “[schemaname.]<tablename>”
  id: totrans-4195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData的__contains__()方法现在接受字符串或Table对象作为参数。如果给定一个Table，则首先将参数转换为table.key，即“[schemaname.]<tablename>”
- en: 'References: [#1541](https://www.sqlalchemy.org/trac/ticket/1541)'
  id: totrans-4196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1541](https://www.sqlalchemy.org/trac/ticket/1541)
- en: '**[schema]**'
  id: totrans-4197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: deprecated MetaData.connect() and ThreadLocalMetaData.connect() have been removed
    - send the “bind” attribute to bind a metadata.
  id: totrans-4198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了不推荐使用的MetaData.connect()和ThreadLocalMetaData.connect() - 将“bind”属性发送到绑定元数据。
- en: '**[schema]**'
  id: totrans-4199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: deprecated metadata.table_iterator() method removed (use sorted_tables)
  id: totrans-4200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了不推荐使用的metadata.table_iterator()方法（使用sorted_tables）
- en: '**[schema]**'
  id: totrans-4201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: deprecated PassiveDefault - use DefaultClause.
  id: totrans-4202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不推荐使用PassiveDefault - 使用DefaultClause。
- en: '**[schema]**'
  id: totrans-4203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: the “metadata” argument is removed from DefaultGenerator and subclasses, but
    remains locally present on Sequence, which is a standalone construct in DDL.
  id: totrans-4204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DefaultGenerator及其子类中移除了“metadata”参数，但在Sequence上仍然存在，Sequence是DDL中的一个独立构造。
- en: '**[schema]**'
  id: totrans-4205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: 'Removed public mutability from Index and Constraint objects:'
  id: totrans-4206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从Index和Constraint对象中移除了公共可变性：
- en: ForeignKeyConstraint.append_element()
  id: totrans-4207
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ForeignKeyConstraint.append_element()
- en: ''
  id: totrans-4208
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4209
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Index.append_column()
  id: totrans-4210
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Index.append_column()
- en: ''
  id: totrans-4211
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4212
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: UniqueConstraint.append_column()
  id: totrans-4213
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: UniqueConstraint.append_column()
- en: ''
  id: totrans-4214
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4215
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PrimaryKeyConstraint.add()
  id: totrans-4216
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PrimaryKeyConstraint.add()
- en: ''
  id: totrans-4217
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4218
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PrimaryKeyConstraint.remove()
  id: totrans-4219
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PrimaryKeyConstraint.remove()
- en: These should be constructed declaratively (i.e. in one construction).
  id: totrans-4220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些应该以声明性的方式构建（即在一个构造中）。
- en: '**[schema]**'
  id: totrans-4221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: The “start” and “increment” attributes on Sequence now generate “START WITH”
    and “INCREMENT BY” by default, on Oracle and PostgreSQL. Firebird doesn’t support
    these keywords right now.
  id: totrans-4222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sequence 上的 “start” 和 “increment” 属性现在默认生成 “START WITH” 和 “INCREMENT BY”，在 Oracle
    和 PostgreSQL 上。Firebird 目前不支持这些关键字。
- en: 'References: [#1545](https://www.sqlalchemy.org/trac/ticket/1545)'
  id: totrans-4223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参���：[#1545](https://www.sqlalchemy.org/trac/ticket/1545)
- en: '**[schema]**'
  id: totrans-4224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: UniqueConstraint, Index, PrimaryKeyConstraint all accept lists of column names
    or column objects as arguments.
  id: totrans-4225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: UniqueConstraint、Index、PrimaryKeyConstraint 都接受列名或列对象的列表作为参数。
- en: '**[schema]**'
  id: totrans-4226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: 'Other removed things:'
  id: totrans-4227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他已移除的内容：
- en: Table.key (no idea what this was for)
  id: totrans-4228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Table.key（不知道这是用来做什么的）
- en: Table.primary_key is not assignable - use table.append_constraint(PrimaryKeyConstraint(…))
  id: totrans-4229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Table.primary_key 不可分配 - 使用 table.append_constraint(PrimaryKeyConstraint(…))
- en: Column.bind (get via column.table.bind)
  id: totrans-4230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.bind（通过 column.table.bind 获取）
- en: Column.metadata (get via column.table.metadata)
  id: totrans-4231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.metadata（通过 column.table.metadata 获取）
- en: Column.sequence (use column.default)
  id: totrans-4232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.sequence（使用 column.default）
- en: ForeignKey(constraint=some_parent) (is now private _constraint)
  id: totrans-4233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ForeignKey(constraint=some_parent)（现在是私有 _constraint）
- en: '**[schema]**'
  id: totrans-4234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The use_alter flag on ForeignKey is now a shortcut option for operations that
    can be hand-constructed using the DDL() event system. A side effect of this refactor
    is that ForeignKeyConstraint objects with use_alter=True will *not* be emitted
    on SQLite, which does not support ALTER for foreign keys.
  id: totrans-4235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey 上的 use_alter 标志现在是一个快捷选项，用于可以使用 DDL() 事件系统手动构建的操作。这次重构的副作用是，具有 use_alter=True
    的 ForeignKeyConstraint 对象将 *不会* 在 SQLite 上发出，因为 SQLite 不支持外键的 ALTER。
- en: '**[schema]**'
  id: totrans-4236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: ForeignKey and ForeignKeyConstraint objects now correctly copy() all their public
    keyword arguments.
  id: totrans-4237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey 和 ForeignKeyConstraint 对象现在正确地复制所有它们的公共关键字参数。
- en: 'References: [#1605](https://www.sqlalchemy.org/trac/ticket/1605)'
  id: totrans-4238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1605](https://www.sqlalchemy.org/trac/ticket/1605)
- en: postgresql
  id: totrans-4239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-4240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: 'New dialects: pg8000, zxjdbc, and pypostgresql on py3k.'
  id: totrans-4241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的方言：pg8000、zxjdbc 和 pypostgresql 在 py3k 上。
- en: '**[postgresql]**'
  id: totrans-4242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: 'The “postgres” dialect is now named “postgresql” ! Connection strings look
    like:'
  id: totrans-4243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “postgres” 方言现在更名为 “postgresql”！连接字符串如下：
- en: postgresql://scott:tiger@localhost/test postgresql+pg8000://scott:tiger@localhost/test
  id: totrans-4244
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: postgresql://scott:tiger@localhost/test postgresql+pg8000://scott:tiger@localhost/test
- en: ''
  id: totrans-4245
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The “postgres” name remains for backwards compatibility in the following ways:'
  id: totrans-4246
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “postgres” 名称仍然保留以确保向后兼容性，具体如下：
- en: ''
  id: totrans-4247
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is a “postgres.py” dummy dialect which allows old URLs to work, i.e. postgres://scott:tiger@localhost/test
  id: totrans-4248
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一个“postgres.py”虚拟方言，允许旧的 URL 正常工作，即 postgres://scott:tiger@localhost/test
- en: ''
  id: totrans-4249
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4250
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The “postgres” name can be imported from the old “databases” module, i.e. “from
    sqlalchemy.databases import postgres” as well as “dialects”, “from sqlalchemy.dialects.postgres
    import base as pg”, will send a deprecation warning.
  id: totrans-4251
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: “postgres” 名称可以从旧的 “databases” 模块中导入，即 “from sqlalchemy.databases import postgres”，以及
    “dialects”，“from sqlalchemy.dialects.postgres import base as pg”，将发出弃用警告。
- en: ''
  id: totrans-4252
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4253
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Special expression arguments are now named “postgresql_returning” and “postgresql_where”,
    but the older “postgres_returning” and “postgres_where” names still work with
    a deprecation warning.
  id: totrans-4254
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊表达式参数现在命名为 “postgresql_returning” 和 “postgresql_where”，但旧的 “postgres_returning”
    和 “postgres_where” 名称仍然可以使用，会发出弃用警告。
- en: '**[postgresql]**'
  id: totrans-4255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: ”postgresql_where” now accepts SQL expressions which can also include literals,
    which will be quoted as needed.
  id: totrans-4256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”postgresql_where” 现在接受 SQL 表达式，这些表达式也可以包含文字，需要时会加上引号。
- en: '**[postgresql]**'
  id: totrans-4257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 dialect now uses psycopg2’s “unicode extension” on all new connections,
    which allows all String/Text/etc. types to skip the need to post-process bytestrings
    into unicode (an expensive step due to its volume). Other dialects which return
    unicode natively (pg8000, zxjdbc) also skip unicode post-processing.
  id: totrans-4258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 方言现在在所有新连接上使用 psycopg2 的 “unicode extension”，这允许所有 String/Text 等类型跳过将字节字符串后处理为
    Unicode 的步骤（由于其数量大，这是一个昂贵的步骤）。其他本地返回 Unicode 的方言（pg8000、zxjdbc）也跳过 Unicode 后处理。
- en: '**[postgresql]**'
  id: totrans-4259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added new ENUM type, which exists as a schema-level construct and extends the
    generic Enum type. Automatically associates itself with tables and their parent
    metadata to issue the appropriate CREATE TYPE/DROP TYPE commands as needed, supports
    unicode labels, supports reflection.
  id: totrans-4260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 ENUM 类型，作为一个模式级别的构造，并扩展了通用的 Enum 类型。自动与表及其父元数据关联，根据需要发出适当的 CREATE TYPE/DROP
    TYPE 命令，支持 Unicode 标签，支持反射。
- en: 'References: [#1511](https://www.sqlalchemy.org/trac/ticket/1511)'
  id: totrans-4261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1511](https://www.sqlalchemy.org/trac/ticket/1511)
- en: '**[postgresql]**'
  id: totrans-4262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: INTERVAL supports an optional “precision” argument corresponding to the argument
    that PG accepts.
  id: totrans-4263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: INTERVAL 支持一个可选的“precision”参数，对应 PG 接受的参数。
- en: '**[postgresql]**'
  id: totrans-4264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-4265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的 dialect.initialize() 功能来设置版本相关的行为。
- en: '**[postgresql]**'
  id: totrans-4266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: somewhat better support for % signs in table/column names; psycopg2 can’t handle
    a bind parameter name of %(foobar)s however and SQLA doesn’t want to add overhead
    just to treat that one non-existent use case.
  id: totrans-4267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于表/列名称中的 % 符号提供了更好的支持；然而 psycopg2 无法处理绑定参数名为 %(foobar)s 的情况，SQLA 不想增加开销来处理这种不存在的用例。
- en: 'References: [#1279](https://www.sqlalchemy.org/trac/ticket/1279)'
  id: totrans-4268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1279](https://www.sqlalchemy.org/trac/ticket/1279)
- en: '**[postgresql]**'
  id: totrans-4269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Inserting NULL into a primary key + foreign key column will allow the “not null
    constraint” error to raise, not an attempt to execute a nonexistent “col_id_seq”
    sequence.
  id: totrans-4270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向主键 + 外键列插入 NULL 将允许“非空约束”错误引发，而不是尝试执行不存在的“col_id_seq”序列。
- en: 'References: [#1516](https://www.sqlalchemy.org/trac/ticket/1516)'
  id: totrans-4271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1516](https://www.sqlalchemy.org/trac/ticket/1516)
- en: '**[postgresql]**'
  id: totrans-4272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: autoincrement SELECT statements, i.e. those which select from a procedure that
    modifies rows, now work with server-side cursor mode (the named cursor isn’t used
    for such statements.)
  id: totrans-4273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自增 SELECT 语句，即从修改行的过程中选择的语句，现在可以与服务器端游标模式一起工作（命名游标不用于这种语句。）
- en: '**[postgresql]**'
  id: totrans-4274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: postgresql dialect can properly detect pg “devel” version strings, i.e. “8.5devel”
  id: totrans-4275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql 方言现在可以正确识别 pg 的“devel”版本字符串，例如“8.5devel”
- en: 'References: [#1636](https://www.sqlalchemy.org/trac/ticket/1636)'
  id: totrans-4276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1636](https://www.sqlalchemy.org/trac/ticket/1636)
- en: '**[postgresql]**'
  id: totrans-4277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 now respects the statement option “stream_results”. This option
    overrides the connection setting “server_side_cursors”. If true, server side cursors
    will be used for the statement. If false, they will not be used, even if “server_side_cursors”
    is true on the connection.
  id: totrans-4278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 现在尊重语句选项“stream_results”。此选项会覆盖连接设置“server_side_cursors”。如果为 true，则语句将使用服务器端游标。如果为
    false，则不会使用，即使连接上的“server_side_cursors”为 true。
- en: 'References: [#1619](https://www.sqlalchemy.org/trac/ticket/1619)'
  id: totrans-4279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1619](https://www.sqlalchemy.org/trac/ticket/1619)
- en: mysql
  id: totrans-4280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-4281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: 'New dialects: oursql, a new native dialect, MySQL Connector/Python, a native
    Python port of MySQLdb, and of course zxjdbc on Jython.'
  id: totrans-4282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的方言：oursql，一个新的本地方言，MySQL Connector/Python，MySQLdb 的本地 Python 移植，当然还有 Jython
    上的 zxjdbc。
- en: '**[mysql]**'
  id: totrans-4283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: VARCHAR/NVARCHAR will not render without a length, raises an error before passing
    to MySQL. Doesn’t impact CAST since VARCHAR is not allowed in MySQL CAST anyway,
    the dialect renders CHAR/NCHAR in those cases.
  id: totrans-4284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: VARCHAR/NVARCHAR 如果没有长度将无法渲染，在传递给 MySQL 之前会引发错误。不影响 CAST，因为在 MySQL CAST 中不允许
    VARCHAR，在这种情况下方言会渲染 CHAR/NCHAR。
- en: '**[mysql]**'
  id: totrans-4285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: all the _detect_XXX() functions now run once underneath dialect.initialize()
  id: totrans-4286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有 _detect_XXX() 函数现在在 dialect.initialize() 下运行一次
- en: '**[mysql]**'
  id: totrans-4287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: somewhat better support for % signs in table/column names; MySQLdb can’t handle
    % signs in SQL when executemany() is used, and SQLA doesn’t want to add overhead
    just to treat that one non-existent use case.
  id: totrans-4288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于表/列名称中的 % 符号提供了更好的支持；当使用 executemany() 时，MySQLdb 无法处理 SQL 中的 % 符号，SQLA 不想增加开销来处理这种不存在的用例。
- en: 'References: [#1279](https://www.sqlalchemy.org/trac/ticket/1279)'
  id: totrans-4289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1279](https://www.sqlalchemy.org/trac/ticket/1279)
- en: '**[mysql]**'
  id: totrans-4290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the BINARY and MSBinary types now generate “BINARY” in all cases. Omitting the
    “length” parameter will generate “BINARY” with no length. Use BLOB to generate
    an unlengthed binary column.
  id: totrans-4291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BINARY 和 MSBinary 类型现在在所有情况下生成“BINARY”。省略“length”参数将生成没有长度的“BINARY”。使用 BLOB
    来生成一个无长度的二进制列。
- en: '**[mysql]**'
  id: totrans-4292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the “quoting=’quoted’” argument to MSEnum/ENUM is deprecated. It’s best to rely
    upon the automatic quoting.
  id: totrans-4293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSEnum/ENUM 的“quoting='quoted'”参数已被弃用。最好依赖自动引用。
- en: '**[mysql]**'
  id: totrans-4294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ENUM now subclasses the new generic Enum type, and also handles unicode values
    implicitly, if the given labelnames are unicode objects.
  id: totrans-4295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ENUM 现在是新的通用 Enum 类型的子类，并且如果给定的标签名是 unicode 对象，还会隐式处理 unicode 值。
- en: '**[mysql]**'
  id: totrans-4296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a column of type TIMESTAMP now defaults to NULL if “nullable=False” is not passed
    to Column(), and no default is present. This is now consistent with all other
    types, and in the case of TIMESTAMP explicitly renders “NULL” due to MySQL’s “switching”
    of default nullability for TIMESTAMP columns.
  id: totrans-4297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未传递“nullable=False”给 Column()，并且没有默认值，则 TIMESTAMP 类型的列现在默认为 NULL。这与所有其他类型保持一致，并且在
    TIMESTAMP 的情况下明确渲染为“NULL”，因为 MySQL 对 TIMESTAMP 列的默认可空性进行了“切换”。
- en: 'References: [#1539](https://www.sqlalchemy.org/trac/ticket/1539)'
  id: totrans-4298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1539](https://www.sqlalchemy.org/trac/ticket/1539)
- en: sqlite
  id: totrans-4299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-4300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: DATE, TIME and DATETIME types can now take optional storage_format and regexp
    argument. storage_format can be used to store those types using a custom string
    format. regexp allows to use a custom regular expression to match string values
    from the database.
  id: totrans-4301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DATE、TIME 和 DATETIME 类型现在可以使用可选的 storage_format 和 regexp 参数。storage_format 可以用于使用自定义字符串格式存储这些类型。regexp
    允许使用自定义正则表达式来匹配数据库中的字符串值。
- en: '**[sqlite]**'
  id: totrans-4302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Time and DateTime types now use by a default a stricter regular expression to
    match strings from the database. Use the regexp argument if you are using data
    stored in a legacy format.
  id: totrans-4303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 时间和日期时间类型现在默认使用更严格的正则表达式来匹配数据库中的字符串。如果使用存储在传统格式中的数据，请使用 regexp 参数。
- en: '**[sqlite]**'
  id: totrans-4304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: __legacy_microseconds__ on SQLite Time and DateTime types is not supported anymore.
    You should use the storage_format argument instead.
  id: totrans-4305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 时间和日期时间类型上的 __legacy_microseconds__ 不再受支持。您应该使用 storage_format 参数代替。
- en: '**[sqlite]**'
  id: totrans-4306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: 'Date, Time and DateTime types are now stricter in what they accept as bind
    parameters: Date type only accepts date objects (and datetime ones, because they
    inherit from date), Time only accepts time objects, and DateTime only accepts
    date and datetime objects.'
  id: totrans-4307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 日期、时间和日期时间类型现在在接受绑定参数方面更加严格：日期类型只接受日期对象（以及日期时间对象，因为它们继承自日期），时间类型只接受时间对象，日期时间类型只接受日期和日期时间对象。
- en: '**[sqlite]**'
  id: totrans-4308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Table() supports a keyword argument “sqlite_autoincrement”, which applies the
    SQLite keyword “AUTOINCREMENT” to the single integer primary key column when generating
    DDL. Will prevent generation of a separate PRIMARY KEY constraint.
  id: totrans-4309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table() 支持一个关键字参数“sqlite_autoincrement”，在生成 DDL 时将 SQLite 关键字“AUTOINCREMENT”应用于单个整数主键列。将阻止生成单独的
    PRIMARY KEY 约束。
- en: 'References: [#1016](https://www.sqlalchemy.org/trac/ticket/1016)'
  id: totrans-4310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1016](https://www.sqlalchemy.org/trac/ticket/1016)
- en: mssql
  id: totrans-4311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-4312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: MSSQL + Pyodbc + FreeTDS now works for the most part, with possible exceptions
    regarding binary data as well as unicode schema identifiers.
  id: totrans-4313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL + Pyodbc + FreeTDS 现在在很大程度上可以正常工作，可能会有关于二进制数据以及 Unicode 模式标识符的异常情况。
- en: '**[mssql]**'
  id: totrans-4314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the “has_window_funcs” flag is removed. LIMIT/OFFSET usage will use ROW NUMBER
    as always, and if on an older version of SQL Server, the operation fails. The
    behavior is exactly the same except the error is raised by SQL server instead
    of the dialect, and no flag setting is required to enable it.
  id: totrans-4315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “has_window_funcs”标志已被移除。LIMIT/OFFSET 的使用将像以往一样使用 ROW NUMBER，如果在较旧版本的 SQL Server
    上，则操作将失败。行为完全相同，只是错误由 SQL Server 而不是方言引发，不需要设置标志来启用它。
- en: '**[mssql]**'
  id: totrans-4316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the “auto_identity_insert” flag is removed. This feature always takes effect
    when an INSERT statement overrides a column that is known to have a sequence on
    it. As with “has_window_funcs”, if the underlying driver doesn’t support this,
    then you can’t do this operation in any case, so there’s no point in having a
    flag.
  id: totrans-4317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “auto_identity_insert”标志已被移除。当 INSERT 语句覆盖已知具有序列的列时，此功能始终生效。与“has_window_funcs”一样，如果底层驱动程序不支持此功能，则无论如何都无法执行此操作，因此没有设置标志的必要。
- en: '**[mssql]**'
  id: totrans-4318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-4319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的 dialect.initialize() 功能来设置版本相关的行为。
- en: '**[mssql]**'
  id: totrans-4320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: removed references to sequence which is no longer used. implicit identities
    in mssql work the same as implicit sequences on any other dialects. Explicit sequences
    are enabled through the use of “default=Sequence()”. See the MSSQL dialect documentation
    for more information.
  id: totrans-4321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了不再使用的序列引用。在 MSSQL 中，隐式标识与其他方言上的隐式序列相同。通过使用“default=Sequence()”启用显式序列。有关更多信息，请参阅
    MSSQL 方言文档。
- en: oracle
  id: totrans-4322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-4323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: unit tests pass 100% with cx_oracle !
  id: totrans-4324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 cx_oracle 进行的单元测试全部通过！
- en: '**[oracle]**'
  id: totrans-4325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: support for cx_Oracle’s “native unicode” mode which does not require NLS_LANG
    to be set. Use the latest 5.0.2 or later of cx_oracle.
  id: totrans-4326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持 cx_Oracle 的“本地 Unicode”模式，不需要设置 NLS_LANG。请使用最新的 5.0.2 或更高版本的 cx_oracle。
- en: '**[oracle]**'
  id: totrans-4327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: an NCLOB type is added to the base types.
  id: totrans-4328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基本类型中添加了 NCLOB 类型。
- en: '**[oracle]**'
  id: totrans-4329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: use_ansi=False won’t leak into the FROM/WHERE clause of a statement that’s selecting
    from a subquery that also uses JOIN/OUTERJOIN.
  id: totrans-4330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: use_ansi=False 不会泄漏到从子查询中选择的语句的 FROM/WHERE 子句中，该子查询还使用了 JOIN/OUTERJOIN。
- en: '**[oracle]**'
  id: totrans-4331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added native INTERVAL type to the dialect. This supports only the DAY TO SECOND
    interval type so far due to lack of support in cx_oracle for YEAR TO MONTH.
  id: totrans-4332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向方言添加了本机 INTERVAL 类型。目前仅支持 DAY TO SECOND 的间隔类型，因为 cx_oracle 不支持 YEAR TO MONTH。
- en: 'References: [#1467](https://www.sqlalchemy.org/trac/ticket/1467)'
  id: totrans-4333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1467](https://www.sqlalchemy.org/trac/ticket/1467)
- en: '**[oracle]**'
  id: totrans-4334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: usage of the CHAR type results in cx_oracle’s FIXED_CHAR dbapi type being bound
    to statements.
  id: totrans-4335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 CHAR 类型会导致 cx_oracle 的 FIXED_CHAR dbapi 类型绑定到语句。
- en: '**[oracle]**'
  id: totrans-4336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: the Oracle dialect now features NUMBER which intends to act justlike Oracle’s
    NUMBER type. It is the primary numeric type returned by table reflection and attempts
    to return Decimal()/float/int based on the precision/scale parameters.
  id: totrans-4337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 方言现在具有 NUMBER，旨在像 Oracle 的 NUMBER 类型一样运行。它是表反射返回的主要数值类型，并尝试根据精度/比例参数返回
    Decimal()/float/int。
- en: 'References: [#885](https://www.sqlalchemy.org/trac/ticket/885)'
  id: totrans-4338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#885](https://www.sqlalchemy.org/trac/ticket/885)
- en: '**[oracle]**'
  id: totrans-4339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: func.char_length is a generic function for LENGTH
  id: totrans-4340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.char_length 是用于 LENGTH 的通用函数
- en: '**[oracle]**'
  id: totrans-4341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: ForeignKey() which includes onupdate=<value> will emit a warning, not emit ON
    UPDATE CASCADE which is unsupported by oracle
  id: totrans-4342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey() 包括 onupdate=<value> 将发出警告，不会发出不受 Oracle 支持的 ON UPDATE CASCADE
- en: '**[oracle]**'
  id: totrans-4343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: the keys() method of RowProxy() now returns the result column names *normalized*
    to be SQLAlchemy case insensitive names. This means they will be lower case for
    case insensitive names, whereas the DBAPI would normally return them as UPPERCASE
    names. This allows row keys() to be compatible with further SQLAlchemy operations.
  id: totrans-4344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy() 的 keys() 方法现在返回已*标准化*为 SQLAlchemy 大小写不敏感名称的结果列名。这意味着对于大小写不敏感名称，它们将是小写的，而
    DBAPI 通常会将它们返回为大写名称。这使得行键() 可与进一步的 SQLAlchemy 操作兼容。
- en: '**[oracle]**'
  id: totrans-4345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-4346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的 dialect.initialize() 功能来设置版本相关的行为。
- en: '**[oracle]**'
  id: totrans-4347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: using types.BigInteger with Oracle will generate NUMBER(19)
  id: totrans-4348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 中使用 types.BigInteger 将生成 NUMBER(19)
- en: 'References: [#1125](https://www.sqlalchemy.org/trac/ticket/1125)'
  id: totrans-4349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1125](https://www.sqlalchemy.org/trac/ticket/1125)
- en: '**[oracle]**'
  id: totrans-4350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: ”case sensitivity” feature will detect an all-lowercase case-sensitive column
    name during reflect and add “quote=True” to the generated Column, so that proper
    quoting is maintained.
  id: totrans-4351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “大小写敏感”功能将在反射期间检测到全小写大小写敏感列名，并向生成的 Column 添加“quote=True”，以便保持正确的引用。
- en: misc
  id: totrans-4352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[major] [release]**'
  id: totrans-4353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[主要] [发布]**'
- en: For the full set of feature descriptions, see [https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html)
    . This document is a work in progress.
  id: totrans-4354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关完整功能描述集，请参阅 [https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html)
    。此文档正在进行中。
- en: '**[major] [release]**'
  id: totrans-4355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[主要] [发布]**'
- en: All bug fixes and feature enhancements from the most recent 0.5 version and
    below are also included within 0.6.
  id: totrans-4356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有最新版本 0.5 及以下的所有错误修复和功能增强也包含在 0.6 中。
- en: '**[major] [release]**'
  id: totrans-4357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[主要] [发布]**'
- en: Platforms targeted now include Python 2.4/2.5/2.6, Python 3.1, Jython2.5.
  id: totrans-4358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在针对的平台包括 Python 2.4/2.5/2.6，Python 3.1，Jython2.5。
- en: '**[engines]**'
  id: totrans-4359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: transaction isolation level may be specified with create_engine(… isolation_level=”…”);
    available on postgresql and sqlite.
  id: totrans-4360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 create_engine(… isolation_level=”…”) 指定事务隔离级别；在 postgresql 和 sqlite 上可用。
- en: 'References: [#443](https://www.sqlalchemy.org/trac/ticket/443)'
  id: totrans-4361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#443](https://www.sqlalchemy.org/trac/ticket/443)
- en: '**[engines]**'
  id: totrans-4362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection has execution_options(), generative method which accepts keywords
    that affect how the statement is executed w.r.t. the DBAPI. Currently supports
    “stream_results”, causes psycopg2 to use a server side cursor for that statement,
    as well as “autocommit”, which is the new location for the “autocommit” option
    from select() and text(). select() and text() also have .execution_options() as
    well as ORM Query().
  id: totrans-4363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection 具有 execution_options()，接受影响语句在 DBAPI 方面执行方式的关键字的生成方法。目前支持“stream_results”，导致
    psycopg2 使用服务器端游标执行该语句，以及“autocommit”，这是 select() 和 text() 中“autocommit”选项的新位置。select()
    和 text() 也有 .execution_options()，以及 ORM Query()。
- en: '**[engines]**'
  id: totrans-4364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: fixed the import for entrypoint-driven dialects to not rely upon silly tb_info
    trick to determine import error status.
  id: totrans-4365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为基于入口点驱动的方言导入不依赖于愚蠢的 tb_info 技巧来确定导入错误状态。
- en: 'References: [#1630](https://www.sqlalchemy.org/trac/ticket/1630)'
  id: totrans-4366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1630](https://www.sqlalchemy.org/trac/ticket/1630)
- en: '**[engines]**'
  id: totrans-4367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: added first() method to ResultProxy, returns first row and closes result set
    immediately.
  id: totrans-4368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ResultProxy中添加了first()方法，返回第一行并立即关闭结果集。
- en: '**[engines]**'
  id: totrans-4369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: RowProxy objects are now pickleable, i.e. the object returned by result.fetchone(),
    result.fetchall() etc.
  id: totrans-4370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy对象现在是可pickle化的，即result.fetchone()、result.fetchall()等返回的对象。
- en: '**[engines]**'
  id: totrans-4371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: RowProxy no longer has a close() method, as the row no longer maintains a reference
    to the parent. Call close() on the parent ResultProxy instead, or use autoclose.
  id: totrans-4372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy不再有close()方法，因为行不再保持对父行的引用。请在父ResultProxy上调用close()，或使用autoclose。
- en: '**[engines]**'
  id: totrans-4373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: ResultProxy internals have been overhauled to greatly reduce method call counts
    when fetching columns. Can provide a large speed improvement (up to more than
    100%) when fetching large result sets. The improvement is larger when fetching
    columns that have no type-level processing applied and when using results as tuples
    (instead of as dictionaries). Many thanks to Elixir’s Gaëtan de Menten for this
    dramatic improvement !
  id: totrans-4374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy内部已进行了大规模的改进，大大减少了在获取列时的方法调用次数。在获取大型结果集时，可以提供大幅度的速度提升（高达100%以上）。当获取没有应用类型级处理的列并且将结果用作元组（而不是字典）时，改进更大。非常感谢Elixir的Gaëtan
    de Menten为这一巨大改进所做的努力！
- en: 'References: [#1586](https://www.sqlalchemy.org/trac/ticket/1586)'
  id: totrans-4375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1586](https://www.sqlalchemy.org/trac/ticket/1586)
- en: '**[engines]**'
  id: totrans-4376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Databases which rely upon postfetch of “last inserted id” to get at a generated
    sequence value (i.e. MySQL, MS-SQL) now work correctly when there is a composite
    primary key where the “autoincrement” column is not the first primary key column
    in the table.
  id: totrans-4377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 依赖于“last inserted id”进行生成序列值的数据库（例如MySQL、MS-SQL）现在在复合主键中正常工作，其中“autoincrement”列不是表中的第一个主键列。
- en: '**[engines]**'
  id: totrans-4378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the last_inserted_ids() method has been renamed to the descriptor “inserted_primary_key”.
  id: totrans-4379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: last_inserted_ids()方法已重命名为描述符“inserted_primary_key”。
- en: '**[engines]**'
  id: totrans-4380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: setting echo=False on create_engine() now sets the loglevel to WARN instead
    of NOTSET. This so that logging can be disabled for a particular engine even if
    logging for “sqlalchemy.engine” is enabled overall. Note that the default setting
    of “echo” is None.
  id: totrans-4381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将echo=False设置在create_engine()上现在会将日志级别设置为WARN，而不是NOTSET。这样，即使总体上启用了“sqlalchemy.engine”的日志记录，也可以为特定引擎禁用日志记录。请注意，“echo”的默认设置为None。
- en: 'References: [#1554](https://www.sqlalchemy.org/trac/ticket/1554)'
  id: totrans-4382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1554](https://www.sqlalchemy.org/trac/ticket/1554)
- en: '**[engines]**'
  id: totrans-4383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: ConnectionProxy now has wrapper methods for all transaction lifecycle events,
    including begin(), rollback(), commit() begin_nested(), begin_prepared(), prepare(),
    release_savepoint(), etc.
  id: totrans-4384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ConnectionProxy现在对所有事务生命周期事件都有包装方法，包括begin()、rollback()、commit()、begin_nested()、begin_prepared()、prepare()、release_savepoint()等。
- en: '**[engines]**'
  id: totrans-4385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection pool logging now uses both INFO and DEBUG log levels for logging.
    INFO is for major events such as invalidated connections, DEBUG for all the acquire/return
    logging. echo_pool can be False, None, True or “debug” the same way as echo works.
  id: totrans-4386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池日志现在使用INFO和DEBUG日志级别进行记录。INFO用于主要事件，如无效的连接，DEBUG用于所有获取/返回日志记录。echo_pool可以是False、None、True或“debug”，方式与echo相同。
- en: '**[engines]**'
  id: totrans-4387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: All pyodbc-dialects now support extra pyodbc-specific kw arguments ‘ansi’, ‘unicode_results’,
    ‘autocommit’.
  id: totrans-4388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有pyodbc方言现在支持额外的pyodbc特定的kw参数‘ansi’、‘unicode_results’、‘autocommit’。
- en: 'References: [#1621](https://www.sqlalchemy.org/trac/ticket/1621)'
  id: totrans-4389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1621](https://www.sqlalchemy.org/trac/ticket/1621)
- en: '**[engines]**'
  id: totrans-4390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the “threadlocal” engine has been rewritten and simplified and now supports
    SAVEPOINT operations.
  id: totrans-4391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “threadlocal”引擎已重写和简化，现在支持SAVEPOINT操作。
- en: '**[engines]**'
  id: totrans-4392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: deprecated or removed
  id: totrans-4393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用或移除
- en: result.last_inserted_ids() is deprecated. Use result.inserted_primary_key
  id: totrans-4394
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: result.last_inserted_ids()已弃用。使用result.inserted_primary_key
- en: dialect.get_default_schema_name(connection) is now public via dialect.default_schema_name.
  id: totrans-4395
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: dialect.get_default_schema_name(connection)现在通过dialect.default_schema_name公开。
- en: the “connection” argument from engine.transaction() and engine.run_callable()
    is removed - Connection itself now has those methods. All four methods accept
    *args and **kwargs which are passed to the given callable, as well as the operating
    connection.
  id: totrans-4396
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从engine.transaction()和engine.run_callable()中移除了“connection”参数——Connection本身现在具有这些方法。所有四个方法都接受*args和**kwargs，这些参数被传递给给定的可调用对象，以及操作连接。
- en: '**[reflection/inspection]**'
  id: totrans-4397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[反射/检查]**'
- en: Table reflection has been expanded and generalized into a new API called “sqlalchemy.engine.reflection.Inspector”.
    The Inspector object provides fine-grained information about a wide variety of
    schema information, with room for expansion, including table names, column names,
    view definitions, sequences, indexes, etc.
  id: totrans-4398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表反射已扩展并泛化为一个名为“sqlalchemy.engine.reflection.Inspector”的新API。Inspector对象提供关于各种模式信息的细粒度信息，包括表名、列名、视图定义、序列、索引等，还有扩展的空间。
- en: '**[reflection/inspection]**'
  id: totrans-4399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[反射/检查]**'
- en: Views are now reflectable as ordinary Table objects. The same Table constructor
    is used, with the caveat that “effective” primary and foreign key constraints
    aren’t part of the reflection results; these have to be specified explicitly if
    desired.
  id: totrans-4400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图现在可以反映为普通的Table对象。使用相同的Table构造函数，但要注意“有效”的主键和外键约束不是反射结果的一部分；如果需要，必须明确指定这些。
- en: '**[reflection/inspection]**'
  id: totrans-4401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[反射/检查]**'
- en: The existing autoload=True system now uses Inspector underneath so that each
    dialect need only return “raw” data about tables and other objects - Inspector
    is the single place that information is compiled into Table objects so that consistency
    is at a maximum.
  id: totrans-4402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现有的autoload=True系统现在在底层使用Inspector，以便每个方言只需返回关于表和其他对象的“原始”数据 - Inspector是将信息编译成Table对象的单一位置，以确保一致性最大化。
- en: '**[ddl]**'
  id: totrans-4403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ddl]**'
- en: 'the DDL system has been greatly expanded. the DDL() class now extends the more
    generic DDLElement(), which forms the basis of many new constructs:'
  id: totrans-4404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL系统已大大扩展。DDL()类现在扩展了更通用的DDLElement()，它构成了许多新构造的基础：
- en: CreateTable()
  id: totrans-4405
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateTable()
- en: ''
  id: totrans-4406
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4407
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropTable()
  id: totrans-4408
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropTable()
- en: ''
  id: totrans-4409
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4410
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: AddConstraint()
  id: totrans-4411
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: AddConstraint()
- en: ''
  id: totrans-4412
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4413
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropConstraint()
  id: totrans-4414
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropConstraint()
- en: ''
  id: totrans-4415
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4416
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: CreateIndex()
  id: totrans-4417
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateIndex()
- en: ''
  id: totrans-4418
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4419
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropIndex()
  id: totrans-4420
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropIndex()
- en: ''
  id: totrans-4421
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4422
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: CreateSequence()
  id: totrans-4423
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateSequence()
- en: ''
  id: totrans-4424
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4425
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropSequence()
  id: totrans-4426
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropSequence()
- en: ''
  id: totrans-4427
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: These support “on” and “execute-at()” just like plain DDL() does. User-defined
    DDLElement subclasses can be created and linked to a compiler using the sqlalchemy.ext.compiler
    extension.
  id: totrans-4428
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些支持“on”和“execute-at()”，就像普通DDL()一样。用户定义的DDLElement子类可以被创建并链接到一个编译器，使用sqlalchemy.ext.compiler扩展。
- en: '**[ddl]**'
  id: totrans-4429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ddl]**'
- en: 'The signature of the “on” callable passed to DDL() and DDLElement() is revised
    as follows:'
  id: totrans-4430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给DDL()和DDLElement()���“on”可调用的签名如下所示：
- en: ddl
  id: totrans-4431
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ddl
- en: ''
  id: totrans-4432
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the DDLElement object itself
  id: totrans-4433
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DDLElement对象本身
- en: ''
  id: totrans-4434
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: event
  id: totrans-4435
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 事件
- en: ''
  id: totrans-4436
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the string event name.
  id: totrans-4437
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 字符串事件名称。
- en: ''
  id: totrans-4438
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: target
  id: totrans-4439
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 目标
- en: ''
  id: totrans-4440
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: previously “schema_item”, the Table or MetaData object triggering the event.
  id: totrans-4441
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以前是“schema_item”，触发事件的Table或MetaData对象。
- en: ''
  id: totrans-4442
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: connection
  id: totrans-4443
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 连接
- en: ''
  id: totrans-4444
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the Connection object in use for the operation.
  id: totrans-4445
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于操作的Connection对象。
- en: ''
  id: totrans-4446
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**kw'
  id: totrans-4447
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**kw'
- en: ''
  id: totrans-4448
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: keyword arguments. In the case of MetaData before/after create/drop, the list
    of Table objects for which CREATE/DROP DDL is to be issued is passed as the kw
    argument “tables”. This is necessary for metadata-level DDL that is dependent
    on the presence of specific tables.
  id: totrans-4449
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数。在MetaData之前/之后创建/删除的情况下，要发出CREATE/DROP DDL的Table对象列表作为kw参数“tables”传递。这对于依赖于特定表存在的元数据级DDL是必要的。
- en: The “schema_item” attribute of DDL has been renamed to
  id: totrans-4450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL的“schema_item”属性已重命名为
- en: ”target”.
  id: totrans-4451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”目标”。
- en: '**[dialect] [refactor]**'
  id: totrans-4452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: Dialect modules are now broken into database dialects plus DBAPI implementations.
    Connect URLs are now preferred to be specified using dialect+driver://…, i.e.
    “mysql+mysqldb://scott:tiger@localhost/test”. See the 0.6 documentation for examples.
  id: totrans-4453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言模块现在分为数据库方言和DBAPI实现。现在更倾向于使用方言+驱动程序的连接URL来指定，即“mysql+mysqldb://scott:tiger@localhost/test”。请参阅0.6文档以获取示例。
- en: '**[dialect] [refactor]**'
  id: totrans-4454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: the setuptools entrypoint for external dialects is now called “sqlalchemy.dialects”.
  id: totrans-4455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外部方言的setuptools入口现在称为“sqlalchemy.dialects”。
- en: '**[dialect] [refactor]**'
  id: totrans-4456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: the “owner” keyword argument is removed from Table. Use “schema” to represent
    any namespaces to be prepended to the table name.
  id: totrans-4457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从Table中删除了“owner”关键字参数。使用“schema”表示要预先添加到表名的任何命名空间。
- en: '**[dialect] [refactor]**'
  id: totrans-4458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: server_version_info becomes a static attribute.
  id: totrans-4459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: server_version_info成为静态属性。
- en: '**[dialect] [refactor]**'
  id: totrans-4460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: dialects receive an initialize() event on initial connection to determine connection
    properties.
  id: totrans-4461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言在初始连接时接收到initialize()事件，以确定连接属性。
- en: '**[dialect] [refactor]**'
  id: totrans-4462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: dialects receive a visit_pool event have an opportunity to establish pool listeners.
  id: totrans-4463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言在接收到visit_pool事件时有机会建立池监听器。
- en: '**[dialect] [refactor]**'
  id: totrans-4464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: cached TypeEngine classes are cached per-dialect class instead of per-dialect.
  id: totrans-4465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缓存的TypeEngine类现在按照每个方言类进行缓存，而不是按照每个方言进行缓存。
- en: '**[dialect] [refactor]**'
  id: totrans-4466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: new UserDefinedType should be used as a base class for new types, which preserves
    the 0.5 behavior of get_col_spec().
  id: totrans-4467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 UserDefinedType 应作为新类型的基类使用，以保留 get_col_spec() 的 0.5 行为。
- en: '**[dialect] [refactor]**'
  id: totrans-4468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: The result_processor() method of all type classes now accepts a second argument
    “coltype”, which is the DBAPI type argument from cursor.description. This argument
    can help some types decide on the most efficient processing of result values.
  id: totrans-4469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有类型类的 result_processor() 方法现在接受第二个参数“coltype”，这是来自 cursor.description 的 DBAPI
    类型参数。此参数可以帮助某些类型决定对结果值进行最有效的处理。
- en: '**[dialect] [refactor]**'
  id: totrans-4470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: Deprecated Dialect.get_params() removed.
  id: totrans-4471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 废弃的 Dialect.get_params() 已移除。
- en: '**[dialect] [refactor]**'
  id: totrans-4472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: Dialect.get_rowcount() has been renamed to a descriptor “rowcount”, and calls
    cursor.rowcount directly. Dialects which need to hardwire a rowcount in for certain
    calls should override the method to provide different behavior.
  id: totrans-4473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Dialect.get_rowcount() 已重命名为描述符“rowcount”，并直接调用 cursor.rowcount。需要为某些调用硬编码行数的方言应重写该方法以提供不同的行为。
- en: '**[dialect] [refactor]**'
  id: totrans-4474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: DefaultRunner and subclasses have been removed. The job of this object has been
    simplified and moved into ExecutionContext. Dialects which support sequences should
    add a fire_sequence() method to their execution context implementation.
  id: totrans-4475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DefaultRunner 及其子类已移除。该对象的工作已简化并移至 ExecutionContext 中。支持序列的方言应在其执行上下文实现中添加 fire_sequence()
    方法。
- en: 'References: [#1566](https://www.sqlalchemy.org/trac/ticket/1566)'
  id: totrans-4476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1566](https://www.sqlalchemy.org/trac/ticket/1566)
- en: '**[dialect] [refactor]**'
  id: totrans-4477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言] [重构]**'
- en: Functions and operators generated by the compiler now use (almost) regular dispatch
    functions of the form “visit_<opname>” and “visit_<funcname>_fn” to provide customed
    processing. This replaces the need to copy the “functions” and “operators” dictionaries
    in compiler subclasses with straightforward visitor methods, and also allows compiler
    subclasses complete control over rendering, as the full _Function or _BinaryExpression
    object is passed in.
  id: totrans-4478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器生成的函数和运算符现在使用（几乎）常规的分发函数形式“visit_<opname>”和“visit_<funcname>_fn”来提供定制处理。这取代了在编译器子类中复制“functions”和“operators”字典的需要，改为使用直接的访问方法，并且还允许编译器子类完全控制渲染，因为完整的
    _Function 或 _BinaryExpression 对象被传递进来。
- en: '**[firebird]**'
  id: totrans-4479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: the keys() method of RowProxy() now returns the result column names *normalized*
    to be SQLAlchemy case insensitive names. This means they will be lower case for
    case insensitive names, whereas the DBAPI would normally return them as UPPERCASE
    names. This allows row keys() to be compatible with further SQLAlchemy operations.
  id: totrans-4480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy() 的 keys() 方法现在返回结果列名*标准化*为 SQLAlchemy 不区分大小写的名称。这意味着对于不区分大小写的名称，它们将是小写的，而
    DBAPI 通常会将它们返回为大写名称。这使得行键() 可与进一步的 SQLAlchemy 操作兼容。
- en: '**[firebird]**'
  id: totrans-4481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-4482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的 dialect.initialize() 功能设置版本相关行为。
- en: '**[firebird]**'
  id: totrans-4483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: ”case sensitivity” feature will detect an all-lowercase case-sensitive column
    name during reflect and add “quote=True” to the generated Column, so that proper
    quoting is maintained.
  id: totrans-4484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “大小写敏感”功能将在反射期间检测到全小写的大小写敏感列名，并向生成的 Column 添加 “quote=True”，以保持适当的引用。
- en: '**[types]**'
  id: totrans-4485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The construction of types within dialects has been totally overhauled. Dialects
    now define publicly available types as UPPERCASE names exclusively, and internal
    implementation types using underscore identifiers (i.e. are private). The system
    by which types are expressed in SQL and DDL has been moved to the compiler system.
    This has the effect that there are much fewer type objects within most dialects.
    A detailed document on this architecture for dialect authors is in lib/sqlalchemy/dialects/type_migration_guidelines.txt
    .
  id: totrans-4486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言内部类型的构建已完全重构。方言现在仅以大写名称定义公开可用的类型，并使用下划线标识符（即私有）定义内部实现类型。表达类型在 SQL 和 DDL 中的系统已移至编译器系统。这样做的效果是大多数方言中的类型对象大大减少。有关方言作者的详细文档在
    lib/sqlalchemy/dialects/type_migration_guidelines.txt 中。
- en: '**[types]**'
  id: totrans-4487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Types no longer make any guesses as to default parameters. In particular, Numeric,
    Float, NUMERIC, FLOAT, DECIMAL don’t generate any length or scale unless specified.
  id: totrans-4488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型不再对默认参数进行任何猜测。特别是，Numeric、Float、NUMERIC、FLOAT、DECIMAL 不会生成任何长度或精度，除非指定。
- en: '**[types]**'
  id: totrans-4489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: types.Binary is renamed to types.LargeBinary, it only produces BLOB, BYTEA,
    or a similar “long binary” type. New base BINARY and VARBINARY types have been
    added to access these MySQL/MS-SQL specific types in an agnostic way.
  id: totrans-4490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: types.Binary被重命名为types.LargeBinary，它只产生BLOB、BYTEA或类似的“长二进制”类型。新增了基本的BINARY和VARBINARY类型，以一种与MySQL/MS-SQL特定类型无关的方式访问这些类型。
- en: 'References: [#1664](https://www.sqlalchemy.org/trac/ticket/1664)'
  id: totrans-4491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1664](https://www.sqlalchemy.org/trac/ticket/1664)
- en: '**[types]**'
  id: totrans-4492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: String/Text/Unicode types now skip the unicode() check on each result column
    value if the dialect has detected the DBAPI as returning Python unicode objects
    natively. This check is issued on first connect using “SELECT CAST ‘some text’
    AS VARCHAR(10)” or equivalent, then checking if the returned object is a Python
    unicode. This allows vast performance increases for native-unicode DBAPIs, including
    pysqlite/sqlite3, psycopg2, and pg8000.
  id: totrans-4493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果dialect检测到DBAPI原生返回Python unicode对象，则String/Text/Unicode类型现在会跳过每个结果列值上的unicode()检查。此检查在首次连接时使用“SELECT
    CAST 'some text' AS VARCHAR(10)”或等效方式发出，然后检查返回的对象是否为Python unicode。这允许对原生unicode
    DBAPI（包括pysqlite/sqlite3、psycopg2和pg8000）进行大幅性能提升。
- en: '**[types]**'
  id: totrans-4494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: 'Most types result processors have been checked for possible speed improvements.
    Specifically, the following generic types have been optimized, resulting in varying
    speed improvements: Unicode, PickleType, Interval, TypeDecorator, Binary. Also
    the following dbapi-specific implementations have been improved: Time, Date and
    DateTime on Sqlite, ARRAY on PostgreSQL, Time on MySQL, Numeric(as_decimal=False)
    on MySQL, oursql and pypostgresql, DateTime on cx_oracle and LOB-based types on
    cx_oracle.'
  id: totrans-4495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数类型结果处理器已经经过检查，以寻找可能的速度改进。具体来说，以下通用类型已经经过优化，导致不同程度的速度改进：Unicode、PickleType、Interval、TypeDecorator、Binary。此外，以下特定于dbapi的实现已经得到改进：Sqlite上的Time、Date和DateTime，PostgreSQL上的ARRAY，MySQL上的Time，MySQL上的Numeric（as_decimal=False），oursql和pypostgresql，cx_oracle上的DateTime以及cx_oracle上的LOB类型。
- en: '**[types]**'
  id: totrans-4496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Reflection of types now returns the exact UPPERCASE type within types.py, or
    the UPPERCASE type within the dialect itself if the type is not a standard SQL
    type. This means reflection now returns more accurate information about reflected
    types.
  id: totrans-4497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在类型的反射将返回types.py中的确切大写类型，或者如果类型不是标准SQL类型，则返回dialect本身中的大写类型。这意味着反射现在返回有关反射类型的更准确信息。
- en: '**[types]**'
  id: totrans-4498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Added a new Enum generic type. Enum is a schema-aware object to support databases
    which require specific DDL in order to use enum or equivalent; in the case of
    PG it handles the details of CREATE TYPE, and on other databases without native
    enum support will by generate VARCHAR + an inline CHECK constraint to enforce
    the enum.
  id: totrans-4499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的Enum通用类型。Enum是一个schema-aware对象，用于支持需要特定DDL才能使用enum或等效的数据库；在PG的情况下，它处理CREATE
    TYPE的详细信息，在其他没有本地枚举支持的数据库上，将生成VARCHAR +内联CHECK约束以强制执行枚举。
- en: 'References: [#1109](https://www.sqlalchemy.org/trac/ticket/1109), [#1511](https://www.sqlalchemy.org/trac/ticket/1511)'
  id: totrans-4500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1109](https://www.sqlalchemy.org/trac/ticket/1109)，[#1511](https://www.sqlalchemy.org/trac/ticket/1511)
- en: '**[types]**'
  id: totrans-4501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The Interval type includes a “native” flag which controls if native INTERVAL
    types (postgresql + oracle) are selected if available, or not. “day_precision”
    and “second_precision” arguments are also added which propagate as appropriately
    to these native types. Related to.
  id: totrans-4502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Interval类型包括一个“native”标志，控制是否选择本机INTERVAL类型（postgresql + oracle）（如果可用）或不选择。还添加了“day_precision”和“second_precision”参数，适当地传播到这些本机类型。相关链接。
- en: 'References: [#1467](https://www.sqlalchemy.org/trac/ticket/1467)'
  id: totrans-4503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1467](https://www.sqlalchemy.org/trac/ticket/1467)
- en: '**[types]**'
  id: totrans-4504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The Boolean type, when used on a backend that doesn’t have native boolean support,
    will generate a CHECK constraint “col IN (0, 1)” along with the int/smallint-
    based column type. This can be switched off if desired with create_constraint=False.
    Note that MySQL has no native boolean *or* CHECK constraint support so this feature
    isn’t available on that platform.
  id: totrans-4505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在没有本地布尔支持的后端上使用Boolean类型时，将生成一个CHECK约束“col IN (0, 1)”以及基于int/smallint的列类型。如果需要，可以通过create_constraint=False关闭此功能。请注意，MySQL没有本地布尔*或*CHECK约束支持，因此该功能在该平台上不可用。
- en: 'References: [#1589](https://www.sqlalchemy.org/trac/ticket/1589)'
  id: totrans-4506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1589](https://www.sqlalchemy.org/trac/ticket/1589)
- en: '**[types]**'
  id: totrans-4507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: PickleType now uses == for comparison of values when mutable=True, unless the
    “comparator” argument with a comparison function is specified to the type. Objects
    being pickled will be compared based on identity (which defeats the purpose of
    mutable=True) if __eq__() is not overridden or a comparison function is not provided.
  id: totrans-4508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 mutable=True 时，PickleType 现在使用 == 比较值，除非为类型指定了带有比较函数的 “comparator” 参数。如果未重写
    __eq__() 或未提供比较函数，则将根据标识比较被 pickled 的对象（这会破坏 mutable=True 的目的）。
- en: '**[types]**'
  id: totrans-4509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: The default “precision” and “scale” arguments of Numeric and Float have been
    removed and now default to None. NUMERIC and FLOAT will be rendered with no numeric
    arguments by default unless these values are provided.
  id: totrans-4510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Numeric 和 Float 的默认 “precision” 和 “scale” 参数已被移除，现在默认为 None。除非提供这些值，否则 NUMERIC
    和 FLOAT 将默认不带数字参数呈现。
- en: '**[types]**'
  id: totrans-4511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: AbstractType.get_search_list() is removed - the games that was used for are
    no longer necessary.
  id: totrans-4512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AbstractType.get_search_list() 被移除 - 不再需要使用它的游戏。
- en: '**[types]**'
  id: totrans-4513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: Added a generic BigInteger type, compiles to BIGINT or NUMBER(19).
  id: totrans-4514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个通用的 BigInteger 类型，编译为 BIGINT 或 NUMBER(19)。
- en: 'References: [#1125](https://www.sqlalchemy.org/trac/ticket/1125)'
  id: totrans-4515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1125](https://www.sqlalchemy.org/trac/ticket/1125)
- en: '**[types]**'
  id: totrans-4516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: sqlsoup has been overhauled to explicitly support an 0.5 style session, using
    autocommit=False, autoflush=True. Default behavior of SQLSoup now requires the
    usual usage of commit() and rollback(), which have been added to its interface.
    An explicit Session or scoped_session can be passed to the constructor, allowing
    these arguments to be overridden.
  id: totrans-4517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 已进行了全面改进，明确支持 0.5 风格的会话，使用 autocommit=False，autoflush=True。SQLSoup 的默认行为现在需要通常使用
    commit() 和 rollback()，这些已添加到其接口中。可以将显式的 Session 或 scoped_session 传递给构造函数，允许覆盖这些参数。
- en: '**[types]**'
  id: totrans-4518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: sqlsoup db.<sometable>.update() and delete() now call query(cls).update() and
    delete(), respectively.
  id: totrans-4519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup db.<sometable>.update() 和 delete() 现在分别调用 query(cls).update() 和 delete()。
- en: '**[types]**'
  id: totrans-4520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: sqlsoup now has execute() and connection(), which call upon the Session methods
    of those names, ensuring that the bind is in terms of the SqlSoup object’s bind.
  id: totrans-4521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 现在具有 execute() 和 connection()，它们调用那些名称的 Session 方法，确保绑定是基于 SqlSoup 对象的绑定。
- en: '**[types]**'
  id: totrans-4522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: sqlsoup objects no longer have the ‘query’ attribute - it’s not needed for sqlsoup’s
    usage paradigm and it gets in the way of a column that is actually named ‘query’.
  id: totrans-4523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 对象不再具有 ‘query’ 属性 - 对于 sqlsoup 的使用范式而言不需要它，并且它会妨碍一个实际上命名为 ‘query’ 的列。
- en: '**[types]**'
  id: totrans-4524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: The signature of the proxy_factory callable passed to association_proxy is now
    (lazy_collection, creator, value_attr, association_proxy), adding a fourth argument
    that is the parent AssociationProxy argument. Allows serializability and subclassing
    of the built in collections.
  id: totrans-4525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给 association_proxy 的 proxy_factory 可调用对象的签名现在是 (lazy_collection, creator,
    value_attr, association_proxy)，添加了第四个参数，即父级 AssociationProxy 参数。允许内置集合的序列化和子类化。
- en: 'References: [#1259](https://www.sqlalchemy.org/trac/ticket/1259)'
  id: totrans-4526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1259](https://www.sqlalchemy.org/trac/ticket/1259)
- en: '**[types]**'
  id: totrans-4527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: association_proxy now has basic comparator methods .any(), .has(), .contains(),
    ==, !=, thanks to Scott Torborg.
  id: totrans-4528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: association_proxy 现在具有基本的比较方法 .any()、.has()、.contains()、==、!=，感谢 Scott Torborg。
- en: 'References: [#1372](https://www.sqlalchemy.org/trac/ticket/1372)'
  id: totrans-4529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1372](https://www.sqlalchemy.org/trac/ticket/1372)
- en: orm
  id: totrans-4530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-4531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Changes to query.update() and query.delete():'
  id: totrans-4532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 query.update() 和 query.delete() 的更改：
- en: the ‘expire’ option on query.update() has been renamed to ‘fetch’, thus matching
    that of query.delete(). ‘expire’ is deprecated and issues a warning.
  id: totrans-4533
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query.update() 上的 ‘expire’ 选项已重命名为 ‘fetch’，与 query.delete() 的命名相匹配。‘expire’
    已被弃用并发出警告。
- en: query.update() and query.delete() both default to ‘evaluate’ for the synchronize
    strategy.
  id: totrans-4534
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query.update() 和 query.delete() 默认都使用“evaluate”作为同步策略。
- en: the ‘synchronize’ strategy for update() and delete() raises an error on failure.
    There is no implicit fallback onto “fetch”. Failure of evaluation is based on
    the structure of criteria, so success/failure is deterministic based on code structure.
  id: totrans-4535
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: update() 和 delete() 的“同步”策略在失败时会引发错误。没有隐式回退到“fetch”。评估的成功/失败基于条件的结构，因此成功/失败是基于代码结构的确定性的。
- en: '**[orm]**'
  id: totrans-4536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Enhancements on many-to-one relations:'
  id: totrans-4537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于多对一关系的增强：
- en: many-to-one relations now fire off a lazyload in fewer cases, including in most
    cases will not fetch the “old” value when a new one is replaced.
  id: totrans-4538
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多对一关系现在在更少的情况下触发延迟加载，包括在大多数情况下在替换新值时不会获取“旧”值。
- en: many-to-one relation to a joined-table subclass now uses get() for a simple
    load (known as the “use_get” condition), i.e. Related->Sub(Base), without the
    need to redefine the primaryjoin condition in terms of the base table.
  id: totrans-4539
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与联接表子类的多对一关系现在使用get()进行简单加载（称为“use_get”条件），即Related->Sub(Base)，无需重新定义基表的primaryjoin条件。
- en: specifying a foreign key with a declarative column, i.e. ForeignKey(MyRelatedClass.id)
    doesn’t break the “use_get” condition from taking place
  id: totrans-4540
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用声明性列指定外键，即ForeignKey(MyRelatedClass.id)，不会阻止“use_get”条件的发生。
- en: relation(), eagerload(), and eagerload_all() now feature an option called “innerjoin”.
    Specify True or False to control whether an eager join is constructed as an INNER
    or OUTER join. Default is False as always. The mapper options will override whichever
    setting is specified on relation(). Should generally be set for many-to-one, not
    nullable foreign key relations to allow improved join performance.
  id: totrans-4541
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: relation()、eagerload()和eagerload_all()现在具有名为“innerjoin”的选项。指定True或False以控制是否将急加载构建为INNER或OUTER连接。默认始终为False。mapper选项将覆盖relation()上指定的任何设置。通常应为多对一、非空外键关系设置以允许改进的连接性能。
- en: the behavior of eagerloading such that the main query is wrapped in a subquery
    when LIMIT/OFFSET are present now makes an exception for the case when all eager
    loads are many-to-one joins. In those cases, the eager joins are against the parent
    table directly along with the limit/offset without the extra overhead of a subquery,
    since a many-to-one join does not add rows to the result.
  id: totrans-4542
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于急加载的行为，当存在LIMIT/OFFSET时，主查询现在会在所有急加载都是多对一连接时进行包装成子查询，这种情况下，急加载将直接针对父表进行连接，同时带有限制/偏移量，而不会增加子查询的额外开销，因为多对一连接不会向结果添加行。
- en: 'References: [#1186](https://www.sqlalchemy.org/trac/ticket/1186), [#1492](https://www.sqlalchemy.org/trac/ticket/1492),
    [#1544](https://www.sqlalchemy.org/trac/ticket/1544)'
  id: totrans-4543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1186](https://www.sqlalchemy.org/trac/ticket/1186), [#1492](https://www.sqlalchemy.org/trac/ticket/1492),
    [#1544](https://www.sqlalchemy.org/trac/ticket/1544)
- en: '**[orm]**'
  id: totrans-4544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Enhancements / Changes on Session.merge():'
  id: totrans-4545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()的增强/更改：
- en: '**[orm]**'
  id: totrans-4546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “dont_load=True” flag on Session.merge() is deprecated and is now “load=False”.
  id: totrans-4547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Session.merge()上的“dont_load=True”标志已被弃用，现在是“load=False”。
- en: '**[orm]**'
  id: totrans-4548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() is performance optimized, using half the call counts for “load=False”
    mode compared to 0.5 and significantly fewer SQL queries in the case of collections
    for “load=True” mode.
  id: totrans-4549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()经过性能优化，在“load=False”模式下的调用次数仅为0.5的一半，并且在“load=True”模式下对于集合的SQL查询显著减少。
- en: '**[orm]**'
  id: totrans-4550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() will not issue a needless merge of attributes if the given instance
    is the same instance which is already present.
  id: totrans-4551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果给定的实例与已经存在的实例相同，则merge()不会发出不必要的属性合并。
- en: '**[orm]**'
  id: totrans-4552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() now also merges the “options” associated with a given state, i.e. those
    passed through query.options() which follow along with an instance, such as options
    to eagerly- or lazyily- load various attributes. This is essential for the construction
    of highly integrated caching schemes. This is a subtle behavioral change vs. 0.5.
  id: totrans-4553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge()现在还会合并与给定状态相关联的“options”，即通过query.options()传递的那些随实例一起传递的选项，例如急加载或延迟加载各种属性的选项。这对于构建高度集成的缓存方案至关重要。这是与0.5版本相比的一个微妙的行为变化。
- en: '**[orm]**'
  id: totrans-4554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A bug was fixed regarding the serialization of the “loader path” present on
    an instance’s state, which is also necessary when combining the usage of merge()
    with serialized state and associated options that should be preserved.
  id: totrans-4555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于实例状态中存在的“loader path”序列化的bug，这在将merge()与应保留的序列化状态和相关选项结合使用时也是必要的。
- en: '**[orm]**'
  id: totrans-4556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The all new merge() is showcased in a new comprehensive example of how to integrate
    Beaker with SQLAlchemy. See the notes in the “examples” note below.
  id: totrans-4557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全新的merge()在一个全面的示例中展示了如何将Beaker与SQLAlchemy集成。请参见下面的“示例”注释中的说明。
- en: '**[orm]**'
  id: totrans-4558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Primary key values can now be changed on a joined-table inheritance object,
    and ON UPDATE CASCADE will be taken into account when the flush happens. Set the
    new “passive_updates” flag to False on mapper() when using SQLite or MySQL/MyISAM.
  id: totrans-4559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在联接表继承对象上更改主键值，并且在刷新时将考虑ON UPDATE CASCADE。在使用SQLite或MySQL/MyISAM时，在mapper()上设置新的“passive_updates”标志为False。
- en: 'References: [#1362](https://www.sqlalchemy.org/trac/ticket/1362)'
  id: totrans-4560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1362](https://www.sqlalchemy.org/trac/ticket/1362)
- en: '**[orm]**'
  id: totrans-4561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush() now detects when a primary key column was updated by an ON UPDATE CASCADE
    operation from another primary key, and can then locate the row for a subsequent
    UPDATE on the new PK value. This occurs when a relation() is there to establish
    the relationship as well as passive_updates=True.
  id: totrans-4562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush() 现在可以检测到主键列是否被另一个主键的 ON UPDATE CASCADE 操作更新，并且可以在新的主键值上进行后续 UPDATE 时定位行。当存在
    relation() 来建立关系以及 passive_updates=True 时会发生这种情况。
- en: 'References: [#1671](https://www.sqlalchemy.org/trac/ticket/1671)'
  id: totrans-4563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1671](https://www.sqlalchemy.org/trac/ticket/1671)
- en: '**[orm]**'
  id: totrans-4564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “save-update” cascade will now cascade the pending *removed* values from
    a scalar or collection attribute into the new session during an add() operation.
    This so that the flush() operation will also delete or modify rows of those disconnected
    items.
  id: totrans-4565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “save-update” 级联现在会将标量或集合属性中待处理的*移除*值级联到新会话中的 add() 操作中。这样，flush() 操作也会删除或修改这些断开连接项目的行。
- en: '**[orm]**'
  id: totrans-4566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using a “dynamic” loader with a “secondary” table now produces a query where
    the “secondary” table is *not* aliased. This allows the secondary Table object
    to be used in the “order_by” attribute of the relation(), and also allows it to
    be used in filter criterion against the dynamic relation.
  id: totrans-4567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用“dynamic”加载器与“secondary”表现在会生成一个查询，其中“secondary”表不会被别名化。这允许在 relation() 的“order_by”属性中使用“secondary”表对象，并且还允许在动态关系的筛选条件中使用它。
- en: 'References: [#1531](https://www.sqlalchemy.org/trac/ticket/1531)'
  id: totrans-4568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1531](https://www.sqlalchemy.org/trac/ticket/1531)
- en: '**[orm]**'
  id: totrans-4569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() with uselist=False will emit a warning when an eager or lazy load
    locates more than one valid value for the row. This may be due to primaryjoin/secondaryjoin
    conditions which aren’t appropriate for an eager LEFT OUTER JOIN or for other
    conditions.
  id: totrans-4570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 relation() 的 uselist=False 时，当 eager 或 lazy load 定位到多个有效值时会发出警告。这可能是由于 primaryjoin/secondaryjoin
    条件不适用于 eager LEFT OUTER JOIN 或其他条件。
- en: 'References: [#1643](https://www.sqlalchemy.org/trac/ticket/1643)'
  id: totrans-4571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1643](https://www.sqlalchemy.org/trac/ticket/1643)
- en: '**[orm]**'
  id: totrans-4572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: an explicit check occurs when a synonym() is used with map_column=True, when
    a ColumnProperty (deferred or otherwise) exists separately in the properties dictionary
    sent to mapper with the same keyname. Instead of silently replacing the existing
    property (and possible options on that property), an error is raised.
  id: totrans-4573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 synonym() 与 map_column=True 时，会显式检查是否在发送到 mapper 的属性字典中存在与同一键名的 ColumnProperty（延迟或其他方式）。不会静默替换现有属性（以及可能存在的属性选项），而是会引发错误。
- en: 'References: [#1633](https://www.sqlalchemy.org/trac/ticket/1633)'
  id: totrans-4574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1633](https://www.sqlalchemy.org/trac/ticket/1633)
- en: '**[orm]**'
  id: totrans-4575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a “dynamic” loader sets up its query criterion at construction time so that
    the actual query is returned from non-cloning accessors like “statement”.
  id: totrans-4576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “dynamic”加载器在构建时设置其查询条件，以便从非克隆访问器（如“statement”）返回实际查询。
- en: '**[orm]**'
  id: totrans-4577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “named tuple” objects returned when iterating a Query() are now pickleable.
  id: totrans-4578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 迭代 Query() 时返回的“named tuple”对象现在是可 pickle 的。
- en: '**[orm]**'
  id: totrans-4579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapping to a select() construct now requires that you make an alias() out of
    it distinctly. This to eliminate confusion over such issues as
  id: totrans-4580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射到 select() 构造现在要求您将其明确地制作为 alias()。这是为了消除诸如此类问题的混淆
- en: 'References: [#1542](https://www.sqlalchemy.org/trac/ticket/1542)'
  id: totrans-4581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1542](https://www.sqlalchemy.org/trac/ticket/1542)
- en: '**[orm]**'
  id: totrans-4582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join() has been reworked to provide more consistent behavior and more
    flexibility (includes)
  id: totrans-4583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了 query.join()，以提供更一致的行为和更灵活的功能（包括）。
- en: 'References: [#1537](https://www.sqlalchemy.org/trac/ticket/1537)'
  id: totrans-4584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1537](https://www.sqlalchemy.org/trac/ticket/1537)
- en: '**[orm]**'
  id: totrans-4585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.select_from() accepts multiple clauses to produce multiple comma separated
    entries within the FROM clause. Useful when selecting from multiple-homed join()
    clauses.
  id: totrans-4586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.select_from() 接受多个子句以在 FROM 子句中生成多个逗号分隔的条目。在从多个 join() 子句中选择时很有用。
- en: '**[orm]**'
  id: totrans-4587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.select_from() also accepts mapped classes, aliased() constructs, and mappers
    as arguments. In particular this helps when querying from multiple joined-table
    classes to ensure the full join gets rendered.
  id: totrans-4588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.select_from() 还接受映射类、aliased() 构造和 mappers 作为参数。特别是在从多个连接表类查询时，确保完整连接被渲染。
- en: '**[orm]**'
  id: totrans-4589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() can be used with a mapping to an outer join where one or more of
    the primary key values are None.
  id: totrans-4590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.get() 可以与映射到一个外连接的情况一起使用，其中一个或多个主键值为 None。
- en: 'References: [#1135](https://www.sqlalchemy.org/trac/ticket/1135)'
  id: totrans-4591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1135](https://www.sqlalchemy.org/trac/ticket/1135)
- en: '**[orm]**'
  id: totrans-4592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.from_self(), query.union(), others which do a “SELECT * from (SELECT…)”
    type of nesting will do a better job translating column expressions within the
    subquery to the columns clause of the outer query. This is potentially backwards
    incompatible with 0.5, in that this may break queries with literal expressions
    that do not have labels applied (i.e. literal(‘foo’), etc.)
  id: totrans-4593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.from_self()、query.union()等执行“SELECT * from (SELECT…)”类型嵌套的操作将更好地将子查询中的列表达式转换为外部查询的列子句。这可能与0.5版本不兼容，因为这可能会破坏没有应用标签的文字表达式的查询（即literal(‘foo’)等）。
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568)'
  id: totrans-4594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1568](https://www.sqlalchemy.org/trac/ticket/1568)
- en: '**[orm]**'
  id: totrans-4595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation primaryjoin and secondaryjoin now check that they are column-expressions,
    not just clause elements. this prohibits things like FROM expressions being placed
    there directly.
  id: totrans-4596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation primaryjoin和secondaryjoin现在检查它们是否是列表达式，而不仅仅是子句元素。这禁止了直接在那里放置FROM表达式等情况。
- en: 'References: [#1622](https://www.sqlalchemy.org/trac/ticket/1622)'
  id: totrans-4597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1622](https://www.sqlalchemy.org/trac/ticket/1622)
- en: '**[orm]**'
  id: totrans-4598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: expression.null() is fully understood the same way None is when comparing an
    object/collection-referencing attribute within query.filter(), filter_by(), etc.
  id: totrans-4599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: expression.null()在使用query.filter()、filter_by()等时与None的比较方式完全相同。
- en: 'References: [#1415](https://www.sqlalchemy.org/trac/ticket/1415)'
  id: totrans-4600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1415](https://www.sqlalchemy.org/trac/ticket/1415)
- en: '**[orm]**'
  id: totrans-4601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “make_transient()” helper function which transforms a persistent/ detached
    instance into a transient one (i.e. deletes the instance_key and removes from
    any session.)
  id: totrans-4602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“make_transient()”辅助函数，将持久化/分离实例转换为瞬态实例（即删除实例键并从任何会话中移除）。
- en: 'References: [#1052](https://www.sqlalchemy.org/trac/ticket/1052)'
  id: totrans-4603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1052](https://www.sqlalchemy.org/trac/ticket/1052)
- en: '**[orm]**'
  id: totrans-4604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the allow_null_pks flag on mapper() is deprecated, and the feature is turned
    “on” by default. This means that a row which has a non-null value for any of its
    primary key columns will be considered an identity. The need for this scenario
    typically only occurs when mapping to an outer join.
  id: totrans-4605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mapper()上的allow_null_pks标志已被弃用，并且该功能默认为“on”。这意味着对于任何主键列具有非空值的行将被视为标识。通常只有在映射到外连接时才会出现这种情况。
- en: 'References: [#1339](https://www.sqlalchemy.org/trac/ticket/1339)'
  id: totrans-4606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1339](https://www.sqlalchemy.org/trac/ticket/1339)
- en: '**[orm]**'
  id: totrans-4607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the mechanics of “backref” have been fully merged into the finer grained “back_populates”
    system, and take place entirely within the _generate_backref() method of RelationProperty.
    This makes the initialization procedure of RelationProperty simpler and allows
    easier propagation of settings (such as from subclasses of RelationProperty) into
    the reverse reference. The internal BackRef() is gone and backref() returns a
    plain tuple that is understood by RelationProperty.
  id: totrans-4608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '“backref”的机制已完全合并到更精细的“back_populates”系统中，并完全在RelationProperty的_generate_backref()方法中进行。这使得RelationProperty的初始化过程更简单，允许更容易地将设置（例如从RelationProperty的子类）传播到反向引用中。内部的BackRef()已经消失，backref()返回一个RelationProperty理解的普通元组。 '
- en: '**[orm]**'
  id: totrans-4609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The version_id_col feature on mapper() will raise a warning when used with dialects
    that don’t support “rowcount” adequately.
  id: totrans-4610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mapper()上的version_id_col功能在使用不充分支持“rowcount”的方言时会发出警告。
- en: 'References: [#1569](https://www.sqlalchemy.org/trac/ticket/1569)'
  id: totrans-4611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1569](https://www.sqlalchemy.org/trac/ticket/1569)
- en: '**[orm]**'
  id: totrans-4612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “execution_options()” to Query, to so options can be passed to the resulting
    statement. Currently only Select-statements have these options, and the only option
    used is “stream_results”, and the only dialect which knows “stream_results” is
    psycopg2.
  id: totrans-4613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了“execution_options()”，以便可以将选项传递给生成的语句。目前只有Select语句有这些选项，而且唯一使用的选项是“stream_results”，唯一知道“stream_results”的方言是psycopg2。
- en: '**[orm]**'
  id: totrans-4614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.yield_per() will set the “stream_results” statement option automatically.
  id: totrans-4615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.yield_per()将自动设置“stream_results”语句选项。
- en: '**[orm]**'
  id: totrans-4616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Deprecated or removed:'
  id: totrans-4617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用或移除：
- en: ’allow_null_pks’ flag on mapper() is deprecated. It does nothing now and the
    setting is “on” in all cases.
  id: totrans-4618
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在mapper()上的’allow_null_pks’标志已被弃用。现在它什么也不做，而且在所有情况下设置为“on”。
- en: ’transactional’ flag on sessionmaker() and others is removed. Use ‘autocommit=True’
    to indicate ‘transactional=False’.
  id: totrans-4619
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在sessionmaker()和其他地方的’transactional’标志已被移除。使用‘autocommit=True’来表示‘transactional=False’。
- en: ’polymorphic_fetch’ argument on mapper() is removed. Loading can be controlled
    using the ‘with_polymorphic’ option.
  id: totrans-4620
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在mapper()上的’polymorphic_fetch’参数已被移除。加载可以使用‘with_polymorphic’选项来控制。
- en: ’select_table’ argument on mapper() is removed. Use ‘with_polymorphic=(“*”,
    <some selectable>)’ for this functionality.
  id: totrans-4621
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: mapper() 上的 ‘select_table’ 参数已被移除。对于此功能，请使用 ‘with_polymorphic=(“*”, <some selectable>)’。
- en: ’proxy’ argument on synonym() is removed. This flag did nothing throughout 0.5,
    as the “proxy generation” behavior is now automatic.
  id: totrans-4622
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: synonym() 上的 ‘proxy’ 参数已被移除。这个标志在 0.5 版本中没有起作用，因为“代理生成”行为现在是自动的。
- en: Passing a single list of elements to eagerload(), eagerload_all(), contains_eager(),
    lazyload(), defer(), and undefer() instead of multiple positional *args is deprecated.
  id: totrans-4623
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一组元素传递给 eagerload()、eagerload_all()、contains_eager()、lazyload()、defer() 和 undefer()
    而不是多个位置参数已被弃用。
- en: Passing a single list of elements to query.order_by(), query.group_by(), query.join(),
    or query.outerjoin() instead of multiple positional *args is deprecated.
  id: totrans-4624
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一组元素传递给 query.order_by()、query.group_by()、query.join() 或 query.outerjoin()
    而不是多个位置参数已被弃用。
- en: query.iterate_instances() is removed. Use query.instances().
  id: totrans-4625
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query.iterate_instances() 被移除。使用 query.instances()。
- en: Query.query_from_parent() is removed. Use the sqlalchemy.orm.with_parent() function
    to produce a “parent” clause, or alternatively query.with_parent().
  id: totrans-4626
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Query.query_from_parent() 被移除。使用 sqlalchemy.orm.with_parent() 函数生成一个“parent”子句，或者使用
    query.with_parent()。
- en: query._from_self() is removed, use query.from_self() instead.
  id: totrans-4627
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: query._from_self() 被移除，改用 query.from_self()。
- en: the “comparator” argument to composite() is removed. Use “comparator_factory”.
  id: totrans-4628
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: composite() 上的 “comparator” 参数已被移除。使用 “comparator_factory”。
- en: RelationProperty._get_join() is removed.
  id: totrans-4629
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RelationProperty._get_join() 被移除。
- en: the ‘echo_uow’ flag on Session is removed. Use logging on the “sqlalchemy.orm.unitofwork”
    name.
  id: totrans-4630
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Session 上的 ‘echo_uow’ 标志已被移除。在 “sqlalchemy.orm.unitofwork” 名称上使用日志记录。
- en: session.clear() is removed. use session.expunge_all().
  id: totrans-4631
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.clear() 被移除。使用 session.expunge_all()。
- en: session.save(), session.update(), session.save_or_update() are removed. Use
    session.add() and session.add_all().
  id: totrans-4632
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.save()、session.update()、session.save_or_update() 被移除。使用 session.add()
    和 session.add_all()。
- en: the “objects” flag on session.flush() remains deprecated.
  id: totrans-4633
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.flush() 上的 “objects” 标志仍然被弃用。
- en: the “dont_load=True” flag on session.merge() is deprecated in favor of “load=False”.
  id: totrans-4634
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.merge() 上的 “dont_load=True” 标志已被弃用，改用 “load=False”。
- en: ScopedSession.mapper remains deprecated. See the usage recipe at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
  id: totrans-4635
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ScopedSession.mapper 仍然被弃用。请参阅 [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    上的用法示例。
- en: passing an InstanceState (internal SQLAlchemy state object) to attributes.init_collection()
    or attributes.get_history() is deprecated. These functions are public API and
    normally expect a regular mapped object instance.
  id: totrans-4636
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 InstanceState（内部 SQLAlchemy 状态对象）传递给 attributes.init_collection() 或 attributes.get_history()
    已被弃用。这些函数是公共 API，通常期望一个常规映射对象实例。
- en: the ‘engine’ parameter to declarative_base() is removed. Use the ‘bind’ keyword
    argument.
  id: totrans-4637
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: declarative_base() 上的 ‘engine’ 参数已被移除。使用 ‘bind’ 关键字参数。
- en: sql
  id: totrans-4638
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-4639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “autocommit” flag on select() and text() as well as select().autocommit()
    are deprecated - now call .execution_options(autocommit=True) on either of those
    constructs, also available directly on Connection and orm.Query.
  id: totrans-4640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 和 text() 上的 “autocommit” 标志以及 select().autocommit() 都已被弃用 - 现在在这些构造之一上调用
    .execution_options(autocommit=True)，也可以直接在 Connection 和 orm.Query 上使用。
- en: '**[sql]**'
  id: totrans-4641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the autoincrement flag on column now indicates the column which should be linked
    to cursor.lastrowid, if that method is used. See the API docs for details.
  id: totrans-4642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column 上的 autoincrement 标志现在指示应链接到 cursor.lastrowid 的列，如果使用该方法。有关详细信息，请参阅 API
    文档。
- en: '**[sql]**'
  id: totrans-4643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: an executemany() now requires that all bound parameter sets require that all
    keys are present which are present in the first bound parameter set. The structure
    and behavior of an insert/update statement is very much determined by the first
    parameter set, including which defaults are going to fire off, and a minimum of
    guesswork is performed with all the rest so that performance is not impacted.
    For this reason defaults would otherwise silently “fail” for missing parameters,
    so this is now guarded against.
  id: totrans-4644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，executemany() 要求所有绑定的参数集中都必须包含第一个绑定的参数集中存在的所有键。插入/更新语句的结构和行为在很大程度上由第一个参数集确定，包括哪些默认值将触发，所有其他参数集都会进行最少的猜测，以确保不影响性能。因此，默认值否则会对缺少的参数“失败”，因此现在已经受到保护。
- en: 'References: [#1566](https://www.sqlalchemy.org/trac/ticket/1566)'
  id: totrans-4645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1566](https://www.sqlalchemy.org/trac/ticket/1566)
- en: '**[sql]**'
  id: totrans-4646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: returning() support is native to insert(), update(), delete(). Implementations
    of varying levels of functionality exist for PostgreSQL, Firebird, MSSQL and Oracle.
    returning() can be called explicitly with column expressions which are then returned
    in the resultset, usually via fetchone() or first().
  id: totrans-4647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: insert()、update()、delete()现在原生支持returning()。对于PostgreSQL、Firebird、MSSQL和Oracle，存在不同级别功能的实现。returning()可以显式调用列表达式，然后通过fetchone()或first()通常返回结果集。
- en: insert() constructs will also use RETURNING implicitly to get newly generated
    primary key values, if the database version in use supports it (a version number
    check is performed). This occurs if no end-user returning() was specified.
  id: totrans-4648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果正在使用的数据库版本支持它（执行版本号检查），insert()构造也将隐式使用RETURNING来获取新生成的主键值。如果没有指定最终用户returning()，则会发生这种情况。
- en: '**[sql]**'
  id: totrans-4649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: union(), intersect(), except() and other “compound” types of statements have
    more consistent behavior w.r.t. parenthesizing. Each compound element embedded
    within another will now be grouped with parenthesis - previously, the first compound
    element in the list would not be grouped, as SQLite doesn’t like a statement to
    start with parenthesis. However, PostgreSQL in particular has precedence rules
    regarding INTERSECT, and it is more consistent for parenthesis to be applied equally
    to all sub-elements. So now, the workaround for SQLite is also what the workaround
    for PG was previously - when nesting compound elements, the first one usually
    needs “.alias().select()” called on it to wrap it inside of a subquery.
  id: totrans-4650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: union()、intersect()、except()和其他“复合”类型的语句在括号方面有更一致的行为。现在，嵌套在另一个中的每个复合元素将使用括号分组
    - 以前，列表中的第一个复合元素不会被分组，因为SQLite不喜欢以括号开头的语句。然而，特别是PostgreSQL对INTERSECT有优先规则，并且对所有子元素应用括号更一致。因此，现在，SQLite的解决方法也是以前PG的解决方法
    - 在嵌套复合元素时，通常需要对第一个元素调用“.alias().select()”来将其包装在子查询中。
- en: 'References: [#1665](https://www.sqlalchemy.org/trac/ticket/1665)'
  id: totrans-4651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1665](https://www.sqlalchemy.org/trac/ticket/1665)
- en: '**[sql]**'
  id: totrans-4652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: insert() and update() constructs can now embed bindparam() objects using names
    that match the keys of columns. These bind parameters will circumvent the usual
    route to those keys showing up in the VALUES or SET clause of the generated SQL.
  id: totrans-4653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: insert()和update()构造现在可以使用与列键匹配的名称嵌入bindparam()对象。这些绑定参数将绕过通常导致这些键出现在生成的SQL的VALUES或SET子句中的路径。
- en: 'References: [#1579](https://www.sqlalchemy.org/trac/ticket/1579)'
  id: totrans-4654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1579](https://www.sqlalchemy.org/trac/ticket/1579)
- en: '**[sql]**'
  id: totrans-4655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Binary type now returns data as a Python string (or a “bytes” type in Python
    3), instead of the built- in “buffer” type. This allows symmetric round trips
    of binary data.
  id: totrans-4656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Binary类型现在将数据作为Python字符串（或Python 3中的“bytes”类型）返回，而不是内置的“buffer”类型。这允许二进制数据的对称往返。
- en: 'References: [#1524](https://www.sqlalchemy.org/trac/ticket/1524)'
  id: totrans-4657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1524](https://www.sqlalchemy.org/trac/ticket/1524)
- en: '**[sql]**'
  id: totrans-4658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a tuple_() construct, allows sets of expressions to be compared to another
    set, typically with IN against composite primary keys or similar. Also accepts
    an IN with multiple columns. The “scalar select can have only one column” error
    message is removed - will rely upon the database to report problems with col mismatch.
  id: totrans-4659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个tuple_()构造，允许将一组表达式与另一组进行比较，通常使用IN针对复合主键或类似的情况。还接受具有多个列的IN。删除了“标量选择只能有一列”错误消息
    - 将依赖数据库报告列不匹配的问题。
- en: '**[sql]**'
  id: totrans-4660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: User-defined “default” and “onupdate” callables which accept a context should
    now call upon “context.current_parameters” to get at the dictionary of bind parameters
    currently being processed. This dict is available in the same way regardless of
    single-execute or executemany-style statement execution.
  id: totrans-4661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，接受上下文的用户定义的“default”和“onupdate”可调用程序应该调用“context.current_parameters”来获取当前正在处理的绑定参数字典。无论是单次执行还是executemany-style语句执行，这个字典都以相同的方式可用。
- en: '**[sql]**'
  id: totrans-4662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: multi-part schema names, i.e. with dots such as “dbo.master”, are now rendered
    in select() labels with underscores for dots, i.e. “dbo_master_table_column”.
    This is a “friendly” label that behaves better in result sets.
  id: totrans-4663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多部分模式名称，例如带有点号的“dbo.master”，现在在select()标签中以下划线代替点号，即“dbo_master_table_column”。这是一个在结果集中表现更好的“友好”标签。
- en: 'References: [#1428](https://www.sqlalchemy.org/trac/ticket/1428)'
  id: totrans-4664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1428](https://www.sqlalchemy.org/trac/ticket/1428)
- en: '**[sql]**'
  id: totrans-4665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: removed needless “counter” behavior with select() labelnames that match a column
    name in the table, i.e. generates “tablename_id” for “id”, instead of “tablename_id_1”
    in an attempt to avoid naming conflicts, when the table has a column actually
    named “tablename_id” - this is because the labeling logic is always applied to
    all columns so a naming conflict will never occur.
  id: totrans-4666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了不必要的“counter”行为，当 select() 标签名称与表中的列名匹配时，例如为“id”生成“tablename_id”，而不是尝试避免命名冲突生成“tablename_id_1”，当表中实际上有一个名为“tablename_id”的列时，因为标签逻辑总是应用于所有列，所以永远不会发生命名冲突。
- en: '**[sql]**'
  id: totrans-4667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: calling expr.in_([]), i.e. with an empty list, emits a warning before issuing
    the usual “expr != expr” clause. The “expr != expr” can be very expensive, and
    it’s preferred that the user not issue in_() if the list is empty, instead simply
    not querying, or modifying the criterion as appropriate for more complex situations.
  id: totrans-4668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用 expr.in_([])，即使用空列表，会在发出通常的“expr != expr”子句之前发出警告。 “expr != expr” 可能非常昂贵，最好用户在列表为空时不发出
    in_()，而是简单地不查询，或根据更复杂的情况修改条件。
- en: 'References: [#1628](https://www.sqlalchemy.org/trac/ticket/1628)'
  id: totrans-4669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1628](https://www.sqlalchemy.org/trac/ticket/1628)
- en: '**[sql]**'
  id: totrans-4670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “execution_options()” to select()/text(), which set the default options
    for the Connection. See the note in “engines”.
  id: totrans-4671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 select()/text() 中添加了“execution_options()”，用于为 Connection 设置默认选项。请参阅“engines”中的说明。
- en: '**[sql]**'
  id: totrans-4672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: 'Deprecated or removed:'
  id: totrans-4673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用或移除的内容：
- en: ”scalar” flag on select() is removed, use select.as_scalar().
  id: totrans-4674
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 select() 上的“scalar”标志被移除，使用 select.as_scalar()。
- en: ”shortname” attribute on bindparam() is removed.
  id: totrans-4675
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: bindparam() 上的“shortname”属性已被移除。
- en: postgres_returning, firebird_returning flags on insert(), update(), delete()
    are deprecated, use the new returning() method.
  id: totrans-4676
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 insert()、update()、delete() 上弃用了 postgres_returning、firebird_returning 标志，使用新的
    returning() 方法。
- en: fold_equivalents flag on join is deprecated (will remain until is implemented)
  id: totrans-4677
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join 上的 fold_equivalents 标志被弃用（将保留直到实现）。
- en: 'References: [#1131](https://www.sqlalchemy.org/trac/ticket/1131)'
  id: totrans-4678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1131](https://www.sqlalchemy.org/trac/ticket/1131)
- en: schema
  id: totrans-4679
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-4680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: the __contains__() method of MetaData now accepts strings or Table objects as
    arguments. If given a Table, the argument is converted to table.key first, i.e.
    “[schemaname.]<tablename>”
  id: totrans-4681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData 的 __contains__() 方法现在接受字符串或 Table 对象作为参数。如果给定一个 Table，参数首先转换为 table.key，即“[schemaname.]<tablename>”。
- en: 'References: [#1541](https://www.sqlalchemy.org/trac/ticket/1541)'
  id: totrans-4682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1541](https://www.sqlalchemy.org/trac/ticket/1541)
- en: '**[schema]**'
  id: totrans-4683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: deprecated MetaData.connect() and ThreadLocalMetaData.connect() have been removed
    - send the “bind” attribute to bind a metadata.
  id: totrans-4684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用的 MetaData.connect() 和 ThreadLocalMetaData.connect() 已被移除 - 将“bind”属性发送到绑定元数据。
- en: '**[schema]**'
  id: totrans-4685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: deprecated metadata.table_iterator() method removed (use sorted_tables)
  id: totrans-4686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了弃用的 metadata.table_iterator() 方法（使用 sorted_tables）
- en: '**[schema]**'
  id: totrans-4687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: deprecated PassiveDefault - use DefaultClause.
  id: totrans-4688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用的 PassiveDefault - 使用 DefaultClause。
- en: '**[schema]**'
  id: totrans-4689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: the “metadata” argument is removed from DefaultGenerator and subclasses, but
    remains locally present on Sequence, which is a standalone construct in DDL.
  id: totrans-4690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DefaultGenerator 和子类中移除了“metadata”参数，但在 Sequence 上仍然本地存在，Sequence 是 DDL 中的一个独立构造。
- en: '**[schema]**'
  id: totrans-4691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: 'Removed public mutability from Index and Constraint objects:'
  id: totrans-4692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 Index 和 Constraint 对象中移除了公共的可变性：
- en: ForeignKeyConstraint.append_element()
  id: totrans-4693
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ForeignKeyConstraint.append_element()
- en: ''
  id: totrans-4694
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4695
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Index.append_column()
  id: totrans-4696
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Index.append_column()
- en: ''
  id: totrans-4697
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4698
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: UniqueConstraint.append_column()
  id: totrans-4699
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: UniqueConstraint.append_column()
- en: ''
  id: totrans-4700
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4701
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PrimaryKeyConstraint.add()
  id: totrans-4702
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PrimaryKeyConstraint.add()
- en: ''
  id: totrans-4703
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4704
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PrimaryKeyConstraint.remove()
  id: totrans-4705
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PrimaryKeyConstraint.remove()
- en: These should be constructed declaratively (i.e. in one construction).
  id: totrans-4706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些应该以声明方式构建（即在一个构造中）。
- en: '**[schema]**'
  id: totrans-4707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The “start” and “increment” attributes on Sequence now generate “START WITH”
    and “INCREMENT BY” by default, on Oracle and PostgreSQL. Firebird doesn’t support
    these keywords right now.
  id: totrans-4708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sequence 上的“start”和“increment”属性现在默认生成“START WITH”和“INCREMENT BY”，在 Oracle 和
    PostgreSQL 上。 Firebird 目前不支持这些关键字。
- en: 'References: [#1545](https://www.sqlalchemy.org/trac/ticket/1545)'
  id: totrans-4709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1545](https://www.sqlalchemy.org/trac/ticket/1545)
- en: '**[schema]**'
  id: totrans-4710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: UniqueConstraint, Index, PrimaryKeyConstraint all accept lists of column names
    or column objects as arguments.
  id: totrans-4711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: UniqueConstraint、Index、PrimaryKeyConstraint 都接受列名或列对象的列表作为参数。
- en: '**[schema]**'
  id: totrans-4712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: 'Other removed things:'
  id: totrans-4713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他被移除的内容：
- en: Table.key (no idea what this was for)
  id: totrans-4714
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Table.key（不知道这是用来做什么的）
- en: Table.primary_key is not assignable - use table.append_constraint(PrimaryKeyConstraint(…))
  id: totrans-4715
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Table.primary_key 不可分配 - 使用 table.append_constraint(PrimaryKeyConstraint(…))
- en: Column.bind (get via column.table.bind)
  id: totrans-4716
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.bind（通过 column.table.bind 获取）
- en: Column.metadata (get via column.table.metadata)
  id: totrans-4717
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.metadata（通过 column.table.metadata 获取）
- en: Column.sequence (use column.default)
  id: totrans-4718
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Column.sequence（使用 column.default）
- en: ForeignKey(constraint=some_parent) (is now private _constraint)
  id: totrans-4719
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ForeignKey（约束=some_parent）（现在是私有 _constraint）
- en: '**[schema]**'
  id: totrans-4720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The use_alter flag on ForeignKey is now a shortcut option for operations that
    can be hand-constructed using the DDL() event system. A side effect of this refactor
    is that ForeignKeyConstraint objects with use_alter=True will *not* be emitted
    on SQLite, which does not support ALTER for foreign keys.
  id: totrans-4721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey 上的 use_alter 标志现在是使用 DDL() 事件系统手工构造的操作的快捷选项。此重构的一个副作用是，具有 use_alter=True
    的 ForeignKeyConstraint 对象将不会在 SQLite 上生成，因为 SQLite 不支持外键的 ALTER。
- en: '**[schema]**'
  id: totrans-4722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: ForeignKey and ForeignKeyConstraint objects now correctly copy() all their public
    keyword arguments.
  id: totrans-4723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey 和 ForeignKeyConstraint 对象现在正确地复制了它们所有的公共关键字参数。
- en: 'References: [#1605](https://www.sqlalchemy.org/trac/ticket/1605)'
  id: totrans-4724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1605](https://www.sqlalchemy.org/trac/ticket/1605)
- en: postgresql
  id: totrans-4725
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-4726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: 'New dialects: pg8000, zxjdbc, and pypostgresql on py3k.'
  id: totrans-4727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的方言：pg8000、zxjdbc 和 pypostgresql 在 py3k 上。
- en: '**[postgresql]**'
  id: totrans-4728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: 'The “postgres” dialect is now named “postgresql” ! Connection strings look
    like:'
  id: totrans-4729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “postgres”方言现在命名为“postgresql”！连接字符串如下所示：
- en: postgresql://scott:tiger@localhost/test postgresql+pg8000://scott:tiger@localhost/test
  id: totrans-4730
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: postgresql://scott:tiger@localhost/test postgresql+pg8000://scott:tiger@localhost/test
- en: ''
  id: totrans-4731
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The “postgres” name remains for backwards compatibility in the following ways:'
  id: totrans-4732
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “postgres”名称在以下方面保持向后兼容性：
- en: ''
  id: totrans-4733
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is a “postgres.py” dummy dialect which allows old URLs to work, i.e. postgres://scott:tiger@localhost/test
  id: totrans-4734
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个“postgres.py”虚拟方言，允许旧的 URL 工作，即 postgres://scott:tiger@localhost/test
- en: ''
  id: totrans-4735
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4736
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The “postgres” name can be imported from the old “databases” module, i.e. “from
    sqlalchemy.databases import postgres” as well as “dialects”, “from sqlalchemy.dialects.postgres
    import base as pg”, will send a deprecation warning.
  id: totrans-4737
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: “postgres”名称可以从旧的“databases”模块导入，即“from sqlalchemy.databases import postgres”以及“dialects”、“from
    sqlalchemy.dialects.postgres import base as pg”，将发送警告。
- en: ''
  id: totrans-4738
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4739
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Special expression arguments are now named “postgresql_returning” and “postgresql_where”,
    but the older “postgres_returning” and “postgres_where” names still work with
    a deprecation warning.
  id: totrans-4740
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊表达式参数现在命名为“postgresql_returning”和“postgresql_where”，但较旧的“postgres_returning”和“postgres_where”名称仍然可以与警告进行使用。
- en: '**[postgresql]**'
  id: totrans-4741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: ”postgresql_where” now accepts SQL expressions which can also include literals,
    which will be quoted as needed.
  id: totrans-4742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “postgresql_where”现在接受 SQL 表达式，该表达式还可以包括字面值，需要时将进行引用。
- en: '**[postgresql]**'
  id: totrans-4743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 dialect now uses psycopg2’s “unicode extension” on all new connections,
    which allows all String/Text/etc. types to skip the need to post-process bytestrings
    into unicode (an expensive step due to its volume). Other dialects which return
    unicode natively (pg8000, zxjdbc) also skip unicode post-processing.
  id: totrans-4744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 方言现在在所有新连接上使用 psycopg2 的“Unicode 扩展”，这允许所有 String/Text/等类型跳过将字节字符串后处理为
    Unicode 的需要（由于其数量而成为昂贵的步骤）。其他本机返回 Unicode 的方言（pg8000、zxjdbc）也跳过了 Unicode 后处理。
- en: '**[postgresql]**'
  id: totrans-4745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added new ENUM type, which exists as a schema-level construct and extends the
    generic Enum type. Automatically associates itself with tables and their parent
    metadata to issue the appropriate CREATE TYPE/DROP TYPE commands as needed, supports
    unicode labels, supports reflection.
  id: totrans-4746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的枚举类型，作为模式级构造存在，并扩展了通用的枚举类型。自动将自身与表及其父级元数据关联起来，以根据需要发出适当的 CREATE TYPE/DROP
    TYPE 命令，支持 Unicode 标签，支持反射。
- en: 'References: [#1511](https://www.sqlalchemy.org/trac/ticket/1511)'
  id: totrans-4747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1511](https://www.sqlalchemy.org/trac/ticket/1511)
- en: '**[postgresql]**'
  id: totrans-4748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: INTERVAL supports an optional “precision” argument corresponding to the argument
    that PG accepts.
  id: totrans-4749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: INTERVAL 支持一个可选的“精度”参数，对应于 PG 接受的参数。
- en: '**[postgresql]**'
  id: totrans-4750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-4751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的 dialect.initialize() 特性来设置版本相关的行为。
- en: '**[postgresql]**'
  id: totrans-4752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: somewhat better support for % signs in table/column names; psycopg2 can’t handle
    a bind parameter name of %(foobar)s however and SQLA doesn’t want to add overhead
    just to treat that one non-existent use case.
  id: totrans-4753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对表/列名称中的%符号提供了更好的支持；然而，psycopg2 无法处理绑定参数名称为%(foobar)s的情况，而 SQLA 不希望仅为处理那种不存在的用例而增加开销。
- en: 'References: [#1279](https://www.sqlalchemy.org/trac/ticket/1279)'
  id: totrans-4754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1279](https://www.sqlalchemy.org/trac/ticket/1279)
- en: '**[postgresql]**'
  id: totrans-4755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Inserting NULL into a primary key + foreign key column will allow the “not null
    constraint” error to raise, not an attempt to execute a nonexistent “col_id_seq”
    sequence.
  id: totrans-4756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 NULL 插入主键 + 外键列将允许引发“非空约束”错误，而不是尝试执行不存在的“col_id_seq”序列。
- en: 'References: [#1516](https://www.sqlalchemy.org/trac/ticket/1516)'
  id: totrans-4757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1516](https://www.sqlalchemy.org/trac/ticket/1516)
- en: '**[postgresql]**'
  id: totrans-4758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: autoincrement SELECT statements, i.e. those which select from a procedure that
    modifies rows, now work with server-side cursor mode (the named cursor isn’t used
    for such statements.)
  id: totrans-4759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自增SELECT语句，即从修改行的过程中选择的语句，现在可以使用服务器端游标模式（对于这些语句不使用命名游标）。
- en: '**[postgresql]**'
  id: totrans-4760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: postgresql dialect can properly detect pg “devel” version strings, i.e. “8.5devel”
  id: totrans-4761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql dialect现在可以正确检测pg“devel”版本字符串，即“8.5devel”。
- en: 'References: [#1636](https://www.sqlalchemy.org/trac/ticket/1636)'
  id: totrans-4762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1636](https://www.sqlalchemy.org/trac/ticket/1636)
- en: '**[postgresql]**'
  id: totrans-4763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The psycopg2 now respects the statement option “stream_results”. This option
    overrides the connection setting “server_side_cursors”. If true, server side cursors
    will be used for the statement. If false, they will not be used, even if “server_side_cursors”
    is true on the connection.
  id: totrans-4764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2现在尊重语句选项“stream_results”。此选项将覆盖连接设置“server_side_cursors”。如果为true，则语句将使用服务器端游标。如果为false，则不会使用，即使连接上的“server_side_cursors”为true。
- en: 'References: [#1619](https://www.sqlalchemy.org/trac/ticket/1619)'
  id: totrans-4765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1619](https://www.sqlalchemy.org/trac/ticket/1619)
- en: mysql
  id: totrans-4766
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-4767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: 'New dialects: oursql, a new native dialect, MySQL Connector/Python, a native
    Python port of MySQLdb, and of course zxjdbc on Jython.'
  id: totrans-4768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的dialects：oursql，一个新的本地dialect，MySQL Connector/Python，MySQLdb的本地Python端口，当然还有Jython上的zxjdbc。
- en: '**[mysql]**'
  id: totrans-4769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: VARCHAR/NVARCHAR will not render without a length, raises an error before passing
    to MySQL. Doesn’t impact CAST since VARCHAR is not allowed in MySQL CAST anyway,
    the dialect renders CHAR/NCHAR in those cases.
  id: totrans-4770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: VARCHAR/NVARCHAR如果没有长度将无法渲染，在传递给MySQL之前会引发错误。在MySQL CAST中不会影响CAST，因为MySQL CAST中不允许VARCHAR，dialect在这种情况下渲染CHAR/NCHAR。
- en: '**[mysql]**'
  id: totrans-4771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: all the _detect_XXX() functions now run once underneath dialect.initialize()
  id: totrans-4772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有_detect_XXX()函数现在在dialect.initialize()下运行一次。
- en: '**[mysql]**'
  id: totrans-4773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: somewhat better support for % signs in table/column names; MySQLdb can’t handle
    % signs in SQL when executemany() is used, and SQLA doesn’t want to add overhead
    just to treat that one non-existent use case.
  id: totrans-4774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对表/列名称中的%符号提供了更好的支持；当使用executemany()时，MySQLdb无法处理SQL中的%符号，而SQLA不希望为了处理那一个不存在的用例而增加开销。
- en: 'References: [#1279](https://www.sqlalchemy.org/trac/ticket/1279)'
  id: totrans-4775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1279](https://www.sqlalchemy.org/trac/ticket/1279)
- en: '**[mysql]**'
  id: totrans-4776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the BINARY and MSBinary types now generate “BINARY” in all cases. Omitting the
    “length” parameter will generate “BINARY” with no length. Use BLOB to generate
    an unlengthed binary column.
  id: totrans-4777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BINARY和MSBinary类型现在在所有情况下生成“BINARY”。省略“length”参数将生成没有长度的“BINARY”。使用BLOB生成一个无长度的二进制列。
- en: '**[mysql]**'
  id: totrans-4778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the “quoting=’quoted’” argument to MSEnum/ENUM is deprecated. It’s best to rely
    upon the automatic quoting.
  id: totrans-4779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSEnum/ENUM的“quoting='quoted'”参数已弃用。最好依赖于自动引用。
- en: '**[mysql]**'
  id: totrans-4780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ENUM now subclasses the new generic Enum type, and also handles unicode values
    implicitly, if the given labelnames are unicode objects.
  id: totrans-4781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ENUM现在是新的通用Enum类型的子类，并且如果给定的标签名是unicode对象，则隐式处理unicode值。
- en: '**[mysql]**'
  id: totrans-4782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a column of type TIMESTAMP now defaults to NULL if “nullable=False” is not passed
    to Column(), and no default is present. This is now consistent with all other
    types, and in the case of TIMESTAMP explicitly renders “NULL” due to MySQL’s “switching”
    of default nullability for TIMESTAMP columns.
  id: totrans-4783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“nullable=False”未传递给Column()，且没有默认值，则类型为TIMESTAMP的列现在默认为NULL。这与所有其他类型一致，对于TIMESTAMP，由于MySQL对TIMESTAMP列的默认可空性进行了“切换”，因此明确呈现“NULL”。
- en: 'References: [#1539](https://www.sqlalchemy.org/trac/ticket/1539)'
  id: totrans-4784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1539](https://www.sqlalchemy.org/trac/ticket/1539)
- en: sqlite
  id: totrans-4785
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-4786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: DATE, TIME and DATETIME types can now take optional storage_format and regexp
    argument. storage_format can be used to store those types using a custom string
    format. regexp allows to use a custom regular expression to match string values
    from the database.
  id: totrans-4787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DATE、TIME和DATETIME类型现在可以接受可选的storage_format和regexp参数。storage_format可用于使用自定义字符串格式存储这些类型。regexp允许使用自定义正则表达式匹配数据库中的字符串值。
- en: '**[sqlite]**'
  id: totrans-4788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Time and DateTime types now use by a default a stricter regular expression to
    match strings from the database. Use the regexp argument if you are using data
    stored in a legacy format.
  id: totrans-4789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Time和DateTime类型现在默认使用更严格的正则表达式来匹配数据库中的字符串。如果使用存储在旧格式中的数据，请使用regexp参数。
- en: '**[sqlite]**'
  id: totrans-4790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: __legacy_microseconds__ on SQLite Time and DateTime types is not supported anymore.
    You should use the storage_format argument instead.
  id: totrans-4791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite Time和DateTime类型上的__legacy_microseconds__不再受支持。您应该使用storage_format参数。
- en: '**[sqlite]**'
  id: totrans-4792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: 'Date, Time and DateTime types are now stricter in what they accept as bind
    parameters: Date type only accepts date objects (and datetime ones, because they
    inherit from date), Time only accepts time objects, and DateTime only accepts
    date and datetime objects.'
  id: totrans-4793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Date、Time和DateTime类型现在在接受绑定参数时更加严格：Date类型仅接受日期对象（以及日期时间对象，因为它们继承自日期），Time仅接受时间对象，DateTime仅接受日期和日期时间对象。
- en: '**[sqlite]**'
  id: totrans-4794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Table() supports a keyword argument “sqlite_autoincrement”, which applies the
    SQLite keyword “AUTOINCREMENT” to the single integer primary key column when generating
    DDL. Will prevent generation of a separate PRIMARY KEY constraint.
  id: totrans-4795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table()支持一个关键字参数“sqlite_autoincrement”，在生成DDL时将SQLite关键字“AUTOINCREMENT”应用于单个整数主键列。这将阻止生成单独的PRIMARY
    KEY约束。
- en: 'References: [#1016](https://www.sqlalchemy.org/trac/ticket/1016)'
  id: totrans-4796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1016](https://www.sqlalchemy.org/trac/ticket/1016)
- en: mssql
  id: totrans-4797
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-4798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: MSSQL + Pyodbc + FreeTDS now works for the most part, with possible exceptions
    regarding binary data as well as unicode schema identifiers.
  id: totrans-4799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL + Pyodbc + FreeTDS现在大部分情况下可以正常工作，可能会有关于二进制数据以及Unicode模式标识符的异常情况。
- en: '**[mssql]**'
  id: totrans-4800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the “has_window_funcs” flag is removed. LIMIT/OFFSET usage will use ROW NUMBER
    as always, and if on an older version of SQL Server, the operation fails. The
    behavior is exactly the same except the error is raised by SQL server instead
    of the dialect, and no flag setting is required to enable it.
  id: totrans-4801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “has_window_funcs”标志已移除。LIMIT/OFFSET使用将像以前一样使用ROW NUMBER，如果在较旧版本的SQL Server上，则操作失败。行为完全相同，只是错误由SQL
    Server引发而不是方言，并且不需要设置标志来启用它。
- en: '**[mssql]**'
  id: totrans-4802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the “auto_identity_insert” flag is removed. This feature always takes effect
    when an INSERT statement overrides a column that is known to have a sequence on
    it. As with “has_window_funcs”, if the underlying driver doesn’t support this,
    then you can’t do this operation in any case, so there’s no point in having a
    flag.
  id: totrans-4803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “auto_identity_insert”标志已移除。当INSERT语句覆盖已知具有序列的列时，此功能始终生效。与“has_window_funcs”一样，如果底层驱动程序不支持此功能，则无论如何都无法执行此操作，因此没有必��设置标志。
- en: '**[mssql]**'
  id: totrans-4804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-4805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的dialect.initialize()功能来设置版本相关的行为。
- en: '**[mssql]**'
  id: totrans-4806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: removed references to sequence which is no longer used. implicit identities
    in mssql work the same as implicit sequences on any other dialects. Explicit sequences
    are enabled through the use of “default=Sequence()”. See the MSSQL dialect documentation
    for more information.
  id: totrans-4807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了不再使用的sequence的引用。在mssql中，隐式标识与其他方言上的隐式序列相同。通过使用“default=Sequence()”启用显式序列。有关更多信息，请参阅MSSQL方言文档。
- en: oracle
  id: totrans-4808
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-4809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: unit tests pass 100% with cx_oracle !
  id: totrans-4810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试与cx_oracle完全通过！
- en: '**[oracle]**'
  id: totrans-4811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: support for cx_Oracle’s “native unicode” mode which does not require NLS_LANG
    to be set. Use the latest 5.0.2 or later of cx_oracle.
  id: totrans-4812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持cx_Oracle的“本地unicode”模式，不需要设置NLS_LANG。使用最新的cx_oracle 5.0.2或更高版本。
- en: '**[oracle]**'
  id: totrans-4813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: an NCLOB type is added to the base types.
  id: totrans-4814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在基本类型中添加了NCLOB类型。
- en: '**[oracle]**'
  id: totrans-4815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: use_ansi=False won’t leak into the FROM/WHERE clause of a statement that’s selecting
    from a subquery that also uses JOIN/OUTERJOIN.
  id: totrans-4816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: use_ansi=False不会泄漏到从子查询中选择的语句的FROM/WHERE子句中，该子查询还使用JOIN/OUTERJOIN。
- en: '**[oracle]**'
  id: totrans-4817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added native INTERVAL type to the dialect. This supports only the DAY TO SECOND
    interval type so far due to lack of support in cx_oracle for YEAR TO MONTH.
  id: totrans-4818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在方言中添加了本地INTERVAL类型。目前仅支持DAY TO SECOND间隔类型，因为cx_oracle不支持YEAR TO MONTH。
- en: 'References: [#1467](https://www.sqlalchemy.org/trac/ticket/1467)'
  id: totrans-4819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1467](https://www.sqlalchemy.org/trac/ticket/1467)
- en: '**[oracle]**'
  id: totrans-4820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: usage of the CHAR type results in cx_oracle’s FIXED_CHAR dbapi type being bound
    to statements.
  id: totrans-4821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用CHAR类型会导致cx_oracle的FIXED_CHAR dbapi类型绑定到语句。
- en: '**[oracle]**'
  id: totrans-4822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: the Oracle dialect now features NUMBER which intends to act justlike Oracle’s
    NUMBER type. It is the primary numeric type returned by table reflection and attempts
    to return Decimal()/float/int based on the precision/scale parameters.
  id: totrans-4823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言现在具有NUMBER，旨在像Oracle的NUMBER类型一样运行。它是表反射返回的主要数值类型，并尝试根据精度/比例参数返回Decimal()/float/int。
- en: 'References: [#885](https://www.sqlalchemy.org/trac/ticket/885)'
  id: totrans-4824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#885](https://www.sqlalchemy.org/trac/ticket/885)
- en: '**[oracle]**'
  id: totrans-4825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: func.char_length is a generic function for LENGTH
  id: totrans-4826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.char_length 是 LENGTH 的通用函数
- en: '**[oracle]**'
  id: totrans-4827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: ForeignKey() which includes onupdate=<value> will emit a warning, not emit ON
    UPDATE CASCADE which is unsupported by oracle
  id: totrans-4828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey() 包括 onupdate=<value> 将发出警告，不会发出不受 Oracle 支持的 ON UPDATE CASCADE。
- en: '**[oracle]**'
  id: totrans-4829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: the keys() method of RowProxy() now returns the result column names *normalized*
    to be SQLAlchemy case insensitive names. This means they will be lower case for
    case insensitive names, whereas the DBAPI would normally return them as UPPERCASE
    names. This allows row keys() to be compatible with further SQLAlchemy operations.
  id: totrans-4830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy() 的 keys() 方法现在返回结果列名*规范化*为 SQLAlchemy 不区分大小写的名称。这意味着对于不区分大小写的名称，它们将是小写的，而
    DBAPI 通常会将它们返回为大写名称。这使得行键() 可与进一步的 SQLAlchemy 操作兼容。
- en: '**[oracle]**'
  id: totrans-4831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-4832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的 dialect.initialize() 功能来设置版本相关的行为。
- en: '**[oracle]**'
  id: totrans-4833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: using types.BigInteger with Oracle will generate NUMBER(19)
  id: totrans-4834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 中使用 types.BigInteger 将生成 NUMBER(19)
- en: 'References: [#1125](https://www.sqlalchemy.org/trac/ticket/1125)'
  id: totrans-4835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1125](https://www.sqlalchemy.org/trac/ticket/1125)
- en: '**[oracle]**'
  id: totrans-4836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: ”case sensitivity” feature will detect an all-lowercase case-sensitive column
    name during reflect and add “quote=True” to the generated Column, so that proper
    quoting is maintained.
  id: totrans-4837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “区分大小写”功能将在反射期间检测到全小写的区分大小写列名，并向生成的 Column 添加“quote=True”，以便保持适当的引用。
- en: misc
  id: totrans-4838
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[major] [release]**'
  id: totrans-4839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[主要] [发布]**'
- en: For the full set of feature descriptions, see [https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html)
    . This document is a work in progress.
  id: totrans-4840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要查看完整的功能描述集，请参阅 [https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_06.html)。此文档正在进行中。
- en: '**[major] [release]**'
  id: totrans-4841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[主要] [发布]**'
- en: All bug fixes and feature enhancements from the most recent 0.5 version and
    below are also included within 0.6.
  id: totrans-4842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有最新版本 0.5 版本及以下的错误修复和功能增强也包含在 0.6 版本中。
- en: '**[major] [release]**'
  id: totrans-4843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[主要] [发布]**'
- en: Platforms targeted now include Python 2.4/2.5/2.6, Python 3.1, Jython2.5.
  id: totrans-4844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在针对的平台包括 Python 2.4/2.5/2.6，Python 3.1，Jython2.5。
- en: '**[engines]**'
  id: totrans-4845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: transaction isolation level may be specified with create_engine(… isolation_level=”…”);
    available on postgresql and sqlite.
  id: totrans-4846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 create_engine(… isolation_level=”…”) 指定事务隔离级别；在 postgresql 和 sqlite 上可用。
- en: 'References: [#443](https://www.sqlalchemy.org/trac/ticket/443)'
  id: totrans-4847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#443](https://www.sqlalchemy.org/trac/ticket/443)
- en: '**[engines]**'
  id: totrans-4848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection has execution_options(), generative method which accepts keywords
    that affect how the statement is executed w.r.t. the DBAPI. Currently supports
    “stream_results”, causes psycopg2 to use a server side cursor for that statement,
    as well as “autocommit”, which is the new location for the “autocommit” option
    from select() and text(). select() and text() also have .execution_options() as
    well as ORM Query().
  id: totrans-4849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection 现在具有 execution_options()，接受影响语句在 DBAPI 方面执行方式的关键字的生成方法。目前支持“stream_results”，导致
    psycopg2 使用服务器端游标执行该语句，以及“autocommit”，这是 select() 和 text() 中“autocommit”选项的新位置。select()
    和 text() 也有 .execution_options() 以及 ORM Query()。
- en: '**[engines]**'
  id: totrans-4850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: fixed the import for entrypoint-driven dialects to not rely upon silly tb_info
    trick to determine import error status.
  id: totrans-4851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基于 entrypoint 的方言导入，不再依赖于愚蠢的 tb_info 技巧来确定导入错误状态。
- en: 'References: [#1630](https://www.sqlalchemy.org/trac/ticket/1630)'
  id: totrans-4852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1630](https://www.sqlalchemy.org/trac/ticket/1630)
- en: '**[engines]**'
  id: totrans-4853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: added first() method to ResultProxy, returns first row and closes result set
    immediately.
  id: totrans-4854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 ResultProxy 添加了 first() 方法，返回第一行并立即关闭结果集。
- en: '**[engines]**'
  id: totrans-4855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: RowProxy objects are now pickleable, i.e. the object returned by result.fetchone(),
    result.fetchall() etc.
  id: totrans-4856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy 对象现在是可 pickle 的，即 result.fetchone()，result.fetchall() 等返回的对象。
- en: '**[engines]**'
  id: totrans-4857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: RowProxy no longer has a close() method, as the row no longer maintains a reference
    to the parent. Call close() on the parent ResultProxy instead, or use autoclose.
  id: totrans-4858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy 不再具有 close() 方法，因为行不再保留对父级的引用。而是在父级 ResultProxy 上调用 close()，或者使用 autoclose。
- en: '**[engines]**'
  id: totrans-4859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: ResultProxy internals have been overhauled to greatly reduce method call counts
    when fetching columns. Can provide a large speed improvement (up to more than
    100%) when fetching large result sets. The improvement is larger when fetching
    columns that have no type-level processing applied and when using results as tuples
    (instead of as dictionaries). Many thanks to Elixir’s Gaëtan de Menten for this
    dramatic improvement !
  id: totrans-4860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy内部已进行了大幅改进，以大大减少在获取列时的方法调用次数。在获取大型结果集时，可以提供大幅度的速度提升（高达100%以上）。当获取没有应用类型级处理的列并且使用结果作为元组（而不是字典）时，改进效果更大。非常感谢Elixir的Gaëtan
    de Menten为这一巨大的改进！
- en: 'References: [#1586](https://www.sqlalchemy.org/trac/ticket/1586)'
  id: totrans-4861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1586](https://www.sqlalchemy.org/trac/ticket/1586)
- en: '**[engines]**'
  id: totrans-4862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Databases which rely upon postfetch of “last inserted id” to get at a generated
    sequence value (i.e. MySQL, MS-SQL) now work correctly when there is a composite
    primary key where the “autoincrement” column is not the first primary key column
    in the table.
  id: totrans-4863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 依赖于“最后插入的id”进行后获取生成的序列值的数据库（例如MySQL，MS-SQL）现在在表中“自增”列不是第一个主键列时可以正常工作。
- en: '**[engines]**'
  id: totrans-4864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the last_inserted_ids() method has been renamed to the descriptor “inserted_primary_key”.
  id: totrans-4865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: last_inserted_ids()方法已重命名为描述符“inserted_primary_key”。
- en: '**[engines]**'
  id: totrans-4866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: setting echo=False on create_engine() now sets the loglevel to WARN instead
    of NOTSET. This so that logging can be disabled for a particular engine even if
    logging for “sqlalchemy.engine” is enabled overall. Note that the default setting
    of “echo” is None.
  id: totrans-4867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在create_engine()上设置echo=False现在将日志级别设置为WARN而不是NOTSET。这样，即使整体启用了“sqlalchemy.engine”的日志记录，也可以禁用特定引擎的日志记录。请注意，“echo”的默认设置为None。
- en: 'References: [#1554](https://www.sqlalchemy.org/trac/ticket/1554)'
  id: totrans-4868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1554](https://www.sqlalchemy.org/trac/ticket/1554)
- en: '**[engines]**'
  id: totrans-4869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: ConnectionProxy now has wrapper methods for all transaction lifecycle events,
    including begin(), rollback(), commit() begin_nested(), begin_prepared(), prepare(),
    release_savepoint(), etc.
  id: totrans-4870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ConnectionProxy现在具有所有事务生命周期事件的包装方法，包括begin()，rollback()，commit()，begin_nested()，begin_prepared()，prepare()，release_savepoint()等。
- en: '**[engines]**'
  id: totrans-4871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connection pool logging now uses both INFO and DEBUG log levels for logging.
    INFO is for major events such as invalidated connections, DEBUG for all the acquire/return
    logging. echo_pool can be False, None, True or “debug” the same way as echo works.
  id: totrans-4872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池日志现在使用INFO和DEBUG日志级别进行记录。INFO用于主要事件，如无效的连接，DEBUG用于所有获取/返回日志记录。echo_pool可以为False，None，True或“debug”，与echo的工作方式相同。
- en: '**[engines]**'
  id: totrans-4873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: All pyodbc-dialects now support extra pyodbc-specific kw arguments ‘ansi’, ‘unicode_results’,
    ‘autocommit’.
  id: totrans-4874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有pyodbc方言现在支持额外的pyodbc特定的kw参数‘ansi’，‘unicode_results’，‘autocommit’。
- en: 'References: [#1621](https://www.sqlalchemy.org/trac/ticket/1621)'
  id: totrans-4875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1621](https://www.sqlalchemy.org/trac/ticket/1621)
- en: '**[engines]**'
  id: totrans-4876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the “threadlocal” engine has been rewritten and simplified and now supports
    SAVEPOINT operations.
  id: totrans-4877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “threadlocal”引擎已重写和简化，现在支持SAVEPOINT操作。
- en: '**[engines]**'
  id: totrans-4878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: deprecated or removed
  id: totrans-4879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用或移除
- en: result.last_inserted_ids() is deprecated. Use result.inserted_primary_key
  id: totrans-4880
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: result.last_inserted_ids()已弃用。请使用result.inserted_primary_key
- en: dialect.get_default_schema_name(connection) is now public via dialect.default_schema_name.
  id: totrans-4881
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: dialect.get_default_schema_name(connection)现在通过dialect.default_schema_name公开。
- en: the “connection” argument from engine.transaction() and engine.run_callable()
    is removed - Connection itself now has those methods. All four methods accept
    *args and **kwargs which are passed to the given callable, as well as the operating
    connection.
  id: totrans-4882
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从engine.transaction()和engine.run_callable()中删除了“connection”参数 - Connection本身现在具有这些方法。所有四个方法都接受*args和**kwargs，这些参数将传递给给定的可调用对象，以及操作连接。
- en: '**[reflection/inspection]**'
  id: totrans-4883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[反射/检查]**'
- en: Table reflection has been expanded and generalized into a new API called “sqlalchemy.engine.reflection.Inspector”.
    The Inspector object provides fine-grained information about a wide variety of
    schema information, with room for expansion, including table names, column names,
    view definitions, sequences, indexes, etc.
  id: totrans-4884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表反射已扩展和泛化为一个名为“sqlalchemy.engine.reflection.Inspector”的新API。Inspector对象提供关于各种模式信息的细粒度信息，包括表名，列名，视图定义，序列，索引等，还有扩展的空间。
- en: '**[reflection/inspection]**'
  id: totrans-4885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[反射/检查]**'
- en: Views are now reflectable as ordinary Table objects. The same Table constructor
    is used, with the caveat that “effective” primary and foreign key constraints
    aren’t part of the reflection results; these have to be specified explicitly if
    desired.
  id: totrans-4886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图现在可以反射为普通的Table对象。使用相同的Table构造函数，但要注意“有效”的主键和外键约束不是反射结果的一部分；如果需要，必须显式指定这些。
- en: '**[reflection/inspection]**'
  id: totrans-4887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[reflection/inspection]**'
- en: The existing autoload=True system now uses Inspector underneath so that each
    dialect need only return “raw” data about tables and other objects - Inspector
    is the single place that information is compiled into Table objects so that consistency
    is at a maximum.
  id: totrans-4888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现有的autoload=True系统现在在底层使用Inspector，以便每个方言只需返回关于表和其他对象的“原始”数据 - Inspector是将信息编译成Table对象的唯一位置，以确保一致性最大化。
- en: '**[ddl]**'
  id: totrans-4889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ddl]**'
- en: 'the DDL system has been greatly expanded. the DDL() class now extends the more
    generic DDLElement(), which forms the basis of many new constructs:'
  id: totrans-4890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL系统已大大扩展。DDL()类现在扩展了更通用的DDLElement()，这形成了许多新构造的基础：
- en: CreateTable()
  id: totrans-4891
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateTable()
- en: ''
  id: totrans-4892
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4893
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropTable()
  id: totrans-4894
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropTable()
- en: ''
  id: totrans-4895
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4896
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: AddConstraint()
  id: totrans-4897
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: AddConstraint()
- en: ''
  id: totrans-4898
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4899
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropConstraint()
  id: totrans-4900
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropConstraint()
- en: ''
  id: totrans-4901
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4902
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: CreateIndex()
  id: totrans-4903
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateIndex()
- en: ''
  id: totrans-4904
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4905
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropIndex()
  id: totrans-4906
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropIndex()
- en: ''
  id: totrans-4907
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4908
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: CreateSequence()
  id: totrans-4909
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateSequence()
- en: ''
  id: totrans-4910
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-4911
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: DropSequence()
  id: totrans-4912
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: DropSequence()
- en: ''
  id: totrans-4913
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: These support “on” and “execute-at()” just like plain DDL() does. User-defined
    DDLElement subclasses can be created and linked to a compiler using the sqlalchemy.ext.compiler
    extension.
  id: totrans-4914
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些支持“on”和“execute-at()”，就像普通的DDL()一样。用户定义的DDLElement子类可以被创建并链接到一个编译器，使用sqlalchemy.ext.compiler扩展。
- en: '**[ddl]**'
  id: totrans-4915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ddl]**'
- en: 'The signature of the “on” callable passed to DDL() and DDLElement() is revised
    as follows:'
  id: totrans-4916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给DDL()和DDLElement()的“on”可调用的签名如下所示：
- en: ddl
  id: totrans-4917
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ddl
- en: ''
  id: totrans-4918
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the DDLElement object itself
  id: totrans-4919
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DDLElement对象本身
- en: ''
  id: totrans-4920
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: event
  id: totrans-4921
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 事件
- en: ''
  id: totrans-4922
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the string event name.
  id: totrans-4923
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 字符串事件名称。
- en: ''
  id: totrans-4924
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: target
  id: totrans-4925
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 目标
- en: ''
  id: totrans-4926
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: previously “schema_item”, the Table or MetaData object triggering the event.
  id: totrans-4927
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以前是“schema_item”，触发事件的Table或MetaData对象。
- en: ''
  id: totrans-4928
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: connection
  id: totrans-4929
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 连接
- en: ''
  id: totrans-4930
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: the Connection object in use for the operation.
  id: totrans-4931
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于操作的Connection对象。
- en: ''
  id: totrans-4932
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**kw'
  id: totrans-4933
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**kw'
- en: ''
  id: totrans-4934
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: keyword arguments. In the case of MetaData before/after create/drop, the list
    of Table objects for which CREATE/DROP DDL is to be issued is passed as the kw
    argument “tables”. This is necessary for metadata-level DDL that is dependent
    on the presence of specific tables.
  id: totrans-4935
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数。在MetaData之前/之后创建/删除的情况下，要发出CREATE/DROP DDL的Table对象列表作为kw参数“tables”传递。这对于依赖于特定表存在的元数据级DDL是必要的。
- en: The “schema_item” attribute of DDL has been renamed to
  id: totrans-4936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL的“schema_item”属性已重命名为
- en: ”target”.
  id: totrans-4937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “target”。
- en: '**[dialect] [refactor]**'
  id: totrans-4938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: Dialect modules are now broken into database dialects plus DBAPI implementations.
    Connect URLs are now preferred to be specified using dialect+driver://…, i.e.
    “mysql+mysqldb://scott:tiger@localhost/test”. See the 0.6 documentation for examples.
  id: totrans-4939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言模块现在分为数据库方言和DBAPI实现。现在更倾向于使用dialect+driver://…来指定连接URL，即“mysql+mysqldb://scott:tiger@localhost/test”。请参阅0.6文档以获取示例。
- en: '**[dialect] [refactor]**'
  id: totrans-4940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: the setuptools entrypoint for external dialects is now called “sqlalchemy.dialects”.
  id: totrans-4941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外部方言的setuptools入口现在称为“sqlalchemy.dialects”。
- en: '**[dialect] [refactor]**'
  id: totrans-4942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: the “owner” keyword argument is removed from Table. Use “schema” to represent
    any namespaces to be prepended to the table name.
  id: totrans-4943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从Table中删除了“owner”关键字参数。使用“schema”表示要预先添加到表名的任何命名空间。
- en: '**[dialect] [refactor]**'
  id: totrans-4944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: server_version_info becomes a static attribute.
  id: totrans-4945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: server_version_info变成了一个静态属性。
- en: '**[dialect] [refactor]**'
  id: totrans-4946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: dialects receive an initialize() event on initial connection to determine connection
    properties.
  id: totrans-4947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言在初始连接时接收initialize()事件以确定连接属性。
- en: '**[dialect] [refactor]**'
  id: totrans-4948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: dialects receive a visit_pool event have an opportunity to establish pool listeners.
  id: totrans-4949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言在接收visit_pool事件时有机会建立池监听器。
- en: '**[dialect] [refactor]**'
  id: totrans-4950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: cached TypeEngine classes are cached per-dialect class instead of per-dialect.
  id: totrans-4951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缓存的TypeEngine类现在按照每个方言类而不是每个方言进行缓存���
- en: '**[dialect] [refactor]**'
  id: totrans-4952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: new UserDefinedType should be used as a base class for new types, which preserves
    the 0.5 behavior of get_col_spec().
  id: totrans-4953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的UserDefinedType应该作为新类型的基类使用，它保留了get_col_spec()的0.5行为。
- en: '**[dialect] [refactor]**'
  id: totrans-4954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [refactor]**'
- en: The result_processor() method of all type classes now accepts a second argument
    “coltype”, which is the DBAPI type argument from cursor.description. This argument
    can help some types decide on the most efficient processing of result values.
  id: totrans-4955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有类型类的result_processor()方法现在接受第二个参数“coltype”，这是来自cursor.description的DBAPI类型参数。这个参数可以帮助一些类型决定对结果值进行最有效的处理。
- en: '**[dialect] [refactor]**'
  id: totrans-4956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [重构]**'
- en: Deprecated Dialect.get_params() removed.
  id: totrans-4957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用的Dialect.get_params()已被移除。
- en: '**[dialect] [refactor]**'
  id: totrans-4958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [重构]**'
- en: Dialect.get_rowcount() has been renamed to a descriptor “rowcount”, and calls
    cursor.rowcount directly. Dialects which need to hardwire a rowcount in for certain
    calls should override the method to provide different behavior.
  id: totrans-4959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Dialect.get_rowcount()已重命名为描述符“rowcount”，并直接调用cursor.rowcount。需要为某些调用硬编码行数的方言应该重写该方法以提供不同的行为。
- en: '**[dialect] [refactor]**'
  id: totrans-4960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [重构]**'
- en: DefaultRunner and subclasses have been removed. The job of this object has been
    simplified and moved into ExecutionContext. Dialects which support sequences should
    add a fire_sequence() method to their execution context implementation.
  id: totrans-4961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DefaultRunner和其子类已被移除。该对象的工作已被简化并移至ExecutionContext中。支持序列的方言应该在其执行上下文实现中添加一个fire_sequence()方法。
- en: 'References: [#1566](https://www.sqlalchemy.org/trac/ticket/1566)'
  id: totrans-4962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1566](https://www.sqlalchemy.org/trac/ticket/1566)
- en: '**[dialect] [refactor]**'
  id: totrans-4963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect] [重构]**'
- en: Functions and operators generated by the compiler now use (almost) regular dispatch
    functions of the form “visit_<opname>” and “visit_<funcname>_fn” to provide customed
    processing. This replaces the need to copy the “functions” and “operators” dictionaries
    in compiler subclasses with straightforward visitor methods, and also allows compiler
    subclasses complete control over rendering, as the full _Function or _BinaryExpression
    object is passed in.
  id: totrans-4964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器生成的函数和运算符现在使用（几乎）常规的分发函数形式“visit_<opname>”和“visit_<funcname>_fn”来提供定制处理。这取代了在编译器子类中复制“functions”和“operators”字典的需要，改为使用直接的访问方法，并且还允许编译器子类完全控制渲染，因为完整的_Function或_BinaryExpression对象被传递进来。
- en: '**[firebird]**'
  id: totrans-4965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: the keys() method of RowProxy() now returns the result column names *normalized*
    to be SQLAlchemy case insensitive names. This means they will be lower case for
    case insensitive names, whereas the DBAPI would normally return them as UPPERCASE
    names. This allows row keys() to be compatible with further SQLAlchemy operations.
  id: totrans-4966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy()的keys()方法现在返回结果列名*规范化*为SQLAlchemy大小写不敏感名称。这意味着对于大小写不敏感的名称，它们将以小写形式返回，而DBAPI通常会将它们返回为大写名称。这使得行键()与进一步的SQLAlchemy操作兼容。
- en: '**[firebird]**'
  id: totrans-4967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: using new dialect.initialize() feature to set up version-dependent behavior.
  id: totrans-4968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的dialect.initialize()功能来设置版本相关的行为。
- en: '**[firebird]**'
  id: totrans-4969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: ”case sensitivity” feature will detect an all-lowercase case-sensitive column
    name during reflect and add “quote=True” to the generated Column, so that proper
    quoting is maintained.
  id: totrans-4970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “大小写敏感”功能将在反射期间检测到全小写的大小写敏感列名，并向生成的列添加“quote=True”，以便保持适当的引用。
- en: '**[types]**'
  id: totrans-4971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: The construction of types within dialects has been totally overhauled. Dialects
    now define publicly available types as UPPERCASE names exclusively, and internal
    implementation types using underscore identifiers (i.e. are private). The system
    by which types are expressed in SQL and DDL has been moved to the compiler system.
    This has the effect that there are much fewer type objects within most dialects.
    A detailed document on this architecture for dialect authors is in lib/sqlalchemy/dialects/type_migration_guidelines.txt
    .
  id: totrans-4972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言中类型的构建已完全改写。方言现在仅以大写名称定义公开可用的类型，并使用下划线标识符（即私有）定义内部实现类型。用于在SQL和DDL中表达类型的系统已移至编译器系统。这样做的效果是在大多数方言中减少了许多类型对象。有关方言作者的详细文档在lib/sqlalchemy/dialects/type_migration_guidelines.txt中。
- en: '**[types]**'
  id: totrans-4973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: Types no longer make any guesses as to default parameters. In particular, Numeric,
    Float, NUMERIC, FLOAT, DECIMAL don’t generate any length or scale unless specified.
  id: totrans-4974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型不再对默认参数进行任何猜测。特别是，Numeric、Float、NUMERIC、FLOAT、DECIMAL不会生成任何长度或精度，除非指定。
- en: '**[types]**'
  id: totrans-4975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: types.Binary is renamed to types.LargeBinary, it only produces BLOB, BYTEA,
    or a similar “long binary” type. New base BINARY and VARBINARY types have been
    added to access these MySQL/MS-SQL specific types in an agnostic way.
  id: totrans-4976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: types.Binary已重命名为types.LargeBinary，它仅生成BLOB、BYTEA或类似的“长二进制”类型。新增了基本的BINARY和VARBINARY类型，以以一种与MySQL/MS-SQL特定类型无关的方式访问这些类型。
- en: 'References: [#1664](https://www.sqlalchemy.org/trac/ticket/1664)'
  id: totrans-4977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1664](https://www.sqlalchemy.org/trac/ticket/1664)
- en: '**[types]**'
  id: totrans-4978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: String/Text/Unicode types now skip the unicode() check on each result column
    value if the dialect has detected the DBAPI as returning Python unicode objects
    natively. This check is issued on first connect using “SELECT CAST ‘some text’
    AS VARCHAR(10)” or equivalent, then checking if the returned object is a Python
    unicode. This allows vast performance increases for native-unicode DBAPIs, including
    pysqlite/sqlite3, psycopg2, and pg8000.
  id: totrans-4979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串/文本/Unicode 类型现在在每个结果列值上跳过 unicode() 检查，如果方言检测到 DBAPI 本地返回 Python unicode
    对象。这个检查是在第一次连接时使用“SELECT CAST ‘some text’ AS VARCHAR(10)”或等效方式发出的，然后检查返回的对象是否是
    Python unicode。这允许本地支持 unicode 的 DBAPI（包括 pysqlite/sqlite3、psycopg2 和 pg8000）获得巨大的性能提升。
- en: '**[types]**'
  id: totrans-4980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: 'Most types result processors have been checked for possible speed improvements.
    Specifically, the following generic types have been optimized, resulting in varying
    speed improvements: Unicode, PickleType, Interval, TypeDecorator, Binary. Also
    the following dbapi-specific implementations have been improved: Time, Date and
    DateTime on Sqlite, ARRAY on PostgreSQL, Time on MySQL, Numeric(as_decimal=False)
    on MySQL, oursql and pypostgresql, DateTime on cx_oracle and LOB-based types on
    cx_oracle.'
  id: totrans-4981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数类型结果处理器已经检查可能的速度改进。具体来说，以下通用类型已经经过优化，导致不同程度的速度提升：Unicode、PickleType、Interval、TypeDecorator、Binary。此外，以下特定于
    dbapi 的实现已经得到改进：Sqlite 上的 Time、Date 和 DateTime，PostgreSQL 上的 ARRAY，MySQL 上的 Time，MySQL
    上的 Numeric（as_decimal=False），oursql 和 pypostgresql，cx_oracle 上的 DateTime，以及 cx_oracle
    上的 LOB 类型。
- en: '**[types]**'
  id: totrans-4982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Reflection of types now returns the exact UPPERCASE type within types.py, or
    the UPPERCASE type within the dialect itself if the type is not a standard SQL
    type. This means reflection now returns more accurate information about reflected
    types.
  id: totrans-4983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在类型的反射将返回 types.py 中的确切大写类型，或者如果类型不是标准 SQL 类型，则返回方言本身中的大写类型。这意味着反射现在返回有关反射类型的更准确信息。
- en: '**[types]**'
  id: totrans-4984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Added a new Enum generic type. Enum is a schema-aware object to support databases
    which require specific DDL in order to use enum or equivalent; in the case of
    PG it handles the details of CREATE TYPE, and on other databases without native
    enum support will by generate VARCHAR + an inline CHECK constraint to enforce
    the enum.
  id: totrans-4985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 Enum 通用类型。Enum 是一个 schema-aware 对象，用于支持需要特定 DDL 才能使用 enum 或等效的数据库；在
    PG 的情况下，它处理 CREATE TYPE 的详细信息，在其他没有本地 enum 支持的数据库上，将生成 VARCHAR + 内联 CHECK 约束以强制执行
    enum。
- en: 'References: [#1109](https://www.sqlalchemy.org/trac/ticket/1109), [#1511](https://www.sqlalchemy.org/trac/ticket/1511)'
  id: totrans-4986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1109](https://www.sqlalchemy.org/trac/ticket/1109)，[#1511](https://www.sqlalchemy.org/trac/ticket/1511)
- en: '**[types]**'
  id: totrans-4987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The Interval type includes a “native” flag which controls if native INTERVAL
    types (postgresql + oracle) are selected if available, or not. “day_precision”
    and “second_precision” arguments are also added which propagate as appropriately
    to these native types. Related to.
  id: totrans-4988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Interval 类型包括一个“native”标志，控制是否选择本地 INTERVAL 类型（postgresql + oracle）（如果可用）或不选择。还添加了“day_precision”和“second_precision”参数，适当地传播到这些本地类型。相关于。
- en: 'References: [#1467](https://www.sqlalchemy.org/trac/ticket/1467)'
  id: totrans-4989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1467](https://www.sqlalchemy.org/trac/ticket/1467)
- en: '**[types]**'
  id: totrans-4990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The Boolean type, when used on a backend that doesn’t have native boolean support,
    will generate a CHECK constraint “col IN (0, 1)” along with the int/smallint-
    based column type. This can be switched off if desired with create_constraint=False.
    Note that MySQL has no native boolean *or* CHECK constraint support so this feature
    isn’t available on that platform.
  id: totrans-4991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在没有本地布尔支持的后端使用布尔类型时，将生成一个 CHECK 约束“col IN (0, 1)”以及基于 int/smallint 的列类型。如果需要，可以通过
    create_constraint=False 关闭此功能。请注意，MySQL 没有本地布尔或 CHECK 约束支持，因此该功能在该平台上不可用。
- en: 'References: [#1589](https://www.sqlalchemy.org/trac/ticket/1589)'
  id: totrans-4992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1589](https://www.sqlalchemy.org/trac/ticket/1589)
- en: '**[types]**'
  id: totrans-4993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: PickleType now uses == for comparison of values when mutable=True, unless the
    “comparator” argument with a comparison function is specified to the type. Objects
    being pickled will be compared based on identity (which defeats the purpose of
    mutable=True) if __eq__() is not overridden or a comparison function is not provided.
  id: totrans-4994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType 现在在 mutable=True 时使用 == 进行值比较，除非为类型指定了带有比较函数的“comparator”参数。如果未重写
    __eq__() 或未提供比较函数，则将基于标识比较被 pickled 的对象（这会破坏 mutable=True 的目的）。
- en: '**[types]**'
  id: totrans-4995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The default “precision” and “scale” arguments of Numeric and Float have been
    removed and now default to None. NUMERIC and FLOAT will be rendered with no numeric
    arguments by default unless these values are provided.
  id: totrans-4996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Numeric 和 Float 的默认“precision”和“scale”参数已移除，现在默认为 None。除非提供这些值，否则 NUMERIC 和
    FLOAT 将默认不带任何数字参数。
- en: '**[types]**'
  id: totrans-4997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: AbstractType.get_search_list() is removed - the games that was used for are
    no longer necessary.
  id: totrans-4998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AbstractType.get_search_list() 已移除 - 不再需要使用它的游戏。
- en: '**[types]**'
  id: totrans-4999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Added a generic BigInteger type, compiles to BIGINT or NUMBER(19).
  id: totrans-5000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个通用的 BigInteger 类型，编译为 BIGINT 或 NUMBER(19)。
- en: 'References: [#1125](https://www.sqlalchemy.org/trac/ticket/1125)'
  id: totrans-5001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1125](https://www.sqlalchemy.org/trac/ticket/1125)
- en: '**[types]**'
  id: totrans-5002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: sqlsoup has been overhauled to explicitly support an 0.5 style session, using
    autocommit=False, autoflush=True. Default behavior of SQLSoup now requires the
    usual usage of commit() and rollback(), which have been added to its interface.
    An explicit Session or scoped_session can be passed to the constructor, allowing
    these arguments to be overridden.
  id: totrans-5003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 已进行了全面改进，明确支持 0.5 风格的会话，使用 autocommit=False、autoflush=True。SQLSoup 的默认行为现在需要通常的
    commit() 和 rollback() 的使用，这些方法已添加到其接口中。可以传递一个显式的 Session 或 scoped_session 给构造函数，允许覆盖这些参数。
- en: '**[types]**'
  id: totrans-5004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: sqlsoup db.<sometable>.update() and delete() now call query(cls).update() and
    delete(), respectively.
  id: totrans-5005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup db.<sometable>.update() 和 delete() 现在分别调用 query(cls).update() 和 delete()。
- en: '**[types]**'
  id: totrans-5006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: sqlsoup now has execute() and connection(), which call upon the Session methods
    of those names, ensuring that the bind is in terms of the SqlSoup object’s bind.
  id: totrans-5007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 现在具有 execute() 和 connection() 方法，调用这些名称的 Session 方法，确保绑定是基于 SqlSoup
    对象的绑定。
- en: '**[types]**'
  id: totrans-5008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: sqlsoup objects no longer have the ‘query’ attribute - it’s not needed for sqlsoup’s
    usage paradigm and it gets in the way of a column that is actually named ‘query’.
  id: totrans-5009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlsoup 对象不再具有‘query’属性 - 对于 sqlsoup 的使用范式而言，这并不需要，而且会妨碍一个实际命名为‘query’的列。
- en: '**[types]**'
  id: totrans-5010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: The signature of the proxy_factory callable passed to association_proxy is now
    (lazy_collection, creator, value_attr, association_proxy), adding a fourth argument
    that is the parent AssociationProxy argument. Allows serializability and subclassing
    of the built in collections.
  id: totrans-5011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给 association_proxy 的 proxy_factory 可调用对象的签名现在为 (lazy_collection, creator,
    value_attr, association_proxy)，添加了第四个参数，即父级 AssociationProxy 参数。允许内置集合的序列化和子类化。
- en: 'References: [#1259](https://www.sqlalchemy.org/trac/ticket/1259)'
  id: totrans-5012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1259](https://www.sqlalchemy.org/trac/ticket/1259)
- en: '**[types]**'
  id: totrans-5013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: association_proxy now has basic comparator methods .any(), .has(), .contains(),
    ==, !=, thanks to Scott Torborg.
  id: totrans-5014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: association_proxy 现在具有基本的比较方法 .any()、.has()、.contains()、==、!=，感谢 Scott Torborg。
- en: 'References: [#1372](https://www.sqlalchemy.org/trac/ticket/1372)'
  id: totrans-5015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1372](https://www.sqlalchemy.org/trac/ticket/1372)
