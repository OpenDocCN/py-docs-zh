["```py\n>>> key = jax.random.PRNGKey(0)\n>>> key\nArray([0, 0], dtype=uint32)\n>>> key.shape\n(2,)\n>>> key.dtype\ndtype('uint32') \n```", "```py\n>>> key = jax.random.key(0)\n>>> key\nArray((), dtype=key<fry>) overlaying:\n[0 0]\n>>> key.shape\n()\n>>> key.dtype\nkey<fry> \n```", "```py\n>>> key_arr = jax.vmap(jax.random.key)(jnp.arange(4))\n>>> key_arr\nArray((4,), dtype=key<fry>) overlaying:\n[[0 0]\n [0 1]\n [0 2]\n [0 3]]\n>>> key_arr.shape\n(4,) \n```", "```py\n# split\nnew_key, subkey = jax.random.split(key)\n\n# random number generation\ndata = jax.random.uniform(key, shape=(5,)) \n```", "```py\n>>> key = key + 1  \nTraceback (most recent call last):\nTypeError: add does not accept dtypes key<fry>, int32. \n```", "```py\n>>> jax.random.key_data(key)\nArray([0, 0], dtype=uint32) \n```", "```py\n>>> typed_key = jax.random.key(0)\n>>> jax.dtypes.issubdtype(typed_key.dtype, jax.dtypes.prng_key)\nTrue\n>>> raw_key = jax.random.PRNGKey(0)\n>>> jax.dtypes.issubdtype(raw_key.dtype, jax.dtypes.prng_key)\nFalse \n```", "```py\nfrom jax import dtypes\n\ndef ensure_typed_key_array(key: Array) -> Array:\n  if dtypes.issubdtype(key.dtype, dtypes.prng_key):\n    return key\n  else:\n    raise TypeError(\"New-style typed JAX PRNG keys required\") \n```", "```py\n>>> key = jax.random.key(0, impl='threefry2x32')  # this is the default impl\n>>> key\nArray((), dtype=key<fry>) overlaying:\n[0 0]\n>>> jax.random.uniform(key, shape=(3,))\nArray([0.9653214 , 0.31468165, 0.63302994], dtype=float32)\n\n>>> key = jax.random.key(0, impl='rbg')\n>>> key\nArray((), dtype=key<rbg>) overlaying:\n[0 0 0 0]\n>>> jax.random.uniform(key, shape=(3,))\nArray([0.39904642, 0.8805201 , 0.73571277], dtype=float32) \n```", "```py\n# Incorrect\nkey = random.PRNGKey(999)\nnew_key = random.PRNGKey(key[1])  # identical to the original key! \n```", "```py\n# Correct\nkey = random.PRNGKey(999)\nkey, new_key = random.split(key) \n```", "```py\n# Incorrect\nkey = random.PRNGKey(0)\nbatched_keys = key + jnp.arange(10, dtype=key.dtype)[:, None] \n```", "```py\n# Correct\nkey = random.PRNGKey(0)\nbatched_keys = random.split(key, 10) \n```", "```py\n# Incorrect\nkeys = random.split(random.PRNGKey(0))\ndata = jax.vmap(random.uniform, in_axes=1)(keys) \n```", "```py\n# Correct\nkeys = random.split(random.PRNGKey(0))\ndata = jax.vmap(random.uniform, in_axes=0)(keys) \n```", "```py\n# Incorrect\nkey = random.PRNGKey(0)\nx = random.uniform(key, (100,))\ny = random.uniform(key, (100,))  # Identical values! \n```", "```py\n# Correct\nkey = random.PRNGKey(0)\nkey1, key2 = random.split(random.key(0))\nx = random.uniform(key1, (100,))\ny = random.uniform(key2, (100,)) \n```", "```py\n>>> jax.dtypes.issubdtype(jax.dtypes.prng_key, jax.dtypes.extended)\nTrue \n```", "```py\n>>> key = jax.random.key(0)\n>>> jax.dtypes.issubdtype(key.dtype, jax.dtypes.extended)\nTrue\n>>> jax.dtypes.issubdtype(key.dtype, jax.dtypes.prng_key)\nTrue \n```"]