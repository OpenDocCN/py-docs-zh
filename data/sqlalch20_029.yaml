- en: Class Mapping API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类映射 API
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/mapping_api.html](https://docs.sqlalchemy.org/en/20/orm/mapping_api.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/mapping_api.html](https://docs.sqlalchemy.org/en/20/orm/mapping_api.html)
- en: '| Object Name | Description |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [add_mapped_attribute](#sqlalchemy.orm.add_mapped_attribute)(target, key,
    attr) | Add a new mapped attribute to an ORM mapped class. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [add_mapped_attribute](#sqlalchemy.orm.add_mapped_attribute)(target, key,
    attr) | 向ORM映射类添加新的映射属性。 |'
- en: '| [as_declarative](#sqlalchemy.orm.as_declarative)(**kw) | Class decorator
    which will adapt a given class into a [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base"). |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [as_declarative](#sqlalchemy.orm.as_declarative)(**kw) | 类装饰器，将给定的类适配为[`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")。 |'
- en: '| [class_mapper](#sqlalchemy.orm.class_mapper)(class_[, configure]) | Given
    a class, return the primary [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    associated with the key. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [class_mapper](#sqlalchemy.orm.class_mapper)(class_[, configure]) | 给定一个类，返回与该键关联的主要[`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。 |'
- en: '| [clear_mappers](#sqlalchemy.orm.clear_mappers)() | Remove all mappers from
    all classes. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [clear_mappers](#sqlalchemy.orm.clear_mappers)() | 从所有类中删除所有映射器。 |'
- en: '| [column_property](#sqlalchemy.orm.column_property)(column, *additional_columns,
    [group, deferred, raiseload, comparator_factory, init, repr, default, default_factory,
    compare, kw_only, active_history, expire_on_flush, info, doc]) | Provide a column-level
    property for use with a mapping. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [column_property](#sqlalchemy.orm.column_property)(column, *additional_columns,
    [group, deferred, raiseload, comparator_factory, init, repr, default, default_factory,
    compare, kw_only, active_history, expire_on_flush, info, doc]) | 为映射提供列级别属性。 |'
- en: '| [configure_mappers](#sqlalchemy.orm.configure_mappers)() | Initialize the
    inter-mapper relationships of all mappers that have been constructed thus far
    across all [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") collections.
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [configure_mappers](#sqlalchemy.orm.configure_mappers)() | 初始化到目前为止已在所有[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")集合中构造的所有映射器之间的相互关系。 |'
- en: '| [declarative_base](#sqlalchemy.orm.declarative_base)(*, [metadata, mapper,
    cls, name, class_registry, type_annotation_map, constructor, metaclass]) | Construct
    a base class for declarative class definitions. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [declarative_base](#sqlalchemy.orm.declarative_base)(*, [metadata, mapper,
    cls, name, class_registry, type_annotation_map, constructor, metaclass]) | 构造用于声明性类定义的基类。
    |'
- en: '| [declarative_mixin](#sqlalchemy.orm.declarative_mixin)(cls) | Mark a class
    as providing the feature of “declarative mixin”. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [declarative_mixin](#sqlalchemy.orm.declarative_mixin)(cls) | 将类标记为提供“声明混入”功能。
    |'
- en: '| [DeclarativeBase](#sqlalchemy.orm.DeclarativeBase) | Base class used for
    declarative class definitions. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [DeclarativeBase](#sqlalchemy.orm.DeclarativeBase) | 用于声明性类定义的基类。 |'
- en: '| [DeclarativeBaseNoMeta](#sqlalchemy.orm.DeclarativeBaseNoMeta) | Same as
    [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase"),
    but does not use a metaclass to intercept new attributes. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [DeclarativeBaseNoMeta](#sqlalchemy.orm.DeclarativeBaseNoMeta) | 与[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")相同，但不使用元类拦截新属性。 |'
- en: '| [declared_attr](#sqlalchemy.orm.declared_attr) | Mark a class-level method
    as representing the definition of a mapped property or Declarative directive.
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [declared_attr](#sqlalchemy.orm.declared_attr) | 将类级别方法标记为表示映射属性或声明式指令定义的方法。
    |'
- en: '| [has_inherited_table](#sqlalchemy.orm.has_inherited_table)(cls) | Given a
    class, return True if any of the classes it inherits from has a mapped table,
    otherwise return False. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [has_inherited_table](#sqlalchemy.orm.has_inherited_table)(cls) | 给定一个类，如果它继承的任何类都有映射表，则返回True，否则返回False。
    |'
- en: '| [identity_key](#sqlalchemy.orm.util.identity_key)([class_, ident], *, [instance,
    row, identity_token]) | Generate “identity key” tuples, as are used as keys in
    the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") dictionary. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [identity_key](#sqlalchemy.orm.util.identity_key)([class_, ident], *, [instance,
    row, identity_token]) | 生成“标识键”元组，这些元组用作[`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") 字典中的键。 |'
- en: '| [mapped_column](#sqlalchemy.orm.mapped_column)([__name_pos, __type_pos],
    *args, [init, repr, default, default_factory, compare, kw_only, nullable, primary_key,
    deferred, deferred_group, deferred_raiseload, use_existing_column, name, type_,
    autoincrement, doc, key, index, unique, info, onupdate, insert_default, server_default,
    server_onupdate, active_history, quote, system, comment, sort_order], **kw) |
    declare a new ORM-mapped [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") construct for use within [Declarative Table](declarative_tables.html#orm-declarative-table)
    configuration. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [mapped_column](#sqlalchemy.orm.mapped_column)([__name_pos, __type_pos],
    *args, [init, repr, default, default_factory, compare, kw_only, nullable, primary_key,
    deferred, deferred_group, deferred_raiseload, use_existing_column, name, type_,
    autoincrement, doc, key, index, unique, info, onupdate, insert_default, server_default,
    server_onupdate, active_history, quote, system, comment, sort_order], **kw) |
    在 [声明式表](declarative_tables.html#orm-declarative-table) 配置中声明一个新的 ORM 映射的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 构造。 |'
- en: '| [MappedAsDataclass](#sqlalchemy.orm.MappedAsDataclass) | Mixin class to indicate
    when mapping this class, also convert it to be a dataclass. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [MappedAsDataclass](#sqlalchemy.orm.MappedAsDataclass) | 用于指示映射此类时，同时将其转换为数据类的混合类。
    |'
- en: '| [MappedClassProtocol](#sqlalchemy.orm.MappedClassProtocol) | A protocol representing
    a SQLAlchemy mapped class. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [MappedClassProtocol](#sqlalchemy.orm.MappedClassProtocol) | 表示 SQLAlchemy
    映射类的协议。 |'
- en: '| [Mapper](#sqlalchemy.orm.Mapper) | Defines an association between a Python
    class and a database table or other relational structure, so that ORM operations
    against the class may proceed. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [Mapper](#sqlalchemy.orm.Mapper) | 定义 Python 类与数据库表或其他关系结构之间的关联，以便对该类进行的
    ORM 操作可以继续进行。 |'
- en: '| [object_mapper](#sqlalchemy.orm.object_mapper)(instance) | Given an object,
    return the primary Mapper associated with the object instance. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [object_mapper](#sqlalchemy.orm.object_mapper)(instance) | 给定一个对象，返回与对象实例关联的主要
    Mapper。 |'
- en: '| [orm_insert_sentinel](#sqlalchemy.orm.orm_insert_sentinel)([name, type_],
    *, [default, omit_from_statements]) | Provides a surrogate [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") that generates a so-called [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [orm_insert_sentinel](#sqlalchemy.orm.orm_insert_sentinel)([name, type_],
    *, [default, omit_from_statements]) | 提供一个替代 [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 的代理，生成所谓的 [sentinel](../glossary.html#term-sentinel)
    列，允许在其他情况下没有符合条件的主键配置的表中进行高效的批量插入，并且具有确定性的 RETURNING 排序。 |'
- en: '| [polymorphic_union](#sqlalchemy.orm.polymorphic_union)(table_map, typecolname[,
    aliasname, cast_nulls]) | Create a `UNION` statement used by a polymorphic mapper.
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [polymorphic_union](#sqlalchemy.orm.polymorphic_union)(table_map, typecolname[,
    aliasname, cast_nulls]) | 创建多态映射器使用的 `UNION` 语句。 |'
- en: '| [reconstructor](#sqlalchemy.orm.reconstructor)(fn) | Decorate a method as
    the ‘reconstructor’ hook. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [reconstructor](#sqlalchemy.orm.reconstructor)(fn) | 将方法装饰为 ‘reconstructor’
    钩子。 |'
- en: '| [registry](#sqlalchemy.orm.registry) | Generalized registry for mapping classes.
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [注册表](#sqlalchemy.orm.registry) | 用于映射类的通用注册表。 |'
- en: '| [synonym_for](#sqlalchemy.orm.synonym_for)(name[, map_column]) | Decorator
    that produces an [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    attribute in conjunction with a Python descriptor. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [synonym_for](#sqlalchemy.orm.synonym_for)(name[, map_column]) | 与 Python
    描述符一起生成一个 [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    属性的装饰器。 |'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Generalized registry for mapping classes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 用于映射类的通用注册表。
- en: The [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") serves
    as the basis for maintaining a collection of mappings, and provides configurational
    hooks used to map classes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") 用作维护映射集合的基础，并提供用于映射类的配置钩子。'
- en: 'The three general kinds of mappings supported are Declarative Base, Declarative
    Decorator, and Imperative Mapping. All of these mapping styles may be used interchangeably:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的三种常规映射类型是声明基类（Declarative Base）、声明装饰器（Declarative Decorator）和命令式映射（Imperative
    Mapping）。所有这些映射样式都可以互换使用：
- en: '[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    returns a new declarative base class, and is the underlying implementation of
    the [`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    function.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    返回一个新的声明基类，是 [`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    函数的底层实现。'
- en: '[`registry.mapped()`](#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped")
    provides a class decorator that will apply declarative mapping to a class without
    the use of a declarative base class.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`registry.mapped()`](#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped")
    提供了一个类装饰器，它将为一个类应用声明性映射，而不使用声明性基类。'
- en: '[`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively "sqlalchemy.orm.registry.map_imperatively")
    will produce a [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") for
    a class without scanning the class for declarative class attributes. This method
    suits the use case historically provided by the `sqlalchemy.orm.mapper()` classical
    mapping function, which is removed as of SQLAlchemy 2.0.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively "sqlalchemy.orm.registry.map_imperatively")
    会为一个类生成一个 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")，而不会扫描该类以寻找声明性类属性。这种方法适用于历史上由
    `sqlalchemy.orm.mapper()` 传统映射函数提供的用例，该函数已在 SQLAlchemy 2.0 中移除。'
- en: New in version 1.4.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 新增。
- en: '**Members**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.registry.__init__), [as_declarative_base()](#sqlalchemy.orm.registry.as_declarative_base),
    [configure()](#sqlalchemy.orm.registry.configure), [dispose()](#sqlalchemy.orm.registry.dispose),
    [generate_base()](#sqlalchemy.orm.registry.generate_base), [map_declaratively()](#sqlalchemy.orm.registry.map_declaratively),
    [map_imperatively()](#sqlalchemy.orm.registry.map_imperatively), [mapped()](#sqlalchemy.orm.registry.mapped),
    [mapped_as_dataclass()](#sqlalchemy.orm.registry.mapped_as_dataclass), [mappers](#sqlalchemy.orm.registry.mappers),
    [update_type_annotation_map()](#sqlalchemy.orm.registry.update_type_annotation_map)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.registry.__init__), [as_declarative_base()](#sqlalchemy.orm.registry.as_declarative_base),
    [configure()](#sqlalchemy.orm.registry.configure), [dispose()](#sqlalchemy.orm.registry.dispose),
    [generate_base()](#sqlalchemy.orm.registry.generate_base), [map_declaratively()](#sqlalchemy.orm.registry.map_declaratively),
    [map_imperatively()](#sqlalchemy.orm.registry.map_imperatively), [mapped()](#sqlalchemy.orm.registry.mapped),
    [mapped_as_dataclass()](#sqlalchemy.orm.registry.mapped_as_dataclass), [mappers](#sqlalchemy.orm.registry.mappers),
    [update_type_annotation_map()](#sqlalchemy.orm.registry.update_type_annotation_map)'
- en: See also
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[ORM Mapped Class Overview](mapping_styles.html) - overview of class mapping
    styles.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 映射类概述](mapping_styles.html) - 类映射样式概述。'
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Construct a new [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
- en: 'Parameters:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`metadata` – An optional [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") instance. All [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects generated using declarative table mapping will
    make use of this [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection. If this argument is left at its default
    of `None`, a blank [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection is created.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 一个可选的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 实例。使用声明性表映射生成的所有 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象将使用此 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合。如果将此参数保留在默认值 `None`，则会创建一个空白的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合。'
- en: '`constructor` – Specify the implementation for the `__init__` function on a
    mapped class that has no `__init__` of its own. Defaults to an implementation
    that assigns **kwargs for declared fields and relationships to an instance. If
    `None` is supplied, no __init__ will be provided and construction will fall back
    to cls.__init__ by way of the normal Python semantics.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constructor` – 指定在没有自己的 `__init__` 的映射类上的 `__init__` 函数的实现。默认情况下，为声明的字段和关系分配
    **kwargs 的实现分配给一个实例。如果提供 `None`，则不会提供 __init__，并且构造将回退到 cls.__init__ 的普通 Python
    语义。'
- en: '`class_registry` – optional dictionary that will serve as the registry of class
    names-> mapped classes when string names are used to identify classes inside of
    [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    and others. Allows two or more declarative base classes to share the same registry
    of class names for simplified inter-base relationships.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_registry` – 可选的字典，当使用字符串名称来标识 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 等内部类时，将充当类名称->映射类的注册表。允许两个或更多声明性基类共享相同的类名称注册表，以简化基类之间的关系。'
- en: '`type_annotation_map` –'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_annotation_map` –'
- en: optional dictionary of Python types to SQLAlchemy [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") classes or instances. The provided dict will update
    the default type mapping. This is used exclusively by the [`MappedColumn`](internals.html#sqlalchemy.orm.MappedColumn
    "sqlalchemy.orm.MappedColumn") construct to produce column types based on annotations
    within the [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    type.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的Python类型到SQLAlchemy [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或实例的字典。提供的字典将更新默认类型映射。这仅由[`MappedColumn`](internals.html#sqlalchemy.orm.MappedColumn
    "sqlalchemy.orm.MappedColumn")构造在[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类型内部的注解产生列类型时使用。
- en: New in version 2.0.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0中的内容。
- en: See also
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Customizing the Type Map](declarative_tables.html#orm-declarative-mapped-column-type-map)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义类型映射](declarative_tables.html#orm-declarative-mapped-column-type-map)'
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Class decorator which will invoke [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") for a given base class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 类装饰器，将为给定的基类调用[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")。
- en: 'E.g.:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All keyword arguments passed to [`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base") are passed along to [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base").
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有传递给[`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base")的关键字参数都会传递给[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")。
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configure all as-yet unconfigured mappers in this [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 配置此[`注册表`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")中所有尚未配置的映射器。
- en: The configure step is used to reconcile and initialize the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") linkages between mapped classes, as well as to
    invoke configuration events such as the [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") and [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), which may be used by ORM extensions
    or user-defined extension hooks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 配置步骤用于调和和初始化[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")链接，以及调用配置事件，如[`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")和[`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")，这些事件可以被ORM扩展或用户定义的扩展钩子所使用。
- en: If one or more mappers in this registry contain [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs that refer to mapped classes in other
    registries, this registry is said to be *dependent* on those registries. In order
    to configure those dependent registries automatically, the [`configure.cascade`](#sqlalchemy.orm.registry.configure.params.cascade
    "sqlalchemy.orm.registry.configure") flag should be set to `True`. Otherwise,
    if they are not configured, an exception will be raised. The rationale behind
    this behavior is to allow an application to programmatically invoke configuration
    of registries while controlling whether or not the process implicitly reaches
    other registries.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此注册表中的一个或多个映射器包含指向其他注册表中映射类的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造，则称该注册表为*依赖*于那些注册表。为了自动配置这些依赖注册表，[`configure.cascade`](#sqlalchemy.orm.registry.configure.params.cascade
    "sqlalchemy.orm.registry.configure")标志应设置为`True`。否则，如果它们未配置，则会引发异常。此行为背后的原理是允许应用程序在控制是否隐式到达其他注册表的同时，以编程方式调用注册表的配置。
- en: As an alternative to invoking [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure"), the ORM function [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function may be used to ensure configuration
    is complete for all [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    objects in memory. This is generally simpler to use and also predates the usage
    of [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") objects overall.
    However, this function will impact all mappings throughout the running Python
    process and may be more memory/time consuming for an application that has many
    registries in use for different purposes that may not be needed immediately.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为调用[`registry.configure()`](#sqlalchemy.orm.registry.configure "sqlalchemy.orm.registry.configure")的替代方案，可以使用ORM函数[`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")函数确保内存中所有[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象的配置完成。这通常更简单，并且还早于整体使用[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象的用法。但是，此函数将影响运行中的Python进程中的所有映射，并且对于具有许多用于不同目的的注册表的应用程序可能更耗费内存/时间，这些注册表可能不会立即需要。
- en: See also
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")'
- en: New in version 1.4.0b2.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.0b2 新增。
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Dispose of all mappers in this [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry").
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 处理此 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") 中的所有映射器。
- en: After invocation, all the classes that were mapped within this registry will
    no longer have class instrumentation associated with them. This method is the
    per-[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") analogue
    to the application-wide [`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")
    function.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 调用后，此注册表中映射的所有类将不再具有与类相关联的类仪器。该方法是每个[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")的类似于应用程序范围的[`clear_mappers()`](#sqlalchemy.orm.clear_mappers
    "sqlalchemy.orm.clear_mappers")函数。
- en: If this registry contains mappers that are dependencies of other registries,
    typically via [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") links, then those registries must be disposed as
    well. When such registries exist in relation to this one, their [`registry.dispose()`](#sqlalchemy.orm.registry.dispose
    "sqlalchemy.orm.registry.dispose") method will also be called, if the [`dispose.cascade`](#sqlalchemy.orm.registry.dispose.params.cascade
    "sqlalchemy.orm.registry.dispose") flag is set to `True`; otherwise, an error
    is raised if those registries were not already disposed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此注册表包含其他注册表的依赖项映射器，通常通过[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")链接，则必须将这些注册表也处理掉。当这些注册表存在于与此相关的关系中时，如果设置了[`dispose.cascade`](#sqlalchemy.orm.registry.dispose.params.cascade
    "sqlalchemy.orm.registry.dispose")标志为`True`，则它们的[`registry.dispose()`](#sqlalchemy.orm.registry.dispose
    "sqlalchemy.orm.registry.dispose")方法也将被调用；否则，如果这些注册表尚未被处理，则会引发错误。
- en: New in version 1.4.0b2.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.0b2 新增。
- en: See also
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")'
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Generate a declarative base class.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个声明性基类。
- en: Classes that inherit from the returned class object will be automatically mapped
    using declarative mapping.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自返回的类对象的类将使用声明性映射自动映射。
- en: 'E.g.:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The above dynamically generated class is equivalent to the non-dynamic example
    below:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述动态生成的类等同于下面的非动态示例：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Changed in version 2.0: Note that the [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") method is superseded by the new [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class, which generates a new “base” class using
    subclassing, rather than return value of a function. This allows an approach that
    is compatible with [**PEP 484**](https://peps.python.org/pep-0484/) typing tools.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 变更：请注意，[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")方法已被新的[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")类取代，该类使用子类化生成一个新的“基”类，而不是函数的返回值。这样可以与[**PEP 484**](https://peps.python.org/pep-0484/)类型工具兼容的方法。
- en: The [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    method provides the implementation for the [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function, which creates the [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") and base class all at once.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")方法提供了[`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")函数的实现，该函数一次性创建了[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")和基类。'
- en: See the section [Declarative Mapping](mapping_styles.html#orm-declarative-mapping)
    for background and examples.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[声明式映射](mapping_styles.html#orm-declarative-mapping)部分以获取背景和示例。
- en: 'Parameters:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – An optional callable, defaults to [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"). This function is used to generate new [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 可选可调用对象，默认为[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。此函数用于生成新的[`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象。'
- en: '`cls` – Defaults to `object`. A type to use as the base for the generated declarative
    base class. May be a class or tuple of classes.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cls` – 默认为`object`。要用作生成的声明性基类的基础的类型。可以是类或类的元组。'
- en: '`name` – Defaults to `Base`. The display name for the generated class. Customizing
    this is not required, but can improve clarity in tracebacks and debugging.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 默认为`Base`。生成类的显示名称。虽然不需要自定义此项，但可以提高回溯和调试时的清晰度。'
- en: '`metaclass` – Defaults to `DeclarativeMeta`. A metaclass or __metaclass__ compatible
    callable to use as the meta type of the generated declarative base class.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metaclass` – 默认为`DeclarativeMeta`。作为生成的声明性基类的元类型的元类或`__metaclass__`兼容可调用对象。'
- en: See also
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Declarative Mapping](mapping_styles.html#orm-declarative-mapping)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式映射](mapping_styles.html#orm-declarative-mapping)'
- en: '[`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")'
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Map a class declaratively.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性地映射一个类。
- en: In this form of mapping, the class is scanned for mapping information, including
    for columns to be associated with a table, and/or an actual table object.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种映射形式中，将扫描类以获取映射信息，包括要与表关联的列和/或实际表对象。
- en: Returns the [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 返回[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象。
- en: 'E.g.:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This function is more conveniently invoked indirectly via either the [`registry.mapped()`](#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") class decorator or by subclassing a declarative
    metaclass generated from [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base").
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数更方便地通过[`registry.mapped()`](#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped")类装饰器或通过从[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")生成的声明性元类的子类间接调用。
- en: See the section [Declarative Mapping](mapping_styles.html#orm-declarative-mapping)
    for complete details and examples.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 查看完整详情和示例，请参阅[声明式映射](mapping_styles.html#orm-declarative-mapping)部分。
- en: 'Parameters:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**cls** – class to be mapped.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**cls** – 要映射的类。'
- en: 'Returns:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象。
- en: See also
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Declarative Mapping](mapping_styles.html#orm-declarative-mapping)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式映射](mapping_styles.html#orm-declarative-mapping)'
- en: '[`registry.mapped()`](#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped")
    - more common decorator interface to this function.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry.mapped()`](#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped")
    - 更常见的此函数的装饰器接口。'
- en: '[`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively "sqlalchemy.orm.registry.map_imperatively")'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively "sqlalchemy.orm.registry.map_imperatively")'
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Map a class imperatively.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 命令式地映射一个类。
- en: In this form of mapping, the class is not scanned for any mapping information.
    Instead, all mapping constructs are passed as arguments.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种映射形式中，不会扫描类以获取任何映射信息。相反，所有映射构造都作为参数传递。
- en: This method is intended to be fully equivalent to the now-removed SQLAlchemy
    `mapper()` function, except that it’s in terms of a particular registry.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法旨在与现在已删除的SQLAlchemy `mapper()`函数完全等效，只是以特定注册表的术语表示。
- en: 'E.g.:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See the section [Imperative Mapping](mapping_styles.html#orm-imperative-mapping)
    for complete background and usage examples.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 查看完整背景和用法示例，请参阅[命令式映射](mapping_styles.html#orm-imperative-mapping)部分。
- en: 'Parameters:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`class_` – The class to be mapped. Corresponds to the [`Mapper.class_`](#sqlalchemy.orm.Mapper.params.class_
    "sqlalchemy.orm.Mapper") parameter.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 要映射的类。对应于[`Mapper.class_`](#sqlalchemy.orm.Mapper.params.class_
    "sqlalchemy.orm.Mapper")参数。'
- en: '`local_table` – the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object that is the subject of the mapping.
    Corresponds to the [`Mapper.local_table`](#sqlalchemy.orm.Mapper.params.local_table
    "sqlalchemy.orm.Mapper") parameter.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local_table` – 映射的主题是[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象。对应于[`Mapper.local_table`](#sqlalchemy.orm.Mapper.params.local_table
    "sqlalchemy.orm.Mapper")参数。'
- en: '`**kw` – all other keyword arguments are passed to the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructor directly.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 所有其他关键字参数直接传递给[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")构造函数。'
- en: See also
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Imperative Mapping](mapping_styles.html#orm-imperative-mapping)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[命令式映射](mapping_styles.html#orm-imperative-mapping)'
- en: '[Declarative Mapping](mapping_styles.html#orm-declarative-mapping)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式映射](mapping_styles.html#orm-declarative-mapping)'
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Class decorator that will apply the Declarative mapping process to a given class.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 类装饰器，将声明式映射过程应用于给定的类。
- en: 'E.g.:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See the section [Declarative Mapping](mapping_styles.html#orm-declarative-mapping)
    for complete details and examples.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[声明式映射](mapping_styles.html#orm-declarative-mapping)部分，获取完整的细节和示例。
- en: 'Parameters:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**cls** – class to be mapped.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**cls** – 要映射的类。'
- en: 'Returns:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the class that was passed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 传递的类。
- en: See also
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Declarative Mapping](mapping_styles.html#orm-declarative-mapping)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式映射](mapping_styles.html#orm-declarative-mapping)'
- en: '[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    - generates a base class that will apply Declarative mapping to subclasses automatically
    using a Python metaclass.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    - 生成一个基类，将自动对子类应用声明式映射，使用Python元类。'
- en: See also
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`registry.mapped_as_dataclass()`](#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry.mapped_as_dataclass()`](#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")'
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Class decorator that will apply the Declarative mapping process to a given class,
    and additionally convert the class to be a Python dataclass.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 类装饰器，将声明式映射过程应用于给定的类，并将类转换为Python数据类。
- en: See also
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses)
    - complete background on SQLAlchemy native dataclass mapping'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式数据类映射](dataclasses.html#orm-declarative-native-dataclasses) - SQLAlchemy原生数据类映射的完整背景'
- en: New in version 2.0.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: read only collection of all [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 所有[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象的只读集合。
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: update the [`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") with new values.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新值更新[`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")。
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add a new mapped attribute to an ORM mapped class.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 向ORM映射类添加新的映射属性。
- en: 'E.g.:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This may be used for ORM mappings that aren’t using a declarative metaclass
    that intercepts attribute set operations.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这可用于未使用截获属性设置操作的声明性元类的ORM映射。
- en: New in version 2.0.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Provide a column-level property for use with a mapping.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为映射提供列级属性。
- en: With Declarative mappings, [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is used to map read-only SQL expressions to
    a mapped class.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明式映射时，[`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")用于将只读的SQL表达式映射到映射类。
- en: When using Imperative mappings, [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") also takes on the role of mapping table columns
    with additional features. When using fully Declarative mappings, the [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct should be used for this purpose.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令式映射时，[`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")还承担了将表列与附加功能进行映射的角色。使用完全声明式映射时，应使用[`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造来实现此目的。
- en: With Declarative Dataclass mappings, [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is considered to be **read only**, and will
    not be included in the Dataclass `__init__()` constructor.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明式数据类映射中，[`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    被认为是**只读**的，并且不会包含在数据类的 `__init__()` 构造函数中。
- en: The [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    function returns an instance of [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty").
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    函数返回 [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    的实例。'
- en: See also
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using column_property](mapped_sql_expr.html#mapper-column-property-sql-expressions)
    - general use of [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    to map SQL expressions'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 column_property](mapped_sql_expr.html#mapper-column-property-sql-expressions)
    - 通常使用 [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    来映射SQL表达式。'
- en: '[Applying Load, Persistence and Mapping Options for Imperative Table Columns](declarative_tables.html#orm-imperative-table-column-options)
    - usage of [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    with Imperative Table mappings to apply additional options to a plain [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[对命令式表列应用加载、持久化和映射选项](declarative_tables.html#orm-imperative-table-column-options)
    - 使用[`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")与命令式表映射，将附加选项应用到普通[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的用法。'
- en: 'Parameters:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – list of Column objects to be mapped.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 要映射的列对象列表。'
- en: '`active_history=False` – Used only for Imperative Table mappings, or legacy-style
    Declarative mappings (i.e. which have not been upgraded to [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")), for column-based attributes that are expected
    to be writeable; use [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    with [`mapped_column.active_history`](#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column") for Declarative mappings. See that parameter for
    functional details.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_history=False` – 仅用于命令式表映射，或遗留式声明式映射（即尚未升级为[`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")的映射），用于预期可写的基于列的属性；对于声明式映射，请使用 [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 与 [`mapped_column.active_history`](#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column")。有关功能细节，请参阅该参数。'
- en: '`comparator_factory` – a class which extends [`Comparator`](internals.html#sqlalchemy.orm.ColumnProperty.Comparator
    "sqlalchemy.orm.ColumnProperty.Comparator") which provides custom SQL clause generation
    for comparison operations.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comparator_factory` – 一个继承自[`Comparator`](internals.html#sqlalchemy.orm.ColumnProperty.Comparator
    "sqlalchemy.orm.ColumnProperty.Comparator")的类，提供比较操作的自定义SQL子句生成。'
- en: '`group` – a group name for this property when marked as deferred.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group` – 当标记为延迟加载时，此属性的组名称。'
- en: '`deferred` – when True, the column property is “deferred”, meaning that it
    does not load immediately, and is instead loaded when the attribute is first accessed
    on an instance. See also [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred").'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferred` – 当为True时，列属性是“延迟加载”的，这意味着它不会立即加载，而是在首次在实例上访问属性时加载。另请参阅 [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")。'
- en: '`doc` – optional string that will be applied as the doc on the class-bound
    descriptor.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc` – 可选字符串，将应用于类绑定的描述符的文档。'
- en: '`expire_on_flush=True` – Disable expiry on flush. A column_property() which
    refers to a SQL expression (and not a single table-bound column) is considered
    to be a “read only” property; populating it has no effect on the state of data,
    and it can only return database state. For this reason a column_property()’s value
    is expired whenever the parent object is involved in a flush, that is, has any
    kind of “dirty” state within a flush. Setting this parameter to `False` will have
    the effect of leaving any existing value present after the flush proceeds. Note
    that the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with default expiration settings still expires all attributes after a [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") call, however.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expire_on_flush=True` – 禁用刷新时的过期。引用 SQL 表达式（而不是单个表绑定列）的 column_property()
    被视为“只读”属性；填充它对数据状态没有影响，它只能返回数据库状态。因此，每当父对象涉及到刷新时，即在刷新中具有任何类型的“脏”状态时，都会过期 column_property()
    的值。将此参数设置为 `False` 将导致在刷新继续进行后保留任何现有值。请注意，默认过期设置的 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 仍在 [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 调用后过期所有属性，但是。'
- en: '`info` – Optional data dictionary which will be populated into the [`MapperProperty.info`](internals.html#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") attribute of this object.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的 [`MapperProperty.info`](internals.html#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") 属性中。'
- en: '`raiseload` –'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raiseload` –'
- en: if True, indicates the column should raise an error when undeferred, rather
    than loading the value. This can be altered at query time by using the [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") option with raiseload=False.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则表示在未延迟加载列时应引发错误，而不是加载值。可以通过在查询时使用带有 raiseload=False 的 [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") 选项来更改此行为。
- en: New in version 1.4.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始新增。
- en: See also
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using raiseload to prevent deferred column loads](queryguide/columns.html#orm-queryguide-deferred-raiseload)'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 raiseload 避免延迟列加载](queryguide/columns.html#orm-queryguide-deferred-raiseload)'
- en: '`init` –'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init` –'
- en: 'Deprecated since version 1.4: The [`column_property.init`](#sqlalchemy.orm.column_property.params.init
    "sqlalchemy.orm.column_property") parameter is deprecated for [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This parameter applies to a writeable-attribute
    in a Declarative Dataclasses configuration only, and [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is treated as a read-only attribute in this
    context.'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`column_property.init`](#sqlalchemy.orm.column_property.params.init
    "sqlalchemy.orm.column_property") 参数对于 [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 已弃用。此参数仅适用于声明性数据类配置中的可写属性，而 [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 在此上下文中被视为只读属性。
- en: '`default` –'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` –'
- en: 'Deprecated since version 1.4: The [`column_property.default`](#sqlalchemy.orm.column_property.params.default
    "sqlalchemy.orm.column_property") parameter is deprecated for [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This parameter applies to a writeable-attribute
    in a Declarative Dataclasses configuration only, and [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is treated as a read-only attribute in this
    context.'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`column_property.default`](#sqlalchemy.orm.column_property.params.default
    "sqlalchemy.orm.column_property") 参数对于 [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 已弃用。此参数仅适用于声明性数据类配置中的可写属性，而 [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 在此上下文中被视为只读属性。
- en: '`default_factory` –'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_factory` –'
- en: 'Deprecated since version 1.4: The [`column_property.default_factory`](#sqlalchemy.orm.column_property.params.default_factory
    "sqlalchemy.orm.column_property") parameter is deprecated for [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This parameter applies to a writeable-attribute
    in a Declarative Dataclasses configuration only, and [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is treated as a read-only attribute in this
    context.'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 1.4 版本起弃用：[`column_property.default_factory`](#sqlalchemy.orm.column_property.params.default_factory
    "sqlalchemy.orm.column_property") 参数已弃用于 [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")。此参数仅适用于声明性数据类配置中的可写属性，而在此上下文中，[`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 被视为只读属性。
- en: '`kw_only` –'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kw_only` –'
- en: 'Deprecated since version 1.4: The [`column_property.kw_only`](#sqlalchemy.orm.column_property.params.kw_only
    "sqlalchemy.orm.column_property") parameter is deprecated for [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This parameter applies to a writeable-attribute
    in a Declarative Dataclasses configuration only, and [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is treated as a read-only attribute in this
    context.'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 1.4 版本起弃用：[`column_property.kw_only`](#sqlalchemy.orm.column_property.params.kw_only
    "sqlalchemy.orm.column_property") 参数已弃用于 [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")。此参数仅适用于声明性数据类配置中的可写属性，而在此上下文中，[`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 被视为只读属性。
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Construct a base class for declarative class definitions.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 构建用于声明性类定义的基类。
- en: The new base class will be given a metaclass that produces appropriate [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and makes the appropriate [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") calls based on the information provided declaratively
    in the class and any subclasses of the class.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 新的基类将被赋予一个元类，该元类生成适当的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象，并根据在类及其任何子类中声明的信息进行适当的 [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 调用。
- en: 'Changed in version 2.0: Note that the [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function is superseded by the new [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class, which generates a new “base” class using
    subclassing, rather than return value of a function. This allows an approach that
    is compatible with [**PEP 484**](https://peps.python.org/pep-0484/) typing tools.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中更改：注意 [`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    函数已被新的 [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    类所取代，该类使用子类化生成一个新的“基”类，而不是一个函数的返回值。这允许与 [**PEP 484**](https://peps.python.org/pep-0484/)
    类型工具兼容的方法。
- en: 'The [`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    function is a shorthand version of using the [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") method. That is, the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    函数是使用 [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    方法的简写版本。即：'
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Is equivalent to:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See the docstring for [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    and [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    for more details.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") 和 [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") 的文档字符串以获取更多细节。
- en: 'Changed in version 1.4: The [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function is now a specialization of the more
    generic [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") class.
    The function also moves to the `sqlalchemy.orm` package from the `declarative.ext`
    package.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：[`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    函数现在是更通用的 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") 类的特化版本。该函数还从
    `declarative.ext` 包移动到 `sqlalchemy.orm` 包中。
- en: 'Parameters:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`metadata` – An optional [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") instance. All [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects implicitly declared by subclasses of the base
    will share this MetaData. A MetaData instance will be created if none is provided.
    The [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    instance will be available via the `metadata` attribute of the generated declarative
    base class.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 可选的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")实例。所有基类的子类隐式声明的所有[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象将共享此MetaData。如果未提供，则将创建一个MetaData实例。 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 实例将通过生成的声明性基类的 `metadata` 属性可用。'
- en: '`mapper` – An optional callable, defaults to [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"). Will be used to map subclasses to their Tables.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 可选可调用项，默认为[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。将用于将子类映射到其表格。'
- en: '`cls` – Defaults to `object`. A type to use as the base for the generated declarative
    base class. May be a class or tuple of classes.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cls` – 默认为`object`。要用作生成的声明性基类的基类的类型。可以是一个类或类的元组。'
- en: '`name` – Defaults to `Base`. The display name for the generated class. Customizing
    this is not required, but can improve clarity in tracebacks and debugging.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 默认为`Base`。生成类的显示名称。不需要自定义此选项，但可以提高回溯和调试时的清晰度。'
- en: '`constructor` – Specify the implementation for the `__init__` function on a
    mapped class that has no `__init__` of its own. Defaults to an implementation
    that assigns **kwargs for declared fields and relationships to an instance. If
    `None` is supplied, no __init__ will be provided and construction will fall back
    to cls.__init__ by way of the normal Python semantics.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constructor` – 指定在没有自己的`__init__`的映射类上实现`__init__`函数的实现。默认为一种实现，将声明的字段和关系的
    **kwargs 分配给一个实例。如果提供了`None`，则不会提供`__init__`，并且构造将通过普通的Python语义回退到cls.`__init__`。'
- en: '`class_registry` – optional dictionary that will serve as the registry of class
    names-> mapped classes when string names are used to identify classes inside of
    [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    and others. Allows two or more declarative base classes to share the same registry
    of class names for simplified inter-base relationships.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_registry` – 可选字典，将用作当使用字符串名称标识[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")等内部的类时，类名->映射类的注册表。允许两个或更多声明性基类共享相同的类名注册表，以简化基类之间的关系。'
- en: '`type_annotation_map` –'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_annotation_map` –'
- en: optional dictionary of Python types to SQLAlchemy [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") classes or instances. This is used exclusively
    by the [`MappedColumn`](internals.html#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    construct to produce column types based on annotations within the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") type.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python类型到SQLAlchemy [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类或实例的可选字典。这仅由[`MappedColumn`](internals.html#sqlalchemy.orm.MappedColumn
    "sqlalchemy.orm.MappedColumn")构造用于基于[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类型中的注释生成列类型。
- en: New in version 2.0.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Customizing the Type Map](declarative_tables.html#orm-declarative-mapped-column-type-map)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义类型映射](declarative_tables.html#orm-declarative-mapped-column-type-map)'
- en: '`metaclass` – Defaults to `DeclarativeMeta`. A metaclass or __metaclass__ compatible
    callable to use as the meta type of the generated declarative base class.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metaclass` – 默认为`DeclarativeMeta`。要用作生成的声明性基类的元类型的元类或`__metaclass__`兼容可调用项。'
- en: See also
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")'
- en: '[PRE24]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Mark a class as providing the feature of “declarative mixin”.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将类标记为提供“声明性混合”的功能。
- en: 'E.g.:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE25]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The [`declarative_mixin()`](#sqlalchemy.orm.declarative_mixin "sqlalchemy.orm.declarative_mixin")
    decorator currently does not modify the given class in any way; it’s current purpose
    is strictly to assist the [Mypy plugin](extensions/mypy.html) in being able to
    identify SQLAlchemy declarative mixin classes when no other context is present.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declarative_mixin()`](#sqlalchemy.orm.declarative_mixin "sqlalchemy.orm.declarative_mixin")
    装饰器当前不会以任何方式修改给定的类；其当前目的严格来说是帮助[Mypy插件](extensions/mypy.html)能够在没有其他上下文的情况下识别SQLAlchemy声明性混合类。'
- en: New in version 1.4.6.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.6中的新功能。
- en: See also
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Mixins 组合映射层次结构](declarative_mixins.html)'
- en: '[Using @declared_attr and Declarative Mixins](extensions/mypy.html#mypy-declarative-mixins)
    - in the [Mypy plugin documentation](extensions/mypy.html)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 @declared_attr 和声明性 Mixins](extensions/mypy.html#mypy-declarative-mixins)
    - 在[Mypy 插件文档](extensions/mypy.html)中'
- en: '[PRE26]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Class decorator which will adapt a given class into a [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base").
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 类装饰器，将给定的类适应为[`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")。
- en: This function makes use of the [`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base") method, by first creating a [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") automatically and then invoking the decorator.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数利用了[`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base")方法，首先自动创建一个[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")，然后调用装饰器。
- en: 'E.g.:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE27]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: See also
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base")'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base")'
- en: '[PRE28]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: declare a new ORM-mapped [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") construct for use within [Declarative Table](declarative_tables.html#orm-declarative-table)
    configuration.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 为在[声明性表](declarative_tables.html#orm-declarative-table)配置中使用的新的 ORM 映射的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")构造声明。
- en: The [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    function provides an ORM-aware and Python-typing-compatible construct which is
    used with [declarative](mapping_styles.html#orm-declarative-mapping) mappings
    to indicate an attribute that’s mapped to a Core [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object. It provides the equivalent feature as mapping
    an attribute to a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object directly when using Declarative, specifically when using [Declarative Table](declarative_tables.html#orm-declarative-table)
    configuration.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")函数提供了一个与
    ORM 兼容且与 Python 类型兼容的构造，用于[声明性](mapping_styles.html#orm-declarative-mapping)映射，指示映射到
    Core [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的属性。当使用声明性时，特别是在使用[声明性表](declarative_tables.html#orm-declarative-table)配置时，它提供了将属性映射到[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的等效功能。'
- en: New in version 2.0.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: '[`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    is normally used with explicit typing along with the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation type, where it can derive the SQL type and
    nullability for the column based on what’s present within the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation. It also may be used without annotations as
    a drop-in replacement for how [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is used in Declarative mappings in SQLAlchemy 1.x
    style.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")通常与显式类型一起使用，以及[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")注释类型一起使用，它可以根据[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")注释中的内容推导出列的SQL类型和可空性。它也可以在不带注释的情况下使用，作为 SQLAlchemy 1.x
    风格中声明性映射中使用[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的替代品。'
- en: For usage examples of [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column"),
    see the documentation at [Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")的使用示例，请参阅[使用
    mapped_column() 的声明性表](declarative_tables.html#orm-declarative-table)中的文档。
- en: See also
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)
    - complete documentation'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 mapped_column() 的声明性表](declarative_tables.html#orm-declarative-table) -
    完整文档'
- en: '[ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    - migration notes for Declarative mappings using 1.x style mappings'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 声明性模型](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    - 使用 1.x 风格映射的声明性映射的迁移说明'
- en: 'Parameters:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`__name` – String name to give to the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This is an optional, positional only argument that
    if present must be the first positional argument passed. If omitted, the attribute
    name to which the [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    is mapped will be used as the SQL column name.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__name` – 要为 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    指定的字符串名称。这是一个可选的仅位置参数，如果存在，必须是传递的第一个位置参数。如果省略，则将使用 [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 映射到的属性名称作为 SQL 列名。'
- en: '`__type` – [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") type or instance which will indicate the datatype
    to be associated with the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This is an optional, positional-only argument that
    if present must immediately follow the `__name` parameter if present also, or
    otherwise be the first positional parameter. If omitted, the ultimate type for
    the column may be derived either from the annotated type, or if a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") is present, from the datatype of the referenced
    column.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__type` – [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类型或实例，指示与 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联的数据类型。这是一个可选的仅位置参数，如果存在，则必须紧随 `__name` 参数，否则必须是第一个位置参数。如果省略，则列的最终类型可以从注释类型中推导出，或者如果存在
    [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")，则可以从引用列的数据类型中推导出。'
- en: '`*args` – Additional positional arguments include constructs such as [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"), and [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"), which are passed through to the constructed [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` – 额外的位置参数包括诸如 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")、[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 和 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 这样的结构，它们被传递到构造的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 中。'
- en: '`nullable` – Optional bool, whether the column should be “NULL” or “NOT NULL”.
    If omitted, the nullability is derived from the type annotation based on whether
    or not `typing.Optional` is present. `nullable` defaults to `True` otherwise for
    non-primary key columns, and `False` for primary key columns.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nullable` – 可选布尔值，指示列是否应为“NULL”或“NOT NULL”。如果省略，nullability 将根据类型注释推导而来，根据
    `typing.Optional` 是否存在而定。否则，对于非主键列，`nullable` 默认为 `True`，对于主键列，默认为 `False`。'
- en: '`primary_key` – optional bool, indicates the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") would be part of the table’s primary key or not.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`primary_key` – 可选布尔值，表示 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 是否将成为表的主键。'
- en: '`deferred` –'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferred` –'
- en: Optional bool - this keyword argument is consumed by the ORM declarative process,
    and is not part of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") itself; instead, it indicates that this column should
    be “deferred” for loading as though mapped by [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred").
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选布尔值 - 此关键字参数由 ORM 声明过程使用，并不是 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 本身的一部分；相反，它表示此列应当被“延迟”加载，就好像被 [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") 映射一样。
- en: See also
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Column Deferral on Mappings](queryguide/columns.html#orm-queryguide-deferred-declarative)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置映射中的列延迟](queryguide/columns.html#orm-queryguide-deferred-declarative)'
- en: '`deferred_group` –'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferred_group` –'
- en: Implies [`mapped_column.deferred`](#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") to `True`, and set the [`deferred.group`](queryguide/columns.html#sqlalchemy.orm.deferred.params.group
    "sqlalchemy.orm.deferred") parameter.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 暗示将 [`mapped_column.deferred`](#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") 设置为 `True`，并设置 [`deferred.group`](queryguide/columns.html#sqlalchemy.orm.deferred.params.group
    "sqlalchemy.orm.deferred") 参数。
- en: See also
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Loading deferred columns in groups](queryguide/columns.html#orm-queryguide-deferred-group)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[以组加载延迟列](queryguide/columns.html#orm-queryguide-deferred-group)'
- en: '`deferred_raiseload` –'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferred_raiseload` –'
- en: Implies [`mapped_column.deferred`](#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") to `True`, and set the [`deferred.raiseload`](queryguide/columns.html#sqlalchemy.orm.deferred.params.raiseload
    "sqlalchemy.orm.deferred") parameter.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 意味着将 [`mapped_column.deferred`](#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") 设置为 `True`，并设置 [`deferred.raiseload`](queryguide/columns.html#sqlalchemy.orm.deferred.params.raiseload
    "sqlalchemy.orm.deferred") 参数。
- en: See also
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using raiseload to prevent deferred column loads](queryguide/columns.html#orm-queryguide-deferred-raiseload)'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 raiseload 避免延迟加载列](queryguide/columns.html#orm-queryguide-deferred-raiseload)'
- en: '`use_existing_column` –'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_existing_column` –'
- en: if True, will attempt to locate the given column name on an inherited superclass
    (typically single inheriting superclass), and if present, will not produce a new
    column, mapping to the superclass column as though it were omitted from this class.
    This is used for mixins that add new columns to an inherited superclass.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则尝试在继承的超类（通常是单一继承的超类）上定位给定列名，如果存在，则不会生成新列，将映射到超类列，就好像该列从此类中省略一样。这用于将新列添加到继承的超类的混合类。
- en: See also
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Resolving Column Conflicts with use_existing_column](inheritance.html#orm-inheritance-column-conflicts)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 use_existing_column 解决列冲突](inheritance.html#orm-inheritance-column-conflicts)'
- en: New in version 2.0.0b4.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 2.0.0b4 版开始新增。
- en: '`default` –'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` –'
- en: Passed directly to the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") parameter if the [`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") parameter is not present. Additionally, when used
    with [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates a default Python value that should be applied to the keyword constructor
    within the generated `__init__()` method.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 [`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") 参数不存在，则直接传递给 [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 参数。此外，在使用[声明式数据类映射](dataclasses.html#orm-declarative-native-dataclasses)时，表示应该应用于生成的
    `__init__()` 方法内的关键字构造函数的默认 Python 值。
- en: Note that in the case of dataclass generation when [`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") is not present, this means the [`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") value is used in **two** places, both the `__init__()`
    method as well as the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") parameter. While this behavior may change in a future
    release, for the moment this tends to “work out”; a default of `None` will mean
    that the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    gets no default generator, whereas a default that refers to a non-`None` Python
    or SQL expression value will be assigned up front on the object when `__init__()`
    is called, which is the same value that the Core [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct would use in any case, leading to
    the same end result.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，在生成数据类时，当 [`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") 不存在时，这意味着 [`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") 的值将在 **两个** 地方使用，即 `__init__()` 方法和 [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 参数。虽然此行为可能在将来的版本中更改，但目前这种情况通常“可以解决”；`None` 的默认值意味着
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    不会得到默认生成器，而引用非`None`的默认值将在调用`__init__()`时提前分配给对象，在任何情况下，核心 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造将使用相同的值，从而导致相同的最终结果。
- en: Note
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: When using Core level column defaults that are callables to be interpreted by
    the underlying [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    in conjunction with [ORM-mapped dataclasses](dataclasses.html#orm-declarative-native-dataclasses),
    especially those that are [context-aware default functions](../core/defaults.html#context-default-functions),
    **the** [`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") **parameter must be used instead**. This is necessary
    to disambiguate the callable from being interpreted as a dataclass level default.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用在Core级别的列默认值作为可调用对象，由底层[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")与[ORM映射的数据类](dataclasses.html#orm-declarative-native-dataclasses)，特别是那些是[上下文感知的默认函数](../core/defaults.html#context-default-functions)时，必须使用**[`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column")参数**。这是必要的，以消除可调用对象被解释为数据类级别默认值的歧义。
- en: '`insert_default` – Passed directly to the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") parameter; will supersede the value of [`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") when present, however [`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") will always apply to the constructor default for
    a dataclasses mapping.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert_default` – 直接传递给[`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column")参数；当存在时，将取代[`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column")的值，但无论何时，[`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column")都将应用于数据类映射的构造函数默认值。'
- en: '`sort_order` –'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_order` –'
- en: An integer that indicates how this mapped column should be sorted compared to
    the others when the ORM is creating a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Among mapped columns that have the same value the
    default ordering is used, placing first the mapped columns defined in the main
    class, then the ones in the super classes. Defaults to 0\. The sort is ascending.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示当ORM创建[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")时，此映射列应如何与其他列排序的整数。对于具有相同值的映射列，默认使用默认排序，首先放置在主类中定义的映射列，然后放置在超类中的映射列。默认为0。排序为升序。
- en: New in version 2.0.4.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本2.0.4中的新内容。
- en: '`active_history=False` –'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_history=False` –'
- en: When `True`, indicates that the “previous” value for a scalar attribute should
    be loaded when replaced, if not already loaded. Normally, history tracking logic
    for simple non-primary-key scalar values only needs to be aware of the “new” value
    in order to perform a flush. This flag is available for applications that make
    use of [`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history") or [`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") which also need to know the “previous” value
    of the attribute.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`True`时，表示应在替换时加载标量属性的“上一个”值，如果尚未加载。通常，简单非主键标量值的历史跟踪逻辑只需要知道“新”值就能执行刷新。此标志适用于需要使用[`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history")或[`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")并且还需要知道属性的“上一个”值的应用程序。
- en: New in version 2.0.10.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本2.0.10中的新内容。
- en: '`init` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__init__()` method as
    generated by the dataclass process.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init` – 特定于[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，指定映射属性是否应作为数据类过程生成的`__init__()`方法的一部分。'
- en: '`repr` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__repr__()` method as
    generated by the dataclass process.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repr` – 特定于[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，指定映射属性是否应作为数据类过程生成的`__repr__()`方法的一部分。'
- en: '`default_factory` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies a default-value generation function that will take place as part of
    the `__init__()` method as generated by the dataclass process.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_factory` – 特定于[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，指定作为数据类过程生成的`__init__()`方法的一部分的默认值生成函数。'
- en: '`compare` –'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compare` –'
- en: Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be included in comparison operations when generating
    the `__eq__()` and `__ne__()` methods for the mapped class.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于[声明式数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，指示在为映射类生成`__eq__()`和`__ne__()`方法时，是否应包含此字段在比较操作中。
- en: New in version 2.0.0b4.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本2.0.0b4中新增。
- en: '`kw_only` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be marked as keyword-only when generating the `__init__()`.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kw_only` – 特定于[声明式数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，指示在生成`__init__()`时，是否应将此字段标记为仅关键字。'
- en: '`**kw` – All remaining keyword arguments are passed through to the constructor
    for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column").'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 所有剩余的关键字参数都传递给[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的构造函数。'
- en: '[PRE29]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Mark a class-level method as representing the definition of a mapped property
    or Declarative directive.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 将类级方法标记为表示映射属性或声明性指令定义。
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    is typically applied as a decorator to a class level method, turning the attribute
    into a scalar-like property that can be invoked from the uninstantiated class.
    The Declarative mapping process looks for these [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") callables as it scans classes, and assumes any
    attribute marked with [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    will be a callable that will produce an object specific to the Declarative mapping
    or table configuration.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")通常作为类级方法的装饰器应用，将属性转换为类似标量的属性，可以从未实例化的类中调用。声明性映射过程在扫描类时寻找这些[`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")可调用对象，并假定任何标记为[`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")的属性将是一个可调用对象，将生成特定于声明性映射或表配置的对象。'
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    is usually applicable to [mixins](declarative_mixins.html), to define relationships
    that are to be applied to different implementors of the class. It may also be
    used to define dynamically generated column expressions and other Declarative
    attributes.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")通常适用于[混入类](declarative_mixins.html)，用于定义应用于类的不同实现者的关系。它还可以用于定义动态生成的列表达式和其他声明性属性。'
- en: 'Example:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE30]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When used with Declarative directives such as `__tablename__`, the [`declared_attr.directive()`](#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") modifier may be used which indicates
    to [**PEP 484**](https://peps.python.org/pep-0484/) typing tools that the given
    method is not dealing with [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    attributes:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 当与`__tablename__`等声明性指令一起使用时，可以使用[`declared_attr.directive()`](#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive")修饰符，指示[**PEP 484**](https://peps.python.org/pep-0484/)类型工具，给定的方法不涉及[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")属性：
- en: '[PRE31]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    can also be applied directly to mapped classes, to allow for attributes that dynamically
    configure themselves on subclasses when using mapped inheritance schemes. Below
    illustrates [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    to create a dynamic scheme for generating the [`Mapper.polymorphic_identity`](#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") parameter for subclasses:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")也可以直接应用于映射类，以允许在使用映射继承方案时，属性可以在子类上动态配置自身。下面说明了使用[`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")创建为子类生成[`Mapper.polymorphic_identity`](#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper")参数的动态方案：'
- en: '[PRE32]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    supports decorating functions that are explicitly decorated with `@classmethod`.
    This is never necessary from a runtime perspective, however may be needed in order
    to support [**PEP 484**](https://peps.python.org/pep-0484/) typing tools that
    don’t otherwise recognize the decorated function as having class-level behaviors
    for the `cls` parameter:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")支持装饰使用`@classmethod`显式装饰的函数。从运行时的角度来看，这从未必要，但可能需要支持不认识已装饰函数具有类级行为的`cls`参数的[**PEP
    484**](https://peps.python.org/pep-0484/)类型工具：'
- en: '[PRE33]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'New in version 2.0: - [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    can accommodate a function decorated with `@classmethod` to help with [**PEP 484**](https://peps.python.org/pep-0484/)
    integration where needed.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能：- [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")可以容纳使用`@classmethod`装饰的函数，以帮助需要的[**PEP
    484**](https://peps.python.org/pep-0484/)集成。
- en: See also
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html) - Declarative
    Mixin documentation with background on use patterns for [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr").'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[通过混合组合映射层次结构](declarative_mixins.html) - 附带对[`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")使用模式的背景说明的声明性混合文档。'
- en: '**Members**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[cascading](#sqlalchemy.orm.declared_attr.cascading), [directive](#sqlalchemy.orm.declared_attr.directive)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[级联](#sqlalchemy.orm.declared_attr.cascading)，[指令](#sqlalchemy.orm.declared_attr.directive)'
- en: '**Class signature**'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    (`sqlalchemy.orm.base._MappedAttribute`, `sqlalchemy.orm.decl_api._declared_attr_common`)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    (`sqlalchemy.orm.base._MappedAttribute`, `sqlalchemy.orm.decl_api._declared_attr_common`)
- en: '[PRE34]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Mark a [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    as cascading.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")标记为级联。
- en: This is a special-use modifier which indicates that a column or MapperProperty-based
    declared attribute should be configured distinctly per mapped subclass, within
    a mapped-inheritance scenario.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特殊用途的修饰符，表明在映射继承场景中，列或基于MapperProperty的声明属性应该在映射的子类中独立配置。
- en: Warning
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The [`declared_attr.cascading`](#sqlalchemy.orm.declared_attr.cascading "sqlalchemy.orm.declared_attr.cascading")
    modifier has several limitations:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr.cascading`](#sqlalchemy.orm.declared_attr.cascading "sqlalchemy.orm.declared_attr.cascading")修饰符有几个限制：'
- en: The flag `only` applies to the use of [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on declarative mixin classes and `__abstract__`
    classes; it currently has no effect when used on a mapped class directly.
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志`only`适用于在声明性混合类和`__abstract__`类上使用[`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")；当直接在映射类上使用时，它目前没有任何效果。
- en: The flag `only` applies to normally-named attributes, e.g. not any special underscore
    attributes such as `__tablename__`. On these attributes it has `no` effect.
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志`only`仅适用于通常命名的属性，例如不是任何特殊下划线属性，例如`__tablename__`。在这些属性上它`没有`效果。
- en: The flag currently `does not allow further overrides` down the class hierarchy;
    if a subclass tries to override the attribute, a warning is emitted and the overridden
    attribute is skipped. This is a limitation that it is hoped will be resolved at
    some point.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前标志`不允许进一步覆盖`类层次结构下游；如果子类尝试覆盖属性，则会发出警告并跳过覆盖的属性。这是一个希望在某些时候解决的限制。
- en: 'Below, both MyClass as well as MySubClass will have a distinct `id` Column
    object established:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，无论是`MyClass`还是`MySubClass`都将建立一个独特的`id`列对象：
- en: '[PRE35]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The behavior of the above configuration is that `MySubClass` will refer to both
    its own `id` column as well as that of `MyClass` underneath the attribute named
    `some_id`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置的行为是，`MySubClass`将引用其自己的`id`列以及`MyClass`下面命名为`some_id`的属性。
- en: See also
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Declarative Inheritance](extensions/declarative/inheritance.html#declarative-inheritance)'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明性继承](extensions/declarative/inheritance.html#declarative-inheritance)'
- en: '[Using _orm.declared_attr() to generate table-specific inheriting columns](declarative_mixins.html#mixin-inheritance-columns)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 _orm.declared_attr() 生成特定表继承列](declarative_mixins.html#mixin-inheritance-columns)'
- en: '[PRE36]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Mark a [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    as decorating a Declarative directive such as `__tablename__` or `__mapper_args__`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    标记为装饰声明性指令，如 `__tablename__` 或 `__mapper_args__`。
- en: The purpose of [`declared_attr.directive`](#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") is strictly to support [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools, by allowing the decorated function to have a return type that is
    **not** using the [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    generic class, as would normally be the case when [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") is used for columns and mapped properties. At
    runtime, the [`declared_attr.directive`](#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") returns the [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") class unmodified.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr.directive`](#sqlalchemy.orm.declared_attr.directive "sqlalchemy.orm.declared_attr.directive")
    的目的严格是支持[**PEP 484**](https://peps.python.org/pep-0484/)类型工具，允许装饰的函数具有不使用 [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 通用类的返回类型，这在使用 [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 用于列和映射属性时通常是不会发生的。在运行时，[`declared_attr.directive`](#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") 返回未经修改的 [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 类。'
- en: 'E.g.:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE37]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: New in version 2.0.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: See also
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Mixins 组合映射层次结构](declarative_mixins.html)'
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")'
- en: '[PRE38]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Base class used for declarative class definitions.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 用于声明性类定义的基类。
- en: 'The [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    allows for the creation of new declarative bases in such a way that is compatible
    with type checkers:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    允许以与类型检查器兼容的方式创建新的声明性基类：'
- en: '[PRE39]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The above `Base` class is now usable as the base for new declarative mappings.
    The superclass makes use of the `__init_subclass__()` method to set up new classes
    and metaclasses aren’t used.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `Base` 类现在可用作新声明性映射的基类。超类利用 `__init_subclass__()` 方法设置新类，而不使用元类。
- en: 'When first used, the [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    class instantiates a new [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    to be used with the base, assuming one was not provided explicitly. The [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class supports class-level attributes which
    act as parameters for the construction of this registry; such as to indicate a
    specific [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection as well as a specific value for [`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry"):'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 首次使用时，[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    类实例化一个新的 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") 用于与基类一起使用，假设未明确提供。[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 类支持类级属性，这些属性充当此注册表构建的参数；例如指示特定的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合以及 [`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 的特定值：
- en: '[PRE40]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Class-level attributes which may be specified include:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 可指定的类级属性包括：
- en: 'Parameters:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`metadata` – optional [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection. If a [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") is constructed automatically, this [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection will be used to construct it. Otherwise,
    the local [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection will supercede that used by an existing [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") passed using the [`DeclarativeBase.registry`](#sqlalchemy.orm.DeclarativeBase.params.registry
    "sqlalchemy.orm.DeclarativeBase") parameter.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 可选的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合。如果自动构造了一个[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")，则将使用该[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合来构造它。否则，本地的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合将取代通过[`DeclarativeBase.registry`](#sqlalchemy.orm.DeclarativeBase.params.registry
    "sqlalchemy.orm.DeclarativeBase") 参数传递的现有[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 使用的集合。'
- en: '`type_annotation_map` – optional type annotation map that will be passed to
    the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") as [`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry").'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_annotation_map` – 可选的类型注释映射，将传递给[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 作为[`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry").'
- en: '`registry` – supply a pre-existing [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    directly.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registry` – 直接提供预先存在的[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")。'
- en: 'New in version 2.0: Added [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase"), so that declarative base classes may be constructed
    in such a way that is also recognized by [**PEP 484**](https://peps.python.org/pep-0484/)
    type checkers. As a result, [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") and other subclassing-oriented APIs should be
    seen as superseding previous “class returned by a function” APIs, namely [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") and [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base"), where the base class returned cannot
    be recognized by type checkers without using plugins.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能：添加了[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")，以便可以以也被[**PEP
    484**](https://peps.python.org/pep-0484/)类型检查器识别的方式构造声明性基类。因此，[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 和其他基于子类化的 API 应被视为取代先前的“由函数返回的类” API，即[`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 和[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")，其中返回的基类不能被类型检查器识别，除非使用插件。
- en: '**__init__ behavior**'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '**__init__ 行为**'
- en: In a plain Python class, the base-most `__init__()` method in the class hierarchy
    is `object.__init__()`, which accepts no arguments. However, when the [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") subclass is first declared, the class is given
    an `__init__()` method that links to the [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") constructor function, if no `__init__()` method is
    already present; this is the usual declarative constructor that will assign keyword
    arguments as attributes on the instance, assuming those attributes are established
    at the class level (i.e. are mapped, or are linked to a descriptor). This constructor
    is **never accessed by a mapped class without being called explicitly via super()**,
    as mapped classes are themselves given an `__init__()` method directly which calls
    [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor "sqlalchemy.orm.registry"),
    so in the default case works independently of what the base-most `__init__()`
    method does.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通的 Python 类中，类层次结构中基本的 `__init__()` 方法是 `object.__init__()`，不接受任何参数。然而，当首次声明[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")子类时，如果没有已经存在的 `__init__()` 方法，该类将被赋予一个 `__init__()`
    方法，该方法链接到[`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") 构造函数；这是通常的声明性构造函数，将关键字参数分配给实例的属性，假定这些属性在类级别已经建立（即已映射，或者与描述符链接）。这个构造函数**永远不会被映射类直接访问，除非通过显式调用
    super()**，因为映射类本身会直接得到一个 `__init__()` 方法，该方法调用[`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry")，所以在默认情况下独立于基本的 `__init__()` 方法的操作。
- en: 'Changed in version 2.0.1: [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") has a default constructor that links to [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") by default, so that calls to `super().__init__()` can
    access this constructor. Previously, due to an implementation mistake, this default
    constructor was missing, and calling `super().__init__()` would invoke `object.__init__()`.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.1 开始发生了变化：[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    现在具有默认构造函数，默认链接到 [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry")，以便调用 `super().__init__()` 可以访问此构造函数。先前，由于一个实现错误，这个默认构造函数丢失了，调用
    `super().__init__()` 将会调用 `object.__init__()`。
- en: 'The [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    subclass may also declare an explicit `__init__()` method which will replace the
    use of the [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") function at this level:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    子类也可以声明一个显式的 `__init__()` 方法，该方法将在此级别替代 [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") 函数的使用：'
- en: '[PRE41]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Mapped classes still will not invoke this constructor implicitly; it remains
    only accessible by calling `super().__init__()`:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 映射的类仍然不会隐式调用这个构造函数；只能通过调用 `super().__init__()` 来访问它：
- en: '[PRE42]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that this is a different behavior from what functions like the legacy [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") would do; the base created by those functions
    would always install [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") for `__init__()`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与诸如传统的 [`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    等函数的行为不同；由这些函数创建的基类将始终为 `__init__()` 安装 [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry")。
- en: '**Members**'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__mapper__](#sqlalchemy.orm.DeclarativeBase.__mapper__), [__mapper_args__](#sqlalchemy.orm.DeclarativeBase.__mapper_args__),
    [__table__](#sqlalchemy.orm.DeclarativeBase.__table__), [__table_args__](#sqlalchemy.orm.DeclarativeBase.__table_args__),
    [__tablename__](#sqlalchemy.orm.DeclarativeBase.__tablename__), [metadata](#sqlalchemy.orm.DeclarativeBase.metadata),
    [registry](#sqlalchemy.orm.DeclarativeBase.registry)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[__mapper__](#sqlalchemy.orm.DeclarativeBase.__mapper__), [__mapper_args__](#sqlalchemy.orm.DeclarativeBase.__mapper_args__),
    [__table__](#sqlalchemy.orm.DeclarativeBase.__table__), [__table_args__](#sqlalchemy.orm.DeclarativeBase.__table_args__),
    [__tablename__](#sqlalchemy.orm.DeclarativeBase.__tablename__), [metadata](#sqlalchemy.orm.DeclarativeBase.metadata),
    [registry](#sqlalchemy.orm.DeclarativeBase.registry)'
- en: '**Class signature**'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    (`sqlalchemy.inspection.Inspectable`)
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    (`sqlalchemy.inspection.Inspectable`)
- en: '[PRE43]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object to which
    a particular class is mapped.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 将特定类映射到的 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 对象。
- en: May also be acquired using [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"), e.g. `inspect(klass)`.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用 [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    获取，例如 `inspect(klass)`。
- en: '[PRE44]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Dictionary of arguments which will be passed to the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructor.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 构造函数的参数字典。
- en: See also
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Mapper Configuration Options with Declarative](declarative_config.html#orm-declarative-mapper-options)'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明式的 Mapper 配置选项](declarative_config.html#orm-declarative-mapper-options)'
- en: '[PRE45]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to which a particular subclass is mapped.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 将特定子类映射到的 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: This is usually an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but may also refer to other kinds of [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") such as [`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery"), depending on how the class is mapped.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的一个实例，但根据类的映射方式，也可能是其他类型的 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，比如 [`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")。
- en: See also
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Accessing Table and Metadata](declarative_tables.html#orm-declarative-metadata)'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[访问表和元数据](declarative_tables.html#orm-declarative-metadata)'
- en: '[PRE46]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: A dictionary or tuple of arguments that will be passed to the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor. See [Declarative Table Configuration](declarative_tables.html#orm-declarative-table-configuration)
    for background on the specific structure of this collection.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 将传递给[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造函数的参数字典或元组。有关此集合特定结构的背景，请参阅[声明式表配置](declarative_tables.html#orm-declarative-table-configuration)。
- en: See also
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Declarative Table Configuration](declarative_tables.html#orm-declarative-table-configuration)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式表配置](declarative_tables.html#orm-declarative-table-configuration)'
- en: '[PRE47]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: String name to assign to the generated [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, if not specified directly via [`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__
    "sqlalchemy.orm.DeclarativeBase.__table__").
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象分配的字符串名称，如果没有通过[`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__
    "sqlalchemy.orm.DeclarativeBase.__table__")直接指定。
- en: See also
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用mapped_column()的声明式表](declarative_tables.html#orm-declarative-table)'
- en: '[PRE48]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Refers to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection that will be used for new [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是将用于新[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合。
- en: See also
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Accessing Table and Metadata](declarative_tables.html#orm-declarative-metadata)'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '[访问表和元数据](declarative_tables.html#orm-declarative-metadata)'
- en: '[PRE49]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Refers to the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    in use where new [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects
    will be associated.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是新[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象将关联的正在使用的[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")。
- en: '[PRE50]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Same as [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase"),
    but does not use a metaclass to intercept new attributes.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")相同，但不使用元类拦截新属性。
- en: The [`DeclarativeBaseNoMeta`](#sqlalchemy.orm.DeclarativeBaseNoMeta "sqlalchemy.orm.DeclarativeBaseNoMeta")
    base may be used when use of custom metaclasses is desirable.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 当希望使用自定义元类时，可以使用[`DeclarativeBaseNoMeta`](#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta")基类。
- en: New in version 2.0.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: '**Members**'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__mapper__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__mapper__), [__mapper_args__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__mapper_args__),
    [__table__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__table__), [__table_args__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__table_args__),
    [__tablename__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__tablename__), [metadata](#sqlalchemy.orm.DeclarativeBaseNoMeta.metadata),
    [registry](#sqlalchemy.orm.DeclarativeBaseNoMeta.registry)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '[__mapper__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__mapper__), [__mapper_args__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__mapper_args__),
    [__table__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__table__), [__table_args__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__table_args__),
    [__tablename__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__tablename__), [metadata](#sqlalchemy.orm.DeclarativeBaseNoMeta.metadata),
    [registry](#sqlalchemy.orm.DeclarativeBaseNoMeta.registry)'
- en: '**Class signature**'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.DeclarativeBaseNoMeta`](#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") (`sqlalchemy.inspection.Inspectable`)
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.DeclarativeBaseNoMeta`](#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") (`sqlalchemy.inspection.Inspectable`)
- en: '[PRE51]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object to which
    a particular class is mapped.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 将特定类映射到的[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象。
- en: May also be acquired using [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"), e.g. `inspect(klass)`.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")获得，例如`inspect(klass)`。
- en: '[PRE52]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Dictionary of arguments which will be passed to the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructor.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 将传递给[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")构造函数的参数字典。
- en: See also
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mapper Configuration Options with Declarative](declarative_config.html#orm-declarative-mapper-options)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明式的Mapper配置选项](declarative_config.html#orm-declarative-mapper-options)'
- en: '[PRE53]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to which a particular subclass is mapped.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 将特定子类映射到的[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: This is usually an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but may also refer to other kinds of [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") such as [`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery"), depending on how the class is mapped.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的实例，但根据类的映射方式，也可能引用其他类型的[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，例如[`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")。
- en: See also
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Accessing Table and Metadata](declarative_tables.html#orm-declarative-metadata)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[访问表和元数据](declarative_tables.html#orm-declarative-metadata)'
- en: '[PRE54]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: A dictionary or tuple of arguments that will be passed to the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor. See [Declarative Table Configuration](declarative_tables.html#orm-declarative-table-configuration)
    for background on the specific structure of this collection.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 将传递给[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造函数的参数字典或元组。有关此集合特定结构的背景，请参阅[声明式表配置](declarative_tables.html#orm-declarative-table-configuration)。
- en: See also
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Declarative Table Configuration](declarative_tables.html#orm-declarative-table-configuration)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式表配置](declarative_tables.html#orm-declarative-table-configuration)'
- en: '[PRE55]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: String name to assign to the generated [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, if not specified directly via [`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__
    "sqlalchemy.orm.DeclarativeBase.__table__").
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 分配给生成的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的字符串名称，如果未直接通过[`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__
    "sqlalchemy.orm.DeclarativeBase.__table__")指定。
- en: See also
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[具有mapped_column()的声明式表](declarative_tables.html#orm-declarative-table)'
- en: '[PRE56]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Refers to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection that will be used for new [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是将用于新[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合。
- en: See also
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Accessing Table and Metadata](declarative_tables.html#orm-declarative-metadata)'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '[访问表和元数据](declarative_tables.html#orm-declarative-metadata)'
- en: '[PRE57]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Refers to the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    in use where new [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects
    will be associated.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是新的[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象将与之关联的正在使用的[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")。
- en: '[PRE58]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Given a class, return True if any of the classes it inherits from has a mapped
    table, otherwise return False.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个类，如果它继承的任何类都有一个映射表，则返回 True，否则返回 False。
- en: This is used in declarative mixins to build attributes that behave differently
    for the base class vs. a subclass in an inheritance hierarchy.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 这在声明式混合中用于构建在继承层次结构中的基类和子类之间行为不同的属性。
- en: See also
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Mixins and Base Classes with Mapped Inheritance Patterns](declarative_mixins.html#decl-mixin-inheritance)'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用混合和基类进行映射继承模式](declarative_mixins.html#decl-mixin-inheritance)'
- en: '[PRE59]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Decorator that produces an [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") attribute in conjunction with a Python descriptor.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 Python 描述符一起生成[`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")属性的装饰器。
- en: 'The function being decorated is passed to [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") as the [`synonym.descriptor`](mapped_attributes.html#sqlalchemy.orm.synonym.params.descriptor
    "sqlalchemy.orm.synonym") parameter:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 被装饰的函数将被传递给[`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")作为[`synonym.descriptor`](mapped_attributes.html#sqlalchemy.orm.synonym.params.descriptor
    "sqlalchemy.orm.synonym")参数：
- en: '[PRE60]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The [hybrid properties](mapped_attributes.html#mapper-hybrids) feature of SQLAlchemy
    is typically preferred instead of synonyms, which is a more legacy feature.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的[混合属性](mapped_attributes.html#mapper-hybrids)功能通常比同义词更受青睐，后者是一个更传统的功能。
- en: See also
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Synonyms](mapped_attributes.html#synonyms) - Overview of synonyms'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[同义词](mapped_attributes.html#synonyms) - 同义词概述'
- en: '[`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    - the mapper-level function'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    - 映射器级函数'
- en: '[Using Descriptors and Hybrids](mapped_attributes.html#mapper-hybrids) - The
    Hybrid Attribute extension provides an updated approach to augmenting attribute
    behavior more flexibly than can be achieved with synonyms.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用描述符和混合属性](mapped_attributes.html#mapper-hybrids) - Hybrid Attribute 扩展提供了一种更新的方法来更灵活地增强属性行为，比使用同义词更容易实现。'
- en: '[PRE61]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Given an object, return the primary Mapper associated with the object instance.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个对象，返回与该对象实例关联的主要映射器。
- en: Raises [`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError") if no mapping is configured.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有配置映射，则引发[`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError")。
- en: 'This function is available via the inspection system as:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能可通过检查系统使用：
- en: '[PRE62]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Using the inspection system will raise [`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") if the instance is not part of a mapping.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实例不是映射的一部分，则使用检查系统将引发[`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable")。
- en: '[PRE63]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Given a class, return the primary [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    associated with the key.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个类，返回与该键关联的主要[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。
- en: Raises [`UnmappedClassError`](exceptions.html#sqlalchemy.orm.exc.UnmappedClassError
    "sqlalchemy.orm.exc.UnmappedClassError") if no mapping is configured on the given
    class, or [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") if a non-class object is passed.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定类上没有配置映射，则引发[`UnmappedClassError`](exceptions.html#sqlalchemy.orm.exc.UnmappedClassError
    "sqlalchemy.orm.exc.UnmappedClassError")，或者如果传递了非类对象，则引发[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。
- en: 'Equivalent functionality is available via the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function as:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 相当的功能可以通过[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数实现：
- en: '[PRE64]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Using the inspection system will raise [`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") if the class is not mapped.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类未映射，则使用检查系统将引发[`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable")。
- en: '[PRE65]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Initialize the inter-mapper relationships of all mappers that have been constructed
    thus far across all [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    collections.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化到目前为止在所有[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")集合中已构建的所有映射器的互映关系。
- en: The configure step is used to reconcile and initialize the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") linkages between mapped classes, as well as to
    invoke configuration events such as the [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") and [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), which may be used by ORM extensions
    or user-defined extension hooks.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 配置步骤用于协调和初始化映射类之间的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")链接，以及调用配置事件，如[`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")和[`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")，这些事件可能被ORM扩展或用户定义的扩展钩子使用。
- en: Mapper configuration is normally invoked automatically, the first time mappings
    from a particular [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    are used, as well as whenever mappings are used and additional not-yet-configured
    mappers have been constructed. The automatic configuration process however is
    local only to the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    involving the target mapper and any related [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") objects which it may depend on; this is equivalent
    to invoking the [`registry.configure()`](#sqlalchemy.orm.registry.configure "sqlalchemy.orm.registry.configure")
    method on a particular [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry").
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器配置通常是自动调用的，第一次使用特定 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    的映射时，以及每当使用映射并且已经构造了额外的尚未配置的映射器时。然而，自动配置过程仅局限于涉及目标映射器和任何相关的 [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 对象的 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")；这相当于在特定
    [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") 上调用 [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 方法。
- en: By contrast, the [`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function will invoke the configuration process on all [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") objects that exist in memory, and may be useful for
    scenarios where many individual [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    objects that are nonetheless interrelated are in use.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 与之相比，[`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    函数将在内存中存在的所有 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    对象上调用配置过程，并且可能对使用许多个体 [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    对象但彼此相关的场景有用。
- en: 'Changed in version 1.4: As of SQLAlchemy 1.4.0b2, this function works on a
    per-[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") basis, locating
    all [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") objects present
    and invoking the [`registry.configure()`](#sqlalchemy.orm.registry.configure "sqlalchemy.orm.registry.configure")
    method on each. The [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") method may be preferred to limit the configuration
    of mappers to those local to a particular [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") and/or declarative base class.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：从 SQLAlchemy 1.4.0b2 开始，此函数按照每个 [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 的方式工作，定位所有存在的 [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 对象并调用每个对象上的 [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 方法。可能更喜欢使用 [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 方法来限制映射器的配置仅限于特定 [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 和/或声明性基类。
- en: Points at which automatic configuration is invoked include when a mapped class
    is instantiated into an instance, as well as when ORM queries are emitted using
    [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")
    or [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    with an ORM-enabled statement.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 自动配置被调用的点包括当映射类被实例化为实例时，以及当使用 [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") 或 [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 发出 ORM 查询时使用 ORM 启用的语句。
- en: 'The mapper configure process, whether invoked by [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") or from [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure"), provides several event hooks that can be
    used to augment the mapper configuration step. These hooks include:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器配置过程，无论是由 [`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    还是 [`registry.configure()`](#sqlalchemy.orm.registry.configure "sqlalchemy.orm.registry.configure")
    调用，都提供了几个可用于增强映射器配置步骤的事件挂钩。这些挂钩包括：
- en: '[`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") - called once before [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") or [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") does any work; this can be used to establish
    additional options, properties, or related mappings before the operation proceeds.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") - 在 [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 或 [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 执行任何工作之前调用一次；这可用于在操作继续之前建立其他选项、属性或相关映射。'
- en: '[`MapperEvents.mapper_configured()`](events.html#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") - called as each individual [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is configured within the process; will include all mapper
    state except for backrefs set up by other mappers that are still to be configured.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MapperEvents.mapper_configured()`](events.html#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") - 在进程中配置每个单独的 [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 时调用；将包括除其他映射器设置的反向引用之外的所有映射器状态，这些映射器尚未配置。'
- en: '[`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") - called once after [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") or [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") is complete; at this stage, all [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects that fall within the scope of the configuration
    operation will be fully configured. Note that the calling application may still
    have other mappings that haven’t been produced yet, such as if they are in modules
    as yet unimported, and may also have mappings that are still to be configured,
    if they are in other [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    collections not part of the current scope of configuration.'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") - 在 [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 或 [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 完成后调用一次；在此阶段，所有配置操作范围内的 [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象将被完全配置。请注意，调用应用程序可能仍然有其他尚未生成的映射，例如，如果它们在尚未导入的模块中，还可能有映射尚未配置，如果它们位于当前配置范围之外的其他[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")集合中。'
- en: '[PRE66]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Remove all mappers from all classes.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 删除所有类的所有映射器。
- en: 'Changed in version 1.4: This function now locates all [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") objects and calls upon the [`registry.dispose()`](#sqlalchemy.orm.registry.dispose
    "sqlalchemy.orm.registry.dispose") method of each.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始变更：这个函数现在定位所有的[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")对象，并调用每个对象的
    [`registry.dispose()`](#sqlalchemy.orm.registry.dispose "sqlalchemy.orm.registry.dispose")
    方法。
- en: This function removes all instrumentation from classes and disposes of their
    associated mappers. Once called, the classes are unmapped and can be later re-mapped
    with new mappers.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数从类中删除所有的仪器，并处置它们的关联映射器。一旦调用，这些类将被取消映射，以后可以用新的映射器重新映射。
- en: '[`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")
    is *not* for normal use, as there is literally no valid usage for it outside of
    very specific testing scenarios. Normally, mappers are permanent structural components
    of user-defined classes, and are never discarded independently of their class.
    If a mapped class itself is garbage collected, its mapper is automatically disposed
    of as well. As such, [`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")
    is only for usage in test suites that re-use the same classes with different mappings,
    which is itself an extremely rare use case - the only such use case is in fact
    SQLAlchemy’s own test suite, and possibly the test suites of other ORM extension
    libraries which intend to test various combinations of mapper construction upon
    a fixed set of classes.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '[`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")
    *不*是正常使用，因为在非常特定的测试场景之外，它实际上没有任何有效用途。通常，映射器是用户定义类的永久结构组件，绝不会独立于其类被丢弃。如果映射类本身被垃圾回收，其映射器也将被自动处理。因此，[`clear_mappers()`](#sqlalchemy.orm.clear_mappers
    "sqlalchemy.orm.clear_mappers") 仅用于在测试套件中重复使用相同类的不同映射的情况下，这本身是一个极为罕见的用例 - 唯一的这种用例实际上是
    SQLAlchemy 自己的测试套件，可能是其他 ORM 扩展库的测试套件，这些库打算在一组固定的类上测试各种映射构造的组合。'
- en: '[PRE67]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Generate “identity key” tuples, as are used as keys in the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") dictionary.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 生成“标识键”元组，用作 [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") 字典中的键。
- en: 'This function has several call styles:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数有几种调用样式：
- en: '`identity_key(class, ident, identity_token=token)`'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity_key(class, ident, identity_token=token)`'
- en: This form receives a mapped class and a primary key scalar or tuple as an argument.
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此形式接收一个映射类和一个主键标量或元组作为参数。
- en: 'E.g.:'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE68]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'param class:'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数类：
- en: mapped class (must be a positional argument)
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射类（必须是一个位置参数）
- en: 'param ident:'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数 ident：
- en: primary key, may be a scalar or tuple argument.
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主键，可以是标量或元组参数。
- en: 'param identity_token:'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数 identity_token：
- en: optional identity token
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的标识令牌
- en: 'New in version 1.2: added identity_token'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能：添加了 identity_token
- en: '`identity_key(instance=instance)`'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity_key(instance=instance)`'
- en: This form will produce the identity key for a given instance. The instance need
    not be persistent, only that its primary key attributes are populated (else the
    key will contain `None` for those missing values).
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此形式将为给定实例生成标识键。实例不必是持久的，只需其主键属性被填充（否则键将包含这些缺失值的 `None`）。
- en: 'E.g.:'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE69]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: In this form, the given instance is ultimately run though [`Mapper.identity_key_from_instance()`](#sqlalchemy.orm.Mapper.identity_key_from_instance
    "sqlalchemy.orm.Mapper.identity_key_from_instance"), which will have the effect
    of performing a database check for the corresponding row if the object is expired.
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此形式中，给定实例最终将通过 [`Mapper.identity_key_from_instance()`](#sqlalchemy.orm.Mapper.identity_key_from_instance
    "sqlalchemy.orm.Mapper.identity_key_from_instance") 运行，如果对象已过期，则将执行相应行的数据库检查。
- en: 'param instance:'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数实例：
- en: object instance (must be given as a keyword arg)
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对象实例（必须作为关键字参数给出）
- en: '`identity_key(class, row=row, identity_token=token)`'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity_key(class, row=row, identity_token=token)`'
- en: This form is similar to the class/tuple form, except is passed a database result
    row as a [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    or [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    object.
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此形式类似于类/元组形式，但是传递了数据库结果行作为 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 或 [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") 对象。
- en: 'E.g.:'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE70]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'param class:'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数类：
- en: mapped class (must be a positional argument)
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射类（必须是一个位置参数）
- en: 'param row:'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数行：
- en: '[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    row returned by a [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") (must be given as a keyword arg)'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    由 [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    返回的行（必须作为关键字参数给出）'
- en: 'param identity_token:'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数 identity_token：
- en: optional identity token
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的标识令牌
- en: 'New in version 1.2: added identity_token'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能：添加了 identity_token
- en: '[PRE71]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Create a `UNION` statement used by a polymorphic mapper.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个多态映射器使用的 `UNION` 语句。
- en: See [Concrete Table Inheritance](inheritance.html#concrete-inheritance) for
    an example of how this is used.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[具体表继承](inheritance.html#concrete-inheritance)以了解如何使用此功能。
- en: 'Parameters:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_map` – mapping of polymorphic identities to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects.'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_map` – 将多态标识映射到 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。'
- en: '`typecolname` – string name of a “discriminator” column, which will be derived
    from the query, producing the polymorphic identity for each row. If `None`, no
    polymorphic discriminator is generated.'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typecolname` – “鉴别器”列的字符串名称，该列将从查询中派生，为每一行产生多态标识。如果为 `None`，则不生成多态鉴别器。'
- en: '`aliasname` – name of the [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct generated.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aliasname` – 生成的 [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") 构造的名称。'
- en: '`cast_nulls` – if True, non-existent columns, which are represented as labeled
    NULLs, will be passed into CAST. This is a legacy behavior that is problematic
    on some backends such as Oracle - in which case it can be set to False.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cast_nulls` – 如果为True，则不存在的列，表示为标记的NULL值，将被传递到CAST中。这是一种问题的传统行为，对于某些后端（如 Oracle）存在问题
    - 在这种情况下，可以将其设置为 False。'
- en: '[PRE72]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Provides a surrogate [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    that generates a so-called [sentinel](../glossary.html#term-sentinel) column,
    allowing efficient bulk inserts with deterministic RETURNING sorting for tables
    that don’t otherwise have qualifying primary key configurations.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个虚拟的 [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")，它生成所谓的
    [sentinel](../glossary.html#term-sentinel) 列，允许对于不具有合格的主键配置的表进行具有确定性的 RETURNING
    排序的高效批量插入。
- en: Use of [`orm_insert_sentinel()`](#sqlalchemy.orm.orm_insert_sentinel "sqlalchemy.orm.orm_insert_sentinel")
    is analogous to the use of the [`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") construct within a Core [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`orm_insert_sentinel()`](#sqlalchemy.orm.orm_insert_sentinel "sqlalchemy.orm.orm_insert_sentinel")类似于在
    Core [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    构造中使用[`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") 构造的用法。
- en: Guidelines for adding this construct to a Declarative mapped class are the same
    as that of the [`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") construct; the database table itself also
    needs to have a column with this name present.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 将此构造添加到声明式映射类的指南与[`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") 构造的相同；数据库表本身也需要具有此名称的列。
- en: For background on how this object is used, see the section [Configuring Sentinel
    Columns](../core/connections.html#engine-insertmanyvalues-sentinel-columns) as
    part of the section [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues).
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此对象的使用背景，请参阅 [配置 Sentinel 列](../core/connections.html#engine-insertmanyvalues-sentinel-columns)
    作为 [“INSERT 语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues) 部分的一部分。
- en: See also
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel")'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '[`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel")'
- en: '[“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[“INSERT 语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues)'
- en: '[Configuring Sentinel Columns](../core/connections.html#engine-insertmanyvalues-sentinel-columns)'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置 Sentinel 列](../core/connections.html#engine-insertmanyvalues-sentinel-columns)'
- en: New in version 2.0.10.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.10 版本中的新增内容。
- en: '[PRE73]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Decorate a method as the ‘reconstructor’ hook.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个方法装饰为‘reconstructor’挂钩。
- en: Designates a single method as the “reconstructor”, an `__init__`-like method
    that will be called by the ORM after the instance has been loaded from the database
    or otherwise reconstituted.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 将单个方法指定为“reconstructor”，一个类似于`__init__`方法的方法，ORM 在实例从数据库中加载或者以其他方式重新构建后会调用该方法。
- en: Tip
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`reconstructor()`](#sqlalchemy.orm.reconstructor "sqlalchemy.orm.reconstructor")
    decorator makes use of the [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") event hook, which can be used directly.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reconstructor()`](#sqlalchemy.orm.reconstructor "sqlalchemy.orm.reconstructor")
    装饰器使用了 [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") 事件挂钩，该事件可以直接使用。'
- en: The reconstructor will be invoked with no arguments. Scalar (non-collection)
    database-mapped attributes of the instance will be available for use within the
    function. Eagerly-loaded collections are generally not yet available and will
    usually only contain the first element. ORM state changes made to objects at this
    stage will not be recorded for the next flush() operation, so the activity within
    a reconstructor should be conservative.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 重构器将在没有参数的情况下被调用。实例的标量（非集合）数据库映射属性将在函数内可用。急切加载的集合通常尚不可用，并且通常只包含第一个元素。在这个阶段对对象进行的ORM状态更改不会被记录到下一个flush()操作中，因此重构器内的活动应该保守。
- en: See also
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
- en: '[PRE74]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Defines an association between a Python class and a database table or other
    relational structure, so that ORM operations against the class may proceed.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了Python类与数据库表或其他关系结构之间的关联，以便对该类进行ORM操作。
- en: The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object is instantiated
    using mapping methods present on the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    object. For information about instantiating new [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects, see [ORM Mapped Class Overview](mapping_styles.html).
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象是使用[`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象上存在的映射方法实例化的。有关实例化新[`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的信息，请参阅[ORM映射类概述](mapping_styles.html)。'
- en: '**Members**'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Mapper.__init__), [add_properties()](#sqlalchemy.orm.Mapper.add_properties),
    [add_property()](#sqlalchemy.orm.Mapper.add_property), [all_orm_descriptors](#sqlalchemy.orm.Mapper.all_orm_descriptors),
    [attrs](#sqlalchemy.orm.Mapper.attrs), [base_mapper](#sqlalchemy.orm.Mapper.base_mapper),
    [c](#sqlalchemy.orm.Mapper.c), [cascade_iterator()](#sqlalchemy.orm.Mapper.cascade_iterator),
    [class_](#sqlalchemy.orm.Mapper.class_), [class_manager](#sqlalchemy.orm.Mapper.class_manager),
    [column_attrs](#sqlalchemy.orm.Mapper.column_attrs), [columns](#sqlalchemy.orm.Mapper.columns),
    [common_parent()](#sqlalchemy.orm.Mapper.common_parent), [composites](#sqlalchemy.orm.Mapper.composites),
    [concrete](#sqlalchemy.orm.Mapper.concrete), [configured](#sqlalchemy.orm.Mapper.configured),
    [entity](#sqlalchemy.orm.Mapper.entity), [get_property()](#sqlalchemy.orm.Mapper.get_property),
    [get_property_by_column()](#sqlalchemy.orm.Mapper.get_property_by_column), [identity_key_from_instance()](#sqlalchemy.orm.Mapper.identity_key_from_instance),
    [identity_key_from_primary_key()](#sqlalchemy.orm.Mapper.identity_key_from_primary_key),
    [identity_key_from_row()](#sqlalchemy.orm.Mapper.identity_key_from_row), [inherits](#sqlalchemy.orm.Mapper.inherits),
    [is_mapper](#sqlalchemy.orm.Mapper.is_mapper), [is_sibling()](#sqlalchemy.orm.Mapper.is_sibling),
    [isa()](#sqlalchemy.orm.Mapper.isa), [iterate_properties](#sqlalchemy.orm.Mapper.iterate_properties),
    [local_table](#sqlalchemy.orm.Mapper.local_table), [mapped_table](#sqlalchemy.orm.Mapper.mapped_table),
    [mapper](#sqlalchemy.orm.Mapper.mapper), [non_primary](#sqlalchemy.orm.Mapper.non_primary),
    [persist_selectable](#sqlalchemy.orm.Mapper.persist_selectable), [polymorphic_identity](#sqlalchemy.orm.Mapper.polymorphic_identity),
    [polymorphic_iterator()](#sqlalchemy.orm.Mapper.polymorphic_iterator), [polymorphic_map](#sqlalchemy.orm.Mapper.polymorphic_map),
    [polymorphic_on](#sqlalchemy.orm.Mapper.polymorphic_on), [primary_key](#sqlalchemy.orm.Mapper.primary_key),
    [primary_key_from_instance()](#sqlalchemy.orm.Mapper.primary_key_from_instance),
    [primary_mapper()](#sqlalchemy.orm.Mapper.primary_mapper), [relationships](#sqlalchemy.orm.Mapper.relationships),
    [selectable](#sqlalchemy.orm.Mapper.selectable), [self_and_descendants](#sqlalchemy.orm.Mapper.self_and_descendants),
    [single](#sqlalchemy.orm.Mapper.single), [synonyms](#sqlalchemy.orm.Mapper.synonyms),
    [tables](#sqlalchemy.orm.Mapper.tables), [validators](#sqlalchemy.orm.Mapper.validators),
    [with_polymorphic_mappers](#sqlalchemy.orm.Mapper.with_polymorphic_mappers)'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Mapper.__init__), [add_properties()](#sqlalchemy.orm.Mapper.add_properties),
    [add_property()](#sqlalchemy.orm.Mapper.add_property), [all_orm_descriptors](#sqlalchemy.orm.Mapper.all_orm_descriptors),
    [attrs](#sqlalchemy.orm.Mapper.attrs), [base_mapper](#sqlalchemy.orm.Mapper.base_mapper),
    [c](#sqlalchemy.orm.Mapper.c), [cascade_iterator()](#sqlalchemy.orm.Mapper.cascade_iterator),
    [class_](#sqlalchemy.orm.Mapper.class_), [class_manager](#sqlalchemy.orm.Mapper.class_manager),
    [column_attrs](#sqlalchemy.orm.Mapper.column_attrs), [columns](#sqlalchemy.orm.Mapper.columns),
    [common_parent()](#sqlalchemy.orm.Mapper.common_parent), [composites](#sqlalchemy.orm.Mapper.composites),
    [concrete](#sqlalchemy.orm.Mapper.concrete), [configured](#sqlalchemy.orm.Mapper.configured),
    [entity](#sqlalchemy.orm.Mapper.entity), [get_property()](#sqlalchemy.orm.Mapper.get_property),
    [get_property_by_column()](#sqlalchemy.orm.Mapper.get_property_by_column), [identity_key_from_instance()](#sqlalchemy.orm.Mapper.identity_key_from_instance),
    [identity_key_from_primary_key()](#sqlalchemy.orm.Mapper.identity_key_from_primary_key),
    [identity_key_from_row()](#sqlalchemy.orm.Mapper.identity_key_from_row), [inherits](#sqlalchemy.orm.Mapper.inherits),
    [is_mapper](#sqlalchemy.orm.Mapper.is_mapper), [is_sibling()](#sqlalchemy.orm.Mapper.is_sibling),
    [isa()](#sqlalchemy.orm.Mapper.isa), [iterate_properties](#sqlalchemy.orm.Mapper.iterate_properties),
    [local_table](#sqlalchemy.orm.Mapper.local_table), [mapped_table](#sqlalchemy.orm.Mapper.mapped_table),
    [mapper](#sqlalchemy.orm.Mapper.mapper), [non_primary](#sqlalchemy.orm.Mapper.non_primary),
    [persist_selectable](#sqlalchemy.orm.Mapper.persist_selectable), [polymorphic_identity](#sqlalchemy.orm.Mapper.polymorphic_identity),
    [polymorphic_iterator()](#sqlalchemy.orm.Mapper.polymorphic_iterator), [polymorphic_map](#sqlalchemy.orm.Mapper.polymorphic_map),
    [polymorphic_on](#sqlalchemy.orm.Mapper.polymorphic_on), [primary_key](#sqlalchemy.orm.Mapper.primary_key),
    [primary_key_from_instance()](#sqlalchemy.orm.Mapper.primary_key_from_instance),
    [primary_mapper()](#sqlalchemy.orm.Mapper.primary_mapper), [relationships](#sqlalchemy.orm.Mapper.relationships),
    [selectable](#sqlalchemy.orm.Mapper.selectable), [self_and_descendants](#sqlalchemy.orm.Mapper.self_and_descendants),
    [single](#sqlalchemy.orm.Mapper.single), [synonyms](#sqlalchemy.orm.Mapper.synonyms),
    [tables](#sqlalchemy.orm.Mapper.tables), [validators](#sqlalchemy.orm.Mapper.validators),
    [with_polymorphic_mappers](#sqlalchemy.orm.Mapper.with_polymorphic_mappers)'
- en: '**Class signature**'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    (`sqlalchemy.orm.ORMFromClauseRole`, `sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, [`sqlalchemy.orm.base.InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), [`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.inspection.Inspectable`, `sqlalchemy.event.registry.EventTarget`,
    `typing.Generic`)
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    (`sqlalchemy.orm.ORMFromClauseRole`，`sqlalchemy.orm.ORMEntityColumnsClauseRole`，`sqlalchemy.sql.cache_key.MemoizedHasCacheKey`，[`sqlalchemy.orm.base.InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")，[`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified")，`sqlalchemy.inspection.Inspectable`，`sqlalchemy.event.registry.EventTarget`，`typing.Generic`)
- en: '[PRE75]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Direct constructor for a new [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 对象的直接构造函数。
- en: The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") constructor is
    not called directly, and is normally invoked through the use of the [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object through either the [Declarative](mapping_styles.html#orm-declarative-mapping)
    or [Imperative](mapping_styles.html#orm-imperative-mapping) mapping styles.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 不直接调用 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 构造函数，通常通过使用
    [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") 对象通过[声明式](mapping_styles.html#orm-declarative-mapping)或[命令式](mapping_styles.html#orm-imperative-mapping)映射样式调用。
- en: 'Changed in version 2.0: The public facing `mapper()` function is removed; for
    a classical mapping configuration, use the [`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method.'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中进行了更改：公开的 `mapper()` 函数已移除；对于传统的映射配置，请使用 [`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") 方法。
- en: Parameters documented below may be passed to either the [`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, or may be passed in the `__mapper_args__`
    declarative class attribute described at [Mapper Configuration Options with Declarative](declarative_config.html#orm-declarative-mapper-options).
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 下面记录的参数可以传递给 [`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") 方法，或者可以在[具有声明性的 Mapper 配置选项](declarative_config.html#orm-declarative-mapper-options)中描述的
    `__mapper_args__` 声明类属性中传递。
- en: 'Parameters:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`class_` – The class to be mapped. When using Declarative, this argument is
    automatically passed as the declared class itself.'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 要映射的类。在使用声明式时，此参数将自动传递为声明的类本身。'
- en: '`local_table` – The [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (i.e. selectable) to which the class is
    mapped. May be `None` if this mapper inherits from another mapper using single-table
    inheritance. When using Declarative, this argument is automatically passed by
    the extension, based on what is configured via the [`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__
    "sqlalchemy.orm.DeclarativeBase.__table__") attribute or via the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") produced as a result of the [`DeclarativeBase.__tablename__`](#sqlalchemy.orm.DeclarativeBase.__tablename__
    "sqlalchemy.orm.DeclarativeBase.__tablename__") attribute being present.'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local_table` – 要映射到的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或其他 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")（即可选择的）。如果此映射器使用单表继承从另一个映射器继承，则可以为 `None`。在使用声明式时，此参数由扩展自动传递，根据通过
    [`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__ "sqlalchemy.orm.DeclarativeBase.__table__")
    属性配置的内容或通过 [`DeclarativeBase.__tablename__`](#sqlalchemy.orm.DeclarativeBase.__tablename__
    "sqlalchemy.orm.DeclarativeBase.__tablename__") 属性的结果产生的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。'
- en: '`polymorphic_abstract` –'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polymorphic_abstract` –'
- en: Indicates this class will be mapped in a polymorphic hierarchy, but not directly
    instantiated. The class is mapped normally, except that it has no requirement
    for a [`Mapper.polymorphic_identity`](#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") within an inheritance hierarchy. The class however must
    be part of a polymorphic inheritance scheme which uses [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") at the base.
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示此类将在多态层次结构中映射，但不会直接实例化。该类通常被映射，只是在继承层次结构中没有对 [`Mapper.polymorphic_identity`](#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") 的要求。但是，该类必须是使用基类中的 [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") 的多态继承方案的一部分。
- en: New in version 2.0.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: See also
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Building Deeper Hierarchies with polymorphic_abstract](inheritance.html#orm-inheritance-abstract-poly)'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 polymorphic_abstract 构建更深层次的层次结构](inheritance.html#orm-inheritance-abstract-poly)'
- en: '`always_refresh` – If True, all query operations for this mapped class will
    overwrite all data within object instances that already exist within the session,
    erasing any in-memory changes with whatever information was loaded from the database.
    Usage of this flag is highly discouraged; as an alternative, see the method [`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing").'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`always_refresh` – 如果为 True，则为此映射类的所有查询操作将覆盖已存在于会话中的对象实例中的所有数据，用从数据库加载的任何信息擦除任何内存中的更改。强烈不建议使用此标志；作为替代方案，请参见方法
    [`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")。'
- en: '`allow_partial_pks` – Defaults to True. Indicates that a composite primary
    key with some NULL values should be considered as possibly existing within the
    database. This affects whether a mapper will assign an incoming row to an existing
    identity, as well as if [`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") will check the database first for a particular
    primary key value. A “partial primary key” can occur if one has mapped to an OUTER
    JOIN, for example.'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allow_partial_pks` – 默认为 True。表示具有一些 NULL 值的复合主键应被视为可能存在于数据库中。这会影响映射器是否将传入的行分配给现有标识，以及
    [`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    是否首先检查数据库中特定主键值。例如，如果已映射到 OUTER JOIN，则可能会出现“部分主键”。'
- en: '`batch` – Defaults to `True`, indicating that save operations of multiple entities
    can be batched together for efficiency. Setting to False indicates that an instance
    will be fully saved before saving the next instance. This is used in the extremely
    rare case that a [`MapperEvents`](events.html#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    listener requires being called in between individual row persistence operations.'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch` – 默认为 `True`，表示可以将多个实体的保存操作一起批处理以提高效率。将其设置为 False 表示在保存下一个实例之前将完全保存一个实例。这在极为罕见的情况下使用，即
    [`MapperEvents`](events.html#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    监听器需要在单个行持久性操作之间被调用的情况下。'
- en: '`column_prefix` –'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_prefix` –'
- en: A string which will be prepended to the mapped attribute name when [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are automatically assigned as attributes to
    the mapped class. Does not affect [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are mapped explicitly in the [`Mapper.properties`](#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") dictionary.
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符串，当将 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象自动分配为映射类的属性时，将会在映射属性名称之前添加。不影响在 [`Mapper.properties`](#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") 字典中显式映射的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象。
- en: 'This parameter is typically useful with imperative mappings that keep the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object separate. Below, assuming the `user_table` [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object has columns named `user_id`, `user_name`, and
    `password`:'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数通常与将 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象保持分开的命令式映射一起使用。假设 `user_table` [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象具有名为 `user_id`、`user_name` 和 `password` 的列：
- en: '[PRE76]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The above mapping will assign the `user_id`, `user_name`, and `password` columns
    to attributes named `_user_id`, `_user_name`, and `_password` on the mapped `User`
    class.
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述映射将 `user_id`、`user_name` 和 `password` 列分配给映射的 `User` 类上名为 `_user_id`、`_user_name`
    和 `_password` 的属性。
- en: The [`Mapper.column_prefix`](#sqlalchemy.orm.Mapper.params.column_prefix "sqlalchemy.orm.Mapper")
    parameter is uncommon in modern use. For dealing with reflected tables, a more
    flexible approach to automating a naming scheme is to intercept the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects as they are reflected; see the section [Automating
    Column Naming Schemes from Reflected Tables](declarative_tables.html#mapper-automated-reflection-schemes)
    for notes on this usage pattern.
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapper.column_prefix`](#sqlalchemy.orm.Mapper.params.column_prefix "sqlalchemy.orm.Mapper")
    参数在现代用法中不常见。对于处理反射表，更灵活的自动命名方案是拦截反射时的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象；请参阅[从反射表自动化列命名方案](declarative_tables.html#mapper-automated-reflection-schemes)一节中关于此用法模式的注释。'
- en: '`concrete` –'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`concrete` –'
- en: If True, indicates this mapper should use concrete table inheritance with its
    parent mapper.
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则表示此映射器应使用具体表继承与其父映射器。
- en: See the section [Concrete Table Inheritance](inheritance.html#concrete-inheritance)
    for an example.
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅[具体表继承](inheritance.html#concrete-inheritance)中的示例。
- en: '`confirm_deleted_rows` – defaults to True; when a DELETE occurs of one more
    rows based on specific primary keys, a warning is emitted when the number of rows
    matched does not equal the number of rows expected. This parameter may be set
    to False to handle the case where database ON DELETE CASCADE rules may be deleting
    some of those rows automatically. The warning may be changed to an exception in
    a future release.'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`confirm_deleted_rows` – 默认为 True；当基于特定主键发生 DELETE 时，如果匹配的行数不等于预期的行数，则会发出警告。可以将此参数设置为
    False，以处理数据库 ON DELETE CASCADE 规则可能自动删除某些行的情况。警告可能在将来的版本中更改为异常。'
- en: '`eager_defaults` –'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eager_defaults` –'
- en: if True, the ORM will immediately fetch the value of server-generated default
    values after an INSERT or UPDATE, rather than leaving them as expired to be fetched
    on next access. This can be used for event schemes where the server-generated
    values are needed immediately before the flush completes.
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则 ORM 将在 INSERT 或 UPDATE 后立即获取服务器生成的默认值的值，而不是将其保留为过期以在下次访问时获取。这可以用于需要在
    flush 完成之前立即获取服务器生成值的事件方案。
- en: The fetch of values occurs either by using `RETURNING` inline with the `INSERT`
    or `UPDATE` statement, or by adding an additional `SELECT` statement subsequent
    to the `INSERT` or `UPDATE`, if the backend does not support `RETURNING`.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值的获取可以通过在 `INSERT` 或 `UPDATE` 语句中与 `RETURNING` 一起使用，或者在 `INSERT` 或 `UPDATE`
    之后添加额外的 `SELECT` 语句，如果后端不支持 `RETURNING`。
- en: The use of `RETURNING` is extremely performant in particular for `INSERT` statements
    where SQLAlchemy can take advantage of [insertmanyvalues](../core/connections.html#engine-insertmanyvalues),
    whereas the use of an additional `SELECT` is relatively poor performing, adding
    additional SQL round trips which would be unnecessary if these new attributes
    are not to be accessed in any case.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `RETURNING` 对于 SQLAlchemy 可以利用 [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    特别适用于 `INSERT` 语句，而使用额外的 `SELECT` 相对性能较差，增加了额外的 SQL 往返，如果这些新属性不被访问，则这些往返是不必要的。
- en: For this reason, [`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") defaults to the string value `"auto"`, which indicates
    that server defaults for INSERT should be fetched using `RETURNING` if the backing
    database supports it and if the dialect in use supports “insertmanyreturning”
    for an INSERT statement. If the backing database does not support `RETURNING`
    or “insertmanyreturning” is not available, server defaults will not be fetched.
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，[`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults "sqlalchemy.orm.Mapper")
    默认为字符串值`"auto"`，表示应该使用 `RETURNING` 获取 INSERT 的服务器默认值，如果后端数据库支持的话，并且如果正在使用的方言支持“insertmanyreturning”作为
    INSERT 语句。如果后端数据库不支持 `RETURNING` 或者“insertmanyreturning”不可用，则不会获取服务器默认值。
- en: 'Changed in version 2.0.0rc1: added the “auto” option for [`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0.0rc1 开始更改：为 [`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") 添加了“auto”选项
- en: See also
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fetching Server-Generated Defaults](persistence_techniques.html#orm-server-defaults)'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[获取服务器生成的默认值](persistence_techniques.html#orm-server-defaults)'
- en: 'Changed in version 2.0.0: RETURNING now works with multiple rows INSERTed at
    once using the [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    feature, which among other things allows the [`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") feature to be very performant on supporting backends.'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0.0 开始更改：`RETURNING`现在可以同时使用插入多行的[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)功能，这使得支持的后端上的[`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")特性性能非常高。
- en: '`exclude_properties` –'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exclude_properties` –'
- en: A list or set of string column names to be excluded from mapping.
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 排除映射的字符串列名列表或集合。
- en: See also
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Mapping a Subset of Table Columns](declarative_tables.html#include-exclude-cols)'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[映射表列的子集](declarative_tables.html#include-exclude-cols)'
- en: '`include_properties` –'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_properties` –'
- en: An inclusive list or set of string column names to map.
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要映射的字符串列名的包含列表或集合。
- en: See also
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Mapping a Subset of Table Columns](declarative_tables.html#include-exclude-cols)'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[映射表列的子集](declarative_tables.html#include-exclude-cols)'
- en: '`inherits` –'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inherits` –'
- en: A mapped class or the corresponding [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    of one indicating a superclass to which this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") should *inherit* from. The mapped class here must be
    a subclass of the other mapper’s class. When using Declarative, this argument
    is passed automatically as a result of the natural class hierarchy of the declared
    classes.
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射类或其中一个的对应[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")，指示此[`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")应从中*继承*的超类。此处映射的类必须是另一个映射器类的子类。在使用声明式时，此参数会自动传递，因为已声明类的自然类层次结构。
- en: See also
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Mapping Class Inheritance Hierarchies](inheritance.html)'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[映射类继承层次结构](inheritance.html)'
- en: '`inherit_condition` – For joined table inheritance, a SQL expression which
    will define how the two tables are joined; defaults to a natural join between
    the two tables.'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inherit_condition` – 对于联接表继承，定义两个表如何连接的 SQL 表达式；默认为两个表之间的自然连接。'
- en: '`inherit_foreign_keys` – When `inherit_condition` is used and the columns present
    are missing a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") configuration, this parameter can be used to specify
    which columns are “foreign”. In most cases can be left as `None`.'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inherit_foreign_keys` – 当使用`inherit_condition`并且存在的列缺少[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")配置时，可以使用此参数来指定哪些列是“外键”。在大多数情况下可以保持为`None`。'
- en: '`legacy_is_orphan` –'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`legacy_is_orphan` –'
- en: Boolean, defaults to `False`. When `True`, specifies that “legacy” orphan consideration
    is to be applied to objects mapped by this mapper, which means that a pending
    (that is, not persistent) object is auto-expunged from an owning [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") only when it is de-associated from *all* parents that
    specify a `delete-orphan` cascade towards this mapper. The new default behavior
    is that the object is auto-expunged when it is de-associated with *any* of its
    parents that specify `delete-orphan` cascade. This behavior is more consistent
    with that of a persistent object, and allows behavior to be consistent in more
    scenarios independently of whether or not an orphan object has been flushed yet
    or not.
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值，默认为`False`。当为`True`时，指定对由此映射器映射的对象应用“传统”孤立考虑，这意味着仅当它从指向此映射器的*所有*父级中解除关联时，即将删除孤立级联的挂起（即，非持久性）对象才会自动从所拥有的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中清除。新的默认行为是，当对象与指定了`delete-orphan`级联的*任何*父级之一解除关联时，对象会自动从其父级中清除。此行为与持久性对象的行为更一致，并允许行为在更多的场景中独立于孤立对象是否已刷新。
- en: See the change note and example at [The consideration of a “pending” object
    as an “orphan” has been made more aggressive](../changelog/migration_08.html#legacy-is-orphan-addition)
    for more detail on this change.
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关此更改的详细信息和示例，请参见[将“待处理”对象视为“孤立”对象的考虑更为积极](../changelog/migration_08.html#legacy-is-orphan-addition)。
- en: '`non_primary` –'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`non_primary` –'
- en: Specify that this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
- en: is in addition to the “primary” mapper, that is, the one used for persistence.
    The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") created here may
    be used for ad-hoc mapping of the class to an alternate selectable, for loading
    only.
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了“主”映射器之外，也就是用于持久化的映射器。在此创建的[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")可用于将类的临时映射到备用可选择的对象上，仅用于加载。
- en: 'Deprecated since version 1.3: The `mapper.non_primary` parameter is deprecated,
    and will be removed in a future release. The functionality of non primary mappers
    is now better suited using the [`AliasedClass`](queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") construct, which can also be used as the target
    of a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    in 1.3.'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.3起已弃用：`mapper.non_primary`参数已弃用，并将在将来的发布版本中删除。非主映射器的功能现在更适合使用[`AliasedClass`](queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")构造，1.3中也可以作为[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标使用。
- en: See also
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Relationship to Aliased Class](join_conditions.html#relationship-aliased-class)
    - the new pattern that removes the need for the [`Mapper.non_primary`](#sqlalchemy.orm.Mapper.params.non_primary
    "sqlalchemy.orm.Mapper") flag.'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与别名类的关系](join_conditions.html#relationship-aliased-class) - 新模式，消除了[`Mapper.non_primary`](#sqlalchemy.orm.Mapper.params.non_primary
    "sqlalchemy.orm.Mapper")标志的需要。'
- en: '`passive_deletes` –'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passive_deletes` - '
- en: Indicates DELETE behavior of foreign key columns when a joined-table inheritance
    entity is being deleted. Defaults to `False` for a base mapper; for an inheriting
    mapper, defaults to `False` unless the value is set to `True` on the superclass
    mapper.
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指示在删除联合表继承实体时外键列的DELETE行为。基本映射器默认为`False`；对于继承映射器，默认为`False`，除非在超类映射器上将值设置为`True`。
- en: When `True`, it is assumed that ON DELETE CASCADE is configured on the foreign
    key relationships that link this mapper’s table to its superclass table, so that
    when the unit of work attempts to delete the entity, it need only emit a DELETE
    statement for the superclass table, and not this table.
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，假定已在将此映射器的表与其超类表链接的外键关系上配置了ON DELETE CASCADE，以便当工作单元尝试删除实体时，只需为超类表发出DELETE语句，而不是为此表发出DELETE语句。
- en: When `False`, a DELETE statement is emitted for this mapper’s table individually.
    If the primary key attributes local to this table are unloaded, then a SELECT
    must be emitted in order to validate these attributes; note that the primary key
    columns of a joined-table subclass are not part of the “primary key” of the object
    as a whole.
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`False`时，将为此映射器的表分别发出DELETE语句。如果此表的本地主键属性未加载，则必须发出SELECT以验证这些属性；请注意，联合表子类的主键列不是对象整体的“主键”部分。
- en: Note that a value of `True` is **always** forced onto the subclass mappers;
    that is, it’s not possible for a superclass to specify passive_deletes without
    this taking effect for all subclass mappers.
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`True`的值始终强制应用于子类映射器；也就是说，超类无法指定无主动删除而不对所有子类映射器产生影响。
- en: See also
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using foreign key ON DELETE cascade with ORM relationships](cascades.html#passive-deletes)
    - description of similar feature as used with [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在ORM关系中使用外键ON DELETE级联](cascades.html#passive-deletes) - 描述了与[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")一起使用的类似功能。 '
- en: '`mapper.passive_updates` - supporting ON UPDATE CASCADE for joined-table inheritance
    mappers'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mapper.passive_updates` - 支持联合表继承映射的ON UPDATE CASCADE'
- en: '`passive_updates` –'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passive_updates` - '
- en: Indicates UPDATE behavior of foreign key columns when a primary key column changes
    on a joined-table inheritance mapping. Defaults to `True`.
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指示联合表继承映射中主键列更改时外键列的UPDATE行为。默认为`True`。
- en: When True, it is assumed that ON UPDATE CASCADE is configured on the foreign
    key in the database, and that the database will handle propagation of an UPDATE
    from a source column to dependent columns on joined-table rows.
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，假定数据库上的外键已配置为ON UPDATE CASCADE，并且数据库将处理从源列到联合表行上的依赖列的UPDATE传播。
- en: When False, it is assumed that the database does not enforce referential integrity
    and will not be issuing its own CASCADE operation for an update. The unit of work
    process will emit an UPDATE statement for the dependent columns during a primary
    key change.
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 False 时，假定数据库不执行参照完整性，并且不会为更新发出自己的 CASCADE 操作。在主键更改期间，工作单元过程将针对依赖列发出 UPDATE
    语句。
- en: See also
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mutable Primary Keys / Update Cascades](relationship_persistence.html#passive-updates)
    - description of a similar feature as used with [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[可变主键 / 更新级联](relationship_persistence.html#passive-updates) - 描述与 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 一起使用的类似功能的说明'
- en: '`mapper.passive_deletes` - supporting ON DELETE CASCADE for joined-table inheritance
    mappers'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mapper.passive_deletes` - 为连接表继承映射器支持 ON DELETE CASCADE'
- en: '`polymorphic_load` –'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polymorphic_load` –'
- en: 'Specifies “polymorphic loading” behavior for a subclass in an inheritance hierarchy
    (joined and single table inheritance only). Valid values are:'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继承层次结构中的子类中指定“多态加载”行为（仅适用于连接和单表继承）。有效值为：
- en: “‘inline’” - specifies this class should be part of the “with_polymorphic” mappers,
    e.g. its columns will be included in a SELECT query against the base.
  id: totrans-580
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: “‘inline’” - 指定此类应该是“with_polymorphic”映射器的一部分，例如，它的列将包含在针对基础的 SELECT 查询中。
- en: ''
  id: totrans-581
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-582
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: “‘selectin’” - specifies that when instances of this class are loaded, an additional
    SELECT will be emitted to retrieve the columns specific to this subclass. The
    SELECT uses IN to fetch multiple subclasses at once.
  id: totrans-583
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: “‘selectin’” - 指定当加载此类的实例时，将发出额外的 SELECT 来检索特定于此子类的列。SELECT 使用 IN 一次性检索多个子类。
- en: New in version 1.2.
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: See also
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring with_polymorphic() on mappers](queryguide/inheritance.html#with-polymorphic-mapper-config)'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在映射器上配置 with_polymorphic()](queryguide/inheritance.html#with-polymorphic-mapper-config)'
- en: '[Using selectin_polymorphic()](queryguide/inheritance.html#polymorphic-selectin)'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 selectin_polymorphic()](queryguide/inheritance.html#polymorphic-selectin)'
- en: '`polymorphic_on` –'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polymorphic_on` –'
- en: Specifies the column, attribute, or SQL expression used to determine the target
    class for an incoming row, when inheriting classes are present.
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定用于确定传入行的目标类的列、属性或 SQL 表达式，当存在继承类时。
- en: 'May be specified as a string attribute name, or as a SQL expression such as
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or in a Declarative mapping a [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") object. It is typically expected that the SQL
    expression corresponds to a column in the base-most mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"):'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以指定为字符串属性名称，也可以指定为 SQL 表达式，例如 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 或在声明性映射中为 [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 对象。通常期望 SQL 表达式对应于基础映射的最底层映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中的列：
- en: '[PRE77]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'It may also be specified as a SQL expression, as in this example where we use
    the [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    construct to provide a conditional approach:'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它也可以指定为 SQL 表达式，如此示例中我们使用 [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case
    "sqlalchemy.sql.expression.case") 构造来提供条件方法：
- en: '[PRE78]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'It may also refer to any attribute using its string name, which is of particular
    use when using annotated column configurations:'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它也可能使用其字符串名称引用任何属性，在使用注释列配置时特别有用：
- en: '[PRE79]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'When setting `polymorphic_on` to reference an attribute or expression that’s
    not present in the locally mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), yet the value of the discriminator should be persisted
    to the database, the value of the discriminator is not automatically set on new
    instances; this must be handled by the user, either through manual means or via
    event listeners. A typical approach to establishing such a listener looks like:'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将 `polymorphic_on` 设置为引用不存在于本地映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中的属性或表达式时，但是鉴别器的值应该持久化到数据库中时，鉴别器的值不会自动设置在新实例上；这必须由用户处理，可以通过手动方式或通过事件监听器来处理。建立这样一个监听器的典型方法如下所示：
- en: '[PRE80]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Where above, we assign the value of `polymorphic_identity` for the mapped class
    to the `discriminator` attribute, thus persisting the value to the `discriminator`
    column in the database.
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，我们将映射类的`polymorphic_identity`值分配给`discriminator`属性，从而将该值持久化到数据库中的`discriminator`列中。
- en: Warning
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: Currently, **only one discriminator column may be set**, typically on the base-most
    class in the hierarchy. “Cascading” polymorphic columns are not yet supported.
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，**只能设置一个鉴别器列**，通常在层次结构中的最底层类上。尚不支持“级联”多态列。
- en: See also
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Mapping Class Inheritance Hierarchies](inheritance.html)'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[映射类继承层次结构](inheritance.html)'
- en: '`polymorphic_identity` –'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polymorphic_identity` –'
- en: Specifies the value which identifies this particular class as returned by the
    column expression referred to by the [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") setting. As rows are received, the value corresponding
    to the [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") column expression is compared to this value, indicating
    which subclass should be used for the newly reconstructed object.
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定由[`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on "sqlalchemy.orm.Mapper")设置引用的列表达式返回的值，用于识别此特定类的值。当接收到行时，与[`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper")列表达式对应的值将与此值进行比较，指示应使用哪个子类来重建新对象。
- en: See also
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Mapping Class Inheritance Hierarchies](inheritance.html)'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[映射类继承层次结构](inheritance.html)'
- en: '`properties` –'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`properties` –'
- en: A dictionary mapping the string names of object attributes to [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") instances, which define the persistence behavior
    of that attribute. Note that [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects present in the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") are automatically placed into `ColumnProperty` instances
    upon mapping, unless overridden. When using Declarative, this argument is passed
    automatically, based on all those [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") instances declared in the declared class body.
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将对象属性的字符串名称映射到[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")实例的字典，这些实例定义了该属性的持久化行为。请注意，在映射到映射[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象时，除非被覆盖，否则会自动将其放置到`ColumnProperty`实例中。使用声明时，此参数将根据在声明类体中声明的所有这些[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")实例自动传递。 '
- en: See also
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The properties dictionary](mapping_styles.html#orm-mapping-properties) - in
    the [ORM Mapped Class Overview](mapping_styles.html)'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[属性字典](mapping_styles.html#orm-mapping-properties) - 在[ORM映射类概述](mapping_styles.html)中'
- en: '`primary_key` –'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`primary_key` –'
- en: A list of [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, or alternatively string names of attribute names which refer to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which define the primary key to be used against this
    mapper’s selectable unit. This is normally simply the primary key of the `local_table`,
    but can be overridden here.
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一组[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象，或者是指向[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的属性名称的字符串名称，这些属性定义了要针对此映射器的可选择单元使用的主键。这通常只是`local_table`的主键，但可以在此处进行覆盖。
- en: 'Changed in version 2.0.2: [`Mapper.primary_key`](#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") arguments may be indicated as string attribute names
    as well.'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0.2开始更改：[`Mapper.primary_key`](#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper")参数也可以表示为字符串属性名称。
- en: See also
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Mapping to an Explicit Set of Primary Key Columns](declarative_tables.html#mapper-primary-key)
    - background and example use'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[映射到一组显式主键列](declarative_tables.html#mapper-primary-key) - 背景和示例用法'
- en: '`version_id_col` –'
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version_id_col` –'
- en: A [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that will be used to keep a running version id of rows in the table. This is used
    to detect concurrent updates or the presence of stale data in a flush. The methodology
    is to detect if an UPDATE statement does not match the last known version id,
    a [`StaleDataError`](exceptions.html#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")
    exception is thrown. By default, the column must be of [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") type, unless `version_id_generator` specifies an alternative
    version generator.
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于保持表中行的运行版本ID的[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。这用于检测并发更新或刷新中存在过时数据的存在。方法是检测如果UPDATE语句与最后已知的版本ID不匹配，则抛出[`StaleDataError`](exceptions.html#sqlalchemy.orm.exc.StaleDataError
    "sqlalchemy.orm.exc.StaleDataError")异常。默认情况下，列必须是[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")类型，除非`version_id_generator`指定了替代版本生成器。
- en: See also
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring a Version Counter](versioning.html#mapper-version-counter) - discussion
    of version counting and rationale.'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置版本计数器](versioning.html#mapper-version-counter) - 版本计数和原理的讨论。'
- en: '`version_id_generator` –'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version_id_generator` –'
- en: 'Define how new version ids should be generated. Defaults to `None`, which indicates
    that a simple integer counting scheme be employed. To provide a custom versioning
    scheme, provide a callable function of the form:'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义如何生成新版本ID。默认为`None`，表示采用简单的整数计数方案。要提供自定义版本计数方案，请提供一个形如以下的可调用函数：
- en: '[PRE81]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Alternatively, server-side versioning functions such as triggers, or programmatic
    versioning schemes outside of the version id generator may be used, by specifying
    the value `False`. Please see [Server Side Version Counters](versioning.html#server-side-version-counter)
    for a discussion of important points when using this option.
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，可以使用服务器端版本控制功能，例如触发器，或者在版本ID生成器之外的程序化版本控制方案，通过指定值`False`。请参阅[服务器端版本计数器](versioning.html#server-side-version-counter)以了解在使用此选项时的重要要点的讨论。
- en: See also
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Custom Version Counters / Types](versioning.html#custom-version-counter)'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义版本计数器/类型](versioning.html#custom-version-counter)'
- en: '[Server Side Version Counters](versioning.html#server-side-version-counter)'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[服务器端版本计数器](versioning.html#server-side-version-counter)'
- en: '`with_polymorphic` –'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_polymorphic` –'
- en: A tuple in the form `(<classes>, <selectable>)` indicating the default style
    of “polymorphic” loading, that is, which tables are queried at once. <classes>
    is any single or list of mappers and/or classes indicating the inherited classes
    that should be loaded at once. The special value `'*'` may be used to indicate
    all descending classes should be loaded immediately. The second tuple argument
    <selectable> indicates a selectable that will be used to query for multiple classes.
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个形如`(<classes>, <selectable>)`的元组，表示“多态”加载的默认样式，即一次查询哪些表。`<classes>`是任何指示一次加载的继承类的单个或列表的映射器和/或类。特殊值`'*'`可用于指示应立即加载所有后代类。第二个元组参数`<selectable>`指示将用于查询多个类的可选择项。
- en: The [`Mapper.polymorphic_load`](#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") parameter may be preferable over the use of [`Mapper.with_polymorphic`](#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper") in modern mappings to indicate a per-subclass technique
    of indicating polymorphic loading styles.
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在现代映射中，[`Mapper.polymorphic_load`](#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper")参数可能比使用[`Mapper.with_polymorphic`](#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper")更可取，以指示多态加载样式的子类技术。
- en: See also
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring with_polymorphic() on mappers](queryguide/inheritance.html#with-polymorphic-mapper-config)'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在映射器上配置 `with_polymorphic()`](queryguide/inheritance.html#with-polymorphic-mapper-config)'
- en: '[PRE82]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Add the given dictionary of properties to this mapper, using add_property.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的属性字典添加到此映射器中，使用`add_property`。
- en: '[PRE83]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Add an individual MapperProperty to this mapper.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 向此映射器添加单个MapperProperty。
- en: If the mapper has not been configured yet, just adds the property to the initial
    properties dictionary sent to the constructor. If this Mapper has already been
    configured, then the given MapperProperty is configured immediately.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未配置映射器，则只需将属性添加到发送到构造函数的初始属性字典中。如果此映射器已配置，则立即配置给定的MapperProperty。
- en: '[PRE84]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: A namespace of all [`InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") attributes associated with the mapped class.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含与映射类关联的所有[`InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")属性的命名空间。
- en: These attributes are in all cases Python [descriptors](../glossary.html#term-descriptors)
    associated with the mapped class or its superclasses.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性在所有情况下都是与映射类或其超类关联的Python [描述符](../glossary.html#term-descriptors)。
- en: This namespace includes attributes that are mapped to the class as well as attributes
    declared by extension modules. It includes any Python descriptor type that inherits
    from [`InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
    This includes [`QueryableAttribute`](internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), as well as extension types such as [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"), [`hybrid_method`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") and [`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 此命名空间包括映射到类的属性以及由扩展模块声明的属性。它包括任何从[`InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")继承的Python描述符类型。这包括[`QueryableAttribute`](internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")，以及扩展类型，如[`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")、[`hybrid_method`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method")和[`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。
- en: To distinguish between mapped attributes and extension attributes, the attribute
    [`InspectionAttr.extension_type`](internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant that
    distinguishes between different extension types.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 为了区分映射属性和扩展属性，属性[`InspectionAttr.extension_type`](internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")将引用一个常量，用于区分不同的扩展类型。
- en: 'The sorting of the attributes is based on the following rules:'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 属性的排序基于以下规则：
- en: Iterate through the class and its superclasses in order from subclass to superclass
    (i.e. iterate through `cls.__mro__`)
  id: totrans-643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从子类到超类按顺序迭代类及其超类（即通过`cls.__mro__`迭代）
- en: For each class, yield the attributes in the order in which they appear in `__dict__`,
    with the exception of those in step 3 below. In Python 3.6 and above this ordering
    will be the same as that of the class’ construction, with the exception of attributes
    that were added after the fact by the application or the mapper.
  id: totrans-644
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个类，按照它们在`__dict__`中出现的顺序生成属性，但以下步骤除外。在Python 3.6及以上版本中，此顺序将与类的构造相同，但有一个例外，即应用程序或映射器后来添加的属性。
- en: If a certain attribute key is also in the superclass `__dict__`, then it’s included
    in the iteration for that class, and not the class in which it first appeared.
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果某个属性键也在超类`__dict__`中，那么它将包含在该类的迭代中，而不是它首次出现的类中。
- en: The above process produces an ordering that is deterministic in terms of the
    order in which attributes were assigned to the class.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 上述过程产生了一种确定性排序，该排序是根据属性被分配给类的顺序确定的。
- en: 'Changed in version 1.3.19: ensured deterministic ordering for [`Mapper.all_orm_descriptors()`](#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3.19更改：确保对[`Mapper.all_orm_descriptors()`](#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")的确定性排序。
- en: When dealing with a [`QueryableAttribute`](internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), the `QueryableAttribute.property` attribute
    refers to the [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") property, which is what you get when referring
    to the collection of mapped properties via [`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs").
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理[`QueryableAttribute`](internals.html#sqlalchemy.orm.QueryableAttribute "sqlalchemy.orm.QueryableAttribute")时，`QueryableAttribute.property`属性引用了[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")属性，当通过[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")引用映射属性集合时，将得到它。
- en: Warning
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Mapper.all_orm_descriptors`](#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") accessor namespace is an instance
    of `OrderedProperties`. This is a dictionary-like object which includes a small
    number of named methods such as `OrderedProperties.items()` and `OrderedProperties.values()`.
    When accessing attributes dynamically, favor using the dict-access scheme, e.g.
    `mapper.all_orm_descriptors[somename]` over `getattr(mapper.all_orm_descriptors,
    somename)` to avoid name collisions.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](#sqlalchemy.orm.Mapper.all_orm_descriptors "sqlalchemy.orm.Mapper.all_orm_descriptors")访问器命名空间是`OrderedProperties`的一个实例。这是一个类似字典的对象，包括一小部分命名方法，如`OrderedProperties.items()`和`OrderedProperties.values()`。当动态访问属性时，建议使用字典访问方案，例如`mapper.all_orm_descriptors[somename]`，而不是`getattr(mapper.all_orm_descriptors,
    somename)`，以避免名称冲突。'
- en: See also
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
- en: '[PRE85]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: A namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects associated this mapper.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 该映射器的所有[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")对象的命名空间。
- en: This is an object that provides each property based on its key name. For instance,
    the mapper for a `User` class which has `User.name` attribute would provide `mapper.attrs.name`,
    which would be the [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") representing the `name` column. The namespace
    object can also be iterated, which would yield each [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个根据其键名提供每个属性的对象。例如，具有`User.name`属性的`User`类的映射器将提供`mapper.attrs.name`，这将是代表`name`列的[`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")。命名空间对象还可以进行迭代，这将产生每个[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。
- en: '[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") has several pre-filtered
    views of this attribute which limit the types of properties returned, including
    [`synonyms`](#sqlalchemy.orm.Mapper.synonyms "sqlalchemy.orm.Mapper.synonyms"),
    [`column_attrs`](#sqlalchemy.orm.Mapper.column_attrs "sqlalchemy.orm.Mapper.column_attrs"),
    [`relationships`](#sqlalchemy.orm.Mapper.relationships "sqlalchemy.orm.Mapper.relationships"),
    and [`composites`](#sqlalchemy.orm.Mapper.composites "sqlalchemy.orm.Mapper.composites").'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")具有该属性的几个预过滤视图，限制了返回的属性类型，包括[`synonyms`](#sqlalchemy.orm.Mapper.synonyms
    "sqlalchemy.orm.Mapper.synonyms")、[`column_attrs`](#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs")、[`relationships`](#sqlalchemy.orm.Mapper.relationships
    "sqlalchemy.orm.Mapper.relationships")和[`composites`](#sqlalchemy.orm.Mapper.composites
    "sqlalchemy.orm.Mapper.composites")。'
- en: Warning
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    accessor namespace is an instance of `OrderedProperties`. This is a dictionary-like
    object which includes a small number of named methods such as `OrderedProperties.items()`
    and `OrderedProperties.values()`. When accessing attributes dynamically, favor
    using the dict-access scheme, e.g. `mapper.attrs[somename]` over `getattr(mapper.attrs,
    somename)` to avoid name collisions.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")访问器命名空间是`OrderedProperties`的一个实例。这是一个类似字典的对象，包括一小部分命名方法，如`OrderedProperties.items()`和`OrderedProperties.values()`。当动态访问属性时，建议使用字典访问方案，例如`mapper.attrs[somename]`，而不是`getattr(mapper.attrs,
    somename)`，以避免名称冲突。'
- en: See also
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.all_orm_descriptors`](#sqlalchemy.orm.Mapper.all_orm_descriptors "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](#sqlalchemy.orm.Mapper.all_orm_descriptors "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[PRE86]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The base-most [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") in
    an inheritance chain.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 继承链中最基础的[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。
- en: In a non-inheriting scenario, this attribute will always be this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"). In an inheritance scenario, it references the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") which is parent to all other [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects in the inheritance chain.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 在非继承场景中，此属性始终为此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。在继承场景中，它引用继承链中所有其他[`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的父级[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构建期间确定的*只读*属性。如果直接修改，行为未定义。
- en: '[PRE87]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: A synonym for [`Mapper.columns`](#sqlalchemy.orm.Mapper.columns "sqlalchemy.orm.Mapper.columns").
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.columns`](#sqlalchemy.orm.Mapper.columns "sqlalchemy.orm.Mapper.columns")的同义词。'
- en: '[PRE88]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Iterate each element and its mapper in an object graph, for all relationships
    that meet the given cascade rule.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历对象图中的每个元素及其映射器，对于符合给定级联规则的所有关系。
- en: 'Parameters:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`type_` –'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` –'
- en: The name of the cascade rule (i.e. `"save-update"`, `"delete"`, etc.).
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 级联规则的名称（即`"save-update"`，`"delete"`等）。
- en: Note
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: the `"all"` cascade is not accepted here. For a generic object traversal function,
    see [How do I walk all objects that are related to a given object?](../faq/sessions.html#faq-walk-objects).
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此处不接受`"all"`级联。有关通用对象遍历函数，请参阅[如何遍历与给定对象相关的所有对象？](../faq/sessions.html#faq-walk-objects)。
- en: '`state` – The lead InstanceState. child items will be processed per the relationships
    defined for this object’s mapper.'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 主要的InstanceState。子项将根据为此对象的映射器定义的关系进行处理。'
- en: 'Returns:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the method yields individual object instances.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法产生单个对象实例。
- en: See also
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Cascades](cascades.html#unitofwork-cascades)'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[级联](cascades.html#unitofwork-cascades)'
- en: '[How do I walk all objects that are related to a given object?](../faq/sessions.html#faq-walk-objects)
    - illustrates a generic function to traverse all objects without relying on cascades.'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何遍历与给定对象相关的所有对象？](../faq/sessions.html#faq-walk-objects) - 演示了一个通用函数，用于遍历所有对象而不依赖于级联。'
- en: '[PRE89]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The class to which this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is mapped.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")映射到的类。
- en: '[PRE90]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")
    which maintains event listeners and class-bound descriptors for this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")维护此[`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的事件监听器和类绑定描述符。'
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构建期间确定的*只读*属性。如果直接修改，行为是未定义的。
- en: '[PRE91]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Return a namespace of all [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") properties maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")维护的所有[`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")属性的命名空间。
- en: See also
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects.'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - 所有[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")对象的命名空间。'
- en: '[PRE92]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: A collection of [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or other scalar expression objects maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 由此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")维护的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或其他标量表达式对象的集合。
- en: The collection behaves the same as that of the `c` attribute on any [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, except that only those columns included in
    this mapping are present, and are keyed based on the attribute name defined in
    the mapping, not necessarily the `key` attribute of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") itself. Additionally, scalar expressions mapped by
    [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    are also present here.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合的行为与任何[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象上的`c`属性相同，只是此映射中包含的列，且基于映射中定义的属性名称进行键控，而不一定是[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")本身的`key`属性。此外，由[`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")映射的标量表达式也在此处。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构建期间确定的*只读*属性。如果直接修改，行为是未定义的。
- en: '[PRE93]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Return true if the given mapper shares a common inherited parent as this mapper.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的映射器与此映射器共享一个共同的继承父级，则返回true。
- en: '[PRE94]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Return a namespace of all [`Composite`](internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite") properties maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")维护的所有[`Composite`](internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite")属性的命名空间。
- en: See also
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects.'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - 所有[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")对象的命名空间。'
- en: '[PRE95]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Represent `True` if this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is a concrete inheritance mapper.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")是具体继承映射器，则表示`True`。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构建期间确定的*只读*属性。如果直接修改，行为是未定义的。
- en: '[PRE96]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Represent `True` if this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    has been configured.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已配置此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")，则表示`True`。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构建期间确定的*只读*属性。如果直接修改，行为是未定义的。
- en: See also
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers").'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")。'
- en: '[PRE97]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Part of the inspection API.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 检查API的一部分。
- en: Returns self.class_.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 返回self.class_。
- en: '[PRE98]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: return a MapperProperty associated with the given key.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与给定键关联的MapperProperty。
- en: '[PRE99]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Given a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object, return the [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") which maps this column.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 给定[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象，返回映射到此列的[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。
- en: '[PRE100]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Return the identity key for the given instance, based on its primary key attributes.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其主键属性返回给定实例的标识键。
- en: If the instance’s state is expired, calling this method will result in a database
    check to see if the object has been deleted. If the row no longer exists, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实例的状态已过期，则调用此方法将导致数据库检查以查看对象是否已被删除。如果行不再存在，则引发[`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError")。
- en: This value is typically also found on the instance state under the attribute
    name key.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 此值通常也在实例状态下以属性名称键的形式找到。
- en: '[PRE101]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Return an identity-map key for use in storing/retrieving an item from an identity
    map.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于在标识映射中存储/检索项目的标识映射键。
- en: 'Parameters:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**primary_key** – A list of values indicating the identifier.'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '**primary_key** - 表示标识符的值列表。'
- en: '[PRE102]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Return an identity-map key for use in storing/retrieving an item from the identity
    map.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于在标识映射中存储/检索项目的标识映射键。
- en: 'Parameters:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**row** –'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '**行** -'
- en: A [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    or [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    produced from a result set that selected from the ORM mapped primary key columns.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 从选择了ORM映射的主键列的结果集生成的[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")或[`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")。
- en: 'Changed in version 2.0: [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") or [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") are accepted for the “row” argument'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始：[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")或[`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")被接受作为“row”参数
- en: '[PRE103]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: References the [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") which
    this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") inherits from,
    if any.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 引用此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")继承自的[`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")（如果有）。
- en: '[PRE104]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Part of the inspection API.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 检查API的一部分。
- en: '[PRE105]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: return true if the other mapper is an inheriting sibling to this one. common
    parent but different branch
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 如果另一个映射器是此映射器的继承兄弟，则返回true。共同的父级但不同的分支
- en: '[PRE106]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Return True if the this mapper inherits from the given mapper.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此映射器从给定的映射器继承，则返回True。
- en: '[PRE107]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: return an iterator of all MapperProperty objects.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有MapperProperty对象的迭代器。
- en: '[PRE108]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: The immediate [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to which this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") refers.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")所引用的直接[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: Typically is an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), may be any [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 通常是[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的一个实例，可以是任何[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: The “local” table is the selectable that the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is directly responsible for managing from an attribute
    access and flush perspective. For non-inheriting mappers, [`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") will be the same as [`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable"). For inheriting mappers, [`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") refers to the specific portion of [`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable") that includes the columns to which
    this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") is loading/persisting,
    such as a particular [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    within a join.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: “本地”表是[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")直接负责管理的可选择的表，从属性访问和
    flush 的角度来看。对于非继承映射器，[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table")将与[`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable")相同。对于继承映射器，[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table")指的是包含该[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")正在加载/持久化的列的特定部分，例如加入中的特定[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。
- en: See also
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable "sqlalchemy.orm.Mapper.persist_selectable").'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable "sqlalchemy.orm.Mapper.persist_selectable")。'
- en: '[`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable "sqlalchemy.orm.Mapper.selectable").'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable "sqlalchemy.orm.Mapper.selectable").'
- en: '[PRE109]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Deprecated since version 1.3: Use .persist_selectable'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.3 起已弃用：使用 .persist_selectable
- en: '[PRE110]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Part of the inspection API.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 是检查 API 的一部分。
- en: Returns self.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自身。
- en: '[PRE111]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Represent `True` if this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is a “non-primary” mapper, e.g. a mapper that is used only to select rows but
    not for persistence management.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")是“非主”映射器，例如仅用于选择行而不用于持久化管理，则表示为
    `True`。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构造期间确定的*只读*属性。如果直接修改，则行为未定义。
- en: '[PRE112]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: The [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to which this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is mapped.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")映射到的[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: Typically is an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), may be any [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 通常是[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的一个实例，可以是任何[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: The [`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable") is similar to [`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table"), but represents the [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") that represents the inheriting class hierarchy
    overall in an inheritance scenario.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable "sqlalchemy.orm.Mapper.persist_selectable")类似于[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table")，但表示继承方案中整体表示继承类层次结构的[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。'
- en: :attr.`.Mapper.persist_selectable` is also separate from the [`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable
    "sqlalchemy.orm.Mapper.selectable") attribute, the latter of which may be an alternate
    subquery used for selecting columns. :attr.`.Mapper.persist_selectable` is oriented
    towards columns that will be written on a persist operation.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: :attr.`.Mapper.persist_selectable`也与[`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable
    "sqlalchemy.orm.Mapper.selectable")属性分开，后者可能是用于选择列的替代子查询。:attr.`.Mapper.persist_selectable`针对的是在持久化操作中将被写入的列。
- en: See also
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable "sqlalchemy.orm.Mapper.selectable").'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable "sqlalchemy.orm.Mapper.selectable")。'
- en: '[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table").'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table")。'
- en: '[PRE113]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Represent an identifier which is matched against the [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on
    "sqlalchemy.orm.Mapper.polymorphic_on") column during result row loading.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个标识符，该标识符在结果行加载期间与[`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on
    "sqlalchemy.orm.Mapper.polymorphic_on")列匹配。
- en: Used only with inheritance, this object can be of any type which is comparable
    to the type of column represented by [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on
    "sqlalchemy.orm.Mapper.polymorphic_on").
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在继承时使用，此对象可以是与由[`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on
    "sqlalchemy.orm.Mapper.polymorphic_on")表示的列的类型可比较的任何类型。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构造期间确定的*只读*属性。如果直接修改，则行为未定义。
- en: '[PRE114]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Iterate through the collection including this mapper and all descendant mappers.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历包括此映射器和所有后代映射器在内的集合。
- en: This includes not just the immediately inheriting mappers but all their inheriting
    mappers as well.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅包括直接继承的映射器，还包括所有它们的继承映射器。
- en: To iterate through an entire hierarchy, use `mapper.base_mapper.polymorphic_iterator()`.
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 要遍历整个层次结构，请使用`mapper.base_mapper.polymorphic_iterator()`。
- en: '[PRE115]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: A mapping of “polymorphic identity” identifiers mapped to [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instances, within an inheritance scenario.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 在继承场景中，将“多态身份”标识符映射到[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")实例。
- en: The identifiers can be of any type which is comparable to the type of column
    represented by [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on
    "sqlalchemy.orm.Mapper.polymorphic_on").
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符可以是与[`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on "sqlalchemy.orm.Mapper.polymorphic_on")所表示的列的类型可比较的任何类型。
- en: An inheritance chain of mappers will all reference the same polymorphic map
    object. The object is used to correlate incoming result rows to target mappers.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器的继承链都将引用相同的多态映射对象。该对象用于将传入的结果行与目标映射器相关联。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构造期间确定的*只读*属性。如果直接修改，则行为未定义。
- en: '[PRE116]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or SQL expression specified as the `polymorphic_on` argument for this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), within an inheritance scenario.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的`polymorphic_on`参数指定的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或SQL表达式，在继承场景中。'
- en: This attribute is normally a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") instance but may also be an expression, such as one
    derived from [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast").
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性通常是一个[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")实例，但也可能是一个表达式，例如从[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")派生的表达式。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构造期间确定的*只读*属性。如果直接修改，则行为未定义。
- en: '[PRE117]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: An iterable containing the collection of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the ‘primary key’ of the mapped
    table, from the perspective of this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper").
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 包含作为此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")在表映射的‘主键’的一部分的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的集合的可迭代对象，从此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的角度来看。
- en: This list is against the selectable in [`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable"). In the case of inheriting mappers,
    some columns may be managed by a superclass mapper. For example, in the case of
    a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join"),
    the primary key is determined by all of the primary key columns across all tables
    referenced by the [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join").
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表与[`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable")中的可选择项相对。在继承映射器的情况下，一些列可能由超类映射器管理。例如，在[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")的情况下，主键由[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")引用的所有表的主键列确定。
- en: The list is also not necessarily the same as the primary key column collection
    associated with the underlying tables; the [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    features a `primary_key` argument that can override what the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") considers as primary key columns.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表也不一定与与基础表关联的主键列集合相同；[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")具有可以覆盖[`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")认为是主键列的`primary_key`参数。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个*只读*属性，在映射器构造期间确定。如果直接修改，行为是未定义的。
- en: '[PRE118]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Return the list of primary key values for the given instance.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定实例的主键值列表。
- en: If the instance’s state is expired, calling this method will result in a database
    check to see if the object has been deleted. If the row no longer exists, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实例的状态已过期，则调用此方法将导致数据库检查以查看对象是否已被删除。如果行不再存在，则会引发[`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError")。
- en: '[PRE119]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Return the primary mapper corresponding to this mapper’s class key (class).
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此映射器的类键（类）对应的主映射器。
- en: '[PRE120]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: A namespace of all [`Relationship`](internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") properties maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 由此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")维护的所有[`Relationship`](internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")属性的命名空间。
- en: Warning
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: the [`Mapper.relationships`](#sqlalchemy.orm.Mapper.relationships "sqlalchemy.orm.Mapper.relationships")
    accessor namespace is an instance of `OrderedProperties`. This is a dictionary-like
    object which includes a small number of named methods such as `OrderedProperties.items()`
    and `OrderedProperties.values()`. When accessing attributes dynamically, favor
    using the dict-access scheme, e.g. `mapper.relationships[somename]` over `getattr(mapper.relationships,
    somename)` to avoid name collisions.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.relationships`](#sqlalchemy.orm.Mapper.relationships "sqlalchemy.orm.Mapper.relationships")
    访问器命名空间是`OrderedProperties`的实例。这是一个类似于字典的对象，其中包含少量命名方法，例如`OrderedProperties.items()`和`OrderedProperties.values()`。在动态访问属性时，应优先使用字典访问方案，例如`mapper.relationships[somename]`而不是`getattr(mapper.relationships,
    somename)`，以避免名称冲突。'
- en: See also
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects.'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - 所有[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")对象的命名空间。'
- en: '[PRE121]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: The `FromClause` construct this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    selects from by default.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")从中选择的`FromClause`构造。
- en: Normally, this is equivalent to [`persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable"), unless the `with_polymorphic` feature
    is in use, in which case the full “polymorphic” selectable is returned.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这等同于[`persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable "sqlalchemy.orm.Mapper.persist_selectable")，除非使用了`with_polymorphic`功能，在这种情况下，将返回完整的“多态”可选择项。
- en: '[PRE122]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: The collection including this mapper and all descendant mappers.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 包括此映射器和所有后代映射器的集合。
- en: This includes not just the immediately inheriting mappers but all their inheriting
    mappers as well.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅包括直接继承的映射器，还包括所有它们继承的映射器。
- en: '[PRE123]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Represent `True` if this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is a single table inheritance mapper.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 是单表继承映射器，则表示
    `True`。
- en: '[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table")
    will be `None` if this flag is set.'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了此标志，[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table")
    将为 `None`。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构建期间确定的*只读*属性。如果直接修改，行为未定义。
- en: '[PRE124]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Return a namespace of all [`Synonym`](internals.html#sqlalchemy.orm.Synonym
    "sqlalchemy.orm.Synonym") properties maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 维护的所有 [`Synonym`](internals.html#sqlalchemy.orm.Synonym
    "sqlalchemy.orm.Synonym") 属性的命名空间。
- en: See also
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects.'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - 所有 [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    对象的命名空间。'
- en: '[PRE125]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: A sequence containing the collection of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or `TableClause` objects which this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is aware of.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 包含此 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 意识到的所有 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 `TableClause` 对象的序列。
- en: If the mapper is mapped to a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join"), or an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") representing a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"), the individual [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects that comprise the full construct will be represented
    here.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 如果映射器被映射到一个 [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 或者代表 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 的 [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")，构成完整结构的各个 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象将在这里表示。
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在映射器构建期间确定的*只读*属性。如果直接修改，行为未定义。
- en: '[PRE126]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: An immutable dictionary of attributes which have been decorated using the [`validates()`](mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") decorator.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不可变字典，其中属性已使用 [`validates()`](mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") 装饰器装饰。
- en: The dictionary contains string attribute names as keys mapped to the actual
    validation method.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 字典包含字符串属性名称作为键，映射到实际验证方法。
- en: '[PRE127]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: The list of [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects
    included in the default “polymorphic” query.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 默认“多态”查询中包含的 [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 对象列表。
- en: '[PRE128]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Mixin class to indicate when mapping this class, also convert it to be a dataclass.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 混合类用于指示映射此类时，还将其转换为数据类。
- en: See also
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses)
    - complete background on SQLAlchemy native dataclass mapping'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses) - 完整的 SQLAlchemy
    本地数据类映射背景'
- en: New in version 2.0.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE129]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: A protocol representing a SQLAlchemy mapped class.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQLAlchemy 映射类的协议。
- en: The protocol is generic on the type of class, use `MappedClassProtocol[Any]`
    to allow any mapped class.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 协议对类的类型是通用的，使用 `MappedClassProtocol[Any]` 来允许任何映射类。
- en: '**Class signature**'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.MappedClassProtocol`](#sqlalchemy.orm.MappedClassProtocol
    "sqlalchemy.orm.MappedClassProtocol") (`typing_extensions.Protocol`)
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.MappedClassProtocol`](#sqlalchemy.orm.MappedClassProtocol
    "sqlalchemy.orm.MappedClassProtocol") (`typing_extensions.Protocol`)
