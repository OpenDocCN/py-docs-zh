- en: jax.numpy module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.numpy 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.numpy.html`](https://jax.readthedocs.io/en/latest/jax.numpy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.numpy.html`](https://jax.readthedocs.io/en/latest/jax.numpy.html)
- en: Implements the NumPy API, using the primitives in `jax.lax`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 采用`jax.lax`中的原语实现NumPy API。
- en: While JAX tries to follow the NumPy API as closely as possible, sometimes JAX
    cannot follow NumPy exactly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然JAX尽可能地遵循NumPy API，但有时无法完全遵循NumPy的规范。
- en: Notably, since JAX arrays are immutable, NumPy APIs that mutate arrays in-place
    cannot be implemented in JAX. However, often JAX is able to provide an alternative
    API that is purely functional. For example, instead of in-place array updates
    (`x[i] = y`), JAX provides an alternative pure indexed update function `x.at[i].set(y)`
    (see `ndarray.at`).
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值得注意的是，由于JAX数组是不可变的，不能在JAX中实现原地变换数组的NumPy API。但是，JAX通常能够提供纯函数的替代API。例如，替代原地数组更新（`x[i]
    = y`），JAX提供了一个纯索引更新函数 `x.at[i].set(y)`（参见`ndarray.at`）。
- en: Relatedly, some NumPy functions often return views of arrays when possible (examples
    are `transpose()` and `reshape()`). JAX versions of such functions will return
    copies instead, although such are often optimized away by XLA when sequences of
    operations are compiled using `jax.jit()`.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，一些NumPy函数在可能时经常返回数组的视图（例如`transpose()`和`reshape()`）。JAX版本的这类函数将返回副本，尽管在使用`jax.jit()`编译操作序列时，XLA通常会进行优化。
- en: NumPy is very aggressive at promoting values to `float64` type. JAX sometimes
    is less aggressive about type promotion (See Type promotion semantics).
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy在将值提升为`float64`类型时非常积极。JAX在类型提升方面有时不那么积极（请参阅类型提升语义）。
- en: Some NumPy routines have data-dependent output shapes (examples include `unique()`
    and `nonzero()`). Because the XLA compiler requires array shapes to be known at
    compile time, such operations are not compatible with JIT. For this reason, JAX
    adds an optional `size` argument to such functions which may be specified statically
    in order to use them with JIT.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些NumPy例程具有依赖数据的输出形状（例如`unique()`和`nonzero()`）。因为XLA编译器要求在编译时知道数组形状，这些操作与JIT不兼容。因此，JAX在这些函数中添加了一个可选的`size`参数，可以在静态指定以便与JIT一起使用。
- en: Nearly all applicable NumPy functions are implemented in the `jax.numpy` namespace;
    they are listed below.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有适用的NumPy函数都在`jax.numpy`命名空间中实现；它们如下所列。
- en: '| `ndarray.at` | Helper property for index update functionality. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `ndarray.at` | 用于索引更新功能的辅助属性。 |'
- en: '| `abs`(x, /) | Alias of `jax.numpy.absolute()`. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `abs`(x, /) | `jax.numpy.absolute()`的别名。 |'
- en: '| `absolute`(x, /) | Calculate the absolute value element-wise. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `absolute`(x, /) | 计算逐元素的绝对值。 |'
- en: '| `acos`(x, /) | Trigonometric inverse cosine, element-wise. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `acos`(x, /) | 逐元素的反余弦函数。 |'
- en: '| `acosh`(x, /) | Inverse hyperbolic cosine, element-wise. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `acosh`(x, /) | 逐元素的反双曲余弦函数。 |'
- en: '| `add`(x1, x2, /) | Add arguments element-wise. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `add`(x1, x2, /) | 逐元素相加。 |'
- en: '| `all`(a[, axis, out, keepdims, where]) | Test whether all array elements
    along a given axis evaluate to True. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `all`(a[, axis, out, keepdims, where]) | 测试沿给定轴的所有数组元素是否为True。 |'
- en: '| `allclose`(a, b[, rtol, atol, equal_nan]) | Returns True if two arrays are
    element-wise equal within a tolerance. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `allclose`(a, b[, rtol, atol, equal_nan]) | 如果两个数组在容差范围内逐元素相等，则返回True。 |'
- en: '| `amax`(a[, axis, out, keepdims, initial, where]) | Return the maximum of
    an array or maximum along an axis. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `amax`(a[, axis, out, keepdims, initial, where]) | 返回数组或沿轴的最大值。 |'
- en: '| `amin`(a[, axis, out, keepdims, initial, where]) | Return the minimum of
    an array or minimum along an axis. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `amin`(a[, axis, out, keepdims, initial, where]) | 返回数组或沿轴的最小值。 |'
- en: '| `angle`(z[, deg]) | Return the angle of a complex valued number or array.
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `angle`(z[, deg]) | 返回复数或数组的角度。 |'
- en: '| `any`(a[, axis, out, keepdims, where]) | Test whether any array element along
    a given axis evaluates to True. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `any`(a[, axis, out, keepdims, where]) | 测试沿给定轴的任何数组元素是否为True。 |'
- en: '| `append`(arr, values[, axis]) | Return a new array with values appended to
    the end of the original array. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `append`(arr, values[, axis]) | 返回将值附加到原始数组末尾的新数组。 |'
- en: '| `apply_along_axis`(func1d, axis, arr, *args, ...) | Apply a function to 1-D
    slices along the given axis. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `apply_along_axis`(func1d, axis, arr, *args, ...) | 沿给定轴向数组的1-D切片应用函数。 |'
- en: '| `apply_over_axes`(func, a, axes) | Apply a function repeatedly over multiple
    axes. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `apply_over_axes`(func, a, axes) | 在多个轴上重复应用函数。 |'
- en: '| `arange`(start[, stop, step, dtype]) | Return evenly spaced values within
    a given interval. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `arange`(start[, stop, step, dtype]) | 返回给定间隔内的均匀间隔值。 |'
- en: '| `arccos`(x, /) | Trigonometric inverse cosine, element-wise. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '`arccos`(x, /) | 反余弦，逐元素计算。'
- en: '| `arccosh`(x, /) | Inverse hyperbolic cosine, element-wise. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '`arccosh`(x, /) | 逆双曲余弦，逐元素计算。'
- en: '| `arcsin`(x, /) | Inverse sine, element-wise. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '`arcsin`(x, /) | 反正弦，逐元素计算。'
- en: '| `arcsinh`(x, /) | Inverse hyperbolic sine element-wise. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '`arcsinh`(x, /) | 逆双曲正弦，逐元素计算。'
- en: '| `arctan`(x, /) | Trigonometric inverse tangent, element-wise. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '`arctan`(x, /) | 反三角正切，逐元素计算。'
- en: '| `arctan2`(x1, x2, /) | Element-wise arc tangent of `x1/x2` choosing the quadrant
    correctly. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '`arctan2`(x1, x2, /) | 根据 `x1/x2` 的值选择正确的象限，逐元素计算反正切。'
- en: '| `arctanh`(x, /) | Inverse hyperbolic tangent element-wise. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '`arctanh`(x, /) | 逆双曲正切，逐元素计算。'
- en: '| `argmax`(a[, axis, out, keepdims]) | Returns the indices of the maximum values
    along an axis. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '`argmax`(a[, axis, out, keepdims]) | 返回沿轴的最大值的索引。'
- en: '| `argmin`(a[, axis, out, keepdims]) | Returns the indices of the minimum values
    along an axis. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '`argmin`(a[, axis, out, keepdims]) | 返回沿轴的最小值的索引。'
- en: '| `argpartition`(a, kth[, axis]) | Returns indices that partially sort an array.
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '`argpartition`(a, kth[, axis]) | 返回部分排序数组的索引。'
- en: '| `argsort`(a[, axis, kind, order, stable, ...]) | Returns the indices that
    would sort an array. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '`argsort`(a[, axis, kind, order, stable, ...]) | 返回排序数组的索引。'
- en: '| `argwhere`(a, *[, size, fill_value]) | Find the indices of nonzero array
    elements |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '`argwhere`(a, *[, size, fill_value]) | 查找非零数组元素的索引。'
- en: '| `around`(a[, decimals, out]) | Round an array to the given number of decimals.
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '`around`(a[, decimals, out]) | 将数组四舍五入到指定的小数位数。'
- en: '| `array`(object[, dtype, copy, order, ndmin]) | Create an array. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '`array`(object[, dtype, copy, order, ndmin]) | 创建一个数组。'
- en: '| `array_equal`(a1, a2[, equal_nan]) | True if two arrays have the same shape
    and elements, False otherwise. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '`array_equal`(a1, a2[, equal_nan]) | 如果两个数组具有相同的形状和元素则返回 True。'
- en: '| `array_equiv`(a1, a2) | Returns True if input arrays are shape consistent
    and all elements equal. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '`array_equiv`(a1, a2) | 如果输入数组形状一致且所有元素相等则返回 True。'
- en: '| `array_repr`(arr[, max_line_width, precision, ...]) | Return the string representation
    of an array. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '`array_repr`(arr[, max_line_width, precision, ...]) | 返回数组的字符串表示。'
- en: '| `array_split`(ary, indices_or_sections[, axis]) | Split an array into multiple
    sub-arrays. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '`array_split`(ary, indices_or_sections[, axis]) | 将数组分割为多个子数组。'
- en: '| `array_str`(a[, max_line_width, precision, ...]) | Return a string representation
    of the data in an array. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '`array_str`(a[, max_line_width, precision, ...]) | 返回数组中数据的字符串表示。'
- en: '| `asarray`(a[, dtype, order, copy]) | Convert the input to an array. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '`asarray`(a[, dtype, order, copy]) | 将输入转换为数组。'
- en: '| `asin`(x, /) | Inverse sine, element-wise. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '`asin`(x, /) | 反正弦，逐元素计算。'
- en: '| `asinh`(x, /) | Inverse hyperbolic sine element-wise. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '`asinh`(x, /) | 逆双曲正弦，逐元素计算。'
- en: '| `astype`(x, dtype, /, *[, copy, device]) | Copies an array to a specified
    data type. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '`astype`(x, dtype, /, *[, copy, device]) | 将数组复制到指定的数据类型。'
- en: '| `atan`(x, /) | Trigonometric inverse tangent, element-wise. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '`atan`(x, /) | 反三角正切，逐元素计算。'
- en: '| `atanh`(x, /) | Inverse hyperbolic tangent element-wise. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '`atanh`(x, /) | 逆双曲正切，逐元素计算。'
- en: '| `atan2`(x1, x2, /) | Element-wise arc tangent of `x1/x2` choosing the quadrant
    correctly. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '`atan2`(x1, x2, /) | 根据 `x1/x2` 的值选择正确的象限，逐元素计算反正切。'
- en: '| `atleast_1d`() | Convert inputs to arrays with at least one dimension. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '`atleast_1d`() | 将输入转换为至少有一维的数组。'
- en: '| `atleast_2d`() | View inputs as arrays with at least two dimensions. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '`atleast_2d`() | 将输入视为至少有两个维度的数组。'
- en: '| `atleast_3d`() | View inputs as arrays with at least three dimensions. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '`atleast_3d`() | 将输入视为至少有三个维度的数组。'
- en: '| `average`() | Compute the weighted average along the specified axis. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '`average`() | 沿指定轴计算加权平均值。'
- en: '| `bartlett`(M) | Return the Bartlett window. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '`bartlett`(M) | 返回 Bartlett 窗口。'
- en: '| `bincount`(x[, weights, minlength, length]) | Count the number of occurrences
    of each value in an integer array. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '`bincount`(x[, weights, minlength, length]) | 计算整数数组中每个值的出现次数。'
- en: '| `bitwise_and`(x1, x2, /) | Compute the bit-wise AND of two arrays element-wise.
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '`bitwise_and`(x1, x2, /) | 逐元素计算两个数组的按位与操作。'
- en: '| `bitwise_count`(x, /) | Counts the number of 1 bits in the binary representation
    of the absolute value of each element of `x`. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '`bitwise_count`(x, /) | 计算每个元素的绝对值的二进制表示中 1 的位数。'
- en: '| `bitwise_invert`(x, /) | Compute bit-wise inversion, or bit-wise NOT, element-wise.
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '`bitwise_invert`(x, /) | 计算按位求反，逐元素计算。'
- en: '| `bitwise_left_shift`(x1, x2, /) | Shift the bits of an integer to the left.
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '`bitwise_left_shift`(x1, x2, /) | 将整数的位向左移动。'
- en: '| `bitwise_not`(x, /) | Compute bit-wise inversion, or bit-wise NOT, element-wise.
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_not`(x, /) | 计算按位取反（bit-wise NOT），即按位取反，对每个元素进行操作。 |'
- en: '| `bitwise_or`(x1, x2, /) | Compute the bit-wise OR of two arrays element-wise.
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_or`(x1, x2, /) | 计算两个数组按位或的结果。 |'
- en: '| `bitwise_right_shift`(x1, x2, /) | Shift the bits of an integer to the right.
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift`(x1, x2, /) | 将整数的位向右移动。 |'
- en: '| `bitwise_xor`(x1, x2, /) | Compute the bit-wise XOR of two arrays element-wise.
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_xor`(x1, x2, /) | 计算两个数组按位异或的结果。 |'
- en: '| `blackman`(M) | Return the Blackman window. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `blackman`(M) | 返回Blackman窗口。 |'
- en: '| `block`(arrays) | Assemble an nd-array from nested lists of blocks. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `block`(arrays) | 从嵌套的块列表中组装一个多维数组。 |'
- en: '| `bool_` | alias of `bool` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `bool_` | `bool` 的别名 |'
- en: '| `broadcast_arrays`(*args) | Broadcast any number of arrays against each other.
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `broadcast_arrays`(*args) | 广播任意数量的数组。 |'
- en: '| `broadcast_shapes`() | Broadcast the input shapes into a single shape. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `broadcast_shapes`() | 将输入的形状广播为单个形状。 |'
- en: '| `broadcast_to`(array, shape) | Broadcast an array to a new shape. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `broadcast_to`(array, shape) | 将数组广播到新的形状。 |'
- en: '| `c_` | Concatenate slices, scalars and array-like objects along the last
    axis. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `c_` | 沿着最后一个轴连接切片、标量和类数组对象。 |'
- en: '| `can_cast`(from_, to[, casting]) | Returns True if cast between data types
    can occur according to the casting rule. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `can_cast`(from_, to[, casting]) | 根据转换规则，如果可以进行数据类型转换，则返回True。 |'
- en: '| `cbrt`(x, /) | Return the cube-root of an array, element-wise. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `cbrt`(x, /) | 返回数组的立方根，按元素操作。 |'
- en: '| `cdouble` | alias of `complex128` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `cdouble` | `complex128` 的别名 |'
- en: '| `ceil`(x, /) | Return the ceiling of the input, element-wise. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `ceil`(x, /) | 返回输入的上限值，按元素操作。 |'
- en: '| `character`() | Abstract base class of all character string scalar types.
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `character`() | 所有字符字符串标量类型的抽象基类。 |'
- en: '| `choose`(a, choices[, out, mode]) | Construct an array from an index array
    and a list of arrays to choose from. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `choose`(a, choices[, out, mode]) | 根据索引数组和数组列表选择构造数组。 |'
- en: '| `clip`([x, min, max, a, a_min, a_max]) | Clip (limit) the values in an array.
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `clip`([x, min, max, a, a_min, a_max]) | 将数组中的值限制在给定范围内。 |'
- en: '| `column_stack`(tup) | Stack 1-D arrays as columns into a 2-D array. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `column_stack`(tup) | 将一维数组按列堆叠成二维数组。 |'
- en: '| `complex_` | alias of `complex128` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `complex_` | `complex128` 的别名 |'
- en: '| `complex128`(x) |  |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `complex128`(x) |  |'
- en: '| `complex64`(x) |  |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `complex64`(x) |  |'
- en: '| `complexfloating`() | Abstract base class of all complex number scalar types
    that are made up of floating-point numbers. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `complexfloating`() | 所有由浮点数构成的复数数值标量类型的抽象基类。 |'
- en: '| `ComplexWarning` | The warning raised when casting a complex dtype to a real
    dtype. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `ComplexWarning` | 在将复数数据类型强制转换为实数数据类型时引发的警告。 |'
- en: '| `compress`(condition, a[, axis, size, ...]) | Compress an array along a given
    axis using a boolean condition. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `compress`(condition, a[, axis, size, ...]) | 使用布尔条件沿指定轴压缩数组。 |'
- en: '| `concat`(arrays, /, *[, axis]) | Join a sequence of arrays along an existing
    axis. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `concat`(arrays, /, *[, axis]) | 沿着现有轴连接一系列数组。 |'
- en: '| `concatenate`(arrays[, axis, dtype]) | Join a sequence of arrays along an
    existing axis. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `concatenate`(arrays[, axis, dtype]) | 沿着指定轴连接一系列数组。 |'
- en: '| `conj`(x, /) | Return the complex conjugate, element-wise. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `conj`(x, /) | 返回复数的共轭，按元素操作。 |'
- en: '| `conjugate`(x, /) | Return the complex conjugate, element-wise. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `conjugate`(x, /) | 返回复数的共轭，按元素操作。 |'
- en: '| `convolve`(a, v[, mode, precision, ...]) | Convolution of two one dimensional
    arrays. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `convolve`(a, v[, mode, precision, ...]) | 计算两个一维数组的卷积。 |'
- en: '| `copy`(a[, order]) | Return an array copy of the given object. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `copy`(a[, order]) | 返回给定对象的数组副本。 |'
- en: '| `copysign`(x1, x2, /) | Change the sign of x1 to that of x2, element-wise.
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `copysign`(x1, x2, /) | 将x1的符号改为x2的符号，按元素操作。 |'
- en: '| `corrcoef`(x[, y, rowvar]) | Return Pearson product-moment correlation coefficients.
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `corrcoef`(x[, y, rowvar]) | 返回皮尔逊积矩相关系数。 |'
- en: '| `correlate`(a, v[, mode, precision, ...]) | Correlation of two one dimensional
    arrays. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `correlate`(a, v[, mode, precision, ...]) | 计算两个一维数组的相关性。 |'
- en: '| `cos`(x, /) | Cosine element-wise. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `cos`(x, /) | 计算元素的余弦值。 |'
- en: '| `cosh`(x, /) | Hyperbolic cosine, element-wise. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `cosh`(x, /) | 双曲余弦，按元素操作。 |'
- en: '| `count_nonzero`(a[, axis, keepdims]) | Counts the number of non-zero values
    in the array `a`. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `count_nonzero`(a[, axis, keepdims]) | 统计数组`a`中的非零值数量。 |'
- en: '| `cov`(m[, y, rowvar, bias, ddof, fweights, ...]) | Estimate a covariance
    matrix, given data and weights. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `cov`(m[, y, rowvar, bias, ddof, fweights, ...]) | 估算给定数据和权重的协方差矩阵。 |'
- en: '| `cross`(a, b[, axisa, axisb, axisc, axis]) | Return the cross product of
    two (arrays of) vectors. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `cross`(a, b[, axisa, axisb, axisc, axis]) | 返回两个（向量）数组的叉积。 |'
- en: '| `csingle` | alias of `complex64` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `csingle` | `complex64`的别名。'
- en: '| `cumprod`(a[, axis, dtype, out]) | Return the cumulative product of elements
    along a given axis. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `cumprod`(a[, axis, dtype, out]) | 返回沿给定轴的元素的累积乘积。'
- en: '| `cumsum`(a[, axis, dtype, out]) | Return the cumulative sum of the elements
    along a given axis. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `cumsum`(a[, axis, dtype, out]) | 返回沿给定轴的元素的累积和。'
- en: '| `cumulative_sum`(x, /, *[, axis, dtype, ...]) |  |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `cumulative_sum`(x, /, *[, axis, dtype, ...]) | '
- en: '| `deg2rad`(x, /) | Convert angles from degrees to radians. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `deg2rad`(x, /) | 将角度从度转换为弧度。'
- en: '| `degrees`(x, /) | Convert angles from radians to degrees. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `degrees`(x, /) | 将弧度从弧度转换为度。'
- en: '| `delete`(arr, obj[, axis, assume_unique_indices]) | Delete entry or entries
    from an array. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `delete`(arr, obj[, axis, assume_unique_indices]) | 从数组中删除条目或条目。'
- en: '| `diag`(v[, k]) | Extract a diagonal or construct a diagonal array. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `diag`(v[, k]) | 提取对角线或构造对角线数组。'
- en: '| `diag_indices`(n[, ndim]) | Return the indices to access the main diagonal
    of an array. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `diag_indices`(n[, ndim]) | 返回访问数组主对角线的索引。'
- en: '| `diag_indices_from`(arr) | Return the indices to access the main diagonal
    of an n-dimensional array. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `diag_indices_from`(arr) | 返回n维数组的主对角线的访问索引。'
- en: '| `diagflat`(v[, k]) | Create a two-dimensional array with the flattened input
    as a diagonal. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `diagflat`(v[, k]) | 用扁平化输入创建一个二维数组的对角线。'
- en: '| `diagonal`(a[, offset, axis1, axis2]) | Return specified diagonals. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal`(a[, offset, axis1, axis2]) | 返回指定对角线。'
- en: '| `diff`(a[, n, axis, prepend, append]) | Calculate the n-th discrete difference
    along the given axis. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `diff`(a[, n, axis, prepend, append]) | 计算给定轴的第n个离散差异。'
- en: '| `digitize`(x, bins[, right]) | Return the indices of the bins to which each
    value in input array belongs. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `digitize`(x, bins[, right]) | 返回输入数组中每个值所属的箱体的索引。'
- en: '| `divide`(x1, x2, /) | Divide arguments element-wise. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `divide`(x1, x2, /) | 按元素划分参数。'
- en: '| `divmod`(x1, x2, /) | Return element-wise quotient and remainder simultaneously.
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `divmod`(x1, x2, /) | 同时返回按元素的商和余数。'
- en: '| `dot`(a, b, *[, precision, preferred_element_type]) | Compute the dot product
    of two arrays. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `dot`(a, b, *[, precision, preferred_element_type]) | 计算两个数组的点积。'
- en: '| `double` | alias of `float64` |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `double` | `float64`的别名。'
- en: '| `dsplit`(ary, indices_or_sections) | Split array into multiple sub-arrays
    along the 3rd axis (depth). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `dsplit`(ary, indices_or_sections) | 沿第3轴（深度）将数组分割成多个子数组。'
- en: '| `dstack`(tup[, dtype]) | Stack arrays in sequence depth wise (along third
    axis). |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `dstack`(tup[, dtype]) | 深度方向上序列堆叠数组（沿着第三个轴）。'
- en: '| `dtype`(dtype[, align, copy]) | Create a data type object. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `dtype`(dtype[, align, copy]) | 创建一个数据类型对象。'
- en: '| `ediff1d`(ary[, to_end, to_begin]) | The differences between consecutive
    elements of an array. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `ediff1d`(ary[, to_end, to_begin]) | 数组中连续元素的差异。'
- en: '| `einsum`() | Einstein summation |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `einsum`() | 爱因斯坦求和。'
- en: '| `einsum_path`() | Evaluates the optimal contraction path without evaluating
    the einsum. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `einsum_path`() | 在不评估einsum的情况下计算最佳收缩路径。'
- en: '| `empty`(shape[, dtype, device]) | Return a new array of given shape and type,
    without initializing entries. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `empty`(shape[, dtype, device]) | 返回给定形状和类型的新数组，不初始化条目。'
- en: '| `empty_like`(prototype[, dtype, shape, device]) | Return a new array with
    the same shape and type as a given array. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `empty_like`(prototype[, dtype, shape, device]) | 返回与给定数组相同形状和类型的新数组。'
- en: '| `equal`(x1, x2, /) | Return (x1 == x2) element-wise. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `equal`(x1, x2, /) | 按元素返回(x1 == x2)。'
- en: '| `exp`(x, /) | Calculate the exponential of all elements in the input array.
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `exp`(x, /) | 计算输入数组中所有元素的指数。'
- en: '| `exp2`(x, /) | Calculate 2**p for all p in the input array. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `exp2`(x, /) | 计算输入数组中所有p的2**p。'
- en: '| `expand_dims`(a, axis) | Insert dimensions of length 1 into array |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `expand_dims`(a, axis) | 将长度为1的维度插入数组。'
- en: '| `expm1`(x, /) | Calculate `exp(x) - 1` for all elements in the array. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `expm1`(x, /) | 计算数组中所有元素的`exp(x) - 1`。'
- en: '| `extract`(condition, arr, *[, size, fill_value]) | Return the elements of
    an array that satisfy a condition. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `extract`(condition, arr, *[, size, fill_value]) | 返回满足条件的数组元素。'
- en: '| `eye`(N[, M, k, dtype]) | Return a 2-D array with ones on the diagonal and
    zeros elsewhere. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `eye`(N[, M, k, dtype]) | 返回对角线上为1的二维数组，其他位置为0。'
- en: '| `fabs`(x, /) | Compute the absolute values element-wise. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `fabs`(x, /) | 计算每个元素的绝对值。'
- en: '| `fill_diagonal`(a, val[, wrap, inplace]) | Fill the main diagonal of the
    given array of any dimensionality. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `fill_diagonal`(a, val[, wrap, inplace]) | 填充给定任意维度数组的主对角线。'
- en: '| `finfo`(dtype) | Machine limits for floating point types. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `finfo`(dtype) | 浮点类型的机器限制。'
- en: '| `fix`(x[, out]) | Round to nearest integer towards zero. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `fix`(x[, out]) | 四舍五入到最近的整数朝向零。'
- en: '| `flatnonzero`(a, *[, size, fill_value]) | Return indices of nonzero elements
    in a flattened array |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `flatnonzero`(a, *[, size, fill_value]) | 返回扁平化数组中非零元素的索引。 |'
- en: '| `flexible`() | Abstract base class of all scalar types without predefined
    length. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `flexible`() | 所有没有预定义长度的标量类型的抽象基类。 |'
- en: '| `flip`(m[, axis]) | Reverse the order of elements of an array along the given
    axis. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `flip`(m[, axis]) | 沿指定轴翻转数组元素的顺序。 |'
- en: '| `fliplr`(m) | Reverse the order of elements of an array along axis 1. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `fliplr`(m) | 沿轴 1 翻转数组元素的顺序。 |'
- en: '| `flipud`(m) | Reverse the order of elements of an array along axis 0. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `flipud`(m) | 沿轴 0 翻转数组元素的顺序。 |'
- en: '| `float_` | alias of `float64` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `float_` | `float64` 的别名。 |'
- en: '| `float_power`(x1, x2, /) | First array elements raised to powers from second
    array, element-wise. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `float_power`(x1, x2, /) | 逐元素地将第一个数组的元素提升为第二个数组的幂。 |'
- en: '| `float16`(x) |  |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `float16`(x) |  |'
- en: '| `float32`(x) |  |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `float32`(x) |  |'
- en: '| `float64`(x) |  |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `float64`(x) |  |'
- en: '| `floating`() | Abstract base class of all floating-point scalar types. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `floating`() | 所有浮点标量类型的抽象基类。 |'
- en: '| `floor`(x, /) | Return the floor of the input, element-wise. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `floor`(x, /) | 逐元素返回输入的下限。 |'
- en: '| `floor_divide`(x1, x2, /) | Return the largest integer smaller or equal to
    the division of the inputs. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `floor_divide`(x1, x2, /) | 返回输入除法的最大整数小于或等于结果的元素。 |'
- en: '| `fmax`(x1, x2) | Element-wise maximum of array elements. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `fmax`(x1, x2) | 数组元素的逐元素最大值。 |'
- en: '| `fmin`(x1, x2) | Element-wise minimum of array elements. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `fmin`(x1, x2) | 数组元素的逐元素最小值。 |'
- en: '| `fmod`(x1, x2, /) | Returns the element-wise remainder of division. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `fmod`(x1, x2, /) | 返回除法的元素余数。 |'
- en: '| `frexp`(x, /) | Decompose the elements of x into mantissa and twos exponent.
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `frexp`(x, /) | 将 x 的元素分解为尾数和二次指数。 |'
- en: '| `frombuffer`(buffer[, dtype, count, offset]) | Interpret a buffer as a 1-dimensional
    array. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `frombuffer`(buffer[, dtype, count, offset]) | 将缓冲区解释为一维数组。 |'
- en: '| `fromfile`(*args, **kwargs) | Unimplemented JAX wrapper for jnp.fromfile.
    |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `fromfile`(*args, **kwargs) | jnp.fromfile 的未实现 JAX 封装器。 |'
- en: '| `fromfunction`(function, shape, *[, dtype]) | Construct an array by executing
    a function over each coordinate. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `fromfunction`(function, shape, *[, dtype]) | 通过对每个坐标执行函数来构造数组。 |'
- en: '| `fromiter`(*args, **kwargs) | Unimplemented JAX wrapper for jnp.fromiter.
    |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `fromiter`(*args, **kwargs) | jnp.fromiter 的未实现 JAX 封装器。 |'
- en: '| `frompyfunc`(func, /, nin, nout, *[, identity]) | Create a JAX ufunc from
    an arbitrary JAX-compatible scalar function. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `frompyfunc`(func, /, nin, nout, *[, identity]) | 从任意 JAX 兼容的标量函数创建一个 JAX
    ufunc。 |'
- en: '| `fromstring`(string[, dtype, count]) | A new 1-D array initialized from text
    data in a string. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `fromstring`(string[, dtype, count]) | 从字符串中的文本数据初始化一个新的一维数组。 |'
- en: '| `from_dlpack`(x, /, *[, device, copy]) | Create a NumPy array from an object
    implementing the `__dlpack__` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `from_dlpack`(x, /, *[, device, copy]) | 从实现了`__dlpack__`的对象创建一个 NumPy 数组。
    |'
- en: '| `full`(shape, fill_value[, dtype, device]) | Return a new array of given
    shape and type, filled with fill_value. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `full`(shape, fill_value[, dtype, device]) | 返回给定形状和类型的新数组，并填充 fill_value。
    |'
- en: '| `full_like`(a, fill_value[, dtype, shape, device]) | Return a full array
    with the same shape and type as a given array. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `full_like`(a, fill_value[, dtype, shape, device]) | 返回与给定数组形状和类型相同的全数组。
    |'
- en: '| `gcd`(x1, x2) | Returns the greatest common divisor of `&#124;x1&#124;` and
    `&#124;x2&#124;` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `gcd`(x1, x2) | 返回 `&#124;x1&#124;` 和 `&#124;x2&#124;` 的最大公约数。 |'
- en: '| `generic`() | Base class for numpy scalar types. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `generic`() | NumPy 标量类型的基类。 |'
- en: '| `geomspace`(start, stop[, num, endpoint, ...]) | Return numbers spaced evenly
    on a log scale (a geometric progression). |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `geomspace`(start, stop[, num, endpoint, ...]) | 返回等间隔的对数刻度上的数字（等比数列）。 |'
- en: '| `get_printoptions`() | Return the current print options. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `get_printoptions`() | 返回当前的打印选项。 |'
- en: '| `gradient`(f, *varargs[, axis, edge_order]) | Return the gradient of an N-dimensional
    array. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `gradient`(f, *varargs[, axis, edge_order]) | 返回 N 维数组的梯度。 |'
- en: '| `greater`(x1, x2, /) | Return the truth value of (x1 > x2) element-wise.
    |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `greater`(x1, x2, /) | 返回逐元素 (x1 > x2) 的真值。 |'
- en: '| `greater_equal`(x1, x2, /) | Return the truth value of (x1 >= x2) element-wise.
    |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `greater_equal`(x1, x2, /) | 返回逐元素 (x1 >= x2) 的真值。 |'
- en: '| `hamming`(M) | Return the Hamming window. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `hamming`(M) | 返回 Hamming 窗口。 |'
- en: '| `hanning`(M) | Return the Hanning window. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `hanning`(M) | 返回 Hanning 窗口。 |'
- en: '| `heaviside`(x1, x2, /) | Compute the Heaviside step function. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `heaviside`(x1, x2, /) | 计算 Heaviside 阶跃函数。 |'
- en: '| `histogram`(a[, bins, range, weights, density]) | Compute the histogram of
    a dataset. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `histogram`(a[, bins, range, weights, density]) | 计算数据集的直方图。 |'
- en: '| `histogram_bin_edges`(a[, bins, range, weights]) | Function to calculate
    only the edges of the bins used by the histogram |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `histogram_bin_edges`(a[, bins, range, weights]) | 计算直方图使用的箱子的边缘。 |'
- en: '| `histogram2d`(x, y[, bins, range, weights, ...]) | Compute the bi-dimensional
    histogram of two data samples. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `histogram2d`(x, y[, bins, range, weights, ...]) | 计算两个数据样本的二维直方图。 |'
- en: '| `histogramdd`(sample[, bins, range, weights, ...]) | Compute the multidimensional
    histogram of some data. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `histogramdd`(sample[, bins, range, weights, ...]) | 计算一些数据的多维直方图。 |'
- en: '| `hsplit`(ary, indices_or_sections) | Split an array into multiple sub-arrays
    horizontally (column-wise). |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `hsplit`(ary, indices_or_sections) | 水平（按列）将数组分割为多个子数组。 |'
- en: '| `hstack`(tup[, dtype]) | Stack arrays in sequence horizontally (column wise).
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `hstack`(tup[, dtype]) | 按序列水平（按列）堆叠数组。 |'
- en: '| `hypot`(x1, x2, /) | Given the "legs" of a right triangle, return its hypotenuse.
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `hypot`(x1, x2, /) | 给定直角三角形的“腿”，返回其斜边长度。 |'
- en: '| `i0` | Modified Bessel function of the first kind, order 0. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `i0` | 第一类修正贝塞尔函数，阶数为0。 |'
- en: '| `identity`(n[, dtype]) | Return the identity array. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `identity`(n[, dtype]) | 返回单位数组。 |'
- en: '| `iinfo`(int_type) |  |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `iinfo`(int_type) |  |'
- en: '| `imag`(val, /) | Return the imaginary part of the complex argument. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `imag`(val, /) | 返回复数参数的虚部。 |'
- en: '| `index_exp` | A nicer way to build up index tuples for arrays. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `index_exp` | 用于构建数组索引元组的更好方式。 |'
- en: '| `indices`() | Return an array representing the indices of a grid. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `indices`() | 返回表示网格的索引数组。 |'
- en: '| `inexact`() | Abstract base class of all numeric scalar types with a (potentially)
    inexact representation of the values in its range, such as floating-point numbers.
    |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `inexact`() | 所有数值标量类型的抽象基类，其值的表示（可能）是不精确的，如浮点数。 |'
- en: '| `inner`(a, b, *[, precision, ...]) | Compute the inner product of two arrays.
    |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `inner`(a, b, *[, precision, ...]) | 计算两个数组的内积。 |'
- en: '| `insert`(arr, obj, values[, axis]) | Insert values along the given axis before
    the given indices. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `insert`(arr, obj, values[, axis]) | 在给定索引之前，沿着指定的轴插入值。 |'
- en: '| `int_` | alias of `int64` |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `int_` | `int64`的别名 |'
- en: '| `int16`(x) |  |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `int16`(x) |  |'
- en: '| `int32`(x) |  |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `int32`(x) |  |'
- en: '| `int64`(x) |  |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `int64`(x) |  |'
- en: '| `int8`(x) |  |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `int8`(x) |  |'
- en: '| `integer`() | Abstract base class of all integer scalar types. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `integer`() | 所有整数标量类型的抽象基类。 |'
- en: '| `interp`(x, xp, fp[, left, right, period]) | One-dimensional linear interpolation
    for monotonically increasing sample points. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `interp`(x, xp, fp[, left, right, period]) | 单调递增样本点的一维线性插值。 |'
- en: '| `intersect1d`(ar1, ar2[, assume_unique, ...]) | Compute the set intersection
    of two 1D arrays. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `intersect1d`(ar1, ar2[, assume_unique, ...]) | 计算两个一维数组的交集。 |'
- en: '| `invert`(x, /) | Compute bit-wise inversion, or bit-wise NOT, element-wise.
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `invert`(x, /) | 按位求反，即按位非，逐元素进行操作。 |'
- en: '| `isclose`(a, b[, rtol, atol, equal_nan]) | Returns a boolean array where
    two arrays are element-wise equal within a |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `isclose`(a, b[, rtol, atol, equal_nan]) | 返回一个布尔数组，其中两个数组在每个元素级别上是否在指定的公差内相等。
    |'
- en: '| `iscomplex`(x) | Returns a bool array, where True if input element is complex.
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `iscomplex`(x) | 返回一个布尔数组，如果输入元素是复数则为True。 |'
- en: '| `iscomplexobj`(x) | Check for a complex type or an array of complex numbers.
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `iscomplexobj`(x) | 检查复数类型或复数数组。 |'
- en: '| `isdtype`(dtype, kind) | Returns a boolean indicating whether a provided
    dtype is of a specified kind. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `isdtype`(dtype, kind) | 返回一个布尔值，指示提供的dtype是否属于指定的kind。 |'
- en: '| `isfinite`(x, /) | Test element-wise for finiteness (not infinity and not
    Not a Number). |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `isfinite`(x, /) | 测试每个元素是否有限（既不是无穷大也不是非数）。 |'
- en: '| `isin`(element, test_elements[, ...]) | Determine whether elements in `element`
    appear in `test_elements`. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `isin`(element, test_elements[, ...]) | 确定`element`中的元素是否出现在`test_elements`中。
    |'
- en: '| `isinf`(x, /) | Test element-wise for positive or negative infinity. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `isinf`(x, /) | 逐元素测试是否为正或负无穷大。 |'
- en: '| `isnan`(x, /) | Test element-wise for NaN and return result as a boolean
    array. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `isnan`(x, /) | 逐元素测试是否为NaN，并返回布尔数组结果。 |'
- en: '| `isneginf`(x, /[, out]) | Test element-wise for negative infinity, return
    result as bool array. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `isneginf`(x, /[, out]) | 逐元素测试是否为负无穷大，返回布尔数组结果。 |'
- en: '| `isposinf`(x, /[, out]) | Test element-wise for positive infinity, return
    result as bool array. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `isposinf`(x, /[, out]) | 逐元素测试是否为正无穷大，返回布尔数组结果。 |'
- en: '| `isreal`(x) | Returns a bool array, where True if input element is real.
    |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `isreal`(x) | 返回一个布尔数组，如果输入元素是实数则为True。 |'
- en: '| `isrealobj`(x) | Return True if x is a not complex type or an array of complex
    numbers. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `isrealobj`(x) | 如果x是非复数类型或复数数组，则返回True。 |'
- en: '| `isscalar`(element) | Returns True if the type of element is a scalar type.
    |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `isscalar`(element) | 如果 element 的类型是标量类型，则返回 True。 |'
- en: '| `issubdtype`(arg1, arg2) | Returns True if first argument is a typecode lower/equal
    in type hierarchy. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `issubdtype`(arg1, arg2) | 如果第一个参数在类型层次结构中低于或等于第二个参数的类型码，则返回True。 |'
- en: '| `iterable`(y) | Check whether or not an object can be iterated over. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `iterable`(y) | 检查对象是否可迭代。 |'
- en: '| `ix_`(*args) | Return a multi-dimensional grid (open mesh) from N one-dimensional
    sequences. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `ix_`(*args) | 从 N 个一维序列返回多维网格（开放网格）。 |'
- en: '| `kaiser`(M, beta) | Return the Kaiser window. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `kaiser`(M, beta) | 返回Kaiser窗口。 |'
- en: '| `kron`(a, b) | Kronecker product of two arrays. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `kron`(a, b) | 两个数组的Kronecker乘积。 |'
- en: '| `lcm`(x1, x2) | Returns the lowest common multiple of `&#124;x1&#124;` and
    `&#124;x2&#124;` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `lcm`(x1, x2) | 返回 `|x1|` 和 `|x2|` 的最小公倍数。'
- en: '| `ldexp`(x1, x2, /) | Returns x1 * 2**x2, element-wise. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `ldexp`(x1, x2, /) | 返回 x1 * 2**x2，逐元素操作。 |'
- en: '| `left_shift`(x1, x2, /) | Shift the bits of an integer to the left. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `left_shift`(x1, x2, /) | 将整数的位左移。 |'
- en: '| `less`(x1, x2, /) | Return the truth value of (x1 < x2) element-wise. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `less`(x1, x2, /) | 逐元素返回 (x1 < x2) 的真值。 |'
- en: '| `less_equal`(x1, x2, /) | Return the truth value of (x1 <= x2) element-wise.
    |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `less_equal`(x1, x2, /) | 逐元素返回 (x1 <= x2) 的真值。 |'
- en: '| `lexsort`(keys[, axis]) | Perform an indirect stable sort using a sequence
    of keys. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `lexsort`(keys[, axis]) | 使用一系列键执行间接稳定排序。 |'
- en: '| `linspace`() | Return evenly spaced numbers over a specified interval. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `linspace`() | 返回指定间隔内的均匀间隔数字。 |'
- en: '| `load`(*args, **kwargs) | Load arrays or pickled objects from `.npy`, `.npz`
    or pickled files. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `load`(*args, **kwargs) | 从 `.npy`、`.npz` 或 pickled 文件中加载数组或序列化对象。 |'
- en: '| `log`(x, /) | Natural logarithm, element-wise. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `log`(x, /) | 自然对数，逐元素操作。 |'
- en: '| `log10`(x, /) | Return the base 10 logarithm of the input array, element-wise.
    |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `log10`(x, /) | 返回输入数组的以10为底的对数，逐元素操作。 |'
- en: '| `log1p`(x, /) | Return the natural logarithm of one plus the input array,
    element-wise. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `log1p`(x, /) | 返回输入数组加1的自然对数，逐元素操作。 |'
- en: '| `log2`(x, /) | Base-2 logarithm of x. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `log2`(x, /) | x 的以2为底的对数，逐元素操作。 |'
- en: '| `logaddexp` | Logarithm of the sum of exponentiations of the inputs. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `logaddexp` | 输入指数的对数之和。 |'
- en: '| `logaddexp2` | Logarithm of the sum of exponentiations of the inputs in base-2.
    |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `logaddexp2` | 以2为底的指数输入的对数之和。 |'
- en: '| `logical_and`(*args) | Compute the truth value of x1 AND x2 element-wise.
    |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `logical_and`(*args) | 逐元素计算 x1 AND x2 的真值。 |'
- en: '| `logical_not`(*args) | Compute the truth value of NOT x element-wise. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `logical_not`(*args) | 逐元素计算 NOT x 的真值。 |'
- en: '| `logical_or`(*args) | Compute the truth value of x1 OR x2 element-wise. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `logical_or`(*args) | 逐元素计算 x1 OR x2 的真值。 |'
- en: '| `logical_xor`(*args) | Compute the truth value of x1 XOR x2, element-wise.
    |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `logical_xor`(*args) | 逐元素计算 x1 XOR x2 的真值。 |'
- en: '| `logspace`(start, stop[, num, endpoint, base, ...]) | Return numbers spaced
    evenly on a log scale. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `logspace`(start, stop[, num, endpoint, base, ...]) | 返回对数刻度上均匀分布的数字。 |'
- en: '| `mask_indices`(*args, **kwargs) | Return the indices to access (n, n) arrays,
    given a masking function. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `mask_indices`(*args, **kwargs) | 给定掩码函数，返回访问 (n, n) 数组的索引。 |'
- en: '| `matmul`(a, b, *[, precision, ...]) | Perform a matrix multiplication. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `matmul`(a, b, *[, precision, ...]) | 执行矩阵乘法。 |'
- en: '| `matrix_transpose`(x, /) | Transpose the last two dimensions of an array.
    |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_transpose`(x, /) | 转置数组的最后两个维度。 |'
- en: '| `max`(a[, axis, out, keepdims, initial, where]) | Return the maximum of an
    array or maximum along an axis. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `max`(a[, axis, out, keepdims, initial, where]) | 返回数组或沿轴的最大值。 |'
- en: '| `maximum`(x1, x2, /) | Element-wise maximum of array elements. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `maximum`(x1, x2, /) | 逐元素计算数组元素的最大值。 |'
- en: '| `mean`(a[, axis, dtype, out, keepdims, where]) | Compute the arithmetic mean
    along the specified axis. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `mean`(a[, axis, dtype, out, keepdims, where]) | 沿指定轴计算算术平均值。 |'
- en: '| `median`(a[, axis, out, overwrite_input, keepdims]) | Compute the median
    along the specified axis. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `median`(a[, axis, out, overwrite_input, keepdims]) | 沿指定轴计算中位数。 |'
- en: '| `meshgrid`(*xi[, copy, sparse, indexing]) | Return a tuple of coordinate
    matrices from coordinate vectors. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `meshgrid`(*xi[, copy, sparse, indexing]) | 从坐标向量返回坐标矩阵的元组。 |'
- en: '| `mgrid` | Return dense multi-dimensional "meshgrid". |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `mgrid` | 返回密集的多维网格。 |'
- en: '| `min`(a[, axis, out, keepdims, initial, where]) | Return the minimum of an
    array or minimum along an axis. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `min`(a[, axis, out, keepdims, initial, where]) | 返回数组或沿轴的最小值。 |'
- en: '| `minimum`(x1, x2, /) | Element-wise minimum of array elements. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `minimum`(x1, x2, /) | 逐元素计算数组元素的最小值。 |'
- en: '| `mod`(x1, x2, /) | Returns the element-wise remainder of division. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `mod`(x1, x2, /) | 返回除法的元素余数。 |'
- en: '| `modf`(x, /[, out]) | Return the fractional and integral parts of an array,
    element-wise. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `modf`(x, /[, out]) | 返回数组元素的整数部分和小数部分。 |'
- en: '| `moveaxis`(a, source, destination) | Move an array axis to a new position
    |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `moveaxis`(a, source, destination) | 将数组轴移动到新位置 |'
- en: '| `multiply`(x1, x2, /) | Multiply arguments element-wise. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `multiply`(x1, x2, /) | 对参数逐元素相乘。 |'
- en: '| `nan_to_num`(x[, copy, nan, posinf, neginf]) | Replace NaN with zero and
    infinity with large finite numbers (default |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `nan_to_num`(x[, copy, nan, posinf, neginf]) | 将 NaN 替换为零，将无穷大替换为大的有限数（默认
    |'
- en: '| `nanargmax`(a[, axis, out, keepdims]) | Return the indices of the maximum
    values in the specified axis ignoring |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `nanargmax`(a[, axis, out, keepdims]) | 返回忽略指定轴上的 NaN 的最大值的索引 |'
- en: '| `nanargmin`(a[, axis, out, keepdims]) | Return the indices of the minimum
    values in the specified axis ignoring |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `nanargmin`(a[, axis, out, keepdims]) | 返回忽略指定轴上的 NaN 的最小值的索引 |'
- en: '| `nancumprod`(a[, axis, dtype, out]) | Return the cumulative product of array
    elements over a given axis treating Not a |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `nancumprod`(a[, axis, dtype, out]) | 返回沿指定轴对数组元素的累积积，处理 NaN 为 |'
- en: '| `nancumsum`(a[, axis, dtype, out]) | Return the cumulative sum of array elements
    over a given axis treating Not a |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `nancumsum`(a[, axis, dtype, out]) | 返回沿指定轴对数组元素的累积和，处理 NaN 为 |'
- en: '| `nanmax`(a[, axis, out, keepdims, initial, where]) | Return the maximum of
    an array or maximum along an axis, ignoring any |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `nanmax`(a[, axis, out, keepdims, initial, where]) | 返回数组或指定轴上的最大值，忽略任何 NaN
    |'
- en: '| `nanmean`(a[, axis, dtype, out, keepdims, where]) | Compute the arithmetic
    mean along the specified axis, ignoring NaNs. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `nanmean`(a[, axis, dtype, out, keepdims, where]) | 计算沿指定轴的算术平均值，忽略 NaN |'
- en: '| `nanmedian`(a[, axis, out, overwrite_input, ...]) | Compute the median along
    the specified axis, while ignoring NaNs. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `nanmedian`(a[, axis, out, overwrite_input, ...]) | 计算沿指定轴的中位数，忽略 NaN |'
- en: '| `nanmin`(a[, axis, out, keepdims, initial, where]) | Return minimum of an
    array or minimum along an axis, ignoring any NaNs. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `nanmin`(a[, axis, out, keepdims, initial, where]) | 返回数组或指定轴上的最小值，忽略任何 NaN
    |'
- en: '| `nanpercentile`(a, q[, axis, out, ...]) | Compute the qth percentile of the
    data along the specified axis, |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `nanpercentile`(a, q[, axis, out, ...]) | 计算沿指定轴的数据的第 q 分位数， |'
- en: '| `nanprod`(a[, axis, dtype, out, keepdims, ...]) | Return the product of array
    elements over a given axis treating Not a |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `nanprod`(a[, axis, dtype, out, keepdims, ...]) | 返回沿指定轴对数组元素求积，处理 NaN 为
    |'
- en: '| `nanquantile`(a, q[, axis, out, ...]) | Compute the qth quantile of the data
    along the specified axis, |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `nanquantile`(a, q[, axis, out, ...]) | 计算沿指定轴的数据的第 q 分位数， |'
- en: '| `nanstd`(a[, axis, dtype, out, ddof, ...]) | Compute the standard deviation
    along the specified axis, while |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `nanstd`(a[, axis, dtype, out, ddof, ...]) | 计算沿指定轴的标准差，忽略 NaN |'
- en: '| `nansum`(a[, axis, dtype, out, keepdims, ...]) | Return the sum of array
    elements over a given axis treating Not a |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `nansum`(a[, axis, dtype, out, keepdims, ...]) | 返回沿指定轴对数组元素求和，处理 NaN 为 |'
- en: '| `nanvar`(a[, axis, dtype, out, ddof, ...]) | Compute the variance along the
    specified axis, while ignoring NaNs. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `nanvar`(a[, axis, dtype, out, ddof, ...]) | 计算沿指定轴的方差，忽略 NaN |'
- en: '| `ndarray` | alias of `Array` |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| `ndarray` | `Array` 的别名。 |'
- en: '| `ndim`(a) | Return the number of dimensions of an array. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `ndim`(a) | 返回数组的维数。 |'
- en: '| `negative`(x, /) | Numerical negative, element-wise. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `negative`(x, /) | 数值取反，逐元素操作。 |'
- en: '| `nextafter`(x1, x2, /) | Return the next floating-point value after x1 towards
    x2, element-wise. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `nextafter`(x1, x2, /) | 返回 x1 朝向 x2 的下一个浮点数值，逐元素操作。 |'
- en: '| `nonzero`(a, *[, size, fill_value]) | Return indices of nonzero elements
    of an array. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `nonzero`(a, *[, size, fill_value]) | 返回数组中非零元素的索引。 |'
- en: '| `not_equal`(x1, x2, /) | Return (x1 != x2) element-wise. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `not_equal`(x1, x2, /) | 逐元素返回 (x1 != x2)。 |'
- en: '| `number`() | Abstract base class of all numeric scalar types. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `number`() | 所有数值标量类型的抽象基类。 |'
- en: '| `object_` | Any Python object. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `object_` | 任何 Python 对象。 |'
- en: '| `ogrid` | Return open multi-dimensional "meshgrid". |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `ogrid` | 返回开放多维“网格”。 |'
- en: '| `ones`(shape[, dtype, device]) | Return a new array of given shape and type,
    filled with ones. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `ones`(shape[, dtype, device]) | 返回给定形状和类型的新数组，填充为 1。 |'
- en: '| `ones_like`(a[, dtype, shape, device]) | Return an array of ones with the
    same shape and type as a given array. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `ones_like`(a[, dtype, shape, device]) | 返回与给定数组具有相同形状和类型的填充为 1 的数组。 |'
- en: '| `outer`(a, b[, out]) | Compute the outer product of two vectors. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `outer`(a, b[, out]) | 计算两个向量的外积。 |'
- en: '| `packbits`(a[, axis, bitorder]) | Packs the elements of a binary-valued array
    into bits in a uint8 array. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `packbits`(a[, axis, bitorder]) | 将二值数组的元素打包为 uint8 数组中的位。 |'
- en: '| `pad`(array, pad_width[, mode]) | Pad an array. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `pad`(array, pad_width[, mode]) | 对数组进行填充。 |'
- en: '| `partition`(a, kth[, axis]) | Returns a partially-sorted copy of an array.
    |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `partition`(a, kth[, axis]) | 返回数组的部分排序副本。 |'
- en: '| `percentile`(a, q[, axis, out, ...]) | Compute the q-th percentile of the
    data along the specified axis. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `percentile`(a, q[, axis, out, ...]) | 计算沿指定轴的数据的第 q 个百分位数。 |'
- en: '| `permute_dims`(a, /, axes) | Returns an array with axes transposed. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `permute_dims`(a, /, axes) | 返回通过转置轴的数组。 |'
- en: '| `piecewise`(x, condlist, funclist, *args, **kw) | Evaluate a piecewise-defined
    function. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `piecewise`(x, condlist, funclist, *args, **kw) | 计算分段定义的函数。 |'
- en: '| `place`(arr, mask, vals, *[, inplace]) | Change elements of an array based
    on conditional and input values. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `place`(arr, mask, vals, *[, inplace]) | 根据条件和输入值改变数组的元素。 |'
- en: '| `poly`(seq_of_zeros) | Find the coefficients of a polynomial with the given
    sequence of roots. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `poly`(seq_of_zeros) | 根据给定的根序列找到多项式的系数。 |'
- en: '| `polyadd`(a1, a2) | Find the sum of two polynomials. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `polyadd`(a1, a2) | 计算两个多项式的和。 |'
- en: '| `polyder`(p[, m]) | Return the derivative of the specified order of a polynomial.
    |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `polyder`(p[, m]) | 返回多项式指定阶数的导数。 |'
- en: '| `polydiv`(u, v, *[, trim_leading_zeros]) | Returns the quotient and remainder
    of polynomial division. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `polydiv`(u, v, *[, trim_leading_zeros]) | 返回多项式除法的商和余数。 |'
- en: '| `polyfit`(x, y, deg[, rcond, full, w, cov]) | Least squares polynomial fit.
    |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `polyfit`(x, y, deg[, rcond, full, w, cov]) | 最小二乘多项式拟合。 |'
- en: '| `polyint`(p[, m, k]) | Return an antiderivative (indefinite integral) of
    a polynomial. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `polyint`(p[, m, k]) | 返回多项式的不定积分（反导数）。 |'
- en: '| `polymul`(a1, a2, *[, trim_leading_zeros]) | Find the product of two polynomials.
    |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `polymul`(a1, a2, *[, trim_leading_zeros]) | 计算两个多项式的乘积。 |'
- en: '| `polysub`(a1, a2) | Difference (subtraction) of two polynomials. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `polysub`(a1, a2) | 两个多项式的差（减法）。 |'
- en: '| `polyval`(p, x, *[, unroll]) | Evaluate a polynomial at specific values.
    |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `polyval`(p, x, *[, unroll]) | 在特定值处计算多项式的值。 |'
- en: '| `positive`(x, /) | Numerical positive, element-wise. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `positive`(x, /) | 数值的正值，逐元素操作。 |'
- en: '| `pow`(x1, x2, /) | First array elements raised to powers from second array,
    element-wise. |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `pow`(x1, x2, /) | 将第一个数组元素按第二个数组元素的幂进行元素级操作。 |'
- en: '| `power`(x1, x2, /) | First array elements raised to powers from second array,
    element-wise. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `power`(x1, x2, /) | 将第一个数组元素按第二个数组元素的幂进行元素级操作。 |'
- en: '| `printoptions`(*args, **kwargs) | Context manager for setting print options.
    |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `printoptions`(*args, **kwargs) | 设置打印选项的上下文管理器。 |'
- en: '| `prod`(a[, axis, dtype, out, keepdims, ...]) | Return the product of array
    elements over a given axis. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `prod`(a[, axis, dtype, out, keepdims, ...]) | 返回给定轴上数组元素的乘积。 |'
- en: '| `promote_types`(a, b) | Returns the type to which a binary operation should
    cast its arguments. |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `promote_types`(a, b) | 返回二进制操作应将其参数转换为的类型。 |'
- en: '| `ptp`(a[, axis, out, keepdims]) | Range of values (maximum - minimum) along
    an axis. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `ptp`(a[, axis, out, keepdims]) | 沿某个轴的值范围（最大值 - 最小值）。 |'
- en: '| `put`(a, ind, v[, mode, inplace]) | Replaces specified elements of an array
    with given values. |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `put`(a, ind, v[, mode, inplace]) | 用给定值替换数组的指定元素。 |'
- en: '| `quantile`(a, q[, axis, out, overwrite_input, ...]) | Compute the q-th quantile
    of the data along the specified axis. |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `quantile`(a, q[, axis, out, overwrite_input, ...]) | 计算沿指定轴的数据的第 q 个分位数。
    |'
- en: '| `r_` | Concatenate slices, scalars and array-like objects along the first
    axis. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `r_` | 沿第一个轴连接切片、标量和类数组对象。 |'
- en: '| `rad2deg`(x, /) | Convert angles from radians to degrees. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `rad2deg`(x, /) | 将角度从弧度转换为度。 |'
- en: '| `radians`(x, /) | Convert angles from degrees to radians. |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `radians`(x, /) | 将角度从度转换为弧度。 |'
- en: '| `ravel`(a[, order]) | Flatten array into a 1-dimensional shape. |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `ravel`(a[, order]) | 将数组展平为一维形状。 |'
- en: '| `ravel_multi_index`(multi_index, dims[, mode, ...]) | Convert multi-dimensional
    indices into flat indices. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `ravel_multi_index`(multi_index, dims[, mode, ...]) | 将多维索引转换为平坦索引。 |'
- en: '| `real`(val, /) | Return the real part of the complex argument. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `real`(val, /) | 返回复数参数的实部。 |'
- en: '| `reciprocal`(x, /) | Return the reciprocal of the argument, element-wise.
    |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `reciprocal`(x, /) | 返回参数的倒数，逐元素操作。 |'
- en: '| `remainder`(x1, x2, /) | Returns the element-wise remainder of division.
    |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `remainder`(x1, x2, /) | 返回除法的元素级余数。 |'
- en: '| `repeat`(a, repeats[, axis, total_repeat_length]) | Repeat each element of
    an array after themselves |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `repeat`(a, repeats[, axis, total_repeat_length]) | 将数组中每个元素重复指定次数。 |'
- en: '| `reshape`(a[, shape, order, newshape]) | Return a reshaped copy of an array.
    |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `reshape`(a[, shape, order, newshape]) | 返回数组的重塑副本。 |'
- en: '| `resize`(a, new_shape) | Return a new array with the specified shape. |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `resize`(a, new_shape) | 返回具有指定形状的新数组。 |'
- en: '| `result_type`(*args) | Returns the type that results from applying the NumPy
    |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `result_type`(*args) | 返回应用于 NumPy 的结果类型。 |'
- en: '| `right_shift`(x1, x2, /) | Right shift the bits of `x1` to the amount specified
    in `x2`. |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| `right_shift`(x1, x2, /) | 将 `x1` 的位向右移动到指定的 `x2` 量。 |'
- en: '| `rint`(x, /) | Round elements of the array to the nearest integer. |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `rint`(x, /) | 将数组元素四舍五入到最接近的整数。 |'
- en: '| `roll`(a, shift[, axis]) | Roll array elements along a given axis. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `roll`(a, shift[, axis]) | 沿指定轴滚动数组元素。 |'
- en: '| `rollaxis`(a, axis[, start]) | Roll the specified axis to a given position.
    |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `rollaxis`(a, axis[, start]) | 将指定的轴滚动到给定位置。 |'
- en: '| `roots`(p, *[, strip_zeros]) | Return the roots of a polynomial with coefficients
    given in p. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `roots`(p, *[, strip_zeros]) | 返回具有给定系数的多项式的根。 |'
- en: '| `rot90`(m[, k, axes]) | Rotate an array by 90 degrees in the plane specified
    by axes. |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `rot90`(m[, k, axes]) | 在由轴指定的平面中将数组旋转90度。 |'
- en: '| `round`(a[, decimals, out]) | Round an array to the given number of decimals.
    |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| `round`(a[, decimals, out]) | 将数组四舍五入到指定的小数位数。 |'
- en: '| `round_`(a[, decimals, out]) | Round an array to the given number of decimals.
    |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| `round_`(a[, decimals, out]) | 将数组四舍五入到指定的小数位数。 |'
- en: '| `s_` | A nicer way to build up index tuples for arrays. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| `s_` | 用于构建数组索引元组的更好方式。 |'
- en: '| `save`(file, arr[, allow_pickle, fix_imports]) | Save an array to a binary
    file in NumPy `.npy` format. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `save`(file, arr[, allow_pickle, fix_imports]) | 将数组以 NumPy `.npy` 格式保存到二进制文件中。
    |'
- en: '| `savez`(file, *args, **kwds) | Save several arrays into a single file in
    uncompressed `.npz` format. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `savez`(file, *args, **kwds) | 以未压缩的 `.npz` 格式将多个数组保存到单个文件中。 |'
- en: '| `searchsorted`(a, v[, side, sorter, method]) | Perform a binary search within
    a sorted array. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `searchsorted`(a, v[, side, sorter, method]) | 在排序数组内执行二分搜索。 |'
- en: '| `select`(condlist, choicelist[, default]) | Return an array drawn from elements
    in choicelist, depending on conditions. |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| `select`(condlist, choicelist[, default]) | 根据条件从 choicelist 中选择元素返回数组。 |'
- en: '| `set_printoptions`([precision, threshold, ...]) | Set printing options. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| `set_printoptions`([precision, threshold, ...]) | 设置打印选项。 |'
- en: '| `setdiff1d`(ar1, ar2[, assume_unique, size, ...]) | Compute the set difference
    of two 1D arrays. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `setdiff1d`(ar1, ar2[, assume_unique, size, ...]) | 计算两个一维数组的差集。 |'
- en: '| `setxor1d`(ar1, ar2[, assume_unique]) | Compute the set-wise xor of elements
    in two arrays. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `setxor1d`(ar1, ar2[, assume_unique]) | 计算两个数组中元素的异或。 |'
- en: '| `shape`(a) | Return the shape of an array. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `shape`(a) | 返回数组的形状。 |'
- en: '| `sign`(x, /) | Returns an element-wise indication of the sign of a number.
    |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `sign`(x, /) | 返回数的元素级别符号指示。 |'
- en: '| `signbit`(x, /) | Returns element-wise True where signbit is set (less than
    zero). |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| `signbit`(x, /) | 返回元素级别的 True，其中设置了符号位（小于零）。 |'
- en: '| `signedinteger`() | Abstract base class of all signed integer scalar types.
    |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `signedinteger`() | 所有有符号整数标量类型的抽象基类。 |'
- en: '| `sin`(x, /) | Trigonometric sine, element-wise. |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| `sin`(x, /) | 按元素计算三角正弦。 |'
- en: '| `sinc`(x, /) | Return the normalized sinc function. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| `sinc`(x, /) | 返回归一化的 sinc 函数。 |'
- en: '| `single` | alias of `float32` |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| `single` | `float32` 的别名。 |'
- en: '| `sinh`(x, /) | Hyperbolic sine, element-wise. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| `sinh`(x, /) | 按元素计算双曲正弦。 |'
- en: '| `size`(a[, axis]) | Return the number of elements along a given axis. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| `size`(a[, axis]) | 返回给定轴上的元素数量。 |'
- en: '| `sort`(a[, axis, kind, order, stable, descending]) | Return a sorted copy
    of an array. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| `sort`(a[, axis, kind, order, stable, descending]) | 返回数组的排序副本。 |'
- en: '| `sort_complex`(a) | Sort a complex array using the real part first, then
    the imaginary part. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| `sort_complex`(a) | 使用实部先排序复杂数组，然后按虚部排序。 |'
- en: '| `split`(ary, indices_or_sections[, axis]) | Split an array into multiple
    sub-arrays as views into ary. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| `split`(ary, indices_or_sections[, axis]) | 将数组拆分为多个子数组，作为 ary 的视图。 |'
- en: '| `sqrt`(x, /) | Return the non-negative square-root of an array, element-wise.
    |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| `sqrt`(x, /) | 返回数组元素的非负平方根。 |'
- en: '| `square`(x, /) | Return the element-wise square of the input. |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| `square`(x, /) | 返回输入数组的按元素平方。 |'
- en: '| `squeeze`(a[, axis]) | Remove one or more length-1 axes from array |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `squeeze`(a[, axis]) | 从数组中移除一个或多个长度为1的轴。 |'
- en: '| `stack`(arrays[, axis, out, dtype]) | Join a sequence of arrays along a new
    axis. |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| `stack`(arrays[, axis, out, dtype]) | 沿新轴连接序列的数组。 |'
- en: '| `std`(a[, axis, dtype, out, ddof, keepdims, ...]) | Compute the standard
    deviation along the specified axis. |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| `std`(a[, axis, dtype, out, ddof, keepdims, ...]) | 沿指定轴计算标准差。 |'
- en: '| `subtract`(x1, x2, /) | Subtract arguments, element-wise. |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| `subtract`(x1, x2, /) | 逐元素地进行减法运算。 |'
- en: '| `sum`(a[, axis, dtype, out, keepdims, ...]) | Sum of array elements over
    a given axis. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| `sum`(a[, axis, dtype, out, keepdims, ...]) | 沿给定轴对数组元素求和。 |'
- en: '| `swapaxes`(a, axis1, axis2) | Swap two axes of an array. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| `swapaxes`(a, axis1, axis2) | 交换数组的两个轴。 |'
- en: '| `take`(a, indices[, axis, out, mode, ...]) | Take elements from an array.
    |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| `take`(a, indices[, axis, out, mode, ...]) | 从数组中取出元素。 |'
- en: '| `take_along_axis`(arr, indices, axis[, mode, ...]) | Take elements from an
    array. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| `take_along_axis`(arr, indices, axis[, mode, ...]) | 从数组中取出元素。 |'
- en: '| `tan`(x, /) | Compute tangent element-wise. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| `tan`(x, /) | 计算元素的正切。 |'
- en: '| `tanh`(x, /) | Compute hyperbolic tangent element-wise. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| `tanh`(x, /) | 计算元素的双曲正切。 |'
- en: '| `tensordot`(a, b[, axes, precision, ...]) | Compute the tensor dot product
    of two N-dimensional arrays. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot`(a, b[, axes, precision, ...]) | 计算两个N维数组的张量点积。 |'
- en: '| `tile`(A, reps) | Construct an array by repeating A the number of times given
    by reps. |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| `tile`(A, reps) | 通过重复A指定的次数构造一个数组。 |'
- en: '| `trace`(a[, offset, axis1, axis2, dtype, out]) | Return the sum along diagonals
    of the array. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| `trace`(a[, offset, axis1, axis2, dtype, out]) | 返回数组的对角线之和。 |'
- en: '| `trapezoid`(y[, x, dx, axis]) | Integrate along the given axis using the
    composite trapezoidal rule. |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| `trapezoid`(y[, x, dx, axis]) | 使用复合梯形规则沿指定轴积分。 |'
- en: '| `transpose`(a[, axes]) | Return a transposed version of an N-dimensional
    array. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| `transpose`(a[, axes]) | 返回N维数组的转置版本。 |'
- en: '| `tri`(N[, M, k, dtype]) | An array with ones at and below the given diagonal
    and zeros elsewhere. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `tri`(N[, M, k, dtype]) | 一个在给定对角线及其以下位置为1，其他位置为0的数组。 |'
- en: '| `tril`(m[, k]) | Lower triangle of an array. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| `tril`(m[, k]) | 数组的下三角形。 |'
- en: '| `tril_indices`(n[, k, m]) | Return the indices for the lower-triangle of
    an (n, m) array. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| `tril_indices`(n[, k, m]) | 返回（n, m）数组的下三角形的索引。 |'
- en: '| `tril_indices_from`(arr[, k]) | Return the indices for the lower-triangle
    of arr. |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| `tril_indices_from`(arr[, k]) | 返回数组arr的下三角形的索引。 |'
- en: '| `trim_zeros`(filt[, trim]) | Trim the leading and/or trailing zeros from
    a 1-D array or sequence. |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| `trim_zeros`(filt[, trim]) | 从一维数组或序列中修剪前导和/或尾随的零。 |'
- en: '| `triu`(m[, k]) | Upper triangle of an array. |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| `triu`(m[, k]) | 数组的上三角形。 |'
- en: '| `triu_indices`(n[, k, m]) | Return the indices for the upper-triangle of
    an (n, m) array. |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| `triu_indices`(n[, k, m]) | 返回（n, m）数组的上三角形的索引。 |'
- en: '| `triu_indices_from`(arr[, k]) | Return the indices for the upper-triangle
    of arr. |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| `triu_indices_from`(arr[, k]) | 返回数组arr的上三角形的索引。 |'
- en: '| `true_divide`(x1, x2, /) | Divide arguments element-wise. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| `true_divide`(x1, x2, /) | 逐元素地进行除法运算。 |'
- en: '| `trunc`(x) | Return the truncated value of the input, element-wise. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| `trunc`(x) | 返回输入元素的截断值。 |'
- en: '| `ufunc`(func, /, nin, nout, *[, name, nargs, ...]) | Functions that operate
    element-by-element on whole arrays. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `ufunc`(func, /, nin, nout, *[, name, nargs, ...]) | 在整个数组上逐元素操作的函数。 |'
- en: '| `uint` | alias of `uint64` |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `uint` | `uint64`的别名。 |'
- en: '| `uint16`(x) |  |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `uint16`(x) |  |'
- en: '| `uint32`(x) |  |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| `uint32`(x) |  |'
- en: '| `uint64`(x) |  |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| `uint64`(x) |  |'
- en: '| `uint8`(x) |  |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `uint8`(x) |  |'
- en: '| `union1d`(ar1, ar2, *[, size, fill_value]) | Compute the set union of two
    1D arrays. |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| `union1d`(ar1, ar2, *[, size, fill_value]) | 计算两个1D数组的并集。 |'
- en: '| `unique`(ar[, return_index, return_inverse, ...]) | Return the unique values
    from an array. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| `unique`(ar[, return_index, return_inverse, ...]) | 返回数组中的唯一值。 |'
- en: '| `unique_all`(x, /, *[, size, fill_value]) | Return unique values from x,
    along with indices, inverse indices, and counts. |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| `unique_all`(x, /, *[, size, fill_value]) | 返回x的唯一值以及索引、逆索引和计数。 |'
- en: '| `unique_counts`(x, /, *[, size, fill_value]) | Return unique values from
    x, along with counts. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| `unique_counts`(x, /, *[, size, fill_value]) | 返回x的唯一值及其计数。 |'
- en: '| `unique_inverse`(x, /, *[, size, fill_value]) | Return unique values from
    x, along with indices, inverse indices, and counts. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| `unique_inverse`(x, /, *[, size, fill_value]) | 返回x的唯一值以及索引、逆索引和计数。 |'
- en: '| `unique_values`(x, /, *[, size, fill_value]) | Return unique values from
    x, along with indices, inverse indices, and counts. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| `unique_values`(x, /, *[, size, fill_value]) | 返回x的唯一值以及索引、逆索引和计数。 |'
- en: '| `unpackbits`(a[, axis, count, bitorder]) | Unpacks elements of a uint8 array
    into a binary-valued output array. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| `unpackbits`(a[, axis, count, bitorder]) | 将uint8数组的元素解包为二进制值输出数组。 |'
- en: '| `unravel_index`(indices, shape) | Convert flat indices into multi-dimensional
    indices. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `unravel_index`(indices, shape) | 将扁平索引转换为多维索引。 |'
- en: '| `unstack`(x, /, *[, axis]) |  |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `unstack`(x, /, *[, axis]) |  |'
- en: '| `unsignedinteger`() | Abstract base class of all unsigned integer scalar
    types. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| `unsignedinteger`() | 所有无符号整数标量类型的抽象基类。 |'
- en: '| `unwrap`(p[, discont, axis, period]) | Unwrap by taking the complement of
    large deltas with respect to the period. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `unwrap`(p[, discont, axis, period]) | 通过取周期的补集来展开数组。 |'
- en: '| `vander`(x[, N, increasing]) | Generate a Vandermonde matrix. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| `vander`(x[, N, increasing]) | 生成范德蒙矩阵。 |'
- en: '| `var`(a[, axis, dtype, out, ddof, keepdims, ...]) | Compute the variance
    along the specified axis. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| `var`(a[, axis, dtype, out, ddof, keepdims, ...]) | 计算沿指定轴的方差。 |'
- en: '| `vdot`(a, b, *[, precision, ...]) | Perform a conjugate multiplication of
    two 1D vectors. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| `vdot`(a, b, *[, precision, ...]) | 执行两个1D向量的共轭乘法。 |'
- en: '| `vecdot`(x1, x2, /, *[, axis, precision, ...]) | Perform a conjugate multiplication
    of two batched vectors. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| `vecdot`(x1, x2, /, *[, axis, precision, ...]) | 执行两个批量向量的共轭乘法。 |'
- en: '| `vectorize`(pyfunc, *[, excluded, signature]) | Define a vectorized function
    with broadcasting. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| `vectorize`(pyfunc, *[, excluded, signature]) | 定义一个具有广播功能的向量化函数。 |'
- en: '| `vsplit`(ary, indices_or_sections) | Split an array into multiple sub-arrays
    vertically (row-wise). |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| `vsplit`(ary, indices_or_sections) | 按垂直（行）方向将数组分割成多个子数组。 |'
- en: '| `vstack`(tup[, dtype]) | Stack arrays in sequence vertically (row wise).
    |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| `vstack`(tup[, dtype]) | 沿垂直（行）方向堆叠数组序列。 |'
- en: '| `where`() | Select elements from two arrays based on a condition. |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| `where`() | 根据条件从两个数组中选择元素。 |'
- en: '| `zeros`(shape[, dtype, device]) | Return a new array of given shape and type,
    filled with zeros. |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| `zeros`(shape[, dtype, device]) | 返回一个给定形状和类型的全零数组。 |'
- en: '| `zeros_like`(a[, dtype, shape, device]) | Return an array of zeros with the
    same shape and type as a given array. |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| `zeros_like`(a[, dtype, shape, device]) | 返回与给定数组相同形状和类型的全零数组。 |'
- en: '## jax.numpy.fft'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '## jax.numpy.fft'
- en: '| `fft`(a[, n, axis, norm]) | Compute the one-dimensional discrete Fourier
    Transform. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| `fft`(a[, n, axis, norm]) | 计算一维离散傅里叶变换。 |'
- en: '| `fft2`(a[, s, axes, norm]) | Compute the 2-dimensional discrete Fourier Transform.
    |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| `fft2`(a[, s, axes, norm]) | 计算二维离散傅里叶变换。 |'
- en: '| `fftfreq`(n[, d, dtype]) | Return the Discrete Fourier Transform sample frequencies.
    |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| `fftfreq`(n[, d, dtype]) | 返回离散傅里叶变换的样本频率。 |'
- en: '| `fftn`(a[, s, axes, norm]) | Compute the N-dimensional discrete Fourier Transform.
    |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| `fftn`(a[, s, axes, norm]) | 计算N维离散傅里叶变换。 |'
- en: '| `fftshift`(x[, axes]) | Shift the zero-frequency component to the center
    of the spectrum. |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| `fftshift`(x[, axes]) | 将零频率分量移动到频谱中心。 |'
- en: '| `hfft`(a[, n, axis, norm]) | Compute the FFT of a signal that has Hermitian
    symmetry, i.e., a real |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| `hfft`(a[, n, axis, norm]) | 计算具有Hermitian对称性的信号的FFT。 |'
- en: '| `ifft`(a[, n, axis, norm]) | Compute the one-dimensional inverse discrete
    Fourier Transform. |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| `ifft`(a[, n, axis, norm]) | 计算一维离散傅里叶逆变换。 |'
- en: '| `ifft2`(a[, s, axes, norm]) | Compute the 2-dimensional inverse discrete
    Fourier Transform. |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| `ifft2`(a[, s, axes, norm]) | 计算二维离散傅里叶逆变换。 |'
- en: '| `ifftn`(a[, s, axes, norm]) | Compute the N-dimensional inverse discrete
    Fourier Transform. |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| `ifftn`(a[, s, axes, norm]) | 计算N维离散傅里叶逆变换。 |'
- en: '| `ifftshift`(x[, axes]) | The inverse of fftshift. |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| `ifftshift`(x[, axes]) | fftshift的逆操作。 |'
- en: '| `ihfft`(a[, n, axis, norm]) | Compute the inverse FFT of a signal that has
    Hermitian symmetry. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| `ihfft`(a[, n, axis, norm]) | 计算具有Hermitian对称性的信号的逆FFT。 |'
- en: '| `irfft`(a[, n, axis, norm]) | Computes the inverse of rfft. |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| `irfft`(a[, n, axis, norm]) | 计算rfft的逆变换。 |'
- en: '| `irfft2`(a[, s, axes, norm]) | Computes the inverse of rfft2. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| `irfft2`(a[, s, axes, norm]) | 计算rfft2的逆变换。 |'
- en: '| `irfftn`(a[, s, axes, norm]) | Computes the inverse of rfftn. |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| `irfftn`(a[, s, axes, norm]) | 计算rfftn的逆变换。 |'
- en: '| `rfft`(a[, n, axis, norm]) | Compute the one-dimensional discrete Fourier
    Transform for real input. |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| `rfft`(a[, n, axis, norm]) | 计算一维实数输入的离散傅里叶变换。 |'
- en: '| `rfft2`(a[, s, axes, norm]) | Compute the 2-dimensional FFT of a real array.
    |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| `rfft2`(a[, s, axes, norm]) | 计算实数组的二维FFT。 |'
- en: '| `rfftfreq`(n[, d, dtype]) | Return the Discrete Fourier Transform sample
    frequencies |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| `rfftfreq`(n[, d, dtype]) | 返回离散傅里叶变换的样本频率。 |'
- en: '| `rfftn`(a[, s, axes, norm]) | Compute the N-dimensional discrete Fourier
    Transform for real input. |  ## jax.numpy.linalg'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '| `rfftn`(a[, s, axes, norm]) | 计算实数输入的N维离散傅里叶变换。 |  ## jax.numpy.linalg'
- en: '| `cholesky`(a, *[, upper]) | Compute the Cholesky decomposition of a matrix.
    |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky`(a, *[, upper]) | 计算矩阵的Cholesky分解。 |'
- en: '| `cond`(x[, p]) | Compute the condition number of a matrix. |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| `cond`(x[, p]) | 计算矩阵的条件数。 |'
- en: '| `cross`(x1, x2, /, *[, axis]) | Compute the cross-product of two 3D vectors
    |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| `cross`(x1, x2, /, *[, axis]) | 计算两个3D向量的叉乘。 |'
- en: '| `det` | Compute the determinant of an array. |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| `det` | 计算数组的行列式。 |'
- en: '| `diagonal`(x, /, *[, offset]) | Extract the diagonal of an matrix or stack
    of matrices. |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal`(x, /, *[, offset]) | 提取矩阵或矩阵堆栈的对角线元素。'
- en: '| `eig`(a) | Compute the eigenvalues and eigenvectors of a square array. |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '| `eig`(a) | 计算方阵的特征值和特征向量。'
- en: '| `eigh`(a[, UPLO, symmetrize_input]) | Compute the eigenvalues and eigenvectors
    of a Hermitian matrix. |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| `eigh`(a[, UPLO, symmetrize_input]) | 计算Hermitian矩阵的特征值和特征向量。'
- en: '| `eigvals`(a) | Compute the eigenvalues of a general matrix. |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| `eigvals`(a) | 计算一般矩阵的特征值。'
- en: '| `eigvalsh`(a[, UPLO]) | Compute the eigenvalues of a Hermitian matrix. |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| `eigvalsh`(a[, UPLO]) | 计算Hermitian矩阵的特征值。'
- en: '| `inv`(a) | Return the inverse of a square matrix |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| `inv`(a) | 返回方阵的逆。'
- en: '| `lstsq`(a, b[, rcond, numpy_resid]) | Return the least-squares solution to
    a linear equation. |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| `lstsq`(a, b[, rcond, numpy_resid]) | 返回线性方程组的最小二乘解。'
- en: '| `matmul`(x1, x2, /, *[, precision, ...]) | Perform a matrix multiplication.
    |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| `matmul`(x1, x2, /, *[, precision, ...]) | 执行矩阵乘法。'
- en: '| `matrix_norm`(x, /, *[, keepdims, ord]) | Compute the norm of a matrix or
    stack of matrices. |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm`(x, /, *[, keepdims, ord]) | 计算矩阵或矩阵堆栈的范数。'
- en: '| `matrix_power`(a, n) | Raise a square matrix to an integer power. |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_power`(a, n) | 将方阵提升到整数幂。'
- en: '| `matrix_rank`(M[, rtol, tol]) | Compute the rank of a matrix. |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank`(M[, rtol, tol]) | 计算矩阵的秩。'
- en: '| `matrix_transpose`(x, /) | Transpose a matrix or stack of matrices. |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_transpose`(x, /) | 转置矩阵或矩阵堆栈。'
- en: '| `multi_dot`(arrays, *[, precision]) | Efficiently compute matrix products
    between a sequence of arrays. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| `multi_dot`(arrays, *[, precision]) | 高效计算数组序列之间的矩阵乘积。'
- en: '| `norm`(x[, ord, axis, keepdims]) | Compute the norm of a matrix or vector.
    |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| `norm`(x[, ord, axis, keepdims]) | 计算矩阵或向量的范数。'
- en: '| `outer`(x1, x2, /) | Compute the outer product of two 1-dimensional arrays.
    |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| `outer`(x1, x2, /) | 计算两个一维数组的外积。'
- en: '| `pinv`(a[, rtol, hermitian, rcond]) | Compute the (Moore-Penrose) pseudo-inverse
    of a matrix. |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| `pinv`(a[, rtol, hermitian, rcond]) | 计算（Moore-Penrose）伪逆。'
- en: '| `qr`() | Compute the QR decomposition of an array |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| `qr`() | 计算数组的QR分解。'
- en: '| `slogdet`(a, *[, method]) | Compute the sign and (natural) logarithm of the
    determinant of an array. |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| `slogdet`(a, *[, method]) | 计算数组行列式的符号和（自然）对数。'
- en: '| `solve`(a, b) | Solve a linear system of equations |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| `solve`(a, b) | 解线性方程组。'
- en: '| `svd`() | Compute the singular value decomposition. |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| `svd`() | 计算奇异值分解。'
- en: '| `svdvals`(x, /) | Compute the singular values of a matrix. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| `svdvals`(x, /) | 计算矩阵的奇异值。'
- en: '| `tensordot`(x1, x2, /, *[, axes, precision, ...]) | Compute the tensor dot
    product of two N-dimensional arrays. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot`(x1, x2, /, *[, axes, precision, ...]) | 计算两个N维数组的张量点积。'
- en: '| `tensorinv`(a[, ind]) | Compute the tensor inverse of an array. |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| `tensorinv`(a[, ind]) | 计算数组的张量逆。'
- en: '| `tensorsolve`(a, b[, axes]) | Solve the tensor equation a x = b for x. |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| `tensorsolve`(a, b[, axes]) | 解张量方程 a x = b 以得到 x。'
- en: '| `trace`(x, /, *[, offset, dtype]) | Compute the trace of a matrix. |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| `trace`(x, /, *[, offset, dtype]) | 计算矩阵的迹。'
- en: '| `vector_norm`(x, /, *[, axis, keepdims, ord]) | Compute the vector norm of
    a vector or batch of vectors. |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| `vector_norm`(x, /, *[, axis, keepdims, ord]) | 计算向量或向量批次的范数。'
- en: '| `vecdot`(x1, x2, /, *[, axis, precision, ...]) | Compute the (batched) vector
    conjugate dot product of two arrays. |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| `vecdot`(x1, x2, /, *[, axis, precision, ...]) | 计算（批量）向量共轭点积。'
- en: JAX Array
  id: totrans-446
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX Array
- en: 'The JAX `Array` (along with its alias, `jax.numpy.ndarray`) is the core array
    object in JAX: you can think of it as JAX’s equivalent of a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)"). Like [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)"), most users will not need to instantiate `Array` objects manually,
    but rather will create them via `jax.numpy` functions like `array()`, `arange()`,
    `linspace()`, and others listed above.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: JAX `Array`（以及其别名 `jax.numpy.ndarray`）是JAX中的核心数组对象：您可以将其视为JAX中与[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在NumPy v2.0)") 等效的对象。与 [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在NumPy v2.0)") 一样，大多数用户不需要手动实例化 `Array` 对象，而是通过 `jax.numpy` 函数如 `array()`、`arange()`、`linspace()`
    和上面列出的其他函数来创建它们。
- en: Copying and Serialization
  id: totrans-448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制和序列化
- en: JAX `Array` objects are designed to work seamlessly with Python standard library
    tools where appropriate.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: JAX `Array`对象设计为在适当的情况下与Python标准库工具无缝配合。
- en: With the built-in [`copy`](https://docs.python.org/3/library/copy.html#module-copy
    "(in Python v3.12)") module, when [`copy.copy()`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.12)") or [`copy.deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.12)") encounder an `Array`, it is equivalent to calling the `copy()`
    method, which will create a copy of the buffer on the same device as the original
    array. This will work correctly within traced/JIT-compiled code, though copy operations
    may be elided by the compiler in this context.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置[`copy`](https://docs.python.org/3/library/copy.html#module-copy "(在 Python
    v3.12)")模块时，当[`copy.copy()`](https://docs.python.org/3/library/copy.html#copy.copy
    "(在 Python v3.12)")或[`copy.deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(在 Python v3.12)")遇到`Array`时，等效于调用`copy()`方法，该方法将在与原始数组相同设备上创建缓冲区的副本。在追踪/JIT编译的代码中，这将正确工作，尽管在此上下文中，复制操作可能会被编译器省略。
- en: When the built-in [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle
    "(in Python v3.12)") module encounters an `Array`, it will be serialized via a
    compact bit representation in a similar manner to pickled [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)") objects. When unpickled, the result will be a new `Array` object
    *on the default device.* This is because in general, pickling and unpickling may
    take place in different runtime environments, and there is no general way to map
    the device IDs of one runtime to the device IDs of another. If [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle
    "(in Python v3.12)") is used in traced/JIT-compiled code, it will result in a
    `ConcretizationTypeError`.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 当内置[`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "(在
    Python v3.12)")模块遇到`Array`时，它将通过紧凑的位表示方式对其进行序列化，类似于对[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v2.0)")对象的处理。解封后，结果将是一个新的`Array`对象*在默认设备上*。这是因为通常情况下，pickling 和 unpickling
    可能发生在不同的运行环境中，并且没有通用的方法将一个运行时环境的设备 ID 映射到另一个的设备 ID。如果在追踪/JIT编译的代码中使用[`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle
    "(在 Python v3.12)")，将导致`ConcretizationTypeError`。
