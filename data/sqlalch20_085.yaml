- en: SQL Expression Language Foundational Constructs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL表达语言基础构造
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/foundation.html](https://docs.sqlalchemy.org/en/20/core/foundation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/foundation.html](https://docs.sqlalchemy.org/en/20/core/foundation.html)
- en: Base classes and mixins that are used to compose SQL Expression Language elements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用于组成SQL表达语言元素的基类和混合类。
- en: '| Object Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [CacheKey](#sqlalchemy.sql.expression.CacheKey) | The key used to identify
    a SQL statement construct in the SQL compilation cache. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [CacheKey](#sqlalchemy.sql.expression.CacheKey) | 用于在SQL编译缓存中标识SQL语句构造的键。
    |'
- en: '| [ClauseElement](#sqlalchemy.sql.expression.ClauseElement) | Base class for
    elements of a programmatically constructed SQL expression. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [ClauseElement](#sqlalchemy.sql.expression.ClauseElement) | 用于程序化构建SQL表达式的元素的基类。
    |'
- en: '| [DialectKWArgs](#sqlalchemy.sql.base.DialectKWArgs) | Establish the ability
    for a class to have dialect-specific arguments with defaults and constructor validation.
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [DialectKWArgs](#sqlalchemy.sql.base.DialectKWArgs) | 建立一个类具有特定方言参数的能力，带有默认值和构造函数验证。
    |'
- en: '| [HasCacheKey](#sqlalchemy.sql.traversals.HasCacheKey) | Mixin for objects
    which can produce a cache key. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [HasCacheKey](#sqlalchemy.sql.traversals.HasCacheKey) | 用于能够生成缓存键的对象的混合类。
    |'
- en: '| [LambdaElement](#sqlalchemy.sql.expression.LambdaElement) | A SQL construct
    where the state is stored as an un-invoked lambda. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [LambdaElement](#sqlalchemy.sql.expression.LambdaElement) | 一个SQL构造，其中状态存储为未调用的lambda。
    |'
- en: '| [StatementLambdaElement](#sqlalchemy.sql.expression.StatementLambdaElement)
    | Represent a composable SQL statement as a [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement"). |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [StatementLambdaElement](#sqlalchemy.sql.expression.StatementLambdaElement)
    | 代表一个可组合的SQL语句，作为[`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement "sqlalchemy.sql.expression.LambdaElement")。
    |'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The key used to identify a SQL statement construct in the SQL compilation cache.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在SQL编译缓存中标识SQL语句构造的键。
- en: See also
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL编译缓存](connections.html#sql-caching)'
- en: '**Members**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[bindparams](#sqlalchemy.sql.expression.CacheKey.bindparams), [key](#sqlalchemy.sql.expression.CacheKey.key),
    [to_offline_string()](#sqlalchemy.sql.expression.CacheKey.to_offline_string)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[bindparams](#sqlalchemy.sql.expression.CacheKey.bindparams), [key](#sqlalchemy.sql.expression.CacheKey.key),
    [to_offline_string()](#sqlalchemy.sql.expression.CacheKey.to_offline_string)'
- en: '**Class signature**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.CacheKey`](#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") (`builtins.tuple`)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.CacheKey`](#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") (`builtins.tuple`)
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Alias for field number 1
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 字段编号1的别名
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Alias for field number 0
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 字段编号0的别名
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Generate an “offline string” form of this [`CacheKey`](#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey")
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 生成这个[`CacheKey`](#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")的“离线字符串”形式
- en: The “offline string” is basically the string SQL for the statement plus a repr
    of the bound parameter values in series. Whereas the [`CacheKey`](#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") object is dependent on in-memory identities
    in order to work as a cache key, the “offline” version is suitable for a cache
    that will work for other processes as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “离线字符串”基本上是语句的字符串SQL加上一系列绑定参数值的repr。而[`CacheKey`](#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey")对象依赖于内存中的标识以便作为缓存键工作，“离线”版本适用于其他进程也能工作的缓存。
- en: The given `statement_cache` is a dictionary-like object where the string form
    of the statement itself will be cached. This dictionary should be in a longer
    lived scope in order to reduce the time spent stringifying statements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的`statement_cache`是一个类似字典的对象，其中语句本身的字符串形式将被缓存。为了减少字符串化语句所花费的时间，这个字典应该在一个更长寿命的范围内。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Base class for elements of a programmatically constructed SQL expression.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序化构建SQL表达式的元素的基类。
- en: '**Members**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[compare()](#sqlalchemy.sql.expression.ClauseElement.compare), [compile()](#sqlalchemy.sql.expression.ClauseElement.compile),
    [get_children()](#sqlalchemy.sql.expression.ClauseElement.get_children), [inherit_cache](#sqlalchemy.sql.expression.ClauseElement.inherit_cache),
    [params()](#sqlalchemy.sql.expression.ClauseElement.params), [self_group()](#sqlalchemy.sql.expression.ClauseElement.self_group),
    [unique_params()](#sqlalchemy.sql.expression.ClauseElement.unique_params)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[compare()](#sqlalchemy.sql.expression.ClauseElement.compare), [compile()](#sqlalchemy.sql.expression.ClauseElement.compile),
    [get_children()](#sqlalchemy.sql.expression.ClauseElement.get_children), [inherit_cache](#sqlalchemy.sql.expression.ClauseElement.inherit_cache),
    [params()](#sqlalchemy.sql.expression.ClauseElement.params), [self_group()](#sqlalchemy.sql.expression.ClauseElement.self_group),
    [unique_params()](#sqlalchemy.sql.expression.ClauseElement.unique_params)'
- en: '**Class signature**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (`sqlalchemy.sql.annotation.SupportsWrappingAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.sql.traversals.HasCopyInternals`,
    `sqlalchemy.sql.visitors.ExternallyTraversible`, `sqlalchemy.sql.expression.CompilerElement`)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")（`sqlalchemy.sql.annotation.SupportsWrappingAnnotations`、`sqlalchemy.sql.cache_key.MemoizedHasCacheKey`、`sqlalchemy.sql.traversals.HasCopyInternals`、`sqlalchemy.sql.visitors.ExternallyTraversible`、`sqlalchemy.sql.expression.CompilerElement`）
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Compare this [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    to the given [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")与给定的[`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该覆盖默认行为，即直接进行身份比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw是子类`compare()`方法消耗的参数，可用于修改比较的标准（参见[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `CompilerElement` *的* `CompilerElement.compile()` *方法继承*'
- en: Compile this SQL expression.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 编译此SQL表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象。对返回值调用`str()`或`unicode()`将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象还可以使用`params`访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，它可以提供一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。如果`bind`和`dialect`参数都被省略，将使用默认的SQL编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于INSERT和UPDATE语句，一个应该存在于编译后语句的VALUES子句中的列名列表。如果为`None`，则从目标表对象中渲染所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")实例，可以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。此参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 额外参数的可选字典，这些参数将通过所有“访问”方法传递给编译器。这允许通过到自定义编译结构的任何自定义标志进行传递。它还用于通过以下方式传递 `literal_binds`
    标志的情况：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[我如何将 SQL 表达式呈现为字符串，可能还包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `HasTraverseInternals.get_children()` *方法继承* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的直接子元素 `HasTraverseInternals`。
- en: This is used for visit traversal.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可包含更改返回集合的标志，例如返回子集以减少较大的遍历，或从不同上下文（例如模式级集合而不是子句级）返回子项的标志。'
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.cache_key.HasCacheKey")
    *的* `HasCacheKey.inherit_cache` *属性继承*'
- en: Indicate if this [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    instance should make use of the cache key generation scheme used by its immediate
    superclass.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 属性默认为 `None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对应于对象的 SQL 不根据此类的本地属性（而不是其超类）更改，则可以在特定类上将此标志设置为 `True`。
- en: See also
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素已被替换。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 ClauseElement 的副本，并用从给定字典中取出的值替换其中的 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    应用‘分组’。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 子类重写此方法以返回一个“分组”构造，即括号。特别是当“二进制”表达式被放置到更大的表达式中时，它们会提供一个围绕自身的分组，以及当 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造被放置到另一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。 （请注意，子查询通常应该使用 [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句必须被命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") 的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy
    的子句构造考虑了运算符优先级 - 因此在像 `x OR (y AND z)` 这样的表达式中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") method of [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基础 [`self_group()`](#sqlalchemy.sql.expression.ClauseElement.self_group "sqlalchemy.sql.expression.ClauseElement.self_group")
    方法只返回自身。'
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    元素替换的副本。
- en: Same functionality as [`ClauseElement.params()`](#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`ClauseElement.params()`](#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") 相同的功能，只是对影响到的绑定参数添加了 unique=True，以便可以使用多个语句。
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Establish the ability for a class to have dialect-specific arguments with defaults
    and constructor validation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 建立类具有方言特定参数的能力，并具有默认值和构造函数验证。
- en: The [`DialectKWArgs`](#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    interacts with the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") present on a dialect.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs`](#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    与方言上的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 交互。'
- en: '**Members**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[argument_for()](#sqlalchemy.sql.base.DialectKWArgs.argument_for), [dialect_kwargs](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs),
    [dialect_options](#sqlalchemy.sql.base.DialectKWArgs.dialect_options), [kwargs](#sqlalchemy.sql.base.DialectKWArgs.kwargs)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[argument_for()](#sqlalchemy.sql.base.DialectKWArgs.argument_for), [dialect_kwargs](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs),
    [dialect_options](#sqlalchemy.sql.base.DialectKWArgs.dialect_options), [kwargs](#sqlalchemy.sql.base.DialectKWArgs.kwargs)'
- en: See also
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个类添加一种新的方言特定的关键字参数。
- en: 'E.g.:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The [`DialectKWArgs.argument_for()`](#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法是一种逐个参数地向[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")字典添加额外参数的方式。该字典提供了各种模式级构造的方言接受的参数名称列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应一次性指定该字典作为方言类的数据成员。通常情况下，用于临时添加参数名称的用例是为了终端用户代码，该代码还使用了消耗额外参数的自定义编译方案。
- en: 'Parameters:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发[`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包含一个现有的[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")集合，指示其参与关键字参数验证和默认系统，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。如果方言不包含此集合，则已经可以为该方言指定任何关键字参数。SQLAlchemy内置的所有方言都包含此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定方言选项指定的关键字参数集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的`<dialect>_<kwarg>`格式呈现。只包括实际传递的参数；不同于[`DialectKWArgs.dialect_options`](#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合，后者包含了该方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受形式为`<dialect>_<kwarg>`的键，其值将被组装到选项列表中。
- en: See also
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定方言选项指定的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，以`<dialect_name>`和`<argument_name>`为键。例如，`postgresql_where`参数可以定位为：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: New in version 0.9.2.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 0.9.2版本中新增。
- en: See also
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 扁平字典形式'
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的别名。'
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Mixin for objects which can produce a cache key.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 用于可以生成缓存键的对象的混合类。
- en: This class is usually in a hierarchy that starts with the `HasTraverseInternals`
    base, but this is optional. Currently, the class should be able to work on its
    own without including `HasTraverseInternals`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此类通常位于以 `HasTraverseInternals` 为基础的层次结构中，但这是可选的。目前，该类应该能够在不包括 `HasTraverseInternals`
    的情况下独立工作。
- en: '**Members**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache)'
- en: See also
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`CacheKey`](#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CacheKey`](#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")'
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL 编译缓存](connections.html#sql-caching)'
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Indicate if this [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    instance should make use of the cache key generation scheme used by its immediate
    superclass.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 表明此 [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应该使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为 `False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象对应的 SQL 不基于仅限于此类而非其超类的属性发生变化，则可以在特定类上将此标志设置为 `True`。
- en: See also
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的通用指南。'
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: A SQL construct where the state is stored as an un-invoked lambda.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 SQL 构造，其中状态被存储为未调用的 lambda。
- en: 'The [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement "sqlalchemy.sql.expression.LambdaElement")
    is produced transparently whenever passing lambda expressions into SQL constructs,
    such as:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement "sqlalchemy.sql.expression.LambdaElement")
    在将 lambda 表达式传递给 SQL 构造时会透明地生成，例如：'
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement "sqlalchemy.sql.expression.LambdaElement")
    is the base of the [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") which represents a full statement
    within a lambda.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement "sqlalchemy.sql.expression.LambdaElement")
    是 [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 的基础，它代表了 lambda 中的完整语句。'
- en: New in version 1.4.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: See also
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Lambdas to add significant speed gains to statement production](connections.html#engine-lambda-caching)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Lambdas 为语句生成带来显著的速度提升](connections.html#engine-lambda-caching)'
- en: '**Class signature**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") ([`sqlalchemy.sql.expression.ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") ([`sqlalchemy.sql.expression.ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Represent a composable SQL statement as a [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement").
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将可组合的 SQL 语句表示为 [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement "sqlalchemy.sql.expression.LambdaElement")。
- en: 'The [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") is constructed using the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt "sqlalchemy.sql.expression.lambda_stmt")
    函数构建 [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement")：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once constructed, additional criteria can be built onto the statement by adding
    subsequent lambdas, which accept the existing statement object as a single parameter:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，可以通过添加后续 lambda 将额外条件添加到语句中，这些 lambda 将现有语句对象作为单个参数接受：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: New in version 1.4.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Lambdas to add significant speed gains to statement production](connections.html#engine-lambda-caching)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Lambda 添加显著的语句生成速度提升](connections.html#engine-lambda-caching)'
- en: '**Members**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_criteria()](#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria),
    [is_delete](#sqlalchemy.sql.expression.StatementLambdaElement.is_delete), [is_dml](#sqlalchemy.sql.expression.StatementLambdaElement.is_dml),
    [is_insert](#sqlalchemy.sql.expression.StatementLambdaElement.is_insert), [is_select](#sqlalchemy.sql.expression.StatementLambdaElement.is_select),
    [is_text](#sqlalchemy.sql.expression.StatementLambdaElement.is_text), [is_update](#sqlalchemy.sql.expression.StatementLambdaElement.is_update),
    [spoil()](#sqlalchemy.sql.expression.StatementLambdaElement.spoil)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_criteria()](#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria),
    [is_delete](#sqlalchemy.sql.expression.StatementLambdaElement.is_delete), [is_dml](#sqlalchemy.sql.expression.StatementLambdaElement.is_dml),
    [is_insert](#sqlalchemy.sql.expression.StatementLambdaElement.is_insert), [is_select](#sqlalchemy.sql.expression.StatementLambdaElement.is_select),
    [is_text](#sqlalchemy.sql.expression.StatementLambdaElement.is_text), [is_update](#sqlalchemy.sql.expression.StatementLambdaElement.is_update),
    [spoil()](#sqlalchemy.sql.expression.StatementLambdaElement.spoil)'
- en: '**Class signature**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") (`sqlalchemy.sql.roles.AllowsLambdaRole`,
    [`sqlalchemy.sql.lambdas.LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.lambdas.LambdaElement"), [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"))
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") (`sqlalchemy.sql.roles.AllowsLambdaRole`,
    [`sqlalchemy.sql.expression.LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement"), [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"))
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Add new criteria to this [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement").
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 向此 [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 添加新条件。
- en: 'E.g.:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The [`StatementLambdaElement.add_criteria()`](#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") method is equivalent
    to using the Python addition operator to add a new lambda, except that additional
    arguments may be added including `track_closure_values` and `track_on`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[`StatementLambdaElement.add_criteria()`](#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") 方法等同于使用 Python
    加法运算符添加新的 lambda，不过可以添加额外的参数，包括 `track_closure_values` 和 `track_on`：'
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: See [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") for a description of the parameters accepted.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有关可接受参数的说明，请参阅 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt")。
- en: '[PRE31]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Return a new [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") that will run all lambdas
    unconditionally each time.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement")，每次运行所有 lambda 时都会无条件地运行。
