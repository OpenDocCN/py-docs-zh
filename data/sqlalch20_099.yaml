- en: Working with Engines and Connections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用引擎和连接
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/connections.html](https://docs.sqlalchemy.org/en/20/core/connections.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/connections.html](https://docs.sqlalchemy.org/en/20/core/connections.html)
- en: This section details direct usage of the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    and related objects. Its important to note that when using the SQLAlchemy ORM,
    these objects are not generally accessed; instead, the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object is used as the interface to the database. However,
    for applications that are built around direct usage of textual SQL statements
    and/or SQL expression constructs without involvement by the ORM’s higher level
    management services, the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    are king (and queen?) - read on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")、[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 和相关对象的直接用法。值得注意的是，在使用 SQLAlchemy ORM 时，通常不直接访问这些对象；相反，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象用作与数据库的接口。但是，对于以直接使用文本 SQL 语句和/或 SQL 表达式构造为中心，而不涉及
    ORM 的高级管理服务的应用程序，[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    是王者（和女王？）- 继续阅读。
- en: Basic Usage
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本用法
- en: 'Recall from [Engine Configuration](engines.html) that an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is created via the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从[引擎配置](engines.html)中回想起，[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    是通过 [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    调用创建的：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The typical usage of [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") is once per particular database URL, held globally
    for the lifetime of a single application process. A single [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") manages many individual [DBAPI](../glossary.html#term-DBAPI)
    connections on behalf of the process and is intended to be called upon in a concurrent
    fashion. The [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is **not** synonymous to the DBAPI `connect()` function, which represents just
    one connection resource - the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is most efficient when created just once at the module level of an application,
    not per-object or per-function call.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的典型用法是针对每个特定的数据库 URL，在单个应用程序进程的生命周期中全局持有一次。一个 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 管理了许多个体的 [DBAPI](../glossary.html#term-DBAPI) 连接代表该进程，并且旨在以并发方式调用。[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 与 DBAPI 的 `connect()` 函数**不**是同义词，后者只代表一个连接资源 - 当应用程序的模块级别仅创建一次时，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 在效率上最高，而不是每个对象或每个函数调用一次。'
- en: 'The most basic function of the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is to provide access to a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    which can then invoke SQL statements. To emit a textual statement to the database
    looks like:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 最基本的功能是提供对
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 的访问，然后可以调用
    SQL 语句。向数据库发送文本语句的示例：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Above, the [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    method returns a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, and by using it in a Python context manager (e.g. the `with:` statement)
    the [`Connection.close()`](#sqlalchemy.engine.Connection.close "sqlalchemy.engine.Connection.close")
    method is automatically invoked at the end of the block. The [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), is a **proxy** object for an actual DBAPI connection.
    The DBAPI connection is retrieved from the connection pool at the point at which
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") is
    created.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，[`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    方法返回一个[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，通过在 Python 上下文管理器中使用它（例如 `with:` 语句），[`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") 方法会在块结束时自动调用。[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 是一个**代理**对象，用于实际的 DBAPI 连接。DBAPI 连接是在创建[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 时从连接池中检索的。
- en: The object returned is known as [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"), which references a DBAPI cursor and provides
    methods for fetching rows similar to that of the DBAPI cursor. The DBAPI cursor
    will be closed by the [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    when all of its result rows (if any) are exhausted. A [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") that returns no rows, such as that of an UPDATE
    statement (without any returned rows), releases cursor resources immediately upon
    construction.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象称为[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")，它引用一个
    DBAPI 游标并提供类似于 DBAPI 游标的获取行的方法。当所有结果行（如果有）耗尽时，[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") 将关闭 DBAPI 游标。一个不返回行的[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")，例如没有返回行的 UPDATE 语句，会在构造时立即释放游标资源。
- en: When the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is closed at the end of the `with:` block, the referenced DBAPI connection is
    [released](../glossary.html#term-released) to the connection pool. From the perspective
    of the database itself, the connection pool will not actually “close” the connection
    assuming the pool has room to store this connection for the next use. When the
    connection is returned to the pool for re-use, the pooling mechanism issues a
    `rollback()` call on the DBAPI connection so that any transactional state or locks
    are removed (this is known as [Reset On Return](pooling.html#pool-reset-on-return)),
    and the connection is ready for its next use.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    在`with:`块结束时关闭时，引用的 DBAPI 连接将被释放到连接池中。从数据库本身的角度来看，连接池实际上不会“关闭”连接，假设池有空间来存储此连接以供下次使用。当连接返回到池中以供重新使用时，池机制会对
    DBAPI 连接发出`rollback()`调用，以便删除任何事务状态或锁定（这被称为[Reset On Return](pooling.html#pool-reset-on-return)），并且连接已准备好供下次使用。
- en: Our example above illustrated the execution of a textual SQL string, which should
    be invoked by using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct to indicate that we’d like to use
    textual SQL. The [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method can of course accommodate more
    than that; see [Working with Data](../tutorial/data.html#tutorial-working-with-data)
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    for a tutorial.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面的示例演示了执行文本 SQL 字符串，应该使用[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造来指示我们想要使用文本 SQL。[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法当然可以容纳更多内容；请参阅[Working with Data](../tutorial/data.html#tutorial-working-with-data)中的[SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)进行教程。
- en: Using Transactions
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用事务
- en: Note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This section describes how to use transactions when working directly with [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects. When using the SQLAlchemy ORM, the public API for transaction control
    is via the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object, which makes usage of the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object internally. See [Managing Transactions](../orm/session_transaction.html#unitofwork-transaction)
    for further information.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了在直接使用 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象时如何使用事务。当使用 SQLAlchemy ORM 时，事务控制的公共 API 是通过 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象实现的，该对象在内部使用 [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") 对象。有关更多信息，请参阅[管理事务](../orm/session_transaction.html#unitofwork-transaction)。
- en: Commit As You Go
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边做边提交
- en: The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object always emits SQL statements within the context of a transaction block.
    The first time the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method is called to execute a SQL statement,
    this transaction is begun automatically, using a behavior known as **autobegin**.
    The transaction remains in place for the scope of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object until the [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods are called. Subsequent to the
    transaction ending, the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    waits for the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    method to be called again, at which point it autobegins again.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象始终在事务块的上下文中发出 SQL 语句。第一次调用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法执行 SQL 语句时，将自动开始此事务，使用的行为称为**自动开始**。事务保持在
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 对象的范围内，直到调用
    [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    或 [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")
    方法。在事务结束后，[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    等待再次调用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    方法，此时它会再次自动开始。'
- en: 'This calling style is known as **commit as you go**, and is illustrated in
    the example below:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种调用风格被称为**边做边提交**，在下面的示例中进行了说明：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In “commit as you go” style, we can call upon [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods freely within an ongoing sequence
    of other statements emitted using [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"); each time the transaction is ended, and
    a new statement is emitted, a new transaction begins implicitly:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在“边做边提交”风格中，我们可以在使用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 发出的其他语句序列中自由调用 [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 和 [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") 方法；每次事务结束并发出新语句时，都会隐式开始新事务：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'New in version 2.0: “commit as you go” style is a new feature of SQLAlchemy
    2.0\. It is also available in SQLAlchemy 1.4’s “transitional” mode when using
    a “future” style engine.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本新增：“边做边提交”风格是 SQLAlchemy 2.0 的新功能。在使用“未来”风格引擎时，它也可在 SQLAlchemy 1.4 的“过渡”模式中使用。
- en: Begin Once
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一次开始
- en: 'The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object provides a more explicit transaction management style known as **begin
    once**. In contrast to “commit as you go”, “begin once” allows the start point
    of the transaction to be stated explicitly, and allows that the transaction itself
    may be framed out as a context manager block so that the end of the transaction
    is instead implicit. To use “begin once”, the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is used, which returns a [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object which represents the DBAPI transaction.
    This object also supports explicit management via its own [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") and [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") methods, but as a preferred practice
    also supports the context manager interface, where it will commit itself when
    the block ends normally and emit a rollback if an exception is raised, before
    propagating the exception outwards. Below illustrates the form of a “begin once”
    block:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象提供了一种更明确的事务管理风格，称为**一次性开始**。与“按照进度提交”相比，“一次性开始”允许显式声明事务的起始点，并允许事务本身可以被框定为上下文管理器块，以便事务的结束变得隐式。要使用“一次性开始”，使用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法，该方法返回一个表示DBAPI事务的[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")对象。此对象还通过其自身的[`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit")和[`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback")方法支持显式管理，但作为首选实践，还支持上下文管理器接口，其中当块正常结束时，它将自行提交并在引发异常时发出回滚，然后将异常传播到外部。以下说明了“一次性开始”块的形式：'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Connect and Begin Once from the Engine
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接并从引擎一次性开始
- en: 'A convenient shorthand form for the above “begin once” block is to use the
    [`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    method at the level of the originating [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object, rather than performing the two separate steps of [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") and [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin"); the [`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") method returns a special context manager that
    internally maintains both the context manager for the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as well as the context manager for the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") normally returned by the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述“一次性开始”块的方便缩写形式是在原始[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象的级别使用[`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")方法，而不是执行两个分开的步骤[`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect")和[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")；[`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")方法返回一个特殊的上下文管理器，该管理器内部同时维护[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的上下文管理器以及通常由[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法返回的[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")的上下文管理器：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'Within the [`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    block, we can call upon the [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, which will end the transaction
    normally demarcated by the block ahead of time. However, if we do so, no further
    SQL operations may be emitted on the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") until the block ends:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")块中，我们可以调用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")或[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法，它们将提前结束由该块标记的事务。但是，如果我们这样做，直到该块结束之前，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上将不会发出进一步的SQL操作：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Mixing Styles
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合风格
- en: 'The “commit as you go” and “begin once” styles can be freely mixed within a
    single [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    block, provided that the call to [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") does not conflict with the “autobegin” behavior.
    To accomplish this, [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") should only be called either before any
    SQL statements have been emitted, or directly after a previous call to [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback"):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个[`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")块中可以自由混合“随时提交”和“一次性开始”的风格，只要调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")不会与“自动开始”行为冲突。为了实现这一点，[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")应该在发出任何SQL语句之前或直接在前一次调用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")或[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")之后调用：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When developing code that uses “begin once”, the library will raise [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if a transaction was already “autobegun”.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发使用“一次性开始”（begin once）的代码时，如果事务已经“自动开始”，库将引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '## Setting Transaction Isolation Levels including DBAPI Autocommit'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '## 设置事务隔离级别，包括DBAPI自动提交'
- en: Most DBAPIs support the concept of configurable transaction [isolation](../glossary.html#term-isolation)
    levels. These are traditionally the four levels “READ UNCOMMITTED”, “READ COMMITTED”,
    “REPEATABLE READ” and “SERIALIZABLE”. These are usually applied to a DBAPI connection
    before it begins a new transaction, noting that most DBAPIs will begin this transaction
    implicitly when SQL statements are first emitted.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数DBAPI都支持可配置的事务[隔离](../glossary.html#term-isolation)级别的概念。传统上，这些级别有“READ UNCOMMITTED”、“READ
    COMMITTED”、“REPEATABLE READ”和“SERIALIZABLE”四个级别。这些通常在DBAPI连接开始新事务之前应用，注意大多数DBAPI在首次发出SQL语句时会隐式开始这个事务。
- en: DBAPIs that support isolation levels also usually support the concept of true
    “autocommit”, which means that the DBAPI connection itself will be placed into
    a non-transactional autocommit mode. This usually means that the typical DBAPI
    behavior of emitting “BEGIN” to the database automatically no longer occurs, but
    it may also include other directives. SQLAlchemy treats the concept of “autocommit”
    like any other isolation level; in that it is an isolation level that loses not
    only “read committed” but also loses atomicity.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 支持隔离级别的DBAPI通常也支持真正的“自动提交”概念，这意味着DBAPI连接本身将被放置在非事务性的自动提交模式中。这通常意味着数据库自动不再发出“BEGIN”，但也可能包括其他指令。SQLAlchemy将“自动提交”的概念视为任何其他隔离级别；因为它是一个不仅丢失“读取提交”而且丢失原子性的隔离级别。
- en: Tip
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: It is important to note, as will be discussed further in the section below at
    [Understanding the DBAPI-Level Autocommit Isolation Level](#dbapi-autocommit-understanding),
    that “autocommit” isolation level like any other isolation level does **not**
    affect the “transactional” behavior of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, which continues to call upon DBAPI `.commit()`
    and `.rollback()` methods (they just have no effect under autocommit), and for
    which the `.begin()` method assumes the DBAPI will start a transaction implicitly
    (which means that SQLAlchemy’s “begin” **does not change autocommit mode**).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，正如将在下面的部分进一步讨论的那样，在[理解DBAPI级别的自动提交隔离级别](#dbapi-autocommit-understanding)中，“自动提交”隔离级别不像任何其他隔离级别一样，**不会**影响[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的“事务”行为，该对象继续调用DBAPI的`.commit()`和`.rollback()`方法（它们在自动提交下没有任何效果），并且`.begin()`方法假定DBAPI将隐式启动一个事务（这意味着SQLAlchemy的“begin”**不会更改自动提交模式**）。
- en: SQLAlchemy dialects should support these isolation levels as well as autocommit
    to as great a degree as possible.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy方言应尽可能支持这些隔离级别以及自动提交。
- en: Setting Isolation Level or DBAPI Autocommit for a Connection
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置连接的隔离级别或DBAPI自动提交
- en: 'For an individual [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object that’s acquired from [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect"), the isolation level can be set for the duration
    of that [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object using the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. The parameter is known
    as [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and the values are strings which
    are typically a subset of the following names:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从 [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    获取的单个 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，可以使用 [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法设置该 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象的隔离级别。该参数被称为 [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")，其值是字符串，通常是以下名称的子集：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Not every DBAPI supports every value; if an unsupported value is used for a
    certain backend, an error is raised.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 并非每个 DBAPI 都支持每个值；如果在某个后端使用不支持的值，则会引发错误。
- en: 'For example, to force REPEATABLE READ on a specific connection, then begin
    a transaction:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在特定连接上强制执行 REPEATABLE READ，然后开始事务：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The return value of the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is the same [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object upon which the method was called, meaning,
    it modifies the state of the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object in place. This is a new behavior as of SQLAlchemy 2.0. This behavior does
    not apply to the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method; that method still returns
    a copy of the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and as described below may be used to construct multiple [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects with different execution options, which nonetheless
    share the same dialect and connection pool.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法的返回值是调用该方法的相同 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象，这意味着它直接修改了 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象的状态。这是 SQLAlchemy 2.0 的新行为。这种行为不适用于 [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 方法；该方法仍然返回一个 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的副本，并且如下所述，可以用来构造具有不同执行选项的多个 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象，但仍共享相同的方言和连接池。'
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: The [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter necessarily does not
    apply to statement level options, such as that of [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"), and will be rejected
    if set at this level. This because the option must be set on a DBAPI connection
    on a per-transaction basis.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数在语句级别选项上不适用，例如 [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")，如果在此级别设置将被拒绝。这是因为该选项必须在每个事务的
    DBAPI 连接上设置。'
- en: Setting Isolation Level or DBAPI Autocommit for an Engine
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置引擎的隔离级别或 DBAPI 自动提交
- en: 'The [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") option may also be set engine
    wide, as is often preferable. This may be achieved by passing the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter to `create_engine()`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 选项也可以在引擎范围内设置，通常更可取。这可以通过将 [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数传递给 `create_engine()` 来实现：'
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With the above setting, each new DBAPI connection the moment it’s created will
    be set to use a `"REPEATABLE READ"` isolation level setting for all subsequent
    operations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述设置下，每个新的DBAPI连接在创建时将被设置为使用`"REPEATABLE READ"`隔离级别设置来进行所有后续操作。
- en: '### Maintaining Multiple Isolation Levels for a Single Engine'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '### 为单个引擎维护多个隔离级别'
- en: 'The isolation level may also be set per engine, with a potentially greater
    level of flexibility, using either the [`create_engine.execution_options`](engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") parameter to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") or the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method, the latter of which will
    create a copy of the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    that shares the dialect and connection pool of the original engine, but has its
    own per-connection isolation level setting:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离级别也可以针对每个引擎进行设置，使用[`create_engine.execution_options`](engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine")参数或[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法，后者将创建一个共享方言和连接池但具有自己的每个连接隔离级别设置的[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的副本：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With the above setting, the DBAPI connection will be set to use a `"REPEATABLE
    READ"` isolation level setting for each new transaction begun; but the connection
    as pooled will be reset to the original isolation level that was present when
    the connection first occurred. At the level of [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), the end effect is not any different from using the
    [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述设置下，每个新启动的事务都将DBAPI连接设置为使用`"REPEATABLE READ"`隔离级别；但连接池中的连接将被重置为连接首次出现时存在的原始隔离级别。在[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的级别上，最终效果与使用[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数没有任何区别。
- en: 'However, an application that frequently chooses to run operations within different
    isolation levels may wish to create multiple “sub-engines” of a lead [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), each of which will be configured to a different isolation
    level. One such use case is an application that has operations that break into
    “transactional” and “read-only” operations, a separate [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") that makes use of `"AUTOCOMMIT"` may be separated
    off from the main engine:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，经常选择在不同隔离级别中运行操作的应用程序可能希望为一个主[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")创建多个“子引擎”，每个引擎都配置为不同的隔离级别。其中一种用例是具有“事务性”和“只读”操作的应用程序，可以将一个单独的[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")从主引擎中分离出来，并使用`"AUTOCOMMIT"`：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Above, the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method creates a shallow copy of
    the original [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    Both `eng` and `autocommit_engine` share the same dialect and connection pool.
    However, the “AUTOCOMMIT” mode will be set upon connections when they are acquired
    from the `autocommit_engine`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述，[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法创建了原始[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的浅复制。`eng`和`autocommit_engine`共享相同的方言和连接池。然而，当从`autocommit_engine`获取连接时，将设置“AUTOCOMMIT”模式。
- en: The isolation level setting, regardless of which one it is, is unconditionally
    reverted when a connection is returned to the connection pool.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 无论隔离级别设置为何种级别，当连接返回到连接池时，隔离级别都会无条件地恢复。
- en: See also
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLite Transaction Isolation](../dialects/sqlite.html#sqlite-isolation-level)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLite 事务隔离](../dialects/sqlite.html#sqlite-isolation-level)'
- en: '[PostgreSQL Transaction Isolation](../dialects/postgresql.html#postgresql-isolation-level)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 事务隔离](../dialects/postgresql.html#postgresql-isolation-level)'
- en: '[MySQL Transaction Isolation](../dialects/mysql.html#mysql-isolation-level)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[MySQL 事务隔离](../dialects/mysql.html#mysql-isolation-level)'
- en: '[SQL Server Transaction Isolation](../dialects/mssql.html#mssql-isolation-level)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL Server 事务隔离](../dialects/mssql.html#mssql-isolation-level)'
- en: '[Oracle Transaction Isolation](../dialects/oracle.html#oracle-isolation-level)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[Oracle 事务隔离级别](../dialects/oracle.html#oracle-isolation-level)'
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - for the ORM'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI 自动提交](../orm/session_transaction.html#session-transaction-isolation)
    - 用于 ORM'
- en: '[Using DBAPI Autocommit Allows for a Readonly Version of Transparent Reconnect](../faq/connections.html#faq-execute-retry-autocommit)
    - a recipe that uses DBAPI autocommit to transparently reconnect to the database
    for read-only operations  ### Understanding the DBAPI-Level Autocommit Isolation
    Level'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 DBAPI 自动提交允许进行只读版本的透明重新连接](../faq/connections.html#faq-execute-retry-autocommit)
    - 一个使用 DBAPI 自动提交来透明重新连接到数据库以进行只读操作的示例 ### 理解 DBAPI 级别的自动提交隔离级别'
- en: In the parent section, we introduced the concept of the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter and how it can be
    used to set database isolation levels, including DBAPI-level “autocommit” which
    is treated by SQLAlchemy as another transaction isolation level. In this section
    we will attempt to clarify the implications of this approach.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了 [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数的概念以及它如何用于设置数据库隔离级别，包括 SQLAlchemy
    处理为另一个事务隔离级别的 DBAPI 级别的“自动提交”。在本节中，我们将尝试澄清这种方法的影响。
- en: 'If we wanted to check out a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object and use it “autocommit” mode, we would proceed as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要检出一个 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象并使用它的“自动提交”模式，我们将按以下步骤进行：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Above illustrates normal usage of “DBAPI autocommit” mode. There is no need
    to make use of methods such as [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") or [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit"), as all statements are committed to the
    database immediately. When the block ends, the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will revert the “autocommit” isolation
    level, and the DBAPI connection is released to the connection pool where the DBAPI
    `connection.rollback()` method will normally be invoked, but as the above statements
    were already committed, this rollback has no change on the state of the database.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上面演示了“DBAPI 自动提交”模式的正常用法。不需要使用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 或 [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 等方法，因为所有语句都会立即提交到数据库。当块结束时，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象将恢复“自动提交”隔离级别，并且 DBAPI 连接将释放到连接池，在连接池中通常会调用
    DBAPI `connection.rollback()` 方法，但由于上述语句已经提交，此回滚对数据库状态没有影响。
- en: It is important to note that “autocommit” mode persists even when the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called; the DBAPI will not emit
    any BEGIN to the database, nor will it emit COMMIT when [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") is called. This usage is also not an error
    scenario, as it is expected that the “autocommit” isolation level may be applied
    to code that otherwise was written assuming a transactional context; the “isolation
    level” is, after all, a configurational detail of the transaction itself just
    like any other isolation level.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，“自动提交”模式即使在调用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 方法时仍然持续存在；DBAPI 不会向数据库发送任何 BEGIN 命令，也不会在调用
    [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    时提交。这种用法也不是错误情况，因为可以预期“自动提交”隔离级别可能应用于原本假定事务上下文的代码；毕竟，“隔离级别”就像事务本身的配置细节一样。
- en: 'In the example below, statements remain **autocommitting** regardless of SQLAlchemy-level
    transaction blocks:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，无论是否有 SQLAlchemy 级别的事务块，语句都会保持**自动提交**状态：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we run a block like the above with logging turned on, the logging will
    attempt to indicate that while a DBAPI level `.commit()` is called, it probably
    will have no effect due to autocommit mode:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开日志记录并运行像上面这样的块时，日志记录将尝试指示，尽管调用了 DBAPI 级别的 `.commit()`，但由于自动提交模式，它可能不会起作用：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'At the same time, even though we are using “DBAPI autocommit”, SQLAlchemy’s
    transactional semantics, that is, the in-Python behavior of [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") as well as the behavior of “autobegin”,
    **remain in place, even though these don’t impact the DBAPI connection itself**.
    To illustrate, the code below will raise an error, as [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") is being called after autobegin has already
    occurred:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，即使我们使用“DBAPI自动提交”，SQLAlchemy的事务语义，即[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")的Python内部行为以及“自动开始”的行为，**仍然存在，即使这些不影响DBAPI连接本身**。举例说明，下面的代码将引发错误，因为在自动开始已经发生后调用了[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The above example also demonstrates the same theme that the “autocommit” isolation
    level is a configurational detail of the underlying database transaction, and
    is independent of the begin/commit behavior of the SQLAlchemy Connection object.
    The “autocommit” mode will not interact with [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") in any way and the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") does not consult this status when performing its
    own state changes with regards to the transaction (with the exception of suggesting
    within engine logging that these blocks are not actually committing). The rationale
    for this design is to maintain a completely consistent usage pattern with the
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") where
    DBAPI-autocommit mode can be changed independently without indicating any code
    changes elsewhere.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例还展示了同样的主题，即“自动提交”隔离级别是底层数据库事务的配置细节，独立于SQLAlchemy Connection对象的开始/提交行为。
    “自动提交”模式不会以任何方式与[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")交互，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")在执行其自身与事务相关的状态更改时不会查询此状态（除了在引擎日志中建议这些块实际上没有提交）。这种设计的原因是为了保持与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")完全一致的使用模式，在此模式中，DBAPI自动提交模式可以独立更改，而无需指示任何其他代码更改。
- en: Changing Between Isolation Levels
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在隔离级别之间进行切换
- en: Isolation level settings, including autocommit mode, are reset automatically
    when the connection is released back to the connection pool. Therefore it is preferable
    to avoid trying to switch isolation levels on a single [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object as this leads to excess verbosity.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接被释放回连接池时，隔离级别设置，包括自动提交模式，会自动重置。因此，最好避免尝试在单个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象上切换隔离级别，因为这会导致冗余。
- en: 'To illustrate how to use “autocommit” in an ad-hoc mode within the scope of
    a single [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    checkout, the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter must be re-applied
    with the previous isolation level. The previous section illustrated an attempt
    to call [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    in order to start a transaction while autocommit was taking place; we can rewrite
    that example to actually do so by first reverting the isolation level before we
    call upon [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin"):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明如何在单个[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")检出的范围内以即时模式使用“自动提交”，必须重新应用[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数，以恢复先前的隔离级别。上一节示例了在自动提交进行时调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")以启动事务的尝试；我们可以通过在调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")之前先恢复隔离级别来重写该示例：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Above, to manually revert the isolation level we made use of [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") to restore the default
    isolation level (assuming that’s what we want here). However, it’s probably a
    better idea to work with the architecture of of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") which already handles resetting of isolation level
    automatically upon checkin. The **preferred** way to write the above is to use
    two blocks
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以上，在手动恢复隔离级别时，我们使用了[`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level")来恢复默认隔离级别（假设这是我们想要的）。然而，更好的做法可能是与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的架构一起工作，该架构已经在签入时自动处理重置隔离级别。编写上述内容的**首选**方法是使用两个块
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To sum up:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之：
- en: “DBAPI level autocommit” isolation level is entirely independent of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object’s notion of “begin” and “commit”
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “DBAPI 级别的自动提交”隔离级别与[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象的“开始”和“提交”概念完全独立。
- en: 'use individual [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    checkouts per isolation level. Avoid trying to change back and forth between “autocommit”
    on a single connection checkout; let the engine do the work of restoring default
    isolation levels  ## Using Server Side Cursors (a.k.a. stream results)'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '每个隔离级别使用单独的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")签出。避免在单个连接签出之间尝试来回切换“自动提交”；让引擎完成恢复默认隔离级别的工作  ##
    使用服务器端游标（又名流式结果）'
- en: Some backends feature explicit support for the concept of “server side cursors”
    versus “client side cursors”. A client side cursor here means that the database
    driver fully fetches all rows from a result set into memory before returning from
    a statement execution. Drivers such as those of PostgreSQL and MySQL/MariaDB generally
    use client side cursors by default. A server side cursor, by contrast, indicates
    that result rows remain pending within the database server’s state as result rows
    are consumed by the client. The drivers for Oracle generally use a “server side”
    model, for example, and the SQLite dialect, while not using a real “client / server”
    architecture, still uses an unbuffered result fetching approach that will leave
    result rows outside of process memory before they are consumed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一些后端特性明确支持“服务器端游标”和“客户端游标”的概念。这里的客户端游标意味着数据库驱动在语句执行完成之前完全将结果集中的所有行都提取到内存中。例如，PostgreSQL
    和 MySQL/MariaDB 的驱动通常默认使用客户端游标。相比之下，服务器端游标表示结果行在客户端消耗时仍保持在数据库服务器状态中。例如，Oracle
    的驱动通常使用“服务器端”模型，而 SQLite 方言虽然没有使用真正的“客户端/服务器”架构，但仍然使用一种未缓冲的结果提取方法，在结果行被消耗之前会将其留在进程内存之外。
- en: From this basic architecture it follows that a “server side cursor” is more
    memory efficient when fetching very large result sets, while at the same time
    may introduce more complexity in the client/server communication process and be
    less efficient for small result sets (typically less than 10000 rows).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个基本架构可以得出结论，当提取非常大的结果集时，“服务器端游标”在内存效率上更高，同时可能会在客户端/服务器通信过程中引入更多复杂性，并且对于小结果集（通常少于
    10000 行）效率较低。
- en: For those dialects that have conditional support for buffered or unbuffered
    results, there are usually caveats to the use of the “unbuffered”, or server side
    cursor mode. When using the psycopg2 dialect for example, an error is raised if
    a server side cursor is used with any kind of DML or DDL statement. When using
    MySQL drivers with a server side cursor, the DBAPI connection is in a more fragile
    state and does not recover as gracefully from error conditions nor will it allow
    a rollback to proceed until the cursor is fully closed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些有条件支持缓冲或未缓冲结果的方言，通常对使用“未缓冲”或服务器端游标模式会有一些注意事项。例如，当使用 psycopg2 方言时，如果使用服务器端游标与任何类型的
    DML 或 DDL 语句，将会引发错误。当使用 MySQL 驱动程序与服务器端游标时，DBAPI 连接处于更脆弱的状态，并且无法从错误条件中优雅地恢复，也不会允许回滚进行，直到游标完全关闭。
- en: For this reason, SQLAlchemy’s dialects will always default to the less error
    prone version of a cursor, which means for PostgreSQL and MySQL dialects it defaults
    to a buffered, “client side” cursor where the full set of results is pulled into
    memory before any fetch methods are called from the cursor. This mode of operation
    is appropriate in the **vast majority** of cases; unbuffered cursors are not generally
    useful except in the uncommon case of an application fetching a very large number
    of rows in chunks, where the processing of these rows can be complete before more
    rows are fetched.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，SQLAlchemy 的方言将始终默认使用游标的较少出错版本，这意味着对于 PostgreSQL 和 MySQL 方言，默认情况下使用缓冲的“客户端”游标，在从游标调用任何提取方法之前，会将完整结果集拉入内存。这种操作模式在**绝大多数**情况下都是适用的；未缓冲的游标通常不是很有用，除非是在应用程序以块的方式提取大量行的罕见情况下，这些行的处理可以在提取更多行之前完成。
- en: For database drivers that provide client and server side cursor options, the
    [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution options provide access
    to “server side cursors” on a per-[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or per-statement basis. Similar options exist
    when using an ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as well.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于提供客户端和服务器端游标选项的数据库驱动程序，[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 和 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项提供了在每个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或每个语句基础上访问“服务器端游标”的能力。在使用 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 时也存在类似的选项。
- en: Streaming with a fixed buffer via yield_per
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 yield_per 进行固定缓冲区流式处理
- en: As individual row-fetch operations with fully unbuffered server side cursors
    are typically more expensive than fetching batches of rows at once, The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option configures
    a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or statement to make use of server-side cursors as are available, while at the
    same time configuring a fixed-size buffer of rows that will retrieve rows from
    the server in batches as they are consumed. This parameter may be to a positive
    integer value using the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method on [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or on a statement using the [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于完全未缓冲的服务器端游标的单个行提取操作通常比一次提取批量行要昂贵，[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项配置了一个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或语句以利用服务器端游标（如果可用），同时配置了一个固定大小的行缓冲区，该缓冲区将在消耗时按批次从服务器检索行。此参数可以使用[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法在[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上或使用[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 方法在语句上设置为正整数值。
- en: 'New in version 1.4.40: [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") as a Core-only option is new
    as of SQLAlchemy 1.4.40; for prior 1.4 versions, use [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") directly in combination with
    [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per").'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.40 中的新功能：[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 作为仅限核心的选项是 SQLAlchemy 1.4.40
    中的新功能；对于先前的 1.4 版本，请直接结合使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 和 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")。
- en: 'Using this option is equivalent to manually setting the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option, described in the next
    section, and then invoking the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object with the given integer value. In both cases,
    the effect this combination has includes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项等同于手动设置[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")选项，如下一节所述，并在给定整数值的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象上调用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法。在这两种情况下，这种组合的效果包括：
- en: server side cursors mode is selected for the given backend, if available and
    not already the default behavior for that backend
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为给定后端选择了服务器端游标模式，如果可用且尚未是该后端的默认行为
- en: as result rows are fetched, they will be buffered in batches, where the size
    of each batch up until the last batch will be equal to the integer argument passed
    to the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option or the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method; the last batch is then sized against
    the remaining rows fewer than this size
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当获取结果行时，它们将被分批缓冲，每个批次的大小直到最后一个批次将等于传递给[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")选项或[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法的整数参数；然后最后一个批次的大小将根据少于此大小的剩余行数确定
- en: The default partition size used by the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, if used, will be made equal to
    this integer size as well.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用，[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")方法使用的默认分区大小也将设置为此整数大小。
- en: 'These three behaviors are illustrated in the example below:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了这三种行为：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The above example illustrates the combination of `yield_per=100` along with
    using the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method to run processing on rows in batches that match the size fetched from the
    server. The use of [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") is optional, and if the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") is iterated directly, a new batch of rows will be
    buffered for each 100 rows fetched. Calling a method such as [`Result.all()`](#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") should **not** be used, as this will fully fetch
    all remaining rows at once and defeat the purpose of using `yield_per`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例说明了`yield_per=100`与使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法一起批量处理与从服务器获取的大小匹配的行的组合。使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")是可选的，如果直接迭代[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")，每获取100行将缓冲一个新的批次行。不应使用诸如[`Result.all()`](#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all")之类的方法，因为这将一次性完全获取所有剩余行，从而破坏使用`yield_per`的目的。
- en: Tip
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    may be used as a context manager as illustrated above. When iterating with a server-side
    cursor, this is the best way to ensure the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is closed, even if exceptions are raised within
    the iteration process.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象可以用作上下文管理器。在使用服务器端游标进行迭代时，这是确保[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象关闭的最佳方式，即使在迭代过程中引发异常。
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option is portable to the ORM
    as well, used by a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to fetch ORM objects, where it also limits the amount
    of ORM objects generated at once. See the section [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per) - in the
    [ORM Querying Guide](../orm/queryguide/index.html) for further background on using
    [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") with the ORM.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 选项也可以被 ORM 使用，被 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 用于获取 ORM 对象，它还限制一次生成的 ORM 对象的数量。请参阅 [使用 `Connection.execution_options.yield_per`
    从大型结果集中提取](../orm/queryguide/api.html#orm-queryguide-yield-per) - 在 [ORM 查询指南](../orm/queryguide/index.html)
    中了解如何在 ORM 中使用 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 的更多背景信息。'
- en: 'New in version 1.4.40: Added [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") as a Core level execution option
    to conveniently set streaming results, buffer size, and partition size all at
    once in a manner that is transferrable to that of the ORM’s similar use case.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.40 中新增了[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")，作为一个核心级别的执行选项，可以方便地设置流式结果、缓冲区大小和分区大小，一次性完成，这种方式可以转移到
    ORM 的类似用例中。
- en: '### Streaming with a dynamically growing buffer using stream_results'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 `stream_results` 动态增长缓冲区进行流式传输'
- en: To enable server side cursors without a specific partition size, the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option may be used, which like
    [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") may be called on the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object or the statement object.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 若要启用无特定分区大小的服务器端游标，可以使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 选项，这与 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 相似，可以在 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象或语句对象上调用。
- en: 'When a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    delivered using the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option is iterated directly,
    rows are fetched internally using a default buffering scheme that buffers first
    a small set of rows, then a larger and larger buffer on each fetch up to a pre-configured
    limit of 1000 rows. The maximum size of this buffer can be affected using the
    [`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") execution option:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 选项传递的 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象被直接迭代时，行会内部使用默认的缓冲方案进行获取，首先缓冲一小部分行，然后在每次提取时增加越来越大的缓冲区，直到预配置的
    1000 行的限制。此缓冲区的最大大小可以通过 [`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") 执行选项受到影响：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: While the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option may be combined with
    use of the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method, a specific partition size should be passed to [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") so that the entire result is not fetched.
    It is usually more straightforward to use the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option when setting up to use
    the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")选项可以与[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法结合使用，但应向[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")传递特定的分区大小，以避免获取整个结果。通常，在设置使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法时，使用[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")选项更为简单。
- en: See also
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在[ORM 查询指南](../orm/queryguide/index.html)中'
- en: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
- en: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")  ##
    Translation of Schema Names'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")  ##
    模式名称的翻译'
- en: To support multi-tenancy applications that distribute common sets of tables
    into multiple schemas, the [`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") execution option may be used
    to repurpose a set of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects to render under different schema names without any changes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为支持将常见的表集分布到多个模式中的多租户应用程序，可以使用[`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")执行选项，以重新配置一组[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，使其在不进行任何更改的情况下呈现不同的模式名称。
- en: 'Given a table:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个表：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The “schema” of this [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    as defined by the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") attribute is `None`. The [`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") can specify that all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects with a schema of `None` would instead render
    the schema as `user_schema_one`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的“模式”，由[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")属性定义，为 `None`。 [`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")可以指定所有模式为 `None` 的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象实际上将模式呈现为 `user_schema_one`：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The above code will invoke SQL on the database of the form:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将在数据库上调用如下形式的 SQL：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'That is, the schema name is substituted with our translated name. The map can
    specify any number of target->destination schemas:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，模式名称被替换为我们翻译后的名称。该映射可以指定任意数量的目标->目标模式：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The [`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") parameter affects all DDL and
    SQL constructs generated from the SQL expression language, as derived from the
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") or
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    objects. It does **not** impact literal string SQL used via the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct nor via plain strings passed to [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")参数影响从SQL表达式语言生成的所有DDL和SQL构造，这些构造是从[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象派生的。它不会影响通过[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造使用的文本字符串SQL，也不会影响通过[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")传递的纯字符串。'
- en: The feature takes effect **only** in those cases where the name of the schema
    is derived directly from that of a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"); it does not impact methods where a string schema
    name is passed directly. By this pattern, it takes effect within the “can create”
    / “can drop” checks performed by methods such as [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") or [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") are called, and it takes effect when using
    table reflection given a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. However it does **not** affect the operations present on the [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object, as the schema name is passed
    to these methods explicitly.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该特性仅在以下情况下生效，即模式名称直接来源于[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")或[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")的名称；它不会影响直接传递字符串模式名称的方法。按照这种模式，它在[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")或[`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all")等方法执行的“可以创建”/“可以删除”检查中生效，并且在给定[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的情况下使用表反射时生效。然而，它不会影响[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")对象上存在的操作，因为模式名称是显式传递给这些方法的。
- en: Tip
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'To use the schema translation feature with the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), set this option at the level of the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), then pass that engine to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") uses a new [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") for each transaction:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要在ORM[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中使用模式翻译功能，请在[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")级别设置此选项，然后将该引擎传递给[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")为每个事务使用一个新的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Warning
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") without extensions, the schema translate feature is
    only supported as **a single schema translate map per Session**. It will **not
    work** if different schema translate maps are given on a per-statement basis,
    as the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    does not take current schema translate values into account for individual objects.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有扩展的情况下使用ORM[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")时，模式翻译功能仅支持**每个Session的单个模式翻译映射**。如果在每个语句的基础上提供了不同的模式翻译映射，则它**不会起作用**，因为ORM[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")不考虑用于单个对象的当前模式翻译值。
- en: 'To use a single [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with multiple `schema_translate_map` configurations,
    the [Horizontal Sharding](../orm/extensions/horizontal_shard.html) extension may
    be used. See the example at [Horizontal Sharding](../orm/examples.html#examples-sharding).  ##
    SQL Compilation Caching'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要在多个 `schema_translate_map` 配置中使用单个 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，可以使用 [Horizontal Sharding](../orm/extensions/horizontal_shard.html)
    扩展。请参阅 [Horizontal Sharding](../orm/examples.html#examples-sharding) 中的示例。## SQL
    编译缓存
- en: 'New in version 1.4: SQLAlchemy now has a transparent query caching system that
    substantially lowers the Python computational overhead involved in converting
    SQL statement constructs into SQL strings across both Core and ORM. See the introduction
    at [Transparent SQL Compilation Caching added to All DQL, DML Statements in Core,
    ORM](../changelog/migration_14.html#change-4639).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能：1.4 版本中新增了 SQLAlchemy 具有透明查询缓存系统，大大降低了在 Core 和 ORM 中将 SQL 语句构造转换为 SQL 字符串所涉及的
    Python 计算开销。请参阅 [Transparent SQL Compilation Caching added to All DQL, DML Statements
    in Core, ORM](../changelog/migration_14.html#change-4639) 中的介绍。
- en: 'SQLAlchemy includes a comprehensive caching system for the SQL compiler as
    well as its ORM variants. This caching system is transparent within the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and provides that the SQL compilation process for
    a given Core or ORM SQL statement, as well as related computations which assemble
    result-fetching mechanics for that statement, will only occur once for that statement
    object and all others with the identical structure, for the duration that the
    particular structure remains within the engine’s “compiled cache”. By “statement
    objects that have the identical structure”, this generally corresponds to a SQL
    statement that is constructed within a function and is built each time that function
    runs:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 包含了一个全面的 SQL 编译器缓存系统，以及其 ORM 变体。该缓存系统在 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 内部是透明的，并提供了对于给定的 Core 或 ORM SQL 语句的 SQL 编译过程，以及为该语句组装结果获取机制的相关计算，只会对具有相同结构的语句对象执行一次，而对于具有相同结构的引擎的“已编译缓存”中的所有其他语句对象，在特定结构保持在引擎的“已编译缓存”中的持续时间内。所谓“具有相同结构的语句对象”，通常对应于在函数内构造的
    SQL 语句，并且每次运行该函数时都会构建该语句：
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The above statement will generate SQL resembling `SELECT id, col FROM table
    WHERE col = :col ORDER BY id`, noting that while the value of `parameter` is a
    plain Python object such as a string or an integer, the string SQL form of the
    statement does not include this value as it uses bound parameters. Subsequent
    invocations of the above `run_my_statement()` function will use a cached compilation
    construct within the scope of the `connection.execute()` call for enhanced performance.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将生成类似于 `SELECT id, col FROM table WHERE col = :col ORDER BY id` 的 SQL 语句，注意，虽然
    `parameter` 的值是一个普通的 Python 对象，比如一个字符串或一个整数，但该语句的字符串 SQL 形式不包括该值，因为它使用了绑定参数。在
    `connection.execute()` 调用的范围内，上述 `run_my_statement()` 函数的后续调用将使用缓存的编译结构，以提高性能。
- en: Note
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: it is important to note that the SQL compilation cache is caching the **SQL
    string that is passed to the database only**, and **not the data** returned by
    a query. It is in no way a data cache and does not impact the results returned
    for a particular SQL statement nor does it imply any memory use linked to fetching
    of result rows.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，SQL 编译缓存仅缓存**传递给数据库的 SQL 字符串**，而不是查询返回的数据。它绝对不是数据缓存，也不会影响返回特定 SQL 语句的结果，也不意味着与提取结果行相关联的内存使用。
- en: While SQLAlchemy has had a rudimentary statement cache since the early 1.x series,
    and additionally has featured the “Baked Query” extension for the ORM, both of
    these systems required a high degree of special API use in order for the cache
    to be effective. The new cache as of 1.4 is instead completely automatic and requires
    no change in programming style to be effective.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SQLAlchemy 从早期的 1.x 系列就有了一个基本的语句缓存，并且还在 ORM 中提供了“Baked Query”扩展，但这两个系统都需要高度特殊的
    API 使用才能使缓存生效。从 1.4 版本开始的新缓存完全是自动的，无需改变编程风格即可生效。
- en: The cache is automatically used without any configurational changes and no special
    steps are needed in order to enable it. The following sections detail the configuration
    and advanced usage patterns for the cache.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 该缓存会自动使用，无需进行任何配置更改，也不需要任何特殊步骤来启用它。以下各节详细介绍了缓存的配置和高级使用模式。
- en: Configuration
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置
- en: 'The cache itself is a dictionary-like object called an `LRUCache`, which is
    an internal SQLAlchemy dictionary subclass that tracks the usage of particular
    keys and features a periodic “pruning” step which removes the least recently used
    items when the size of the cache reaches a certain threshold. The size of this
    cache defaults to 500 and may be configured using the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") parameter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存本身是一个名为 `LRUCache` 的类似于字典的对象，它是 SQLAlchemy 的内部字典子类，跟踪特定键的使用情况，并在缓存大小达到某个阈值时特性地执行定期的“修剪”步骤，移除最近最少使用的项目。此缓存的大小默认为
    500，并且可以使用 [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") 参数进行配置：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The size of the cache can grow to be a factor of 150% of the size given, before
    it’s pruned back down to the target size. A cache of size 1200 above can therefore
    grow to be 1800 elements in size at which point it will be pruned to 1200.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存的大小可以增长到给定大小的 150%，然后再减少到目标大小。因此，1200 大小的缓存可以增长到 1800 大小，然后被修剪到 1200。
- en: The sizing of the cache is based on a single entry per unique SQL statement
    rendered, per engine. SQL statements generated from both the Core and the ORM
    are treated equally. DDL statements will usually not be cached. In order to determine
    what the cache is doing, engine logging will include details about the cache’s
    behavior, described in the next section.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存的大小基于每个引擎渲染的每个唯一 SQL 语句条目。从 Core 和 ORM 生成的 SQL 语句被平等对待。DDL 语句通常不会被缓存。为了确定缓存的作用，引擎日志将包括有关缓存行为的详细信息，下一节将对其进行描述。
- en: '### Estimating Cache Performance Using Logging'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用日志估算缓存性能'
- en: The above cache size of 1200 is actually fairly large. For small applications,
    a size of 100 is likely sufficient. To estimate the optimal size of the cache,
    assuming enough memory is present on the target host, the size of the cache should
    be based on the number of unique SQL strings that may be rendered for the target
    engine in use. The most expedient way to see this is to use SQL echoing, which
    is most directly enabled by using the [`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") flag, or by using Python logging; see the section
    [Configuring Logging](engines.html#dbengine-logging) for background on logging
    configuration.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 1200 大小的缓存实际上相当大。对于小型应用程序，100 大小可能足够。为了估算缓存的最佳大小，假设目标主机上存在足够的内存，缓存的大小应基于可能为使用的目标引擎渲染的唯一
    SQL 字符串数量。查看此的最便捷方法是使用 SQL 回显，可以通过使用 [`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 标志直接启用，也可以通过使用 Python 日志记录；有关日志配置的背景，请参阅[配置日志](engines.html#dbengine-logging)部分。
- en: 'As an example, we will examine the logging produced by the following program:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将检查以下程序产生的日志记录：
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When run, each SQL statement that’s logged will include a bracketed cache statistics
    badge to the left of the parameters passed. The four types of message we may see
    are summarized as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，每个记录的 SQL 语句将在传递的参数左侧包括一个带括号的缓存统计徽章。我们可能看到的四种消息类型如下所示：
- en: '`[raw sql]` - the driver or the end-user emitted raw SQL using [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") - caching does not apply'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[原始 SQL]` - 使用 [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 方法的驱动程序或最终用户发出的原始 SQL - 不适用缓存'
- en: '`[no key]` - the statement object is a DDL statement that is not cached, or
    the statement object contains uncacheable elements such as user-defined constructs
    or arbitrarily large VALUES clauses.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[无键]` - 语句对象是一个不被缓存的 DDL 语句，或者语句对象包含不可缓存的元素，例如用户定义的结构或任意大的 VALUES 子句。'
- en: '`[generated in Xs]` - the statement was a **cache miss** and had to be compiled,
    then stored in the cache. it took X seconds to produce the compiled construct.
    The number X will be in the small fractional seconds.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[在 X 秒内生成]` - 该语句是一个**缓存未命中**，必须编译，然后存储在缓存中。生成编译结构花费了 X 秒。数字 X 将是很小的分数秒。'
- en: '`[cached since Xs ago]` - the statement was a **cache hit** and did not have
    to be recompiled. The statement has been stored in the cache since X seconds ago.
    The number X will be proportional to how long the application has been running
    and how long the statement has been cached, so for example would be 86400 for
    a 24 hour period.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[cached since Xs ago]` - 该语句是**缓存命中**，无需重新编译。该语句自X秒前起已存储在缓存中。数字X将与应用程序运行时间和语句缓存时间成比例，例如，对于一个24小时的时间段，X将为86400。'
- en: Each badge is described in more detail below.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 每个徽章的详细描述如下。
- en: 'The first statements we see for the above program will be the SQLite dialect
    checking for the existence of the “a” and “b” tables:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序中我们看到的第一条语句是SQLite方言检查“a”和“b”表是否存在：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For the above two SQLite PRAGMA statements, the badge reads `[raw sql]`, which
    indicates the driver is sending a Python string directly to the database using
    [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql"). Caching does not apply to such
    statements because they already exist in string form, and there is nothing known
    about what kinds of result rows will be returned since SQLAlchemy does not parse
    SQL strings ahead of time.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述两个SQLite PRAGMA语句，徽章显示为`[raw sql]`，这表示驱动程序直接将Python字符串通过[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")发送到数据库。这些语句不适用于缓存，因为它们已经以字符串形式存在，而且由于SQLAlchemy不提前解析SQL字符串，对将返回的结果行的类型也一无所知。
- en: 'The next statements we see are the CREATE TABLE statements:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的下一条语句是CREATE TABLE语句：
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For each of these statements, the badge reads `[no key 0.00006s]`. This indicates
    that these two particular statements, caching did not occur because the DDL-oriented
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct did not produce a cache key. DDL constructs generally do not participate
    in caching because they are not typically subject to being repeated a second time
    and DDL is also a database configurational step where performance is not as critical.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个语句，徽章显示为`[no key 0.00006s]`。这表示这两个特定语句，由于DDL导向的[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造未生成缓存键，因此未发生缓存。DDL构造通常不参与缓存，因为它们通常不会被重复执行第二次，而且DDL也是数据库配置步骤，性能并不那么关键。
- en: The `[no key]` badge is important for one other reason, as it can be produced
    for SQL statements that are cacheable except for some particular sub-construct
    that is not currently cacheable. Examples of this include custom user-defined
    SQL elements that don’t define caching parameters, as well as some constructs
    that generate arbitrarily long and non-reproducible SQL strings, the main examples
    being the [`Values`](selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct as well as when using “multivalued inserts” with the [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`[no key]`徽章之所以重要，是因为它可以用于生成可缓存的SQL语句，除了某些当前不可缓存的特定子构造。这些包括未定义缓存参数的自定义用户定义SQL元素，以及生成任意长且不可重现的SQL字符串的某些构造，主要示例包括[`Values`](selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values")构造以及使用[`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法进行“多值插入”时。'
- en: 'So far our cache is still empty. The next statements will be cached however,
    a segment looks like:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的缓存仍然是空的。下一条语句将被缓存，一个段落看起来像：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Above, we see essentially two unique SQL strings; `"INSERT INTO a (data) VALUES
    (?)"` and `"INSERT INTO b (a_id, data) VALUES (?, ?)"`. Since SQLAlchemy uses
    bound parameters for all literal values, even though these statements are repeated
    many times for different objects, because the parameters are separate, the actual
    SQL string stays the same.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们实际上看到了两个唯一的SQL字符串；`"INSERT INTO a (data) VALUES (?)"`和`"INSERT INTO b
    (a_id, data) VALUES (?, ?)"`。由于SQLAlchemy对所有文字值使用绑定参数，即使这些语句为不同对象重复多次，由于参数是分开的，实际的SQL字符串保持不变。
- en: Note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: the above two statements are generated by the ORM unit of work process, and
    in fact will be caching these in a separate cache that is local to each mapper.
    However the mechanics and terminology are the same. The section [Disabling or
    using an alternate dictionary to cache some (or all) statements](#engine-compiled-cache)
    below will describe how user-facing code can also use an alternate caching container
    on a per-statement basis.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个语句是由ORM工作单元生成的，实际上会将这些语句缓存在每个映射器的本地缓存中。但是机制和术语是相同的。下面的章节[禁用或使用备用字典缓存某些（或全部）语句](#engine-compiled-cache)将描述用户代码如何基于每个语句使用备用缓存容器。
- en: The caching badge we see for the first occurrence of each of these two statements
    is `[generated in 0.00011s]`. This indicates that the statement was **not in the
    cache, was compiled into a String in .00011s and was then cached**. When we see
    the `[generated]` badge, we know that this means there was a **cache miss**. This
    is to be expected for the first occurrence of a particular statement. However,
    if lots of new `[generated]` badges are observed for a long-running application
    that is generally using the same series of SQL statements over and over, this
    may be a sign that the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") parameter is too small. When a statement that was
    cached is then evicted from the cache due to the LRU cache pruning lesser used
    items, it will display the `[generated]` badge when it is next used.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的每个这两个语句的第一次出现的缓存徽章是`[generated in 0.00011s]`。这表示该语句**不在缓存中，在0.00011秒内编译成字符串，然后被缓存**。当我们看到`[generated]`徽章时，我们知道这意味着发生了**缓存未命中**。对于特定语句的第一次出现，这是可以预料的。然而，如果长时间运行的应用程序通常一遍又一遍地使用相同系列的SQL语句，但是观察到了大量新的`[generated]`徽章，那可能意味着[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")参数设置得太小。当从缓存中驱逐了被缓存的语句，因为LRU缓存修剪了较少使用的项目时，当下次使用它时，它将显示`[generated]`徽章。
- en: The caching badge that we then see for the subsequent occurrences of each of
    these two statements looks like `[cached since 0.0003533s ago]`. This indicates
    that the statement **was found in the cache, and was originally placed into the
    cache .0003533 seconds ago**. It is important to note that while the `[generated]`
    and `[cached since]` badges refer to a number of seconds, they mean different
    things; in the case of `[generated]`, the number is a rough timing of how long
    it took to compile the statement, and will be an extremely small amount of time.
    In the case of `[cached since]`, this is the total time that a statement has been
    present in the cache. For an application that’s been running for six hours, this
    number may read `[cached since 21600 seconds ago]`, and that’s a good thing. Seeing
    high numbers for “cached since” is an indication that these statements have not
    been subject to cache misses for a long time. Statements that frequently have
    a low number of “cached since” even if the application has been running a long
    time may indicate these statements are too frequently subject to cache misses,
    and that the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") may need to be increased.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个这两个语句的后续出现，我们看到的缓存徽章看起来像是`[cached since 0.0003533s ago]`。这表示该语句**在缓存中被找到，并且最初放入缓存中0.0003533秒前**。需要注意的是，虽然`[generated]`和`[cached
    since]`徽章都指的是秒数，但它们表示的含义不同；在`[generated]`的情况下，该数字是编译该语句所需的大致时间，并且会是一个极小的时间量。在`[cached
    since]`的情况下，这是语句在缓存中存在的总时间。对于运行了六个小时的应用程序，该数字可能会显示`[cached since 21600 seconds
    ago]`，这是个好事。看到“cached since”的数字很高表明这些语句很长时间以来都没有发生缓存未命中。即使应用程序运行了很长时间，但是经常出现“cached
    since”的低数字的语句可能表明这些语句太频繁地发生了缓存未命中，并且可能需要增加[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")参数。
- en: 'Our example program then performs some SELECTs where we can see the same pattern
    of “generated” then “cached”, for the SELECT of the “a” table as well as for subsequent
    lazy loads of the “b” table:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例程序然后执行了一些SELECT查询，在这些查询中，我们可以看到“generated”然后“cached”的相同模式，对于“a”表的SELECT以及“b”表的后续惰性加载也是如此：
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: From our above program, a full run shows a total of four distinct SQL strings
    being cached. Which indicates a cache size of **four** would be sufficient. This
    is obviously an extremely small size, and the default size of 500 is fine to be
    left at its default.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们上面的程序，完整运行显示总共缓存了四个不同的 SQL 字符串。这表明缓存大小为**四**足以。这显然是一个极小的大小，500 的默认大小可以放心使用。
- en: How much memory does the cache use?
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存使用了多少内存？
- en: The previous section detailed some techniques to check if the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") needs to be bigger. How do we know if the cache is
    not too large? The reason we may want to set [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") to not be higher than a certain number would be because
    we have an application that may make use of a very large number of different statements,
    such as an application that is building queries on the fly from a search UX, and
    we don’t want our host to run out of memory if for example, a hundred thousand
    different queries were run in the past 24 hours and they were all cached.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的章节详细介绍了一些技术，用于检查[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")是否需要增加。我们如何知道缓存大小不太大？我们可能希望将[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")设置为不超过某个数字的原因是，我们的应用程序可能会使用非常大量的不同语句，例如一个从搜索 UX 动态构建查询的应用程序，如果过去
    24 小时运行了十万条不同的查询并且它们都被缓存，我们不希望我们的主机因为内存不足而运行失败。
- en: It is extremely difficult to measure how much memory is occupied by Python data
    structures, however using a process to measure growth in memory via `top` as a
    successive series of 250 new statements are added to the cache suggest a moderate
    Core statement takes up about 12K while a small ORM statement takes about 20K,
    including result-fetching structures which for the ORM will be much greater.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 很难测量 Python 数据结构占用了多少内存，但是通过使用`top`来测量内存增长，当连续添加了 250 个新语句时，建议一个中等核心语句大约占用 12K，而一个小型
    ORM 语句大约占用 20K，包括为 ORM 获取结果的结构，这些结构对于 ORM 来说要大得多。
- en: '### Disabling or using an alternate dictionary to cache some (or all) statements'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '### 禁用或使用替代字典缓存一些（或全部）语句'
- en: 'The internal cache used is known as `LRUCache`, but this is mostly just a dictionary.
    Any dictionary may be used as a cache for any series of statements by using the
    [`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") option as an execution option.
    Execution options may be set on a statement, on an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    as well as when using the ORM [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method for SQLAlchemy-2.0 style invocations.
    For example, to run a series of SQL statements and have them cached in a particular
    dictionary:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 内部使用的缓存称为`LRUCache`，但这基本上只是一个字典。可以使用[`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options")选项作为执行选项的一部分，通过在语句上设置执行选项，在[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")上设置执行选项，或者在使用
    SQLAlchemy-2.0 样式调用 ORM [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法时设置执行选项，使用任何字典作为任何语句系列的缓存。例如，要运行一系列 SQL 语句并将它们缓存到特定字典中：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The SQLAlchemy ORM uses the above technique to hold onto per-mapper caches within
    the unit of work “flush” process that are separate from the default cache configured
    on the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"), as well
    as for some relationship loader queries.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy ORM 使用上述技术在单元工作“flush”过程中保留每个 mapper 的缓存，这些缓存与[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")上配置的默认缓存分开，以及用于某些关系加载器查询。
- en: 'The cache can also be disabled with this argument by sending a value of `None`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该参数将缓存禁用，方法是发送一个值为`None`：
- en: '[PRE34]  ### Caching for Third Party Dialects'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE34]  ### 第三方方言的缓存'
- en: The caching feature requires that the dialect’s compiler produces SQL strings
    that are safe to reuse for many statement invocations, given a particular cache
    key that is keyed to that SQL string. This means that any literal values in a
    statement, such as the LIMIT/OFFSET values for a SELECT, can not be hardcoded
    in the dialect’s compilation scheme, as the compiled string will not be re-usable.
    SQLAlchemy supports rendered bound parameters using the [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method which
    can be applied to the existing `Select._limit_clause` and `Select._offset_clause`
    attributes by a custom compiler, which are illustrated later in this section.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存功能要求方言的编译器生成的SQL字符串可以安全地用于许多语句调用，给定一个特定的缓存键，该键与该SQL字符串相关联。这意味着语句中的任何字面值，例如
    SELECT 的 LIMIT/OFFSET 值，不能在方言的编译方案中硬编码，因为编译后的字符串将无法重用。SQLAlchemy 支持使用[`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute")方法渲染绑定参数，该方法可以应用于现有的
    `Select._limit_clause` 和 `Select._offset_clause` 属性，由自定义编译器实现，后文将对此进行说明。
- en: As there are many third party dialects, many of which may be generating literal
    values from SQL statements without the benefit of the newer “literal execute”
    feature, SQLAlchemy as of version 1.4.5 has added an attribute to dialects known
    as [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache"). This attribute is checked
    at runtime for its presence directly on a particular dialect’s class, even if
    it’s already present on a superclass, so that even a third party dialect that
    subclasses an existing cacheable SQLAlchemy dialect such as `sqlalchemy.dialects.postgresql.PGDialect`
    must still explicitly include this attribute for caching to be enabled. The attribute
    should **only** be enabled once the dialect has been altered as needed and tested
    for reusability of compiled SQL statements with differing parameters.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有许多第三方方言，其中许多可能会从SQL语句中生成字面值，而不使用更新的“字面执行”功能，因此自SQLAlchemy 1.4.5起，为方言添加了一个名为[`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache")的属性。此属性在运行时直接在特定方言类上检查其是否存在，即使它已经存在于超类上，因此，即使第三方方言是现有可缓存的SQLAlchemy方言的子类，例如`sqlalchemy.dialects.postgresql.PGDialect`，仍必须显式包含此属性以启用缓存。该属性应仅在方言经过必要的修改并测试过使用不同参数的编译SQL语句的可重用性后才能**启用**。
- en: For all third party dialects that don’t support this attribute, the logging
    for such a dialect will indicate `dialect does not support caching`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有不支持此属性的第三方方言，其日志将指示`方言不支持缓存`。
- en: 'When a dialect has been tested against caching, and in particular the SQL compiler
    has been updated to not render any literal LIMIT / OFFSET within a SQL string
    directly, dialect authors can apply the attribute as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个方言已经针对缓存进行了测试，特别是SQL编译器已更新为不直接在SQL字符串中渲染任何字面值 LIMIT / OFFSET 时，方言作者可以如下应用该属性：
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The flag needs to be applied to all subclasses of the dialect as well:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 该标志也需要应用于所有方言子类：
- en: '[PRE36]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'New in version 1.4.5: Added the [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") attribute.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.5 中新增了[`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache")属性。
- en: The typical case for dialect modification follows.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的方言修改案例如下。
- en: 'Example: Rendering LIMIT / OFFSET with post compile parameters'
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例：使用后编译参数渲染 LIMIT / OFFSET
- en: 'As an example, suppose a dialect overrides the `SQLCompiler.limit_clause()`
    method, which produces the “LIMIT / OFFSET” clause for a SQL statement, like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，假设一个方言重写了`SQLCompiler.limit_clause()`方法，该方法为SQL语句生成“LIMIT / OFFSET”子句，像这样：
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The above routine renders the `Select._limit` and `Select._offset` integer values
    as literal integers embedded in the SQL statement. This is a common requirement
    for databases that do not support using a bound parameter within the LIMIT/OFFSET
    clauses of a SELECT statement. However, rendering the integer value within the
    initial compilation stage is directly **incompatible** with caching as the limit
    and offset integer values of a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object are not part of the cache key, so that
    many [`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    statements with different limit/offset values would not render with the correct
    value.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以上例程将`Select._limit`和`Select._offset`整数值呈现为嵌入在SQL语句中的字面整数。这是对于不支持在SELECT语句的LIMIT/OFFSET子句中使用绑定参数的数据库的常见要求。然而，在初始编译阶段内呈现整数值与缓存直接**不兼容**，因为[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象的限制和偏移整数值不是缓存键的一部分，因此许多具有不同限制/偏移值的[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")语句将无法正确呈现值。
- en: 'The correction for the above code is to move the literal integer into SQLAlchemy’s
    [post-compile](../changelog/migration_14.html#change-4808) facility, which will
    render the literal integer outside of the initial compilation stage, but instead
    at execution time before the statement is sent to the DBAPI. This is accessed
    within the compilation stage using the [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method, in conjunction
    with using the `Select._limit_clause` and `Select._offset_clause` attributes,
    which represent the LIMIT/OFFSET as a complete SQL expression, as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以上代码的更正是将字面整数移入SQLAlchemy的[后编译](../changelog/migration_14.html#change-4808)设施，这将使字面整数在初始编译阶段之外渲染，而是在执行时在语句发送到DBAPI之前。这在编译阶段使用[`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute")方法访问，同时使用`Select._limit_clause`和`Select._offset_clause`属性，它们表示LIMIT/OFFSET作为完整的SQL表达式，如下所示：
- en: '[PRE38]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The approach above will generate a compiled SELECT statement that looks like:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法将生成一个编译后的SELECT语句，看起来像：
- en: '[PRE39]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Where above, the `__[POSTCOMPILE_param_1]` and `__[POSTCOMPILE_param_2]` indicators
    will be populated with their corresponding integer values at statement execution
    time, after the SQL string has been retrieved from the cache.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，`__[POSTCOMPILE_param_1]`和`__[POSTCOMPILE_param_2]`指示符将在语句执行时填充其相应的整数值，此时SQL字符串已从缓存中检索出来。
- en: After changes like the above have been made as appropriate, the [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") flag should be set to `True`.
    It is strongly recommended that third party dialects make use of the [dialect
    third party test suite](https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst)
    which will assert that operations like SELECTs with LIMIT/OFFSET are correctly
    rendered and cached.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当进行类似上述更改后，[`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache")标志应设置为`True`。强烈建议第三方方言使用[dialect第三方测试套件](https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst)，该套件将断言具有LIMIT/OFFSET的SELECT操作是否正确呈现和缓存。
- en: See also
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Why is my application slow after upgrading to 1.4 and/or 2.x?](../faq/performance.html#faq-new-caching)
    - in the [Frequently Asked Questions](../faq/index.html) section  ### Using Lambdas
    to add significant speed gains to statement production'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[为什么升级到1.4和/或2.x后我的应用程序变慢？](../faq/performance.html#faq-new-caching) - 在[常见问题解答](../faq/index.html)部分  ###
    使用Lambda在语句生成中获得显著的速度提升'
- en: Deep Alchemy
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: This technique is generally non-essential except in very performance intensive
    scenarios, and intended for experienced Python programmers. While fairly straightforward,
    it involves metaprogramming concepts that are not appropriate for novice Python
    developers. The lambda approach can be applied to at a later time to existing
    code with a minimal amount of effort.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 除非在非常性能密集的场景下，否则这种技术通常是非必要的，并且适用于有经验的Python程序员。虽然相当简单，但涉及到元编程概念，对于初学者的Python开发者来说并不合适。Lambda方法可以在稍后以最小的努力应用于现有代码。
- en: Python functions, typically expressed as lambdas, may be used to generate SQL
    expressions which are cacheable based on the Python code location of the lambda
    function itself as well as the closure variables within the lambda. The rationale
    is to allow caching of not only the SQL string-compiled form of a SQL expression
    construct as is SQLAlchemy’s normal behavior when the lambda system isn’t used,
    but also the in-Python composition of the SQL expression construct itself, which
    also has some degree of Python overhead.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数通常表示为 lambda，可以用来生成基于 lambda 函数本身的 Python 代码位置以及 lambda 内部的闭包变量可缓存的
    SQL 表达式。 其基本原理是允许缓存不仅是 SQL 表达式构造的 SQL 字符串编译形式，这是 SQLAlchemy 在未使用 lambda 系统时的正常行为，而且也是
    SQL 表达式构造本身在 Python 中的组合，这也具有一定的 Python 开销。
- en: The lambda SQL expression feature is available as a performance enhancing feature,
    and is also optionally used in the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") ORM option in order to provide a generic
    SQL fragment.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: lambda SQL 表达式功能可用作性能增强功能，并且也可以选择在 [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") ORM 选项中使用，以提供通用 SQL 片段。
- en: Synopsis
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 概要
- en: Lambda statements are constructed using the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") function, which returns an instance of
    [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement"), which is itself an executable
    statement construct. Additional modifiers and criteria are added to the object
    using the Python addition operator `+`, or alternatively the [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") method which
    allows for more options.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 语句是使用 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 函数构造的，该函数返回 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 的实例，它本身是一个可执行的语句构造。 使用 Python
    的加法运算符 `+`，或者 [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") 方法添加附加修饰符和条件到对象中，该方法允许更多的选项。
- en: 'It is assumed that the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") construct is being invoked within an
    enclosing function or method that expects to be used many times within an application,
    so that subsequent executions beyond the first one can take advantage of the compiled
    SQL being cached. When the lambda is constructed inside of an enclosing function
    in Python it is then subject to also having closure variables, which are significant
    to the whole approach:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在 Python 中的一个封闭函数或方法内调用了 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 构造函数，以便在应用程序中多次使用，以便在第一次执行之后的后续执行可以利用已缓存的编译
    SQL。 当 lambda 在 Python 的封闭函数内构造时，它也将受到闭包变量的影响，这对整个方法非常重要：
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Above, the three `lambda` callables that are used to define the structure of
    a SELECT statement are invoked exactly once, and the resulting SQL string cached
    in the compilation cache of the engine. From that point forward, the `run_my_statement()`
    function may be invoked any number of times and the `lambda` callables within
    it will not be called, only used as cache keys to retrieve the already-compiled
    SQL.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，用于定义 SELECT 语句结构的三个 `lambda` 可调用对象只被调用一次，并且生成的 SQL 字符串被缓存在引擎的编译缓存中。 从那时起，`run_my_statement()`
    函数可以被调用任意次数，而其中的 `lambda` 可调用对象不会被调用，只用作缓存键来检索已经编译的 SQL。
- en: Note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that there is already SQL caching in place when the
    lambda system is not used. The lambda system only adds an additional layer of
    work reduction per SQL statement invoked by caching the building up of the SQL
    construct itself and also using a simpler cache key.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当 lambda 系统未被使用时，已经存在 SQL 缓存，这一点很重要。 lambda 系统只是在每个 SQL 语句调用时通过缓存 SQL 构建本身和使用更简单的缓存键来添加额外的工作减少层。
- en: Quick Guidelines for Lambdas
  id: totrans-219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Lambda 的快速指南
- en: 'Above all, the emphasis within the lambda SQL system is ensuring that there
    is never a mismatch between the cache key generated for a lambda and the SQL string
    it will produce. The [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") and related objects will run and analyze
    the given lambda in order to calculate how it should be cached on each run, trying
    to detect any potential problems. Basic guidelines include:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在 lambda SQL 系统中，重点是确保为 lambda 生成的缓存键与其将产生的 SQL 字符串永远不会不匹配。[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 及其相关对象将运行并分析给定的 lambda，以便计算在每次运行时应该如何对其进行缓存，尝试检测任何潜在问题。基本指南包括：
- en: '**Any kind of statement is supported** - while it’s expected that [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs are the prime use case for [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt"), DML statements such as [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") and [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") are equally usable:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任何类型的语句都受支持** - 虽然预期 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造是 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 的主要用例，但 DML 语句如 [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 和 [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 同样可用：'
- en: '[PRE41]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**ORM use cases directly supported as well** - the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") can accommodate ORM functionality completely
    and used directly with [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ORM 支持的用例直接得到支持** - [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 可以完全适应 ORM 功能，并直接与 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 一起使用：'
- en: '[PRE42]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**Bound parameters are automatically accommodated** - in contrast to SQLAlchemy’s
    previous “baked query” system, the lambda SQL system accommodates for Python literal
    values which become SQL bound parameters automatically. This means that even though
    a given lambda runs only once, the values that become bound parameters are extracted
    from the **closure** of the lambda on every run:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定参数会自动适应** - 与 SQLAlchemy 之前的“烘焙查询”系统相比，lambda SQL 系统会自动适应成为 SQL 绑定参数的 Python
    文字值。这意味着即使一个给定的 lambda 只运行一次，每次运行时生成的绑定参数的值也会从 lambda 的 **闭包** 中提取出来：'
- en: '[PRE43]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Above, [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") extracted the values of `x`
    and `y` from the **closure** of the lambda that is generated each time `my_stmt()`
    is invoked; these were substituted into the cached SQL construct as the values
    of the parameters.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的例子中，[`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 从每次调用 `my_stmt()` 时生成的 lambda
    的 **闭包** 中提取了 `x` 和 `y` 的值；这些值被替换为参数的值，并缓存到 SQL 结构中。
- en: '**The lambda should ideally produce an identical SQL structure in all cases**
    - Avoid using conditionals or custom callables inside of lambdas that might make
    it produce different SQL based on inputs; if a function might conditionally use
    two different SQL fragments, use two separate lambdas:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最好的情况是 lambda 在所有情况下产生相同的 SQL 结构** - 避免在 lambda 内部使用条件语句或自定义可调用对象，因为这可能会根据输入产生不同的
    SQL；如果一个函数可能会有条件地使用两个不同的 SQL 片段，则使用两个单独的 lambda：'
- en: '[PRE44]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: There are a variety of failures which can occur if the lambda does not produce
    a consistent SQL construct and some are not trivially detectable right now.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 lambda 表达式不能生成一致的 SQL 结构，则可能会发生各种故障，并且有些故障目前无法轻松检测到。
- en: '**Don’t use functions inside the lambda to produce bound values** - the bound
    value tracking approach requires that the actual value to be used in the SQL statement
    be locally present in the closure of the lambda. This is not possible if values
    are generated from other functions, and the [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") should normally raise an error if this
    is attempted:'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要在 lambda 中使用函数来生成绑定值** - 绑定值跟踪方法要求 SQL 语句中要使用的实际值在 lambda 的闭包中本地存在。如果值是从其他函数生成的，则这是不可能的，并且如果尝试这样做，[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 通常会引发错误：'
- en: '[PRE45]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Above, the use of `get_x()` and `get_y()`, if they are necessary, should occur
    **outside** of the lambda and assigned to a local closure variable:'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述示例中，如果需要，`get_x()` 和 `get_y()` 的使用应该发生在 lambda 的**外部**，并分配给一个本地闭包变量：
- en: '[PRE46]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '**Avoid referring to non-SQL constructs inside of lambdas as they are not cacheable
    by default** - this issue refers to how the [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") creates a cache key from other closure
    variables within the statement. In order to provide the best guarantee of an accurate
    cache key, all objects located in the closure of the lambda are considered to
    be significant, and none will be assumed to be appropriate for a cache key by
    default. So the following example will also raise a rather detailed error message:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免在 lambda 内部引用非 SQL 结构，因为默认情况下它们是不可缓存的** - 这个问题涉及到 [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 如何从语句内的其他闭包变量创建缓存键。为了提供最佳的缓存键准确性保证，lambda
    闭包中的所有对象都被认为是重要的，并且默认情况下不会假设它们适用于缓存键。因此，以下示例还将引发一个相当详细的错误消息：'
- en: '[PRE47]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The above error indicates that [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") will not assume that the `Foo` object
    passed in will continue to behave the same in all cases. It also won’t assume
    it can use `Foo` as part of the cache key by default; if it were to use the `Foo`
    object as part of the cache key, if there were many different `Foo` objects this
    would fill up the cache with duplicate information, and would also hold long-lasting
    references to all of these objects.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述错误表明 [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 不会假设传入的 `Foo` 对象在所有情况下都会保持相同的行为。它也不会假设默认情况下可以使用
    `Foo` 作为缓存键；如果将 `Foo` 对象用作缓存键，如果有许多不同的 `Foo` 对象，这将用重复信息填充缓存，并且还会对所有这些对象保持长期引用。
- en: 'The best way to resolve the above situation is to not refer to `foo` inside
    of the lambda, and refer to it **outside** instead:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决上述情况的最佳方法是不在 lambda 内部引用 `foo`，而是在**外部**引用它：
- en: '[PRE48]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In some situations, if the SQL structure of the lambda is guaranteed to never
    change based on input, to pass `track_closure_variables=False` which will disable
    any tracking of closure variables other than those used for bound parameters:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，如果 lambda 的 SQL 结构保证不会根据输入更改，则传递 `track_closure_variables=False`，这将禁用除了用于绑定参数的闭包变量之外的任何追踪：
- en: '[PRE49]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'There is also the option to add objects to the element to explicitly form part
    of the cache key, using the `track_on` parameter; using this parameter allows
    specific values to serve as the cache key and will also prevent other closure
    variables from being considered. This is useful for cases where part of the SQL
    being constructed originates from a contextual object of some sort that may have
    many different values. In the example below, the first segment of the SELECT statement
    will disable tracking of the `foo` variable, whereas the second segment will explicitly
    track `self` as part of the cache key:'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有一种选项可以将对象添加到元素中，显式形成缓存键的一部分，使用 `track_on` 参数；使用此参数允许特定值作为缓存键，并且还将阻止考虑其他闭包变量。这对于构造的
    SQL 的一部分源自某种上下文对象的情况非常有用，该对象可能具有许多不同的值。在下面的示例中，SELECT 语句的第一部分将禁用对 `foo` 变量的跟踪，而第二部分将显式跟踪
    `self` 作为缓存键的一部分：
- en: '[PRE50]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Using `track_on` means the given objects will be stored long term in the lambda’s
    internal cache and will have strong references for as long as the cache doesn’t
    clear out those objects (an LRU scheme of 1000 entries is used by default).
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `track_on` 意味着给定对象将长期存储在 lambda 的内部缓存中，并且只要缓存不清除这些对象（默认情况下使用 1000 个条目的 LRU
    方案）就会具有强引用。
- en: Cache Key Generation
  id: totrans-245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓存键生成
- en: In order to understand some of the options and behaviors which occur with lambda
    SQL constructs, an understanding of the caching system is helpful.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解与lambda SQL构造相关的一些选项和行为，了解缓存系统是有帮助的。
- en: 'SQLAlchemy’s caching system normally generates a cache key from a given SQL
    expression construct by producing a structure that represents all the state within
    the construct:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的缓存系统通常通过生成表示构造中所有状态的结构来从给定的SQL表达式构造中生成缓存键：
- en: '[PRE51]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The above key is stored in the cache which is essentially a dictionary, and
    the value is a construct that among other things stores the string form of the
    SQL statement, in this case the phrase “SELECT q”. We can observe that even for
    an extremely short query the cache key is pretty verbose as it has to represent
    everything that may vary about what’s being rendered and potentially executed.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 上述键存储在基本上是字典的缓存中，值是一个结构，其中包括SQL语句的字符串形式，本例中是短语“SELECT q”。我们可以观察到，即使对于一个极短的查询，缓存键也是相当冗长的，因为它必须表示关于正在呈现和潜在执行的一切可能变化的内容。
- en: 'The lambda construction system by contrast creates a different kind of cache
    key:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，lambda构造系统创建了一种不同类型的缓存键：
- en: '[PRE52]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Above, we see a cache key that is vastly shorter than that of the non-lambda
    statement, and additionally that production of the `select(column("q"))` construct
    itself was not even necessary; the Python lambda itself contains an attribute
    called `__code__` which refers to a Python code object that within the runtime
    of the application is immutable and permanent.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们看到的缓存键比非lambda语句的要短得多，而且甚至不需要产生`select(column("q"))`构造本身；Python lambda本身包含一个名为`__code__`的属性，该属性引用一个Python代码对象，在应用程序的运行时是不可变和永久的。
- en: 'When the lambda also includes closure variables, in the normal case that these
    variables refer to SQL constructs such as column objects, they become part of
    the cache key, or if they refer to literal values that will be bound parameters,
    they are placed in a separate element of the cache key:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 当lambda还包括闭包变量时，在这些变量引用SQL构造（例如列对象）的常规情况下，它们将成为缓存键的一部分；如果它们引用将绑定参数的文字值，则它们将放置在缓存键的一个单独元素中：
- en: '[PRE53]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The above [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") includes two lambdas, both
    of which refer to the `col` closure variable, so the cache key will represent
    both of these segments as well as the `column()` object:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement")包括两个lambda，两者都引用`col`闭包变量，因此缓存键将表示这两个片段以及`column()`对象：
- en: '[PRE54]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The second part of the cache key has retrieved the bound parameters that will
    be used when the statement is invoked:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存键的第二部分已检索到将在调用语句时使用的绑定参数：
- en: '[PRE55]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'For a series of examples of “lambda” caching with performance comparisons,
    see the “short_selects” test suite within the [Performance](../orm/examples.html#examples-performance)
    performance example.  ## “Insert Many Values” Behavior for INSERT statements'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '有关带有性能比较的“lambda”缓存的一系列示例，请参阅[性能](../orm/examples.html#examples-performance)示例中的“short_selects”测试套件。  ##
    “对于INSERT语句的插入多个值”行为'
- en: 'New in version 2.0: see [Optimized ORM bulk insert now implemented for all
    backends other than MySQL](../changelog/whatsnew_20.html#change-6047) for background
    on the change including sample performance tests'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能：参见[除MySQL外所有后端现已实现的优化ORM批量插入](../changelog/whatsnew_20.html#change-6047)以了解更改的背景，包括示例性能测试
- en: Tip
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [insertmanyvalues](../glossary.html#term-insertmanyvalues) feature is a
    **transparently available** performance feature which requires no end-user intervention
    in order for it to take place as needed. This section describes the architecture
    of the feature as well as how to measure its performance and tune its behavior
    in order to optimize the speed of bulk INSERT statements, particularly as used
    by the ORM.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能是一个**透明可用**的性能特性，不需要用户干预即可按需进行。本节描述了该特性的架构以及如何测量其性能并调整其行为以优化ORM使用的批量INSERT语句的速度。'
- en: As more databases have added support for INSERT..RETURNING, SQLAlchemy has undergone
    a major change in how it approaches the subject of INSERT statements where there’s
    a need to acquire server-generated values, most importantly server-generated primary
    key values which allow the new row to be referenced in subsequent operations.
    In particular, this scenario has long been a significant performance issue in
    the ORM, which relies on being able to retrieve server-generated primary key values
    in order to correctly populate the [identity map](../glossary.html#term-identity-map).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 随着更多的数据库增加了对 INSERT..RETURNING 的支持，SQLAlchemy 在处理需要获取服务器生成值的 INSERT 语句的方式上发生了重大变化，其中最重要的是服务器生成的主键值，它们允许在后续操作中引用新行。特别是，在
    ORM 中，这种情况长期以来一直是一个重大的性能问题，因为它依赖于能够检索服务器生成的主键值，以便正确填充 [标识映射](../glossary.html#term-identity-map)。
- en: With recent support for RETURNING added to SQLite and MariaDB, SQLAlchemy no
    longer needs to rely upon the single-row-only [cursor.lastrowid](https://peps.python.org/pep-0249/#lastrowid)
    attribute provided by the [DBAPI](../glossary.html#term-DBAPI) for most backends;
    RETURNING may now be used for all [SQLAlchemy-included](../dialects/index.html#included-dialects)
    backends with the exception of MySQL. The remaining performance limitation, that
    the [cursor.executemany()](https://peps.python.org/pep-0249/#executemany) DBAPI
    method does not allow for rows to be fetched, is resolved for most backends by
    foregoing the use of `executemany()` and instead restructuring individual INSERT
    statements to each accommodate a large number of rows in a single statement that
    is invoked using `cursor.execute()`. This approach originates from the [psycopg2
    fast execution helpers](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)
    feature of the `psycopg2` DBAPI, which SQLAlchemy incrementally added more and
    more support towards in recent release series.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 SQLite 和 MariaDB 最近对 RETURNING 的支持，SQLAlchemy 不再需要依赖于大多数后端的单行限制 [cursor.lastrowid](https://peps.python.org/pep-0249/#lastrowid)
    属性；除了 MySQL 外，现在可以在所有 [SQLAlchemy 包含的](../dialects/index.html#included-dialects)
    后端使用 RETURNING。剩下的性能限制是，[cursor.executemany()](https://peps.python.org/pep-0249/#executemany)
    DBAPI 方法不允许获取行，对于大多数后端来说，这个问题已经通过放弃使用 `executemany()`，改为重构单个 INSERT 语句来容纳大量行，并在单个语句中使用
    `cursor.execute()` 调用来解决。这种方法源自于 `psycopg2` DBAPI 的 [psycopg2 快速执行辅助功能](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)，SQLAlchemy
    在最近的发布系列中逐渐增加了对其的支持。
- en: Current Support
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前支持
- en: The feature is enabled for all backend included in SQLAlchemy that support RETURNING,
    with the exception of Oracle for which both the cx_Oracle and OracleDB drivers
    offer their own equivalent feature. The feature normally takes place when making
    use of the [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") method of an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct in conjunction with [executemany](../glossary.html#term-executemany)
    execution, which occurs when passing a list of dictionaries to the [`Connection.execute.parameters`](#sqlalchemy.engine.Connection.execute.params.parameters
    "sqlalchemy.engine.Connection.execute") parameter of the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") methods (as well as equivalent methods under
    [asyncio](../orm/extensions/asyncio.html) and shorthand methods like [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")). It also takes place within the ORM [unit of
    work](../glossary.html#term-unit-of-work) process when using methods such as [`Session.add()`](../orm/session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") and [`Session.add_all()`](../orm/session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") to add rows.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能对所有支持 RETURNING 的 SQLAlchemy 后端都已启用，但对于 Oracle，除了 cx_Oracle 和 OracleDB 驱动程序提供其自己的等效功能外，其他均支持。该功能通常在使用
    [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning "sqlalchemy.sql.expression.Insert.returning")
    方法的 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    结构与 [executemany](../glossary.html#term-executemany) 执行配合使用时发生，即当将字典列表传递给 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 或 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法的 [`Connection.execute.parameters`](#sqlalchemy.engine.Connection.execute.params.parameters
    "sqlalchemy.engine.Connection.execute.params.parameters") 参数时（以及 [asyncio](../orm/extensions/asyncio.html)
    和 [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") 等简写方法下的等效方法）。在使用诸如 [`Session.add()`](../orm/session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") 和 [`Session.add_all()`](../orm/session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") 等方法添加行时，它也在 ORM [工作单元](../glossary.html#term-unit-of-work)
    过程中发生。
- en: 'For SQLAlchemy’s included dialects, support or equivalent support is currently
    as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLAlchemy 包含的方言，支持或等效支持目前如下：
- en: SQLite - supported for SQLite versions 3.35 and above
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 支持 SQLite 版本 3.35 及以上
- en: PostgreSQL - all supported Postgresql versions (9 and above)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 所有支持的 Postgresql 版本（9 及以上）
- en: SQL Server - all supported SQL Server versions [[1]](#id2)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server - 所有支持的 SQL Server 版本 [[1]](#id2)
- en: MariaDB - supported for MariaDB versions 10.5 and above
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB - 支持 MariaDB 版本 10.5 及以上
- en: MySQL - no support, no RETURNING feature is present
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 不支持，没有 RETURNING 功能
- en: Oracle - supports RETURNING with executemany using native cx_Oracle / OracleDB
    APIs, for all supported Oracle versions 9 and above, using multi-row OUT parameters.
    This is not the same implementation as “executemanyvalues”, however has the same
    usage patterns and equivalent performance benefits.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 支持使用本地 cx_Oracle / OracleDB API 执行多行 OUT 参数的 RETURNING，支持所有支持的 Oracle
    版本 9 及以上。这不是与“executemanyvalues”相同的实现，但具有相同的使用模式和等效的性能优势。
- en: 'Changed in version 2.0.10:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.10 中更改：
- en: Disabling the feature
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用该功能
- en: 'To disable the “insertmanyvalues” feature for a given backend for an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") overall, pass the [`create_engine.use_insertmanyvalues`](engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") parameter as `False` to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '要禁用给定后端的“insertmanyvalues”功能，以及 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 中的 [`create_engine.use_insertmanyvalues`](engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") 参数作为 `False` 传递给 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"):'
- en: '[PRE56]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The feature can also be disabled from being used implicitly for a particular
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    by passing the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter as `False`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能也可以通过将 [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") 参数传递为 `False` 来禁止为特定的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象隐式使用：
- en: '[PRE57]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The reason one might want to disable RETURNING for a specific table is to work
    around backend-specific limitations.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能想要针对特定表禁用RETURNING的原因是为了解决特定后端的限制。
- en: Batched Mode Operation
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 批处理模式操作
- en: 'The feature has two modes of operation, which are selected transparently on
    a per-dialect, per-[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    basis. One is **batched mode**, which reduces the number of database round trips
    by rewriting an INSERT statement of the form:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 该特性有两种操作模式，根据每个方言、每个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")自动透明选择。一种是**批处理模式**，通过重写INSERT语句的形式：
- en: '[PRE58]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'into a “batched” form such as:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 转换成“批处理”形式，如下所示：
- en: '[PRE59]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: where above, the statement is organized against a subset (a “batch”) of the
    input data, the size of which is determined by the database backend as well as
    the number of parameters in each batch to correspond to known limits for statement
    size / number of parameters. The feature then executes the INSERT statement once
    for each batch of input data until all records are consumed, concatenating the
    RETURNING results for each batch into a single large rowset that’s available from
    a single [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 当上述语句针对输入数据的子集（“批处理”）进行组织时，其大小由数据库后端确定，并且每个批次的参数数量与已知的语句大小/参数数量相对应。该特性然后针对每个输入数据批次执行一次INSERT语句，直到所有记录都被消耗完毕，将每个批次的RETURNING结果连接成一个单个大行集，可以从单个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象中获取。
- en: This “batched” form allows INSERT of many rows using much fewer database round
    trips, and has been shown to allow dramatic performance improvements for most
    backends where it’s supported.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“批处理”形式允许使用更少的数据库往返进行许多行的INSERT，并且已经证明在大多数支持的后端上可以实现显著的性能提升。
- en: '### Correlating RETURNING rows to parameter sets'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将RETURNING行与参数集关联起来'
- en: New in version 2.0.10.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.10中新增。
- en: The “batch” mode query illustrated in the previous section does not guarantee
    the order of records returned would correspond with that of the input data. When
    used by the SQLAlchemy ORM [unit of work](../glossary.html#term-unit-of-work)
    process, as well as for applications which correlate returned server-generated
    values with input data, the [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") and [`UpdateBase.return_defaults()`](dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") methods include an option
    [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") which indicates that “insertmanyvalues”
    mode should guarantee this correspondence. This is **not related** to the order
    in which records are actually INSERTed by the database backend, which is **not**
    assumed under any circumstances; only that the returned records should be organized
    when received back to correspond to the order in which the original input data
    was passed.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中示例的“批处理”模式查询不保证返回的记录顺序与输入数据的顺序相对应。当由SQLAlchemy ORM的[unit of work](../glossary.html#term-unit-of-work)过程使用时，以及对与输入数据相关的返回的服务器生成的值进行关联的应用程序时，[`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")和[`UpdateBase.return_defaults()`](dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")方法包括一个选项[`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order")，指示“insertmanyvalues”模式应该保证这种对应关系。这与数据库后端实际INSERT的记录顺序无关，在任何情况下都不能假设；只有当收到返回的记录时应该有序排列，以与原始输入数据传递的顺序相对应。
- en: When the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") parameter is present, for tables
    that use server-generated integer primary key values such as `IDENTITY`, PostgreSQL
    `SERIAL`, MariaDB `AUTO_INCREMENT`, or SQLite’s `ROWID` scheme, “batch” mode may
    instead opt to use a more complex INSERT..RETURNING form, in conjunction with
    post-execution sorting of rows based on the returned values, or if such a form
    is not available, the “insertmanyvalues” feature may gracefully degrade to “non-batched”
    mode which runs individual INSERT statements for each parameter set.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") 参数存在时，对于使用服务器生成的整数主键值（如 `IDENTITY`、PostgreSQL
    `SERIAL`、MariaDB `AUTO_INCREMENT` 或 SQLite 的 `ROWID` 方案）的表，可能会选择使用更复杂的 INSERT..RETURNING
    形式，并根据返回的值对行进行后执行排序，或者如果不存在这样的形式，则 “insertmanyvalues” 功能可能会优雅地降级到“非批处理”模式，为每个参数集运行单独的
    INSERT 语句。
- en: 'For example, on SQL Server when an auto incrementing `IDENTITY` column is used
    as the primary key, the following SQL form is used:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 SQL Server 中，当自动增量的 `IDENTITY` 列用作主键时，使用以下 SQL 形式：
- en: '[PRE60]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: A similar form is used for PostgreSQL as well, when primary key columns use
    SERIAL or IDENTITY. The above form **does not** guarantee the order in which rows
    are inserted. However, it does guarantee that the IDENTITY or SERIAL values will
    be created in order with each parameter set [[2]](#id5). The “insertmanyvalues”
    feature then sorts the returned rows for the above INSERT statement by incrementing
    integer identity.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PostgreSQL 也是类似的形式，当主键列使用 SERIAL 或 IDENTITY 时。上述形式**不**保证插入行的顺序。但它确保 IDENTITY
    或 SERIAL 值将按照每个参数集的顺序创建[[2]](#id5)。然后，“insertmanyvalues” 功能通过递增整数标识对上述 INSERT
    语句返回的行进行排序。
- en: For the SQLite database, there is no appropriate INSERT form that can correlate
    the production of new ROWID values with the order in which the parameter sets
    are passed. As a result, when using server-generated primary key values, the SQLite
    backend will degrade to “non-batched” mode when ordered RETURNING is requested.
    For MariaDB, the default INSERT form used by insertmanyvalues is sufficient, as
    this database backend will line up the order of AUTO_INCREMENT with the order
    of input data when using InnoDB [[3]](#id6).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLite 数据库，不存在适当的 INSERT 形式可以将新的 ROWID 值的生成与传递参数集的顺序进行关联。因此，在请求有序 RETURNING
    时，使用服务器生成的主键值时，SQLite 后端将降级为“非批处理”模式。对于 MariaDB，默认的 INSERT 形式对 insertmanyvalues
    足够，因为此数据库后端在使用 InnoDB 时会将 AUTO_INCREMENT 的顺序与输入数据的顺序对齐[[3]](#id6)。
- en: For a client-side generated primary key, such as when using the Python `uuid.uuid4()`
    function to generate new values for a [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") column, the “insertmanyvalues” feature transparently
    includes this column in the RETURNING records and correlates its value to that
    of the given input records, thus maintaining correspondence between input records
    and result rows. From this, it follows that all backends allow for batched, parameter-correlated
    RETURNING order when client-side-generated primary key values are used.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对于客户端生成的主键，例如当使用 Python 的 `uuid.uuid4()` 函数为 [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 列生成新值时，“insertmanyvalues” 功能会透明地将此列包含在 RETURNING 记录中，并将其值与给定输入记录的值进行关联，从而保持输入记录和结果行之间的对应关系。由此可见，当使用客户端生成的主键值时，所有后端都允许批处理，参数相关的
    RETURNING 顺序。
- en: The subject of how “insertmanyvalues” “batch” mode determines a column or columns
    to use as a point of correspondence between input parameters and RETURNING rows
    is known as an [insert sentinel](../glossary.html#term-insert-sentinel), which
    is a specific column or columns that are used to track such values. The “insert
    sentinel” is normally selected automatically, however can also be user-configuration
    for extremely special cases; the section [Configuring Sentinel Columns](#engine-insertmanyvalues-sentinel-columns)
    describes this.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues” 的 “batch” 模式确定了一列或多列用作输入参数和返回行之间对应点的列，这被称为[插入标记](../glossary.html#term-insert-sentinel)，它是用于跟踪这些值的特定列。通常会自动选择“插入标记”，但也可以根据极端特殊情况进行用户配置；章节[配置标记列](#engine-insertmanyvalues-sentinel-columns)对此进行了描述。
- en: For backends that do not offer an appropriate INSERT form that can deliver server-generated
    values deterministically aligned with input values, or for [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") configurations that feature other kinds of server generated
    primary key values, “insertmanyvalues” mode will make use of **non-batched** mode
    when guaranteed RETURNING ordering is requested.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不提供适当的 INSERT 形式以确定地与输入值对齐的服务器生成值的后端，或者对于具有其他类型服务器生成的主键值的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")配置，“insertmanyvalues”模式将在保证请求 RETURNING 排序时使用**非批处理**模式。
- en: See also
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Microsoft SQL Server rationale
  id: totrans-300
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server 的原理
- en: ''
  id: totrans-301
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-302
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-303
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: “INSERT queries that use SELECT with ORDER BY to populate rows guarantees how
    identity values are computed but not the order in which the rows are inserted.”
    [https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions](https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions)
  id: totrans-304
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: “使用 SELECT 和 ORDER BY 来填充行的 INSERT 查询保证了如何计算标识值，但不保证插入行的顺序。” [https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions](https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions)
- en: ''
  id: totrans-305
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-306
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PostgreSQL batched INSERT Discussion
  id: totrans-307
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 批处理 INSERT 讨论
- en: ''
  id: totrans-308
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-309
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-310
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Original description in 2018 [https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us](https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us)
  id: totrans-311
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2018 年的原始描述 [https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us](https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us)
- en: ''
  id: totrans-312
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-313
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-314
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Follow up in 2023 - [https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com](https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com)
  id: totrans-315
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2023 年的后续 - [https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com](https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com)
- en: 'MariaDB AUTO_INCREMENT behavior (using the same InnoDB engine as MySQL):'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB AUTO_INCREMENT 行为（使用与 MySQL 相同的 InnoDB 引擎）：
- en: '[https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)'
- en: '[https://dba.stackexchange.com/a/72099](https://dba.stackexchange.com/a/72099)  ###
    Non-Batched Mode Operation'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dba.stackexchange.com/a/72099](https://dba.stackexchange.com/a/72099)  ###
    非批处理模式操作'
- en: For [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    configurations that do not have client side primary key values, and offer server-generated
    primary key values (or no primary key) that the database in question is not able
    to invoke in a deterministic or sortable way relative to multiple parameter sets,
    the “insertmanyvalues” feature when tasked with satisfying the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") requirement for an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement may instead opt to use **non-batched
    mode**.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")配置，如果没有客户端主键值，并且提供服务器生成的主键值（或没有主键），而数据库无法根据多个参数集以确定性或可排序的方式调用，则“insertmanyvalues”功能在满足[`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning")要求的情况下，可能会选择使用**非批处理模式**。
- en: In this mode, the original SQL form of INSERT is maintained, and the “insertmanyvalues”
    feature will instead run the statement as given for each parameter set individually,
    organizing the returned rows into a full result set. Unlike previous SQLAlchemy
    versions, it does so in a tight loop that minimizes Python overhead. In some cases,
    such as on SQLite, “non-batched” mode performs exactly as well as “batched” mode.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模式下，保持原始的 INSERT SQL 形式，并且“insertmanyvalues”功能将为每个参数集单独运行给定的语句，将返回的行组织成完整的结果集。与以前的
    SQLAlchemy 版本不同，它会在最小化 Python 开销的紧凑循环中执行。在某些情况下，例如在 SQLite 上，“非批处理”模式的性能与“批处理”模式完全相同。
- en: Statement Execution Model
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语句执行模型
- en: For both “batched” and “non-batched” modes, the feature will necessarily invoke
    **multiple INSERT statements** using the DBAPI `cursor.execute()` method, within
    the scope of **single** call to the Core-level [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, with each statement containing
    up to a fixed limit of parameter sets. This limit is configurable as described
    below at [Controlling the Batch Size](#engine-insertmanyvalues-page-size). The
    separate calls to `cursor.execute()` are logged individually and also individually
    passed along to event listeners such as [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") (see [Logging and
    Events](#engine-insertmanyvalues-events) below).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“批量”和“非批量”模式，该特性必然会使用 DBAPI `cursor.execute()` 方法调用**多个 INSERT 语句**，在**单个**对核心级
    [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    方法的调用范围内，每个语句包含多达固定数量的参数集。此限制可按下面的描述进行配置，位于 [控制批量大小](#engine-insertmanyvalues-page-size)。对
    `cursor.execute()` 的单独调用被单独记录，并且单独传递给事件侦听器，如 [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")（请参阅下面的 [日志和事件](#engine-insertmanyvalues-events)）。
- en: '#### Configuring Sentinel Columns'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 配置哨兵列'
- en: In typical cases, the “insertmanyvalues” feature in order to provide INSERT..RETURNING
    with deterministic row order will automatically determine a sentinel column from
    a given table’s primary key, gracefully degrading to “row at a time” mode if one
    cannot be identified. As a completely **optional** feature, to get full “insertmanyvalues”
    bulk performance for tables that have server generated primary keys whose default
    generator functions aren’t compatible with the “sentinel” use case, other non-primary
    key columns may be marked as “sentinel” columns assuming they meet certain requirements.
    A typical example is a non-primary key [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") column with a client side default such as the Python
    `uuid.uuid4()` function. There is also a construct to create simple integer columns
    with a a client side integer counter oriented towards the “insertmanyvalues” use
    case.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型情况下，为了提供具有确定性行顺序的 INSERT..RETURNING，"insertmanyvalues" 特性将自动从给定表的主键中确定一个哨兵列，如果无法识别，则优雅地降级到“逐行”模式。作为一个完全**可选**的特性，为了获得对于具有服务器生成的主键的表的完整“insertmanyvalues”批量性能，其默认生成器函数与“哨兵”用例不兼容的情况，其他非主键列可以被标记为“哨兵”列，假设它们满足某些要求。一个典型的例子是具有客户端默认值的非主键
    [`Uuid`](type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") 列，如 Python
    的 `uuid.uuid4()` 函数。还有一种构造方法可以创建具有面向“insertmanyvalues”用例的客户端整数计数器的简单整数列。
- en: 'Sentinel columns may be indicated by adding [`Column.insert_sentinel`](metadata.html#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column") to qualifying columns. The most basic “qualifying”
    column is a not-nullable, unique column with a client side default, such as a
    UUID column as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在合格的列上添加 [`Column.insert_sentinel`](metadata.html#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column") 来指示哨兵列。最基本的“合格”列是一个非空且唯一的列，具有客户端默认值，例如 UUID 列如下所示：
- en: '[PRE61]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'When using ORM Declarative models, the same forms are available using the [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 ORM Declarative 模型时，可以使用 [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造相同的形式：
- en: '[PRE62]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: While the values generated by the default generator **must** be unique, the
    actual UNIQUE constraint on the above “sentinel” column, indicated by the `unique=True`
    parameter, itself is optional and may be omitted if not desired.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管默认生成器生成的值**必须**是唯一的，但上述“哨兵”列上的实际 UNIQUE 约束，由 `unique=True` 参数指示，本身是可选的，如果不需要，可以省略。
- en: 'There is also a special form of “insert sentinel” that’s a dedicated nullable
    integer column which makes use of a special default integer counter that’s only
    used during “insertmanyvalues” operations; as an additional behavior, the column
    will omit itself from SQL statements and result sets and behave in a mostly transparent
    manner. It does need to be physically present within the actual database table,
    however. This style of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    may be constructed using the function [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel"):'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种特殊的“插入标志”形式，它是一个专用的可空整数列，该列使用仅在“insertmanyvalues”操作期间使用的特殊默认整数计数器；作为额外的行为，该列将在
    SQL 语句和结果集中省略自身，并以基本透明的方式行为。但是，它确实需要在实际的数据库表中物理存在。可以使用函数 [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") 构建这种 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 样式：
- en: '[PRE63]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'When using ORM Declarative, a Declarative-friendly version of [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") is available called [`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel"), which has the ability to be used on the
    Base class or a mixin; if packaged using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr"), the column will apply itself to all table-bound
    subclasses including within joined inheritance hierarchies:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 ORM Declarative 时，有一个友好的版本 [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") 称为 [`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel") 可供使用，它可以在 Base 类或 mixin 上使用；如果使用 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 封装，该列将应用于所有包括在联合继承层次结构中的表绑定子类中：
- en: '[PRE64]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'In the example above, both “my_table” and “sub_table” will have an additional
    integer column named “_sentinel” that can be used by the “insertmanyvalues” feature
    to help optimize bulk inserts used by the ORM.  ### Controlling the Batch Size'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面的示例中，“my_table” 和 “sub_table” 都将有一个名为 “_sentinel” 的额外整数列，该列可供 ORM 使用的 “insertmanyvalues”
    功能来帮助优化批量插入。 ### 控制批次大小'
- en: A key characteristic of “insertmanyvalues” is that the size of the INSERT statement
    is limited on a fixed max number of “values” clauses as well as a dialect-specific
    fixed total number of bound parameters that may be represented in one INSERT statement
    at a time. When the number of parameter dictionaries given exceeds a fixed limit,
    or when the total number of bound parameters to be rendered in a single INSERT
    statement exceeds a fixed limit (the two fixed limits are separate), multiple
    INSERT statements will be invoked within the scope of a single [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") call, each of which accommodate for a
    portion of the parameter dictionaries, known as a “batch”. The number of parameter
    dictionaries represented within each “batch” is then known as the “batch size”.
    For example, a batch size of 500 means that each INSERT statement emitted will
    INSERT at most 500 rows.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues”的一个关键特性是 INSERT 语句的大小受到固定最大数量的“values”子句以及方言特定的固定的一次性可在一个
    INSERT 语句中表示的绑定参数总数的限制。当给定的参数字典数量超过固定限制时，或者当要在单个 INSERT 语句中呈现的绑定参数总数超过固定限制时（这两个固定限制是分开的），将在单个
    [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    调用范围内调用多个 INSERT 语句，其中每个 INSERT 语句都容纳一部分参数字典，称为“批次”。每个“批次”中表示的参数字典数量就是“批次大小”。例如，批次大小为
    500 意味着每个发出的 INSERT 语句最多将插入 500 行。
- en: It’s potentially important to be able to adjust the batch size, as a larger
    batch size may be more performant for an INSERT where the value sets themselves
    are relatively small, and a smaller batch size may be more appropriate for an
    INSERT that uses very large value sets, where both the size of the rendered SQL
    as well as the total data size being passed in one statement may benefit from
    being limited to a certain size based on backend behavior and memory constraints.
    For this reason the batch size can be configured on a per-[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") as well as a per-statement basis. The parameter limit
    on the other hand is fixed based on the known characteristics of the database
    in use.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 能够调整批处理大小可能是很重要的，因为较大的批处理大小对于插入（INSERT）操作可能更有效率，其中值集本身相对较小，并且较小的批处理大小可能更适合使用非常大的值集的插入操作，其中渲染的
    SQL 大小以及传递给一个语句的总数据大小可能受到基于后端行为和内存约束的特定大小的限制的影响。因此，批处理大小可以根据每个 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 和每个语句的基础进行配置。另一方面，参数限制是根据正在使用的数据库的已知特性固定的。
- en: The batch size defaults to 1000 for most backends, with an additional per-dialect
    “max number of parameters” limiting factor that may reduce the batch size further
    on a per-statement basis. The max number of parameters varies by dialect and server
    version; the largest size is 32700 (chosen as a healthy distance away from PostgreSQL’s
    limit of 32767 and SQLite’s modern limit of 32766, while leaving room for additional
    parameters in the statement as well as for DBAPI quirkiness). Older versions of
    SQLite (prior to 3.32.0) will set this value to 999\. MariaDB has no established
    limit however 32700 remains as a limiting factor for SQL message size.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数后端的批处理大小默认为 1000，具有额外的每个方言的“最大参数数”限制因素，可能会进一步减小每个语句的批处理大小。参数的最大数目因方言和服务器版本而异；最大值为
    32700（选择了一个距离 PostgreSQL 的限制 32767 和 SQLite 的现代限制 32766 很大的距离，同时为语句中的附加参数以及 DBAPI
    的怪异性留出了空间）。旧版本的 SQLite（在 3.32.0 之前）将此值设置为 999。MariaDB 没有确定的限制，但 32700 仍然作为 SQL
    消息大小的限制因素。
- en: 'The value of the “batch size” can be affected [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") wide via the [`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") parameter. Such as, to affect INSERT statements to
    include up to 100 parameter sets in each statement:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: “批处理大小”的值可以通过 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的 [`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") 参数进行全局设置。例如，要影响包含每个语句中的最多 100 个参数集的 INSERT 语句：
- en: '[PRE65]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The batch size may also be affected on a per statement basis using the [`Connection.execution_options.insertmanyvalues_page_size`](#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") execution option, such as per
    execution:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理大小也可以使用 [`Connection.execution_options.insertmanyvalues_page_size`](#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") 执行选项在每个语句的基础上进行影响，例如每次执行：
- en: '[PRE66]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Or configured on the statement itself:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在语句本身上进行配置：
- en: '[PRE67]  ### Logging and Events'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE67]  ### 记录和事件'
- en: 'The “insertmanyvalues” feature integrates fully with SQLAlchemy’s [statement
    logging](engines.html#dbengine-logging) as well as cursor events such as [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute"). When the list of
    parameters is broken into separate batches, **each INSERT statement is logged
    and passed to event handlers individually**. This is a major change compared to
    how the psycopg2-only feature worked in previous 1.x series of SQLAlchemy, where
    the production of multiple INSERT statements was hidden from logging and events.
    Logging display will truncate the long lists of parameters for readability, and
    will also indicate the specific batch of each statement. The example below illustrates
    an excerpt of this logging:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues” 功能与 SQLAlchemy 的[语句记录](engines.html#dbengine-logging)以及游标事件完全集成，例如
    [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")。当参数列表被拆分成单独的批次时，**每个
    INSERT 语句都将被单独记录并传递给事件处理程序**。这与之前 SQLAlchemy 1.x 系列中仅使用 psycopg2 的功能的工作方式相比是一个重大变化，之前的工作方式中，多个
    INSERT 语句的生成对于记录和事件是隐藏的。日志显示会截断长参数列表以便阅读，并且还会指示每个语句的特定批次。下面的示例说明了此日志的摘录：
- en: '[PRE68]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'When [non-batch mode](#engine-insertmanyvalues-non-batch) takes place, logging
    will indicate this along with the insertmanyvalues message:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [非批处理模式](#engine-insertmanyvalues-non-batch) 发生时，日志记录将会指示这一点，并显示 insertmanyvalues
    消息：
- en: '[PRE69]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](engines.html#dbengine-logging)'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置日志](engines.html#dbengine-logging)'
- en: Upsert Support
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Upsert 支持
- en: 'The PostgreSQL, SQLite, and MariaDB dialects offer backend-specific “upsert”
    constructs [`insert()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert"), [`insert()`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.insert
    "sqlalchemy.dialects.sqlite.insert") and [`insert()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert"), which are each [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") constructs that have an additional method
    such as `on_conflict_do_update()` or ``on_duplicate_key()`. These constructs also
    support “insertmanyvalues” behaviors when they are used with RETURNING, allowing
    efficient upserts with RETURNING to take place.  ## Engine Disposal'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 'PostgreSQL、SQLite 和 MariaDB 方言提供了特定于后端的“upsert”构造 [`insert()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert")、[`insert()`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.insert
    "sqlalchemy.dialects.sqlite.insert") 和 [`insert()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert")，它们分别是 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造，具有诸如 `on_conflict_do_update()` 或 ``on_duplicate_key()`
    的附加方法。当这些构造与 RETURNING 一起使用时，它们还支持“insertmanyvalues”行为，允许高效地进行带 RETURNING 的 upsert
    操作。  ## 引擎处理'
- en: The [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") refers
    to a connection pool, which means under normal circumstances, there are open database
    connections present while the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object is still resident in memory. When an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is garbage collected, its connection pool is no longer
    referred to by that [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    and assuming none of its connections are still checked out, the pool and its connections
    will also be garbage collected, which has the effect of closing out the actual
    database connections as well. But otherwise, the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") will hold onto open database connections assuming
    it uses the normally default pool implementation of [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool").
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 指的是一个连接池，这意味着在正常情况下，当
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象仍然驻留在内存中时，存在着打开的数据库连接。当一个
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 被垃圾回收时，它的连接池将不再被该
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 引用，并且假设没有连接仍然被检出，那么连接池及其连接也将被垃圾回收，这将关闭实际的数据库连接。但是除此之外，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 将保持打开的数据库连接，假设它使用的是通常的默认连接池实现 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")。'
- en: The [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") is intended
    to normally be a permanent fixture established up-front and maintained throughout
    the lifespan of an application. It is **not** intended to be created and disposed
    on a per-connection basis; it is instead a registry that maintains both a pool
    of connections as well as configurational information about the database and DBAPI
    in use, as well as some degree of internal caching of per-database resources.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 通常应该是一个事先建立并在应用程序的整个生命周期中维护的永久性构造。它**不**应该按照每个连接的方式创建和处理；相反，它是一个注册表，既维护着一组连接池，又维护着关于正在使用的数据库和
    DBAPI 的配置信息，以及某种程度上的针对每个数据库资源的内部缓存。'
- en: However, there are many cases where it is desirable that all connection resources
    referred to by the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    be completely closed out. It’s generally not a good idea to rely on Python garbage
    collection for this to occur for these cases; instead, the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") can be explicitly disposed using the [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method. This disposes of the engine’s underlying
    connection pool and replaces it with a new one that’s empty. Provided that the
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") is discarded
    at this point and no longer used, all **checked-in** connections which it refers
    to will also be fully closed.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有许多情况下希望所有由[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")引用的连接资源都被完全关闭。通常不建议依赖Python垃圾回收来处理这些情况；相反，可以使用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")方法显式地释放[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。这会处理引擎的底层连接池，并用一个空的新连接池替换它。只要此时丢弃了[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")并且不再使用它，它引用的所有**检入**连接也将被完全关闭。
- en: 'Valid use cases for calling [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") include:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")的有效用例包括：
- en: When a program wants to release any remaining checked-in connections held by
    the connection pool and expects to no longer be connected to that database at
    all for any future operations.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当程序想要释放连接池中的所有剩余已检入连接，并且不再期望对该数据库进行任何未来操作时。
- en: When a program uses multiprocessing or `fork()`, and an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object is copied to the child process, [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") should be called so that the engine creates
    brand new database connections local to that fork. Database connections generally
    do **not** travel across process boundaries. Use the [`Engine.dispose.close`](#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter set to False in this case. See the
    section [Using Connection Pools with Multiprocessing or os.fork()](pooling.html#pooling-multiprocessing)
    for more background on this use case.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当程序使用多进程或`fork()`，并且将[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象复制到子进程时，应调用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")，以便引擎在该fork中创建全新的数据库连接。数据库连接通常不会跨进程边界传输。在这种情况下，使用[`Engine.dispose.close`](#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose")参数设置为False。有关此用例的更多背景信息，请参见[使用连接池进行多进程或os.fork()](pooling.html#pooling-multiprocessing)部分。
- en: Within test suites or multitenancy scenarios where many ad-hoc, short-lived
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") objects may be
    created and disposed.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试套件或多租户场景中，可能会创建和处理许多临时的短寿命[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象。
- en: Connections that are **checked out** are **not** discarded when the engine is
    disposed or garbage collected, as these connections are still strongly referenced
    elsewhere by the application. However, after [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") is called, those connections are no longer
    associated with that [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine");
    when they are closed, they will be returned to their now-orphaned connection pool
    which will ultimately be garbage collected, once all connections which refer to
    it are also no longer referenced anywhere. Since this process is not easy to control,
    it is strongly recommended that [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") is called only after all checked out connections
    are checked in or otherwise de-associated from their pool.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 当引擎被处理或被垃圾回收时，**已签出**的连接不会被丢弃，因为这些连接仍然在应用程序的其他地方被强引用。但是，在调用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")之后，这些连接将不再与该[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")相关联；当它们关闭时，它们将返回到它们现在孤立的连接池中，该连接池最终会在所有引用它的连接都不再在任何地方被引用时被垃圾回收。由于这个过程不容易控制，强烈建议仅在所有签出的连接都已签入或以其他方式与它们的池解除关联后才调用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")。
- en: An alternative for applications that are negatively impacted by the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s use of connection pooling is to disable pooling
    entirely. This typically incurs only a modest performance impact upon the use
    of new connections, and means that when a connection is checked in, it is entirely
    closed out and is not held in memory. See [Switching Pool Implementations](pooling.html#pool-switching)
    for guidelines on how to disable pooling.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 对于受到 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象的连接池使用影响的应用程序，另一种选择是完全禁用连接池。这通常只会对使用新连接产生轻微的性能影响，并且意味着当连接被检入时，它会完全关闭并且不会在内存中保留。请参阅
    [切换连接池实现](pooling.html#pool-switching) 以获取有关如何禁用连接池的指南。
- en: See also
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Connection Pooling](pooling.html)'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接池](pooling.html)'
- en: '[Using Connection Pools with Multiprocessing or os.fork()](pooling.html#pooling-multiprocessing)  ##
    Working with Driver SQL and Raw DBAPI Connections'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[在多进程或 os.fork() 中使用连接池](pooling.html#pooling-multiprocessing)  ## 使用驱动程序 SQL
    和原始 DBAPI 连接'
- en: The introduction on using [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") made use of the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct in order to illustrate how textual
    SQL statements may be invoked. When working with SQLAlchemy, textual SQL is actually
    more of the exception rather than the norm, as the Core expression language and
    the ORM both abstract away the textual representation of SQL. However, the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct itself also provides some abstraction
    of textual SQL in that it normalizes how bound parameters are passed, as well
    as that it supports datatyping behavior for parameters and result set rows.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍使用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    时，使用了 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造来说明如何调用文本 SQL 语句。在使用 SQLAlchemy 时，文本 SQL 实际上更多地是例外而不是规范，因为核心表达式语言和 ORM 都将 SQL
    的文本表示抽象化了。但是，[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造本身也提供了对文本 SQL 的一些抽象，它规范了如何传递绑定参数，以及支持参数和结果集行的数据类型行为。
- en: Invoking SQL strings directly to the driver
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接调用驱动程序的 SQL 字符串
- en: 'For the use case where one wants to invoke textual SQL directly passed to the
    underlying driver (known as the [DBAPI](../glossary.html#term-DBAPI)) without
    any intervention from the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, the [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method may be used:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望直接传递给底层驱动程序（称为 [DBAPI](../glossary.html#term-DBAPI)）的文本 SQL 而不经过 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造的用例，可以使用 [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 方法：
- en: '[PRE70]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'New in version 1.4: Added the [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：新增了 [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 方法。
- en: '### Working with the DBAPI cursor directly'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '### 直接使用 DBAPI 游标'
- en: There are some cases where SQLAlchemy does not provide a genericized way at
    accessing some [DBAPI](../glossary.html#term-DBAPI) functions, such as calling
    stored procedures as well as dealing with multiple result sets. In these cases,
    it’s just as expedient to deal with the raw DBAPI connection directly.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，SQLAlchemy 并没有提供一种通用化的方法来访问一些 [DBAPI](../glossary.html#term-DBAPI) 函数，例如调用存储过程以及处理多个结果集。在这些情况下，直接处理原始的
    DBAPI 连接同样是一种方便的方式。
- en: 'The most common way to access the raw DBAPI connection is to get it from an
    already present [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object directly. It is present using the [`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") attribute:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 访问原始 DBAPI 连接的最常见方法是直接从已有的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象中获取。这可以通过 [`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") 属性进行访问：
- en: '[PRE71]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The DBAPI connection here is actually a “proxied” in terms of the originating
    connection pool, however this is an implementation detail that in most cases can
    be ignored. As this DBAPI connection is still contained within the scope of an
    owning [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, it is best to make use of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object for most features such as transaction control
    as well as calling the [`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method; if these operations are performed
    on the DBAPI connection directly, the owning [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") will not be aware of these changes in state.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 DBAPI 连接实际上是一个“代理”，就连接池的原始连接而言，然而这是一个大多数情况下可以忽略的实现细节。由于这个 DBAPI 连接仍然包含在一个拥有的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的范围内，最好使用[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象来进行大多数功能，如事务控制以及调用[`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close")方法；如果这些操作直接在 DBAPI 连接上执行，拥有的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")将不会意识到这些状态的变化。
- en: 'To overcome the limitations imposed by the DBAPI connection that is maintained
    by an owning [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a DBAPI connection is also available without the need to procure a [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") first, using the [`Engine.raw_connection()`](#sqlalchemy.engine.Engine.raw_connection
    "sqlalchemy.engine.Engine.raw_connection") method of [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"):'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服由拥有的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")维护的
    DBAPI 连接所施加的限制，还可以使用 [`Engine.raw_connection()`](#sqlalchemy.engine.Engine.raw_connection
    "sqlalchemy.engine.Engine.raw_connection") 方法获取一个 DBAPI 连接，而不需要先获取一个 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")：
- en: '[PRE72]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'This DBAPI connection is again a “proxied” form as was the case before. The
    purpose of this proxying is now apparent, as when we call the `.close()` method
    of this connection, the DBAPI connection is typically not actually closed, but
    instead [released](../glossary.html#term-released) back to the engine’s connection
    pool:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 DBAPI 连接再次是一个“代理”形式，就像以前的情况一样。这种代理的目的现在显而易见，当我们调用此连接的 `.close()` 方法时，DBAPI
    连接通常实际上不会关闭，而是被[释放](../glossary.html#term-released)回引擎的连接池：
- en: '[PRE73]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: While SQLAlchemy may in the future add built-in patterns for more DBAPI use
    cases, there are diminishing returns as these cases tend to be rarely needed and
    they also vary highly dependent on the type of DBAPI in use, so in any case the
    direct DBAPI calling pattern is always there for those cases where it is needed.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SQLAlchemy 可能会在未来添加更多用于更多 DBAPI 使用案例的内置模式，但由于这些情况往往很少需要，并且它们也高度依赖于正在使用的 DBAPI
    的类型，所以在任何情况下，直接使用 DBAPI 调用模式始终存在于那些需要的情况下。
- en: See also
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)
    - includes additional details about how the DBAPI connection is accessed as well
    as the “driver” connection when using asyncio drivers.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用 Engine 时，如何访问原始 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)
    - 包括有关如何访问 DBAPI 连接以及在使用 asyncio 驱动程序时“驱动程序”连接的其他详细信息。'
- en: 'Some recipes for DBAPI connection use follow.  ### Calling Stored Procedures
    and User Defined Functions'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用于 DBAPI 连接的方法如下。### 调用存储过程和用户定义的函数
- en: SQLAlchemy supports calling stored procedures and user defined functions several
    ways. Please note that all DBAPIs have different practices, so you must consult
    your underlying DBAPI’s documentation for specifics in relation to your particular
    usage. The following examples are hypothetical and may not work with your underlying
    DBAPI.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 支持以几种方式调用存储过程和用户定义的函数。请注意，所有的 DBAPI 都有不同的做法，因此您必须咨询底层 DBAPI 的文档以获取与您特定用途相关的具体信息。以下示例是假设性的，并且可能不适用于您的底层
    DBAPI。
- en: 'For stored procedures or functions with special syntactical or parameter concerns,
    DBAPI-level [callproc](https://legacy.python.org/dev/peps/pep-0249/#callproc)
    may potentially be used with your DBAPI. An example of this pattern is:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有特殊语法或参数问题的存储过程或函数，可以使用 DBAPI 级别的 [callproc](https://legacy.python.org/dev/peps/pep-0249/#callproc)，您的
    DBAPI 可能可以使用。这种模式的一个例子是：
- en: '[PRE74]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Note
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Not all DBAPIs use callproc and overall usage details will vary. The above example
    is only an illustration of how it might look to use a particular DBAPI function.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的DBAPI都使用callproc，总体使用细节会有所不同。上面的例子只是说明如何使用特定的DBAPI函数。
- en: 'Your DBAPI may not have a `callproc` requirement *or* may require a stored
    procedure or user defined function to be invoked with another pattern, such as
    normal SQLAlchemy connection usage. One example of this usage pattern is, *at
    the time of this documentation’s writing*, executing a stored procedure in the
    PostgreSQL database with the psycopg2 DBAPI, which should be invoked with normal
    connection usage:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 您的DBAPI可能没有`callproc`要求，*或*可能要求使用另一种模式调用存储过程或用户定义的函数，例如正常的SQLAlchemy连接使用。这种用法模式的一个例子是，在撰写本文档时，使用psycopg2
    DBAPI在PostgreSQL数据库中执行存储过程，应该使用正常的连接使用方式调用：
- en: '[PRE75]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This above example is hypothetical. The underlying database is not guaranteed
    to support “CALL” or “SELECT” in these situations, and the keyword may vary dependent
    on the function being a stored procedure or a user defined function. You should
    consult your underlying DBAPI and database documentation in these situations to
    determine the correct syntax and patterns to use.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子是假设性的。底层数据库不保证在这些情况下支持“CALL”或“SELECT”，关键字可能会根据函数是存储过程还是用户定义的函数而变化。在这些情况下，您应该查阅底层的DBAPI和数据库文档，以确定使用的正确语法和模式。
- en: Multiple Result Sets
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多结果集
- en: 'Multiple result set support is available from a raw DBAPI cursor using the
    [nextset](https://legacy.python.org/dev/peps/pep-0249/#nextset) method:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 多结果集支持可以通过原始DBAPI游标使用[nextset](https://legacy.python.org/dev/peps/pep-0249/#nextset)方法获得：
- en: '[PRE76]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Registering New Dialects
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册新方言
- en: 'The [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function call locates the given dialect using setuptools entrypoints. These entry
    points can be established for third party dialects within the setup.py script.
    For example, to create a new dialect “foodialect://”, the steps are as follows:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")函数调用通过setuptools入口点定位给定的方言。这些入口点可以在setup.py脚本中为第三方方言建立。例如，要创建一个名为“foodialect://”的新方言，步骤如下：'
- en: Create a package called `foodialect`.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`foodialect`的包。
- en: The package should have a module containing the dialect class, which is typically
    a subclass of [`sqlalchemy.engine.default.DefaultDialect`](internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect"). In this example let’s say it’s called
    `FooDialect` and its module is accessed via `foodialect.dialect`.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该包应该有一个包含方言类的模块，该类通常是[`sqlalchemy.engine.default.DefaultDialect`](internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect")的子类。在这个例子中，假设它被称为`FooDialect`，并且通过`foodialect.dialect`访问其模块。
- en: 'The entry point can be established in `setup.cfg` as follows:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 入口点可以在`setup.cfg`中建立如下：
- en: '[PRE77]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'If the dialect is providing support for a particular DBAPI on top of an existing
    SQLAlchemy-supported database, the name can be given including a database-qualification.
    For example, if `FooDialect` were in fact a MySQL dialect, the entry point could
    be established like this:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言为现有的SQLAlchemy支持的数据库提供了对特定DBAPI的支持，则可以给出名称，包括数据库限定符。例如，如果`FooDialect`实际上是一个MySQL方言，可以像这样建立入口点：
- en: '[PRE78]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The above entrypoint would then be accessed as `create_engine("mysql+foodialect://")`.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 上述入口点将被访问为`create_engine("mysql+foodialect://")`。
- en: Registering Dialects In-Process
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在进程内注册方言
- en: 'SQLAlchemy also allows a dialect to be registered within the current process,
    bypassing the need for separate installation. Use the `register()` function as
    follows:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy还允许在当前进程中注册一个方言，绕过需要单独安装的必要性。使用`register()`函数如下：
- en: '[PRE79]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The above will respond to `create_engine("mysql+foodialect://")` and load the
    `MyMySQLDialect` class from the `myapp.dialect` module.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将响应`create_engine("mysql+foodialect://")`并从`myapp.dialect`模块加载`MyMySQLDialect`类。
- en: Connection / Engine API
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接/引擎API
- en: '| Object Name | Description |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Connection](#sqlalchemy.engine.Connection) | Provides high-level functionality
    for a wrapped DB-API connection. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| [连接](#sqlalchemy.engine.Connection) | 为包装的DB-API连接提供高级功能。 |'
- en: '| [CreateEnginePlugin](#sqlalchemy.engine.CreateEnginePlugin) | A set of hooks
    intended to augment the construction of an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object based on entrypoint names in a URL. |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| [CreateEnginePlugin](#sqlalchemy.engine.CreateEnginePlugin) | 一组旨在根据 URL
    中的入口点名称增强 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象构造的钩子。
    |'
- en: '| [Engine](#sqlalchemy.engine.Engine) | Connects a [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") together to provide a source of database
    connectivity and behavior. |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| [Engine](#sqlalchemy.engine.Engine) | 将 [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 和 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") 连接在一起，提供数据库连接和行为的来源。 |'
- en: '| [ExceptionContext](#sqlalchemy.engine.ExceptionContext) | Encapsulate information
    about an error condition in progress. |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| [ExceptionContext](#sqlalchemy.engine.ExceptionContext) | 封装有关正在进行的错误条件的信息。
    |'
- en: '| [NestedTransaction](#sqlalchemy.engine.NestedTransaction) | Represent a ‘nested’,
    or SAVEPOINT transaction. |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| [NestedTransaction](#sqlalchemy.engine.NestedTransaction) | 表示“嵌套”或 SAVEPOINT
    事务。 |'
- en: '| [RootTransaction](#sqlalchemy.engine.RootTransaction) | Represent the “root”
    transaction on a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
    |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| [RootTransaction](#sqlalchemy.engine.RootTransaction) | 表示 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上的“根”事务。 |'
- en: '| [Transaction](#sqlalchemy.engine.Transaction) | Represent a database transaction
    in progress. |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| [Transaction](#sqlalchemy.engine.Transaction) | 表示正在进行的数据库事务。 |'
- en: '| [TwoPhaseTransaction](#sqlalchemy.engine.TwoPhaseTransaction) | Represent
    a two-phase transaction. |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| [TwoPhaseTransaction](#sqlalchemy.engine.TwoPhaseTransaction) | 表示两阶段事务。
    |'
- en: '[PRE80]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Provides high-level functionality for a wrapped DB-API connection.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 为封装的 DB-API 连接提供高级功能。
- en: The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object is procured by calling the [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") method of the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object, and provides services for execution of SQL
    statements as well as transaction control.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    方法获取 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象的 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象，并提供执行 SQL 语句以及事务控制的服务。
- en: The Connection object is **not** thread-safe. While a Connection can be shared
    among threads using properly synchronized access, it is still possible that the
    underlying DBAPI connection may not support shared access between threads. Check
    the DBAPI documentation for details.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`Connection` 对象**不是**线程安全的。虽然一个 Connection 可以通过正确同步的访问在线程之间共享，但底层的 DBAPI 连接可能不支持线程之间的共享访问。查看
    DBAPI 文档以获取详细信息。'
- en: '**Members**'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.engine.Connection.__init__), [begin()](#sqlalchemy.engine.Connection.begin),
    [begin_nested()](#sqlalchemy.engine.Connection.begin_nested), [begin_twophase()](#sqlalchemy.engine.Connection.begin_twophase),
    [close()](#sqlalchemy.engine.Connection.close), [closed](#sqlalchemy.engine.Connection.closed),
    [commit()](#sqlalchemy.engine.Connection.commit), [connection](#sqlalchemy.engine.Connection.connection),
    [default_isolation_level](#sqlalchemy.engine.Connection.default_isolation_level),
    [detach()](#sqlalchemy.engine.Connection.detach), [exec_driver_sql()](#sqlalchemy.engine.Connection.exec_driver_sql),
    [execute()](#sqlalchemy.engine.Connection.execute), [execution_options()](#sqlalchemy.engine.Connection.execution_options),
    [get_execution_options()](#sqlalchemy.engine.Connection.get_execution_options),
    [get_isolation_level()](#sqlalchemy.engine.Connection.get_isolation_level), [get_nested_transaction()](#sqlalchemy.engine.Connection.get_nested_transaction),
    [get_transaction()](#sqlalchemy.engine.Connection.get_transaction), [in_nested_transaction()](#sqlalchemy.engine.Connection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.engine.Connection.in_transaction), [info](#sqlalchemy.engine.Connection.info),
    [invalidate()](#sqlalchemy.engine.Connection.invalidate), [invalidated](#sqlalchemy.engine.Connection.invalidated),
    [rollback()](#sqlalchemy.engine.Connection.rollback), [scalar()](#sqlalchemy.engine.Connection.scalar),
    [scalars()](#sqlalchemy.engine.Connection.scalars), [schema_for_object()](#sqlalchemy.engine.Connection.schema_for_object)'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.engine.Connection.__init__), [begin()](#sqlalchemy.engine.Connection.begin),
    [begin_nested()](#sqlalchemy.engine.Connection.begin_nested), [begin_twophase()](#sqlalchemy.engine.Connection.begin_twophase),
    [close()](#sqlalchemy.engine.Connection.close), [closed](#sqlalchemy.engine.Connection.closed),
    [commit()](#sqlalchemy.engine.Connection.commit), [connection](#sqlalchemy.engine.Connection.connection),
    [default_isolation_level](#sqlalchemy.engine.Connection.default_isolation_level),
    [detach()](#sqlalchemy.engine.Connection.detach), [exec_driver_sql()](#sqlalchemy.engine.Connection.exec_driver_sql),
    [execute()](#sqlalchemy.engine.Connection.execute), [execution_options()](#sqlalchemy.engine.Connection.execution_options),
    [get_execution_options()](#sqlalchemy.engine.Connection.get_execution_options),
    [get_isolation_level()](#sqlalchemy.engine.Connection.get_isolation_level), [get_nested_transaction()](#sqlalchemy.engine.Connection.get_nested_transaction),
    [get_transaction()](#sqlalchemy.engine.Connection.get_transaction), [in_nested_transaction()](#sqlalchemy.engine.Connection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.engine.Connection.in_transaction), [info](#sqlalchemy.engine.Connection.info),
    [invalidate()](#sqlalchemy.engine.Connection.invalidate), [invalidated](#sqlalchemy.engine.Connection.invalidated),
    [rollback()](#sqlalchemy.engine.Connection.rollback), [scalar()](#sqlalchemy.engine.Connection.scalar),
    [scalars()](#sqlalchemy.engine.Connection.scalars), [schema_for_object()](#sqlalchemy.engine.Connection.schema_for_object)'
- en: The Connection object represents a single DBAPI connection checked out from
    the connection pool. In this state, the connection pool has no affect upon the
    connection, including its expiration or timeout state. For the connection pool
    to properly manage connections, connections should be returned to the connection
    pool (i.e. `connection.close()`) whenever the connection is not in use.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 连接对象表示从连接池中检出的单个 DBAPI 连接。在此状态下，连接池不会影响连接，包括其到期或超时状态。为了让连接池正确管理连接，连接应在未被使用时返回到连接池（即
    `connection.close()`）。
- en: '**Class signature**'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    (`sqlalchemy.engine.interfaces.ConnectionEventsTarget`, `sqlalchemy.inspection.Inspectable`)
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    (`sqlalchemy.engine.interfaces.ConnectionEventsTarget`, `sqlalchemy.inspection.Inspectable`)
- en: '[PRE81]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Construct a new Connection.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的连接。
- en: '[PRE82]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Begin a transaction prior to autobegin occurring.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个事务，以便在自动开始之前进行。
- en: 'E.g.:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE83]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The returned object is an instance of [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction"). This object represents the “scope” of the
    transaction, which completes when either the [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") or [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") method is called; the object also works
    as a context manager as illustrated above.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")
    的实例。该对象表示事务的“范围”，当 [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") 或 [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") 方法被调用时完成事务；该对象还可作为上述示例中所示的上下文管理器。
- en: 'The [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    method begins a transaction that normally will be begun in any case when the connection
    is first used to execute a statement. The reason this method might be used would
    be to invoke the [`ConnectionEvents.begin()`](events.html#sqlalchemy.events.ConnectionEvents.begin
    "sqlalchemy.events.ConnectionEvents.begin") event at a specific time, or to organize
    code within the scope of a connection checkout in terms of context managed blocks,
    such as:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    方法开始一个事务，通常在连接首次用于执行语句时始终会开始。可能使用此方法的原因是在特定时间调用 [`ConnectionEvents.begin()`](events.html#sqlalchemy.events.ConnectionEvents.begin
    "sqlalchemy.events.ConnectionEvents.begin") 事件，或者在连接检出的范围内组织代码以利用上下文管理的块，例如：'
- en: '[PRE84]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The above code is not fundamentally any different in its behavior than the
    following code which does not use [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin"); the below style is known as “commit as
    you go” style:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在行为上与不使用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    的以下代码基本没有区别；下面的样式称为“随时提交”样式：
- en: '[PRE85]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: From a database point of view, the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method does not emit any SQL or change the
    state of the underlying DBAPI connection in any way; the Python DBAPI does not
    have any concept of explicit transaction begin.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库的角度来看，[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    方法不会发出任何 SQL 或以任何方式更改底层 DBAPI 连接的状态；Python DBAPI 没有任何显式事务开始的概念。
- en: See also
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Transactions and the DBAPI](../tutorial/dbapi_transactions.html#tutorial-working-with-transactions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '[处理事务和 DBAPI](../tutorial/dbapi_transactions.html#tutorial-working-with-transactions)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")
    - use a SAVEPOINT'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")
    - 使用保存点'
- en: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase") - use a two phase /XID transaction'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase") - 使用两阶段 / XID 事务'
- en: '[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    - context manager available from [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    - 可从 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 使用的上下文管理器'
- en: '[PRE86]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Begin a nested transaction (i.e. SAVEPOINT) and return a transaction handle
    that controls the scope of the SAVEPOINT.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个嵌套事务（即保存点），并返回一个控制保存点范围的事务句柄。
- en: 'E.g.:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE87]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The returned object is an instance of [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction"), which includes transactional methods [`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit") and [`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback"); for a nested transaction, these
    methods correspond to the operations “RELEASE SAVEPOINT <name>” and “ROLLBACK
    TO SAVEPOINT <name>”. The name of the savepoint is local to the [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction") object and is generated automatically.
    Like any other [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction"),
    the [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    may be used as a context manager as illustrated above which will “release” or
    “rollback” corresponding to if the operation within the block were successful
    or raised an exception.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")的实例，其中包括事务方法[`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit")和[`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback")；对于嵌套事务，这些方法对应于操作“RELEASE SAVEPOINT
    <name>”和“ROLLBACK TO SAVEPOINT <name>”。保存点的名称是局限于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")对象的，并且会自动生成。与任何其他[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")一样，[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")可以用作上面示例中所说明的上下文管理器，该上下文管理器将“释放”或“回滚”相应于块内操作是否成功或引发异常。
- en: 'Nested transactions require SAVEPOINT support in the underlying database, else
    the behavior is undefined. SAVEPOINT is commonly used to run operations within
    a transaction that may fail, while continuing the outer transaction. E.g.:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套事务要求底层数据库支持 SAVEPOINT，否则行为未定义。SAVEPOINT 通常用于在事务内运行可能失败的操作，同时继续外部事务。例如：
- en: '[PRE88]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'If [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") is called without first calling [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") or [`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin"), the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will “autobegin” the outer transaction
    first. This outer transaction may be committed using “commit-as-you-go” style,
    e.g.:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在调用 [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 之前没有先调用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 或 [`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")，则 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象将“自动开始”外部事务。这个外部事务可以使用“随时提交”样式提交，例如：
- en: '[PRE89]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Changed in version 2.0: [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") will now participate in the connection
    “autobegin” behavior that is new as of 2.0 / “future” style connections in 1.4.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本更改：[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 现在将参与连接的“自动开始”行为，这是自 2.0 版本 / 1.4
    版本“未来”风格连接的新功能。
- en: See also
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
- en: '[Using SAVEPOINT](../orm/session_transaction.html#session-begin-nested) - ORM
    support for SAVEPOINT'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SAVEPOINT](../orm/session_transaction.html#session-begin-nested) - 保存点的
    ORM 支持'
- en: '[PRE90]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Begin a two-phase or XA transaction and return a transaction handle.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个两阶段或 XA 事务并返回一个事务句柄。
- en: The returned object is an instance of [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction"), which in addition to the methods provided
    by [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction"),
    also provides a [`TwoPhaseTransaction.prepare()`](#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") method.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")的实例，除了由[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")提供的方法之外，还提供了一个[`TwoPhaseTransaction.prepare()`](#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")方法。
- en: 'Parameters:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**xid** – the two phase transaction id. If not supplied, a random id will be
    generated.'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '**xid** – 两阶段事务 id。如果未提供，将生成一个随机 id。'
- en: See also
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
- en: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")'
- en: '[PRE91]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Close this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。
- en: This results in a release of the underlying database resources, that is, the
    DBAPI connection referenced internally. The DBAPI connection is typically restored
    back to the connection-holding [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    referenced by the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    that produced this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
    Any transactional state present on the DBAPI connection is also unconditionally
    released via the DBAPI connection’s `rollback()` method, regardless of any [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object that may be outstanding with regards to
    this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致底层数据库资源的释放，即内部引用的DBAPI连接。DBAPI连接通常会恢复到产生此[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")所引用的连接持有[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")。无论是否存在任何与此[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")相关的[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")对象，DBAPI连接上的任何事务状态都将通过DBAPI连接的`rollback()`方法无条件释放。
- en: This has the effect of also calling [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") if any transaction is in place.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在任何事务，则此方法还会调用[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")。
- en: After [`Connection.close()`](#sqlalchemy.engine.Connection.close "sqlalchemy.engine.Connection.close")
    is called, the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is permanently in a closed state, and will allow no further operations.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用[`Connection.close()`](#sqlalchemy.engine.Connection.close "sqlalchemy.engine.Connection.close")之后，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")将永久处于关闭状态，不允许进行任何进一步的操作。
- en: '[PRE92]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Return True if this connection is closed.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此连接已关闭，则返回True。
- en: '[PRE93]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Commit the transaction that is currently in progress.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 提交当前正在进行的事务。
- en: This method commits the current transaction if one has been started. If no transaction
    was started, the method has no effect, assuming the connection is in a non-invalidated
    state.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经开始了当前事务，则此方法提交当前事务。如果没有启动事务，则此方法不起作用，假设连接处于非无效状态。
- en: A transaction is begun on a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    automatically whenever a statement is first executed, or when the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 每当首次执行语句或调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")方法时，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")会自动开始事务。
- en: Note
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    method only acts upon the primary database transaction that is linked to the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. It does not operate upon a SAVEPOINT that
    would have been invoked from the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method; for control of a SAVEPOINT,
    call [`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit") on the [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction") that is returned by the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method itself.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    方法仅对链接到 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象的主数据库事务起作用。它不会操作从 [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 方法调用的 SAVEPOINT；要控制 SAVEPOINT，请对
    [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")
    方法本身返回的 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    调用 [`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit")。'
- en: '[PRE94]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The underlying DB-API connection managed by this Connection.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 此连接管理的底层 DB-API 连接。
- en: This is a SQLAlchemy connection-pool proxied connection which then has the attribute
    `_ConnectionFairy.dbapi_connection` that refers to the actual driver connection.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 SQLAlchemy 连接池代理连接，然后具有属性 `_ConnectionFairy.dbapi_connection`，该属性引用实际的驱动程序连接。
- en: See also
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Driver SQL and Raw DBAPI Connections](#dbapi-connections)'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Driver SQL 和原始 DBAPI 连接](#dbapi-connections)'
- en: '[PRE95]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The initial-connection time isolation level associated with the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") in use.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 与正在使用的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    关联的初始连接时间隔离级别。
- en: This value is independent of the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and [`Engine.execution_options.isolation_level`](#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") execution options, and is determined
    by the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    when the first connection is created, by performing a SQL query against the database
    for the current isolation level before any additional commands have been emitted.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 此值独立于 [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 和 [`Engine.execution_options.isolation_level`](#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") 执行选项，并且由 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 在创建第一个连接时确定，通过针对数据库执行当前隔离级别的 SQL 查询，在发出任何其他命令之前。
- en: Calling this accessor does not invoke any new SQL queries.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此访问器不会触发任何新的 SQL 查询。
- en: See also
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.get_isolation_level()`](#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current actual isolation
    level'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前实际隔离级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的隔离级别'
- en: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的隔离级别'
- en: '[PRE96]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Detach the underlying DB-API connection from its connection pool.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 从其连接池中分离底层 DB-API 连接。
- en: 'E.g.:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE97]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: This [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    instance will remain usable. When closed (or exited from a context manager context
    as above), the DB-API connection will be literally closed and not returned to
    its originating pool.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")实例将保持可用。当关闭（或从上下文管理器上下文中退出）时，DB-API连接将被真正关闭，不会返回到其原始池中。
- en: This method can be used to insulate the rest of an application from a modified
    state on a connection (such as a transaction isolation level or similar).
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可用于隔离连接上的应用程序的其余部分的修改状态（例如事务隔离级别或类似内容）。
- en: '[PRE98]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Executes a string SQL statement on the DBAPI cursor directly, without any SQL
    compilation steps.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在DBAPI游标上执行字符串SQL语句，无需任何SQL编译步骤。
- en: This can be used to pass any string directly to the `cursor.execute()` method
    of the DBAPI in use.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用于直接将任何字符串传递给正在使用的DBAPI的`cursor.execute()`方法。
- en: 'Parameters:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` – The statement str to be executed. Bound parameters must use the
    underlying DBAPI’s paramstyle, such as “qmark”, “pyformat”, “format”, etc.'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 要执行的语句字符串。绑定参数必须使用底层DBAPI的paramstyle，例如“qmark”，“pyformat”，“format”等。'
- en: '`parameters` – represent bound parameter values to be used in the execution.
    The format is one of: a dictionary of named parameters, a tuple of positional
    parameters, or a list containing either dictionaries or tuples for multiple-execute
    support.'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 表示要在执行中使用的绑定参数值。格式之一：具有命名参数的字典，具有位置参数的元组，或包含用于多次执行支持的字典或元组的列表。'
- en: 'Returns:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: a [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult").
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")。'
- en: 'E.g. multiple dictionaries:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，多个字典：
- en: '[PRE99]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Single dictionary:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 单个字典：
- en: '[PRE100]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Single tuple:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 单个元组：
- en: '[PRE101]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Note
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method does not participate in
    the [`ConnectionEvents.before_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`ConnectionEvents.after_execute()`](events.html#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") events. To intercept calls
    to [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql"), use [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") and [`ConnectionEvents.after_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute").
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")方法不参与[`ConnectionEvents.before_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")和[`ConnectionEvents.after_execute()`](events.html#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute")事件。要拦截对[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")的调用，请使用[`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")和[`ConnectionEvents.after_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")。'
- en: See also
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[**PEP 249**](https://peps.python.org/pep-0249/)'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '[**PEP 249**](https://peps.python.org/pep-0249/)'
- en: '[PRE102]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Executes a SQL statement construct and returns a [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 执行SQL语句构造并返回[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")。
- en: 'Parameters:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` –'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` –'
- en: 'The statement to be executed. This is always an object that is in both the
    [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    and [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    hierarchies, including:'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要执行的语句。这始终是[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")和[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")层次结构中的对象，包括：
- en: '[`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
  id: totrans-519
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
- en: '[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")、[`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")、[`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")'
- en: '[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    and [`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")'
  id: totrans-521
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    和 [`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")'
- en: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") and objects
    which inherit from [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")'
  id: totrans-522
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") 和从 [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 继承的对象'
- en: '`parameters` – parameters which will be bound into the statement. This may
    be either a dictionary of parameter names to values, or a mutable sequence (e.g.
    a list) of dictionaries. When a list of dictionaries is passed, the underlying
    statement execution will make use of the DBAPI `cursor.executemany()` method.
    When a single dictionary is passed, the DBAPI `cursor.execute()` method will be
    used.'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 将绑定到语句中的参数。这可以是一个参数名到值的字典，或一个可变序列（例如列表）的字典。当传递一个字典列表时，底层语句执行将使用
    DBAPI 的 `cursor.executemany()` 方法。当传递一个单一字典时，将使用 DBAPI 的 `cursor.execute()` 方法。'
- en: '`execution_options` – optional dictionary of execution options, which will
    be associated with the statement execution. This dictionary can provide a subset
    of the options that are accepted by [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options").'
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` – 可选的执行选项字典，它将与语句执行相关联。该字典可以提供一组接受 [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 的选项的子集。'
- en: 'Returns:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象。
- en: '[PRE103]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Set non-SQL options for the connection which take effect during execution.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在执行期间生效的连接非SQL选项。
- en: This method modifies this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    **in-place**; the return value is the same [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object upon which the method is called. Note that
    this is in contrast to the behavior of the `execution_options` methods on other
    objects such as [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") and [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"). The rationale is that
    many such execution options necessarily modify the state of the base DBAPI connection
    in any case so there is no feasible means of keeping the effect of such an option
    localized to a “sub” connection.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在原地修改了这个 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")；返回值是调用该方法的相同
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 对象。请注意，这与其他对象（如
    [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options "sqlalchemy.engine.Engine.execution_options")
    和 [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")）上的 `execution_options`
    方法的行为相反。其原理是，许多此类执行选项在任何情况下都会修改基本 DBAPI 连接的状态，因此没有可行的方法将此类选项的效果局限于“子”连接。
- en: 'Changed in version 2.0: The [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method, in contrast to other
    objects with this method, modifies the connection in-place without creating copy
    of it.'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的变化：[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法与具有此方法的其他对象不同，它会在原地修改连接而不创建副本。
- en: As discussed elsewhere, the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method accepts any arbitrary
    parameters including user defined names. All parameters given are consumable in
    a number of ways including by using the [`Connection.get_execution_options()`](#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options") method. See the examples
    at [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options").
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 如其他地方所述，[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法接受任意的参数，包括用户定义的名称。所有给定的参数都可以以多种方式被使用，包括使用
    [`Connection.get_execution_options()`](#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options") 方法。请参阅 [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 和 [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 中的示例。
- en: The keywords that are currently recognized by SQLAlchemy itself include all
    those listed under [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"), as well as others that
    are specific to [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 自身当前识别的关键字包括所有 [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 下列出的关键字，以及特定于 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的其他关键字。
- en: 'Parameters:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`compiled_cache` –'
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compiled_cache` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。
- en: A dictionary where [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    objects will be cached when the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    compiles a clause expression into a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This dictionary will supersede the statement
    cache that may be configured on the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    itself. If set to None, caching is disabled, even if the engine has a configured
    cache size.
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字典，当 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    将子句表达式编译为 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象时，[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象将被缓存。这个字典将覆盖可能在 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    上配置的语句缓存。如果设置为 None，则禁用缓存，即使引擎配置了缓存大小。
- en: Note that the ORM makes use of its own “compiled” caches for some operations,
    including flush operations. The caching used by the ORM internally supersedes
    a cache dictionary specified here.
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，ORM 在某些操作中使用了自己的“已编译”缓存，包括 flush 操作。ORM 内部使用的缓存会覆盖此处指定的缓存字典。
- en: '`logging_token` –'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging_token` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"), [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable").'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。
- en: Adds the specified string token surrounded by brackets in log messages logged
    by the connection, i.e. the logging that’s enabled either via the [`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") flag or via the `logging.getLogger("sqlalchemy.engine")`
    logger. This allows a per-connection or per-sub-engine token to be available which
    is useful for debugging concurrent connection scenarios.
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在连接记录的日志消息中添加由括号括起的指定字符串令牌，即启用了 [`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 标志或通过 `logging.getLogger("sqlalchemy.engine")` 记录器启用的日志记录。这允许可用于调试并发连接场景的每个连接或每个子引擎令牌。
- en: New in version 1.4.0b2.
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新功能。
- en: See also
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Per-Connection / Sub-Engine Tokens](engines.html#dbengine-logging-tokens)
    - usage example'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置每个连接/子引擎令牌](engines.html#dbengine-logging-tokens) - 使用示例'
- en: '[`create_engine.logging_name`](engines.html#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") - adds a name to the name used by the Python logger
    object itself.'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.logging_name`](engines.html#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") - 为Python日志记录器对象本身添加一个名称。'
- en: '`isolation_level` –'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
- en: Set the transaction isolation level for the lifespan of this [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. Valid values include those string values
    accepted by the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter passed to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). These levels are semi-database specific; see individual
    dialect documentation for valid levels.
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为此[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象的生命周期设置事务隔离级别。有效值包括[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")传递给[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数接受的那些字符串值。这些级别是半数据库特定的；请参阅各个方言文档以获取有效级别。
- en: The isolation level option applies the isolation level by emitting statements
    on the DBAPI connection, and **necessarily affects the original Connection object
    overall**. The isolation level will remain at the given setting until explicitly
    changed, or when the DBAPI connection itself is [released](../glossary.html#term-released)
    to the connection pool, i.e. the [`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method is called, at which time an event
    handler will emit additional statements on the DBAPI connection in order to revert
    the isolation level change.
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 隔离级别选项通过在DBAPI连接上发出语句来应用隔离级别，并**必然会影响原始Connection对象的整体**。隔离级别将保持在给定设置，直到明确更改，或者当DBAPI连接本身被[释放](../glossary.html#term-released)到连接池时，即调用[`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close")方法时，此时事件处理程序将在DBAPI连接上发出附加语句，以恢复隔离级别更改。
- en: Note
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The `isolation_level` execution option may only be established before the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called, as well as before any
    SQL statements are emitted which would otherwise trigger “autobegin”, or directly
    after a call to [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback").
    A database cannot change the isolation level on a transaction in progress.
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`isolation_level`执行选项只能在调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法之前建立，以及在发出任何否则会触发“自动开始”的SQL语句之前，或者在调用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")或[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")之后直接调用。数据库无法更改进行中的事务的隔离级别。'
- en: Note
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The `isolation_level` execution option is implicitly reset if the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is invalidated, e.g. via the [`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method, or if a disconnection error
    occurs. The new connection produced after the invalidation will **not** have the
    selected isolation level re-applied to it automatically.
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果通过[`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate "sqlalchemy.engine.Connection.invalidate")方法使[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")无效，或者发生断开连接错误，则`isolation_level`执行选项会被隐式重置。在无效后产生的新连接将**不会**自动重新应用所选的隔离级别。
- en: See also
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](#dbapi-autocommit)'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括DBAPI自动提交](#dbapi-autocommit)'
- en: '[`Connection.get_isolation_level()`](#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current actual level'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前实际级别'
- en: '`no_parameters` –'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no_parameters` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable").'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。
- en: When `True`, if the final parameter list or dictionary is totally empty, will
    invoke the statement on the cursor as `cursor.execute(statement)`, not passing
    the parameter collection at all. Some DBAPIs such as psycopg2 and mysql-python
    consider percent signs as significant only when parameters are present; this option
    allows code to generate SQL containing percent signs (and possibly other characters)
    that is neutral regarding whether it’s executed by the DBAPI or piped into a script
    that’s later invoked by command line tools.
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 `True` 时，如果最终的参数列表或字典完全为空，则会像 `cursor.execute(statement)` 那样在游标上调用语句，完全不传递参数集合。一些
    DBAPI，如 psycopg2 和 mysql-python，只有在存在参数时才将百分号视为重要；这个选项允许代码生成包含百分号（可能还有其他字符）的 SQL，不管它是由
    DBAPI 执行还是被管道传输到稍后由命令行工具调用的脚本中。
- en: '`stream_results` –'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stream_results` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable").'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。
- en: Indicate to the dialect that results should be “streamed” and not pre-buffered,
    if possible. For backends such as PostgreSQL, MySQL and MariaDB, this indicates
    the use of a “server side cursor” as opposed to a client side cursor. Other backends
    such as that of Oracle may already use server side cursors by default.
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果可能的话，向方言指示结果应该是“流式”的，而不是预先缓冲的。对于诸如 PostgreSQL、MySQL 和 MariaDB 等后端，这表示使用“服务器端游标”而不是客户端游标。其他后端，如
    Oracle 的后端，可能已经默认使用服务器端游标。
- en: The usage of [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") is usually combined with setting
    a fixed number of rows to to be fetched in batches, to allow for efficient iteration
    of database rows while at the same time not loading all result rows into memory
    at once; this can be configured on a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object using the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    method, after execution has returned a new [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"). If [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") is not used, the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") mode of operation will instead
    use a dynamically sized buffer which buffers sets of rows at a time, growing on
    each batch based on a fixed growth size up until a limit which may be configured
    using the [`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") parameter.
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 与设置要以批次获取的固定行数结合使用，以便在同时不一次加载所有结果行到内存中的情况下有效迭代数据库行；可以在执行返回一个新的
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象后，通过 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法在 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象上进行配置。如果未使用 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")，则 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 操作模式将使用一个动态大小的缓冲区，它会一次缓冲一组行，根据固定的增长大小在每个批次上增长，直到通过使用
    [`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") 参数进行配置的限制为止。
- en: When using the ORM to fetch ORM mapped objects from a result, [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") should always be used with [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options"), so that the ORM does not fetch
    all rows into new ORM objects at once.
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 ORM 从结果中获取 ORM 映射对象时，应始终使用 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 与 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 一起使用，以便 ORM 不会一次将所有行都提取到新的 ORM
    对象中。
- en: For typical use, the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option should be preferred,
    which sets up both [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") at once. This option is supported both at
    a core level by [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    as well as by the ORM `Session`; the latter is described at [Fetching Large Result
    Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per).
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于典型用法，应优先考虑 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项，该选项一次设置了 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 和 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")。此选项在 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 以及 ORM `Session` 的核心级别都受支持；后者在 [使用 Yield Per 获取大结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    中进行了描述。
- en: See also
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - background on [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results) - 关于 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 的背景信息'
- en: '[`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html) describing the ORM
    version of `yield_per`'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中描述了 `yield_per` 的 ORM 版本'
- en: '`max_row_buffer` –'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_row_buffer` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable").
    Sets a maximum buffer size to use when the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option is used on
    a backend that supports server side cursors. The default value if not specified
    is 1000.'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。当在支持服务器端游标的后端使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项时，设置要使用的最大缓冲区大小。如果未指定默认值，则默认值为1000。
- en: See also
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results)'
- en: '`yield_per` –'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yield_per` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable").
    Integer value applied which will set the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option and invoke
    [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    automatically at once. Allows equivalent functionality as is present when using
    this parameter with the ORM.'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。设置 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项的整数值，并立即自动调用 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")。允许等效的功能，与使用此参数时与 ORM 存在的功能相同。
- en: New in version 1.4.40.
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4.40 中的新增内容。
- en: See also
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - background and examples on using server side cursors with Core.'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流式结果）](#engine-stream-results) - 关于在核心中使用服务器端游标的背景和示例。'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html) describing the ORM
    version of `yield_per`'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 `yield_per` 逐步获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中描述了 ORM 版本的 `yield_per`。'
- en: '`insertmanyvalues_page_size` –'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertmanyvalues_page_size` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"). Number of rows
    to format into an INSERT statement when the statement uses “insertmanyvalues”
    mode, which is a paged form of bulk insert that is used for many backends when
    using [executemany](../glossary.html#term-executemany) execution typically in
    conjunction with RETURNING. Defaults to 1000\. May also be modified on a per-engine
    basis using the [`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") parameter.'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。将要格式化为 INSERT 语句的行数，当语句使用“insertmanyvalues”模式时，该模式是一种分页形式的批量插入，通常与
    [executemany](../glossary.html#term-executemany) 执行结合使用，用于许多后端，通常与 RETURNING 一起使用。默认为
    1000。还可以使用 [`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") 参数在每个引擎的基础上进行修改。
- en: New in version 2.0.
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新增内容。
- en: See also
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“Insert Many Values” Behavior for INSERT statements](#engine-insertmanyvalues)'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[插入语句的“插入多个值”行为](#engine-insertmanyvalues)'
- en: '`schema_translate_map` –'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema_translate_map` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"), [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable").'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。
- en: A dictionary mapping schema names to schema names, that will be applied to the
    [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    element of each [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    encountered when SQL or DDL expression elements are compiled into strings; the
    resulting schema name will be converted based on presence in the map of the original
    name.
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将模式名称映射到模式名称的字典，将应用于编译 SQL 或 DDL 表达式元素为字符串时遇到的每个 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") 元素；结果模式名称将根据原始名称在映射中的存在进行转换。
- en: See also
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Translation of Schema Names](#schema-translating)'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[模式名称的翻译](#schema-translating)'
- en: '`preserve_rowcount` –'
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preserve_rowcount` –'
- en: Boolean; when True, the `cursor.rowcount` attribute will be unconditionally
    memoized within the result and made available via the [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute. Normally, this attribute
    is only preserved for UPDATE and DELETE statements. Using this option, the DBAPIs
    rowcount value can be accessed for other kinds of statements such as INSERT and
    SELECT, to the degree that the DBAPI supports these statements. See [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") for notes regarding the behavior of
    this attribute.
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，`cursor.rowcount` 属性将无条件地被记忆在结果中，并通过 [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") 属性提供。通常，此属性仅对 UPDATE 和 DELETE 语句保留。使用此选项，可以访问
    DBAPI 的 rowcount 值，以用于 INSERT 和 SELECT 等其他类型的语句，只要 DBAPI 支持这些语句。有关此属性行为的说明，请参阅
    [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")。
- en: New in version 2.0.28.
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0.28 中的新内容。
- en: See also
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[`Connection.get_execution_options()`](#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_execution_options()`](#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 所有
    ORM 特定执行选项的文档'
- en: '[PRE104]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新内容。
- en: See also
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[PRE105]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Return the current **actual** isolation level that’s present on the database
    within the scope of this connection.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此连接范围内存在于数据库中的当前**实际**隔离级别。
- en: This attribute will perform a live SQL operation against the database in order
    to procure the current isolation level, so the value returned is the actual level
    on the underlying DBAPI connection regardless of how this state was set. This
    will be one of the four actual isolation modes `READ UNCOMMITTED`, `READ COMMITTED`,
    `REPEATABLE READ`, `SERIALIZABLE`. It will **not** include the `AUTOCOMMIT` isolation
    level setting. Third party dialects may also feature additional isolation level
    settings.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性将执行与数据库的实时 SQL 操作，以获取当前隔离级别，因此返回的值是底层 DBAPI 连接上的实际级别，而不管此状态如何设置。这将是四个实际隔离模式之一
    `READ UNCOMMITTED`、`READ COMMITTED`、`REPEATABLE READ`、`SERIALIZABLE`。它**不**包括
    `AUTOCOMMIT` 隔离级别设置。第三方方言也可能具有额外的隔离级别设置。
- en: Note
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: This method **will not report** on the `AUTOCOMMIT` isolation level, which is
    a separate [dbapi](../glossary.html#term-DBAPI) setting that’s independent of
    **actual** isolation level. When `AUTOCOMMIT` is in use, the database connection
    still has a “traditional” isolation mode in effect, that is typically one of the
    four values `READ UNCOMMITTED`, `READ COMMITTED`, `REPEATABLE READ`, `SERIALIZABLE`.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法**不会报告** AUTOCOMMIT 隔离级别，该级别是独立于**实际**隔离级别的[dbapi](../glossary.html#term-DBAPI)设置。当使用
    AUTOCOMMIT 时，数据库连接仍然具有正在使用的“传统”隔离模式，通常是四个值之一 `READ UNCOMMITTED`、`READ COMMITTED`、`REPEATABLE
    READ`、`SERIALIZABLE`。
- en: Compare to the [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") accessor which returns
    the isolation level that is present on the database at initial connection time.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 与返回初始连接时数据库上存在的隔离级别的 [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") 访问器进行比较。
- en: See also
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - 查看默认级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的隔离级别'
- en: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的隔离级别'
- en: '[PRE106]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Return the current nested transaction in progress, if any.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的嵌套事务（如果有）。
- en: New in version 1.4.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE107]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Return the current root transaction in progress, if any.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的根事务（如果有）。
- en: New in version 1.4.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE108]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Return True if a transaction is in progress.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务正在进行中，则返回True。
- en: '[PRE109]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Return True if a transaction is in progress.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务正在进行中，则返回True。
- en: '[PRE110]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    allowing user-defined data to be associated with the connection.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 与由此[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")引用的底层DBAPI连接相关联的信息字典，允许将用户定义的数据与连接关联起来。
- en: The data here will follow along with the DBAPI connection including after it
    is returned to the connection pool and used again in subsequent instances of [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的数据将随着DBAPI连接一起，包括在将其返回到连接池并在后续的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")实例中再次使用时。
- en: '[PRE111]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Invalidate the underlying DBAPI connection associated with this [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 使与这个[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")关联的底层DBAPI连接无效。
- en: An attempt will be made to close the underlying DBAPI connection immediately;
    however if this operation fails, the error is logged but not raised. The connection
    is then discarded whether or not close() succeeded.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 将立即尝试关闭底层的DBAPI连接；但是，如果此操作失败，则会记录错误但不会引发错误。无论close()是否成功，连接都将被丢弃。
- en: Upon the next use (where “use” typically means using the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method or similar), this [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") will attempt to procure a new DBAPI connection
    using the services of the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    as a source of connectivity (e.g. a “reconnection”).
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一次使用时（“使用”通常意味着使用[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法或类似方法），这个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")将尝试使用[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")的服务来获取一个新的DBAPI连接作为连接源（例如“重新连接”）。
- en: If a transaction was in progress (e.g. the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method has been called) when [`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method is called, at the DBAPI level
    all state associated with this transaction is lost, as the DBAPI connection is
    closed. The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    will not allow a reconnection to proceed until the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object is ended, by calling the [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") method; until that point, any attempt
    at continuing to use the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    will raise an [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"). This is to prevent applications from accidentally
    continuing an ongoing transactional operations despite the fact that the transaction
    has been lost due to an invalidation.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在调用[`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate "sqlalchemy.engine.Connection.invalidate")方法时正在进行事务（例如已调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法），则在DBAPI级别上，与此事务关联的所有状态都会丢失，因为DBAPI连接已关闭。在调用[`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback")方法结束[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")对象之前，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")不会允许重新连接；在那之前，任何继续使用[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的尝试都将引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。这是为了防止应用程序在事务由于失效而丢失的情况下意外继续进行事务操作。
- en: The [`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate "sqlalchemy.engine.Connection.invalidate")
    method, just like auto-invalidation, will at the connection pool level invoke
    the [`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate "sqlalchemy.engine.Connection.invalidate")方法，就像自动失效一样，将在连接池级别调用[`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate")事件。'
- en: 'Parameters:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**exception** – an optional `Exception` instance that’s the reason for the
    invalidation. is passed along to event handlers and logging functions.'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '**exception** – 可选的`Exception`实例，表示失效的原因，将传递给事件处理程序和日志记录函数。'
- en: See also
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](pooling.html#pool-connection-invalidation)'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于失效的信息](pooling.html#pool-connection-invalidation)'
- en: '[PRE112]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Return True if this connection was invalidated.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此连接已失效，则返回True。
- en: This does not indicate whether or not the connection was invalidated at the
    pool level, however
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不表示连接是否在池级别被失效。
- en: '[PRE113]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Roll back the transaction that is currently in progress.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前正在进行的事务。
- en: This method rolls back the current transaction if one has been started. If no
    transaction was started, the method has no effect. If a transaction was started
    and the connection is in an invalidated state, the transaction is cleared using
    this method.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经启动了事务，则此方法会回滚当前事务。如果没有启动事务，则此方法不起作用。如果已启动事务且连接处于失效状态，则使用此方法清除事务。
- en: A transaction is begun on a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    automatically whenever a statement is first executed, or when the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 每当首次执行语句或调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")方法时，将自动在[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上启动事务。
- en: Note
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")
    method only acts upon the primary database transaction that is linked to the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. It does not operate upon a SAVEPOINT that
    would have been invoked from the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method; for control of a SAVEPOINT,
    call [`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback") on the [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction") that is returned by the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method itself.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")方法仅作用于与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象关联的主数据库事务。它不会操作从[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")方法调用的SAVEPOINT；要控制SAVEPOINT，请在[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")方法本身返回的[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")上调用[`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback")。'
- en: '[PRE114]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Executes a SQL statement construct and returns a scalar object.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 执行SQL语句构造并返回标量对象。
- en: This method is shorthand for invoking the [`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method after invoking the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是在调用[`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")方法后调用[`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")方法的简写。参数是相等的。
- en: 'Returns:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a scalar Python value representing the first column of the first row returned.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 表示返回的第一行的第一列的标量Python值。
- en: '[PRE115]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Executes and returns a scalar result set, which yields scalar values from the
    first column of each row.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 执行并返回标量结果集，该结果集从每行的第一列中产生标量值。
- en: This method is equivalent to calling [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") to receive a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, then invoking the [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method to produce a [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") instance.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法相当于调用[`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")以接收[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，然后调用[`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")方法生成[`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")实例。
- en: 'Returns:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
- en: New in version 1.4.24.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.24中新增。
- en: '[PRE116]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Return the schema name for the given schema item taking into account current
    schema translate map.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定架构项的架构名称，考虑到当前架构翻译映射。
- en: '[PRE117]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: A set of hooks intended to augment the construction of an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object based on entrypoint names in a URL.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 一组旨在根据URL中的入口点名称增强[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象构建的钩子集。
- en: 'The purpose of [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") is to allow third-party systems to apply
    engine, pool and dialect level event listeners without the need for the target
    application to be modified; instead, the plugin names can be added to the database
    URL. Target applications for [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") include:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin "sqlalchemy.engine.CreateEnginePlugin")的目的是允许第三方系统应用引擎、池和方言级事件侦听器，而无需修改目标应用程序；相反，插件名称可以添加到数据库URL。[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")的目标应用程序包括：'
- en: connection and SQL performance tools, e.g. which use events to track number
    of checkouts and/or time spent with statements
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接和SQL性能工具，例如使用事件来跟踪检查次数和/或语句所花费的时间
- en: connectivity plugins such as proxies
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接插件和SQL性能工具，例如代理
- en: 'A rudimentary [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") that attaches a logger to an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object might look like:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简陋的将日志记录器附加到[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象的[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")可能如下所示：
- en: '[PRE118]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Plugins are registered using entry points in a similar way as that of dialects:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的注册方式与方言类似，都是使用入口点：
- en: '[PRE119]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'A plugin that uses the above names would be invoked from a database URL as
    in:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述名称的插件将从数据库 URL 中调用，如下所示：
- en: '[PRE120]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The `plugin` URL parameter supports multiple instances, so that a URL may specify
    multiple plugins; they are loaded in the order stated in the URL:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugin` URL 参数支持多个实例，因此 URL 可以指定多个插件；它们按照 URL 中指定的顺序加载：'
- en: '[PRE121]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The plugin names may also be passed directly to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") using the [`create_engine.plugins`](engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") argument:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 插件名称也可以直接通过[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")使用
    [`create_engine.plugins`](engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") 参数传递：
- en: '[PRE122]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'New in version 1.2.3: plugin names can also be specified to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as a list'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2.3开始新增功能：插件名称也可以作为列表指定给[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。
- en: A plugin may consume plugin-specific arguments from the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object as well as the `kwargs` dictionary, which is the
    dictionary of arguments passed to the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call. “Consuming” these arguments includes that they
    must be removed when the plugin initializes, so that the arguments are not passed
    along to the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    constructor, where they will raise an [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") because they are not known by the dialect.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可能会从[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象以及`kwargs`
    字典中获取特定于插件的参数，该字典是传递给 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 调用的参数字典。"消耗"这些参数包括，它们在插件初始化时必须被移除，以便不将参数传递给 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 构造函数，否则它们将引发 [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")，因为方言不知道它们。
- en: 'As of version 1.4 of SQLAlchemy, arguments should continue to be consumed from
    the `kwargs` dictionary directly, by removing the values with a method such as
    `dict.pop`. Arguments from the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object should be consumed by implementing the [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method, returning a new copy
    of the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") with
    plugin-specific parameters removed:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 自SQLAlchemy版本1.4起，应继续直接从`kwargs` 字典中消耗参数，通过诸如 `dict.pop` 的方法删除值。应通过实现 [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") 方法来消耗来自 [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象的参数，返回一个去除了特定于插件的参数的新 [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 副本：
- en: '[PRE123]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Arguments like those illustrated above would be consumed from a [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call such as:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 像上面所示的参数将被从[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")调用中消耗掉，例如：
- en: '[PRE124]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Changed in version 1.4: The [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object is now immutable; a [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") that needs to alter the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") should implement the newly added [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method, which is invoked after
    the plugin is constructed.'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始变更：[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象现在是不可变的；一个需要修改 [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    的 [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin "sqlalchemy.engine.CreateEnginePlugin")
    应该实现新添加的 [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") 方法，在构造插件后调用该方法。
- en: 'For migration, construct the plugin in the following way, checking for the
    existence of the [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method to detect which version
    is running:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 对于迁移，以以下方式构造插件，检查[`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url")方法的存在以检测运行的版本：
- en: '[PRE125]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: See also
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The URL object is now immutable](../changelog/migration_14.html#change-5526)
    - overview of the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    change which also includes notes regarding [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin").'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '[URL 对象现在是不可变的](../changelog/migration_14.html#change-5526) - 对[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")变更的概述，其中还包括有关[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")的说明。'
- en: '**Members**'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.engine.CreateEnginePlugin.__init__), [engine_created()](#sqlalchemy.engine.CreateEnginePlugin.engine_created),
    [handle_dialect_kwargs()](#sqlalchemy.engine.CreateEnginePlugin.handle_dialect_kwargs),
    [handle_pool_kwargs()](#sqlalchemy.engine.CreateEnginePlugin.handle_pool_kwargs),
    [update_url()](#sqlalchemy.engine.CreateEnginePlugin.update_url)'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.engine.CreateEnginePlugin.__init__), [engine_created()](#sqlalchemy.engine.CreateEnginePlugin.engine_created),
    [handle_dialect_kwargs()](#sqlalchemy.engine.CreateEnginePlugin.handle_dialect_kwargs),
    [handle_pool_kwargs()](#sqlalchemy.engine.CreateEnginePlugin.handle_pool_kwargs),
    [update_url()](#sqlalchemy.engine.CreateEnginePlugin.update_url)'
- en: When the engine creation process completes and produces the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object, it is again passed to the plugin via the [`CreateEnginePlugin.engine_created()`](#sqlalchemy.engine.CreateEnginePlugin.engine_created
    "sqlalchemy.engine.CreateEnginePlugin.engine_created") hook. In this hook, additional
    changes can be made to the engine, most typically involving setup of events (e.g.
    those defined in [Core Events](events.html)).
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 当引擎创建过程完成并产生[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象时，它会再次通过[`CreateEnginePlugin.engine_created()`](#sqlalchemy.engine.CreateEnginePlugin.engine_created
    "sqlalchemy.engine.CreateEnginePlugin.engine_created")钩子传递给插件。在此钩子中，可以对引擎进行其他更改，通常涉及事件的设置（例如在[Core
    Events](events.html)中定义的事件）。
- en: '[PRE126]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Construct a new [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin").
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin "sqlalchemy.engine.CreateEnginePlugin")。
- en: The plugin object is instantiated individually for each call to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). A single `Engine` will be passed to the [`CreateEnginePlugin.engine_created()`](#sqlalchemy.engine.CreateEnginePlugin.engine_created
    "sqlalchemy.engine.CreateEnginePlugin.engine_created") method corresponding to
    this URL.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每次调用[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")，都会单独实例化插件对象。一个单独的`Engine`将传递给相应的此
    URL 的[`CreateEnginePlugin.engine_created()`](#sqlalchemy.engine.CreateEnginePlugin.engine_created
    "sqlalchemy.engine.CreateEnginePlugin.engine_created")方法。
- en: 'Parameters:'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`url` –'
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url` –'
- en: the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object.
    The plugin may inspect the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    for arguments. Arguments used by the plugin should be removed, by returning an
    updated [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") from
    the [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method.
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象。插件可以检查[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")以获取参数。插件使用的参数应通过从[`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url")方法返回的更新后的[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")来删除。'
- en: 'Changed in version 1.4: The [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object is now immutable, so a [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") that needs to alter the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object should implement the [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method.'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4 版更改：[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象现在是不可变的，因此需要更改[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象的[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")应实现[`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url")方法。
- en: '`kwargs` – The keyword arguments passed to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").'
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – 传递给 [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的关键字参数。'
- en: '[PRE127]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Receive the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object when it is fully constructed.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全构造时接收 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象。
- en: The plugin may make additional changes to the engine, such as registering engine
    or connection pool events.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可能会对引擎进行额外的更改，例如注册引擎或连接池事件。
- en: '[PRE128]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: parse and modify dialect kwargs
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 解析和修改方言关键字参数
- en: '[PRE129]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: parse and modify pool kwargs
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 解析和修改池关键字参数
- en: '[PRE130]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Update the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL").
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")。
- en: A new [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") should
    be returned. This method is typically used to consume configuration arguments
    from the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") which
    must be removed, as they will not be recognized by the dialect. The [`URL.difference_update_query()`](engines.html#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query") method is available to remove
    these arguments. See the docstring at [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") for an example.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 应返回一个新的 [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")。通常使用此方法来消耗从
    [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 中的配置参数，必须删除这些参数，因为方言不会识别它们。[`URL.difference_update_query()`](engines.html#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query") 方法可用于删除这些参数。有关示例，请参见 [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") 的文档字符串。
- en: New in version 1.4.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE131]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Connects a [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    and [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    together to provide a source of database connectivity and behavior.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 和 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") 连接起来，以提供数据库连接和行为的源。
- en: An [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") object is
    instantiated publicly using the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    函数公开实例化一个 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象。
- en: See also
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Engine Configuration](engines.html)'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '[引擎配置](engines.html)'
- en: '[Working with Engines and Connections](#)'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '[与引擎和连接一起工作](#)'
- en: '**Members**'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[begin()](#sqlalchemy.engine.Engine.begin), [clear_compiled_cache()](#sqlalchemy.engine.Engine.clear_compiled_cache),
    [connect()](#sqlalchemy.engine.Engine.connect), [dispose()](#sqlalchemy.engine.Engine.dispose),
    [driver](#sqlalchemy.engine.Engine.driver), [engine](#sqlalchemy.engine.Engine.engine),
    [execution_options()](#sqlalchemy.engine.Engine.execution_options), [get_execution_options()](#sqlalchemy.engine.Engine.get_execution_options),
    [name](#sqlalchemy.engine.Engine.name), [raw_connection()](#sqlalchemy.engine.Engine.raw_connection),
    [update_execution_options()](#sqlalchemy.engine.Engine.update_execution_options)'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '[begin()](#sqlalchemy.engine.Engine.begin), [clear_compiled_cache()](#sqlalchemy.engine.Engine.clear_compiled_cache),
    [connect()](#sqlalchemy.engine.Engine.connect), [dispose()](#sqlalchemy.engine.Engine.dispose),
    [driver](#sqlalchemy.engine.Engine.driver), [engine](#sqlalchemy.engine.Engine.engine),
    [execution_options()](#sqlalchemy.engine.Engine.execution_options), [get_execution_options()](#sqlalchemy.engine.Engine.get_execution_options),
    [name](#sqlalchemy.engine.Engine.name), [raw_connection()](#sqlalchemy.engine.Engine.raw_connection),
    [update_execution_options()](#sqlalchemy.engine.Engine.update_execution_options)'
- en: '**Class signature**'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    (`sqlalchemy.engine.interfaces.ConnectionEventsTarget`, [`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.inspection.Inspectable`)
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    (`sqlalchemy.engine.interfaces.ConnectionEventsTarget`, [`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.inspection.Inspectable`)
- en: '[PRE132]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Return a context manager delivering a [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") with a [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") established.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个上下文管理器，提供一个已建立的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    和 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'E.g.:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE133]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Upon successful operation, the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is committed. If an error is raised, the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is rolled back.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 操作成功后，[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    将被提交。如果发生错误，则 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    将被回滚。
- en: See also
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    - procure a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    from an [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    - 从 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 中获取 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    - start a [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    for a particular [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    - 为特定的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    开始一个 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。'
- en: '[PRE134]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Clear the compiled cache associated with the dialect.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 清除与方言相关联的编译缓存。
- en: This applies **only** to the built-in cache that is established via the `create_engine.query_cache_size`
    parameter. It will not impact any dictionary caches that were passed via the [`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") parameter.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅适用于通过 `create_engine.query_cache_size` 参数建立的内置缓存。它不会影响通过 [`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") 参数传递的任何字典缓存。
- en: New in version 1.4.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 `1.4` 中的新功能。
- en: '[PRE135]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Return a new [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象。
- en: 'The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    acts as a Python context manager, so the typical use of this method looks like:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    作为 Python 上下文管理器，因此该方法的典型用法如下：'
- en: '[PRE136]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Where above, after the block is completed, the connection is “closed” and its
    underlying DBAPI resources are returned to the connection pool. This also has
    the effect of rolling back any transaction that was explicitly begun or was begun
    via autobegin, and will emit the [`ConnectionEvents.rollback()`](events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback") event if one was started and is
    still in progress.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块完成后，连接被“关闭”，其底层 DBAPI 资源被返回到连接池。这也会导致回滚任何明确启动的事务或通过 autobegin 启动的事务，并且如果已经开始并且仍在进行中，则会发出
    [`ConnectionEvents.rollback()`](events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback") 事件。
- en: See also
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")'
- en: '[PRE137]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Dispose of the connection pool used by this [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 处理此 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 使用的连接池。
- en: A new connection pool is created immediately after the old one has been disposed.
    The previous connection pool is disposed either actively, by closing out all currently
    checked-in connections in that pool, or passively, by losing references to it
    but otherwise not closing any connections. The latter strategy is more appropriate
    for an initializer in a forked Python process.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧连接池被处理后立即创建一个新的连接池。之前的连接池会被主动处理，通过关闭该池中当前所有已签入的连接，或者被动处理，即失去对其的引用，但不关闭任何连接。后一种策略更适用于
    forked Python 进程中的初始化程序。
- en: 'Parameters:'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**close** –'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '**close** –'
- en: if left at its default of `True`, has the effect of fully closing all **currently
    checked in** database connections. Connections that are still checked out will
    **not** be closed, however they will no longer be associated with this [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), so when they are closed individually, eventually
    the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") which they
    are associated with will be garbage collected and they will be closed out fully,
    if not already closed on checkin.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 如果保留在其默认值 `True`，则会完全关闭所有**当前检入**的数据库连接。仍然检出的连接将**不会**被关闭，但它们将不再与此 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 关联，因此当它们逐个关闭时，它们将与之关联的[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")最终将被垃圾收集，如果尚未在检入时关闭，则将完全关闭。
- en: If set to `False`, the previous connection pool is de-referenced, and otherwise
    not touched in any way.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为 `False`，则先前的连接池将被取消引用，否则不会以任何方式触及。
- en: 'New in version 1.4.33: Added the [`Engine.dispose.close`](#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter to allow the replacement of a connection
    pool in a child process without interfering with the connections used by the parent
    process.'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.33中的新增功能：添加了[`Engine.dispose.close`](#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose")参数，以允许在子进程中替换连接池而不干扰父进程使用的连接。
- en: See also
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Engine Disposal](#engine-disposal)'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '[引擎处理](#engine-disposal)'
- en: '[Using Connection Pools with Multiprocessing or os.fork()](pooling.html#pooling-multiprocessing)'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: '[在多进程或 os.fork() 中使用连接池](pooling.html#pooling-multiprocessing)'
- en: '[PRE138]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Driver name of the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    in use by this [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 使用的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") 的驱动程序名称。
- en: '[PRE139]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Returns this [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")。
- en: Used for legacy schemes that accept [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") / [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects within the same variable.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 用于接受同一变量中的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    / [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象的旧方案。
- en: '[PRE140]'
  id: totrans-752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Return a new [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    that will provide [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects with the given execution options.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，它将提供具有给定执行选项的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。
- en: 'The returned [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    remains related to the original [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    in that it shares the same connection pool and other state:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")与原始[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")相关联，因为它共享相同的连接池和其他状态：
- en: The [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") used
    by the new [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") is
    the same instance. The [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method will replace the connection pool instance
    for the parent engine as well as this one.
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")使用的[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")是同一实例。[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")方法将替换父引擎的连接池实例以及此引擎的连接池实例。
- en: Event listeners are “cascaded” - meaning, the new [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") inherits the events of the parent, and new events
    can be associated with the new [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    individually.
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件监听器是“级联”的 - 意思是，新的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")继承了父级的事件，并且新事件可以单独与新的[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")相关联。
- en: The logging configuration and logging_name is copied from the parent [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志配置和日志名称是从父[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")复制的。
- en: The intent of the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method is to implement schemes where
    multiple [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") objects
    refer to the same connection pool, but are differentiated by options that affect
    some execution-level behavior for each engine. One such example is breaking into
    separate “reader” and “writer” [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, where one [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    has a lower [isolation level](../glossary.html#term-isolation-level) setting configured
    or is even transaction-disabled using “autocommit”. An example of this configuration
    is at [Maintaining Multiple Isolation Levels for a Single Engine](#dbapi-autocommit-multiple).
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法的目的是实现多个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象引用相同连接池的方案，但是通过影响每个引擎的一些执行级别行为的选项进行区分。其中一个示例是将其分成单独的“读取器”和“写入器”[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")实例，其中一个[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")配置了较低的[隔离级别](../glossary.html#term-isolation-level)设置，甚至使用“autocommit”禁用事务。此配置的示例位于[Maintaining
    Multiple Isolation Levels for a Single Engine](#dbapi-autocommit-multiple)。'
- en: 'Another example is one that uses a custom option `shard_id` which is consumed
    by an event to change the current schema on a database connection:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是使用一个自定义选项`shard_id`，该选项由事件消耗以在数据库连接上更改当前模式：
- en: '[PRE141]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: The above recipe illustrates two [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects that will each serve as factories for [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects that have pre-established “shard_id” execution
    options present. A [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event handler then
    interprets this execution option to emit a MySQL `use` statement to switch databases
    before a statement execution, while at the same time keeping track of which database
    we’ve established using the [`Connection.info`](#sqlalchemy.engine.Connection.info
    "sqlalchemy.engine.Connection.info") dictionary.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例展示了两个[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象，它们分别用作工厂，用于创建具有预先建立的“shard_id”执行选项的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。然后，[`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")事件处理程序解释此执行选项，以在语句执行之前发出MySQL
    `use`语句以切换数据库，同时使用[`Connection.info`](#sqlalchemy.engine.Connection.info "sqlalchemy.engine.Connection.info")字典跟踪我们已经建立的数据库。
- en: See also
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") - update execution options on
    a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") - 更新[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象上的执行选项。'
- en: '[`Engine.update_execution_options()`](#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") - update the execution options
    for a given [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") in
    place.'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.update_execution_options()`](#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") - 更新给定[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的执行选项。'
- en: '[`Engine.get_execution_options()`](#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options")'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.get_execution_options()`](#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options")'
- en: '[PRE142]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 获取执行期间将生效的非SQL选项。
- en: See also
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[PRE143]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: String name of the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    in use by this [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 正在使用的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")的字符串名称。
- en: '[PRE144]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Return a “raw” DBAPI connection from the connection pool.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 从连接池返回“原始”DBAPI连接。
- en: The returned object is a proxied version of the DBAPI connection object used
    by the underlying driver in use. The object will have all the same behavior as
    the real DBAPI connection, except that its `close()` method will result in the
    connection being returned to the pool, rather than being closed for real.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是底层驱动程序正在使用的DBAPI连接对象的代理版本。该对象将具有与真实的DBAPI连接相同的所有行为，只是它的`close()`方法将导致连接返回到池中，而不是真正关闭。
- en: This method provides direct DBAPI connection access for special situations when
    the API provided by [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is not needed. When a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object is already present, the DBAPI connection is available using the [`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") accessor.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象已经存在时，可以使用[`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection")访问器获取DBAPI连接。
- en: See also
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Driver SQL and Raw DBAPI Connections](#dbapi-connections)'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用驱动程序 SQL 和原始 DBAPI 连接](#dbapi-connections)'
- en: '[PRE145]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Update the default execution_options dictionary of this [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 更新此[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的默认`execution_options`字典。
- en: The given keys/values in **opt are added to the default execution options that
    will be used for all connections. The initial contents of this dictionary can
    be sent via the `execution_options` parameter to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 在**opt中给定的键/值将添加到将用于所有连接的默认执行选项中。此字典的初始内容可以通过`execution_options`参数发送到[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。
- en: See also
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[PRE146]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Encapsulate information about an error condition in progress.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 封装正在进行中的错误条件的信息。
- en: '**Members**'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[chained_exception](#sqlalchemy.engine.ExceptionContext.chained_exception),
    [connection](#sqlalchemy.engine.ExceptionContext.connection), [cursor](#sqlalchemy.engine.ExceptionContext.cursor),
    [dialect](#sqlalchemy.engine.ExceptionContext.dialect), [engine](#sqlalchemy.engine.ExceptionContext.engine),
    [execution_context](#sqlalchemy.engine.ExceptionContext.execution_context), [invalidate_pool_on_disconnect](#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect),
    [is_disconnect](#sqlalchemy.engine.ExceptionContext.is_disconnect), [is_pre_ping](#sqlalchemy.engine.ExceptionContext.is_pre_ping),
    [original_exception](#sqlalchemy.engine.ExceptionContext.original_exception),
    [parameters](#sqlalchemy.engine.ExceptionContext.parameters), [sqlalchemy_exception](#sqlalchemy.engine.ExceptionContext.sqlalchemy_exception),
    [statement](#sqlalchemy.engine.ExceptionContext.statement)'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '[chained_exception](#sqlalchemy.engine.ExceptionContext.chained_exception),
    [connection](#sqlalchemy.engine.ExceptionContext.connection), [cursor](#sqlalchemy.engine.ExceptionContext.cursor),
    [dialect](#sqlalchemy.engine.ExceptionContext.dialect), [engine](#sqlalchemy.engine.ExceptionContext.engine),
    [execution_context](#sqlalchemy.engine.ExceptionContext.execution_context), [invalidate_pool_on_disconnect](#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect),
    [is_disconnect](#sqlalchemy.engine.ExceptionContext.is_disconnect), [is_pre_ping](#sqlalchemy.engine.ExceptionContext.is_pre_ping),
    [original_exception](#sqlalchemy.engine.ExceptionContext.original_exception),
    [parameters](#sqlalchemy.engine.ExceptionContext.parameters), [sqlalchemy_exception](#sqlalchemy.engine.ExceptionContext.sqlalchemy_exception),
    [statement](#sqlalchemy.engine.ExceptionContext.statement)'
- en: This object exists solely to be passed to the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event, supporting an interface
    that can be extended without backwards-incompatibility.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象仅用于传递给[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")事件，支持可在不向后不兼容地扩展的接口。
- en: '[PRE147]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: The exception that was returned by the previous handler in the exception chain,
    if any.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，前一个处理程序在异常链中返回的异常。
- en: If present, this exception will be the one ultimately raised by SQLAlchemy unless
    a subsequent handler replaces it.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，则此异常将最终由SQLAlchemy引发，除非后续处理程序替换它。
- en: May be None.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为 None。
- en: '[PRE148]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    in use during the exception.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 异常发生时使用的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。
- en: This member is present, except in the case of a failure when first connecting.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 此成员存在，除非首次连接失败。
- en: See also
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ExceptionContext.engine`](#sqlalchemy.engine.ExceptionContext.engine "sqlalchemy.engine.ExceptionContext.engine")'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExceptionContext.engine`](#sqlalchemy.engine.ExceptionContext.engine "sqlalchemy.engine.ExceptionContext.engine")'
- en: '[PRE149]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: The DBAPI cursor object.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: DBAPI 游标对象。
- en: May be None.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为None。
- en: '[PRE150]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: The [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in use.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 正在使用的[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。
- en: This member is present for all invocations of the event hook.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 此成员对所有事件钩子的调用都存在。
- en: New in version 2.0.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版中新增。
- en: '[PRE151]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: The [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") in use
    during the exception.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 发生异常时正在使用的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")。
- en: This member is present in all cases except for when handling an error within
    the connection pool “pre-ping” process.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在连接池“预连接”过程中处理错误时，此成员在所有情况下都存在。
- en: '[PRE152]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: The [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    corresponding to the execution operation in progress.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 正在进行的执行操作对应的[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")。
- en: This is present for statement execution operations, but not for operations such
    as transaction begin/end. It also is not present when the exception was raised
    before the [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") could be constructed.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 对于语句执行操作，此标志存在，但对于诸如事务开始/结束之类的操作则不存在。当在构造[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")之前引发异常时，此标志也不存在。
- en: Note that the [`ExceptionContext.statement`](#sqlalchemy.engine.ExceptionContext.statement
    "sqlalchemy.engine.ExceptionContext.statement") and [`ExceptionContext.parameters`](#sqlalchemy.engine.ExceptionContext.parameters
    "sqlalchemy.engine.ExceptionContext.parameters") members may represent a different
    value than that of the [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext"), potentially in the case where a [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event or similar modified
    the statement/parameters to be sent.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`ExceptionContext.statement`](#sqlalchemy.engine.ExceptionContext.statement
    "sqlalchemy.engine.ExceptionContext.statement")和[`ExceptionContext.parameters`](#sqlalchemy.engine.ExceptionContext.parameters
    "sqlalchemy.engine.ExceptionContext.parameters")成员可能表示与[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")的不同值，可能是在[`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")事件或类似事件修改了要发送的语句/参数的情况下。
- en: May be None.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为None。
- en: '[PRE153]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Represent whether all connections in the pool should be invalidated when a “disconnect”
    condition is in effect.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 表示在“断开连接”条件生效时是否应使池中的所有连接失效。
- en: Setting this flag to False within the scope of the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event will have the effect such
    that the full collection of connections in the pool will not be invalidated during
    a disconnect; only the current connection that is the subject of the error will
    actually be invalidated.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")事件的范围内将此标志设置为False将导致在断开连接时不会使池中的所有连接失效；只有实际上受到错误影响的当前连接将被使失效。
- en: The purpose of this flag is for custom disconnect-handling schemes where the
    invalidation of other connections in the pool is to be performed based on other
    conditions, or even on a per-connection basis.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志的目的是用于自定义断开连接处理方案，在此方案中，池中其他连接的失效是基于其他条件进行的，甚至是基于每个连接的条件进行的。
- en: '[PRE154]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Represent whether the exception as occurred represents a “disconnect” condition.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 表示发生的异常是否代表“断开连接”条件。
- en: This flag will always be True or False within the scope of the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") handler.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")处理程序的范围内，此标志将始终为True或False。
- en: SQLAlchemy will defer to this flag in order to determine whether or not the
    connection should be invalidated subsequently. That is, by assigning to this flag,
    a “disconnect” event which then results in a connection and pool invalidation
    can be invoked or prevented by changing this flag.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy将推迟到此标志以确定是否随后应使连接失效。也就是说，通过分配给此标志，可以通过更改此标志来调用或阻止连接和池失效的“断开”事件。
- en: Note
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The pool “pre_ping” handler enabled using the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter does **not** consult this event before deciding
    if the “ping” returned false, as opposed to receiving an unhandled error. For
    this use case, the [legacy recipe based on engine_connect() may be used](pooling.html#pool-disconnects-pessimistic-custom).
    A future API allow more comprehensive customization of the “disconnect” detection
    mechanism across all functions.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")参数启用的池“pre_ping”处理程序在决定“ping”返回false而不是接收到未处理错误之前不会查看此事件。对于这种用例，可以使用基于engine_connect()的[遗留配方](pooling.html#pool-disconnects-pessimistic-custom)。将来的API允许在所有功能中更全面地自定义“断开”检测机制。
- en: '[PRE155]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Indicates if this error is occurring within the “pre-ping” step performed when
    [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") is set to `True`. In this mode, the [`ExceptionContext.engine`](#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") attribute will be `None`. The dialect
    in use is accessible via the [`ExceptionContext.dialect`](#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") attribute.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此错误是否发生在设置[`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")为`True`时执行的“pre-ping”步骤中。在此模式下，[`ExceptionContext.engine`](#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine")属性将为`None`。正在使用的方言可通过[`ExceptionContext.dialect`](#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect")属性访问。
- en: New in version 2.0.5.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.5中的新功能。
- en: '[PRE156]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: The exception object which was caught.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 被捕获的异常对象。
- en: This member is always present.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 此成员始终存在。
- en: '[PRE157]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Parameter collection that was emitted directly to the DBAPI.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 直接发送到DBAPI的参数集合。
- en: May be None.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是None。
- en: '[PRE158]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: The [`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") which wraps the original, and will be raised
    if exception handling is not circumvented by the event.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 包装原始异常的[`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")，如果未绕过事件处理，则将引发该异常。
- en: May be None, as not all exception types are wrapped by SQLAlchemy. For DBAPI-level
    exceptions that subclass the dbapi’s Error class, this field will always be present.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为None，因为不是所有的异常类型都被SQLAlchemy包装。对于子类化dbapi的Error类的DBAPI级别异常，此字段将始终存在。
- en: '[PRE159]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: String SQL statement that was emitted directly to the DBAPI.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 直接发送到DBAPI的字符串SQL语句。
- en: May be None.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是None。
- en: '[PRE160]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Represent a ‘nested’, or SAVEPOINT transaction.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 表示“嵌套”或SAVEPOINT事务。
- en: The [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    object is created by calling the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method of [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")对象是通过调用[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")方法创建的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: 'When using [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    the semantics of “begin” / “commit” / “rollback” are as follows:'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")时，“begin”/“commit”/“rollback”的语义如下：
- en: the “begin” operation corresponds to the “BEGIN SAVEPOINT” command, where the
    savepoint is given an explicit name that is part of the state of this object.
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “begin”操作对应于“BEGIN SAVEPOINT”命令，其中保存点被赋予一个显式名称，该名称是此对象状态的一部分。
- en: The [`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit") method corresponds to a “RELEASE
    SAVEPOINT” operation, using the savepoint identifier associated with this [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction").
  id: totrans-843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit")方法对应于“RELEASE SAVEPOINT”操作，使用与此[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")关联的保存点标识符。'
- en: The [`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback") method corresponds to a “ROLLBACK
    TO SAVEPOINT” operation, using the savepoint identifier associated with this [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction").
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback")方法对应于“ROLLBACK TO SAVEPOINT”操作，使用与此[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")关联的保存点标识符。'
- en: The rationale for mimicking the semantics of an outer transaction in terms of
    savepoints so that code may deal with a “savepoint” transaction and an “outer”
    transaction in an agnostic way.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 模仿外部事务的语义以便代码可以以一种不可知的方式处理“保存点”事务和“外部”事务。
- en: See also
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SAVEPOINT](../orm/session_transaction.html#session-begin-nested) - ORM
    version of the SAVEPOINT API.'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SAVEPOINT](../orm/session_transaction.html#session-begin-nested) - SAVEPOINT
    API的ORM版本。'
- en: '**Members**'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.NestedTransaction.close), [commit()](#sqlalchemy.engine.NestedTransaction.commit),
    [rollback()](#sqlalchemy.engine.NestedTransaction.rollback)'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.NestedTransaction.close), [commit()](#sqlalchemy.engine.NestedTransaction.commit),
    [rollback()](#sqlalchemy.engine.NestedTransaction.rollback)'
- en: '**Class signature**'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction") ([`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"))
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")（[`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")）
- en: '[PRE161]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '*inherited from the* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close
    "sqlalchemy.engine.Transaction.close") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close "sqlalchemy.engine.Transaction.close")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Close this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是嵌套的开始/提交中的基本事务，则事务将回滚。否则，该方法将返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于取消事务而不影响封闭事务的范围。
- en: '[PRE162]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '*inherited from the* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit "sqlalchemy.engine.Transaction.commit")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Commit this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现可能会根据使用的事务类型而有所不同：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a COMMIT.
  id: totrans-861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个COMMIT。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “RELEASE SAVEPOINT” operation.
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“RELEASE
    SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于DBAPI的两阶段事务方法。
- en: '[PRE163]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '*inherited from the* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback "sqlalchemy.engine.Transaction.rollback")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Roll back this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现可能根据使用的事务类型而有所不同：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a ROLLBACK.
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个ROLLBACK。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “ROLLBACK TO SAVEPOINT” operation.
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“ROLLBACK
    TO SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于
    DBAPI 的两阶段事务方法。
- en: '[PRE164]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Represent the “root” transaction on a [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 表示[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")上的“根”事务。
- en: This corresponds to the current “BEGIN/COMMIT/ROLLBACK” that’s occurring for
    the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
    The [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")
    is created by calling upon the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method, and remains associated with the
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") throughout
    its active span. The current [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") in use is accessible via the [`Connection.get_transaction`](#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction") method of [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 这对应于当前正在为[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")执行的“BEGIN/COMMIT/ROLLBACK”。通过调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法创建[`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")，并且在其活动范围内与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")关联。当前使用的[`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")可通过[`Connection.get_transaction`](#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction")方法访问[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。
- en: In [2.0 style](../glossary.html#term-2.0-style) use, the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") also employs “autobegin” behavior that will create
    a new [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")
    whenever a connection in a non-transactional state is used to emit commands on
    the DBAPI connection. The scope of the [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") in 2.0 style use can be controlled using
    the [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    and [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")
    methods.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 在[2.0 style](../glossary.html#term-2.0-style)中使用时，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")还采用“autobegin”行为，每当处于非事务状态的连接用于在 DBAPI 连接上发出命令时，就会创建一个新的[`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")。在 2.0 style 使用中，[`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") 的范围可以使用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")和[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法进行控制。
- en: '**Members**'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.RootTransaction.close), [commit()](#sqlalchemy.engine.RootTransaction.commit),
    [rollback()](#sqlalchemy.engine.RootTransaction.rollback)'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.RootTransaction.close), [commit()](#sqlalchemy.engine.RootTransaction.commit),
    [rollback()](#sqlalchemy.engine.RootTransaction.rollback)'
- en: '**Class signature**'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") ([`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"))
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")（[`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")）
- en: '[PRE165]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '*inherited from the* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close
    "sqlalchemy.engine.Transaction.close") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自[`Transaction.close()`](#sqlalchemy.engine.Transaction.close "sqlalchemy.engine.Transaction.close")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
- en: Close this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是嵌套在 begin/commit 中的基本事务，则事务将回滚()。否则，该方法返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于取消事务，而不影响封闭事务的范围。
- en: '[PRE166]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '*inherited from the* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自[`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit "sqlalchemy.engine.Transaction.commit")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
- en: Commit this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可能根据正在使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a COMMIT.
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个
    COMMIT。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “RELEASE SAVEPOINT” operation.
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“RELEASE
    SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于
    DBAPI 的两阶段事务方法。
- en: '[PRE167]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '*inherited from the* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自[`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback "sqlalchemy.engine.Transaction.rollback")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
- en: Roll back this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可能根据正在使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a ROLLBACK.
  id: totrans-895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个
    ROLLBACK。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “ROLLBACK TO SAVEPOINT” operation.
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“ROLLBACK
    TO SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于
    DBAPI 的两阶段事务方法。
- en: '[PRE168]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Represent a database transaction in progress.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 表示正在进行的数据库事务。
- en: 'The [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    object is procured by calling the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method of [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"):'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    方法的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    获得 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    对象：
- en: '[PRE169]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'The object provides [`rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") and [`commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") methods in order to control transaction
    boundaries. It also implements a context manager interface so that the Python
    `with` statement can be used with the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象提供了[`rollback()`](#sqlalchemy.engine.Transaction.rollback "sqlalchemy.engine.Transaction.rollback")和[`commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit")方法以控制事务边界。它还实现了上下文管理器接口，以便Python `with`语句可以与[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法一起使用：
- en: '[PRE170]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: The Transaction object is **not** threadsafe.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: Transaction对象**不**是线程安全的。
- en: '**Members**'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.Transaction.close), [commit()](#sqlalchemy.engine.Transaction.commit),
    [rollback()](#sqlalchemy.engine.Transaction.rollback)'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.Transaction.close)，[commit()](#sqlalchemy.engine.Transaction.commit)，[rollback()](#sqlalchemy.engine.Transaction.rollback)'
- en: See also
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
- en: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")'
- en: '[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")'
- en: '**Class signature**'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    (`sqlalchemy.engine.util.TransactionalContext`)
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")（`sqlalchemy.engine.util.TransactionalContext`）
- en: '[PRE171]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Close this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是begin/commit嵌套中的基本事务，则事务将回滚()。否则，该方法返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于取消Transaction而不影响封闭事务的范围。
- en: '[PRE172]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Commit this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现可能根据使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a COMMIT.
  id: totrans-920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于COMMIT。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “RELEASE SAVEPOINT” operation.
  id: totrans-921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“RELEASE
    SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可能会使用特定于DBAPI的两阶段事务方法。
- en: '[PRE173]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Roll back this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现可能根据使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a ROLLBACK.
  id: totrans-926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于ROLLBACK。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “ROLLBACK TO SAVEPOINT” operation.
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“ROLLBACK
    TO SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可能会使用特定于DBAPI的两阶段事务方法。
- en: '[PRE174]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Represent a two-phase transaction.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 表示两阶段事务。
- en: A new [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")
    object may be procured using the [`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase") method.
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase") 方法获取新的 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") 对象。
- en: The interface is the same as that of [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") with the addition of the [`prepare()`](#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") method.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 接口与 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    相同，只增加了 [`prepare()`](#sqlalchemy.engine.TwoPhaseTransaction.prepare "sqlalchemy.engine.TwoPhaseTransaction.prepare")
    方法。
- en: '**Members**'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.TwoPhaseTransaction.close), [commit()](#sqlalchemy.engine.TwoPhaseTransaction.commit),
    [prepare()](#sqlalchemy.engine.TwoPhaseTransaction.prepare), [rollback()](#sqlalchemy.engine.TwoPhaseTransaction.rollback)'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.TwoPhaseTransaction.close), [commit()](#sqlalchemy.engine.TwoPhaseTransaction.commit),
    [prepare()](#sqlalchemy.engine.TwoPhaseTransaction.prepare), [rollback()](#sqlalchemy.engine.TwoPhaseTransaction.rollback)'
- en: '**Class signature**'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") ([`sqlalchemy.engine.RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction"))
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") ([`sqlalchemy.engine.RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction"))
- en: '[PRE175]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '*inherited from the* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close
    "sqlalchemy.engine.Transaction.close") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close "sqlalchemy.engine.Transaction.close")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Close this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是开始/提交嵌套中的基本事务，则事务将回滚()。否则，该方法返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于取消事务，而不影响封闭事务的范围。
- en: '[PRE176]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '*inherited from the* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit "sqlalchemy.engine.Transaction.commit")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Commit this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现可能会根据所使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a COMMIT.
  id: totrans-946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如 [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于
    COMMIT。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “RELEASE SAVEPOINT” operation.
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“RELEASE
    SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于DBAPI的两阶段事务方法。
- en: '[PRE177]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Prepare this [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction").
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 准备此 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")。
- en: After a PREPARE, the transaction can be committed.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PREPARE 之后，可以提交事务。
- en: '[PRE178]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '*inherited from the* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback "sqlalchemy.engine.Transaction.rollback")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Roll back this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可能会根据使用的事务类型而有所不同：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a ROLLBACK.
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于ROLLBACK。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “ROLLBACK TO SAVEPOINT” operation.
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“ROLLBACK
    TO SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于DBAPI的方法进行两阶段事务。
- en: Result Set API
  id: totrans-959
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Result Set API
- en: '| Object Name | Description |'
  id: totrans-960
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-961
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ChunkedIteratorResult](#sqlalchemy.engine.ChunkedIteratorResult) | An [`IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult") that works from an iterator-producing callable.
    |'
  id: totrans-962
  prefs: []
  type: TYPE_TB
  zh: '| [ChunkedIteratorResult](#sqlalchemy.engine.ChunkedIteratorResult) | 从生成迭代器的可调用对象工作的[`IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult")。 |'
- en: '| [CursorResult](#sqlalchemy.engine.CursorResult) | A Result that is representing
    state from a DBAPI cursor. |'
  id: totrans-963
  prefs: []
  type: TYPE_TB
  zh: '| [CursorResult](#sqlalchemy.engine.CursorResult) | 表示来自DBAPI游标的状态的结果。 |'
- en: '| [FilterResult](#sqlalchemy.engine.FilterResult) | A wrapper for a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that returns objects other than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, such as dictionaries or scalar objects. |'
  id: totrans-964
  prefs: []
  type: TYPE_TB
  zh: '| [FilterResult](#sqlalchemy.engine.FilterResult) | 一个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的包装器，返回除[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象之外的对象，例如字典或标量对象。
    |'
- en: '| [FrozenResult](#sqlalchemy.engine.FrozenResult) | Represents a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object in a “frozen” state suitable for caching. |'
  id: totrans-965
  prefs: []
  type: TYPE_TB
  zh: '| [FrozenResult](#sqlalchemy.engine.FrozenResult) | 代表一个适合缓存的“冻结”状态的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。 |'
- en: '| [IteratorResult](#sqlalchemy.engine.IteratorResult) | A [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that gets data from a Python iterator of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects or similar row-like data. |'
  id: totrans-966
  prefs: []
  type: TYPE_TB
  zh: '| [IteratorResult](#sqlalchemy.engine.IteratorResult) | 从Python迭代器的[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象或类似行的数据获取数据的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。
    |'
- en: '| [MappingResult](#sqlalchemy.engine.MappingResult) | A wrapper for a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that returns dictionary values rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  id: totrans-967
  prefs: []
  type: TYPE_TB
  zh: '| [MappingResult](#sqlalchemy.engine.MappingResult) | 一个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的包装器，返回字典值而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")值。
    |'
- en: '| [MergedResult](#sqlalchemy.engine.MergedResult) | A [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that is merged from any number of [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects. |'
  id: totrans-968
  prefs: []
  type: TYPE_TB
  zh: '| [MergedResult](#sqlalchemy.engine.MergedResult) | 从任意数量的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象合并的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。
    |'
- en: '| [Result](#sqlalchemy.engine.Result) | Represent a set of database results.
    |'
  id: totrans-969
  prefs: []
  type: TYPE_TB
  zh: '| [Result](#sqlalchemy.engine.Result) | 代表一组数据库结果。 |'
- en: '| [Row](#sqlalchemy.engine.Row) | Represent a single result row. |'
  id: totrans-970
  prefs: []
  type: TYPE_TB
  zh: '| [Row](#sqlalchemy.engine.Row) | 代表一个单一的结果行。 |'
- en: '| [RowMapping](#sqlalchemy.engine.RowMapping) | A `Mapping` that maps column
    names and objects to [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") values.
    |'
  id: totrans-971
  prefs: []
  type: TYPE_TB
  zh: '| [RowMapping](#sqlalchemy.engine.RowMapping) | 一个将列名和对象映射到[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")值的`Mapping`。 |'
- en: '| [ScalarResult](#sqlalchemy.engine.ScalarResult) | A wrapper for a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that returns scalar values rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  id: totrans-972
  prefs: []
  type: TYPE_TB
  zh: '| [ScalarResult](#sqlalchemy.engine.ScalarResult) | 一个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的包装器，返回标量值而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")值。
    |'
- en: '| [TupleResult](#sqlalchemy.engine.TupleResult) | A [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that’s typed as returning plain Python tuples instead
    of rows. |'
  id: totrans-973
  prefs: []
  type: TYPE_TB
  zh: '| [TupleResult](#sqlalchemy.engine.TupleResult) | 一个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")，被类型化为返回纯Python元组而不是行。 |'
- en: '[PRE179]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: An [`IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")
    that works from an iterator-producing callable.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 一个从生成迭代器的可调用对象中工作的 [`IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")。
- en: The given `chunks` argument is a function that is given a number of rows to
    return in each chunk, or `None` for all rows. The function should then return
    an un-consumed iterator of lists, each list of the requested size.
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的 `chunks` 参数是一个函数，该函数给出每个块中要返回的行数，或者为 `None` 以返回所有行。该函数应返回一个未使用的列表迭代器，每个列表的大小为请求的大小。
- en: The function can be called at any time again, in which case it should continue
    from the same result set but adjust the chunk size as given.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在任何时候再次调用该函数，在这种情况下，它应从相同的结果集继续，但根据给定的块大小进行调整。
- en: New in version 1.4.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版开始。
- en: '**Members**'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[yield_per()](#sqlalchemy.engine.ChunkedIteratorResult.yield_per)'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: '[yield_per()](#sqlalchemy.engine.ChunkedIteratorResult.yield_per)'
- en: '**Class signature**'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.ChunkedIteratorResult`](#sqlalchemy.engine.ChunkedIteratorResult
    "sqlalchemy.engine.ChunkedIteratorResult") ([`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult"))
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.ChunkedIteratorResult`](#sqlalchemy.engine.ChunkedIteratorResult
    "sqlalchemy.engine.ChunkedIteratorResult") ([`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult"))
- en: '[PRE180]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略，以一次提取 `num` 行。
- en: This impacts the underlying behavior of the result when iterating over the result
    object, or otherwise making use of methods such as [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") that return one row at a time. Data from
    the underlying cursor or other data source will be buffered up to this many rows
    in memory, and the buffered collection will then be yielded out one row at a time
    or as many rows are requested. Each time the buffer clears, it will be refreshed
    to this many rows or as many rows remain if fewer remain.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 这会影响结果在迭代结果对象时的基础行为，或者在使用诸如 [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") 这样一次返回一行的方法时进行使用。来自底层游标或其他数据源的数据将在内存中缓冲到这么多行，并且缓冲集合然后将一行一次或请求的行数作为输出。每次缓冲清除时，它都将刷新为这么多行或如果剩余的行数少于这么多行则为剩余的行数。
- en: The [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    method is generally used in conjunction with the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    allow the database dialect in use to make use of a server side cursor, if the
    DBAPI supports a specific “server side cursor” mode separate from its default
    mode of operation.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    方法通常与 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项一起使用，该选项将允许正在使用的数据库方言使用服务器端游标，如果
    DBAPI 支持与其默认操作模式分离的特定“服务器端游标”模式。'
- en: Tip
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Consider using the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    simultaneously set [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") to ensure the use of server
    side cursors, as well as automatically invoke the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method to establish a fixed row buffer size
    at once.
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项，它将同时设置 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 以确保使用服务器端游标，并自动调用 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法一次性建立固定的行缓冲区大小。
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option is available
    for ORM operations, with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-oriented use described at [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per). The Core-only
    version which works with [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is new as of SQLAlchemy 1.4.40.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项可用于 ORM 操作，其与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关的用法在[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)中进行了描述。与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")配合使用的仅限于 Core 的版本是 SQLAlchemy 1.4.40 的新功能。'
- en: New in version 1.4.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能。
- en: 'Parameters:'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**num** – number of rows to fetch each time the buffer is refilled. If set
    to a value below 1, fetches all rows for the next buffer.'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: '**num** – 每次重新填充缓冲区时要获取的行数。如果设置为小于 1 的值，则获取下一个缓冲区的所有行。'
- en: See also
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流式结果）](#engine-stream-results) - 描述了[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")的核心行为。'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在[ORM 查询指南](../orm/queryguide/index.html)中'
- en: '[PRE181]'
  id: totrans-996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: A Result that is representing state from a DBAPI cursor.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 表示来自 DBAPI 游标的状态的 Result。
- en: 'Changed in version 1.4: The `CursorResult`` class replaces the previous `ResultProxy`
    interface. This classes are based on the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") calling API which provides an updated usage model
    and calling facade for SQLAlchemy Core and SQLAlchemy ORM.'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版更改：`CursorResult` 类取代了以前的 `ResultProxy` 接口。这些类基于[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")调用 API，为 SQLAlchemy Core 和 SQLAlchemy ORM 提供了更新的使用模型和调用外观。
- en: Returns database rows via the [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    class, which provides additional API features and behaviors on top of the raw
    data returned by the DBAPI. Through the use of filters such as the [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method, other kinds of objects may also be
    returned.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")类返回数据库行，该类在 DBAPI 返回的原始数据之上提供了其他
    API 功能和行为。通过诸如[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")方法之类的过滤器，还可以返回其他类型的对象。
- en: See also
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - introductory material for accessing [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") and [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SELECT 语句](../tutorial/data_select.html#tutorial-selecting-data) - 用于访问[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")和[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的入门材料。'
- en: '**Members**'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.engine.CursorResult.all), [close()](#sqlalchemy.engine.CursorResult.close),
    [columns()](#sqlalchemy.engine.CursorResult.columns), [fetchall()](#sqlalchemy.engine.CursorResult.fetchall),
    [fetchmany()](#sqlalchemy.engine.CursorResult.fetchmany), [fetchone()](#sqlalchemy.engine.CursorResult.fetchone),
    [first()](#sqlalchemy.engine.CursorResult.first), [freeze()](#sqlalchemy.engine.CursorResult.freeze),
    [inserted_primary_key](#sqlalchemy.engine.CursorResult.inserted_primary_key),
    [inserted_primary_key_rows](#sqlalchemy.engine.CursorResult.inserted_primary_key_rows),
    [is_insert](#sqlalchemy.engine.CursorResult.is_insert), [keys()](#sqlalchemy.engine.CursorResult.keys),
    [last_inserted_params()](#sqlalchemy.engine.CursorResult.last_inserted_params),
    [last_updated_params()](#sqlalchemy.engine.CursorResult.last_updated_params),
    [lastrow_has_defaults()](#sqlalchemy.engine.CursorResult.lastrow_has_defaults),
    [lastrowid](#sqlalchemy.engine.CursorResult.lastrowid), [mappings()](#sqlalchemy.engine.CursorResult.mappings),
    [merge()](#sqlalchemy.engine.CursorResult.merge), [one()](#sqlalchemy.engine.CursorResult.one),
    [one_or_none()](#sqlalchemy.engine.CursorResult.one_or_none), [partitions()](#sqlalchemy.engine.CursorResult.partitions),
    [postfetch_cols()](#sqlalchemy.engine.CursorResult.postfetch_cols), [prefetch_cols()](#sqlalchemy.engine.CursorResult.prefetch_cols),
    [returned_defaults](#sqlalchemy.engine.CursorResult.returned_defaults), [returned_defaults_rows](#sqlalchemy.engine.CursorResult.returned_defaults_rows),
    [returns_rows](#sqlalchemy.engine.CursorResult.returns_rows), [rowcount](#sqlalchemy.engine.CursorResult.rowcount),
    [scalar()](#sqlalchemy.engine.CursorResult.scalar), [scalar_one()](#sqlalchemy.engine.CursorResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.engine.CursorResult.scalar_one_or_none), [scalars()](#sqlalchemy.engine.CursorResult.scalars),
    [splice_horizontally()](#sqlalchemy.engine.CursorResult.splice_horizontally),
    [splice_vertically()](#sqlalchemy.engine.CursorResult.splice_vertically), [supports_sane_multi_rowcount()](#sqlalchemy.engine.CursorResult.supports_sane_multi_rowcount),
    [supports_sane_rowcount()](#sqlalchemy.engine.CursorResult.supports_sane_rowcount),
    [t](#sqlalchemy.engine.CursorResult.t), [tuples()](#sqlalchemy.engine.CursorResult.tuples),
    [unique()](#sqlalchemy.engine.CursorResult.unique), [yield_per()](#sqlalchemy.engine.CursorResult.yield_per)'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.engine.CursorResult.all), [close()](#sqlalchemy.engine.CursorResult.close),
    [columns()](#sqlalchemy.engine.CursorResult.columns), [fetchall()](#sqlalchemy.engine.CursorResult.fetchall),
    [fetchmany()](#sqlalchemy.engine.CursorResult.fetchmany), [fetchone()](#sqlalchemy.engine.CursorResult.fetchone),
    [first()](#sqlalchemy.engine.CursorResult.first), [freeze()](#sqlalchemy.engine.CursorResult.freeze),
    [inserted_primary_key](#sqlalchemy.engine.CursorResult.inserted_primary_key),
    [inserted_primary_key_rows](#sqlalchemy.engine.CursorResult.inserted_primary_key_rows),
    [is_insert](#sqlalchemy.engine.CursorResult.is_insert), [keys()](#sqlalchemy.engine.CursorResult.keys),
    [last_inserted_params()](#sqlalchemy.engine.CursorResult.last_inserted_params),
    [last_updated_params()](#sqlalchemy.engine.CursorResult.last_updated_params),
    [lastrow_has_defaults()](#sqlalchemy.engine.CursorResult.lastrow_has_defaults),
    [lastrowid](#sqlalchemy.engine.CursorResult.lastrowid), [mappings()](#sqlalchemy.engine.CursorResult.mappings),
    [merge()](#sqlalchemy.engine.CursorResult.merge), [one()](#sqlalchemy.engine.CursorResult.one),
    [one_or_none()](#sqlalchemy.engine.CursorResult.one_or_none), [partitions()](#sqlalchemy.engine.CursorResult.partitions),
    [postfetch_cols()](#sqlalchemy.engine.CursorResult.postfetch_cols), [prefetch_cols()](#sqlalchemy.engine.CursorResult.prefetch_cols),
    [returned_defaults](#sqlalchemy.engine.CursorResult.returned_defaults), [returned_defaults_rows](#sqlalchemy.engine.CursorResult.returned_defaults_rows),
    [returns_rows](#sqlalchemy.engine.CursorResult.returns_rows), [rowcount](#sqlalchemy.engine.CursorResult.rowcount),
    [scalar()](#sqlalchemy.engine.CursorResult.scalar), [scalar_one()](#sqlalchemy.engine.CursorResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.engine.CursorResult.scalar_one_or_none), [scalars()](#sqlalchemy.engine.CursorResult.scalars),
    [splice_horizontally()](#sqlalchemy.engine.CursorResult.splice_horizontally),
    [splice_vertically()](#sqlalchemy.engine.CursorResult.splice_vertically), [supports_sane_multi_rowcount()](#sqlalchemy.engine.CursorResult.supports_sane_multi_rowcount),
    [supports_sane_rowcount()](#sqlalchemy.engine.CursorResult.supports_sane_rowcount),
    [t](#sqlalchemy.engine.CursorResult.t), [tuples()](#sqlalchemy.engine.CursorResult.tuples),
    [unique()](#sqlalchemy.engine.CursorResult.unique), [yield_per()](#sqlalchemy.engine.CursorResult.yield_per)'
- en: '**Class signature**'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    ([`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result"))
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    ([`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result"))
- en: '[PRE182]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '*inherited from the* [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return all rows in a sequence.
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列中的所有行。
- en: Closes the result set after invocation. Subsequent invocations will return an
    empty sequence.
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 调用后关闭结果集。后续调用将返回一个空序列。
- en: New in version 1.4.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Returns:'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a sequence of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects.
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: See also
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - How to stream a large result set without loading it completely in python.'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又称流式结果）](#engine-stream-results) - 如何在 Python 中流式传输大型结果集而不完全加载它。'
- en: '[PRE183]'
  id: totrans-1015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Close this [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult").
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")。
- en: This closes out the underlying DBAPI cursor corresponding to the statement execution,
    if one is still present. Note that the DBAPI cursor is automatically released
    when the [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    exhausts all available rows. [`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") is generally an optional method except
    in the case when discarding a [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") that still has additional rows pending for fetch.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仍然存在底层 DBAPI 游标，则关闭该游标对应的语句执行。请注意，当 [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") 耗尽所有可用行时，DBAPI 游标会自动释放。通常，[`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") 是一个可选方法，除非在丢弃一个仍具有待提取的附加行的 [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") 时。
- en: After this method is called, it is no longer valid to call upon the fetch methods,
    which will raise a [`ResourceClosedError`](exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError") on subsequent use.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法后，再调用提取方法将不再有效，并且在后续使用时会引发 [`ResourceClosedError`](exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")。
- en: See also
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Working with Engines and Connections](#)'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用引擎和连接](#)'
- en: '[PRE184]'
  id: totrans-1021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '*inherited from the* [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.columns()`](#sqlalchemy.engine.Result.columns "sqlalchemy.engine.Result.columns")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Establish the columns that should be returned in each row.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 确定每行应返回的列。
- en: This method may be used to limit the columns returned as well as to reorder
    them. The given list of expressions are normally a series of integers or string
    key names. They may also be appropriate [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects which correspond to a given
    statement construct.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可用于限制返回的列，也可用于重新排序列。给定的表达式列表通常是一系列整数或字符串键名。它们也可以是适当的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象，这些对象对应于给定的语句构造。
- en: 'Changed in version 2.0: Due to a bug in 1.4, the [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method had an incorrect behavior where calling
    upon the method with just one index would cause the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object to yield scalar values rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects. In version 2.0, this behavior has been corrected
    such that calling upon [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") with a single index will produce a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object that continues to yield [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, which include only a single column.'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的更改：由于 1.4 版本中的一个错误，[`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 方法具有了错误的行为，仅使用一个索引调用该方法会导致 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象生成标量值，而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象。在 2.0 版本中，已经纠正了这种行为，调用 [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 时使用单个索引将产生一个继续生成 [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象，该对象仅包含单个列。
- en: 'E.g.:'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE185]'
  id: totrans-1027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'Example of using the column objects from the statement itself:'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 使用语句本身的列对象的示例：
- en: '[PRE186]'
  id: totrans-1029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: New in version 1.4.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新内容。
- en: 'Parameters:'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***col_expressions** – indicates columns to be returned. Elements may be integer
    row indexes, string column names, or appropriate [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects corresponding to a select construct.'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: '***col_expressions** – 表示要返回的列。元素可以是整数行索引、字符串列名称或与选择构造相对应的适当 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象。'
- en: 'Returns:'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    with the modifications given.
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 带有给定修改的此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象。
- en: '[PRE187]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '*inherited from the* [`Result.fetchall()`](#sqlalchemy.engine.Result.fetchall
    "sqlalchemy.engine.Result.fetchall") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.fetchall()`](#sqlalchemy.engine.Result.fetchall "sqlalchemy.engine.Result.fetchall")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: A synonym for the [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    method.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    方法的同义词。'
- en: '[PRE188]'
  id: totrans-1038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '*inherited from the* [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Fetch many rows.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多行。
- en: When all rows are exhausted, returns an empty sequence.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都用完时，返回空序列。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于向后兼容 SQLAlchemy 1.x.x。
- en: To fetch rows in groups, use the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method.
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 要按组获取行，请使用 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    方法。
- en: 'Returns:'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a sequence of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: See also
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
- en: '[PRE189]'
  id: totrans-1048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '*inherited from the* [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone "sqlalchemy.engine.Result.fetchone")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Fetch one row.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一行。
- en: When all rows are exhausted, returns None.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都用完时，返回 None。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于向后兼容 SQLAlchemy 1.x.x。
- en: To fetch the first row of a result only, use the [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") method. To iterate through all rows, iterate
    the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object directly.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅获取结果的第一行，请使用 [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    方法。要遍历所有行，请直接遍历 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象。
- en: 'Returns:'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object if no filters
    are applied, or `None` if no rows remain.
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未应用任何过滤器，则返回一个 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象，否则返回
    `None`。
- en: '[PRE190]'
  id: totrans-1056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '*inherited from the* [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Fetch the first row or `None` if no row is present.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行或者如果不存在行则返回 `None`。
- en: Closes the result set and discards remaining rows.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭结果集并丢弃剩余行。
- en: Note
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method, or combine [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first").
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回一行，例如元组。要返回确切的一个单一标量值，即第一行的第一列，请使用 [`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") 方法，或组合 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 和 [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")。
- en: Additionally, in contrast to the behavior of the legacy ORM [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") method, **no limit is applied** to the SQL query
    which was invoked to produce this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result");
    for a DBAPI driver that buffers results in memory before yielding rows, all rows
    will be sent to the Python process and all but the first row will be discarded.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与传统 ORM [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") 方法的行为相比，**不会应用限制**到用于生成此 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 的 SQL 查询；对于在生成行之前在内存中缓冲结果的 DBAPI 驱动程序，所有行将被发送到 Python
    进程，并且除了第一行之外的所有行都将被丢弃。
- en: See also
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query Unified with Core Select](../changelog/migration_20.html#migration-20-unify-select)'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询与核心选择统一](../changelog/migration_20.html#migration-20-unify-select)'
- en: 'Returns:'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object, or None if
    no rows remain.
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象，如果没有剩余行则为 None。
- en: See also
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")'
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[PRE191]'
  id: totrans-1070
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '*inherited from the* [`Result.freeze()`](#sqlalchemy.engine.Result.freeze "sqlalchemy.engine.Result.freeze")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.freeze()`](#sqlalchemy.engine.Result.freeze "sqlalchemy.engine.Result.freeze")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return a callable object that will produce copies of this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") when invoked.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，当调用时将产生此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    的副本。
- en: The callable object returned is an instance of [`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult").
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的可调用对象是 [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    的实例。
- en: This is used for result set caching. The method must be called on the result
    when it has been unconsumed, and calling the method will consume the result fully.
    When the [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    is retrieved from a cache, it can be called any number of times where it will
    produce a new [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object each time against its stored set of rows.
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 用于结果集缓存。必须在结果未被消耗时调用该方法，并且调用该方法将完全消耗结果。当从缓存中检索到 [`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") 时，可以任意多次调用它，每次对其存储的行集产生一个新的 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象。
- en: See also
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](../orm/session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](../orm/session_events.html#do-orm-execute-re-executing) - 在 ORM 中示例用法以实现结果集缓存。'
- en: '[PRE192]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Return the primary key for the row just inserted.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 返回刚刚插入行的主键。
- en: The return value is a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object representing a named tuple of primary key values in the order in which
    the primary key columns are configured in the source [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个按照源 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    中配置的主键列顺序表示的 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象的命名元组。
- en: 'Changed in version 1.4.8: - the [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") value is now a named tuple
    via the [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") class, rather
    than a plain tuple.'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.8 开始更改：- [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 值现在是通过 [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 类的命名元组，而不是普通元组。
- en: This accessor only applies to single row [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") constructs which did not explicitly specify
    [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning "sqlalchemy.sql.expression.Insert.returning").
    Support for multirow inserts, while not yet available for most backends, would
    be accessed using the [`CursorResult.inserted_primary_key_rows`](#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessor.
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 此访问器仅适用于未明确指定[`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")的单行[`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造。对于多行插入，虽然大多数后端尚不支持，但可以使用[`CursorResult.inserted_primary_key_rows`](#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")访问器。
- en: Note that primary key columns which specify a server_default clause, or otherwise
    do not qualify as “autoincrement” columns (see the notes at [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")), and were generated using the database-side default,
    will appear in this list as `None` unless the backend supports “returning” and
    the insert statement executed with the “implicit returning” enabled.
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，指定了 server_default 子句或以其他方式不符合“自增”列（请参阅[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")中的注释），并且是使用数据库端默认值生成的主键列，除非后端支持“returning”并且执行了启用“隐式
    returning”的插入语句，否则将在此列表中显示为`None`。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an insert() construct.
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译的表达式构造或不是 insert() 构造，则引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE193]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Return the value of [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") as a row contained within
    a list; some dialects may support a multiple row form as well.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 返回[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")的值，作为包含在列表中的行；一些方言可能还支持多行形式。
- en: Note
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As indicated below, in current SQLAlchemy versions this accessor is only useful
    beyond what’s already supplied by [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") when using the [psycopg2](../dialects/postgresql.html#postgresql-psycopg2)
    dialect. Future versions hope to generalize this feature to more dialects.
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，在当前的 SQLAlchemy 版本中，仅当使用 [psycopg2](../dialects/postgresql.html#postgresql-psycopg2)
    方言时，此访问器才有用。未来的版本希望将此功能推广到更多的方言。
- en: This accessor is added to support dialects that offer the feature that is currently
    implemented by the [Psycopg2 Fast Execution Helpers](../dialects/postgresql.html#psycopg2-executemany-mode)
    feature, currently **only the psycopg2 dialect**, which provides for many rows
    to be INSERTed at once while still retaining the behavior of being able to return
    server-generated primary key values.
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 此访问器被添加以支持目前仅由 [Psycopg2 快速执行助手](../dialects/postgresql.html#psycopg2-executemany-mode)功能实现的方言，目前**仅适用于
    psycopg2 方言**，它允许一次插入多行同时仍保留能够返回服务器生成的主键值的行为。
- en: '`When using the psycopg2 dialect, or other dialects that may support “fast
    executemany” style inserts in upcoming releases` : When invoking an INSERT statement
    while passing a list of rows as the second argument to [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), this accessor will then provide a list
    of rows, where each row contains the primary key value for each row that was INSERTed.'
  id: totrans-1089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`当使用 psycopg2 方言或其他可能在即将发布的版本中支持“快速 executemany”样式插入的方言时`：在调用 INSERT 语句时，将行列表作为第二个参数传递给[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")时，此访问器将提供一个行列表，其中每一行包含被插入的每一行的主键值。'
- en: '`When using all other dialects / backends that don’t yet support this feature`:
    This accessor is only useful for `single row INSERT statements`, and returns the
    same information as that of the [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") within a single-element
    list. When an INSERT statement is executed in conjunction with a list of rows
    to be INSERTed, the list will contain one row per row inserted in the statement,
    however it will contain `None` for any server-generated values.'
  id: totrans-1090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`当使用所有其他尚不支持此功能的方言/后端时`：此访问器仅对`单行INSERT语句`有用，并返回与[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")相同的信息，放在一个单元素列表中。当INSERT语句与要插入的行的列表一起执行时，列表将包含语句中插入的每一行，但对于任何服务器生成的值，它将包含`None`。'
- en: Future releases of SQLAlchemy will further generalize the “fast execution helper”
    feature of psycopg2 to suit other dialects, thus allowing this accessor to be
    of more general use.
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的SQLAlchemy版本将进一步将psycopg2的“快速执行助手”功能泛化以适应其他方言，从而使此访问器更具一般性。
- en: New in version 1.4.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中新增。
- en: See also
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
- en: '[PRE194]'
  id: totrans-1095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: True if this [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    is the result of a executing an expression language compiled [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")是执行表达式语言编译的[`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造的结果，则返回True。
- en: When True, this implies that the [`inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute is accessible,
    assuming the statement did not include a user defined “returning” construct.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 当为True时，这意味着可以访问[`inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")属性，假设语句未包含用户定义的“returning”构造。
- en: '[PRE195]'
  id: totrans-1098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.engine._WithKeys.keys` *方法的* `sqlalchemy.engine._WithKeys`'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代的视图，该视图产生每个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")表示的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以表示核心语句返回的列的标签或ORM执行返回的ORM类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 该视图还可以使用Python的`in`运算符进行键包含性测试，该运算符将测试视图中表示的字符串键，以及列对象等备用键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：返回一个键视图对象，而不是一个普通列表。
- en: '[PRE196]'
  id: totrans-1104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Return the collection of inserted parameters from this execution.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 从此执行返回插入的参数集合。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an insert() construct.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译的表达式构造或不是insert()构造，则引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE197]'
  id: totrans-1107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Return the collection of updated parameters from this execution.
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 从此执行返回更新的参数集合。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an update() construct.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译的表达式构造或不是update()构造，则引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE198]'
  id: totrans-1110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Return `lastrow_has_defaults()` from the underlying [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext").
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层的[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")返回`lastrow_has_defaults()`。
- en: See [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    for details.
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参阅[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")。
- en: '[PRE199]'
  id: totrans-1113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Return the ‘lastrowid’ accessor on the DBAPI cursor.
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 DBAPI 游标上的 ‘lastrowid’ 访问器。
- en: This is a DBAPI specific method and is only functional for those backends which
    support it, for statements where it is appropriate. It’s behavior is not consistent
    across backends.
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特定于 DBAPI 的方法，仅在支持的后端中才起作用，适用于适当的语句。其行为在各后端之间不一致。
- en: Usage of this method is normally unnecessary when using insert() expression
    constructs; the [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute provides a tuple
    of primary key values for a newly inserted row, regardless of database backend.
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 insert() 表达式构造时，通常不需要使用此方法；[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 属性提供了一个新插入行的主键值元组，无论数据库后端如何。
- en: '[PRE200]'
  id: totrans-1117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '*inherited from the* [`Result.mappings()`](#sqlalchemy.engine.Result.mappings
    "sqlalchemy.engine.Result.mappings") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.mappings()`](#sqlalchemy.engine.Result.mappings "sqlalchemy.engine.Result.mappings")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Apply a mappings filter to returned rows, returning an instance of [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult").
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 应用一个映射过滤器到返回的行，返回一个 [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    实例。
- en: When this filter is applied, fetching rows will return [`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") objects instead of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用此过滤器时，获取行将返回 [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    对象而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: New in version 1.4.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中新增。
- en: 'Returns:'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    filtering object referring to this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象的新
    [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    过滤对象。
- en: '[PRE201]'
  id: totrans-1124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Merge this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    with other compatible result objects.
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")与其他兼容的结果对象合并。
- en: The object returned is an instance of [`MergedResult`](#sqlalchemy.engine.MergedResult
    "sqlalchemy.engine.MergedResult"), which will be composed of iterators from the
    given result objects.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个 [`MergedResult`](#sqlalchemy.engine.MergedResult "sqlalchemy.engine.MergedResult")
    的实例，它将由给定结果对象的迭代器组成。
- en: The new result will use the metadata from this result object. The subsequent
    result objects must be against an identical set of result / cursor metadata, otherwise
    the behavior is undefined.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 新结果将使用此结果对象的元数据。后续的结果对象必须针对相同的结果/游标元数据集，否则行为是未定义的。
- en: '[PRE202]'
  id: totrans-1128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '*inherited from the* [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return exactly one row or raise an exception.
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 仅返回一行数据或引发异常。
- en: Raises [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound "sqlalchemy.exc.NoResultFound")
    if the result returns no rows, or [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows would be returned.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有返回行，则引发 [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")，如果返回多行，则引发 [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: Note
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") method, or combine [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one").
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: '此方法默认返回一个 **行**，例如元组。要返回确切的一个单一标量值，即第一行的第一列，请使用 [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") 方法，或者结合使用 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 和 [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")。 '
- en: New in version 1.4.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中新增。
- en: 'Returns:'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")。
- en: 'Raises:'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
- en: See also
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
- en: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
- en: '[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")'
- en: '[PRE203]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '*inherited from the* [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return at most one result or raise an exception.
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至多一个结果或引发异常。
- en: Returns `None` if the result has no rows. Raises [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows are returned.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有行，则返回 `None`。如果返回多行，则引发 [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: New in version 1.4.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Returns:'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") or `None`
    if no row is available.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 或 `None`（如果没有可用行）。
- en: 'Raises:'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
- en: See also
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[PRE204]'
  id: totrans-1155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '*inherited from the* [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Iterate through sub-lists of rows of the size given.
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的行子列表。
- en: Each list will be of the size given, excluding the last list to be yielded,
    which may have a small number of rows. No empty lists will be yielded.
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列表将具有给定的大小，最后一个要产生的列表除外，该列表可能具有少量行。不会产生空列表。
- en: The result object is automatically closed when the iterator is fully consumed.
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器完全消耗时，结果对象会自动关闭。
- en: Note that the backend driver will usually buffer the entire result ahead of
    time unless the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option is used indicating
    that the driver should not pre-buffer results, if possible. Not all drivers support
    this option and the option is silently ignored for those who do not.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除非使用了 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项指示驱动程序不应在可能的情况下预先缓冲结果，否则后端驱动程序通常会提前缓冲整个结果。不是所有驱动程序都支持此选项，对于不支持此选项的驱动程序，该选项会被静默忽略。
- en: When using the ORM, the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method is typically more effective from
    a memory perspective when it is combined with use of the [yield_per execution
    option](../orm/queryguide/api.html#orm-queryguide-yield-per), which instructs
    both the DBAPI driver to use server side cursors, if available, as well as instructs
    the ORM loading internals to only build a certain amount of ORM objects from a
    result at a time before yielding them out.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 ORM 时，[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    方法通常在内存方面更有效，当与 [yield_per execution option](../orm/queryguide/api.html#orm-queryguide-yield-per)
    结合使用时，该方法指示 DBAPI 驱动程序在可用时使用服务器端游标，并指示 ORM 加载内部仅在每次从结果中产生一定数量的 ORM 对象之前构建一定数量的
    ORM 对象。
- en: New in version 1.4.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Parameters:'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**size** – indicate the maximum number of rows to be present in each list yielded.
    If None, makes use of the value set by the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per"), method, if it were called, or the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which is equivalent
    in this regard. If yield_per weren’t set, it makes use of the [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") default, which may be backend specific and
    not well defined.'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: '**size** – 表示每个生成的列表中应该存在的最大行数。如果为 `None`，则使用由 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法设置的值，如果已调用，或者使用等效的 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项。如果未设置 yield_per，则使用 [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") 的默认值，这可能是特定于后端的并且不太定义明确的。'
- en: 'Returns:'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: iterator of lists
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的迭代器
- en: See also
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results)'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '[PRE205]'
  id: totrans-1170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Return `postfetch_cols()` from the underlying [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext").
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    返回 `postfetch_cols()`。
- en: See [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    for details.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息请参阅 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an insert() or update() construct.
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译后的表达式构造或不是 `insert()` 或 `update()` 构造，则会引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE206]'
  id: totrans-1174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Return `prefetch_cols()` from the underlying [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext").
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    返回 `prefetch_cols()`。
- en: See [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    for details.
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息请参阅 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an insert() or update() construct.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译后的表达式构造或不是 `insert()` 或 `update()` 构造，则会引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE207]'
  id: totrans-1178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Return the values of default columns that were fetched using the `ValuesBase.return_defaults()`
    feature.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 返回使用 `ValuesBase.return_defaults()` 功能提取的默认列的值。
- en: The value is an instance of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row"),
    or `None` if `ValuesBase.return_defaults()` was not used or if the backend does
    not support RETURNING.
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 `ValuesBase.return_defaults()` 未使用或后端不支持 RETURNING，则值为 [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 的实例，或者为 `None`。 '
- en: See also
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`ValuesBase.return_defaults()`'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValuesBase.return_defaults()`'
- en: '[PRE208]'
  id: totrans-1183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Return a list of rows each containing the values of default columns that were
    fetched using the `ValuesBase.return_defaults()` feature.
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含使用 `ValuesBase.return_defaults()` 功能提取的默认列的值的行列表。
- en: The return value is a list of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象的列表。
- en: New in version 1.4.
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 `1.4` 中的新功能。
- en: '[PRE209]'
  id: totrans-1187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: True if this [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    returns zero or more rows.
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    返回零个或多个行，则为 `True`。
- en: I.e. if it is legal to call the methods [`CursorResult.fetchone()`](#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone"), [`CursorResult.fetchmany()`](#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany") [`CursorResult.fetchall()`](#sqlalchemy.engine.CursorResult.fetchall
    "sqlalchemy.engine.CursorResult.fetchall").
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 即如果可以调用方法 [`CursorResult.fetchone()`](#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone"), [`CursorResult.fetchmany()`](#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany") [`CursorResult.fetchall()`](#sqlalchemy.engine.CursorResult.fetchall
    "sqlalchemy.engine.CursorResult.fetchall").
- en: Overall, the value of [`CursorResult.returns_rows`](#sqlalchemy.engine.CursorResult.returns_rows
    "sqlalchemy.engine.CursorResult.returns_rows") should always be synonymous with
    whether or not the DBAPI cursor had a `.description` attribute, indicating the
    presence of result columns, noting that a cursor that returns zero rows still
    has a `.description` if a row-returning statement was emitted.
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，[`CursorResult.returns_rows`](#sqlalchemy.engine.CursorResult.returns_rows
    "sqlalchemy.engine.CursorResult.returns_rows") 的值应该始终与 DBAPI 游标是否具有 `.description`
    属性同义，指示结果列的存在，需要注意的是，即使游标返回零行，如果发出了返回行的语句，游标仍然具有 `.description`。
- en: This attribute should be True for all results that are against SELECT statements,
    as well as for DML statements INSERT/UPDATE/DELETE that use RETURNING. For INSERT/UPDATE/DELETE
    statements that were not using RETURNING, the value will usually be False, however
    there are some dialect-specific exceptions to this, such as when using the MSSQL
    / pyodbc dialect a SELECT is emitted inline in order to retrieve an inserted primary
    key value.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性对于所有针对 SELECT 语句的结果都应该为 True，以及对于使用 RETURNING 的 DML 语句 INSERT/UPDATE/DELETE
    也应该为 True。对于没有使用 RETURNING 的 INSERT/UPDATE/DELETE 语句，该值通常为 False，但是有一些方言特定的例外情况，比如使用
    MSSQL / pyodbc 方言时，会内联发出一个 SELECT 来检索插入的主键值。
- en: '[PRE210]'
  id: totrans-1192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Return the ‘rowcount’ for this result.
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此结果的 'rowcount'。
- en: The primary purpose of ‘rowcount’ is to report the number of rows matched by
    the WHERE criterion of an UPDATE or DELETE statement executed once (i.e. for a
    single parameter set), which may then be compared to the number of rows expected
    to be updated or deleted as a means of asserting data integrity.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: ‘rowcount’ 的主要目的是报告执行一次 UPDATE 或 DELETE 语句的 WHERE 条件匹配的行数（即对于单个参数集），然后可以将其与预期更新或删除的行数进行比较，作为断言数据完整性的手段。
- en: This attribute is transferred from the `cursor.rowcount` attribute of the DBAPI
    before the cursor is closed, to support DBAPIs that don’t make this value available
    after cursor close. Some DBAPIs may offer meaningful values for other kinds of
    statements, such as INSERT and SELECT statements as well. In order to retrieve
    `cursor.rowcount` for these statements, set the [`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") execution option to True, which
    will cause the `cursor.rowcount` value to be unconditionally memoized before any
    results are returned or the cursor is closed, regardless of statement type.
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性是从 DBAPI 的 `cursor.rowcount` 属性转移而来，之后游标关闭，以支持不在游标关闭后提供此值的 DBAPI。一些 DBAPI
    可能为其他类型的语句（例如 INSERT 和 SELECT 语句）提供有意义的值。为了检索这些语句的 `cursor.rowcount`，将 [`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") 执行选项设置为 True，这将导致在返回任何结果或游标关闭之前，无条件地缓存
    `cursor.rowcount` 值，无论语句类型如何。
- en: For cases where the DBAPI does not support rowcount for a particular kind of
    statement and/or execution, the returned value will be `-1`, which is delivered
    directly from the DBAPI and is part of [**PEP 249**](https://peps.python.org/pep-0249/).
    All DBAPIs should support rowcount for single-parameter-set UPDATE and DELETE
    statements, however.
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 DBAPI 不支持某种类型的语句和/或执行的情况，返回的值将为 `-1`，这是直接从 DBAPI 传递的，是 [**PEP 249**](https://peps.python.org/pep-0249/)
    的一部分。所有 DBAPI 都应支持单参数集 UPDATE 和 DELETE 语句的 rowcount，但是。
- en: Note
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Notes regarding [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount"):'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    的注意事项：
- en: This attribute returns the number of rows *matched*, which is not necessarily
    the same as the number of rows that were actually *modified*. For example, an
    UPDATE statement may have no net change on a given row if the SET values given
    are the same as those present in the row already. Such a row would be matched
    but not modified. On backends that feature both styles, such as MySQL, rowcount
    is configured to return the match count in all cases.
  id: totrans-1199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此属性返回*匹配*的行数，这不一定与实际*修改*的行数相同。例如，如果UPDATE语句中的SET值与行中已存在的值相同，则对给定行可能没有净变化。这样的行将被匹配但不会被修改。在具有两种样式的后端（例如MySQL）上，rowcount被配置为在所有情况下返回匹配计数。
- en: '[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    in the default case is *only* useful in conjunction with an UPDATE or DELETE statement,
    and only with a single set of parameters. For other kinds of statements, SQLAlchemy
    will not attempt to pre-memoize the value unless the [`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") execution option is used. Note
    that contrary to [**PEP 249**](https://peps.python.org/pep-0249/), many DBAPIs
    do not support rowcount values for statements that are not UPDATE or DELETE, particularly
    when rows are being returned which are not fully pre-buffered. DBAPIs that dont
    support rowcount for a particular kind of statement should return the value `-1`
    for such statements.'
  id: totrans-1200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在默认情况下，[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    仅在与UPDATE或DELETE语句结合使用时才有用，并且仅适用于单组参数。对于其他类型的语句，除非使用[`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")执行选项，否则SQLAlchemy不会尝试预先缓存该值。请注意，与[**PEP
    249**](https://peps.python.org/pep-0249/)相反，许多DBAPI不支持不是UPDATE或DELETE的语句的rowcount值，特别是当返回的行没有完全预先缓冲时。不支持某种语句类型的rowcount的DBAPI应为这些语句返回值`-1`。
- en: '[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    may not be meaningful when executing a single statement with multiple parameter
    sets (i.e. an [executemany](../glossary.html#term-executemany)). Most DBAPIs do
    not sum “rowcount” values across multiple parameter sets and will return `-1`
    when accessed.'
  id: totrans-1201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行具有多个参数集的单个语句（即[executemany](../glossary.html#term-executemany)）时，[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")可能没有意义。大多数DBAPI不会跨多个参数集对“rowcount”值求和，并在访问时返回`-1`。
- en: SQLAlchemy’s [“Insert Many Values” Behavior for INSERT statements](#engine-insertmanyvalues)
    feature does support a correct population of [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") when the [`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") execution option is set to True.
  id: totrans-1202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLAlchemy的[“INSERT语句的多值插入”行为](#engine-insertmanyvalues)功能在设置[`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")执行选项为True时支持正确填充[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。
- en: Statements that use RETURNING may not support rowcount, returning a `-1` value
    instead.
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RETURNING的语句可能不支持rowcount，而是返回值`-1`。
- en: See also
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Getting Affected Row Count from UPDATE, DELETE](../tutorial/data_update.html#tutorial-update-delete-rowcount)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: '[从UPDATE、DELETE获取受影响的行数](../tutorial/data_update.html#tutorial-update-delete-rowcount)
    - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[PRE211]'
  id: totrans-1207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '*inherited from the* [`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Fetch the first column of the first row, and close the result set.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行的第一列，并关闭结果集。
- en: Returns `None` if there are no rows to fetch.
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有要获取的行，则返回`None`。
- en: No validation is performed to test if additional rows remain.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行验证以测试是否还有其他行。
- en: After calling this method, the object is fully closed, e.g. the [`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method will have been called.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法后，对象已完全关闭，例如已调用 [`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") 方法。
- en: 'Returns:'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a Python scalar value, or `None` if no rows remain.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Python 标量值，或者如果没有剩余行则为 `None`。
- en: '[PRE212]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '*inherited from the* [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return exactly one scalar result or raise an exception.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个标量结果或引发异常。
- en: This is equivalent to calling [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and then [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one").
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于调用 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    然后调用 [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")。
- en: See also
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
- en: '[PRE213]'
  id: totrans-1222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '*inherited from the* [`Result.scalar_one_or_none()`](#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.scalar_one_or_none()`](#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") *方法的* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
- en: Return exactly one scalar result or `None`.
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个标量结果或 `None`。
- en: This is equivalent to calling [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and then [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none").
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于调用 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    然后调用 [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")。
- en: See also
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
- en: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
- en: '[PRE214]'
  id: totrans-1229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '*inherited from the* [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return a [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    filtering object which will return single elements rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    过滤对象，该对象将返回单个元素而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: 'E.g.:'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE215]'
  id: totrans-1233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: When results are fetched from the [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object, the single column-row that
    would be returned by the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    is instead returned as the column’s value.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 当结果从 [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    过滤对象中提取时，将返回 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    将返回的单列行作为列的值。
- en: New in version 1.4.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本新增。
- en: 'Parameters:'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**index** – integer or row key indicating the column to be fetched from each
    row, defaults to `0` indicating the first column.'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '**index** – 表示要从每行提取的列的整数或行键，默认为 `0` 表示第一列。'
- en: 'Returns:'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    filtering object referring to this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    过滤对象，指向此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象。
- en: '[PRE216]'
  id: totrans-1240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: Return a new [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    that “horizontally splices” together the rows of this [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") with that of another [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")，“水平拼接”这个[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的行与另一个[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的行。
- en: Tip
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: This method is for the benefit of the SQLAlchemy ORM and is not intended for
    general use.
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于SQLAlchemy ORM的利益，并不适用于一般用途。
- en: “horizontally splices” means that for each row in the first and second result
    sets, a new row that concatenates the two rows together is produced, which then
    becomes the new row. The incoming [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") must have the identical number of rows. It is
    typically expected that the two result sets come from the same sort order as well,
    as the result rows are spliced together based on their position in the result.
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: “水平拼接”意味着对于第一个和第二个结果集中的每一行，都会产生一个新行，该行将两行连接在一起，然后成为新行。传入的[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")必须具有相同数量的行。通常期望两个结果集也来自相同的排序顺序，因为结果行是基于它们在结果中的位置进行拼接的。
- en: The expected use case here is so that multiple INSERT..RETURNING statements
    (which definitely need to be sorted) against different tables can produce a single
    result that looks like a JOIN of those two tables.
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的用例是，针对不同表的多个INSERT..RETURNING语句（肯定需要排序）可以产生一个看起来像这两个表的JOIN的单个结果。
- en: 'E.g.:'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE217]'
  id: totrans-1247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: New in version 2.0.
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`CursorResult.splice_vertically()`](#sqlalchemy.engine.CursorResult.splice_vertically
    "sqlalchemy.engine.CursorResult.splice_vertically")'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.splice_vertically()`](#sqlalchemy.engine.CursorResult.splice_vertically
    "sqlalchemy.engine.CursorResult.splice_vertically")'
- en: '[PRE218]'
  id: totrans-1251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: Return a new [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    that “vertically splices”, i.e. “extends”, the rows of this [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") with that of another [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")，“垂直拼接”，即“扩展”，这个[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的行与另一个[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的行。
- en: Tip
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: This method is for the benefit of the SQLAlchemy ORM and is not intended for
    general use.
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于SQLAlchemy ORM的利益，并不适用于一般用途。
- en: “vertically splices” means the rows of the given result are appended to the
    rows of this cursor result. The incoming [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") must have rows that represent the identical
    list of columns in the identical order as they are in this [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: “垂直拼接”意味着给定结果的行附加到此游标结果的行。传入的[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")必须具有与此[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")中列的相同列表和相同顺序的行。
- en: New in version 2.0.
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`CursorResult.splice_horizontally()`](#sqlalchemy.engine.CursorResult.splice_horizontally
    "sqlalchemy.engine.CursorResult.splice_horizontally")'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.splice_horizontally()`](#sqlalchemy.engine.CursorResult.splice_horizontally
    "sqlalchemy.engine.CursorResult.splice_horizontally")'
- en: '[PRE219]'
  id: totrans-1259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Return `supports_sane_multi_rowcount` from the dialect.
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 从方言返回`supports_sane_multi_rowcount`。
- en: See [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    for background.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 有关背景，请参阅[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")。
- en: '[PRE220]'
  id: totrans-1262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Return `supports_sane_rowcount` from the dialect.
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 从方言返回`supports_sane_rowcount`。
- en: See [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    for background.
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 有关背景，请参阅[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")。
- en: '[PRE221]'
  id: totrans-1265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '*inherited from the* [`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t")
    *attribute of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") *的*
    [`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") *属性*'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型化元组”类型过滤器。
- en: The [`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") attribute
    is a synonym for calling the [`Result.tuples()`](#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") method.
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") 属性是调用
    [`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")
    方法的同义词。'
- en: New in version 2.0.
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 新增于版本 2.0。
- en: '[PRE222]'
  id: totrans-1270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '*inherited from the* [`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型化元组”类型过滤器。
- en: This method returns the same [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object at runtime, however annotates as returning a [`TupleResult`](#sqlalchemy.engine.TupleResult
    "sqlalchemy.engine.TupleResult") object that will indicate to [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools that plain typed `Tuple` instances are returned rather than rows.
    This allows tuple unpacking and `__getitem__` access of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects to by typed, for those cases where the statement
    invoked itself included typing information.
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在运行时返回相同的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象，但标注为返回 [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    对象，该对象将指示[**PEP 484**](https://peps.python.org/pep-0484/)类型工具返回普通类型的 `Tuple` 实例，而不是行。这允许元组解包和对
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象的 `__getitem__` 访问进行类型标注，用于语句本身包含类型信息的情况。
- en: New in version 2.0.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 新增于版本 2.0。
- en: 'Returns:'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    type at typing time.
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写时查看 [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    类型。
- en: See also
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") - shorter
    synonym'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") - 缩写同义词'
- en: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") version'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 版本'
- en: '[PRE223]'
  id: totrans-1280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '*inherited from the* [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Apply unique filtering to the objects returned by this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 返回的对象应用唯一过滤。
- en: When this filter is applied with no arguments, the rows or objects returned
    will filtered such that each row is returned uniquely. The algorithm used to determine
    this uniqueness is by default the Python hashing identity of the whole tuple.
    In some cases a specialized per-entity hashing scheme may be used, such as when
    using the ORM, a scheme is applied which works against the primary key identity
    of returned objects.
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 当不带参数应用此过滤器时，返回的行或对象将被过滤，使得每行唯一。用于确定此唯一性的算法默认为整个元组的 Python 哈希标识。在某些情况下，可能会使用专门针对每个实体的哈希方案，例如当使用
    ORM 时，将应用一种针对返回对象的主键标识的方案。
- en: The unique filter is applied **after all other filters**, which means if the
    columns returned have been refined using a method such as the [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") or [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method, the uniquing is applied to **only
    the column or columns returned**. This occurs regardless of the order in which
    these methods have been called upon the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一过滤器是在**所有其他过滤器之后**应用的，这意味着如果通过方法如 [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 或 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 对返回的列进行了细化，唯一性将仅应用于**返回的列或列**。这将发生在对 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象调用这些方法的顺序无关紧要的情况下。
- en: The unique filter also changes the calculus used for methods like [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") and [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). When using [`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique"), these methods will continue to yield the number
    of rows or objects requested, after uniquing has been applied. However, this necessarily
    impacts the buffering behavior of the underlying cursor or datasource, such that
    multiple underlying calls to `cursor.fetchmany()` may be necessary in order to
    accumulate enough objects in order to provide a unique collection of the requested
    size.
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一过滤器还会更改像[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")和[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")这样的方法的计算。在使用[`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")时，这些方法将继续提供请求的行数或对象数，在应用唯一性后。然而，这必然会影响底层游标或数据源的缓冲行为，以便可能需要多次底层调用`cursor.fetchmany()`，以便累积足够的对象以提供所请求大小的唯一集合。
- en: 'Parameters:'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**strategy** – a callable that will be applied to rows or objects being iterated,
    which should return an object that represents the unique value of the row. A Python
    `set()` is used to store these identities. If not passed, a default uniqueness
    strategy is used which may have been assembled by the source of this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: '**策略** – 一个可应用于正在迭代的行或对象的可调用函数，它应返回表示行的唯一值的对象。Python的`set()`用于存储这些标识。如果未传递，则使用默认的唯一性策略，该策略可能已由此[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象的来源组装。'
- en: '[PRE224]'
  id: totrans-1288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: 将行提取策略配置为一次提取`num`行。
- en: This impacts the underlying behavior of the result when iterating over the result
    object, or otherwise making use of methods such as [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") that return one row at a time. Data from
    the underlying cursor or other data source will be buffered up to this many rows
    in memory, and the buffered collection will then be yielded out one row at a time
    or as many rows are requested. Each time the buffer clears, it will be refreshed
    to this many rows or as many rows remain if fewer remain.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 当在结果对象上进行迭代或以其他方式利用诸如[`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone")这样一次返回一行的方法时，此参数会影响结果的基础行为。来自底层游标或其他数据源的数据将在内存中缓冲多达这么多行，然后缓冲集合将一次提供一行或根据请求提供尽可能多的行。每次缓冲清除时，它将刷新为这么多行或者如果剩余的行数较少，则刷新为剩余的行数。
- en: The [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    method is generally used in conjunction with the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    allow the database dialect in use to make use of a server side cursor, if the
    DBAPI supports a specific “server side cursor” mode separate from its default
    mode of operation.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")方法通常与[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")执行选项一起使用，该选项允许使用的数据库方言利用服务器端游标，如果DBAPI支持与其默认操作模式不同的特定“服务器端游标”模式。'
- en: Tip
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Consider using the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    simultaneously set [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") to ensure the use of server
    side cursors, as well as automatically invoke the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method to establish a fixed row buffer size
    at once.
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项，该选项将同时设置[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")以确保使用服务器端游标，并自动调用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法一次性建立固定的行缓冲大小。
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option is available
    for ORM operations, with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-oriented use described at [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per). The Core-only
    version which works with [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is new as of SQLAlchemy 1.4.40.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项适用于 ORM 操作，在 [使用 Yield Per
    获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per) 中描述了面向 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 使用的方法。与 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 兼容的仅核心版本是 SQLAlchemy 1.4.40 中的新功能。'
- en: New in version 1.4.
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为 1.4。
- en: 'Parameters:'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**num** – number of rows to fetch each time the buffer is refilled. If set
    to a value below 1, fetches all rows for the next buffer.'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: '**num** – 在重新填充缓冲区时每次提取的行数。如果设置为小于 1 的值，则提取下一个缓冲区的所有行。'
- en: See also
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results) - 描述了 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '[PRE225]'
  id: totrans-1301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: A wrapper for a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    that returns objects other than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, such as dictionaries or scalar objects.
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 的包装器，返回除
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象以外的对象，例如字典或标量对象。
- en: '[`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")
    is the common base for additional result APIs including [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult"), [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") and `AsyncResult`.'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")
    是额外结果 API 的通用基础，包括 [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")、[`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 和 `AsyncResult`。'
- en: '**Members**'
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.FilterResult.close), [closed](#sqlalchemy.engine.FilterResult.closed),
    [yield_per()](#sqlalchemy.engine.FilterResult.yield_per)'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.FilterResult.close), [closed](#sqlalchemy.engine.FilterResult.closed),
    [yield_per()](#sqlalchemy.engine.FilterResult.yield_per)'
- en: '**Class signature**'
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")
    (`sqlalchemy.engine.ResultInternal`)
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")
    (`sqlalchemy.engine.ResultInternal`)
- en: '[PRE226]'
  id: totrans-1308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Close this [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult").
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")。
- en: New in version 1.4.43.
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为 1.4.43。
- en: '[PRE227]'
  id: totrans-1311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Return `True` if the underlying [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    reports closed
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 报告已关闭，则返回
    `True`。
- en: New in version 1.4.43.
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为 1.4.43。
- en: '[PRE228]'
  id: totrans-1314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 配置每次填充缓冲区时获取 `num` 行的行提取策略。
- en: The [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    method is a pass through to the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    方法是对 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    方法的传递。请参阅该方法的文档以获取使用说明。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为 1.4.40：- 添加 [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")，以便在所有结果集实现中都可用此方法
- en: See also
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 使用服务器端游标（即流式结果） - 描述[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")的核心行为
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Yield Per 获取大型结果集 - 在[ORM 查询指南](../orm/queryguide/index.html)中的[ORM 查询指南](../orm/queryguide/api.html#orm-queryguide-yield-per)中
- en: '[PRE229]'
  id: totrans-1321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Represents a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object in a “frozen” state suitable for caching.
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个适用于缓存的“冻结”状态的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: The [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    object is returned from the [`Result.freeze()`](#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze") method of any [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.freeze()`](#sqlalchemy.engine.Result.freeze "sqlalchemy.engine.Result.freeze")方法返回[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象的[`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult")对象。'
- en: 'A new iterable [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is generated from a fixed set of data each time the [`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") is invoked as a callable:'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 每次将[`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")作为可调用对象调用时，都会从固定数据集生成一个新的可迭代的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象：
- en: '[PRE230]'
  id: totrans-1325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: New in version 1.4.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: See also
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Re-Executing Statements](../orm/session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 重新执行语句 - 在 ORM 中的示例用法来实现结果集缓存。
- en: '`merge_frozen_result()` - ORM function to merge a frozen result back into a
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: '`merge_frozen_result()` - 将冻结的结果合并回[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的 ORM 函数。'
- en: '**Class signature**'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    (`typing.Generic`)
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")（`typing.Generic`）
- en: '[PRE231]'
  id: totrans-1332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: A [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") that gets
    data from a Python iterator of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects or similar row-like data.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 迭代器或类似行数据的[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象获取数据的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")。
- en: New in version 1.4.
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '**Members**'
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[closed](#sqlalchemy.engine.IteratorResult.closed)'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭
- en: '**Class signature**'
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult") ([`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"))
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")（[`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")）
- en: '[PRE232]'
  id: totrans-1339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Return `True` if this [`IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")
    has been closed
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")已关闭，则返回`True`。
- en: New in version 1.4.43.
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.43 中新增。
- en: '[PRE233]'
  id: totrans-1342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: A [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") that is merged
    from any number of [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    objects.
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 从任意数量的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象合并的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")。
- en: Returned by the [`Result.merge()`](#sqlalchemy.engine.Result.merge "sqlalchemy.engine.Result.merge")
    method.
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`Result.merge()`](#sqlalchemy.engine.Result.merge "sqlalchemy.engine.Result.merge")方法返回。
- en: New in version 1.4.
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '**Class signature**'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.MergedResult`](#sqlalchemy.engine.MergedResult "sqlalchemy.engine.MergedResult")
    ([`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult"))
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.MergedResult`](#sqlalchemy.engine.MergedResult "sqlalchemy.engine.MergedResult")（[`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult")）
- en: '[PRE234]'
  id: totrans-1348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Represent a set of database results.
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一组数据库结果。
- en: 'New in version 1.4: The [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object provides a completely updated usage model and calling facade for SQLAlchemy
    Core and SQLAlchemy ORM. In Core, it forms the basis of the [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object which replaces the previous `ResultProxy`
    interface. When using the ORM, a higher level object called [`ChunkedIteratorResult`](#sqlalchemy.engine.ChunkedIteratorResult
    "sqlalchemy.engine.ChunkedIteratorResult") is normally used.'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新内容：[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象为SQLAlchemy核心和SQLAlchemy
    ORM提供了一个完全更新的使用模型和调用外观。在核心中，它构成了取代先前`ResultProxy`接口的[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")对象的基础。在使用ORM时，通常使用一个称为[`ChunkedIteratorResult`](#sqlalchemy.engine.ChunkedIteratorResult
    "sqlalchemy.engine.ChunkedIteratorResult")的更高级对象。
- en: Note
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In SQLAlchemy 1.4 and above, this object is used for ORM results returned by
    [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute"),
    which can yield instances of ORM mapped objects either individually or within
    tuple-like rows. Note that the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object does not deduplicate instances or rows automatically as is the case with
    the legacy [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. For in-Python de-duplication of instances or rows, use the [`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") modifier method.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy 1.4及以上版本中，此对象用于由[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")返回的ORM结果，可以逐个返回ORM映射对象的实例或在元组行内。请注意，与旧的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象相比，[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象不会自动对实例或行进行去重。要在Python中对实例或行进行去重，请使用[`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")修改器方法。
- en: See also
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fetching Rows](../tutorial/dbapi_transactions.html#tutorial-fetching-rows)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: '[获取行](../tutorial/dbapi_transactions.html#tutorial-fetching-rows) - 在[SQLAlchemy统一教程](../tutorial/index.html)中'
- en: '**Members**'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.engine.Result.all), [close()](#sqlalchemy.engine.Result.close),
    [closed](#sqlalchemy.engine.Result.closed), [columns()](#sqlalchemy.engine.Result.columns),
    [fetchall()](#sqlalchemy.engine.Result.fetchall), [fetchmany()](#sqlalchemy.engine.Result.fetchmany),
    [fetchone()](#sqlalchemy.engine.Result.fetchone), [first()](#sqlalchemy.engine.Result.first),
    [freeze()](#sqlalchemy.engine.Result.freeze), [keys()](#sqlalchemy.engine.Result.keys),
    [mappings()](#sqlalchemy.engine.Result.mappings), [merge()](#sqlalchemy.engine.Result.merge),
    [one()](#sqlalchemy.engine.Result.one), [one_or_none()](#sqlalchemy.engine.Result.one_or_none),
    [partitions()](#sqlalchemy.engine.Result.partitions), [scalar()](#sqlalchemy.engine.Result.scalar),
    [scalar_one()](#sqlalchemy.engine.Result.scalar_one), [scalar_one_or_none()](#sqlalchemy.engine.Result.scalar_one_or_none),
    [scalars()](#sqlalchemy.engine.Result.scalars), [t](#sqlalchemy.engine.Result.t),
    [tuples()](#sqlalchemy.engine.Result.tuples), [unique()](#sqlalchemy.engine.Result.unique),
    [yield_per()](#sqlalchemy.engine.Result.yield_per)'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.engine.Result.all), [close()](#sqlalchemy.engine.Result.close),
    [closed](#sqlalchemy.engine.Result.closed), [columns()](#sqlalchemy.engine.Result.columns),
    [fetchall()](#sqlalchemy.engine.Result.fetchall), [fetchmany()](#sqlalchemy.engine.Result.fetchmany),
    [fetchone()](#sqlalchemy.engine.Result.fetchone), [first()](#sqlalchemy.engine.Result.first),
    [freeze()](#sqlalchemy.engine.Result.freeze), [keys()](#sqlalchemy.engine.Result.keys),
    [mappings()](#sqlalchemy.engine.Result.mappings), [merge()](#sqlalchemy.engine.Result.merge),
    [one()](#sqlalchemy.engine.Result.one), [one_or_none()](#sqlalchemy.engine.Result.one_or_none),
    [partitions()](#sqlalchemy.engine.Result.partitions), [scalar()](#sqlalchemy.engine.Result.scalar),
    [scalar_one()](#sqlalchemy.engine.Result.scalar_one), [scalar_one_or_none()](#sqlalchemy.engine.Result.scalar_one_or_none),
    [scalars()](#sqlalchemy.engine.Result.scalars), [t](#sqlalchemy.engine.Result.t),
    [tuples()](#sqlalchemy.engine.Result.tuples), [unique()](#sqlalchemy.engine.Result.unique),
    [yield_per()](#sqlalchemy.engine.Result.yield_per)'
- en: '**Class signature**'
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    (`sqlalchemy.engine._WithKeys`, `sqlalchemy.engine.ResultInternal`)
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    (`sqlalchemy.engine._WithKeys`, `sqlalchemy.engine.ResultInternal`)
- en: '[PRE235]'
  id: totrans-1359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Return all rows in a sequence.
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列中的所有行。
- en: Closes the result set after invocation. Subsequent invocations will return an
    empty sequence.
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用后关闭结果集。后续调用将返回一个空序列。
- en: New in version 1.4.
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新内容。
- en: 'Returns:'
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a sequence of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects.
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: See also
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - How to stream a large result set without loading it completely in python.'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流式结果）](#engine-stream-results) - 如何在 Python 中流式传输大型结果集而不完全加载它。'
- en: '[PRE236]'
  id: totrans-1367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: close this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result").
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。
- en: The behavior of this method is implementation specific, and is not implemented
    by default. The method should generally end the resources in use by the result
    object and also cause any subsequent iteration or row fetching to raise [`ResourceClosedError`](exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError").
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的行为是特定于实现的，并且默认情况下未实现。该方法通常应结束结果对象正在使用的资源，并且还应导致任何后续迭代或行获取引发 [`ResourceClosedError`](exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")。
- en: 'New in version 1.4.27: - `.close()` was previously not generally available
    for all [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") classes,
    instead only being available on the [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned for Core statement executions. As most
    other result objects, namely the ones used by the ORM, are proxying a [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") in any case, this allows the underlying cursor
    result to be closed from the outside facade for the case when the ORM query is
    using the `yield_per` execution option where it does not immediately exhaust and
    autoclose the database cursor.'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.27 中的新功能：- `.close()` 以前通常不适用于所有 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 类，而是仅适用于返回给核心语句执行的 [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。由于几乎所有其他结果对象，即 ORM 使用的结果对象，在任何情况下都在代理 [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")，因此这允许从外部外观关闭底层游标结果，以处理 ORM 查询使用了 `yield_per`
    执行选项的情况，其中它不会立即耗尽和自动关闭数据库游标。
- en: '[PRE237]'
  id: totrans-1371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: return `True` if this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    reports .closed
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 报告已关闭，则返回
    `True`。
- en: New in version 1.4.43.
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.43 中的新功能。
- en: '[PRE238]'
  id: totrans-1374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Establish the columns that should be returned in each row.
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 确定应在每行中返回的列。
- en: This method may be used to limit the columns returned as well as to reorder
    them. The given list of expressions are normally a series of integers or string
    key names. They may also be appropriate [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects which correspond to a given
    statement construct.
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可用于限制返回的列，以及重新排序它们。给定的表达式列表通常是一系列整数或字符串键名。它们也可以是适当的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象，这些对象对应于给定的语句构造。
- en: 'Changed in version 2.0: Due to a bug in 1.4, the [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method had an incorrect behavior where calling
    upon the method with just one index would cause the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object to yield scalar values rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects. In version 2.0, this behavior has been corrected
    such that calling upon [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") with a single index will produce a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object that continues to yield [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, which include only a single column.'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 更改：由于 1.4 版本中的一个错误，[`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 方法存在错误行为，即仅使用一个索引调用该方法将导致 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象产生标量值，而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象。在 2.0 版本中，已修正此行为，使得使用单个索引调用 [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 将产生一个继续生成 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象，该对象仅包含单个列。
- en: 'E.g.:'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE239]'
  id: totrans-1379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'Example of using the column objects from the statement itself:'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 从语句本身使用列对象的示例：
- en: '[PRE240]'
  id: totrans-1381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: New in version 1.4.
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Parameters:'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***col_expressions** – indicates columns to be returned. Elements may be integer
    row indexes, string column names, or appropriate [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects corresponding to a select construct.'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '***col_expressions** – 表示要返回的列。元素可以是整数行索引、字符串列名，或者与选择构造对应的适当[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。'
- en: 'Returns:'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    with the modifications given.
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的修改项返回此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: '[PRE241]'
  id: totrans-1387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: A synonym for the [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    method.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")方法的同义词。'
- en: '[PRE242]'
  id: totrans-1389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Fetch many rows.
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多行。
- en: When all rows are exhausted, returns an empty sequence.
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都已耗尽时，返回一个空序列。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是为了与 SQLAlchemy 1.x.x 向后兼容而提供的。
- en: To fetch rows in groups, use the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method.
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 要以组的形式获取行，请使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")方法。
- en: 'Returns:'
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a sequence of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects.
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的序列。
- en: See also
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
- en: '[PRE243]'
  id: totrans-1398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: Fetch one row.
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一行。
- en: When all rows are exhausted, returns None.
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都已耗尽时，返回None。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是为了与 SQLAlchemy 1.x.x 向后兼容而提供的。
- en: To fetch the first row of a result only, use the [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") method. To iterate through all rows, iterate
    the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object directly.
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅获取结果的第一行，请使用[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")方法。要遍历所有行，请直接迭代[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。
- en: 'Returns:'
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object if no filters
    are applied, or `None` if no rows remain.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未应用过滤器，则返回[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，如果没有行剩余则返回`None`。
- en: '[PRE244]'
  id: totrans-1405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Fetch the first row or `None` if no row is present.
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行或者如果没有行存在则返回`None`。
- en: Closes the result set and discards remaining rows.
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭结果集并丢弃剩余的行。
- en: Note
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method, or combine [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first").
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回一个**行**，例如元组。要返回确切的单个标量值，即第一行的第一列，请使用[`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")方法，或者结合[`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")和[`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")。
- en: Additionally, in contrast to the behavior of the legacy ORM [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") method, **no limit is applied** to the SQL query
    which was invoked to produce this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result");
    for a DBAPI driver that buffers results in memory before yielding rows, all rows
    will be sent to the Python process and all but the first row will be discarded.
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与传统的ORM [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first")方法的行为相比，**SQL查询未应用任何限制**，以产生此[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"); 对于在向Python进程发送行之前在内存中缓冲结果的DBAPI驱动程序，所有行都将发送到Python进程，除了第一行外所有行都将被丢弃。
- en: See also
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query Unified with Core Select](../changelog/migration_20.html#migration-20-unify-select)'
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询与核心选择合并](../changelog/migration_20.html#migration-20-unify-select)'
- en: 'Returns:'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object, or None if
    no rows remain.
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，如果没有行剩余则返回None。'
- en: See also
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")'
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[PRE245]'
  id: totrans-1418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Return a callable object that will produce copies of this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") when invoked.
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，当调用时将产生此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")的副本。
- en: The callable object returned is an instance of [`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult").
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的可调用对象是一个[`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")的实例。
- en: This is used for result set caching. The method must be called on the result
    when it has been unconsumed, and calling the method will consume the result fully.
    When the [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    is retrieved from a cache, it can be called any number of times where it will
    produce a new [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object each time against its stored set of rows.
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于结果集缓存。当结果尚未被消耗时，必须在结果上调用该方法，并且调用该方法将完全消耗结果。当从缓存中检索到[`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult")时，可以调用任意次数，它将每次产生一个新的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，针对其存储的行集。
- en: See also
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](../orm/session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](../orm/session_events.html#do-orm-execute-re-executing) - 在ORM中实现结果集缓存的示例用法。'
- en: '[PRE246]'
  id: totrans-1424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `sqlalchemy.engine._WithKeys` *的* `sqlalchemy.engine._WithKeys.keys` *方法继承*'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代的视图，该视图会产生每个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")表示的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以表示核心语句返回的列的标签，或者ORM执行返回的orm类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图也可以使用Python `in` 运算符进行键包含测试，该运算符将测试视图中表示的字符串键，以及列对象等备用键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的更改：返回一个键视图对象，而不是普通列表。
- en: '[PRE247]'
  id: totrans-1430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: Apply a mappings filter to returned rows, returning an instance of [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult").
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用映射过滤器，返回一个[`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")的实例。
- en: When this filter is applied, fetching rows will return [`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") objects instead of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 应用此过滤器时，获取行将返回[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")对象，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: New in version 1.4.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新内容。
- en: 'Returns:'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    filtering object referring to this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的指向这个[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的[`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")过滤对象。
- en: '[PRE248]'
  id: totrans-1436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Merge this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    with other compatible result objects.
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")与其他兼容的结果对象合并。
- en: The object returned is an instance of [`MergedResult`](#sqlalchemy.engine.MergedResult
    "sqlalchemy.engine.MergedResult"), which will be composed of iterators from the
    given result objects.
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个[`MergedResult`](#sqlalchemy.engine.MergedResult "sqlalchemy.engine.MergedResult")的实例，它将由给定结果对象的迭代器组成。
- en: The new result will use the metadata from this result object. The subsequent
    result objects must be against an identical set of result / cursor metadata, otherwise
    the behavior is undefined.
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 新的结果将使用此结果对象的元数据。后续结果对象必须针对相同的结果/游标元数据进行，否则行为未定义。
- en: '[PRE249]'
  id: totrans-1440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: Return exactly one row or raise an exception.
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一行或抛出异常。
- en: Raises [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound "sqlalchemy.exc.NoResultFound")
    if the result returns no rows, or [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows would be returned.
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有返回任何行，则引发[`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")，如果返回多行，则引发[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: Note
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") method, or combine [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one").
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法默认返回一个**行**，例如元组。要返回确切的单个标量值，即第一行的第一列，请使用[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one")方法，或者结合使用[`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")和[`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")。
- en: New in version 1.4.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Returns:'
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")。
- en: 'Raises:'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
- en: See also
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
- en: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
- en: '[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")'
- en: '[PRE250]'
  id: totrans-1454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Return at most one result or raise an exception.
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个结果或引发异常。
- en: Returns `None` if the result has no rows. Raises [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows are returned.
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有行，则返回`None`。如果返回多行，则引发[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: New in version 1.4.
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Returns:'
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") or `None`
    if no row is available.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")或`None`（如果没有可用行）。
- en: 'Raises:'
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
- en: See also
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[PRE251]'
  id: totrans-1465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Iterate through sub-lists of rows of the size given.
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历给定大小的子行列表。
- en: Each list will be of the size given, excluding the last list to be yielded,
    which may have a small number of rows. No empty lists will be yielded.
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列表将具有给定的大小，不包括最后一个将被产生的列表，该列表可能有少量行。不会产生空列表。
- en: The result object is automatically closed when the iterator is fully consumed.
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 当迭代器完全消耗时，结果对象将自动关闭。
- en: Note that the backend driver will usually buffer the entire result ahead of
    time unless the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option is used indicating
    that the driver should not pre-buffer results, if possible. Not all drivers support
    this option and the option is silently ignored for those who do not.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除非使用了[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")执行选项指示驱动程序不应预先缓冲结果，否则后端驱动程序通常会预先缓冲整个结果。并非所有驱动程序都支持此选项，对于不支持的驱动程序，该选项将被静默忽略。
- en: When using the ORM, the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method is typically more effective from
    a memory perspective when it is combined with use of the [yield_per execution
    option](../orm/queryguide/api.html#orm-queryguide-yield-per), which instructs
    both the DBAPI driver to use server side cursors, if available, as well as instructs
    the ORM loading internals to only build a certain amount of ORM objects from a
    result at a time before yielding them out.
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用ORM时，当与[yield_per执行选项](../orm/queryguide/api.html#orm-queryguide-yield-per)结合使用时，[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法通常在内存方面更有效，该选项指示DBAPI驱动程序使用服务器端游标（如果可用），以及指示ORM加载内部一次只构建某些数量的ORM对象结果然后将其输出。
- en: New in version 1.4.
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增。
- en: 'Parameters:'
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**size** – indicate the maximum number of rows to be present in each list yielded.
    If None, makes use of the value set by the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per"), method, if it were called, or the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which is equivalent
    in this regard. If yield_per weren’t set, it makes use of the [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") default, which may be backend specific and
    not well defined.'
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: '**size** – 指示每个生成的列表中应存在的最大行数。如果为 None，则使用 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 设置的值（如果调用了该方法），或者 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项，在这方面是等效的。如果未设置 yield_per，则使用
    [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")
    的默认值，该值可能是特定于后端并且未明确定义的。'
- en: 'Returns:'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: iterator of lists
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的迭代器
- en: See also
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results)'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '[PRE252]'
  id: totrans-1479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Fetch the first column of the first row, and close the result set.
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行的第一列，并关闭结果集。
- en: Returns `None` if there are no rows to fetch.
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有要提取的行，则返回`None`。
- en: No validation is performed to test if additional rows remain.
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行任何验证以测试是否存在其他行。
- en: After calling this method, the object is fully closed, e.g. the [`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method will have been called.
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法后，对象将完全关闭，例如 [`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") 方法将被调用。
- en: 'Returns:'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a Python scalar value, or `None` if no rows remain.
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Python标量值，或者如果没有剩余行，则为`None`。
- en: '[PRE253]'
  id: totrans-1486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Return exactly one scalar result or raise an exception.
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个标量结果或引发异常。
- en: This is equivalent to calling [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and then [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one").
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于调用 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    然后调用 [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")。
- en: See also
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
- en: '[PRE254]'
  id: totrans-1492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Return exactly one scalar result or `None`.
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个标量结果或`None`。
- en: This is equivalent to calling [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and then [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none").
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于调用 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    然后调用 [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")。
- en: See also
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
- en: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
- en: '[PRE255]'
  id: totrans-1498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Return a [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    filtering object which will return single elements rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    过滤对象，该对象将返回单个元素而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: 'E.g.:'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE256]'
  id: totrans-1501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: When results are fetched from the [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object, the single column-row that
    would be returned by the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    is instead returned as the column’s value.
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    过滤对象中获取结果时，将返回由 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    返回的单列行作为列的值。
- en: New in version 1.4.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增。
- en: 'Parameters:'
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**index** – integer or row key indicating the column to be fetched from each
    row, defaults to `0` indicating the first column.'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: '**index** – 表示要从每行提取的列的整数或行键，默认为`0`表示第一列。'
- en: 'Returns:'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    filtering object referring to this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的指向此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的[`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")过滤对象。
- en: '[PRE257]'
  id: totrans-1508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型化元组”类型筛选。
- en: The [`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") attribute
    is a synonym for calling the [`Result.tuples()`](#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") method.
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t")属性是调用[`Result.tuples()`](#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples")方法的同义词。'
- en: New in version 2.0.
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始新增。
- en: '[PRE258]'
  id: totrans-1512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型化元组”类型筛选。
- en: This method returns the same [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object at runtime, however annotates as returning a [`TupleResult`](#sqlalchemy.engine.TupleResult
    "sqlalchemy.engine.TupleResult") object that will indicate to [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools that plain typed `Tuple` instances are returned rather than rows.
    This allows tuple unpacking and `__getitem__` access of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects to by typed, for those cases where the statement
    invoked itself included typing information.
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在运行时返回相同的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象，但会注释为返回一个[`TupleResult`](#sqlalchemy.engine.TupleResult
    "sqlalchemy.engine.TupleResult")对象，这将指示[**PEP 484**](https://peps.python.org/pep-0484/)类型工具返回普通的类型化`Tuple`实例而不是行。这允许元组拆包和对[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象的`__getitem__`访问进行类型化，对于那些语句本身包含了类型信息的情况。
- en: New in version 2.0.
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始新增。
- en: 'Returns:'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    type at typing time.
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写时引用[`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")类型。
- en: See also
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") - shorter
    synonym'
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") - 更短的同义词'
- en: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") version'
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 版本'
- en: '[PRE259]'
  id: totrans-1521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: Apply unique filtering to the objects returned by this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")返回的对象应用唯一过滤。
- en: When this filter is applied with no arguments, the rows or objects returned
    will filtered such that each row is returned uniquely. The algorithm used to determine
    this uniqueness is by default the Python hashing identity of the whole tuple.
    In some cases a specialized per-entity hashing scheme may be used, such as when
    using the ORM, a scheme is applied which works against the primary key identity
    of returned objects.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 当此过滤器应用时没有参数时，返回的行或对象将被过滤，以确保每行都是唯一的。确定此唯一性的算法默认情况下是整个元组的Python哈希标识。在某些情况下，可能会使用专门的每实体哈希方案，例如当使用ORM时，将应用一种针对返回对象的主键标识的方案。
- en: The unique filter is applied **after all other filters**, which means if the
    columns returned have been refined using a method such as the [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") or [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method, the uniquing is applied to **only
    the column or columns returned**. This occurs regardless of the order in which
    these methods have been called upon the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一过滤器应用在**所有其他过滤器之后**，这意味着如果返回的列已经通过诸如[`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns")或[`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")等方法进行了细化，则唯一性仅应用于**返回的列或列**。这发生在这些方法被调用在[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象上的任何顺序之后。
- en: The unique filter also changes the calculus used for methods like [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") and [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). When using [`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique"), these methods will continue to yield the number
    of rows or objects requested, after uniquing has been applied. However, this necessarily
    impacts the buffering behavior of the underlying cursor or datasource, such that
    multiple underlying calls to `cursor.fetchmany()` may be necessary in order to
    accumulate enough objects in order to provide a unique collection of the requested
    size.
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一过滤器还改变了像[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")和[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")这样的方法所使用的计算方法。当使用[`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")时，这些方法将在应用唯一性后继续返回请求的行数或对象数。然而，这必然会影响底层游标或数据源的缓冲行为，因此可能需要多次底层调用`cursor.fetchmany()`以累积足够数量的对象，以便提供请求大小的唯一集合。
- en: 'Parameters:'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**strategy** – a callable that will be applied to rows or objects being iterated,
    which should return an object that represents the unique value of the row. A Python
    `set()` is used to store these identities. If not passed, a default uniqueness
    strategy is used which may have been assembled by the source of this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: '**strategy** – 一个可调用的函数，将应用于正在迭代的行或对象，它应返回一个表示行的唯一值的对象。一个 Python `set()` 用于存储这些标识。如果未传递，则使用默认的唯一性策略，该策略可能已由此
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象的源代码组装。'
- en: '[PRE260]'
  id: totrans-1528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略以一次提取`num`行。
- en: This impacts the underlying behavior of the result when iterating over the result
    object, or otherwise making use of methods such as [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") that return one row at a time. Data from
    the underlying cursor or other data source will be buffered up to this many rows
    in memory, and the buffered collection will then be yielded out one row at a time
    or as many rows are requested. Each time the buffer clears, it will be refreshed
    to this many rows or as many rows remain if fewer remain.
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 这会影响在迭代结果对象或者其他使用[`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone "sqlalchemy.engine.Result.fetchone")等返回一行的方法时的底层行为。来自底层游标或其他数据源的数据将被缓冲到内存中的这么多行，并且缓冲集合将以一行或者请求的行数的方式逐行返回。每次缓冲清空时，它将被刷新到这么多行，或者如果剩余行数更少则刷新为剩余行数。
- en: The [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    method is generally used in conjunction with the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    allow the database dialect in use to make use of a server side cursor, if the
    DBAPI supports a specific “server side cursor” mode separate from its default
    mode of operation.
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")方法通常与[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")执行选项一起使用，该选项允许使用中的数据库方言使用服务器端游标，如果DBAPI支持与默认操作模式分离的特定“服务器端游标”模式。'
- en: Tip
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Consider using the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    simultaneously set [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") to ensure the use of server
    side cursors, as well as automatically invoke the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method to establish a fixed row buffer size
    at once.
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项，它将同时设置[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")以确保使用服务器端游标，同时自动调用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法一次性建立固定的行缓冲区大小。
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option is available
    for ORM operations, with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-oriented use described at [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per). The Core-only
    version which works with [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is new as of SQLAlchemy 1.4.40.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项适用于 ORM 操作，具有在 [使用 Yield
    Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per) 中描述的针对 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 的用法。仅适用于与 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 配合使用的 Core 版本是 SQLAlchemy 1.4.40 的新功能。'
- en: New in version 1.4.
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 新增。
- en: 'Parameters:'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**num** – number of rows to fetch each time the buffer is refilled. If set
    to a value below 1, fetches all rows for the next buffer.'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: '**num** – 每次重新填充缓冲区时获取的行数。如果设置为小于 1 的值，则获取下一个缓冲区的所有行。'
- en: See also
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](#engine-stream-results) - 描述了 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '[PRE261]'
  id: totrans-1541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: A wrapper for a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    that returns scalar values rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    values.
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 的包装器，返回标量值而不是
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 值。
- en: The [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object is acquired by calling the [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method.
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    对象是通过调用 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    方法获取的。'
- en: A special limitation of [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    is that it has no `fetchone()` method; since the semantics of `fetchone()` are
    that the `None` value indicates no more results, this is not compatible with [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") since there is no way to distinguish between
    `None` as a row value versus `None` as an indicator. Use `next(result)` to receive
    values individually.
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    的一个特殊限制是它没有 `fetchone()` 方法；因为 `fetchone()` 的语义是 `None` 值表示没有更多结果，这与 [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 不兼容，因为无法区分 `None` 作为行值与 `None` 作为指示符的情况。使用 `next(result)`
    逐个接收值。'
- en: '**Members**'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.engine.ScalarResult.all), [close()](#sqlalchemy.engine.ScalarResult.close),
    [closed](#sqlalchemy.engine.ScalarResult.closed), [fetchall()](#sqlalchemy.engine.ScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.engine.ScalarResult.fetchmany), [first()](#sqlalchemy.engine.ScalarResult.first),
    [one()](#sqlalchemy.engine.ScalarResult.one), [one_or_none()](#sqlalchemy.engine.ScalarResult.one_or_none),
    [partitions()](#sqlalchemy.engine.ScalarResult.partitions), [unique()](#sqlalchemy.engine.ScalarResult.unique),
    [yield_per()](#sqlalchemy.engine.ScalarResult.yield_per)'
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.engine.ScalarResult.all), [close()](#sqlalchemy.engine.ScalarResult.close),
    [closed](#sqlalchemy.engine.ScalarResult.closed), [fetchall()](#sqlalchemy.engine.ScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.engine.ScalarResult.fetchmany), [first()](#sqlalchemy.engine.ScalarResult.first),
    [one()](#sqlalchemy.engine.ScalarResult.one), [one_or_none()](#sqlalchemy.engine.ScalarResult.one_or_none),
    [partitions()](#sqlalchemy.engine.ScalarResult.partitions), [unique()](#sqlalchemy.engine.ScalarResult.unique),
    [yield_per()](#sqlalchemy.engine.ScalarResult.yield_per)'
- en: '**Class signature**'
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    ([`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult"))
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    （[`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")）
- en: '[PRE262]'
  id: totrans-1549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Return all scalar values in a sequence.
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有标量值的序列。
- en: Equivalent to [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")，但返回的是标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE263]'
  id: totrans-1552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '*inherited from the* [`FilterResult.close()`](#sqlalchemy.engine.FilterResult.close
    "sqlalchemy.engine.FilterResult.close") *method of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.close()`](#sqlalchemy.engine.FilterResult.close "sqlalchemy.engine.FilterResult.close")
    *方法的* [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")'
- en: Close this [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult").
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")。
- en: New in version 1.4.43.
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4.43版本中新增。
- en: '[PRE264]'
  id: totrans-1556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '*inherited from the* [`FilterResult.closed`](#sqlalchemy.engine.FilterResult.closed
    "sqlalchemy.engine.FilterResult.closed") *attribute of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.closed`](#sqlalchemy.engine.FilterResult.closed "sqlalchemy.engine.FilterResult.closed")
    *属性的* [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")'
- en: Return `True` if the underlying [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    reports closed
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")报告已关闭，则返回`True`。
- en: New in version 1.4.43.
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4.43版本中新增。
- en: '[PRE265]'
  id: totrans-1560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: A synonym for the [`ScalarResult.all()`](#sqlalchemy.engine.ScalarResult.all
    "sqlalchemy.engine.ScalarResult.all") method.
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarResult.all()`](#sqlalchemy.engine.ScalarResult.all "sqlalchemy.engine.ScalarResult.all")方法的同义词。'
- en: '[PRE266]'
  id: totrans-1562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: Fetch many objects.
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多个对象。
- en: Equivalent to [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")，但返回的是标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE267]'
  id: totrans-1565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Fetch the first object or `None` if no object is present.
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一个对象，如果没有对象存在则返回`None`。
- en: Equivalent to [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")，但返回的是标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE268]'
  id: totrans-1568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Return exactly one object or raise an exception.
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象，或者引发异常。
- en: Equivalent to [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")，但返回的是标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE269]'
  id: totrans-1571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Return at most one object or raise an exception.
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个对象，或者引发异常。
- en: Equivalent to [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") except that scalar values, rather than
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")，但返回的是标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE270]'
  id: totrans-1574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Iterate through sub-lists of elements of the size given.
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的子列表元素。
- en: Equivalent to [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")，但返回的是标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE271]'
  id: totrans-1577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Apply unique filtering to the objects returned by this [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult").
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: 对由此[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")返回的对象应用唯一过滤。
- en: See [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    for usage details.
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用详细信息，请参阅[`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")。
- en: '[PRE272]'
  id: totrans-1580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '*inherited from the* [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行获取策略，一次获取`num`行。
- en: The [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    method is a pass through to the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")方法是对[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法的传递。请参阅该方法的文档以获取使用说明。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.40中的新增内容：- 添加了[`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")，以便在所有结果集实现中都可用。
- en: See also
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](#engine-stream-results) - 描述了[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")的核心行为。'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用每次产生的大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per) - 在[ORM查询指南](../orm/queryguide/index.html)中。'
- en: '[PRE273]'
  id: totrans-1588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: A wrapper for a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    that returns dictionary values rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    values.
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")的包装器，返回的是字典值而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")的值。
- en: The [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    object is acquired by calling the [`Result.mappings()`](#sqlalchemy.engine.Result.mappings
    "sqlalchemy.engine.Result.mappings") method.
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`Result.mappings()`](#sqlalchemy.engine.Result.mappings "sqlalchemy.engine.Result.mappings")方法获取[`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")对象。
- en: '**Members**'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.engine.MappingResult.all), [close()](#sqlalchemy.engine.MappingResult.close),
    [closed](#sqlalchemy.engine.MappingResult.closed), [columns()](#sqlalchemy.engine.MappingResult.columns),
    [fetchall()](#sqlalchemy.engine.MappingResult.fetchall), [fetchmany()](#sqlalchemy.engine.MappingResult.fetchmany),
    [fetchone()](#sqlalchemy.engine.MappingResult.fetchone), [first()](#sqlalchemy.engine.MappingResult.first),
    [keys()](#sqlalchemy.engine.MappingResult.keys), [one()](#sqlalchemy.engine.MappingResult.one),
    [one_or_none()](#sqlalchemy.engine.MappingResult.one_or_none), [partitions()](#sqlalchemy.engine.MappingResult.partitions),
    [unique()](#sqlalchemy.engine.MappingResult.unique), [yield_per()](#sqlalchemy.engine.MappingResult.yield_per)'
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.engine.MappingResult.all), [close()](#sqlalchemy.engine.MappingResult.close),
    [closed](#sqlalchemy.engine.MappingResult.closed), [columns()](#sqlalchemy.engine.MappingResult.columns),
    [fetchall()](#sqlalchemy.engine.MappingResult.fetchall), [fetchmany()](#sqlalchemy.engine.MappingResult.fetchmany),
    [fetchone()](#sqlalchemy.engine.MappingResult.fetchone), [first()](#sqlalchemy.engine.MappingResult.first),
    [keys()](#sqlalchemy.engine.MappingResult.keys), [one()](#sqlalchemy.engine.MappingResult.one),
    [one_or_none()](#sqlalchemy.engine.MappingResult.one_or_none), [partitions()](#sqlalchemy.engine.MappingResult.partitions),
    [unique()](#sqlalchemy.engine.MappingResult.unique), [yield_per()](#sqlalchemy.engine.MappingResult.yield_per)'
- en: '**Class signature**'
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    (`sqlalchemy.engine._WithKeys`, [`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult"))
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    (`sqlalchemy.engine._WithKeys`, [`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult"))
- en: '[PRE274]'
  id: totrans-1595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: Return all scalar values in a sequence.
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 在序列中返回所有标量值。
- en: Equivalent to [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")相当，只是返回的是[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE275]'
  id: totrans-1598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '*inherited from the* [`FilterResult.close()`](#sqlalchemy.engine.FilterResult.close
    "sqlalchemy.engine.FilterResult.close") *method of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.close()`](#sqlalchemy.engine.FilterResult.close "sqlalchemy.engine.FilterResult.close")
    *方法的* [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")。'
- en: Close this [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult").
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")。
- en: New in version 1.4.43.
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.43中的新增内容。
- en: '[PRE276]'
  id: totrans-1602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '*inherited from the* [`FilterResult.closed`](#sqlalchemy.engine.FilterResult.closed
    "sqlalchemy.engine.FilterResult.closed") *attribute of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.closed`](#sqlalchemy.engine.FilterResult.closed "sqlalchemy.engine.FilterResult.closed")
    *属性的* [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")'
- en: Return `True` if the underlying [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    reports closed
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")报告已关闭，则返回`True`。
- en: New in version 1.4.43.
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.43版本中的新功能。
- en: '[PRE277]'
  id: totrans-1606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: Establish the columns that should be returned in each row.
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: 确定应在每行中返回的列。
- en: '[PRE278]'
  id: totrans-1608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: A synonym for the [`MappingResult.all()`](#sqlalchemy.engine.MappingResult.all
    "sqlalchemy.engine.MappingResult.all") method.
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MappingResult.all()`](#sqlalchemy.engine.MappingResult.all "sqlalchemy.engine.MappingResult.all")方法的同义词。'
- en: '[PRE279]'
  id: totrans-1610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: Fetch many objects.
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 检索多个对象。
- en: Equivalent to [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")，除了返回[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE280]'
  id: totrans-1613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Fetch one object.
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: 检索一个对象。
- en: Equivalent to [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone "sqlalchemy.engine.Result.fetchone")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone "sqlalchemy.engine.Result.fetchone")，除了返回[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE281]'
  id: totrans-1616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: Fetch the first object or `None` if no object is present.
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 检索第一个对象或如果没有对象则返回`None`。
- en: Equivalent to [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")，除了返回[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE282]'
  id: totrans-1619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.engine._WithKeys.keys` *方法的* `sqlalchemy.engine._WithKeys`'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代视图，该视图产生每个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")将表示的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以表示核心语句返回的列的标签或 orm 执行返回的 orm 类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 视图还可以使用 Python `in` 运算符进行键包含性测试，该运算符将测试视图中表示的字符串键以及列对象等替代键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：返回一个键视图对象而不是一个简单的列表。
- en: '[PRE283]'
  id: totrans-1625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: Return exactly one object or raise an exception.
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象或引发异常。
- en: Equivalent to [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")，除了返回[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE284]'
  id: totrans-1628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: Return at most one object or raise an exception.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至多一个对象或引发异常。
- en: Equivalent to [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") except that [`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")，除了返回[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE285]'
  id: totrans-1631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: Iterate through sub-lists of elements of the size given.
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的元素子列表。
- en: Equivalent to [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    相当，但返回的是 [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    值，而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: '[PRE286]'
  id: totrans-1634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: Apply unique filtering to the objects returned by this [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult").
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: 将唯一过滤应用于此 [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    返回的对象。
- en: See [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    for usage details.
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    获取使用详情。
- en: '[PRE287]'
  id: totrans-1637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '*inherited from the* [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: 将行获取策略配置为一次获取 `num` 行。
- en: The [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    method is a pass through to the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    方法是对 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    方法的简单封装。查看该方法的文档以获取使用说明。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.40 中新增：- 添加了 [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 以便在所有结果集实现上都可用该方法
- en: See also
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](#engine-stream-results) - 描述 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '[PRE288]'
  id: totrans-1645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: Represent a single result row.
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: 表示单个结果行。
- en: The [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object represents
    a row of a database result. It is typically associated in the 1.x series of SQLAlchemy
    with the [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    object, however is also used by the ORM for tuple-like results as of SQLAlchemy
    1.4.
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象表示数据库结果的一行。在 SQLAlchemy
    1.x 系列中，它通常与 [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    对象关联，但自 SQLAlchemy 1.4 起也被 ORM 用于类似元组的结果。'
- en: The [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object seeks to
    act as much like a Python named tuple as possible. For mapping (i.e. dictionary)
    behavior on a row, such as testing for containment of keys, refer to the [`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") attribute.
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象致力于尽可能像 Python 命名元组一样行事。要获取行上的映射（即字典）行为，例如检查键的包含，请参阅
    [`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")
    属性。'
- en: See also
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - includes examples of selecting rows from SELECT statements.'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SELECT 语句](../tutorial/data_select.html#tutorial-selecting-data) - 包括从
    SELECT 语句中选择行的示例。'
- en: 'Changed in version 1.4: Renamed `RowProxy` to [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row"). [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    is no longer a “proxy” object in that it contains the final form of data within
    it, and now acts mostly like a named tuple. Mapping-like functionality is moved
    to the [`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")
    attribute. See [RowProxy is no longer a “proxy”; is now called Row and behaves
    like an enhanced named tuple](../changelog/migration_14.html#change-4710-core)
    for background on this change.'
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4 版本开始更改：将 `RowProxy` 重命名为 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")。
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 不再是“代理”对象，因为它包含其中的最终数据形式，现在大部分像命名元组一样操作。类似映射的功能移到了
    [`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")
    属性。有关此更改的背景，请参阅 [RowProxy 不再是“代理”；现在称为 Row 并像增强的命名元组一样运行](../changelog/migration_14.html#change-4710-core)。
- en: '**Members**'
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[_asdict()](#sqlalchemy.engine.Row._asdict), [_fields](#sqlalchemy.engine.Row._fields),
    [_mapping](#sqlalchemy.engine.Row._mapping), [_t](#sqlalchemy.engine.Row._t),
    [_tuple()](#sqlalchemy.engine.Row._tuple), [count](#sqlalchemy.engine.Row.count),
    [index](#sqlalchemy.engine.Row.index), [t](#sqlalchemy.engine.Row.t), [tuple()](#sqlalchemy.engine.Row.tuple)'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: '[_asdict()](#sqlalchemy.engine.Row._asdict), [_fields](#sqlalchemy.engine.Row._fields),
    [_mapping](#sqlalchemy.engine.Row._mapping), [_t](#sqlalchemy.engine.Row._t),
    [_tuple()](#sqlalchemy.engine.Row._tuple), [count](#sqlalchemy.engine.Row.count),
    [index](#sqlalchemy.engine.Row.index), [t](#sqlalchemy.engine.Row.t), [tuple()](#sqlalchemy.engine.Row.tuple)'
- en: '**Class signature**'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    (`sqlalchemy.engine._py_row.BaseRow`, `collections.abc.Sequence`, `typing.Generic`)
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    (`sqlalchemy.engine._py_row.BaseRow`, `collections.abc.Sequence`, `typing.Generic`)
- en: '[PRE289]'
  id: totrans-1656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: Return a new dict which maps field names to their corresponding values.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新字典，将字段名映射到其相应的值。
- en: This method is analogous to the Python named tuple `._asdict()` method, and
    works by applying the `dict()` constructor to the [`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") attribute.
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法类似于 Python 命名元组的 `._asdict()` 方法，并通过将 `dict()` 构造函数应用于 [`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") 属性来工作。
- en: New in version 1.4.
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: See also
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")'
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")'
- en: '[PRE290]'
  id: totrans-1662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: Return a tuple of string keys as represented by this [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 所代表的字符串键的元组。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以表示核心语句返回的列的标签或 orm 执行返回的 orm 类的名称。
- en: This attribute is analogous to the Python named tuple `._fields` attribute.
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性类似于 Python 命名元组 `._fields` 属性。
- en: New in version 1.4.
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: See also
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")'
- en: '[PRE291]'
  id: totrans-1669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Return a [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    for this [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 的 [`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")。
- en: This object provides a consistent Python mapping (i.e. dictionary) interface
    for the data contained within the row. The [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    by itself behaves like a named tuple.
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象为行中包含的数据提供了一致的 Python 映射（即字典）接口。 单独的 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    行为类似命名元组。
- en: See also
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Row._fields`](#sqlalchemy.engine.Row._fields "sqlalchemy.engine.Row._fields")'
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._fields`](#sqlalchemy.engine.Row._fields "sqlalchemy.engine.Row._fields")'
- en: New in version 1.4.
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: '[PRE292]'
  id: totrans-1675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: A synonym for [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple").
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")
    的同义词。'
- en: 'New in version 2.0.19: - The [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    attribute supersedes the previous [`Row.t`](#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    attribute, which is now underscored to avoid name conflicts with column names
    in the same way as other named-tuple methods on [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").'
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0.19 版本新增：[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    属性取代了先前的 [`Row.t`](#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t") 属性，现在以下划线开头以避免与列名发生冲突，与
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 上的其他命名元组方法一样。
- en: See also
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t")'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t")'
- en: '[PRE293]'
  id: totrans-1680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: Return a ‘tuple’ form of this [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 的‘元组’形式。
- en: At runtime, this method returns “self”; the [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object is already a named tuple. However, at the typing level, if this [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") is typed, the “tuple” return type will be a [**PEP 484**](https://peps.python.org/pep-0484/)
    `Tuple` datatype that contains typing information about individual elements, supporting
    typed unpacking and attribute access.
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，此方法返回“self”；[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象已经是一个命名元组。然而，在类型级别上，如果此
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 被类型化，那么“元组”返回类型将是一个 [**PEP
    484**](https://peps.python.org/pep-0484/) 的 `Tuple` 数据类型，其中包含有关各个元素的类型信息，支持类型化的解包和属性访问。
- en: 'New in version 2.0.19: - The [`Row._tuple()`](#sqlalchemy.engine.Row._tuple
    "sqlalchemy.engine.Row._tuple") method supersedes the previous [`Row.tuple()`](#sqlalchemy.engine.Row.tuple
    "sqlalchemy.engine.Row.tuple") method, which is now underscored to avoid name
    conflicts with column names in the same way as other named-tuple methods on [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0.19 版新增：[`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")
    方法取代了以前的 [`Row.tuple()`](#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    方法，现在该方法已经被下划线标记，以避免与列名发生名称冲突，方式与其他命名元组方法在 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    上一样。
- en: See also
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - shorthand
    attribute notation'
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - 简写属性表示法'
- en: '[`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")'
- en: '[PRE294]'
  id: totrans-1687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-1688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-1689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: A synonym for [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple").
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")
    的同义词。'
- en: 'Deprecated since version 2.0.19: The [`Row.t`](#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    attribute is deprecated in favor of [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t");
    all [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") methods and library-level
    attributes are intended to be underscored to avoid name conflicts. Please use
    [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t").'
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0.19 版起不推荐使用：[`Row.t`](#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    属性已被废弃，建议使用 [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")；所有
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 方法和库级属性都应以下划线开头，以避免名称冲突。请使用
    [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")。
- en: New in version 2.0.
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版本新增。
- en: '[PRE297]'
  id: totrans-1693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: Return a ‘tuple’ form of this [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 的‘元组’形式。
- en: 'Deprecated since version 2.0.19: The [`Row.tuple()`](#sqlalchemy.engine.Row.tuple
    "sqlalchemy.engine.Row.tuple") method is deprecated in favor of [`Row._tuple()`](#sqlalchemy.engine.Row._tuple
    "sqlalchemy.engine.Row._tuple"); all [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    methods and library-level attributes are intended to be underscored to avoid name
    conflicts. Please use [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple").'
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0.19 版起不推荐使用：[`Row.tuple()`](#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    方法已被废弃，建议使用 [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")；所有
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 方法和库级属性都应以下划线开头，以避免名称冲突。请使用
    [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")。
- en: New in version 2.0.
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版本新增。
- en: '[PRE298]'
  id: totrans-1697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: A `Mapping` that maps column names and objects to [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: 将列名和对象映射到 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 值的映射。
- en: The [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    is available from a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") via
    the [`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")
    attribute, as well as from the iterable interface provided by the [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") object returned by the [`Result.mappings()`](#sqlalchemy.engine.Result.mappings
    "sqlalchemy.engine.Result.mappings") method.
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    可以通过 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 的 [`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") 属性获得，也可以通过 [`Result.mappings()`](#sqlalchemy.engine.Result.mappings
    "sqlalchemy.engine.Result.mappings") 方法返回的 [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") 对象提供的可迭代接口获得。'
- en: '[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    supplies Python mapping (i.e. dictionary) access to the contents of the row. This
    includes support for testing of containment of specific keys (string column names
    or objects), as well as iteration of keys, values, and items:'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    提供了对行内容的 Python 映射（即字典）访问。这包括支持测试特定键（字符串列名或对象）的包含性，以及对键、值和项的迭代：'
- en: '[PRE299]'
  id: totrans-1701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'New in version 1.4: The [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    object replaces the mapping-like access previously provided by a database result
    row, which now seeks to behave mostly like a named tuple.'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中：[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    对象取代了以前由数据库结果行提供的类似映射的访问，现在它主要表现得像一个命名元组。
- en: '**Members**'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[items()](#sqlalchemy.engine.RowMapping.items), [keys()](#sqlalchemy.engine.RowMapping.keys),
    [values()](#sqlalchemy.engine.RowMapping.values)'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: '[items()](#sqlalchemy.engine.RowMapping.items), [keys()](#sqlalchemy.engine.RowMapping.keys),
    [values()](#sqlalchemy.engine.RowMapping.values)'
- en: '**Class signature**'
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    (`sqlalchemy.engine._py_row.BaseRow`, `collections.abc.Mapping`, `typing.Generic`)
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    (`sqlalchemy.engine._py_row.BaseRow`, `collections.abc.Mapping`, `typing.Generic`)
- en: '[PRE300]'
  id: totrans-1707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: Return a view of key/value tuples for the elements in the underlying [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")中元素的键/值元组视图。
- en: '[PRE301]'
  id: totrans-1709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Return a view of ‘keys’ for string column names represented by the underlying
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")中表示的字符串列名的‘keys’视图。
- en: '[PRE302]'
  id: totrans-1711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Return a view of values for the values represented in the underlying [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")中表示的值的视图。
- en: '[PRE303]'
  id: totrans-1713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: A [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") that’s typed
    as returning plain Python tuples instead of rows.
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")，其类型为返回普通
    Python 元组而不是行。
- en: Since [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") acts like a tuple
    in every way already, this class is a typing only class, regular [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") is still used at runtime.
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")在任何方面都像一个元组，因��这个类只是一个类型类，运行时仍然使用常规[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")。
- en: '**Class signature**'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    ([`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult"),
    `sqlalchemy.util.langhelpers.TypingOnly`)
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")（[`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult"), `sqlalchemy.util.langhelpers.TypingOnly`)
- en: Basic Usage
  id: totrans-1718
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本用法
- en: 'Recall from [Engine Configuration](engines.html) that an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is created via the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call:'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 从[Engine Configuration](engines.html)中回想，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 是通过[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")调用创建的：
- en: '[PRE304]'
  id: totrans-1720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: The typical usage of [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") is once per particular database URL, held globally
    for the lifetime of a single application process. A single [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") manages many individual [DBAPI](../glossary.html#term-DBAPI)
    connections on behalf of the process and is intended to be called upon in a concurrent
    fashion. The [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is **not** synonymous to the DBAPI `connect()` function, which represents just
    one connection resource - the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is most efficient when created just once at the module level of an application,
    not per-object or per-function call.
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的典型用法是针对特定数据库 URL 每次一次，全局保存在单个应用程序进程的生命周期中。一个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 代表进程上的许多个体[DBAPI](../glossary.html#term-DBAPI)连接，并且旨在以并发方式调用。[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") **不**等同于 DBAPI `connect()` 函数，后者仅表示一个连接资源 - 当在应用程序的模块级别创建一次时，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 在效率上最高，而不是每个对象或每个函数调用。'
- en: 'The most basic function of the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is to provide access to a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    which can then invoke SQL statements. To emit a textual statement to the database
    looks like:'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 最基本的功能是提供对
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 的访问，然后可以调用
    SQL 语句。向数据库发出文本语句如下所示：'
- en: '[PRE305]'
  id: totrans-1723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: Above, the [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    method returns a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, and by using it in a Python context manager (e.g. the `with:` statement)
    the [`Connection.close()`](#sqlalchemy.engine.Connection.close "sqlalchemy.engine.Connection.close")
    method is automatically invoked at the end of the block. The [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), is a **proxy** object for an actual DBAPI connection.
    The DBAPI connection is retrieved from the connection pool at the point at which
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") is
    created.
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述中，[`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    方法返回一个 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，通过在 Python 上下文管理器中使用它（例如 `with:` 语句），[`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") 方法会在块结束时自动调用。[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 是一个实际的 DBAPI 连接的 **代理** 对象。DBAPI 连接是在创建 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 时从连接池中检索的。
- en: The object returned is known as [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"), which references a DBAPI cursor and provides
    methods for fetching rows similar to that of the DBAPI cursor. The DBAPI cursor
    will be closed by the [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    when all of its result rows (if any) are exhausted. A [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") that returns no rows, such as that of an UPDATE
    statement (without any returned rows), releases cursor resources immediately upon
    construction.
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象称为 [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")，它引用了一个
    DBAPI 游标，并提供了类似于 DBAPI 游标的获取行的方法。当所有结果行（如果有）都耗尽时，[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") 将关闭 DBAPI 游标。一个不返回行的 [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")，例如没有返回任何行的 UPDATE 语句，立即在构造时释放游标资源。
- en: When the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is closed at the end of the `with:` block, the referenced DBAPI connection is
    [released](../glossary.html#term-released) to the connection pool. From the perspective
    of the database itself, the connection pool will not actually “close” the connection
    assuming the pool has room to store this connection for the next use. When the
    connection is returned to the pool for re-use, the pooling mechanism issues a
    `rollback()` call on the DBAPI connection so that any transactional state or locks
    are removed (this is known as [Reset On Return](pooling.html#pool-reset-on-return)),
    and the connection is ready for its next use.
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 `with:` 块的末尾关闭 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    时，引用的 DBAPI 连接被释放到连接池中。从数据库本身的角度来看，假设连接池有空间存储该连接以供下次使用，连接池实际上不会“关闭”连接。当将连接返回给连接池以供重用时，池化机制会在
    DBAPI 连接上发出 `rollback()` 调用，以便删除任何事务状态或锁定（这称为 [Reset On Return](pooling.html#pool-reset-on-return)），并且连接准备好供下次使用。
- en: Our example above illustrated the execution of a textual SQL string, which should
    be invoked by using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct to indicate that we’d like to use
    textual SQL. The [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method can of course accommodate more
    than that; see [Working with Data](../tutorial/data.html#tutorial-working-with-data)
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    for a tutorial.
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例说明了执行文本 SQL 字符串，应该使用 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造来指示我们想要使用文本 SQL。[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法当然可以容纳更多内容；请参阅 [Working with Data](../tutorial/data.html#tutorial-working-with-data)
    在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中进行教程。
- en: Using Transactions
  id: totrans-1728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用事务
- en: Note
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This section describes how to use transactions when working directly with [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects. When using the SQLAlchemy ORM, the public API for transaction control
    is via the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object, which makes usage of the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object internally. See [Managing Transactions](../orm/session_transaction.html#unitofwork-transaction)
    for further information.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了在直接使用[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")和[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象时如何使用事务。当使用SQLAlchemy ORM时，事务控制的公共API是通过[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象，该对象在内部使用[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")对象。有关更多信息，请参阅[管理事务](../orm/session_transaction.html#unitofwork-transaction)。
- en: Commit As You Go
  id: totrans-1731
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按需提交
- en: The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object always emits SQL statements within the context of a transaction block.
    The first time the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method is called to execute a SQL statement,
    this transaction is begun automatically, using a behavior known as **autobegin**.
    The transaction remains in place for the scope of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object until the [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods are called. Subsequent to the
    transaction ending, the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    waits for the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    method to be called again, at which point it autobegins again.
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象始终在事务块的上下文中发出SQL语句。第一次调用[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法来执行SQL语句时，此事务会自动开始，使用一种称为**autobegin**的行为。事务在[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的范围内保持不变，直到调用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")或[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法。在事务结束后，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")等待再次调用[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法，此时它会自动重新开始。'
- en: 'This calling style is known as **commit as you go**, and is illustrated in
    the example below:'
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用风格称为**按需提交**，如下面的示例所示：
- en: '[PRE306]'
  id: totrans-1734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: 'In “commit as you go” style, we can call upon [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods freely within an ongoing sequence
    of other statements emitted using [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"); each time the transaction is ended, and
    a new statement is emitted, a new transaction begins implicitly:'
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 在“按需提交”的风格中，我们可以在使用[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")发出的一系列其他语句中自由地调用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")和[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法；每次事务结束，并发出新语句时，都会隐式开始一个新的事务：
- en: '[PRE307]'
  id: totrans-1736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: 'New in version 2.0: “commit as you go” style is a new feature of SQLAlchemy
    2.0\. It is also available in SQLAlchemy 1.4’s “transitional” mode when using
    a “future” style engine.'
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能：“按需提交”风格是SQLAlchemy 2.0的新功能。当使用“future”风格引擎时，它也可用于SQLAlchemy 1.4的“过渡”模式中。
- en: Begin Once
  id: totrans-1738
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 只需开始一次
- en: 'The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object provides a more explicit transaction management style known as **begin
    once**. In contrast to “commit as you go”, “begin once” allows the start point
    of the transaction to be stated explicitly, and allows that the transaction itself
    may be framed out as a context manager block so that the end of the transaction
    is instead implicit. To use “begin once”, the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is used, which returns a [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object which represents the DBAPI transaction.
    This object also supports explicit management via its own [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") and [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") methods, but as a preferred practice
    also supports the context manager interface, where it will commit itself when
    the block ends normally and emit a rollback if an exception is raised, before
    propagating the exception outwards. Below illustrates the form of a “begin once”
    block:'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象提供了一种更明确的事务管理样式，称为**仅开始一次**。与“按需提交”相比，“仅开始一次”允许显式声明事务的起始点，并允许将事务本身构建为上下文管理器块，以便事务的结束变得隐式。要使用“仅开始一次”，使用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法，它返回一个代表DBAPI事务的[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")对象。该对象还支持通过其自己的[`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit")和[`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback")方法进行显式管理，但作为首选做法，还支持上下文管理器接口，其中当块正常结束时，它将自行提交，并在引发异常时发出回滚，然后将异常传播到外部。下面说明了“仅开始一次”块的形式：'
- en: '[PRE308]'
  id: totrans-1740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: Connect and Begin Once from the Engine
  id: totrans-1741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从引擎连接和开始一次
- en: 'A convenient shorthand form for the above “begin once” block is to use the
    [`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    method at the level of the originating [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object, rather than performing the two separate steps of [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") and [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin"); the [`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") method returns a special context manager that
    internally maintains both the context manager for the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as well as the context manager for the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") normally returned by the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method:'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 上述“仅开始一次”块的便捷简写形式是在起始[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象的级别上使用[`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")方法，而不是执行[`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect")和[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")这两个单独的步骤；[`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")方法返回一个特殊的上下文管理器，内部同时维护[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的上下文管理器以及通常由[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法返回的[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")的上下文管理器：
- en: '[PRE309]'
  id: totrans-1743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: Tip
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'Within the [`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    block, we can call upon the [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, which will end the transaction
    normally demarcated by the block ahead of time. However, if we do so, no further
    SQL operations may be emitted on the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") until the block ends:'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")块中，我们可以调用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")或[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法，这将提前结束由该块正常标记的事务。但是，如果我们这样做，就不能在[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上进一步发出SQL操作，直到块结束为止：
- en: '[PRE310]'
  id: totrans-1746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: Mixing Styles
  id: totrans-1747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合样式
- en: 'The “commit as you go” and “begin once” styles can be freely mixed within a
    single [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    block, provided that the call to [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") does not conflict with the “autobegin” behavior.
    To accomplish this, [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") should only be called either before any
    SQL statements have been emitted, or directly after a previous call to [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback"):'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: “一次性开始”和“边执行边提交”样式可以自由混合在单个 [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") 块中，只要对 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 的调用不与“自动开始”行为冲突。为了实现这一点，[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 应该在发出任何 SQL 语句之前或在直接调用之后调用 [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 或 [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")：
- en: '[PRE311]'
  id: totrans-1749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: When developing code that uses “begin once”, the library will raise [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if a transaction was already “autobegun”.
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发使用“一次性开始”的代码时，如果事务已经“自动开始”，库将引发 [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: Commit As You Go
  id: totrans-1751
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边执行边提交
- en: The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object always emits SQL statements within the context of a transaction block.
    The first time the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method is called to execute a SQL statement,
    this transaction is begun automatically, using a behavior known as **autobegin**.
    The transaction remains in place for the scope of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object until the [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods are called. Subsequent to the
    transaction ending, the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    waits for the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    method to be called again, at which point it autobegins again.
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象总是在事务块的上下文中发出 SQL 语句。当第一次调用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法执行 SQL 语句时，将自动开始此事务，使用的是称为**自动开始**的行为。事务将一直保持到
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 对象的范围内，直到调用
    [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    或 [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")
    方法。在事务结束后，[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    等待再次调用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    方法，此时将再次自动开始。'
- en: 'This calling style is known as **commit as you go**, and is illustrated in
    the example below:'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: 这种调用方式称为**边执行边提交**，下面的示例中有所说明：
- en: '[PRE312]'
  id: totrans-1754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: 'In “commit as you go” style, we can call upon [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods freely within an ongoing sequence
    of other statements emitted using [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"); each time the transaction is ended, and
    a new statement is emitted, a new transaction begins implicitly:'
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 在“边执行边提交”样式中，我们可以随时调用 [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 和 [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") 方法，在使用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 发出的其他语句序列中；每次事务结束，并发出新的语句时，都会隐式开始一个新的事务：
- en: '[PRE313]'
  id: totrans-1756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: 'New in version 2.0: “commit as you go” style is a new feature of SQLAlchemy
    2.0\. It is also available in SQLAlchemy 1.4’s “transitional” mode when using
    a “future” style engine.'
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本新增：“边执行边提交”样式是 SQLAlchemy 2.0 的新功能。当使用“未来”样式引擎时，它也可在 SQLAlchemy 1.4 的“过渡”模式中使用。
- en: Begin Once
  id: totrans-1758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一次性开始
- en: 'The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object provides a more explicit transaction management style known as **begin
    once**. In contrast to “commit as you go”, “begin once” allows the start point
    of the transaction to be stated explicitly, and allows that the transaction itself
    may be framed out as a context manager block so that the end of the transaction
    is instead implicit. To use “begin once”, the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is used, which returns a [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object which represents the DBAPI transaction.
    This object also supports explicit management via its own [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") and [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") methods, but as a preferred practice
    also supports the context manager interface, where it will commit itself when
    the block ends normally and emit a rollback if an exception is raised, before
    propagating the exception outwards. Below illustrates the form of a “begin once”
    block:'
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象提供了一种更明确的事务管理样式，称为**begin
    once**。与“随着操作进行提交”相比，“begin once”允许明确指定事务的起始点，并允许将事务本身构建为上下文管理器块，以便事务的结束是隐式的。要使用“begin
    once”，使用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")方法，该方法返回一个表示DBAPI事务的[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")对象。该对象还支持通过自己的[`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit")和[`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback")方法的显式管理，但作为首选做法，还支持上下文管理器接口，在块正常结束时将自动提交，并在引发异常时发出回滚，然后将异常传播出去。下面示例说明了“begin
    once”块的形式：'
- en: '[PRE314]'
  id: totrans-1760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: Connect and Begin Once from the Engine
  id: totrans-1761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从引擎连接和开始一次
- en: 'A convenient shorthand form for the above “begin once” block is to use the
    [`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    method at the level of the originating [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object, rather than performing the two separate steps of [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") and [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin"); the [`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") method returns a special context manager that
    internally maintains both the context manager for the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as well as the context manager for the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") normally returned by the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method:'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述“begin once”块的一个便捷的缩写形式是在源[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象的级别上使用[`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")方法，而不是执行两个分开的步骤[`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect")和[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")；[`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")方法返回一个特殊的上下文管理器，内部同时维护[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的上下文管理器以及通常由[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法返回的[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")的上下文管理器：
- en: '[PRE315]'
  id: totrans-1763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: Tip
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'Within the [`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    block, we can call upon the [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, which will end the transaction
    normally demarcated by the block ahead of time. However, if we do so, no further
    SQL operations may be emitted on the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") until the block ends:'
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")块中，我们可以调用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")或[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法，这将提前结束由块正常标记的事务。但是，如果我们这样做，直到块结束之前，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上不会再发出任何SQL操作：
- en: '[PRE316]'
  id: totrans-1766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: Mixing Styles
  id: totrans-1767
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合样式
- en: 'The “commit as you go” and “begin once” styles can be freely mixed within a
    single [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    block, provided that the call to [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") does not conflict with the “autobegin” behavior.
    To accomplish this, [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") should only be called either before any
    SQL statements have been emitted, or directly after a previous call to [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback"):'
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: “随行提交”和“一次开始”样式可以在单个 [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") 块内自由混合使用，只要对 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 的调用不与“自动开始”行为冲突即可。为了实现这一点，[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 应该在发出任何 SQL 语句之前或直接在先前对 [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 或 [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") 的调用之后被调用：
- en: '[PRE317]'
  id: totrans-1769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: When developing code that uses “begin once”, the library will raise [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if a transaction was already “autobegun”.
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发使用“一次开始”的代码时，如果事务已经“自动开始”，库将引发 [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '## Setting Transaction Isolation Levels including DBAPI Autocommit'
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: '## 设置事务隔离级别，包括 DBAPI 自动提交'
- en: Most DBAPIs support the concept of configurable transaction [isolation](../glossary.html#term-isolation)
    levels. These are traditionally the four levels “READ UNCOMMITTED”, “READ COMMITTED”,
    “REPEATABLE READ” and “SERIALIZABLE”. These are usually applied to a DBAPI connection
    before it begins a new transaction, noting that most DBAPIs will begin this transaction
    implicitly when SQL statements are first emitted.
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 DBAPI 支持可配置的事务[隔离](../glossary.html#term-isolation)级别的概念。这些传统上是四个级别，“READ
    UNCOMMITTED”、“READ COMMITTED”、“REPEATABLE READ” 和 “SERIALIZABLE”。这些通常在 DBAPI 连接开始新事务之前应用，需要注意的是，当首次发出
    SQL 语句时，大多数 DBAPI 会隐式开始此事务。
- en: DBAPIs that support isolation levels also usually support the concept of true
    “autocommit”, which means that the DBAPI connection itself will be placed into
    a non-transactional autocommit mode. This usually means that the typical DBAPI
    behavior of emitting “BEGIN” to the database automatically no longer occurs, but
    it may also include other directives. SQLAlchemy treats the concept of “autocommit”
    like any other isolation level; in that it is an isolation level that loses not
    only “read committed” but also loses atomicity.
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: 支持隔离级别的 DBAPI 通常也支持真正的“自动提交”概念，这意味着 DBAPI 连接本身将被放置在非事务性自动提交模式中。这通常意味着数据库自动发出“BEGIN”的典型
    DBAPI 行为不再发生，但也可能包括其他指令。SQLAlchemy 将“自动提交”的概念视为任何其他隔离级别；因为它是一个不仅失去“读已提交”而且失去原子性的隔离级别。
- en: Tip
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: It is important to note, as will be discussed further in the section below at
    [Understanding the DBAPI-Level Autocommit Isolation Level](#dbapi-autocommit-understanding),
    that “autocommit” isolation level like any other isolation level does **not**
    affect the “transactional” behavior of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, which continues to call upon DBAPI `.commit()`
    and `.rollback()` methods (they just have no effect under autocommit), and for
    which the `.begin()` method assumes the DBAPI will start a transaction implicitly
    (which means that SQLAlchemy’s “begin” **does not change autocommit mode**).
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，如下面部分将在 [理解 DBAPI 级别的自动提交隔离级别](#dbapi-autocommit-understanding) 中进一步讨论的那样，“自动提交”隔离级别像任何其他隔离级别一样**不会**影响
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 对象的“事务”行为，该对象继续调用
    DBAPI 的 `.commit()` 和 `.rollback()` 方法（它们在自动提交模式下没有效果），并且 `.begin()` 方法假定 DBAPI
    将隐式启动事务（这意味着 SQLAlchemy 的“begin”**不会更改自动提交模式**）。
- en: SQLAlchemy dialects should support these isolation levels as well as autocommit
    to as great a degree as possible.
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 方言应尽可能支持这些隔离级别以及自动提交。
- en: Setting Isolation Level or DBAPI Autocommit for a Connection
  id: totrans-1777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置连接的隔离级别或 DBAPI 自动提交
- en: 'For an individual [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object that’s acquired from [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect"), the isolation level can be set for the duration
    of that [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object using the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. The parameter is known
    as [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and the values are strings which
    are typically a subset of the following names:'
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从 [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    获得的每个单独的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，可以使用 [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法为该 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象设置隔离级别。该参数被称为 [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")，其值通常为以下名称的子集：
- en: '[PRE318]'
  id: totrans-1779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: Not every DBAPI supports every value; if an unsupported value is used for a
    certain backend, an error is raised.
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: 并非每个DBAPI都支持每个数值；如果在某个后端使用了不支持的值，将会引发错误。
- en: 'For example, to force REPEATABLE READ on a specific connection, then begin
    a transaction:'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要强制在特定连接上使用 REPEATABLE READ，然后开始一个事务：
- en: '[PRE319]'
  id: totrans-1782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: Tip
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The return value of the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is the same [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object upon which the method was called, meaning,
    it modifies the state of the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object in place. This is a new behavior as of SQLAlchemy 2.0. This behavior does
    not apply to the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method; that method still returns
    a copy of the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and as described below may be used to construct multiple [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects with different execution options, which nonetheless
    share the same dialect and connection pool.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法的返回值是调用该方法的同一个 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象，这意味着它直接修改了该 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象的状态。这是 SQLAlchemy 2.0 新增的行为。这个行为不适用于 [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 方法；该方法仍然返回一个 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的副本，并且如下所述，可以用于构建具有不同执行选项的多个 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象，但它们仍然共享相同的方言和连接池。'
- en: Note
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter necessarily does not
    apply to statement level options, such as that of [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"), and will be rejected
    if set at this level. This because the option must be set on a DBAPI connection
    on a per-transaction basis.
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数不适用于语句级别选项，例如 [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 的选项，并且如果在此级别设置，将被拒绝。这是因为该选项必须在每个事务基础上针对DBAPI连接进行设置。'
- en: Setting Isolation Level or DBAPI Autocommit for an Engine
  id: totrans-1787
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置引擎的隔离级别或DBAPI自动提交
- en: 'The [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") option may also be set engine
    wide, as is often preferable. This may be achieved by passing the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter to `create_engine()`:'
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 选项也可以设置为引擎范围内，通常更可取。这可以通过将 [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数传递给 `create_engine()` 来实现：'
- en: '[PRE320]'
  id: totrans-1789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: With the above setting, each new DBAPI connection the moment it’s created will
    be set to use a `"REPEATABLE READ"` isolation level setting for all subsequent
    operations.
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以上设置，每个新的 DBAPI 连接在创建时将被设置为在所有后续操作中使用`"REPEATABLE READ"`隔离级别设置。
- en: '### Maintaining Multiple Isolation Levels for a Single Engine'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: '### 维护单个引擎的多个隔离级别'
- en: 'The isolation level may also be set per engine, with a potentially greater
    level of flexibility, using either the [`create_engine.execution_options`](engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") parameter to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") or the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method, the latter of which will
    create a copy of the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    that shares the dialect and connection pool of the original engine, but has its
    own per-connection isolation level setting:'
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离级别也可以针对每个引擎进行设置，使用[`create_engine.execution_options`](engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine")参数或[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法，后者将创建一个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的副本，该副本共享方言和连接池，但具有自己的每个连接的隔离级别设置：
- en: '[PRE321]'
  id: totrans-1793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: With the above setting, the DBAPI connection will be set to use a `"REPEATABLE
    READ"` isolation level setting for each new transaction begun; but the connection
    as pooled will be reset to the original isolation level that was present when
    the connection first occurred. At the level of [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), the end effect is not any different from using the
    [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter.
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以上设置，DBAPI 连接将被设置为在每个新的事务开始时使用`"REPEATABLE READ"`隔离级别设置；但是，作为池化的连接将被重置为在连接首次发生时存在的原始隔离级别。在[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的级别上，最终效果与使用[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数没有任何不同。
- en: 'However, an application that frequently chooses to run operations within different
    isolation levels may wish to create multiple “sub-engines” of a lead [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), each of which will be configured to a different isolation
    level. One such use case is an application that has operations that break into
    “transactional” and “read-only” operations, a separate [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") that makes use of `"AUTOCOMMIT"` may be separated
    off from the main engine:'
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，经常选择在不同隔离级别中运行操作的应用程序可能希望创建多个“子引擎”来使用一个主[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，其中每个引擎将配置为不同的隔离级别。一个这样的用例是一个应用程序，它有分为“事务性”和“只读”操作的操作，一个单独的[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，使用`"AUTOCOMMIT"`可能被分离出来，从主引擎中分离出来：
- en: '[PRE322]'
  id: totrans-1796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: Above, the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method creates a shallow copy of
    the original [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    Both `eng` and `autocommit_engine` share the same dialect and connection pool.
    However, the “AUTOCOMMIT” mode will be set upon connections when they are acquired
    from the `autocommit_engine`.
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法创建了原始[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的浅层副本。`eng`和`autocommit_engine`共享相同的方言和连接池。然而，“AUTOCOMMIT”模式将在从`autocommit_engine`获取连接时设置。
- en: The isolation level setting, regardless of which one it is, is unconditionally
    reverted when a connection is returned to the connection pool.
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 无论设置的隔离级别是什么，在连接返回到连接池时都会无条件地恢复。
- en: See also
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[SQLite Transaction Isolation](../dialects/sqlite.html#sqlite-isolation-level)'
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLite 事务隔离](../dialects/sqlite.html#sqlite-isolation-level)'
- en: '[PostgreSQL Transaction Isolation](../dialects/postgresql.html#postgresql-isolation-level)'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 事务隔离](../dialects/postgresql.html#postgresql-isolation-level)'
- en: '[MySQL Transaction Isolation](../dialects/mysql.html#mysql-isolation-level)'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: '[MySQL 事务隔离](../dialects/mysql.html#mysql-isolation-level)'
- en: '[SQL Server Transaction Isolation](../dialects/mssql.html#mssql-isolation-level)'
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL Server 事务隔离](../dialects/mssql.html#mssql-isolation-level)'
- en: '[Oracle Transaction Isolation](../dialects/oracle.html#oracle-isolation-level)'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: '[Oracle 事务隔离](../dialects/oracle.html#oracle-isolation-level)'
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - for the ORM'
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI 自动提交](../orm/session_transaction.html#session-transaction-isolation)
    - 用于 ORM'
- en: '[Using DBAPI Autocommit Allows for a Readonly Version of Transparent Reconnect](../faq/connections.html#faq-execute-retry-autocommit)
    - a recipe that uses DBAPI autocommit to transparently reconnect to the database
    for read-only operations  ### Understanding the DBAPI-Level Autocommit Isolation
    Level'
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 DBAPI 自动提交允许只读版本的透明重连接](../faq/connections.html#faq-execute-retry-autocommit)
    - 一种利用 DBAPI 自动提交来对数据库进行透明重连接以进行只读操作的方法  ### 理解 DBAPI 级别的自动提交隔离级别'
- en: In the parent section, we introduced the concept of the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter and how it can be
    used to set database isolation levels, including DBAPI-level “autocommit” which
    is treated by SQLAlchemy as another transaction isolation level. In this section
    we will attempt to clarify the implications of this approach.
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一部分中，我们介绍了 [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数的概念以及如何使用它来设置数据库隔离级别，包括 SQLAlchemy
    将其视为另一个事务隔离级别的 DBAPI 级别的“自动提交”。在本节中，我们将试图澄清这种方法的含义。
- en: 'If we wanted to check out a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object and use it “autocommit” mode, we would proceed as follows:'
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要检查一个 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象并使用它的“自动提交”模式，我们将按如下方式进行：
- en: '[PRE323]'
  id: totrans-1809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: Above illustrates normal usage of “DBAPI autocommit” mode. There is no need
    to make use of methods such as [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") or [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit"), as all statements are committed to the
    database immediately. When the block ends, the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will revert the “autocommit” isolation
    level, and the DBAPI connection is released to the connection pool where the DBAPI
    `connection.rollback()` method will normally be invoked, but as the above statements
    were already committed, this rollback has no change on the state of the database.
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: 上面说明了“DBAPI 自动提交”模式的正常使用。无需使用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 或 [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 等方法，因为所有语句都会立即提交到数据库。当块结束时，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象将恢复“自动提交”隔离级别，并且 DBAPI 连接将释放到连接池，其中 DBAPI 的
    `connection.rollback()` 方法通常会被调用，但是由于上面的语句已经提交了，这个回滚对数据库状态没有任何改变。
- en: It is important to note that “autocommit” mode persists even when the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called; the DBAPI will not emit
    any BEGIN to the database, nor will it emit COMMIT when [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") is called. This usage is also not an error
    scenario, as it is expected that the “autocommit” isolation level may be applied
    to code that otherwise was written assuming a transactional context; the “isolation
    level” is, after all, a configurational detail of the transaction itself just
    like any other isolation level.
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，“自动提交”模式甚至在调用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 方法时也会持续存在；DBAPI 不会向数据库发送任何 BEGIN，也不会在调用
    [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    时发送 COMMIT。这种用法也不是错误的情景，因为可以预期“自动提交”隔离级别可能被应用于原本假设处于事务上下文的代码；毕竟，“隔离级别”本身就是事务的配置细节，就像任何其他隔离级别一样。
- en: 'In the example below, statements remain **autocommitting** regardless of SQLAlchemy-level
    transaction blocks:'
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，无论是什么样的 SQLAlchemy 级别的事务块，语句都保持 **自动提交**：
- en: '[PRE324]'
  id: totrans-1813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: 'When we run a block like the above with logging turned on, the logging will
    attempt to indicate that while a DBAPI level `.commit()` is called, it probably
    will have no effect due to autocommit mode:'
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们像上面的示例一样运行一个带有日志记录的代码块时，日志记录将尝试指示，尽管调用了 DBAPI 级别的 `.commit()`，但由于自动提交模式，它可能没有任何效果：
- en: '[PRE325]'
  id: totrans-1815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: 'At the same time, even though we are using “DBAPI autocommit”, SQLAlchemy’s
    transactional semantics, that is, the in-Python behavior of [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") as well as the behavior of “autobegin”,
    **remain in place, even though these don’t impact the DBAPI connection itself**.
    To illustrate, the code below will raise an error, as [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") is being called after autobegin has already
    occurred:'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，尽管我们正在使用“DBAPI autocommit”，但SQLAlchemy的事务语义，即[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")的Python内部行为以及“autobegin”的行为，**仍然存在，尽管这些不会影响DBAPI连接本身**。为了说明，下面的代码将引发错误，因为在自动开始已经发生后调用了[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")：
- en: '[PRE326]'
  id: totrans-1817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: The above example also demonstrates the same theme that the “autocommit” isolation
    level is a configurational detail of the underlying database transaction, and
    is independent of the begin/commit behavior of the SQLAlchemy Connection object.
    The “autocommit” mode will not interact with [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") in any way and the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") does not consult this status when performing its
    own state changes with regards to the transaction (with the exception of suggesting
    within engine logging that these blocks are not actually committing). The rationale
    for this design is to maintain a completely consistent usage pattern with the
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") where
    DBAPI-autocommit mode can be changed independently without indicating any code
    changes elsewhere.
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例还展示了“autocommit”隔离级别是底层数据库事务的配置细节，并且独立于SQLAlchemy连接对象的开始/提交行为。 “autocommit”模式不会以任何方式与[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")交互，并且在执行有关事务的自身状态更改时（除了在引擎日志中建议这些块实际上并没有提交之外），[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")不会查询此状态。这种设计的理念是保持与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")完全一致的使用模式，其中DBAPI自动提交模式可以独立更改，而无需指示其他地方的任何代码更改。
- en: Changing Between Isolation Levels
  id: totrans-1819
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在不同隔离级别之间切换
- en: Isolation level settings, including autocommit mode, are reset automatically
    when the connection is released back to the connection pool. Therefore it is preferable
    to avoid trying to switch isolation levels on a single [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object as this leads to excess verbosity.
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离级别设置，包括自动提交模式，在连接释放回连接池时会自动重置。因此，最好避免尝试在单个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象上切换隔离级别，因为这会导致冗余性过高。
- en: 'To illustrate how to use “autocommit” in an ad-hoc mode within the scope of
    a single [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    checkout, the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter must be re-applied
    with the previous isolation level. The previous section illustrated an attempt
    to call [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    in order to start a transaction while autocommit was taking place; we can rewrite
    that example to actually do so by first reverting the isolation level before we
    call upon [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin"):'
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何在单个[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")检出的范围内以临时模式使用“autocommit”，必须重新应用[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数以恢复先前的隔离级别。前一节说明了在进行自动提交时尝试调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")来启动事务的尝试；我们可以通过在调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")之前先恢复隔离级别来重写该示例：
- en: '[PRE327]'
  id: totrans-1822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: Above, to manually revert the isolation level we made use of [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") to restore the default
    isolation level (assuming that’s what we want here). However, it’s probably a
    better idea to work with the architecture of of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") which already handles resetting of isolation level
    automatically upon checkin. The **preferred** way to write the above is to use
    two blocks
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，为了手动恢复隔离级别，我们利用了[`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level")来恢复默认的隔离级别（假设这是我们想要的）。然而，更好的做法可能是使用[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的架构，该架构已经在检入时自动处理重置隔离级别。编写上述内容的**首选**方式是使用两个块。
- en: '[PRE328]'
  id: totrans-1824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: 'To sum up:'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下：
- en: “DBAPI level autocommit” isolation level is entirely independent of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object’s notion of “begin” and “commit”
  id: totrans-1826
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “DBAPI级别自动提交”隔离级别完全独立于[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象对“开始”和“提交”的概念。
- en: use individual [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    checkouts per isolation level. Avoid trying to change back and forth between “autocommit”
    on a single connection checkout; let the engine do the work of restoring default
    isolation levels
  id: totrans-1827
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用单独的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")检出每个隔离级别。避免在单个连接检出之间试图来回切换“自动提交”；让引擎来恢复默认的隔离级别。
- en: Setting Isolation Level or DBAPI Autocommit for a Connection
  id: totrans-1828
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置连接的隔离级别或DBAPI自动提交
- en: 'For an individual [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object that’s acquired from [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect"), the isolation level can be set for the duration
    of that [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object using the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. The parameter is known
    as [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and the values are strings which
    are typically a subset of the following names:'
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从[`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")获取的单个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象，可以使用[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法来设置该[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的隔离级别。参数称为[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")，其值通常是以下名称的子集：
- en: '[PRE329]'
  id: totrans-1830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: Not every DBAPI supports every value; if an unsupported value is used for a
    certain backend, an error is raised.
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: 并非每个DBAPI都支持每个值；如果对于某个后端使用了不支持的值，则会引发错误。
- en: 'For example, to force REPEATABLE READ on a specific connection, then begin
    a transaction:'
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在特定连接上强制使用**可重复读**，然后开始一个事务：
- en: '[PRE330]'
  id: totrans-1833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: Tip
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The return value of the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is the same [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object upon which the method was called, meaning,
    it modifies the state of the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object in place. This is a new behavior as of SQLAlchemy 2.0. This behavior does
    not apply to the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method; that method still returns
    a copy of the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and as described below may be used to construct multiple [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects with different execution options, which nonetheless
    share the same dialect and connection pool.
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法的返回值是调用该方法的相同 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象，这意味着它会直接修改 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象的状态。这是 SQLAlchemy 2.0 的新行为。这种行为不适用于 [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 方法；该方法仍然返回一个 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的副本，并且如下所述，可以用于构建具有不同执行选项的多个 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象，但它们仍然共享相同的方言和连接池。'
- en: Note
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter necessarily does not
    apply to statement level options, such as that of [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"), and will be rejected
    if set at this level. This because the option must be set on a DBAPI connection
    on a per-transaction basis.
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数不适用于语句级别选项，例如 [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")，如果在此级别设置将会被拒绝。这是因为该选项必须在每个事务的
    DBAPI 连接上设置。'
- en: Setting Isolation Level or DBAPI Autocommit for an Engine
  id: totrans-1838
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置引擎的隔离级别或 DBAPI 自动提交
- en: 'The [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") option may also be set engine
    wide, as is often preferable. This may be achieved by passing the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter to `create_engine()`:'
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 选项也可以设置为整个引擎范围内，通常更可取。这可以通过将
    [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数传递给 `create_engine()` 来实现：'
- en: '[PRE331]'
  id: totrans-1840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: With the above setting, each new DBAPI connection the moment it’s created will
    be set to use a `"REPEATABLE READ"` isolation level setting for all subsequent
    operations.
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述设置，每个新的 DBAPI 连接在创建时将被设置为对所有后续操作使用 `"REPEATABLE READ"` 隔离级别设置。
- en: '### Maintaining Multiple Isolation Levels for a Single Engine'
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: '### 为单个引擎维护多个隔离级别'
- en: 'The isolation level may also be set per engine, with a potentially greater
    level of flexibility, using either the [`create_engine.execution_options`](engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") parameter to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") or the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method, the latter of which will
    create a copy of the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    that shares the dialect and connection pool of the original engine, but has its
    own per-connection isolation level setting:'
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离级别也可以针对每个引擎进行设置，具有更大的灵活性，可以使用 [`create_engine.execution_options`](engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") 参数传递给 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 或 [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 方法，后者将创建一个与原始引擎共享方言和连接池但具有自己的每个连接隔离级别设置的
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 的副本：
- en: '[PRE332]'
  id: totrans-1844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: With the above setting, the DBAPI connection will be set to use a `"REPEATABLE
    READ"` isolation level setting for each new transaction begun; but the connection
    as pooled will be reset to the original isolation level that was present when
    the connection first occurred. At the level of [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), the end effect is not any different from using the
    [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter.
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述设置，每开始一个新事务时，DBAPI 连接将设置为使用 `"REPEATABLE READ"` 隔离级别设置；但是连接在被池化时将被重置为首次发生连接时存在的原始隔离级别。在
    [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的级别上，最终效果与使用 [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数没有任何不同。
- en: 'However, an application that frequently chooses to run operations within different
    isolation levels may wish to create multiple “sub-engines” of a lead [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), each of which will be configured to a different isolation
    level. One such use case is an application that has operations that break into
    “transactional” and “read-only” operations, a separate [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") that makes use of `"AUTOCOMMIT"` may be separated
    off from the main engine:'
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，频繁选择在不同隔离级别内运行操作的应用程序可能希望创建多个 "子引擎" 以及一个主 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，每个引擎都配置为不同的隔离级别。一个这样的用例是一个具有分为 "事务性" 和 "只读" 操作的应用程序，可以从主引擎中分离出一个单独的
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，该引擎使用 `"AUTOCOMMIT"`：
- en: '[PRE333]'
  id: totrans-1847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Above, the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method creates a shallow copy of
    the original [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    Both `eng` and `autocommit_engine` share the same dialect and connection pool.
    However, the “AUTOCOMMIT” mode will be set upon connections when they are acquired
    from the `autocommit_engine`.
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: 上述，[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 方法创建原 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的一个浅拷贝。`eng` 和 `autocommit_engine` 共享相同的方言和连接池。然而，当从
    `autocommit_engine` 获取连接时，将设置 "AUTOCOMMIT" 模式。
- en: The isolation level setting, regardless of which one it is, is unconditionally
    reverted when a connection is returned to the connection pool.
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: 无论隔离级别设置是哪一个，在连接返回到连接池时都会无条件地恢复。
- en: See also
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[SQLite Transaction Isolation](../dialects/sqlite.html#sqlite-isolation-level)'
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLite 事务隔离](../dialects/sqlite.html#sqlite-isolation-level)'
- en: '[PostgreSQL Transaction Isolation](../dialects/postgresql.html#postgresql-isolation-level)'
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 事务隔离](../dialects/postgresql.html#postgresql-isolation-level)'
- en: '[MySQL Transaction Isolation](../dialects/mysql.html#mysql-isolation-level)'
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: '[MySQL 事务隔离](../dialects/mysql.html#mysql-isolation-level)'
- en: '[SQL Server Transaction Isolation](../dialects/mssql.html#mssql-isolation-level)'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL Server 事务隔离](../dialects/mssql.html#mssql-isolation-level)'
- en: '[Oracle Transaction Isolation](../dialects/oracle.html#oracle-isolation-level)'
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: '[Oracle 事务隔离](../dialects/oracle.html#oracle-isolation-level)'
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - for the ORM'
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - 用于 ORM'
- en: '[Using DBAPI Autocommit Allows for a Readonly Version of Transparent Reconnect](../faq/connections.html#faq-execute-retry-autocommit)
    - a recipe that uses DBAPI autocommit to transparently reconnect to the database
    for read-only operations'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 DBAPI 自动提交允许用于只读版本的透明重新连接](../faq/connections.html#faq-execute-retry-autocommit)
    - 一个使用 DBAPI 自动提交来透明地重新连接到数据库进行只读操作的示例'
- en: '### Understanding the DBAPI-Level Autocommit Isolation Level'
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: '### 理解 DBAPI 级别的自动提交隔离级别'
- en: In the parent section, we introduced the concept of the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter and how it can be
    used to set database isolation levels, including DBAPI-level “autocommit” which
    is treated by SQLAlchemy as another transaction isolation level. In this section
    we will attempt to clarify the implications of this approach.
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数的概念以及如何使用它来设置数据库隔离级别，包括由SQLAlchemy视为另一种事务隔离级别的DBAPI级别“自动提交”。在本节中，我们将尝试澄清这种方法的含义。
- en: 'If we wanted to check out a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object and use it “autocommit” mode, we would proceed as follows:'
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要检查一个[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象并将其用于“自动提交”模式，我们将按如下步骤进行：
- en: '[PRE334]'
  id: totrans-1861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Above illustrates normal usage of “DBAPI autocommit” mode. There is no need
    to make use of methods such as [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") or [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit"), as all statements are committed to the
    database immediately. When the block ends, the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will revert the “autocommit” isolation
    level, and the DBAPI connection is released to the connection pool where the DBAPI
    `connection.rollback()` method will normally be invoked, but as the above statements
    were already committed, this rollback has no change on the state of the database.
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: 上面说明了“DBAPI自动提交”模式的正常用法。无需使用诸如[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")或[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")等方法，因为所有语句都会立即提交到数据库。当块结束时，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象将恢复“自动提交”隔离级别，并且DBAPI连接被释放到连接池，其中DBAPI `connection.rollback()`方法通常会被调用，但由于上述语句已经提交，此回滚对数据库状态没有任何更改。
- en: It is important to note that “autocommit” mode persists even when the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called; the DBAPI will not emit
    any BEGIN to the database, nor will it emit COMMIT when [`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") is called. This usage is also not an error
    scenario, as it is expected that the “autocommit” isolation level may be applied
    to code that otherwise was written assuming a transactional context; the “isolation
    level” is, after all, a configurational detail of the transaction itself just
    like any other isolation level.
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，“自动提交”模式在调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法时仍然持续存在；DBAPI不会向数据库发出任何BEGIN，也不会在调用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")时发出COMMIT。这种用法也不是错误场景，因为预期可能会将“自动提交”隔离级别应用于原本假定了事务上下文的代码；毕竟，“隔离级别”本身就像任何其他隔离级别一样，是事务本身的配置细节。
- en: 'In the example below, statements remain **autocommitting** regardless of SQLAlchemy-level
    transaction blocks:'
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，语句仍然**自动提交**，而不管SQLAlchemy级别的事务块如何：
- en: '[PRE335]'
  id: totrans-1865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'When we run a block like the above with logging turned on, the logging will
    attempt to indicate that while a DBAPI level `.commit()` is called, it probably
    will have no effect due to autocommit mode:'
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们像上面那样带有日志记录的运行一个块时，日志记录将尝试指出，虽然调用了DBAPI级别的`.commit()`，但由于自动提交模式，它可能不会产生任何效果：
- en: '[PRE336]'
  id: totrans-1867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: 'At the same time, even though we are using “DBAPI autocommit”, SQLAlchemy’s
    transactional semantics, that is, the in-Python behavior of [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") as well as the behavior of “autobegin”,
    **remain in place, even though these don’t impact the DBAPI connection itself**.
    To illustrate, the code below will raise an error, as [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") is being called after autobegin has already
    occurred:'
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，即使我们使用了“DBAPI自动提交”，SQLAlchemy的事务语义，即[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")的Python内部行为以及“autobegin”的行为**仍然存在，即使这些行为不影响DBAPI连接本身**。为了说明，下面的代码将引发错误，因为在自动开始已经发生后调用了[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")：
- en: '[PRE337]'
  id: totrans-1869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: The above example also demonstrates the same theme that the “autocommit” isolation
    level is a configurational detail of the underlying database transaction, and
    is independent of the begin/commit behavior of the SQLAlchemy Connection object.
    The “autocommit” mode will not interact with [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") in any way and the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") does not consult this status when performing its
    own state changes with regards to the transaction (with the exception of suggesting
    within engine logging that these blocks are not actually committing). The rationale
    for this design is to maintain a completely consistent usage pattern with the
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") where
    DBAPI-autocommit mode can be changed independently without indicating any code
    changes elsewhere.
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子还演示了相同的主题，即“自动提交”隔离级别是底层数据库事务的配置细节，与SQLAlchemy连接对象的begin/commit行为无关。 “自动提交”模式不会以任何方式与[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")交互，且[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")在执行自身与事务相关的状态更改时不会查询此状态（除了在引擎日志中建议这些块实际上并未提交之外）。这种设计的理由是保持与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")完全一致的使用模式，其中DBAPI自动提交模式可以独立更改，而无需指示其他位置的代码更改。
- en: Changing Between Isolation Levels
  id: totrans-1871
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在不同隔离级别之间切换
- en: Isolation level settings, including autocommit mode, are reset automatically
    when the connection is released back to the connection pool. Therefore it is preferable
    to avoid trying to switch isolation levels on a single [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object as this leads to excess verbosity.
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离级别设置，包括自动提交模式，在连接释放回连接池时会自动重置。因此，最好避免尝试在单个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象上切换隔离级别，因为这会导致冗余的繁琐。
- en: 'To illustrate how to use “autocommit” in an ad-hoc mode within the scope of
    a single [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    checkout, the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter must be re-applied
    with the previous isolation level. The previous section illustrated an attempt
    to call [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    in order to start a transaction while autocommit was taking place; we can rewrite
    that example to actually do so by first reverting the isolation level before we
    call upon [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin"):'
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明如何在单个[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")检出的范围内以即时模式使用“自动提交”，必须重新应用[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数以恢复先前的隔离级别。前一节演示了在自动提交进行时调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")以启动事务的尝试；我们可以通过在调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")之前先恢复隔离级别来重写该示例，以实际执行：
- en: '[PRE338]'
  id: totrans-1874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: Above, to manually revert the isolation level we made use of [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") to restore the default
    isolation level (assuming that’s what we want here). However, it’s probably a
    better idea to work with the architecture of of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") which already handles resetting of isolation level
    automatically upon checkin. The **preferred** way to write the above is to use
    two blocks
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，为了手动恢复隔离级别，我们使用[`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level")来恢复默认的隔离级别（假设这是我们想要的）。然而，最好的做法可能是利用[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的架构，该架构已经在检查时自动处理了隔离级别的重置。上述写法的**首选**方式是使用两个块。
- en: '[PRE339]'
  id: totrans-1876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: 'To sum up:'
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下：
- en: “DBAPI level autocommit” isolation level is entirely independent of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object’s notion of “begin” and “commit”
  id: totrans-1878
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “DBAPI级别的自动提交”隔离级别完全独立于[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象对“begin”和“commit”的概念。
- en: use individual [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    checkouts per isolation level. Avoid trying to change back and forth between “autocommit”
    on a single connection checkout; let the engine do the work of restoring default
    isolation levels
  id: totrans-1879
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用每个隔离级别的单独 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    检出。避免在单个连接检出上来回切换“自动提交”；让引擎来恢复默认的隔离级别。
- en: Changing Between Isolation Levels
  id: totrans-1880
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在不同隔离级别之间切换
- en: Isolation level settings, including autocommit mode, are reset automatically
    when the connection is released back to the connection pool. Therefore it is preferable
    to avoid trying to switch isolation levels on a single [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object as this leads to excess verbosity.
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离级别设置，包括自动提交模式，在连接释放回连接池时会自动重置。因此，最好避免尝试在单个 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象上切换隔离级别，因为这会导致过多的冗余。
- en: 'To illustrate how to use “autocommit” in an ad-hoc mode within the scope of
    a single [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    checkout, the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter must be re-applied
    with the previous isolation level. The previous section illustrated an attempt
    to call [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    in order to start a transaction while autocommit was taking place; we can rewrite
    that example to actually do so by first reverting the isolation level before we
    call upon [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin"):'
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明如何在单个 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    检出的范围内以临时模式使用“自动提交”，必须重新应用 [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数以前的隔离级别。上一节演示了在自动提交进行时调用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 来启动事务的尝试；我们可以通过在调用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 之前首先恢复隔离级别来重写该示例：
- en: '[PRE340]'
  id: totrans-1883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: Above, to manually revert the isolation level we made use of [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") to restore the default
    isolation level (assuming that’s what we want here). However, it’s probably a
    better idea to work with the architecture of of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") which already handles resetting of isolation level
    automatically upon checkin. The **preferred** way to write the above is to use
    two blocks
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，在手动恢复隔离级别时，我们使用了 [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") 来恢复默认的隔离级别（假设这是我们想要的）。然而，更好的做法可能是利用
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 的架构，该架构已经在检入时自动处理重置隔离级别。上述写法的**首选**方式是使用两个代码块。
- en: '[PRE341]'
  id: totrans-1885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: 'To sum up:'
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下：
- en: “DBAPI level autocommit” isolation level is entirely independent of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object’s notion of “begin” and “commit”
  id: totrans-1887
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “DBAPI级别自动提交”隔离级别完全独立于 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象的“开始”和“提交”概念。
- en: use individual [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    checkouts per isolation level. Avoid trying to change back and forth between “autocommit”
    on a single connection checkout; let the engine do the work of restoring default
    isolation levels
  id: totrans-1888
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用每个隔离级别的单独 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    检出。避免在单个连接检出上来回切换“自动提交”；让引擎来恢复默认的隔离级别。
- en: '## Using Server Side Cursors (a.k.a. stream results)'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用服务器端游标（又名流式结果）'
- en: Some backends feature explicit support for the concept of “server side cursors”
    versus “client side cursors”. A client side cursor here means that the database
    driver fully fetches all rows from a result set into memory before returning from
    a statement execution. Drivers such as those of PostgreSQL and MySQL/MariaDB generally
    use client side cursors by default. A server side cursor, by contrast, indicates
    that result rows remain pending within the database server’s state as result rows
    are consumed by the client. The drivers for Oracle generally use a “server side”
    model, for example, and the SQLite dialect, while not using a real “client / server”
    architecture, still uses an unbuffered result fetching approach that will leave
    result rows outside of process memory before they are consumed.
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: 一些后端提供对“服务器端游标”与“客户端游标”的概念的明确支持。这里的客户端游标意味着数据库驱动程序在从语句执行返回之前完全将所有行从结果集中获取到内存中。例如，像
    PostgreSQL 和 MySQL/MariaDB 这样的驱动程序通常默认使用客户端游标。相比之下，服务器端游标表示结果行在客户端消耗时保留在数据库服务器的状态中。例如，Oracle
    的驱动程序通常使用“服务器端”模型，而 SQLite 方言虽然不使用真正的“客户端/服务器”架构，但仍使用一种未缓冲的结果获取方法，将结果行保留在进程内存之外，直到它们被消耗。
- en: From this basic architecture it follows that a “server side cursor” is more
    memory efficient when fetching very large result sets, while at the same time
    may introduce more complexity in the client/server communication process and be
    less efficient for small result sets (typically less than 10000 rows).
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个基本架构可以得出，“服务器端游标”在获取非常大的结果集时更加内存高效，同时可能会在客户端/服务器通信过程中引入更多复杂性，并且对于小的结果集（通常少于
    10000 行）效率更低。
- en: For those dialects that have conditional support for buffered or unbuffered
    results, there are usually caveats to the use of the “unbuffered”, or server side
    cursor mode. When using the psycopg2 dialect for example, an error is raised if
    a server side cursor is used with any kind of DML or DDL statement. When using
    MySQL drivers with a server side cursor, the DBAPI connection is in a more fragile
    state and does not recover as gracefully from error conditions nor will it allow
    a rollback to proceed until the cursor is fully closed.
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些有条件支持缓冲或未缓冲结果的方言，通常使用“未缓冲”或服务器端游标模式时会有注意事项。例如，当使用 psycopg2 方言时，如果使用服务器端游标与任何类型的
    DML 或 DDL 语句，则会引发错误。当使用带有服务器端游标的 MySQL 驱动程序时，DBAPI 连接处于更脆弱的状态，并且不会像从容处理错误条件那样优雅，也不会允许回滚操作继续进行，直到游标完全关闭。
- en: For this reason, SQLAlchemy’s dialects will always default to the less error
    prone version of a cursor, which means for PostgreSQL and MySQL dialects it defaults
    to a buffered, “client side” cursor where the full set of results is pulled into
    memory before any fetch methods are called from the cursor. This mode of operation
    is appropriate in the **vast majority** of cases; unbuffered cursors are not generally
    useful except in the uncommon case of an application fetching a very large number
    of rows in chunks, where the processing of these rows can be complete before more
    rows are fetched.
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，SQLAlchemy 的方言总是默认为游标的较少错误版本，这意味着对于 PostgreSQL 和 MySQL 方言，默认情况下使用缓冲的“客户端”游标，在调用游标的任何获取方法之前将结果集完全拉入内存。这种操作模式在**绝大多数**情况下都是适当的；未缓冲的游标通常除了在应用程序以分块方式获取非常大量的行的罕见情况下，此类行的处理可以在获取更多行之前完成之外，一般没有用处。
- en: For database drivers that provide client and server side cursor options, the
    [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution options provide access
    to “server side cursors” on a per-[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or per-statement basis. Similar options exist
    when using an ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as well.
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: 对于提供客户端和服务器端游标选项的数据库驱动程序，[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 和 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项提供了在每个 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或每个语句基础上访问“服务器端游标”的能力。在使用 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 时也存在类似的选项。
- en: Streaming with a fixed buffer via yield_per
  id: totrans-1895
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 yield_per 进行固定缓冲的流式处理
- en: As individual row-fetch operations with fully unbuffered server side cursors
    are typically more expensive than fetching batches of rows at once, The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option configures
    a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or statement to make use of server-side cursors as are available, while at the
    same time configuring a fixed-size buffer of rows that will retrieve rows from
    the server in batches as they are consumed. This parameter may be to a positive
    integer value using the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method on [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or on a statement using the [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method.
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单独的行提取操作使用完全未缓冲的服务器端游标通常比一次提取多行的批次更昂贵，[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项配置了一个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或语句以使用可用的服务器端游标，同时配置了一个固定大小的行缓冲区，该缓冲区将在消耗时按批次从服务器检索行。使用[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法在[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上或在语句上使用[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法可以将此参数设置为正整数值。
- en: 'New in version 1.4.40: [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") as a Core-only option is new
    as of SQLAlchemy 1.4.40; for prior 1.4 versions, use [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") directly in combination with
    [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per").'
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4.40版本开始新增：[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")作为一个仅限核心的选项是自SQLAlchemy 1.4.40版本开始新增的；对于先前的1.4版本，请直接使用[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")与[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法的组合。
- en: 'Using this option is equivalent to manually setting the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option, described in the next
    section, and then invoking the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object with the given integer value. In both cases,
    the effect this combination has includes:'
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项相当于手动设置[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")选项，该选项在下一节中描述，并在给定整数值的情况下调用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法。在这两种情况下，这种组合的效果包括：
- en: server side cursors mode is selected for the given backend, if available and
    not already the default behavior for that backend
  id: totrans-1899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可用且尚未是该后端的默认行为，则为给定后端选择了服务器端游标模式。
- en: as result rows are fetched, they will be buffered in batches, where the size
    of each batch up until the last batch will be equal to the integer argument passed
    to the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option or the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method; the last batch is then sized against
    the remaining rows fewer than this size
  id: totrans-1900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当结果行被获取时，它们将被分批缓冲，直到最后一批，每个批次的大小将等于传递给[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")选项或[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法的整数参数；然后最后一批会根据剩余行数小于此大小来确定大小。
- en: The default partition size used by the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, if used, will be made equal to
    this integer size as well.
  id: totrans-1901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")方法，默认使用的分区大小将与此整数大小相等。
- en: 'These three behaviors are illustrated in the example below:'
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了这三种行为：
- en: '[PRE342]'
  id: totrans-1903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: The above example illustrates the combination of `yield_per=100` along with
    using the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method to run processing on rows in batches that match the size fetched from the
    server. The use of [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") is optional, and if the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") is iterated directly, a new batch of rows will be
    buffered for each 100 rows fetched. Calling a method such as [`Result.all()`](#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") should **not** be used, as this will fully fetch
    all remaining rows at once and defeat the purpose of using `yield_per`.
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例说明了将 `yield_per=100` 与使用 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") 方法结合起来，在与从服务器获取的大小相匹配的批次中处理行。使用 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") 是可选的，如果直接迭代 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")，将为每获取 100 行新建一个行批次缓冲区。不应使用诸如 [`Result.all()`](#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") 的方法，因为这会一次性获取所有剩余的行，并且会使使用 `yield_per` 的目的丧失。
- en: Tip
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    may be used as a context manager as illustrated above. When iterating with a server-side
    cursor, this is the best way to ensure the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is closed, even if exceptions are raised within
    the iteration process.
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象可以用作上下文管理器。当使用服务器端游标进行迭代时，这是确保
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象关闭的最佳方法，即使在迭代过程中发生异常也是如此。
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option is portable to the ORM
    as well, used by a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to fetch ORM objects, where it also limits the amount
    of ORM objects generated at once. See the section [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per) - in the
    [ORM Querying Guide](../orm/queryguide/index.html) for further background on using
    [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") with the ORM.
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 选项同样适用于 ORM，由 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 使用以获取 ORM 对象，在这里它还限制了一次生成的 ORM 对象的数量。有关使用 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 与 ORM 的进一步背景，请参阅 [ORM 查询指南](../orm/queryguide/index.html)
    中的 [使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    部分。'
- en: 'New in version 1.4.40: Added [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") as a Core level execution option
    to conveniently set streaming results, buffer size, and partition size all at
    once in a manner that is transferrable to that of the ORM’s similar use case.'
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.40 中新增了 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 作为核心级执行选项，方便设置流式结果、缓冲区大小和分区大小，以一种可转移至
    ORM 的类似用例方式进行设置。
- en: '### Streaming with a dynamically growing buffer using stream_results'
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 stream_results 实现动态增长缓冲区进行流式处理'
- en: To enable server side cursors without a specific partition size, the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option may be used, which like
    [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") may be called on the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object or the statement object.
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
  zh: 要在没有特定分区大小的情况下启用服务器端游标，可以使用[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")选项，类似于[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")，可以在[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象或语句对象上调用。
- en: 'When a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    delivered using the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option is iterated directly,
    rows are fetched internally using a default buffering scheme that buffers first
    a small set of rows, then a larger and larger buffer on each fetch up to a pre-configured
    limit of 1000 rows. The maximum size of this buffer can be affected using the
    [`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") execution option:'
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")选项直接迭代传递的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象时，内部使用默认的缓冲方案来获取行，首先缓冲一小组行，然后在每次获取时缓冲越来越大的缓冲区，直到预先配置的1000行的限制。可以使用[`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options")执行选项来影响此缓冲区的最大大小：
- en: '[PRE343]'
  id: totrans-1912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: While the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option may be combined with
    use of the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method, a specific partition size should be passed to [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") so that the entire result is not fetched.
    It is usually more straightforward to use the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option when setting up to use
    the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method.
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")选项与[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法结合时，应该向[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")传递特定的分区大小，以避免获取整个结果集。设置使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法时，通常更直接的方法是使用[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")选项。
- en: See also
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用Yield Per获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per) -
    在[ORM查询指南](../orm/queryguide/index.html)中'
- en: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
- en: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")'
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")'
- en: Streaming with a fixed buffer via yield_per
  id: totrans-1918
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过yield_per使用固定缓冲区进行流式传输
- en: As individual row-fetch operations with fully unbuffered server side cursors
    are typically more expensive than fetching batches of rows at once, The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option configures
    a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or statement to make use of server-side cursors as are available, while at the
    same time configuring a fixed-size buffer of rows that will retrieve rows from
    the server in batches as they are consumed. This parameter may be to a positive
    integer value using the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method on [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or on a statement using the [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method.
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单独的行获取操作与完全无缓冲的服务器端游标通常比一次获取多行的批次更昂贵，[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项配置[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或语句以利用服务器端可用的游标，同时配置一定大小的行缓冲区，以批次方式从服务器检索行，因为它们被使用。这个参数可以使用[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法设置为正整数值，也可以在语句上使用[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法设置。
- en: 'New in version 1.4.40: [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") as a Core-only option is new
    as of SQLAlchemy 1.4.40; for prior 1.4 versions, use [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") directly in combination with
    [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per").'
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.40 中新增：[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")作为一个仅限于核心的选项是 SQLAlchemy 1.4.40
    中的新功能；对于先前的 1.4 版本，请直接使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 与 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 结合使用。
- en: 'Using this option is equivalent to manually setting the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option, described in the next
    section, and then invoking the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object with the given integer value. In both cases,
    the effect this combination has includes:'
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项等效于手动设置下一节中描述的[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")选项，然后在给定的整数值上调用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法。在这两种情况下，此组合的效果包括：
- en: server side cursors mode is selected for the given backend, if available and
    not already the default behavior for that backend
  id: totrans-1922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可用且尚未是该后端的默认行为，则为给定后端选择服务器端游标模式
- en: as result rows are fetched, they will be buffered in batches, where the size
    of each batch up until the last batch will be equal to the integer argument passed
    to the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option or the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method; the last batch is then sized against
    the remaining rows fewer than this size
  id: totrans-1923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当结果行被获取时，它们将被分批缓冲，每个批次的大小直到最后一个批次将等于传递给[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")选项或[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法的整数参数；然后最后一个批次根据少于这个大小的剩余行大小进行调整
- en: The default partition size used by the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, if used, will be made equal to
    this integer size as well.
  id: totrans-1924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")方法，则默认分区大小也将设置为此整数大小。
- en: 'These three behaviors are illustrated in the example below:'
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种行为如下示例所示：
- en: '[PRE344]'
  id: totrans-1926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: The above example illustrates the combination of `yield_per=100` along with
    using the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method to run processing on rows in batches that match the size fetched from the
    server. The use of [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") is optional, and if the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") is iterated directly, a new batch of rows will be
    buffered for each 100 rows fetched. Calling a method such as [`Result.all()`](#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") should **not** be used, as this will fully fetch
    all remaining rows at once and defeat the purpose of using `yield_per`.
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例说明了使用`yield_per=100`与使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法一起以批量处理与从服务器获取的大小匹配的行的组合。使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")是可选的，如果直接迭代[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")，则每100行获取一次新的行批量。不应使用诸如[`Result.all()`](#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all")之类的方法，因为这将一次性完全获取所有剩余的行，从而使使用`yield_per`的目的失效。
- en: Tip
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    may be used as a context manager as illustrated above. When iterating with a server-side
    cursor, this is the best way to ensure the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is closed, even if exceptions are raised within
    the iteration process.
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象可以像上面示例的那样用作上下文管理器。当使用服务器端游标进行迭代时，这是确保[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象关闭的最佳方法，即使在迭代过程中引发异常。'
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option is portable to the ORM
    as well, used by a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to fetch ORM objects, where it also limits the amount
    of ORM objects generated at once. See the section [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per) - in the
    [ORM Querying Guide](../orm/queryguide/index.html) for further background on using
    [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") with the ORM.
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")选项也可移植到ORM，由[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")用于获取ORM对象，在这里它还限制了一次生成的ORM对象的数量。有关在ORM中使用[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")的更多背景信息，请参阅[使用Yield Per获取大结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - [ORM查询指南](../orm/queryguide/index.html)中的相应部分。'
- en: 'New in version 1.4.40: Added [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") as a Core level execution option
    to conveniently set streaming results, buffer size, and partition size all at
    once in a manner that is transferrable to that of the ORM’s similar use case.'
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.40中新增了[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")作为核心级别的执行选项，可以方便地设置流式结果、缓冲区大小和分区大小，一次性完成，以便与ORM的类似用例相匹配。
- en: '### Streaming with a dynamically growing buffer using stream_results'
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用stream_results进行动态增长缓冲区的流式传输'
- en: To enable server side cursors without a specific partition size, the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option may be used, which like
    [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") may be called on the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object or the statement object.
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
  zh: 要在没有特定分区大小的情况下启用服务器端游标，可以使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 选项，这与 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 相似，可以在 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象或语句对象上调用。
- en: 'When a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    delivered using the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option is iterated directly,
    rows are fetched internally using a default buffering scheme that buffers first
    a small set of rows, then a larger and larger buffer on each fetch up to a pre-configured
    limit of 1000 rows. The maximum size of this buffer can be affected using the
    [`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") execution option:'
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 选项直接迭代生成的 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象时，内部使用默认的缓冲方案来获取行，该方案首先缓冲少量行，然后在每次获取时缓冲越来越多的行，直到预先配置的
    1000 行的限制。可以使用 [`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") 执行选项来影响此缓冲区的最大大小：
- en: '[PRE345]'
  id: totrans-1935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: While the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") option may be combined with
    use of the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method, a specific partition size should be passed to [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") so that the entire result is not fetched.
    It is usually more straightforward to use the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") option when setting up to use
    the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    method.
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 选项与 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") 方法结合使用时，应向 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") 传递特定的分区大小，以避免获取整个结果集。通常，使用 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 选项设置使用 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") 方法会更为直接。
- en: See also
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
- en: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")'
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")'
- en: '## Translation of Schema Names'
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
  zh: '## 模式名称的翻译'
- en: To support multi-tenancy applications that distribute common sets of tables
    into multiple schemas, the [`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") execution option may be used
    to repurpose a set of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects to render under different schema names without any changes.
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持将共享的表集分布到多个模式的多租户应用程序，可以使用 [`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") 执行选项将一组 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象重新用不同的模式名称渲染，而不需要进行任何更改。
- en: 'Given a table:'
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一张表：
- en: '[PRE346]'
  id: totrans-1944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: 'The “schema” of this [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    as defined by the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") attribute is `None`. The [`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") can specify that all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects with a schema of `None` would instead render
    the schema as `user_schema_one`:'
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的“模式”由 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    属性定义为 `None`。[`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") 可以指定所有模式为 `None` 的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象应将模式渲染为 `user_schema_one`：
- en: '[PRE347]'
  id: totrans-1946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'The above code will invoke SQL on the database of the form:'
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将在数据库上调用以下形式的 SQL：
- en: '[PRE348]'
  id: totrans-1948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: 'That is, the schema name is substituted with our translated name. The map can
    specify any number of target->destination schemas:'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，模式名称被替换为我们翻译过的名称。映射可以指定任意数量的目标->目的地模式：
- en: '[PRE349]'
  id: totrans-1950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: The [`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") parameter affects all DDL and
    SQL constructs generated from the SQL expression language, as derived from the
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") or
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    objects. It does **not** impact literal string SQL used via the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct nor via plain strings passed to [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") 参数影响从 SQL 表达语言生成的所有 DDL 和 SQL
    构造，这些构造是从 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    或 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象派生而来的。它 **不会** 影响通过 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造使用的文本字符串 SQL，也不会影响传递给 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的普通字符串。'
- en: The feature takes effect **only** in those cases where the name of the schema
    is derived directly from that of a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"); it does not impact methods where a string schema
    name is passed directly. By this pattern, it takes effect within the “can create”
    / “can drop” checks performed by methods such as [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") or [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") are called, and it takes effect when using
    table reflection given a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. However it does **not** affect the operations present on the [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object, as the schema name is passed
    to these methods explicitly.
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能**仅在**模式的名称直接从[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    或 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    派生的情况下生效；它不影响直接传递字符串模式名称的方法。根据此模式，在调用诸如[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 或 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 等方法执行的“可以创建”/“可以删除”检查中生效，并且在使用给定 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的表反射时生效。然而，它**不会**影响[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 对象上存在的操作，因为模式名称是显式传递给这些方法的。
- en: Tip
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'To use the schema translation feature with the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), set this option at the level of the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), then pass that engine to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") uses a new [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") for each transaction:'
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    中使用模式转换功能，请将此选项设置在[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的级别上，然后将该引擎传递给 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 为每个事务使用一个新的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")：
- en: '[PRE350]'
  id: totrans-1955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: Warning
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") without extensions, the schema translate feature is
    only supported as **a single schema translate map per Session**. It will **not
    work** if different schema translate maps are given on a per-statement basis,
    as the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    does not take current schema translate values into account for individual objects.
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
  zh: 当在没有扩展的情况下使用 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 时，仅支持**每个 Session 一个单一的模式转换映射**。如果在每个语句的基础上给出了不同的模式转换映射，则**不会生效**，因为
    ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    不会考虑当前模式转换值对各个对象的影响。
- en: To use a single [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with multiple `schema_translate_map` configurations, the [Horizontal Sharding](../orm/extensions/horizontal_shard.html)
    extension may be used. See the example at [Horizontal Sharding](../orm/examples.html#examples-sharding).
  id: totrans-1958
  prefs: []
  type: TYPE_NORMAL
  zh: 要在多个 `schema_translate_map` 配置中使用单个 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，可以使用[水平分片](../orm/extensions/horizontal_shard.html)扩展。请参阅[水平分片](../orm/examples.html#examples-sharding)中的示例。
- en: '## SQL Compilation Caching'
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
  zh: '## SQL 编译缓存'
- en: 'New in version 1.4: SQLAlchemy now has a transparent query caching system that
    substantially lowers the Python computational overhead involved in converting
    SQL statement constructs into SQL strings across both Core and ORM. See the introduction
    at [Transparent SQL Compilation Caching added to All DQL, DML Statements in Core,
    ORM](../changelog/migration_14.html#change-4639).'
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：SQLAlchemy 现在具有一个透明的查询缓存系统，大大降低了将 SQL 语句结构转换为 SQL 字符串时涉及的 Python
    计算开销，包括 Core 和 ORM。请参阅[透明 SQL 编译缓存添加到 Core、ORM 中的所有 DQL、DML 语句的介绍](../changelog/migration_14.html#change-4639)。
- en: 'SQLAlchemy includes a comprehensive caching system for the SQL compiler as
    well as its ORM variants. This caching system is transparent within the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and provides that the SQL compilation process for
    a given Core or ORM SQL statement, as well as related computations which assemble
    result-fetching mechanics for that statement, will only occur once for that statement
    object and all others with the identical structure, for the duration that the
    particular structure remains within the engine’s “compiled cache”. By “statement
    objects that have the identical structure”, this generally corresponds to a SQL
    statement that is constructed within a function and is built each time that function
    runs:'
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy包括一个全面的缓存系统，用于SQL编译器及其ORM变体。此缓存系统在[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")中是透明的，并且提供了对于给定的Core或ORM SQL语句的SQL编译过程以及为该语句组装结果获取机制的相关计算，只会对该语句对象及所有具有相同结构的其他语句执行一次，只要特定结构在引擎的“编译缓存”中保持。关于“具有相同结构的语句对象”，这通常对应于在函数内构造的SQL语句，每次运行该函数时都会构建：
- en: '[PRE351]'
  id: totrans-1962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: The above statement will generate SQL resembling `SELECT id, col FROM table
    WHERE col = :col ORDER BY id`, noting that while the value of `parameter` is a
    plain Python object such as a string or an integer, the string SQL form of the
    statement does not include this value as it uses bound parameters. Subsequent
    invocations of the above `run_my_statement()` function will use a cached compilation
    construct within the scope of the `connection.execute()` call for enhanced performance.
  id: totrans-1963
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将生成类似于`SELECT id, col FROM table WHERE col = :col ORDER BY id`的SQL语句，注意，虽然`parameter`的值是一个普通的Python对象，比如一个字符串或一个整数，但是语句的字符串SQL形式不包括此值，因为它使用了绑定参数。上述`run_my_statement()`函数的后续调用将在`connection.execute()`调用的范围内使用缓存的编译构造以提高性能。
- en: Note
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: it is important to note that the SQL compilation cache is caching the **SQL
    string that is passed to the database only**, and **not the data** returned by
    a query. It is in no way a data cache and does not impact the results returned
    for a particular SQL statement nor does it imply any memory use linked to fetching
    of result rows.
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，SQL编译缓存仅缓存传递给数据库的**SQL字符串**，而不是查询返回的数据。它绝不是数据缓存，也不会影响特定SQL语句返回的结果，也不会暗示与结果行提取相关联的任何内存使用。
- en: While SQLAlchemy has had a rudimentary statement cache since the early 1.x series,
    and additionally has featured the “Baked Query” extension for the ORM, both of
    these systems required a high degree of special API use in order for the cache
    to be effective. The new cache as of 1.4 is instead completely automatic and requires
    no change in programming style to be effective.
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SQLAlchemy自1.x系列早期就有了一个基本的语句缓存，并且此外还提供了ORM的“烘焙查询”扩展，但这两个系统都需要高度特殊的API使用，以便缓存起作用。自1.4版本以来的新缓存完全是自动的，不需要更改编程风格即可生效。
- en: The cache is automatically used without any configurational changes and no special
    steps are needed in order to enable it. The following sections detail the configuration
    and advanced usage patterns for the cache.
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是自动使用的，无需进行任何配置更改，也不需要任何特殊步骤来启用它。以下部分详细介绍了缓存的配置和高级使用模式。
- en: Configuration
  id: totrans-1968
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置
- en: 'The cache itself is a dictionary-like object called an `LRUCache`, which is
    an internal SQLAlchemy dictionary subclass that tracks the usage of particular
    keys and features a periodic “pruning” step which removes the least recently used
    items when the size of the cache reaches a certain threshold. The size of this
    cache defaults to 500 and may be configured using the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") parameter:'
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存本身是一个类似字典的对象，称为`LRUCache`，它是一个内部SQLAlchemy字典子类，跟踪特定键的使用情况，并具有定期的“修剪”步骤，当缓存的大小达到一定阈值时会删除最近未使用的项目。此缓存的大小默认为500，可以使用[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")参数进行配置：
- en: '[PRE352]'
  id: totrans-1970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: The size of the cache can grow to be a factor of 150% of the size given, before
    it’s pruned back down to the target size. A cache of size 1200 above can therefore
    grow to be 1800 elements in size at which point it will be pruned to 1200.
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存的大小可以增长到给定大小的150%左右，然后将其修剪回目标大小。因此，大小为1200的缓存可以增长到1800个元素的大小，然后将其修剪回1200。
- en: The sizing of the cache is based on a single entry per unique SQL statement
    rendered, per engine. SQL statements generated from both the Core and the ORM
    are treated equally. DDL statements will usually not be cached. In order to determine
    what the cache is doing, engine logging will include details about the cache’s
    behavior, described in the next section.
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存的大小基于每个唯一 SQL 语句渲染的单个条目，每个引擎。从 Core 和 ORM 生成的 SQL 语句被等同对待。DDL 语句通常不会被缓存。为了确定缓存正在做什么，引擎日志将包含有关缓存行为的详细信息，下一节描述了此信息。
- en: '### Estimating Cache Performance Using Logging'
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用日志估算缓存性能'
- en: The above cache size of 1200 is actually fairly large. For small applications,
    a size of 100 is likely sufficient. To estimate the optimal size of the cache,
    assuming enough memory is present on the target host, the size of the cache should
    be based on the number of unique SQL strings that may be rendered for the target
    engine in use. The most expedient way to see this is to use SQL echoing, which
    is most directly enabled by using the [`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") flag, or by using Python logging; see the section
    [Configuring Logging](engines.html#dbengine-logging) for background on logging
    configuration.
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: 上述缓存大小为 1200 实际上是相当大的。对于小型应用程序，大小为 100 可能足够。要估算缓存的最佳大小，假设目标主机上有足够的内存，缓存的大小应基于在使用中的目标引擎中可以呈现的唯一
    SQL 字符串的数量。最快速的方法是使用 SQL 回显，最直接的方法是使用[`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 标志启用，或者使用 Python 日志记录；有关日志记录配置的背景，请参阅[配置日志记录](engines.html#dbengine-logging)
    部分。
- en: 'As an example, we will examine the logging produced by the following program:'
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将检查以下程序产生的日志记录：
- en: '[PRE353]'
  id: totrans-1976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: 'When run, each SQL statement that’s logged will include a bracketed cache statistics
    badge to the left of the parameters passed. The four types of message we may see
    are summarized as follows:'
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，每个记录的 SQL 语句将在传递的参数左侧包含一个带方括号的缓存统计徽章。我们可能看到的四种消息类型总结如下：
- en: '`[raw sql]` - the driver or the end-user emitted raw SQL using [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") - caching does not apply'
  id: totrans-1978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[原始 SQL]` - 驱动程序或最终用户使用[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 发出原始 SQL - 不适用缓存'
- en: '`[no key]` - the statement object is a DDL statement that is not cached, or
    the statement object contains uncacheable elements such as user-defined constructs
    or arbitrarily large VALUES clauses.'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[无键]` - 该语句对象是一个不被缓存的 DDL 语句，或者该语句对象包含不可缓存的元素，如用户定义的结构或任意大的 VALUES 子句。'
- en: '`[generated in Xs]` - the statement was a **cache miss** and had to be compiled,
    then stored in the cache. it took X seconds to produce the compiled construct.
    The number X will be in the small fractional seconds.'
  id: totrans-1980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[在 X 秒内生成]` - 该语句是一个**缓存未命中**，必须被编译，然后存储在缓存中。生成编译结构花费了 X 秒。数字 X 将是小数秒数。'
- en: '`[cached since Xs ago]` - the statement was a **cache hit** and did not have
    to be recompiled. The statement has been stored in the cache since X seconds ago.
    The number X will be proportional to how long the application has been running
    and how long the statement has been cached, so for example would be 86400 for
    a 24 hour period.'
  id: totrans-1981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[自 X 秒前缓存]` - 该语句是**缓存命中**，不需要重新编译。该语句已经存储在缓存中自 X 秒前。数字 X 与应用程序运行的时间以及语句被缓存的时间成比例，例如
    24 小时的时间段将是 86400。'
- en: Each badge is described in more detail below.
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
  zh: 下面更详细地描述了每个徽章。
- en: 'The first statements we see for the above program will be the SQLite dialect
    checking for the existence of the “a” and “b” tables:'
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到上面程序的第一个语句将是 SQLite 方言检查 “a” 和 “b” 表的存在：
- en: '[PRE354]'
  id: totrans-1984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: For the above two SQLite PRAGMA statements, the badge reads `[raw sql]`, which
    indicates the driver is sending a Python string directly to the database using
    [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql"). Caching does not apply to such
    statements because they already exist in string form, and there is nothing known
    about what kinds of result rows will be returned since SQLAlchemy does not parse
    SQL strings ahead of time.
  id: totrans-1985
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述两个 SQLite PRAGMA 语句，徽章显示为`[raw sql]`，这表示驱动程序正在使用[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")直接将 Python 字符串发送到数据库。对于这样的语句，缓存不适用，因为它们已经以字符串形式存在，而且由于
    SQLAlchemy 不会提前解析 SQL 字符串，因此不知道将返回什么类型的结果行。
- en: 'The next statements we see are the CREATE TABLE statements:'
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们看到的是 CREATE TABLE 语句：
- en: '[PRE355]'
  id: totrans-1987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: For each of these statements, the badge reads `[no key 0.00006s]`. This indicates
    that these two particular statements, caching did not occur because the DDL-oriented
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct did not produce a cache key. DDL constructs generally do not participate
    in caching because they are not typically subject to being repeated a second time
    and DDL is also a database configurational step where performance is not as critical.
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个语句，徽章显示为`[no key 0.00006s]`。这表示这两个特定语句，由于以 DDL 为导向的[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造未生成缓存键，因此缓存未发生。DDL 构造通常不参与缓存，因为它们通常不会被重复执行，而且
    DDL 也是一个数据库配置步骤，性能并不那么关键。
- en: The `[no key]` badge is important for one other reason, as it can be produced
    for SQL statements that are cacheable except for some particular sub-construct
    that is not currently cacheable. Examples of this include custom user-defined
    SQL elements that don’t define caching parameters, as well as some constructs
    that generate arbitrarily long and non-reproducible SQL strings, the main examples
    being the [`Values`](selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct as well as when using “multivalued inserts” with the [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method.
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
  zh: '`[no key]` 徽章还有一个重要原因，即它可能适用于可缓存的 SQL 语句，除了某些当前不可缓存的特定子构造。这些例子包括未定义缓存参数的自定义用户定义
    SQL 元素，以及生成任意长且不可重现的 SQL 字符串的某些构造，主要示例包括[`Values`](selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values")构造以及使用[`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法进行“多值插入”时。'
- en: 'So far our cache is still empty. The next statements will be cached however,
    a segment looks like:'
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的缓存仍然是空的。然而，接下来的语句将被缓存，一个片段看起来像：
- en: '[PRE356]'
  id: totrans-1991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: Above, we see essentially two unique SQL strings; `"INSERT INTO a (data) VALUES
    (?)"` and `"INSERT INTO b (a_id, data) VALUES (?, ?)"`. Since SQLAlchemy uses
    bound parameters for all literal values, even though these statements are repeated
    many times for different objects, because the parameters are separate, the actual
    SQL string stays the same.
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们看到了两个基本上是唯一的 SQL 字符串；`"INSERT INTO a (data) VALUES (?)"` 和 `"INSERT INTO
    b (a_id, data) VALUES (?, ?)"`。由于 SQLAlchemy 对所有文字值使用绑定参数，即使这些语句为不同对象重复多次，由于参数是分开的，实际的
    SQL 字符串保持不变。
- en: Note
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: the above two statements are generated by the ORM unit of work process, and
    in fact will be caching these in a separate cache that is local to each mapper.
    However the mechanics and terminology are the same. The section [Disabling or
    using an alternate dictionary to cache some (or all) statements](#engine-compiled-cache)
    below will describe how user-facing code can also use an alternate caching container
    on a per-statement basis.
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个语句是由 ORM 工作单元流程生成的，并且实际上将这些语句缓存在每个映射器本地的单独缓存中。然而，机制和术语是相同的。下面的部分[禁用或使用替代字典缓存某些（或全部）语句](#engine-compiled-cache)将描述用户代码如何在每个语句基础上使用替代缓存容器。
- en: The caching badge we see for the first occurrence of each of these two statements
    is `[generated in 0.00011s]`. This indicates that the statement was **not in the
    cache, was compiled into a String in .00011s and was then cached**. When we see
    the `[generated]` badge, we know that this means there was a **cache miss**. This
    is to be expected for the first occurrence of a particular statement. However,
    if lots of new `[generated]` badges are observed for a long-running application
    that is generally using the same series of SQL statements over and over, this
    may be a sign that the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") parameter is too small. When a statement that was
    cached is then evicted from the cache due to the LRU cache pruning lesser used
    items, it will display the `[generated]` badge when it is next used.
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在看到这两个语句的第一次出现时看到的缓存徽章是`[生成于 0.00011s]`。这表示该语句**不在缓存中，已在 0.00011s 内编译为字符串，然后被缓存**。当我们看到`[生成]`徽章时，我们知道这意味着发生了**缓存未命中**。这对于特定语句的第一次出现是可以预料的。然而，如果一个长时间运行的应用程序通常一遍又一遍地使用相同的一系列
    SQL 语句，并且观察到大量新的`[生成]`徽章，这可能是[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")参数设置过小的迹象。当一个已被缓存的语句由于 LRU 缓存删除了不常用的项而被逐出缓存时，当它下次被使用时，它将显示`[生成]`徽章。
- en: The caching badge that we then see for the subsequent occurrences of each of
    these two statements looks like `[cached since 0.0003533s ago]`. This indicates
    that the statement **was found in the cache, and was originally placed into the
    cache .0003533 seconds ago**. It is important to note that while the `[generated]`
    and `[cached since]` badges refer to a number of seconds, they mean different
    things; in the case of `[generated]`, the number is a rough timing of how long
    it took to compile the statement, and will be an extremely small amount of time.
    In the case of `[cached since]`, this is the total time that a statement has been
    present in the cache. For an application that’s been running for six hours, this
    number may read `[cached since 21600 seconds ago]`, and that’s a good thing. Seeing
    high numbers for “cached since” is an indication that these statements have not
    been subject to cache misses for a long time. Statements that frequently have
    a low number of “cached since” even if the application has been running a long
    time may indicate these statements are too frequently subject to cache misses,
    and that the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") may need to be increased.
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后看到的每个这两个语句的后续出现的缓存徽章看起来像`[自 0.0003533s 前缓存]`。这表示该语句**在缓存中找到，并且最初放入缓存中 0.0003533
    秒前**。重要的是要注意，虽然`[生成]`和`[自]`徽章都指的是秒数，但它们表示的是不同的含义；对于`[生成]`，数字是编译语句所需的大致时间，并且将是一个极小的时间量。对于`[自]`，这是语句在缓存中存在的总时间。对于运行了六个小时的应用程序，这个数字可能读作`[自
    21600 秒前缓存]`，这是件好事。看到“自”徽章的高数字表明这些语句很长时间没有发生缓存未命中。即使应用程序运行了很长时间，语句经常具有较低的“自”数也可能表明这些语句太频繁地发生缓存未命中，而[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")可能需要增加。
- en: 'Our example program then performs some SELECTs where we can see the same pattern
    of “generated” then “cached”, for the SELECT of the “a” table as well as for subsequent
    lazy loads of the “b” table:'
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例程序然后执行了一些 SELECT，我们可以看到“生成”然后“缓存”的相同模式，对于“a”表的 SELECT 以及“b”表的后续延迟加载：
- en: '[PRE357]'
  id: totrans-1998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: From our above program, a full run shows a total of four distinct SQL strings
    being cached. Which indicates a cache size of **four** would be sufficient. This
    is obviously an extremely small size, and the default size of 500 is fine to be
    left at its default.
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们上面的程序中，完整运行显示一共缓存了四个不同的 SQL 字符串。这表明缓存大小为**四**将是足够的。这显然是一个极小的大小，而默认大小为 500
    是可以保持不变的。
- en: How much memory does the cache use?
  id: totrans-2000
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存使用多少内存？
- en: The previous section detailed some techniques to check if the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") needs to be bigger. How do we know if the cache is
    not too large? The reason we may want to set [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") to not be higher than a certain number would be because
    we have an application that may make use of a very large number of different statements,
    such as an application that is building queries on the fly from a search UX, and
    we don’t want our host to run out of memory if for example, a hundred thousand
    different queries were run in the past 24 hours and they were all cached.
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节详细介绍了一些技术，用于检查[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")是否需要更大。我们如何知道缓存不会太大？我们可能希望将[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")设置为不高于某个数字的原因是，我们可能有一个应用程序，可能会使用非常多不同的语句，比如一个从搜索UX动态构建查询的应用程序，如果过去24小时运行了十万个不同的查询并且它们都被缓存，我们不希望我们的主机内存耗尽。
- en: It is extremely difficult to measure how much memory is occupied by Python data
    structures, however using a process to measure growth in memory via `top` as a
    successive series of 250 new statements are added to the cache suggest a moderate
    Core statement takes up about 12K while a small ORM statement takes about 20K,
    including result-fetching structures which for the ORM will be much greater.
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: 测量Python数据结构占用多少内存是非常困难的，然而，通过使用`top`进程来测量内存增长，当连续添加250个新语句到缓存时，表明一个中等大小的核心语句大约占用12K，而一个小型ORM语句大约占用20K，包括ORM的结果获取结构，对于ORM来说，这将更大。
- en: '### Disabling or using an alternate dictionary to cache some (or all) statements'
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
  zh: '### 禁用或使用备用字典来缓存一些（或全部）语句'
- en: 'The internal cache used is known as `LRUCache`, but this is mostly just a dictionary.
    Any dictionary may be used as a cache for any series of statements by using the
    [`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") option as an execution option.
    Execution options may be set on a statement, on an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    as well as when using the ORM [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method for SQLAlchemy-2.0 style invocations.
    For example, to run a series of SQL statements and have them cached in a particular
    dictionary:'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的内部缓存称为`LRUCache`，但这主要只是一个字典。可以通过使用[`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options")选项作为执行选项，为任何一系列语句使用任何字典作为缓存。执行选项可以在语句上设置，在[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")上设置，以及在使用ORM
    [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")方法进行SQLAlchemy-2.0风格调用时设置。例如，要运行一系列SQL语句并将它们缓存在特定字典中：
- en: '[PRE358]'
  id: totrans-2005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: The SQLAlchemy ORM uses the above technique to hold onto per-mapper caches within
    the unit of work “flush” process that are separate from the default cache configured
    on the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"), as well
    as for some relationship loader queries.
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy ORM在工作单元“flush”过程中使用上述技术来保留每个映射器缓存，这些缓存与[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")上配置的默认缓存分开，以及一些关系加载器查询。
- en: 'The cache can also be disabled with this argument by sending a value of `None`:'
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过发送`None`值来禁用缓存：
- en: '[PRE359]  ### Caching for Third Party Dialects'
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE359]  ### 第三方方言的缓存'
- en: The caching feature requires that the dialect’s compiler produces SQL strings
    that are safe to reuse for many statement invocations, given a particular cache
    key that is keyed to that SQL string. This means that any literal values in a
    statement, such as the LIMIT/OFFSET values for a SELECT, can not be hardcoded
    in the dialect’s compilation scheme, as the compiled string will not be re-usable.
    SQLAlchemy supports rendered bound parameters using the [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method which
    can be applied to the existing `Select._limit_clause` and `Select._offset_clause`
    attributes by a custom compiler, which are illustrated later in this section.
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存功能要求方言的编译器生成安全可重用的 SQL 字符串，给定一个特定的与该 SQL 字符串关联的缓存键，这意味着语句中的任何文字值，例如 SELECT
    的 LIMIT/OFFSET 值，不能在方言的编译方案中硬编码，因为编译后的字符串将无法重复使用。SQLAlchemy 支持使用[`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute")方法呈现绑定参数，该方法可以应用于自定义编译器的现有`Select._limit_clause`和`Select._offset_clause`属性，这些属性稍后在本节中进行了说明。
- en: As there are many third party dialects, many of which may be generating literal
    values from SQL statements without the benefit of the newer “literal execute”
    feature, SQLAlchemy as of version 1.4.5 has added an attribute to dialects known
    as [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache"). This attribute is checked
    at runtime for its presence directly on a particular dialect’s class, even if
    it’s already present on a superclass, so that even a third party dialect that
    subclasses an existing cacheable SQLAlchemy dialect such as `sqlalchemy.dialects.postgresql.PGDialect`
    must still explicitly include this attribute for caching to be enabled. The attribute
    should **only** be enabled once the dialect has been altered as needed and tested
    for reusability of compiled SQL statements with differing parameters.
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有许多第三方方言，其中许多可能会从SQL语句中生成文字值而没有新的“文字执行”功能的好处，因此 SQLAlchemy 在版本 1.4.5 中为方言添加了一个名为[`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache")的属性。此属性在运行时直接在特定方言类上检查其是否存在，即使它已经存在于超类上，因此即使第三方方言是现有可缓存的
    SQLAlchemy 方言的子类，比如`sqlalchemy.dialects.postgresql.PGDialect`，也必须明确包含此属性以启用缓存。该属性应该在方言经过必要的修改并经过测试以确保编译的SQL语句具有不同参数的可重用性后才能**启用**。
- en: For all third party dialects that don’t support this attribute, the logging
    for such a dialect will indicate `dialect does not support caching`.
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有不支持此属性的第三方方言，该方言的日志将指示`方言不支持缓存`。
- en: 'When a dialect has been tested against caching, and in particular the SQL compiler
    has been updated to not render any literal LIMIT / OFFSET within a SQL string
    directly, dialect authors can apply the attribute as follows:'
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: 当方言经过缓存测试，特别是 SQL 编译器已更新以不直接在 SQL 字符串中呈现任何文字 LIMIT / OFFSET 时，方言作者可以按照以下方式应用该属性：
- en: '[PRE360]'
  id: totrans-2013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'The flag needs to be applied to all subclasses of the dialect as well:'
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: 标志需要应用到方言的所有子类中：
- en: '[PRE361]'
  id: totrans-2015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'New in version 1.4.5: Added the [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") attribute.'
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.5 中的新功能：添加了[`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache")属性。
- en: The typical case for dialect modification follows.
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: 方言修改的典型情况如下。
- en: 'Example: Rendering LIMIT / OFFSET with post compile parameters'
  id: totrans-2018
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例：使用后编译参数渲染 LIMIT / OFFSET
- en: 'As an example, suppose a dialect overrides the `SQLCompiler.limit_clause()`
    method, which produces the “LIMIT / OFFSET” clause for a SQL statement, like this:'
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设一个方言重写了`SQLCompiler.limit_clause()`方法，该方法为SQL语句生成“LIMIT / OFFSET”子句，如下所示：
- en: '[PRE362]'
  id: totrans-2020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: The above routine renders the `Select._limit` and `Select._offset` integer values
    as literal integers embedded in the SQL statement. This is a common requirement
    for databases that do not support using a bound parameter within the LIMIT/OFFSET
    clauses of a SELECT statement. However, rendering the integer value within the
    initial compilation stage is directly **incompatible** with caching as the limit
    and offset integer values of a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object are not part of the cache key, so that
    many [`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    statements with different limit/offset values would not render with the correct
    value.
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: 上述例程将`Select._limit`和`Select._offset`整数值呈现为嵌入在SQL语句中的字面整数。这对于不支持在SELECT语句的LIMIT/OFFSET子句中使用绑定参数的数据库是常见的要求。但是，在初始编译阶段内呈现整数值直接**不兼容**缓存，因为[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象的limit和offset整数值不是缓存键的一部分，因此许多带有不同limit/offset值的[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")语句将无法以正确的值呈现。
- en: 'The correction for the above code is to move the literal integer into SQLAlchemy’s
    [post-compile](../changelog/migration_14.html#change-4808) facility, which will
    render the literal integer outside of the initial compilation stage, but instead
    at execution time before the statement is sent to the DBAPI. This is accessed
    within the compilation stage using the [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method, in conjunction
    with using the `Select._limit_clause` and `Select._offset_clause` attributes,
    which represent the LIMIT/OFFSET as a complete SQL expression, as follows:'
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: 以上代码的修正是将字面整数移到SQLAlchemy的[后编译](../changelog/migration_14.html#change-4808)设施中，这将使字面整数在初始编译阶段之外渲染，而是在执行时在将语句发送到DBAPI之前。这在编译阶段使用[`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute")方法进行访问，与使用`Select._limit_clause`和`Select._offset_clause`属性结合使用，这些属性将LIMIT/OFFSET表示为完整的SQL表达式，如下所示：
- en: '[PRE363]'
  id: totrans-2023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: 'The approach above will generate a compiled SELECT statement that looks like:'
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法将生成一个编译后的SELECT语句，看起来像：
- en: '[PRE364]'
  id: totrans-2025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: Where above, the `__[POSTCOMPILE_param_1]` and `__[POSTCOMPILE_param_2]` indicators
    will be populated with their corresponding integer values at statement execution
    time, after the SQL string has been retrieved from the cache.
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，`__[POSTCOMPILE_param_1]`和`__[POSTCOMPILE_param_2]`指示符将在语句执行时填充其相应的整数值，此时SQL字符串已从缓存中检索出。
- en: After changes like the above have been made as appropriate, the [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") flag should be set to `True`.
    It is strongly recommended that third party dialects make use of the [dialect
    third party test suite](https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst)
    which will assert that operations like SELECTs with LIMIT/OFFSET are correctly
    rendered and cached.
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出适当的类似上述的更改后，应将[`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache")标志设置为`True`。强烈建议第三方方言使用[dialect
    third party test suite](https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst)，该套件将断言SELECT带有LIMIT/OFFSET的操作是否正确呈现和缓存。
- en: See also
  id: totrans-2028
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Why is my application slow after upgrading to 1.4 and/or 2.x?](../faq/performance.html#faq-new-caching)
    - in the [Frequently Asked Questions](../faq/index.html) section  ### Using Lambdas
    to add significant speed gains to statement production'
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: '[我升级到 1.4 和/或 2.x 后，为什么我的应用程序变慢了？](../faq/performance.html#faq-new-caching)
    - 在[常见问题](../faq/index.html)部分 ### 使用Lambda在语句生成中添加显著的速度增益'
- en: Deep Alchemy
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: This technique is generally non-essential except in very performance intensive
    scenarios, and intended for experienced Python programmers. While fairly straightforward,
    it involves metaprogramming concepts that are not appropriate for novice Python
    developers. The lambda approach can be applied to at a later time to existing
    code with a minimal amount of effort.
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在非常性能密集的场景中通常是非必要的，并且专为有经验的Python程序员而设计，此技术也不适合初学者Python开发人员。虽然相当简单，但它涉及到不适合初学者Python开发人员的元编程概念。Lambda方法可以稍后应用于现有代码，而只需付出最小的努力。
- en: Python functions, typically expressed as lambdas, may be used to generate SQL
    expressions which are cacheable based on the Python code location of the lambda
    function itself as well as the closure variables within the lambda. The rationale
    is to allow caching of not only the SQL string-compiled form of a SQL expression
    construct as is SQLAlchemy’s normal behavior when the lambda system isn’t used,
    but also the in-Python composition of the SQL expression construct itself, which
    also has some degree of Python overhead.
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数，通常表示为 lambda，可以用于生成可基于 lambda 函数本身的 Python 代码位置以及 lambda 内的闭包变量进行缓存的
    SQL 表达式。其原因是允许缓存 SQL 表达式构造的 SQL 字符串编译形式，这是 SQLAlchemy 在未使用 lambda 系统时的正常行为，以及
    SQL 表达式构造本身的 Python 组合，这也具有一定程度的 Python 开销。
- en: The lambda SQL expression feature is available as a performance enhancing feature,
    and is also optionally used in the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") ORM option in order to provide a generic
    SQL fragment.
  id: totrans-2033
  prefs: []
  type: TYPE_NORMAL
  zh: lambda SQL 表达式功能可作为性能增强功能使用，并且也可选择在 [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") ORM 选项中使用，以提供通用的 SQL 片段。
- en: Synopsis
  id: totrans-2034
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 梗概
- en: Lambda statements are constructed using the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") function, which returns an instance of
    [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement"), which is itself an executable
    statement construct. Additional modifiers and criteria are added to the object
    using the Python addition operator `+`, or alternatively the [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") method which
    allows for more options.
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 语句是使用 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 函数构造的，该函数返回 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 的实例，它本身是一个可执行的语句构造。可以使用 Python
    加法运算符 `+` 或者 [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") 方法向对象添加其他修饰符和条件，该方法允许更多选项。
- en: 'It is assumed that the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") construct is being invoked within an
    enclosing function or method that expects to be used many times within an application,
    so that subsequent executions beyond the first one can take advantage of the compiled
    SQL being cached. When the lambda is constructed inside of an enclosing function
    in Python it is then subject to also having closure variables, which are significant
    to the whole approach:'
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
  zh: 假定 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt "sqlalchemy.sql.expression.lambda_stmt")
    构造在期望在应用程序中被多次使用的封闭函数或方法内被调用，以便超出第一次调用后的后续执行可以利用被缓存的编译 SQL。当 lambda 在 Python 的封闭函数内部构造时，也受到具有闭包变量的影响，这对整个方法至关重要：
- en: '[PRE365]'
  id: totrans-2037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: Above, the three `lambda` callables that are used to define the structure of
    a SELECT statement are invoked exactly once, and the resulting SQL string cached
    in the compilation cache of the engine. From that point forward, the `run_my_statement()`
    function may be invoked any number of times and the `lambda` callables within
    it will not be called, only used as cache keys to retrieve the already-compiled
    SQL.
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，用于定义 SELECT 语句结构的三个 `lambda` 可调用对象仅被调用一次，并且生成的 SQL 字符串被缓存在引擎的编译缓存中。从那时起，`run_my_statement()`
    函数可以被调用任意次数，并且其中的 `lambda` 可调用对象不会被调用，而只用作缓存键来检索已编译的 SQL。
- en: Note
  id: totrans-2039
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that there is already SQL caching in place when the
    lambda system is not used. The lambda system only adds an additional layer of
    work reduction per SQL statement invoked by caching the building up of the SQL
    construct itself and also using a simpler cache key.
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: 当 lambda 系统未被使用时，已经存在 SQL 缓存，这一点很重要。lambda 系统只是在每个 SQL 语句调用时添加了额外的工作减少层，通过缓存
    SQL 构建本身以及使用更简单的缓存键来实现。
- en: Quick Guidelines for Lambdas
  id: totrans-2041
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Lambda 的快速指南
- en: 'Above all, the emphasis within the lambda SQL system is ensuring that there
    is never a mismatch between the cache key generated for a lambda and the SQL string
    it will produce. The [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") and related objects will run and analyze
    the given lambda in order to calculate how it should be cached on each run, trying
    to detect any potential problems. Basic guidelines include:'
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，Lambda SQL 系统的重点是确保生成的 lambda 的缓存密钥与其将产生的 SQL 字符串之间永远不会不匹配。[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 和相关对象将运行并分析给定的 lambda，以计算每次运行时应如何缓存它，尝试检测任何潜在问题。基本指南包括：
- en: '**Any kind of statement is supported** - while it’s expected that [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs are the prime use case for [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt"), DML statements such as [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") and [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") are equally usable:'
  id: totrans-2043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持任何类型的语句** - 虽然 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造预计是 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 的主要用例，但 DML 语句，如 [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 和 [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 也同样可用：'
- en: '[PRE366]'
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '**ORM use cases directly supported as well** - the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") can accommodate ORM functionality completely
    and used directly with [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  id: totrans-2045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ORM 用例也直接支持** - [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 可完全容纳 ORM 功能，并可直接与 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 一起使用：'
- en: '[PRE367]'
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '**Bound parameters are automatically accommodated** - in contrast to SQLAlchemy’s
    previous “baked query” system, the lambda SQL system accommodates for Python literal
    values which become SQL bound parameters automatically. This means that even though
    a given lambda runs only once, the values that become bound parameters are extracted
    from the **closure** of the lambda on every run:'
  id: totrans-2047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定参数会自动适应** - 与 SQLAlchemy 以前的“烘焙查询”系统相比，Lambda SQL 系统会自动适应成为 SQL 绑定参数的 Python
    字面值。这意味着即使给定的 Lambda 只运行一次，但成为绑定参数的值会在每次运行时从 Lambda 的 **闭包** 中提取出来：'
- en: '[PRE368]'
  id: totrans-2048
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: Above, [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") extracted the values of `x`
    and `y` from the **closure** of the lambda that is generated each time `my_stmt()`
    is invoked; these were substituted into the cached SQL construct as the values
    of the parameters.
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 从每次调用 `my_stmt()` 时生成的 lambda
    的 **闭包** 中提取了 `x` 和 `y` 的值；这些值被替换为参数的值并嵌入到缓存的 SQL 结构中。
- en: '**The lambda should ideally produce an identical SQL structure in all cases**
    - Avoid using conditionals or custom callables inside of lambdas that might make
    it produce different SQL based on inputs; if a function might conditionally use
    two different SQL fragments, use two separate lambdas:'
  id: totrans-2050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理想情况下，Lambda 应该在所有情况下产生相同的 SQL 结构** - 避免在 lambda 内部使用条件语句或自定义可调用对象，这可能会根据输入产生不同的
    SQL；如果函数可能会有条件地使用两个不同的 SQL 片段，请使用两个单独的 lambda：'
- en: '[PRE369]'
  id: totrans-2051
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: There are a variety of failures which can occur if the lambda does not produce
    a consistent SQL construct and some are not trivially detectable right now.
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 lambda 不生成一致的 SQL 结构，则可能会发生各种失败，其中一些目前不容易检测到。
- en: '**Don’t use functions inside the lambda to produce bound values** - the bound
    value tracking approach requires that the actual value to be used in the SQL statement
    be locally present in the closure of the lambda. This is not possible if values
    are generated from other functions, and the [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") should normally raise an error if this
    is attempted:'
  id: totrans-2053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要在lambda内部使用函数生成绑定值** - 绑定值跟踪方法要求SQL语句中要使用的实际值在lambda的闭包中本地存在。如果值是从其他函数生成的，则不可能实现这一点，并且如果尝试执行此操作，[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement")通常会引发错误：'
- en: '[PRE370]'
  id: totrans-2054
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: 'Above, the use of `get_x()` and `get_y()`, if they are necessary, should occur
    **outside** of the lambda and assigned to a local closure variable:'
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面，如果需要，`get_x()`和`get_y()`的使用应该在lambda的**外部**发生，并分配给本地闭包变量：
- en: '[PRE371]'
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '**Avoid referring to non-SQL constructs inside of lambdas as they are not cacheable
    by default** - this issue refers to how the [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") creates a cache key from other closure
    variables within the statement. In order to provide the best guarantee of an accurate
    cache key, all objects located in the closure of the lambda are considered to
    be significant, and none will be assumed to be appropriate for a cache key by
    default. So the following example will also raise a rather detailed error message:'
  id: totrans-2057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免在lambda内部引用非SQL构造，因为它们默认情况下不可缓存** - 这个问题涉及到[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement")如何从语句中的其他闭包变量创建缓存键。为了提供准确的缓存键的最佳保证，lambda闭包中的所有对象都被认为是重要的，且默认情况下不会假设它们适合作为缓存键。因此，下面的示例也将引发一个相当详细的错误消息：'
- en: '[PRE372]'
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: The above error indicates that [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") will not assume that the `Foo` object
    passed in will continue to behave the same in all cases. It also won’t assume
    it can use `Foo` as part of the cache key by default; if it were to use the `Foo`
    object as part of the cache key, if there were many different `Foo` objects this
    would fill up the cache with duplicate information, and would also hold long-lasting
    references to all of these objects.
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述错误表明[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement")不会假设传入的`Foo`对象在所有情况下都会保持相同的行为。它也不会默认假设它可以将`Foo`作为缓存键的一部分使用；如果将`Foo`对象用作缓存键的一部分，如果有许多不同的`Foo`对象，这将使缓存填满重复信息，并且还将长时间保留对所有这些对象的引用。
- en: 'The best way to resolve the above situation is to not refer to `foo` inside
    of the lambda, and refer to it **outside** instead:'
  id: totrans-2060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决上述情况的最佳方法是不要在lambda内部引用`foo`，而是在**外部**引用它：
- en: '[PRE373]'
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'In some situations, if the SQL structure of the lambda is guaranteed to never
    change based on input, to pass `track_closure_variables=False` which will disable
    any tracking of closure variables other than those used for bound parameters:'
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，如果可以保证lambda的SQL结构不会根据输入改变，可以传递`track_closure_variables=False`来禁用对除绑定参数外的任何闭包变量的跟踪：
- en: '[PRE374]'
  id: totrans-2063
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: 'There is also the option to add objects to the element to explicitly form part
    of the cache key, using the `track_on` parameter; using this parameter allows
    specific values to serve as the cache key and will also prevent other closure
    variables from being considered. This is useful for cases where part of the SQL
    being constructed originates from a contextual object of some sort that may have
    many different values. In the example below, the first segment of the SELECT statement
    will disable tracking of the `foo` variable, whereas the second segment will explicitly
    track `self` as part of the cache key:'
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有一种选择，即通过`track_on`参数将对象添加到元素中，以明确形成缓存键的一部分；使用此参数允许特定值作为缓存键，并且还将阻止考虑其他闭包变量。这对于构造的SQL的一部分源自某种上下文对象并且可能具有许多不同值的情况非常有用。在下面的示例中，SELECT语句的第一个段将禁用对`foo`变量的跟踪，而第二个段将明确跟踪`self`作为缓存键的一部分：
- en: '[PRE375]'
  id: totrans-2065
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: Using `track_on` means the given objects will be stored long term in the lambda’s
    internal cache and will have strong references for as long as the cache doesn’t
    clear out those objects (an LRU scheme of 1000 entries is used by default).
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`track_on`意味着给定的对象将长期存储在lambda的内部缓存中，并且只要缓存不清除这些对象（默认使用1000个条目的LRU方案）就会具有强引用。
- en: Cache Key Generation
  id: totrans-2067
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓存键生成
- en: In order to understand some of the options and behaviors which occur with lambda
    SQL constructs, an understanding of the caching system is helpful.
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解与 lambda SQL 构造相关的一些选项和行为，了解缓存系统是有帮助的。
- en: 'SQLAlchemy’s caching system normally generates a cache key from a given SQL
    expression construct by producing a structure that represents all the state within
    the construct:'
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的缓存系统通常通过生成一个表示构造内所有状态的结构来从给定的 SQL 表达式构造中生成缓存键：
- en: '[PRE376]'
  id: totrans-2070
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: The above key is stored in the cache which is essentially a dictionary, and
    the value is a construct that among other things stores the string form of the
    SQL statement, in this case the phrase “SELECT q”. We can observe that even for
    an extremely short query the cache key is pretty verbose as it has to represent
    everything that may vary about what’s being rendered and potentially executed.
  id: totrans-2071
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的键存储在本质上是一个字典的缓存中，值是一个结构，其中包括 SQL 语句的字符串形式，本例中是短语 “SELECT q”。我们可以观察到，即使对于一个极短的查询，缓存键也非常冗长，因为它必须表示有关正在呈现和可能执行的所有内容。
- en: 'The lambda construction system by contrast creates a different kind of cache
    key:'
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，lambda 构造系统会创建一种不同类型的缓存键：
- en: '[PRE377]'
  id: totrans-2073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: Above, we see a cache key that is vastly shorter than that of the non-lambda
    statement, and additionally that production of the `select(column("q"))` construct
    itself was not even necessary; the Python lambda itself contains an attribute
    called `__code__` which refers to a Python code object that within the runtime
    of the application is immutable and permanent.
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们看到的缓存键比非 lambda 语句的要短得多，而且甚至生产 `select(column("q"))` 构造本身也不是必要的；Python
    lambda 本身包含一个称为 `__code__` 的属性，它引用了一个在应用程序运行时是不可变和永久的 Python 代码对象。
- en: 'When the lambda also includes closure variables, in the normal case that these
    variables refer to SQL constructs such as column objects, they become part of
    the cache key, or if they refer to literal values that will be bound parameters,
    they are placed in a separate element of the cache key:'
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
  zh: 当 lambda 还包含闭包变量时，在正常情况下，这些变量引用诸如列对象等 SQL 构造，它们将成为缓存键的一部分，或者如果它们引用将绑定参数的文字值，则它们将放置在缓存键的单独元素中：
- en: '[PRE378]'
  id: totrans-2076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: 'The above [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") includes two lambdas, both
    of which refer to the `col` closure variable, so the cache key will represent
    both of these segments as well as the `column()` object:'
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 包含两个 lambda，两者都引用 `col` 闭包变量，因此缓存键将表示这两个段以及
    `column()` 对象：
- en: '[PRE379]'
  id: totrans-2078
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: 'The second part of the cache key has retrieved the bound parameters that will
    be used when the statement is invoked:'
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存键的第二部分已检索到在调用语句时将使用的绑定参数：
- en: '[PRE380]'
  id: totrans-2080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: For a series of examples of “lambda” caching with performance comparisons, see
    the “short_selects” test suite within the [Performance](../orm/examples.html#examples-performance)
    performance example.
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
  zh: 有关带有性能比较的 “lambda” 缓存的一系列示例，请参阅 [性能](../orm/examples.html#examples-performance)
    性能示例中的 “short_selects” 测试套件。
- en: Configuration
  id: totrans-2082
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置
- en: 'The cache itself is a dictionary-like object called an `LRUCache`, which is
    an internal SQLAlchemy dictionary subclass that tracks the usage of particular
    keys and features a periodic “pruning” step which removes the least recently used
    items when the size of the cache reaches a certain threshold. The size of this
    cache defaults to 500 and may be configured using the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") parameter:'
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存本身是一个名为 `LRUCache` 的类似字典的对象，它是一个内部 SQLAlchemy 字典子类，用于跟踪特定键的使用情况，并具有周期性的 “修剪”
    步骤，当缓存的大小达到一定阈值时，将删除最近未使用的项目。该缓存的大小默认为 500，并可以使用 [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") 参数进行配置：
- en: '[PRE381]'
  id: totrans-2084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: The size of the cache can grow to be a factor of 150% of the size given, before
    it’s pruned back down to the target size. A cache of size 1200 above can therefore
    grow to be 1800 elements in size at which point it will be pruned to 1200.
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存的大小可以增长为给定大小的 150%，然后将其修剪回目标大小。因此，大小为 1200 的缓存可以增长到 1800 个元素的大小，此时它将被修剪为 1200。
- en: The sizing of the cache is based on a single entry per unique SQL statement
    rendered, per engine. SQL statements generated from both the Core and the ORM
    are treated equally. DDL statements will usually not be cached. In order to determine
    what the cache is doing, engine logging will include details about the cache’s
    behavior, described in the next section.
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存的大小基于每个引擎呈现的唯一SQL语句的单个条目。来自Core和ORM的生成的SQL语句被等同对待。DDL语句通常不会被缓存。为了确定缓存的行为，引擎日志将包括有关缓存行为的详细信息，将在下一节描述。
- en: '### Estimating Cache Performance Using Logging'
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用日志估算缓存性能'
- en: The above cache size of 1200 is actually fairly large. For small applications,
    a size of 100 is likely sufficient. To estimate the optimal size of the cache,
    assuming enough memory is present on the target host, the size of the cache should
    be based on the number of unique SQL strings that may be rendered for the target
    engine in use. The most expedient way to see this is to use SQL echoing, which
    is most directly enabled by using the [`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") flag, or by using Python logging; see the section
    [Configuring Logging](engines.html#dbengine-logging) for background on logging
    configuration.
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
  zh: 上述缓存大小为1200实际上相当大。对于小型应用程序，大小为100可能足够。要估算缓存的最佳大小，假设目标主机上有足够的内存，缓存的大小应基于可能在使用的目标引擎中呈现的唯一SQL字符串的数量。看到这一点最快捷的方法是使用SQL回显，最直接的方法是使用[`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine")标志启用，或使用Python记录;有关日志配置的背景，请参阅[配置日志](engines.html#dbengine-logging)部分。
- en: 'As an example, we will examine the logging produced by the following program:'
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将检查以下程序生成的日志：
- en: '[PRE382]'
  id: totrans-2090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: 'When run, each SQL statement that’s logged will include a bracketed cache statistics
    badge to the left of the parameters passed. The four types of message we may see
    are summarized as follows:'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，每个记录的SQL语句都将在传递的参数左侧包含带方括号的缓存统计徽章。我们可能看到的四种消息总结如下：
- en: '`[raw sql]` - the driver or the end-user emitted raw SQL using [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") - caching does not apply'
  id: totrans-2092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[raw sql]` - 驱动程序或最终用户使用[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")发出原始SQL - 不适用缓存'
- en: '`[no key]` - the statement object is a DDL statement that is not cached, or
    the statement object contains uncacheable elements such as user-defined constructs
    or arbitrarily large VALUES clauses.'
  id: totrans-2093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[no key]` - 该语句对象是一个未缓存的DDL语句，或者该语句对象包含无法缓存的元素，例如用户定义的构造或任意大的VALUES子句。'
- en: '`[generated in Xs]` - the statement was a **cache miss** and had to be compiled,
    then stored in the cache. it took X seconds to produce the compiled construct.
    The number X will be in the small fractional seconds.'
  id: totrans-2094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[generated in Xs]` - 该语句是一个**缓存未命中**，必须编译，然后存储在缓存中。生成编译结构消耗了X秒。数字X将为小数秒。'
- en: '`[cached since Xs ago]` - the statement was a **cache hit** and did not have
    to be recompiled. The statement has been stored in the cache since X seconds ago.
    The number X will be proportional to how long the application has been running
    and how long the statement has been cached, so for example would be 86400 for
    a 24 hour period.'
  id: totrans-2095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[cached since Xs ago]` - 该语句是一个**缓存命中**，无需重新编译。该语句自X秒前起已存储在缓存中。数字X将与应用程序运行的时间以及语句被缓存的时间成比例，因此，例如，对于24小时周期将为86400。'
- en: Each badge is described in more detail below.
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: 下面更详细地描述了每个徽章。
- en: 'The first statements we see for the above program will be the SQLite dialect
    checking for the existence of the “a” and “b” tables:'
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述程序，我们首先看到的语句将是SQLite方言检查“a”和“b”表是否存在：
- en: '[PRE383]'
  id: totrans-2098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: For the above two SQLite PRAGMA statements, the badge reads `[raw sql]`, which
    indicates the driver is sending a Python string directly to the database using
    [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql"). Caching does not apply to such
    statements because they already exist in string form, and there is nothing known
    about what kinds of result rows will be returned since SQLAlchemy does not parse
    SQL strings ahead of time.
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上面的两个 SQLite PRAGMA 语句，标记显示为 `[原始 SQL]`，这表示驱动程序使用 [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 将 Python 字符串直接发送到数据库。对这样的语句不适用缓存，因为它们已经以字符串形式存在，而且
    SQLAlchemy 在事先不解析 SQL 字符串。
- en: 'The next statements we see are the CREATE TABLE statements:'
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的下一条语句是 CREATE TABLE 语句：
- en: '[PRE384]'
  id: totrans-2101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: For each of these statements, the badge reads `[no key 0.00006s]`. This indicates
    that these two particular statements, caching did not occur because the DDL-oriented
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct did not produce a cache key. DDL constructs generally do not participate
    in caching because they are not typically subject to being repeated a second time
    and DDL is also a database configurational step where performance is not as critical.
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些语句的每个，标记显示为 `[无键 0.00006s]`。这表示这两个特定的语句，由于 DDL 导向的 [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") 构造未生成缓存键，因此未发生缓存。DDL 构造通常不参与缓存，因为它们通常不会被重复执行，而且
    DDL 还是一个数据库配置步骤，性能并不那么关键。
- en: The `[no key]` badge is important for one other reason, as it can be produced
    for SQL statements that are cacheable except for some particular sub-construct
    that is not currently cacheable. Examples of this include custom user-defined
    SQL elements that don’t define caching parameters, as well as some constructs
    that generate arbitrarily long and non-reproducible SQL strings, the main examples
    being the [`Values`](selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct as well as when using “multivalued inserts” with the [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method.
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: '`[无键]` 标记对另一个原因很重要，因为它可以用于生成可缓存的 SQL 语句，除了某些当前不可缓存的特定子构造。这些示例包括不定义缓存参数的自定义用户定义的
    SQL 元素，以及一些生成任意长且不可重现的 SQL 字符串的构造，主要示例包括 [`Values`](selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") 构造以及在使用 [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法进行“多值插入”时。'
- en: 'So far our cache is still empty. The next statements will be cached however,
    a segment looks like:'
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的缓存仍然是空的。然而，接下来的语句将被缓存，一个片段看起来像是：
- en: '[PRE385]'
  id: totrans-2105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: Above, we see essentially two unique SQL strings; `"INSERT INTO a (data) VALUES
    (?)"` and `"INSERT INTO b (a_id, data) VALUES (?, ?)"`. Since SQLAlchemy uses
    bound parameters for all literal values, even though these statements are repeated
    many times for different objects, because the parameters are separate, the actual
    SQL string stays the same.
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们基本上看到了两个唯一的 SQL 字符串；`"INSERT INTO a (data) VALUES (?)"` 和 `"INSERT INTO
    b (a_id, data) VALUES (?, ?)"`。由于 SQLAlchemy 对所有文本值使用绑定参数，即使这些语句为不同的对象重复多次，由于参数是分开的，实际的
    SQL 字符串仍然相同。
- en: Note
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: the above two statements are generated by the ORM unit of work process, and
    in fact will be caching these in a separate cache that is local to each mapper.
    However the mechanics and terminology are the same. The section [Disabling or
    using an alternate dictionary to cache some (or all) statements](#engine-compiled-cache)
    below will describe how user-facing code can also use an alternate caching container
    on a per-statement basis.
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个语句是由 ORM 工作单元流程生成的，实际上将这些语句缓存在每个映射器本地的单独缓存中。然而，机制和术语是相同的。下面的部分 [禁用或使用备用字典来缓存一些（或全部）语句](#engine-compiled-cache)
    将描述用户代码如何也可以在每个语句的基础上使用备用缓存容器。
- en: The caching badge we see for the first occurrence of each of these two statements
    is `[generated in 0.00011s]`. This indicates that the statement was **not in the
    cache, was compiled into a String in .00011s and was then cached**. When we see
    the `[generated]` badge, we know that this means there was a **cache miss**. This
    is to be expected for the first occurrence of a particular statement. However,
    if lots of new `[generated]` badges are observed for a long-running application
    that is generally using the same series of SQL statements over and over, this
    may be a sign that the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") parameter is too small. When a statement that was
    cached is then evicted from the cache due to the LRU cache pruning lesser used
    items, it will display the `[generated]` badge when it is next used.
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这两个语句的首次出现时看到的缓存徽章是`[生成于 0.00011s]`。这表明该语句**不在缓存中，被编译为一个字符串需时0.00011秒，然后被缓存**。当我们看到`[生成]`徽章时，我们知道这意味着**缓存未命中**。对于特定语句的首次出现，这是可以预料的。然而，如果在长时间运行的应用程序中频繁观察到大量新的`[生成]`徽章，而该应用程序通常会一遍又一遍地使用相同的一系列
    SQL 语句，这可能是[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")参数设置过小的迹象。当一个被缓存的语句因为 LRU 缓存淘汰了较少使用的项而被驱逐出缓存时，它在下次使用时将显示`[生成]`徽章。
- en: The caching badge that we then see for the subsequent occurrences of each of
    these two statements looks like `[cached since 0.0003533s ago]`. This indicates
    that the statement **was found in the cache, and was originally placed into the
    cache .0003533 seconds ago**. It is important to note that while the `[generated]`
    and `[cached since]` badges refer to a number of seconds, they mean different
    things; in the case of `[generated]`, the number is a rough timing of how long
    it took to compile the statement, and will be an extremely small amount of time.
    In the case of `[cached since]`, this is the total time that a statement has been
    present in the cache. For an application that’s been running for six hours, this
    number may read `[cached since 21600 seconds ago]`, and that’s a good thing. Seeing
    high numbers for “cached since” is an indication that these statements have not
    been subject to cache misses for a long time. Statements that frequently have
    a low number of “cached since” even if the application has been running a long
    time may indicate these statements are too frequently subject to cache misses,
    and that the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") may need to be increased.
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们看到每个这两个语句的后续出现所显示的缓存徽章类似于`[缓存自0.0003533秒前]`。这表明该语句**在缓存中找到，并且最初是在0.0003533秒前放入缓存**。需要注意的是，虽然`[生成]`和`[缓存自]`徽章都涉及到一定数量的秒数，但它们表示的是不同的含义；在`[生成]`的情况下，这个数字是编译语句所需的大致时间，将是一个极小的时间量。而在`[缓存自]`的情况下，这是语句在缓存中存在的总时间。对于运行了六小时的应用程序，这个数字可能会显示`[缓存自
    21600 秒前]`，这是一件好事。观察到“缓存自”数值较高是这些语句长时间没有遇到缓存未命中的迹象。即使应用程序运行了很长时间，频繁具有较低的“缓存自”数值的语句，可能表明这些语句太频繁地遇到缓存未命中，而[`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")可能需要增加。
- en: 'Our example program then performs some SELECTs where we can see the same pattern
    of “generated” then “cached”, for the SELECT of the “a” table as well as for subsequent
    lazy loads of the “b” table:'
  id: totrans-2111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的示例程序执行了一些 SELECT 查询，我们可以看到“生成”然后“缓存”的相同模式，对于“a”表的 SELECT 以及“b”表的后续惰性加载也是如此。
- en: '[PRE386]'
  id: totrans-2112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: From our above program, a full run shows a total of four distinct SQL strings
    being cached. Which indicates a cache size of **four** would be sufficient. This
    is obviously an extremely small size, and the default size of 500 is fine to be
    left at its default.
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们上面的程序中，完整运行显示了总共四个不同的 SQL 字符串被缓存。这表明缓存大小为**四**将足够。这显然是一个极小的大小，默认大小为500可以保持不变。
- en: How much memory does the cache use?
  id: totrans-2114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存使用了多少内存？
- en: The previous section detailed some techniques to check if the [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") needs to be bigger. How do we know if the cache is
    not too large? The reason we may want to set [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") to not be higher than a certain number would be because
    we have an application that may make use of a very large number of different statements,
    such as an application that is building queries on the fly from a search UX, and
    we don’t want our host to run out of memory if for example, a hundred thousand
    different queries were run in the past 24 hours and they were all cached.
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节详细介绍了一些技术，以检查是否需要增大 [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine")。我们如何知道缓存大小是否不太大？我们可能希望设置 [`create_engine.query_cache_size`](engines.html#sqlalchemy.create_engine.params.query_cache_size
    "sqlalchemy.create_engine") 不要大于某个数值，因为我们的应用可能会使用非常多不同的语句，例如从搜索 UX 动态构建查询的应用程序，如果在过去
    24 小时内运行了十万个不同的查询并且它们都被缓存，我们不希望主机耗尽内存。
- en: It is extremely difficult to measure how much memory is occupied by Python data
    structures, however using a process to measure growth in memory via `top` as a
    successive series of 250 new statements are added to the cache suggest a moderate
    Core statement takes up about 12K while a small ORM statement takes about 20K,
    including result-fetching structures which for the ORM will be much greater.
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: 测量 Python 数据结构占用的内存量非常困难，然而，通过使用 `top` 进程测量内存增长的过程，当连续添加 250 个新语句到缓存中时，暗示一个中等大小的核心语句大约占用
    12K，而一个小型 ORM 语句大约占用 20K，其中包括 ORM 的结果获取结构，后者会更大。
- en: '### Disabling or using an alternate dictionary to cache some (or all) statements'
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: '### 禁用或使用替代字典缓存一些（或全部）语句'
- en: 'The internal cache used is known as `LRUCache`, but this is mostly just a dictionary.
    Any dictionary may be used as a cache for any series of statements by using the
    [`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") option as an execution option.
    Execution options may be set on a statement, on an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    as well as when using the ORM [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method for SQLAlchemy-2.0 style invocations.
    For example, to run a series of SQL statements and have them cached in a particular
    dictionary:'
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的内部缓存称为 `LRUCache`，但这基本上只是一个字典。可以通过将 [`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") 选项作为执行选项来使用任何字典作为任何一系列语句的缓存。执行选项可以在语句、[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 或 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    上设置，以及在使用 SQLAlchemy-2.0 风格调用 ORM [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法时设置。例如，要运行一系列 SQL 语句并将它们缓存到特定字典中：
- en: '[PRE387]'
  id: totrans-2119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: The SQLAlchemy ORM uses the above technique to hold onto per-mapper caches within
    the unit of work “flush” process that are separate from the default cache configured
    on the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"), as well
    as for some relationship loader queries.
  id: totrans-2120
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy ORM 使用上述技术在工作单元“刷新”过程中保持每个映射器缓存，这些缓存与 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 上配置的默认缓存分开，以及一些关系加载器查询。
- en: 'The cache can also be disabled with this argument by sending a value of `None`:'
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将该参数设置为 `None` 可以禁用缓存：
- en: '[PRE388]'
  id: totrans-2122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '### Caching for Third Party Dialects'
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: '### 第三方方言的缓存'
- en: The caching feature requires that the dialect’s compiler produces SQL strings
    that are safe to reuse for many statement invocations, given a particular cache
    key that is keyed to that SQL string. This means that any literal values in a
    statement, such as the LIMIT/OFFSET values for a SELECT, can not be hardcoded
    in the dialect’s compilation scheme, as the compiled string will not be re-usable.
    SQLAlchemy supports rendered bound parameters using the [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method which
    can be applied to the existing `Select._limit_clause` and `Select._offset_clause`
    attributes by a custom compiler, which are illustrated later in this section.
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存功能要求方言的编译器生成安全的 SQL 字符串，以便在给定特定缓存键的情况下重用许多语句调用，该缓存键与该 SQL 字符串的键对齐。这意味着语句中的任何字面值，例如
    SELECT 的 LIMIT/OFFSET 值，不能在方言的编译方案中硬编码，因为编译后的字符串不可重复使用。SQLAlchemy 支持使用 [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") 方法呈现绑定参数，该方法可以由自定义编译器应用于现有的
    `Select._limit_clause` 和 `Select._offset_clause` 属性，在本节后面有所说明。
- en: As there are many third party dialects, many of which may be generating literal
    values from SQL statements without the benefit of the newer “literal execute”
    feature, SQLAlchemy as of version 1.4.5 has added an attribute to dialects known
    as [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache"). This attribute is checked
    at runtime for its presence directly on a particular dialect’s class, even if
    it’s already present on a superclass, so that even a third party dialect that
    subclasses an existing cacheable SQLAlchemy dialect such as `sqlalchemy.dialects.postgresql.PGDialect`
    must still explicitly include this attribute for caching to be enabled. The attribute
    should **only** be enabled once the dialect has been altered as needed and tested
    for reusability of compiled SQL statements with differing parameters.
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在许多第三方方言，其中许多可能从 SQL 语句中生成字面值而不使用较新的“字面量执行”功能，因此从版本 1.4.5 起，SQLAlchemy 已向方言添加了一个名为
    [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") 的属性。此属性在运行时直接在特定方言的类上检查其存在，即使它已经存在于超类上，因此即使第三方方言是现有可缓存的
    SQLAlchemy 方言的子类，例如 `sqlalchemy.dialects.postgresql.PGDialect`，仍然必须明确包含此属性以启用缓存。该属性应仅在方言已根据需要进行更改并已测试对具有不同参数的编译
    SQL 语句的可重用性后才能启用。
- en: For all third party dialects that don’t support this attribute, the logging
    for such a dialect will indicate `dialect does not support caching`.
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有不支持此属性的第三方方言，该方言的日志将指示 `dialect does not support caching`。
- en: 'When a dialect has been tested against caching, and in particular the SQL compiler
    has been updated to not render any literal LIMIT / OFFSET within a SQL string
    directly, dialect authors can apply the attribute as follows:'
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
  zh: 当方言已经针对缓存进行了测试，并且特别是 SQL 编译器已经更新为不直接在 SQL 字符串中呈现任何字面 LIMIT / OFFSET 时，方言作者可以如下应用该属性：
- en: '[PRE389]'
  id: totrans-2128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: 'The flag needs to be applied to all subclasses of the dialect as well:'
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
  zh: 该标志还需要应用于方言的所有子类：
- en: '[PRE390]'
  id: totrans-2130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: 'New in version 1.4.5: Added the [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") attribute.'
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.5 中新增了 [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") 属性。
- en: The typical case for dialect modification follows.
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: 方言修改的典型案例如下。
- en: 'Example: Rendering LIMIT / OFFSET with post compile parameters'
  id: totrans-2133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例：使用后编译参数呈现 LIMIT / OFFSET
- en: 'As an example, suppose a dialect overrides the `SQLCompiler.limit_clause()`
    method, which produces the “LIMIT / OFFSET” clause for a SQL statement, like this:'
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设方言覆盖了 `SQLCompiler.limit_clause()` 方法，该方法为 SQL 语句生成“LIMIT / OFFSET”子句，如下所示：
- en: '[PRE391]'
  id: totrans-2135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: The above routine renders the `Select._limit` and `Select._offset` integer values
    as literal integers embedded in the SQL statement. This is a common requirement
    for databases that do not support using a bound parameter within the LIMIT/OFFSET
    clauses of a SELECT statement. However, rendering the integer value within the
    initial compilation stage is directly **incompatible** with caching as the limit
    and offset integer values of a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object are not part of the cache key, so that
    many [`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    statements with different limit/offset values would not render with the correct
    value.
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
  zh: 上述例程将`Select._limit`和`Select._offset`整数值呈现为嵌入在SQL语句中的文字整数。这是对于不支持在SELECT语句的LIMIT/OFFSET子句中使用绑定参数的数据库的常见要求。然而，在初始编译阶段呈现整数值直接**不兼容**缓存，因为[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象的限制和偏移整数值不是缓存键的一部分，因此许多具有不同限制/偏移值的[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")语句将无法正确呈现值。
- en: 'The correction for the above code is to move the literal integer into SQLAlchemy’s
    [post-compile](../changelog/migration_14.html#change-4808) facility, which will
    render the literal integer outside of the initial compilation stage, but instead
    at execution time before the statement is sent to the DBAPI. This is accessed
    within the compilation stage using the [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method, in conjunction
    with using the `Select._limit_clause` and `Select._offset_clause` attributes,
    which represent the LIMIT/OFFSET as a complete SQL expression, as follows:'
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: 以上代码的更正是将文字整数移至SQLAlchemy的[后编译](../changelog/migration_14.html#change-4808)功能中，该功能将在初始编译阶段之外的执行时呈现文字整数，而是在将语句发送到DBAPI之前的执行时。这在编译阶段使用[`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute")方法访问，同时使用`Select._limit_clause`和`Select._offset_clause`属性，这些属性表示LIMIT/OFFSET作为完整的SQL表达式，如下所示：
- en: '[PRE392]'
  id: totrans-2138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'The approach above will generate a compiled SELECT statement that looks like:'
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法将生成一个编译后的SELECT语句，看起来像：
- en: '[PRE393]'
  id: totrans-2140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: Where above, the `__[POSTCOMPILE_param_1]` and `__[POSTCOMPILE_param_2]` indicators
    will be populated with their corresponding integer values at statement execution
    time, after the SQL string has been retrieved from the cache.
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，`__[POSTCOMPILE_param_1]`和`__[POSTCOMPILE_param_2]`指示符将在语句执行时填充其相应的整数值，此时SQL字符串已从缓存中检索出。
- en: After changes like the above have been made as appropriate, the [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") flag should be set to `True`.
    It is strongly recommended that third party dialects make use of the [dialect
    third party test suite](https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst)
    which will assert that operations like SELECTs with LIMIT/OFFSET are correctly
    rendered and cached.
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当进行类似上述更改之后，应将[`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache")标志设置为`True`。强烈建议第三方方言使用[dialect第三方测试套件](https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst)，该套件将断言具有正确呈现和缓存的带有LIMIT/OFFSET的SELECT等操作。
- en: See also
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Why is my application slow after upgrading to 1.4 and/or 2.x?](../faq/performance.html#faq-new-caching)
    - in the [Frequently Asked Questions](../faq/index.html) section'
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: '[升级到1.4和/或2.x后，为什么我的应用程序变慢？](../faq/performance.html#faq-new-caching) - 在[常见问题](../faq/index.html)部分'
- en: 'Example: Rendering LIMIT / OFFSET with post compile parameters'
  id: totrans-2145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 例子：使用后编译参数呈现LIMIT / OFFSET
- en: 'As an example, suppose a dialect overrides the `SQLCompiler.limit_clause()`
    method, which produces the “LIMIT / OFFSET” clause for a SQL statement, like this:'
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，假设一个方言重写了`SQLCompiler.limit_clause()`方法，该方法为SQL语句生成“LIMIT / OFFSET”子句，如下所示：
- en: '[PRE394]'
  id: totrans-2147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: The above routine renders the `Select._limit` and `Select._offset` integer values
    as literal integers embedded in the SQL statement. This is a common requirement
    for databases that do not support using a bound parameter within the LIMIT/OFFSET
    clauses of a SELECT statement. However, rendering the integer value within the
    initial compilation stage is directly **incompatible** with caching as the limit
    and offset integer values of a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object are not part of the cache key, so that
    many [`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    statements with different limit/offset values would not render with the correct
    value.
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: 上述例程将把 `Select._limit` 和 `Select._offset` 整数值呈现为嵌入在 SQL 语句中的字面整数。这是对于不支持在 SELECT
    语句的 LIMIT/OFFSET 子句中使用绑定参数的数据库的常见要求。然而，将整数值呈现在初始编译阶段直接**与缓存不兼容**，因为 [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象的限制和偏移整数值不是缓存键的一部分，因此许多具有不同限制/偏移值的 [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 语句不会呈现正确的值。
- en: 'The correction for the above code is to move the literal integer into SQLAlchemy’s
    [post-compile](../changelog/migration_14.html#change-4808) facility, which will
    render the literal integer outside of the initial compilation stage, but instead
    at execution time before the statement is sent to the DBAPI. This is accessed
    within the compilation stage using the [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method, in conjunction
    with using the `Select._limit_clause` and `Select._offset_clause` attributes,
    which represent the LIMIT/OFFSET as a complete SQL expression, as follows:'
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: 以上代码的修正是将字面整数移动到 SQLAlchemy 的 [post-compile](../changelog/migration_14.html#change-4808)
    设施中，这将在初始编译阶段之外呈现字面整数，而是在执行时间之前将语句发送到 DBAPI。这在编译阶段使用 [`BindParameter.render_literal_execute()`](sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") 方法访问，结合使用 `Select._limit_clause`
    和 `Select._offset_clause` 属性，这些属性表示 LIMIT/OFFSET 作为完整 SQL 表达式，如下所示：
- en: '[PRE395]'
  id: totrans-2150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: 'The approach above will generate a compiled SELECT statement that looks like:'
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法将生成一个编译后的 SELECT 语句，如下所示：
- en: '[PRE396]'
  id: totrans-2152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: Where above, the `__[POSTCOMPILE_param_1]` and `__[POSTCOMPILE_param_2]` indicators
    will be populated with their corresponding integer values at statement execution
    time, after the SQL string has been retrieved from the cache.
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，`__[POSTCOMPILE_param_1]` 和 `__[POSTCOMPILE_param_2]` 指示符将在语句执行时用其对应的整数值填充，此时
    SQL 字符串已从缓存中检索到。
- en: After changes like the above have been made as appropriate, the [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") flag should be set to `True`.
    It is strongly recommended that third party dialects make use of the [dialect
    third party test suite](https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst)
    which will assert that operations like SELECTs with LIMIT/OFFSET are correctly
    rendered and cached.
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当进行了类似上述更改之后，应将 [`Dialect.supports_statement_cache`](internals.html#sqlalchemy.engine.Dialect.supports_statement_cache
    "sqlalchemy.engine.Dialect.supports_statement_cache") 标志设置为 `True`。强烈建议第三方方言使用
    [方言第三方测试套件](https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst)，该测试套件将断言像带有
    LIMIT/OFFSET 的 SELECT 语句的操作是否正确呈现和缓存。
- en: See also
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Why is my application slow after upgrading to 1.4 and/or 2.x?](../faq/performance.html#faq-new-caching)
    - in the [Frequently Asked Questions](../faq/index.html) section'
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: '[为什么升级到 1.4 和/或 2.x 后我的应用变慢？](../faq/performance.html#faq-new-caching) - 在
    [常见问题解答](../faq/index.html) 部分'
- en: '### Using Lambdas to add significant speed gains to statement production'
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 Lambda 来显著提高语句生成的速度'
- en: Deep Alchemy
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: 深度合成
- en: This technique is generally non-essential except in very performance intensive
    scenarios, and intended for experienced Python programmers. While fairly straightforward,
    it involves metaprogramming concepts that are not appropriate for novice Python
    developers. The lambda approach can be applied to at a later time to existing
    code with a minimal amount of effort.
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
  zh: 此技术通常在非常性能密集的情况下非必要，并且面向经验丰富的 Python 程序员。虽然相当简单直接，但涉及到不适合初学者 Python 开发者的元编程概念。Lambda
    方法可以稍后应用于现有代码，而付出的努力很小。
- en: Python functions, typically expressed as lambdas, may be used to generate SQL
    expressions which are cacheable based on the Python code location of the lambda
    function itself as well as the closure variables within the lambda. The rationale
    is to allow caching of not only the SQL string-compiled form of a SQL expression
    construct as is SQLAlchemy’s normal behavior when the lambda system isn’t used,
    but also the in-Python composition of the SQL expression construct itself, which
    also has some degree of Python overhead.
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数通常以 lambda 表达式的形式表达，可以用于生成可基于 lambda 函数本身的 Python 代码位置和 lambda 内的闭包变量进行缓存的
    SQL 表达式。其原理是允许缓存不仅是 SQL 表达式构造的 SQL 字符串编译形式，这是 SQLAlchemy 在未使用 lambda 系统时的正常行为，还有
    SQL 表达式构造本身的 Python 组合，这也具有一定程度的 Python 开销。
- en: The lambda SQL expression feature is available as a performance enhancing feature,
    and is also optionally used in the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") ORM option in order to provide a generic
    SQL fragment.
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda SQL 表达式特性可作为性能增强功能使用，也可选择性地用于 [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") ORM 选项中，以提供通用的 SQL 片段。
- en: Synopsis
  id: totrans-2162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 概要
- en: Lambda statements are constructed using the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") function, which returns an instance of
    [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement"), which is itself an executable
    statement construct. Additional modifiers and criteria are added to the object
    using the Python addition operator `+`, or alternatively the [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") method which
    allows for more options.
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 语句使用 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 函数构建，该函数返回一个 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 实例，它本身是可执行的语句构造。可以使用 Python
    加法运算符 `+` 或者 [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") 方法向对象添加额外的修改器和条件，从而提供更多选项。
- en: 'It is assumed that the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") construct is being invoked within an
    enclosing function or method that expects to be used many times within an application,
    so that subsequent executions beyond the first one can take advantage of the compiled
    SQL being cached. When the lambda is constructed inside of an enclosing function
    in Python it is then subject to also having closure variables, which are significant
    to the whole approach:'
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt "sqlalchemy.sql.expression.lambda_stmt")
    构造被调用在一个期望在应用程序中多次使用的封闭函数或方法中，以便在第一次执行之后可以利用已缓存的编译 SQL。当 lambda 在 Python 的封闭函数内构建时，它也可能具有闭包变量，这对整个方法至关重要：
- en: '[PRE397]'
  id: totrans-2165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: Above, the three `lambda` callables that are used to define the structure of
    a SELECT statement are invoked exactly once, and the resulting SQL string cached
    in the compilation cache of the engine. From that point forward, the `run_my_statement()`
    function may be invoked any number of times and the `lambda` callables within
    it will not be called, only used as cache keys to retrieve the already-compiled
    SQL.
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述例子中，用于定义 SELECT 语句结构的三个 `lambda` 可调用对象仅被调用一次，并且生成的 SQL 字符串被缓存到引擎的编译缓存中。从那时起，可以多次调用
    `run_my_statement()` 函数，而其中的 `lambda` 可调用对象不会被再次调用，仅用作缓存键以检索已经编译的 SQL。
- en: Note
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that there is already SQL caching in place when the
    lambda system is not used. The lambda system only adds an additional layer of
    work reduction per SQL statement invoked by caching the building up of the SQL
    construct itself and also using a simpler cache key.
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，当未使用 lambda 系统时，已经存在 SQL 缓存。Lambda 系统只是在每个 SQL 语句调用时增加了额外的工作减少层，通过缓存构建
    SQL 构造本身并且使用更简单的缓存键。
- en: Quick Guidelines for Lambdas
  id: totrans-2169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Lambda 的快速指南
- en: 'Above all, the emphasis within the lambda SQL system is ensuring that there
    is never a mismatch between the cache key generated for a lambda and the SQL string
    it will produce. The [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") and related objects will run and analyze
    the given lambda in order to calculate how it should be cached on each run, trying
    to detect any potential problems. Basic guidelines include:'
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，在 lambda SQL 系统中，重点是确保为 lambda 生成的缓存键和它将产生的 SQL 字符串之间永远不会出现不匹配。[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 和相关对象将运行和分析给定的 lambda，以计算在每次运行时应如何缓存它，试图检测任何潜在问题。基本准则包括：
- en: '**Any kind of statement is supported** - while it’s expected that [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs are the prime use case for [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt"), DML statements such as [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") and [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") are equally usable:'
  id: totrans-2171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持任何类型的语句** - 虽然预期 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造是 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 的主要用例，但诸如 [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 和 [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 等 DML 语句同样可用：'
- en: '[PRE398]'
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '**ORM use cases directly supported as well** - the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") can accommodate ORM functionality completely
    and used directly with [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  id: totrans-2173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ORM 使用案例也得到直接支持** - [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 可完全适应 ORM 功能，并可直接与 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 一起使用：'
- en: '[PRE399]'
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '**Bound parameters are automatically accommodated** - in contrast to SQLAlchemy’s
    previous “baked query” system, the lambda SQL system accommodates for Python literal
    values which become SQL bound parameters automatically. This means that even though
    a given lambda runs only once, the values that become bound parameters are extracted
    from the **closure** of the lambda on every run:'
  id: totrans-2175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定参数会自动适应** - 与 SQLAlchemy 以前的“烘焙查询”系统相比，lambda SQL 系统会自动适应成为 SQL 绑定参数的 Python
    文本值。这意味着即使给定的 lambda 只运行一次，但成为绑定参数的值是从 lambda 的 **闭包** 中提取的，每次运行都会提取：'
- en: '[PRE400]'
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: Above, [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") extracted the values of `x`
    and `y` from the **closure** of the lambda that is generated each time `my_stmt()`
    is invoked; these were substituted into the cached SQL construct as the values
    of the parameters.
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的例子中，[`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 从每次调用 `my_stmt()` 时生成的 lambda
    的 **闭包** 中提取了 `x` 和 `y` 的值；这些值被替换为参数的值，并缓存到 SQL 构造中。
- en: '**The lambda should ideally produce an identical SQL structure in all cases**
    - Avoid using conditionals or custom callables inside of lambdas that might make
    it produce different SQL based on inputs; if a function might conditionally use
    two different SQL fragments, use two separate lambdas:'
  id: totrans-2178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理想情况下，lambda 应该在所有情况下产生相同的 SQL 结构** - 避免在 lambda 内部使用条件语句或自定义可调用对象，这可能会根据输入产生不同的
    SQL；如果一个函数可能会有条件地使用两个不同的 SQL 片段，那么请使用两个单独的 lambda：'
- en: '[PRE401]'
  id: totrans-2179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: There are a variety of failures which can occur if the lambda does not produce
    a consistent SQL construct and some are not trivially detectable right now.
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 lambda 未产生一致的 SQL 构造，可能会发生各种失败，并且有些失败目前并不容易检测到。
- en: '**Don’t use functions inside the lambda to produce bound values** - the bound
    value tracking approach requires that the actual value to be used in the SQL statement
    be locally present in the closure of the lambda. This is not possible if values
    are generated from other functions, and the [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") should normally raise an error if this
    is attempted:'
  id: totrans-2181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要在lambda内部使用函数来产生绑定值** - 绑定值跟踪方法要求SQL语句中要使用的实际值在lambda的闭包中是本地存在的。如果值是从其他函数生成的，则这是不可能的，并且[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement")通常应该在尝试这样做时引发错误：'
- en: '[PRE402]'
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: 'Above, the use of `get_x()` and `get_y()`, if they are necessary, should occur
    **outside** of the lambda and assigned to a local closure variable:'
  id: totrans-2183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述情况下，如果需要使用`get_x()`和`get_y()`，应该在lambda外部**定义**并分配给一个本地闭包变量：
- en: '[PRE403]'
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '**Avoid referring to non-SQL constructs inside of lambdas as they are not cacheable
    by default** - this issue refers to how the [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") creates a cache key from other closure
    variables within the statement. In order to provide the best guarantee of an accurate
    cache key, all objects located in the closure of the lambda are considered to
    be significant, and none will be assumed to be appropriate for a cache key by
    default. So the following example will also raise a rather detailed error message:'
  id: totrans-2185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免在lambda内部引用非SQL构造，因为它们默认情况下不能被缓存** - 这个问题涉及到[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement")如何从语句中的其他闭包变量创建缓存键。为了提供准确的缓存键保证，lambda闭包中的所有对象都被认为是重要的，而且默认情况下不会被假定适合作为缓存键。因此，以下示例也会引发一个相当详细的错误消息：'
- en: '[PRE404]'
  id: totrans-2186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: The above error indicates that [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") will not assume that the `Foo` object
    passed in will continue to behave the same in all cases. It also won’t assume
    it can use `Foo` as part of the cache key by default; if it were to use the `Foo`
    object as part of the cache key, if there were many different `Foo` objects this
    would fill up the cache with duplicate information, and would also hold long-lasting
    references to all of these objects.
  id: totrans-2187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述错误表明[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement")不会假定传递的`Foo`对象在所有情况下都会继续以相同的方式工作。它也不会假定默认情况下可以将`Foo`用作缓存键的一部分；如果它要将`Foo`对象用作缓存键，如果有许多不同的`Foo`对象，这将填满缓存重复信息，并且还将长期持有对所有这些对象的引用。
- en: 'The best way to resolve the above situation is to not refer to `foo` inside
    of the lambda, and refer to it **outside** instead:'
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决上述情况的最佳方法是不要在lambda内部引用`foo`，而是**在外部**引用：
- en: '[PRE405]'
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: 'In some situations, if the SQL structure of the lambda is guaranteed to never
    change based on input, to pass `track_closure_variables=False` which will disable
    any tracking of closure variables other than those used for bound parameters:'
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，如果lambda的SQL结构保证不会根据输入而改变，则可以传递`track_closure_variables=False`，这将禁用除绑定参数之外的任何闭包变量的跟踪：
- en: '[PRE406]'
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: 'There is also the option to add objects to the element to explicitly form part
    of the cache key, using the `track_on` parameter; using this parameter allows
    specific values to serve as the cache key and will also prevent other closure
    variables from being considered. This is useful for cases where part of the SQL
    being constructed originates from a contextual object of some sort that may have
    many different values. In the example below, the first segment of the SELECT statement
    will disable tracking of the `foo` variable, whereas the second segment will explicitly
    track `self` as part of the cache key:'
  id: totrans-2192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有一个选项是将对象添加到元素中，明确形成缓存键的一部分，使用`track_on`参数；使用该参数允许特定值作为缓存键，并且还将防止考虑其他闭包变量。这对于SQL的一部分是来自某种上下文对象的情况很有用，该对象可能具有许多不同的值。在下面的示例中，SELECT语句的第一个段将禁用对`foo`变量的跟踪，而第二个段将明确跟踪`self`作为缓存键的一部分：
- en: '[PRE407]'
  id: totrans-2193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: Using `track_on` means the given objects will be stored long term in the lambda’s
    internal cache and will have strong references for as long as the cache doesn’t
    clear out those objects (an LRU scheme of 1000 entries is used by default).
  id: totrans-2194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`track_on`意味着给定的对象将长期存储在lambda的内部缓存中，并且只要缓存不清除这些对象（默认情况下使用1000个条目的LRU方案）就会有强引用。
- en: Cache Key Generation
  id: totrans-2195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓存键生成
- en: In order to understand some of the options and behaviors which occur with lambda
    SQL constructs, an understanding of the caching system is helpful.
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 lambda SQL 构造中发生的一些选项和行为，了解缓存系统是有帮助的。
- en: 'SQLAlchemy’s caching system normally generates a cache key from a given SQL
    expression construct by producing a structure that represents all the state within
    the construct:'
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的缓存系统通常通过生成一个表示构造内所有状态的结构来从给定的 SQL 表达式构造生成一个缓存键：
- en: '[PRE408]'
  id: totrans-2198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: The above key is stored in the cache which is essentially a dictionary, and
    the value is a construct that among other things stores the string form of the
    SQL statement, in this case the phrase “SELECT q”. We can observe that even for
    an extremely short query the cache key is pretty verbose as it has to represent
    everything that may vary about what’s being rendered and potentially executed.
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
  zh: 上述键存储在本质上是一个字典的缓存中，值是一个构造，其中包括 SQL 语句的字符串形式，本例中是短语 “SELECT q”。我们可以观察到，即使对于一个非常简短的查询，缓存键也相当冗长，因为它必须表示关于正在渲染和潜在执行的一切变化。
- en: 'The lambda construction system by contrast creates a different kind of cache
    key:'
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相反，lambda 构造系统创建了一种不同类型的缓存键：
- en: '[PRE409]'
  id: totrans-2201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: Above, we see a cache key that is vastly shorter than that of the non-lambda
    statement, and additionally that production of the `select(column("q"))` construct
    itself was not even necessary; the Python lambda itself contains an attribute
    called `__code__` which refers to a Python code object that within the runtime
    of the application is immutable and permanent.
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们看到的缓存键远远比非 lambda 语句的键要短得多，并且甚至生产 `select(column("q"))` 构造本身也是不必要的；Python
    lambda 本身包含一个称为 `__code__` 的属性，该属性引用应用程序运行时中不可变且永久的 Python 代码对象。
- en: 'When the lambda also includes closure variables, in the normal case that these
    variables refer to SQL constructs such as column objects, they become part of
    the cache key, or if they refer to literal values that will be bound parameters,
    they are placed in a separate element of the cache key:'
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
  zh: 当 lambda 还包含闭包变量时，在这些变量引用 SQL 构造（如列对象）的常规情况下，它们将成为缓存键的一部分；或者如果它们引用将成为绑定参数的文字值，则它们将放置在缓存键的一个单独元素中：
- en: '[PRE410]'
  id: totrans-2204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: 'The above [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") includes two lambdas, both
    of which refer to the `col` closure variable, so the cache key will represent
    both of these segments as well as the `column()` object:'
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 包括两个 lambda，两者都引用 `col` 闭包变量，因此缓存键将表示这两个段以及
    `column()` 对象：
- en: '[PRE411]'
  id: totrans-2206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: 'The second part of the cache key has retrieved the bound parameters that will
    be used when the statement is invoked:'
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存键的第二部分已检索到将在调用语句时使用的绑定参数：
- en: '[PRE412]'
  id: totrans-2208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: For a series of examples of “lambda” caching with performance comparisons, see
    the “short_selects” test suite within the [Performance](../orm/examples.html#examples-performance)
    performance example.
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: 关于“lambda”缓存的一系列示例及性能比较，请参见[性能](../orm/examples.html#examples-performance)示例中的“short_selects”测试套件。
- en: Synopsis
  id: totrans-2210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 概要
- en: Lambda statements are constructed using the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") function, which returns an instance of
    [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement"), which is itself an executable
    statement construct. Additional modifiers and criteria are added to the object
    using the Python addition operator `+`, or alternatively the [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") method which
    allows for more options.
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 语句使用 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 函数构建，该函数返回一个 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 实例，它本身是一个可执行语句构造。使用 Python
    加法运算符 `+` 或者 [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") 方法可以向对象添加其他修饰符和条件。
- en: 'It is assumed that the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") construct is being invoked within an
    enclosing function or method that expects to be used many times within an application,
    so that subsequent executions beyond the first one can take advantage of the compiled
    SQL being cached. When the lambda is constructed inside of an enclosing function
    in Python it is then subject to also having closure variables, which are significant
    to the whole approach:'
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: 假定 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt "sqlalchemy.sql.expression.lambda_stmt")
    构造被调用在一个期望在应用程序中被多次使用的封闭函数或方法内部，以便后续的执行除了第一次之外都可以利用已编译的 SQL 的缓存。当 lambda 在 Python
    的封闭函数内部构造时，它也受到闭包变量的影响，这对整个方法都是重要的：
- en: '[PRE413]'
  id: totrans-2213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: Above, the three `lambda` callables that are used to define the structure of
    a SELECT statement are invoked exactly once, and the resulting SQL string cached
    in the compilation cache of the engine. From that point forward, the `run_my_statement()`
    function may be invoked any number of times and the `lambda` callables within
    it will not be called, only used as cache keys to retrieve the already-compiled
    SQL.
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，用于定义 SELECT 语句结构的三个 `lambda` 可调用对象仅被调用一次，并且生成的 SQL 字符串被缓存到引擎的编译缓存中。从那时起，`run_my_statement()`
    函数可以被调用任意次数，而其中的 `lambda` 可调用对象将不会被调用，只会被用作缓存键来检索已经编译的 SQL。
- en: Note
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that there is already SQL caching in place when the
    lambda system is not used. The lambda system only adds an additional layer of
    work reduction per SQL statement invoked by caching the building up of the SQL
    construct itself and also using a simpler cache key.
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当未使用 lambda 系统时，已经存在 SQL 缓存。lambda 系统只是在每个 SQL 语句调用时添加了一个额外的工作减少层，通过缓存 SQL
    构造的构建以及使用一个更简单的缓存键。
- en: Quick Guidelines for Lambdas
  id: totrans-2217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Lambdas 的快速指南
- en: 'Above all, the emphasis within the lambda SQL system is ensuring that there
    is never a mismatch between the cache key generated for a lambda and the SQL string
    it will produce. The [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") and related objects will run and analyze
    the given lambda in order to calculate how it should be cached on each run, trying
    to detect any potential problems. Basic guidelines include:'
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，在 lambda SQL 系统中，重点是确保生成的 lambda 的缓存键与它将产生的 SQL 字符串之间永远不会不匹配。[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 和相关对象将运行和分析给定的 lambda，以便计算应该在每次运行时如何缓存它，试图检测任何潜在问题。基本指南包括：
- en: '**Any kind of statement is supported** - while it’s expected that [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs are the prime use case for [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt"), DML statements such as [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") and [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") are equally usable:'
  id: totrans-2219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持任何类型的语句** - 虽然预期 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造是 [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 的主要用例，但诸如 [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 和 [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 的 DML 语句同样可用：'
- en: '[PRE414]'
  id: totrans-2220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '**ORM use cases directly supported as well** - the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") can accommodate ORM functionality completely
    and used directly with [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  id: totrans-2221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ORM 用例直接支持** - [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") 完全可以容纳 ORM 功能，并直接与 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 一起使用：'
- en: '[PRE415]'
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '**Bound parameters are automatically accommodated** - in contrast to SQLAlchemy’s
    previous “baked query” system, the lambda SQL system accommodates for Python literal
    values which become SQL bound parameters automatically. This means that even though
    a given lambda runs only once, the values that become bound parameters are extracted
    from the **closure** of the lambda on every run:'
  id: totrans-2223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定参数会自动适应** - 与 SQLAlchemy 以前的“烘焙查询”系统相比，lambda SQL 系统会自动适应成为 SQL 绑定参数的 Python
    文字值。这意味着即使给定的 lambda 只运行一次，成为绑定参数的值也会在每次运行时从 lambda 的**闭包**中提取出来：'
- en: '[PRE416]'
  id: totrans-2224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: Above, [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") extracted the values of `x`
    and `y` from the **closure** of the lambda that is generated each time `my_stmt()`
    is invoked; these were substituted into the cached SQL construct as the values
    of the parameters.
  id: totrans-2225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面，[`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 从每次调用 `my_stmt()` 时生成的 lambda
    的**闭包**中提取了 `x` 和 `y` 的值；这些值被替换为参数的值，并缓存在 SQL 构造中。
- en: '**The lambda should ideally produce an identical SQL structure in all cases**
    - Avoid using conditionals or custom callables inside of lambdas that might make
    it produce different SQL based on inputs; if a function might conditionally use
    two different SQL fragments, use two separate lambdas:'
  id: totrans-2226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lambda 最好在所有情况下生成相同的 SQL 结构** - 避免在 lambda 内部使用条件语句或自定义可调用对象，这些可能会基于输入生成不同的
    SQL；如果函数可能会有条件地使用两个不同的 SQL 片段，请使用两个单独的 lambda：'
- en: '[PRE417]'
  id: totrans-2227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: There are a variety of failures which can occur if the lambda does not produce
    a consistent SQL construct and some are not trivially detectable right now.
  id: totrans-2228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 lambda 表达式不能生成一致的 SQL 结构，可能会发生各种故障，其中一些目前并不容易检测到。
- en: '**Don’t use functions inside the lambda to produce bound values** - the bound
    value tracking approach requires that the actual value to be used in the SQL statement
    be locally present in the closure of the lambda. This is not possible if values
    are generated from other functions, and the [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") should normally raise an error if this
    is attempted:'
  id: totrans-2229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要在 lambda 内部使用函数生成绑定值** - 绑定值跟踪方法要求 SQL 语句中要使用的实际值在 lambda 的闭包中局部存在。如果值是从其他函数生成的，则这是不可能的，并且如果尝试这样做，[`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 通常应该引发错误：'
- en: '[PRE418]'
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'Above, the use of `get_x()` and `get_y()`, if they are necessary, should occur
    **outside** of the lambda and assigned to a local closure variable:'
  id: totrans-2231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面，如果必要，应该在 lambda 外部使用 `get_x()` 和 `get_y()`，并将其分配给本地闭包变量：
- en: '[PRE419]'
  id: totrans-2232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '**Avoid referring to non-SQL constructs inside of lambdas as they are not cacheable
    by default** - this issue refers to how the [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") creates a cache key from other closure
    variables within the statement. In order to provide the best guarantee of an accurate
    cache key, all objects located in the closure of the lambda are considered to
    be significant, and none will be assumed to be appropriate for a cache key by
    default. So the following example will also raise a rather detailed error message:'
  id: totrans-2233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免在 lambda 内部引用非 SQL 结构，因为它们默认情况下无法缓存** - 此问题涉及 [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 如何从语句中的其他闭包变量创建缓存键。为了提供对准确缓存键的最佳保证，
    lambda 中闭包中的所有对象都被认为是重要的，且默认情况下不会假设适用于缓存键。因此，以下示例也会引发相当详细的错误消息：'
- en: '[PRE420]'
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: The above error indicates that [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") will not assume that the `Foo` object
    passed in will continue to behave the same in all cases. It also won’t assume
    it can use `Foo` as part of the cache key by default; if it were to use the `Foo`
    object as part of the cache key, if there were many different `Foo` objects this
    would fill up the cache with duplicate information, and would also hold long-lasting
    references to all of these objects.
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述错误表明 [`LambdaElement`](foundation.html#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") 不会假设传入的 `Foo` 对象在所有情况下都会保持相同的行为。它也不会假设默认情况下可以将
    `Foo` 用作缓存键的一部分；如果将 `Foo` 对象用作缓存键的一部分，如果有许多不同的 `Foo` 对象，这将填满缓存并且还会对所有这些对象保持长时间的引用。
- en: 'The best way to resolve the above situation is to not refer to `foo` inside
    of the lambda, and refer to it **outside** instead:'
  id: totrans-2236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决上述情况的最佳方法是不在 Lambda 内部引用 `foo`，而是在**外部**引用它：
- en: '[PRE421]'
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: 'In some situations, if the SQL structure of the lambda is guaranteed to never
    change based on input, to pass `track_closure_variables=False` which will disable
    any tracking of closure variables other than those used for bound parameters:'
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，如果 Lambda 的 SQL 结构保证不会根据输入改变，可以传递 `track_closure_variables=False`，这将禁用对除了用于绑定参数的变量之外的任何闭包变量的跟踪：
- en: '[PRE422]'
  id: totrans-2239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: 'There is also the option to add objects to the element to explicitly form part
    of the cache key, using the `track_on` parameter; using this parameter allows
    specific values to serve as the cache key and will also prevent other closure
    variables from being considered. This is useful for cases where part of the SQL
    being constructed originates from a contextual object of some sort that may have
    many different values. In the example below, the first segment of the SELECT statement
    will disable tracking of the `foo` variable, whereas the second segment will explicitly
    track `self` as part of the cache key:'
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有一个选项可以将对象添加到元素中，以明确形成缓存键的一部分，使用 `track_on` 参数；使用此参数允许特定值作为缓存键，并且还会阻止其他闭包变量被考虑。这对于
    SQL 的一部分构造源自某种上下文对象且可能具有许多不同值的情况非常有用。在下面的示例中，SELECT 语句的第一个片段将禁用对 `foo` 变量的跟踪，而第二个片段将明确跟踪
    `self` 作为缓存键的一部分：
- en: '[PRE423]'
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: Using `track_on` means the given objects will be stored long term in the lambda’s
    internal cache and will have strong references for as long as the cache doesn’t
    clear out those objects (an LRU scheme of 1000 entries is used by default).
  id: totrans-2242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `track_on` 意味着给定对象将长期存储在 Lambda 的内部缓存中，并且只要缓存不清除这些对象（默认使用 1000 条记录的 LRU 方案），它们就会具有强引用。
- en: Cache Key Generation
  id: totrans-2243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓存键生成
- en: In order to understand some of the options and behaviors which occur with lambda
    SQL constructs, an understanding of the caching system is helpful.
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 Lambda SQL 构造中发生的一些选项和行为，了解缓存系统是有帮助的。
- en: 'SQLAlchemy’s caching system normally generates a cache key from a given SQL
    expression construct by producing a structure that represents all the state within
    the construct:'
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的缓存系统通常通过生成一个表示构造内所有状态的结构来从给定的 SQL 表达式构造生成缓存键：
- en: '[PRE424]'
  id: totrans-2246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: The above key is stored in the cache which is essentially a dictionary, and
    the value is a construct that among other things stores the string form of the
    SQL statement, in this case the phrase “SELECT q”. We can observe that even for
    an extremely short query the cache key is pretty verbose as it has to represent
    everything that may vary about what’s being rendered and potentially executed.
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
  zh: 上述键存储在基本上是字典的缓存中，而值是一个构造，其中包括 SQL 语句的字符串形式，本例中是短语 “SELECT q”。我们可以观察到，即使是一个极短的查询，缓存键也非常冗长，因为它必须表示关于正在渲染和潜在执行的所有可能变化的内容。
- en: 'The lambda construction system by contrast creates a different kind of cache
    key:'
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Lambda 构造系统创建了一种不同类型的缓存键：
- en: '[PRE425]'
  id: totrans-2249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: Above, we see a cache key that is vastly shorter than that of the non-lambda
    statement, and additionally that production of the `select(column("q"))` construct
    itself was not even necessary; the Python lambda itself contains an attribute
    called `__code__` which refers to a Python code object that within the runtime
    of the application is immutable and permanent.
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
  zh: 以上是一个缓存键，远比非 Lambda 语句的要短得多，而且此处生产 `select(column("q"))` 构造本身甚至都不是必要的；Python
    Lambda 本身包含一个名为 `__code__` 的属性，指向一个在应用程序运行时不可变且永久存在的 Python 代码对象。
- en: 'When the lambda also includes closure variables, in the normal case that these
    variables refer to SQL constructs such as column objects, they become part of
    the cache key, or if they refer to literal values that will be bound parameters,
    they are placed in a separate element of the cache key:'
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Lambda 也包含闭包变量时，在这些变量引用 SQL 构造（如列对象）的常规情况下，它们成为缓存键的一部分，或者如果它们引用将作为绑定参数的文字值，则将它们放在缓存键的一个单独元素中：
- en: '[PRE426]'
  id: totrans-2252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: 'The above [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") includes two lambdas, both
    of which refer to the `col` closure variable, so the cache key will represent
    both of these segments as well as the `column()` object:'
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 包含两个 lambda，两者都引用了 `col` 闭包变量，因此缓存键将表示这两个段以及
    `column()` 对象。
- en: '[PRE427]'
  id: totrans-2254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: 'The second part of the cache key has retrieved the bound parameters that will
    be used when the statement is invoked:'
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存键的第二部分已检索出在调用语句时将使用的绑定参数：
- en: '[PRE428]'
  id: totrans-2256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: For a series of examples of “lambda” caching with performance comparisons, see
    the “short_selects” test suite within the [Performance](../orm/examples.html#examples-performance)
    performance example.
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用性能比较的“lambda”缓存的一系列示例，请参见[性能](../orm/examples.html#examples-performance)
    示例中的 “short_selects” 测试套件。
- en: '## “Insert Many Values” Behavior for INSERT statements'
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: '## 插入语句的“插入多个值”行为'
- en: 'New in version 2.0: see [Optimized ORM bulk insert now implemented for all
    backends other than MySQL](../changelog/whatsnew_20.html#change-6047) for background
    on the change including sample performance tests'
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能 2.0 版本中：有关更改的背景，请参见 [优化的 ORM 批量插入现在已针对除 MySQL 外的所有后端实现](../changelog/whatsnew_20.html#change-6047)，其中包括示例性能测试
- en: Tip
  id: totrans-2260
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [insertmanyvalues](../glossary.html#term-insertmanyvalues) feature is a
    **transparently available** performance feature which requires no end-user intervention
    in order for it to take place as needed. This section describes the architecture
    of the feature as well as how to measure its performance and tune its behavior
    in order to optimize the speed of bulk INSERT statements, particularly as used
    by the ORM.
  id: totrans-2261
  prefs: []
  type: TYPE_NORMAL
  zh: '[insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能是一种**透明可用**的性能特性，无需最终用户进行干预即可按需发生。本节描述了该特性的架构以及如何衡量其性能并调整其行为，以优化批量
    INSERT 语句的速度，特别是 ORM 中使用的情况。'
- en: As more databases have added support for INSERT..RETURNING, SQLAlchemy has undergone
    a major change in how it approaches the subject of INSERT statements where there’s
    a need to acquire server-generated values, most importantly server-generated primary
    key values which allow the new row to be referenced in subsequent operations.
    In particular, this scenario has long been a significant performance issue in
    the ORM, which relies on being able to retrieve server-generated primary key values
    in order to correctly populate the [identity map](../glossary.html#term-identity-map).
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的数据库支持 INSERT..RETURNING，SQLAlchemy 在处理需要获取服务器生成值的 INSERT 语句的方式上发生了重大变化，最重要的是服务器生成的主键值，它允许在后续操作中引用新行。特别是，这种情况长期以来一直是
    ORM 中的一个重大性能问题，ORM 依赖于能够检索服务器生成的主键值，以便正确填充 [identity map](../glossary.html#term-identity-map)。
- en: With recent support for RETURNING added to SQLite and MariaDB, SQLAlchemy no
    longer needs to rely upon the single-row-only [cursor.lastrowid](https://peps.python.org/pep-0249/#lastrowid)
    attribute provided by the [DBAPI](../glossary.html#term-DBAPI) for most backends;
    RETURNING may now be used for all [SQLAlchemy-included](../dialects/index.html#included-dialects)
    backends with the exception of MySQL. The remaining performance limitation, that
    the [cursor.executemany()](https://peps.python.org/pep-0249/#executemany) DBAPI
    method does not allow for rows to be fetched, is resolved for most backends by
    foregoing the use of `executemany()` and instead restructuring individual INSERT
    statements to each accommodate a large number of rows in a single statement that
    is invoked using `cursor.execute()`. This approach originates from the [psycopg2
    fast execution helpers](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)
    feature of the `psycopg2` DBAPI, which SQLAlchemy incrementally added more and
    more support towards in recent release series.
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: 随着最近对 SQLite 和 MariaDB 添加了对 RETURNING 的支持，SQLAlchemy 不再需要依赖于大多数后端仅支持单行 [cursor.lastrowid](https://peps.python.org/pep-0249/#lastrowid)
    属性提供的 [DBAPI](../glossary.html#term-DBAPI)；现在可以对所有 [SQLAlchemy 包含的](../dialects/index.html#included-dialects)
    后端使用 RETURNING，除了 MySQL 外。剩下的性能限制是，[cursor.executemany()](https://peps.python.org/pep-0249/#executemany)
    DBAPI 方法不允许获取行，对于大多数后端来说，通过放弃使用 `executemany()`，而是重构单个 INSERT 语句以适应在单个语句中容纳大量行，并使用
    `cursor.execute()` 调用该语句来解决。这种方法源自于 `psycopg2` DBAPI 的 [psycopg2 快速执行辅助功能](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)
    特性，SQLAlchemy 在最近的发布系列中逐渐增加了对其的更多支持。
- en: Current Support
  id: totrans-2264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前支持
- en: The feature is enabled for all backend included in SQLAlchemy that support RETURNING,
    with the exception of Oracle for which both the cx_Oracle and OracleDB drivers
    offer their own equivalent feature. The feature normally takes place when making
    use of the [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") method of an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct in conjunction with [executemany](../glossary.html#term-executemany)
    execution, which occurs when passing a list of dictionaries to the [`Connection.execute.parameters`](#sqlalchemy.engine.Connection.execute.params.parameters
    "sqlalchemy.engine.Connection.execute") parameter of the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") methods (as well as equivalent methods under
    [asyncio](../orm/extensions/asyncio.html) and shorthand methods like [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")). It also takes place within the ORM [unit of
    work](../glossary.html#term-unit-of-work) process when using methods such as [`Session.add()`](../orm/session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") and [`Session.add_all()`](../orm/session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") to add rows.
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能对支持 RETURNING 的 SQLAlchemy 中的所有后端启用，但 Oracle 是个例外，因为 cx_Oracle 和 OracleDB
    驱动程序都提供了自己的等效功能。该功能通常在使用 [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 方法与 [executemany](../glossary.html#term-executemany)
    执行结合使用时发生，这发生在将字典列表传递给 [`Connection.execute.parameters`](#sqlalchemy.engine.Connection.execute.params.parameters
    "sqlalchemy.engine.Connection.execute.parameters") 参数的 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 或 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法（以及 [asyncio](../orm/extensions/asyncio.html)
    下的等效方法和类似 [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") 的速记方法）。在使用方法如 [`Session.add()`](../orm/session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") 和 [`Session.add_all()`](../orm/session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") 向表中添加行时，它也在 ORM [工作单元](../glossary.html#term-unit-of-work)
    过程中发生。
- en: 'For SQLAlchemy’s included dialects, support or equivalent support is currently
    as follows:'
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLAlchemy 的包含方言，支持或等效支持目前如下：
- en: SQLite - supported for SQLite versions 3.35 and above
  id: totrans-2267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 对 SQLite 版本 3.35 及以上提供支持
- en: PostgreSQL - all supported Postgresql versions (9 and above)
  id: totrans-2268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 所有支持的 Postgresql 版本（9 及以上）
- en: SQL Server - all supported SQL Server versions [[1]](#id2)
  id: totrans-2269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server - 所有支持的 SQL Server 版本 [[1]](#id2)
- en: MariaDB - supported for MariaDB versions 10.5 and above
  id: totrans-2270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB - 对 MariaDB 版本 10.5 及以上提供支持
- en: MySQL - no support, no RETURNING feature is present
  id: totrans-2271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 没有支持，没有 RETURNING 功能
- en: Oracle - supports RETURNING with executemany using native cx_Oracle / OracleDB
    APIs, for all supported Oracle versions 9 and above, using multi-row OUT parameters.
    This is not the same implementation as “executemanyvalues”, however has the same
    usage patterns and equivalent performance benefits.
  id: totrans-2272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 支持 RETURNING，使用本机 cx_Oracle / OracleDB API 和 executemany，适用于所有支持的 Oracle
    版本 9 及以上，使用多行 OUT 参数。这与“executemanyvalues”不是同一实现，但具有相同的使用模式和等效性能优势。
- en: 'Changed in version 2.0.10:'
  id: totrans-2273
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.10 开始更改：
- en: Disabling the feature
  id: totrans-2274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用该功能
- en: 'To disable the “insertmanyvalues” feature for a given backend for an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") overall, pass the [`create_engine.use_insertmanyvalues`](engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") parameter as `False` to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-2275
  prefs: []
  type: TYPE_NORMAL
  zh: 要为特定后端禁用“insertmanyvalues”功能，可以将 [`create_engine.use_insertmanyvalues`](engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") 参数传递为 `False` 给 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")：
- en: '[PRE429]'
  id: totrans-2276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: 'The feature can also be disabled from being used implicitly for a particular
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    by passing the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter as `False`:'
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过将 [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") 参数传递为 `False` 来禁用对特定 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的隐式使用。
- en: '[PRE430]'
  id: totrans-2278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: The reason one might want to disable RETURNING for a specific table is to work
    around backend-specific limitations.
  id: totrans-2279
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用 RETURNING 对于特定表格的原因是为了解决特定后端的限制。
- en: Batched Mode Operation
  id: totrans-2280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 批量模式操作
- en: 'The feature has two modes of operation, which are selected transparently on
    a per-dialect, per-[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    basis. One is **batched mode**, which reduces the number of database round trips
    by rewriting an INSERT statement of the form:'
  id: totrans-2281
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性有两种操作模式，根据方言和[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")选择透明模式。其中一种是**批量模式**，通过重写形如以下的INSERT语句来减少数据库往返次数：
- en: '[PRE431]'
  id: totrans-2282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: 'into a “batched” form such as:'
  id: totrans-2283
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为“批量”形式，如下：
- en: '[PRE432]'
  id: totrans-2284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: where above, the statement is organized against a subset (a “batch”) of the
    input data, the size of which is determined by the database backend as well as
    the number of parameters in each batch to correspond to known limits for statement
    size / number of parameters. The feature then executes the INSERT statement once
    for each batch of input data until all records are consumed, concatenating the
    RETURNING results for each batch into a single large rowset that’s available from
    a single [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object.
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的语句中，语句是针对输入数据的一个子集（一个“批量”）组织的，其大小由数据库后端以及每个批次中参数的数量确定，以对应于已知的语句大小/参数数量限制。然后，该特性对每个输入数据批次执行一次INSERT语句，直到所有记录都被使用，将每个批次的RETURNING结果连接成一个单一的大型结果集，可从单个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象获取。
- en: This “batched” form allows INSERT of many rows using much fewer database round
    trips, and has been shown to allow dramatic performance improvements for most
    backends where it’s supported.
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“批量”形式允许使用更少的数据库往返次数插入多行，并且已经证明在大多数支持的后端中可以实现显着的性能提升。
- en: '### Correlating RETURNING rows to parameter sets'
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将 RETURNING 行与参数集相关联'
- en: New in version 2.0.10.
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.10版本中的新功能。
- en: The “batch” mode query illustrated in the previous section does not guarantee
    the order of records returned would correspond with that of the input data. When
    used by the SQLAlchemy ORM [unit of work](../glossary.html#term-unit-of-work)
    process, as well as for applications which correlate returned server-generated
    values with input data, the [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") and [`UpdateBase.return_defaults()`](dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") methods include an option
    [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") which indicates that “insertmanyvalues”
    mode should guarantee this correspondence. This is **not related** to the order
    in which records are actually INSERTed by the database backend, which is **not**
    assumed under any circumstances; only that the returned records should be organized
    when received back to correspond to the order in which the original input data
    was passed.
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中示例的“批量”模式查询不保证返回的记录顺序与输入数据的顺序相对应。当由SQLAlchemy ORM [工作单元](../glossary.html#term-unit-of-work)
    进程使用时，以及与将返回的服务器生成的值与输入数据进行关联的应用程序一起使用时，[`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 和 [`UpdateBase.return_defaults()`](dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法包括一个选项 [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order")，表示“insertmanyvalues”模式应保证此对应关系。这与实际由数据库后端实际插入记录的顺序无关，这在任何情况下都不被假定；只有在接收返回的记录时，返回的记录应该被组织起来，以对应于原始输入数据传递的顺序。
- en: When the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") parameter is present, for tables
    that use server-generated integer primary key values such as `IDENTITY`, PostgreSQL
    `SERIAL`, MariaDB `AUTO_INCREMENT`, or SQLite’s `ROWID` scheme, “batch” mode may
    instead opt to use a more complex INSERT..RETURNING form, in conjunction with
    post-execution sorting of rows based on the returned values, or if such a form
    is not available, the “insertmanyvalues” feature may gracefully degrade to “non-batched”
    mode which runs individual INSERT statements for each parameter set.
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") 参数存在时，对于使用服务器生成的整数主键值的表，如 `IDENTITY`、PostgreSQL
    `SERIAL`、MariaDB `AUTO_INCREMENT` 或 SQLite 的 `ROWID` 方案，"batch" 模式可能会选择使用更复杂的
    INSERT..RETURNING 形式，并结合基于返回值的行的后执行排序，或者如果不存在这样的形式，"insertmanyvalues" 功能可能会优雅地降级到
    "non-batched" 模式，为每个参数集运行单独的 INSERT 语句。
- en: 'For example, on SQL Server when an auto incrementing `IDENTITY` column is used
    as the primary key, the following SQL form is used:'
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 SQL Server 上，当自动增量的 `IDENTITY` 列用作主键时，将使用以下 SQL 形式：
- en: '[PRE433]'
  id: totrans-2292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: A similar form is used for PostgreSQL as well, when primary key columns use
    SERIAL or IDENTITY. The above form **does not** guarantee the order in which rows
    are inserted. However, it does guarantee that the IDENTITY or SERIAL values will
    be created in order with each parameter set [[2]](#id5). The “insertmanyvalues”
    feature then sorts the returned rows for the above INSERT statement by incrementing
    integer identity.
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
  zh: 当主键列使用 SERIAL 或 IDENTITY 时，PostgreSQL 也使用类似的形式。上述形式**不**保证插入行的顺序。但是，它确保 IDENTITY
    或 SERIAL 值将与每个参数集按顺序创建[[2]](#id5)。然后，"insertmanyvalues" 功能通过递增整数标识对上述 INSERT 语句的返回行进行排序。
- en: For the SQLite database, there is no appropriate INSERT form that can correlate
    the production of new ROWID values with the order in which the parameter sets
    are passed. As a result, when using server-generated primary key values, the SQLite
    backend will degrade to “non-batched” mode when ordered RETURNING is requested.
    For MariaDB, the default INSERT form used by insertmanyvalues is sufficient, as
    this database backend will line up the order of AUTO_INCREMENT with the order
    of input data when using InnoDB [[3]](#id6).
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLite 数据库，没有适当的 INSERT 形式可以将新的 ROWID 值的生成与传递的参数集的顺序相关联。因此，当使用服务器生成的主键值时，当请求有序
    RETURNING 时，SQLite 后端将降级为 "non-batched" 模式。对于 MariaDB，默认的 INSERT 形式由 insertmanyvalues
    使用，因为此数据库后端在使用 InnoDB 时会将 AUTO_INCREMENT 的顺序与输入数据的顺序对齐[[3]](#id6)。
- en: For a client-side generated primary key, such as when using the Python `uuid.uuid4()`
    function to generate new values for a [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") column, the “insertmanyvalues” feature transparently
    includes this column in the RETURNING records and correlates its value to that
    of the given input records, thus maintaining correspondence between input records
    and result rows. From this, it follows that all backends allow for batched, parameter-correlated
    RETURNING order when client-side-generated primary key values are used.
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
  zh: 对于客户端生成的主键，例如使用 Python 的 `uuid.uuid4()` 函数为 [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 列生成新值时，"insertmanyvalues" 功能会透明地将此列包含在 RETURNING 记录中，并将其值与给定输入记录的值相关联，从而保持输入记录和结果行之间的对应关系。由此可见，当使用客户端生成的主键值时，所有后端都允许批量、参数相关的
    RETURNING 顺序。
- en: The subject of how “insertmanyvalues” “batch” mode determines a column or columns
    to use as a point of correspondence between input parameters and RETURNING rows
    is known as an [insert sentinel](../glossary.html#term-insert-sentinel), which
    is a specific column or columns that are used to track such values. The “insert
    sentinel” is normally selected automatically, however can also be user-configuration
    for extremely special cases; the section [Configuring Sentinel Columns](#engine-insertmanyvalues-sentinel-columns)
    describes this.
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues” “batch” 模式确定用作输入参数和 RETURNING 行之间对应点的列或列的主题被称为 [insert sentinel](../glossary.html#term-insert-sentinel)，这是一种特定的列或列，用于跟踪此类值。通常会自动选择“insert
    sentinel”，但也可以为极端特殊情况进行用户配置；章节 [配置 Sentinel 列](#engine-insertmanyvalues-sentinel-columns)
    描述了这一点。
- en: For backends that do not offer an appropriate INSERT form that can deliver server-generated
    values deterministically aligned with input values, or for [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") configurations that feature other kinds of server generated
    primary key values, “insertmanyvalues” mode will make use of **non-batched** mode
    when guaranteed RETURNING ordering is requested.
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有提供适当的 INSERT 形式以确定性地提供与输入值对齐的服务器生成值的后端，或对于具有其他类型的服务器生成主键值的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 配置，当请求保证 RETURNING 排序时，“insertmanyvalues” 模式将在需要时使用
    **非批量** 模式。
- en: See also
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Microsoft SQL Server rationale
  id: totrans-2299
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server 的原理
- en: ''
  id: totrans-2300
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2301
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2302
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: “INSERT queries that use SELECT with ORDER BY to populate rows guarantees how
    identity values are computed but not the order in which the rows are inserted.”
    [https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions](https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions)
  id: totrans-2303
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: “使用 SELECT 结合 ORDER BY 来填充行的 INSERT 查询保证了如何计算标识值，但不保证插入行的顺序。” [https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions](https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions)
- en: ''
  id: totrans-2304
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2305
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PostgreSQL batched INSERT Discussion
  id: totrans-2306
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 批量插入讨论
- en: ''
  id: totrans-2307
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2308
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2309
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Original description in 2018 [https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us](https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us)
  id: totrans-2310
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2018 年的原始描述 [https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us](https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us)
- en: ''
  id: totrans-2311
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2312
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2313
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Follow up in 2023 - [https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com](https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com)
  id: totrans-2314
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2023 年的跟进 - [https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com](https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com)
- en: 'MariaDB AUTO_INCREMENT behavior (using the same InnoDB engine as MySQL):'
  id: totrans-2315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB AUTO_INCREMENT 行为（使用与 MySQL 相同的 InnoDB 引擎）：
- en: '[https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)'
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)'
- en: '[https://dba.stackexchange.com/a/72099](https://dba.stackexchange.com/a/72099)  ###
    Non-Batched Mode Operation'
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dba.stackexchange.com/a/72099](https://dba.stackexchange.com/a/72099)  ###
    非批量模式操作'
- en: For [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    configurations that do not have client side primary key values, and offer server-generated
    primary key values (or no primary key) that the database in question is not able
    to invoke in a deterministic or sortable way relative to multiple parameter sets,
    the “insertmanyvalues” feature when tasked with satisfying the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") requirement for an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement may instead opt to use **non-batched
    mode**.
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有客户端主键值并提供服务器生成主键值（或没有主键）的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 配置，并且数据库无法根据多个参数集以确定性或可排序的方式调用的情况，“insertmanyvalues”
    特性在为 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    语句满足 [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order") 要求时可能选择使用
    **非批量** 模式。
- en: In this mode, the original SQL form of INSERT is maintained, and the “insertmanyvalues”
    feature will instead run the statement as given for each parameter set individually,
    organizing the returned rows into a full result set. Unlike previous SQLAlchemy
    versions, it does so in a tight loop that minimizes Python overhead. In some cases,
    such as on SQLite, “non-batched” mode performs exactly as well as “batched” mode.
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模式下，保留了原始的 SQL INSERT 形式，并且 “insertmanyvalues” 特性将为每个参数集单独运行语句，将返回的行组织成完整的结果集。与之前的
    SQLAlchemy 版本不同，它通过最小化 Python 开销来紧密循环执行。在某些情况下，例如在 SQLite 上，“非批量” 模式的性能与 “批量”
    模式完全相同。
- en: Statement Execution Model
  id: totrans-2320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语句执行模型
- en: For both “batched” and “non-batched” modes, the feature will necessarily invoke
    **multiple INSERT statements** using the DBAPI `cursor.execute()` method, within
    the scope of **single** call to the Core-level [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, with each statement containing
    up to a fixed limit of parameter sets. This limit is configurable as described
    below at [Controlling the Batch Size](#engine-insertmanyvalues-page-size). The
    separate calls to `cursor.execute()` are logged individually and also individually
    passed along to event listeners such as [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") (see [Logging and
    Events](#engine-insertmanyvalues-events) below).
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是“批量”模式还是“非批量”模式，该功能都会必然使用 DBAPI `cursor.execute()` 方法调用 **多个 INSERT 语句**，在
    **单个** 调用核心级别 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    方法的范围内，每个语句包含多达一组固定参数的限制。如下所述，此限制可以配置在 [控制批处理大小](#engine-insertmanyvalues-page-size)
    处。对 `cursor.execute()` 的单独调用将分别记录，并且也将分别传递给事件监听器，例如 [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")（请参阅下面的 [日志和事件](#engine-insertmanyvalues-events)）。
- en: '#### Configuring Sentinel Columns'
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 配置哨兵列'
- en: In typical cases, the “insertmanyvalues” feature in order to provide INSERT..RETURNING
    with deterministic row order will automatically determine a sentinel column from
    a given table’s primary key, gracefully degrading to “row at a time” mode if one
    cannot be identified. As a completely **optional** feature, to get full “insertmanyvalues”
    bulk performance for tables that have server generated primary keys whose default
    generator functions aren’t compatible with the “sentinel” use case, other non-primary
    key columns may be marked as “sentinel” columns assuming they meet certain requirements.
    A typical example is a non-primary key [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") column with a client side default such as the Python
    `uuid.uuid4()` function. There is also a construct to create simple integer columns
    with a a client side integer counter oriented towards the “insertmanyvalues” use
    case.
  id: totrans-2323
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型情况下，“insertmanyvalues”功能为了提供带有确定性行顺序的 INSERT..RETURNING 将自动从给定表的主键中确定哨兵列，如果无法识别，则会优雅地降级为“逐行”模式。作为一个完全
    **可选** 的功能，为了获取对于具有服务器生成的主键的表的完整“insertmanyvalues”批量性能，其默认生成器函数与“哨兵”用例不兼容，其他非主键列可以被标记为“哨兵”列，假设它们符合某些要求。一个典型的例子是具有客户端默认值的非主键
    [`Uuid`](type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") 列，例如
    Python `uuid.uuid4()` 函数。还有一种构造用于创建简单的整数列，其具有面向“insertmanyvalues”用例的客户端整数计数器。
- en: 'Sentinel columns may be indicated by adding [`Column.insert_sentinel`](metadata.html#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column") to qualifying columns. The most basic “qualifying”
    column is a not-nullable, unique column with a client side default, such as a
    UUID column as follows:'
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在合格列上添加 [`Column.insert_sentinel`](metadata.html#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column") 来指示哨兵列。最基本的“合格”列是一个非空唯一列，具有客户端默认值，例如以下 UUID 列：
- en: '[PRE434]'
  id: totrans-2325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: 'When using ORM Declarative models, the same forms are available using the [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct:'
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 ORM 声明性模型时，可以使用 [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造相同的表单：
- en: '[PRE435]'
  id: totrans-2327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: While the values generated by the default generator **must** be unique, the
    actual UNIQUE constraint on the above “sentinel” column, indicated by the `unique=True`
    parameter, itself is optional and may be omitted if not desired.
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然默认生成器生成的值 **必须** 是唯一的，但上述“哨兵”列上的实际 UNIQUE 约束，由 `unique=True` 参数指示，本身是可选的，如果不需要可以省略。
- en: 'There is also a special form of “insert sentinel” that’s a dedicated nullable
    integer column which makes use of a special default integer counter that’s only
    used during “insertmanyvalues” operations; as an additional behavior, the column
    will omit itself from SQL statements and result sets and behave in a mostly transparent
    manner. It does need to be physically present within the actual database table,
    however. This style of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    may be constructed using the function [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel"):'
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种特殊形式的“插入哨兵”，它是一个专用的可空整数列，利用一个特殊的默认整数计数器，仅在“insertmanyvalues”操作期间使用；作为额外的行为，该列将在SQL语句和结果集中省略自身，并以基本透明的方式行为。但是，它确实需要在实际数据库表中物理存在。可以使用[`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel")函数构建这种[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的风格：
- en: '[PRE436]'
  id: totrans-2330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: 'When using ORM Declarative, a Declarative-friendly version of [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") is available called [`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel"), which has the ability to be used on the
    Base class or a mixin; if packaged using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr"), the column will apply itself to all table-bound
    subclasses including within joined inheritance hierarchies:'
  id: totrans-2331
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用ORM Declarative时，可以使用Declarative友好版本的[`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel")，称为[`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")，它可以用于Base类或mixin；如果使用[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")打包，该列将应用于所有绑定表的子类，包括连接继承层次结构：
- en: '[PRE437]'
  id: totrans-2332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: 'In the example above, both “my_table” and “sub_table” will have an additional
    integer column named “_sentinel” that can be used by the “insertmanyvalues” feature
    to help optimize bulk inserts used by the ORM.  ### Controlling the Batch Size'
  id: totrans-2333
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，“my_table”和“sub_table”都将有一个额外的整数列名为“_sentinel”，可以被“insertmanyvalues”功能使用，以帮助优化ORM使用的批量插入。###
    控制批量大小
- en: A key characteristic of “insertmanyvalues” is that the size of the INSERT statement
    is limited on a fixed max number of “values” clauses as well as a dialect-specific
    fixed total number of bound parameters that may be represented in one INSERT statement
    at a time. When the number of parameter dictionaries given exceeds a fixed limit,
    or when the total number of bound parameters to be rendered in a single INSERT
    statement exceeds a fixed limit (the two fixed limits are separate), multiple
    INSERT statements will be invoked within the scope of a single [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") call, each of which accommodate for a
    portion of the parameter dictionaries, known as a “batch”. The number of parameter
    dictionaries represented within each “batch” is then known as the “batch size”.
    For example, a batch size of 500 means that each INSERT statement emitted will
    INSERT at most 500 rows.
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues”的一个关键特征是INSERT语句的大小受限于固定数量的“values”子句以及每次在一个INSERT语句中可以表示的特定方言固定总数的绑定参数。当给定的参数字典数量超过固定限制，或者当要在单个INSERT语句中呈现的绑定参数总数超过固定限制时（这两个固定限制是分开的），将在单个[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")调用范围内调用多个INSERT语句，每个INSERT语句都适应一部分参数字典，称为“批量”。每个“批量”中表示的参数字典数量称为“批量大小”。例如，批量大小为500意味着每个发出的INSERT语句最多插入500行。
- en: It’s potentially important to be able to adjust the batch size, as a larger
    batch size may be more performant for an INSERT where the value sets themselves
    are relatively small, and a smaller batch size may be more appropriate for an
    INSERT that uses very large value sets, where both the size of the rendered SQL
    as well as the total data size being passed in one statement may benefit from
    being limited to a certain size based on backend behavior and memory constraints.
    For this reason the batch size can be configured on a per-[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") as well as a per-statement basis. The parameter limit
    on the other hand is fixed based on the known characteristics of the database
    in use.
  id: totrans-2335
  prefs: []
  type: TYPE_NORMAL
  zh: 能够调整批处理大小可能是很重要的，因为较大的批处理大小对于值集本身相对较小的插入可能更有效率，而较小的批处理大小可能更适合于使用非常大的值集的插入，其中渲染的
    SQL 大小以及传递给一个语句的总数据大小可能受益于根据后端行为和内存约束限制到某个特定大小。因此，批处理大小可以在每个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")以及每个语句的基础上进行配置。另一方面，参数限制是基于正在使用的数据库的已知特性固定的。
- en: The batch size defaults to 1000 for most backends, with an additional per-dialect
    “max number of parameters” limiting factor that may reduce the batch size further
    on a per-statement basis. The max number of parameters varies by dialect and server
    version; the largest size is 32700 (chosen as a healthy distance away from PostgreSQL’s
    limit of 32767 and SQLite’s modern limit of 32766, while leaving room for additional
    parameters in the statement as well as for DBAPI quirkiness). Older versions of
    SQLite (prior to 3.32.0) will set this value to 999\. MariaDB has no established
    limit however 32700 remains as a limiting factor for SQL message size.
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数后端，默认的批处理大小为 1000，还有一个每个方言的“最大参数数”限制因素，可能会在每个语句的基础上进一步减少批处理大小。最大参数数因方言和服务器版本而异；最大大小为
    32700（选择了一个距离 PostgreSQL 限制的 32767 和 SQLite 现代限制的 32766 的健康距离，同时为语句中的额外参数以及 DBAPI
    的怪癖留出空间）。较旧版本的 SQLite（3.32.0 之前）将此值设置为 999。MariaDB 没有确定的限制��但是 32700 仍然是 SQL 消息大小的限制因素。
- en: 'The value of the “batch size” can be affected [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") wide via the [`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") parameter. Such as, to affect INSERT statements to
    include up to 100 parameter sets in each statement:'
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
  zh: “批处理大小”的值可以通过[`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine")参数在[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")范围内受到影响。例如，为了影响
    INSERT 语句在每个语句中包含多达 100 个参数集：
- en: '[PRE438]'
  id: totrans-2338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: 'The batch size may also be affected on a per statement basis using the [`Connection.execution_options.insertmanyvalues_page_size`](#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") execution option, such as per
    execution:'
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理大小也可以通过[`Connection.execution_options.insertmanyvalues_page_size`](#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options")执行选项在每个语句的基础上受到影响，例如每次执行：
- en: '[PRE439]'
  id: totrans-2340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: 'Or configured on the statement itself:'
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
  zh: 或在语句本身上进行配置：
- en: '[PRE440]  ### Logging and Events'
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE440]  ### 日志记录和事件'
- en: 'The “insertmanyvalues” feature integrates fully with SQLAlchemy’s [statement
    logging](engines.html#dbengine-logging) as well as cursor events such as [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute"). When the list of
    parameters is broken into separate batches, **each INSERT statement is logged
    and passed to event handlers individually**. This is a major change compared to
    how the psycopg2-only feature worked in previous 1.x series of SQLAlchemy, where
    the production of multiple INSERT statements was hidden from logging and events.
    Logging display will truncate the long lists of parameters for readability, and
    will also indicate the specific batch of each statement. The example below illustrates
    an excerpt of this logging:'
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues”功能与 SQLAlchemy 的[语句日志记录](engines.html#dbengine-logging)以及游标事件完全集成，例如[`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")。当参数列表被分成单独的批次时，**每个
    INSERT 语句都会被记录并单独传递给事件处理程序**。这与之前 SQLAlchemy 1.x 系列中仅适用于 psycopg2 的功能的工作方式相比是一个重大变化，其中多个
    INSERT 语句的生成被隐藏在日志记录和事件之外。日志显示将截断长参数列表以便阅读，并且还将指示每个语句的特定批次。下面的示例说明了此日志的摘录：
- en: '[PRE441]'
  id: totrans-2344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'When [non-batch mode](#engine-insertmanyvalues-non-batch) takes place, logging
    will indicate this along with the insertmanyvalues message:'
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [非批处理模式](#engine-insertmanyvalues-non-batch) 发生时，日志将指示此情况以及 insertmanyvalues
    消息：
- en: '[PRE442]'
  id: totrans-2346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: See also
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](engines.html#dbengine-logging)'
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置日志记录](engines.html#dbengine-logging)'
- en: Upsert Support
  id: totrans-2349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Upsert 支持
- en: The PostgreSQL, SQLite, and MariaDB dialects offer backend-specific “upsert”
    constructs [`insert()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert"), [`insert()`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.insert
    "sqlalchemy.dialects.sqlite.insert") and [`insert()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert"), which are each [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") constructs that have an additional method
    such as `on_conflict_do_update()` or ``on_duplicate_key()`. These constructs also
    support “insertmanyvalues” behaviors when they are used with RETURNING, allowing
    efficient upserts with RETURNING to take place.
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL、SQLite 和 MariaDB 方言提供了特定于后端的“upsert” 构造 [`insert()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert")、[`insert()`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.insert
    "sqlalchemy.dialects.sqlite.insert") 和 [`insert()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert")，它们都是 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造，具有额外的方法，如 `on_conflict_do_update()` 或 ``on_duplicate_key()``。当它们与
    RETURNING 一起使用时，这些构造还支持“insertmanyvalues”行为，允许有效地进行带 RETURNING 的 upsert 操作。
- en: Current Support
  id: totrans-2351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前支持
- en: The feature is enabled for all backend included in SQLAlchemy that support RETURNING,
    with the exception of Oracle for which both the cx_Oracle and OracleDB drivers
    offer their own equivalent feature. The feature normally takes place when making
    use of the [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") method of an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct in conjunction with [executemany](../glossary.html#term-executemany)
    execution, which occurs when passing a list of dictionaries to the [`Connection.execute.parameters`](#sqlalchemy.engine.Connection.execute.params.parameters
    "sqlalchemy.engine.Connection.execute") parameter of the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") methods (as well as equivalent methods under
    [asyncio](../orm/extensions/asyncio.html) and shorthand methods like [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")). It also takes place within the ORM [unit of
    work](../glossary.html#term-unit-of-work) process when using methods such as [`Session.add()`](../orm/session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") and [`Session.add_all()`](../orm/session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") to add rows.
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能适用于 SQLAlchemy 中支持 RETURNING 的所有后端，但不包括 Oracle，因为 cx_Oracle 和 OracleDB 驱动程序都提供了自己的等效功能。当使用
    [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning "sqlalchemy.sql.expression.Insert.returning")
    方法与 [executemany](../glossary.html#term-executemany) 执行结合使用时，该功能通常发生在将字典列表传递给
    [`Connection.execute.parameters`](#sqlalchemy.engine.Connection.execute.params.parameters
    "sqlalchemy.engine.Connection.execute") 参数的 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 或 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法（以及 [asyncio](../orm/extensions/asyncio.html)
    和类似方法如 [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")）时。它还在使用诸如 [`Session.add()`](../orm/session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") 和 [`Session.add_all()`](../orm/session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") 等方法添加行时，在 ORM [工作单元](../glossary.html#term-unit-of-work)
    过程中发生。
- en: 'For SQLAlchemy’s included dialects, support or equivalent support is currently
    as follows:'
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLAlchemy 包含的方言，支持或等效支持目前如下：
- en: SQLite - supported for SQLite versions 3.35 and above
  id: totrans-2354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 支持 SQLite 版本 3.35 及以上
- en: PostgreSQL - all supported Postgresql versions (9 and above)
  id: totrans-2355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 所有支持的 PostgreSQL 版本（9 及以上）
- en: SQL Server - all supported SQL Server versions [[1]](#id2)
  id: totrans-2356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server - 所有支持的 SQL Server 版本 [[1]](#id2)
- en: MariaDB - supported for MariaDB versions 10.5 and above
  id: totrans-2357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB - 支持 MariaDB 版本 10.5 及以上
- en: MySQL - no support, no RETURNING feature is present
  id: totrans-2358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 不支持，没有 RETURNING 功能
- en: Oracle - supports RETURNING with executemany using native cx_Oracle / OracleDB
    APIs, for all supported Oracle versions 9 and above, using multi-row OUT parameters.
    This is not the same implementation as “executemanyvalues”, however has the same
    usage patterns and equivalent performance benefits.
  id: totrans-2359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 使用本机 cx_Oracle / OracleDB API 支持 `executemany` 与 `RETURNING`，适用于所有支持的
    Oracle 版本 9 及以上，使用多行 OUT 参数。这与 “executemanyvalues” 不是同一实现，但具有相同的使用模式和等效的性能优势。
- en: 'Changed in version 2.0.10:'
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.10 更改：
- en: Disabling the feature
  id: totrans-2361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用该功能
- en: 'To disable the “insertmanyvalues” feature for a given backend for an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") overall, pass the [`create_engine.use_insertmanyvalues`](engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") parameter as `False` to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
  zh: 要为给定后端禁用 “insertmanyvalues” 功能，可以将 [`create_engine.use_insertmanyvalues`](engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") 参数设置为 `False` 以 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的方式传递：
- en: '[PRE443]'
  id: totrans-2363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: 'The feature can also be disabled from being used implicitly for a particular
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    by passing the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter as `False`:'
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能也可以通过将 [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") 参数设置为 `False`，显式禁用特定的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的使用隐式 RETURNING：
- en: '[PRE444]'
  id: totrans-2365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: The reason one might want to disable RETURNING for a specific table is to work
    around backend-specific limitations.
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能想要为特定表禁用 RETURNING 的原因是为了解决特定后端的限制。
- en: Batched Mode Operation
  id: totrans-2367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 批处理模式操作
- en: 'The feature has two modes of operation, which are selected transparently on
    a per-dialect, per-[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    basis. One is **batched mode**, which reduces the number of database round trips
    by rewriting an INSERT statement of the form:'
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能有两种操作模式，可在每个方言、每个 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    基础上进行透明选择。一种是**批处理模式**，它通过重写形如以下 INSERT 语句来减少数据库往返次数：
- en: '[PRE445]'
  id: totrans-2369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: 'into a “batched” form such as:'
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为“批处理”形式，例如：
- en: '[PRE446]'
  id: totrans-2371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: where above, the statement is organized against a subset (a “batch”) of the
    input data, the size of which is determined by the database backend as well as
    the number of parameters in each batch to correspond to known limits for statement
    size / number of parameters. The feature then executes the INSERT statement once
    for each batch of input data until all records are consumed, concatenating the
    RETURNING results for each batch into a single large rowset that’s available from
    a single [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object.
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，语句是针对输入数据的子集（一个“批次”）组织的，其大小由数据库后端以及每个批次中的参数数量确定，以对应于已知的语句大小 / 参数数量的限制。然后，该功能为每个输入数据批次执行一次
    INSERT 语句，直到所有记录都被消耗完毕，并将每个批次的 RETURNING 结果连接到一个单独的大行集中，该行集可以从单个 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象中访问。
- en: This “batched” form allows INSERT of many rows using much fewer database round
    trips, and has been shown to allow dramatic performance improvements for most
    backends where it’s supported.
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: 这种 “批处理” 形式允许使用更少的数据库往返进行许多行的 INSERT，并已被证明可以允许在大多数支持它的后端上实现显着的性能改进。
- en: '### Correlating RETURNING rows to parameter sets'
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将 RETURNING 行与参数集关联起来'
- en: New in version 2.0.10.
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.10 中的新功能。
- en: The “batch” mode query illustrated in the previous section does not guarantee
    the order of records returned would correspond with that of the input data. When
    used by the SQLAlchemy ORM [unit of work](../glossary.html#term-unit-of-work)
    process, as well as for applications which correlate returned server-generated
    values with input data, the [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") and [`UpdateBase.return_defaults()`](dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") methods include an option
    [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") which indicates that “insertmanyvalues”
    mode should guarantee this correspondence. This is **not related** to the order
    in which records are actually INSERTed by the database backend, which is **not**
    assumed under any circumstances; only that the returned records should be organized
    when received back to correspond to the order in which the original input data
    was passed.
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中说明的“批量”模式查询并不保证返回的记录顺序与输入数据的顺序相对应。当被 SQLAlchemy ORM [工作单元](../glossary.html#term-unit-of-work)
    过程使用时，以及用于将返回的服务器生成的值与输入数据相关联的应用程序时，[`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 和 [`UpdateBase.return_defaults()`](dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法包括一个选项 [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning")，指示“insertmanyvalues”模式应保证这种对应关系。这与数据库后端实际执行的记录插入顺序无关，**在任何情况下都不**假设；只是返回的记录应该在接收时有序排列，以对应原始输入数据传递的顺序。
- en: When the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") parameter is present, for tables
    that use server-generated integer primary key values such as `IDENTITY`, PostgreSQL
    `SERIAL`, MariaDB `AUTO_INCREMENT`, or SQLite’s `ROWID` scheme, “batch” mode may
    instead opt to use a more complex INSERT..RETURNING form, in conjunction with
    post-execution sorting of rows based on the returned values, or if such a form
    is not available, the “insertmanyvalues” feature may gracefully degrade to “non-batched”
    mode which runs individual INSERT statements for each parameter set.
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在 [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") 参数时，对于使用服务器生成的整数主键值（如 `IDENTITY`、PostgreSQL
    `SERIAL`、MariaDB `AUTO_INCREMENT` 或 SQLite 的 `ROWID` 方案）的表，"批量"模式可能选择使用更复杂的 INSERT..RETURNING
    形式，结合基于返回值的行后执行排序，或者如果这样的形式不可用，则“insertmanyvalues”功能可能会优雅地降级为运行每个参数集合的单独 INSERT
    语句的“非批量”模式。
- en: 'For example, on SQL Server when an auto incrementing `IDENTITY` column is used
    as the primary key, the following SQL form is used:'
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 SQL Server 中，当使用自增的 `IDENTITY` 列作为主键时，使用以下 SQL 表单：
- en: '[PRE447]'
  id: totrans-2379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: A similar form is used for PostgreSQL as well, when primary key columns use
    SERIAL or IDENTITY. The above form **does not** guarantee the order in which rows
    are inserted. However, it does guarantee that the IDENTITY or SERIAL values will
    be created in order with each parameter set [[2]](#id5). The “insertmanyvalues”
    feature then sorts the returned rows for the above INSERT statement by incrementing
    integer identity.
  id: totrans-2380
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 中也使用类似的形式，当主键列使用 SERIAL 或 IDENTITY 时。上述形式**并不**保证插入行的顺序。但是，它确保了
    IDENTITY 或 SERIAL 值将按照每个参数集合的顺序创建[[2]](#id5)。然后，“insertmanyvalues”功能通过递增整数标识对上述
    INSERT 语句返回的行进行排序。
- en: For the SQLite database, there is no appropriate INSERT form that can correlate
    the production of new ROWID values with the order in which the parameter sets
    are passed. As a result, when using server-generated primary key values, the SQLite
    backend will degrade to “non-batched” mode when ordered RETURNING is requested.
    For MariaDB, the default INSERT form used by insertmanyvalues is sufficient, as
    this database backend will line up the order of AUTO_INCREMENT with the order
    of input data when using InnoDB [[3]](#id6).
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLite 数据库，没有适当的 INSERT 形式可以将新的 ROWID 值的生成与传递的参数集合的顺序相关联。因此，当使用服务器生成的主键值时，SQLite
    后端将在请求有序返回时降级为“非批量”模式。对于 MariaDB，insertmanyvalues 使用的默认 INSERT 形式足够，因为在使用 InnoDB
    时，这个数据库后端会将 AUTO_INCREMENT 的顺序与输入数据的顺序对齐[[3]](#id6)。
- en: For a client-side generated primary key, such as when using the Python `uuid.uuid4()`
    function to generate new values for a [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") column, the “insertmanyvalues” feature transparently
    includes this column in the RETURNING records and correlates its value to that
    of the given input records, thus maintaining correspondence between input records
    and result rows. From this, it follows that all backends allow for batched, parameter-correlated
    RETURNING order when client-side-generated primary key values are used.
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
  zh: 对于客户端生成的主键，例如在使用Python `uuid.uuid4()` 函数为 [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 列生成新值时，"insertmanyvalues" 特性会将该列透明地包含在 RETURNING 记录中，并将其值与给定的输入记录相对应，从而保持输入记录和结果行之间的对应关系。由此可见，当使用客户端生成的主键值时，所有后端都允许在批处理时进行参数相关的
    RETURNING 排序。
- en: The subject of how “insertmanyvalues” “batch” mode determines a column or columns
    to use as a point of correspondence between input parameters and RETURNING rows
    is known as an [insert sentinel](../glossary.html#term-insert-sentinel), which
    is a specific column or columns that are used to track such values. The “insert
    sentinel” is normally selected automatically, however can also be user-configuration
    for extremely special cases; the section [Configuring Sentinel Columns](#engine-insertmanyvalues-sentinel-columns)
    describes this.
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues” “batch” 模式确定用作输入参数和 RETURNING 行之间对应点的列或列的主题被称为 [insert sentinel](../glossary.html#term-insert-sentinel)，这是用于跟踪此类值的特定列或列。通常会自动选择“insert
    sentinel”，但也可以对极端特殊情况进行用户配置；章节 [配置 Sentinel 列](#engine-insertmanyvalues-sentinel-columns)
    对此进行了描述。
- en: For backends that do not offer an appropriate INSERT form that can deliver server-generated
    values deterministically aligned with input values, or for [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") configurations that feature other kinds of server generated
    primary key values, “insertmanyvalues” mode will make use of **non-batched** mode
    when guaranteed RETURNING ordering is requested.
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不提供适当的 INSERT 表单以可以确定地与输入值对齐生成服务器值的后端，或对于 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 配置具有其他类型的服务器生成的主键值的情况，“insertmanyvalues” 模式将在请求保证 RETURNING
    排序时使用 **非批处理** 模式。
- en: See also
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Microsoft SQL Server rationale
  id: totrans-2386
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server 的基本原理
- en: ''
  id: totrans-2387
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2388
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2389
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: “INSERT queries that use SELECT with ORDER BY to populate rows guarantees how
    identity values are computed but not the order in which the rows are inserted.”
    [https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions](https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions)
  id: totrans-2390
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: “使用 SELECT 和 ORDER BY 填充行的 INSERT 查询保证了如何计算标识值，但不能保证插入行的顺序。” [https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions](https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16#limitations-and-restrictions)
- en: ''
  id: totrans-2391
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2392
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PostgreSQL batched INSERT Discussion
  id: totrans-2393
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 批处理 INSERT 讨论
- en: ''
  id: totrans-2394
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2395
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2396
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Original description in 2018 [https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us](https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us)
  id: totrans-2397
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2018年的原始描述 [https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us](https://www.postgresql.org/message-id/29386.1528813619@sss.pgh.pa.us)
- en: ''
  id: totrans-2398
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2399
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2400
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Follow up in 2023 - [https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com](https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com)
  id: totrans-2401
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2023年的后续讨论 - [https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com](https://www.postgresql.org/message-id/be108555-da2a-4abc-a46b-acbe8b55bd25%40app.fastmail.com)
- en: 'MariaDB AUTO_INCREMENT behavior (using the same InnoDB engine as MySQL):'
  id: totrans-2402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB AUTO_INCREMENT 行为（使用与 MySQL 相同的 InnoDB 引擎）：
- en: '[https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)'
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)'
- en: '[https://dba.stackexchange.com/a/72099](https://dba.stackexchange.com/a/72099)'
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dba.stackexchange.com/a/72099](https://dba.stackexchange.com/a/72099)'
- en: '### Non-Batched Mode Operation'
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
  zh: '### 非批处理模式操作'
- en: For [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    configurations that do not have client side primary key values, and offer server-generated
    primary key values (or no primary key) that the database in question is not able
    to invoke in a deterministic or sortable way relative to multiple parameter sets,
    the “insertmanyvalues” feature when tasked with satisfying the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") requirement for an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement may instead opt to use **non-batched
    mode**.
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有客户端主键值的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")配置，并提供由服务器生成的主键值（或没有主键）的数据库无法以确定性或可排序的方式调用多个参数集相对于的情况，当“insertmanyvalues”功能被要求满足[`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning")对于[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")语句的要求时，可能会选择使用**非批处理模式**。
- en: In this mode, the original SQL form of INSERT is maintained, and the “insertmanyvalues”
    feature will instead run the statement as given for each parameter set individually,
    organizing the returned rows into a full result set. Unlike previous SQLAlchemy
    versions, it does so in a tight loop that minimizes Python overhead. In some cases,
    such as on SQLite, “non-batched” mode performs exactly as well as “batched” mode.
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模式下，保持了原始的SQL形式的INSERT，并且“insertmanyvalues”功能将代替为每个参数集单独运行给定的语句，将返回的行组织成完整的结果集。与以前的SQLAlchemy版本不同，它在一个紧凑的循环中执行，最大限度地减少了Python的开销。在某些情况下，例如在SQLite上，“非批处理”模式的性能与“批处理”模式完全一样。
- en: Statement Execution Model
  id: totrans-2408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语句执行模型
- en: For both “batched” and “non-batched” modes, the feature will necessarily invoke
    **multiple INSERT statements** using the DBAPI `cursor.execute()` method, within
    the scope of **single** call to the Core-level [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, with each statement containing
    up to a fixed limit of parameter sets. This limit is configurable as described
    below at [Controlling the Batch Size](#engine-insertmanyvalues-page-size). The
    separate calls to `cursor.execute()` are logged individually and also individually
    passed along to event listeners such as [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") (see [Logging and
    Events](#engine-insertmanyvalues-events) below).
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“批处理”和“非批处理”两种模式，该功能将必须使用DBAPI `cursor.execute()`方法调用**多个INSERT语句**，在**单个**对Core级别的[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法的调用范围内，每个语句包含多达固定数量的参数集。如下所述，此限制可配置为[控制批处理大小](#engine-insertmanyvalues-page-size)。对`cursor.execute()`的单独调用将被单独记录，并且也单独传递给事件侦听器，例如[`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")（请参阅下面的[日志记录和事件](#engine-insertmanyvalues-events)）。
- en: '#### Configuring Sentinel Columns'
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 配置哨兵列'
- en: In typical cases, the “insertmanyvalues” feature in order to provide INSERT..RETURNING
    with deterministic row order will automatically determine a sentinel column from
    a given table’s primary key, gracefully degrading to “row at a time” mode if one
    cannot be identified. As a completely **optional** feature, to get full “insertmanyvalues”
    bulk performance for tables that have server generated primary keys whose default
    generator functions aren’t compatible with the “sentinel” use case, other non-primary
    key columns may be marked as “sentinel” columns assuming they meet certain requirements.
    A typical example is a non-primary key [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") column with a client side default such as the Python
    `uuid.uuid4()` function. There is also a construct to create simple integer columns
    with a a client side integer counter oriented towards the “insertmanyvalues” use
    case.
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型情况下，为了从给定表的主键提供具有确定性行顺序的 INSERT..RETURNING 功能，将自动确定一个哨兵列，并在无法识别时优雅地降级到“逐行”模式。作为完全**可选**的功能，为了对具有服务器生成的主键的表提供完整的“insertmanyvalues”批量性能，其默认生成函数与“sentinel”用例不兼容，其他非主键列可以标记为“sentinel”列，假设它们满足一定要求。一个典型的例子是一个具有客户端默认值的非主键
    [`Uuid`](type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") 列，例如
    Python 的 `uuid.uuid4()` 函数。还有一种构造方法可以创建带有客户端整数计数器的简单整数列，以满足“insertmanyvalues”用例。
- en: 'Sentinel columns may be indicated by adding [`Column.insert_sentinel`](metadata.html#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column") to qualifying columns. The most basic “qualifying”
    column is a not-nullable, unique column with a client side default, such as a
    UUID column as follows:'
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将 [`Column.insert_sentinel`](metadata.html#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column") 添加到符合条件的列来指示哨兵列。最基本的“符合条件”列是一个非空、唯一的列，具有客户端默认值，例如以下
    UUID 列：
- en: '[PRE448]'
  id: totrans-2413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: 'When using ORM Declarative models, the same forms are available using the [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct:'
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ORM Declarative 模型时，可以使用 [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 结构来使用相同的形式：
- en: '[PRE449]'
  id: totrans-2415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: While the values generated by the default generator **must** be unique, the
    actual UNIQUE constraint on the above “sentinel” column, indicated by the `unique=True`
    parameter, itself is optional and may be omitted if not desired.
  id: totrans-2416
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然默认生成器生成的值**必须**是唯一的，但上述“哨兵”列上的实际 UNIQUE 约束（由 `unique=True` 参数指示）本身是可选的，如果不需要可以省略。
- en: 'There is also a special form of “insert sentinel” that’s a dedicated nullable
    integer column which makes use of a special default integer counter that’s only
    used during “insertmanyvalues” operations; as an additional behavior, the column
    will omit itself from SQL statements and result sets and behave in a mostly transparent
    manner. It does need to be physically present within the actual database table,
    however. This style of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    may be constructed using the function [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel"):'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种特殊形式的“插入哨兵”，它是一个专用的可空整数列，它利用了一个特殊的默认整数计数器，仅在“insertmanyvalues”操作期间使用；作为附加行为，该列将在
    SQL 语句和结果集中省略自身，并以基本透明的方式行事。然而，它确实需要在实际数据库表中存在。这种类型的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 可以使用函数 [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") 构建：
- en: '[PRE450]'
  id: totrans-2418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: 'When using ORM Declarative, a Declarative-friendly version of [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") is available called [`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel"), which has the ability to be used on the
    Base class or a mixin; if packaged using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr"), the column will apply itself to all table-bound
    subclasses including within joined inheritance hierarchies:'
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ORM Declarative 时，提供了一个友好的版本 [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel")，称为 [`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")，它具有在 Base 类或 mixin 上使用的能力；如果使用 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 封装，该列将应用于所有表绑定的子类，包括联接继承层次结构内：
- en: '[PRE451]'
  id: totrans-2420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'In the example above, both “my_table” and “sub_table” will have an additional
    integer column named “_sentinel” that can be used by the “insertmanyvalues” feature
    to help optimize bulk inserts used by the ORM.  #### Configuring Sentinel Columns'
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面的示例中，“my_table”和“sub_table”都将有一个额外的整数列名为“_sentinel”，可以被“insertmanyvalues”功能使用，以帮助优化ORM使用的批量插入。  ####
    配置哨兵列'
- en: In typical cases, the “insertmanyvalues” feature in order to provide INSERT..RETURNING
    with deterministic row order will automatically determine a sentinel column from
    a given table’s primary key, gracefully degrading to “row at a time” mode if one
    cannot be identified. As a completely **optional** feature, to get full “insertmanyvalues”
    bulk performance for tables that have server generated primary keys whose default
    generator functions aren’t compatible with the “sentinel” use case, other non-primary
    key columns may be marked as “sentinel” columns assuming they meet certain requirements.
    A typical example is a non-primary key [`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") column with a client side default such as the Python
    `uuid.uuid4()` function. There is also a construct to create simple integer columns
    with a a client side integer counter oriented towards the “insertmanyvalues” use
    case.
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型情况下，“insertmanyvalues”功能为了提供具有确定性行顺序的INSERT..RETURNING将自动从给定表的主键确定一个哨兵列，如果无法识别，则优雅地降级为“逐行”模式。作为完全**可选**的功能，为了使具有服务器生成的主键的表获得完整的“insertmanyvalues”批量性能，其默认生成函数与“哨兵”用例不兼容，其他非主键列可以被标记为“哨兵”列，假设它们满足某些要求。一个典型的例子是一个非主键[`Uuid`](type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")列，具有客户端默认值，例如Python的`uuid.uuid4()`函数。还有一种构造方法，用于创建简单的整数列，具有面向“insertmanyvalues”用例的客户端整数计数器。
- en: 'Sentinel columns may be indicated by adding [`Column.insert_sentinel`](metadata.html#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column") to qualifying columns. The most basic “qualifying”
    column is a not-nullable, unique column with a client side default, such as a
    UUID column as follows:'
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将[`Column.insert_sentinel`](metadata.html#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column")添加到合格的列来指示哨兵列。最基本的“合格”列是一个非空、唯一的列，具有客户端默认值，例如UUID列如下所示：
- en: '[PRE452]'
  id: totrans-2424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: 'When using ORM Declarative models, the same forms are available using the [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct:'
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用ORM声明性模型时，可以使用[`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造相同的形式：
- en: '[PRE453]'
  id: totrans-2426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: While the values generated by the default generator **must** be unique, the
    actual UNIQUE constraint on the above “sentinel” column, indicated by the `unique=True`
    parameter, itself is optional and may be omitted if not desired.
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管默认生成器生成的值**必须**是唯一的，但上述“哨兵”列上的实际UNIQUE约束，由`unique=True`参数指示，本身是可选的，如果不需要可以省略。
- en: 'There is also a special form of “insert sentinel” that’s a dedicated nullable
    integer column which makes use of a special default integer counter that’s only
    used during “insertmanyvalues” operations; as an additional behavior, the column
    will omit itself from SQL statements and result sets and behave in a mostly transparent
    manner. It does need to be physically present within the actual database table,
    however. This style of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    may be constructed using the function [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel"):'
  id: totrans-2428
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种特殊形式的“插入哨兵”，它是一个专用的可空整数列，利用一个特殊的默认整数计数器，仅在“insertmanyvalues”操作期间使用；作为额外的行为，该列将在SQL语句和结果集中省略自身，并以基本透明的方式行为。但是，它确实需要在实际数据库表中物理存在。可以使用函数[`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel")构造这种[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的样式：
- en: '[PRE454]'
  id: totrans-2429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: 'When using ORM Declarative, a Declarative-friendly version of [`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") is available called [`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel"), which has the ability to be used on the
    Base class or a mixin; if packaged using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr"), the column will apply itself to all table-bound
    subclasses including within joined inheritance hierarchies:'
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ORM声明时，提供了一种友好的与声明性兼容的[`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel")版本，称为[`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")，它具有在基类或混合类上使用的能力；如果使用[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")打包，该列将应用于所有绑定到表的子类，包括在连接继承层次结构中的子类：
- en: '[PRE455]'
  id: totrans-2431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: In the example above, both “my_table” and “sub_table” will have an additional
    integer column named “_sentinel” that can be used by the “insertmanyvalues” feature
    to help optimize bulk inserts used by the ORM.
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，“my_table”和“sub_table”都将有一个名为“_sentinel”的额外整数列，该列可供“insertmanyvalues”功能使用，以帮助优化ORM使用的批量插入。
- en: '### Controlling the Batch Size'
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
  zh: '### 控制批量大小'
- en: A key characteristic of “insertmanyvalues” is that the size of the INSERT statement
    is limited on a fixed max number of “values” clauses as well as a dialect-specific
    fixed total number of bound parameters that may be represented in one INSERT statement
    at a time. When the number of parameter dictionaries given exceeds a fixed limit,
    or when the total number of bound parameters to be rendered in a single INSERT
    statement exceeds a fixed limit (the two fixed limits are separate), multiple
    INSERT statements will be invoked within the scope of a single [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") call, each of which accommodate for a
    portion of the parameter dictionaries, known as a “batch”. The number of parameter
    dictionaries represented within each “batch” is then known as the “batch size”.
    For example, a batch size of 500 means that each INSERT statement emitted will
    INSERT at most 500 rows.
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues”的一个关键特点是，INSERT语句的大小限制为固定的最大“values”子句数以及方言特定的固定总绑定参数数，这些参数可以同时表示在一个INSERT语句中。当给定的参数字典数量超过固定限制，或者当要在单个INSERT语句中呈现的绑定参数的总数超过固定限制（这两个固定限制是分开的）时，将在单个[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")调用的范围内调用多个INSERT语句，其中每个INSERT语句都容纳一部分参数字典，称为“批量”。然后，每个“批量”中表示的参数字典数量称为“批量大小”。例如，批量大小为500意味着每个发出的INSERT语句最多会插入500行。
- en: It’s potentially important to be able to adjust the batch size, as a larger
    batch size may be more performant for an INSERT where the value sets themselves
    are relatively small, and a smaller batch size may be more appropriate for an
    INSERT that uses very large value sets, where both the size of the rendered SQL
    as well as the total data size being passed in one statement may benefit from
    being limited to a certain size based on backend behavior and memory constraints.
    For this reason the batch size can be configured on a per-[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") as well as a per-statement basis. The parameter limit
    on the other hand is fixed based on the known characteristics of the database
    in use.
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
  zh: 能够调整批量大小可能非常重要，因为较大的批量大小对于值集本身相对较小的INSERT可能更有效率，而较小的批量大小可能更适用于使用非常大的值集的INSERT，其中渲染的SQL大小以及一次传递的总数据大小可能受益于根据后端行为和内存约束而限制为某个大小。因此，批量大小可以在每个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")以及每个语句的基础上进行配置。另一方面，参数限制是根据正在使用的数据库的已知特性固定的。
- en: The batch size defaults to 1000 for most backends, with an additional per-dialect
    “max number of parameters” limiting factor that may reduce the batch size further
    on a per-statement basis. The max number of parameters varies by dialect and server
    version; the largest size is 32700 (chosen as a healthy distance away from PostgreSQL’s
    limit of 32767 and SQLite’s modern limit of 32766, while leaving room for additional
    parameters in the statement as well as for DBAPI quirkiness). Older versions of
    SQLite (prior to 3.32.0) will set this value to 999\. MariaDB has no established
    limit however 32700 remains as a limiting factor for SQL message size.
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数后端的批处理大小默认为1000，还有一个每方言的“最大参数数”限制因素，可能会在每个语句的基础上进一步减小批处理大小。最大参数数因方言和服务器版本而异；最大尺寸为32700（选择与PostgreSQL的限制32767和SQLite的现代限制32766相距较远，同时为语句中的其他参数以及DBAPI的怪癖留出空间）。旧版本的SQLite（3.32.0之前）将此值设置为999。MariaDB没有确定的限制，但是32700仍然作为SQL消息大小的限制因素。
- en: 'The value of the “batch size” can be affected [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") wide via the [`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") parameter. Such as, to affect INSERT statements to
    include up to 100 parameter sets in each statement:'
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: “批处理大小”的值可以通过[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine")参数影响整个引擎。例如，要影响每个语句中包含最多100个参数集的INSERT语句：
- en: '[PRE456]'
  id: totrans-2438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: 'The batch size may also be affected on a per statement basis using the [`Connection.execution_options.insertmanyvalues_page_size`](#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") execution option, such as per
    execution:'
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理大小也可以根据每个语句使用[`Connection.execution_options.insertmanyvalues_page_size`](#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options")执行选项进行设置，例如每次执行：
- en: '[PRE457]'
  id: totrans-2440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: 'Or configured on the statement itself:'
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在语句本身上进行配置：
- en: '[PRE458]'
  id: totrans-2442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '### Logging and Events'
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
  zh: '### 日志和事件'
- en: 'The “insertmanyvalues” feature integrates fully with SQLAlchemy’s [statement
    logging](engines.html#dbengine-logging) as well as cursor events such as [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute"). When the list of
    parameters is broken into separate batches, **each INSERT statement is logged
    and passed to event handlers individually**. This is a major change compared to
    how the psycopg2-only feature worked in previous 1.x series of SQLAlchemy, where
    the production of multiple INSERT statements was hidden from logging and events.
    Logging display will truncate the long lists of parameters for readability, and
    will also indicate the specific batch of each statement. The example below illustrates
    an excerpt of this logging:'
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
  zh: “insertmanyvalues”功能与SQLAlchemy的[语句日志记录](engines.html#dbengine-logging)以及游标事件（如[`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")）完全集成。当参数列表被分成单独的批次时，**每个INSERT语句都会单独记录并传递给事件处理程序**。这与SQLAlchemy
    1.x系列的以前版本中仅基于psycopg2的功能的工作方式相比是一个重大变化，以前的版本中多个INSERT语句的生成被隐藏在日志记录和事件之外。日志显示将截断用于可读性的长参数列表，并且还将指示每个语句的特定批次。下面的示例说明了此日志的摘录：
- en: '[PRE459]'
  id: totrans-2445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: 'When [non-batch mode](#engine-insertmanyvalues-non-batch) takes place, logging
    will indicate this along with the insertmanyvalues message:'
  id: totrans-2446
  prefs: []
  type: TYPE_NORMAL
  zh: 当[非批处理模式](#engine-insertmanyvalues-non-batch)发生时，日志将指示此情况以及insertmanyvalues消息：
- en: '[PRE460]'
  id: totrans-2447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: See also
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](engines.html#dbengine-logging)'
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置日志](engines.html#dbengine-logging)'
- en: Upsert Support
  id: totrans-2450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Upsert 支持
- en: The PostgreSQL, SQLite, and MariaDB dialects offer backend-specific “upsert”
    constructs [`insert()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert"), [`insert()`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.insert
    "sqlalchemy.dialects.sqlite.insert") and [`insert()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert"), which are each [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") constructs that have an additional method
    such as `on_conflict_do_update()` or ``on_duplicate_key()`. These constructs also
    support “insertmanyvalues” behaviors when they are used with RETURNING, allowing
    efficient upserts with RETURNING to take place.
  id: totrans-2451
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL、SQLite 和 MariaDB 方言提供了特定于后端的“upsert”构造[`insert()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert")、[`insert()`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.insert
    "sqlalchemy.dialects.sqlite.insert") 和 [`insert()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert")，它们是 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造的增强版本，具有额外的方法，如 `on_conflict_do_update()`
    或 ``on_duplicate_key()``。当它们与 RETURNING 一起使用时，这些构造也支持“insertmanyvalues”行为，允许使用
    RETURNING 进行有效的 upsert 操作。
- en: '## Engine Disposal'
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
  zh: '## 引擎处理'
- en: The [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") refers
    to a connection pool, which means under normal circumstances, there are open database
    connections present while the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object is still resident in memory. When an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is garbage collected, its connection pool is no longer
    referred to by that [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    and assuming none of its connections are still checked out, the pool and its connections
    will also be garbage collected, which has the effect of closing out the actual
    database connections as well. But otherwise, the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") will hold onto open database connections assuming
    it uses the normally default pool implementation of [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool").
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 指的是一个连接池，这意味着在正常情况下，当
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象仍然驻留在内存中时，存在着打开的数据库连接。当一个
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 被垃圾回收时，它的连接池不再被该
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 引用，假设它的连接都没有被检出，连接池及其连接也将被垃圾回收，这将关闭实际的数据库连接。但在其他情况下，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 将保持打开的数据库连接，假设它使用的是通常的默认池实现[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")。'
- en: The [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") is intended
    to normally be a permanent fixture established up-front and maintained throughout
    the lifespan of an application. It is **not** intended to be created and disposed
    on a per-connection basis; it is instead a registry that maintains both a pool
    of connections as well as configurational information about the database and DBAPI
    in use, as well as some degree of internal caching of per-database resources.
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 通常被设计成是一个固定的组件，在应用程序的整个生命周期中建立并维护。它**不**打算每个连接都创建和销毁；相反，它是一个注册表，维护着一个连接池以及关于正在使用的数据库和
    DBAPI 的配置信息，以及某种程度的每个数据库资源的内部缓存。'
- en: However, there are many cases where it is desirable that all connection resources
    referred to by the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    be completely closed out. It’s generally not a good idea to rely on Python garbage
    collection for this to occur for these cases; instead, the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") can be explicitly disposed using the [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method. This disposes of the engine’s underlying
    connection pool and replaces it with a new one that’s empty. Provided that the
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") is discarded
    at this point and no longer used, all **checked-in** connections which it refers
    to will also be fully closed.
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在许多情况下，希望所有由[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")引用的连接资源都被完全关闭。通常不建议依赖Python垃圾回收来处理这些情况；相反，可以使用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")方法来显式处置[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。这会处理引擎的底层连接池，并将其替换为一个空的连接池。只要在此时丢弃[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")并且不再使用它，它所引用的所有**已签入**连接也将被完全关闭。
- en: 'Valid use cases for calling [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") include:'
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")的有效用例包括：
- en: When a program wants to release any remaining checked-in connections held by
    the connection pool and expects to no longer be connected to that database at
    all for any future operations.
  id: totrans-2457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当程序希望释放连接池中持有的任何剩余已签入连接，并且不希望将来连接到该数据库以进行任何未来操作时。
- en: When a program uses multiprocessing or `fork()`, and an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object is copied to the child process, [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") should be called so that the engine creates
    brand new database connections local to that fork. Database connections generally
    do **not** travel across process boundaries. Use the [`Engine.dispose.close`](#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter set to False in this case. See the
    section [Using Connection Pools with Multiprocessing or os.fork()](pooling.html#pooling-multiprocessing)
    for more background on this use case.
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当程序使用多进程或`fork()`，并且将[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象复制到子进程时，应调用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")，以便引擎在该fork中创建全新的数据库连接。数据库连接通常不会跨越进程边界。在这种情况下，可以使用参数[`Engine.dispose.close`](#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose")设置为False。有关此用例的更多背景信息，请参阅[使用连接池与多进程或os.fork()](pooling.html#pooling-multiprocessing)部分。
- en: Within test suites or multitenancy scenarios where many ad-hoc, short-lived
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") objects may be
    created and disposed.
  id: totrans-2459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试套件或多租户方案中，可能会创建和处置许多临时的、短暂的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象。
- en: Connections that are **checked out** are **not** discarded when the engine is
    disposed or garbage collected, as these connections are still strongly referenced
    elsewhere by the application. However, after [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") is called, those connections are no longer
    associated with that [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine");
    when they are closed, they will be returned to their now-orphaned connection pool
    which will ultimately be garbage collected, once all connections which refer to
    it are also no longer referenced anywhere. Since this process is not easy to control,
    it is strongly recommended that [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") is called only after all checked out connections
    are checked in or otherwise de-associated from their pool.
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: 当引擎被处置或垃圾回收时，**签出**的连接不会被丢弃，因为这些连接在应用程序的其他地方仍然被强引用。但是，在调用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")后，这些连接将不再与该[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联；当它们关闭时，它们将被返回到它们现在孤立的连接池中，最终会被垃圾回收，一旦所有引用它的连接也不再在任何地方被引用。由于这个过程不容易控制，强烈建议只在所有签出的连接都被签入或以其他方式与其池解除关联后才调用[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")。
- en: An alternative for applications that are negatively impacted by the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s use of connection pooling is to disable pooling
    entirely. This typically incurs only a modest performance impact upon the use
    of new connections, and means that when a connection is checked in, it is entirely
    closed out and is not held in memory. See [Switching Pool Implementations](pooling.html#pool-switching)
    for guidelines on how to disable pooling.
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些受到 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象使用连接池的负面影响的应用程序，另一种选择是完全禁用连接池。这通常只会对使用新连接产生一些性能影响，并且意味着当连接被检入时，它完全关闭并且不会保留在内存中。参见
    [切换池实现](pooling.html#pool-switching) 以获取有关如何禁用连接池的指南。
- en: See also
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Connection Pooling](pooling.html)'
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接池](pooling.html)'
- en: '[Using Connection Pools with Multiprocessing or os.fork()](pooling.html#pooling-multiprocessing)'
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
  zh: '[在多进程或 os.fork() 中使用连接池](pooling.html#pooling-multiprocessing)'
- en: '## Working with Driver SQL and Raw DBAPI Connections'
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用驱动程序 SQL 和原始 DBAPI 连接'
- en: The introduction on using [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") made use of the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct in order to illustrate how textual
    SQL statements may be invoked. When working with SQLAlchemy, textual SQL is actually
    more of the exception rather than the norm, as the Core expression language and
    the ORM both abstract away the textual representation of SQL. However, the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct itself also provides some abstraction
    of textual SQL in that it normalizes how bound parameters are passed, as well
    as that it supports datatyping behavior for parameters and result set rows.
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    的介绍利用了 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造来说明如何调用文本 SQL 语句。在使用 SQLAlchemy 时，文本 SQL 实际上更多地是个例外，而不是规范，因为核心表达语言和 ORM 都将 SQL
    的文本表示抽象化了。然而，[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造本身也提供了一些文本 SQL 的抽象，它规范了绑定参数的传递方式，并且支持参数和结果集行的数据类型行为。
- en: Invoking SQL strings directly to the driver
  id: totrans-2467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接调用驱动程序的 SQL 字符串
- en: 'For the use case where one wants to invoke textual SQL directly passed to the
    underlying driver (known as the [DBAPI](../glossary.html#term-DBAPI)) without
    any intervention from the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, the [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method may be used:'
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: 对于想要直接调用传递给底层驱动程序（称为 [DBAPI](../glossary.html#term-DBAPI)）的文本 SQL 而没有任何 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造干预的用例，可以使用 [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 方法：
- en: '[PRE461]'
  id: totrans-2469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: 'New in version 1.4: Added the [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method.'
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增：添加了 [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 方法。
- en: '### Working with the DBAPI cursor directly'
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
  zh: '### 直接使用 DBAPI 游标'
- en: There are some cases where SQLAlchemy does not provide a genericized way at
    accessing some [DBAPI](../glossary.html#term-DBAPI) functions, such as calling
    stored procedures as well as dealing with multiple result sets. In these cases,
    it’s just as expedient to deal with the raw DBAPI connection directly.
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下 SQLAlchemy 没有提供一种通用的方式来访问一些 [DBAPI](../glossary.html#term-DBAPI) 函数，比如调用存储过程以及处理多个结果集。在这些情况下，直接处理原始
    DBAPI 连接同样方便。
- en: 'The most common way to access the raw DBAPI connection is to get it from an
    already present [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object directly. It is present using the [`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") attribute:'
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
  zh: 访问原始 DBAPI 连接的最常见方式是直接从已经存在的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象获取它。通过 [`Connection.connection`](#sqlalchemy.engine.Connection.connection "sqlalchemy.engine.Connection.connection")
    属性来访问：
- en: '[PRE462]'
  id: totrans-2474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: The DBAPI connection here is actually a “proxied” in terms of the originating
    connection pool, however this is an implementation detail that in most cases can
    be ignored. As this DBAPI connection is still contained within the scope of an
    owning [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, it is best to make use of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object for most features such as transaction control
    as well as calling the [`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method; if these operations are performed
    on the DBAPI connection directly, the owning [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") will not be aware of these changes in state.
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的DBAPI连接实际上是“代理”的，就像以前的连接池一样，但这是一个在大多数情况下可以忽略的实现细节。由于此DBAPI连接仍包含在拥有者[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的范围内，因此最好使用[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象进行大多数功能的操作，例如事务控制以及调用[`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close")方法；如果这些操作直接在DBAPI连接上执行，拥有者[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")将不会意识到这些状态的变化。
- en: 'To overcome the limitations imposed by the DBAPI connection that is maintained
    by an owning [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a DBAPI connection is also available without the need to procure a [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") first, using the [`Engine.raw_connection()`](#sqlalchemy.engine.Engine.raw_connection
    "sqlalchemy.engine.Engine.raw_connection") method of [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"):'
  id: totrans-2476
  prefs: []
  type: TYPE_NORMAL
  zh: '为了克服由由拥有者[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")维护的DBAPI连接所施加的限制，还可以在不需要首先获得[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的情况下获得一个DBAPI连接，方法是使用[`Engine.raw_connection()`](#sqlalchemy.engine.Engine.raw_connection
    "sqlalchemy.engine.Engine.raw_connection")方法的[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"):'
- en: '[PRE463]'
  id: totrans-2477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: 'This DBAPI connection is again a “proxied” form as was the case before. The
    purpose of this proxying is now apparent, as when we call the `.close()` method
    of this connection, the DBAPI connection is typically not actually closed, but
    instead [released](../glossary.html#term-released) back to the engine’s connection
    pool:'
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: 这个DBAPI连接再次是一个“代理”形式，就像以前一样。这种代理的目的现在显而易见，因为当我们调用该连接的`.close()`方法时，DBAPI连接通常实际上并没有关闭，而是[释放](../glossary.html#term-released)回到引擎的连接池中：
- en: '[PRE464]'
  id: totrans-2479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: While SQLAlchemy may in the future add built-in patterns for more DBAPI use
    cases, there are diminishing returns as these cases tend to be rarely needed and
    they also vary highly dependent on the type of DBAPI in use, so in any case the
    direct DBAPI calling pattern is always there for those cases where it is needed.
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SQLAlchemy可能在将来添加更多DBAPI使用案例的内置模式，但由于这些情况往往很少需要，并且它们也高度依赖于所使用的DBAPI类型，所以无论如何，直接的DBAPI调用模式始终存在于那些需要的情况下。
- en: See also
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)
    - includes additional details about how the DBAPI connection is accessed as well
    as the “driver” connection when using asyncio drivers.'
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用引擎时如何获取原始DBAPI连接？](../faq/connections.html#faq-dbapi-connection) - 包括有关如何访问DBAPI连接以及在使用asyncio驱动程序时的“驱动程序”连接的其他详细信息。'
- en: 'Some recipes for DBAPI connection use follow.  ### Calling Stored Procedures
    and User Defined Functions'
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用于DBAPI连接的示例。### 调用存储过程和用户定义的函数
- en: SQLAlchemy supports calling stored procedures and user defined functions several
    ways. Please note that all DBAPIs have different practices, so you must consult
    your underlying DBAPI’s documentation for specifics in relation to your particular
    usage. The following examples are hypothetical and may not work with your underlying
    DBAPI.
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy支持以几种方式调用存储过程和用户定义的函数。请注意，所有DBAPI都有不同的做法，因此您必须查阅底层DBAPI的文档，以了解与您特定用法相关的具体内容。以下示例是假设性的，可能不适用于您的底层DBAPI。
- en: 'For stored procedures or functions with special syntactical or parameter concerns,
    DBAPI-level [callproc](https://legacy.python.org/dev/peps/pep-0249/#callproc)
    may potentially be used with your DBAPI. An example of this pattern is:'
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有特殊语法或参数问题的存储过程或函数，可以使用DBAPI级别的[callproc](https://legacy.python.org/dev/peps/pep-0249/#callproc)，具体取决于您的DBAPI。这种模式的示例如下：
- en: '[PRE465]'
  id: totrans-2486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: Note
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Not all DBAPIs use callproc and overall usage details will vary. The above example
    is only an illustration of how it might look to use a particular DBAPI function.
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的DBAPI都使用callproc，总体使用细节会有所不同。上面的示例仅是展示如何使用特定的DBAPI函数的示例。
- en: 'Your DBAPI may not have a `callproc` requirement *or* may require a stored
    procedure or user defined function to be invoked with another pattern, such as
    normal SQLAlchemy connection usage. One example of this usage pattern is, *at
    the time of this documentation’s writing*, executing a stored procedure in the
    PostgreSQL database with the psycopg2 DBAPI, which should be invoked with normal
    connection usage:'
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
  zh: 您的DBAPI可能没有`callproc`的要求，*或者*可能需要以另一种模式调用存储过程或用户定义函数，例如正常的SQLAlchemy连接用法。一个这种用法模式的例子是，在*本文档编写时*，使用psycopg2
    DBAPI在PostgreSQL数据库中执行存储过程，应该使用正常的连接用法：
- en: '[PRE466]'
  id: totrans-2490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: This above example is hypothetical. The underlying database is not guaranteed
    to support “CALL” or “SELECT” in these situations, and the keyword may vary dependent
    on the function being a stored procedure or a user defined function. You should
    consult your underlying DBAPI and database documentation in these situations to
    determine the correct syntax and patterns to use.
  id: totrans-2491
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例是假设性的。在这些情况下，底层数据库不能保证支持“CALL”或“SELECT”，关键字可能会根据函数是存储过程还是用户定义函数而变化。在这些情况下，您应该查阅底层DBAPI和数据库文档，以确定正确的语法和模式。
- en: Multiple Result Sets
  id: totrans-2492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多结果集
- en: 'Multiple result set support is available from a raw DBAPI cursor using the
    [nextset](https://legacy.python.org/dev/peps/pep-0249/#nextset) method:'
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[DBAPI](../glossary.html#term-DBAPI)游标使用[nextset](https://legacy.python.org/dev/peps/pep-0249/#nextset)方法支持多结果集：
- en: '[PRE467]'
  id: totrans-2494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: Invoking SQL strings directly to the driver
  id: totrans-2495
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接向驱动程序调用SQL字符串
- en: 'For the use case where one wants to invoke textual SQL directly passed to the
    underlying driver (known as the [DBAPI](../glossary.html#term-DBAPI)) without
    any intervention from the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, the [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method may be used:'
  id: totrans-2496
  prefs: []
  type: TYPE_NORMAL
  zh: 对于想要直接传递给底层驱动程序的文本SQL（称为[DBAPI](../glossary.html#term-DBAPI)）而不需要任何[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造干预的用例，可以使用[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")方法：
- en: '[PRE468]'
  id: totrans-2497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: 'New in version 1.4: Added the [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method.'
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中新增了[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")方法。
- en: '### Working with the DBAPI cursor directly'
  id: totrans-2499
  prefs: []
  type: TYPE_NORMAL
  zh: '### 直接使用DBAPI游标'
- en: There are some cases where SQLAlchemy does not provide a genericized way at
    accessing some [DBAPI](../glossary.html#term-DBAPI) functions, such as calling
    stored procedures as well as dealing with multiple result sets. In these cases,
    it’s just as expedient to deal with the raw DBAPI connection directly.
  id: totrans-2500
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，SQLAlchemy没有提供一种通用的方式来访问一些[DBAPI](../glossary.html#term-DBAPI)函数，例如调用存储过程以及处理多个结果集。在这些情况下，直接处理原始的DBAPI连接同样方便。
- en: 'The most common way to access the raw DBAPI connection is to get it from an
    already present [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object directly. It is present using the [`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") attribute:'
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
  zh: 访问原始DBAPI连接的最常见方式是直接从已经存在的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象中获取。可以使用[`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection")属性来获取：
- en: '[PRE469]'
  id: totrans-2502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: The DBAPI connection here is actually a “proxied” in terms of the originating
    connection pool, however this is an implementation detail that in most cases can
    be ignored. As this DBAPI connection is still contained within the scope of an
    owning [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, it is best to make use of the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object for most features such as transaction control
    as well as calling the [`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method; if these operations are performed
    on the DBAPI connection directly, the owning [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") will not be aware of these changes in state.
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的 DBAPI 连接实际上是“代理”形式，就原始连接池而言，但这是一个实现细节，在大多数情况下可以忽略。由于此 DBAPI 连接仍然包含在一个拥有者
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 对象的范围内，最好使用
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 对象进行大多数功能的操作，例如事务控制以及调用
    [`Connection.close()`](#sqlalchemy.engine.Connection.close "sqlalchemy.engine.Connection.close")
    方法；如果这些操作直接在 DBAPI 连接上执行，则拥有者 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    将不会意识到这些状态的变化。
- en: 'To overcome the limitations imposed by the DBAPI connection that is maintained
    by an owning [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a DBAPI connection is also available without the need to procure a [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") first, using the [`Engine.raw_connection()`](#sqlalchemy.engine.Engine.raw_connection
    "sqlalchemy.engine.Engine.raw_connection") method of [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"):'
  id: totrans-2504
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服由拥有 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    维护的 DBAPI 连接所施加的限制，还提供了不需要先获得 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    的 DBAPI 连接，可以使用 [`Engine.raw_connection()`](#sqlalchemy.engine.Engine.raw_connection
    "sqlalchemy.engine.Engine.raw_connection") 方法来获得 [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的原始连接：
- en: '[PRE470]'
  id: totrans-2505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: 'This DBAPI connection is again a “proxied” form as was the case before. The
    purpose of this proxying is now apparent, as when we call the `.close()` method
    of this connection, the DBAPI connection is typically not actually closed, but
    instead [released](../glossary.html#term-released) back to the engine’s connection
    pool:'
  id: totrans-2506
  prefs: []
  type: TYPE_NORMAL
  zh: 此 DBAPI 连接再次是“代理”形式，与之前的情况一样。现在这种代理的目的显而易见，因为当我们调用这个连接的 `.close()` 方法时，DBAPI
    连接通常并不实际关闭，而是被 [释放](../glossary.html#term-released) 回到引擎的连接池中：
- en: '[PRE471]'
  id: totrans-2507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: While SQLAlchemy may in the future add built-in patterns for more DBAPI use
    cases, there are diminishing returns as these cases tend to be rarely needed and
    they also vary highly dependent on the type of DBAPI in use, so in any case the
    direct DBAPI calling pattern is always there for those cases where it is needed.
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SQLAlchemy 可能会在将来为更多的 DBAPI 使用情况添加内置模式，但由于这些情况往往很少需要，并且它们也高度依赖于所使用的 DBAPI
    的类型，因此在任何情况下，直接的 DBAPI 调用模式始终存在于那些需要的情况下。
- en: See also
  id: totrans-2509
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)
    - includes additional details about how the DBAPI connection is accessed as well
    as the “driver” connection when using asyncio drivers.'
  id: totrans-2510
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用 Engine 时如何获取原始 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)
    - 包括有关如何访问 DBAPI 连接以及使用 asyncio 驱动程序时的“驱动程序”连接的其他详细信息。'
- en: Some recipes for DBAPI connection use follow.
  id: totrans-2511
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 DBAPI 连接的示例如下。
- en: '### Calling Stored Procedures and User Defined Functions'
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
  zh: '### 调用存储过程和用户定义的函数'
- en: SQLAlchemy supports calling stored procedures and user defined functions several
    ways. Please note that all DBAPIs have different practices, so you must consult
    your underlying DBAPI’s documentation for specifics in relation to your particular
    usage. The following examples are hypothetical and may not work with your underlying
    DBAPI.
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 支持多种方式调用存储过程和用户定义的函数。请注意，所有的 DBAPI 都有不同的做法，所以你必须查阅你所使用的底层 DBAPI 的文档，了解与你特定用法相关的具体内容。以下示例是假设性的，可能不适用于你所使用的底层
    DBAPI。
- en: 'For stored procedures or functions with special syntactical or parameter concerns,
    DBAPI-level [callproc](https://legacy.python.org/dev/peps/pep-0249/#callproc)
    may potentially be used with your DBAPI. An example of this pattern is:'
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有特殊语法或参数关注点的存储过程或函数，可以使用 DBAPI 级别的 [callproc](https://legacy.python.org/dev/peps/pep-0249/#callproc)，与你的
    DBAPI 搭配使用。这种模式的示例是：
- en: '[PRE472]'
  id: totrans-2515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: Note
  id: totrans-2516
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: Not all DBAPIs use callproc and overall usage details will vary. The above example
    is only an illustration of how it might look to use a particular DBAPI function.
  id: totrans-2517
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的DBAPI都使用`callproc`，整体使用细节会有所不同。上面的示例仅说明了如何使用特定的DBAPI函数。
- en: 'Your DBAPI may not have a `callproc` requirement *or* may require a stored
    procedure or user defined function to be invoked with another pattern, such as
    normal SQLAlchemy connection usage. One example of this usage pattern is, *at
    the time of this documentation’s writing*, executing a stored procedure in the
    PostgreSQL database with the psycopg2 DBAPI, which should be invoked with normal
    connection usage:'
  id: totrans-2518
  prefs: []
  type: TYPE_NORMAL
  zh: 您的DBAPI可能没有`callproc`的要求，*或*可能需要使用另一种模式调用存储过程或用户定义函数，例如正常的SQLAlchemy连接使用。一个使用模式的例子是，在撰写本文档时，在PostgreSQL数据库中使用psycopg2
    DBAPI执行存储过程，应该使用正常的连接使用方式：
- en: '[PRE473]'
  id: totrans-2519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: This above example is hypothetical. The underlying database is not guaranteed
    to support “CALL” or “SELECT” in these situations, and the keyword may vary dependent
    on the function being a stored procedure or a user defined function. You should
    consult your underlying DBAPI and database documentation in these situations to
    determine the correct syntax and patterns to use.
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例是假设性的。底层数据库不能保证在这些情况下支持“CALL”或“SELECT”，关键字可能会根据函数是存储过程还是用户定义函数而变化。在这些情况下，您应该查阅底层DBAPI和数据库文档，以确定正确的语法和模式。
- en: Multiple Result Sets
  id: totrans-2521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多结果集
- en: 'Multiple result set support is available from a raw DBAPI cursor using the
    [nextset](https://legacy.python.org/dev/peps/pep-0249/#nextset) method:'
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
  zh: 从原始DBAPI游标使用[nextset](https://legacy.python.org/dev/peps/pep-0249/#nextset)方法可获得多结果集支持：
- en: '[PRE474]'
  id: totrans-2523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: Registering New Dialects
  id: totrans-2524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册新方言
- en: 'The [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function call locates the given dialect using setuptools entrypoints. These entry
    points can be established for third party dialects within the setup.py script.
    For example, to create a new dialect “foodialect://”, the steps are as follows:'
  id: totrans-2525
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")函数调用使用setuptools
    entrypoints定位给定的方言。这些入口点可以在setup.py脚本中为第三方方言建立。例如，要创建一个新的方言“foodialect://”，步骤如下：'
- en: Create a package called `foodialect`.
  id: totrans-2526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`foodialect`的包。
- en: The package should have a module containing the dialect class, which is typically
    a subclass of [`sqlalchemy.engine.default.DefaultDialect`](internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect"). In this example let’s say it’s called
    `FooDialect` and its module is accessed via `foodialect.dialect`.
  id: totrans-2527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包应该包含一个包含方言类的模块，通常是[`sqlalchemy.engine.default.DefaultDialect`](internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect")的子类。在这个例子中，假设它被称为`FooDialect`，并且可以通过`foodialect.dialect`访问其模块。
- en: 'The entry point can be established in `setup.cfg` as follows:'
  id: totrans-2528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 入口点可以在`setup.cfg`中建立如下：
- en: '[PRE475]'
  id: totrans-2529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: 'If the dialect is providing support for a particular DBAPI on top of an existing
    SQLAlchemy-supported database, the name can be given including a database-qualification.
    For example, if `FooDialect` were in fact a MySQL dialect, the entry point could
    be established like this:'
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言在现有的SQLAlchemy支持的数据库之上提供对特定DBAPI的支持，则可以包括数据库限定的名称。例如，如果`FooDialect`实际上是一个MySQL方言，入口点可以这样建立：
- en: '[PRE476]'
  id: totrans-2531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: The above entrypoint would then be accessed as `create_engine("mysql+foodialect://")`.
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以通过`create_engine("mysql+foodialect://")`访问上述入口点。
- en: Registering Dialects In-Process
  id: totrans-2533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在进程中注册方言
- en: 'SQLAlchemy also allows a dialect to be registered within the current process,
    bypassing the need for separate installation. Use the `register()` function as
    follows:'
  id: totrans-2534
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy还允许在当前进程中注册方言，无需单独安装。使用`register()`函数如下：
- en: '[PRE477]'
  id: totrans-2535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: The above will respond to `create_engine("mysql+foodialect://")` and load the
    `MyMySQLDialect` class from the `myapp.dialect` module.
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将响应`create_engine("mysql+foodialect://")`并从`myapp.dialect`模块加载`MyMySQLDialect`类。
- en: Registering Dialects In-Process
  id: totrans-2537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在进程中注册方言
- en: 'SQLAlchemy also allows a dialect to be registered within the current process,
    bypassing the need for separate installation. Use the `register()` function as
    follows:'
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy还允许在当前进程中注册方言，无需单独安装。使用`register()`函数如下：
- en: '[PRE478]'
  id: totrans-2539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: The above will respond to `create_engine("mysql+foodialect://")` and load the
    `MyMySQLDialect` class from the `myapp.dialect` module.
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将响应`create_engine("mysql+foodialect://")`并从`myapp.dialect`模块加载`MyMySQLDialect`类。
- en: Connection / Engine API
  id: totrans-2541
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接/引擎API
- en: '| Object Name | Description |'
  id: totrans-2542
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2543
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Connection](#sqlalchemy.engine.Connection) | Provides high-level functionality
    for a wrapped DB-API connection. |'
  id: totrans-2544
  prefs: []
  type: TYPE_TB
  zh: '| [连接](#sqlalchemy.engine.Connection) | 提供了一个封装的 DB-API 连接的高级功能。 |'
- en: '| [CreateEnginePlugin](#sqlalchemy.engine.CreateEnginePlugin) | A set of hooks
    intended to augment the construction of an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object based on entrypoint names in a URL. |'
  id: totrans-2545
  prefs: []
  type: TYPE_TB
  zh: '| [CreateEnginePlugin](#sqlalchemy.engine.CreateEnginePlugin) | 一组旨在根据 URL
    中的入口点名称增强 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象构造的钩子。
    |'
- en: '| [Engine](#sqlalchemy.engine.Engine) | Connects a [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") together to provide a source of database
    connectivity and behavior. |'
  id: totrans-2546
  prefs: []
  type: TYPE_TB
  zh: '| [引擎](#sqlalchemy.engine.Engine) | 将 [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 和 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") 连接在一起，提供数据库连接和行为的来源。 |'
- en: '| [ExceptionContext](#sqlalchemy.engine.ExceptionContext) | Encapsulate information
    about an error condition in progress. |'
  id: totrans-2547
  prefs: []
  type: TYPE_TB
  zh: '| [异常上下文](#sqlalchemy.engine.ExceptionContext) | 封装了正在进行的错误条件的信息。 |'
- en: '| [NestedTransaction](#sqlalchemy.engine.NestedTransaction) | Represent a ‘nested’,
    or SAVEPOINT transaction. |'
  id: totrans-2548
  prefs: []
  type: TYPE_TB
  zh: '| [嵌套事务](#sqlalchemy.engine.NestedTransaction) | 表示一个“嵌套”的或 SAVEPOINT 事务。 |'
- en: '| [RootTransaction](#sqlalchemy.engine.RootTransaction) | Represent the “root”
    transaction on a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
    |'
  id: totrans-2549
  prefs: []
  type: TYPE_TB
  zh: '| [根事务](#sqlalchemy.engine.RootTransaction) | 表示 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上的“根”事务。 |'
- en: '| [Transaction](#sqlalchemy.engine.Transaction) | Represent a database transaction
    in progress. |'
  id: totrans-2550
  prefs: []
  type: TYPE_TB
  zh: '| [事务](#sqlalchemy.engine.Transaction) | 表示正在进行的数据库事务。 |'
- en: '| [TwoPhaseTransaction](#sqlalchemy.engine.TwoPhaseTransaction) | Represent
    a two-phase transaction. |'
  id: totrans-2551
  prefs: []
  type: TYPE_TB
  zh: '| [两阶段事务](#sqlalchemy.engine.TwoPhaseTransaction) | 表示一个两阶段事务。 |'
- en: '[PRE479]'
  id: totrans-2552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Provides high-level functionality for a wrapped DB-API connection.
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个封装的 DB-API 连接的高级功能。
- en: The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object is procured by calling the [`Engine.connect()`](#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") method of the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object, and provides services for execution of SQL
    statements as well as transaction control.
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象通过调用 [`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    方法从 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象获取，并提供执行
    SQL 语句以及事务控制的服务。'
- en: The Connection object is **not** thread-safe. While a Connection can be shared
    among threads using properly synchronized access, it is still possible that the
    underlying DBAPI connection may not support shared access between threads. Check
    the DBAPI documentation for details.
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
  zh: Connection 对象 **不是** 线程安全的。虽然一个 Connection 可以通过适当同步的访问在线程之间共享，但底层的 DBAPI 连接可能不支持在线程之间的共享访问。请查阅
    DBAPI 文档以了解详情。
- en: '**Members**'
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.engine.Connection.__init__), [begin()](#sqlalchemy.engine.Connection.begin),
    [begin_nested()](#sqlalchemy.engine.Connection.begin_nested), [begin_twophase()](#sqlalchemy.engine.Connection.begin_twophase),
    [close()](#sqlalchemy.engine.Connection.close), [closed](#sqlalchemy.engine.Connection.closed),
    [commit()](#sqlalchemy.engine.Connection.commit), [connection](#sqlalchemy.engine.Connection.connection),
    [default_isolation_level](#sqlalchemy.engine.Connection.default_isolation_level),
    [detach()](#sqlalchemy.engine.Connection.detach), [exec_driver_sql()](#sqlalchemy.engine.Connection.exec_driver_sql),
    [execute()](#sqlalchemy.engine.Connection.execute), [execution_options()](#sqlalchemy.engine.Connection.execution_options),
    [get_execution_options()](#sqlalchemy.engine.Connection.get_execution_options),
    [get_isolation_level()](#sqlalchemy.engine.Connection.get_isolation_level), [get_nested_transaction()](#sqlalchemy.engine.Connection.get_nested_transaction),
    [get_transaction()](#sqlalchemy.engine.Connection.get_transaction), [in_nested_transaction()](#sqlalchemy.engine.Connection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.engine.Connection.in_transaction), [info](#sqlalchemy.engine.Connection.info),
    [invalidate()](#sqlalchemy.engine.Connection.invalidate), [invalidated](#sqlalchemy.engine.Connection.invalidated),
    [rollback()](#sqlalchemy.engine.Connection.rollback), [scalar()](#sqlalchemy.engine.Connection.scalar),
    [scalars()](#sqlalchemy.engine.Connection.scalars), [schema_for_object()](#sqlalchemy.engine.Connection.schema_for_object)'
  id: totrans-2557
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.engine.Connection.__init__), [begin()](#sqlalchemy.engine.Connection.begin),
    [begin_nested()](#sqlalchemy.engine.Connection.begin_nested), [begin_twophase()](#sqlalchemy.engine.Connection.begin_twophase),
    [close()](#sqlalchemy.engine.Connection.close), [closed](#sqlalchemy.engine.Connection.closed),
    [commit()](#sqlalchemy.engine.Connection.commit), [connection](#sqlalchemy.engine.Connection.connection),
    [default_isolation_level](#sqlalchemy.engine.Connection.default_isolation_level),
    [detach()](#sqlalchemy.engine.Connection.detach), [exec_driver_sql()](#sqlalchemy.engine.Connection.exec_driver_sql),
    [execute()](#sqlalchemy.engine.Connection.execute), [execution_options()](#sqlalchemy.engine.Connection.execution_options),
    [get_execution_options()](#sqlalchemy.engine.Connection.get_execution_options),
    [get_isolation_level()](#sqlalchemy.engine.Connection.get_isolation_level), [get_nested_transaction()](#sqlalchemy.engine.Connection.get_nested_transaction),
    [get_transaction()](#sqlalchemy.engine.Connection.get_transaction), [in_nested_transaction()](#sqlalchemy.engine.Connection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.engine.Connection.in_transaction), [info](#sqlalchemy.engine.Connection.info),
    [invalidate()](#sqlalchemy.engine.Connection.invalidate), [invalidated](#sqlalchemy.engine.Connection.invalidated),
    [rollback()](#sqlalchemy.engine.Connection.rollback), [scalar()](#sqlalchemy.engine.Connection.scalar),
    [scalars()](#sqlalchemy.engine.Connection.scalars), [schema_for_object()](#sqlalchemy.engine.Connection.schema_for_object)'
- en: The Connection object represents a single DBAPI connection checked out from
    the connection pool. In this state, the connection pool has no affect upon the
    connection, including its expiration or timeout state. For the connection pool
    to properly manage connections, connections should be returned to the connection
    pool (i.e. `connection.close()`) whenever the connection is not in use.
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
  zh: 连接对象表示从连接池中检出的单个DBAPI连接。在此状态下，连接池对连接没有任何影响，包括其到期或超时状态。为了让连接池正确管理连接，应该在连接不使用时将连接返回给连接池（即`connection.close()`）。
- en: '**Class signature**'
  id: totrans-2559
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    (`sqlalchemy.engine.interfaces.ConnectionEventsTarget`, `sqlalchemy.inspection.Inspectable`)
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    (`sqlalchemy.engine.interfaces.ConnectionEventsTarget`, `sqlalchemy.inspection.Inspectable`)
- en: '[PRE480]'
  id: totrans-2561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: Construct a new Connection.
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的连接。
- en: '[PRE481]'
  id: totrans-2563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: Begin a transaction prior to autobegin occurring.
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动开始之前开始事务。
- en: 'E.g.:'
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE482]'
  id: totrans-2566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: The returned object is an instance of [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction"). This object represents the “scope” of the
    transaction, which completes when either the [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") or [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") method is called; the object also works
    as a context manager as illustrated above.
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")
    的实例。该对象表示事务的“范围”，当调用 [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") 或 [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") 方法时完成事务；该对象还可以作为上述示例中的上下文管理器使用。
- en: 'The [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    method begins a transaction that normally will be begun in any case when the connection
    is first used to execute a statement. The reason this method might be used would
    be to invoke the [`ConnectionEvents.begin()`](events.html#sqlalchemy.events.ConnectionEvents.begin
    "sqlalchemy.events.ConnectionEvents.begin") event at a specific time, or to organize
    code within the scope of a connection checkout in terms of context managed blocks,
    such as:'
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    方法开始一个事务，通常会在连接首次用于执行语句时开始。可能使用此方法的原因是在特定时间调用 [`ConnectionEvents.begin()`](events.html#sqlalchemy.events.ConnectionEvents.begin
    "sqlalchemy.events.ConnectionEvents.begin") 事件，或者以上下文管理块的形式组织代码，例如：'
- en: '[PRE483]'
  id: totrans-2569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: 'The above code is not fundamentally any different in its behavior than the
    following code which does not use [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin"); the below style is known as “commit as
    you go” style:'
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在行为上与不使用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    的以下代码基本上没有任何不同；下面的样式称为“随时提交”样式。
- en: '[PRE484]'
  id: totrans-2571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: From a database point of view, the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method does not emit any SQL or change the
    state of the underlying DBAPI connection in any way; the Python DBAPI does not
    have any concept of explicit transaction begin.
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库角度来看，[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    方法不会发出任何 SQL 或以任何方式更改底层 DBAPI 连接的状态；Python DBAPI 没有任何显式事务开始的概念。
- en: See also
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Transactions and the DBAPI](../tutorial/dbapi_transactions.html#tutorial-working-with-transactions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: '[处理事务和 DBAPI](../tutorial/dbapi_transactions.html#tutorial-working-with-transactions)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中。 '
- en: '[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")
    - use a SAVEPOINT'
  id: totrans-2575
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")
    - 使用 SAVEPOINT。'
- en: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase") - use a two phase /XID transaction'
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase") - 使用两阶段/XID 事务。'
- en: '[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    - context manager available from [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")'
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    - 可从 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 获取的上下文管理器。'
- en: '[PRE485]'
  id: totrans-2578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: Begin a nested transaction (i.e. SAVEPOINT) and return a transaction handle
    that controls the scope of the SAVEPOINT.
  id: totrans-2579
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个嵌套事务（即 SAVEPOINT）并返回一个控制 SAVEPOINT 范围的事务句柄。
- en: 'E.g.:'
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE486]'
  id: totrans-2581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: The returned object is an instance of [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction"), which includes transactional methods [`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit") and [`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback"); for a nested transaction, these
    methods correspond to the operations “RELEASE SAVEPOINT <name>” and “ROLLBACK
    TO SAVEPOINT <name>”. The name of the savepoint is local to the [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction") object and is generated automatically.
    Like any other [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction"),
    the [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    may be used as a context manager as illustrated above which will “release” or
    “rollback” corresponding to if the operation within the block were successful
    or raised an exception.
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")的一个实例，其中包括事务方法[`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit")和[`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback")；对于嵌套事务，这些方法对应于操作“RELEASE SAVEPOINT
    <name>”和“ROLLBACK TO SAVEPOINT <name>”。保存点的名称对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")对象是本地的，并且会自动生成。与任何其他[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")一样，[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")可以像上面所示一样用作上下文管理器，这将“释放”或“回滚”对应于块内的操作是否成功或引发异常。
- en: 'Nested transactions require SAVEPOINT support in the underlying database, else
    the behavior is undefined. SAVEPOINT is commonly used to run operations within
    a transaction that may fail, while continuing the outer transaction. E.g.:'
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套事务要求底层数据库支持SAVEPOINT，否则行为是未定义的。SAVEPOINT通常用于在事务中运行可能失败的操作，同时继续外部事务。例如：
- en: '[PRE487]'
  id: totrans-2584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: 'If [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") is called without first calling [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") or [`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin"), the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will “autobegin” the outer transaction
    first. This outer transaction may be committed using “commit-as-you-go” style,
    e.g.:'
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在未调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")或[`Engine.begin()`](#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")之前调用[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")，则[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象将首先“自动开始”外部事务。这个外部事务可以使用“按步骤提交”样式提交，例如：
- en: '[PRE488]'
  id: totrans-2586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: 'Changed in version 2.0: [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") will now participate in the connection
    “autobegin” behavior that is new as of 2.0 / “future” style connections in 1.4.'
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 现在将参与连接的“自动开始”行为，这是2.0版/ 1.4版中的“未来”风格连接的新功能。
- en: See also
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
- en: '[Using SAVEPOINT](../orm/session_transaction.html#session-begin-nested) - ORM
    support for SAVEPOINT'
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SAVEPOINT](../orm/session_transaction.html#session-begin-nested) - ORM对SAVEPOINT的支持'
- en: '[PRE489]'
  id: totrans-2591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: Begin a two-phase or XA transaction and return a transaction handle.
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个两阶段或XA事务并返回事务句柄。
- en: The returned object is an instance of [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction"), which in addition to the methods provided
    by [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction"),
    also provides a [`TwoPhaseTransaction.prepare()`](#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") method.
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")的一个实例，除了由[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")提供的方法之外，还提供了一个[`TwoPhaseTransaction.prepare()`](#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")方法。
- en: 'Parameters:'
  id: totrans-2594
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**xid** – the two phase transaction id. If not supplied, a random id will be
    generated.'
  id: totrans-2595
  prefs: []
  type: TYPE_NORMAL
  zh: '**xid** – 两阶段事务ID。如果未提供，则会生成一个随机ID。'
- en: See also
  id: totrans-2596
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
  id: totrans-2597
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
- en: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")'
  id: totrans-2598
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")'
- en: '[PRE490]'
  id: totrans-2599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: Close this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。
- en: This results in a release of the underlying database resources, that is, the
    DBAPI connection referenced internally. The DBAPI connection is typically restored
    back to the connection-holding [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    referenced by the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    that produced this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
    Any transactional state present on the DBAPI connection is also unconditionally
    released via the DBAPI connection’s `rollback()` method, regardless of any [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object that may be outstanding with regards to
    this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放底层数据库资源，即内部引用的DBAPI连接。DBAPI连接通常会恢复到由产生此[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")引用的连接持有[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")。无论是否存在与此[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")相关的任何[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")对象，DBAPI连接上的任何事务状态也将通过DBAPI连接的`rollback()`方法无条件释放。
- en: This has the effect of also calling [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") if any transaction is in place.
  id: totrans-2602
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在任何事务，则这也会调用[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")。
- en: After [`Connection.close()`](#sqlalchemy.engine.Connection.close "sqlalchemy.engine.Connection.close")
    is called, the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is permanently in a closed state, and will allow no further operations.
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用[`Connection.close()`](#sqlalchemy.engine.Connection.close "sqlalchemy.engine.Connection.close")之后，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")将永久处于关闭状态，并且不允许进一步操作。
- en: '[PRE491]'
  id: totrans-2604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: Return True if this connection is closed.
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此连接已关闭，则返回True。
- en: '[PRE492]'
  id: totrans-2606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: Commit the transaction that is currently in progress.
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
  zh: 提交当前正在进行的事务。
- en: This method commits the current transaction if one has been started. If no transaction
    was started, the method has no effect, assuming the connection is in a non-invalidated
    state.
  id: totrans-2608
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经启动了当前事务，则此方法会提交当前事务。如果没有启动事务，则该方法不起作用，假定连接处于非失效状态。
- en: A transaction is begun on a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    automatically whenever a statement is first executed, or when the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
  zh: 每当首次执行语句或调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")方法时，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上都会自动开始事务。
- en: Note
  id: totrans-2610
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    method only acts upon the primary database transaction that is linked to the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. It does not operate upon a SAVEPOINT that
    would have been invoked from the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method; for control of a SAVEPOINT,
    call [`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit") on the [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction") that is returned by the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method itself.
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    方法仅对与 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象关联的主数据库事务起作用。它不会对从 [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 方法调用的 SAVEPOINT 进行操作；要控制 SAVEPOINT，请在
    [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")
    方法本身返回的 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    上调用 [`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit")。'
- en: '[PRE493]'
  id: totrans-2612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: The underlying DB-API connection managed by this Connection.
  id: totrans-2613
  prefs: []
  type: TYPE_NORMAL
  zh: 此连接管理的底层 DB-API 连接。
- en: This is a SQLAlchemy connection-pool proxied connection which then has the attribute
    `_ConnectionFairy.dbapi_connection` that refers to the actual driver connection.
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个由 SQLAlchemy 连接池代理的连接，然后具有属性 `_ConnectionFairy.dbapi_connection`，该属性指向实际的驱动程序连接。
- en: See also
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Working with Driver SQL and Raw DBAPI Connections](#dbapi-connections)'
  id: totrans-2616
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Driver SQL 和原始 DBAPI 连接](#dbapi-connections)'
- en: '[PRE494]'
  id: totrans-2617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: The initial-connection time isolation level associated with the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") in use.
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用中的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    关联的初始连接时间隔离级别。
- en: This value is independent of the [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and [`Engine.execution_options.isolation_level`](#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") execution options, and is determined
    by the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    when the first connection is created, by performing a SQL query against the database
    for the current isolation level before any additional commands have been emitted.
  id: totrans-2619
  prefs: []
  type: TYPE_NORMAL
  zh: 此值独立于 [`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 和 [`Engine.execution_options.isolation_level`](#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") 执行选项，并且由 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 在创建第一个连接时确定，通过在发出任何其他命令之前对数据库执行 SQL 查询以获取当前隔离级别。
- en: Calling this accessor does not invoke any new SQL queries.
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此访问器不会触发任何新的 SQL 查询。
- en: See also
  id: totrans-2621
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.get_isolation_level()`](#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current actual isolation
    level'
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前实际隔离级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level'
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    隔离级别'
- en: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 隔离级别'
- en: '[PRE495]'
  id: totrans-2625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: Detach the underlying DB-API connection from its connection pool.
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
  zh: 从其连接池中分离基础 DB-API 连接。
- en: 'E.g.:'
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE496]'
  id: totrans-2628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: This [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    instance will remain usable. When closed (or exited from a context manager context
    as above), the DB-API connection will be literally closed and not returned to
    its originating pool.
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    实例将保持可用状态。当关闭（或者像上面那样退出上下文管理器环境）时，DB-API 连接将被彻底关闭，而不会返回到其原始池中。
- en: This method can be used to insulate the rest of an application from a modified
    state on a connection (such as a transaction isolation level or similar).
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可用于将连接上的修改状态（例如事务隔离级别或类似状态）与应用程序的其余部分隔离开来。
- en: '[PRE497]'
  id: totrans-2631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: Executes a string SQL statement on the DBAPI cursor directly, without any SQL
    compilation steps.
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
  zh: 在不经过任何 SQL 编译步骤的情况下，在 DBAPI 光标上直接执行字符串 SQL 语句。
- en: This can be used to pass any string directly to the `cursor.execute()` method
    of the DBAPI in use.
  id: totrans-2633
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来直接将任何字符串传递给正在使用的 DBAPI 的 `cursor.execute()` 方法。
- en: 'Parameters:'
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` – The statement str to be executed. Bound parameters must use the
    underlying DBAPI’s paramstyle, such as “qmark”, “pyformat”, “format”, etc.'
  id: totrans-2635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 要执行的语句 str。绑定参数必须使用底层 DBAPI 的 paramstyle，例如 “qmark”、“pyformat”、“format”
    等。'
- en: '`parameters` – represent bound parameter values to be used in the execution.
    The format is one of: a dictionary of named parameters, a tuple of positional
    parameters, or a list containing either dictionaries or tuples for multiple-execute
    support.'
  id: totrans-2636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 代表要在执行中使用的绑定参数值。格式之一：命名参数的字典、位置参数的元组，或者包含用于多次执行支持的字典或元组的列表。'
- en: 'Returns:'
  id: totrans-2637
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult").
  id: totrans-2638
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")。
- en: 'E.g. multiple dictionaries:'
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，多个字典：
- en: '[PRE498]'
  id: totrans-2640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: 'Single dictionary:'
  id: totrans-2641
  prefs: []
  type: TYPE_NORMAL
  zh: 单个字典：
- en: '[PRE499]'
  id: totrans-2642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: 'Single tuple:'
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
  zh: 单个元组：
- en: '[PRE500]'
  id: totrans-2644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: Note
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method does not participate in
    the [`ConnectionEvents.before_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`ConnectionEvents.after_execute()`](events.html#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") events. To intercept calls
    to [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql"), use [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") and [`ConnectionEvents.after_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute").
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 方法不参与 [`ConnectionEvents.before_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") 和 [`ConnectionEvents.after_execute()`](events.html#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") 事件。要拦截对 [`Connection.exec_driver_sql()`](#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 的调用，请使用 [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") 和 [`ConnectionEvents.after_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")。'
- en: See also
  id: totrans-2647
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[**PEP 249**](https://peps.python.org/pep-0249/)'
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
  zh: '[**PEP 249**](https://peps.python.org/pep-0249/)'
- en: '[PRE501]'
  id: totrans-2649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: Executes a SQL statement construct and returns a [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一个 SQL 语句构造并返回一个 [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")。
- en: 'Parameters:'
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` –'
  id: totrans-2652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` –'
- en: 'The statement to be executed. This is always an object that is in both the
    [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    and [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    hierarchies, including:'
  id: totrans-2653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要执行的语句。这始终是同时在 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 和 [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") 层次结构中的对象，包括：
- en: '[`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
  id: totrans-2654
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
- en: '[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
  id: totrans-2655
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")、[`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")、[`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")'
- en: '[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    and [`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")'
  id: totrans-2656
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    和 [`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")'
- en: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") and objects
    which inherit from [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")'
  id: totrans-2657
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") 和从[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")继承的对象'
- en: '`parameters` – parameters which will be bound into the statement. This may
    be either a dictionary of parameter names to values, or a mutable sequence (e.g.
    a list) of dictionaries. When a list of dictionaries is passed, the underlying
    statement execution will make use of the DBAPI `cursor.executemany()` method.
    When a single dictionary is passed, the DBAPI `cursor.execute()` method will be
    used.'
  id: totrans-2658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 将绑定到语句中的参数。这可以是参数名称到值的字典，也可以是可变序列（例如列表）的字典。当传递一个字典列表时，底层语句执行将使用DBAPI
    `cursor.executemany()`方法。当传递单个字典时，将使用DBAPI `cursor.execute()`方法。'
- en: '`execution_options` – optional dictionary of execution options, which will
    be associated with the statement execution. This dictionary can provide a subset
    of the options that are accepted by [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options").'
  id: totrans-2659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` – 可选的执行选项字典，将与语句执行关联。该字典可以提供[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项子集。'
- en: 'Returns:'
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object.
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: '[PRE502]'
  id: totrans-2662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: Set non-SQL options for the connection which take effect during execution.
  id: totrans-2663
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在执行期间生效的连接的非SQL选项。
- en: This method modifies this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    **in-place**; the return value is the same [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object upon which the method is called. Note that
    this is in contrast to the behavior of the `execution_options` methods on other
    objects such as [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") and [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"). The rationale is that
    many such execution options necessarily modify the state of the base DBAPI connection
    in any case so there is no feasible means of keeping the effect of such an option
    localized to a “sub” connection.
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法会**就地**修改此[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")；返回值是调用该方法的相同[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。请注意，这与其他对象的`execution_options`方法的行为相反，例如[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")和[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")。其理由是许多这样的执行选项必然会修改基本DBAPI连接的状态，因此没有可行的方法将此类选项的效果局限于“子”连接。
- en: 'Changed in version 2.0: The [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method, in contrast to other
    objects with this method, modifies the connection in-place without creating copy
    of it.'
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的更改：[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法，与具有此方法的其他对象不同，会就地修改连接而不创建副本。
- en: As discussed elsewhere, the [`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method accepts any arbitrary
    parameters including user defined names. All parameters given are consumable in
    a number of ways including by using the [`Connection.get_execution_options()`](#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options") method. See the examples
    at [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options").
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
  zh: 如其他地方所讨论的，[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法接受任意参数，包括用户定义的名称。所有给定的参数都可以以多种方式被消耗，包括使用
    [`Connection.get_execution_options()`](#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options") 方法。请参见 [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 和 [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 中的示例。
- en: The keywords that are currently recognized by SQLAlchemy itself include all
    those listed under [`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"), as well as others that
    are specific to [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 本身当前识别的关键字包括[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")下列出的所有内容，以及特定于[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的其他内容。
- en: 'Parameters:'
  id: totrans-2668
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`compiled_cache` –'
  id: totrans-2669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compiled_cache` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").'
  id: totrans-2670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。
- en: A dictionary where [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    objects will be cached when the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    compiles a clause expression into a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This dictionary will supersede the statement
    cache that may be configured on the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    itself. If set to None, caching is disabled, even if the engine has a configured
    cache size.
  id: totrans-2671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字典，在[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")编译子句表达式为[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象时将被缓存。该字典将取代可能在[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")本身上配置的语句缓存。如果设置为`None`，缓存将被禁用，即使引擎配置了缓存大小。
- en: Note that the ORM makes use of its own “compiled” caches for some operations,
    including flush operations. The caching used by the ORM internally supersedes
    a cache dictionary specified here.
  id: totrans-2672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，ORM 在一些操作中（包括 flush 操作）使用了自己的“compiled”缓存。ORM 内部使用的缓存优先于此处指定的缓存字典。
- en: '`logging_token` –'
  id: totrans-2673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging_token` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"), [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable").'
  id: totrans-2674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。
- en: Adds the specified string token surrounded by brackets in log messages logged
    by the connection, i.e. the logging that’s enabled either via the [`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") flag or via the `logging.getLogger("sqlalchemy.engine")`
    logger. This allows a per-connection or per-sub-engine token to be available which
    is useful for debugging concurrent connection scenarios.
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在连接日志中添加由括号括起来的指定字符串标记，即由连接记录的日志启用的日志，即通过[`create_engine.echo`](engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine")标志启用的日志，或通过`logging.getLogger("sqlalchemy.engine")`记录器启用的日志。这允许每个连接或每个子引擎都有一个可用的标记，这对于调试并发连接场景非常有用。
- en: New in version 1.4.0b2.
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 1.4.0b2 新增。
- en: See also
  id: totrans-2677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Setting Per-Connection / Sub-Engine Tokens](engines.html#dbengine-logging-tokens)
    - usage example'
  id: totrans-2678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置每个连接 / 子引擎标记](engines.html#dbengine-logging-tokens) - 用法示例'
- en: '[`create_engine.logging_name`](engines.html#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") - adds a name to the name used by the Python logger
    object itself.'
  id: totrans-2679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.logging_name`](engines.html#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") - 将名称添加到 Python 日志记录器对象本身使用的名称。'
- en: '`isolation_level` –'
  id: totrans-2680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").'
  id: totrans-2681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。
- en: Set the transaction isolation level for the lifespan of this [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. Valid values include those string values
    accepted by the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter passed to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). These levels are semi-database specific; see individual
    dialect documentation for valid levels.
  id: totrans-2682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置此 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象的事务隔离级别的生命周期。有效值包括那些由 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 方法传递给 [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数接受的字符串值。这些级别在某种程度上特定于数据库；有关有效级别，请参阅各个方言的文档。
- en: The isolation level option applies the isolation level by emitting statements
    on the DBAPI connection, and **necessarily affects the original Connection object
    overall**. The isolation level will remain at the given setting until explicitly
    changed, or when the DBAPI connection itself is [released](../glossary.html#term-released)
    to the connection pool, i.e. the [`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method is called, at which time an event
    handler will emit additional statements on the DBAPI connection in order to revert
    the isolation level change.
  id: totrans-2683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过在 DBAPI 连接上发出语句，`isolation_level` 选项将应用隔离级别，并且**必然会影响原始 Connection 对象的整体**。隔离级别将保持在给定设置，直到明确更改，或者当
    DBAPI 连接本身被释放到连接池时，即调用 [`Connection.close()`](#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") 方法时，在这时，事件处理程序将发出附加语句以在 DBAPI 连接上恢复隔离级别更改。
- en: Note
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The `isolation_level` execution option may only be established before the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called, as well as before any
    SQL statements are emitted which would otherwise trigger “autobegin”, or directly
    after a call to [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    or [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback").
    A database cannot change the isolation level on a transaction in progress.
  id: totrans-2685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`isolation_level` 执行选项只能在调用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 方法之前建立，并且在发出任何否则会触发“autobegin”的 SQL 语句之前，或者在调用
    [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    或 [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")
    之后直接建立。数据库无法在进行中的事务上更改隔离级别。'
- en: Note
  id: totrans-2686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The `isolation_level` execution option is implicitly reset if the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is invalidated, e.g. via the [`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method, or if a disconnection error
    occurs. The new connection produced after the invalidation will **not** have the
    selected isolation level re-applied to it automatically.
  id: totrans-2687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    被无效化，例如通过 [`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") 方法，或者发生断开连接错误，则会隐式重置 `isolation_level`
    执行选项。在无效化后生成的新连接将**不会**自动重新应用所选隔离级别。
- en: See also
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](#dbapi-autocommit)'
  id: totrans-2689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括 DBAPI 自动提交](#dbapi-autocommit)'
- en: '[`Connection.get_isolation_level()`](#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current actual level'
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前实际级别'
- en: '`no_parameters` –'
  id: totrans-2691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no_parameters` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable").'
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")。
- en: When `True`, if the final parameter list or dictionary is totally empty, will
    invoke the statement on the cursor as `cursor.execute(statement)`, not passing
    the parameter collection at all. Some DBAPIs such as psycopg2 and mysql-python
    consider percent signs as significant only when parameters are present; this option
    allows code to generate SQL containing percent signs (and possibly other characters)
    that is neutral regarding whether it’s executed by the DBAPI or piped into a script
    that’s later invoked by command line tools.
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，如果最终参数列表或字典完全为空，则会像`cursor.execute(statement)`一样在游标上调用语句，根本不传递参数集合。某些
    DBAPI，如 psycopg2 和 mysql-python，仅当存在参数时才认为百分号是有意义的；此选项允许代码生成包含百分号（和可能的其他字符）的 SQL，该
    SQL 在执行时与 DBAPI 无关，或者被管道传递到稍后由命令行工具调用的脚本中。
- en: '`stream_results` –'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stream_results` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable").'
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")。
- en: Indicate to the dialect that results should be “streamed” and not pre-buffered,
    if possible. For backends such as PostgreSQL, MySQL and MariaDB, this indicates
    the use of a “server side cursor” as opposed to a client side cursor. Other backends
    such as that of Oracle may already use server side cursors by default.
  id: totrans-2696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果可能的话，向方言指示结果应“流式传输”而不是预先缓冲。对于后端如 PostgreSQL、MySQL 和 MariaDB，这表示使用“服务器端游标”而不是客户端游标。其他后端，如
    Oracle 的后端，可能默认已使用服务器端游标。
- en: The usage of [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") is usually combined with setting
    a fixed number of rows to to be fetched in batches, to allow for efficient iteration
    of database rows while at the same time not loading all result rows into memory
    at once; this can be configured on a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object using the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    method, after execution has returned a new [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"). If [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") is not used, the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") mode of operation will instead
    use a dynamically sized buffer which buffers sets of rows at a time, growing on
    each batch based on a fixed growth size up until a limit which may be configured
    using the [`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") parameter.
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常将[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")的使用与设置一定数量的行以按批次提取相结合，以便在数据库行的有效迭代同时不一次将所有结果行加载到内存中；可以在执行返回新的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")之后，通过[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法在[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象上配置此项。如果不使用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")，那么[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")的操作模式将使用动态大小的缓冲区，该缓冲区一次缓冲一组行，在每个批次上根据固定的增长大小增长，直到通过使用[`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options")参数配置的限制。
- en: When using the ORM to fetch ORM mapped objects from a result, [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") should always be used with [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options"), so that the ORM does not fetch
    all rows into new ORM objects at once.
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 ORM 从结果中获取 ORM 映射对象时，应始终与 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 一起使用 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")，以便 ORM 不会一次性将所有行都获取到新的 ORM 对象中。
- en: For typical use, the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option should be preferred,
    which sets up both [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") at once. This option is supported both at
    a core level by [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    as well as by the ORM `Session`; the latter is described at [Fetching Large Result
    Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per).
  id: totrans-2699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于常规用途，应优先使用 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项，它同时设置了 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 和 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")。这个选项在核心层面由 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 和 ORM `Session` 支持；后者在[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)中有描述。
- en: See also
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - background on [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results) - 关于 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 的背景信息'
- en: '[`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.max_row_buffer`](#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html) describing the ORM
    version of `yield_per`'
  id: totrans-2704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在[ORM 查询指南](../orm/queryguide/index.html)中描述了 `yield_per` 的 ORM 版本'
- en: '`max_row_buffer` –'
  id: totrans-2705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_row_buffer` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable").
    Sets a maximum buffer size to use when the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option is used on
    a backend that supports server side cursors. The default value if not specified
    is 1000.'
  id: totrans-2706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。在支持服务器端游标的后端使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项时，设置要使用的最大缓冲区大小。如果未指定，默认值为
    1000。
- en: See also
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)'
  id: totrans-2709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results)'
- en: '`yield_per` –'
  id: totrans-2710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yield_per` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable").
    Integer value applied which will set the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option and invoke
    [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    automatically at once. Allows equivalent functionality as is present when using
    this parameter with the ORM.'
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。应用的整数值将设置 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项，并立即调用 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")。允许与 ORM 中使用此参数时存在的等效功能。
- en: New in version 1.4.40.
  id: totrans-2712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4.40 中的新功能。
- en: See also
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - background and examples on using server side cursors with Core.'
  id: totrans-2714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results) - 使用 Core 使用服务器端游标的背景和示例。'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html) describing the ORM
    version of `yield_per`'
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中描述了 `yield_per` 的 ORM 版本'
- en: '`insertmanyvalues_page_size` –'
  id: totrans-2716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertmanyvalues_page_size` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"). Number of rows
    to format into an INSERT statement when the statement uses “insertmanyvalues”
    mode, which is a paged form of bulk insert that is used for many backends when
    using [executemany](../glossary.html#term-executemany) execution typically in
    conjunction with RETURNING. Defaults to 1000\. May also be modified on a per-engine
    basis using the [`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") parameter.'
  id: totrans-2717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。当语句使用“insertmanyvalues”模式时，即在使用 [executemany](../glossary.html#term-executemany)
    执行时通常与 RETURNING 一起使用时，将格式化为 INSERT 语句的行数，这是一种分页形式的批量插入，用于许多后端。默认为 1000。也可以通过
    [`create_engine.insertmanyvalues_page_size`](engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") 参数在每个引擎上进行修改。
- en: New in version 2.0.
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: See also
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“Insert Many Values” Behavior for INSERT statements](#engine-insertmanyvalues)'
  id: totrans-2720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“Insert Many Values” Behavior for INSERT statements](#engine-insertmanyvalues)'
- en: '`schema_translate_map` –'
  id: totrans-2721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema_translate_map` –'
- en: 'Available on: [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"), [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable").'
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于：[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")。
- en: A dictionary mapping schema names to schema names, that will be applied to the
    [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    element of each [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    encountered when SQL or DDL expression elements are compiled into strings; the
    resulting schema name will be converted based on presence in the map of the original
    name.
  id: totrans-2723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将模式名称映射到模式名称的字典，将应用于将 SQL 或 DDL 表达式元素编译为字符串时遇到的每个 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") 元素；根据原始名称在映射中的存在情况转换结果模式名称。
- en: See also
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Translation of Schema Names](#schema-translating)'
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[模式名称的翻译](#schema-translating)'
- en: '`preserve_rowcount` –'
  id: totrans-2726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preserve_rowcount` –'
- en: Boolean; when True, the `cursor.rowcount` attribute will be unconditionally
    memoized within the result and made available via the [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute. Normally, this attribute
    is only preserved for UPDATE and DELETE statements. Using this option, the DBAPIs
    rowcount value can be accessed for other kinds of statements such as INSERT and
    SELECT, to the degree that the DBAPI supports these statements. See [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") for notes regarding the behavior of
    this attribute.
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Boolean；当为 True 时，`cursor.rowcount` 属性将在结果中被无条件地存储并可通过 [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") 属性进行访问。通常情况下，此属性仅对 UPDATE 和 DELETE
    语句保留。使用此选项，可以访问 DBAPI 的 rowcount 值以用于其他类型的语句，如 INSERT 和 SELECT，只要 DBAPI 支持这些语句。有关此属性行为的说明，请参见
    [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")。
- en: New in version 2.0.28.
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0.28 中新增。
- en: See also
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-2730
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-2731
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[`Connection.get_execution_options()`](#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")'
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_execution_options()`](#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 所有
    ORM 特定执行选项的文档'
- en: '[PRE503]'
  id: totrans-2734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-2736
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.3 中新增。
- en: See also
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[PRE504]'
  id: totrans-2739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: Return the current **actual** isolation level that’s present on the database
    within the scope of this connection.
  id: totrans-2740
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在此连接范围内数据库中**实际**存在的当前隔离级别。
- en: This attribute will perform a live SQL operation against the database in order
    to procure the current isolation level, so the value returned is the actual level
    on the underlying DBAPI connection regardless of how this state was set. This
    will be one of the four actual isolation modes `READ UNCOMMITTED`, `READ COMMITTED`,
    `REPEATABLE READ`, `SERIALIZABLE`. It will **not** include the `AUTOCOMMIT` isolation
    level setting. Third party dialects may also feature additional isolation level
    settings.
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性将对数据库执行实时 SQL 操作，以获取当前隔离级别，因此返回的值是底层 DBAPI 连接上的实际级别，无论该状态如何设置。它将是四种实际隔离模式之一：`READ
    UNCOMMITTED`、`READ COMMITTED`、`REPEATABLE READ`、`SERIALIZABLE`。它**不会**包括 `AUTOCOMMIT`
    隔离级别设置。第三方方言可能还具有其他隔离级别设置。
- en: Note
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method **will not report** on the `AUTOCOMMIT` isolation level, which is
    a separate [dbapi](../glossary.html#term-DBAPI) setting that’s independent of
    **actual** isolation level. When `AUTOCOMMIT` is in use, the database connection
    still has a “traditional” isolation mode in effect, that is typically one of the
    four values `READ UNCOMMITTED`, `READ COMMITTED`, `REPEATABLE READ`, `SERIALIZABLE`.
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法**不会报告** `AUTOCOMMIT` 隔离级别，它是独立于**实际**隔离级别的单独的 [dbapi](../glossary.html#term-DBAPI)
    设置。当使用 `AUTOCOMMIT` 时，数据库连接仍然具有“传统”隔离模式，通常是四个值之一 `READ UNCOMMITTED`、`READ COMMITTED`、`REPEATABLE
    READ`、`SERIALIZABLE`。
- en: Compare to the [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") accessor which returns
    the isolation level that is present on the database at initial connection time.
  id: totrans-2744
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") 访问器相比，后者返回在初始连接时数据库中存在的隔离级别。
- en: See also
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  id: totrans-2746
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.default_isolation_level`](#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - 查看默认级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level'
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的隔离级别'
- en: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的隔离级别'
- en: '[PRE505]'
  id: totrans-2749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: Return the current nested transaction in progress, if any.
  id: totrans-2750
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的嵌套事务（如果有）。
- en: New in version 1.4.
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能。
- en: '[PRE506]'
  id: totrans-2752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: Return the current root transaction in progress, if any.
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的根事务（如果有）。
- en: New in version 1.4.
  id: totrans-2754
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能。
- en: '[PRE507]'
  id: totrans-2755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: Return True if a transaction is in progress.
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务正在进行中，则返回 True。
- en: '[PRE508]'
  id: totrans-2757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: Return True if a transaction is in progress.
  id: totrans-2758
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务正在进行中，则返回 True。
- en: '[PRE509]'
  id: totrans-2759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    allowing user-defined data to be associated with the connection.
  id: totrans-2760
  prefs: []
  type: TYPE_NORMAL
  zh: 与此 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    所引用的底层 DBAPI 连接相关联的信息字典，允许将用户定义的数据与连接关联起来。
- en: The data here will follow along with the DBAPI connection including after it
    is returned to the connection pool and used again in subsequent instances of [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-2761
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的数据将与 DBAPI 连接一起传递，包括在将其返回到连接池并在后续 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 实例中再次使用之后。
- en: '[PRE510]'
  id: totrans-2762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: Invalidate the underlying DBAPI connection associated with this [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-2763
  prefs: []
  type: TYPE_NORMAL
  zh: 使与此 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    关联的底层 DBAPI 连接无效。
- en: An attempt will be made to close the underlying DBAPI connection immediately;
    however if this operation fails, the error is logged but not raised. The connection
    is then discarded whether or not close() succeeded.
  id: totrans-2764
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试立即关闭底层的 DBAPI 连接；但是，如果此操作失败，则会记录错误但不会引发异常。然后，无论 close() 是否成功，连接都将被丢弃。
- en: Upon the next use (where “use” typically means using the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method or similar), this [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") will attempt to procure a new DBAPI connection
    using the services of the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    as a source of connectivity (e.g. a “reconnection”).
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一次使用时（“使用”通常意味着使用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法或类似方法），此 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 将尝试使用 [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 的服务作为连接源（例如，“重新连接”）来获得新的 DBAPI 连接。
- en: If a transaction was in progress (e.g. the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method has been called) when [`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method is called, at the DBAPI level
    all state associated with this transaction is lost, as the DBAPI connection is
    closed. The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    will not allow a reconnection to proceed until the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") object is ended, by calling the [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") method; until that point, any attempt
    at continuing to use the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    will raise an [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"). This is to prevent applications from accidentally
    continuing an ongoing transactional operations despite the fact that the transaction
    has been lost due to an invalidation.
  id: totrans-2766
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate "sqlalchemy.engine.Connection.invalidate")方法时，如果正在进行事务（例如已调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法），则在DBAPI级别，与此事务相关的所有状态都会丢失，因为DBAPI连接被关闭。直到调用[`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback")方法结束[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")对象为止，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")将不允许重新连接进行，直到此时，任何继续使用[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的尝试都会引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。这是为了防止应用程序意外地继续进行已丢失的事务操作，尽管事务由于无效化而丢失。
- en: The [`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate "sqlalchemy.engine.Connection.invalidate")
    method, just like auto-invalidation, will at the connection pool level invoke
    the [`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event.
  id: totrans-2767
  prefs: []
  type: TYPE_NORMAL
  zh: 与自动无效化一样，[`Connection.invalidate()`](#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法在连接池级别会触发[`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate")事件。
- en: 'Parameters:'
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**exception** – an optional `Exception` instance that’s the reason for the
    invalidation. is passed along to event handlers and logging functions.'
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
  zh: '**exception** – 一个可选的`Exception`实例，表示无效化的原因，会传递给事件处理程序和日志记录函数。'
- en: See also
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](pooling.html#pool-connection-invalidation)'
  id: totrans-2771
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于无效化的信息](pooling.html#pool-connection-invalidation)'
- en: '[PRE511]'
  id: totrans-2772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: Return True if this connection was invalidated.
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此连接被无效化，则返回True。
- en: This does not indicate whether or not the connection was invalidated at the
    pool level, however
  id: totrans-2774
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这并不表示连接是否在池级别被无效化。
- en: '[PRE512]'
  id: totrans-2775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: Roll back the transaction that is currently in progress.
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前正在进行的事务。
- en: This method rolls back the current transaction if one has been started. If no
    transaction was started, the method has no effect. If a transaction was started
    and the connection is in an invalidated state, the transaction is cleared using
    this method.
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经开始了当前事务，则此方法会回滚当前事务。如果没有启动事务，则此方法不起作用。如果已启动事务且连接处于无效状态，则使用此方法清除事务。
- en: A transaction is begun on a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    automatically whenever a statement is first executed, or when the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  id: totrans-2778
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一次执行语句或调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")方法时，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")会自动开始事务。
- en: Note
  id: totrans-2779
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")
    method only acts upon the primary database transaction that is linked to the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. It does not operate upon a SAVEPOINT that
    would have been invoked from the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method; for control of a SAVEPOINT,
    call [`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback") on the [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction") that is returned by the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method itself.
  id: totrans-2780
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")
    方法仅作用于与 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象关联的主数据库事务。它不会作用于通过 [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 方法调用的 SAVEPOINT；要控制 SAVEPOINT，请在
    [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")
    方法本身返回的 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    上调用 [`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback")。'
- en: '[PRE513]'
  id: totrans-2781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: Executes a SQL statement construct and returns a scalar object.
  id: totrans-2782
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 SQL 语句构造并返回一个标量对象。
- en: This method is shorthand for invoking the [`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method after invoking the [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  id: totrans-2783
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是在调用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    方法后调用 [`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")
    方法的简写。参数是等效的。
- en: 'Returns:'
  id: totrans-2784
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a scalar Python value representing the first column of the first row returned.
  id: totrans-2785
  prefs: []
  type: TYPE_NORMAL
  zh: 代表返回的第一行的第一列的标量 Python 值。
- en: '[PRE514]'
  id: totrans-2786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: Executes and returns a scalar result set, which yields scalar values from the
    first column of each row.
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
  zh: 执行并返回一个标量结果集��该结果集从每行的第一列产生标量值。
- en: This method is equivalent to calling [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") to receive a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, then invoking the [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method to produce a [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") instance.
  id: totrans-2788
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法等同于调用 [`Connection.execute()`](#sqlalchemy.engine.Connection.execute "sqlalchemy.engine.Connection.execute")
    以接收一个 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象，然后调用
    [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    方法生成一个 [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    实例。
- en: 'Returns:'
  id: totrans-2789
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
  id: totrans-2790
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
- en: New in version 1.4.24.
  id: totrans-2791
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.24 中的新功能。
- en: '[PRE515]'
  id: totrans-2792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: Return the schema name for the given schema item taking into account current
    schema translate map.
  id: totrans-2793
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式项的模式名称，考虑当前模式转换映射。
- en: '[PRE516]'
  id: totrans-2794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: A set of hooks intended to augment the construction of an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object based on entrypoint names in a URL.
  id: totrans-2795
  prefs: []
  type: TYPE_NORMAL
  zh: 一组旨在通过 URL 中的入口点名称增强基于 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象构造的钩子。
- en: 'The purpose of [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") is to allow third-party systems to apply
    engine, pool and dialect level event listeners without the need for the target
    application to be modified; instead, the plugin names can be added to the database
    URL. Target applications for [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") include:'
  id: totrans-2796
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin "sqlalchemy.engine.CreateEnginePlugin")
    的目的是允许第三方系统应用引擎、池和方言级别的事件侦听器，而无需修改目标应用程序；相反，插件名称可以添加到数据库 URL 中。 [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") 的目标应用程序包括：'
- en: connection and SQL performance tools, e.g. which use events to track number
    of checkouts and/or time spent with statements
  id: totrans-2797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接和 SQL 性能工具，例如使用事件跟踪检出次数和/或与语句一起花费的时间
- en: connectivity plugins such as proxies
  id: totrans-2798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如代理之类的连接插件
- en: 'A rudimentary [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") that attaches a logger to an [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object might look like:'
  id: totrans-2799
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的 [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin "sqlalchemy.engine.CreateEnginePlugin")，将一个日志记录器附加到一个
    [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") 对象可能看起来像这样：
- en: '[PRE517]'
  id: totrans-2800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: 'Plugins are registered using entry points in a similar way as that of dialects:'
  id: totrans-2801
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是使用与方言类似的方式使用入口点进行注册的：
- en: '[PRE518]'
  id: totrans-2802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: 'A plugin that uses the above names would be invoked from a database URL as
    in:'
  id: totrans-2803
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述名称的插件将从数据库 URL 中调用，如下所示：
- en: '[PRE519]'
  id: totrans-2804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: 'The `plugin` URL parameter supports multiple instances, so that a URL may specify
    multiple plugins; they are loaded in the order stated in the URL:'
  id: totrans-2805
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugin` URL 参数支持多个实例，因此 URL 可以指定多个插件；它们按照 URL 中指定的顺序加载：'
- en: '[PRE520]'
  id: totrans-2806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: 'The plugin names may also be passed directly to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") using the [`create_engine.plugins`](engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") argument:'
  id: totrans-2807
  prefs: []
  type: TYPE_NORMAL
  zh: 插件名称也可以直接通过 [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的 [`create_engine.plugins`](engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") 参数传递：
- en: '[PRE521]'
  id: totrans-2808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: 'New in version 1.2.3: plugin names can also be specified to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as a list'
  id: totrans-2809
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2.3 中的新增内容：可以将插件名称作为列表指定给 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。
- en: A plugin may consume plugin-specific arguments from the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object as well as the `kwargs` dictionary, which is the
    dictionary of arguments passed to the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call. “Consuming” these arguments includes that they
    must be removed when the plugin initializes, so that the arguments are not passed
    along to the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    constructor, where they will raise an [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") because they are not known by the dialect.
  id: totrans-2810
  prefs: []
  type: TYPE_NORMAL
  zh: 插件还可以从 [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象以及传递给
    [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    调用的参数字典中消耗插件特定参数。 “消耗” 这些参数包括在插件初始化时必须删除它们，以便不将参数传递给 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 构造函数，否则它们将引发 [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")，因为方言不知道它们。
- en: 'As of version 1.4 of SQLAlchemy, arguments should continue to be consumed from
    the `kwargs` dictionary directly, by removing the values with a method such as
    `dict.pop`. Arguments from the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object should be consumed by implementing the [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method, returning a new copy
    of the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") with
    plugin-specific parameters removed:'
  id: totrans-2811
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 SQLAlchemy 版本 1.4，参数应该继续直接从 `kwargs` 字典中消耗，通过使用诸如 `dict.pop` 的方法删除值。应该通过实现
    [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") 方法消耗来自 [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象的参数，返回一个新的不含插件特定参数的 [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 的副本：
- en: '[PRE522]'
  id: totrans-2812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: 'Arguments like those illustrated above would be consumed from a [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call such as:'
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
  zh: 类似上述示例的参数将从 [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    调用中消耗：
- en: '[PRE523]'
  id: totrans-2814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: 'Changed in version 1.4: The [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object is now immutable; a [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") that needs to alter the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") should implement the newly added [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method, which is invoked after
    the plugin is constructed.'
  id: totrans-2815
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起更改：[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象现在是不可变的；需要改变 [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    的 [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin "sqlalchemy.engine.CreateEnginePlugin")
    应该实现新添加的 [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") 方法，在构造插件之后调用。
- en: 'For migration, construct the plugin in the following way, checking for the
    existence of the [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method to detect which version
    is running:'
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
  zh: 对于迁移，以以下方式构建插件，检查[`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url")方法的存在以检测正在运行的版本：
- en: '[PRE524]'
  id: totrans-2817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: See also
  id: totrans-2818
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The URL object is now immutable](../changelog/migration_14.html#change-5526)
    - overview of the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    change which also includes notes regarding [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin").'
  id: totrans-2819
  prefs: []
  type: TYPE_NORMAL
  zh: '[URL对象现在是不可变的](../changelog/migration_14.html#change-5526) - [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")更改的概述，还包括有关[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")的注释。'
- en: '**Members**'
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.engine.CreateEnginePlugin.__init__), [engine_created()](#sqlalchemy.engine.CreateEnginePlugin.engine_created),
    [handle_dialect_kwargs()](#sqlalchemy.engine.CreateEnginePlugin.handle_dialect_kwargs),
    [handle_pool_kwargs()](#sqlalchemy.engine.CreateEnginePlugin.handle_pool_kwargs),
    [update_url()](#sqlalchemy.engine.CreateEnginePlugin.update_url)'
  id: totrans-2821
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.engine.CreateEnginePlugin.__init__), [engine_created()](#sqlalchemy.engine.CreateEnginePlugin.engine_created),
    [handle_dialect_kwargs()](#sqlalchemy.engine.CreateEnginePlugin.handle_dialect_kwargs),
    [handle_pool_kwargs()](#sqlalchemy.engine.CreateEnginePlugin.handle_pool_kwargs),
    [update_url()](#sqlalchemy.engine.CreateEnginePlugin.update_url)'
- en: When the engine creation process completes and produces the [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object, it is again passed to the plugin via the [`CreateEnginePlugin.engine_created()`](#sqlalchemy.engine.CreateEnginePlugin.engine_created
    "sqlalchemy.engine.CreateEnginePlugin.engine_created") hook. In this hook, additional
    changes can be made to the engine, most typically involving setup of events (e.g.
    those defined in [Core Events](events.html)).
  id: totrans-2822
  prefs: []
  type: TYPE_NORMAL
  zh: 当引擎创建过程完成并生成[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象时，再次通过[`CreateEnginePlugin.engine_created()`](#sqlalchemy.engine.CreateEnginePlugin.engine_created
    "sqlalchemy.engine.CreateEnginePlugin.engine_created")钩子将其传递给插件。在此钩子中，可以对引擎进行其他更改，最常涉及事件设置（例如在[核心事件](events.html)中定义的事件）。
- en: '[PRE525]'
  id: totrans-2823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: Construct a new [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin").
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin "sqlalchemy.engine.CreateEnginePlugin")。
- en: The plugin object is instantiated individually for each call to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). A single `Engine` will be passed to the [`CreateEnginePlugin.engine_created()`](#sqlalchemy.engine.CreateEnginePlugin.engine_created
    "sqlalchemy.engine.CreateEnginePlugin.engine_created") method corresponding to
    this URL.
  id: totrans-2825
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每次调用[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")都会单独实例化插件对象。一个单独的`Engine`将传递给与此URL对应的[`CreateEnginePlugin.engine_created()`](#sqlalchemy.engine.CreateEnginePlugin.engine_created
    "sqlalchemy.engine.CreateEnginePlugin.engine_created")方法。
- en: 'Parameters:'
  id: totrans-2826
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`url` –'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url` –'
- en: the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object.
    The plugin may inspect the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    for arguments. Arguments used by the plugin should be removed, by returning an
    updated [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") from
    the [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method.
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象。插件可以检查[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的参数。插件使用的参数应通过从[`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url")方法返回的更新后的[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")来移除。'
- en: 'Changed in version 1.4: The [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object is now immutable, so a [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") that needs to alter the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object should implement the [`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url") method.'
  id: totrans-2829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象现在是不可变的，因此需要修改[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象的[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")应实现[`CreateEnginePlugin.update_url()`](#sqlalchemy.engine.CreateEnginePlugin.update_url
    "sqlalchemy.engine.CreateEnginePlugin.update_url")方法。
- en: '`kwargs` – The keyword arguments passed to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").'
  id: totrans-2830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – 传递给[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")的关键字参数。'
- en: '[PRE526]'
  id: totrans-2831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: Receive the [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object when it is fully constructed.
  id: totrans-2832
  prefs: []
  type: TYPE_NORMAL
  zh: 当完全构建时，接收[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象。
- en: The plugin may make additional changes to the engine, such as registering engine
    or connection pool events.
  id: totrans-2833
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可能对引擎进行其他更改，例如注册引擎或连接池事件。
- en: '[PRE527]'
  id: totrans-2834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: parse and modify dialect kwargs
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
  zh: 解析和修改方言参数。
- en: '[PRE528]'
  id: totrans-2836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: parse and modify pool kwargs
  id: totrans-2837
  prefs: []
  type: TYPE_NORMAL
  zh: 解析和修改池参数。
- en: '[PRE529]'
  id: totrans-2838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: Update the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL").
  id: totrans-2839
  prefs: []
  type: TYPE_NORMAL
  zh: 更新[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")。
- en: A new [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") should
    be returned. This method is typically used to consume configuration arguments
    from the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") which
    must be removed, as they will not be recognized by the dialect. The [`URL.difference_update_query()`](engines.html#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query") method is available to remove
    these arguments. See the docstring at [`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") for an example.
  id: totrans-2840
  prefs: []
  type: TYPE_NORMAL
  zh: 应返回一个新的[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")。通常使用此方法来消耗从[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")中移除的配置参数，因为方言不会识别这些参数。[`URL.difference_update_query()`](engines.html#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")方法可用于移除这些参数。查看[`CreateEnginePlugin`](#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")的文档字符串以获取示例。
- en: New in version 1.4.
  id: totrans-2841
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE530]'
  id: totrans-2842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: Connects a [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    and [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    together to provide a source of database connectivity and behavior.
  id: totrans-2843
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")和[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")连接在一起，以提供数据库连接和行为的来源。
- en: An [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") object is
    instantiated publicly using the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  id: totrans-2844
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")函数公开实例化一个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象。
- en: See also
  id: totrans-2845
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Engine Configuration](engines.html)'
  id: totrans-2846
  prefs: []
  type: TYPE_NORMAL
  zh: '[引擎配置](engines.html)'
- en: '[Working with Engines and Connections](#)'
  id: totrans-2847
  prefs: []
  type: TYPE_NORMAL
  zh: '[与引擎和连接一起工作](#)'
- en: '**Members**'
  id: totrans-2848
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[begin()](#sqlalchemy.engine.Engine.begin), [clear_compiled_cache()](#sqlalchemy.engine.Engine.clear_compiled_cache),
    [connect()](#sqlalchemy.engine.Engine.connect), [dispose()](#sqlalchemy.engine.Engine.dispose),
    [driver](#sqlalchemy.engine.Engine.driver), [engine](#sqlalchemy.engine.Engine.engine),
    [execution_options()](#sqlalchemy.engine.Engine.execution_options), [get_execution_options()](#sqlalchemy.engine.Engine.get_execution_options),
    [name](#sqlalchemy.engine.Engine.name), [raw_connection()](#sqlalchemy.engine.Engine.raw_connection),
    [update_execution_options()](#sqlalchemy.engine.Engine.update_execution_options)'
  id: totrans-2849
  prefs: []
  type: TYPE_NORMAL
  zh: '[begin()](#sqlalchemy.engine.Engine.begin), [clear_compiled_cache()](#sqlalchemy.engine.Engine.clear_compiled_cache),
    [connect()](#sqlalchemy.engine.Engine.connect), [dispose()](#sqlalchemy.engine.Engine.dispose),
    [driver](#sqlalchemy.engine.Engine.driver), [engine](#sqlalchemy.engine.Engine.engine),
    [execution_options()](#sqlalchemy.engine.Engine.execution_options), [get_execution_options()](#sqlalchemy.engine.Engine.get_execution_options),
    [name](#sqlalchemy.engine.Engine.name), [raw_connection()](#sqlalchemy.engine.Engine.raw_connection),
    [update_execution_options()](#sqlalchemy.engine.Engine.update_execution_options)'
- en: '**Class signature**'
  id: totrans-2850
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    (`sqlalchemy.engine.interfaces.ConnectionEventsTarget`, [`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.inspection.Inspectable`)
  id: totrans-2851
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")（`sqlalchemy.engine.interfaces.ConnectionEventsTarget`，[`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified")，`sqlalchemy.inspection.Inspectable`）
- en: '[PRE531]'
  id: totrans-2852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: Return a context manager delivering a [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") with a [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") established.
  id: totrans-2853
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个通过建立[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")提供的上下文管理器。
- en: 'E.g.:'
  id: totrans-2854
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE532]'
  id: totrans-2855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: Upon successful operation, the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is committed. If an error is raised, the [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is rolled back.
  id: totrans-2856
  prefs: []
  type: TYPE_NORMAL
  zh: 操作成功后，[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")被提交。如果出现错误，则[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")被回滚。
- en: See also
  id: totrans-2857
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    - procure a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    from an [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").'
  id: totrans-2858
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.connect()`](#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    - 从[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")获取一个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    - start a [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    for a particular [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").'
  id: totrans-2859
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    - 为特定的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")启动一个[`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")。'
- en: '[PRE533]'
  id: totrans-2860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: Clear the compiled cache associated with the dialect.
  id: totrans-2861
  prefs: []
  type: TYPE_NORMAL
  zh: 清除与方言相关联的编译缓存。
- en: This applies **only** to the built-in cache that is established via the `create_engine.query_cache_size`
    parameter. It will not impact any dictionary caches that were passed via the [`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") parameter.
  id: totrans-2862
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅适用于通过`create_engine.query_cache_size`参数建立的内置缓存。它不会影响通过[`Connection.execution_options.compiled_cache`](#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options")参数传递的任何字典缓存。
- en: New in version 1.4.
  id: totrans-2863
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始。
- en: '[PRE534]'
  id: totrans-2864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: Return a new [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.
  id: totrans-2865
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象。
- en: 'The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    acts as a Python context manager, so the typical use of this method looks like:'
  id: totrans-2866
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")充当Python上下文管理器，因此该方法的典型用法如下：'
- en: '[PRE535]'
  id: totrans-2867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: Where above, after the block is completed, the connection is “closed” and its
    underlying DBAPI resources are returned to the connection pool. This also has
    the effect of rolling back any transaction that was explicitly begun or was begun
    via autobegin, and will emit the [`ConnectionEvents.rollback()`](events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback") event if one was started and is
    still in progress.
  id: totrans-2868
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，块完成后，连接被“关闭”，其底层的DBAPI资源被返回到连接池。这也会导致任何显式开始或通过自动开始开始的事务回滚，并且如果已开始并且仍在进行，则会发出[`ConnectionEvents.rollback()`](events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")事件。
- en: See also
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")'
  id: totrans-2870
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.begin()`](#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")'
- en: '[PRE536]'
  id: totrans-2871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: Dispose of the connection pool used by this [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
  zh: 处理此[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")使用的连接池。
- en: A new connection pool is created immediately after the old one has been disposed.
    The previous connection pool is disposed either actively, by closing out all currently
    checked-in connections in that pool, or passively, by losing references to it
    but otherwise not closing any connections. The latter strategy is more appropriate
    for an initializer in a forked Python process.
  id: totrans-2873
  prefs: []
  type: TYPE_NORMAL
  zh: 旧连接池被处理后立即创建一个新的连接池。之前的连接池可以通过主动关闭该池中所有当前签入的连接或者被动地失去对其的引用但不关闭任何连接来处理。后一种策略更适用于分叉的Python进程中的初始化器。
- en: 'Parameters:'
  id: totrans-2874
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**close** –'
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
  zh: '**close** –'
- en: if left at its default of `True`, has the effect of fully closing all **currently
    checked in** database connections. Connections that are still checked out will
    **not** be closed, however they will no longer be associated with this [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), so when they are closed individually, eventually
    the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") which they
    are associated with will be garbage collected and they will be closed out fully,
    if not already closed on checkin.
  id: totrans-2876
  prefs: []
  type: TYPE_NORMAL
  zh: 如果保持默认值`True`，则会完全关闭所有**当前已签入**的数据库连接。仍在签出的连接将**不会**被关闭，但它们将不再与此[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联，因此当它们被单独关闭时，它们将最终被关联的[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")进行垃圾回收并完全关闭，如果尚未在签入时关闭。
- en: If set to `False`, the previous connection pool is de-referenced, and otherwise
    not touched in any way.
  id: totrans-2877
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为`False`，则先前的连接池将被取消引用，否则不会以任何方式触及。
- en: 'New in version 1.4.33: Added the [`Engine.dispose.close`](#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter to allow the replacement of a connection
    pool in a child process without interfering with the connections used by the parent
    process.'
  id: totrans-2878
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.33中的新功能：添加了[`Engine.dispose.close`](#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose")参数，允许在子进程中替换连接池而不干扰父进程使用的连接。
- en: See also
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Engine Disposal](#engine-disposal)'
  id: totrans-2880
  prefs: []
  type: TYPE_NORMAL
  zh: '[Engine处理](#engine-disposal)'
- en: '[Using Connection Pools with Multiprocessing or os.fork()](pooling.html#pooling-multiprocessing)'
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
  zh: '[在多进程或os.fork()中使用连接池](pooling.html#pooling-multiprocessing)'
- en: '[PRE537]'
  id: totrans-2882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: Driver name of the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    in use by this [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
  id: totrans-2883
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")使用的[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")的驱动程序名称。
- en: '[PRE538]'
  id: totrans-2884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: Returns this [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
  id: totrans-2885
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")。
- en: Used for legacy schemes that accept [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") / [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects within the same variable.
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
  zh: 用于接受相同变量中的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    / [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象的传统方案。
- en: '[PRE539]'
  id: totrans-2887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: Return a new [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    that will provide [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects with the given execution options.
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，将提供具有给定执行选项的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。
- en: 'The returned [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    remains related to the original [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    in that it shares the same connection pool and other state:'
  id: totrans-2889
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")与原始[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")相关联，因为它共享相同的连接池和其他状态：
- en: The [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") used
    by the new [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") is
    the same instance. The [`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method will replace the connection pool instance
    for the parent engine as well as this one.
  id: totrans-2890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")使用的[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")是同一个实例。[`Engine.dispose()`](#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")方法将替换父引擎的连接池实例以及此引擎的连接池实例。
- en: Event listeners are “cascaded” - meaning, the new [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") inherits the events of the parent, and new events
    can be associated with the new [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    individually.
  id: totrans-2891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件监听器是“级联”的 - 意味着新的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")继承父级的事件，并且新事件可以单独与新的[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联。
- en: The logging configuration and logging_name is copied from the parent [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-2892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志配置和logging_name从父[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")复制。
- en: The intent of the [`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method is to implement schemes where
    multiple [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") objects
    refer to the same connection pool, but are differentiated by options that affect
    some execution-level behavior for each engine. One such example is breaking into
    separate “reader” and “writer” [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, where one [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    has a lower [isolation level](../glossary.html#term-isolation-level) setting configured
    or is even transaction-disabled using “autocommit”. An example of this configuration
    is at [Maintaining Multiple Isolation Levels for a Single Engine](#dbapi-autocommit-multiple).
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法的目的是实现多个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象引用同一连接池的方案，但通过影响每个引擎的某些执行级别行为的选项来区分它们。其中一个例子是将一个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")分为单独的“读取器”和“写入器”实例，其中一个[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")配置了较低的[隔离级别](../glossary.html#term-isolation-level)设置，甚至使用“自动提交”禁用了事务。此配置的示例位于[为单个Engine维护多个隔离级别](#dbapi-autocommit-multiple)。'
- en: 'Another example is one that uses a custom option `shard_id` which is consumed
    by an event to change the current schema on a database connection:'
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是使用自定义选项`shard_id`，该选项由事件消耗以在数据库连接上更改当前模式：
- en: '[PRE540]'
  id: totrans-2895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: The above recipe illustrates two [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects that will each serve as factories for [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects that have pre-established “shard_id” execution
    options present. A [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event handler then
    interprets this execution option to emit a MySQL `use` statement to switch databases
    before a statement execution, while at the same time keeping track of which database
    we’ve established using the [`Connection.info`](#sqlalchemy.engine.Connection.info
    "sqlalchemy.engine.Connection.info") dictionary.
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例说明了两个[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象，它们各自作为预先设置了“shard_id”执行选项的[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的工厂。然后，[`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")事件处理程序解释此执行选项，以在语句执行之前发出MySQL
    `use`语句以切换数据库，同时使用[`Connection.info`](#sqlalchemy.engine.Connection.info "sqlalchemy.engine.Connection.info")字典跟踪我们已经建立的数据库。
- en: See also
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") - update execution options on
    a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") - 更新[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的执行选项。'
- en: '[`Engine.update_execution_options()`](#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") - update the execution options
    for a given [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") in
    place.'
  id: totrans-2899
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.update_execution_options()`](#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") - 就地更新给定[`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的执行选项。'
- en: '[`Engine.get_execution_options()`](#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options")'
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.get_execution_options()`](#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options")'
- en: '[PRE541]'
  id: totrans-2901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非SQL选项。
- en: See also
  id: totrans-2903
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[PRE542]'
  id: totrans-2905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: String name of the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    in use by this [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
  zh: 正在使用的[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")的字符串名称。
- en: '[PRE543]'
  id: totrans-2907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: Return a “raw” DBAPI connection from the connection pool.
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
  zh: 从连接池获取“原始”DBAPI连接。
- en: The returned object is a proxied version of the DBAPI connection object used
    by the underlying driver in use. The object will have all the same behavior as
    the real DBAPI connection, except that its `close()` method will result in the
    connection being returned to the pool, rather than being closed for real.
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是底层驱动程序使用的DBAPI连接对象的代理版本。该对象将具有与真实DBAPI连接相同的所有行为，只是其`close()`方法将导致连接被返回到池中，而不是真正关闭。
- en: This method provides direct DBAPI connection access for special situations when
    the API provided by [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is not needed. When a [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object is already present, the DBAPI connection is available using the [`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") accessor.
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")提供的API不需要时，此方法提供了直接的DBAPI连接访问。当已经存在一个[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象时，可以使用[`Connection.connection`](#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection")访问器来获取DBAPI连接。
- en: See also
  id: totrans-2911
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Working with Driver SQL and Raw DBAPI Connections](#dbapi-connections)'
  id: totrans-2912
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用驱动程序SQL和原始DBAPI连接](#dbapi-connections)'
- en: '[PRE544]'
  id: totrans-2913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: Update the default execution_options dictionary of this [`Engine`](#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-2914
  prefs: []
  type: TYPE_NORMAL
  zh: 更新此[`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的默认execution_options字典。
- en: The given keys/values in **opt are added to the default execution options that
    will be used for all connections. The initial contents of this dictionary can
    be sent via the `execution_options` parameter to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  id: totrans-2915
  prefs: []
  type: TYPE_NORMAL
  zh: 在**opt中给定的键/值将添加到将用于所有连接的默认执行选项中。此字典的初始内容可以通过`execution_options`参数发送到[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。
- en: See also
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2917
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-2918
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[PRE545]'
  id: totrans-2919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: Encapsulate information about an error condition in progress.
  id: totrans-2920
  prefs: []
  type: TYPE_NORMAL
  zh: 封装有关正在进行的错误条件的信息。
- en: '**Members**'
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[chained_exception](#sqlalchemy.engine.ExceptionContext.chained_exception),
    [connection](#sqlalchemy.engine.ExceptionContext.connection), [cursor](#sqlalchemy.engine.ExceptionContext.cursor),
    [dialect](#sqlalchemy.engine.ExceptionContext.dialect), [engine](#sqlalchemy.engine.ExceptionContext.engine),
    [execution_context](#sqlalchemy.engine.ExceptionContext.execution_context), [invalidate_pool_on_disconnect](#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect),
    [is_disconnect](#sqlalchemy.engine.ExceptionContext.is_disconnect), [is_pre_ping](#sqlalchemy.engine.ExceptionContext.is_pre_ping),
    [original_exception](#sqlalchemy.engine.ExceptionContext.original_exception),
    [parameters](#sqlalchemy.engine.ExceptionContext.parameters), [sqlalchemy_exception](#sqlalchemy.engine.ExceptionContext.sqlalchemy_exception),
    [statement](#sqlalchemy.engine.ExceptionContext.statement)'
  id: totrans-2922
  prefs: []
  type: TYPE_NORMAL
  zh: '[chained_exception](#sqlalchemy.engine.ExceptionContext.chained_exception),
    [connection](#sqlalchemy.engine.ExceptionContext.connection), [cursor](#sqlalchemy.engine.ExceptionContext.cursor),
    [dialect](#sqlalchemy.engine.ExceptionContext.dialect), [engine](#sqlalchemy.engine.ExceptionContext.engine),
    [execution_context](#sqlalchemy.engine.ExceptionContext.execution_context), [invalidate_pool_on_disconnect](#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect),
    [is_disconnect](#sqlalchemy.engine.ExceptionContext.is_disconnect), [is_pre_ping](#sqlalchemy.engine.ExceptionContext.is_pre_ping),
    [original_exception](#sqlalchemy.engine.ExceptionContext.original_exception),
    [parameters](#sqlalchemy.engine.ExceptionContext.parameters), [sqlalchemy_exception](#sqlalchemy.engine.ExceptionContext.sqlalchemy_exception),
    [statement](#sqlalchemy.engine.ExceptionContext.statement)'
- en: This object exists solely to be passed to the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event, supporting an interface
    that can be extended without backwards-incompatibility.
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象仅存在以传递给[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")事件，支持可以在不向后不兼容的情况下扩展的接口。
- en: '[PRE546]'
  id: totrans-2924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: The exception that was returned by the previous handler in the exception chain,
    if any.
  id: totrans-2925
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，这是前一个处理程序在异常链中返回的异常。
- en: If present, this exception will be the one ultimately raised by SQLAlchemy unless
    a subsequent handler replaces it.
  id: totrans-2926
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，此异常将最终由SQLAlchemy引发，除非后续处理程序替换它。
- en: May be None.
  id: totrans-2927
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为None。
- en: '[PRE547]'
  id: totrans-2928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: The [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    in use during the exception.
  id: totrans-2929
  prefs: []
  type: TYPE_NORMAL
  zh: 在异常处理期间使用的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。
- en: This member is present, except in the case of a failure when first connecting.
  id: totrans-2930
  prefs: []
  type: TYPE_NORMAL
  zh: 该成员存在，除非在首次连接失败时。
- en: See also
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ExceptionContext.engine`](#sqlalchemy.engine.ExceptionContext.engine "sqlalchemy.engine.ExceptionContext.engine")'
  id: totrans-2932
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExceptionContext.engine`](#sqlalchemy.engine.ExceptionContext.engine "sqlalchemy.engine.ExceptionContext.engine")'
- en: '[PRE548]'
  id: totrans-2933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: The DBAPI cursor object.
  id: totrans-2934
  prefs: []
  type: TYPE_NORMAL
  zh: DBAPI 游标对象。
- en: May be None.
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为 None。
- en: '[PRE549]'
  id: totrans-2936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: The [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in use.
  id: totrans-2937
  prefs: []
  type: TYPE_NORMAL
  zh: 正在使用的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。
- en: This member is present for all invocations of the event hook.
  id: totrans-2938
  prefs: []
  type: TYPE_NORMAL
  zh: 该成员在事件钩子的所有调用中都存在。
- en: New in version 2.0.
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE550]'
  id: totrans-2940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: The [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine") in use
    during the exception.
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
  zh: 在异常处理期间使用的 [`Engine`](#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")。
- en: This member is present in all cases except for when handling an error within
    the connection pool “pre-ping” process.
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
  zh: 该成员在所有情况下都存在，除非在连接池“预检测”过程中处理错误时除外。
- en: '[PRE551]'
  id: totrans-2943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: The [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    corresponding to the execution operation in progress.
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
  zh: 正在进行的执行操作对应的 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")。
- en: This is present for statement execution operations, but not for operations such
    as transaction begin/end. It also is not present when the exception was raised
    before the [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") could be constructed.
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
  zh: 该成员对于语句执行操作是存在的，但对于事务开始/结束等操作则不存在。它也不会在在 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") 构造之前引发异常的情况下存在。
- en: Note that the [`ExceptionContext.statement`](#sqlalchemy.engine.ExceptionContext.statement
    "sqlalchemy.engine.ExceptionContext.statement") and [`ExceptionContext.parameters`](#sqlalchemy.engine.ExceptionContext.parameters
    "sqlalchemy.engine.ExceptionContext.parameters") members may represent a different
    value than that of the [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext"), potentially in the case where a [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event or similar modified
    the statement/parameters to be sent.
  id: totrans-2946
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`ExceptionContext.statement`](#sqlalchemy.engine.ExceptionContext.statement
    "sqlalchemy.engine.ExceptionContext.statement") 和 [`ExceptionContext.parameters`](#sqlalchemy.engine.ExceptionContext.parameters
    "sqlalchemy.engine.ExceptionContext.parameters") 成员可能代表与 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") 不同的值，可能在 [`ConnectionEvents.before_cursor_execute()`](events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") 事件或类似事件修改了要发送的语句/参数的情况下。
- en: May be None.
  id: totrans-2947
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为 None。
- en: '[PRE552]'
  id: totrans-2948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: Represent whether all connections in the pool should be invalidated when a “disconnect”
    condition is in effect.
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
  zh: 表示在存在“断开”条件时是否应使池中的所有连接失效。
- en: Setting this flag to False within the scope of the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event will have the effect such
    that the full collection of connections in the pool will not be invalidated during
    a disconnect; only the current connection that is the subject of the error will
    actually be invalidated.
  id: totrans-2950
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件范围内将此标志设置为 False 将产生如下效果：在断开连接时不会使池中的所有连接失效；只有实际上产生错误的当前连接将被使无效。
- en: The purpose of this flag is for custom disconnect-handling schemes where the
    invalidation of other connections in the pool is to be performed based on other
    conditions, or even on a per-connection basis.
  id: totrans-2951
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志的目的是为了定制断开处理方案，其中其他连接在池中的失效是基于其他条件进行的，甚至是基于每个连接的基础。
- en: '[PRE553]'
  id: totrans-2952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: Represent whether the exception as occurred represents a “disconnect” condition.
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
  zh: 表示发生的异常是否代表“断开”条件。
- en: This flag will always be True or False within the scope of the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") handler.
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志在 [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 处理程序的范围内始终为 True 或 False。
- en: SQLAlchemy will defer to this flag in order to determine whether or not the
    connection should be invalidated subsequently. That is, by assigning to this flag,
    a “disconnect” event which then results in a connection and pool invalidation
    can be invoked or prevented by changing this flag.
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 将根据此标志来确定是否随后应使连接无效。也就是说，通过将值分配给此标志，可以通过更改此标志来调用或防止导致连接和池失效的“断开”事件。
- en: Note
  id: totrans-2956
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: The pool “pre_ping” handler enabled using the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter does **not** consult this event before deciding
    if the “ping” returned false, as opposed to receiving an unhandled error. For
    this use case, the [legacy recipe based on engine_connect() may be used](pooling.html#pool-disconnects-pessimistic-custom).
    A future API allow more comprehensive customization of the “disconnect” detection
    mechanism across all functions.
  id: totrans-2957
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 参数启用的池“pre_ping”处理程序在决定“ping”返回 false 时 **不** 会参考此事件，而不是收到未处理的错误。对于这种用例，可以使用基于
    `engine_connect()` 的[传统配方](pooling.html#pool-disconnects-pessimistic-custom)。将来的
    API 允许在所有函数中更全面地定制“断开”检测机制。
- en: '[PRE554]'
  id: totrans-2958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: Indicates if this error is occurring within the “pre-ping” step performed when
    [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") is set to `True`. In this mode, the [`ExceptionContext.engine`](#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") attribute will be `None`. The dialect
    in use is accessible via the [`ExceptionContext.dialect`](#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") attribute.
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此错误是否发生在设置 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 为 `True` 时执行的“pre-ping”步骤中。在此模式下，[`ExceptionContext.engine`](#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") 属性将为 `None`。正在使用的方言可通过 [`ExceptionContext.dialect`](#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") 属性访问。
- en: New in version 2.0.5.
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.5 开始新增。
- en: '[PRE555]'
  id: totrans-2961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: The exception object which was caught.
  id: totrans-2962
  prefs: []
  type: TYPE_NORMAL
  zh: 被捕获的异常对象。
- en: This member is always present.
  id: totrans-2963
  prefs: []
  type: TYPE_NORMAL
  zh: 此成员始终存在。
- en: '[PRE556]'
  id: totrans-2964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: Parameter collection that was emitted directly to the DBAPI.
  id: totrans-2965
  prefs: []
  type: TYPE_NORMAL
  zh: 直接发射到 DBAPI 的参数集合。
- en: May be None.
  id: totrans-2966
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为 None。
- en: '[PRE557]'
  id: totrans-2967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: The [`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") which wraps the original, and will be raised
    if exception handling is not circumvented by the event.
  id: totrans-2968
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") 包装了原始内容，并且如果事件未被绕过，则会被引发。'
- en: May be None, as not all exception types are wrapped by SQLAlchemy. For DBAPI-level
    exceptions that subclass the dbapi’s Error class, this field will always be present.
  id: totrans-2969
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为 None，因为并非所有异常类型都由 SQLAlchemy 包装。对于子类化 dbapi 的 Error 类的 DBAPI 级异常，此字段将始终存在。
- en: '[PRE558]'
  id: totrans-2970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: String SQL statement that was emitted directly to the DBAPI.
  id: totrans-2971
  prefs: []
  type: TYPE_NORMAL
  zh: 直接发射到 DBAPI 的字符串 SQL 语句。
- en: May be None.
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
  zh: 可能为 None。
- en: '[PRE559]'
  id: totrans-2973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: Represent a ‘nested’, or SAVEPOINT transaction.
  id: totrans-2974
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个‘嵌套’，或 SAVEPOINT 事务。
- en: The [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    object is created by calling the [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") method of [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    对象是通过调用 [`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 方法来创建的 [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: 'When using [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    the semantics of “begin” / “commit” / “rollback” are as follows:'
  id: totrans-2976
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    时，“begin” / “commit” / “rollback”的语义如下：
- en: the “begin” operation corresponds to the “BEGIN SAVEPOINT” command, where the
    savepoint is given an explicit name that is part of the state of this object.
  id: totrans-2977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “begin”操作对应于“BEGIN SAVEPOINT”命令，其中保存点被赋予此对象状态的显式名称。
- en: The [`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit") method corresponds to a “RELEASE
    SAVEPOINT” operation, using the savepoint identifier associated with this [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction").
  id: totrans-2978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NestedTransaction.commit()`](#sqlalchemy.engine.NestedTransaction.commit
    "sqlalchemy.engine.NestedTransaction.commit") 方法对应于“RELEASE SAVEPOINT”操作，使用与此
    [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    关联的保存点标识符。'
- en: The [`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback") method corresponds to a “ROLLBACK
    TO SAVEPOINT” operation, using the savepoint identifier associated with this [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction").
  id: totrans-2979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NestedTransaction.rollback()`](#sqlalchemy.engine.NestedTransaction.rollback
    "sqlalchemy.engine.NestedTransaction.rollback") 方法对应于“ROLLBACK TO SAVEPOINT”操作，使用与此
    [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")
    关联的保存点标识符。'
- en: The rationale for mimicking the semantics of an outer transaction in terms of
    savepoints so that code may deal with a “savepoint” transaction and an “outer”
    transaction in an agnostic way.
  id: totrans-2980
  prefs: []
  type: TYPE_NORMAL
  zh: 模仿外部事务的语义以便代码可以以一种不可知的方式处理“保存点”事务和“外部”事务的原理。
- en: See also
  id: totrans-2981
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SAVEPOINT](../orm/session_transaction.html#session-begin-nested) - ORM
    version of the SAVEPOINT API.'
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SAVEPOINT](../orm/session_transaction.html#session-begin-nested) - SAVEPOINT
    API 的 ORM 版本。'
- en: '**Members**'
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.NestedTransaction.close), [commit()](#sqlalchemy.engine.NestedTransaction.commit),
    [rollback()](#sqlalchemy.engine.NestedTransaction.rollback)'
  id: totrans-2984
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.NestedTransaction.close), [commit()](#sqlalchemy.engine.NestedTransaction.commit),
    [rollback()](#sqlalchemy.engine.NestedTransaction.rollback)'
- en: '**Class signature**'
  id: totrans-2985
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction") ([`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"))
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.NestedTransaction`](#sqlalchemy.engine.NestedTransaction
    "sqlalchemy.engine.NestedTransaction")（[`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")）
- en: '[PRE560]'
  id: totrans-2987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '*inherited from the* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close
    "sqlalchemy.engine.Transaction.close") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-2988
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close "sqlalchemy.engine.Transaction.close")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Close this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-2989
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-2990
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是开始/提交嵌套中的基本事务，则事务将回滚。 否则，该方法返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-2991
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于取消一个事务，而不影响封闭事务的范围。
- en: '[PRE561]'
  id: totrans-2992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '*inherited from the* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit "sqlalchemy.engine.Transaction.commit")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Commit this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
  zh: 提交这个 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-2995
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的事务类型，其实现可能会有所不同：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a COMMIT.
  id: totrans-2996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个
    COMMIT。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “RELEASE SAVEPOINT” operation.
  id: totrans-2997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“RELEASE
    SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-2998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用用于两阶段事务的特定于
    DBAPI 的方法。
- en: '[PRE562]'
  id: totrans-2999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '*inherited from the* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-3000
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback "sqlalchemy.engine.Transaction.rollback")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Roll back this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3001
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-3002
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现可能根据正在使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a ROLLBACK.
  id: totrans-3003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于ROLLBACK。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “ROLLBACK TO SAVEPOINT” operation.
  id: totrans-3004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“ROLLBACK
    TO SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-3005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于DBAPI的两阶段事务方法。
- en: '[PRE563]'
  id: totrans-3006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: Represent the “root” transaction on a [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-3007
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")上表示“根”事务。
- en: This corresponds to the current “BEGIN/COMMIT/ROLLBACK” that’s occurring for
    the [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
    The [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")
    is created by calling upon the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method, and remains associated with the
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") throughout
    its active span. The current [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") in use is accessible via the [`Connection.get_transaction`](#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction") method of [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
  zh: 这对应于正在进行的[`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")的当前“BEGIN/COMMIT/ROLLBACK”。通过调用[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法创建[`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")，并且在其活动期间与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")关联。正在使用的当前[`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")可以通过[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[`Connection.get_transaction`](#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction")方法访问。
- en: In [2.0 style](../glossary.html#term-2.0-style) use, the [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") also employs “autobegin” behavior that will create
    a new [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")
    whenever a connection in a non-transactional state is used to emit commands on
    the DBAPI connection. The scope of the [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") in 2.0 style use can be controlled using
    the [`Connection.commit()`](#sqlalchemy.engine.Connection.commit "sqlalchemy.engine.Connection.commit")
    and [`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback "sqlalchemy.engine.Connection.rollback")
    methods.
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
  zh: 在[2.0风格](../glossary.html#term-2.0-style)中，[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")还采用“自动开始”行为，每当处于非事务状态的连接用于在DBAPI连接上发出命令时，就会创建一个新的[`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")。在2.0风格中使用[`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")的范围可以使用[`Connection.commit()`](#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")和[`Connection.rollback()`](#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法进行控制。
- en: '**Members**'
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.RootTransaction.close), [commit()](#sqlalchemy.engine.RootTransaction.commit),
    [rollback()](#sqlalchemy.engine.RootTransaction.rollback)'
  id: totrans-3011
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.RootTransaction.close), [commit()](#sqlalchemy.engine.RootTransaction.commit),
    [rollback()](#sqlalchemy.engine.RootTransaction.rollback)'
- en: '**Class signature**'
  id: totrans-3012
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") ([`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"))
  id: totrans-3013
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")（[`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")）
- en: '[PRE564]'
  id: totrans-3014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '*inherited from the* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close
    "sqlalchemy.engine.Transaction.close") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close "sqlalchemy.engine.Transaction.close")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Close this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-3017
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是嵌套事务中的基本事务，则事务将回滚。否则，该方法将返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
  zh: 用于取消事务而不影响封闭事务范围。
- en: '[PRE565]'
  id: totrans-3019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '*inherited from the* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-3020
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit "sqlalchemy.engine.Transaction.commit")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Commit this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3021
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现可能会根据正在使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a COMMIT.
  id: totrans-3023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如 [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个
    COMMIT。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “RELEASE SAVEPOINT” operation.
  id: totrans-3024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“RELEASE
    SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-3025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于DBAPI的两阶段事务方法。
- en: '[PRE566]'
  id: totrans-3026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '*inherited from the* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback "sqlalchemy.engine.Transaction.rollback")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Roll back this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3028
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-3029
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现可能会根据正在使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a ROLLBACK.
  id: totrans-3030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如 [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个
    ROLLBACK。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “ROLLBACK TO SAVEPOINT” operation.
  id: totrans-3031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“ROLLBACK
    TO SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-3032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于DBAPI的两阶段事务方法。
- en: '[PRE567]'
  id: totrans-3033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: Represent a database transaction in progress.
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
  zh: 表示正在进行的数据库事务。
- en: 'The [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    object is procured by calling the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method of [`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"):'
  id: totrans-3035
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 [`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")
    方法的 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    获得 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    对象：
- en: '[PRE568]'
  id: totrans-3036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: 'The object provides [`rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") and [`commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") methods in order to control transaction
    boundaries. It also implements a context manager interface so that the Python
    `with` statement can be used with the [`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method:'
  id: totrans-3037
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象提供了[`rollback()`](#sqlalchemy.engine.Transaction.rollback "sqlalchemy.engine.Transaction.rollback")和[`commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit")方法，以便控制事务边界。它还实现了上下文管理器接口，以便可以使用Python的`with`语句与[`Connection.begin()`](#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法一起使用：
- en: '[PRE569]'
  id: totrans-3038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: The Transaction object is **not** threadsafe.
  id: totrans-3039
  prefs: []
  type: TYPE_NORMAL
  zh: Transaction 对象**不**是线程安全的。
- en: '**Members**'
  id: totrans-3040
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.Transaction.close), [commit()](#sqlalchemy.engine.Transaction.commit),
    [rollback()](#sqlalchemy.engine.Transaction.rollback)'
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.Transaction.close), [commit()](#sqlalchemy.engine.Transaction.commit),
    [rollback()](#sqlalchemy.engine.Transaction.rollback)'
- en: See also
  id: totrans-3042
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin()`](#sqlalchemy.engine.Connection.begin "sqlalchemy.engine.Connection.begin")'
- en: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")'
  id: totrans-3044
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")'
- en: '[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")'
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.begin_nested()`](#sqlalchemy.engine.Connection.begin_nested "sqlalchemy.engine.Connection.begin_nested")'
- en: '**Class signature**'
  id: totrans-3046
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    (`sqlalchemy.engine.util.TransactionalContext`)
  id: totrans-3047
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    (`sqlalchemy.engine.util.TransactionalContext`)
- en: '[PRE570]'
  id: totrans-3048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: Close this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3049
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-3050
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是嵌套的 begin/commit 中的基本事务，则事务将回滚()。否则，该方法返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-3051
  prefs: []
  type: TYPE_NORMAL
  zh: 用于取消事务而不影响封闭事务范围。
- en: '[PRE571]'
  id: totrans-3052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: Commit this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3053
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此 [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-3054
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现可能会根据正在使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a COMMIT.
  id: totrans-3055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如 [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于
    COMMIT。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “RELEASE SAVEPOINT” operation.
  id: totrans-3056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“RELEASE
    SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-3057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于
    DBAPI 的两阶段事务方法。
- en: '[PRE572]'
  id: totrans-3058
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: Roll back this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3059
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-3060
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现可能会根据正在使用的事务类型而变化：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a ROLLBACK.
  id: totrans-3061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如 [`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于
    ROLLBACK。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “ROLLBACK TO SAVEPOINT” operation.
  id: totrans-3062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“ROLLBACK
    TO SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-3063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于
    DBAPI 的两阶段事务方法。
- en: '[PRE573]'
  id: totrans-3064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: Represent a two-phase transaction.
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个两阶段事务。
- en: A new [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")
    object may be procured using the [`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase") method.
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`Connection.begin_twophase()`](#sqlalchemy.engine.Connection.begin_twophase
    "sqlalchemy.engine.Connection.begin_twophase")方法获取一个新的[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction")对象。
- en: The interface is the same as that of [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") with the addition of the [`prepare()`](#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") method.
  id: totrans-3067
  prefs: []
  type: TYPE_NORMAL
  zh: 接口与[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")相同，但添加了[`prepare()`](#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")方法。
- en: '**Members**'
  id: totrans-3068
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.TwoPhaseTransaction.close), [commit()](#sqlalchemy.engine.TwoPhaseTransaction.commit),
    [prepare()](#sqlalchemy.engine.TwoPhaseTransaction.prepare), [rollback()](#sqlalchemy.engine.TwoPhaseTransaction.rollback)'
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.TwoPhaseTransaction.close)，[commit()](#sqlalchemy.engine.TwoPhaseTransaction.commit)，[prepare()](#sqlalchemy.engine.TwoPhaseTransaction.prepare)，[rollback()](#sqlalchemy.engine.TwoPhaseTransaction.rollback)'
- en: '**Class signature**'
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") ([`sqlalchemy.engine.RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction"))
  id: totrans-3071
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction")（[`sqlalchemy.engine.RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")）
- en: '[PRE574]'
  id: totrans-3072
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '*inherited from the* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close
    "sqlalchemy.engine.Transaction.close") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-3073
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.close()`](#sqlalchemy.engine.Transaction.close "sqlalchemy.engine.Transaction.close")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Close this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3074
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭这个[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个事务是嵌套的开始/提交中的基本事务，则事务将回滚()。否则，该方法返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于取消事务，而不影响封闭事务的范围。
- en: '[PRE575]'
  id: totrans-3077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '*inherited from the* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit
    "sqlalchemy.engine.Transaction.commit") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.commit()`](#sqlalchemy.engine.Transaction.commit "sqlalchemy.engine.Transaction.commit")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Commit this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3079
  prefs: []
  type: TYPE_NORMAL
  zh: 提交这个[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-3080
  prefs: []
  type: TYPE_NORMAL
  zh: 根据正在使用的事务类型，此实现可能会有所不同：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a COMMIT.
  id: totrans-3081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一个简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个提交。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “RELEASE SAVEPOINT” operation.
  id: totrans-3082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“RELEASE
    SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-3083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于DBAPI的两阶段事务方法。
- en: '[PRE576]'
  id: totrans-3084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: Prepare this [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction").
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
  zh: 准备这个[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")。
- en: After a PREPARE, the transaction can be committed.
  id: totrans-3086
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备之后，事务可以被提交。
- en: '[PRE577]'
  id: totrans-3087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: '*inherited from the* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback
    "sqlalchemy.engine.Transaction.rollback") *method of* [`Transaction`](#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")'
  id: totrans-3088
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Transaction.rollback()`](#sqlalchemy.engine.Transaction.rollback "sqlalchemy.engine.Transaction.rollback")
    *方法的* [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")'
- en: Roll back this [`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction").
  id: totrans-3089
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚这个[`Transaction`](#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")。
- en: 'The implementation of this may vary based on the type of transaction in use:'
  id: totrans-3090
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现可能会根据使用的事务类型而有所不同：
- en: For a simple database transaction (e.g. [`RootTransaction`](#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction")), it corresponds to a ROLLBACK.
  id: totrans-3091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的数据库事务（例如[`RootTransaction`](#sqlalchemy.engine.RootTransaction "sqlalchemy.engine.RootTransaction")），它对应于一个ROLLBACK。
- en: For a [`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction"),
    it corresponds to a “ROLLBACK TO SAVEPOINT” operation.
  id: totrans-3092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NestedTransaction`](#sqlalchemy.engine.NestedTransaction "sqlalchemy.engine.NestedTransaction")，它对应于“ROLLBACK
    TO SAVEPOINT”操作。
- en: For a [`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction"),
    DBAPI-specific methods for two phase transactions may be used.
  id: totrans-3093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`TwoPhaseTransaction`](#sqlalchemy.engine.TwoPhaseTransaction "sqlalchemy.engine.TwoPhaseTransaction")，可以使用特定于DBAPI的方法进行两阶段事务。
- en: Result Set API
  id: totrans-3094
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果集 API
- en: '| Object Name | Description |'
  id: totrans-3095
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-3096
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ChunkedIteratorResult](#sqlalchemy.engine.ChunkedIteratorResult) | An [`IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult") that works from an iterator-producing callable.
    |'
  id: totrans-3097
  prefs: []
  type: TYPE_TB
  zh: '| [ChunkedIteratorResult](#sqlalchemy.engine.ChunkedIteratorResult) | 从生成迭代器的可调用对象中工作的[`IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult")。'
- en: '| [CursorResult](#sqlalchemy.engine.CursorResult) | A Result that is representing
    state from a DBAPI cursor. |'
  id: totrans-3098
  prefs: []
  type: TYPE_TB
  zh: '| [CursorResult](#sqlalchemy.engine.CursorResult) | 代表来自DBAPI游标的状态的结果。'
- en: '| [FilterResult](#sqlalchemy.engine.FilterResult) | A wrapper for a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that returns objects other than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, such as dictionaries or scalar objects. |'
  id: totrans-3099
  prefs: []
  type: TYPE_TB
  zh: '| [FilterResult](#sqlalchemy.engine.FilterResult) | 一个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的包装器，返回的是除[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象之外的对象，例如字典或标量对象。'
- en: '| [FrozenResult](#sqlalchemy.engine.FrozenResult) | Represents a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object in a “frozen” state suitable for caching. |'
  id: totrans-3100
  prefs: []
  type: TYPE_TB
  zh: '| [FrozenResult](#sqlalchemy.engine.FrozenResult) | 表示适用于缓存的“冻结”状态的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。'
- en: '| [IteratorResult](#sqlalchemy.engine.IteratorResult) | A [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that gets data from a Python iterator of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects or similar row-like data. |'
  id: totrans-3101
  prefs: []
  type: TYPE_TB
  zh: '| [IteratorResult](#sqlalchemy.engine.IteratorResult) | 从Python迭代器中获取[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象或类似行数据的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。'
- en: '| [MappingResult](#sqlalchemy.engine.MappingResult) | A wrapper for a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that returns dictionary values rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  id: totrans-3102
  prefs: []
  type: TYPE_TB
  zh: '| [MappingResult](#sqlalchemy.engine.MappingResult) | 一个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的包装器，返回的是字典值而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")值。'
- en: '| [MergedResult](#sqlalchemy.engine.MergedResult) | A [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that is merged from any number of [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects. |'
  id: totrans-3103
  prefs: []
  type: TYPE_TB
  zh: '| [MergedResult](#sqlalchemy.engine.MergedResult) | 从任意数量的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象合并而成的[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。'
- en: '| [Result](#sqlalchemy.engine.Result) | Represent a set of database results.
    |'
  id: totrans-3104
  prefs: []
  type: TYPE_TB
  zh: '| [Result](#sqlalchemy.engine.Result) | 代表一组数据库结果。 |'
- en: '| [Row](#sqlalchemy.engine.Row) | Represent a single result row. |'
  id: totrans-3105
  prefs: []
  type: TYPE_TB
  zh: '| [Row](#sqlalchemy.engine.Row) | 代��单个结果行。'
- en: '| [RowMapping](#sqlalchemy.engine.RowMapping) | A `Mapping` that maps column
    names and objects to [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") values.
    |'
  id: totrans-3106
  prefs: []
  type: TYPE_TB
  zh: '| [RowMapping](#sqlalchemy.engine.RowMapping) | 将列名和对象映射到[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")值的`Mapping`。'
- en: '| [ScalarResult](#sqlalchemy.engine.ScalarResult) | A wrapper for a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that returns scalar values rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  id: totrans-3107
  prefs: []
  type: TYPE_TB
  zh: '| [ScalarResult](#sqlalchemy.engine.ScalarResult) | 一个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的包装器，返回的是标量值而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")值。'
- en: '| [TupleResult](#sqlalchemy.engine.TupleResult) | A [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") that’s typed as returning plain Python tuples instead
    of rows. |'
  id: totrans-3108
  prefs: []
  type: TYPE_TB
  zh: '| [TupleResult](#sqlalchemy.engine.TupleResult) | 一个[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")，其返回的是普通的Python元组而不是行。'
- en: '[PRE578]'
  id: totrans-3109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: An [`IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")
    that works from an iterator-producing callable.
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
  zh: 从生成迭代器的可调用函数中工作的[`IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")。
- en: The given `chunks` argument is a function that is given a number of rows to
    return in each chunk, or `None` for all rows. The function should then return
    an un-consumed iterator of lists, each list of the requested size.
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的`chunks`参数是一个函数，该函数给出每个块中要返回的行数，或者为所有行返回`None`。然后，该函数应返回一个未消耗的列表迭代器，每个列表的大小为请求的大小。
- en: The function can be called at any time again, in which case it should continue
    from the same result set but adjust the chunk size as given.
  id: totrans-3112
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数可以随时再次调用，在这种情况下，它应该继续从相同的结果集开始，但根据给定的块大小进行调整。
- en: New in version 1.4.
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Members**'
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[yield_per()](#sqlalchemy.engine.ChunkedIteratorResult.yield_per)'
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
  zh: '[yield_per()](#sqlalchemy.engine.ChunkedIteratorResult.yield_per)'
- en: '**Class signature**'
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.ChunkedIteratorResult`](#sqlalchemy.engine.ChunkedIteratorResult
    "sqlalchemy.engine.ChunkedIteratorResult") ([`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult"))
  id: totrans-3117
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.ChunkedIteratorResult`](#sqlalchemy.engine.ChunkedIteratorResult
    "sqlalchemy.engine.ChunkedIteratorResult")（[`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult")）
- en: '[PRE579]'
  id: totrans-3118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-3119
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略以一次提取`num`行。
- en: This impacts the underlying behavior of the result when iterating over the result
    object, or otherwise making use of methods such as [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") that return one row at a time. Data from
    the underlying cursor or other data source will be buffered up to this many rows
    in memory, and the buffered collection will then be yielded out one row at a time
    or as many rows are requested. Each time the buffer clears, it will be refreshed
    to this many rows or as many rows remain if fewer remain.
  id: totrans-3120
  prefs: []
  type: TYPE_NORMAL
  zh: 当迭代结果对象或以其他方式使用返回一行的方法（如[`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone")）时，这会影响结果的基础行为。来自底层游标或其他数据源的数据将在内存中缓冲到这么多行，并且缓冲集合将一次性输出一行或请求的行数。每次缓冲清除时，它将刷新到这么多行或如果剩余的行数较少，则刷新到剩余的行数。
- en: The [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    method is generally used in conjunction with the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    allow the database dialect in use to make use of a server side cursor, if the
    DBAPI supports a specific “server side cursor” mode separate from its default
    mode of operation.
  id: totrans-3121
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")方法通常与[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")执行选项一起使用，这将允许正在使用的数据库方言使用服务器端游标，如果DBAPI支持与其默认操作模式分开的特定“服务器端游标”模式。'
- en: Tip
  id: totrans-3122
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Consider using the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    simultaneously set [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") to ensure the use of server
    side cursors, as well as automatically invoke the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method to establish a fixed row buffer size
    at once.
  id: totrans-3123
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项，同时设置[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")以确保使用服务器端游标，并自动调用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法一次性建立固定的行缓冲区大小。
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option is available
    for ORM operations, with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-oriented use described at [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per). The Core-only
    version which works with [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is new as of SQLAlchemy 1.4.40.
  id: totrans-3124
  prefs: []
  type: TYPE_NORMAL
  zh: ORM操作可使用[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项，在[使用Yield Per获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)中描述了面向`Session`的用法。仅适用于核心的版本，可与[`Connection`](#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")一起使用，这是SQLAlchemy 1.4.40的新功能。
- en: New in version 1.4.
  id: totrans-3125
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中的新功能。
- en: 'Parameters:'
  id: totrans-3126
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**num** – number of rows to fetch each time the buffer is refilled. If set
    to a value below 1, fetches all rows for the next buffer.'
  id: totrans-3127
  prefs: []
  type: TYPE_NORMAL
  zh: '**num** – 每次重新填充缓冲区时要获取的行数。如果设置为小于1的值，则获取下一个缓冲区的所有行。'
- en: See also
  id: totrans-3128
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-3129
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results) - 描述了[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用Yield Per获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per) -
    在[ORM查询指南](../orm/queryguide/index.html)中'
- en: '[PRE580]'
  id: totrans-3131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: A Result that is representing state from a DBAPI cursor.
  id: totrans-3132
  prefs: []
  type: TYPE_NORMAL
  zh: 代表来自DBAPI游标的状态的结果。
- en: 'Changed in version 1.4: The `CursorResult`` class replaces the previous `ResultProxy`
    interface. This classes are based on the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") calling API which provides an updated usage model
    and calling facade for SQLAlchemy Core and SQLAlchemy ORM.'
  id: totrans-3133
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：`CursorResult`类取代了先前的`ResultProxy`接口。这些类基于[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")调用API，为SQLAlchemy核心和SQLAlchemy ORM提供了更新的使用模型和调用外观。
- en: Returns database rows via the [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    class, which provides additional API features and behaviors on top of the raw
    data returned by the DBAPI. Through the use of filters such as the [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method, other kinds of objects may also be
    returned.
  id: totrans-3134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")类返回数据库行，该类在DBAPI返回的原始数据之上提供了额外的API功能和行为。通过诸如[`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")方法之类的过滤器，还可以返回其他类型的对象。
- en: See also
  id: totrans-3135
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - introductory material for accessing [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") and [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.'
  id: totrans-3136
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SELECT语句](../tutorial/data_select.html#tutorial-selecting-data) - 用于访问[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")和[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的入门材料。'
- en: '**Members**'
  id: totrans-3137
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.engine.CursorResult.all), [close()](#sqlalchemy.engine.CursorResult.close),
    [columns()](#sqlalchemy.engine.CursorResult.columns), [fetchall()](#sqlalchemy.engine.CursorResult.fetchall),
    [fetchmany()](#sqlalchemy.engine.CursorResult.fetchmany), [fetchone()](#sqlalchemy.engine.CursorResult.fetchone),
    [first()](#sqlalchemy.engine.CursorResult.first), [freeze()](#sqlalchemy.engine.CursorResult.freeze),
    [inserted_primary_key](#sqlalchemy.engine.CursorResult.inserted_primary_key),
    [inserted_primary_key_rows](#sqlalchemy.engine.CursorResult.inserted_primary_key_rows),
    [is_insert](#sqlalchemy.engine.CursorResult.is_insert), [keys()](#sqlalchemy.engine.CursorResult.keys),
    [last_inserted_params()](#sqlalchemy.engine.CursorResult.last_inserted_params),
    [last_updated_params()](#sqlalchemy.engine.CursorResult.last_updated_params),
    [lastrow_has_defaults()](#sqlalchemy.engine.CursorResult.lastrow_has_defaults),
    [lastrowid](#sqlalchemy.engine.CursorResult.lastrowid), [mappings()](#sqlalchemy.engine.CursorResult.mappings),
    [merge()](#sqlalchemy.engine.CursorResult.merge), [one()](#sqlalchemy.engine.CursorResult.one),
    [one_or_none()](#sqlalchemy.engine.CursorResult.one_or_none), [partitions()](#sqlalchemy.engine.CursorResult.partitions),
    [postfetch_cols()](#sqlalchemy.engine.CursorResult.postfetch_cols), [prefetch_cols()](#sqlalchemy.engine.CursorResult.prefetch_cols),
    [returned_defaults](#sqlalchemy.engine.CursorResult.returned_defaults), [returned_defaults_rows](#sqlalchemy.engine.CursorResult.returned_defaults_rows),
    [returns_rows](#sqlalchemy.engine.CursorResult.returns_rows), [rowcount](#sqlalchemy.engine.CursorResult.rowcount),
    [scalar()](#sqlalchemy.engine.CursorResult.scalar), [scalar_one()](#sqlalchemy.engine.CursorResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.engine.CursorResult.scalar_one_or_none), [scalars()](#sqlalchemy.engine.CursorResult.scalars),
    [splice_horizontally()](#sqlalchemy.engine.CursorResult.splice_horizontally),
    [splice_vertically()](#sqlalchemy.engine.CursorResult.splice_vertically), [supports_sane_multi_rowcount()](#sqlalchemy.engine.CursorResult.supports_sane_multi_rowcount),
    [supports_sane_rowcount()](#sqlalchemy.engine.CursorResult.supports_sane_rowcount),
    [t](#sqlalchemy.engine.CursorResult.t), [tuples()](#sqlalchemy.engine.CursorResult.tuples),
    [unique()](#sqlalchemy.engine.CursorResult.unique), [yield_per()](#sqlalchemy.engine.CursorResult.yield_per)'
  id: totrans-3138
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.engine.CursorResult.all)，[close()](#sqlalchemy.engine.CursorResult.close)，[columns()](#sqlalchemy.engine.CursorResult.columns)，[fetchall()](#sqlalchemy.engine.CursorResult.fetchall)，[fetchmany()](#sqlalchemy.engine.CursorResult.fetchmany)，[fetchone()](#sqlalchemy.engine.CursorResult.fetchone)，[first()](#sqlalchemy.engine.CursorResult.first)，[freeze()](#sqlalchemy.engine.CursorResult.freeze)，[inserted_primary_key](#sqlalchemy.engine.CursorResult.inserted_primary_key)，[inserted_primary_key_rows](#sqlalchemy.engine.CursorResult.inserted_primary_key_rows)，[is_insert](#sqlalchemy.engine.CursorResult.is_insert)，[keys()](#sqlalchemy.engine.CursorResult.keys)，[last_inserted_params()](#sqlalchemy.engine.CursorResult.last_inserted_params)，[last_updated_params()](#sqlalchemy.engine.CursorResult.last_updated_params)，[lastrow_has_defaults()](#sqlalchemy.engine.CursorResult.lastrow_has_defaults)，[lastrowid](#sqlalchemy.engine.CursorResult.lastrowid)，[mappings()](#sqlalchemy.engine.CursorResult.mappings)，[merge()](#sqlalchemy.engine.CursorResult.merge)，[one()](#sqlalchemy.engine.CursorResult.one)，[one_or_none()](#sqlalchemy.engine.CursorResult.one_or_none)，[partitions()](#sqlalchemy.engine.CursorResult.partitions)，[postfetch_cols()](#sqlalchemy.engine.CursorResult.postfetch_cols)，[prefetch_cols()](#sqlalchemy.engine.CursorResult.prefetch_cols)，[returned_defaults](#sqlalchemy.engine.CursorResult.returned_defaults)，[returned_defaults_rows](#sqlalchemy.engine.CursorResult.returned_defaults_rows)，[returns_rows](#sqlalchemy.engine.CursorResult.returns_rows)，[rowcount](#sqlalchemy.engine.CursorResult.rowcount)，[scalar()](#sqlalchemy.engine.CursorResult.scalar)，[scalar_one()](#sqlalchemy.engine.CursorResult.scalar_one)，[scalar_one_or_none()](#sqlalchemy.engine.CursorResult.scalar_one_or_none)，[scalars()](#sqlalchemy.engine.CursorResult.scalars)，[splice_horizontally()](#sqlalchemy.engine.CursorResult.splice_horizontally)，[splice_vertically()](#sqlalchemy.engine.CursorResult.splice_vertically)，[supports_sane_multi_rowcount()](#sqlalchemy.engine.CursorResult.supports_sane_multi_rowcount)，[supports_sane_rowcount()](#sqlalchemy.engine.CursorResult.supports_sane_rowcount)，[t](#sqlalchemy.engine.CursorResult.t)，[tuples()](#sqlalchemy.engine.CursorResult.tuples)，[unique()](#sqlalchemy.engine.CursorResult.unique)，[yield_per()](#sqlalchemy.engine.CursorResult.yield_per)'
- en: '**Class signature**'
  id: totrans-3139
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    ([`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result"))
  id: totrans-3140
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")（[`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")）
- en: '[PRE581]'
  id: totrans-3141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: '*inherited from the* [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-3142
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") *方法的*
    [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")'
- en: Return all rows in a sequence.
  id: totrans-3143
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列中的所有行。
- en: Closes the result set after invocation. Subsequent invocations will return an
    empty sequence.
  id: totrans-3144
  prefs: []
  type: TYPE_NORMAL
  zh: 调用后关闭结果集。后续的调用将返回一个空序列。
- en: New in version 1.4.
  id: totrans-3145
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: 'Returns:'
  id: totrans-3146
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a sequence of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects.
  id: totrans-3147
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: See also
  id: totrans-3148
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - How to stream a large result set without loading it completely in python.'
  id: totrans-3149
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results) - 如何在python中流式处理大型结果集而不完全加载它。'
- en: '[PRE582]'
  id: totrans-3150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: Close this [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult").
  id: totrans-3151
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")。
- en: This closes out the underlying DBAPI cursor corresponding to the statement execution,
    if one is still present. Note that the DBAPI cursor is automatically released
    when the [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    exhausts all available rows. [`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") is generally an optional method except
    in the case when discarding a [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") that still has additional rows pending for fetch.
  id: totrans-3152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仍然存在，则关闭与语句执行相对应的底层DBAPI游标。请注意，当[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")耗尽所有可用行时，DBAPI游标会自动释放。通常，[`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close")是一个可选方法，除非在丢弃仍有待获取的额外行的[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")时。
- en: After this method is called, it is no longer valid to call upon the fetch methods,
    which will raise a [`ResourceClosedError`](exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError") on subsequent use.
  id: totrans-3153
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用此方法后，再调用获取方法将不再有效，并且在后续使用中将引发[`ResourceClosedError`](exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")。
- en: See also
  id: totrans-3154
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Engines and Connections](#)'
  id: totrans-3155
  prefs: []
  type: TYPE_NORMAL
  zh: '[与引擎和连接一起工作](#)'
- en: '[PRE583]'
  id: totrans-3156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '*inherited from the* [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3157
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.columns()`](#sqlalchemy.engine.Result.columns "sqlalchemy.engine.Result.columns")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。'
- en: Establish the columns that should be returned in each row.
  id: totrans-3158
  prefs: []
  type: TYPE_NORMAL
  zh: 建立应在每行中返回的列。
- en: This method may be used to limit the columns returned as well as to reorder
    them. The given list of expressions are normally a series of integers or string
    key names. They may also be appropriate [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects which correspond to a given
    statement construct.
  id: totrans-3159
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法既可用于限制返回的列，也可用于重新排序它们。给定的表达式列表通常是一系列整数或字符串键名。它们也可以是与给定语句结构相对应的适当的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。
- en: 'Changed in version 2.0: Due to a bug in 1.4, the [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method had an incorrect behavior where calling
    upon the method with just one index would cause the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object to yield scalar values rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects. In version 2.0, this behavior has been corrected
    such that calling upon [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") with a single index will produce a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object that continues to yield [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, which include only a single column.'
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的更改：由于1.4中存在错误，[`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 方法的行为不正确，仅使用一个索引调用该方法将导致[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象产生标量值而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。在2.0版本中，已更正此行为，使得使用单个索引调用[`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns")将产生一个继续产生[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，该对象仅包含单个列。
- en: 'E.g.:'
  id: totrans-3161
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE584]'
  id: totrans-3162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: 'Example of using the column objects from the statement itself:'
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
  zh: 从语句本身使用列对象的示例：
- en: '[PRE585]'
  id: totrans-3164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: New in version 1.4.
  id: totrans-3165
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增。
- en: 'Parameters:'
  id: totrans-3166
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***col_expressions** – indicates columns to be returned. Elements may be integer
    row indexes, string column names, or appropriate [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects corresponding to a select construct.'
  id: totrans-3167
  prefs: []
  type: TYPE_NORMAL
  zh: '***col_expressions** – 表示要返回的列。元素可以是整数行索引、字符串列名称或相应的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，对应于选择构造。'
- en: 'Returns:'
  id: totrans-3168
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    with the modifications given.
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象具有给定的修改。
- en: '[PRE586]'
  id: totrans-3170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: '*inherited from the* [`Result.fetchall()`](#sqlalchemy.engine.Result.fetchall
    "sqlalchemy.engine.Result.fetchall") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3171
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.fetchall()`](#sqlalchemy.engine.Result.fetchall "sqlalchemy.engine.Result.fetchall")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: A synonym for the [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    method.
  id: totrans-3172
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    方法的同义词。'
- en: '[PRE587]'
  id: totrans-3173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '*inherited from the* [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3174
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Fetch many rows.
  id: totrans-3175
  prefs: []
  type: TYPE_NORMAL
  zh: 获取许多行。
- en: When all rows are exhausted, returns an empty sequence.
  id: totrans-3176
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行耗尽时，返回一个空序列。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-3177
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法提供了与 SQLAlchemy 1.x.x 的向后兼容性。
- en: To fetch rows in groups, use the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method.
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
  zh: 要按组获取行，请使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")方法。
- en: 'Returns:'
  id: totrans-3179
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a sequence of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects.
  id: totrans-3180
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: See also
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
  id: totrans-3182
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
- en: '[PRE588]'
  id: totrans-3183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: '*inherited from the* [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3184
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone "sqlalchemy.engine.Result.fetchone")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Fetch one row.
  id: totrans-3185
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一行。
- en: When all rows are exhausted, returns None.
  id: totrans-3186
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行耗尽时，返回None。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-3187
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法提供了与 SQLAlchemy 1.x.x 的向后兼容性。
- en: To fetch the first row of a result only, use the [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") method. To iterate through all rows, iterate
    the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object directly.
  id: totrans-3188
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅获取结果的第一行，请使用[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")方法。要遍历所有行，请直接遍历[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。
- en: 'Returns:'
  id: totrans-3189
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object if no filters
    are applied, or `None` if no rows remain.
  id: totrans-3190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未应用任何过滤器，则为[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，如果没有剩余行，则为`None`。
- en: '[PRE589]'
  id: totrans-3191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '*inherited from the* [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-3192
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Fetch the first row or `None` if no row is present.
  id: totrans-3193
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行或如果没有行存在，则为`None`。
- en: Closes the result set and discards remaining rows.
  id: totrans-3194
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭结果集并丢弃剩余行。
- en: Note
  id: totrans-3195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method, or combine [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first").
  id: totrans-3196
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回一行**row**，例如元组。要返回确切的单个标量值，即第一行的第一列，请使用[`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")方法，或结合[`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")和[`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")。
- en: Additionally, in contrast to the behavior of the legacy ORM [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") method, **no limit is applied** to the SQL query
    which was invoked to produce this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result");
    for a DBAPI driver that buffers results in memory before yielding rows, all rows
    will be sent to the Python process and all but the first row will be discarded.
  id: totrans-3197
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与传统的ORM [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") 方法的行为相反，对产生此[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的SQL查询不应用限制；对于在产生行之前在内存中缓冲结果的DBAPI驱动程序，所有行将被发送到Python进程，并且除了第一行外，所有行都将被丢弃。
- en: See also
  id: totrans-3198
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query Unified with Core Select](../changelog/migration_20.html#migration-20-unify-select)'
  id: totrans-3199
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM查询与核心选择统一](../changelog/migration_20.html#migration-20-unify-select)'
- en: 'Returns:'
  id: totrans-3200
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object, or None if
    no rows remain.
  id: totrans-3201
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，如果没有剩余行，则为None。
- en: See also
  id: totrans-3202
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")'
  id: totrans-3203
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")'
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-3204
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[PRE590]'
  id: totrans-3205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '*inherited from the* [`Result.freeze()`](#sqlalchemy.engine.Result.freeze "sqlalchemy.engine.Result.freeze")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-3206
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Result.freeze()`](#sqlalchemy.engine.Result.freeze "sqlalchemy.engine.Result.freeze")
    *方法继承的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return a callable object that will produce copies of this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") when invoked.
  id: totrans-3207
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，调用时将产生此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")的副本。
- en: The callable object returned is an instance of [`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult").
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的可调用对象是[`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")的一个实例。
- en: This is used for result set caching. The method must be called on the result
    when it has been unconsumed, and calling the method will consume the result fully.
    When the [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    is retrieved from a cache, it can be called any number of times where it will
    produce a new [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object each time against its stored set of rows.
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于结果集缓存。当结果尚未消耗时，必须调用该方法，调用该方法将完全消耗结果。当从缓存中检索到[`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult")时，可以调用任意次数，每次调用都会产生一个新的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，针对其存储的行集。
- en: See also
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](../orm/session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](../orm/session_events.html#do-orm-execute-re-executing) - 在ORM中使用示例实现结果集缓存。'
- en: '[PRE591]'
  id: totrans-3212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: Return the primary key for the row just inserted.
  id: totrans-3213
  prefs: []
  type: TYPE_NORMAL
  zh: 返回刚插入的行的主键。
- en: The return value is a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object representing a named tuple of primary key values in the order in which
    the primary key columns are configured in the source [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-3214
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，表示主键值的命名元组，其顺序与源[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中配置的主键列相同。
- en: 'Changed in version 1.4.8: - the [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") value is now a named tuple
    via the [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") class, rather
    than a plain tuple.'
  id: totrans-3215
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.8中更改：- [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")的值现在是通过[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")类的命名元组，而不是普通元组。
- en: This accessor only applies to single row [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") constructs which did not explicitly specify
    [`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning "sqlalchemy.sql.expression.Insert.returning").
    Support for multirow inserts, while not yet available for most backends, would
    be accessed using the [`CursorResult.inserted_primary_key_rows`](#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessor.
  id: totrans-3216
  prefs: []
  type: TYPE_NORMAL
  zh: 此访问器仅适用于未明确指定[`Insert.returning()`](dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")的单行[`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造。虽然大多数后端尚不支持多行插入，但可以使用[`CursorResult.inserted_primary_key_rows`](#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")访问器进行访问。
- en: Note that primary key columns which specify a server_default clause, or otherwise
    do not qualify as “autoincrement” columns (see the notes at [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")), and were generated using the database-side default,
    will appear in this list as `None` unless the backend supports “returning” and
    the insert statement executed with the “implicit returning” enabled.
  id: totrans-3217
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，指定了服务器默认子句或以其他方式不符合“自动增量”列的主键列（请参阅[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")中的注释），并且是使用数据库端默认生成的，将在此列表中显示为`None`，除非后端支持“返回”并且插入语句以启用“隐式返回”执行。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an insert() construct.
  id: totrans-3218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译后的表达式构造或不是 insert() 构造，则引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE592]'
  id: totrans-3219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: Return the value of [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") as a row contained within
    a list; some dialects may support a multiple row form as well.
  id: totrans-3220
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")的值作为包含在列表中的行返回；某些方言可能也支持多行形式。
- en: Note
  id: totrans-3221
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As indicated below, in current SQLAlchemy versions this accessor is only useful
    beyond what’s already supplied by [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") when using the [psycopg2](../dialects/postgresql.html#postgresql-psycopg2)
    dialect. Future versions hope to generalize this feature to more dialects.
  id: totrans-3222
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，在当前的SQLAlchemy版本中，当使用[psycopg2](../dialects/postgresql.html#postgresql-psycopg2)方言时，此访问器仅有
    [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 提供的内容之外才有用。未来版本希望将此功能推广到更多方言中。
- en: This accessor is added to support dialects that offer the feature that is currently
    implemented by the [Psycopg2 Fast Execution Helpers](../dialects/postgresql.html#psycopg2-executemany-mode)
    feature, currently **only the psycopg2 dialect**, which provides for many rows
    to be INSERTed at once while still retaining the behavior of being able to return
    server-generated primary key values.
  id: totrans-3223
  prefs: []
  type: TYPE_NORMAL
  zh: 此访问器被添加以支持提供由 [Psycopg2快速执行助手](../dialects/postgresql.html#psycopg2-executemany-mode)
    功能实现的方言，目前**仅适用于psycopg2方言**，该功能允许一次插入多行而仍然保留能够返回服务器生成的主键值的行为。
- en: '`When using the psycopg2 dialect, or other dialects that may support “fast
    executemany” style inserts in upcoming releases` : When invoking an INSERT statement
    while passing a list of rows as the second argument to [`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), this accessor will then provide a list
    of rows, where each row contains the primary key value for each row that was INSERTed.'
  id: totrans-3224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`在使用psycopg2方言或其他可能在即将发布的版本中支持“快速执行多个”样式插入的方言时`：在调用INSERT语句时，将行列表作为[`Connection.execute()`](#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的第二个参数传递时，此访问器将提供一个包含每行插入的主键值的行列表。'
- en: '`When using all other dialects / backends that don’t yet support this feature`:
    This accessor is only useful for `single row INSERT statements`, and returns the
    same information as that of the [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") within a single-element
    list. When an INSERT statement is executed in conjunction with a list of rows
    to be INSERTed, the list will contain one row per row inserted in the statement,
    however it will contain `None` for any server-generated values.'
  id: totrans-3225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`当使用其他尚未支持此功能的方言/后端时`：此访问器仅对`单行 INSERT 语句`有用，并返回与单个元素列表中的 [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 相同的信息。当执行插入语句与要插入的行的列表结合时，列表将包含每个在语句中插入的行，但对于任何服务器生成的值，它将包含
    `None`。'
- en: Future releases of SQLAlchemy will further generalize the “fast execution helper”
    feature of psycopg2 to suit other dialects, thus allowing this accessor to be
    of more general use.
  id: totrans-3226
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的未来版本将进一步泛化 psycopg2 的 “快速执行辅助” 功能以适应其他方言，从而使此访问器能够更加通用。
- en: New in version 1.4.
  id: totrans-3227
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中的新特性：1.4。
- en: See also
  id: totrans-3228
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅也
- en: '[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
  id: totrans-3229
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
- en: '[PRE593]'
  id: totrans-3230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: True if this [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    is the result of a executing an expression language compiled [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct.
  id: totrans-3231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    是执行表达式语言编译的 [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    构造的结果，则为 True。
- en: When True, this implies that the [`inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute is accessible,
    assuming the statement did not include a user defined “returning” construct.
  id: totrans-3232
  prefs: []
  type: TYPE_NORMAL
  zh: 当为True时，这意味着[`inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 属性是可访问的，假设该语句未包括用户定义的“returning”构造。
- en: '[PRE594]'
  id: totrans-3233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-3234
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.engine._WithKeys` *的* `sqlalchemy.engine._WithKeys.keys`
    *方法*'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3235
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代的视图，该视图产生由每个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")所代表的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-3236
  prefs: []
  type: TYPE_NORMAL
  zh: 这些键可以表示由核心语句返回的列的标签，或者由orm执行返回的orm类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-3237
  prefs: []
  type: TYPE_NORMAL
  zh: 该视图还可以使用Python `in` 运算符进行键包含性测试，该测试将测试视图中表示的字符串键，以及列对象等替代键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-3238
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的变更：返回一个键视图对象，而不是一个普通列表。
- en: '[PRE595]'
  id: totrans-3239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: Return the collection of inserted parameters from this execution.
  id: totrans-3240
  prefs: []
  type: TYPE_NORMAL
  zh: 从此执行中返回已插入参数的集合。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an insert() construct.
  id: totrans-3241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译后的表达式构造或不是 insert() 构造，则会引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE596]'
  id: totrans-3242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: Return the collection of updated parameters from this execution.
  id: totrans-3243
  prefs: []
  type: TYPE_NORMAL
  zh: 从此执行中返回已更新参数的集合。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an update() construct.
  id: totrans-3244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译后的表达式构造或不是 update() 构造，则会引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE597]'
  id: totrans-3245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: Return `lastrow_has_defaults()` from the underlying [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext").
  id: totrans-3246
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层的 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") 返回 `lastrow_has_defaults()`。
- en: See [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    for details.
  id: totrans-3247
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参见 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")。
- en: '[PRE598]'
  id: totrans-3248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: Return the ‘lastrowid’ accessor on the DBAPI cursor.
  id: totrans-3249
  prefs: []
  type: TYPE_NORMAL
  zh: 返回DBAPI游标上的‘lastrowid’访问器。
- en: This is a DBAPI specific method and is only functional for those backends which
    support it, for statements where it is appropriate. It’s behavior is not consistent
    across backends.
  id: totrans-3250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个DBAPI特定的方法，仅对支持它的后端有效，对于适当的语句。它的行为在不同的后端上不一致。
- en: Usage of this method is normally unnecessary when using insert() expression
    constructs; the [`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute provides a tuple
    of primary key values for a newly inserted row, regardless of database backend.
  id: totrans-3251
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用insert()表达式构造时，通常不需要使用此方法；[`CursorResult.inserted_primary_key`](#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 属性提供了新插入行的主键值的元组，而不管数据库后端如何。
- en: '[PRE599]'
  id: totrans-3252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: '*inherited from the* [`Result.mappings()`](#sqlalchemy.engine.Result.mappings
    "sqlalchemy.engine.Result.mappings") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3253
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.mappings()`](#sqlalchemy.engine.Result.mappings "sqlalchemy.engine.Result.mappings")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Apply a mappings filter to returned rows, returning an instance of [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult").
  id: totrans-3254
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用映射过滤器，返回[`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")的实例。
- en: When this filter is applied, fetching rows will return [`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") objects instead of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-3255
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用此过滤器时，获取行将返回[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")对象，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: New in version 1.4.
  id: totrans-3256
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版中的新功能。
- en: 'Returns:'
  id: totrans-3257
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    filtering object referring to this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-3258
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的指向此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的[`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")过滤对象。
- en: '[PRE600]'
  id: totrans-3259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: Merge this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    with other compatible result objects.
  id: totrans-3260
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")与其他兼容的结果对象合并。
- en: The object returned is an instance of [`MergedResult`](#sqlalchemy.engine.MergedResult
    "sqlalchemy.engine.MergedResult"), which will be composed of iterators from the
    given result objects.
  id: totrans-3261
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`MergedResult`](#sqlalchemy.engine.MergedResult "sqlalchemy.engine.MergedResult")的实例，它将由给定结果对象的迭代器组成。
- en: The new result will use the metadata from this result object. The subsequent
    result objects must be against an identical set of result / cursor metadata, otherwise
    the behavior is undefined.
  id: totrans-3262
  prefs: []
  type: TYPE_NORMAL
  zh: 新结果将使用此结果对象的元数据。随后的结果对象必须与相同的结果/游标元数据匹配，否则行为未定义。
- en: '[PRE601]'
  id: totrans-3263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '*inherited from the* [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-3264
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return exactly one row or raise an exception.
  id: totrans-3265
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一行或引发异常。
- en: Raises [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound "sqlalchemy.exc.NoResultFound")
    if the result returns no rows, or [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows would be returned.
  id: totrans-3266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果返回零行，则引发[`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound "sqlalchemy.exc.NoResultFound")
    ，或者如果将返回多行，则引发[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") 。
- en: Note
  id: totrans-3267
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") method, or combine [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one").
  id: totrans-3268
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法默认返回一个**行**，例如元组。要返回确切的单个标量值，即第一行的第一列，请使用[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") 方法，或结合使用[`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 和 [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")。
- en: New in version 1.4.
  id: totrans-3269
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版中的新功能。
- en: 'Returns:'
  id: totrans-3270
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3271
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")。
- en: 'Raises:'
  id: totrans-3272
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
  id: totrans-3273
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")、[`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
- en: See also
  id: totrans-3274
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
  id: totrans-3275
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
- en: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
  id: totrans-3276
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
- en: '[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")'
  id: totrans-3277
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")'
- en: '[PRE602]'
  id: totrans-3278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: '*inherited from the* [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3279
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return at most one result or raise an exception.
  id: totrans-3280
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个结果或引发异常。
- en: Returns `None` if the result has no rows. Raises [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows are returned.
  id: totrans-3281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有行，则返回 `None`。如果返回多行，则引发 [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") 异常。
- en: New in version 1.4.
  id: totrans-3282
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Returns:'
  id: totrans-3283
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") or `None`
    if no row is available.
  id: totrans-3284
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 或者 `None`（如果没有可用行）。
- en: 'Raises:'
  id: totrans-3285
  prefs: []
  type: TYPE_NORMAL
  zh: 异常：
- en: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
  id: totrans-3286
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
- en: See also
  id: totrans-3287
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
  id: totrans-3288
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-3289
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[PRE603]'
  id: totrans-3290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '*inherited from the* [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3291
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Iterate through sub-lists of rows of the size given.
  id: totrans-3292
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的行子列表。
- en: Each list will be of the size given, excluding the last list to be yielded,
    which may have a small number of rows. No empty lists will be yielded.
  id: totrans-3293
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列表将具有给定大小，最后一个列表不包括在内，可能具有少量行。不会生成空列表。
- en: The result object is automatically closed when the iterator is fully consumed.
  id: totrans-3294
  prefs: []
  type: TYPE_NORMAL
  zh: 当迭代器被完全消耗时，结果对象会自动关闭。
- en: Note that the backend driver will usually buffer the entire result ahead of
    time unless the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option is used indicating
    that the driver should not pre-buffer results, if possible. Not all drivers support
    this option and the option is silently ignored for those who do not.
  id: totrans-3295
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除非使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项指示驱动程序不要提前缓冲结果，否则后端驱动程序通常会提前缓冲整个结果集，如果可能的话。并非所有驱动程序都支持此选项，并且对于不支持此选项的驱动程序，该选项会被悄悄忽略。
- en: When using the ORM, the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method is typically more effective from
    a memory perspective when it is combined with use of the [yield_per execution
    option](../orm/queryguide/api.html#orm-queryguide-yield-per), which instructs
    both the DBAPI driver to use server side cursors, if available, as well as instructs
    the ORM loading internals to only build a certain amount of ORM objects from a
    result at a time before yielding them out.
  id: totrans-3296
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ORM 时，通常在内存方面更有效的方法是将 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") 方法与 [yield_per execution option](../orm/queryguide/api.html#orm-queryguide-yield-per)
    结合使用，该选项指示 DBAPI 驱动程序在可用时使用服务器端游标，并且指示 ORM 加载内部在将结果中的某些 ORM 对象建立一定数量后才将它们输出。
- en: New in version 1.4.
  id: totrans-3297
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Parameters:'
  id: totrans-3298
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**size** – indicate the maximum number of rows to be present in each list yielded.
    If None, makes use of the value set by the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per"), method, if it were called, or the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which is equivalent
    in this regard. If yield_per weren’t set, it makes use of the [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") default, which may be backend specific and
    not well defined.'
  id: totrans-3299
  prefs: []
  type: TYPE_NORMAL
  zh: '**size** – 指示每个生成的列表中应存在的最大行数。如果为None，则使用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法设置的值，如果调用了该方法，或者等效的[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项。如果未设置yield_per，则使用[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany")的默认值，这可能是特定于后端的，并且定义不明确。'
- en: 'Returns:'
  id: totrans-3300
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: iterator of lists
  id: totrans-3301
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的迭代器
- en: See also
  id: totrans-3302
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)'
  id: totrans-3303
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results)'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-3304
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用Yield Per获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per) -
    在[ORM查询指南](../orm/queryguide/index.html)中'
- en: '[PRE604]'
  id: totrans-3305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: Return `postfetch_cols()` from the underlying [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext").
  id: totrans-3306
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层的[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")返回`postfetch_cols()`。
- en: See [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    for details.
  id: totrans-3307
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")以获取详细信息。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an insert() or update() construct.
  id: totrans-3308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译的表达式构造或不是insert()或update()构造，则引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE605]'
  id: totrans-3309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: Return `prefetch_cols()` from the underlying [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext").
  id: totrans-3310
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层的[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")返回`prefetch_cols()`。
- en: See [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    for details.
  id: totrans-3311
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")以获取详细信息。
- en: Raises [`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the executed statement is not a compiled
    expression construct or is not an insert() or update() construct.
  id: totrans-3312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行的语句不是编译的表达式构造或不是insert()或update()构造，则引发[`InvalidRequestError`](exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE606]'
  id: totrans-3313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: Return the values of default columns that were fetched using the `ValuesBase.return_defaults()`
    feature.
  id: totrans-3314
  prefs: []
  type: TYPE_NORMAL
  zh: 返回使用`ValuesBase.return_defaults()`功能获取的默认列的值。
- en: The value is an instance of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row"),
    or `None` if `ValuesBase.return_defaults()` was not used or if the backend does
    not support RETURNING.
  id: totrans-3315
  prefs: []
  type: TYPE_NORMAL
  zh: 该值是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")的实例，如果未使用`ValuesBase.return_defaults()`或后端不支持RETURNING，则为`None`。
- en: See also
  id: totrans-3316
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '`ValuesBase.return_defaults()`'
  id: totrans-3317
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValuesBase.return_defaults()`'
- en: '[PRE607]'
  id: totrans-3318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: Return a list of rows each containing the values of default columns that were
    fetched using the `ValuesBase.return_defaults()` feature.
  id: totrans-3319
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含使用`ValuesBase.return_defaults()`功能获取的默认列值的行列表。
- en: The return value is a list of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-3320
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的列表。
- en: New in version 1.4.
  id: totrans-3321
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE608]'
  id: totrans-3322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: True if this [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    returns zero or more rows.
  id: totrans-3323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")返回零个或多个行，则为True。
- en: I.e. if it is legal to call the methods [`CursorResult.fetchone()`](#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone"), [`CursorResult.fetchmany()`](#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany") [`CursorResult.fetchall()`](#sqlalchemy.engine.CursorResult.fetchall
    "sqlalchemy.engine.CursorResult.fetchall").
  id: totrans-3324
  prefs: []
  type: TYPE_NORMAL
  zh: 即，如果可以调用方法 [`CursorResult.fetchone()`](#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone"), [`CursorResult.fetchmany()`](#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany") [`CursorResult.fetchall()`](#sqlalchemy.engine.CursorResult.fetchall
    "sqlalchemy.engine.CursorResult.fetchall")。
- en: Overall, the value of [`CursorResult.returns_rows`](#sqlalchemy.engine.CursorResult.returns_rows
    "sqlalchemy.engine.CursorResult.returns_rows") should always be synonymous with
    whether or not the DBAPI cursor had a `.description` attribute, indicating the
    presence of result columns, noting that a cursor that returns zero rows still
    has a `.description` if a row-returning statement was emitted.
  id: totrans-3325
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，[`CursorResult.returns_rows`](#sqlalchemy.engine.CursorResult.returns_rows
    "sqlalchemy.engine.CursorResult.returns_rows") 的值应该与DBAPI游标是否具有`.description`属性始终同义，指示结果列的存在，注意，即使游标返回零行，如果发出了返回行的语句，则仍然具有`.description`。
- en: This attribute should be True for all results that are against SELECT statements,
    as well as for DML statements INSERT/UPDATE/DELETE that use RETURNING. For INSERT/UPDATE/DELETE
    statements that were not using RETURNING, the value will usually be False, however
    there are some dialect-specific exceptions to this, such as when using the MSSQL
    / pyodbc dialect a SELECT is emitted inline in order to retrieve an inserted primary
    key value.
  id: totrans-3326
  prefs: []
  type: TYPE_NORMAL
  zh: 对于针对SELECT语句的所有结果，以及对使用RETURNING的DML语句INSERT/UPDATE/DELETE，此属性应为True。对于未使用RETURNING的INSERT/UPDATE/DELETE语句，该值通常为False，但是有一些方言特定的例外情况，例如在使用MSSQL
    / pyodbc方言时，内联发出SELECT以检索插入的主键值时。
- en: '[PRE609]'
  id: totrans-3327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: Return the ‘rowcount’ for this result.
  id: totrans-3328
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此结果的“rowcount”。
- en: The primary purpose of ‘rowcount’ is to report the number of rows matched by
    the WHERE criterion of an UPDATE or DELETE statement executed once (i.e. for a
    single parameter set), which may then be compared to the number of rows expected
    to be updated or deleted as a means of asserting data integrity.
  id: totrans-3329
  prefs: []
  type: TYPE_NORMAL
  zh: “rowcount”的主要目的是报告一次执行（即对单个参数集）的UPDATE或DELETE语句的WHERE条件匹配的行数，然后可以将其与预期更新或删除的行数进行比较，作为断言数据完整性的手段。
- en: This attribute is transferred from the `cursor.rowcount` attribute of the DBAPI
    before the cursor is closed, to support DBAPIs that don’t make this value available
    after cursor close. Some DBAPIs may offer meaningful values for other kinds of
    statements, such as INSERT and SELECT statements as well. In order to retrieve
    `cursor.rowcount` for these statements, set the [`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") execution option to True, which
    will cause the `cursor.rowcount` value to be unconditionally memoized before any
    results are returned or the cursor is closed, regardless of statement type.
  id: totrans-3330
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性在关闭游标之前从DBAPI的`cursor.rowcount`属性转移，以支持不在游标关闭后提供此值的DBAPI。某些DBAPI可能还为其他类型的语句提供有意义的值，例如INSERT和SELECT语句。为了检索这些语句的`cursor.rowcount`，请将
    [`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") 执行选项设置为True，这将导致在返回任何结果或关闭游标之前无条件地对`cursor.rowcount`值进行备忘，而不管语句类型如何。
- en: For cases where the DBAPI does not support rowcount for a particular kind of
    statement and/or execution, the returned value will be `-1`, which is delivered
    directly from the DBAPI and is part of [**PEP 249**](https://peps.python.org/pep-0249/).
    All DBAPIs should support rowcount for single-parameter-set UPDATE and DELETE
    statements, however.
  id: totrans-3331
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DBAPI不支持特定类型的语句和/或执行的rowcount的情况，返回的值将是`-1`，直接从DBAPI传递，并且是 [**PEP 249**](https://peps.python.org/pep-0249/)
    的一部分。但所有的DBAPI都应该支持单参数集UPDATE和DELETE语句的rowcount。
- en: Note
  id: totrans-3332
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Notes regarding [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount"):'
  id: totrans-3333
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    的注释：
- en: This attribute returns the number of rows *matched*, which is not necessarily
    the same as the number of rows that were actually *modified*. For example, an
    UPDATE statement may have no net change on a given row if the SET values given
    are the same as those present in the row already. Such a row would be matched
    but not modified. On backends that feature both styles, such as MySQL, rowcount
    is configured to return the match count in all cases.
  id: totrans-3334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此属性返回*匹配*的行数，这不一定与实际*修改*的行数相同。例如，如果UPDATE语句中给定的SET值与已经存在于行中的值相同，则对于给定行可能没有净变化。这样的行将被匹配但不会被修改。在具有两种样式的后端（例如MySQL）上，rowcount配置为在所有情况下返回匹配计数。
- en: '[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    in the default case is *only* useful in conjunction with an UPDATE or DELETE statement,
    and only with a single set of parameters. For other kinds of statements, SQLAlchemy
    will not attempt to pre-memoize the value unless the [`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") execution option is used. Note
    that contrary to [**PEP 249**](https://peps.python.org/pep-0249/), many DBAPIs
    do not support rowcount values for statements that are not UPDATE or DELETE, particularly
    when rows are being returned which are not fully pre-buffered. DBAPIs that dont
    support rowcount for a particular kind of statement should return the value `-1`
    for such statements.'
  id: totrans-3335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在默认情况下，[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    *只有*在与UPDATE或DELETE语句结合使用时才有用，并且只适用于单组参数。对于其他类型的语句，除非使用了[`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")执行选项，否则SQLAlchemy不会尝试预先记忆该值。请注意，与[**PEP
    249**](https://peps.python.org/pep-0249/)相反，许多DBAPI不支持不是UPDATE或DELETE的语句的rowcount值，特别是当返回未完全预先缓冲的行时。不支持特定类型语句的rowcount的DBAPI应为此类语句返回值`-1`。
- en: '[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    may not be meaningful when executing a single statement with multiple parameter
    sets (i.e. an [executemany](../glossary.html#term-executemany)). Most DBAPIs do
    not sum “rowcount” values across multiple parameter sets and will return `-1`
    when accessed.'
  id: totrans-3336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当执行带有多个参数集的单个语句（即[executemany](../glossary.html#term-executemany)）时，可能无法理解[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。大多数DBAPI不会跨多个参数集总和“rowcount”值，并在访问时返回`-1`。
- en: SQLAlchemy’s [“Insert Many Values” Behavior for INSERT statements](#engine-insertmanyvalues)
    feature does support a correct population of [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") when the [`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") execution option is set to True.
  id: totrans-3337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当[`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")执行选项设置为True时，SQLAlchemy的[INSERT语句的“插入多个值”行为](#engine-insertmanyvalues)功能支持正确填充[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。
- en: Statements that use RETURNING may not support rowcount, returning a `-1` value
    instead.
  id: totrans-3338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RETURNING的语句可能不支持rowcount，而返回值为`-1`。
- en: See also
  id: totrans-3339
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Getting Affected Row Count from UPDATE, DELETE](../tutorial/data_update.html#tutorial-update-delete-rowcount)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3340
  prefs: []
  type: TYPE_NORMAL
  zh: '[从UPDATE、DELETE语句获取受影响的行数](../tutorial/data_update.html#tutorial-update-delete-rowcount)
    - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-3341
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.preserve_rowcount`](#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[PRE610]'
  id: totrans-3342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '*inherited from the* [`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-3343
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") *的* [`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") *方法继承*'
- en: Fetch the first column of the first row, and close the result set.
  id: totrans-3344
  prefs: []
  type: TYPE_NORMAL
  zh: 抓取第一行的第一列，并关闭结果集。
- en: Returns `None` if there are no rows to fetch.
  id: totrans-3345
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有要抓取的行，则返回`None`。
- en: No validation is performed to test if additional rows remain.
  id: totrans-3346
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行验证以测试是否存在额外的行。
- en: After calling this method, the object is fully closed, e.g. the [`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method will have been called.
  id: totrans-3347
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法后，对象将完全关闭，例如[`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close")方法将被调用。
- en: 'Returns:'
  id: totrans-3348
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a Python scalar value, or `None` if no rows remain.
  id: totrans-3349
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Python标量值，如果没有剩余行则返回`None`。
- en: '[PRE611]'
  id: totrans-3350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '*inherited from the* [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3351
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return exactly one scalar result or raise an exception.
  id: totrans-3352
  prefs: []
  type: TYPE_NORMAL
  zh: 返回精确一个标量结果或引发异常。
- en: This is equivalent to calling [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and then [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one").
  id: totrans-3353
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于调用[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")然后调用[`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")。
- en: See also
  id: totrans-3354
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-3355
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
  id: totrans-3356
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
- en: '[PRE612]'
  id: totrans-3357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '*inherited from the* [`Result.scalar_one_or_none()`](#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3358
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.scalar_one_or_none()`](#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") *方法的* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
- en: Return exactly one scalar result or `None`.
  id: totrans-3359
  prefs: []
  type: TYPE_NORMAL
  zh: 返回精确一个标量结果或`None`。
- en: This is equivalent to calling [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and then [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none").
  id: totrans-3360
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于调用[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")然后调用[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none")。
- en: See also
  id: totrans-3361
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
  id: totrans-3362
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
- en: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
  id: totrans-3363
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
- en: '[PRE613]'
  id: totrans-3364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '*inherited from the* [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") *method of* [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")'
  id: totrans-3365
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    *方法的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Return a [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    filtering object which will return single elements rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-3366
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")过滤对象，该对象将返回单个元素而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: 'E.g.:'
  id: totrans-3367
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE614]'
  id: totrans-3368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: When results are fetched from the [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object, the single column-row that
    would be returned by the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    is instead returned as the column’s value.
  id: totrans-3369
  prefs: []
  type: TYPE_NORMAL
  zh: 当从[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")过滤对象中获取结果时，将返回由[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")返回的单列行，而不是作为列值返回。
- en: New in version 1.4.
  id: totrans-3370
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Parameters:'
  id: totrans-3371
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**index** – integer or row key indicating the column to be fetched from each
    row, defaults to `0` indicating the first column.'
  id: totrans-3372
  prefs: []
  type: TYPE_NORMAL
  zh: '**index** – 指示从每行中获取的列的整数或行键，默认为`0`，表示第一列。'
- en: 'Returns:'
  id: totrans-3373
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    filtering object referring to this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-3374
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的指向此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的[`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")过滤对象。
- en: '[PRE615]'
  id: totrans-3375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: Return a new [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    that “horizontally splices” together the rows of this [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") with that of another [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").
  id: totrans-3376
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")，将此[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的行与另一个[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的行“横向拼接”在一起。
- en: Tip
  id: totrans-3377
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: This method is for the benefit of the SQLAlchemy ORM and is not intended for
    general use.
  id: totrans-3378
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是为了SQLAlchemy ORM的利益而设计，不适用于一般用途。
- en: “horizontally splices” means that for each row in the first and second result
    sets, a new row that concatenates the two rows together is produced, which then
    becomes the new row. The incoming [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") must have the identical number of rows. It is
    typically expected that the two result sets come from the same sort order as well,
    as the result rows are spliced together based on their position in the result.
  id: totrans-3379
  prefs: []
  type: TYPE_NORMAL
  zh: “横向拼接”意味着对于第一个和第二个结果集中的每一行，都会生成一个将两行连接在一起的新行，然后成为新行。传入的[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")必须具有相同数量的行。通常期望两个结果集也来自相同的排序顺序，因为结果行根据它们在结果中的位置拼接在一起。
- en: The expected use case here is so that multiple INSERT..RETURNING statements
    (which definitely need to be sorted) against different tables can produce a single
    result that looks like a JOIN of those two tables.
  id: totrans-3380
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的用例是，对不同表执行多个INSERT..RETURNING语句（肯定需要排序），可以生成一个看起来像这两个表的JOIN的单个结果。
- en: 'E.g.:'
  id: totrans-3381
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE616]'
  id: totrans-3382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: New in version 2.0.
  id: totrans-3383
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-3384
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`CursorResult.splice_vertically()`](#sqlalchemy.engine.CursorResult.splice_vertically
    "sqlalchemy.engine.CursorResult.splice_vertically")'
  id: totrans-3385
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.splice_vertically()`](#sqlalchemy.engine.CursorResult.splice_vertically
    "sqlalchemy.engine.CursorResult.splice_vertically")'
- en: '[PRE617]'
  id: totrans-3386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: Return a new [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    that “vertically splices”, i.e. “extends”, the rows of this [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") with that of another [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").
  id: totrans-3387
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")，即“纵向拼接”，即将此[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的行与另一个[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的行“扩展”在一起。
- en: Tip
  id: totrans-3388
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: This method is for the benefit of the SQLAlchemy ORM and is not intended for
    general use.
  id: totrans-3389
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是为了SQLAlchemy ORM的利益而设计，不适用于一般用途。
- en: “vertically splices” means the rows of the given result are appended to the
    rows of this cursor result. The incoming [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") must have rows that represent the identical
    list of columns in the identical order as they are in this [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").
  id: totrans-3390
  prefs: []
  type: TYPE_NORMAL
  zh: “纵向拼接”意味着给定结果的行被附加到此游标结果的行。传入的[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")必须具有与此[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")中相同顺序的相同列列表。
- en: New in version 2.0.
  id: totrans-3391
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-3392
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`CursorResult.splice_horizontally()`](#sqlalchemy.engine.CursorResult.splice_horizontally
    "sqlalchemy.engine.CursorResult.splice_horizontally")'
  id: totrans-3393
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.splice_horizontally()`](#sqlalchemy.engine.CursorResult.splice_horizontally
    "sqlalchemy.engine.CursorResult.splice_horizontally")'
- en: '[PRE618]'
  id: totrans-3394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: Return `supports_sane_multi_rowcount` from the dialect.
  id: totrans-3395
  prefs: []
  type: TYPE_NORMAL
  zh: 从方言返回`supports_sane_multi_rowcount`。
- en: See [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    for background.
  id: totrans-3396
  prefs: []
  type: TYPE_NORMAL
  zh: 有关背景，请参阅[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")。
- en: '[PRE619]'
  id: totrans-3397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: Return `supports_sane_rowcount` from the dialect.
  id: totrans-3398
  prefs: []
  type: TYPE_NORMAL
  zh: 从方言返回`supports_sane_rowcount`。
- en: See [`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")
    for background.
  id: totrans-3399
  prefs: []
  type: TYPE_NORMAL
  zh: 有关背景，请参阅[`CursorResult.rowcount`](#sqlalchemy.engine.CursorResult.rowcount "sqlalchemy.engine.CursorResult.rowcount")。
- en: '[PRE620]'
  id: totrans-3400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: '*inherited from the* [`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t")
    *attribute of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-3401
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t")
    *属性的* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-3402
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型化元组”类型过滤器。
- en: The [`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") attribute
    is a synonym for calling the [`Result.tuples()`](#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") method.
  id: totrans-3403
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") 属性是调用
    [`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")
    方法的同义词。'
- en: New in version 2.0.
  id: totrans-3404
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: '[PRE621]'
  id: totrans-3405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: '*inherited from the* [`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-3406
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自* [`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")
    *方法的继承* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") *方法*'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-3407
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型化元组”类型过滤。
- en: This method returns the same [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object at runtime, however annotates as returning a [`TupleResult`](#sqlalchemy.engine.TupleResult
    "sqlalchemy.engine.TupleResult") object that will indicate to [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools that plain typed `Tuple` instances are returned rather than rows.
    This allows tuple unpacking and `__getitem__` access of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects to by typed, for those cases where the statement
    invoked itself included typing information.
  id: totrans-3408
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在运行时返回相同的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象，但标注为返回一个 [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    对象，这将指示 [**PEP 484**](https://peps.python.org/pep-0484/) 类型工具，返回的是普通类型的 `Tuple`
    实例，而不是行。这允许对返回的 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象进行元组解包和
    `__getitem__` 访问，对于那些语句本身包含类型信息的情况。
- en: New in version 2.0.
  id: totrans-3409
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: 'Returns:'
  id: totrans-3410
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    type at typing time.
  id: totrans-3411
  prefs: []
  type: TYPE_NORMAL
  zh: 在类型时间使用 [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    类型。
- en: See also
  id: totrans-3412
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") - shorter
    synonym'
  id: totrans-3413
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") - 更短的同义词'
- en: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") version'
  id: totrans-3414
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 版本'
- en: '[PRE622]'
  id: totrans-3415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: '*inherited from the* [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    *method of* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")'
  id: totrans-3416
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自* [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    *方法的继承* [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") *方法*'
- en: Apply unique filtering to the objects returned by this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  id: totrans-3417
  prefs: []
  type: TYPE_NORMAL
  zh: 对由此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 返回的对象应用唯一过滤。
- en: When this filter is applied with no arguments, the rows or objects returned
    will filtered such that each row is returned uniquely. The algorithm used to determine
    this uniqueness is by default the Python hashing identity of the whole tuple.
    In some cases a specialized per-entity hashing scheme may be used, such as when
    using the ORM, a scheme is applied which works against the primary key identity
    of returned objects.
  id: totrans-3418
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有参数应用此过滤器时，返回的行或对象将被过滤，以便每行都是唯一的。确定此唯一性的算法默认为整个元组的 Python 散列标识。在某些情况下，可能会使用专门的每个实体散列方案，例如当使用
    ORM 时，会应用一种针对返回对象的主键标识的方案。
- en: The unique filter is applied **after all other filters**, which means if the
    columns returned have been refined using a method such as the [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") or [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method, the uniquing is applied to **only
    the column or columns returned**. This occurs regardless of the order in which
    these methods have been called upon the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-3419
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一过滤器在 **所有其他过滤器之后** 应用，这意味着如果返回的列已经使用 [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 或 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 等方法进行了细化，唯一性将仅应用于**返回的列或列**。这不受这些方法被调用时的顺序对
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象的影响。
- en: The unique filter also changes the calculus used for methods like [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") and [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). When using [`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique"), these methods will continue to yield the number
    of rows or objects requested, after uniquing has been applied. However, this necessarily
    impacts the buffering behavior of the underlying cursor or datasource, such that
    multiple underlying calls to `cursor.fetchmany()` may be necessary in order to
    accumulate enough objects in order to provide a unique collection of the requested
    size.
  id: totrans-3420
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一过滤器还改变了像 [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")
    和 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    这样的方法所使用的计算方法。当使用 [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    时，这些方法将继续产出请求的行数或对象，在唯一化应用后。然而，这必然会影响底层游标或数据源的缓冲行为，以至于可能需要多次调用 `cursor.fetchmany()`
    才能积累足够的对象以提供所请求大小的唯一集合。
- en: 'Parameters:'
  id: totrans-3421
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**strategy** – a callable that will be applied to rows or objects being iterated,
    which should return an object that represents the unique value of the row. A Python
    `set()` is used to store these identities. If not passed, a default uniqueness
    strategy is used which may have been assembled by the source of this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.'
  id: totrans-3422
  prefs: []
  type: TYPE_NORMAL
  zh: '**策略** - 一个应用于被迭代的行或对象的可调用函数，应返回表示行的唯一值的对象。Python 的 `set()` 用于存储这些标识。如果未传递，则使用默认的唯一性策略，该策略可能由此
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象的源组装而成。'
- en: '[PRE623]'
  id: totrans-3423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-3424
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行获取策略以一次获取 `num` 行。
- en: This impacts the underlying behavior of the result when iterating over the result
    object, or otherwise making use of methods such as [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") that return one row at a time. Data from
    the underlying cursor or other data source will be buffered up to this many rows
    in memory, and the buffered collection will then be yielded out one row at a time
    or as many rows are requested. Each time the buffer clears, it will be refreshed
    to this many rows or as many rows remain if fewer remain.
  id: totrans-3425
  prefs: []
  type: TYPE_NORMAL
  zh: 这会影响在迭代结果对象时的底层行为，或者以其他方式使用诸如 [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") 这样一次返回一行的方法时的行为。来自底层游标或其他数据源的数据将在内存中缓冲到这么多行，并且缓冲的集合然后将以一行或所请求的行数被产出。每次缓冲清除时，它将被刷新到这么多行或者如果剩余的行数更少则剩余的行数。
- en: The [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    method is generally used in conjunction with the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    allow the database dialect in use to make use of a server side cursor, if the
    DBAPI supports a specific “server side cursor” mode separate from its default
    mode of operation.
  id: totrans-3426
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    方法通常与 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项一起使用，这将允许正在使用的数据库方言利用服务器端游标，如果
    DBAPI 支持与其默认操作模式分离的特定“服务器端游标”模式。'
- en: Tip
  id: totrans-3427
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Consider using the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    simultaneously set [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") to ensure the use of server
    side cursors, as well as automatically invoke the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method to establish a fixed row buffer size
    at once.
  id: totrans-3428
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用 [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项，这将同时设置 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 以确保使用服务器端游标，并自动调用 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法以一次性建立固定的行缓冲区大小。
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option is available
    for ORM operations, with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-oriented use described at [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per). The Core-only
    version which works with [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is new as of SQLAlchemy 1.4.40.
  id: totrans-3429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项适用于 ORM 操作，使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 导向的用法在 [使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    中描述。仅适用于与 [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    一起使用的 Core 版本是 SQLAlchemy 1.4.40 的新功能。'
- en: New in version 1.4.
  id: totrans-3430
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Parameters:'
  id: totrans-3431
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**num** – number of rows to fetch each time the buffer is refilled. If set
    to a value below 1, fetches all rows for the next buffer.'
  id: totrans-3432
  prefs: []
  type: TYPE_NORMAL
  zh: '**num** – 每次重新填充缓冲区时要获取的行数。如果设置为小于 1 的值，则获取下一个缓冲区的所有行。'
- en: See also
  id: totrans-3433
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-3434
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](#engine-stream-results) - 描述了 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为。'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-3435
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '[PRE624]'
  id: totrans-3436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: A wrapper for a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    that returns objects other than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, such as dictionaries or scalar objects.
  id: totrans-3437
  prefs: []
  type: TYPE_NORMAL
  zh: 用于返回除 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象之外的其他对象（例如字典或标量对象）的
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 的包装器。
- en: '[`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")
    is the common base for additional result APIs including [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult"), [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") and `AsyncResult`.'
  id: totrans-3438
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")
    是其他结果 API 的常见基础，包括 [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")、[`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 和 `AsyncResult`。'
- en: '**Members**'
  id: totrans-3439
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.engine.FilterResult.close), [closed](#sqlalchemy.engine.FilterResult.closed),
    [yield_per()](#sqlalchemy.engine.FilterResult.yield_per)'
  id: totrans-3440
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.engine.FilterResult.close)，[closed](#sqlalchemy.engine.FilterResult.closed)，[yield_per()](#sqlalchemy.engine.FilterResult.yield_per)'
- en: '**Class signature**'
  id: totrans-3441
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")
    (`sqlalchemy.engine.ResultInternal`)
  id: totrans-3442
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")
    (`sqlalchemy.engine.ResultInternal`)
- en: '[PRE625]'
  id: totrans-3443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: Close this [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult").
  id: totrans-3444
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")。
- en: New in version 1.4.43.
  id: totrans-3445
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.43 中新增。
- en: '[PRE626]'
  id: totrans-3446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: Return `True` if the underlying [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    reports closed
  id: totrans-3447
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 报告已关闭，则返回
    `True`。
- en: New in version 1.4.43.
  id: totrans-3448
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.43 中新增。
- en: '[PRE627]'
  id: totrans-3449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-3450
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行获取策略，以一次获取 `num` 行。
- en: The [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    method is a pass through to the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-3451
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    方法是对 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    方法的传递。有关使用说明，请参阅该方法的文档。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-3452
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.40 中新增：- 添加了 [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 方法，使其在所有结果集实现中均可用。
- en: See also
  id: totrans-3453
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-3454
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](#engine-stream-results) - 描述了 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为。'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-3455
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中。'
- en: '[PRE628]'
  id: totrans-3456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: Represents a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object in a “frozen” state suitable for caching.
  id: totrans-3457
  prefs: []
  type: TYPE_NORMAL
  zh: 表示适用于缓存的 “冻结” 状态的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象。
- en: The [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    object is returned from the [`Result.freeze()`](#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze") method of any [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-3458
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象的 [`Result.freeze()`](#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze") 方法返回 [`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") 对象。
- en: 'A new iterable [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is generated from a fixed set of data each time the [`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") is invoked as a callable:'
  id: totrans-3459
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用 [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    时，从固定的数据集生成一个新的可迭代的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象：
- en: '[PRE629]'
  id: totrans-3460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: New in version 1.4.
  id: totrans-3461
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-3462
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Re-Executing Statements](../orm/session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  id: totrans-3463
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](../orm/session_events.html#do-orm-execute-re-executing) - ORM 中的示例用法，用于实现结果集缓存。'
- en: '`merge_frozen_result()` - ORM function to merge a frozen result back into a
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  id: totrans-3464
  prefs: []
  type: TYPE_NORMAL
  zh: '`merge_frozen_result()` - 将冻结的结果合并回 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 的 ORM 函数。'
- en: '**Class signature**'
  id: totrans-3465
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    (`typing.Generic`)
  id: totrans-3466
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")（`typing.Generic`）
- en: '[PRE630]'
  id: totrans-3467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: A [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") that gets
    data from a Python iterator of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects or similar row-like data.
  id: totrans-3468
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 迭代器或类似行数据的 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象中获取数据的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。
- en: New in version 1.4.
  id: totrans-3469
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '**Members**'
  id: totrans-3470
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[closed](#sqlalchemy.engine.IteratorResult.closed)'
  id: totrans-3471
  prefs: []
  type: TYPE_NORMAL
  zh: '[closed](#sqlalchemy.engine.IteratorResult.closed)'
- en: '**Class signature**'
  id: totrans-3472
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult") ([`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"))
  id: totrans-3473
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")（[`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")）
- en: '[PRE631]'
  id: totrans-3474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: Return `True` if this [`IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")
    has been closed
  id: totrans-3475
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个 [`IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult")
    已经关闭，则返回 `True`。
- en: New in version 1.4.43.
  id: totrans-3476
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.43 中的新功能。
- en: '[PRE632]'
  id: totrans-3477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: A [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") that is merged
    from any number of [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    objects.
  id: totrans-3478
  prefs: []
  type: TYPE_NORMAL
  zh: 从任意数量的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象合并而来的
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。
- en: Returned by the [`Result.merge()`](#sqlalchemy.engine.Result.merge "sqlalchemy.engine.Result.merge")
    method.
  id: totrans-3479
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [`Result.merge()`](#sqlalchemy.engine.Result.merge "sqlalchemy.engine.Result.merge")
    方法返回。
- en: New in version 1.4.
  id: totrans-3480
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '**Class signature**'
  id: totrans-3481
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.MergedResult`](#sqlalchemy.engine.MergedResult "sqlalchemy.engine.MergedResult")
    ([`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult "sqlalchemy.engine.IteratorResult"))
  id: totrans-3482
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.MergedResult`](#sqlalchemy.engine.MergedResult "sqlalchemy.engine.MergedResult")（[`sqlalchemy.engine.IteratorResult`](#sqlalchemy.engine.IteratorResult
    "sqlalchemy.engine.IteratorResult")）
- en: '[PRE633]'
  id: totrans-3483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: Represent a set of database results.
  id: totrans-3484
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一组数据库结果。
- en: 'New in version 1.4: The [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object provides a completely updated usage model and calling facade for SQLAlchemy
    Core and SQLAlchemy ORM. In Core, it forms the basis of the [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object which replaces the previous `ResultProxy`
    interface. When using the ORM, a higher level object called [`ChunkedIteratorResult`](#sqlalchemy.engine.ChunkedIteratorResult
    "sqlalchemy.engine.ChunkedIteratorResult") is normally used.'
  id: totrans-3485
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本新增：[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象提供了一个完全更新的用法模型和调用门面，用于
    SQLAlchemy 核心和 SQLAlchemy ORM。在核心中，它形成了 [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") 对象的基础，取代了以前的 `ResultProxy` 接口。在使用 ORM 时，通常会使用一个更高级的对象，称为
    [`ChunkedIteratorResult`](#sqlalchemy.engine.ChunkedIteratorResult "sqlalchemy.engine.ChunkedIteratorResult")。
- en: Note
  id: totrans-3486
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In SQLAlchemy 1.4 and above, this object is used for ORM results returned by
    [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute"),
    which can yield instances of ORM mapped objects either individually or within
    tuple-like rows. Note that the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object does not deduplicate instances or rows automatically as is the case with
    the legacy [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. For in-Python de-duplication of instances or rows, use the [`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") modifier method.
  id: totrans-3487
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 1.4 及以上版本中，此对象用于由 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 返回的 ORM 结果，该方法可以逐个返回 ORM 映射对象的实例或在类似元组的行中。请注意，[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象不会自动对实例或行进行去重，而是像旧版 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象一样。为了在 Python 中对实例或行进行去重，请使用 [`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") 修改器方法。
- en: See also
  id: totrans-3488
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Fetching Rows](../tutorial/dbapi_transactions.html#tutorial-fetching-rows)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  id: totrans-3489
  prefs: []
  type: TYPE_NORMAL
  zh: '[获取行](../tutorial/dbapi_transactions.html#tutorial-fetching-rows) - 在[SQLAlchemy
    统一教程](../tutorial/index.html)中'
- en: '**Members**'
  id: totrans-3490
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.engine.Result.all), [close()](#sqlalchemy.engine.Result.close),
    [closed](#sqlalchemy.engine.Result.closed), [columns()](#sqlalchemy.engine.Result.columns),
    [fetchall()](#sqlalchemy.engine.Result.fetchall), [fetchmany()](#sqlalchemy.engine.Result.fetchmany),
    [fetchone()](#sqlalchemy.engine.Result.fetchone), [first()](#sqlalchemy.engine.Result.first),
    [freeze()](#sqlalchemy.engine.Result.freeze), [keys()](#sqlalchemy.engine.Result.keys),
    [mappings()](#sqlalchemy.engine.Result.mappings), [merge()](#sqlalchemy.engine.Result.merge),
    [one()](#sqlalchemy.engine.Result.one), [one_or_none()](#sqlalchemy.engine.Result.one_or_none),
    [partitions()](#sqlalchemy.engine.Result.partitions), [scalar()](#sqlalchemy.engine.Result.scalar),
    [scalar_one()](#sqlalchemy.engine.Result.scalar_one), [scalar_one_or_none()](#sqlalchemy.engine.Result.scalar_one_or_none),
    [scalars()](#sqlalchemy.engine.Result.scalars), [t](#sqlalchemy.engine.Result.t),
    [tuples()](#sqlalchemy.engine.Result.tuples), [unique()](#sqlalchemy.engine.Result.unique),
    [yield_per()](#sqlalchemy.engine.Result.yield_per)'
  id: totrans-3491
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.engine.Result.all), [close()](#sqlalchemy.engine.Result.close),
    [closed](#sqlalchemy.engine.Result.closed), [columns()](#sqlalchemy.engine.Result.columns),
    [fetchall()](#sqlalchemy.engine.Result.fetchall), [fetchmany()](#sqlalchemy.engine.Result.fetchmany),
    [fetchone()](#sqlalchemy.engine.Result.fetchone), [first()](#sqlalchemy.engine.Result.first),
    [freeze()](#sqlalchemy.engine.Result.freeze), [keys()](#sqlalchemy.engine.Result.keys),
    [mappings()](#sqlalchemy.engine.Result.mappings), [merge()](#sqlalchemy.engine.Result.merge),
    [one()](#sqlalchemy.engine.Result.one), [one_or_none()](#sqlalchemy.engine.Result.one_or_none),
    [partitions()](#sqlalchemy.engine.Result.partitions), [scalar()](#sqlalchemy.engine.Result.scalar),
    [scalar_one()](#sqlalchemy.engine.Result.scalar_one), [scalar_one_or_none()](#sqlalchemy.engine.Result.scalar_one_or_none),
    [scalars()](#sqlalchemy.engine.Result.scalars), [t](#sqlalchemy.engine.Result.t),
    [tuples()](#sqlalchemy.engine.Result.tuples), [unique()](#sqlalchemy.engine.Result.unique),
    [yield_per()](#sqlalchemy.engine.Result.yield_per)'
- en: '**Class signature**'
  id: totrans-3492
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    (`sqlalchemy.engine._WithKeys`, `sqlalchemy.engine.ResultInternal`)
  id: totrans-3493
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    (`sqlalchemy.engine._WithKeys`, `sqlalchemy.engine.ResultInternal`)
- en: '[PRE634]'
  id: totrans-3494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: Return all rows in a sequence.
  id: totrans-3495
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列中的所有行。
- en: Closes the result set after invocation. Subsequent invocations will return an
    empty sequence.
  id: totrans-3496
  prefs: []
  type: TYPE_NORMAL
  zh: 调用后关闭结果集。后续调用将返回一个空序列。
- en: New in version 1.4.
  id: totrans-3497
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本新增。
- en: 'Returns:'
  id: totrans-3498
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a sequence of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects.
  id: totrans-3499
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: See also
  id: totrans-3500
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - How to stream a large result set without loading it completely in python.'
  id: totrans-3501
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流结果）](#engine-stream-results) - 如何在Python中流式传输大型结果集而不完全加载它。'
- en: '[PRE635]'
  id: totrans-3502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: close this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result").
  id: totrans-3503
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。
- en: The behavior of this method is implementation specific, and is not implemented
    by default. The method should generally end the resources in use by the result
    object and also cause any subsequent iteration or row fetching to raise [`ResourceClosedError`](exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError").
  id: totrans-3504
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的行为是特定于实现的，并且默认情况下未实现。该方法通常应结束结果对象使用的资源，并且还应导致任何后续迭代或行提取引发[`ResourceClosedError`](exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")。
- en: 'New in version 1.4.27: - `.close()` was previously not generally available
    for all [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") classes,
    instead only being available on the [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned for Core statement executions. As most
    other result objects, namely the ones used by the ORM, are proxying a [`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") in any case, this allows the underlying cursor
    result to be closed from the outside facade for the case when the ORM query is
    using the `yield_per` execution option where it does not immediately exhaust and
    autoclose the database cursor.'
  id: totrans-3505
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.27中新增：- `.close()`先前通常不适用于所有[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")类，而仅适用于为核心语句执行返回的[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。由于大多数其他结果对象，即ORM使用的对象，无论如何都是代理一个[`CursorResult`](#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")，这允许从外部门面关闭底层的游标结果，以便在ORM查询使用`yield_per`执行选项时关闭数据库游标而不立即用完和自动关闭。
- en: '[PRE636]'
  id: totrans-3506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: return `True` if this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    reports .closed
  id: totrans-3507
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")报告`.closed`，则返回`True`。
- en: New in version 1.4.43.
  id: totrans-3508
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.43中新增。
- en: '[PRE637]'
  id: totrans-3509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: Establish the columns that should be returned in each row.
  id: totrans-3510
  prefs: []
  type: TYPE_NORMAL
  zh: 确定每行应返回的列。
- en: This method may be used to limit the columns returned as well as to reorder
    them. The given list of expressions are normally a series of integers or string
    key names. They may also be appropriate [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects which correspond to a given
    statement construct.
  id: totrans-3511
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可用于限制返回的列以及重新排序它们。给定的表达式列表通常是一系列整数或字符串键名。它们也可以是适当的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，这些对象与给定的语句结构相对应。
- en: 'Changed in version 2.0: Due to a bug in 1.4, the [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method had an incorrect behavior where calling
    upon the method with just one index would cause the [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object to yield scalar values rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects. In version 2.0, this behavior has been corrected
    such that calling upon [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") with a single index will produce a [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object that continues to yield [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, which include only a single column.'
  id: totrans-3512
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本更改：由于1.4中的一个错误，[`Result.columns()`](#sqlalchemy.engine.Result.columns "sqlalchemy.engine.Result.columns")方法的行为不正确，仅使用一个索引调用该方法会导致[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象产生标量值而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。在2.0版本中，已纠正了这种行为，使得只用单个索引调用[`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns")将产生一个继续生成[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，该对象仅包含一个列。
- en: 'E.g.:'
  id: totrans-3513
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE638]'
  id: totrans-3514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: 'Example of using the column objects from the statement itself:'
  id: totrans-3515
  prefs: []
  type: TYPE_NORMAL
  zh: 使用语句本身的列对象的示例：
- en: '[PRE639]'
  id: totrans-3516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: New in version 1.4.
  id: totrans-3517
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中新增。
- en: 'Parameters:'
  id: totrans-3518
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***col_expressions** – indicates columns to be returned. Elements may be integer
    row indexes, string column names, or appropriate [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects corresponding to a select construct.'
  id: totrans-3519
  prefs: []
  type: TYPE_NORMAL
  zh: '***col_expressions** – 表示要返回的列。元素可以是整数行索引、字符串列名或与选择构造对应的适当[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。'
- en: 'Returns:'
  id: totrans-3520
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object
    with the modifications given.
  id: totrans-3521
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的修改返回此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: '[PRE640]'
  id: totrans-3522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: A synonym for the [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    method.
  id: totrans-3523
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")方法的同义词。'
- en: '[PRE641]'
  id: totrans-3524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: Fetch many rows.
  id: totrans-3525
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多行。
- en: When all rows are exhausted, returns an empty sequence.
  id: totrans-3526
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都被耗尽时，返回一个空序列。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-3527
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是为了与SQLAlchemy 1.x.x向后兼容而提供的。
- en: To fetch rows in groups, use the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method.
  id: totrans-3528
  prefs: []
  type: TYPE_NORMAL
  zh: 要按组获取行，请使用[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")方法。
- en: 'Returns:'
  id: totrans-3529
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a sequence of [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects.
  id: totrans-3530
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: See also
  id: totrans-3531
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
  id: totrans-3532
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")'
- en: '[PRE642]'
  id: totrans-3533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: Fetch one row.
  id: totrans-3534
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一行。
- en: When all rows are exhausted, returns None.
  id: totrans-3535
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都被耗尽时，返回None。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-3536
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是为了与SQLAlchemy 1.x.x向后兼容而提供的。
- en: To fetch the first row of a result only, use the [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") method. To iterate through all rows, iterate
    the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") object directly.
  id: totrans-3537
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅获取结果的第一行，请使用[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")方法。要遍历所有行，请直接遍历[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。
- en: 'Returns:'
  id: totrans-3538
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object if no filters
    are applied, or `None` if no rows remain.
  id: totrans-3539
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未应用任何过滤器，则为[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，否则为`None`。
- en: '[PRE643]'
  id: totrans-3540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: Fetch the first row or `None` if no row is present.
  id: totrans-3541
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行或如果没有行则获取`None`。
- en: Closes the result set and discards remaining rows.
  id: totrans-3542
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭结果集并丢弃剩余行。
- en: Note
  id: totrans-3543
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method, or combine [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and [`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first").
  id: totrans-3544
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回一个**行**，例如元组。要返回确切的单个标量值，即第一行的第一列，请使用[`Result.scalar()`](#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")方法，或结合[`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")和[`Result.first()`](#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")。
- en: Additionally, in contrast to the behavior of the legacy ORM [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") method, **no limit is applied** to the SQL query
    which was invoked to produce this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result");
    for a DBAPI driver that buffers results in memory before yielding rows, all rows
    will be sent to the Python process and all but the first row will be discarded.
  id: totrans-3545
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与传统ORM [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first")方法的行为相反，对生成此[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的SQL查询不应用任何限制；对于在向Python进程发送行之前在内存中缓冲结果的DBAPI驱动程序，所有行将被发送到Python进程，除了第一行之外的所有行将被丢弃。
- en: See also
  id: totrans-3546
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[ORM Query Unified with Core Select](../changelog/migration_20.html#migration-20-unify-select)'
  id: totrans-3547
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM查询与核心选择统一](../changelog/migration_20.html#migration-20-unify-select)'
- en: 'Returns:'
  id: totrans-3548
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object, or None if
    no rows remain.
  id: totrans-3549
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，如果没有行剩余则为None。
- en: See also
  id: totrans-3550
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")'
  id: totrans-3551
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar()`](#sqlalchemy.engine.Result.scalar "sqlalchemy.engine.Result.scalar")'
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-3552
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[PRE644]'
  id: totrans-3553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: Return a callable object that will produce copies of this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") when invoked.
  id: totrans-3554
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，调用时将生成此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    的副本。
- en: The callable object returned is an instance of [`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult").
  id: totrans-3555
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的可调用对象是 [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    的实例。
- en: This is used for result set caching. The method must be called on the result
    when it has been unconsumed, and calling the method will consume the result fully.
    When the [`FrozenResult`](#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")
    is retrieved from a cache, it can be called any number of times where it will
    produce a new [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object each time against its stored set of rows.
  id: totrans-3556
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于结果集缓存。当结果尚未使用时，必须调用该方法，并且调用该方法将完全消耗结果。当从缓存中检索到[`FrozenResult`](#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult")时，可以调用任意次数，它将每次针对其存储的行集生成一个新的[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。
- en: See also
  id: totrans-3557
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](../orm/session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  id: totrans-3558
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](../orm/session_events.html#do-orm-execute-re-executing) - 在 ORM 中的示例用法，实现结果集缓存。'
- en: '[PRE645]'
  id: totrans-3559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-3560
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.engine._WithKeys` *的* `sqlalchemy.engine._WithKeys.keys`
    *方法*'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3561
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代视图，该视图会产生每个 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 所表示的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-3562
  prefs: []
  type: TYPE_NORMAL
  zh: 这些键可以表示核心语句返回的列的标签，或者 orm 执行返回的 orm 类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-3563
  prefs: []
  type: TYPE_NORMAL
  zh: 该视图还可以使用 Python `in` 运算符进行键包含性测试，该运算符将测试视图中表示的字符串键，以及列对象等替代键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-3564
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：返回一个键视图对象，而不是一个普通列表。
- en: '[PRE646]'
  id: totrans-3565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: Apply a mappings filter to returned rows, returning an instance of [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult").
  id: totrans-3566
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用映射过滤器，返回[`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")的实例。
- en: When this filter is applied, fetching rows will return [`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") objects instead of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-3567
  prefs: []
  type: TYPE_NORMAL
  zh: 应用此过滤器后，获取行将返回 [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    对象，而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: New in version 1.4.
  id: totrans-3568
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增。
- en: 'Returns:'
  id: totrans-3569
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    filtering object referring to this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-3570
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    过滤对象，引用此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象。
- en: '[PRE647]'
  id: totrans-3571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: Merge this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    with other compatible result objects.
  id: totrans-3572
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 与其他兼容的结果对象合并。
- en: The object returned is an instance of [`MergedResult`](#sqlalchemy.engine.MergedResult
    "sqlalchemy.engine.MergedResult"), which will be composed of iterators from the
    given result objects.
  id: totrans-3573
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`MergedResult`](#sqlalchemy.engine.MergedResult "sqlalchemy.engine.MergedResult")
    的实例，它将由给定结果对象的迭代器组成。
- en: The new result will use the metadata from this result object. The subsequent
    result objects must be against an identical set of result / cursor metadata, otherwise
    the behavior is undefined.
  id: totrans-3574
  prefs: []
  type: TYPE_NORMAL
  zh: 新结果将使用此结果对象的元数据。随后的结果对象必须针对相同的结果/游标元数据集，否则行为是未定义的。
- en: '[PRE648]'
  id: totrans-3575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: Return exactly one row or raise an exception.
  id: totrans-3576
  prefs: []
  type: TYPE_NORMAL
  zh: 返回精确地一行，或引发异常。
- en: Raises [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound "sqlalchemy.exc.NoResultFound")
    if the result returns no rows, or [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows would be returned.
  id: totrans-3577
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果不返回任何行，则引发 [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")，如果返回多行，则引发 [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: Note
  id: totrans-3578
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") method, or combine [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one").
  id: totrans-3579
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回一个 **行**，例如元组。要返回确切的一个单个标量值，即第一行的第一列，请使用 [`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") 方法，或者结合使用 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 和 [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")。
- en: New in version 1.4.
  id: totrans-3580
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Returns:'
  id: totrans-3581
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3582
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")。
- en: 'Raises:'
  id: totrans-3583
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
  id: totrans-3584
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")，[`NoResultFound`](exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
- en: See also
  id: totrans-3585
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
  id: totrans-3586
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
- en: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
  id: totrans-3587
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
- en: '[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")'
  id: totrans-3588
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar_one()`](#sqlalchemy.engine.Result.scalar_one "sqlalchemy.engine.Result.scalar_one")'
- en: '[PRE649]'
  id: totrans-3589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: Return at most one result or raise an exception.
  id: totrans-3590
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个结果或引发异常。
- en: Returns `None` if the result has no rows. Raises [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows are returned.
  id: totrans-3591
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有行，则返回 `None`。如果返回了多行，则引发 [`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") 异常。
- en: New in version 1.4.
  id: totrans-3592
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Returns:'
  id: totrans-3593
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") or `None`
    if no row is available.
  id: totrans-3594
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 或如果没有可用行则为 `None`。
- en: 'Raises:'
  id: totrans-3595
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
  id: totrans-3596
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
- en: See also
  id: totrans-3597
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
  id: totrans-3598
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")'
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-3599
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[PRE650]'
  id: totrans-3600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: Iterate through sub-lists of rows of the size given.
  id: totrans-3601
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的子行列表。
- en: Each list will be of the size given, excluding the last list to be yielded,
    which may have a small number of rows. No empty lists will be yielded.
  id: totrans-3602
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列表将是给定大小的，除了将要生成的最后一个列表，该列表可能包含少量行。不会生成空列表。
- en: The result object is automatically closed when the iterator is fully consumed.
  id: totrans-3603
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器完全被使用时，结果对象会自动关闭。
- en: Note that the backend driver will usually buffer the entire result ahead of
    time unless the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option is used indicating
    that the driver should not pre-buffer results, if possible. Not all drivers support
    this option and the option is silently ignored for those who do not.
  id: totrans-3604
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，除非使用 [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项指示驱动程序尽量不要预先缓冲结果，否则后端驱动程序通常会提前缓冲整个结果。并非所有驱动程序都支持此选项，并且对于不支持此选项的驱动程序会悄悄地忽略该选项。
- en: When using the ORM, the [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method is typically more effective from
    a memory perspective when it is combined with use of the [yield_per execution
    option](../orm/queryguide/api.html#orm-queryguide-yield-per), which instructs
    both the DBAPI driver to use server side cursors, if available, as well as instructs
    the ORM loading internals to only build a certain amount of ORM objects from a
    result at a time before yielding them out.
  id: totrans-3605
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 ORM 时，通常与使用 [yield_per 执行选项](../orm/queryguide/api.html#orm-queryguide-yield-per)
    结合使用的 [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    方法从内存的角度来看更有效，该选项指示 DBAPI 驱动程序在可能的情况下使用服务器端游标，并且指示 ORM 加载内部一次仅构建一定数量的 ORM 对象，然后将其传递出去。
- en: New in version 1.4.
  id: totrans-3606
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Parameters:'
  id: totrans-3607
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**size** – indicate the maximum number of rows to be present in each list yielded.
    If None, makes use of the value set by the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per"), method, if it were called, or the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which is equivalent
    in this regard. If yield_per weren’t set, it makes use of the [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") default, which may be backend specific and
    not well defined.'
  id: totrans-3608
  prefs: []
  type: TYPE_NORMAL
  zh: '**size** – 指示每个列表中应包含的最大行数。如果为 None，则使用由[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法设置的值（如果已调用），或者使用与此相关的[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项。如果未设置 yield_per，则使用[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany")的默认值，该默认值可能是特定于后端的且未定义良好的。'
- en: 'Returns:'
  id: totrans-3609
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: iterator of lists
  id: totrans-3610
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的迭代器
- en: See also
  id: totrans-3611
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)'
  id: totrans-3612
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流结果）](#engine-stream-results)'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-3613
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在[ORM 查询指南](../orm/queryguide/index.html)中'
- en: '[PRE651]'
  id: totrans-3614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: Fetch the first column of the first row, and close the result set.
  id: totrans-3615
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行的第一列，并关闭结果集。
- en: Returns `None` if there are no rows to fetch.
  id: totrans-3616
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有要获取的行，则返回`None`。
- en: No validation is performed to test if additional rows remain.
  id: totrans-3617
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行验证以测试是否有额外的行。
- en: After calling this method, the object is fully closed, e.g. the [`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method will have been called.
  id: totrans-3618
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法后，对象已完全关闭，例如已调用[`CursorResult.close()`](#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close")方法。
- en: 'Returns:'
  id: totrans-3619
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a Python scalar value, or `None` if no rows remain.
  id: totrans-3620
  prefs: []
  type: TYPE_NORMAL
  zh: Python 标量值，如果没有剩余行，则返回`None`。
- en: '[PRE652]'
  id: totrans-3621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: Return exactly one scalar result or raise an exception.
  id: totrans-3622
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个标量结果或引发异常。
- en: This is equivalent to calling [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and then [`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one").
  id: totrans-3623
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于调用[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")然后调用[`Result.one()`](#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")。
- en: See also
  id: totrans-3624
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
  id: totrans-3625
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")'
- en: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
  id: totrans-3626
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
- en: '[PRE653]'
  id: totrans-3627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: Return exactly one scalar result or `None`.
  id: totrans-3628
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个标量结果或`None`。
- en: This is equivalent to calling [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") and then [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none").
  id: totrans-3629
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于调用[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")然后调用[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none")。
- en: See also
  id: totrans-3630
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
  id: totrans-3631
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")'
- en: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
  id: totrans-3632
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")'
- en: '[PRE654]'
  id: totrans-3633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: Return a [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    filtering object which will return single elements rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-3634
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将返回单个元素而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的[`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")过滤对象。
- en: 'E.g.:'
  id: totrans-3635
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE655]'
  id: totrans-3636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: When results are fetched from the [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object, the single column-row that
    would be returned by the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    is instead returned as the column’s value.
  id: totrans-3637
  prefs: []
  type: TYPE_NORMAL
  zh: 当从[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")过滤对象中获取结果时，将返回[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")将返回的单列行而不是作为列值的值。
- en: New in version 1.4.
  id: totrans-3638
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Parameters:'
  id: totrans-3639
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**index** – integer or row key indicating the column to be fetched from each
    row, defaults to `0` indicating the first column.'
  id: totrans-3640
  prefs: []
  type: TYPE_NORMAL
  zh: '**索引** – 指示要从每行提取的列的整数或行键，默认为`0`，表示第一列。'
- en: 'Returns:'
  id: totrans-3641
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    filtering object referring to this [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-3642
  prefs: []
  type: TYPE_NORMAL
  zh: 指向此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的新 [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 过滤对象。
- en: '[PRE656]'
  id: totrans-3643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-3644
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型元组”类型过滤器。
- en: The [`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") attribute
    is a synonym for calling the [`Result.tuples()`](#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") method.
  id: totrans-3645
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") 属性是调用
    [`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")
    方法的同义词。'
- en: New in version 2.0.
  id: totrans-3646
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新增功能。
- en: '[PRE657]'
  id: totrans-3647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-3648
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型元组”类型过滤器。
- en: This method returns the same [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object at runtime, however annotates as returning a [`TupleResult`](#sqlalchemy.engine.TupleResult
    "sqlalchemy.engine.TupleResult") object that will indicate to [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools that plain typed `Tuple` instances are returned rather than rows.
    This allows tuple unpacking and `__getitem__` access of [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects to by typed, for those cases where the statement
    invoked itself included typing information.
  id: totrans-3649
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在运行时返回相同的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象，但注释为返回一个 [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    对象，该对象将指示 [**PEP 484**](https://peps.python.org/pep-0484/) 类型工具，而不是行，返回纯粹的类型化
    `Tuple` 实例。这允许对 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象进行元组解包和
    `__getitem__` 访问，以便在语句本身包含类型信息的情况下进行类型化。
- en: New in version 2.0.
  id: totrans-3650
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新增功能。
- en: 'Returns:'
  id: totrans-3651
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    type at typing time.
  id: totrans-3652
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写时，[`TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    类型。
- en: See also
  id: totrans-3653
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") - shorter
    synonym'
  id: totrans-3654
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t") - 更短的同义词'
- en: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") version'
  id: totrans-3655
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 版本'
- en: '[PRE658]'
  id: totrans-3656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: Apply unique filtering to the objects returned by this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  id: totrans-3657
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")返回的对象应用唯一过滤。
- en: When this filter is applied with no arguments, the rows or objects returned
    will filtered such that each row is returned uniquely. The algorithm used to determine
    this uniqueness is by default the Python hashing identity of the whole tuple.
    In some cases a specialized per-entity hashing scheme may be used, such as when
    using the ORM, a scheme is applied which works against the primary key identity
    of returned objects.
  id: totrans-3658
  prefs: []
  type: TYPE_NORMAL
  zh: 当不带参数应用此过滤器时，返回的行或对象将被过滤，以确保每行都是唯一的。确定此唯一性的算法默认为整个元组的 Python 哈希标识。在某些情况下，可能会使用专门的每个实体哈希方案，例如在使用
    ORM 时，将应用一种针对返回对象的主键标识的方案。
- en: The unique filter is applied **after all other filters**, which means if the
    columns returned have been refined using a method such as the [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") or [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method, the uniquing is applied to **only
    the column or columns returned**. This occurs regardless of the order in which
    these methods have been called upon the [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-3659
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一过滤器在**所有其他过滤器之后**应用，这意味着如果通过方法（如 [`Result.columns()`](#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 或 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")）精细化返回的列，则唯一性仅应用于**返回的列或列**。这发生在无论这些方法被调用于
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 对象的顺序如何。
- en: The unique filter also changes the calculus used for methods like [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") and [`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). When using [`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique"), these methods will continue to yield the number
    of rows or objects requested, after uniquing has been applied. However, this necessarily
    impacts the buffering behavior of the underlying cursor or datasource, such that
    multiple underlying calls to `cursor.fetchmany()` may be necessary in order to
    accumulate enough objects in order to provide a unique collection of the requested
    size.
  id: totrans-3660
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一过滤器还改变了诸如[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")和[`Result.partitions()`](#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")等方法的计算方式。当使用[`Result.unique()`](#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")时，这些方法将在应用唯一性后继续产出请求的行或对象数量。然而，这必然会影响底层游标或数据源的缓冲行为，以至于可能需要多次调用`cursor.fetchmany()`才能累积足够的对象以提供请求大小的唯一集合。
- en: 'Parameters:'
  id: totrans-3661
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**strategy** – a callable that will be applied to rows or objects being iterated,
    which should return an object that represents the unique value of the row. A Python
    `set()` is used to store these identities. If not passed, a default uniqueness
    strategy is used which may have been assembled by the source of this [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.'
  id: totrans-3662
  prefs: []
  type: TYPE_NORMAL
  zh: '**策略** - 一个可调用对象，将应用于被迭代的行或对象，应返回代表行的唯一值的对象。Python的`set()`用于存储这些标识。如果未传递，则将使用默认的唯一性策略，该策略可能已由此[`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象的来源组装而成。'
- en: '[PRE659]'
  id: totrans-3663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-3664
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略以一次提取`num`行。
- en: This impacts the underlying behavior of the result when iterating over the result
    object, or otherwise making use of methods such as [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone
    "sqlalchemy.engine.Result.fetchone") that return one row at a time. Data from
    the underlying cursor or other data source will be buffered up to this many rows
    in memory, and the buffered collection will then be yielded out one row at a time
    or as many rows are requested. Each time the buffer clears, it will be refreshed
    to this many rows or as many rows remain if fewer remain.
  id: totrans-3665
  prefs: []
  type: TYPE_NORMAL
  zh: 当迭代结果对象或者利用诸如[`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone "sqlalchemy.engine.Result.fetchone")这样一次返回一行的方法时，这会影响结果的基本行为。来自底层游标或其他数据源的数据将在内存中缓冲多达这么多行，然后缓冲集合将一次产出一行或者根据请求产出多行。每次缓冲清空时，它将刷新到这么多行或者如果剩余行数较少，则刷新为剩余行数。
- en: The [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    method is generally used in conjunction with the [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    allow the database dialect in use to make use of a server side cursor, if the
    DBAPI supports a specific “server side cursor” mode separate from its default
    mode of operation.
  id: totrans-3666
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")方法通常与[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")执行选项一起使用，这将允许正在使用的数据库方言利用服务器端游标，如果DBAPI支持与其默认操作模式分开的特定“服务器端游标”模式。'
- en: Tip
  id: totrans-3667
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Consider using the [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option, which will
    simultaneously set [`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") to ensure the use of server
    side cursors, as well as automatically invoke the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method to establish a fixed row buffer size
    at once.
  id: totrans-3668
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options")执行选项，它将同时设置[`Connection.execution_options.stream_results`](#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")以确保使用服务器端游标，并自动调用[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法一次性建立固定的行缓冲区大小。
- en: The [`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") execution option is available
    for ORM operations, with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-oriented use described at [Fetching Large Result Sets
    with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per). The Core-only
    version which works with [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    is new as of SQLAlchemy 1.4.40.
  id: totrans-3669
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.yield_per`](#sqlalchemy.engine.Connection.execution_options.params.yield_per
    "sqlalchemy.engine.Connection.execution_options") 执行选项适用于 ORM 操作，具体使用方法在 [使用 Yield
    Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per) 中进行了描述。与仅适用于
    [`Connection`](#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection") 的
    Core 版本是 SQLAlchemy 1.4.40 的新功能。'
- en: New in version 1.4.
  id: totrans-3670
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: 'Parameters:'
  id: totrans-3671
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**num** – number of rows to fetch each time the buffer is refilled. If set
    to a value below 1, fetches all rows for the next buffer.'
  id: totrans-3672
  prefs: []
  type: TYPE_NORMAL
  zh: '**num** – 每次缓冲区重新填充时要获取的行数。如果设置为小于 1 的值，则获取下一个缓冲区的所有行。'
- en: See also
  id: totrans-3673
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-3674
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流结果）](#engine-stream-results) - 描述 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-3675
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '[PRE660]'
  id: totrans-3676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: A wrapper for a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    that returns scalar values rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    values.
  id: totrans-3677
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 的包装器，返回标量值而不是
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 值。
- en: The [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object is acquired by calling the [`Result.scalars()`](#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method.
  id: totrans-3678
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`Result.scalars()`](#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")
    方法获取 [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    对象。
- en: A special limitation of [`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    is that it has no `fetchone()` method; since the semantics of `fetchone()` are
    that the `None` value indicates no more results, this is not compatible with [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") since there is no way to distinguish between
    `None` as a row value versus `None` as an indicator. Use `next(result)` to receive
    values individually.
  id: totrans-3679
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    的一个特殊限制是它没有 `fetchone()` 方法；由于 `fetchone()` 的语义是 `None` 值表示没有更多的结果，这与 [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 不兼容，因为无法区分 `None` 是作为行值还是作为指示符。使用 `next(result)`
    逐个接收值。'
- en: '**Members**'
  id: totrans-3680
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.engine.ScalarResult.all), [close()](#sqlalchemy.engine.ScalarResult.close),
    [closed](#sqlalchemy.engine.ScalarResult.closed), [fetchall()](#sqlalchemy.engine.ScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.engine.ScalarResult.fetchmany), [first()](#sqlalchemy.engine.ScalarResult.first),
    [one()](#sqlalchemy.engine.ScalarResult.one), [one_or_none()](#sqlalchemy.engine.ScalarResult.one_or_none),
    [partitions()](#sqlalchemy.engine.ScalarResult.partitions), [unique()](#sqlalchemy.engine.ScalarResult.unique),
    [yield_per()](#sqlalchemy.engine.ScalarResult.yield_per)'
  id: totrans-3681
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.engine.ScalarResult.all), [close()](#sqlalchemy.engine.ScalarResult.close),
    [closed](#sqlalchemy.engine.ScalarResult.closed), [fetchall()](#sqlalchemy.engine.ScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.engine.ScalarResult.fetchmany), [first()](#sqlalchemy.engine.ScalarResult.first),
    [one()](#sqlalchemy.engine.ScalarResult.one), [one_or_none()](#sqlalchemy.engine.ScalarResult.one_or_none),
    [partitions()](#sqlalchemy.engine.ScalarResult.partitions), [unique()](#sqlalchemy.engine.ScalarResult.unique),
    [yield_per()](#sqlalchemy.engine.ScalarResult.yield_per)'
- en: '**Class signature**'
  id: totrans-3682
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    ([`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult"))
  id: totrans-3683
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    ([`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult"))
- en: '[PRE661]'
  id: totrans-3684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: Return all scalar values in a sequence.
  id: totrans-3685
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个序列中的所有标量值。
- en: Equivalent to [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-3686
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")，不同之处在于返回标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE662]'
  id: totrans-3687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: '*inherited from the* [`FilterResult.close()`](#sqlalchemy.engine.FilterResult.close
    "sqlalchemy.engine.FilterResult.close") *method of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-3688
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.close()`](#sqlalchemy.engine.FilterResult.close "sqlalchemy.engine.FilterResult.close")
    *方法的* [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")'
- en: Close this [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult").
  id: totrans-3689
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")。
- en: New in version 1.4.43.
  id: totrans-3690
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.43 中新增。
- en: '[PRE663]'
  id: totrans-3691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: '*inherited from the* [`FilterResult.closed`](#sqlalchemy.engine.FilterResult.closed
    "sqlalchemy.engine.FilterResult.closed") *attribute of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-3692
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.closed`](#sqlalchemy.engine.FilterResult.closed "sqlalchemy.engine.FilterResult.closed")
    *属性的* [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")'
- en: Return `True` if the underlying [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    reports closed
  id: totrans-3693
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")报告已关闭，则返回`True`。
- en: New in version 1.4.43.
  id: totrans-3694
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.43 中新增。
- en: '[PRE664]'
  id: totrans-3695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: A synonym for the [`ScalarResult.all()`](#sqlalchemy.engine.ScalarResult.all
    "sqlalchemy.engine.ScalarResult.all") method.
  id: totrans-3696
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ScalarResult.all()`](#sqlalchemy.engine.ScalarResult.all "sqlalchemy.engine.ScalarResult.all")方法同义。
- en: '[PRE665]'
  id: totrans-3697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: Fetch many objects.
  id: totrans-3698
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多个对象。
- en: Equivalent to [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-3699
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")，不同之处在于返回标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE666]'
  id: totrans-3700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: Fetch the first object or `None` if no object is present.
  id: totrans-3701
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一个对象，如果没有对象则返回`None`。
- en: Equivalent to [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-3702
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")，不同之处在于返回标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE667]'
  id: totrans-3703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: Return exactly one object or raise an exception.
  id: totrans-3704
  prefs: []
  type: TYPE_NORMAL
  zh: 返回正好一个对象，否则引发异常。
- en: Equivalent to [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-3705
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")，不同之处在于返回标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE668]'
  id: totrans-3706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: Return at most one object or raise an exception.
  id: totrans-3707
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个对象，否则引发异常。
- en: Equivalent to [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") except that scalar values, rather than
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-3708
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")，不同之处在于返回标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE669]'
  id: totrans-3709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: Iterate through sub-lists of elements of the size given.
  id: totrans-3710
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的子元素列表。
- en: Equivalent to [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    except that scalar values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-3711
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")，不同之处在于返回标量值，而不是[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE670]'
  id: totrans-3712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: Apply unique filtering to the objects returned by this [`ScalarResult`](#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult").
  id: totrans-3713
  prefs: []
  type: TYPE_NORMAL
  zh: 对由此[`ScalarResult`](#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")返回的对象应用唯一过滤。
- en: See [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    for usage details.
  id: totrans-3714
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")以获取使用详情。
- en: '[PRE671]'
  id: totrans-3715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: '*inherited from the* [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-3716
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-3717
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略，一次提取`num`行。
- en: The [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    method is a pass through to the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-3718
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    方法是对 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per "sqlalchemy.engine.Result.yield_per")
    方法的传递。请参阅该方法的文档以获取使用说明。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-3719
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.40 中的新增内容：- 添加了 [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")，以便在所有结果集实现中可用该方法。
- en: See also
  id: totrans-3720
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-3721
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](#engine-stream-results) - 描述了 [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为。'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-3722
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中。'
- en: '[PRE672]'
  id: totrans-3723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: A wrapper for a [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    that returns dictionary values rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    values.
  id: totrans-3724
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回字典值而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 值的 [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 的包装器。
- en: The [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    object is acquired by calling the [`Result.mappings()`](#sqlalchemy.engine.Result.mappings
    "sqlalchemy.engine.Result.mappings") method.
  id: totrans-3725
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`Result.mappings()`](#sqlalchemy.engine.Result.mappings "sqlalchemy.engine.Result.mappings")
    方法获取的 [`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    对象。
- en: '**Members**'
  id: totrans-3726
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.engine.MappingResult.all), [close()](#sqlalchemy.engine.MappingResult.close),
    [closed](#sqlalchemy.engine.MappingResult.closed), [columns()](#sqlalchemy.engine.MappingResult.columns),
    [fetchall()](#sqlalchemy.engine.MappingResult.fetchall), [fetchmany()](#sqlalchemy.engine.MappingResult.fetchmany),
    [fetchone()](#sqlalchemy.engine.MappingResult.fetchone), [first()](#sqlalchemy.engine.MappingResult.first),
    [keys()](#sqlalchemy.engine.MappingResult.keys), [one()](#sqlalchemy.engine.MappingResult.one),
    [one_or_none()](#sqlalchemy.engine.MappingResult.one_or_none), [partitions()](#sqlalchemy.engine.MappingResult.partitions),
    [unique()](#sqlalchemy.engine.MappingResult.unique), [yield_per()](#sqlalchemy.engine.MappingResult.yield_per)'
  id: totrans-3727
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.engine.MappingResult.all), [close()](#sqlalchemy.engine.MappingResult.close),
    [closed](#sqlalchemy.engine.MappingResult.closed), [columns()](#sqlalchemy.engine.MappingResult.columns),
    [fetchall()](#sqlalchemy.engine.MappingResult.fetchall), [fetchmany()](#sqlalchemy.engine.MappingResult.fetchmany),
    [fetchone()](#sqlalchemy.engine.MappingResult.fetchone), [first()](#sqlalchemy.engine.MappingResult.first),
    [keys()](#sqlalchemy.engine.MappingResult.keys), [one()](#sqlalchemy.engine.MappingResult.one),
    [one_or_none()](#sqlalchemy.engine.MappingResult.one_or_none), [partitions()](#sqlalchemy.engine.MappingResult.partitions),
    [unique()](#sqlalchemy.engine.MappingResult.unique), [yield_per()](#sqlalchemy.engine.MappingResult.yield_per)'
- en: '**Class signature**'
  id: totrans-3728
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    (`sqlalchemy.engine._WithKeys`, [`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult"))
  id: totrans-3729
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")
    (`sqlalchemy.engine._WithKeys`, [`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult"))
- en: '[PRE673]'
  id: totrans-3730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: Return all scalar values in a sequence.
  id: totrans-3731
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列中的所有标量值。
- en: Equivalent to [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-3732
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`Result.all()`](#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    等效，只是返回的是 [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    值，而不是 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 对象。
- en: '[PRE674]'
  id: totrans-3733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: '*inherited from the* [`FilterResult.close()`](#sqlalchemy.engine.FilterResult.close
    "sqlalchemy.engine.FilterResult.close") *method of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-3734
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.close()`](#sqlalchemy.engine.FilterResult.close "sqlalchemy.engine.FilterResult.close")
    *方法的* [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")'
- en: Close this [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult").
  id: totrans-3735
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")。
- en: New in version 1.4.43.
  id: totrans-3736
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.43 中的新增内容。
- en: '[PRE675]'
  id: totrans-3737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: '*inherited from the* [`FilterResult.closed`](#sqlalchemy.engine.FilterResult.closed
    "sqlalchemy.engine.FilterResult.closed") *attribute of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-3738
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.closed`](#sqlalchemy.engine.FilterResult.closed "sqlalchemy.engine.FilterResult.closed")
    *属性的* [`FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult")'
- en: Return `True` if the underlying [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    reports closed
  id: totrans-3739
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层[`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")报告已关闭，则返回
    `True`。
- en: New in version 1.4.43.
  id: totrans-3740
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.43 中新增。
- en: '[PRE676]'
  id: totrans-3741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: Establish the columns that should be returned in each row.
  id: totrans-3742
  prefs: []
  type: TYPE_NORMAL
  zh: 确定每行应返回的列。
- en: '[PRE677]'
  id: totrans-3743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: A synonym for the [`MappingResult.all()`](#sqlalchemy.engine.MappingResult.all
    "sqlalchemy.engine.MappingResult.all") method.
  id: totrans-3744
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MappingResult.all()`](#sqlalchemy.engine.MappingResult.all "sqlalchemy.engine.MappingResult.all")
    方法的同义词。'
- en: '[PRE678]'
  id: totrans-3745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: Fetch many objects.
  id: totrans-3746
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多个对象。
- en: Equivalent to [`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-3747
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.fetchmany()`](#sqlalchemy.engine.Result.fetchmany "sqlalchemy.engine.Result.fetchmany")，但返回的是[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE679]'
  id: totrans-3748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: Fetch one object.
  id: totrans-3749
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一个对象。
- en: Equivalent to [`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone "sqlalchemy.engine.Result.fetchone")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-3750
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.fetchone()`](#sqlalchemy.engine.Result.fetchone "sqlalchemy.engine.Result.fetchone")，但返回的是[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE680]'
  id: totrans-3751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: Fetch the first object or `None` if no object is present.
  id: totrans-3752
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一个对象或如果不存在对象则返回 `None`。
- en: Equivalent to [`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-3753
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.first()`](#sqlalchemy.engine.Result.first "sqlalchemy.engine.Result.first")，但返回的是[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE681]'
  id: totrans-3754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-3755
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.engine._WithKeys.keys` *方法的* `sqlalchemy.engine._WithKeys`'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3756
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代视图，该视图产生每个[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")将表示的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-3757
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以表示核心语句返回的列的标签，也可以表示 orm 执行返回的 orm 类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-3758
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图也可以使用 Python 的 `in` 运算符进行键包含性测试，这将同时测试视图中表示的字符串键以及列对象等备用键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-3759
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的变化：返回键视图对象而不是普通列表。
- en: '[PRE682]'
  id: totrans-3760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: Return exactly one object or raise an exception.
  id: totrans-3761
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象或引发异常。
- en: Equivalent to [`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-3762
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.one()`](#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")，但返回的是[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE683]'
  id: totrans-3763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: Return at most one object or raise an exception.
  id: totrans-3764
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个对象或引发异常。
- en: Equivalent to [`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") except that [`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-3765
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.one_or_none()`](#sqlalchemy.engine.Result.one_or_none "sqlalchemy.engine.Result.one_or_none")，但返回的是[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE684]'
  id: totrans-3766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: Iterate through sub-lists of elements of the size given.
  id: totrans-3767
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的元素子列表。
- en: Equivalent to [`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")
    except that [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    values, rather than [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") objects,
    are returned.
  id: totrans-3768
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Result.partitions()`](#sqlalchemy.engine.Result.partitions "sqlalchemy.engine.Result.partitions")，但返回的是[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象。
- en: '[PRE685]'
  id: totrans-3769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: Apply unique filtering to the objects returned by this [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult").
  id: totrans-3770
  prefs: []
  type: TYPE_NORMAL
  zh: 对由此[`MappingResult`](#sqlalchemy.engine.MappingResult "sqlalchemy.engine.MappingResult")返回的对象应用唯一过滤。
- en: See [`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")
    for usage details.
  id: totrans-3771
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用详细信息，请参阅[`Result.unique()`](#sqlalchemy.engine.Result.unique "sqlalchemy.engine.Result.unique")。
- en: '[PRE686]'
  id: totrans-3772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: '*inherited from the* [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-3773
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-3774
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略以一次提取`num`行。
- en: The [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")
    method is a pass through to the [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-3775
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per "sqlalchemy.engine.FilterResult.yield_per")方法是对[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法的传递。请参阅该方法的文档以获取使用说明。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-3776
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.40中新增：- 添加了[`FilterResult.yield_per()`](#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")，使得该方法在所有结果集实现中都可用
- en: See also
  id: totrans-3777
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-3778
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](#engine-stream-results) - 描述了[`Result.yield_per()`](#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../orm/queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-3779
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用每次产出大型结果集](../orm/queryguide/api.html#orm-queryguide-yield-per) - 在[ORM查询指南](../orm/queryguide/index.html)中'
- en: '[PRE687]'
  id: totrans-3780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: Represent a single result row.
  id: totrans-3781
  prefs: []
  type: TYPE_NORMAL
  zh: 表示单个结果行。
- en: The [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object represents
    a row of a database result. It is typically associated in the 1.x series of SQLAlchemy
    with the [`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    object, however is also used by the ORM for tuple-like results as of SQLAlchemy
    1.4.
  id: totrans-3782
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象表示数据库结果的一行。在SQLAlchemy
    1.x系列中，它通常与[`CursorResult`](#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")对象相关联，但自SQLAlchemy
    1.4以来，也被ORM用于类似元组的结果。'
- en: The [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object seeks to
    act as much like a Python named tuple as possible. For mapping (i.e. dictionary)
    behavior on a row, such as testing for containment of keys, refer to the [`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") attribute.
  id: totrans-3783
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象尽可能地类似于Python命名元组。有关在行上进行映射（即字典）行为的信息，例如测试是否包含键，请参阅[`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping")属性。'
- en: See also
  id: totrans-3784
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - includes examples of selecting rows from SELECT statements.'
  id: totrans-3785
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SELECT语句](../tutorial/data_select.html#tutorial-selecting-data) - 包含从SELECT语句中选择行的示例。'
- en: 'Changed in version 1.4: Renamed `RowProxy` to [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row"). [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    is no longer a “proxy” object in that it contains the final form of data within
    it, and now acts mostly like a named tuple. Mapping-like functionality is moved
    to the [`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")
    attribute. See [RowProxy is no longer a “proxy”; is now called Row and behaves
    like an enhanced named tuple](../changelog/migration_14.html#change-4710-core)
    for background on this change.'
  id: totrans-3786
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：将 `RowProxy` 重命名为 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")。[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 不再是“代理”对象，它包含其中的最终数据形式，并且现在主要像一个命名元组。类似映射功能移至 [`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") 属性。有关此更改的背景，请参见 [RowProxy is no longer a “proxy”;
    is now called Row and behaves like an enhanced named tuple](../changelog/migration_14.html#change-4710-core)。
- en: '**Members**'
  id: totrans-3787
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[_asdict()](#sqlalchemy.engine.Row._asdict), [_fields](#sqlalchemy.engine.Row._fields),
    [_mapping](#sqlalchemy.engine.Row._mapping), [_t](#sqlalchemy.engine.Row._t),
    [_tuple()](#sqlalchemy.engine.Row._tuple), [count](#sqlalchemy.engine.Row.count),
    [index](#sqlalchemy.engine.Row.index), [t](#sqlalchemy.engine.Row.t), [tuple()](#sqlalchemy.engine.Row.tuple)'
  id: totrans-3788
  prefs: []
  type: TYPE_NORMAL
  zh: '[_asdict()](#sqlalchemy.engine.Row._asdict), [_fields](#sqlalchemy.engine.Row._fields),
    [_mapping](#sqlalchemy.engine.Row._mapping), [_t](#sqlalchemy.engine.Row._t),
    [_tuple()](#sqlalchemy.engine.Row._tuple), [count](#sqlalchemy.engine.Row.count),
    [index](#sqlalchemy.engine.Row.index), [t](#sqlalchemy.engine.Row.t), [tuple()](#sqlalchemy.engine.Row.tuple)'
- en: '**Class signature**'
  id: totrans-3789
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    (`sqlalchemy.engine._py_row.BaseRow`, `collections.abc.Sequence`, `typing.Generic`)
  id: totrans-3790
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    (`sqlalchemy.engine._py_row.BaseRow`, `collections.abc.Sequence`, `typing.Generic`)
    的同义词。
- en: '[PRE688]'
  id: totrans-3791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: Return a new dict which maps field names to their corresponding values.
  id: totrans-3792
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将字段名映射到其对应值的新字典。
- en: This method is analogous to the Python named tuple `._asdict()` method, and
    works by applying the `dict()` constructor to the [`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") attribute.
  id: totrans-3793
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法类似于 Python 命名元组的 `._asdict()` 方法，通过将 `dict()` 构造函数应用于 [`Row._mapping`](#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") 属性来实现。
- en: New in version 1.4.
  id: totrans-3794
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: See also
  id: totrans-3795
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")'
  id: totrans-3796
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")'
- en: '[PRE689]'
  id: totrans-3797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: Return a tuple of string keys as represented by this [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").
  id: totrans-3798
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 表示的字符串键的元组。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-3799
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以表示核心语句返回的列的标签或 orm 执行返回的 orm 类的名称。
- en: This attribute is analogous to the Python named tuple `._fields` attribute.
  id: totrans-3800
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性类似于 Python 命名元组的 `._fields` 属性。
- en: New in version 1.4.
  id: totrans-3801
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: See also
  id: totrans-3802
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")'
  id: totrans-3803
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")'
- en: '[PRE690]'
  id: totrans-3804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: Return a [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    for this [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3805
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 返回一个 [`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")。
- en: This object provides a consistent Python mapping (i.e. dictionary) interface
    for the data contained within the row. The [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    by itself behaves like a named tuple.
  id: totrans-3806
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象为行中包含的数据提供一致的 Python 映射（即字典）接口。[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    本身的行为类似于命名元组。
- en: See also
  id: totrans-3807
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Row._fields`](#sqlalchemy.engine.Row._fields "sqlalchemy.engine.Row._fields")'
  id: totrans-3808
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._fields`](#sqlalchemy.engine.Row._fields "sqlalchemy.engine.Row._fields")'
- en: New in version 1.4.
  id: totrans-3809
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE691]'
  id: totrans-3810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: A synonym for [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple").
  id: totrans-3811
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")
    的同义词。'
- en: 'New in version 2.0.19: - The [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    attribute supersedes the previous [`Row.t`](#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    attribute, which is now underscored to avoid name conflicts with column names
    in the same way as other named-tuple methods on [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").'
  id: totrans-3812
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.19 中新增：- [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    属性取代了以前的 [`Row.t`](#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t") 属性，现在加下划线以避免与列名发生命名冲突，类似于
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 上的其他命名元组方法��
- en: See also
  id: totrans-3813
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t")'
  id: totrans-3814
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.t`](#sqlalchemy.engine.Result.t "sqlalchemy.engine.Result.t")'
- en: '[PRE692]'
  id: totrans-3815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: Return a ‘tuple’ form of this [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3816
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")的‘tuple’形式。
- en: At runtime, this method returns “self”; the [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object is already a named tuple. However, at the typing level, if this [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") is typed, the “tuple” return type will be a [**PEP 484**](https://peps.python.org/pep-0484/)
    `Tuple` datatype that contains typing information about individual elements, supporting
    typed unpacking and attribute access.
  id: totrans-3817
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，此方法返回“self”；[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象已经是一个命名元组。但是，在类型级别，如果此[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")被类型化，那么“tuple”返回类型将是一个[**PEP 484**](https://peps.python.org/pep-0484/)
    `Tuple`数据类型，其中包含有关各个元素的类型信息，支持类型解包和属性访问。
- en: 'New in version 2.0.19: - The [`Row._tuple()`](#sqlalchemy.engine.Row._tuple
    "sqlalchemy.engine.Row._tuple") method supersedes the previous [`Row.tuple()`](#sqlalchemy.engine.Row.tuple
    "sqlalchemy.engine.Row.tuple") method, which is now underscored to avoid name
    conflicts with column names in the same way as other named-tuple methods on [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").'
  id: totrans-3818
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.19中：- [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")
    方法取代了以前的[`Row.tuple()`](#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    方法，现在已添加下划线以避免与列名冲突，与[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")上的其他命名元组方法一样。
- en: See also
  id: totrans-3819
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - shorthand
    attribute notation'
  id: totrans-3820
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t") - 简写属性表示法'
- en: '[`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")'
  id: totrans-3821
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.tuples()`](#sqlalchemy.engine.Result.tuples "sqlalchemy.engine.Result.tuples")'
- en: '[PRE693]'
  id: totrans-3822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: '[PRE694]'
  id: totrans-3823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: '[PRE695]'
  id: totrans-3824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: A synonym for [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple").
  id: totrans-3825
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")的同义词。'
- en: 'Deprecated since version 2.0.19: The [`Row.t`](#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    attribute is deprecated in favor of [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t");
    all [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") methods and library-level
    attributes are intended to be underscored to avoid name conflicts. Please use
    [`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t").'
  id: totrans-3826
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0.19起已弃用：[`Row.t`](#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    属性已弃用，推荐使用[`Row._t`](#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")；所有[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 方法和库级属性都应以下划线开头，以避免名称冲突。请使用[`Row._t`](#sqlalchemy.engine.Row._t
    "sqlalchemy.engine.Row._t")。
- en: New in version 2.0.
  id: totrans-3827
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中新增。
- en: '[PRE696]'
  id: totrans-3828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: Return a ‘tuple’ form of this [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3829
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")的‘tuple’形式。
- en: 'Deprecated since version 2.0.19: The [`Row.tuple()`](#sqlalchemy.engine.Row.tuple
    "sqlalchemy.engine.Row.tuple") method is deprecated in favor of [`Row._tuple()`](#sqlalchemy.engine.Row._tuple
    "sqlalchemy.engine.Row._tuple"); all [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    methods and library-level attributes are intended to be underscored to avoid name
    conflicts. Please use [`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple").'
  id: totrans-3830
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0.19起已弃用：[`Row.tuple()`](#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    方法已弃用，推荐使用[`Row._tuple()`](#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")；所有[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 方法和库级属性都应以下划线开头，以避免名称冲突。请使用[`Row._tuple()`](#sqlalchemy.engine.Row._tuple
    "sqlalchemy.engine.Row._tuple")。
- en: New in version 2.0.
  id: totrans-3831
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中新增。
- en: '[PRE697]'
  id: totrans-3832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: A `Mapping` that maps column names and objects to [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  id: totrans-3833
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将列名和对象映射到[`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row")值的`Mapping`。
- en: The [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    is available from a [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") via
    the [`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")
    attribute, as well as from the iterable interface provided by the [`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") object returned by the [`Result.mappings()`](#sqlalchemy.engine.Result.mappings
    "sqlalchemy.engine.Result.mappings") method.
  id: totrans-3834
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[`Result.mappings()`](#sqlalchemy.engine.Result.mappings "sqlalchemy.engine.Result.mappings")方法返回的[`MappingResult`](#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")对象提供的可迭代接口，可以从[`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")通过[`Row._mapping`](#sqlalchemy.engine.Row._mapping "sqlalchemy.engine.Row._mapping")属性获得[`RowMapping`](#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")。
- en: '[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    supplies Python mapping (i.e. dictionary) access to the contents of the row. This
    includes support for testing of containment of specific keys (string column names
    or objects), as well as iteration of keys, values, and items:'
  id: totrans-3835
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    提供 Python 映射（即字典）访问行内容。 这包括支持测试特定键（字符串列名或对象）的包含性，以及键、值和项的迭代：'
- en: '[PRE698]'
  id: totrans-3836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: 'New in version 1.4: The [`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    object replaces the mapping-like access previously provided by a database result
    row, which now seeks to behave mostly like a named tuple.'
  id: totrans-3837
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中：[`RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    对象取代了以前由数据库结果行提供的类似映射的访问，现在它主要行为类似于命名元组。
- en: '**Members**'
  id: totrans-3838
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[items()](#sqlalchemy.engine.RowMapping.items), [keys()](#sqlalchemy.engine.RowMapping.keys),
    [values()](#sqlalchemy.engine.RowMapping.values)'
  id: totrans-3839
  prefs: []
  type: TYPE_NORMAL
  zh: '[items()](#sqlalchemy.engine.RowMapping.items), [keys()](#sqlalchemy.engine.RowMapping.keys),
    [values()](#sqlalchemy.engine.RowMapping.values)'
- en: '**Class signature**'
  id: totrans-3840
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    (`sqlalchemy.engine._py_row.BaseRow`, `collections.abc.Mapping`, `typing.Generic`)
  id: totrans-3841
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.RowMapping`](#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    (`sqlalchemy.engine._py_row.BaseRow`, `collections.abc.Mapping`, `typing.Generic`)
- en: '[PRE699]'
  id: totrans-3842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: Return a view of key/value tuples for the elements in the underlying [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").
  id: totrans-3843
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 中元素的键/值元组的视图。
- en: '[PRE700]'
  id: totrans-3844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: Return a view of ‘keys’ for string column names represented by the underlying
    [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-3845
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 中表示的字符串列名的‘keys’的视图。
- en: '[PRE701]'
  id: totrans-3846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE701]'
- en: Return a view of values for the values represented in the underlying [`Row`](#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row").
  id: totrans-3847
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 中表示的值的视图。
- en: '[PRE702]'
  id: totrans-3848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: A [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") that’s typed
    as returning plain Python tuples instead of rows.
  id: totrans-3849
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将以普通 Python 元组形式返回而不是行的 [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result")。
- en: Since [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") acts like a tuple
    in every way already, this class is a typing only class, regular [`Result`](#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") is still used at runtime.
  id: totrans-3850
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 [`Row`](#sqlalchemy.engine.Row "sqlalchemy.engine.Row") 在任何方面都像一个元组，因此这个类仅用于类型注释，正常的
    [`Result`](#sqlalchemy.engine.Result "sqlalchemy.engine.Result") 在运行时仍然被使用。
- en: '**Class signature**'
  id: totrans-3851
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    ([`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult"),
    `sqlalchemy.util.langhelpers.TypingOnly`)
  id: totrans-3852
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.TupleResult`](#sqlalchemy.engine.TupleResult "sqlalchemy.engine.TupleResult")
    ([`sqlalchemy.engine.FilterResult`](#sqlalchemy.engine.FilterResult "sqlalchemy.engine.FilterResult"),
    `sqlalchemy.util.langhelpers.TypingOnly`)
