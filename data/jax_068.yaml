- en: custom_vjp and nondiff_argnums update guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义_vjp和nondiff_argnums更新指南
- en: 原文：[`jax.readthedocs.io/en/latest/jep/4008-custom-vjp-update.html`](https://jax.readthedocs.io/en/latest/jep/4008-custom-vjp-update.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jep/4008-custom-vjp-update.html`](https://jax.readthedocs.io/en/latest/jep/4008-custom-vjp-update.html)
- en: '*mattjj@* *Oct 14 2020*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*mattjj@* *Oct 14 2020*'
- en: This doc assumes familiarity with `jax.custom_vjp`, as described in the [Custom
    derivative rules for JAX-transformable Python functions](https://jax.readthedocs.io/en/latest/notebooks/Custom_derivative_rules_for_Python_code.html)
    notebook.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文假设您熟悉 `jax.custom_vjp`，如[用于JAX可转换Python函数的自定义导数规则](https://jax.readthedocs.io/en/latest/notebooks/Custom_derivative_rules_for_Python_code.html)笔记本中所述。
- en: What to update
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新内容
- en: 'After JAX [PR #4008](https://github.com/google/jax/pull/4008), the arguments
    passed into a `custom_vjp` function’s `nondiff_argnums` can’t be `Tracer`s (or
    containers of `Tracer`s), which basically means to allow for arbitrarily-transformable
    code `nondiff_argnums` shouldn’t be used for array-valued arguments. Instead,
    `nondiff_argnums` should be used only for non-array values, like Python callables
    or shape tuples or strings.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '在JAX的[PR #4008](https://github.com/google/jax/pull/4008)之后，传递给 `custom_vjp`
    函数的 `nondiff_argnums` 的参数不能是 `Tracer`s（或 `Tracer` 的容器），这基本上意味着为了允许任意可转换的代码，`nondiff_argnums`
    不应该用于数组值的参数。相反，`nondiff_argnums` 应该仅用于非数组值，如Python可调用对象或形状元组或字符串。'
- en: Wherever we used to use `nondiff_argnums` for array values, we should just pass
    those as regular arguments. In the `bwd` rule, we need to produce values for them,
    but we can just produce `None` values to indicate there’s no corresponding gradient
    value.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们以前用 `nondiff_argnums` 用于数组值的地方，我们应该将它们作为常规参数传递。在 `bwd` 规则中，我们需要为它们生成值，但我们可以只生成
    `None` 值来指示没有相应的梯度值。
- en: For example, here’s the **old** way to write `clip_gradient`, which won’t work
    when `hi` and/or `lo` are `Tracer`s from some JAX transformation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是编写 `clip_gradient` 的**旧**方法，当 `hi` 和/或 `lo` 是来自某些JAX转换的 `Tracer` 时将无法工作。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here’s the **new**, awesome way, which supports arbitrary transformations:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是**新**的，令人惊叹的方法，支持任意转换：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you use the old way instead of the new way, you’ll get a loud error in any
    case where something might go wrong (namely when there’s a `Tracer` passed into
    a `nondiff_argnums` argument).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用旧方式而不是新方式，在可能出错的任何情况下（即将 `Tracer` 传递给 `nondiff_argnums` 参数时），您将会收到一个大声的错误。
- en: 'Here’s a case where we actually need `nondiff_argnums` with `custom_vjp`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我们实际上需要使用 `custom_vjp` 的情况，与 `nondiff_argnums`：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Explanation
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释
- en: Passing `Tracer`s into `nondiff_argnums` arguments was always buggy. While there
    were some cases that worked correctly, others would lead to complex and confusing
    error messages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `Tracer`s 传递到 `nondiff_argnums` 参数中一直是有bug的。虽然有些情况下工作正常，但其他情况会导致复杂和令人困惑的错误消息。
- en: The essence of the bug was that `nondiff_argnums` was implemented in a way that
    acted very much like lexical closure. But lexical closure over `Tracer`s wasn’t
    at the time intended to work with `custom_jvp`/`custom_vjp`. Implementing `nondiff_argnums`
    that way was a mistake!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个bug的本质在于 `nondiff_argnums` 的实现方式很像词法闭包。但是那时候，对于`Tracer`s的词法闭包并不打算与`custom_jvp`/`custom_vjp`一起工作。以这种方式实现
    `nondiff_argnums` 是一个错误！
- en: '**[PR #4008](https://github.com/google/jax/pull/4008) fixes all lexical closure
    issues with `custom_jvp` and `custom_vjp`.** Woohoo! That is, now `custom_jvp`
    and `custom_vjp` functions and rules can close over `Tracer`s to our hearts’ content.
    For all non-autodiff transformations, things will Just Work. For autodiff transformations,
    we’ll get a clear error message about why we can’t differentiate with respect
    to values over which a `custom_jvp` or `custom_vjp` closes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**[PR #4008](https://github.com/google/jax/pull/4008) 修复了所有与 `custom_jvp` 和
    `custom_vjp` 相关的词法闭包问题。** 哇哦！也就是说，现在 `custom_jvp` 和 `custom_vjp` 函数和规则可以对 `Tracer`s
    进行词法闭包了。对于所有非自动微分转换，一切都会顺利进行。对于自动微分转换，我们将得到一个清晰的错误消息，说明为什么我们不能针对 `custom_jvp`
    或 `custom_vjp` 关闭的值进行微分：'
- en: Detected differentiation of a custom_jvp function with respect to a closed-over
    value. That isn’t supported because the custom JVP rule only specifies how to
    differentiate the custom_jvp function with respect to explicit input parameters.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 检测到对于一个闭包值的自定义_jvp函数的微分。这不被支持，因为自定义JVP规则仅指定如何针对显式输入参数微分自定义_jvp函数。
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Try passing the closed-over value into the custom_jvp function as an argument,
    and adapting the custom_jvp rule.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尝试将闭包值传递给 `custom_jvp` 函数作为参数，并调整 `custom_jvp` 规则。
- en: 'In tightening up and robustifying `custom_jvp` and `custom_vjp` in this way,
    we found that allowing `custom_vjp` to accept `Tracer`s in its `nondiff_argnums`
    would take a significant amount of bookkeeping: we’d need to rewrite the user’s
    `fwd` function to return the values as residuals, and rewrite the user’s `bwd`
    function to accept them as normal residuals (rather than accepting them as special
    leading arguments, as happens with `nondiff_argnums`). This seems maybe manageable,
    until you think through how we have to handle arbitrary pytrees! Moreover, that
    complexity isn’t necessary: if user code treats array-like non-differentiable
    arguments just like regular arguments and residuals, everything already works.
    (Before [#4039](https://github.com/google/jax/pull/4039) JAX might’ve complained
    about involving integer-valued inputs and outputs in autodiff, but after [#4039](https://github.com/google/jax/pull/4039)
    those will just work!)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式加强和健壮`custom_jvp`和`custom_vjp`时，我们发现允许`custom_vjp`在其`nondiff_argnums`中接受`Tracer`将需要大量的簿记工作：我们需要重写用户的`fwd`函数以返回这些值作为残差，并重写用户的`bwd`函数以接受它们作为普通残差（而不是像在`nondiff_argnums`中那样接受它们作为特殊的前导参数）。这似乎可能是可管理的，直到你考虑我们如何处理任意的pytrees！此外，这种复杂性并非必要：如果用户代码将类似数组的不可区分参数视为常规参数和残差处理，一切都已经可以正常工作。（在
    [#4039](https://github.com/google/jax/pull/4039) 之前，JAX可能会抱怨涉及整数值输入和输出的自动微分，但在
    [#4039](https://github.com/google/jax/pull/4039) 之后，这些问题将会解决！）
- en: Unlike `custom_vjp`, it was easy to make `custom_jvp` work with `nondiff_argnums`
    arguments that were `Tracer`s. So these updates only need to happen with `custom_vjp`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与`custom_vjp`不同，将`custom_jvp`与`nondiff_argnums`参数（即`Tracer`）一起使用是很容易的。因此，这些更新只需要在`custom_vjp`中进行。
