- en: Mapper Configuration with Declarative
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明式的 Mapper 配置
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/declarative_config.html](https://docs.sqlalchemy.org/en/20/orm/declarative_config.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/declarative_config.html](https://docs.sqlalchemy.org/en/20/orm/declarative_config.html)
- en: The section [Mapped Class Essential Components](mapping_styles.html#orm-mapper-configuration-overview)
    discusses the general configurational elements of a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") construct, which is the structure that defines how a
    particular user defined class is mapped to a database table or other SQL construct.
    The following sections describe specific details about how the declarative system
    goes about constructing the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[映射类基本组件](mapping_styles.html#orm-mapper-configuration-overview)一节讨论了[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")构造的一般配置元素，它是定义特定用户定义类如何映射到数据库表或其他 SQL 构造的结构。以下各节描述了关于声明式系统如何构建
    [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") 的具体细节。'
- en: '## Defining Mapped Properties with Declarative'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用声明式定义映射属性'
- en: The examples given at [Table Configuration with Declarative](declarative_tables.html)
    illustrate mappings against table-bound columns, using the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct. There are several other varieties of
    ORM mapped constructs that may be configured besides table-bound columns, the
    most common being the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct. Other kinds of properties include SQL
    expressions that are defined using the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") construct and multiple-column mappings using
    the [`composite()`](composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    construct.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明式进行表配置](declarative_tables.html) 中给出的示例说明了针对表绑定列的映射，使用了 [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造。除了表绑定列之外，还有几种其他类型的 ORM 映射构造可以配置，最常见的是 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造。其他类型的属性包括使用 [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 构造定义的 SQL 表达式，以及使用 [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") 构造进行多列映射。'
- en: While an [imperative mapping](mapping_styles.html#orm-imperative-mapping) makes
    use of the [properties](mapping_styles.html#orm-mapping-properties) dictionary
    to establish all the mapped class attributes, in the declarative mapping, these
    properties are all specified inline with the class definition, which in the case
    of a declarative table mapping are inline with the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that will be used to generate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[命令式映射](mapping_styles.html#orm-imperative-mapping)使用 [properties](mapping_styles.html#orm-mapping-properties)
    字典来建立所有映射类属性，但在声明式映射中，这些属性都在类定义中内联指定，在声明性表映射的情况下，这些属性都与将用于生成 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象内联。
- en: 'Working with the example mapping of `User` and `Address`, we may illustrate
    a declarative table mapping that includes not just [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects but also relationships and SQL expressions:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例映射的 `User` 和 `Address` 上工作时，我们可以演示一个声明性表映射，其中不仅包括 [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 对象，还包括关系和 SQL 表达式：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above declarative table mapping features two tables, each with a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") referring to the other, as well as a simple SQL
    expression mapped by [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), and an additional [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") that indicates loading should be on a “deferred”
    basis as defined by the [`mapped_column.deferred`](mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") keyword. More documentation on these particular
    concepts may be found at [Basic Relationship Patterns](basic_relationships.html#relationship-patterns),
    [Using column_property](mapped_sql_expr.html#mapper-column-property-sql-expressions),
    and [Limiting which Columns Load with Column Deferral](queryguide/columns.html#orm-queryguide-column-deferral).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 上述声明式表映射具有两个表，每个表都有一个相互引用的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")，以及一个简单的 SQL 表达式由[`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")映射，还有一个额外的[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")，它指示加载应根据[`mapped_column.deferred`](mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") 关键字的定义进行“延迟”。有关这些特定概念的更多文档可以在[基本关系模式](basic_relationships.html#relationship-patterns)、[使用
    column_property](mapped_sql_expr.html#mapper-column-property-sql-expressions)和[限制哪些列使用列延迟加载](queryguide/columns.html#orm-queryguide-column-deferral)中找到。
- en: 'Properties may be specified with a declarative mapping as above using “hybrid
    table” style as well; the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are directly part of a table move into
    the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    definition but everything else, including composed SQL expressions, would still
    be inline with the class definition. Constructs that need to refer to a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") directly would reference it in terms of the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object. To illustrate the above mapping using hybrid
    table style:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 属性可以使用上述的声明式映射以“混合表”风格指定；直接属于表的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象移到[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 定义中，但包括组成的 SQL 表达式在内的其他所有内容仍将与类定义内联。需要直接引用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的构造将使用[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象来引用它。使用混合表风格进行上述映射的示例如下：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Things to note above:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以上需要注意的事项：
- en: The address [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    contains a column called `address_statistics`, however we re-map this column under
    the same attribute name to be under the control of a [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") construct.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    包含一个名为 `address_statistics` 的列，然而我们将这一列重新映射到同一属性名称下，以便由[`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") 构造进行控制。
- en: With both declararative table and hybrid table mappings, when we define a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") construct, we always name the target table using
    the **table name**, and not the mapped class name.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在声明式表和混合表映射中，当我们定义一个[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 构造时，我们总是使用**表名称**而不是映射的类名称来命名目标表。
- en: 'When we define [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs, as these constructs create a linkage
    between two mapped classes where one necessarily is defined before the other,
    we can refer to the remote class using its string name. This functionality also
    extends into the area of other arguments specified on the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") such as the “primary join” and “order by” arguments.
    See the section [Late-Evaluation of Relationship Arguments](basic_relationships.html#orm-declarative-relationship-eval)
    for details on this.  ## Mapper Configuration Options with Declarative'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们定义[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")构造时，由于这些构造在两个映射类之间创建了一个链接，其中一个必然在另一个之前被定义，我们可以使用其字符串名称引用远程类。此功能还扩展到在[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上指定的其他参数，如“primary join”和“order by”参数。有关详细信息，请参阅[延迟评估关系参数](basic_relationships.html#orm-declarative-relationship-eval)章节。##
    使用声明配置选项的映射器
- en: With all mapping forms, the mapping of the class is configured through parameters
    that become part of the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object. The function which ultimately receives these arguments is the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") function, and are delivered to it from one of the front-facing
    mapping functions defined on the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有的映射形式，类的映射是通过成为[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象的一部分的参数配置的。最终接收这些参数的函数是[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")函数，并且这些参数是从[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象上定义的其中一个前端映射函数传递给它的。
- en: 'For the declarative form of mapping, mapper arguments are specified using the
    `__mapper_args__` declarative class variable, which is a dictionary that is passed
    as keyword arguments to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") function. Some examples:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于映射的声明形式，映射器参数是使用`__mapper_args__`声明性类变量指定的，它是一个字典，作为关键字参数传递给[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")函数。一些示例：
- en: '**Map Specific Primary Key Columns**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**映射特定的主键列**'
- en: 'The example below illustrates Declarative-level settings for the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") parameter, which establishes particular columns as part
    of what the ORM should consider to be a primary key for the class, independently
    of schema-level primary key constraints:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了[`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper")参数的声明级设置，该参数将特定列作为ORM应考虑为类的主键的一部分，而不受架构级主键约束的影响：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See also
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mapping to an Explicit Set of Primary Key Columns](declarative_tables.html#mapper-primary-key)
    - further background on ORM mapping of explicit columns as primary key columns'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[映射到显式一组主键列](declarative_tables.html#mapper-primary-key) - 进一步了解显式列作为主键列的ORM映射的背景'
- en: '**Version ID Column**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本 ID 列**'
- en: 'The example below illustrates Declarative-level settings for the [`Mapper.version_id_col`](mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") and [`Mapper.version_id_generator`](mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_generator
    "sqlalchemy.orm.Mapper") parameters, which configure an ORM-maintained version
    counter that is updated and checked within the [unit of work](../glossary.html#term-unit-of-work)
    flush process:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了[`Mapper.version_id_col`](mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper")和[`Mapper.version_id_generator`](mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_generator
    "sqlalchemy.orm.Mapper")参数的声明级设置，它们配置了一个ORM维护的版本计数器，在[工作单元](../glossary.html#term-unit-of-work)刷新过程中更新和检查：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring a Version Counter](versioning.html#mapper-version-counter) - background
    on the ORM version counter feature'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置版本计数器](versioning.html#mapper-version-counter) - 关于ORM版本计数器功能的背景'
- en: '**Single Table Inheritance**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**单表继承**'
- en: 'The example below illustrates Declarative-level settings for the [`Mapper.polymorphic_on`](mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") and [`Mapper.polymorphic_identity`](mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") parameters, which are used when configuring a single-table
    inheritance mapping:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了用于配置单表继承映射时使用的 [`Mapper.polymorphic_on`](mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") 和 [`Mapper.polymorphic_identity`](mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") 参数的声明级别设置：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See also
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Single Table Inheritance](inheritance.html#single-inheritance) - background
    on the ORM single table inheritance mapping feature.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[单表继承](inheritance.html#single-inheritance) - ORM 单表继承映射功能的背景。'
- en: Constructing mapper arguments dynamically
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态构造映射器参数
- en: The `__mapper_args__` dictionary may be generated from a class-bound descriptor
    method rather than from a fixed dictionary by making use of the [`declared_attr()`](mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") construct. This is useful to create arguments
    for mappers that are programmatically derived from the table configuration or
    other aspects of the mapped class. A dynamic `__mapper_args__` attribute will
    typically be useful when using a Declarative Mixin or abstract base class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`__mapper_args__` 字典可以通过使用 [`declared_attr()`](mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 构造而不是固定字典而生成。通过此方式生成 `__mapper_args__` 对于从表配置或映射类的其他方面程序化派生映射器参数非常有用。动态
    `__mapper_args__` 属性通常在使用声明性混合或抽象基类时非常有用。'
- en: 'For example, to omit from the mapping any columns that have a special [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") value, a mixin can use a `__mapper_args__` method
    that scans for these columns from the `cls.__table__` attribute and passes them
    to the [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper") collection:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了从映射中省略具有特殊 [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") 值的任何列，一个混合类可以使用一个 `__mapper_args__` 方法，该方法从 `cls.__table__`
    属性中扫描这些列并将其传递给 [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper.params.exclude_properties") 集合：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Above, the `ExcludeColsWFlag` mixin provides a per-class `__mapper_args__`
    hook that will scan for [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that include the key/value `''exclude'': True`
    passed to the [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column") parameter, and then add their string “key” name to
    the [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper") collection which will prevent the resulting [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") from considering these columns for any SQL operations.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '上面，`ExcludeColsWFlag` 混合类提供了一个每个类的 `__mapper_args__` 钩子，该钩子将扫描包含传递给 [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column.params.info") 参数的键/值 `''exclude'': True` 的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象，然后将其字符串“键”名称添加到 [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper.params.exclude_properties") 集合中，这将防止生成的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 考虑这些列进行任何 SQL 操作。  '
- en: See also
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用混合组合映射层次结构](declarative_mixins.html)'
- en: Other Declarative Mapping Directives
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他声明性映射指令
- en: '`__declare_last__()`'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__declare_last__()`'
- en: 'The `__declare_last__()` hook allows definition of a class level function that
    is automatically called by the [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event, which occurs after mappings
    are assumed to be completed and the ‘configure’ step has finished:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`__declare_last__()` 钩子允许定义一个类级别函数，该函数将自动由 [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 事件调用，在映射假定完成并且“配置”步骤已经完成后发生：'
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`__declare_first__()`'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__declare_first__()`'
- en: 'Like `__declare_last__()`, but is called at the beginning of mapper configuration
    via the [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 `__declare_last__()`，但是在通过 [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") 事件开始映射器配置时调用：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '### `metadata`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '### `metadata`'
- en: The [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection normally used to assign a new [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is the `registry.metadata` attribute associated with
    the [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    object in use. When using a declarative base class such as that produced by the
    [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    superclass, as well as legacy functions such as [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base"), this [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is also normally present as an attribute named `.metadata`
    that’s directly on the base class, and thus also on the mapped class via inheritance.
    Declarative uses this attribute, when present, in order to determine the target
    [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection, or if not present, uses the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated directly with the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常用于分配新[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合是与正在使用的[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象关联的`registry.metadata`属性。当使用像[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")超类生成的声明基类时，以及像[`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")和[`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")这样的旧函数时，这个[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")通常也作为一个名为`.metadata`的属性直接存在于基类上，因此也通过继承存在于映射类上。当存在时，声明会使用此属性来确定目标[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合，如果不存在，则使用与直接与[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")。
- en: 'This attribute may also be assigned towards in order to affect the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection to be used on a per-mapped-hierarchy
    basis for a single base and/or [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry"). This takes effect whether a declarative base class
    is used or if the [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator is used directly, thus allowing patterns
    such as the metadata-per-abstract base example in the next section, [__abstract__](#declarative-abstract).
    A similar pattern can be illustrated using [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性还可以分配给单个基类和/或[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")以影响每个映射层次结构的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合的使用。这对于使用声明基类或直接使用[`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")装饰器的情况都会生效，从而允许如下所示的每个抽象基类的元数据模式示例，在下一节[__abstract__](#declarative-abstract)。可以使用[`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")来说明类似的模式：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See also
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[__abstract__](#declarative-abstract)  ### `__abstract__`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[__abstract__](#declarative-abstract)  ### `__abstract__`'
- en: '`__abstract__` causes declarative to skip the production of a table or mapper
    for the class entirely. A class can be added within a hierarchy in the same way
    as mixin (see [Mixin and Custom Base Classes](extensions/declarative/mixins.html#declarative-mixins)),
    allowing subclasses to extend just from the special class:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`__abstract__`会导致声明跳过对该类的表或映射器的生成。类可以像混合类一样添加到层次结构中（参见[Mixin and Custom Base
    Classes](extensions/declarative/mixins.html#declarative-mixins)），允许子类仅从特殊类扩展：'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'One possible use of `__abstract__` is to use a distinct [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") for different bases:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`__abstract__`的一个可能用途是为不同的基类使用不同的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")：'
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Above, classes which inherit from `DefaultBase` will use one [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") as the registry of tables, and those which inherit
    from `OtherBase` will use a different one. The tables themselves can then be created
    perhaps within distinct databases:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 类从 `DefaultBase` 继承的将使用一个 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 作为表的注册表，而从 `OtherBase` 继承的将使用另一个。然后，这些表本身可以被创建在不同的数据库中：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Building Deeper Hierarchies with polymorphic_abstract](inheritance.html#orm-inheritance-abstract-poly)
    - an alternative form of “abstract” mapped class that is appropriate for inheritance
    hierarchies.  ### `__table_cls__`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 polymorphic_abstract 构建更深层次的层次结构](inheritance.html#orm-inheritance-abstract-poly)
    - 这是适用于继承层次结构的另一种“抽象”映射类的替代形式。### `__table_cls__`'
- en: 'Allows the callable / class used to generate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be customized. This is a very open-ended hook that
    can allow special customizations to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that one generates here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 允许自定义用于生成 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的可调用/类。这是一个非常开放的钩子，可以允许对在此生成的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 进行特殊的自定义：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The above mixin would cause all [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects generated to include the prefix `"my_"`, followed
    by the name normally specified using the `__tablename__` attribute.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的混合类将导致所有生成的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象都包含前缀 `"my_"`，后跟通常使用 `__tablename__` 属性指定的名称。
- en: '`__table_cls__` also supports the case of returning `None`, which causes the
    class to be considered as single-table inheritance vs. its subclass. This may
    be useful in some customization schemes to determine that single-table inheritance
    should take place based on the arguments for the table itself, such as, define
    as single-inheritance if there is no primary key present:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`__table_cls__` 还支持返回 `None` 的情况，这会导致将该类视为单表继承与其子类。这在某些定制方案中可能很有用，以确定是否应该基于表本身的参数来执行单表继承，例如，如果没有主键存在，则定义为单继承：'
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The above `Employee` class would be mapped as single-table inheritance against
    `Person`; the `employee_name` column would be added as a member of the `Person`
    table.  ## Defining Mapped Properties with Declarative'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的 `Employee` 类将被映射为单表继承，对应于 `Person`；`employee_name` 列将被添加为 `Person` 表的成员。##
    使用声明式定义映射属性
- en: The examples given at [Table Configuration with Declarative](declarative_tables.html)
    illustrate mappings against table-bound columns, using the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct. There are several other varieties of
    ORM mapped constructs that may be configured besides table-bound columns, the
    most common being the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct. Other kinds of properties include SQL
    expressions that are defined using the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") construct and multiple-column mappings using
    the [`composite()`](composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    construct.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在[使用声明式配置表](declarative_tables.html)的示例中，说明了针对表绑定列的映射，使用了 [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造。除了针对表绑定列之外，还可以配置几种其他类型的ORM映射构造，最常见的是 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造。其他类型的属性包括使用 [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 构造定义的SQL表达式和使用 [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") 构造的多列映射。
- en: While an [imperative mapping](mapping_styles.html#orm-imperative-mapping) makes
    use of the [properties](mapping_styles.html#orm-mapping-properties) dictionary
    to establish all the mapped class attributes, in the declarative mapping, these
    properties are all specified inline with the class definition, which in the case
    of a declarative table mapping are inline with the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that will be used to generate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在[命令式映射](mapping_styles.html#orm-imperative-mapping)中，利用[属性](mapping_styles.html#orm-mapping-properties)字典来建立所有映射类属性，而在声明式映射中，这些属性都与类定义一起内联指定，这在声明式表映射的情况下与将用于生成[Table](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的[Column](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象一起内联。
- en: 'Working with the example mapping of `User` and `Address`, we may illustrate
    a declarative table mapping that includes not just [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects but also relationships and SQL expressions:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`User`和`Address`的示例映射，我们可以说明一个包括不仅是[mapped_column()](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")对象还包括关系和SQL表达式的声明式表映射：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The above declarative table mapping features two tables, each with a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") referring to the other, as well as a simple SQL
    expression mapped by [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), and an additional [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") that indicates loading should be on a “deferred”
    basis as defined by the [`mapped_column.deferred`](mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") keyword. More documentation on these particular
    concepts may be found at [Basic Relationship Patterns](basic_relationships.html#relationship-patterns),
    [Using column_property](mapped_sql_expr.html#mapper-column-property-sql-expressions),
    and [Limiting which Columns Load with Column Deferral](queryguide/columns.html#orm-queryguide-column-deferral).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上述声明式表映射具有两个表，每个表都具有相互引用的[relationship()](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")以及由[column_property()](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")映射的简单SQL表达式，以及一个额外的[mapped_column()](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")，该列指示加载应根据[mapped_column.deferred](mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column")关键字定义为“deferred”。有关这些特定概念的更多文档可在[基本关系模式](basic_relationships.html#relationship-patterns)、[使用column_property](mapped_sql_expr.html#mapper-column-property-sql-expressions)和[使用列推迟限制加载的列](queryguide/columns.html#orm-queryguide-column-deferral)中找到。
- en: 'Properties may be specified with a declarative mapping as above using “hybrid
    table” style as well; the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are directly part of a table move into
    the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    definition but everything else, including composed SQL expressions, would still
    be inline with the class definition. Constructs that need to refer to a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") directly would reference it in terms of the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object. To illustrate the above mapping using hybrid
    table style:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明式映射，可以像上面那样使用“混合表”样式来指定属性；直接属于表的[Column](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象移入[Table](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")定义，但包括组合SQL表达式在内的其他所有内容仍将内联到类定义中。需要引用[Column](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的构造将以[Table](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的术语引用它。为了使用混合表样式说明上述映射：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Things to note above:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以上需要注意的事项：
- en: The address [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    contains a column called `address_statistics`, however we re-map this column under
    the same attribute name to be under the control of a [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") construct.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址[Table](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")包含一个名为`address_statistics`的列，然而我们将此列重新映射到同一属性名称下，以便受[`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")构造的控制。
- en: With both declararative table and hybrid table mappings, when we define a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") construct, we always name the target table using
    the **table name**, and not the mapped class name.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在声明性表和混合表映射中，当我们定义一个 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 构造时，我们总是使用**表名**来命名目标表，而不是映射类名。
- en: When we define [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs, as these constructs create a linkage
    between two mapped classes where one necessarily is defined before the other,
    we can refer to the remote class using its string name. This functionality also
    extends into the area of other arguments specified on the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") such as the “primary join” and “order by” arguments.
    See the section [Late-Evaluation of Relationship Arguments](basic_relationships.html#orm-declarative-relationship-eval)
    for details on this.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们定义 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    构造时，由于这些构造在两个映射类之间创建了链接，其中一个必然在另一个之前被定义，我们可以使用其字符串名称引用远程类。这个功能也扩展到 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 上指定的其他参数，如“主连接”和“排序”参数。有关详细信息，请参阅 [Relationship
    参数的延迟评估](basic_relationships.html#orm-declarative-relationship-eval) 部分。
- en: '## Mapper Configuration Options with Declarative'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '## 带有声明性的 Mapper 配置选项'
- en: With all mapping forms, the mapping of the class is configured through parameters
    that become part of the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object. The function which ultimately receives these arguments is the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") function, and are delivered to it from one of the front-facing
    mapping functions defined on the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有映射形式，类的映射通过成为 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象的一部分的参数进行配置。最终接收这些参数的函数是 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    函数，并且它们从定义在 [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    对象上的一个前置映射函数中传递给它。
- en: 'For the declarative form of mapping, mapper arguments are specified using the
    `__mapper_args__` declarative class variable, which is a dictionary that is passed
    as keyword arguments to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") function. Some examples:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于映射的声明形式，映射器参数是使用 `__mapper_args__` 声明性类变量指定的，该变量是一个字典，作为关键字参数传递给 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 函数。一些示例：
- en: '**Map Specific Primary Key Columns**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**映射特定的主键列**'
- en: 'The example below illustrates Declarative-level settings for the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") parameter, which establishes particular columns as part
    of what the ORM should consider to be a primary key for the class, independently
    of schema-level primary key constraints:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了 [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") 参数的声明级别设置，它将特定列作为 ORM 应该考虑为类的主键的一部分，与架构级主键约束独立：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See also
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mapping to an Explicit Set of Primary Key Columns](declarative_tables.html#mapper-primary-key)
    - further background on ORM mapping of explicit columns as primary key columns'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[映射到一组显式主键列](declarative_tables.html#mapper-primary-key) - ORM 将显式列映射为主键列的更多背景'
- en: '**Version ID Column**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本 ID 列**'
- en: 'The example below illustrates Declarative-level settings for the [`Mapper.version_id_col`](mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") and [`Mapper.version_id_generator`](mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_generator
    "sqlalchemy.orm.Mapper") parameters, which configure an ORM-maintained version
    counter that is updated and checked within the [unit of work](../glossary.html#term-unit-of-work)
    flush process:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了 [`Mapper.version_id_col`](mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") 和 [`Mapper.version_id_generator`](mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_generator
    "sqlalchemy.orm.Mapper") 参数的声明级别设置，它们配置了一个由 ORM 维护的版本计数器，在 [工作单元](../glossary.html#term-unit-of-work)
    刷新过程中进行更新和检查：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See also
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring a Version Counter](versioning.html#mapper-version-counter) - background
    on the ORM version counter feature'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置版本计数器](versioning.html#mapper-version-counter) - ORM 版本计数器功能的背景'
- en: '**Single Table Inheritance**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**单表继承**'
- en: 'The example below illustrates Declarative-level settings for the [`Mapper.polymorphic_on`](mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") and [`Mapper.polymorphic_identity`](mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") parameters, which are used when configuring a single-table
    inheritance mapping:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了用于配置单表继承映射时使用的 [`Mapper.polymorphic_on`](mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") 和 [`Mapper.polymorphic_identity`](mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") 参数的声明级别设置：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: See also
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Single Table Inheritance](inheritance.html#single-inheritance) - background
    on the ORM single table inheritance mapping feature.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[单表继承](inheritance.html#single-inheritance) - ORM 单表继承映射功能的背景介绍。'
- en: Constructing mapper arguments dynamically
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态构建映射器参数
- en: The `__mapper_args__` dictionary may be generated from a class-bound descriptor
    method rather than from a fixed dictionary by making use of the [`declared_attr()`](mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") construct. This is useful to create arguments
    for mappers that are programmatically derived from the table configuration or
    other aspects of the mapped class. A dynamic `__mapper_args__` attribute will
    typically be useful when using a Declarative Mixin or abstract base class.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`__mapper_args__` 字典可以通过使用 [`declared_attr()`](mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 构造而不是固定字典从类绑定描述符方法生成。这对于从表配置或映射类的其他方面编程派生映射器参数非常有用。动态的
    `__mapper_args__` 属性通常在使用声明性 Mixin 或抽象基类时非常有用。'
- en: 'For example, to omit from the mapping any columns that have a special [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") value, a mixin can use a `__mapper_args__` method
    that scans for these columns from the `cls.__table__` attribute and passes them
    to the [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper") collection:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要从映射中省略具有特殊 [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") 值的任何列，一个 Mixin 可以使用一个 `__mapper_args__` 方法，该方法从
    `cls.__table__` 属性扫描这些列并将它们传递给 [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper") 集合：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Above, the `ExcludeColsWFlag` mixin provides a per-class `__mapper_args__`
    hook that will scan for [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that include the key/value `''exclude'': True`
    passed to the [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column") parameter, and then add their string “key” name to
    the [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper") collection which will prevent the resulting [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") from considering these columns for any SQL operations.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面的示例中，`ExcludeColsWFlag` Mixin 提供了一个每个类的 `__mapper_args__` 钩子，它将扫描包含传递给 [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column") 参数的键/值 `''exclude'': True` 的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象，然后将它们的字符串“键”名称添加到 [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper") 集合中，这将阻止生成的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对这些列进行任何 SQL 操作的考虑。'
- en: See also
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Mixin 组合映射层次结构](declarative_mixins.html)'
- en: Constructing mapper arguments dynamically
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态构建映射器参数
- en: The `__mapper_args__` dictionary may be generated from a class-bound descriptor
    method rather than from a fixed dictionary by making use of the [`declared_attr()`](mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") construct. This is useful to create arguments
    for mappers that are programmatically derived from the table configuration or
    other aspects of the mapped class. A dynamic `__mapper_args__` attribute will
    typically be useful when using a Declarative Mixin or abstract base class.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`__mapper_args__` 字典可以通过使用 [`declared_attr()`](mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 构造而不是固定字典从类绑定描述符方法生成。这对于从表配置或映射类的其他方面编程派生映射器参数非常有用。动态的
    `__mapper_args__` 属性通常在使用声明性 Mixin 或抽象基类时非常有用。'
- en: 'For example, to omit from the mapping any columns that have a special [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") value, a mixin can use a `__mapper_args__` method
    that scans for these columns from the `cls.__table__` attribute and passes them
    to the [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper") collection:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要从映射中省略具有特殊[`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info")值的任何列，mixin 可以使用一个`__mapper_args__`方法从`cls.__table__`属性中扫描这些列，并将它们传递给[`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper")集合：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Above, the `ExcludeColsWFlag` mixin provides a per-class `__mapper_args__`
    hook that will scan for [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that include the key/value `''exclude'': True`
    passed to the [`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column") parameter, and then add their string “key” name to
    the [`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper") collection which will prevent the resulting [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") from considering these columns for any SQL operations.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面的例子中，`ExcludeColsWFlag` mixin 提供了一个每个类的`__mapper_args__`钩子，该钩子将扫描包含传递给[`Column.info`](../core/metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column")参数的键/值`''exclude'': True`的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，然后将其字符串“key”名称添加到[`Mapper.exclude_properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.exclude_properties
    "sqlalchemy.orm.Mapper")集合中，这将阻止生成的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")考虑这些列进行任何 SQL 操作。'
- en: See also
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Mixins 构建映射的分层结构](declarative_mixins.html)'
- en: Other Declarative Mapping Directives
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他声明性映射指令
- en: '`__declare_last__()`'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__declare_last__()`'
- en: 'The `__declare_last__()` hook allows definition of a class level function that
    is automatically called by the [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event, which occurs after mappings
    are assumed to be completed and the ‘configure’ step has finished:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`__declare_last__()`钩子允许定义一个类级别函数，该函数会在[`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")事件自动调用，此事件发生在假定映射已完成且“configure”步骤已完成之后：'
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`__declare_first__()`'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__declare_first__()`'
- en: 'Like `__declare_last__()`, but is called at the beginning of mapper configuration
    via the [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 像`__declare_last__()`一样，但是通过[`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")事件在映射器配置的开始时调用：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '### `metadata`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '### `metadata`'
- en: The [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection normally used to assign a new [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is the `registry.metadata` attribute associated with
    the [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    object in use. When using a declarative base class such as that produced by the
    [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    superclass, as well as legacy functions such as [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base"), this [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is also normally present as an attribute named `.metadata`
    that’s directly on the base class, and thus also on the mapped class via inheritance.
    Declarative uses this attribute, when present, in order to determine the target
    [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection, or if not present, uses the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated directly with the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    集合通常用于为新的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    分配，它是与正在使用的 [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    对象相关联的 `registry.metadata` 属性。当使用诸如 [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 超类生成的声明性基类，以及诸如 [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 和 [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") 等遗留函数时，通常也会存在这个 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")，它作为名为 `.metadata` 的属性直接存在于基类上，因此也通过继承存在于映射类上。当存在时，声明性使用此属性来确定目标
    [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    集合，如果不存在，则使用与 [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    直接关联的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")。'
- en: 'This attribute may also be assigned towards in order to affect the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection to be used on a per-mapped-hierarchy
    basis for a single base and/or [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry"). This takes effect whether a declarative base class
    is used or if the [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator is used directly, thus allowing patterns
    such as the metadata-per-abstract base example in the next section, [__abstract__](#declarative-abstract).
    A similar pattern can be illustrated using [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性也可以被分配到，以便对单个基类和/或 [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 的每个映射层次结构基础使用影响 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合。这将影响到是否使用声明性基类或直接使用 [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") 装饰器，从而允许模式，例如下一节中的基于抽象基类的元数据示例，[__abstract__](#declarative-abstract)。类似的模式可以使用
    [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped")
    来说明如下：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See also
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[__abstract__](#declarative-abstract)  ### `__abstract__`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[__abstract__](#declarative-abstract)  ### `__abstract__`'
- en: '`__abstract__` causes declarative to skip the production of a table or mapper
    for the class entirely. A class can be added within a hierarchy in the same way
    as mixin (see [Mixin and Custom Base Classes](extensions/declarative/mixins.html#declarative-mixins)),
    allowing subclasses to extend just from the special class:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`__abstract__` 会导致声明性完全跳过为类生成表或映射器。可以像 mixin 一样在层次结构中添加类（参见 [Mixin and Custom
    Base Classes](extensions/declarative/mixins.html#declarative-mixins)），允许子类仅从特殊类扩展：'
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'One possible use of `__abstract__` is to use a distinct [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") for different bases:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`__abstract__` 的一种可能用法是为不同的基类使用不同的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")：'
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Above, classes which inherit from `DefaultBase` will use one [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") as the registry of tables, and those which inherit
    from `OtherBase` will use a different one. The tables themselves can then be created
    perhaps within distinct databases:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，从 `DefaultBase` 继承的类将使用一个 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 作为表的注册表，而从 `OtherBase` 继承的类将使用不同的注册表。然后，表本身可能会被创建在不同的数据库中：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Building Deeper Hierarchies with polymorphic_abstract](inheritance.html#orm-inheritance-abstract-poly)
    - an alternative form of “abstract” mapped class that is appropriate for inheritance
    hierarchies.  ### `__table_cls__`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 polymorphic_abstract 构建更深层次的继承结构](inheritance.html#orm-inheritance-abstract-poly)
    - 适用于继承层次结构的另一种“抽象”映射类形式。### `__table_cls__`'
- en: 'Allows the callable / class used to generate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be customized. This is a very open-ended hook that
    can allow special customizations to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that one generates here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 允许定制用于生成 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的可调用 / 类。这是一个非常开放的钩子，可以允许对在此生成的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 进行特殊定制：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The above mixin would cause all [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects generated to include the prefix `"my_"`, followed
    by the name normally specified using the `__tablename__` attribute.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的混合类将导致所有生成的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象都包含前缀 `"my_"`，后跟通常使用 `__tablename__` 属性指定的名称。
- en: '`__table_cls__` also supports the case of returning `None`, which causes the
    class to be considered as single-table inheritance vs. its subclass. This may
    be useful in some customization schemes to determine that single-table inheritance
    should take place based on the arguments for the table itself, such as, define
    as single-inheritance if there is no primary key present:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`__table_cls__` 还支持返回 `None` 的情况，这会导致将类视为单表继承 vs. 其子类。在某些定制方案中，这可能是有用的，以确定应基于表本身的参数进行单表继承，例如，如果不存在主键，则定义为单继承：'
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The above `Employee` class would be mapped as single-table inheritance against
    `Person`; the `employee_name` column would be added as a member of the `Person`
    table.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的 `Employee` 类将被映射为针对 `Person` 的单表继承；`employee_name` 列将作为 `Person` 表的成员添加。
- en: '`__declare_last__()`'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__declare_last__()`'
- en: 'The `__declare_last__()` hook allows definition of a class level function that
    is automatically called by the [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event, which occurs after mappings
    are assumed to be completed and the ‘configure’ step has finished:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`__declare_last__()` 钩子允许定义一个类级别的函数，该函数会在 [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 事件之后自动调用，该事件发生在映射被认为已完成并且“配置”步骤已经结束之后：'
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`__declare_first__()`'
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__declare_first__()`'
- en: 'Like `__declare_last__()`, but is called at the beginning of mapper configuration
    via the [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 `__declare_last__()`，但是在映射器配置的开始阶段通过 [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") 事件调用：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '### `metadata`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '### `metadata`'
- en: The [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection normally used to assign a new [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is the `registry.metadata` attribute associated with
    the [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    object in use. When using a declarative base class such as that produced by the
    [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    superclass, as well as legacy functions such as [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base"), this [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is also normally present as an attribute named `.metadata`
    that’s directly on the base class, and thus also on the mapped class via inheritance.
    Declarative uses this attribute, when present, in order to determine the target
    [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection, or if not present, uses the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated directly with the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通常用于分配新[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合是与正在使用的[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象关联的`registry.metadata`属性。当使用像[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")超类生成的声明性基类时，以及诸如[`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")和[`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")这样的旧函数时，这个[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")通常也作为一个名为`.metadata`的属性存在于直接在基类上的，并且通过继承也存在于映射类上。当存在时，声明性会使用这个属性来确定目标[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合，如果不存在，则使用直接与[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")。
- en: 'This attribute may also be assigned towards in order to affect the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection to be used on a per-mapped-hierarchy
    basis for a single base and/or [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry"). This takes effect whether a declarative base class
    is used or if the [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator is used directly, thus allowing patterns
    such as the metadata-per-abstract base example in the next section, [__abstract__](#declarative-abstract).
    A similar pattern can be illustrated using [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性还可以被分配到[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")集合上，以便对单个基类和/或[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")在每个映射的层次结构上进行影响。这将在使用声明性基类或直接使用[`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")装饰器时生效，从而允许像下一节中的抽象基类示例一样的模式，[__abstract__](#declarative-abstract)。类似的模式可以使用[`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")来说明如下：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: See also
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[__abstract__](#declarative-abstract)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[__abstract__](#declarative-abstract)'
- en: '### `__abstract__`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '### `__abstract__`'
- en: '`__abstract__` causes declarative to skip the production of a table or mapper
    for the class entirely. A class can be added within a hierarchy in the same way
    as mixin (see [Mixin and Custom Base Classes](extensions/declarative/mixins.html#declarative-mixins)),
    allowing subclasses to extend just from the special class:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`__abstract__`导致声明性完全跳过为类生成表或映射。可以以与mixin相同的方式将类添加到层次结构中（请参阅[Mixin and Custom
    Base Classes](extensions/declarative/mixins.html#declarative-mixins)），从而允许子类仅从特殊类扩展：'
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'One possible use of `__abstract__` is to use a distinct [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") for different bases:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`__abstract__`的一个可能用法是为不同的基类使用不同的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")：'
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Above, classes which inherit from `DefaultBase` will use one [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") as the registry of tables, and those which inherit
    from `OtherBase` will use a different one. The tables themselves can then be created
    perhaps within distinct databases:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，继承自 `DefaultBase` 的类将使用一个 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 作为表的注册表，而继承自 `OtherBase` 的类将使用另一个注册表。然后，这些表可以在不同的数据库中创建：
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: See also
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Building Deeper Hierarchies with polymorphic_abstract](inheritance.html#orm-inheritance-abstract-poly)
    - an alternative form of “abstract” mapped class that is appropriate for inheritance
    hierarchies.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 polymorphic_abstract 构建更深层次的层次结构](inheritance.html#orm-inheritance-abstract-poly)
    - 一种适用于继承层次结构的“抽象”映射类的替代形式。'
- en: '### `__table_cls__`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '### `__table_cls__`'
- en: 'Allows the callable / class used to generate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be customized. This is a very open-ended hook that
    can allow special customizations to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that one generates here:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '允许定制用于生成 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的可调用函数/类。这是一个非常开放的钩子，可以允许对在此生成的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 进行特殊的定制:'
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The above mixin would cause all [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects generated to include the prefix `"my_"`, followed
    by the name normally specified using the `__tablename__` attribute.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上述混合类将导致所有生成的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象都包含前缀 `"my_"`，后跟通常使用 `__tablename__` 属性指定的名称。
- en: '`__table_cls__` also supports the case of returning `None`, which causes the
    class to be considered as single-table inheritance vs. its subclass. This may
    be useful in some customization schemes to determine that single-table inheritance
    should take place based on the arguments for the table itself, such as, define
    as single-inheritance if there is no primary key present:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`__table_cls__` 也支持返回 `None` 的情况，这将导致将类视为单表继承与其子类。在一些定制方案中，这可能是有用的，以确定基于表本身的参数是否应该进行单表继承，例如，如果没有主键存在，则定义为单继承：'
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The above `Employee` class would be mapped as single-table inheritance against
    `Person`; the `employee_name` column would be added as a member of the `Person`
    table.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `Employee` 类将被映射为单表继承，对 `Person` 进行映射；`employee_name` 列将作为 `Person` 表的成员添加。
