- en: MySQL and MariaDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL和MariaDB
- en: 原文：[https://docs.sqlalchemy.org/en/20/dialects/mysql.html](https://docs.sqlalchemy.org/en/20/dialects/mysql.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/dialects/mysql.html](https://docs.sqlalchemy.org/en/20/dialects/mysql.html)
- en: Support for the MySQL / MariaDB database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 支持MySQL / MariaDB数据库。
- en: The following table summarizes current support levels for database release versions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表总结了数据库发布版本的当前支持级别。
- en: '**Supported MySQL / MariaDB versions**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持的MySQL / MariaDB版本**'
- en: '| Support type | Versions |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 支持类型 | 版本 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Fully tested in CI](index.html#term-Fully-tested-in-CI) | 5.6, 5.7, 8.0
    / 10.8, 10.9 |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [CI中完全测试](index.html#term-Fully-tested-in-CI) | 5.6, 5.7, 8.0 / 10.8, 10.9
    |'
- en: '| [Normal support](index.html#term-Normal-support) | 5.6+ / 10+ |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [正常支持](index.html#term-Normal-support) | 5.6+ / 10+ |'
- en: '| [Best effort](index.html#term-Best-effort) | 5.0.2+ / 5.0.2+ |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [尽力而为](index.html#term-Best-effort) | 5.0.2+ / 5.0.2+ |'
- en: DBAPI Support
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DBAPI支持
- en: The following dialect/DBAPI options are available. Please refer to individual
    DBAPI sections for connect information.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 提供以下方言/DBAPI选项。请参考各自的DBAPI部分以获取连接信息。
- en: '[mysqlclient (maintained fork of MySQL-Python)](#module-sqlalchemy.dialects.mysql.mysqldb)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[mysqlclient（MySQL-Python的维护分支）](#module-sqlalchemy.dialects.mysql.mysqldb)'
- en: '[PyMySQL](#module-sqlalchemy.dialects.mysql.pymysql)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyMySQL](#module-sqlalchemy.dialects.mysql.pymysql)'
- en: '[MariaDB Connector/Python](#module-sqlalchemy.dialects.mysql.mariadbconnector)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MariaDB Connector/Python](#module-sqlalchemy.dialects.mysql.mariadbconnector)'
- en: '[MySQL Connector/Python](#module-sqlalchemy.dialects.mysql.mysqlconnector)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MySQL Connector/Python](#module-sqlalchemy.dialects.mysql.mysqlconnector)'
- en: '[asyncmy](#module-sqlalchemy.dialects.mysql.asyncmy)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asyncmy](#module-sqlalchemy.dialects.mysql.asyncmy)'
- en: '[aiomysql](#module-sqlalchemy.dialects.mysql.aiomysql)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[aiomysql](#module-sqlalchemy.dialects.mysql.aiomysql)'
- en: '[CyMySQL](#module-sqlalchemy.dialects.mysql.cymysql)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CyMySQL](#module-sqlalchemy.dialects.mysql.cymysql)'
- en: '[PyODBC](#module-sqlalchemy.dialects.mysql.pyodbc)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyODBC](#module-sqlalchemy.dialects.mysql.pyodbc)'
- en: Supported Versions and Features
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的版本和功能
- en: SQLAlchemy supports MySQL starting with version 5.0.2 through modern releases,
    as well as all modern versions of MariaDB. See the official MySQL documentation
    for detailed information about features supported in any given server release.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy支持从版本5.0.2开始的MySQL，以及所有现代版本的MariaDB。有关任何给定服务器版本支持的功能的详细信息，请参阅官方MySQL文档。
- en: 'Changed in version 1.4: minimum MySQL version supported is now 5.0.2.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：最低支持的MySQL版本现在是5.0.2。
- en: MariaDB Support
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MariaDB支持
- en: 'The MariaDB variant of MySQL retains fundamental compatibility with MySQL’s
    protocols however the development of these two products continues to diverge.
    Within the realm of SQLAlchemy, the two databases have a small number of syntactical
    and behavioral differences that SQLAlchemy accommodates automatically. To connect
    to a MariaDB database, no changes to the database URL are required:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的MariaDB变体保留了与MySQL协议的基本兼容性，但这两个产品的发展仍在分歧。在SQLAlchemy领域，这两个数据库有一小部分语法和行为上的差异，SQLAlchemy会自动适应。要连接到MariaDB数据库，不需要对数据库URL进行任何更改：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Upon first connect, the SQLAlchemy dialect employs a server version detection
    scheme that determines if the backing database reports as MariaDB. Based on this
    flag, the dialect can make different choices in those of areas where its behavior
    must be different.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次连接时，SQLAlchemy方言采用服务器版本检测方案，确定后端数据库是否报告为MariaDB。根据此标志，方言可以在其行为必须不同的领域做出不同选择。
- en: '### MariaDB-Only Mode'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '### 仅MariaDB模式'
- en: 'The dialect also supports an **optional** “MariaDB-only” mode of connection,
    which may be useful for the case where an application makes use of MariaDB-specific
    features and is not compatible with a MySQL database. To use this mode of operation,
    replace the “mysql” token in the above URL with “mariadb”:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该方言还支持一个**可选**的“仅MariaDB”连接模式，这对于应用程序使用MariaDB特定功能且与MySQL数据库不兼容的情况可能很有用。要使用此操作模式，请将上述URL中的“mysql”标记替换为“mariadb”：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above engine, upon first connect, will raise an error if the server version
    detection detects that the backing database is not MariaDB.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述引擎在首次连接时，如果服务器版本检测检测到后端数据库不是MariaDB，则会引发错误。
- en: 'When using an engine with `"mariadb"` as the dialect name, **all mysql-specific
    options that include the name “mysql” in them are now named with “mariadb”**.
    This means options like `mysql_engine` should be named `mariadb_engine`, etc.
    Both “mysql” and “mariadb” options can be used simultaneously for applications
    that use URLs with both “mysql” and “mariadb” dialects:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用以`"mariadb"`作为方言名称的引擎时，**所有包含“mysql”名称的mysql特定选项现在都以“mariadb”命名**。这意味着选项如`mysql_engine`应该命名为`mariadb_engine`，等等。对于同时使用“mysql”和“mariadb”方言的应用程序，可以同时使用“mysql”和“mariadb”选项：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Similar behavior will occur when the above structures are reflected, i.e. the
    “mariadb” prefix will be present in the option names when the database URL is
    based on the “mariadb” name.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当上述结构被反映时，将发生类似的行为，即当数据库URL基于“mariadb”名称时，“mariadb”前缀将存在于选项名称中。
- en: 'New in version 1.4: Added “mariadb” dialect name supporting “MariaDB-only mode”
    for the MySQL dialect.  ## Connection Timeouts and Disconnects'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '版本1.4中的新功能：添加了支持“MariaDB-only mode”的“mariadb”方言名称，用于MySQL方言。  ## 连接超时和断开连接'
- en: 'MySQL / MariaDB feature an automatic connection close behavior, for connections
    that have been idle for a fixed period of time, defaulting to eight hours. To
    circumvent having this issue, use the [`create_engine.pool_recycle`](../core/engines.html#sqlalchemy.create_engine.params.pool_recycle
    "sqlalchemy.create_engine") option which ensures that a connection will be discarded
    and replaced with a new one if it has been present in the pool for a fixed number
    of seconds:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB具有自动连接关闭行为，对于空闲时间超过固定时间的连接，默认为8小时。为了避免出现此问题，使用[`create_engine.pool_recycle`](../core/engines.html#sqlalchemy.create_engine.params.pool_recycle
    "sqlalchemy.create_engine")选项，该选项确保如果连接在池中存在了固定秒数，则该连接将被丢弃并替换为新连接：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For more comprehensive disconnect detection of pooled connections, including
    accommodation of server restarts and network issues, a pre-ping approach may be
    employed. See [Dealing with Disconnects](../core/pooling.html#pool-disconnects)
    for current approaches.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更全面地检测连接池中的断开连接，包括适应服务器重启和网络问题，可以采用预先ping的方法。请参阅[处理断开连接](../core/pooling.html#pool-disconnects)了解当前的方法。
- en: See also
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dealing with Disconnects](../core/pooling.html#pool-disconnects) - Background
    on several techniques for dealing with timed out connections as well as database
    restarts.  ## CREATE TABLE arguments including Storage Engines'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[处理断开连接](../core/pooling.html#pool-disconnects) - 关于处理超时连接以及数据库重新启动的几种技术的背景。  ##
    包括存储引擎的CREATE TABLE参数'
- en: 'Both MySQL’s and MariaDB’s CREATE TABLE syntax includes a wide array of special
    options, including `ENGINE`, `CHARSET`, `MAX_ROWS`, `ROW_FORMAT`, `INSERT_METHOD`,
    and many more. To accommodate the rendering of these arguments, specify the form
    `mysql_argument_name="value"`. For example, to specify a table with `ENGINE` of
    `InnoDB`, `CHARSET` of `utf8mb4`, and `KEY_BLOCK_SIZE` of `1024`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL和MariaDB的CREATE TABLE语法都包括各种特殊选项，包括`ENGINE`、`CHARSET`、`MAX_ROWS`、`ROW_FORMAT`、`INSERT_METHOD`等等。为了适应这些参数的渲染，指定形式`mysql_argument_name="value"`。例如，要指定一个具有`ENGINE`为`InnoDB`、`CHARSET`为`utf8mb4`和`KEY_BLOCK_SIZE`为`1024`的表：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When supporting [MariaDB-Only Mode](#mysql-mariadb-only-mode) mode, similar
    keys against the “mariadb” prefix must be included as well. The values can of
    course vary independently so that different settings on MySQL vs. MariaDB may
    be maintained:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当支持[仅MariaDB模式](#mysql-mariadb-only-mode)时，还必须包含相同的“mariadb”前缀下的键。这些值当然可以独立变化，以便在MySQL和MariaDB上保持不同的设置：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The MySQL / MariaDB dialects will normally transfer any keyword specified as
    `mysql_keyword_name` to be rendered as `KEYWORD_NAME` in the `CREATE TABLE` statement.
    A handful of these names will render with a space instead of an underscore; to
    support this, the MySQL dialect has awareness of these particular names, which
    include `DATA DIRECTORY` (e.g. `mysql_data_directory`), `CHARACTER SET` (e.g.
    `mysql_character_set`) and `INDEX DIRECTORY` (e.g. `mysql_index_directory`).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB方言通常将任何指定为`mysql_keyword_name`的关键字转换为`CREATE TABLE`语句中的`KEYWORD_NAME`。其中一些名称将以空格而不是下划线呈现；为了支持此，MySQL方言具有对这些特定名称的意识，其中包括`DATA
    DIRECTORY`（例如`mysql_data_directory`）、`CHARACTER SET`（例如`mysql_character_set`）和`INDEX
    DIRECTORY`（例如`mysql_index_directory`）。
- en: The most common argument is `mysql_engine`, which refers to the storage engine
    for the table. Historically, MySQL server installations would default to `MyISAM`
    for this value, although newer versions may be defaulting to `InnoDB`. The `InnoDB`
    engine is typically preferred for its support of transactions and foreign keys.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的参数是 `mysql_engine`，它指的是表的存储引擎。从历史上看，MySQL 服务器安装会将此值默认为 `MyISAM`，尽管较新版本可能将默认值设置为
    `InnoDB`。`InnoDB` 引擎通常更受欢迎，因为它支持事务和外键。
- en: A [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is created in a MySQL / MariaDB database with a storage engine of `MyISAM`
    will be essentially non-transactional, meaning any INSERT/UPDATE/DELETE statement
    referring to this table will be invoked as autocommit. It also will have no support
    for foreign key constraints; while the `CREATE TABLE` statement accepts foreign
    key options, when using the `MyISAM` storage engine these arguments are discarded.
    Reflecting such a table will also produce no foreign key constraint information.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `MyISAM` 存储引擎创建的 MySQL / MariaDB 数据库中创建的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 实际上是非事务性的，这意味着对该表的任何 INSERT/UPDATE/DELETE 语句都将被调用为自动提交。它也不支持外键约束；虽然
    `CREATE TABLE` 语句接受外键选项，但在使用 `MyISAM` 存储引擎时，这些参数将被丢弃。反映这样的表也不会产生外键约束信息。
- en: For fully atomic transactions as well as support for foreign key constraints,
    all participating `CREATE TABLE` statements must specify a transactional engine,
    which in the vast majority of cases is `InnoDB`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完全原子事务以及对外键约束的支持，所有参与的 `CREATE TABLE` 语句必须指定事务引擎，在绝大多数情况下是 `InnoDB`。
- en: Case Sensitivity and Table Reflection
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大小写敏感性和表反射
- en: Both MySQL and MariaDB have inconsistent support for case-sensitive identifier
    names, basing support on specific details of the underlying operating system.
    However, it has been observed that no matter what case sensitivity behavior is
    present, the names of tables in foreign key declarations are *always* received
    from the database as all-lower case, making it impossible to accurately reflect
    a schema where inter-related tables use mixed-case identifier names.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 都对大小写敏感的标识符名称提供不一致的支持，其支持基于底层操作系统的具体细节。但是，已经观察到无论存在何种大小写敏感性行为，外键声明中的表名称总是以全小写形式从数据库接收，这使得准确反映使用混合大小写标识符名称的相互关联表的架构成为不可能。
- en: Therefore it is strongly advised that table names be declared as all lower case
    both within SQLAlchemy as well as on the MySQL / MariaDB database itself, especially
    if database reflection features are to be used.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，强烈建议在 SQLAlchemy 中以及在 MySQL / MariaDB 数据库本身中将表名声明为全小写，特别是如果要使用数据库反射功能的话。
- en: '## Transaction Isolation Level'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '## 事务隔离级别'
- en: All MySQL / MariaDB dialects support setting of transaction isolation level
    both via a dialect-specific parameter [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") accepted by [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), as well as the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") argument as passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). This feature works by issuing
    the command `SET SESSION TRANSACTION ISOLATION LEVEL <level>` for each new connection.
    For the special AUTOCOMMIT isolation level, DBAPI-specific techniques are used.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 MySQL / MariaDB 方言都支持通过方言特定参数 [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")（由 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 接受）以及作为传递给 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 的参数的 [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数来设置事务隔离级别。此功能通过为每个新连接发出命令
    `SET SESSION TRANSACTION ISOLATION LEVEL <level>` 来工作。对于特殊的 AUTOCOMMIT 隔离级别，使用了
    DBAPI 特定的技术。
- en: 'To set isolation level using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    设置隔离级别：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To set using per-connection execution options:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过每个连接执行选项进行设置：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Valid values for `isolation_level` include:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`isolation_level`的有效值包括：'
- en: '`READ COMMITTED`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: The special `AUTOCOMMIT` value makes use of the various “autocommit” attributes
    provided by specific DBAPIs, and is currently supported by MySQLdb, MySQL-Client,
    MySQL-Connector Python, and PyMySQL. Using it, the database connection will return
    true for the value of `SELECT @@autocommit;`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的`AUTOCOMMIT`值利用特定DBAPI提供的各种“autocommit”属性，并且目前受到MySQLdb、MySQL-Client、MySQL-Connector
    Python和PyMySQL的支持。使用它，数据库连接将返回`SELECT @@autocommit;`的值为true。
- en: There are also more options for isolation level configurations, such as “sub-engine”
    objects linked to a main [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which each apply different isolation level settings.
    See the discussion at [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)
    for background.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多隔离级别配置选项，例如与主[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联的“子引擎”对象，每个对象应用不同的隔离级别设置。有关详情，请参阅[设置事务隔离级别，包括DBAPI自动提交](../core/connections.html#dbapi-autocommit)。
- en: See also
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括DBAPI自动提交](../core/connections.html#dbapi-autocommit)'
- en: AUTO_INCREMENT Behavior
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AUTO_INCREMENT行为
- en: 'When creating tables, SQLAlchemy will automatically set `AUTO_INCREMENT` on
    the first [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    primary key column which is not marked as a foreign key:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表时，SQLAlchemy将自动在第一个未标记为外键的[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")主键列上设置`AUTO_INCREMENT`：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can disable this behavior by passing `False` to the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") argument of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This flag can also be used to enable auto-increment
    on a secondary column in a multi-column key for some storage engines:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`False`传递给[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")参数的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")来禁用此行为。此标志也可用于在某些存储引擎中为多列键的次要列启用自动增量：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '## Server Side Cursors'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '## 服务器端游标'
- en: Server-side cursor support is available for the mysqlclient, PyMySQL, mariadbconnector
    dialects and may also be available in others. This makes use of either the “buffered=True/False”
    flag if available or by using a class such as `MySQLdb.cursors.SSCursor` or `pymysql.cursors.SSCursor`
    internally.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient、PyMySQL、mariadbconnector方言支持服务器端游标，并且可能也适用于其他方言。这可以通过使用“buffered=True/False”标志（如果可用）或通过在内部使用类似于`MySQLdb.cursors.SSCursor`或`pymysql.cursors.SSCursor`的类来实现。
- en: 'Server side cursors are enabled on a per-statement basis by using the [`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") connection execution option:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端游标可以通过使用[`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")连接执行选项来启用每个语句的。
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that some kinds of SQL statements may not be supported with server side
    cursors; generally, only SQL statements that return rows should be used with this
    option.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些类型的SQL语句可能不支持使用服务器端游标；通常，只应该使用返回行的SQL语句与此选项一起使用。
- en: 'Deprecated since version 1.4: The dialect-level server_side_cursors flag is
    deprecated and will be removed in a future release. Please use the [`Connection.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.params.stream_results
    "sqlalchemy.engine.Connection") execution option for unbuffered cursor support.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：dialect-level server_side_cursors标志已弃用，并将在将来的版本中删除。请使用[`Connection.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.params.stream_results
    "sqlalchemy.engine.Connection")执行选项来支持无缓冲游标。
- en: See also
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using Server Side Cursors (a.k.a. stream results)](../core/connections.html#engine-stream-results)  ##
    Unicode'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](../core/connections.html#engine-stream-results)  ## Unicode'
- en: Charset Selection
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符集选择
- en: 'Most MySQL / MariaDB DBAPIs offer the option to set the client character set
    for a connection. This is typically delivered using the `charset` parameter in
    the URL, such as:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 MySQL / MariaDB DBAPI 都提供了为连接设置客户端字符集的选项。通常可以使用 URL 中的`charset`参数来实现，例如：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This charset is the **client character set** for the connection. Some MySQL
    DBAPIs will default this to a value such as `latin1`, and some will make use of
    the `default-character-set` setting in the `my.cnf` file as well. Documentation
    for the DBAPI in use should be consulted for specific behavior.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符集是连接的**客户端字符集**。一些 MySQL DBAPI 会将其默认为诸如`latin1`之类的值，而一些则会使用`my.cnf`文件中的`default-character-set`设置。应该查阅所使用的
    DBAPI 的文档以获取具体行为。
- en: 'The encoding used for Unicode has traditionally been `''utf8''`. However, for
    MySQL versions 5.5.3 and MariaDB 5.5 on forward, a new MySQL-specific encoding
    `''utf8mb4''` has been introduced, and as of MySQL 8.0 a warning is emitted by
    the server if plain `utf8` is specified within any server-side directives, replaced
    with `utf8mb3`. The rationale for this new encoding is due to the fact that MySQL’s
    legacy utf-8 encoding only supports codepoints up to three bytes instead of four.
    Therefore, when communicating with a MySQL or MariaDB database that includes codepoints
    more than three bytes in size, this new charset is preferred, if supported by
    both the database as well as the client DBAPI, as in:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 Unicode 的编码传统上一直是`'utf8'`。然而，从 MySQL 版本 5.5.3 和 MariaDB 5.5 开始，引入了一个新的 MySQL
    特定编码`'utf8mb4'`，而且自 MySQL 8.0 起，如果在任何服务器端指令中指定了纯`utf8`，服务器会发出警告，并用`utf8mb3`替换。之所以使用这种新编码的原因是因为
    MySQL 的传统 utf-8 编码只支持三字节的代码点而不是四字节。因此，在与包含超过三字节大小的代码点的 MySQL 或 MariaDB 数据库通信时，如果数据库和客户端
    DBAPI 都支持，首选使用这种新的字符集，如下所示：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: All modern DBAPIs should support the `utf8mb4` charset.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代的 DBAPI 都应支持`utf8mb4`字符集。
- en: In order to use `utf8mb4` encoding for a schema that was created with legacy
    `utf8`, changes to the MySQL/MariaDB schema and/or server configuration may be
    required.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对使用了传统`utf8`的模式使用`utf8mb4`编码，可能需要对 MySQL/MariaDB 模式和/或服务器配置进行更改。
- en: See also
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The utf8mb4 Character Set](https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html)
    - in the MySQL documentation'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[utf8mb4 字符集](https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html)
    - 在 MySQL 文档中'
- en: '### Dealing with Binary Data Warnings and Unicode'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '### 处理二进制数据警告和 Unicode'
- en: 'MySQL versions 5.6, 5.7 and later (not MariaDB at the time of this writing)
    now emit a warning when attempting to pass binary data to the database, while
    a character set encoding is also in place, when the binary data itself is not
    valid for that encoding:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作本文时，MySQL 版本 5.6、5.7 和以后版本（不包括 MariaDB）现在在尝试将二进制数据传递到数据库时会发出警告，同时也设置了字符集编码，但是二进制数据本身对于该编码来说不合法：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This warning is due to the fact that the MySQL client library is attempting
    to interpret the binary string as a unicode object even if a datatype such as
    [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    is in use. To resolve this, the SQL statement requires a binary “character set
    introducer” be present before any non-NULL value that renders like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此警告是由于 MySQL 客户端库尝试将二进制字符串解释为 Unicode 对象，即使使用了诸如[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")这样的数据类型也是如此。要解决此问题，SQL 语句在任何呈现如下的非 NULL 值之前都需要存在一个二进制的“字符集介绍”：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'These character set introducers are provided by the DBAPI driver, assuming
    the use of mysqlclient or PyMySQL (both of which are recommended). Add the query
    string parameter `binary_prefix=true` to the URL to repair this warning:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符集介绍由 DBAPI 驱动程序提供，假设使用了 mysqlclient 或 PyMySQL（两者都是推荐的）。将查询字符串参数`binary_prefix=true`添加到
    URL 中以修复此警告：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `binary_prefix` flag may or may not be supported by other MySQL drivers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`binary_prefix`标志可能受到其他 MySQL 驱动程序的支持与否的影响。'
- en: SQLAlchemy itself cannot render this `_binary` prefix reliably, as it does not
    work with the NULL value, which is valid to be sent as a bound parameter. As the
    MySQL driver renders parameters directly into the SQL string, it’s the most efficient
    place for this additional keyword to be passed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 本身无法可靠地渲染这个`_binary`前缀，因为它不适用于 NULL 值，而绑定参数时 NULL 值是有效的。由于 MySQL
    驱动程序将参数直接渲染到 SQL 字符串中，这是传递此附加关键字的最有效位置。
- en: See also
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Character set introducers](https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html)
    - on the MySQL website'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[字符集介绍](https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html) -
    在 MySQL 网站上'
- en: ANSI Quoting Style
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ANSI 引用风格
- en: MySQL / MariaDB feature two varieties of identifier “quoting style”, one using
    backticks and the other using quotes, e.g. ``some_identifier`` vs. `"some_identifier"`.
    All MySQL dialects detect which version is in use by checking the value of [sql_mode](#mysql-sql-mode)
    when a connection is first established with a particular [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This quoting style comes into play when rendering
    table and column names as well as when reflecting existing database structures.
    The detection is entirely automatic and no special configuration is needed to
    use either quoting style.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB 具有两种标识符“引用风格”，一种使用反引号，另一种使用引号，例如 ``some_identifier`` vs. `"some_identifier"`。所有
    MySQL 方言在首次使用特定 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    建立连接时，通过检查 [sql_mode](#mysql-sql-mode) 的值来检测使用的版本。此引用风格在呈现表和列名称以及反映现有数据库结构时起作用。检测完全是自动的，不需要任何特殊配置来使用任一引用风格。
- en: '## Changing the sql_mode'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '## 更改 sql_mode'
- en: MySQL supports operating in multiple [Server SQL Modes](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html)
    for both Servers and Clients. To change the `sql_mode` for a given application,
    a developer can leverage SQLAlchemy’s Events system.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 支持在多个 [服务器 SQL 模式](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html)下运行，对于服务器和客户端都是如此。要为给定应用程序更改
    `sql_mode`，开发人员可以利用 SQLAlchemy 的事件系统。
- en: 'In the following example, the event system is used to set the `sql_mode` on
    the `first_connect` and `connect` events:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，事件系统用于在 `first_connect` 和 `connect` 事件上设置 `sql_mode`：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the example illustrated above, the “connect” event will invoke the “SET”
    statement on the connection at the moment a particular DBAPI connection is first
    created for a given Pool, before the connection is made available to the connection
    pool. Additionally, because the function was registered with `insert=True`, it
    will be prepended to the internal list of registered functions.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面示例中，当特定的 DBAPI 连接首次为给定的连接池创建时，“connect”事件将在连接可供连接池使用之前在连接上调用“SET”语句。此外，因为函数被注册为
    `insert=True`，它将被添加到已注册函数的内部列表之前。
- en: MySQL / MariaDB SQL Extensions
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL / MariaDB SQL 扩展
- en: 'Many of the MySQL / MariaDB SQL extensions are handled through SQLAlchemy’s
    generic function and operator support:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 MySQL / MariaDB 的 SQL 扩展都通过 SQLAlchemy 的通用函数和操作符支持：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And of course any valid SQL statement can be executed as a string as well.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，任何有效的 SQL 语句也可以作为字符串执行。
- en: Some limited direct support for MySQL / MariaDB extensions to SQL is currently
    available.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可以直接支持一些有限的 MySQL / MariaDB 对 SQL 的扩展。
- en: 'INSERT..ON DUPLICATE KEY UPDATE: See [INSERT…ON DUPLICATE KEY UPDATE (Upsert)](#mysql-insert-on-duplicate-key-update)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: INSERT..ON DUPLICATE KEY UPDATE：参见 [INSERT…ON DUPLICATE KEY UPDATE (Upsert)](#mysql-insert-on-duplicate-key-update)
- en: 'SELECT pragma, use [`Select.prefix_with()`](../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") and [`Query.prefix_with()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.prefix_with
    "sqlalchemy.orm.Query.prefix_with"):'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELECT 命令，使用[`Select.prefix_with()`](../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with")和[`Query.prefix_with()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.prefix_with
    "sqlalchemy.orm.Query.prefix_with")：
- en: '[PRE18]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'UPDATE with LIMIT:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有 LIMIT 的 UPDATE：
- en: '[PRE19]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'optimizer hints, use [`Select.prefix_with()`](../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") and [`Query.prefix_with()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.prefix_with
    "sqlalchemy.orm.Query.prefix_with"):'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化器提示，使用[`Select.prefix_with()`](../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with")和[`Query.prefix_with()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.prefix_with
    "sqlalchemy.orm.Query.prefix_with")：
- en: '[PRE20]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'index hints, use [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") and [`Query.with_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_hint
    "sqlalchemy.orm.Query.with_hint"):'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引提示，使用[`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")和[`Query.with_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_hint
    "sqlalchemy.orm.Query.with_hint")：
- en: '[PRE21]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'MATCH operator support:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MATCH 运算符支持：
- en: '[PRE22]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: INSERT/DELETE…RETURNING
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: INSERT/DELETE…RETURNING
- en: The MariaDB dialect supports 10.5+’s `INSERT..RETURNING` and `DELETE..RETURNING`
    (10.0+) syntaxes. `INSERT..RETURNING` may be used automatically in some cases
    in order to fetch newly generated identifiers in place of the traditional approach
    of using `cursor.lastrowid`, however `cursor.lastrowid` is currently still preferred
    for simple single-statement cases for its better performance.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB方言支持10.5+的`INSERT..RETURNING`和`DELETE..RETURNING`（10.0+）语法。在某些情况下，`INSERT..RETURNING`可以自动使用，以获取新生成的标识符，而不是使用`cursor.lastrowid`的传统方法，但是对于简单的单语句情况，目前仍更喜欢使用`cursor.lastrowid`，因为它的性能更好。
- en: 'To specify an explicit `RETURNING` clause, use the `_UpdateBase.returning()`
    method on a per-statement basis:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要在每个语句的基础上使用显式的`RETURNING`子句，请使用_UpdateBase.returning()方法：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'New in version 2.0: Added support for MariaDB RETURNING'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能：增加了MariaDB RETURNING支持
- en: '## INSERT…ON DUPLICATE KEY UPDATE (Upsert)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '## 插入…在重复键更新时（Upsert）'
- en: MySQL / MariaDB allow “upserts” (update or insert) of rows into a table via
    the `ON DUPLICATE KEY UPDATE` clause of the `INSERT` statement. A candidate row
    will only be inserted if that row does not match an existing primary or unique
    key in the table; otherwise, an UPDATE will be performed. The statement allows
    for separate specification of the values to INSERT versus the values for UPDATE.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB允许通过INSERT语句的ON DUPLICATE KEY UPDATE子句将行“upserts”（更新或插入）到表中。只有在该行不匹配表中现有的主键或唯一键时，候选行才会被插入；否则，将执行更新。该语句允许分开指定要插入的值与要更新的值。
- en: 'SQLAlchemy provides `ON DUPLICATE KEY UPDATE` support via the MySQL-specific
    [`insert()`](#sqlalchemy.dialects.mysql.insert "sqlalchemy.dialects.mysql.insert")
    function, which provides the generative method [`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update"):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy通过MySQL特定的[`insert()`](#sqlalchemy.dialects.mysql.insert "sqlalchemy.dialects.mysql.insert")函数提供`ON
    DUPLICATE KEY UPDATE`支持，该函数提供了生成方法[`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Unlike PostgreSQL’s “ON CONFLICT” phrase, the “ON DUPLICATE KEY UPDATE” phrase
    will always match on any primary key or unique key, and will always perform an
    UPDATE if there’s a match; there are no options for it to raise an error or to
    skip performing an UPDATE.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 不同于PostgreSQL的“ON CONFLICT”短语，"ON DUPLICATE KEY UPDATE"短语将始终匹配任何主键或唯一键，并且如果有匹配，将始终执行更新；它没有选项可以引发错误或跳过执行更新。
- en: '`ON DUPLICATE KEY UPDATE` is used to perform an update of the already existing
    row, using any combination of new values as well as values from the proposed insertion.
    These values are normally specified using keyword arguments passed to the [`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") given column key values
    (usually the name of the column, unless it specifies [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column") ) as keys and literal or SQL expressions as values:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON DUPLICATE KEY UPDATE`用于对已存在的行执行更新，使用新值的任何组合以及提议插入的值。这些值通常使用传递给[`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")的关键字参数指定为列键值（通常是列的名称，除非它指定了[`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column")）作为键，字面值或SQL表达式作为值：'
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In a manner similar to that of `UpdateBase.values()`, other parameter forms
    are accepted, including a single dictionary:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与`UpdateBase.values()`类似的方式，也接受其他参数形式，包括一个单一的字典：
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'as well as a list of 2-tuples, which will automatically provide a parameter-ordered
    UPDATE statement in a manner similar to that described at [Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates).
    Unlike the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object, no special flag is needed to specify the intent since the argument form
    is this context is unambiguous:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以及一个2-tuple列表，它将自动提供类似于[参数有序更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates)描述的参数有序UPDATE语句的方式。与[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")对象不同，不需要特殊标志来指定意图，因为在此上下文中的参数形式是清楚的：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Changed in version 1.3: support for parameter-ordered UPDATE clause within
    MySQL ON DUPLICATE KEY UPDATE'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的更改：支持MySQL ON DUPLICATE KEY UPDATE内的参数有序UPDATE子句
- en: Warning
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") method does **not**
    take into account Python-side default UPDATE values or generation functions, e.g.
    e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON DUPLICATE
    KEY style of UPDATE, unless they are manually specified explicitly in the parameters.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") 方法 **不** 考虑 Python
    端的默认 UPDATE 值或生成函数，例如使用 [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 指定的值。这些值不会用于 ON DUPLICATE KEY 样式的 UPDATE，除非在参数中手动明确指定。'
- en: 'In order to refer to the proposed insertion row, the special alias [`Insert.inserted`](#sqlalchemy.dialects.mysql.Insert.inserted
    "sqlalchemy.dialects.mysql.Insert.inserted") is available as an attribute on the
    [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    object; this object is a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which contains all columns of the
    target table:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引用提议的插入行，[`Insert.inserted`](#sqlalchemy.dialects.mysql.Insert.inserted "sqlalchemy.dialects.mysql.Insert.inserted")
    特殊别名可作为 [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    对象上的属性；此对象是一个 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，包含目标表的所有列：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When rendered, the “inserted” namespace will produce the expression `VALUES(<columnname>)`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染时，“inserted” 命名空间将生成表达式 `VALUES(<columnname>)`。
- en: 'New in version 1.2: Added support for MySQL ON DUPLICATE KEY UPDATE clause'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中新增了对 MySQL ON DUPLICATE KEY UPDATE 子句的支持。
- en: rowcount Support
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rowcount 支持
- en: SQLAlchemy standardizes the DBAPI `cursor.rowcount` attribute to be the usual
    definition of “number of rows matched by an UPDATE or DELETE” statement. This
    is in contradiction to the default setting on most MySQL DBAPI drivers, which
    is “number of rows actually modified/deleted”. For this reason, the SQLAlchemy
    MySQL dialects always add the `constants.CLIENT.FOUND_ROWS` flag, or whatever
    is equivalent for the target dialect, upon connection. This setting is currently
    hardcoded.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 将 DBAPI `cursor.rowcount` 属性标准化为“UPDATE 或 DELETE 语句匹配的行数”的通常定义。这与大多数
    MySQL DBAPI 驱动程序的默认设置相矛盾，后者是“实际修改/删除的行数”。因此，SQLAlchemy MySQL 方言在连接时始终添加 `constants.CLIENT.FOUND_ROWS`
    标志，或者在目标方言上等效的标志。这个设置目前是硬编码的。
- en: See also
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")'
- en: '## MySQL / MariaDB- Specific Index Options'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '## MySQL / MariaDB 特定索引选项'
- en: MySQL and MariaDB-specific extensions to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct are available.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于 MySQL 和 MariaDB 的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造的特定扩展。
- en: Index Length
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引长度
- en: 'MySQL and MariaDB both provide an option to create index entries with a certain
    length, where “length” refers to the number of characters or bytes in each value
    which will become part of the index. SQLAlchemy provides this feature via the
    `mysql_length` and/or `mariadb_length` parameters:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 都提供了一个选项，可以创建一定长度的索引条目，其中“长度”是指每个值中的字符数或字节数，这些值将成为索引的一部分。SQLAlchemy
    通过 `mysql_length` 和/或 `mariadb_length` 参数提供了这个功能：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Prefix lengths are given in characters for nonbinary string types and in bytes
    for binary string types. The value passed to the keyword argument *must* be either
    an integer (and, thus, specify the same prefix length value for all columns of
    the index) or a dict in which keys are column names and values are prefix length
    values for corresponding columns. MySQL and MariaDB only allow a length for a
    column of an index if it is for a CHAR, VARCHAR, TEXT, BINARY, VARBINARY and BLOB.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非二进制字符串类型，前缀长度以字符表示，对于二进制字符串类型，以字节表示。传递给关键字参数的值 *必须* 是整数（因此对索引的所有列都指定相同的前缀长度值）或字典，在字典中，键是列名，值是相应列的前缀长度值。MySQL
    和 MariaDB 仅允许对索引的列指定长度，如果它是 CHAR、VARCHAR、TEXT、BINARY、VARBINARY 和 BLOB 类型的列。
- en: Index Prefixes
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引前缀
- en: 'MySQL storage engines permit you to specify an index prefix when creating an
    index. SQLAlchemy provides this feature via the `mysql_prefix` parameter on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 存储引擎允许在创建索引时指定索引前缀。SQLAlchemy通过[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")的`mysql_prefix`参数提供了这个功能：
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX, so it *must* be a valid index prefix for your MySQL storage
    engine.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递给底层的CREATE INDEX，因此它*必须*是您的 MySQL 存储引擎的有效索引前缀。
- en: See also
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CREATE INDEX](https://dev.mysql.com/doc/refman/5.0/en/create-index.html) -
    MySQL documentation'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[CREATE INDEX](https://dev.mysql.com/doc/refman/5.0/en/create-index.html) -
    MySQL 文档'
- en: Index Types
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引类型
- en: 'Some MySQL storage engines permit you to specify an index type when creating
    an index or primary key constraint. SQLAlchemy provides this feature via the `mysql_using`
    parameter on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 MySQL 存储引擎允许在创建索引或主键约束时指定索引类型。SQLAlchemy通过[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")的`mysql_using`参数提供了这个功能：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As well as the `mysql_using` parameter on [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以及[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")上的`mysql_using`参数：
- en: '[PRE32]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX or PRIMARY KEY clause, so it *must* be a valid index type
    for your MySQL storage engine.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递给底层的CREATE INDEX或PRIMARY KEY子句，因此它*必须*是您的 MySQL 存储引擎的有效索引类型。
- en: 'More information can be found at:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请查看：
- en: '[https://dev.mysql.com/doc/refman/5.0/en/create-index.html](https://dev.mysql.com/doc/refman/5.0/en/create-index.html)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.0/en/create-index.html](https://dev.mysql.com/doc/refman/5.0/en/create-index.html)'
- en: '[https://dev.mysql.com/doc/refman/5.0/en/create-table.html](https://dev.mysql.com/doc/refman/5.0/en/create-table.html)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.0/en/create-table.html](https://dev.mysql.com/doc/refman/5.0/en/create-table.html)'
- en: Index Parsers
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引解析器
- en: 'CREATE FULLTEXT INDEX in MySQL also supports a “WITH PARSER” option. This is
    available using the keyword argument `mysql_with_parser`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 中的CREATE FULLTEXT INDEX也支持“WITH PARSER”选项。可以使用关键字参数`mysql_with_parser`来实现：
- en: '[PRE33]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'New in version 1.3.  ## MySQL / MariaDB Foreign Keys'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '1.3 版本中的新功能  ## MySQL / MariaDB 外键'
- en: MySQL and MariaDB’s behavior regarding foreign keys has some important caveats.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 关于外键的行为有一些重要的注意事项。
- en: Foreign Key Arguments to Avoid
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免使用的外键参数
- en: 'Neither MySQL nor MariaDB support the foreign key arguments “DEFERRABLE”, “INITIALLY”,
    or “MATCH”. Using the `deferrable` or `initially` keyword argument with [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") or [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") will have the effect of these keywords being rendered
    in a DDL expression, which will then raise an error on MySQL or MariaDB. In order
    to use these keywords on a foreign key while having them ignored on a MySQL /
    MariaDB backend, use a custom compile rule:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 都不支持外键参数“DEFERRABLE”、“INITIALLY”或“MATCH”。在[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")或[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")中使用`deferrable`或`initially`关键字参数将导致这些关键字在 DDL 表达式中被渲染，然后在
    MySQL 或 MariaDB 上引发错误。为了在外键上使用这些关键字，同时在 MySQL / MariaDB 后端上忽略它们，可以使用自定义编译规则：
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The “MATCH” keyword is in fact more insidious, and is explicitly disallowed
    by SQLAlchemy in conjunction with the MySQL or MariaDB backends. This argument
    is silently ignored by MySQL / MariaDB, but in addition has the effect of ON UPDATE
    and ON DELETE options also being ignored by the backend. Therefore MATCH should
    never be used with the MySQL / MariaDB backends; as is the case with DEFERRABLE
    and INITIALLY, custom compilation rules can be used to correct a ForeignKeyConstraint
    at DDL definition time.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: “MATCH”关键字实际上更加隐蔽，而且在与 MySQL 或 MariaDB 后端一起使用时，SQLAlchemy明确禁止使用。这个参数在 MySQL
    / MariaDB 中被静默忽略，但另外的效果是 ON UPDATE 和 ON DELETE 选项也被后端忽略。因此，不应该在 MySQL / MariaDB
    后端使用 MATCH；与 DEFERRABLE 和 INITIALLY 一样，可以使用自定义编译规则来在 DDL 定义时纠正 ForeignKeyConstraint。
- en: Reflection of Foreign Key Constraints
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外键约束的反射
- en: 'Not all MySQL / MariaDB storage engines support foreign keys. When using the
    very common `MyISAM` MySQL storage engine, the information loaded by table reflection
    will not include foreign keys. For these tables, you may supply a `ForeignKeyConstraint`
    at reflection time:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有 MySQL / MariaDB 存储引擎都支持外键。在使用非常常见的 `MyISAM` MySQL 存储引擎时，通过表反射加载的信息将不包括外键。对于这些表，您可以在反射时提供一个
    `ForeignKeyConstraint`：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: See also
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CREATE TABLE arguments including Storage Engines](#mysql-storage-engines)  ##
    MySQL / MariaDB Unique Constraints and Reflection'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[包括存储引擎的 CREATE TABLE 参数](#mysql-storage-engines)  ## MySQL / MariaDB 唯一约束和反射'
- en: SQLAlchemy supports both the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct with the flag `unique=True`, indicating a
    UNIQUE index, as well as the [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct, representing a UNIQUE constraint.
    Both objects/syntaxes are supported by MySQL / MariaDB when emitting DDL to create
    these constraints. However, MySQL / MariaDB does not have a unique constraint
    construct that is separate from a unique index; that is, the “UNIQUE” constraint
    on MySQL / MariaDB is equivalent to creating a “UNIQUE INDEX”.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 支持带有标志 `unique=True` 的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造，表示唯一索引，以及表示唯一约束的 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 构造。在创建这些约束时，MySQL / MariaDB 支持这两种对象/语法。但是，MySQL
    / MariaDB 没有一个独立于唯一索引的唯一约束构造；也就是说，在 MySQL / MariaDB 上，“UNIQUE” 约束等同于创建一个“UNIQUE
    INDEX”。
- en: When reflecting these constructs, the [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") methods will
    **both** return an entry for a UNIQUE index in MySQL / MariaDB. However, when
    performing full table reflection using `Table(..., autoload_with=engine)`, the
    [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct is **not** part of the fully reflected
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct under any circumstances; this construct is always represented by a [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") with the `unique=True` setting present in the [`Table.indexes`](../core/metadata.html#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") collection.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在反射这些构造时，[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") 和 [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 方法都会在 MySQL /
    MariaDB 中为唯一索引返回一个条目。然而，在使用 `Table(..., autoload_with=engine)` 执行完整表反射时，[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 构造在任何情况下都不是完全反映的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 构造的一部分；这个构造总是由 [`Table.indexes`](../core/metadata.html#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") 集合中存在 `unique=True` 设置的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 表示。
- en: TIMESTAMP / DATETIME issues
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TIMESTAMP / DATETIME 问题
- en: '### Rendering ON UPDATE CURRENT TIMESTAMP for MySQL / MariaDB’s explicit_defaults_for_timestamp'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '### 为 MySQL / MariaDB 的 explicit_defaults_for_timestamp 启用 ON UPDATE CURRENT
    TIMESTAMP 渲染'
- en: MySQL / MariaDB have historically expanded the DDL for the [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype into the phrase “TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ON UPDATE CURRENT_TIMESTAMP”, which includes non-standard SQL that automatically
    updates the column with the current timestamp when an UPDATE occurs, eliminating
    the usual need to use a trigger in such a case where server-side update changes
    are desired.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB 在历史上将 [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") 数据类型的 DDL 扩展为短语“TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ON UPDATE CURRENT_TIMESTAMP”，其中包含非标准 SQL，当发生 UPDATE 时自动使用当前时间戳更新列，消除了在需要服务器端更新更改的情况下使用触发器的常规需求。
- en: MySQL 5.6 introduced a new flag [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    which disables the above behavior, and in MySQL 8 this flag defaults to true,
    meaning in order to get a MySQL “on update timestamp” without changing this flag,
    the above DDL must be rendered explicitly. Additionally, the same DDL is valid
    for use of the `DATETIME` datatype as well.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.6 引入了一个新的标志 [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)，它禁用了上述行为，在
    MySQL 8 中，此标志默认为 true，这意味着为了获得 MySQL 的“更新时间戳”，而不改变此标志，上述 DDL 必须显式地呈现。此外，相同的 DDL
    对于 `DATETIME` 数据类型也是有效的。
- en: SQLAlchemy’s MySQL dialect does not yet have an option to generate MySQL’s “ON
    UPDATE CURRENT_TIMESTAMP” clause, noting that this is not a general purpose “ON
    UPDATE” as there is no such syntax in standard SQL. SQLAlchemy’s [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") parameter is currently not related to this special
    MySQL behavior.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的 MySQL 方言尚未提供生成 MySQL 的“ON UPDATE CURRENT_TIMESTAMP”子句的选项，注意这不是通用的“ON
    UPDATE”，因为标准 SQL 中没有这样的语法。SQLAlchemy 的 [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") 参数目前与此特殊的 MySQL 行为无关。
- en: 'To generate this DDL, make use of the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter and pass a textual clause that also includes
    the ON UPDATE clause:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成此 DDL，请使用 [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 参数，并传递一个包含 ON UPDATE 子句的文本子句：
- en: '[PRE36]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The same instructions apply to use of the [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") and [`DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME") datatypes:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的说明适用于使用 [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    和 [`DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME "sqlalchemy.types.DATETIME")
    数据类型：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Even though the [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") feature does not generate this DDL, it still may be
    desirable to signal to the ORM that this updated value should be fetched. This
    syntax looks like the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") 功能不生成此 DDL，但仍然有可能希望向 ORM 发出信号，表示应该获取此更新的值。此语法如下所示：
- en: '[PRE38]  ### TIMESTAMP Columns and NULL'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE38]  ### TIMESTAMP 列和 NULL'
- en: 'MySQL historically enforces that a column which specifies the TIMESTAMP datatype
    implicitly includes a default value of CURRENT_TIMESTAMP, even though this is
    not stated, and additionally sets the column as NOT NULL, the opposite behavior
    vs. that of all other datatypes:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 历史上要求指定 TIMESTAMP 数据类型的列隐式包括默认值 CURRENT_TIMESTAMP，即使没有明确说明，并且另外将列设置为 NOT
    NULL，这与所有其他数据类型相反的行为：
- en: '[PRE39]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Above, we see that an INTEGER column defaults to NULL, unless it is specified
    with NOT NULL. But when the column is of type TIMESTAMP, an implicit default of
    CURRENT_TIMESTAMP is generated which also coerces the column to be a NOT NULL,
    even though we did not specify it as such.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以上，我们看到一个 INTEGER 列默认为 NULL，除非指定为 NOT NULL。但是当列的类型为 TIMESTAMP 时，会生成一个隐式的默认值
    CURRENT_TIMESTAMP，这也会强制使列成为 NOT NULL，即使我们没有这样指定。
- en: This behavior of MySQL can be changed on the MySQL side using the [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    configuration flag introduced in MySQL 5.6\. With this server setting enabled,
    TIMESTAMP columns behave like any other datatype on the MySQL side with regards
    to defaults and nullability.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 的这种行为可以通过 MySQL 方面的 [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    配置标志在 MySQL 5.6 中引入。启用此服务器设置后，TIMESTAMP 列在 MySQL 方面的默认值和可空性方面的行为类似于任何其他数据类型。
- en: 'However, to accommodate the vast majority of MySQL databases that do not specify
    this new flag, SQLAlchemy emits the “NULL” specifier explicitly with any TIMESTAMP
    column that does not specify `nullable=False`. In order to accommodate newer databases
    that specify `explicit_defaults_for_timestamp`, SQLAlchemy also emits NOT NULL
    for TIMESTAMP columns that do specify `nullable=False`. The following example
    illustrates:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了适应大多数未指定此新标志的 MySQL 数据库，SQLAlchemy 在任何未指定 `nullable=False` 的 TIMESTAMP
    列中都显式地发出“NULL”指示符。为了适应指定了 `explicit_defaults_for_timestamp` 的新数据库，SQLAlchemy 还为指定了
    `nullable=False` 的 TIMESTAMP 列发出 NOT NULL。以下示例说明了：
- en: '[PRE40]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'output:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE41]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: MySQL SQL Constructs
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL SQL 构造
- en: '| Object Name | Description |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [match](#sqlalchemy.dialects.mysql.match) | Produce a `MATCH (X, Y) AGAINST
    (''TEXT'')` clause. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [match](#sqlalchemy.dialects.mysql.match) | 生成一个 `MATCH (X, Y) AGAINST (''TEXT'')`
    子句。'
- en: '[PRE42]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Produce a `MATCH (X, Y) AGAINST ('TEXT')` clause.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 `MATCH (X, Y) AGAINST ('TEXT')` 子句。
- en: 'E.g.:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Would produce SQL resembling:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成类似于 SQL 的代码：
- en: '[PRE44]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The [`match()`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    function is a standalone version of the [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") method available on all SQL expressions,
    as when [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") is used, but allows to pass multiple
    columns
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[`match()`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    函数是所有 SQL 表达式可用的 [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") 方法的独立版本，与使用 [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") 时一样，但允许传递多个列。'
- en: 'Parameters:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`cols` – column expressions to match against'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cols` – 要匹配的列表达式'
- en: '`against` – expression to be compared towards'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`against` – 要比较的表达式'
- en: '`in_boolean_mode` – boolean, set “boolean mode” to true'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_boolean_mode` – 布尔值，将“布尔模式”设置为 true'
- en: '`in_natural_language_mode` – boolean , set “natural language” to true'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_natural_language_mode` – 布尔值，将“自然语言”设置为 true'
- en: '`with_query_expansion` – boolean, set “query expansion” to true'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_query_expansion` – 布尔值，将“查询扩展”设置为 true'
- en: New in version 1.4.19.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.19 开始。
- en: See also
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match")'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match")'
- en: '**Members**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[in_boolean_mode()](#sqlalchemy.dialects.mysql.match.in_boolean_mode), [in_natural_language_mode()](#sqlalchemy.dialects.mysql.match.in_natural_language_mode),
    [inherit_cache](#sqlalchemy.dialects.mysql.match.inherit_cache), [with_query_expansion()](#sqlalchemy.dialects.mysql.match.with_query_expansion)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[in_boolean_mode()](#sqlalchemy.dialects.mysql.match.in_boolean_mode), [in_natural_language_mode()](#sqlalchemy.dialects.mysql.match.in_natural_language_mode),
    [inherit_cache](#sqlalchemy.dialects.mysql.match.inherit_cache), [with_query_expansion()](#sqlalchemy.dialects.mysql.match.with_query_expansion)'
- en: '**Class signature**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    (`sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"))
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    (`sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"))。
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Apply the “IN BOOLEAN MODE” modifier to the MATCH expression.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 对 MATCH 表达式应用“IN BOOLEAN MODE”修饰符。
- en: 'Returns:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    instance with modifications applied.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    实例，应用了修改。
- en: '[PRE46]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Apply the “IN NATURAL LANGUAGE MODE” modifier to the MATCH expression.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对 MATCH 表达式应用“IN NATURAL LANGUAGE MODE”修饰符。
- en: 'Returns:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    instance with modifications applied.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    实例，应用了修改。
- en: '[PRE47]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Indicate if this [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") 实例是否应该使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性默认为 `None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为 `False`，但还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SQL 与对象对应的属性不基于该类本身的属性而变化，并且不是基于其超类，则可以在特定类上设置此标志为`True`。
- en: See also
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](../core/compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用自定义构造的缓存支持](../core/compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL
    构造的 [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE48]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Apply the “WITH QUERY EXPANSION” modifier to the MATCH expression.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 对 MATCH 表达式应用 “WITH QUERY EXPANSION” 修饰符。
- en: 'Returns:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    instance with modifications applied.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 一个具有应用修改的新 [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    实例。
- en: MySQL Data Types
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL 数据类型
- en: 'As with all SQLAlchemy dialects, all UPPERCASE types that are known to be valid
    with MySQL are importable from the top level dialect:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有 SQLAlchemy 方言一样，已知与 MySQL 兼容的所有大写类型都可以从顶级方言导入：
- en: '[PRE49]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Types which are specific to MySQL, or have MySQL-specific construction arguments,
    are as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于 MySQL 或具有 MySQL 特定构造参数的类型如下：
- en: '| Object Name | Description |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BIGINT](#sqlalchemy.dialects.mysql.BIGINT) | MySQL BIGINTEGER type. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| [BIGINT](#sqlalchemy.dialects.mysql.BIGINT) | MySQL BIGINTEGER 类型。 |'
- en: '| [BIT](#sqlalchemy.dialects.mysql.BIT) | MySQL BIT type. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| [BIT](#sqlalchemy.dialects.mysql.BIT) | MySQL BIT 类型。 |'
- en: '| [CHAR](#sqlalchemy.dialects.mysql.CHAR) | MySQL CHAR type, for fixed-length
    character data. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| [CHAR](#sqlalchemy.dialects.mysql.CHAR) | MySQL CHAR 类型，用于固定长度的字符数据。 |'
- en: '| [DATETIME](#sqlalchemy.dialects.mysql.DATETIME) | MySQL DATETIME type. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| [DATETIME](#sqlalchemy.dialects.mysql.DATETIME) | MySQL DATETIME 类型。 |'
- en: '| [DECIMAL](#sqlalchemy.dialects.mysql.DECIMAL) | MySQL DECIMAL type. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| [DECIMAL](#sqlalchemy.dialects.mysql.DECIMAL) | MySQL DECIMAL 类型。 |'
- en: '| [ENUM](#sqlalchemy.dialects.mysql.ENUM) | MySQL ENUM type. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| [ENUM](#sqlalchemy.dialects.mysql.ENUM) | MySQL ENUM 类型。 |'
- en: '| [FLOAT](#sqlalchemy.dialects.mysql.FLOAT) | MySQL FLOAT type. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| [FLOAT](#sqlalchemy.dialects.mysql.FLOAT) | MySQL FLOAT 类型。 |'
- en: '| [INTEGER](#sqlalchemy.dialects.mysql.INTEGER) | MySQL INTEGER type. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| [INTEGER](#sqlalchemy.dialects.mysql.INTEGER) | MySQL INTEGER 类型。 |'
- en: '| [JSON](#sqlalchemy.dialects.mysql.JSON) | MySQL JSON type. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| [JSON](#sqlalchemy.dialects.mysql.JSON) | MySQL JSON 类型。 |'
- en: '| [LONGBLOB](#sqlalchemy.dialects.mysql.LONGBLOB) | MySQL LONGBLOB type, for
    binary data up to 2^32 bytes. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| [LONGBLOB](#sqlalchemy.dialects.mysql.LONGBLOB) | MySQL LONGBLOB 类型，用于存储最多
    2^32 字节的二进制数据。 |'
- en: '| [LONGTEXT](#sqlalchemy.dialects.mysql.LONGTEXT) | MySQL LONGTEXT type, for
    character storage encoded up to 2^32 bytes. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| [LONGTEXT](#sqlalchemy.dialects.mysql.LONGTEXT) | MySQL LONGTEXT 类型，用于存储编码长度达到
    2^32 字节的字符数据。 |'
- en: '| [MEDIUMBLOB](#sqlalchemy.dialects.mysql.MEDIUMBLOB) | MySQL MEDIUMBLOB type,
    for binary data up to 2^24 bytes. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| [MEDIUMBLOB](#sqlalchemy.dialects.mysql.MEDIUMBLOB) | MySQL MEDIUMBLOB 类型，用于存储最多
    2^24 字节的二进制数据。 |'
- en: '| [MEDIUMINT](#sqlalchemy.dialects.mysql.MEDIUMINT) | MySQL MEDIUMINTEGER type.
    |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| [MEDIUMINT](#sqlalchemy.dialects.mysql.MEDIUMINT) | MySQL MEDIUMINTEGER 类型。
    |'
- en: '| [MEDIUMTEXT](#sqlalchemy.dialects.mysql.MEDIUMTEXT) | MySQL MEDIUMTEXT type,
    for character storage encoded up to 2^24 bytes. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| [MEDIUMTEXT](#sqlalchemy.dialects.mysql.MEDIUMTEXT) | MySQL MEDIUMTEXT 类型，用于存储编码长度达到
    2^24 字节的字符数据。 |'
- en: '| [NCHAR](#sqlalchemy.dialects.mysql.NCHAR) | MySQL NCHAR type. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| [NCHAR](#sqlalchemy.dialects.mysql.NCHAR) | MySQL NCHAR 类型。 |'
- en: '| [NUMERIC](#sqlalchemy.dialects.mysql.NUMERIC) | MySQL NUMERIC type. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| [NUMERIC](#sqlalchemy.dialects.mysql.NUMERIC) | MySQL NUMERIC 类型。 |'
- en: '| [NVARCHAR](#sqlalchemy.dialects.mysql.NVARCHAR) | MySQL NVARCHAR type. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| [NVARCHAR](#sqlalchemy.dialects.mysql.NVARCHAR) | MySQL NVARCHAR 类型。 |'
- en: '| [REAL](#sqlalchemy.dialects.mysql.REAL) | MySQL REAL type. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| [REAL](#sqlalchemy.dialects.mysql.REAL) | MySQL REAL 类型。 |'
- en: '| [SET](#sqlalchemy.dialects.mysql.SET) | MySQL SET type. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| [SET](#sqlalchemy.dialects.mysql.SET) | MySQL SET 类型。 |'
- en: '| [SMALLINT](#sqlalchemy.dialects.mysql.SMALLINT) | MySQL SMALLINTEGER type.
    |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| [SMALLINT](#sqlalchemy.dialects.mysql.SMALLINT) | MySQL SMALLINTEGER 类型。
    |'
- en: '| [TIME](#sqlalchemy.dialects.mysql.TIME) | MySQL TIME type. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| [TIME](#sqlalchemy.dialects.mysql.TIME) | MySQL TIME 类型。 |'
- en: '| [TIMESTAMP](#sqlalchemy.dialects.mysql.TIMESTAMP) | MySQL TIMESTAMP type.
    |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| [TIMESTAMP](#sqlalchemy.dialects.mysql.TIMESTAMP) | MySQL 的 TIMESTAMP 类型。
    |'
- en: '| [TINYBLOB](#sqlalchemy.dialects.mysql.TINYBLOB) | MySQL TINYBLOB type, for
    binary data up to 2^8 bytes. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| [TINYBLOB](#sqlalchemy.dialects.mysql.TINYBLOB) | MySQL 的 TINYBLOB 类型，用于最多
    2^8 字节的二进制数据。 |'
- en: '| [TINYINT](#sqlalchemy.dialects.mysql.TINYINT) | MySQL TINYINT type. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| [TINYINT](#sqlalchemy.dialects.mysql.TINYINT) | MySQL 的 TINYINT 类型。 |'
- en: '| [TINYTEXT](#sqlalchemy.dialects.mysql.TINYTEXT) | MySQL TINYTEXT type, for
    character storage encoded up to 2^8 bytes. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| [TINYTEXT](#sqlalchemy.dialects.mysql.TINYTEXT) | MySQL 的 TINYTEXT 类型，用于最多
    2^8 字节的字符存储。 |'
- en: '| [VARCHAR](#sqlalchemy.dialects.mysql.VARCHAR) | MySQL VARCHAR type, for variable-length
    character data. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| [VARCHAR](#sqlalchemy.dialects.mysql.VARCHAR) | MySQL 的 VARCHAR 类型，用于可变长度的字符数据。
    |'
- en: '| [YEAR](#sqlalchemy.dialects.mysql.YEAR) | MySQL YEAR type, for single byte
    storage of years 1901-2155. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| [YEAR](#sqlalchemy.dialects.mysql.YEAR) | MySQL 的 YEAR 类型，用于存储 1901-2155
    年的单字节。 |'
- en: '[PRE50]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: MySQL BIGINTEGER type.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 的 BIGINTEGER 类型。
- en: '**Members**'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.BIGINT.__init__)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.BIGINT.__init__)'
- en: '**Class signature**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.BIGINT`](#sqlalchemy.dialects.mysql.BIGINT
    "sqlalchemy.dialects.mysql.BIGINT") (`sqlalchemy.dialects.mysql.types._IntegerType`,
    [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT "sqlalchemy.types.BIGINT"))
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.BIGINT`](#sqlalchemy.dialects.mysql.BIGINT)（`sqlalchemy.dialects.mysql.types._IntegerType`，[`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT)）
- en: '[PRE51]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Construct a BIGINTEGER.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 BIGINTEGER。
- en: 'Parameters:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选项，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选项。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选项。如果为 true，则值将作为左填充零的字符串存储。请注意，这不会影响底层数据库 API 返回的值，它们仍然是数字。'
- en: '[PRE52]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The SQL BINARY type.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 的 BINARY 类型。
- en: '**Class signature**'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.BINARY` (`sqlalchemy.types._Binary`)
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.BINARY`（`sqlalchemy.types._Binary`）
- en: '[PRE53]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: MySQL BIT type.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 的 BIT 类型。
- en: This type is for MySQL 5.0.3 or greater for MyISAM, and 5.0.5 or greater for
    MyISAM, MEMORY, InnoDB and BDB. For older versions, use a MSTinyInteger() type.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型适用于 MySQL 5.0.3 或更高版本的 MyISAM，以及 5.0.5 或更高版本的 MyISAM，MEMORY，InnoDB 和 BDB。对于较旧的版本，请使用
    MSTinyInteger() 类型。
- en: '**Members**'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.BIT.__init__)'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.BIT.__init__)'
- en: '**Class signature**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.BIT`](#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.BIT`](#sqlalchemy.dialects.mysql.BIT)（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine)）
- en: '[PRE54]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Construct a BIT.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 BIT。
- en: 'Parameters:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – Optional, number of bits.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选项，位数。'
- en: '[PRE55]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The SQL BLOB type.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 的 BLOB 类型。
- en: '**Class signature**'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.BLOB` ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.BLOB`（[`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary)）
- en: '[PRE56]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*inherited from the* `sqlalchemy.types.LargeBinary.__init__` *method of* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary)
    *的* `sqlalchemy.types.LargeBinary.__init__` *方法*'
- en: Construct a LargeBinary type.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 LargeBinary 类型。
- en: 'Parameters:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选项，在 DDL 语句中用于列的长度，对于那些接受长度的二进制类型，比如 MySQL 的 BLOB 类型。'
- en: '[PRE57]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The SQL BOOLEAN type.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 的 BOOLEAN 类型。
- en: '**Class signature**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.BOOLEAN` ([`sqlalchemy.types.Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"))
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.BOOLEAN`（[`sqlalchemy.types.Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean)）
- en: '[PRE58]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '*inherited from the* `sqlalchemy.types.Boolean.__init__` *method of* [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean) *的* `sqlalchemy.types.Boolean.__init__`
    *方法*'
- en: Construct a Boolean.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个布尔值。
- en: 'Parameters:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`create_constraint` –'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. If the boolean is generated as an int/smallint, also create
    a CHECK constraint on the table that ensures 1 or 0 as a value.
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。如果布尔值生成为 int/smallint，则还在表上创建一个 CHECK 约束，以确保值为 1 或 0。
- en: Note
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Boolean.name`](../core/type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") parameter or by setting up an appropriate naming convention;
    see [Configuring Constraint Naming Conventions](../core/constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议 CHECK 约束具有显式名称，以支持模式管理问题。这可以通过设置 [`Boolean.name`](../core/type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") 参数或设置适当的命名约定来实现；有关背景信息，请参阅[配置约束命名约定](../core/constraints.html#constraint-naming-conventions)。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：- 此标志现在默认为 False，意味着对非本地枚举类型不生成 CHECK 约束。
- en: '`name` – if a CHECK constraint is generated, specify the name of the constraint.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 如果生成 CHECK 约束，则指定约束的名称。'
- en: '[PRE59]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: MySQL CHAR type, for fixed-length character data.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL CHAR 类型，用于固定长度字符数据。
- en: '**Members**'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.CHAR.__init__)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.CHAR.__init__) '
- en: '**Class signature**'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.CHAR`](#sqlalchemy.dialects.mysql.CHAR "sqlalchemy.dialects.mysql.CHAR")
    (`sqlalchemy.dialects.mysql.types._StringType`, [`sqlalchemy.types.CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR"))
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.CHAR`](#sqlalchemy.dialects.mysql.CHAR "sqlalchemy.dialects.mysql.CHAR")
    (`sqlalchemy.dialects.mysql.types._StringType`, [`sqlalchemy.types.CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR"))
- en: '[PRE60]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Construct a CHAR.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 CHAR。
- en: 'Parameters:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – Maximum data length, in characters.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 最大数据长度，以字符为单位。'
- en: '`binary` – Optional, use the default binary collation for the national character
    set. This does not affect the type of data stored, use a BINARY type for binary
    data.'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 可选项，使用国家字符集的默认二进制排序。这不影响存储的数据类型，对于二进制数据，请使用 BINARY 类型。'
- en: '`collation` – Optional, request a particular collation. Must be compatible
    with the national character set.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选项，请求特定的排序规则。必须与国家字符集兼容。'
- en: '[PRE61]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The SQL DATE type.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DATE 类型。
- en: '**Class signature**'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.DATE` ([`sqlalchemy.types.Date`](../core/type_basics.html#sqlalchemy.types.Date
    "sqlalchemy.types.Date"))
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.DATE` ([`sqlalchemy.types.Date`](../core/type_basics.html#sqlalchemy.types.Date
    "sqlalchemy.types.Date"))
- en: '[PRE62]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: MySQL DATETIME type.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL DATETIME 类型。
- en: '**Members**'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.DATETIME.__init__)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.DATETIME.__init__)'
- en: '**Class signature**'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.DATETIME`](#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") ([`sqlalchemy.types.DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME"))
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.DATETIME`](#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") ([`sqlalchemy.types.DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME"))
- en: '[PRE63]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Construct a MySQL DATETIME type.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 MySQL DATETIME 类型。
- en: 'Parameters:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – not used by the MySQL dialect.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – MySQL 方言不使用。'
- en: '`fsp` –'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fsp` –'
- en: fractional seconds precision value. MySQL 5.6.4 supports storage of fractional
    seconds; this parameter will be used when emitting DDL for the DATETIME type.
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小数秒精度值。MySQL 5.6.4 支持存储小数秒；在为 DATETIME 类型生成 DDL 时将使用此参数。
- en: Note
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: DBAPI driver support for fractional seconds may be limited; current support
    includes MySQL Connector/Python.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于小数秒的 DBAPI 驱动程序支持可能有限；当前支持包括 MySQL Connector/Python。
- en: '[PRE64]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: MySQL DECIMAL type.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL DECIMAL 类型。
- en: '**Members**'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.DECIMAL.__init__)'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.DECIMAL.__init__)'
- en: '**Class signature**'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.DECIMAL`](#sqlalchemy.dialects.mysql.DECIMAL
    "sqlalchemy.dialects.mysql.DECIMAL") (`sqlalchemy.dialects.mysql.types._NumericType`,
    [`sqlalchemy.types.DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL
    "sqlalchemy.types.DECIMAL"))
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.DECIMAL`](#sqlalchemy.dialects.mysql.DECIMAL "sqlalchemy.dialects.mysql.DECIMAL")
    (`sqlalchemy.dialects.mysql.types._NumericType`, [`sqlalchemy.types.DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL
    "sqlalchemy.types.DECIMAL"))
- en: '[PRE65]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Construct a DECIMAL.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 构造 DECIMAL。
- en: 'Parameters:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果 scale 和 precision 都为 None，则值存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选的。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选的。 如果为真，则值将作为左填充零的字符串存储。 请注意，这不影响底层数据库 API 返回的值，后者仍然是数字。'
- en: '[PRE66]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: MySQL DOUBLE type.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL DOUBLE 类型。
- en: '**Class signature**'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.DOUBLE` (`sqlalchemy.dialects.mysql.types._FloatType`,
    [`sqlalchemy.types.DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE"))
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.DOUBLE` (`sqlalchemy.dialects.mysql.types._FloatType`,
    [`sqlalchemy.types.DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE"))
- en: '[PRE67]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Construct a DOUBLE.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 DOUBLE。
- en: Note
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE")
    type by default converts from float to Decimal, using a truncation that defaults
    to 10 digits. Specify either `scale=n` or `decimal_return_scale=n` in order to
    change this scale, or `asdecimal=False` to return values directly as Python floating
    points.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE")
    类型默认将浮点数转换为 Decimal，使用默认为 10 位的截断。 指定 `scale=n` 或 `decimal_return_scale=n` 以更改此比例，或指定
    `asdecimal=False` 以直接将值返回为 Python 浮点数。'
- en: 'Parameters:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。 如果比例和精度都是无，则值将存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选的。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选的。 如果为真，则值将作为左填充零的字符串存储。 请注意，这不影响底层数据库 API 返回的值，后者仍然是数字。'
- en: '[PRE68]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: MySQL ENUM type.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL ENUM 类型。
- en: '**Members**'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.ENUM.__init__)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.ENUM.__init__)'
- en: '**Class signature**'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.ENUM`](#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    (`sqlalchemy.types.NativeForEmulated`, [`sqlalchemy.types.Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), `sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.ENUM`](#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    (`sqlalchemy.types.NativeForEmulated`, [`sqlalchemy.types.Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), `sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE69]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Construct an ENUM.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 ENUM。
- en: 'E.g.:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE70]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Parameters:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`enums` –'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enums` –'
- en: The range of valid values for this ENUM. Values in enums are not quoted, they
    will be escaped and surrounded by single quotes when generating the schema. This
    object may also be a PEP-435-compliant enumerated type.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此 ENUM 的有效值范围。 在枚举中的值不带引号，生成模式时将被转义并用单引号括起来。 此对象还可以是符合 PEP-435 的枚举类型。
- en: '`strict` –'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strict` –'
- en: This flag has no effect.
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标志不起作用。
- en: 'Changed in version The: MySQL ENUM type as well as the base Enum type now validates
    all Python data values.'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本中更改：MySQL ENUM 类型以及基本 Enum 类型现在验证所有 Python 数据值。
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选的，用于此字符串值的列级字符集。 优先于 ‘ascii’ 或 ‘unicode’ 简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选的，用于此字符串值的列级排序。 优先于 ‘binary’ 简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为 False：`latin1` 字符集的简写，生成模式中的 ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为 False：`ucs2` 字符集的简写，生成模式中的 UNICODE。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为 False：简写，选择与列的字符集匹配的二进制排序类型。 在模式中生成 BINARY。 这不影响存储的数据类型，只影响字符数据的排序。'
- en: '[PRE71]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: MySQL FLOAT type.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL FLOAT 类型。
- en: '**Members**'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.FLOAT.__init__)'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.FLOAT.__init__)'
- en: '**Class signature**'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.FLOAT`](#sqlalchemy.dialects.mysql.FLOAT "sqlalchemy.dialects.mysql.FLOAT")
    (`sqlalchemy.dialects.mysql.types._FloatType`, [`sqlalchemy.types.FLOAT`](../core/type_basics.html#sqlalchemy.types.FLOAT
    "sqlalchemy.types.FLOAT"))
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.FLOAT`](#sqlalchemy.dialects.mysql.FLOAT "sqlalchemy.dialects.mysql.FLOAT")（`sqlalchemy.dialects.mysql.types._FloatType`，[`sqlalchemy.types.FLOAT`](../core/type_basics.html#sqlalchemy.types.FLOAT
    "sqlalchemy.types.FLOAT"))。
- en: '[PRE72]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Construct a FLOAT.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个FLOAT。
- en: 'Parameters:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果scale和precision都为None，则将值存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的数字位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为true，则值将作为左填充零的字符串存储。请注意，这不会影响底层数据库API返回的值，这些值仍然是数值型的。'
- en: '[PRE73]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: MySQL INTEGER type.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的INTEGER类型。
- en: '**Members**'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.INTEGER.__init__)'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.INTEGER.__init__)'
- en: '**Class signature**'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.INTEGER`](#sqlalchemy.dialects.mysql.INTEGER
    "sqlalchemy.dialects.mysql.INTEGER") (`sqlalchemy.dialects.mysql.types._IntegerType`,
    [`sqlalchemy.types.INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER"))
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.INTEGER`](#sqlalchemy.dialects.mysql.INTEGER "sqlalchemy.dialects.mysql.INTEGER")（`sqlalchemy.dialects.mysql.types._IntegerType`，[`sqlalchemy.types.INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER")）。
- en: '[PRE74]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Construct an INTEGER.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个INTEGER。
- en: 'Parameters:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为true，则值将作为左填充零的字符串存储。请注意，这不会影响底层数据库API返回的值，这些值仍然是数值型的。'
- en: '[PRE75]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: MySQL JSON type.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的JSON类型。
- en: MySQL supports JSON as of version 5.7. MariaDB supports JSON (as an alias for
    LONGTEXT) as of version 10.2.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 从5.7版本开始，MySQL支持JSON。从10.2版本开始，MariaDB支持JSON（作为LONGTEXT的别名）。
- en: '[`JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    is used automatically whenever the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype is used against a MySQL or MariaDB backend.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")在针对MySQL或MariaDB后端使用基本的[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")数据类型时会自动使用。'
- en: See also
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - main documentation for the generic cross-platform JSON datatype.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - 通用跨平台JSON数据类型的主要文档。'
- en: The [`JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    type supports persistence of JSON values as well as the core index operations
    provided by [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    datatype, by adapting the operations to render the `JSON_EXTRACT` function at
    the database level.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")类型支持将JSON值持久化，以及通过适应操作在数据库级别呈现`JSON_EXTRACT`函数所提供的核心索引操作。'
- en: '**Class signature**'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    ([`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON"))
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")（[`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")）。
- en: '[PRE76]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: MySQL LONGBLOB type, for binary data up to 2^32 bytes.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的LONGBLOB类型，用于二进制数据长达2^32字节。
- en: '**Class signature**'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.LONGBLOB`](#sqlalchemy.dialects.mysql.LONGBLOB
    "sqlalchemy.dialects.mysql.LONGBLOB") (`sqlalchemy.types._Binary`)
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.LONGBLOB`](#sqlalchemy.dialects.mysql.LONGBLOB
    "sqlalchemy.dialects.mysql.LONGBLOB")（`sqlalchemy.types._Binary`）。
- en: '[PRE77]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: MySQL LONGTEXT type, for character storage encoded up to 2^32 bytes.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的LONGTEXT类型，用于存储编码长达2^32字节的字符。
- en: '**Members**'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.LONGTEXT.__init__)'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.LONGTEXT.__init__)'
- en: '**Class signature**'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.LONGTEXT`](#sqlalchemy.dialects.mysql.LONGTEXT
    "sqlalchemy.dialects.mysql.LONGTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.mysql.LONGTEXT`](#sqlalchemy.dialects.mysql.LONGTEXT
    "sqlalchemy.dialects.mysql.LONGTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE78]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Construct a LONGTEXT.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 LONGTEXT。
- en: 'Parameters:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，该字符串值的列级字符集。优先于 ''ascii'' 或 ''unicode'' 简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，该字符串值的列级排序规则。优先于 ''binary'' 简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为 False：`latin1` 字符集的简写，在模式中生成 ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为 False：`ucs2` 字符集的简写，在模式中生成 UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为真，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为 False：简写，选择与列字符集匹配的二进制排序规则类型。在模式中生成 BINARY。这不影响存储的数据类型，只影响字符数据的排序规则。'
- en: '[PRE79]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: MySQL MEDIUMBLOB type, for binary data up to 2^24 bytes.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL MEDIUMBLOB 类型，用于最多 2^24 字节的二进制数据。
- en: '**Class signature**'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.MEDIUMBLOB`](#sqlalchemy.dialects.mysql.MEDIUMBLOB
    "sqlalchemy.dialects.mysql.MEDIUMBLOB") (`sqlalchemy.types._Binary`)
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.mysql.MEDIUMBLOB`](#sqlalchemy.dialects.mysql.MEDIUMBLOB
    "sqlalchemy.dialects.mysql.MEDIUMBLOB") (`sqlalchemy.types._Binary`)
- en: '[PRE80]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: MySQL MEDIUMINTEGER type.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL MEDIUMINTEGER 类型。
- en: '**Members**'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.MEDIUMINT.__init__)'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.MEDIUMINT.__init__)'
- en: '**Class signature**'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.MEDIUMINT`](#sqlalchemy.dialects.mysql.MEDIUMINT
    "sqlalchemy.dialects.mysql.MEDIUMINT") (`sqlalchemy.dialects.mysql.types._IntegerType`)
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.mysql.MEDIUMINT`](#sqlalchemy.dialects.mysql.MEDIUMINT
    "sqlalchemy.dialects.mysql.MEDIUMINT") (`sqlalchemy.dialects.mysql.types._IntegerType`)
- en: '[PRE81]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Construct a MEDIUMINTEGER
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 MEDIUMINTEGER
- en: 'Parameters:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为真，则将值存储为左填充的带零字符串。请注意，这不会影响底层数据库 API 返回的值，这些值仍然是数字。'
- en: '[PRE82]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: MySQL MEDIUMTEXT type, for character storage encoded up to 2^24 bytes.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL MEDIUMTEXT 类型，用于最多编码 2^24 字节的字符存储。
- en: '**Members**'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__)'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__)'
- en: '**Class signature**'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.MEDIUMTEXT`](#sqlalchemy.dialects.mysql.MEDIUMTEXT
    "sqlalchemy.dialects.mysql.MEDIUMTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.mysql.MEDIUMTEXT`](#sqlalchemy.dialects.mysql.MEDIUMTEXT
    "sqlalchemy.dialects.mysql.MEDIUMTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE83]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Construct a MEDIUMTEXT.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 MEDIUMTEXT。
- en: 'Parameters:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，该字符串值的列级字符集。优先于 ''ascii'' 或 ''unicode'' 简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，该字符串值的列级排序规则。优先于 ''binary'' 简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为 False：`latin1` 字符集的简写，在模式中生成 ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为 False：`ucs2` 字符集的简写，在模式中生成 UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为真，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为 False：简写，选择与列字符集匹配的二进制排序规则类型。在模式中生成 BINARY。这不影响存储的数据类型，只影响字符数据的排序规则。'
- en: '[PRE84]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: MySQL NCHAR type.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL NCHAR 类型。
- en: For fixed-length character data in the server’s configured national character
    set.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器配置的国家字符集中的固定长度字符数据。
- en: '**Members**'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.NCHAR.__init__)'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.NCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.NCHAR`](#sqlalchemy.dialects.mysql.NCHAR "sqlalchemy.dialects.mysql.NCHAR")
    (`sqlalchemy.dialects.mysql.types._StringType`, [`sqlalchemy.types.NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR"))
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.NCHAR`](#sqlalchemy.dialects.mysql.NCHAR "sqlalchemy.dialects.mysql.NCHAR")
    (`sqlalchemy.dialects.mysql.types._StringType`, [`sqlalchemy.types.NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR"))
- en: '[PRE85]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Construct an NCHAR.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 NCHAR。
- en: 'Parameters:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – Maximum data length, in characters.'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 最大数据长度，以字符为单位。'
- en: '`binary` – Optional, use the default binary collation for the national character
    set. This does not affect the type of data stored, use a BINARY type for binary
    data.'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 可选的，使用默认的二进制排序规则进行国家字符集。这不影响存储的数据类型，对于二进制数据，请使用 BINARY 类型。'
- en: '`collation` – Optional, request a particular collation. Must be compatible
    with the national character set.'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选的，请求特定的排序规则。必须与国家字符集兼容。'
- en: '[PRE86]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: MySQL NUMERIC type.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL NUMERIC 类型。
- en: '**Members**'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.NUMERIC.__init__)'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.NUMERIC.__init__)'
- en: '**Class signature**'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.NUMERIC`](#sqlalchemy.dialects.mysql.NUMERIC
    "sqlalchemy.dialects.mysql.NUMERIC") (`sqlalchemy.dialects.mysql.types._NumericType`,
    [`sqlalchemy.types.NUMERIC`](../core/type_basics.html#sqlalchemy.types.NUMERIC
    "sqlalchemy.types.NUMERIC"))
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.NUMERIC`](#sqlalchemy.dialects.mysql.NUMERIC "sqlalchemy.dialects.mysql.NUMERIC")
    (`sqlalchemy.dialects.mysql.types._NumericType`, [`sqlalchemy.types.NUMERIC`](../core/type_basics.html#sqlalchemy.types.NUMERIC
    "sqlalchemy.types.NUMERIC"))
- en: '[PRE87]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Construct a NUMERIC.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 NUMERIC。
- en: 'Parameters:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果比例和精度都为 None，则将值存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选的。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选的。如果为真，则值将存储为左边用零填充的字符串。请注意，这不会影响底层数据库 API 返回的值，该值仍为数字。'
- en: '[PRE88]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: MySQL NVARCHAR type.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL NVARCHAR 类型。
- en: For variable-length character data in the server’s configured national character
    set.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器配置的国家字符集中的可变长度字符数据。
- en: '**Members**'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.NVARCHAR.__init__)'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.NVARCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.NVARCHAR`](#sqlalchemy.dialects.mysql.NVARCHAR
    "sqlalchemy.dialects.mysql.NVARCHAR") (`sqlalchemy.dialects.mysql.types._StringType`,
    [`sqlalchemy.types.NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR"))
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.NVARCHAR`](#sqlalchemy.dialects.mysql.NVARCHAR
    "sqlalchemy.dialects.mysql.NVARCHAR") (`sqlalchemy.dialects.mysql.types._StringType`,
    [`sqlalchemy.types.NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR"))
- en: '[PRE89]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Construct an NVARCHAR.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 NVARCHAR。
- en: 'Parameters:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – Maximum data length, in characters.'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 最大数据长度，以字符为单位。'
- en: '`binary` – Optional, use the default binary collation for the national character
    set. This does not affect the type of data stored, use a BINARY type for binary
    data.'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 可选的，使用默认的二进制排序规则进行国家字符集。这不影响存储的数据类型，对于二进制数据，请使用 BINARY 类型。'
- en: '`collation` – Optional, request a particular collation. Must be compatible
    with the national character set.'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选的，请求特定的排序规则。必须与国家字符集兼容。'
- en: '[PRE90]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: MySQL REAL type.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL REAL 类型。
- en: '**Members**'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.REAL.__init__)'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.REAL.__init__)'
- en: '**Class signature**'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.REAL`](#sqlalchemy.dialects.mysql.REAL "sqlalchemy.dialects.mysql.REAL")
    (`sqlalchemy.dialects.mysql.types._FloatType`, [`sqlalchemy.types.REAL`](../core/type_basics.html#sqlalchemy.types.REAL
    "sqlalchemy.types.REAL"))
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.REAL`](#sqlalchemy.dialects.mysql.REAL "sqlalchemy.dialects.mysql.REAL")
    (`sqlalchemy.dialects.mysql.types._FloatType`, [`sqlalchemy.types.REAL`](../core/type_basics.html#sqlalchemy.types.REAL
    "sqlalchemy.types.REAL"))
- en: '[PRE91]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Construct a REAL.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 REAL。
- en: Note
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`REAL`](#sqlalchemy.dialects.mysql.REAL "sqlalchemy.dialects.mysql.REAL")
    type by default converts from float to Decimal, using a truncation that defaults
    to 10 digits. Specify either `scale=n` or `decimal_return_scale=n` in order to
    change this scale, or `asdecimal=False` to return values directly as Python floating
    points.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`REAL`](#sqlalchemy.dialects.mysql.REAL "sqlalchemy.dialects.mysql.REAL")类型从浮点数转换为Decimal，使用默认为10位的截断。指定`scale=n`或`decimal_return_scale=n`以更改此比例，或者`asdecimal=False`以直接将值返回为Python浮点数。
- en: 'Parameters:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果比例和精度都为None，则值将存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为true，则值将存储为左侧填充零的字符串。请注意，这不会影响底层数据库API返回的值，它们仍然是数值。'
- en: '[PRE92]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: MySQL SET type.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL SET 类型。
- en: '**Members**'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.SET.__init__)'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.SET.__init__)'
- en: '**Class signature**'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.SET`](#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    (`sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.SET`](#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    (`sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE93]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Construct a SET.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个SET。
- en: 'E.g.:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE94]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The list of potential values is required in the case that this set will be used
    to generate DDL for a table, or if the [`SET.retrieve_as_bitwise`](#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") flag is set to True.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，潜在值的列表是必需的，因为此集合将用于为表生成DDL，或者如果设置了[`SET.retrieve_as_bitwise`](#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET")标志。
- en: 'Parameters:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`values` – The range of valid values for this SET. The values are not quoted,
    they will be escaped and surrounded by single quotes when generating the schema.'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values` – 此SET的有效值范围。这些值不带引号，生成模式时将被转义并用单引号括起。'
- en: '`convert_unicode` – Same flag as that of [`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String").'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`convert_unicode` – 与[`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String")相同的标志。'
- en: '`collation` – same as that of [`String.collation`](../core/type_basics.html#sqlalchemy.types.String.params.collation
    "sqlalchemy.types.String")'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 与[`String.collation`](../core/type_basics.html#sqlalchemy.types.String.params.collation
    "sqlalchemy.types.String")相同'
- en: '`charset` – same as that of [`VARCHAR.charset`](#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR").'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 与[`VARCHAR.charset`](#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR")相同。'
- en: '`ascii` – same as that of [`VARCHAR.ascii`](#sqlalchemy.dialects.mysql.VARCHAR.params.ascii
    "sqlalchemy.dialects.mysql.VARCHAR").'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 与[`VARCHAR.ascii`](#sqlalchemy.dialects.mysql.VARCHAR.params.ascii
    "sqlalchemy.dialects.mysql.VARCHAR")相同。'
- en: '`unicode` – same as that of [`VARCHAR.unicode`](#sqlalchemy.dialects.mysql.VARCHAR.params.unicode
    "sqlalchemy.dialects.mysql.VARCHAR").'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 与[`VARCHAR.unicode`](#sqlalchemy.dialects.mysql.VARCHAR.params.unicode
    "sqlalchemy.dialects.mysql.VARCHAR")相同。'
- en: '`binary` – same as that of [`VARCHAR.binary`](#sqlalchemy.dialects.mysql.VARCHAR.params.binary
    "sqlalchemy.dialects.mysql.VARCHAR").'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 与[`VARCHAR.binary`](#sqlalchemy.dialects.mysql.VARCHAR.params.binary
    "sqlalchemy.dialects.mysql.VARCHAR")相同。'
- en: '`retrieve_as_bitwise` –'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retrieve_as_bitwise` –'
- en: if True, the data for the set type will be persisted and selected using an integer
    value, where a set is coerced into a bitwise mask for persistence. MySQL allows
    this mode which has the advantage of being able to store values unambiguously,
    such as the blank string `''`. The datatype will appear as the expression `col
    + 0` in a SELECT statement, so that the value is coerced into an integer value
    in result sets. This flag is required if one wishes to persist a set that can
    store the blank string `''` as a value.
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则集合类型的数据将使用整数值持久化和选择，其中集合被强制转换为持久化的位掩码。MySQL允许这种模式，它的优势在于能够明确存储值，例如空字符串`''`。数据类型将在SELECT语句中显示为表达式`col
    + 0`，以便将值强制转换为结果集中的整数值。如果希望持久化可以存储空字符串`''`作为值的集合，则需要此标志。
- en: Warning
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When using [`SET.retrieve_as_bitwise`](#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET"), it is essential that the list of set values
    is expressed in the **exact same order** as exists on the MySQL database.
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用[`SET.retrieve_as_bitwise`](#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET")时，必须确保集合值的列表与MySQL数据库中的**完全相同的顺序**。
- en: '[PRE95]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: MySQL SMALLINTEGER type.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL SMALLINTEGER类型。
- en: '**Members**'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.SMALLINT.__init__)'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.SMALLINT.__init__)的初始化方法。'
- en: '**Class signature**'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.SMALLINT`](#sqlalchemy.dialects.mysql.SMALLINT
    "sqlalchemy.dialects.mysql.SMALLINT") (`sqlalchemy.dialects.mysql.types._IntegerType`,
    [`sqlalchemy.types.SMALLINT`](../core/type_basics.html#sqlalchemy.types.SMALLINT
    "sqlalchemy.types.SMALLINT"))
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.SMALLINT`](#sqlalchemy.dialects.mysql.SMALLINT
    "sqlalchemy.dialects.mysql.SMALLINT")（`sqlalchemy.dialects.mysql.types._IntegerType`，[`sqlalchemy.types.SMALLINT`](../core/type_basics.html#sqlalchemy.types.SMALLINT
    "sqlalchemy.types.SMALLINT")）
- en: '[PRE96]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Construct a SMALLINTEGER.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个SMALLINTEGER。
- en: 'Parameters:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为true，值将以左侧填充零的字符串形式存储。请注意，这不会影响底层数据库API返回的值，其仍然是数值。'
- en: '[PRE97]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: MySQL TEXT type, for character storage encoded up to 2^16 bytes.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TEXT类型，用于编码最多2^16字节的字符存储。
- en: '**Class signature**'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.TEXT` (`sqlalchemy.dialects.mysql.types._StringType`,
    [`sqlalchemy.types.TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT "sqlalchemy.types.TEXT"))
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 类`sqlalchemy.dialects.mysql.TEXT`（`sqlalchemy.dialects.mysql.types._StringType`，[`sqlalchemy.types.TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT")）
- en: '[PRE98]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Construct a TEXT.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个TEXT。
- en: 'Parameters:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – Optional, if provided the server may optimize storage by substituting
    the smallest TEXT type sufficient to store `length` bytes of characters.'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，如果提供，服务器可以通过替换足以存储`length`字节字符的最小TEXT类型来优化存储。'
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，用于此字符串值的列级字符集。优先于‘ascii’或‘unicode’简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，用于此字符串值的列级排序。优先于‘binary’简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为False：`latin1`字符集的简写，生成模式中的ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为False：`ucs2`字符集的简写，生成模式中的UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为true，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为False：简写，选择与列的字符集匹配的二进制排序类型。在模式中生成BINARY。这不会影响存储的数据类型，只会影响字符数据的排序。'
- en: '[PRE99]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: MySQL TIME type.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TIME类型。
- en: '**Members**'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.TIME.__init__)'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.TIME.__init__)的初始化方法。'
- en: '**Class signature**'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TIME`](#sqlalchemy.dialects.mysql.TIME "sqlalchemy.dialects.mysql.TIME")
    ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME "sqlalchemy.types.TIME"))
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.TIME`](#sqlalchemy.dialects.mysql.TIME "sqlalchemy.dialects.mysql.TIME")（[`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME
    "sqlalchemy.types.TIME")）
- en: '[PRE100]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Construct a MySQL TIME type.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个MySQL TIME类型。
- en: 'Parameters:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – not used by the MySQL dialect.'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – MySQL方言不使用。'
- en: '`fsp` –'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fsp` –'
- en: fractional seconds precision value. MySQL 5.6 supports storage of fractional
    seconds; this parameter will be used when emitting DDL for the TIME type.
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分数秒精度值。MySQL 5.6支持存储分数秒；在为TIME类型发出DDL时将使用此参数。
- en: Note
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: DBAPI driver support for fractional seconds may be limited; current support
    includes MySQL Connector/Python.
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DBAPI驱动程序对分数秒的支持可能有限；当前支持包括MySQL Connector/Python。
- en: '[PRE101]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: MySQL TIMESTAMP type.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TIMESTAMP类型。
- en: '**Members**'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.TIMESTAMP.__init__)'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.TIMESTAMP.__init__)的初始化方法。'
- en: '**Class signature**'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TIMESTAMP`](#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") ([`sqlalchemy.types.TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"))
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TIMESTAMP`](#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") ([`sqlalchemy.types.TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"))
- en: '[PRE102]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Construct a MySQL TIMESTAMP type.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 MySQL TIMESTAMP 类型。
- en: 'Parameters:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – not used by the MySQL dialect.'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – MySQL 方言不使用。'
- en: '`fsp` –'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fsp` –'
- en: fractional seconds precision value. MySQL 5.6.4 supports storage of fractional
    seconds; this parameter will be used when emitting DDL for the TIMESTAMP type.
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小数秒精度值。MySQL 5.6.4 支持存储小数秒；在为 TIMESTAMP 类型发出 DDL 时将使用此参数。
- en: Note
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: DBAPI driver support for fractional seconds may be limited; current support
    includes MySQL Connector/Python.
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DBAPI 驱动程序对小数秒的支持可能有限；当前支持包括 MySQL Connector/Python。
- en: '[PRE103]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: MySQL TINYBLOB type, for binary data up to 2^8 bytes.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TINYBLOB 类型，用于最多 2^8 字节的二进制数据。
- en: '**Class signature**'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TINYBLOB`](#sqlalchemy.dialects.mysql.TINYBLOB
    "sqlalchemy.dialects.mysql.TINYBLOB") (`sqlalchemy.types._Binary`)
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TINYBLOB`](#sqlalchemy.dialects.mysql.TINYBLOB
    "sqlalchemy.dialects.mysql.TINYBLOB") (`sqlalchemy.types._Binary`)
- en: '[PRE104]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: MySQL TINYINT type.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TINYINT 类型。
- en: '**Members**'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.TINYINT.__init__)'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.TINYINT.__init__)'
- en: '**Class signature**'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TINYINT`](#sqlalchemy.dialects.mysql.TINYINT
    "sqlalchemy.dialects.mysql.TINYINT") (`sqlalchemy.dialects.mysql.types._IntegerType`)
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TINYINT`](#sqlalchemy.dialects.mysql.TINYINT "sqlalchemy.dialects.mysql.TINYINT")
    (`sqlalchemy.dialects.mysql.types._IntegerType`)
- en: '[PRE105]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Construct a TINYINT.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 TINYINT。
- en: 'Parameters:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为 true，则值将作为左填充零的字符串存储。请注意，这不影响底层数据库 API 返回的值，其仍然是数值。'
- en: '[PRE106]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: MySQL TINYTEXT type, for character storage encoded up to 2^8 bytes.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TINYTEXT 类型，用于编码最多 2^8 字节的字符存储。
- en: '**Members**'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.TINYTEXT.__init__)'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.TINYTEXT.__init__)'
- en: '**Class signature**'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TINYTEXT`](#sqlalchemy.dialects.mysql.TINYTEXT
    "sqlalchemy.dialects.mysql.TINYTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TINYTEXT`](#sqlalchemy.dialects.mysql.TINYTEXT
    "sqlalchemy.dialects.mysql.TINYTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE107]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Construct a TINYTEXT.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 TINYTEXT。
- en: 'Parameters:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，此字符串值的列级字符集。优先于 ‘ascii’ 或 ‘unicode’ 简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，此字符串值的列级排序规则。优先于 ‘binary’ 简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为 False：`latin1` 字符集的简写，在模式中生成 ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为 False：`ucs2` 字符集的简写，在模式中生成 UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为 true，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为 False：简写，选择与列的字符集匹配的二进制排序类型。在模式中生成 BINARY。这不影响存储的数据类型，只影响字符数据的排序。'
- en: '[PRE108]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: The SQL VARBINARY type.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: SQL VARBINARY 类型。
- en: '**Class signature**'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.VARBINARY` (`sqlalchemy.types._Binary`)
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.VARBINARY` (`sqlalchemy.types._Binary`)
- en: '[PRE109]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: MySQL VARCHAR type, for variable-length character data.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL VARCHAR 类型，用于可变长度字符数据。
- en: '**Members**'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.VARCHAR.__init__)'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.VARCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.VARCHAR`](#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR") (`sqlalchemy.dialects.mysql.types._StringType`,
    [`sqlalchemy.types.VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"))
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.VARCHAR`](#sqlalchemy.dialects.mysql.VARCHAR "sqlalchemy.dialects.mysql.VARCHAR")（`sqlalchemy.dialects.mysql.types._StringType`，[`sqlalchemy.types.VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR")）
- en: '[PRE110]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Construct a VARCHAR.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个VARCHAR。
- en: 'Parameters:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，用于此字符串值的列级字符集。优先于‘ascii’或‘unicode’简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，用于此字符串值的列级排序。优先于‘binary’简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为False：`latin1`字符集的简写，模式中生成ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为False：`ucs2`字符集的简写，模式中生成UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为true，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为False：简写，选择与列的字符集匹配的二进制排序类型。在模式中生成BINARY。这不影响存储的数据类型，只影响字符数据的排序。'
- en: '[PRE111]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: MySQL YEAR type, for single byte storage of years 1901-2155.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL YEAR类型，用于存储1901-2155年的单字节。
- en: '**Class signature**'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.YEAR`](#sqlalchemy.dialects.mysql.YEAR "sqlalchemy.dialects.mysql.YEAR")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.YEAR`](#sqlalchemy.dialects.mysql.YEAR "sqlalchemy.dialects.mysql.YEAR")（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: MySQL DML Constructs
  id: totrans-678
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL DML构造
- en: '| Object Name | Description |'
  id: totrans-679
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-680
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [insert](#sqlalchemy.dialects.mysql.insert)(table) | Construct a MySQL/MariaDB-specific
    variant [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    construct. |'
  id: totrans-681
  prefs: []
  type: TYPE_TB
  zh: '| [insert](#sqlalchemy.dialects.mysql.insert)(table) | 构造一个MySQL/MariaDB特定变体[`Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert")构造。 |'
- en: '| [Insert](#sqlalchemy.dialects.mysql.Insert) | MySQL-specific implementation
    of INSERT. |'
  id: totrans-682
  prefs: []
  type: TYPE_TB
  zh: '| [Insert](#sqlalchemy.dialects.mysql.Insert) | MySQL特定的INSERT实现。 |'
- en: '[PRE112]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Construct a MySQL/MariaDB-specific variant [`Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert") construct.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个MySQL/MariaDB特定变体[`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")构造。
- en: The [`sqlalchemy.dialects.mysql.insert()`](#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert") function creates a [`sqlalchemy.dialects.mysql.Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert"). This class is based on the dialect-agnostic
    [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct which may be constructed using the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") function in SQLAlchemy Core.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.mysql.insert()`](#sqlalchemy.dialects.mysql.insert "sqlalchemy.dialects.mysql.insert")函数创建一个[`sqlalchemy.dialects.mysql.Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert")。这个类基于方言不可知的[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造，可以使用SQLAlchemy Core中的[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")函数构造。'
- en: The [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    construct includes additional methods [`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update").
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")构造包括额外的方法[`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")。'
- en: '[PRE113]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: MySQL-specific implementation of INSERT.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL特定的INSERT实现。
- en: Adds methods for MySQL-specific syntaxes such as ON DUPLICATE KEY UPDATE.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了针对MySQL特定语法的方法，例如ON DUPLICATE KEY UPDATE。
- en: The [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    object is created using the [`sqlalchemy.dialects.mysql.insert()`](#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert") function.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`sqlalchemy.dialects.mysql.insert()`](#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert") 函数创建 [`Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert") 对象。
- en: New in version 1.2.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: '**Members**'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.dialects.mysql.Insert.inherit_cache), [inserted](#sqlalchemy.dialects.mysql.Insert.inserted),
    [on_duplicate_key_update()](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update)'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.dialects.mysql.Insert.inherit_cache), [inserted](#sqlalchemy.dialects.mysql.Insert.inserted),
    [on_duplicate_key_update()](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update)'
- en: '**Class signature**'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert") ([`sqlalchemy.sql.expression.Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"))
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.mysql.Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert") ([`sqlalchemy.sql.expression.Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"))
- en: '[PRE114]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Indicate if this [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") 实例是否应使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑是否适合参与缓存; 这在功能上等同于将值设置为 `False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的 SQL 不基于此类的本地属性而更改，并且不基于其超类，则可以在特定类上将此标志设置为 `True`。
- en: See also
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Enabling Caching Support for Custom Constructs](../core/compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](../core/compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL
    构造的 [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE115]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Provide the “inserted” namespace for an ON DUPLICATE KEY UPDATE statement
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 为 ON DUPLICATE KEY UPDATE 语句提供“inserted”命名空间
- en: MySQL’s ON DUPLICATE KEY UPDATE clause allows reference to the row that would
    be inserted, via a special function called `VALUES()`. This attribute provides
    all columns in this row to be referenceable such that they will render within
    a `VALUES()` function inside the ON DUPLICATE KEY UPDATE clause. The attribute
    is named `.inserted` so as not to conflict with the existing [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 的 ON DUPLICATE KEY UPDATE 子句允许引用将要插入的行，通过一个称为 `VALUES()` 的特殊函数。 此属性提供了此行中的所有列，以便它们可在
    ON DUPLICATE KEY UPDATE 子句中的 `VALUES()` 函数内部引用。 属性被命名为 `.inserted`，以避免与现有的 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法冲突。
- en: Tip
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`Insert.inserted`](#sqlalchemy.dialects.mysql.Insert.inserted "sqlalchemy.dialects.mysql.Insert.inserted")
    attribute is an instance of [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), which provides an interface the
    same as that of the [`Table.c`](../core/metadata.html#sqlalchemy.schema.Table.c
    "sqlalchemy.schema.Table.c") collection described at [Accessing Tables and Columns](../core/metadata.html#metadata-tables-and-columns).
    With this collection, ordinary names are accessible like attributes (e.g. `stmt.inserted.some_column`),
    but special names and dictionary method names should be accessed using indexed
    access, such as `stmt.inserted["column name"]` or `stmt.inserted["values"]`. See
    the docstring for [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") for further examples.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert.inserted`](#sqlalchemy.dialects.mysql.Insert.inserted "sqlalchemy.dialects.mysql.Insert.inserted")
    属性是 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的实例，其提供了与 [访问表和列](../core/metadata.html#metadata-tables-and-columns)中描述的
    [`Table.c`](../core/metadata.html#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c")
    集合相同的接口。使用此集合，普通名称可以像属性一样访问（例如 `stmt.inserted.some_column`），但特殊名称和字典方法名称应使用索引访问，例如
    `stmt.inserted["column name"]` 或 `stmt.inserted["values"]`。有关更多示例，请参阅 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的文档字符串。'
- en: See also
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[INSERT…ON DUPLICATE KEY UPDATE (Upsert)](#mysql-insert-on-duplicate-key-update)
    - example of how to use `Insert.inserted`'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '[插入…在重复键更新（Upsert）时](#mysql-insert-on-duplicate-key-update) - 使用 `Insert.inserted`
    的示例'
- en: '[PRE116]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Specifies the ON DUPLICATE KEY UPDATE clause.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 指定 ON DUPLICATE KEY UPDATE 子句。
- en: 'Parameters:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Column keys linked to UPDATE values. The values may be any SQL expression
    or supported literal Python values.'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 与 UPDATE 值关联的列键。这些值可以是任何 SQL 表达式或支持的字面 Python 值。'
- en: Warning
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This dictionary does **not** take into account Python-specified default UPDATE
    values or generation functions, e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON DUPLICATE
    KEY UPDATE style of UPDATE, unless values are manually specified here.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典**不**考虑 Python 指定的默认 UPDATE 值或生成函数，例如使用 [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 指定的值。这些值不会被用于 ON DUPLICATE KEY UPDATE 类型的 UPDATE，除非在此手动指定值。
- en: 'Parameters:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***args** –'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '***args** –'
- en: As an alternative to passing key/value parameters, a dictionary or list of 2-tuples
    can be passed as a single positional argument.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 作为传递键/值参数的替代方案，可以将字典或 2 元组列表作为单个位置参数传递。
- en: 'Passing a single dictionary is equivalent to the keyword argument form:'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 传递单个字典等效于关键字参数形式：
- en: '[PRE117]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Passing a list of 2-tuples indicates that the parameter assignments in the
    UPDATE clause should be ordered as sent, in a manner similar to that described
    for the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct overall in [Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates):'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 传递 2 元组列表表示 UPDATE 子句中的参数分配应按发送的顺序排序，类似于[参数有序更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates)中总体描述的
    [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造：
- en: '[PRE118]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Changed in version 1.3: parameters can be specified as a dictionary or list
    of 2-tuples; the latter form provides for parameter ordering.'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的更改：参数可以指定为字典或 2 元组列表；后一种形式提供了参数排序。
- en: New in version 1.2.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: See also
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[INSERT…ON DUPLICATE KEY UPDATE (Upsert)](#mysql-insert-on-duplicate-key-update)'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '[插入…在重复键更新（Upsert）时](#mysql-insert-on-duplicate-key-update)'
- en: '## mysqlclient (fork of MySQL-Python)'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '## mysqlclient（MySQL-Python 的分支）'
- en: Support for the MySQL / MariaDB database via the mysqlclient (maintained fork
    of MySQL-Python) driver.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 mysqlclient（MySQL-Python 的维护分支）驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-728
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for mysqlclient (maintained
    fork of MySQL-Python) is available at: [https://pypi.org/project/mysqlclient/](https://pypi.org/project/mysqlclient/)'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient（MySQL-Python 的维护分支）的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/mysqlclient/](https://pypi.org/project/mysqlclient/)
- en: Connecting
  id: totrans-730
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE119]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Driver Status
  id: totrans-733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序状态
- en: The mysqlclient DBAPI is a maintained fork of the [MySQL-Python](https://sourceforge.net/projects/mysql-python)
    DBAPI that is no longer maintained. [mysqlclient](https://github.com/PyMySQL/mysqlclient-python)
    supports Python 2 and Python 3 and is very stable.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient DBAPI 是不再维护的 [MySQL-Python](https://sourceforge.net/projects/mysql-python)
    DBAPI 的一个维护的分支。[mysqlclient](https://github.com/PyMySQL/mysqlclient-python) 支持
    Python 2 和 Python 3，并且非常稳定。
- en: '### Unicode'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '### Unicode'
- en: 'Please see [Unicode](#mysql-unicode) for current recommendations on unicode
    handling.  ### SSL Connections'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 有关当前关于 Unicode 处理的建议，请参阅 [Unicode](#mysql-unicode)。### SSL 连接
- en: 'The mysqlclient and PyMySQL DBAPIs accept an additional dictionary under the
    key “ssl”, which may be specified using the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient 和 PyMySQL DBAPIs 接受一个额外的字典，其键为“ssl”，可以使用 [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 字典来指定：
- en: '[PRE120]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'For convenience, the following keys may also be specified inline within the
    URL where they will be interpreted into the “ssl” dictionary automatically: “ssl_ca”,
    “ssl_cert”, “ssl_key”, “ssl_capath”, “ssl_cipher”, “ssl_check_hostname”. An example
    is as follows:'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，以下键也可以内联指定在 URL 中，它们将被自动解释为“ssl”字典： “ssl_ca”、“ssl_cert”、“ssl_key”、“ssl_capath”、“ssl_cipher”、“ssl_check_hostname”。示例如下：
- en: '[PRE121]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: See also
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SSL Connections](#pymysql-ssl) in the PyMySQL dialect'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyMySQL 方言中的 [SSL 连接](#pymysql-ssl)
- en: Using MySQLdb with Google Cloud SQL
  id: totrans-743
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 MySQLdb 与 Google Cloud SQL
- en: 'Google Cloud SQL now recommends use of the MySQLdb dialect. Connect using a
    URL like the following:'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud SQL 现在建议使用 MySQLdb 方言。使用如下 URL 进行连接：
- en: '[PRE122]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Server Side Cursors
  id: totrans-746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器端游标
- en: 'The mysqldb dialect supports server-side cursors. See [Server Side Cursors](#mysql-ss-cursors).  ##
    PyMySQL'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: mysqldb 方言支持服务器端游标。请参阅 [服务器端游标](#mysql-ss-cursors)。## PyMySQL
- en: Support for the MySQL / MariaDB database via the PyMySQL driver.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 PyMySQL 驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-749
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyMySQL is available
    at: [https://pymysql.readthedocs.io/](https://pymysql.readthedocs.io/)'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: PyMySQL 的文档和下载信息（如果适用）可在以下链接获取：[https://pymysql.readthedocs.io/](https://pymysql.readthedocs.io/)
- en: Connecting
  id: totrans-751
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE123]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Unicode
  id: totrans-754
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unicode
- en: Please see [Unicode](#mysql-unicode) for current recommendations on unicode
    handling.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 有关当前关于 Unicode 处理的建议，请参阅 [Unicode](#mysql-unicode)。
- en: '### SSL Connections'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '### SSL 连接'
- en: The PyMySQL DBAPI accepts the same SSL arguments as that of MySQLdb, described
    at [SSL Connections](#mysqldb-ssl). See that section for additional examples.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: PyMySQL DBAPI 接受与 MySQLdb 相同的 SSL 参数，描述如 [SSL 连接](#mysqldb-ssl)。请参阅该部分以获取其他示例。
- en: 'If the server uses an automatically-generated certificate that is self-signed
    or does not match the host name (as seen from the client), it may also be necessary
    to indicate `ssl_check_hostname=false` in PyMySQL:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器使用自动生成的自签名证书或与主机名不匹配（从客户端看），则在 PyMySQL 中也可能需要指示 `ssl_check_hostname=false`：
- en: '[PRE124]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: MySQL-Python Compatibility
  id: totrans-760
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL-Python 兼容性
- en: 'The pymysql DBAPI is a pure Python port of the MySQL-python (MySQLdb) driver,
    and targets 100% compatibility. Most behavioral notes for MySQL-python apply to
    the pymysql driver as well.  ## MariaDB-Connector'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: pymysql DBAPI 是 MySQL-python（MySQLdb）驱动程序的纯 Python 移植版本，目标是 100% 的兼容性。大多数针对
    MySQL-python 的行为说明也适用于 pymysql 驱动程序。## MariaDB-Connector
- en: Support for the MySQL / MariaDB database via the MariaDB Connector/Python driver.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 MariaDB Connector/Python 驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-763
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for MariaDB Connector/Python
    is available at: [https://pypi.org/project/mariadb/](https://pypi.org/project/mariadb/)'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB Connector/Python 的文档和下载信息（如果适用）可在以下链接获取：[https://pypi.org/project/mariadb/](https://pypi.org/project/mariadb/)
- en: Connecting
  id: totrans-765
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE125]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Driver Status
  id: totrans-768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序状态
- en: MariaDB Connector/Python enables Python programs to access MariaDB and MySQL
    databases using an API which is compliant with the Python DB API 2.0 (PEP-249).
    It is written in C and uses MariaDB Connector/C client library for client server
    communication.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB Connector/Python 允许 Python 程序使用与 Python DB API 2.0（PEP-249）兼容的 API 访问
    MariaDB 和 MySQL 数据库。它是用 C 编写的，使用 MariaDB Connector/C 客户端库进行客户端服务器通信。
- en: 'Note that the default driver for a `mariadb://` connection URI continues to
    be `mysqldb`. `mariadb+mariadbconnector://` is required to use this driver.  ##
    MySQL-Connector'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `mariadb://` 连接 URI 的默认驱动程序仍然是 `mysqldb`。要使用此驱动程序，需要使用 `mariadb+mariadbconnector://`。##
    MySQL-Connector
- en: Support for the MySQL / MariaDB database via the MySQL Connector/Python driver.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 MySQL Connector/Python 驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-772
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for MySQL Connector/Python
    is available at: [https://pypi.org/project/mysql-connector-python/](https://pypi.org/project/mysql-connector-python/)'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和 MySQL Connector/Python 的下载信息（如果适用）可在此处获取：[https://pypi.org/project/mysql-connector-python/](https://pypi.org/project/mysql-connector-python/)
- en: Connecting
  id: totrans-774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE126]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Note
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The MySQL Connector/Python DBAPI has had many issues since its release, some
    of which may remain unresolved, and the mysqlconnector dialect is **not tested
    as part of SQLAlchemy’s continuous integration**. The recommended MySQL dialects
    are mysqlclient and PyMySQL.  ## asyncmy'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '自 MySQL Connector/Python 发布以来，DBAPI 存在许多问题，其中一些可能仍未解决，并且 mysqlconnector 方言
    **未经过 SQLAlchemy 的持续集成测试**。推荐的 MySQL 方言是 mysqlclient 和 PyMySQL。 ## asyncmy'
- en: Support for the MySQL / MariaDB database via the asyncmy driver.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 asyncmy 驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for asyncmy is available
    at: [https://github.com/long2ice/asyncmy](https://github.com/long2ice/asyncmy)'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和 asyncmy 的下载信息（如果适用）可在此处获取：[https://github.com/long2ice/asyncmy](https://github.com/long2ice/asyncmy)
- en: Connecting
  id: totrans-782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE127]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Using a special asyncio mediation layer, the asyncmy dialect is usable as the
    backend for the [SQLAlchemy asyncio](../orm/extensions/asyncio.html) extension
    package.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的 asyncio 中介层，asyncmy 方言可用作[SQLAlchemy asyncio](../orm/extensions/asyncio.html)扩展包的后端。
- en: 'This dialect should normally be used only with the [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine creation function:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言通常仅应与[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")引擎创建函数一起使用：
- en: '[PRE128]  ## aiomysql'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE128]  ## aiomysql'
- en: Support for the MySQL / MariaDB database via the aiomysql driver.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 aiomysql 驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-789
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for aiomysql is available
    at: [https://github.com/aio-libs/aiomysql](https://github.com/aio-libs/aiomysql)'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和 aiomysql 的下载信息（如果适用）可在此处获取：[https://github.com/aio-libs/aiomysql](https://github.com/aio-libs/aiomysql)
- en: Connecting
  id: totrans-791
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE129]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: The aiomysql dialect is SQLAlchemy’s second Python asyncio dialect.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: aiomysql 方言是 SQLAlchemy 的第二个 Python asyncio 方言。
- en: Using a special asyncio mediation layer, the aiomysql dialect is usable as the
    backend for the [SQLAlchemy asyncio](../orm/extensions/asyncio.html) extension
    package.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的 asyncio 中介层，aiomysql 方言可用作[SQLAlchemy asyncio](../orm/extensions/asyncio.html)扩展包的后端。
- en: 'This dialect should normally be used only with the [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine creation function:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言通常仅应与[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")引擎创建函数一起使用：
- en: '[PRE130]  ## cymysql'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE130]  ## cymysql'
- en: Support for the MySQL / MariaDB database via the CyMySQL driver.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 CyMySQL 驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-799
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for CyMySQL is available
    at: [https://github.com/nakagami/CyMySQL](https://github.com/nakagami/CyMySQL)'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和 CyMySQL 的下载信息（如果适用）可在此处获取：[https://github.com/nakagami/CyMySQL](https://github.com/nakagami/CyMySQL)
- en: Connecting
  id: totrans-801
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE131]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Note
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The CyMySQL dialect is **not tested as part of SQLAlchemy’s continuous integration**
    and may have unresolved issues. The recommended MySQL dialects are mysqlclient
    and PyMySQL.  ## pyodbc'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 'CyMySQL 方言 **未经过 SQLAlchemy 的持续集成测试**，可能存在未解决的问题。推荐的 MySQL 方言是 mysqlclient
    和 PyMySQL。 ## pyodbc'
- en: Support for the MySQL / MariaDB database via the PyODBC driver.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 PyODBC 驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-807
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyODBC is available
    at: [https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和 PyODBC 的下载信息（如果适用）可在此处获取：[https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)
- en: Connecting
  id: totrans-809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE132]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Note
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The PyODBC for MySQL dialect is **not tested as part of SQLAlchemy’s continuous
    integration**. The recommended MySQL dialects are mysqlclient and PyMySQL. However,
    if you want to use the mysql+pyodbc dialect and require full support for `utf8mb4`
    characters (including supplementary characters like emoji) be sure to use a current
    release of MySQL Connector/ODBC and specify the “ANSI” (**not** “Unicode”) version
    of the driver in your DSN or connection string.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的PyODBC方言**未经过SQLAlchemy的持续集成测试**。推荐使用的MySQL方言是mysqlclient和PyMySQL。但是，如果您想使用mysql+pyodbc方言并需要完全支持`utf8mb4`字符（包括表情符号等辅助字符），请确保使用当前版本的MySQL
    Connector/ODBC并在DSN或连接字符串中指定“ANSI”（**不是**“Unicode”）驱动程序版本。
- en: 'Pass through exact pyodbc connection string:'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 通过精确的pyodbc连接字符串传递：
- en: '[PRE133]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Support for the MySQL / MariaDB database.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 支持MySQL / MariaDB数据库。
- en: The following table summarizes current support levels for database release versions.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表总结了数据库发布版本的当前支持水平。
- en: '**Supported MySQL / MariaDB versions**'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持的MySQL / MariaDB版本**'
- en: '| Support type | Versions |'
  id: totrans-819
  prefs: []
  type: TYPE_TB
  zh: '| 支持类型 | 版本 |'
- en: '| --- | --- |'
  id: totrans-820
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Fully tested in CI](index.html#term-Fully-tested-in-CI) | 5.6, 5.7, 8.0
    / 10.8, 10.9 |'
  id: totrans-821
  prefs: []
  type: TYPE_TB
  zh: '| [持续集成完全测试](index.html#term-Fully-tested-in-CI) | 5.6, 5.7, 8.0 / 10.8, 10.9
    |'
- en: '| [Normal support](index.html#term-Normal-support) | 5.6+ / 10+ |'
  id: totrans-822
  prefs: []
  type: TYPE_TB
  zh: '| [正常支持](index.html#term-Normal-support) | 5.6+ / 10+ |'
- en: '| [Best effort](index.html#term-Best-effort) | 5.0.2+ / 5.0.2+ |'
  id: totrans-823
  prefs: []
  type: TYPE_TB
  zh: '| [尽力而为](index.html#term-Best-effort) | 5.0.2+ / 5.0.2+ |'
- en: DBAPI Support
  id: totrans-824
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DBAPI支持
- en: The following dialect/DBAPI options are available. Please refer to individual
    DBAPI sections for connect information.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 提供以下方言/DBAPI选项。有关连接信息，请参考各个DBAPI部分。
- en: '[mysqlclient (maintained fork of MySQL-Python)](#module-sqlalchemy.dialects.mysql.mysqldb)'
  id: totrans-826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[mysqlclient（MySQL-Python的维护分支）](#module-sqlalchemy.dialects.mysql.mysqldb)'
- en: '[PyMySQL](#module-sqlalchemy.dialects.mysql.pymysql)'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyMySQL](#module-sqlalchemy.dialects.mysql.pymysql)'
- en: '[MariaDB Connector/Python](#module-sqlalchemy.dialects.mysql.mariadbconnector)'
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MariaDB Connector/Python](#module-sqlalchemy.dialects.mysql.mariadbconnector)'
- en: '[MySQL Connector/Python](#module-sqlalchemy.dialects.mysql.mysqlconnector)'
  id: totrans-829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MySQL Connector/Python](#module-sqlalchemy.dialects.mysql.mysqlconnector)'
- en: '[asyncmy](#module-sqlalchemy.dialects.mysql.asyncmy)'
  id: totrans-830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asyncmy](#module-sqlalchemy.dialects.mysql.asyncmy)'
- en: '[aiomysql](#module-sqlalchemy.dialects.mysql.aiomysql)'
  id: totrans-831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[aiomysql](#module-sqlalchemy.dialects.mysql.aiomysql)'
- en: '[CyMySQL](#module-sqlalchemy.dialects.mysql.cymysql)'
  id: totrans-832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CyMySQL](#module-sqlalchemy.dialects.mysql.cymysql)'
- en: '[PyODBC](#module-sqlalchemy.dialects.mysql.pyodbc)'
  id: totrans-833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyODBC](#module-sqlalchemy.dialects.mysql.pyodbc)'
- en: Supported Versions and Features
  id: totrans-834
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的版本和功能
- en: SQLAlchemy supports MySQL starting with version 5.0.2 through modern releases,
    as well as all modern versions of MariaDB. See the official MySQL documentation
    for detailed information about features supported in any given server release.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy支持从版本5.0.2开始的MySQL，直至现代版本，以及所有现代版本的MariaDB。有关任何给定服务器版本支持的功能的详细信息，请参阅官方MySQL文档。
- en: 'Changed in version 1.4: minimum MySQL version supported is now 5.0.2.'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：支持的最低MySQL版本现在是5.0.2。
- en: MariaDB Support
  id: totrans-837
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MariaDB支持
- en: 'The MariaDB variant of MySQL retains fundamental compatibility with MySQL’s
    protocols however the development of these two products continues to diverge.
    Within the realm of SQLAlchemy, the two databases have a small number of syntactical
    and behavioral differences that SQLAlchemy accommodates automatically. To connect
    to a MariaDB database, no changes to the database URL are required:'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB变种的MySQL保留了与MySQL协议的基本兼容性，但这两个产品的发展仍在分歧。在SQLAlchemy领域，这两个数据库有一些语法和行为上的差异，SQLAlchemy会自动适应。要连接到MariaDB数据库，不需要对数据库URL进行任何更改：
- en: '[PRE134]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Upon first connect, the SQLAlchemy dialect employs a server version detection
    scheme that determines if the backing database reports as MariaDB. Based on this
    flag, the dialect can make different choices in those of areas where its behavior
    must be different.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次连接时，SQLAlchemy方言采用服务器版本检测方案，确定后端数据库是否报告为MariaDB。根据此标志，方言可以在必须有不同行为的领域做出不同选择。
- en: '### MariaDB-Only Mode'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '### 仅限MariaDB模式'
- en: 'The dialect also supports an **optional** “MariaDB-only” mode of connection,
    which may be useful for the case where an application makes use of MariaDB-specific
    features and is not compatible with a MySQL database. To use this mode of operation,
    replace the “mysql” token in the above URL with “mariadb”:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 该方言还支持**可选**的“仅限MariaDB”连接模式，这对于应用程序使用MariaDB特定功能且与MySQL数据库不兼容的情况可能很有用。要使用此操作模式，请将上述URL中的“mysql”标记替换为“mariadb”：
- en: '[PRE135]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: The above engine, upon first connect, will raise an error if the server version
    detection detects that the backing database is not MariaDB.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次连接时，上述引擎会在服务器版本检测检测到后端数据库不是 MariaDB 时引发错误。
- en: 'When using an engine with `"mariadb"` as the dialect name, **all mysql-specific
    options that include the name “mysql” in them are now named with “mariadb”**.
    This means options like `mysql_engine` should be named `mariadb_engine`, etc.
    Both “mysql” and “mariadb” options can be used simultaneously for applications
    that use URLs with both “mysql” and “mariadb” dialects:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用以 “mariadb” 为方言名称的引擎时，**所有包含名称 “mysql” 的 MySQL 特定选项现在都以 “mariadb” 命名**。这意味着像
    `mysql_engine` 这样的选项应该命名为 `mariadb_engine`，等等。对于同时使用“mysql”和“mariadb”方言 URL 的应用程序，可以同时使用“mysql”和“mariadb”选项：
- en: '[PRE136]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Similar behavior will occur when the above structures are reflected, i.e. the
    “mariadb” prefix will be present in the option names when the database URL is
    based on the “mariadb” name.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 当上述结构反映时，会出现类似的行为，即当数据库 URL 基于“mariadb”名称时，选项名称中将包含“mariadb”前缀。
- en: 'New in version 1.4: Added “mariadb” dialect name supporting “MariaDB-only mode”
    for the MySQL dialect.'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增了“mariadb”方言名称，支持 MySQL 方言的“仅 MariaDB 模式”。
- en: MariaDB Support
  id: totrans-849
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MariaDB 支持
- en: 'The MariaDB variant of MySQL retains fundamental compatibility with MySQL’s
    protocols however the development of these two products continues to diverge.
    Within the realm of SQLAlchemy, the two databases have a small number of syntactical
    and behavioral differences that SQLAlchemy accommodates automatically. To connect
    to a MariaDB database, no changes to the database URL are required:'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 的 MariaDB 变体保留了与 MySQL 协议的基本兼容性，但这两个产品的开发仍在分歧。在 SQLAlchemy 的领域内，这两个数据库有一些语法和行为上的小差异，SQLAlchemy
    会自动适应。连接到 MariaDB 数据库时，不需要对数据库 URL 进行任何更改：
- en: '[PRE137]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Upon first connect, the SQLAlchemy dialect employs a server version detection
    scheme that determines if the backing database reports as MariaDB. Based on this
    flag, the dialect can make different choices in those of areas where its behavior
    must be different.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次连接时，SQLAlchemy 方言采用了一种服务器版本检测方案，以确定后端数据库是否报告为 MariaDB。根据此标志，方言可以在必须具有不同行为的领域中做出不同选择。
- en: '### MariaDB-Only Mode'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '### 仅 MariaDB 模式'
- en: 'The dialect also supports an **optional** “MariaDB-only” mode of connection,
    which may be useful for the case where an application makes use of MariaDB-specific
    features and is not compatible with a MySQL database. To use this mode of operation,
    replace the “mysql” token in the above URL with “mariadb”:'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 该方言还支持一种 **可选的** “仅 MariaDB” 连接模式，这在应用程序使用 MariaDB 特定功能且与 MySQL 数据库不兼容的情况下可能很有用。要使用此操作模式，请将上述
    URL 中的 “mysql” 令牌替换为 “mariadb”：
- en: '[PRE138]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: The above engine, upon first connect, will raise an error if the server version
    detection detects that the backing database is not MariaDB.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次连接时，上述引擎会在服务器版本检测检测到后端数据库不是 MariaDB 时引发错误。
- en: 'When using an engine with `"mariadb"` as the dialect name, **all mysql-specific
    options that include the name “mysql” in them are now named with “mariadb”**.
    This means options like `mysql_engine` should be named `mariadb_engine`, etc.
    Both “mysql” and “mariadb” options can be used simultaneously for applications
    that use URLs with both “mysql” and “mariadb” dialects:'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用以 “mariadb” 为方言名称的引擎时，**所有包含名称 “mysql” 的 MySQL 特定选项现在都以 “mariadb” 命名**。这意味着像
    `mysql_engine` 这样的选项应该命名为 `mariadb_engine`，等等。对于同时使用“mysql”和“mariadb”方言 URL 的应用程序，可以同时使用“mysql”和“mariadb”选项：
- en: '[PRE139]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Similar behavior will occur when the above structures are reflected, i.e. the
    “mariadb” prefix will be present in the option names when the database URL is
    based on the “mariadb” name.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 当上述结构反映时，会出现类似的行为，即当数据库 URL 基于“mariadb”名称时，选项名称中将包含“mariadb”前缀。
- en: 'New in version 1.4: Added “mariadb” dialect name supporting “MariaDB-only mode”
    for the MySQL dialect.'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增了“mariadb”方言名称，支持 MySQL 方言的“仅 MariaDB 模式”。
- en: '## Connection Timeouts and Disconnects'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '## 连接超时和断开连接'
- en: 'MySQL / MariaDB feature an automatic connection close behavior, for connections
    that have been idle for a fixed period of time, defaulting to eight hours. To
    circumvent having this issue, use the [`create_engine.pool_recycle`](../core/engines.html#sqlalchemy.create_engine.params.pool_recycle
    "sqlalchemy.create_engine") option which ensures that a connection will be discarded
    and replaced with a new one if it has been present in the pool for a fixed number
    of seconds:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB 具有自动关闭连接行为，对于空闲一段固定时间的连接，默认为八小时。要避免出现此问题，可以使用[`create_engine.pool_recycle`](../core/engines.html#sqlalchemy.create_engine.params.pool_recycle
    "sqlalchemy.create_engine") 选项，该选项确保如果连接在池中存在了固定数量的秒数，则将其丢弃并替换为新连接：
- en: '[PRE140]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: For more comprehensive disconnect detection of pooled connections, including
    accommodation of server restarts and network issues, a pre-ping approach may be
    employed. See [Dealing with Disconnects](../core/pooling.html#pool-disconnects)
    for current approaches.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更全面的池化连接断开检测，包括适应服务器重启和网络问题，可以采用预先 ping 的方法。有关当前方法，请参阅[处理断开连接](../core/pooling.html#pool-disconnects)。
- en: See also
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dealing with Disconnects](../core/pooling.html#pool-disconnects) - Background
    on several techniques for dealing with timed out connections as well as database
    restarts.'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '[处理断开连接](../core/pooling.html#pool-disconnects) - 关于处理超时连接以及数据库重启的几种技术的背景。'
- en: '## CREATE TABLE arguments including Storage Engines'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '## 包括存储引擎在内的 CREATE TABLE 参数'
- en: 'Both MySQL’s and MariaDB’s CREATE TABLE syntax includes a wide array of special
    options, including `ENGINE`, `CHARSET`, `MAX_ROWS`, `ROW_FORMAT`, `INSERT_METHOD`,
    and many more. To accommodate the rendering of these arguments, specify the form
    `mysql_argument_name="value"`. For example, to specify a table with `ENGINE` of
    `InnoDB`, `CHARSET` of `utf8mb4`, and `KEY_BLOCK_SIZE` of `1024`:'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 的 CREATE TABLE 语法都包含许多特殊选项，包括`ENGINE`、`CHARSET`、`MAX_ROWS`、`ROW_FORMAT`、`INSERT_METHOD`等等。为了适应这些参数的渲染，需要指定形式`mysql_argument_name="value"`。例如，要指定一个具有`ENGINE`为`InnoDB`、`CHARSET`为`utf8mb4`和`KEY_BLOCK_SIZE`为`1024`的表：
- en: '[PRE141]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'When supporting [MariaDB-Only Mode](#mysql-mariadb-only-mode) mode, similar
    keys against the “mariadb” prefix must be included as well. The values can of
    course vary independently so that different settings on MySQL vs. MariaDB may
    be maintained:'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持 [仅限 MariaDB 模式](#mysql-mariadb-only-mode) 时，还必须包含对“mariadb”前缀的类似键。当然，值可以独立变化，以便可以维护
    MySQL 与 MariaDB 上的不同设置：
- en: '[PRE142]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: The MySQL / MariaDB dialects will normally transfer any keyword specified as
    `mysql_keyword_name` to be rendered as `KEYWORD_NAME` in the `CREATE TABLE` statement.
    A handful of these names will render with a space instead of an underscore; to
    support this, the MySQL dialect has awareness of these particular names, which
    include `DATA DIRECTORY` (e.g. `mysql_data_directory`), `CHARACTER SET` (e.g.
    `mysql_character_set`) and `INDEX DIRECTORY` (e.g. `mysql_index_directory`).
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB 方言通常会将指定为`mysql_keyword_name`的任何关键字转换为`CREATE TABLE`语句中的`KEYWORD_NAME`。其中少数名称将以空格而不是下划线呈现；为支持此功能，MySQL
    方言具有对这些特定名称的认知，其中包括`DATA DIRECTORY`（例如`mysql_data_directory`）、`CHARACTER SET`（例如`mysql_character_set`）和`INDEX
    DIRECTORY`（例如`mysql_index_directory`）。
- en: The most common argument is `mysql_engine`, which refers to the storage engine
    for the table. Historically, MySQL server installations would default to `MyISAM`
    for this value, although newer versions may be defaulting to `InnoDB`. The `InnoDB`
    engine is typically preferred for its support of transactions and foreign keys.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的参数是`mysql_engine`，它指的是表格的存储引擎。历史上，MySQL 服务器安装通常默认将此值设置为`MyISAM`，尽管较新的版本可能默认为`InnoDB`。`InnoDB`
    引擎通常更受欢迎，因为它支持事务和外键。
- en: A [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is created in a MySQL / MariaDB database with a storage engine of `MyISAM`
    will be essentially non-transactional, meaning any INSERT/UPDATE/DELETE statement
    referring to this table will be invoked as autocommit. It also will have no support
    for foreign key constraints; while the `CREATE TABLE` statement accepts foreign
    key options, when using the `MyISAM` storage engine these arguments are discarded.
    Reflecting such a table will also produce no foreign key constraint information.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL / MariaDB 数据库中创建的具有`MyISAM`存储引擎的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")将基本上是非事务性的，这意味着任何涉及此表的 INSERT/UPDATE/DELETE 语句都将被调用为自动提交。它也不支持外键约束；虽然`CREATE
    TABLE`语句接受外键选项，但在使用`MyISAM`存储引擎时，这些参数将被丢弃。反映这样一张表也不会产生外键约束信息。
- en: For fully atomic transactions as well as support for foreign key constraints,
    all participating `CREATE TABLE` statements must specify a transactional engine,
    which in the vast majority of cases is `InnoDB`.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全原子性的事务以及支持外键约束，所有参与的`CREATE TABLE`语句必须指定一个事务性引擎，在绝大多数情况下是`InnoDB`。
- en: Case Sensitivity and Table Reflection
  id: totrans-876
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大小写敏感和表反射
- en: Both MySQL and MariaDB have inconsistent support for case-sensitive identifier
    names, basing support on specific details of the underlying operating system.
    However, it has been observed that no matter what case sensitivity behavior is
    present, the names of tables in foreign key declarations are *always* received
    from the database as all-lower case, making it impossible to accurately reflect
    a schema where inter-related tables use mixed-case identifier names.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 都不一致地支持区分大小写的标识符名称，其支持基于底层操作系统的具体细节。然而，已经观察到，无论存在何种大小写敏感性行为，外键声明中的表名
    *始终* 以全部小写的形式从数据库接收到，这使得无法准确反映使用混合大小写标识符名称的相互关联表的模式。
- en: Therefore it is strongly advised that table names be declared as all lower case
    both within SQLAlchemy as well as on the MySQL / MariaDB database itself, especially
    if database reflection features are to be used.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，强烈建议在 SQLAlchemy 中以及在 MySQL / MariaDB 数据库本身中将表名声明为全部小写，特别是如果要使用数据库反射功能的话。
- en: '## Transaction Isolation Level'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '## 事务隔离级别'
- en: All MySQL / MariaDB dialects support setting of transaction isolation level
    both via a dialect-specific parameter [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") accepted by [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), as well as the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") argument as passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). This feature works by issuing
    the command `SET SESSION TRANSACTION ISOLATION LEVEL <level>` for each new connection.
    For the special AUTOCOMMIT isolation level, DBAPI-specific techniques are used.
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 MySQL / MariaDB 方言都支持通过方言特定参数 [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")（由 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 接受）以及作为传递给 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 的参数的 [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数来设置事务隔离级别。此功能通过为每个新连接发出命令
    `SET SESSION TRANSACTION ISOLATION LEVEL <level>` 来工作。对于特殊的 AUTOCOMMIT 隔离级别，使用了特定于
    DBAPI 的技术。
- en: 'To set isolation level using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    设置隔离级别：
- en: '[PRE143]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'To set using per-connection execution options:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: '使用每个连接的执行选项进行设置： '
- en: '[PRE144]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Valid values for `isolation_level` include:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '`isolation_level`的有效值包括：'
- en: '`READ COMMITTED`'
  id: totrans-886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: The special `AUTOCOMMIT` value makes use of the various “autocommit” attributes
    provided by specific DBAPIs, and is currently supported by MySQLdb, MySQL-Client,
    MySQL-Connector Python, and PyMySQL. Using it, the database connection will return
    true for the value of `SELECT @@autocommit;`.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊值 `AUTOCOMMIT` 利用了特定 DBAPI 提供的各种“自动提交”属性，目前由 MySQLdb、MySQL-Client、MySQL-Connector
    Python 和 PyMySQL 支持。使用它，数据库连接将返回 `SELECT @@autocommit;` 的值为真。
- en: There are also more options for isolation level configurations, such as “sub-engine”
    objects linked to a main [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which each apply different isolation level settings.
    See the discussion at [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)
    for background.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多隔离级别配置选项，例如与主 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 关联的“子引擎”对象，每个对象应用不同的隔离级别设置。请参阅 [设置事务隔离级别，包括 DBAPI
    自动提交](../core/connections.html#dbapi-autocommit) 中的讨论。
- en: See also
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括 DBAPI 自动提交](../core/connections.html#dbapi-autocommit)'
- en: AUTO_INCREMENT Behavior
  id: totrans-895
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AUTO_INCREMENT 行为
- en: 'When creating tables, SQLAlchemy will automatically set `AUTO_INCREMENT` on
    the first [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    primary key column which is not marked as a foreign key:'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表时，SQLAlchemy 将自动在第一个未标记为外键的[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")主键列上设置`AUTO_INCREMENT`：
- en: '[PRE145]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'You can disable this behavior by passing `False` to the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") argument of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This flag can also be used to enable auto-increment
    on a secondary column in a multi-column key for some storage engines:'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`False`传递给[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")参数，您可以禁用此行为。此标志还可用于在某些存储引擎中启用多列键中的辅助列的自动增量：
- en: '[PRE146]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '## Server Side Cursors'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '## 服务器端游标'
- en: Server-side cursor support is available for the mysqlclient, PyMySQL, mariadbconnector
    dialects and may also be available in others. This makes use of either the “buffered=True/False”
    flag if available or by using a class such as `MySQLdb.cursors.SSCursor` or `pymysql.cursors.SSCursor`
    internally.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端游标支持适用于 mysqlclient、PyMySQL、mariadbconnector 方言，也可能适用于其他方言。如果可用，可以使用“buffered=True/False”标志，也可以在内部使用诸如`MySQLdb.cursors.SSCursor`或`pymysql.cursors.SSCursor`这样的类。
- en: 'Server side cursors are enabled on a per-statement basis by using the [`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") connection execution option:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端游标通过使用[`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")连接执行选项基于语句来启用：
- en: '[PRE147]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Note that some kinds of SQL statements may not be supported with server side
    cursors; generally, only SQL statements that return rows should be used with this
    option.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些类型的 SQL 语句可能不支持服务器端游标；通常，只应该使用返回行的 SQL 语句来使用此选项。
- en: 'Deprecated since version 1.4: The dialect-level server_side_cursors flag is
    deprecated and will be removed in a future release. Please use the [`Connection.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.params.stream_results
    "sqlalchemy.engine.Connection") execution option for unbuffered cursor support.'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：dialect-level server_side_cursors 标志已弃用，并将在未来版本中删除。请使用[`Connection.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.params.stream_results
    "sqlalchemy.engine.Connection")执行选项来支持无缓冲游标。
- en: See also
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../core/connections.html#engine-stream-results)'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](../core/connections.html#engine-stream-results)'
- en: '## Unicode'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '## Unicode'
- en: Charset Selection
  id: totrans-909
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符集选择
- en: 'Most MySQL / MariaDB DBAPIs offer the option to set the client character set
    for a connection. This is typically delivered using the `charset` parameter in
    the URL, such as:'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 MySQL / MariaDB DBAPI 都提供了设置连接的客户端字符集的选项。这通常使用 URL 中的`charset`参数传递，例如：
- en: '[PRE148]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: This charset is the **client character set** for the connection. Some MySQL
    DBAPIs will default this to a value such as `latin1`, and some will make use of
    the `default-character-set` setting in the `my.cnf` file as well. Documentation
    for the DBAPI in use should be consulted for specific behavior.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 此字符集是连接的**客户端字符集**。某些 MySQL DBAPI 将默认将此设置为诸如`latin1`之类的值，而某些将使用`my.cnf`文件中的`default-character-set`设置。应该查阅正在使用的
    DBAPI 的文档以获取特定的行为。
- en: 'The encoding used for Unicode has traditionally been `''utf8''`. However, for
    MySQL versions 5.5.3 and MariaDB 5.5 on forward, a new MySQL-specific encoding
    `''utf8mb4''` has been introduced, and as of MySQL 8.0 a warning is emitted by
    the server if plain `utf8` is specified within any server-side directives, replaced
    with `utf8mb3`. The rationale for this new encoding is due to the fact that MySQL’s
    legacy utf-8 encoding only supports codepoints up to three bytes instead of four.
    Therefore, when communicating with a MySQL or MariaDB database that includes codepoints
    more than three bytes in size, this new charset is preferred, if supported by
    both the database as well as the client DBAPI, as in:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Unicode 使用的编码传统上是`'utf8'`。然而，对于 MySQL 版本 5.5.3 和 MariaDB 5.5 以后的版本，引入了一个新的
    MySQL 特定编码`'utf8mb4'`，而且从 MySQL 8.0 开始，如果在任何服务器端指令中指定了普通的`utf8`，服务器将发出警告，并替换为`utf8mb3`。引入这种新编码的原因是因为
    MySQL 的传统 utf-8 编码仅支持最多三个字节的码点，而不是四个。因此，在与包含超过三个字节大小的码点的 MySQL 或 MariaDB 数据库通信时，如果数据库和客户端
    DBAPI 都支持，优先使用这种新的字符集，如下所示：
- en: '[PRE149]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: All modern DBAPIs should support the `utf8mb4` charset.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代 DBAPI 应该支持`utf8mb4`字符集。
- en: In order to use `utf8mb4` encoding for a schema that was created with legacy
    `utf8`, changes to the MySQL/MariaDB schema and/or server configuration may be
    required.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 要在使用传统`utf8`创建的模式中使用`utf8mb4`编码，可能需要对 MySQL/MariaDB 模式和/或服务器配置进行更改。
- en: See also
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The utf8mb4 Character Set](https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html)
    - in the MySQL documentation'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '[utf8mb4 字符集](https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html)
    - MySQL 文档中'
- en: '### Dealing with Binary Data Warnings and Unicode'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '### 处理二进制数据警告和 Unicode'
- en: 'MySQL versions 5.6, 5.7 and later (not MariaDB at the time of this writing)
    now emit a warning when attempting to pass binary data to the database, while
    a character set encoding is also in place, when the binary data itself is not
    valid for that encoding:'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 版本 5.6、5.7 和以后（在本文写作时不包括 MariaDB）现在在尝试将二进制数据传递到数据库时发出警告，而在二进制数据本身不适用于该编码时，也放置了字符集编码：
- en: '[PRE150]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'This warning is due to the fact that the MySQL client library is attempting
    to interpret the binary string as a unicode object even if a datatype such as
    [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    is in use. To resolve this, the SQL statement requires a binary “character set
    introducer” be present before any non-NULL value that renders like this:'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 此警告是因为 MySQL 客户端库试图将二进制字符串解释为 unicode 对象，即使使用了诸如[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")之类的数据类型。为了解决此问题，SQL 语句需要在任何呈现如下的非 NULL 值之前存在一个二进制“字符集引导”：
- en: '[PRE151]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'These character set introducers are provided by the DBAPI driver, assuming
    the use of mysqlclient or PyMySQL (both of which are recommended). Add the query
    string parameter `binary_prefix=true` to the URL to repair this warning:'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符集引导由 DBAPI 驱动程序提供，假设使用的是 mysqlclient 或 PyMySQL（两者都建议使用）。将查询字符串参数`binary_prefix=true`添加到
    URL 中以修复此警告：
- en: '[PRE152]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: The `binary_prefix` flag may or may not be supported by other MySQL drivers.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '`binary_prefix`标志可能会或可能不会被其他 MySQL 驱动程序支持。'
- en: SQLAlchemy itself cannot render this `_binary` prefix reliably, as it does not
    work with the NULL value, which is valid to be sent as a bound parameter. As the
    MySQL driver renders parameters directly into the SQL string, it’s the most efficient
    place for this additional keyword to be passed.
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 MySQL 驱动程序直接将参数呈现到 SQL 字符串中，因此无法可靠地呈现此`_binary`前缀，因为它不会与 NULL 值一起使用，而 NULL
    值可以作为绑定参数发送。由于 MySQL 驱动程序直接将参数呈现到 SQL 字符串中，因此这个附加关键字被传递的地方效率最高。
- en: See also
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Character set introducers](https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html)
    - on the MySQL website'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '[字符集引导](https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html) -
    MySQL 网站上'
- en: Charset Selection
  id: totrans-930
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符集选择
- en: 'Most MySQL / MariaDB DBAPIs offer the option to set the client character set
    for a connection. This is typically delivered using the `charset` parameter in
    the URL, such as:'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 MySQL / MariaDB DBAPI 都提供了为连接设置客户端字符集的选项。这通常使用 URL 中的`charset`参数传递，例如：
- en: '[PRE153]'
  id: totrans-932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: This charset is the **client character set** for the connection. Some MySQL
    DBAPIs will default this to a value such as `latin1`, and some will make use of
    the `default-character-set` setting in the `my.cnf` file as well. Documentation
    for the DBAPI in use should be consulted for specific behavior.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符集是**客户端字符集**用于连接。某些 MySQL DBAPI 将其默认为诸如`latin1`之类的值，有些将使用`my.cnf`文件中的`default-character-set`设置。应该咨询使用的
    DBAPI 的文档以获取具体行为。
- en: 'The encoding used for Unicode has traditionally been `''utf8''`. However, for
    MySQL versions 5.5.3 and MariaDB 5.5 on forward, a new MySQL-specific encoding
    `''utf8mb4''` has been introduced, and as of MySQL 8.0 a warning is emitted by
    the server if plain `utf8` is specified within any server-side directives, replaced
    with `utf8mb3`. The rationale for this new encoding is due to the fact that MySQL’s
    legacy utf-8 encoding only supports codepoints up to three bytes instead of four.
    Therefore, when communicating with a MySQL or MariaDB database that includes codepoints
    more than three bytes in size, this new charset is preferred, if supported by
    both the database as well as the client DBAPI, as in:'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 Unicode 的编码传统上是`'utf8'`。然而，对于 MySQL 版本 5.5.3 和 MariaDB 5.5 以及更高版本，引入了一个新的
    MySQL 特定编码`'utf8mb4'`，并且从 MySQL 8.0 开始，如果在任何服务器端指令中指定了普通的`utf8`，服务器将发出警告，并替换为`utf8mb3`。引入这种新编码的原因是因为
    MySQL 的传统 utf-8 编码只支持最多三个字节的代码点，而不是四个。因此，当与包含超过三个字节大小的代码点的 MySQL 或 MariaDB 数据库通信时，如果数据库和客户端
    DBAPI 都支持，首选使用这种新的字符集，如下所示：
- en: '[PRE154]'
  id: totrans-935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: All modern DBAPIs should support the `utf8mb4` charset.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代 DBAPI 应该支持`utf8mb4`字符集。
- en: In order to use `utf8mb4` encoding for a schema that was created with legacy
    `utf8`, changes to the MySQL/MariaDB schema and/or server configuration may be
    required.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在使用了传统`utf8`创建的模式中使用`utf8mb4`编码，可能需要对 MySQL/MariaDB 模式和/或服务器配置进行更改。
- en: See also
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The utf8mb4 Character Set](https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html)
    - in the MySQL documentation'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '[utf8mb4 字符集](https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html)
    - 在 MySQL 文档中'
- en: '### Dealing with Binary Data Warnings and Unicode'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '### 处理二进制数据警告和 Unicode'
- en: 'MySQL versions 5.6, 5.7 and later (not MariaDB at the time of this writing)
    now emit a warning when attempting to pass binary data to the database, while
    a character set encoding is also in place, when the binary data itself is not
    valid for that encoding:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 版本 5.6、5.7 及更高版本（在撰写本文时不包括 MariaDB）现在在尝试将二进制数据传递给数据库时发出警告，同时还存在字符集编码，当二进制数据本身对该编码无效时：
- en: '[PRE155]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'This warning is due to the fact that the MySQL client library is attempting
    to interpret the binary string as a unicode object even if a datatype such as
    [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    is in use. To resolve this, the SQL statement requires a binary “character set
    introducer” be present before any non-NULL value that renders like this:'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 此警告是由于 MySQL 客户端库试图将二进制字符串解释为 Unicode 对象，即使使用了诸如[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")之类的数据类型。为了解决这个问题，SQL 语句在任何呈现如下的非 NULL 值之前需要存在一个二进制“字符集介绍”：
- en: '[PRE156]'
  id: totrans-944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'These character set introducers are provided by the DBAPI driver, assuming
    the use of mysqlclient or PyMySQL (both of which are recommended). Add the query
    string parameter `binary_prefix=true` to the URL to repair this warning:'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符集介绍由 DBAPI 驱动程序提供，假设使用 mysqlclient 或 PyMySQL（两者都推荐）。在 URL 中添加查询字符串参数`binary_prefix=true`以修复此警告：
- en: '[PRE157]'
  id: totrans-946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: The `binary_prefix` flag may or may not be supported by other MySQL drivers.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '`binary_prefix`标志可能会或可能不会被其他 MySQL 驱动程序支持。'
- en: SQLAlchemy itself cannot render this `_binary` prefix reliably, as it does not
    work with the NULL value, which is valid to be sent as a bound parameter. As the
    MySQL driver renders parameters directly into the SQL string, it’s the most efficient
    place for this additional keyword to be passed.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 本身无法可靠地呈现这个`_binary`前缀，因为它不适用于 NULL 值，而 NULL 值是可以作为绑定参数发送的。由于 MySQL
    驱动程序直接将参数呈现到 SQL 字符串中，这是传递此附加关键字的最有效位置。
- en: See also
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Character set introducers](https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html)
    - on the MySQL website'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: '[字符集介绍](https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html) -
    在 MySQL 网站上'
- en: ANSI Quoting Style
  id: totrans-951
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ANSI 引用风格
- en: MySQL / MariaDB feature two varieties of identifier “quoting style”, one using
    backticks and the other using quotes, e.g. ``some_identifier`` vs. `"some_identifier"`.
    All MySQL dialects detect which version is in use by checking the value of [sql_mode](#mysql-sql-mode)
    when a connection is first established with a particular [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This quoting style comes into play when rendering
    table and column names as well as when reflecting existing database structures.
    The detection is entirely automatic and no special configuration is needed to
    use either quoting style.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB有两种不同的标识符“引号样式”，一种使用反引号，另一种使用引号，例如``some_identifier`` vs. `"some_identifier"`。
    所有MySQL方言通过检查在与特定[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")建立连接时的[sql_mode](#mysql-sql-mode)的值来检测正在使用的版本。 当与特定池的给定DBAPI连接首次创建连接时，此引号样式用于渲染表和列名称以及反映现有数据库结构。
    检测完全自动，不需要特殊配置来使用任何引号样式。
- en: '## Changing the sql_mode'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '## 更改sql_mode'
- en: MySQL supports operating in multiple [Server SQL Modes](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html)
    for both Servers and Clients. To change the `sql_mode` for a given application,
    a developer can leverage SQLAlchemy’s Events system.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持在服务器和客户端上运行多种[服务器SQL模式](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html)。
    要更改给定应用程序的`sql_mode`，开发人员可以利用SQLAlchemy的事件系统。
- en: 'In the following example, the event system is used to set the `sql_mode` on
    the `first_connect` and `connect` events:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，事件系统用于在`first_connect`和`connect`事件上设置`sql_mode`：
- en: '[PRE158]'
  id: totrans-956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: In the example illustrated above, the “connect” event will invoke the “SET”
    statement on the connection at the moment a particular DBAPI connection is first
    created for a given Pool, before the connection is made available to the connection
    pool. Additionally, because the function was registered with `insert=True`, it
    will be prepended to the internal list of registered functions.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面说明的示例中，“connect”事件将在特定DBAPI连接首次为给定的池创建连接时在连接池将连接提供给连接池之前在连接上调用“SET”语句。 此外，因为函数已注册为`insert=True`，它将被添加到注册函数的内部列表的开头。
- en: MySQL / MariaDB SQL Extensions
  id: totrans-958
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL / MariaDB SQL扩展
- en: 'Many of the MySQL / MariaDB SQL extensions are handled through SQLAlchemy’s
    generic function and operator support:'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 许多MySQL / MariaDB SQL扩展都通过SQLAlchemy的通用函数和操作符支持：
- en: '[PRE159]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: And of course any valid SQL statement can be executed as a string as well.
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，任何有效的SQL语句也可以作为字符串执行。
- en: Some limited direct support for MySQL / MariaDB extensions to SQL is currently
    available.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有一些有限的直接支持MySQL / MariaDB SQL扩展到SQL的方法。
- en: 'INSERT..ON DUPLICATE KEY UPDATE: See [INSERT…ON DUPLICATE KEY UPDATE (Upsert)](#mysql-insert-on-duplicate-key-update)'
  id: totrans-963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: INSERT..ON DUPLICATE KEY UPDATE：参见[INSERT…ON DUPLICATE KEY UPDATE（Upsert）](#mysql-insert-on-duplicate-key-update)
- en: 'SELECT pragma, use [`Select.prefix_with()`](../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") and [`Query.prefix_with()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.prefix_with
    "sqlalchemy.orm.Query.prefix_with"):'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELECT pragma，请使用[`Select.prefix_with()`](../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with")和[`Query.prefix_with()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.prefix_with
    "sqlalchemy.orm.Query.prefix_with")：
- en: '[PRE160]'
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'UPDATE with LIMIT:'
  id: totrans-966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LIMIT的UPDATE：
- en: '[PRE161]'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'optimizer hints, use [`Select.prefix_with()`](../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") and [`Query.prefix_with()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.prefix_with
    "sqlalchemy.orm.Query.prefix_with"):'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化器提示，请使用[`Select.prefix_with()`](../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with")和[`Query.prefix_with()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.prefix_with
    "sqlalchemy.orm.Query.prefix_with")：
- en: '[PRE162]'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'index hints, use [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") and [`Query.with_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_hint
    "sqlalchemy.orm.Query.with_hint"):'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引提示，请使用[`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")和[`Query.with_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_hint
    "sqlalchemy.orm.Query.with_hint")：
- en: '[PRE163]'
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'MATCH operator support:'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MATCH操作符支持：
- en: '[PRE164]'
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: INSERT/DELETE…RETURNING
  id: totrans-974
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: INSERT/DELETE…RETURNING
- en: The MariaDB dialect supports 10.5+’s `INSERT..RETURNING` and `DELETE..RETURNING`
    (10.0+) syntaxes. `INSERT..RETURNING` may be used automatically in some cases
    in order to fetch newly generated identifiers in place of the traditional approach
    of using `cursor.lastrowid`, however `cursor.lastrowid` is currently still preferred
    for simple single-statement cases for its better performance.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB 方言支持 10.5+ 的`INSERT..RETURNING`和`DELETE..RETURNING`（10.0+）语法。`INSERT..RETURNING`可能会在某些情况下自动使用，以获取新生成的标识符，而不是使用`cursor.lastrowid`的传统方法，但是目前在简单的单语句情况下仍然更喜欢使用`cursor.lastrowid`，因为其性能更好。
- en: 'To specify an explicit `RETURNING` clause, use the `_UpdateBase.returning()`
    method on a per-statement basis:'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定显式的`RETURNING`子句，请在每个语句上使用`_UpdateBase.returning()`方法：
- en: '[PRE165]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'New in version 2.0: Added support for MariaDB RETURNING'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能：添加了对 MariaDB RETURNING 的支持
- en: '## INSERT…ON DUPLICATE KEY UPDATE (Upsert)'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '## INSERT…ON DUPLICATE KEY UPDATE（更新插入）'
- en: MySQL / MariaDB allow “upserts” (update or insert) of rows into a table via
    the `ON DUPLICATE KEY UPDATE` clause of the `INSERT` statement. A candidate row
    will only be inserted if that row does not match an existing primary or unique
    key in the table; otherwise, an UPDATE will be performed. The statement allows
    for separate specification of the values to INSERT versus the values for UPDATE.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB 允许通过`INSERT`语句的`ON DUPLICATE KEY UPDATE`子句将行“upsert”（更新或插入）到表中。只有候选行与表中现有的主键或唯一键不匹配时，才会插入候选行；否则，将执行更新。该语句允许单独指定要插入的值与要更新的值。
- en: 'SQLAlchemy provides `ON DUPLICATE KEY UPDATE` support via the MySQL-specific
    [`insert()`](#sqlalchemy.dialects.mysql.insert "sqlalchemy.dialects.mysql.insert")
    function, which provides the generative method [`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update"):'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy通过 MySQL 特定的[`insert()`](#sqlalchemy.dialects.mysql.insert "sqlalchemy.dialects.mysql.insert")函数提供`ON
    DUPLICATE KEY UPDATE`支持，该函数提供了生成方法[`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")：
- en: '[PRE166]'
  id: totrans-982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Unlike PostgreSQL’s “ON CONFLICT” phrase, the “ON DUPLICATE KEY UPDATE” phrase
    will always match on any primary key or unique key, and will always perform an
    UPDATE if there’s a match; there are no options for it to raise an error or to
    skip performing an UPDATE.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PostgreSQL 的“ON CONFLICT”短语不同，“ON DUPLICATE KEY UPDATE”短语将始终匹配任何主键或唯一键，并且始终在匹配时执行
    UPDATE；它没有选项可以引发错误或跳过执行 UPDATE。
- en: '`ON DUPLICATE KEY UPDATE` is used to perform an update of the already existing
    row, using any combination of new values as well as values from the proposed insertion.
    These values are normally specified using keyword arguments passed to the [`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") given column key values
    (usually the name of the column, unless it specifies [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column") ) as keys and literal or SQL expressions as values:'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON DUPLICATE KEY UPDATE`用于对已经存在的行执行更新，使用新值的任何组合以及建议插入的值。这些值通常使用关键字参数传递给[`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")给定列键值（通常是列的名称，除非它指定[`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column")）作为键和文字或 SQL 表达式作为值：'
- en: '[PRE167]'
  id: totrans-985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'In a manner similar to that of `UpdateBase.values()`, other parameter forms
    are accepted, including a single dictionary:'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 与`UpdateBase.values()`类似，还接受其他参数形式，包括单个字典：
- en: '[PRE168]'
  id: totrans-987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'as well as a list of 2-tuples, which will automatically provide a parameter-ordered
    UPDATE statement in a manner similar to that described at [Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates).
    Unlike the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object, no special flag is needed to specify the intent since the argument form
    is this context is unambiguous:'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 以及一个 2 元组的列表，它将自动提供类似于[参数顺序更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates)中描述的方法的参数排序
    UPDATE 语句。与[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")对象不同，不需要指定特殊标志来指定意图，因为此上下文中的参数形式是清晰明了的：
- en: '[PRE169]'
  id: totrans-989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Changed in version 1.3: support for parameter-ordered UPDATE clause within
    MySQL ON DUPLICATE KEY UPDATE'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.3 版中更改：支持 MySQL ON DUPLICATE KEY UPDATE 中的参数顺序 UPDATE 子句
- en: Warning
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") method does **not**
    take into account Python-side default UPDATE values or generation functions, e.g.
    e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON DUPLICATE
    KEY style of UPDATE, unless they are manually specified explicitly in the parameters.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") 方法 **不** 考虑Python端的默认UPDATE值或生成函数，例如，那些使用
    [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 指定的值。这些值不会在ON DUPLICATE KEY样式的UPDATE中生效，除非它们在参数中手动指定。'
- en: 'In order to refer to the proposed insertion row, the special alias [`Insert.inserted`](#sqlalchemy.dialects.mysql.Insert.inserted
    "sqlalchemy.dialects.mysql.Insert.inserted") is available as an attribute on the
    [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    object; this object is a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which contains all columns of the
    target table:'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引用所提出的插入行，特殊别名 [`Insert.inserted`](#sqlalchemy.dialects.mysql.Insert.inserted
    "sqlalchemy.dialects.mysql.Insert.inserted") 可作为 [`Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert") 对象的属性使用；这个对象是一个包含目标表所有列的 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")：
- en: '[PRE170]'
  id: totrans-994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: When rendered, the “inserted” namespace will produce the expression `VALUES(<columnname>)`.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染时，“inserted”命名空间将产生表达式 `VALUES(<columnname>)`。
- en: 'New in version 1.2: Added support for MySQL ON DUPLICATE KEY UPDATE clause'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中：增加了对 MySQL ON DUPLICATE KEY UPDATE 子句的支持
- en: rowcount Support
  id: totrans-997
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行数支持
- en: SQLAlchemy standardizes the DBAPI `cursor.rowcount` attribute to be the usual
    definition of “number of rows matched by an UPDATE or DELETE” statement. This
    is in contradiction to the default setting on most MySQL DBAPI drivers, which
    is “number of rows actually modified/deleted”. For this reason, the SQLAlchemy
    MySQL dialects always add the `constants.CLIENT.FOUND_ROWS` flag, or whatever
    is equivalent for the target dialect, upon connection. This setting is currently
    hardcoded.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 将 DBAPI `cursor.rowcount` 属性标准化为“UPDATE或DELETE语句匹配的行数”的常规定义。这与大多数
    MySQL DBAPI 驱动程序的默认设置相矛盾，后者是“实际修改/删除的行数”。因此，SQLAlchemy MySQL 方言总是在连接时添加 `constants.CLIENT.FOUND_ROWS`
    标志，或者等效于目标方言的标志。这个设置目前是硬编码的。
- en: See also
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")'
- en: '## MySQL / MariaDB- Specific Index Options'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: '## MySQL / MariaDB 特定的索引选项'
- en: MySQL and MariaDB-specific extensions to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct are available.
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 MySQL 和 MariaDB 特定的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造扩展。
- en: Index Length
  id: totrans-1003
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引长度
- en: 'MySQL and MariaDB both provide an option to create index entries with a certain
    length, where “length” refers to the number of characters or bytes in each value
    which will become part of the index. SQLAlchemy provides this feature via the
    `mysql_length` and/or `mariadb_length` parameters:'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 都提供了创建具有特定长度的索引条目的选项，这里的“长度”指的是每个值中将成为索引一部分的字符或字节的数量。SQLAlchemy通过
    `mysql_length` 和/或 `mariadb_length` 参数提供了这个特性：
- en: '[PRE171]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Prefix lengths are given in characters for nonbinary string types and in bytes
    for binary string types. The value passed to the keyword argument *must* be either
    an integer (and, thus, specify the same prefix length value for all columns of
    the index) or a dict in which keys are column names and values are prefix length
    values for corresponding columns. MySQL and MariaDB only allow a length for a
    column of an index if it is for a CHAR, VARCHAR, TEXT, BINARY, VARBINARY and BLOB.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀长度以字符形式给出，用于非二进制字符串类型，以字节形式给出，用于二进制字符串类型。传递给关键字参数的值 *必须* 是一个整数（因此，为索引的所有列指定相同的前缀长度值），或者是一个字典，其中键是列名，值是相应列的前缀长度值。MySQL
    和 MariaDB 仅允许索引列的长度为 CHAR、VARCHAR、TEXT、BINARY、VARBINARY 和 BLOB。
- en: Index Prefixes
  id: totrans-1007
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引前缀
- en: 'MySQL storage engines permit you to specify an index prefix when creating an
    index. SQLAlchemy provides this feature via the `mysql_prefix` parameter on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"):'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 存储引擎允许在创建索引时指定索引前缀。SQLAlchemy 通过 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 的 `mysql_prefix` 参数提供了这个功能：
- en: '[PRE172]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX, so it *must* be a valid index prefix for your MySQL storage
    engine.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递给底层的 CREATE INDEX，因此它 *必须* 是你的 MySQL 存储引擎的有效索引前缀。
- en: See also
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CREATE INDEX](https://dev.mysql.com/doc/refman/5.0/en/create-index.html) -
    MySQL documentation'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: '[创建索引](https://dev.mysql.com/doc/refman/5.0/en/create-index.html) - MySQL 文档'
- en: Index Types
  id: totrans-1013
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引类型
- en: 'Some MySQL storage engines permit you to specify an index type when creating
    an index or primary key constraint. SQLAlchemy provides this feature via the `mysql_using`
    parameter on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"):'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 MySQL 存储引擎允许在创建索引或主键约束时指定索引类型。SQLAlchemy 通过 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 的 `mysql_using` 参数提供了这个功能：
- en: '[PRE173]'
  id: totrans-1015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'As well as the `mysql_using` parameter on [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"):'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 以及 [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 上的 `mysql_using` 参数：
- en: '[PRE174]'
  id: totrans-1017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX or PRIMARY KEY clause, so it *must* be a valid index type
    for your MySQL storage engine.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递给底层的 CREATE INDEX 或 PRIMARY KEY 子句，因此它 *必须* 是你的 MySQL 存储引擎的有效索引类型。
- en: 'More information can be found at:'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅：
- en: '[https://dev.mysql.com/doc/refman/5.0/en/create-index.html](https://dev.mysql.com/doc/refman/5.0/en/create-index.html)'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.0/en/create-index.html](https://dev.mysql.com/doc/refman/5.0/en/create-index.html)'
- en: '[https://dev.mysql.com/doc/refman/5.0/en/create-table.html](https://dev.mysql.com/doc/refman/5.0/en/create-table.html)'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.0/en/create-table.html](https://dev.mysql.com/doc/refman/5.0/en/create-table.html)'
- en: Index Parsers
  id: totrans-1022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引解析器
- en: 'CREATE FULLTEXT INDEX in MySQL also supports a “WITH PARSER” option. This is
    available using the keyword argument `mysql_with_parser`:'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 中，CREATE FULLTEXT INDEX 还支持 “WITH PARSER” 选项。这可以使用关键字参数 `mysql_with_parser`
    实现：
- en: '[PRE175]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: New in version 1.3.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新增内容。
- en: Index Length
  id: totrans-1026
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引长度
- en: 'MySQL and MariaDB both provide an option to create index entries with a certain
    length, where “length” refers to the number of characters or bytes in each value
    which will become part of the index. SQLAlchemy provides this feature via the
    `mysql_length` and/or `mariadb_length` parameters:'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 都提供了创建带有一定长度的索引条目的选项，其中“长度”指的是将成为索引一部分的每个值中的字符或字节数。SQLAlchemy
    通过 `mysql_length` 和/或 `mariadb_length` 参数提供了这个功能：
- en: '[PRE176]'
  id: totrans-1028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Prefix lengths are given in characters for nonbinary string types and in bytes
    for binary string types. The value passed to the keyword argument *must* be either
    an integer (and, thus, specify the same prefix length value for all columns of
    the index) or a dict in which keys are column names and values are prefix length
    values for corresponding columns. MySQL and MariaDB only allow a length for a
    column of an index if it is for a CHAR, VARCHAR, TEXT, BINARY, VARBINARY and BLOB.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 非二进制字符串类型的字符给出前缀长度，二进制字符串类型的字节给出前缀长度。传递给关键字参数的值 *必须* 是整数（因此为所有索引列指定相同的前缀长度值）或字典，其中键是列名，值是对应列的前缀长度值。MySQL
    和 MariaDB 只允许索引列的长度为 CHAR、VARCHAR、TEXT、BINARY、VARBINARY 和 BLOB 类型时指定长度。
- en: Index Prefixes
  id: totrans-1030
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引前缀
- en: 'MySQL storage engines permit you to specify an index prefix when creating an
    index. SQLAlchemy provides this feature via the `mysql_prefix` parameter on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"):'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 存储引擎允许在创建索引时指定索引前缀。SQLAlchemy 通过 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 的 `mysql_prefix` 参数提供了这个功能：
- en: '[PRE177]'
  id: totrans-1032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX, so it *must* be a valid index prefix for your MySQL storage
    engine.
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递给底层的 CREATE INDEX，因此它 *必须* 是你的 MySQL 存储引擎的有效索引前缀。
- en: See also
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CREATE INDEX](https://dev.mysql.com/doc/refman/5.0/en/create-index.html) -
    MySQL documentation'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: '[创建索引](https://dev.mysql.com/doc/refman/5.0/en/create-index.html) - MySQL 文档'
- en: Index Types
  id: totrans-1036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引类型
- en: 'Some MySQL storage engines permit you to specify an index type when creating
    an index or primary key constraint. SQLAlchemy provides this feature via the `mysql_using`
    parameter on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"):'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 MySQL 存储引擎允许您在创建索引或主键约束时指定索引类型。SQLAlchemy 通过[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上的`mysql_using`参数提供了此功能：
- en: '[PRE178]'
  id: totrans-1038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'As well as the `mysql_using` parameter on [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"):'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 以及[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")上的`mysql_using`参数：
- en: '[PRE179]'
  id: totrans-1040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX or PRIMARY KEY clause, so it *must* be a valid index type
    for your MySQL storage engine.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递给底层的 CREATE INDEX 或 PRIMARY KEY 子句，因此它*必须*是您的 MySQL 存储引擎的有效索引类型。
- en: 'More information can be found at:'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见：
- en: '[https://dev.mysql.com/doc/refman/5.0/en/create-index.html](https://dev.mysql.com/doc/refman/5.0/en/create-index.html)'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.0/en/create-index.html](https://dev.mysql.com/doc/refman/5.0/en/create-index.html)'
- en: '[https://dev.mysql.com/doc/refman/5.0/en/create-table.html](https://dev.mysql.com/doc/refman/5.0/en/create-table.html)'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.0/en/create-table.html](https://dev.mysql.com/doc/refman/5.0/en/create-table.html)'
- en: Index Parsers
  id: totrans-1045
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引解析器
- en: 'CREATE FULLTEXT INDEX in MySQL also supports a “WITH PARSER” option. This is
    available using the keyword argument `mysql_with_parser`:'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 中的 CREATE FULLTEXT INDEX 也支持“WITH PARSER”选项。可以使用关键字参数`mysql_with_parser`：
- en: '[PRE180]'
  id: totrans-1047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: New in version 1.3.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3 版本中的新功能。
- en: '## MySQL / MariaDB Foreign Keys'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '## MySQL / MariaDB 外键'
- en: MySQL and MariaDB’s behavior regarding foreign keys has some important caveats.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 在外键方面的行为有一些重要的注意事项。
- en: Foreign Key Arguments to Avoid
  id: totrans-1051
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要避免的外键参数
- en: 'Neither MySQL nor MariaDB support the foreign key arguments “DEFERRABLE”, “INITIALLY”,
    or “MATCH”. Using the `deferrable` or `initially` keyword argument with [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") or [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") will have the effect of these keywords being rendered
    in a DDL expression, which will then raise an error on MySQL or MariaDB. In order
    to use these keywords on a foreign key while having them ignored on a MySQL /
    MariaDB backend, use a custom compile rule:'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 都不支持外键参数“DEFERRABLE”、“INITIALLY”或“MATCH”。在[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")或[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")上使用`deferrable`或`initially`关键字参数将导致这些关键字在 DDL 表达式中呈现，然后在
    MySQL 或 MariaDB 上引发错误。为了在 MySQL / MariaDB 后端忽略这些关键字的情况下在外键上使用这些关键字，使用自定义编译规则：
- en: '[PRE181]'
  id: totrans-1053
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: The “MATCH” keyword is in fact more insidious, and is explicitly disallowed
    by SQLAlchemy in conjunction with the MySQL or MariaDB backends. This argument
    is silently ignored by MySQL / MariaDB, but in addition has the effect of ON UPDATE
    and ON DELETE options also being ignored by the backend. Therefore MATCH should
    never be used with the MySQL / MariaDB backends; as is the case with DEFERRABLE
    and INITIALLY, custom compilation rules can be used to correct a ForeignKeyConstraint
    at DDL definition time.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: '"MATCH" 关键字实际上更加隐匿，且在与 MySQL 或 MariaDB 后端一起明确禁止。此参数被 MySQL / MariaDB 默默忽略，但此外还导致
    ON UPDATE 和 ON DELETE 选项也被后端忽略。因此，永远不应该在 MySQL / MariaDB 后端使用 MATCH；与 DEFERRABLE
    和 INITIALLY 一样，可以使用自定义编译规则在 DDL 定义时纠正 ForeignKeyConstraint。'
- en: Reflection of Foreign Key Constraints
  id: totrans-1055
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外键约束的反射
- en: 'Not all MySQL / MariaDB storage engines support foreign keys. When using the
    very common `MyISAM` MySQL storage engine, the information loaded by table reflection
    will not include foreign keys. For these tables, you may supply a `ForeignKeyConstraint`
    at reflection time:'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有 MySQL / MariaDB 存储引擎都支持外键。当使用非常常见的`MyISAM` MySQL 存储引擎时，表格反射加载的信息将不包括外键。对于这些表格，您可以在反射时提供`ForeignKeyConstraint`：
- en: '[PRE182]'
  id: totrans-1057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: See also
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CREATE TABLE arguments including Storage Engines](#mysql-storage-engines)'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '[创建表格参数，包括存储引擎](#mysql-storage-engines)'
- en: Foreign Key Arguments to Avoid
  id: totrans-1060
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要避免的外键参数
- en: 'Neither MySQL nor MariaDB support the foreign key arguments “DEFERRABLE”, “INITIALLY”,
    or “MATCH”. Using the `deferrable` or `initially` keyword argument with [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") or [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") will have the effect of these keywords being rendered
    in a DDL expression, which will then raise an error on MySQL or MariaDB. In order
    to use these keywords on a foreign key while having them ignored on a MySQL /
    MariaDB backend, use a custom compile rule:'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 都不支持外键参数“DEFERRABLE”、“INITIALLY”或“MATCH”。在 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 或 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 中使用 `deferrable` 或 `initially` 关键字参数会使这些关键字在 DDL
    表达式中呈现，然后在 MySQL 或 MariaDB 上引发错误。为了在外键上使用这些关键字，同时忽略 MySQL / MariaDB 后端上的它们，可以使用自定义编译规则：
- en: '[PRE183]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: The “MATCH” keyword is in fact more insidious, and is explicitly disallowed
    by SQLAlchemy in conjunction with the MySQL or MariaDB backends. This argument
    is silently ignored by MySQL / MariaDB, but in addition has the effect of ON UPDATE
    and ON DELETE options also being ignored by the backend. Therefore MATCH should
    never be used with the MySQL / MariaDB backends; as is the case with DEFERRABLE
    and INITIALLY, custom compilation rules can be used to correct a ForeignKeyConstraint
    at DDL definition time.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: “MATCH” 关键字实际上更加阴险，并且在与 MySQL 或 MariaDB 后端一起使用时，SQLAlchemy 明确禁止使用此参数。这个参数被 MySQL
    / MariaDB 默默地忽略，但此外，还会导致后端也忽略 ON UPDATE 和 ON DELETE 选项。因此，不应该在 MySQL / MariaDB
    后端使用 MATCH；与 DEFERRABLE 和 INITIALLY 一样，可以使用自定义编译规则来在 DDL 定义时纠正 ForeignKeyConstraint。
- en: Reflection of Foreign Key Constraints
  id: totrans-1064
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外键约束的反射
- en: 'Not all MySQL / MariaDB storage engines support foreign keys. When using the
    very common `MyISAM` MySQL storage engine, the information loaded by table reflection
    will not include foreign keys. For these tables, you may supply a `ForeignKeyConstraint`
    at reflection time:'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的 MySQL / MariaDB 存储引擎都支持外键。在使用非常常见的 `MyISAM` MySQL 存储引擎时，通过表反射加载的信息将不包括外键。对于这些表，可以在反射时提供
    `ForeignKeyConstraint`：
- en: '[PRE184]'
  id: totrans-1066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: See also
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CREATE TABLE arguments including Storage Engines](#mysql-storage-engines)'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '[包括存储引擎的 CREATE TABLE 参数](#mysql-storage-engines)'
- en: '## MySQL / MariaDB Unique Constraints and Reflection'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: '## MySQL / MariaDB 唯一约束和反射'
- en: SQLAlchemy supports both the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct with the flag `unique=True`, indicating a
    UNIQUE index, as well as the [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct, representing a UNIQUE constraint.
    Both objects/syntaxes are supported by MySQL / MariaDB when emitting DDL to create
    these constraints. However, MySQL / MariaDB does not have a unique constraint
    construct that is separate from a unique index; that is, the “UNIQUE” constraint
    on MySQL / MariaDB is equivalent to creating a “UNIQUE INDEX”.
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 支持带有标志 `unique=True` 的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造，表示唯一索引，以及表示唯一约束的 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 构造。当发出 DDL 以创建这些约束时，MySQL / MariaDB 支持这两种对象/语法。然而，MySQL
    / MariaDB 没有与唯一索引分离的唯一约束构造；也就是说，在 MySQL / MariaDB 上，“UNIQUE” 约束等效于创建一个 “UNIQUE
    INDEX”。
- en: When reflecting these constructs, the [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") methods will
    **both** return an entry for a UNIQUE index in MySQL / MariaDB. However, when
    performing full table reflection using `Table(..., autoload_with=engine)`, the
    [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct is **not** part of the fully reflected
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct under any circumstances; this construct is always represented by a [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") with the `unique=True` setting present in the [`Table.indexes`](../core/metadata.html#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") collection.
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: 当反射这些结构时，[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") 和 [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 方法都会在 MySQL /
    MariaDB 中为唯一索引返回一个条目。然而，当使用 `Table(..., autoload_with=engine)` 进行完整表反射时，[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 结构在任何情况下都不是完全反映的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 结构的一部分；这个结构总是由在 [`Table.indexes`](../core/metadata.html#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") 集合中存在 `unique=True` 设置的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 表示。
- en: TIMESTAMP / DATETIME issues
  id: totrans-1072
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TIMESTAMP / DATETIME 问题
- en: '### Rendering ON UPDATE CURRENT TIMESTAMP for MySQL / MariaDB’s explicit_defaults_for_timestamp'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '### 为 MySQL / MariaDB 的 explicit_defaults_for_timestamp 渲染 ON UPDATE CURRENT
    TIMESTAMP'
- en: MySQL / MariaDB have historically expanded the DDL for the [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype into the phrase “TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ON UPDATE CURRENT_TIMESTAMP”, which includes non-standard SQL that automatically
    updates the column with the current timestamp when an UPDATE occurs, eliminating
    the usual need to use a trigger in such a case where server-side update changes
    are desired.
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB 在历史上将 [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") 数据类型的 DDL 扩展为短语 “TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ON UPDATE CURRENT_TIMESTAMP”，其中包含非标准 SQL，当发生 UPDATE 时自动更新列为当前时间戳，消除了在需要服务器端更新更改时通常需��使用触发器的情况。
- en: MySQL 5.6 introduced a new flag [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    which disables the above behavior, and in MySQL 8 this flag defaults to true,
    meaning in order to get a MySQL “on update timestamp” without changing this flag,
    the above DDL must be rendered explicitly. Additionally, the same DDL is valid
    for use of the `DATETIME` datatype as well.
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.6 引入了一个新标志 [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)，它禁用了上述行为，在
    MySQL 8 中，该标志默认为 true，这意味着为了获得一个 MySQL 的 “on update timestamp” 而不改变这个标志，上述 DDL
    必须显式地渲染。此外，相同的 DDL 也适用于 `DATETIME` 数据类型。
- en: SQLAlchemy’s MySQL dialect does not yet have an option to generate MySQL’s “ON
    UPDATE CURRENT_TIMESTAMP” clause, noting that this is not a general purpose “ON
    UPDATE” as there is no such syntax in standard SQL. SQLAlchemy’s [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") parameter is currently not related to this special
    MySQL behavior.
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的 MySQL 方言目前还没有选项来生成 MySQL 的 “ON UPDATE CURRENT_TIMESTAMP” 子句，需要注意这不是一个通用的
    “ON UPDATE”，因为标准 SQL 中没有这样的语法。SQLAlchemy 的 [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") 参数目前与这种特殊的 MySQL 行为无关。
- en: 'To generate this DDL, make use of the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter and pass a textual clause that also includes
    the ON UPDATE clause:'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成这个 DDL，请使用 [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 参数，并传递一个包含 ON UPDATE 子句的文本子句：
- en: '[PRE185]'
  id: totrans-1078
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'The same instructions apply to use of the [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") and [`DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME") datatypes:'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")和[`DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME")数据类型也适用相同的说明：
- en: '[PRE186]'
  id: totrans-1080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Even though the [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") feature does not generate this DDL, it still may be
    desirable to signal to the ORM that this updated value should be fetched. This
    syntax looks like the following:'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 即使[`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column")功能不生成此DDL，但仍然希望向ORM发出信号，表明应该获取此更新值。此语法如下所示：
- en: '[PRE187]  ### TIMESTAMP Columns and NULL'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE187]  ### TIMESTAMP列和NULL'
- en: 'MySQL historically enforces that a column which specifies the TIMESTAMP datatype
    implicitly includes a default value of CURRENT_TIMESTAMP, even though this is
    not stated, and additionally sets the column as NOT NULL, the opposite behavior
    vs. that of all other datatypes:'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL历史上强制要求指定TIMESTAMP数据类型的列隐式包含CURRENT_TIMESTAMP的默认值，即使没有明确说明，还将列设置为NOT NULL，这与所有其他数据类型的行为相反：
- en: '[PRE188]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Above, we see that an INTEGER column defaults to NULL, unless it is specified
    with NOT NULL. But when the column is of type TIMESTAMP, an implicit default of
    CURRENT_TIMESTAMP is generated which also coerces the column to be a NOT NULL,
    even though we did not specify it as such.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，INTEGER列默认为NULL，除非指定为NOT NULL。但是当列的类型为TIMESTAMP时，将生成一个CURRENT_TIMESTAMP的隐式默认值，这也会强制列为NOT
    NULL，即使我们没有这样指定。
- en: This behavior of MySQL can be changed on the MySQL side using the [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    configuration flag introduced in MySQL 5.6\. With this server setting enabled,
    TIMESTAMP columns behave like any other datatype on the MySQL side with regards
    to defaults and nullability.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过MySQL的explicit_defaults_for_timestamp配置标志在MySQL端更改此MySQL的行为，该标志在MySQL 5.6中引入。启用此服务器设置后，TIMESTAMP列在MySQL端与默认值和可空性方面的行为与任何其他数据类型相同。
- en: 'However, to accommodate the vast majority of MySQL databases that do not specify
    this new flag, SQLAlchemy emits the “NULL” specifier explicitly with any TIMESTAMP
    column that does not specify `nullable=False`. In order to accommodate newer databases
    that specify `explicit_defaults_for_timestamp`, SQLAlchemy also emits NOT NULL
    for TIMESTAMP columns that do specify `nullable=False`. The following example
    illustrates:'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为了适应大多数不指定此新标志的MySQL数据库，SQLAlchemy会在不指定`nullable=False`的任何TIMESTAMP列中显式发出“NULL”说明符。为了适应指定了`explicit_defaults_for_timestamp`的较新数据库，SQLAlchemy还会为指定了`nullable=False`的TIMESTAMP列发出NOT
    NULL。以下示例说明了这一点：
- en: '[PRE189]'
  id: totrans-1088
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'output:'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE190]  ### Rendering ON UPDATE CURRENT TIMESTAMP for MySQL / MariaDB’s explicit_defaults_for_timestamp'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE190]  ### 为MySQL / MariaDB的explicit_defaults_for_timestamp渲染ON UPDATE CURRENT
    TIMESTAMP'
- en: MySQL / MariaDB have historically expanded the DDL for the [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype into the phrase “TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ON UPDATE CURRENT_TIMESTAMP”, which includes non-standard SQL that automatically
    updates the column with the current timestamp when an UPDATE occurs, eliminating
    the usual need to use a trigger in such a case where server-side update changes
    are desired.
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL / MariaDB历史上扩展了DDL，将[`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP")数据类型扩展为“TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE
    CURRENT_TIMESTAMP”，其中包含非标准的SQL，当发生UPDATE时自动更新列为当前时间戳，从而消除了在需要服务器端更新更改的情况下使用触发器的常规需求。
- en: MySQL 5.6 introduced a new flag [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    which disables the above behavior, and in MySQL 8 this flag defaults to true,
    meaning in order to get a MySQL “on update timestamp” without changing this flag,
    the above DDL must be rendered explicitly. Additionally, the same DDL is valid
    for use of the `DATETIME` datatype as well.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.6引入了一个新标志[explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)，禁用了上述行为，在MySQL
    8中，此标志默认为true，这意味着为了获得MySQL的“on update timestamp”而不更改此标志，必须显式呈现上述DDL。此外，对于DATETIME数据类型，相同的DDL也是有效的。
- en: SQLAlchemy’s MySQL dialect does not yet have an option to generate MySQL’s “ON
    UPDATE CURRENT_TIMESTAMP” clause, noting that this is not a general purpose “ON
    UPDATE” as there is no such syntax in standard SQL. SQLAlchemy’s [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") parameter is currently not related to this special
    MySQL behavior.
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的MySQL方言目前还没有选项来生成MySQL的“ON UPDATE CURRENT_TIMESTAMP”子句，需要注意的是这不是一个通用的“ON
    UPDATE”，因为标准SQL中没有这样的语法。SQLAlchemy的[`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column")参数目前与这种特殊的MySQL行为无关。
- en: 'To generate this DDL, make use of the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter and pass a textual clause that also includes
    the ON UPDATE clause:'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成这个DDL，请使用[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数，并传递一个包含ON UPDATE子句的文本子句：
- en: '[PRE191]'
  id: totrans-1095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'The same instructions apply to use of the [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") and [`DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME") datatypes:'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的指令适用于使用[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")和[`DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME")数据类型的情况：
- en: '[PRE192]'
  id: totrans-1097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Even though the [`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") feature does not generate this DDL, it still may be
    desirable to signal to the ORM that this updated value should be fetched. This
    syntax looks like the following:'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 即使[`Column.server_onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column")特性不生成这个DDL，仍然有必要向ORM发出信号，表明应该获取这个更新后的值。语法如下所示：
- en: '[PRE193]'
  id: totrans-1099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '### TIMESTAMP Columns and NULL'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '### TIMESTAMP列和NULL'
- en: 'MySQL historically enforces that a column which specifies the TIMESTAMP datatype
    implicitly includes a default value of CURRENT_TIMESTAMP, even though this is
    not stated, and additionally sets the column as NOT NULL, the opposite behavior
    vs. that of all other datatypes:'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL在历史上规定，指定TIMESTAMP数据类型的列隐含地包含了CURRENT_TIMESTAMP的默认值，即使没有明确说明，并且还将该列设置为NOT
    NULL，与所有其他数据类型相反的行为：
- en: '[PRE194]'
  id: totrans-1102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Above, we see that an INTEGER column defaults to NULL, unless it is specified
    with NOT NULL. But when the column is of type TIMESTAMP, an implicit default of
    CURRENT_TIMESTAMP is generated which also coerces the column to be a NOT NULL,
    even though we did not specify it as such.
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们看到一个INTEGER列默认为NULL，除非指定为NOT NULL。但是当列的类型为TIMESTAMP时，会生成一个隐含的默认值CURRENT_TIMESTAMP，这也会强制将列设置为NOT
    NULL，即使我们没有明确指定。
- en: This behavior of MySQL can be changed on the MySQL side using the [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    configuration flag introduced in MySQL 5.6\. With this server setting enabled,
    TIMESTAMP columns behave like any other datatype on the MySQL side with regards
    to defaults and nullability.
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的这种行为可以通过MySQL端使用MySQL 5.6引入的[explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)配置标志来更改。启用此服务器设置后，TIMESTAMP列在MySQL端的默认值和可空性方面的行为与任何其他数据类型相同。
- en: 'However, to accommodate the vast majority of MySQL databases that do not specify
    this new flag, SQLAlchemy emits the “NULL” specifier explicitly with any TIMESTAMP
    column that does not specify `nullable=False`. In order to accommodate newer databases
    that specify `explicit_defaults_for_timestamp`, SQLAlchemy also emits NOT NULL
    for TIMESTAMP columns that do specify `nullable=False`. The following example
    illustrates:'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了适应大多数不指定此新标志的 MySQL 数据库，SQLAlchemy 对于不指定 `nullable=False` 的任何 TIMESTAMP
    列都显式地发出“NULL”指定符。为了适应指定了 `nullable=False` 的 TIMESTAMP 列的新数据库，SQLAlchemy 还为这些列发出
    NOT NULL。以下示例说明了这一点：
- en: '[PRE195]'
  id: totrans-1106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'output:'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE196]'
  id: totrans-1108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: MySQL SQL Constructs
  id: totrans-1109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL SQL 构造
- en: '| Object Name | Description |'
  id: totrans-1110
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [match](#sqlalchemy.dialects.mysql.match) | Produce a `MATCH (X, Y) AGAINST
    (''TEXT'')` clause. |'
  id: totrans-1112
  prefs: []
  type: TYPE_TB
  zh: '| [match](#sqlalchemy.dialects.mysql.match) | 生成 `MATCH (X, Y) AGAINST (''TEXT'')`
    子句。 |'
- en: '[PRE197]'
  id: totrans-1113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Produce a `MATCH (X, Y) AGAINST ('TEXT')` clause.
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 `MATCH (X, Y) AGAINST ('TEXT')` 子句。
- en: 'E.g.:'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE198]'
  id: totrans-1116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'Would produce SQL resembling:'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生类似于以下的 SQL：
- en: '[PRE199]'
  id: totrans-1118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: The [`match()`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    function is a standalone version of the [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") method available on all SQL expressions,
    as when [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") is used, but allows to pass multiple
    columns
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`match()`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    函数是所有 SQL 表达式上都可用的 [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") 方法的独立版本，与使用 [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") 时相同，但允许传递多个列'
- en: 'Parameters:'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`cols` – column expressions to match against'
  id: totrans-1121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cols` – 要匹配的列表达式'
- en: '`against` – expression to be compared towards'
  id: totrans-1122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`against` – 要比较的表达式'
- en: '`in_boolean_mode` – boolean, set “boolean mode” to true'
  id: totrans-1123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_boolean_mode` – 布尔值，将“布尔模式”设置为真'
- en: '`in_natural_language_mode` – boolean , set “natural language” to true'
  id: totrans-1124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_natural_language_mode` – 布尔值，将“自然语言”设置为真'
- en: '`with_query_expansion` – boolean, set “query expansion” to true'
  id: totrans-1125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_query_expansion` – 布尔值，将“查询扩展”设置为真'
- en: New in version 1.4.19.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.19 中新增。
- en: See also
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match")'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match")'
- en: '**Members**'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[in_boolean_mode()](#sqlalchemy.dialects.mysql.match.in_boolean_mode), [in_natural_language_mode()](#sqlalchemy.dialects.mysql.match.in_natural_language_mode),
    [inherit_cache](#sqlalchemy.dialects.mysql.match.inherit_cache), [with_query_expansion()](#sqlalchemy.dialects.mysql.match.with_query_expansion)'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: '[in_boolean_mode()](#sqlalchemy.dialects.mysql.match.in_boolean_mode), [in_natural_language_mode()](#sqlalchemy.dialects.mysql.match.in_natural_language_mode),
    [inherit_cache](#sqlalchemy.dialects.mysql.match.inherit_cache), [with_query_expansion()](#sqlalchemy.dialects.mysql.match.with_query_expansion)'
- en: '**Class signature**'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    (`sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"))
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    (`sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"))
- en: '[PRE200]'
  id: totrans-1133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Apply the “IN BOOLEAN MODE” modifier to the MATCH expression.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 将“IN BOOLEAN MODE”修饰符应用于 MATCH 表达式。
- en: 'Returns:'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    instance with modifications applied.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 带有修改的新 [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    实例。
- en: '[PRE201]'
  id: totrans-1137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Apply the “IN NATURAL LANGUAGE MODE” modifier to the MATCH expression.
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 将“IN NATURAL LANGUAGE MODE”修饰符应用于 MATCH 表达式。
- en: 'Returns:'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    instance with modifications applied.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 带有修改的新 [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    实例。
- en: '[PRE202]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Indicate if this [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") 实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等效于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SQL 与对象对应的类没有基于该类本地属性而不是其超类发生变化，则可以将此标志设置为 `True`。
- en: See also
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](../core/compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](../core/compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL
    构造的 [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE203]'
  id: totrans-1147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Apply the “WITH QUERY EXPANSION” modifier to the MATCH expression.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 对 MATCH 表达式应用 “WITH QUERY EXPANSION” 修饰符。
- en: 'Returns:'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    instance with modifications applied.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 应用了修改的 [`match`](#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    实例。
- en: MySQL Data Types
  id: totrans-1151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL 数据类型
- en: 'As with all SQLAlchemy dialects, all UPPERCASE types that are known to be valid
    with MySQL are importable from the top level dialect:'
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有 SQLAlchemy 方言一样，已知与 MySQL 有效的所有大写类型都可以从顶级方言导入：
- en: '[PRE204]'
  id: totrans-1153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'Types which are specific to MySQL, or have MySQL-specific construction arguments,
    are as follows:'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 特有的类型，或具有特定于 MySQL 的构造参数的类型如下：
- en: '| Object Name | Description |'
  id: totrans-1155
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1156
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BIGINT](#sqlalchemy.dialects.mysql.BIGINT) | MySQL BIGINTEGER type. |'
  id: totrans-1157
  prefs: []
  type: TYPE_TB
  zh: '| [BIGINT](#sqlalchemy.dialects.mysql.BIGINT) | MySQL BIGINTEGER 类型。 |'
- en: '| [BIT](#sqlalchemy.dialects.mysql.BIT) | MySQL BIT type. |'
  id: totrans-1158
  prefs: []
  type: TYPE_TB
  zh: '| [BIT](#sqlalchemy.dialects.mysql.BIT) | MySQL BIT 类型。 |'
- en: '| [CHAR](#sqlalchemy.dialects.mysql.CHAR) | MySQL CHAR type, for fixed-length
    character data. |'
  id: totrans-1159
  prefs: []
  type: TYPE_TB
  zh: '| [CHAR](#sqlalchemy.dialects.mysql.CHAR) | MySQL CHAR 类型，用于固定长度的字符数据。 |'
- en: '| [DATETIME](#sqlalchemy.dialects.mysql.DATETIME) | MySQL DATETIME type. |'
  id: totrans-1160
  prefs: []
  type: TYPE_TB
  zh: '| [DATETIME](#sqlalchemy.dialects.mysql.DATETIME) | MySQL DATETIME 类型。 |'
- en: '| [DECIMAL](#sqlalchemy.dialects.mysql.DECIMAL) | MySQL DECIMAL type. |'
  id: totrans-1161
  prefs: []
  type: TYPE_TB
  zh: '| [DECIMAL](#sqlalchemy.dialects.mysql.DECIMAL) | MySQL DECIMAL 类型。 |'
- en: '| [ENUM](#sqlalchemy.dialects.mysql.ENUM) | MySQL ENUM type. |'
  id: totrans-1162
  prefs: []
  type: TYPE_TB
  zh: '| [ENUM](#sqlalchemy.dialects.mysql.ENUM) | MySQL ENUM 类型。 |'
- en: '| [FLOAT](#sqlalchemy.dialects.mysql.FLOAT) | MySQL FLOAT type. |'
  id: totrans-1163
  prefs: []
  type: TYPE_TB
  zh: '| [FLOAT](#sqlalchemy.dialects.mysql.FLOAT) | MySQL FLOAT 类型。 |'
- en: '| [INTEGER](#sqlalchemy.dialects.mysql.INTEGER) | MySQL INTEGER type. |'
  id: totrans-1164
  prefs: []
  type: TYPE_TB
  zh: '| [INTEGER](#sqlalchemy.dialects.mysql.INTEGER) | MySQL INTEGER 类型。 |'
- en: '| [JSON](#sqlalchemy.dialects.mysql.JSON) | MySQL JSON type. |'
  id: totrans-1165
  prefs: []
  type: TYPE_TB
  zh: '| [JSON](#sqlalchemy.dialects.mysql.JSON) | MySQL JSON 类型。 |'
- en: '| [LONGBLOB](#sqlalchemy.dialects.mysql.LONGBLOB) | MySQL LONGBLOB type, for
    binary data up to 2^32 bytes. |'
  id: totrans-1166
  prefs: []
  type: TYPE_TB
  zh: '| [LONGBLOB](#sqlalchemy.dialects.mysql.LONGBLOB) | MySQL LONGBLOB 类型，用于最多
    2^32 字节的二进制数据。 |'
- en: '| [LONGTEXT](#sqlalchemy.dialects.mysql.LONGTEXT) | MySQL LONGTEXT type, for
    character storage encoded up to 2^32 bytes. |'
  id: totrans-1167
  prefs: []
  type: TYPE_TB
  zh: '| [LONGTEXT](#sqlalchemy.dialects.mysql.LONGTEXT) | MySQL LONGTEXT 类型，用于最多编码为
    2^32 字节的字符存储。 |'
- en: '| [MEDIUMBLOB](#sqlalchemy.dialects.mysql.MEDIUMBLOB) | MySQL MEDIUMBLOB type,
    for binary data up to 2^24 bytes. |'
  id: totrans-1168
  prefs: []
  type: TYPE_TB
  zh: '| [MEDIUMBLOB](#sqlalchemy.dialects.mysql.MEDIUMBLOB) | MySQL MEDIUMBLOB 类型，用于最多
    2^24 字节的二进制数据。 |'
- en: '| [MEDIUMINT](#sqlalchemy.dialects.mysql.MEDIUMINT) | MySQL MEDIUMINTEGER type.
    |'
  id: totrans-1169
  prefs: []
  type: TYPE_TB
  zh: '| [MEDIUMINT](#sqlalchemy.dialects.mysql.MEDIUMINT) | MySQL MEDIUMINTEGER 类型。
    |'
- en: '| [MEDIUMTEXT](#sqlalchemy.dialects.mysql.MEDIUMTEXT) | MySQL MEDIUMTEXT type,
    for character storage encoded up to 2^24 bytes. |'
  id: totrans-1170
  prefs: []
  type: TYPE_TB
  zh: '| [MEDIUMTEXT](#sqlalchemy.dialects.mysql.MEDIUMTEXT) | MySQL MEDIUMTEXT 类型，用于最多编码为
    2^24 字节的字符存储。 |'
- en: '| [NCHAR](#sqlalchemy.dialects.mysql.NCHAR) | MySQL NCHAR type. |'
  id: totrans-1171
  prefs: []
  type: TYPE_TB
  zh: '| [NCHAR](#sqlalchemy.dialects.mysql.NCHAR) | MySQL NCHAR 类型。 |'
- en: '| [NUMERIC](#sqlalchemy.dialects.mysql.NUMERIC) | MySQL NUMERIC type. |'
  id: totrans-1172
  prefs: []
  type: TYPE_TB
  zh: '| [NUMERIC](#sqlalchemy.dialects.mysql.NUMERIC) | MySQL NUMERIC 类型。 |'
- en: '| [NVARCHAR](#sqlalchemy.dialects.mysql.NVARCHAR) | MySQL NVARCHAR type. |'
  id: totrans-1173
  prefs: []
  type: TYPE_TB
  zh: '| [NVARCHAR](#sqlalchemy.dialects.mysql.NVARCHAR) | MySQL NVARCHAR 类型。 |'
- en: '| [REAL](#sqlalchemy.dialects.mysql.REAL) | MySQL REAL type. |'
  id: totrans-1174
  prefs: []
  type: TYPE_TB
  zh: '| [REAL](#sqlalchemy.dialects.mysql.REAL) | MySQL REAL 类型。 |'
- en: '| [SET](#sqlalchemy.dialects.mysql.SET) | MySQL SET type. |'
  id: totrans-1175
  prefs: []
  type: TYPE_TB
  zh: '| [SET](#sqlalchemy.dialects.mysql.SET) | MySQL SET 类型。 |'
- en: '| [SMALLINT](#sqlalchemy.dialects.mysql.SMALLINT) | MySQL SMALLINTEGER type.
    |'
  id: totrans-1176
  prefs: []
  type: TYPE_TB
  zh: '| [SMALLINT](#sqlalchemy.dialects.mysql.SMALLINT) | MySQL SMALLINTEGER 类型。
    |'
- en: '| [TIME](#sqlalchemy.dialects.mysql.TIME) | MySQL TIME type. |'
  id: totrans-1177
  prefs: []
  type: TYPE_TB
  zh: '| [TIME](#sqlalchemy.dialects.mysql.TIME) | MySQL TIME 类型。 |'
- en: '| [TIMESTAMP](#sqlalchemy.dialects.mysql.TIMESTAMP) | MySQL TIMESTAMP type.
    |'
  id: totrans-1178
  prefs: []
  type: TYPE_TB
  zh: '| [TIMESTAMP](#sqlalchemy.dialects.mysql.TIMESTAMP) | MySQL TIMESTAMP 类型。 |'
- en: '| [TINYBLOB](#sqlalchemy.dialects.mysql.TINYBLOB) | MySQL TINYBLOB type, for
    binary data up to 2^8 bytes. |'
  id: totrans-1179
  prefs: []
  type: TYPE_TB
  zh: '| [TINYBLOB](#sqlalchemy.dialects.mysql.TINYBLOB) | MySQL TINYBLOB 类型，用于存储最多
    2^8 字节的二进制数据。 |'
- en: '| [TINYINT](#sqlalchemy.dialects.mysql.TINYINT) | MySQL TINYINT type. |'
  id: totrans-1180
  prefs: []
  type: TYPE_TB
  zh: '| [TINYINT](#sqlalchemy.dialects.mysql.TINYINT) | MySQL TINYINT 类型。 |'
- en: '| [TINYTEXT](#sqlalchemy.dialects.mysql.TINYTEXT) | MySQL TINYTEXT type, for
    character storage encoded up to 2^8 bytes. |'
  id: totrans-1181
  prefs: []
  type: TYPE_TB
  zh: '| [TINYTEXT](#sqlalchemy.dialects.mysql.TINYTEXT) | MySQL TINYTEXT 类型，用于存储编码最多
    2^8 字节的字符数据。 |'
- en: '| [VARCHAR](#sqlalchemy.dialects.mysql.VARCHAR) | MySQL VARCHAR type, for variable-length
    character data. |'
  id: totrans-1182
  prefs: []
  type: TYPE_TB
  zh: '| [VARCHAR](#sqlalchemy.dialects.mysql.VARCHAR) | MySQL VARCHAR 类型，用于存储可变长度的字符数据。
    |'
- en: '| [YEAR](#sqlalchemy.dialects.mysql.YEAR) | MySQL YEAR type, for single byte
    storage of years 1901-2155. |'
  id: totrans-1183
  prefs: []
  type: TYPE_TB
  zh: '| [YEAR](#sqlalchemy.dialects.mysql.YEAR) | MySQL YEAR 类型，用于单字节存储 1901 年至 2155
    年之间的年份。 |'
- en: '[PRE205]'
  id: totrans-1184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: MySQL BIGINTEGER type.
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL BIGINTEGER 类型。
- en: '**Members**'
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.BIGINT.__init__)'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.BIGINT.__init__)'
- en: '**Class signature**'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.BIGINT`](#sqlalchemy.dialects.mysql.BIGINT
    "sqlalchemy.dialects.mysql.BIGINT") (`sqlalchemy.dialects.mysql.types._IntegerType`,
    [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT "sqlalchemy.types.BIGINT"))
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.mysql.BIGINT`](#sqlalchemy.dialects.mysql.BIGINT
    "sqlalchemy.dialects.mysql.BIGINT") (`sqlalchemy.dialects.mysql.types._IntegerType`,
    [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT "sqlalchemy.types.BIGINT"))
- en: '[PRE206]'
  id: totrans-1190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Construct a BIGINTEGER.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 BIGINTEGER。
- en: 'Parameters:'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-1193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为 true，则值将以左填充零的字符串形式存储。注意，这不会影响底层数据库 API 返回的值，其仍然是数值。'
- en: '[PRE207]'
  id: totrans-1196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: The SQL BINARY type.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BINARY 类型。
- en: '**Class signature**'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.BINARY` (`sqlalchemy.types._Binary`)
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: class `sqlalchemy.dialects.mysql.BINARY` (`sqlalchemy.types._Binary`)
- en: '[PRE208]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: MySQL BIT type.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL BIT 类型。
- en: This type is for MySQL 5.0.3 or greater for MyISAM, and 5.0.5 or greater for
    MyISAM, MEMORY, InnoDB and BDB. For older versions, use a MSTinyInteger() type.
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型适用于 MySQL 5.0.3 或更高版本的 MyISAM，并且适用于 5.0.5 或更高版本的 MyISAM、MEMORY、InnoDB 和 BDB。对于较旧版本，请使用
    MSTinyInteger() 类型。
- en: '**Members**'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.BIT.__init__)'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.BIT.__init__)'
- en: '**Class signature**'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.BIT`](#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.mysql.BIT`](#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE209]'
  id: totrans-1207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Construct a BIT.
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 BIT。
- en: 'Parameters:'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – Optional, number of bits.'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选，位数。'
- en: '[PRE210]'
  id: totrans-1211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: The SQL BLOB type.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BLOB 类型。
- en: '**Class signature**'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.BLOB` ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: class `sqlalchemy.dialects.mysql.BLOB` ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
- en: '[PRE211]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '*inherited from the* `sqlalchemy.types.LargeBinary.__init__` *method of* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") 的 `sqlalchemy.types.LargeBinary.__init__` *方法*'
- en: Construct a LargeBinary type.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 LargeBinary 类型。
- en: 'Parameters:'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选，用于 DDL 语句中的列长度，适用于那些接受长度的二进制类型，比如 MySQL BLOB 类型。'
- en: '[PRE212]'
  id: totrans-1220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: The SQL BOOLEAN type.
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BOOLEAN 类型。
- en: '**Class signature**'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.BOOLEAN` ([`sqlalchemy.types.Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"))
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: class `sqlalchemy.dialects.mysql.BOOLEAN` ([`sqlalchemy.types.Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"))
- en: '[PRE213]'
  id: totrans-1224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '*inherited from the* `sqlalchemy.types.Boolean.__init__` *method of* [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    的 `sqlalchemy.types.Boolean.__init__` *方法*'
- en: Construct a Boolean.
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Boolean。
- en: 'Parameters:'
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`create_constraint` –'
  id: totrans-1228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. If the boolean is generated as an int/smallint, also create
    a CHECK constraint on the table that ensures 1 or 0 as a value.
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。如果将布尔值生成为 int/smallint，则还在表上创建一个 CHECK 约束，以确保值为 1 或 0。
- en: Note
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Boolean.name`](../core/type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") parameter or by setting up an appropriate naming convention;
    see [Configuring Constraint Naming Conventions](../core/constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议 CHECK 约束具有明确的名称，以支持模式管理问题。这可以通过设置 [`Boolean.name`](../core/type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") 参数或设置适当的命名约定来建立；有关背景信息，请参阅 [配置约束命名约定](../core/constraints.html#constraint-naming-conventions)。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：- 此标志现在默认为 False，表示非本地枚举类型不生成 CHECK 约束。
- en: '`name` – if a CHECK constraint is generated, specify the name of the constraint.'
  id: totrans-1233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 如果生成 CHECK 约束，请指定约束的名称。'
- en: '[PRE214]'
  id: totrans-1234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: MySQL CHAR type, for fixed-length character data.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL CHAR 类型，用于固定长度的字符数据。
- en: '**Members**'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.CHAR.__init__)'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.CHAR.__init__)'
- en: '**Class signature**'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.CHAR`](#sqlalchemy.dialects.mysql.CHAR "sqlalchemy.dialects.mysql.CHAR")
    (`sqlalchemy.dialects.mysql.types._StringType`, [`sqlalchemy.types.CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR"))
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.CHAR`](#sqlalchemy.dialects.mysql.CHAR "sqlalchemy.dialects.mysql.CHAR")
    (`sqlalchemy.dialects.mysql.types._StringType`, [`sqlalchemy.types.CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR"))
- en: '[PRE215]'
  id: totrans-1240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Construct a CHAR.
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 CHAR。
- en: 'Parameters:'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – Maximum data length, in characters.'
  id: totrans-1243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 最大数据长度，以字符为单位。'
- en: '`binary` – Optional, use the default binary collation for the national character
    set. This does not affect the type of data stored, use a BINARY type for binary
    data.'
  id: totrans-1244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 可选项，使用国家字符集的默认二进制排序规则。这不影响存储的数据类型，对于二进制数据，请使用 BINARY 类型。'
- en: '`collation` – Optional, request a particular collation. Must be compatible
    with the national character set.'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选项，请求特定排序规则。必须与国家字符集兼容。'
- en: '[PRE216]'
  id: totrans-1246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: The SQL DATE type.
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DATE 类型。
- en: '**Class signature**'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.DATE` ([`sqlalchemy.types.Date`](../core/type_basics.html#sqlalchemy.types.Date
    "sqlalchemy.types.Date"))
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.DATE` ([`sqlalchemy.types.Date`](../core/type_basics.html#sqlalchemy.types.Date
    "sqlalchemy.types.Date"))
- en: '[PRE217]'
  id: totrans-1250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: MySQL DATETIME type.
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL DATETIME 类型。
- en: '**Members**'
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.DATETIME.__init__)'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.DATETIME.__init__)'
- en: '**Class signature**'
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.DATETIME`](#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") ([`sqlalchemy.types.DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME"))
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.DATETIME`](#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") ([`sqlalchemy.types.DATETIME`](../core/type_basics.html#sqlalchemy.types.DATETIME
    "sqlalchemy.types.DATETIME"))
- en: '[PRE218]'
  id: totrans-1256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: Construct a MySQL DATETIME type.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 MySQL DATETIME 类型。
- en: 'Parameters:'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – not used by the MySQL dialect.'
  id: totrans-1259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – MySQL 方言不使用。'
- en: '`fsp` –'
  id: totrans-1260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fsp` –'
- en: fractional seconds precision value. MySQL 5.6.4 supports storage of fractional
    seconds; this parameter will be used when emitting DDL for the DATETIME type.
  id: totrans-1261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小数秒精度值。MySQL 5.6.4 支持小数秒的存储；在发出 DATETIME 类型的 DDL 时将使用此参数。
- en: Note
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: DBAPI driver support for fractional seconds may be limited; current support
    includes MySQL Connector/Python.
  id: totrans-1263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DBAPI 驱动程序对小数秒的支持可能有限；当前支持包括 MySQL Connector/Python。
- en: '[PRE219]'
  id: totrans-1264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: MySQL DECIMAL type.
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL DECIMAL 类型。
- en: '**Members**'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.DECIMAL.__init__)'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.DECIMAL.__init__)'
- en: '**Class signature**'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.DECIMAL`](#sqlalchemy.dialects.mysql.DECIMAL
    "sqlalchemy.dialects.mysql.DECIMAL") (`sqlalchemy.dialects.mysql.types._NumericType`,
    [`sqlalchemy.types.DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL
    "sqlalchemy.types.DECIMAL"))
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.DECIMAL`](#sqlalchemy.dialects.mysql.DECIMAL "sqlalchemy.dialects.mysql.DECIMAL")
    (`sqlalchemy.dialects.mysql.types._NumericType`, [`sqlalchemy.types.DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL
    "sqlalchemy.types.DECIMAL"))
- en: '[PRE220]'
  id: totrans-1270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Construct a DECIMAL.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 DECIMAL。
- en: 'Parameters:'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-1273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果比例和精度都为 None，则值将存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选项。如果为真，则值将以左侧填充零的字符串形式存储。请注意，这不会影响底层数据库 API 返回的值，其仍然是数值。'
- en: '[PRE221]'
  id: totrans-1277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: MySQL DOUBLE type.
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL DOUBLE 类型。
- en: '**Class signature**'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.DOUBLE` (`sqlalchemy.dialects.mysql.types._FloatType`,
    [`sqlalchemy.types.DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE"))
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: class `sqlalchemy.dialects.mysql.DOUBLE` (`sqlalchemy.dialects.mysql.types._FloatType`,
    [`sqlalchemy.types.DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE"))
- en: '[PRE222]'
  id: totrans-1281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Construct a DOUBLE.
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 DOUBLE。
- en: Note
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE")
    type by default converts from float to Decimal, using a truncation that defaults
    to 10 digits. Specify either `scale=n` or `decimal_return_scale=n` in order to
    change this scale, or `asdecimal=False` to return values directly as Python floating
    points.
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE")
    类型将从浮点数转换为 Decimal，使用默认的截断为 10 位数。指定 `scale=n` 或 `decimal_return_scale=n` 以更改此比例，或者
    `asdecimal=False` 以直接返回 Python 浮点数值。
- en: 'Parameters:'
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-1286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果 scale 和 precision 都为 None，则值将存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-1287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选项。如果为真，则值将以左侧填充零的字符串形式存储。请注意，这不会影响底层数据库 API 返回的值，其仍然是数值。'
- en: '[PRE223]'
  id: totrans-1290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: MySQL ENUM type.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL ENUM 类型。
- en: '**Members**'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.ENUM.__init__)'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.ENUM.__init__)'
- en: '**Class signature**'
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.ENUM`](#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    (`sqlalchemy.types.NativeForEmulated`, [`sqlalchemy.types.Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), `sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.mysql.ENUM`](#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    (`sqlalchemy.types.NativeForEmulated`, [`sqlalchemy.types.Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), `sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE224]'
  id: totrans-1296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Construct an ENUM.
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 ENUM。
- en: 'E.g.:'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE225]'
  id: totrans-1299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'Parameters:'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`enums` –'
  id: totrans-1301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enums` –'
- en: The range of valid values for this ENUM. Values in enums are not quoted, they
    will be escaped and surrounded by single quotes when generating the schema. This
    object may also be a PEP-435-compliant enumerated type.
  id: totrans-1302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此 ENUM 的有效值范围。在枚举中的值不带引号，生成模式时将被转义并用单引号括起。此对象也可以是符合 PEP-435 的枚举类型。
- en: '`strict` –'
  id: totrans-1303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strict` –'
- en: This flag has no effect.
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标志无效。
- en: 'Changed in version The: MySQL ENUM type as well as the base Enum type now validates
    all Python data values.'
  id: totrans-1305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本更改：MySQL ENUM 类型以及基本 Enum 类型现在验证所有 Python 数据值。
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-1306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选项，用于此字符串值的列级字符集。优先于‘ascii’或‘unicode’简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-1307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选项，用于此字符串值的列级排序。优先于‘binary’简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-1308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为 False：`latin1` 字符集的简写，生成模式中的 ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-1309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为 False：`ucs2` 字符集的简写，生成模式中的 UNICODE。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为 False：简写，选择与列的字符集匹配的二进制排序类型。在模式中生成 BINARY。这不会影响存储的数据类型，只会影响字符数据的排序。'
- en: '[PRE226]'
  id: totrans-1311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: MySQL FLOAT type.
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL FLOAT 类型。
- en: '**Members**'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.FLOAT.__init__)'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.FLOAT.__init__)'
- en: '**Class signature**'
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.FLOAT`](#sqlalchemy.dialects.mysql.FLOAT "sqlalchemy.dialects.mysql.FLOAT")
    (`sqlalchemy.dialects.mysql.types._FloatType`, [`sqlalchemy.types.FLOAT`](../core/type_basics.html#sqlalchemy.types.FLOAT
    "sqlalchemy.types.FLOAT"))
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.FLOAT`](#sqlalchemy.dialects.mysql.FLOAT "sqlalchemy.dialects.mysql.FLOAT")
    (`sqlalchemy.dialects.mysql.types._FloatType`, [`sqlalchemy.types.FLOAT`](../core/type_basics.html#sqlalchemy.types.FLOAT
    "sqlalchemy.types.FLOAT"))
- en: '[PRE227]'
  id: totrans-1317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Construct a FLOAT.
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个浮点数。
- en: 'Parameters:'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果 scale 和 precision 都为 None，则将值存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-1321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为 true，则值将存储为左填充的带有零的字符串。请注意，这不会影响底层数据库 API 返回的值，其仍然为数值。'
- en: '[PRE228]'
  id: totrans-1324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: MySQL INTEGER type.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL INTEGER 类型。
- en: '**Members**'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.INTEGER.__init__)'
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.INTEGER.__init__)'
- en: '**Class signature**'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.INTEGER`](#sqlalchemy.dialects.mysql.INTEGER
    "sqlalchemy.dialects.mysql.INTEGER") (`sqlalchemy.dialects.mysql.types._IntegerType`,
    [`sqlalchemy.types.INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER"))
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.INTEGER`](#sqlalchemy.dialects.mysql.INTEGER "sqlalchemy.dialects.mysql.INTEGER")
    (`sqlalchemy.dialects.mysql.types._IntegerType`, [`sqlalchemy.types.INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER"))
- en: '[PRE229]'
  id: totrans-1330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Construct an INTEGER.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个整数。
- en: 'Parameters:'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-1333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为 true，则值将存储为左填充的带有零的字符串。请注意，这不会影响底层数据库 API 返回的值，其仍然为数值。'
- en: '[PRE230]'
  id: totrans-1336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: MySQL JSON type.
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL JSON 类型。
- en: MySQL supports JSON as of version 5.7. MariaDB supports JSON (as an alias for
    LONGTEXT) as of version 10.2.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 从版本 5.7 开始支持 JSON。MariaDB 从版本 10.2 开始支持 JSON（作为 LONGTEXT 的别名）。
- en: '[`JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    is used automatically whenever the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype is used against a MySQL or MariaDB backend.'
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 当基本的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    数据类型与 MySQL 或 MariaDB 后端一起使用时，[`JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    会自动使用。
- en: See also
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - main documentation for the generic cross-platform JSON datatype.'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - 用于通用跨平台 JSON 数据类型的主要文档。'
- en: The [`JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    type supports persistence of JSON values as well as the core index operations
    provided by [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    datatype, by adapting the operations to render the `JSON_EXTRACT` function at
    the database level.
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    类型支持 JSON 值的持久性以及通过调整操作以在数据库级别呈现 `JSON_EXTRACT` 函数所提供的核心索引操作，从而适应基本的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 数据类型。'
- en: '**Class signature**'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    ([`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON"))
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.JSON`](#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    （[`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")）
- en: '[PRE231]'
  id: totrans-1345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: MySQL LONGBLOB type, for binary data up to 2^32 bytes.
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL LONGBLOB 类型，用于二进制数据最多 2^32 字节。
- en: '**Class signature**'
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.LONGBLOB`](#sqlalchemy.dialects.mysql.LONGBLOB
    "sqlalchemy.dialects.mysql.LONGBLOB") (`sqlalchemy.types._Binary`)
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.LONGBLOB`](#sqlalchemy.dialects.mysql.LONGBLOB
    "sqlalchemy.dialects.mysql.LONGBLOB") (`sqlalchemy.types._Binary`)
- en: '[PRE232]'
  id: totrans-1349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: MySQL LONGTEXT type, for character storage encoded up to 2^32 bytes.
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL LONGTEXT 类型，用于字符存储编码最多 2^32 字节。
- en: '**Members**'
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.LONGTEXT.__init__)'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.LONGTEXT.__init__)'
- en: '**Class signature**'
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.LONGTEXT`](#sqlalchemy.dialects.mysql.LONGTEXT
    "sqlalchemy.dialects.mysql.LONGTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.LONGTEXT`](#sqlalchemy.dialects.mysql.LONGTEXT
    "sqlalchemy.dialects.mysql.LONGTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE233]'
  id: totrans-1355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Construct a LONGTEXT.
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个LONGTEXT。
- en: 'Parameters:'
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-1358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，此字符串值的列级字符集。优先于‘ascii’或‘unicode’简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-1359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，此字符串值的列级校对。优先于‘binary’简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-1360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为False：`latin1`字符集的简写，生成模式中的ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-1361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为False：`ucs2`字符集的简写，生成模式中的UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-1362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为true，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-1363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为False：简写，选择与列的字符集匹配的二进制校对类型。在模式中生成BINARY。这不影响存储的数据类型，只影响字符数据的校对。'
- en: '[PRE234]'
  id: totrans-1364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: MySQL MEDIUMBLOB type, for binary data up to 2^24 bytes.
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL MEDIUMBLOB 类型，用于二进制数据达到2^24字节。
- en: '**Class signature**'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.MEDIUMBLOB`](#sqlalchemy.dialects.mysql.MEDIUMBLOB
    "sqlalchemy.dialects.mysql.MEDIUMBLOB") (`sqlalchemy.types._Binary`)
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.MEDIUMBLOB`](#sqlalchemy.dialects.mysql.MEDIUMBLOB
    "sqlalchemy.dialects.mysql.MEDIUMBLOB") (`sqlalchemy.types._Binary`)
- en: '[PRE235]'
  id: totrans-1368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: MySQL MEDIUMINTEGER type.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL MEDIUMINTEGER 类型。
- en: '**Members**'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.MEDIUMINT.__init__)'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.MEDIUMINT.__init__)'
- en: '**Class signature**'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.MEDIUMINT`](#sqlalchemy.dialects.mysql.MEDIUMINT
    "sqlalchemy.dialects.mysql.MEDIUMINT") (`sqlalchemy.dialects.mysql.types._IntegerType`)
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.MEDIUMINT`](#sqlalchemy.dialects.mysql.MEDIUMINT
    "sqlalchemy.dialects.mysql.MEDIUMINT") (`sqlalchemy.dialects.mysql.types._IntegerType`)
- en: '[PRE236]'
  id: totrans-1374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: Construct a MEDIUMINTEGER
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个MEDIUMINTEGER
- en: 'Parameters:'
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-1377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为true，则值将以左边填充零的字符串形式存储。请注意，这不影响底层数据库API返回的值，其仍然是数值。'
- en: '[PRE237]'
  id: totrans-1380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: MySQL MEDIUMTEXT type, for character storage encoded up to 2^24 bytes.
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL MEDIUMTEXT 类型，用于存储编码达到2^24字节的字符。
- en: '**Members**'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__)'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__)'
- en: '**Class signature**'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.MEDIUMTEXT`](#sqlalchemy.dialects.mysql.MEDIUMTEXT
    "sqlalchemy.dialects.mysql.MEDIUMTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.MEDIUMTEXT`](#sqlalchemy.dialects.mysql.MEDIUMTEXT
    "sqlalchemy.dialects.mysql.MEDIUMTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE238]'
  id: totrans-1386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Construct a MEDIUMTEXT.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个MEDIUMTEXT。
- en: 'Parameters:'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-1389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，此字符串值的列级字符集。优先于‘ascii’或‘unicode’简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-1390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，此字符串值的列级校对。优先于‘binary’简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-1391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为False：`latin1`字符集的简写，生成模式中的ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-1392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为False：`ucs2`字符集的简写，生成模式中的UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-1393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为true，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为False：简写，选择与列的字符集匹配的二进制校对类型。在模式中生成BINARY。这不影响存储的数据类型，只影响字符数据的校对。'
- en: '[PRE239]'
  id: totrans-1395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: MySQL NCHAR type.
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL NCHAR 类型。
- en: For fixed-length character data in the server’s configured national character
    set.
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: 用于服务器配置的国家字符集中的固定长度字符数据。
- en: '**Members**'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.NCHAR.__init__)'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.NCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.NCHAR`](#sqlalchemy.dialects.mysql.NCHAR "sqlalchemy.dialects.mysql.NCHAR")
    (`sqlalchemy.dialects.mysql.types._StringType`, [`sqlalchemy.types.NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR"))
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.NCHAR`](#sqlalchemy.dialects.mysql.NCHAR "sqlalchemy.dialects.mysql.NCHAR")（`sqlalchemy.dialects.mysql.types._StringType`，[`sqlalchemy.types.NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR")）
- en: '[PRE240]'
  id: totrans-1402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Construct an NCHAR.
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个NCHAR。
- en: 'Parameters:'
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – Maximum data length, in characters.'
  id: totrans-1405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 最大数据长度，以字符为单位。'
- en: '`binary` – Optional, use the default binary collation for the national character
    set. This does not affect the type of data stored, use a BINARY type for binary
    data.'
  id: totrans-1406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 可选，使用国家字符集的默认二进制排序规则。这不会影响存储的数据类型，对于二进制数据，请使用BINARY类型。'
- en: '`collation` – Optional, request a particular collation. Must be compatible
    with the national character set.'
  id: totrans-1407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，请求特定��排序规则。必须与国家字符集兼容。'
- en: '[PRE241]'
  id: totrans-1408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: MySQL NUMERIC type.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL NUMERIC类型。
- en: '**Members**'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.NUMERIC.__init__)'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.NUMERIC.__init__)'
- en: '**Class signature**'
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.NUMERIC`](#sqlalchemy.dialects.mysql.NUMERIC
    "sqlalchemy.dialects.mysql.NUMERIC") (`sqlalchemy.dialects.mysql.types._NumericType`,
    [`sqlalchemy.types.NUMERIC`](../core/type_basics.html#sqlalchemy.types.NUMERIC
    "sqlalchemy.types.NUMERIC"))
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.NUMERIC`](#sqlalchemy.dialects.mysql.NUMERIC "sqlalchemy.dialects.mysql.NUMERIC")（`sqlalchemy.dialects.mysql.types._NumericType`，[`sqlalchemy.types.NUMERIC`](../core/type_basics.html#sqlalchemy.types.NUMERIC
    "sqlalchemy.types.NUMERIC")）
- en: '[PRE242]'
  id: totrans-1414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Construct a NUMERIC.
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个NUMERIC。
- en: 'Parameters:'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-1417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果比例和精度都为None，则值将存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-1418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为true，则值将以左侧填充零的字符串形式存储。请注意，这不会影响底层数据库API返回的值，其仍然是数值型的。'
- en: '[PRE243]'
  id: totrans-1421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: MySQL NVARCHAR type.
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL NVARCHAR类型。
- en: For variable-length character data in the server’s configured national character
    set.
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: 用于服务器配置的国家字符集中的可变长度字符数据。
- en: '**Members**'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.NVARCHAR.__init__)'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.NVARCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.NVARCHAR`](#sqlalchemy.dialects.mysql.NVARCHAR
    "sqlalchemy.dialects.mysql.NVARCHAR") (`sqlalchemy.dialects.mysql.types._StringType`,
    [`sqlalchemy.types.NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR"))
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.NVARCHAR`](#sqlalchemy.dialects.mysql.NVARCHAR
    "sqlalchemy.dialects.mysql.NVARCHAR")（`sqlalchemy.dialects.mysql.types._StringType`，[`sqlalchemy.types.NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR")）
- en: '[PRE244]'
  id: totrans-1428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Construct an NVARCHAR.
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个NVARCHAR。
- en: 'Parameters:'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – Maximum data length, in characters.'
  id: totrans-1431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 最大数据长度，以字符为单位。'
- en: '`binary` – Optional, use the default binary collation for the national character
    set. This does not affect the type of data stored, use a BINARY type for binary
    data.'
  id: totrans-1432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 可选，使用国家字符集的默认二进制排序规则。这不会影响存储的数据类型，对于二进制数据，请使用BINARY类型。'
- en: '`collation` – Optional, request a particular collation. Must be compatible
    with the national character set.'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，请求特定的排序规则。必须与国家字符集兼容。'
- en: '[PRE245]'
  id: totrans-1434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: MySQL REAL type.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL REAL类型。
- en: '**Members**'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.REAL.__init__)'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.REAL.__init__)'
- en: '**Class signature**'
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.REAL`](#sqlalchemy.dialects.mysql.REAL "sqlalchemy.dialects.mysql.REAL")
    (`sqlalchemy.dialects.mysql.types._FloatType`, [`sqlalchemy.types.REAL`](../core/type_basics.html#sqlalchemy.types.REAL
    "sqlalchemy.types.REAL"))
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.REAL`](#sqlalchemy.dialects.mysql.REAL "sqlalchemy.dialects.mysql.REAL")（`sqlalchemy.dialects.mysql.types._FloatType`，[`sqlalchemy.types.REAL`](../core/type_basics.html#sqlalchemy.types.REAL
    "sqlalchemy.types.REAL")）
- en: '[PRE246]'
  id: totrans-1440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Construct a REAL.
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个REAL。
- en: Note
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`REAL`](#sqlalchemy.dialects.mysql.REAL "sqlalchemy.dialects.mysql.REAL")
    type by default converts from float to Decimal, using a truncation that defaults
    to 10 digits. Specify either `scale=n` or `decimal_return_scale=n` in order to
    change this scale, or `asdecimal=False` to return values directly as Python floating
    points.
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`REAL`](#sqlalchemy.dialects.mysql.REAL "sqlalchemy.dialects.mysql.REAL")
    类型将从浮点数转换为 Decimal，使用默认为 10 位的截断。要更改此标度，请指定 `scale=n` 或 `decimal_return_scale=n`，或者指定
    `asdecimal=False` 以直接将值返回为 Python 浮点数。
- en: 'Parameters:'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – Total digits in this number. If scale and precision are both
    None, values are stored to limits allowed by the server.'
  id: totrans-1445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 此数字中的总位数。如果 scale 和 precision 都为 None，则值将存储到服务器允许的限制。'
- en: '`scale` – The number of digits after the decimal point.'
  id: totrans-1446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 小数点后的位数。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为真，则值将作为用零左填充的字符串存储。请注意，这不影响底层数据库 API 返回的值，这些值仍然是数字。'
- en: '[PRE247]'
  id: totrans-1449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: MySQL SET type.
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL SET 类型。
- en: '**Members**'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.SET.__init__)'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.SET.__init__)'
- en: '**Class signature**'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.SET`](#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    (`sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.SET`](#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    (`sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE248]'
  id: totrans-1455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Construct a SET.
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 SET。
- en: 'E.g.:'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE249]'
  id: totrans-1458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: The list of potential values is required in the case that this set will be used
    to generate DDL for a table, or if the [`SET.retrieve_as_bitwise`](#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") flag is set to True.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 set 将用于为表生成 DDL 或者如果 [`SET.retrieve_as_bitwise`](#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") 标志设置为 True，则必须提供潜在值的列表。
- en: 'Parameters:'
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`values` – The range of valid values for this SET. The values are not quoted,
    they will be escaped and surrounded by single quotes when generating the schema.'
  id: totrans-1461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values` – 此 SET 的有效值范围。这些值不加引号，生成模式时会被转义并用单引号括起来。'
- en: '`convert_unicode` – Same flag as that of [`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String").'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`convert_unicode` – 与 [`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String") 相同的标志。'
- en: '`collation` – same as that of [`String.collation`](../core/type_basics.html#sqlalchemy.types.String.params.collation
    "sqlalchemy.types.String")'
  id: totrans-1463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 与 [`String.collation`](../core/type_basics.html#sqlalchemy.types.String.params.collation
    "sqlalchemy.types.String") 相同。'
- en: '`charset` – same as that of [`VARCHAR.charset`](#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR").'
  id: totrans-1464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 与 [`VARCHAR.charset`](#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR") 相同。'
- en: '`ascii` – same as that of [`VARCHAR.ascii`](#sqlalchemy.dialects.mysql.VARCHAR.params.ascii
    "sqlalchemy.dialects.mysql.VARCHAR").'
  id: totrans-1465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 与 [`VARCHAR.ascii`](#sqlalchemy.dialects.mysql.VARCHAR.params.ascii
    "sqlalchemy.dialects.mysql.VARCHAR") 相同。'
- en: '`unicode` – same as that of [`VARCHAR.unicode`](#sqlalchemy.dialects.mysql.VARCHAR.params.unicode
    "sqlalchemy.dialects.mysql.VARCHAR").'
  id: totrans-1466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 与 [`VARCHAR.unicode`](#sqlalchemy.dialects.mysql.VARCHAR.params.unicode
    "sqlalchemy.dialects.mysql.VARCHAR") 相同。'
- en: '`binary` – same as that of [`VARCHAR.binary`](#sqlalchemy.dialects.mysql.VARCHAR.params.binary
    "sqlalchemy.dialects.mysql.VARCHAR").'
  id: totrans-1467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 与 [`VARCHAR.binary`](#sqlalchemy.dialects.mysql.VARCHAR.params.binary
    "sqlalchemy.dialects.mysql.VARCHAR") 相同。'
- en: '`retrieve_as_bitwise` –'
  id: totrans-1468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retrieve_as_bitwise` –'
- en: if True, the data for the set type will be persisted and selected using an integer
    value, where a set is coerced into a bitwise mask for persistence. MySQL allows
    this mode which has the advantage of being able to store values unambiguously,
    such as the blank string `''`. The datatype will appear as the expression `col
    + 0` in a SELECT statement, so that the value is coerced into an integer value
    in result sets. This flag is required if one wishes to persist a set that can
    store the blank string `''` as a value.
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，set 类型的数据将使用整数值进行持久化和选择，其中一个 set 被强制转换为位掩码进行持久化。MySQL 允许此模式，它的优点是能够明确地存储值，如空字符串
    `''`。在 SELECT 语句中，数据类型将显示为表达式 `col + 0`，以便值被强制转换为整数值在结果集中返回。如果希望持久化一个可以存储空字符串
    `''` 作为值的 set，则需要此标志。
- en: Warning
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When using [`SET.retrieve_as_bitwise`](#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET"), it is essential that the list of set values
    is expressed in the **exact same order** as exists on the MySQL database.
  id: totrans-1471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 [`SET.retrieve_as_bitwise`](#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") 时，重要的是确保集合值的列表与 MySQL 数据库中存在的**完全相同的顺序**。
- en: '[PRE250]'
  id: totrans-1472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: MySQL SMALLINTEGER type.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL SMALLINTEGER 类型。
- en: '**Members**'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.SMALLINT.__init__)'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.SMALLINT.__init__)'
- en: '**Class signature**'
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.SMALLINT`](#sqlalchemy.dialects.mysql.SMALLINT
    "sqlalchemy.dialects.mysql.SMALLINT") (`sqlalchemy.dialects.mysql.types._IntegerType`,
    [`sqlalchemy.types.SMALLINT`](../core/type_basics.html#sqlalchemy.types.SMALLINT
    "sqlalchemy.types.SMALLINT"))
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.SMALLINT`](#sqlalchemy.dialects.mysql.SMALLINT
    "sqlalchemy.dialects.mysql.SMALLINT") (`sqlalchemy.dialects.mysql.types._IntegerType`,
    [`sqlalchemy.types.SMALLINT`](../core/type_basics.html#sqlalchemy.types.SMALLINT
    "sqlalchemy.types.SMALLINT"))
- en: '[PRE251]'
  id: totrans-1478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Construct a SMALLINTEGER.
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 SMALLINTEGER。
- en: 'Parameters:'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-1481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为真，则值将作为用零填充的字符串存储。请注意，这不影响底层数据库 API 返回的值，它们仍然是数字。'
- en: '[PRE252]'
  id: totrans-1484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: MySQL TEXT type, for character storage encoded up to 2^16 bytes.
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TEXT 类型，用于存储编码为最多 2^16 字节的字符。
- en: '**Class signature**'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.TEXT` (`sqlalchemy.dialects.mysql.types._StringType`,
    [`sqlalchemy.types.TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT "sqlalchemy.types.TEXT"))
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.TEXT` (`sqlalchemy.dialects.mysql.types._StringType`,
    [`sqlalchemy.types.TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT "sqlalchemy.types.TEXT"))
- en: '[PRE253]'
  id: totrans-1488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Construct a TEXT.
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 TEXT。
- en: 'Parameters:'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – Optional, if provided the server may optimize storage by substituting
    the smallest TEXT type sufficient to store `length` bytes of characters.'
  id: totrans-1491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，如果提供了，服务器可以通过用足够存储 `length` 字节字符的最小 TEXT 类型替换来优化存储。'
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-1492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，此字符串值的列级字符集。优先于 ‘ascii’ 或 ‘unicode’ 简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-1493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，此字符串值的列级排序。优先于 ‘binary’ 简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为 False：`latin1` 字符集的简写，生成模式中的 ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-1495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为 False：`ucs2` 字符集的简写，生成模式中的 UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-1496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为真，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-1497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为 False：简写，选择与列的字符集匹配的二进制排序类型。在模式中生成 BINARY。这不影响存储的数据类型，只影响字符数据的排序。'
- en: '[PRE254]'
  id: totrans-1498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: MySQL TIME type.
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TIME 类型。
- en: '**Members**'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.TIME.__init__)'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.TIME.__init__)'
- en: '**Class signature**'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TIME`](#sqlalchemy.dialects.mysql.TIME "sqlalchemy.dialects.mysql.TIME")
    ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME "sqlalchemy.types.TIME"))
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TIME`](#sqlalchemy.dialects.mysql.TIME "sqlalchemy.dialects.mysql.TIME")
    ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME "sqlalchemy.types.TIME"))
- en: '[PRE255]'
  id: totrans-1504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Construct a MySQL TIME type.
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 MySQL TIME 类型。
- en: 'Parameters:'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – not used by the MySQL dialect.'
  id: totrans-1507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – MySQL 方言不使用。'
- en: '`fsp` –'
  id: totrans-1508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fsp` –'
- en: fractional seconds precision value. MySQL 5.6 supports storage of fractional
    seconds; this parameter will be used when emitting DDL for the TIME type.
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分数秒精度值。MySQL 5.6 支持存储分数秒；在发出 TIME 类型的 DDL 时将使用此参数。
- en: Note
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: DBAPI driver support for fractional seconds may be limited; current support
    includes MySQL Connector/Python.
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DBAPI 驱动程序对于分数秒的支持可能有限；当前支持包括 MySQL Connector/Python。
- en: '[PRE256]'
  id: totrans-1512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: MySQL TIMESTAMP type.
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TIMESTAMP 类型。
- en: '**Members**'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.TIMESTAMP.__init__)'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.TIMESTAMP.__init__)'
- en: '**Class signature**'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TIMESTAMP`](#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") ([`sqlalchemy.types.TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"))
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TIMESTAMP`](#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") ([`sqlalchemy.types.TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"))
- en: '[PRE257]'
  id: totrans-1518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Construct a MySQL TIMESTAMP type.
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 MySQL TIMESTAMP 类型。
- en: 'Parameters:'
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – not used by the MySQL dialect.'
  id: totrans-1521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – MySQL 方言不使用。'
- en: '`fsp` –'
  id: totrans-1522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fsp` –'
- en: fractional seconds precision value. MySQL 5.6.4 supports storage of fractional
    seconds; this parameter will be used when emitting DDL for the TIMESTAMP type.
  id: totrans-1523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分数秒精度值。MySQL 5.6.4 支持分数秒的存储；在为 TIMESTAMP 类型发出 DDL 时将使用此参数。
- en: Note
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: DBAPI driver support for fractional seconds may be limited; current support
    includes MySQL Connector/Python.
  id: totrans-1525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DBAPI 驱动程序对分数秒的支持可能有限；当前支持包括 MySQL Connector/Python。
- en: '[PRE258]'
  id: totrans-1526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: MySQL TINYBLOB type, for binary data up to 2^8 bytes.
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TINYBLOB 类型，用于存储最多 2^8 字节的二进制数据。
- en: '**Class signature**'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TINYBLOB`](#sqlalchemy.dialects.mysql.TINYBLOB
    "sqlalchemy.dialects.mysql.TINYBLOB") (`sqlalchemy.types._Binary`)
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TINYBLOB`](#sqlalchemy.dialects.mysql.TINYBLOB
    "sqlalchemy.dialects.mysql.TINYBLOB") (`sqlalchemy.types._Binary`)
- en: '[PRE259]'
  id: totrans-1530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: MySQL TINYINT type.
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TINYINT 类型。
- en: '**Members**'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.TINYINT.__init__)'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.TINYINT.__init__)'
- en: '**Class signature**'
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TINYINT`](#sqlalchemy.dialects.mysql.TINYINT
    "sqlalchemy.dialects.mysql.TINYINT") (`sqlalchemy.dialects.mysql.types._IntegerType`)
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TINYINT`](#sqlalchemy.dialects.mysql.TINYINT "sqlalchemy.dialects.mysql.TINYINT")
    (`sqlalchemy.dialects.mysql.types._IntegerType`)
- en: '[PRE260]'
  id: totrans-1536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Construct a TINYINT.
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 TINYINT。
- en: 'Parameters:'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`display_width` – Optional, maximum display width for this number.'
  id: totrans-1539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_width` – 可选，此数字的最大显示宽度。'
- en: '`unsigned` – a boolean, optional.'
  id: totrans-1540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsigned` – 一个布尔值，可选。'
- en: '`zerofill` – Optional. If true, values will be stored as strings left-padded
    with zeros. Note that this does not effect the values returned by the underlying
    database API, which continue to be numeric.'
  id: totrans-1541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerofill` – 可选。如果为true，则值将存储为左填充零的字符串。注意，这不会影响底层数据库API返回的值，这些值仍然是数字。'
- en: '[PRE261]'
  id: totrans-1542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: MySQL TINYTEXT type, for character storage encoded up to 2^8 bytes.
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL TINYTEXT 类型，用于存储编码为 2^8 字节的字符。
- en: '**Members**'
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.TINYTEXT.__init__)'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.TINYTEXT.__init__)'
- en: '**Class signature**'
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.TINYTEXT`](#sqlalchemy.dialects.mysql.TINYTEXT
    "sqlalchemy.dialects.mysql.TINYTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mysql.TINYTEXT`](#sqlalchemy.dialects.mysql.TINYTEXT
    "sqlalchemy.dialects.mysql.TINYTEXT") (`sqlalchemy.dialects.mysql.types._StringType`)
- en: '[PRE262]'
  id: totrans-1548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Construct a TINYTEXT.
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 TINYTEXT。
- en: 'Parameters:'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-1551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，此字符串值的列级字符集。优先于 ‘ascii’ 或 ‘unicode’ 简写。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-1552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，此字符串值的列级排序。优先于 ‘binary’ 简写。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-1553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为 False：`latin1` 字符集的简写，在模式中生成 ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-1554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为 False：`ucs2` 字符集的简写，在模式中生成 UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-1555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为 true，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-1556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为 False：简写，选择与列的字符集匹配的二进制排序类型。在模式中生成 BINARY。这不影响存储的数据类型，只影响字符数据的排序。'
- en: '[PRE263]'
  id: totrans-1557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: The SQL VARBINARY type.
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: SQL VARBINARY 类型。
- en: '**Class signature**'
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mysql.VARBINARY` (`sqlalchemy.types._Binary`)
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mysql.VARBINARY` (`sqlalchemy.types._Binary`)
- en: '[PRE264]'
  id: totrans-1561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: MySQL VARCHAR type, for variable-length character data.
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL VARCHAR 类型，用于可变长度字符数据。
- en: '**Members**'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mysql.VARCHAR.__init__)'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mysql.VARCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.VARCHAR`](#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR") (`sqlalchemy.dialects.mysql.types._StringType`,
    [`sqlalchemy.types.VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"))
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.VARCHAR`](#sqlalchemy.dialects.mysql.VARCHAR "sqlalchemy.dialects.mysql.VARCHAR")
    (`sqlalchemy.dialects.mysql.types._StringType`, [`sqlalchemy.types.VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"))
- en: '[PRE265]'
  id: totrans-1567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Construct a VARCHAR.
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个VARCHAR。
- en: 'Parameters:'
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`charset` – Optional, a column-level character set for this string value. Takes
    precedence to ‘ascii’ or ‘unicode’ short-hand.'
  id: totrans-1570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset` – 可选，此字符串值的列级字符集。优先于‘ascii’或‘unicode’的简写形式。'
- en: '`collation` – Optional, a column-level collation for this string value. Takes
    precedence to ‘binary’ short-hand.'
  id: totrans-1571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 可选，此字符串值的列级排序规则。优先于‘binary’的简写形式。'
- en: '`ascii` – Defaults to False: short-hand for the `latin1` character set, generates
    ASCII in schema.'
  id: totrans-1572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii` – 默认为False：`latin1`字符集的简写形式，在模式中生成ASCII。'
- en: '`unicode` – Defaults to False: short-hand for the `ucs2` character set, generates
    UNICODE in schema.'
  id: totrans-1573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode` – 默认为False：`ucs2`字符集的简写形式，在模式中生成UNICODE。'
- en: '`national` – Optional. If true, use the server’s configured national character
    set.'
  id: totrans-1574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national` – 可选。如果为true，则使用服务器配置的国家字符集。'
- en: '`binary` – Defaults to False: short-hand, pick the binary collation type that
    matches the column’s character set. Generates BINARY in schema. This does not
    affect the type of data stored, only the collation of character data.'
  id: totrans-1575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary` – 默认为False：简写形式，选择与列的字符集匹配的二进制排序类型。在模式中生成BINARY。这不影响存储的数据类型，只影响字符数据的排序规则。'
- en: '[PRE266]'
  id: totrans-1576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: MySQL YEAR type, for single byte storage of years 1901-2155.
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL YEAR类型，用于存储1901-2155年的单字节。
- en: '**Class signature**'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.YEAR`](#sqlalchemy.dialects.mysql.YEAR "sqlalchemy.dialects.mysql.YEAR")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.YEAR`](#sqlalchemy.dialects.mysql.YEAR "sqlalchemy.dialects.mysql.YEAR")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: MySQL DML Constructs
  id: totrans-1580
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL DML构造
- en: '| Object Name | Description |'
  id: totrans-1581
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1582
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [insert](#sqlalchemy.dialects.mysql.insert)(table) | Construct a MySQL/MariaDB-specific
    variant [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    construct. |'
  id: totrans-1583
  prefs: []
  type: TYPE_TB
  zh: '| [插入](#sqlalchemy.dialects.mysql.insert)(表) | 构造一个MySQL/MariaDB特定变体的[`Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert")构造。'
- en: '| [Insert](#sqlalchemy.dialects.mysql.Insert) | MySQL-specific implementation
    of INSERT. |'
  id: totrans-1584
  prefs: []
  type: TYPE_TB
  zh: '| [插入](#sqlalchemy.dialects.mysql.Insert) | INSERT的MySQL特定实现。'
- en: '[PRE267]'
  id: totrans-1585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Construct a MySQL/MariaDB-specific variant [`Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert") construct.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个MySQL/MariaDB特定变体的[`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")构造。
- en: The [`sqlalchemy.dialects.mysql.insert()`](#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert") function creates a [`sqlalchemy.dialects.mysql.Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert"). This class is based on the dialect-agnostic
    [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct which may be constructed using the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") function in SQLAlchemy Core.
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.mysql.insert()`](#sqlalchemy.dialects.mysql.insert "sqlalchemy.dialects.mysql.insert")函数创建一个[`sqlalchemy.dialects.mysql.Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert")。这个类基于方言不可知的[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造，可以使用SQLAlchemy Core中的[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")函数构造。'
- en: The [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    construct includes additional methods [`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update").
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")构造包括额外的方法[`Insert.on_duplicate_key_update()`](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")。'
- en: '[PRE268]'
  id: totrans-1589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: MySQL-specific implementation of INSERT.
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT的MySQL特定实现。
- en: Adds methods for MySQL-specific syntaxes such as ON DUPLICATE KEY UPDATE.
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 添加用于MySQL特定语法的方法，如ON DUPLICATE KEY UPDATE。
- en: The [`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    object is created using the [`sqlalchemy.dialects.mysql.insert()`](#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert") function.
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")对象是使用[`sqlalchemy.dialects.mysql.insert()`](#sqlalchemy.dialects.mysql.insert
    "sqlalchemy.dialects.mysql.insert")函数创建的。'
- en: New in version 1.2.
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的新功能。
- en: '**Members**'
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.dialects.mysql.Insert.inherit_cache), [inserted](#sqlalchemy.dialects.mysql.Insert.inserted),
    [on_duplicate_key_update()](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update)'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.dialects.mysql.Insert.inherit_cache), [inserted](#sqlalchemy.dialects.mysql.Insert.inserted),
    [on_duplicate_key_update()](#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update)'
- en: '**Class signature**'
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mysql.Insert`](#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.Insert") ([`sqlalchemy.sql.expression.Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"))
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mysql.Insert`](#sqlalchemy.dialects.mysql.Insert "sqlalchemy.dialects.mysql.Insert")
    ([`sqlalchemy.sql.expression.Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"))
- en: '[PRE269]'
  id: totrans-1598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Indicate if this [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与该对象对应的SQL不基于此类的本地属性而是其超类，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](../core/compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](../core/compiler.html#compilerext-caching) - 为第三方或用户定义的SQL构造设置[`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE270]'
  id: totrans-1604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Provide the “inserted” namespace for an ON DUPLICATE KEY UPDATE statement
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 为ON DUPLICATE KEY UPDATE语句提供“inserted”命名空间
- en: MySQL’s ON DUPLICATE KEY UPDATE clause allows reference to the row that would
    be inserted, via a special function called `VALUES()`. This attribute provides
    all columns in this row to be referenceable such that they will render within
    a `VALUES()` function inside the ON DUPLICATE KEY UPDATE clause. The attribute
    is named `.inserted` so as not to conflict with the existing [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method.
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的ON DUPLICATE KEY UPDATE子句允许引用将要插入的行，通过一个名为`VALUES()`的特殊函数。此属性提供了此行中的所有列可引用，以便它们在ON
    DUPLICATE KEY UPDATE子句中的`VALUES()`函数内呈现。该属性命名为`.inserted`，以避免与现有的[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法发生冲突。
- en: Tip
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`Insert.inserted`](#sqlalchemy.dialects.mysql.Insert.inserted "sqlalchemy.dialects.mysql.Insert.inserted")
    attribute is an instance of [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), which provides an interface the
    same as that of the [`Table.c`](../core/metadata.html#sqlalchemy.schema.Table.c
    "sqlalchemy.schema.Table.c") collection described at [Accessing Tables and Columns](../core/metadata.html#metadata-tables-and-columns).
    With this collection, ordinary names are accessible like attributes (e.g. `stmt.inserted.some_column`),
    but special names and dictionary method names should be accessed using indexed
    access, such as `stmt.inserted["column name"]` or `stmt.inserted["values"]`. See
    the docstring for [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") for further examples.
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert.inserted`](#sqlalchemy.dialects.mysql.Insert.inserted "sqlalchemy.dialects.mysql.Insert.inserted")
    属性是 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的实例，提供了与 [访问表和列](../core/metadata.html#metadata-tables-and-columns)
    中描述的 [`Table.c`](../core/metadata.html#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c")
    集合相同的接口。使用此集合，可以像属性一样访问普通名称（例如 `stmt.inserted.some_column`），但应该使用索引访问特殊名称和字典方法名称，例如
    `stmt.inserted["column name"]` 或 `stmt.inserted["values"]`。有关更多示例，请参阅 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的文档字符串。'
- en: See also
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT…ON DUPLICATE KEY UPDATE (Upsert)](#mysql-insert-on-duplicate-key-update)
    - example of how to use `Insert.inserted`'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…ON DUPLICATE KEY UPDATE（插入或更新）](#mysql-insert-on-duplicate-key-update)
    - 使用 `Insert.inserted` 的示例'
- en: '[PRE271]'
  id: totrans-1611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Specifies the ON DUPLICATE KEY UPDATE clause.
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 指定 ON DUPLICATE KEY UPDATE 子句。
- en: 'Parameters:'
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Column keys linked to UPDATE values. The values may be any SQL expression
    or supported literal Python values.'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 与 UPDATE 值关联的列键。值可以是任何 SQL 表达式或支持的字面 Python 值。'
- en: Warning
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This dictionary does **not** take into account Python-specified default UPDATE
    values or generation functions, e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON DUPLICATE
    KEY UPDATE style of UPDATE, unless values are manually specified here.
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典**不会**考虑 Python 指定的默认 UPDATE 值或生成函数，例如那些使用 [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 指定的值。除非在此处手动指定值，否则这些值将不会被用于 ON DUPLICATE KEY UPDATE
    风格的 UPDATE。
- en: 'Parameters:'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***args** –'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: '***args** –'
- en: As an alternative to passing key/value parameters, a dictionary or list of 2-tuples
    can be passed as a single positional argument.
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: 作为传递键/值参数的替代方法，可以将字典或 2 元组的列表作为单个位置参数传递。
- en: 'Passing a single dictionary is equivalent to the keyword argument form:'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: 传递单个字典相当于关键字参数形式：
- en: '[PRE272]'
  id: totrans-1621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: 'Passing a list of 2-tuples indicates that the parameter assignments in the
    UPDATE clause should be ordered as sent, in a manner similar to that described
    for the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct overall in [Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates):'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 传递 2 元组的列表表示 UPDATE 子句中的参数分配应按发送顺序排序，类似于整体描述的 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 构造中的 [参数排序更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates)：
- en: '[PRE273]'
  id: totrans-1623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: 'Changed in version 1.3: parameters can be specified as a dictionary or list
    of 2-tuples; the latter form provides for parameter ordering.'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.3 版更改：参数可以指定为字典或 2 元组的列表；后一种形式提供了参数的排序。
- en: New in version 1.2.
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.2 版新功能。
- en: See also
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT…ON DUPLICATE KEY UPDATE (Upsert)](#mysql-insert-on-duplicate-key-update)'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…ON DUPLICATE KEY UPDATE（插入或更新）](#mysql-insert-on-duplicate-key-update)'
- en: '## mysqlclient (fork of MySQL-Python)'
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: '## mysqlclient（MySQL-Python 的分支）'
- en: Support for the MySQL / MariaDB database via the mysqlclient (maintained fork
    of MySQL-Python) driver.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 mysqlclient（MySQL-Python 的维护分支）驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-1630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for mysqlclient (maintained
    fork of MySQL-Python) is available at: [https://pypi.org/project/mysqlclient/](https://pypi.org/project/mysqlclient/)'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient（MySQL-Python 的维护分支）的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/mysqlclient/](https://pypi.org/project/mysqlclient/)
- en: Connecting
  id: totrans-1632
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接中
- en: 'Connect String:'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE274]'
  id: totrans-1634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: Driver Status
  id: totrans-1635
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序状态
- en: The mysqlclient DBAPI is a maintained fork of the [MySQL-Python](https://sourceforge.net/projects/mysql-python)
    DBAPI that is no longer maintained. [mysqlclient](https://github.com/PyMySQL/mysqlclient-python)
    supports Python 2 and Python 3 and is very stable.
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient DBAPI是[MySQL-Python](https://sourceforge.net/projects/mysql-python)
    DBAPI的维护分支，后者已不再维护。[mysqlclient](https://github.com/PyMySQL/mysqlclient-python)支持Python
    2和Python 3，并且非常稳定。
- en: '### Unicode'
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: '### Unicode'
- en: 'Please see [Unicode](#mysql-unicode) for current recommendations on unicode
    handling.  ### SSL Connections'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Unicode](#mysql-unicode)以获取有关Unicode处理的当前建议。### SSL Connections
- en: 'The mysqlclient and PyMySQL DBAPIs accept an additional dictionary under the
    key “ssl”, which may be specified using the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary:'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient和PyMySQL DBAPI接受一个额外的字典，键为“ssl”，可以使用[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典指定：
- en: '[PRE275]'
  id: totrans-1640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'For convenience, the following keys may also be specified inline within the
    URL where they will be interpreted into the “ssl” dictionary automatically: “ssl_ca”,
    “ssl_cert”, “ssl_key”, “ssl_capath”, “ssl_cipher”, “ssl_check_hostname”. An example
    is as follows:'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 为方便起见，以下键也可以内联在URL中指定，它们将自动解释为“ssl”字典中： “ssl_ca”，“ssl_cert”，“ssl_key”，“ssl_capath”，“ssl_cipher”，“ssl_check_hostname”。示例如下：
- en: '[PRE276]'
  id: totrans-1642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: See also
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SSL Connections](#pymysql-ssl) in the PyMySQL dialect'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: '[SSL Connections](#pymysql-ssl)在PyMySQL方言中'
- en: Using MySQLdb with Google Cloud SQL
  id: totrans-1645
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用MySQLdb与Google Cloud SQL
- en: 'Google Cloud SQL now recommends use of the MySQLdb dialect. Connect using a
    URL like the following:'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud SQL现在建议使用MySQLdb方言。使用以下URL进行连接：
- en: '[PRE277]'
  id: totrans-1647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: Server Side Cursors
  id: totrans-1648
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器端游标
- en: The mysqldb dialect supports server-side cursors. See [Server Side Cursors](#mysql-ss-cursors).
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: mysqldb方言支持服务器端游标。请参阅[Server Side Cursors](#mysql-ss-cursors)。
- en: DBAPI
  id: totrans-1650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for mysqlclient (maintained
    fork of MySQL-Python) is available at: [https://pypi.org/project/mysqlclient/](https://pypi.org/project/mysqlclient/)'
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient（MySQL-Python的维护分支）的文档和下载信息（如果适用）可在以下链接找到：[https://pypi.org/project/mysqlclient/](https://pypi.org/project/mysqlclient/)
- en: Connecting
  id: totrans-1652
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接中
- en: 'Connect String:'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE278]'
  id: totrans-1654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: Driver Status
  id: totrans-1655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序状态
- en: The mysqlclient DBAPI is a maintained fork of the [MySQL-Python](https://sourceforge.net/projects/mysql-python)
    DBAPI that is no longer maintained. [mysqlclient](https://github.com/PyMySQL/mysqlclient-python)
    supports Python 2 and Python 3 and is very stable.
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient DBAPI是[MySQL-Python](https://sourceforge.net/projects/mysql-python)
    DBAPI的维护分支，后者已不再维护。[mysqlclient](https://github.com/PyMySQL/mysqlclient-python)支持Python
    2和Python 3，并且非常稳定。
- en: '### Unicode'
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: '### Unicode'
- en: Please see [Unicode](#mysql-unicode) for current recommendations on unicode
    handling.
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Unicode](#mysql-unicode)以获取有关Unicode处理的当前建议。
- en: '### SSL Connections'
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: '### SSL Connections'
- en: 'The mysqlclient and PyMySQL DBAPIs accept an additional dictionary under the
    key “ssl”, which may be specified using the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary:'
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient和PyMySQL DBAPI接受一个额外的字典，键为“ssl”，可以使用[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典指定：
- en: '[PRE279]'
  id: totrans-1661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'For convenience, the following keys may also be specified inline within the
    URL where they will be interpreted into the “ssl” dictionary automatically: “ssl_ca”,
    “ssl_cert”, “ssl_key”, “ssl_capath”, “ssl_cipher”, “ssl_check_hostname”. An example
    is as follows:'
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 为方便起见，以下键也可以内联在URL中指定，它们将自动解释为“ssl”字典中： “ssl_ca”，“ssl_cert”，“ssl_key”，“ssl_capath”，“ssl_cipher”，“ssl_check_hostname”。示例如下：
- en: '[PRE280]'
  id: totrans-1663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: See also
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SSL Connections](#pymysql-ssl) in the PyMySQL dialect'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: '[SSL Connections](#pymysql-ssl)在PyMySQL方言中'
- en: Using MySQLdb with Google Cloud SQL
  id: totrans-1666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用MySQLdb与Google Cloud SQL
- en: 'Google Cloud SQL now recommends use of the MySQLdb dialect. Connect using a
    URL like the following:'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud SQL现在建议使用MySQLdb方言。使用以下URL进行连接：
- en: '[PRE281]'
  id: totrans-1668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: Server Side Cursors
  id: totrans-1669
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器端游标
- en: The mysqldb dialect supports server-side cursors. See [Server Side Cursors](#mysql-ss-cursors).
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: mysqldb方言支持服务器端游标。请参阅[Server Side Cursors](#mysql-ss-cursors)。
- en: '## PyMySQL'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: '## PyMySQL'
- en: Support for the MySQL / MariaDB database via the PyMySQL driver.
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 通过PyMySQL驱动程序支持MySQL / MariaDB数据库。
- en: DBAPI
  id: totrans-1673
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyMySQL is available
    at: [https://pymysql.readthedocs.io/](https://pymysql.readthedocs.io/)'
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: PyMySQL的文档和下载信息（如果适用）可在以下链接找到：[https://pymysql.readthedocs.io/](https://pymysql.readthedocs.io/)
- en: Connecting
  id: totrans-1675
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接中
- en: 'Connect String:'
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE282]'
  id: totrans-1677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Unicode
  id: totrans-1678
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unicode
- en: Please see [Unicode](#mysql-unicode) for current recommendations on unicode
    handling.
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Unicode](#mysql-unicode)以获取有关Unicode处理的当前建议。
- en: '### SSL Connections'
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: '### SSL连接'
- en: The PyMySQL DBAPI accepts the same SSL arguments as that of MySQLdb, described
    at [SSL Connections](#mysqldb-ssl). See that section for additional examples.
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: PyMySQL DBAPI接受与MySQLdb相同���SSL参数，详见[SSL连接](#mysqldb-ssl)。请参阅该部分以获取其他示例。
- en: 'If the server uses an automatically-generated certificate that is self-signed
    or does not match the host name (as seen from the client), it may also be necessary
    to indicate `ssl_check_hostname=false` in PyMySQL:'
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器使用自动生成的自签名证书或与主机名不匹配（从客户端看），还可能需要在PyMySQL中指定`ssl_check_hostname=false`：
- en: '[PRE283]'
  id: totrans-1683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: MySQL-Python Compatibility
  id: totrans-1684
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL-Python兼容性
- en: The pymysql DBAPI is a pure Python port of the MySQL-python (MySQLdb) driver,
    and targets 100% compatibility. Most behavioral notes for MySQL-python apply to
    the pymysql driver as well.
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: pymysql DBAPI是MySQL-python（MySQLdb）驱动程序的纯Python移植版本，目标是100%兼容。对于MySQL-python的大多数行为注意事项也适用于pymysql驱动程序。
- en: DBAPI
  id: totrans-1686
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyMySQL is available
    at: [https://pymysql.readthedocs.io/](https://pymysql.readthedocs.io/)'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: PyMySQL的文档和下载信息（如果适用）可在此处找到：[https://pymysql.readthedocs.io/](https://pymysql.readthedocs.io/)
- en: Connecting
  id: totrans-1688
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: '连接字符串:'
- en: '[PRE284]'
  id: totrans-1690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: Unicode
  id: totrans-1691
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unicode
- en: Please see [Unicode](#mysql-unicode) for current recommendations on unicode
    handling.
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: 有关当前有关Unicode处理的建议，请参阅[Unicode](#mysql-unicode)。
- en: '### SSL Connections'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: '### SSL连接'
- en: The PyMySQL DBAPI accepts the same SSL arguments as that of MySQLdb, described
    at [SSL Connections](#mysqldb-ssl). See that section for additional examples.
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: PyMySQL DBAPI接受与MySQLdb相同的SSL参数，详见[SSL连接](#mysqldb-ssl)。请参阅该部分以获取其他示例。
- en: 'If the server uses an automatically-generated certificate that is self-signed
    or does not match the host name (as seen from the client), it may also be necessary
    to indicate `ssl_check_hostname=false` in PyMySQL:'
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器使用自动生成的自签名证书或与主机名不匹配（从客户端看），还可能需要在PyMySQL中指定`ssl_check_hostname=false`：
- en: '[PRE285]'
  id: totrans-1696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: MySQL-Python Compatibility
  id: totrans-1697
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL-Python兼容性
- en: The pymysql DBAPI is a pure Python port of the MySQL-python (MySQLdb) driver,
    and targets 100% compatibility. Most behavioral notes for MySQL-python apply to
    the pymysql driver as well.
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: pymysql DBAPI是MySQL-python（MySQLdb）驱动程序的纯Python移植版本，目标是100%兼容。对于MySQL-python的大多数行为注意事项也适用于pymysql驱动程序。
- en: '## MariaDB-Connector'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: '## MariaDB-连接器'
- en: Support for the MySQL / MariaDB database via the MariaDB Connector/Python driver.
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: 通过MariaDB Connector/Python驱动程序支持MySQL / MariaDB数据库。
- en: DBAPI
  id: totrans-1701
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for MariaDB Connector/Python
    is available at: [https://pypi.org/project/mariadb/](https://pypi.org/project/mariadb/)'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB Connector/Python的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/mariadb/](https://pypi.org/project/mariadb/)
- en: Connecting
  id: totrans-1703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: '连接字符串:'
- en: '[PRE286]'
  id: totrans-1705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: Driver Status
  id: totrans-1706
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序状态
- en: MariaDB Connector/Python enables Python programs to access MariaDB and MySQL
    databases using an API which is compliant with the Python DB API 2.0 (PEP-249).
    It is written in C and uses MariaDB Connector/C client library for client server
    communication.
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB Connector/Python使Python程序能够使用符合Python DB API 2.0（PEP-249）的API访问MariaDB和MySQL数据库。它是用C编写的，并使用MariaDB
    Connector/C客户端库进行客户端服务器通信。
- en: Note that the default driver for a `mariadb://` connection URI continues to
    be `mysqldb`. `mariadb+mariadbconnector://` is required to use this driver.
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`mariadb://`连接URI的默认驱动程序仍然是`mysqldb`。要使用此驱动程序，需要`mariadb+mariadbconnector://`。
- en: DBAPI
  id: totrans-1709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for MariaDB Connector/Python
    is available at: [https://pypi.org/project/mariadb/](https://pypi.org/project/mariadb/)'
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB Connector/Python的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/mariadb/](https://pypi.org/project/mariadb/)
- en: Connecting
  id: totrans-1711
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: '连接字符串:'
- en: '[PRE287]'
  id: totrans-1713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: Driver Status
  id: totrans-1714
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序状态
- en: MariaDB Connector/Python enables Python programs to access MariaDB and MySQL
    databases using an API which is compliant with the Python DB API 2.0 (PEP-249).
    It is written in C and uses MariaDB Connector/C client library for client server
    communication.
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB Connector/Python使Python程序能够使用符合Python DB API 2.0（PEP-249）的API访问MariaDB和MySQL数据库。它是用C编写的，并使用MariaDB
    Connector/C客户端库进行客户端服务器通信。
- en: Note that the default driver for a `mariadb://` connection URI continues to
    be `mysqldb`. `mariadb+mariadbconnector://` is required to use this driver.
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`mariadb://`连接URI的默认驱动程序仍然是`mysqldb`。要使用此驱动程序，需要`mariadb+mariadbconnector://`。
- en: '## MySQL-Connector'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: '## MySQL-连接器'
- en: Support for the MySQL / MariaDB database via the MySQL Connector/Python driver.
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: 通过MySQL Connector/Python驱动程序支持MySQL/MariaDB数据库。
- en: DBAPI
  id: totrans-1719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for MySQL Connector/Python
    is available at: [https://pypi.org/project/mysql-connector-python/](https://pypi.org/project/mysql-connector-python/)'
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Connector/Python的文档和下载信息（如果适用）可在此处获取：[https://pypi.org/project/mysql-connector-python/](https://pypi.org/project/mysql-connector-python/)
- en: Connecting
  id: totrans-1721
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE288]'
  id: totrans-1723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: Note
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The MySQL Connector/Python DBAPI has had many issues since its release, some
    of which may remain unresolved, and the mysqlconnector dialect is **not tested
    as part of SQLAlchemy’s continuous integration**. The recommended MySQL dialects
    are mysqlclient and PyMySQL.
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 自发布以来，MySQL Connector/Python DBAPI存在许多问题，其中一些可能仍未解决，而mysqlconnector方言**未作为SQLAlchemy持续集成的一部分进行测试**。推荐的MySQL方言是mysqlclient和PyMySQL。
- en: DBAPI
  id: totrans-1726
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for MySQL Connector/Python
    is available at: [https://pypi.org/project/mysql-connector-python/](https://pypi.org/project/mysql-connector-python/)'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Connector/Python的文档和下载信息（如果适用）可在此处获取：[https://pypi.org/project/mysql-connector-python/](https://pypi.org/project/mysql-connector-python/)
- en: Connecting
  id: totrans-1728
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE289]'
  id: totrans-1730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '## asyncmy'
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: '## asyncmy'
- en: Support for the MySQL / MariaDB database via the asyncmy driver.
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: 通过asyncmy驱动程序支持MySQL/MariaDB数据库。
- en: DBAPI
  id: totrans-1733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for asyncmy is available
    at: [https://github.com/long2ice/asyncmy](https://github.com/long2ice/asyncmy)'
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 异步MySQL的文档和下载信息（如果适用）可在此处获取：[https://github.com/long2ice/asyncmy](https://github.com/long2ice/asyncmy)
- en: Connecting
  id: totrans-1735
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE290]'
  id: totrans-1737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: Using a special asyncio mediation layer, the asyncmy dialect is usable as the
    backend for the [SQLAlchemy asyncio](../orm/extensions/asyncio.html) extension
    package.
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的asyncio中介层，asyncmy方言可作为[SQLAlchemy asyncio](../orm/extensions/asyncio.html)扩展包的后端使用。
- en: 'This dialect should normally be used only with the [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine creation function:'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言通常只应与[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")引擎创建函数一起使用：
- en: '[PRE291]'
  id: totrans-1740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: DBAPI
  id: totrans-1741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for asyncmy is available
    at: [https://github.com/long2ice/asyncmy](https://github.com/long2ice/asyncmy)'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 异步MySQL的文档和下载信息（如果适用）可在此处获取：[https://github.com/long2ice/asyncmy](https://github.com/long2ice/asyncmy)
- en: Connecting
  id: totrans-1743
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE292]'
  id: totrans-1745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '## aiomysql'
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: '## aiomysql'
- en: Support for the MySQL / MariaDB database via the aiomysql driver.
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: 通过aiomysql驱动程序支持MySQL/MariaDB数据库。
- en: DBAPI
  id: totrans-1748
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for aiomysql is available
    at: [https://github.com/aio-libs/aiomysql](https://github.com/aio-libs/aiomysql)'
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: aiomysql的文档和下载信息（如果适用）可在此处获取：[https://github.com/aio-libs/aiomysql](https://github.com/aio-libs/aiomysql)
- en: Connecting
  id: totrans-1750
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE293]'
  id: totrans-1752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: The aiomysql dialect is SQLAlchemy’s second Python asyncio dialect.
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: aiomysql方言是SQLAlchemy的第二个Python asyncio方言。
- en: Using a special asyncio mediation layer, the aiomysql dialect is usable as the
    backend for the [SQLAlchemy asyncio](../orm/extensions/asyncio.html) extension
    package.
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的asyncio中介层，aiomysql方言可作为[SQLAlchemy asyncio](../orm/extensions/asyncio.html)扩展包的后端使用。
- en: 'This dialect should normally be used only with the [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine creation function:'
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言通常只应与[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")引擎创建函数一起使用：
- en: '[PRE294]'
  id: totrans-1756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: DBAPI
  id: totrans-1757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for aiomysql is available
    at: [https://github.com/aio-libs/aiomysql](https://github.com/aio-libs/aiomysql)'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: aiomysql的文档和下载信息（如果适用）可在此处获取：[https://github.com/aio-libs/aiomysql](https://github.com/aio-libs/aiomysql)
- en: Connecting
  id: totrans-1759
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE295]'
  id: totrans-1761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '## cymysql'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: '## cymysql'
- en: Support for the MySQL / MariaDB database via the CyMySQL driver.
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: 通过CyMySQL驱动程序支持MySQL/MariaDB数据库。
- en: DBAPI
  id: totrans-1764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for CyMySQL is available
    at: [https://github.com/nakagami/CyMySQL](https://github.com/nakagami/CyMySQL)'
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: CyMySQL的文档和下载信息（如果适用）可在此处获取：[https://github.com/nakagami/CyMySQL](https://github.com/nakagami/CyMySQL)
- en: Connecting
  id: totrans-1766
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE296]'
  id: totrans-1768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: Note
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The CyMySQL dialect is **not tested as part of SQLAlchemy’s continuous integration**
    and may have unresolved issues. The recommended MySQL dialects are mysqlclient
    and PyMySQL.
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: CyMySQL 方言**不在 SQLAlchemy 的持续集成测试范围内**，可能存在未解决的问题。推荐使用的 MySQL 方言是 mysqlclient
    和 PyMySQL。
- en: DBAPI
  id: totrans-1771
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for CyMySQL is available
    at: [https://github.com/nakagami/CyMySQL](https://github.com/nakagami/CyMySQL)'
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: CyMySQL 的文档和下载信息（如果适用）可在此处找到：[https://github.com/nakagami/CyMySQL](https://github.com/nakagami/CyMySQL)
- en: Connecting
  id: totrans-1773
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE297]'
  id: totrans-1775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '## pyodbc'
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: '## pyodbc'
- en: Support for the MySQL / MariaDB database via the PyODBC driver.
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 PyODBC 驱动程序支持 MySQL / MariaDB 数据库。
- en: DBAPI
  id: totrans-1778
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyODBC is available
    at: [https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)
- en: Connecting
  id: totrans-1780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE298]'
  id: totrans-1782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: Note
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The PyODBC for MySQL dialect is **not tested as part of SQLAlchemy’s continuous
    integration**. The recommended MySQL dialects are mysqlclient and PyMySQL. However,
    if you want to use the mysql+pyodbc dialect and require full support for `utf8mb4`
    characters (including supplementary characters like emoji) be sure to use a current
    release of MySQL Connector/ODBC and specify the “ANSI” (**not** “Unicode”) version
    of the driver in your DSN or connection string.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 对于 MySQL 方言**不在 SQLAlchemy 的持续集成测试范围内**。推荐使用的 MySQL 方言是 mysqlclient 和
    PyMySQL。但是，如果您想使用 mysql+pyodbc 方言并且需要对`utf8mb4`字符（包括表情符号等辅助字符）进行完全支持，请确保使用当前版本的
    MySQL Connector/ODBC 并在 DSN 或连接字符串中指定“ANSI”（而不是“Unicode”）版本的驱动程序。
- en: 'Pass through exact pyodbc connection string:'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 通过精确的 pyodbc 连接字符串进行传递：
- en: '[PRE299]'
  id: totrans-1786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: DBAPI
  id: totrans-1787
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyODBC is available
    at: [https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)'
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)
- en: Connecting
  id: totrans-1789
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE300]'
  id: totrans-1791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
