- en: Sequencing side-effects in JAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 JAX 中序列化副作用
- en: 原文：[`jax.readthedocs.io/en/latest/jep/10657-sequencing-effects.html`](https://jax.readthedocs.io/en/latest/jep/10657-sequencing-effects.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jep/10657-sequencing-effects.html`](https://jax.readthedocs.io/en/latest/jep/10657-sequencing-effects.html)
- en: '*sharadmv@* *May 9 2022*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*sharadmv@* *May 9 2022*'
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: When we write JAX code, we can usually pretend we’re writing single-threaded,
    eagerly-executed Python even though underneath the hood, JAX and its runtime may
    execute it asynchronously in the background. As long as we write pure (side-effect-free)
    code, these performance optimizations are usually invisible to us and don’t interfere
    with our single-threaded mental model. Asynchronous execution is great – we get
    performant, parallel code without having to think about it at all!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写 JAX 代码时，通常可以假装我们在编写单线程、即时执行的 Python 代码，尽管在底层，JAX 及其运行时可能在后台异步执行。只要我们编写纯净（无副作用）的代码，这些性能优化通常对我们是不可见的，不会干扰我们的单线程心理模型。异步执行非常棒
    — 我们可以获得高效、并行的代码，而无需考虑任何问题！
- en: However, in the presence of side-effects, the illusion begins to break down
    and the cracks in our mental model start to show. Specifically, these differences
    show up when we think about the *order* in which side-effects happen.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在存在副作用的情况下，这种幻象开始破裂，我们心理模型的裂缝开始显现。具体来说，当我们考虑副作用发生的*顺序*时，这些差异就会显现出来。
- en: In this design note, we explore the interaction between JAX’s execution model,
    and the ordering of side-effects. We also provide a way of enforcing a “single-threaded”
    ordering of effects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇设计说明中，我们探讨了 JAX 执行模型与副作用顺序之间的交互。我们还提供了一种强制执行“单线程”副作用顺序的方法。
- en: Background
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景
- en: When we write the following Python code
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写以下 Python 代码时
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'we expect `"hello"` to be printed before `"world"`. This might seem obvious
    but consider the following JAX code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望 `"hello"` 在 `"world"` 之前被打印出来。这似乎是显而易见的，但考虑以下 JAX 代码：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In many cases, JAX will execute `f` and `g` *in parallel*, dispatching the computations
    onto different threads – `g` might actually be executed before `f`. Parallel execution
    is a nice performance optimization, especially if copying to and from a device
    is expensive (see the [asynchronous dispatch note](https://jax.readthedocs.io/en/latest/async_dispatch.html)
    for more details). In practice, however, we often don’t need to think about asynchronous
    dispatch because we’re writing pure functions and only care about the inputs and
    outputs of functions – we’ll naturally block on future values.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，JAX 将并行执行 `f` 和 `g`，将计算分发到不同的线程 —— `g` 可能会在 `f` 之前执行。并行执行是一种很好的性能优化，特别是在设备间的复制成本昂贵时（详见[异步调度说明](https://jax.readthedocs.io/en/latest/async_dispatch.html)了解更多详情）。然而，在实践中，我们通常不需要考虑异步调度，因为我们编写的是纯函数，只关心函数的输入和输出
    —— 我们自然会在未来的值上阻塞。
- en: However, now imagine that we have a `jax.print` function that works inside of
    JIT-ted JAX functions (`host_callback.id_print` is an example of this). Let’s
    return to the previous example except with prints in the mix.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，现在想象一下，我们有一个 `jax.print` 函数，可以在 JIT 编译的 JAX 函数内部工作（例如 `host_callback.id_print`
    就是一个例子）。让我们回到之前的例子，但现在加入了打印输出。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Thanks to asynchronous dispatch, we could actually see `"world"` being printed
    before `"hello"`. The reordering of the print side-effects breaks the illusion
    of a single-threaded execution model.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于异步调度的存在，我们实际上可以看到 `"world"` 在 `"hello"` 之前被打印出来。打印输出副作用的重新排序破坏了单线程执行模型的幻象。
- en: 'Another example of where side-effects can “reveal” out-of-order execution is
    when we compile JAX programs. Consider the following JAX code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个副作用可以“揭示”无序执行的示例是当我们编译 JAX 程序时。考虑以下 JAX 代码：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Even though in Python, we’ve written the `"hello"` print before the `"world"`
    print, a compiler like XLA is free to reorder them because there’s no explicit
    data-dependence between the prints.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 Python 中，我们先写了 `"hello"` 的打印，然后是 `"world"` 的打印，但是像 XLA 这样的编译器可以自由地重新排序它们，因为这两个打印之间没有显式的数据依赖关系。
- en: Motivation
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动机
- en: We’d like to support “ordered” effects. When we say ordered, we mean that the
    effects occur in the same order as we would if we were executing a single-threaded
    Python program. This is our main desideratum. In the presence of explicit parallelism
    like `pmap` or user threads, we don’t need to maintain this behavior but at least
    if the user is not explicitly requesting parallelism, we’d like to preserve a
    single-threaded ordering.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望支持“有序”效果。所谓有序，意味着效果发生的顺序与我们在执行单线程Python程序时的顺序相同。这是我们的主要愿望。在存在显式并行性（如`pmap`或用户线程）的情况下，我们不需要保持这种行为，但至少如果用户没有显式请求并行性，我们希望保持单线程顺序。
- en: Before we dive in more, let’s first step back and ask ourselves if it is okay
    if we reorder effects in the name of performance, and conversely, do we need to
    enforce an ordering on effects at all? In some cases, we don’t need ordering.
    Maybe some side-effects shouldn’t adversely affect the performance of a JAX program.
    However, for other side-effects, we may want to enforce a single-threaded program
    order so users don’t get counterintuitive behavior. Consider a logging effect.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论之前，让我们先退后一步，问问自己，如果我们为了性能而重新排序效果，这样做是否可以接受？反之，我们是否需要完全强制效果的顺序？在某些情况下，我们不需要排序。也许某些副作用不应该影响JAX程序的性能。然而，对于其他副作用，我们可能希望强制单线程程序顺序，以防止用户得到反直觉的行为。考虑一个日志效果。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If `log` is mutating a global list, we might expect that we add `x` before adding
    `y`. For a more strict effect, we may want the option to order the effects.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`log`正在改变全局列表，我们可能期望在添加`y`之前添加`x`。为了更严格的效果，我们可能希望能够对效果进行排序。
- en: Enforcing ordered effects
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制有序效果
- en: The main tool we have to enforce the ordering of computations is *data-dependence*.
    Simply put, if a function `g` has an input that is the output of a function `f`,
    `f` must be executed before `g`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来强制计算顺序的主要工具是*数据依赖性*。简单来说，如果函数`g`的输入是函数`f`的输出，那么必须先执行`f`，再执行`g`。
- en: However, we may have side effects like prints that have no inputs at all so
    naively we couldn’t sequence them. We thus use *tokens* as a means of injecting
    artificial data-dependence into a computation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可能会有像打印这样的副作用，这些副作用根本没有任何输入，因此我们无法简单地对它们进行排序。因此，我们使用*令牌*作为向计算中注入人为数据依赖性的手段。
- en: 'What is a token? A token is just a dummy value that can be threaded in and
    out of a computation. By threading the same token in and out and several computations,
    we enforce that they have to happen in a certain order. Let’s take the previous
    print example and see what it would look like with tokens in the mix:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是令牌？令牌只是可以在计算中穿插的虚拟值。通过在多个计算中穿插相同的令牌，我们强制它们按照特定顺序进行。让我们看看前面的打印示例，加入令牌后会是什么样子：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we rewrite `jax.print` to take in and return a token, we have now sequenced
    the two prints since the input to the second print depends on the output of the
    first print. The actual value of `token` can be anything really, but we’ll see
    in practice that the tokens are invisible to users.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重写`jax.print`以接受并返回一个令牌，我们现在已经按顺序序列化了两个打印，因为第二个打印的输入依赖于第一个打印的输出。实际上，`token`的实际值可以是任何东西，但我们会看到，这些令牌对用户来说是不可见的。
- en: Runtime tokens vs. compiler tokens
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时令牌与编译器令牌
- en: 'Here we will actually start talking about implementation details. In practice,
    we’ll need two separate types of tokens to sequence effects: one for each of the
    aforementioned sources of reordering. We’ll need *runtime tokens* to sequence
    asynchronously dispatched side-effecting computations and we’ll need *compiler
    tokens* to sequence effects within computations.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将开始讨论实现细节。实际上，我们需要两种不同类型的令牌来序列化效果：一种用于上述重新排序的每种源，我们需要*运行时令牌*来序列化异步调度的有副作用的计算，我们还需要*编译器令牌*来序列化计算内部的效果。
- en: 'In practice, our computation will be rewritten to look like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们的计算将重写为以下形式：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice how the runtime tokens are only used at the JIT boundary and the compiler
    tokens are only within the compiled code. Compiler tokens are created during “lowering”
    (we convert Python code to a lower level representation like HLO or StableHLO)
    but runtime tokens need to be managed in Python since they’re being threaded in
    and out of JIT-ted functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意运行时令牌仅在JIT边界使用，而编译器令牌仅在编译后的代码中使用。编译器令牌是在“降级”过程中创建的（我们将Python代码转换为类似HLO或StableHLO的低级表示），但运行时令牌需要在Python中进行管理，因为它们在JIT化的函数中穿插输入和输出。
- en: Furthermore, notice that the runtime tokens are “disconnected” from the compiler
    tokens meaning there’s no data dependency between them. This could potentially
    be dangerous as if we will lose the data dependence between the bodies of two
    dispatched function calls. However, if we assume “strict execution” – i.e. a dispatched
    function will only start execution when all of its inputs are ready and all of
    it outputs will become ready at the same time – we are safe to create a fresh
    compiler token and return a non-output-dependent runtime token.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意运行时令牌与编译器令牌之间是“断开”的，这意味着它们之间没有数据依赖关系。这可能是危险的，因为我们会失去两个调度函数调用体之间的数据依赖性。然而，如果我们假设“严格执行”——即一个调度函数只有在其所有输入准备就绪且所有输出同时准备就绪时才会开始执行——我们可以安全地创建一个新的编译器令牌，并返回一个不依赖于输出的运行时令牌。
- en: Managing runtime tokens
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理运行时令牌
- en: 'To manage runtime tokens on behalf of the user, we’ll need to hook into JAX’s
    dispatch machinery. Whenever we call a JIT-ted function, we eventually bottom
    out in a function that looks like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了代表用户管理运行时令牌，我们需要插入到JAX的调度机制中。每当我们调用JIT编译的函数时，我们最终会得到一个看起来像这样的函数：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At this point we need to “inject” the runtime tokens into the computation and
    “extract” them from the computation’s outputs:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此时我们需要"注入"运行时令牌到计算中，并从计算的输出中"提取"它们：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What is `runtime_token` exactly? Well we need to be able to pass it into a `compiled_computation`,
    which means it needs to be some sort of array (for now, since there’s no shared
    token representation inside and outside compiled JAX code). In practice we can
    use a `(0,)`-shaped array to minimize overheads.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`runtime_token`究竟是什么？嗯，我们需要能够将其传递给`compiled_computation`，这意味着它需要是某种数组（目前来说，由于在编译的JAX代码内外没有共享的令牌表示，我们可以使用一个`(0,)`形状的数组来最小化开销）。'
- en: We also need to think about the multiple device use case, e.g. the first example
    where we first call a JIT-ted function on device 0 and then one on device 1. In
    that case, we need to also *copy* the runtime token returned from the first computation
    (which lives on device 0) to device 1 so we can pass it into the second computation.
    If two subsequent computations share the same device, this copy is not necessary.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要考虑多设备使用情况，例如第一个示例中，我们首先在设备0上调用JIT编译的函数，然后在设备1上调用另一个函数。在这种情况下，我们还需要将第一个计算返回的运行时令牌（位于设备0上）复制到设备1，以便将其传递给第二个计算。如果两个后续计算共享相同的设备，则此复制是不必要的。
- en: Adding compiler tokens
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加编译器令牌
- en: When we lower Python code to HLO or StableHLO we need to create a token at the
    start of the computation and ensure they are available when we have side-effecting
    computations that need to be ordered. The side-effecting computations will take
    the token as input and return it as an output.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将Python代码降级为HLO或StableHLO时，我们需要在计算开始时创建一个令牌，并确保在需要对顺序进行排序的副作用计算时可用。副作用计算将该令牌作为输入，并将其作为输出返回。
- en: The implementation of this token threading involves upgrading the JAX lowering
    machinery to do this bookkeeping automatically. The main challenges involve dealing
    with higher-order primitives like call primitives and control-flow primitives.
    We won’t go into details on how to handle those in this design note.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此令牌线程涉及升级JAX降级机制以自动进行此类记账。主要挑战涉及处理像调用原语和控制流原语这样的高阶原语。在本设计说明中，我们不会详细讨论如何处理这些挑战。
- en: Blocking on output tokens
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阻塞输出令牌
- en: 'Adding support for runtime and compiler tokens for side-effecting computations
    is important for sequencing but there’s also another subtle use-case for tokens,
    which is blocking on side-effecting computations. Even if we don’t want a side-effecting
    computation to be *ordered* we may still want to wait on its completion. Currently
    we have `jax.block_until_ready`, which waits until a future value has its result
    ready. However, with side-effecting computations, we may have functions that don’t
    have a return value but are still executing a side-effect. Take the simple example
    here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为运行时和编译器令牌增加支持以进行副作用计算序列化是很重要的，但令牌还有另一个微妙的用例，即在副作用计算上阻塞。即使我们不希望副作用计算是*有序*的，我们可能仍然希望等待其完成。目前我们有`jax.block_until_ready`，它会等待直到未来的值准备就绪。然而，对于副作用计算，我们可能有一些没有返回值但仍在执行副作用的函数。以这里的简单示例为例：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This compiled computation takes no explicit inputs and has no explicit outputs.
    If it was an ordered print effect, we could block on the returned runtime token,
    However, when this is an unordered computation we don’t do any token threading.
    How do we wait for `f()` to finish executing when we have no output value to call
    `block_until_ready` on? Well, we could apply our same token strategy except we
    only return runtime tokens and don’t take them as inputs. This will give us a
    value to block on that will only be ready once `f()` is done being executed. We’ll
    call these tokens *output tokens*. We end up with a function that looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个编译后的计算不接受任何显式输入，也没有显式输出。如果它是一个有序的打印效果，我们可以阻塞返回的运行时令牌，但是当这是一个无序计算时，我们不执行任何令牌线程。当我们没有输出值来调用`block_until_ready`时，我们如何等待`f()`执行结束呢？嗯，我们可以应用相同的令牌策略，除了我们只返回运行时令牌而不将它们作为输入。这将给我们一个可以阻塞的值，该值仅在`f()`执行完成后才会准备好。我们将这些令牌称为*输出令牌*。我们最终得到了如下所示的函数：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Underneath the hood, we’ll manage the output tokens in the same way we manage
    the runtime tokens but provide a method for users to block on the current set
    of output tokens. Unlike runtime tokens, output tokens need to be *device-specific*.
    Consider a single device use-case:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，我们将以与管理运行时令牌相同的方式来管理输出令牌，但提供一种方法让用户在当前一组输出令牌上阻塞。与运行时令牌不同，输出令牌需要是*特定于设备*的。考虑单设备使用情况：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since `f()` and `g()` are executed on the same device, blocking on `g()`’s output
    token effectively blocks on `f()` since (as of now!), the JAX runtime does not
    interleave computations executed on the same device. We’ll have to revise this
    entire design if that changes, of course.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`f()`和`g()`在同一设备上执行，阻塞`g()`的输出令牌有效地阻塞了`f()`，因为（目前为止！），JAX运行时不会交错执行在同一设备上执行的计算。当然，如果情况改变，我们将不得不重新审视整个设计。
- en: 'However, consider the two device use-case:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，考虑两个设备使用情况：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here we don’t want to explicitly sequence `f()` and `g()` but want to wait
    for both of them to finish. We’ll need one output token for `f()` and one for
    `g()` and we’ll block on both of those tokens:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们不想显式地序列`f()`和`g()`，但是希望等待它们都完成。我们需要一个`f()`的输出令牌和一个`g()`的输出令牌，并且我们将阻塞在这两个令牌上：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We’ll thus need a per-device output token so we can avoid sequencing computations
    on different devices while offering the ability to block on side-effecting computations.
    We end up with the following (approximate) change to the JAX dispatch machinery:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要每个设备的输出令牌，这样我们就可以避免在不同设备上对计算进行排序，同时可以阻塞具有副作用的计算。我们最终得到了以下（大致）对JAX调度机制的更改：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We’ll also need to expose a function to that blocks on the output token:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要暴露一个函数来阻塞输出令牌：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that blocking on output tokens may not be fairly common since most JAX
    computations will return a value to block on. However, output tokens are helpful
    for testing and profiling, and are good to support so that we have a consistent
    and cohesive effect system.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，阻塞输出令牌可能不太常见，因为大多数JAX计算将返回一个值来阻塞。然而，输出令牌对于测试和分析非常有用，并且支持它们是很好的，这样我们就有了一个一致且有条理的效果系统。
- en: Some more details
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多细节
- en: All of the aforementioned token management infrastructure will be *thread-local*.
    This means that each user thread will have their own independent stream of runtime
    tokens. Sequencing is only promised at a user thread level.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有上述的令牌管理基础设施将是*线程本地*的。这意味着每个用户线程将有自己独立的运行时令牌流。排序仅在用户线程级别上承诺。
- en: In practice, we have one runtime token per effect. Different instances of that
    effect will be sequenced. This is to avoid sequencing effectul computations that
    may not have any relation to each other. Technically this goes against our original
    goal though of enforcing a single-threaded Python program ordering, but this is
    a tradeoff that could be modulated by having both “effect”-specific tokens and
    “global” tokens.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实践中，我们每个效果有一个运行时令牌。不同实例的该效果将被排序。这是为了避免对彼此可能没有任何关系的具有影响力的计算进行排序。从技术上讲，这与我们最初的目标相矛盾，即强制执行单线程Python程序的顺序，但这是一个可以通过同时具有“效果”特定令牌和“全局”令牌来调节的折衷方案。
