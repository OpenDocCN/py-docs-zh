- en: 1.1 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 更改日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_11.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_11.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_11.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_11.html)
- en: 1.1.18
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.18
- en: 'Released: March 6, 2018'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年3月6日
- en: postgresql
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [py3k]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [py3k]**'
- en: Fixed bug in PostgreSQL COLLATE / ARRAY adjustment first introduced in [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    where new behaviors in Python 3.7 regular expressions caused the fix to fail.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 PostgreSQL COLLATE / ARRAY 调整中首次引入的问题，在 Python 3.7 正则表达式的新行为导致修复失败的情况。首次引入：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)。
- en: 'References: [#4208](https://www.sqlalchemy.org/trac/ticket/4208)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4208](https://www.sqlalchemy.org/trac/ticket/4208)
- en: mysql
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL dialects now query the server version using `SELECT @@version` explicitly
    to the server to ensure we are getting the correct version information back. Proxy
    servers like MaxScale interfere with the value that is passed to the DBAPI’s connection.server_version
    value so this is no longer reliable.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在显式地使用 `SELECT @@version` 查询服务器版本以确保我们得到正确的版本信息。代理服务器（如 MaxScale）会干扰传递给
    DBAPI 的连接.server_version 值，因此此信息现在不再可靠。
- en: 'References: [#4205](https://www.sqlalchemy.org/trac/ticket/4205)'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4205](https://www.sqlalchemy.org/trac/ticket/4205)
- en: 1.1.17
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.17
- en: 'Released: February 22, 2018'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年2月22日
- en: '**[bug] [ext]**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Repaired regression caused in 1.2.3 and 1.1.16 regarding association proxy objects,
    revising the approach to [#4185](https://www.sqlalchemy.org/trac/ticket/4185)
    when calculating the “owning class” of an association proxy to default to choosing
    the current class if the proxy object is not directly associated with a mapped
    class, such as a mixin.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.2.3 和 1.1.16 中关于关联代理对象的回归，修订了计算关联代理的“拥有类”的方法，使其在计算关联代理的“拥有类”时默认选择当前类，如果代理对象与映射类没有直接关联，例如与混入类相似的情况。
- en: 'References: [#4185](https://www.sqlalchemy.org/trac/ticket/4185)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4185](https://www.sqlalchemy.org/trac/ticket/4185)
- en: 1.1.16
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.16
- en: 'Released: February 16, 2018'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年2月16日
- en: orm
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in post_update feature where an UPDATE is emitted when the parent
    object has been deleted but the dependent object is not. This issue has existed
    for a long time however since 1.2 now asserts rows matched for post_update, this
    was raising an error.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 post_update 功能中的问题，即当父对象已被删除但相关对象未被删除时，会发出 UPDATE。此问题已存在很长时间，但自 1.2 版本以来，为
    post_update 断言行匹配，因此会引发错误。
- en: 'References: [#4187](https://www.sqlalchemy.org/trac/ticket/4187)'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4187](https://www.sqlalchemy.org/trac/ticket/4187)
- en: '**[orm] [bug]**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by fix for issue [#4116](https://www.sqlalchemy.org/trac/ticket/4116)
    affecting versions 1.2.2 as well as 1.1.15, which had the effect of mis-calculation
    of the “owning class” of an [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as the `NoneType` class in
    some declarative mixin/inheritance situations as well as if the association proxy
    were accessed off of an un-mapped class. The “figure out the owner” logic has
    been replaced by an in-depth routine that searches through the complete mapper
    hierarchy assigned to the class or subclass to determine the correct (we hope)
    match; will not assign the owner if no match is found. An exception is now raised
    if the proxy is used against an un-mapped instance.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复问题 [#4116](https://www.sqlalchemy.org/trac/ticket/4116) 而引起的回归，影响到版本 1.2.2
    以及 1.1.15，导致一些声明性混合/继承情况下的“拥有类”计算错误，以及如果关联代理从未映射的类中访问，则将关联代理错误地分配给了 `NoneType`
    类。现在，“找到所有者”的逻辑已被一种深度搜索的方法取代，该方法通过搜索分配给类或子类的完整映射器层次结构来确定正确（我们希望如此）的匹配；如果未找到匹配项，则不会分配所有者。如果对未映射实例使用代理，则现在会引发异常。
- en: 'References: [#4185](https://www.sqlalchemy.org/trac/ticket/4185)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4185](https://www.sqlalchemy.org/trac/ticket/4185)
- en: '**[orm] [bug]**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an object that is expunged during a rollback of a nested or
    subtransaction which also had its primary key mutated would not be correctly removed
    from the session, causing subsequent issues in using the session.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在回滚嵌套事务或子事务期间对已发生主键变异的对象进行删除时，会导致该对象未能正确从会话中移除，从而在使用会话时引发后续问题。
- en: 'References: [#4151](https://www.sqlalchemy.org/trac/ticket/4151)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4151](https://www.sqlalchemy.org/trac/ticket/4151)
- en: sql
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added [`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") and [`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") as top level imports in the `sqlalchemy.`
    and `sqlalchemy.sql.` namespace. Pull request courtesy Lele Gaifax.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst")和[`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast")作为`sqlalchemy.`和`sqlalchemy.sql.`命名空间中的顶级导入添加。感谢Lele
    Gaifax的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") where using the “multi-values” format
    in combination with [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects as keys rather than strings would fail. Pull
    request courtesy Aubrey Stark-Toller.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")中使用“multi-values”格式与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象作为键而不是字符串时会失败的bug。感谢Aubrey Stark-Toller的拉取请求。
- en: 'References: [#4162](https://www.sqlalchemy.org/trac/ticket/4162)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4162](https://www.sqlalchemy.org/trac/ticket/4162)
- en: postgresql
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added “SSL SYSCALL error: Operation timed out” to the list of messages that
    trigger a “disconnect” scenario for the psycopg2 driver. Pull request courtesy
    André Cruz.'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将“SSL SYSCALL error: Operation timed out”添加到触发psycopg2驱动程序“断开连接”场景的消息列表中。感谢André
    Cruz的拉取请求。'
- en: '**[postgresql] [bug]**'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “TRUNCATE” to the list of keywords accepted by the PostgreSQL dialect
    as an “autocommit”-triggering keyword. Pull request courtesy Jacob Hayes.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“TRUNCATE”添加到PostgreSQL方言接受的关键字列表中，作为“autocommit”触发关键字。感谢Jacob Hayes的拉取请求。
- en: mysql
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where the MySQL “concat” and “match” operators failed to propagate
    kwargs to the left and right expressions, causing compiler options such as “literal_binds”
    to fail.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL的“concat”和“match”运算符无法将kwargs传播到左右表达式，导致编译器选项（如“literal_binds”）失败的错误。
- en: 'References: [#4136](https://www.sqlalchemy.org/trac/ticket/4136)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4136](https://www.sqlalchemy.org/trac/ticket/4136)
- en: misc
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [pool]**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed a fairly serious connection pool bug where a connection that is acquired
    after being refreshed as a result of a user-defined [`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") or due to the 1.2-released “pre_ping” feature
    would not be correctly reset if the connection were returned to the pool by weakref
    cleanup (e.g. the front-facing object is garbage collected); the weakref would
    still refer to the previously invalidated DBAPI connection which would have the
    reset operation erroneously called upon it instead. This would lead to stack traces
    in the logs and a connection being checked into the pool without being reset,
    which can cause locking issues.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当严重的连接池bug，即在用户定义的[`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")或由于1.2版本发布的“pre_ping”功能导致刷新后获取的连接，如果连接由weakref清理（例如前端对象被垃圾回收）返回到池中，则不会正确重置连接；弱引用仍将指向先前失效的DBAPI连接，而该连接将错误地调用重置操作。这将导致日志中的堆栈跟踪和连接被检入池而未被重置，这可能导致锁定问题。
- en: 'References: [#4184](https://www.sqlalchemy.org/trac/ticket/4184)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4184](https://www.sqlalchemy.org/trac/ticket/4184)
- en: 1.1.15
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.15
- en: 'Released: November 3, 2017'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年11月3日
- en: orm
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed bug where the association proxy would inadvertently link itself to an
    [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object if it were called first with the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as a parent, causing errors upon subsequent
    usage.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当关联代理首先以[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")作为父类调用时，会错误地将自身链接到[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象的错误，导致后续使用时出现错误的问题。
- en: 'References: [#4116](https://www.sqlalchemy.org/trac/ticket/4116)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4116](https://www.sqlalchemy.org/trac/ticket/4116)
- en: '**[orm] [bug]**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM relationship would warn against conflicting sync targets
    (e.g. two relationships would both write to the same column) for sibling classes
    in an inheritance hierarchy, where the two relationships would never actually
    conflict during writes.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，在继承层次结构中的兄弟类中，ORM关系会警告存在冲突的同步目标（例如，两个关系都将写入同一列），但实际上这两个关系在写入时永远不会发生冲突。
- en: 'References: [#4078](https://www.sqlalchemy.org/trac/ticket/4078)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4078](https://www.sqlalchemy.org/trac/ticket/4078)
- en: '**[orm] [bug]**'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where correlated select used against single-table inheritance entity
    would fail to render correctly in the outer query, due to adjustment for single
    inheritance discriminator criteria inappropriately re-applying the criteria to
    the outer query.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中针对单表继承实体使用的相关选择在外部查询中无法正确呈现，因为不适当地调整了单继承鉴别器条件，错误地将条件重新应用到外部查询中。
- en: 'References: [#4103](https://www.sqlalchemy.org/trac/ticket/4103)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4103](https://www.sqlalchemy.org/trac/ticket/4103)
- en: orm declarative
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [bug]**'
- en: Fixed a bug where a descriptor, which is a mapped column or a relationship elsewhere
    in a hierarchy based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), would be referenced during
    a refresh operation, leading to an error since the attribute is not mapped as
    a mapper property. A similar issue can arise for other attributes like the “type”
    column added by [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") if the class fails to include
    “concrete=True” in its mapper, however the check here should also prevent that
    scenario from causing a problem.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，在刷新操作期间会引用描述符（即基于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")的其他地方的映射列或关系），导致错误，因为该属性未映射为映射器属性。如果类未在其映射器中包含“concrete=True”，那么其他属性（例如由[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")添加的“type”列）可能会出现类似的问题，但此处的检查也应该防止该场景引发问题。
- en: 'References: [#4124](https://www.sqlalchemy.org/trac/ticket/4124)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4124](https://www.sqlalchemy.org/trac/ticket/4124)
- en: sql
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where `__repr__` of [`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") would fail if the argument were a tuple. Pull
    request courtesy Nicolas Caniart.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中[`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")的`__repr__`如果参数是元组，则会失败。 感谢 Nicolas Caniart
    的拉取请求。
- en: 'References: [#4126](https://www.sqlalchemy.org/trac/ticket/4126)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4126](https://www.sqlalchemy.org/trac/ticket/4126)
- en: '**[sql] [bug]**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the recently added [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") and [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") methods didn’t work when called
    as methods, as opposed to using the standalone functions [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_"). Also added documentation examples for these
    relatively unintuitive SQL operators.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中最近添加的[`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")和[`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法在作为方法调用时无法正常工作，而不是使用独立的函数[`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")和[`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")。此外，为这些相对不直观的 SQL 操作添加了文档示例。
- en: 'References: [#4093](https://www.sqlalchemy.org/trac/ticket/4093)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4093](https://www.sqlalchemy.org/trac/ticket/4093)
- en: postgresql
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Made further fixes to the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") class in conjunction with COLLATE, as the fix made in
    [#4006](https://www.sqlalchemy.org/trac/ticket/4006) failed to accommodate for
    a multidimensional array.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了与 COLLATE 结合使用的[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")类的问题，因为在[#4006](https://www.sqlalchemy.org/trac/ticket/4006)中进行的修复未能适应多维数组。
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function where passing an argument that
    is already of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"),
    such as a PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct, would produce a `ValueError`,
    due to the function attempting to nest the arrays.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")函数中的错误，其中传递一个已经是[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")类型的参数，例如PostgreSQL中的[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")构造，会产生`ValueError`，因为函数尝试嵌套数组。
- en: 'References: [#4107](https://www.sqlalchemy.org/trac/ticket/4107)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4107](https://www.sqlalchemy.org/trac/ticket/4107)
- en: '**[postgresql] [bug]**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL `Insert.on_conflict_do_update()` which would prevent
    the insert statement from being used as a CTE, e.g. via `Insert.cte()`, within
    another statement.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL中`Insert.on_conflict_do_update()`中的错误，该错误会阻止插入语句被用作CTE，例如通过`Insert.cte()`在另一个语句中使用。
- en: 'References: [#4074](https://www.sqlalchemy.org/trac/ticket/4074)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4074](https://www.sqlalchemy.org/trac/ticket/4074)
- en: mysql
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Warning emitted when MariaDB 10.2.8 or earlier in the 10.2 series is detected
    as there are major issues with CHECK constraints within these versions that were
    resolved as of 10.2.9.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到MariaDB 10.2.8或更早版本的10.2系列时，会发出警告，因为这些版本中的CHECK约束存在重大问题，这些问题在10.2.9中已解决。
- en: Note that this changelog message was NOT released with SQLAlchemy 1.2.0b3 and
    was added retroactively.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此更改日志消息未随SQLAlchemy 1.2.0b3一起发布，而是事后添加的。
- en: 'References: [#4097](https://www.sqlalchemy.org/trac/ticket/4097)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4097](https://www.sqlalchemy.org/trac/ticket/4097)
- en: '**[mysql] [bug]**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7.20 now warns for use of the @tx_isolation variable; a version check
    is now performed and uses @transaction_isolation instead to prevent this warning.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7.20现在会警告使用@tx_isolation变量；现在执行版本检查并使用@transaction_isolation来防止此警告。
- en: 'References: [#4120](https://www.sqlalchemy.org/trac/ticket/4120)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4120](https://www.sqlalchemy.org/trac/ticket/4120)
- en: '**[mysql] [bug]**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where CURRENT_TIMESTAMP would not reflect correctly in the MariaDB
    10.2 series due to a syntax change, where the function is now represented as `current_timestamp()`.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在MariaDB 10.2系列中CURRENT_TIMESTAMP由于语法更改而无法正确反映的问题，其中该函数现在表示为`current_timestamp()`。
- en: 'References: [#4096](https://www.sqlalchemy.org/trac/ticket/4096)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4096](https://www.sqlalchemy.org/trac/ticket/4096)
- en: '**[mysql] [bug]**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'MariaDB 10.2 now supports CHECK constraints (warning: use version 10.2.9 or
    greater due to upstream issues noted in [#4097](https://www.sqlalchemy.org/trac/ticket/4097)).
    Reflection now takes these CHECK constraints into account when they are present
    in the `SHOW CREATE TABLE` output.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MariaDB 10.2现在支持CHECK约束（警告：由于在[#4097](https://www.sqlalchemy.org/trac/ticket/4097)中指出的上游问题，请使用10.2.9或更高版本）。反射现在在存在CHECK约束时考虑这些CHECK约束，当它们出现在`SHOW
    CREATE TABLE`输出中时。
- en: 'References: [#4098](https://www.sqlalchemy.org/trac/ticket/4098)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4098](https://www.sqlalchemy.org/trac/ticket/4098)
- en: sqlite
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug where SQLite CHECK constraint reflection would fail if the referenced
    table were in a remote schema, e.g. on SQLite a remote database referred to by
    ATTACH.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite中CHECK约束反射失败的错误，如果引用的表在远程模式下，例如在SQLite中由ATTACH引用的远程数据库。
- en: 'References: [#4099](https://www.sqlalchemy.org/trac/ticket/4099)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4099](https://www.sqlalchemy.org/trac/ticket/4099)
- en: mssql
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a full range of “connection closed” exception codes to the PyODBC dialect
    for SQL Server, including ‘08S01’, ‘01002’, ‘08003’, ‘08007’, ‘08S02’, ‘08001’,
    ‘HYT00’, ‘HY010’. Previously, only ‘08S01’ was covered.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server的PyODBC方言添加了完整范围的“连接关闭”异常代码，包括‘08S01’、‘01002’、‘08003’、‘08007’、‘08S02’、‘08001’、‘HYT00’、‘HY010’。以前只覆盖了‘08S01’。
- en: 'References: [#4095](https://www.sqlalchemy.org/trac/ticket/4095)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4095](https://www.sqlalchemy.org/trac/ticket/4095)
- en: 1.1.14
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.14
- en: 'Released: September 5, 2017'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年9月5日
- en: orm
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") following along similar lines as that of [#4030](https://www.sqlalchemy.org/trac/ticket/4030),
    where an internal check for a target object in the identity map could lead to
    an error if it were to be garbage collected immediately before the merge routine
    actually retrieves the object.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的bug，与[#4030](https://www.sqlalchemy.org/trac/ticket/4030)类似，其中对于身份映射中的目标对象的内部检查，如果在合并过程实际检索对象之前立即被垃圾回收，可能会导致错误。
- en: 'References: [#4069](https://www.sqlalchemy.org/trac/ticket/4069)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4069](https://www.sqlalchemy.org/trac/ticket/4069)
- en: '**[orm] [bug]**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option would not be recognized if it extended
    from a relationship that was loading using joined eager loading. Additionally,
    as the bug led to excess work being performed, Python function call counts are
    also improved by 20% within the initial calculation of result set columns, complementing
    the joined eager load improvements of [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项扩展自使用连接式急加载加载的关系时，该选项将不被识别。此外，由于该bug导致执行了过多的工作，Python函数调用次数在结果集列的初始计算中也提高了20%，这与[#3915](https://www.sqlalchemy.org/trac/ticket/3915)的连接急加载改进相辅相成。
- en: 'References: [#4048](https://www.sqlalchemy.org/trac/ticket/4048)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4048](https://www.sqlalchemy.org/trac/ticket/4048)
- en: '**[orm] [bug]**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed race condition in ORM identity map which would cause objects to be inappropriately
    removed during a load operation, causing duplicate object identities to occur,
    particularly under joined eager loading which involves deduplication of objects.
    The issue is specific to garbage collection of weak references and is observed
    only under the PyPy interpreter.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM身份映射中的竞争条件，导致在加载操作期间不适当地删除对象，从而导致重复对象标识的发生，特别是在涉及对象去重的连接急加载下。该问题特定于弱引用的垃圾回收，并且仅在PyPy解释器下观察到。
- en: 'References: [#4068](https://www.sqlalchemy.org/trac/ticket/4068)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4068](https://www.sqlalchemy.org/trac/ticket/4068)
- en: '**[orm] [bug]**'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where objects in a collection that had the primary
    key attribute set to `None` for a key that is typically autoincrementing would
    be considered to be a database-persisted key for part of the internal deduplication
    process, causing only one object to actually be inserted in the database.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的bug，其中集合中的对象的主键属性设置为`None`，对于通常是自动递增的键，会被视为内部去重过程中的数据库持久化键的一部分，导致实际上只有一个对象被插入到数据库中。
- en: 'References: [#4056](https://www.sqlalchemy.org/trac/ticket/4056)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4056](https://www.sqlalchemy.org/trac/ticket/4056)
- en: '**[orm] [bug]**'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised when a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") is used against an attribute that is not against a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), such as an association proxy. Previously, a
    recursion overflow would occur trying to locate non-existent attributes.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对不是[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")的属性（如关联代理）使用[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")时，会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。以前，尝试定位不存在的属性会导致递归溢出。
- en: 'References: [#4067](https://www.sqlalchemy.org/trac/ticket/4067)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4067](https://www.sqlalchemy.org/trac/ticket/4067)
- en: sql
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Altered the range specification for window functions to allow for two of the
    same PRECEDING or FOLLOWING keywords in a range by allowing for the left side
    of the range to be positive and for the right to be negative, e.g. (1, 3) is “1
    FOLLOWING AND 3 FOLLOWING”.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了窗口函数的范围规范，允许在范围中使用两个相同的PRECEDING或FOLLOWING关键字，通过允许范围的左侧为正数，右侧为负数，例如(1, 3)是“1
    FOLLOWING AND 3 FOLLOWING”。
- en: 'References: [#4053](https://www.sqlalchemy.org/trac/ticket/4053)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4053](https://www.sqlalchemy.org/trac/ticket/4053)
- en: 1.1.13
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.13
- en: 'Released: August 3, 2017'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年8月3日
- en: oracle
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [性能] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复[#3937](https://www.sqlalchemy.org/trac/ticket/3937)导致的性能回归，其中cx_Oracle自版本5.3起从其命名空间中删除了`.UNICODE`符号，这被解释为cx_Oracle的“WITH_UNICODE”模式被无条件打开，这会在SQLAlchemy端调用函数，无条件地将所有字符串转换为unicode并导致性能影响。实际上，根据cx_Oracle的作者，自5.1起，“WITH_UNICODE”模式已完全删除，因此不再需要昂贵的unicode转换函数，如果在Python
    2下检测到cx_Oracle 5.1或更高版本，则会禁用它们。还恢复了在[#3937](https://www.sqlalchemy.org/trac/ticket/3937)中删除的针对“WITH_UNICODE”模式的警告。
- en: 'This change is also **backported** to: 1.0.19'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.19
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: 1.1.12
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.12
- en: 'Released: July 24, 2017'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年7月24日
- en: orm
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 1.1.11 where adding additional non-entity columns to a
    query that includes an entity with subqueryload relationships would fail, due
    to an inspection added in 1.1.11 as a result of [#4011](https://www.sqlalchemy.org/trac/ticket/4011).
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从1.1.11开始的回归，其中向包含具有子查询加载关系的实体的查询添加额外的非实体列会失败，原因是在1.1.11中添加的检查作为[#4011](https://www.sqlalchemy.org/trac/ticket/4011)的结果。
- en: 'References: [#4033](https://www.sqlalchemy.org/trac/ticket/4033)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4033](https://www.sqlalchemy.org/trac/ticket/4033)
- en: '**[orm] [bug]**'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving JSON NULL evaluation logic added in 1.1 as part of [#3514](https://www.sqlalchemy.org/trac/ticket/3514)
    where the logic would not accommodate ORM mapped attributes named differently
    from the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that was mapped.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.1中添加的涉及JSON NULL评估逻辑的错误，作为[#3514](https://www.sqlalchemy.org/trac/ticket/3514)的一部分，其中逻辑不会适应与映射的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")不同命名的ORM映射属性。
- en: 'References: [#4031](https://www.sqlalchemy.org/trac/ticket/4031)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4031](https://www.sqlalchemy.org/trac/ticket/4031)
- en: '**[orm] [bug]**'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added `KeyError` checks to all methods within `WeakInstanceDict` where a check
    for `key in dict` is followed by indexed access to that key, to guard against
    a race against garbage collection that under load can remove the key from the
    dict after the code assumes its present, leading to very infrequent `KeyError`
    raises.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`WeakInstanceDict`的所有方法中添加了`KeyError`检查，其中在检查`key in dict`之后立即对该键进行索引访问，以防止在负载下垃圾回收可能会将键从字典中移除，导致代码假定其存在后非常少见地引发`KeyError`。
- en: 'References: [#4030](https://www.sqlalchemy.org/trac/ticket/4030)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4030](https://www.sqlalchemy.org/trac/ticket/4030)
- en: oracle
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [postgresql]**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [功能] [postgresql]**'
- en: Added new keywords [`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence") and [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") to [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), to allow rendering of the CACHE parameter understood
    by Oracle and PostgreSQL, and the ORDER parameter understood by Oracle. Pull request
    courtesy David Moore.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")添加了新的关键字[`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence")和[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence")，以允许渲染Oracle和PostgreSQL理解的CACHE参数，以及Oracle理解的ORDER参数。感谢David
    Moore的拉取请求。
- en: tests
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与Python 3.6.2变更不兼容的测试固定装置中的问题。
- en: 'This change is also **backported** to: 1.0.18'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.18
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: 1.1.11
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.11
- en: 'Released: Monday, June 19, 2017'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年6月19日
- en: orm
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue with subquery eagerloading which continues on from the series of
    issues fixed in [#2699](https://www.sqlalchemy.org/trac/ticket/2699), [#3106](https://www.sqlalchemy.org/trac/ticket/3106),
    [#3893](https://www.sqlalchemy.org/trac/ticket/3893) involving that the “subquery”
    contains the correct FROM clause when beginning from a joined inheritance subclass
    and then subquery eager loading onto a relationship from the base class, while
    the query also includes criteria against the subclass. The fix in the previous
    tickets did not accommodate for additional subqueryload operations loading more
    deeply from the first level, so the fix has been further generalized.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询预加载的问题，该问题是从[#2699](https://www.sqlalchemy.org/trac/ticket/2699)、[#3106](https://www.sqlalchemy.org/trac/ticket/3106)、[#3893](https://www.sqlalchemy.org/trac/ticket/3893)修复的一系列问题中延续而来，涉及到“子查询”在从连接的继承子类开始，然后对基类的关系进行子查询预加载时包含正确的FROM子句，同时查询还包括对子类的条件。之前票据中的修复未考虑到从第一级更深层次加载更多的subqueryload操作，因此修复已进一步泛化。
- en: 'References: [#4011](https://www.sqlalchemy.org/trac/ticket/4011)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4011](https://www.sqlalchemy.org/trac/ticket/4011)
- en: sql
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed AttributeError which would occur in [`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct during an iteration of the
    structure.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup")结构迭代期间可能发生的AttributeError。
- en: 'References: [#4012](https://www.sqlalchemy.org/trac/ticket/4012)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4012](https://www.sqlalchemy.org/trac/ticket/4012)
- en: postgresql
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Continuing with the fix that correctly handles PostgreSQL version string “10devel”
    released in 1.1.8, an additional regexp bump to handle version strings of the
    form “10beta1”. While PostgreSQL now offers better ways to get this information,
    we are sticking w/ the regexp at least through 1.1.x for the least amount of risk
    to compatibility w/ older or alternate PostgreSQL databases.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复1.1.8中发布的正确处理PostgreSQL版本字符串“10devel”的问题，另外增加了一个正则表达式升级以处理形式为“10beta1”的版本字符串。虽然现在PostgreSQL提供了更好的获取此信息的方法，但至少在1.1.x版本中我们将继续使用正则表达式，以减少与旧版或替代PostgreSQL数据库兼容性的风险。
- en: 'References: [#4005](https://www.sqlalchemy.org/trac/ticket/4005)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4005](https://www.sqlalchemy.org/trac/ticket/4005)
- en: '**[postgresql] [bug]**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where using [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") with a string type that features a collation would fail
    to produce the correct syntax within CREATE TABLE.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用带有排序规则的字符串类型的[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")时，在CREATE TABLE中未能生成正确语法的错误。
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: mysql
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7 has introduced permission limiting for the “SHOW VARIABLES” command;
    the MySQL dialect will now handle when SHOW returns no row, in particular for
    the initial fetch of SQL_MODE, and will emit a warning that user permissions should
    be modified to allow the row to be present.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7为“SHOW VARIABLES”命令引入了权限限制；MySQL方言现在将处理当SHOW返回零行时的情况，特别是对于SQL_MODE的初始获取，并将发出警告，提示用户权限应该修改以允许该行存在。
- en: 'References: [#4007](https://www.sqlalchemy.org/trac/ticket/4007)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4007](https://www.sqlalchemy.org/trac/ticket/4007)
- en: mssql
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server transaction isolation must be fetched from a different
    view when using Azure data warehouse, the query is now attempted against both
    views and then a NotImplemented is raised unconditionally if failure continues
    to provide the best resiliency against future arbitrary API changes in new SQL
    Server versions.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用Azure数据仓库时必须从不同视图获取SQL Server事务隔离的bug，现在查询将尝试针对两个视图执行，如果持续失败，则无条件引发NotImplemented，以提供对未来新SQL
    Server版本中任意API更改的最佳弹性。
- en: 'References: [#3994](https://www.sqlalchemy.org/trac/ticket/3994)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3994](https://www.sqlalchemy.org/trac/ticket/3994)
- en: '**[mssql] [bug]**'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a placeholder type [`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML") to the SQL Server dialect, so that a reflected
    table which includes this type can be re-rendered as a CREATE TABLE. The type
    has no special round-trip behavior nor does it currently support additional qualifying
    arguments.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server方言添加了一个占位符类型[`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML")，以便包含此类型的反射表可以重新呈现为CREATE TABLE。该类型没有特殊的往返行为，也不支持额外的限定参数。
- en: 'References: [#3973](https://www.sqlalchemy.org/trac/ticket/3973)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3973](https://www.sqlalchemy.org/trac/ticket/3973)
- en: oracle
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Support for two-phase transactions has been removed entirely for cx_Oracle when
    version 6.0b1 or later of the DBAPI is in use. The two- phase feature historically
    has never been usable under cx_Oracle 5.x in any case, and cx_Oracle 6.x has removed
    the connection-level “twophase” flag upon which this feature relied.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用cx_Oracle的6.0b1或更高版本的DBAPI时，完全移除了对两阶段事务的支持。在任何情况下，两阶段特性在cx_Oracle 5.x下历史上从未可用，而cx_Oracle
    6.x已经移除了这个特性依赖的连接级“twophase”标志。
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: 1.1.10
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.10
- en: 'Released: Friday, May 19, 2017'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年5月19日 星期五
- en: orm
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a cascade such as “delete-orphan” (but others as well) would
    fail to locate an object linked to a relationship that itself is local to a subclass
    in an inheritance relationship, thus causing the operation to not take place.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了级联操作（如“delete-orphan”等）无法定位与继承关系中本身是子类的关系链接的对象的bug，从而导致操作无法执行。
- en: 'References: [#3986](https://www.sqlalchemy.org/trac/ticket/3986)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3986](https://www.sqlalchemy.org/trac/ticket/3986)
- en: schema
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is now raised if a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object is created with a mismatched
    number of “local” and “remote” columns, which otherwise causes the internal state
    of the constraint to be incorrect. Note that this also impacts the condition where
    a dialect’s reflection process produces a mismatched set of columns for a foreign
    key constraint.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果创建一个[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象时“local”和“remote”列的数量不匹配，现在会引发一个[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")，否则会导致约束的内部状态不正确。请注意，这也会影响方言的反射过程产生的外键约束列集不匹配的情况。
- en: 'References: [#3949](https://www.sqlalchemy.org/trac/ticket/3949)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3949](https://www.sqlalchemy.org/trac/ticket/3949)
- en: postgresql
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “autocommit” support for GRANT, REVOKE keywords. Pull request courtesy
    Jacob Hayes.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为GRANT、REVOKE关键字添加了“autocommit”支持。感谢Jacob Hayes的Pull请求。
- en: mysql
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Removed an ancient and unnecessary intercept of the UTC_TIMESTAMP MySQL function,
    which was getting in the way of using it with a parameter.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对UTC_TIMESTAMP MySQL函数的古老且不必要的拦截，这个拦截妨碍了使用带参数的函数。
- en: 'References: [#3966](https://www.sqlalchemy.org/trac/ticket/3966)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3966](https://www.sqlalchemy.org/trac/ticket/3966)
- en: '**[mysql] [bug]**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL dialect regarding rendering of table options in conjunction
    with PARTITION options when rendering CREATE TABLE. The PARTITION related options
    need to follow the table options, whereas previously this ordering was not enforced.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL方言中有关在渲染CREATE TABLE时与PARTITION选项一起渲染表选项的bug。PARTITION相关选项需要跟随表选项，而以前这种顺序没有被强制执行。
- en: 'References: [#3961](https://www.sqlalchemy.org/trac/ticket/3961)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3961](https://www.sqlalchemy.org/trac/ticket/3961)
- en: oracle
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle dialect where version string parsing would fail for cx_Oracle
    version 6.0b1 due to the “b” character. Version string parsing is now via a regexp
    rather than a simple split.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle方言中的bug，其中由于“b”字符，对cx_Oracle版本6.0b1的版本字符串解析会失败。现在版本字符串解析通过正则表达式而不是简单的分割。
- en: 'References: [#3975](https://www.sqlalchemy.org/trac/ticket/3975)'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3975](https://www.sqlalchemy.org/trac/ticket/3975)
- en: misc
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Protected against testing “None” as a class in the case where declarative classes
    are being garbage collected and new automap prepare() operations are taking place
    concurrently, very infrequently hitting a weakref that has not been fully acted
    upon after gc.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明类被垃圾回收并且新的automap prepare()操作同时进行的情况下，防止测试“None”作为一个类，非常罕见地在gc后未完全处理的weakref上进行操作。
- en: 'References: [#3980](https://www.sqlalchemy.org/trac/ticket/3980)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3980](https://www.sqlalchemy.org/trac/ticket/3980)
- en: 1.1.9
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.9
- en: 'Released: April 4, 2017'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年4月4日
- en: sql
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression released in 1.1.5 due to [#3859](https://www.sqlalchemy.org/trac/ticket/3859)
    where adjustments to the “right-hand-side” evaluation of an expression based on
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    to honor the underlying type’s “right-hand-side” rules caused the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") type to be inappropriately lost, in those cases when
    we *do* want the left-hand side type to be transferred directly to the right hand
    side so that bind-level rules can be applied to the expression’s argument.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.1.5 版本中由于 [#3859](https://www.sqlalchemy.org/trac/ticket/3859) 导致的回归，根据
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    的“右侧”规则调整表达式的“右侧”评估，以遵守底层类型的“右侧”规则，导致在我们确实希望左侧类型直接传递到右侧，以便将绑定级规则应用于表达式参数时，[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 类型不适当地丢失。
- en: 'References: [#3952](https://www.sqlalchemy.org/trac/ticket/3952)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3952](https://www.sqlalchemy.org/trac/ticket/3952)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误] [PostgreSQL]**'
- en: Changed the mechanics of `ResultProxy` to unconditionally delay the “autoclose”
    step until the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is done with the object; in the case where PostgreSQL
    ON CONFLICT with RETURNING returns no rows, autoclose was occurring in this previously
    non-existent use case, causing the usual autocommit behavior that occurs unconditionally
    upon INSERT/UPDATE/DELETE to fail.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了`ResultProxy`的机制，无条件延迟“自动关闭”步骤，直到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")完成对象的操作；在 PostgreSQL ON CONFLICT with RETURNING
    返回零行的情况下，自动关闭会发生在这种以前不存在的用例中，导致以前在 INSERT/UPDATE/DELETE 上无条件发生的通常自动提交行为失败。
- en: 'References: [#3955](https://www.sqlalchemy.org/trac/ticket/3955)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3955](https://www.sqlalchemy.org/trac/ticket/3955)
- en: misc
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed regression released in 1.1.8 due to [#3950](https://www.sqlalchemy.org/trac/ticket/3950)
    where the deeper search for information about column types in the case of a “schema
    type” or a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would produce an attribute error if the mapping
    also contained a [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.1.8 版本中由于 [#3950](https://www.sqlalchemy.org/trac/ticket/3950) 导致的回归，当映射还包含
    [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    时，在“模式类型”或 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 的情况下，对列类型的更深层搜索会导致属性错误。
- en: 'References: [#3956](https://www.sqlalchemy.org/trac/ticket/3956)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3956](https://www.sqlalchemy.org/trac/ticket/3956)
- en: 1.1.8
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.8
- en: 'Released: March 31, 2017'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年3月31日
- en: postgresql
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: '**[postgresql] [bug]**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[PostgreSQL] [错误]**'
- en: Added support for parsing the PostgreSQL version string for a development version
    like “PostgreSQL 10devel”. Pull request courtesy Sean McCully.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对解析 PostgreSQL 版本字符串的支持，例如“PostgreSQL 10devel”。感谢 Sean McCully 的拉取请求。
- en: misc
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug in [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") where the [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") method would not track a type that
    had been copied using `TypeEngine.copy()`. This became more of a regression in
    1.1 compared to 1.0 because the [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class is now a subclass of [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget"), which among other things indicates to
    the parent [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that the type should be copied when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is. These copies are common when using declarative
    with mixins or abstract classes.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")中的bug，在使用`TypeEngine.copy()`复制了类型后，[`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable")方法将不会跟踪该类型。这在1.1中与1.0相比变得更加退化，因为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类现在是[`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget")的子类，其中一项指示父[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")应在复制[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时复制类型。在使用混合或抽象类的情况下，这些副本是常见的。
- en: 'References: [#3950](https://www.sqlalchemy.org/trac/ticket/3950)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3950](https://www.sqlalchemy.org/trac/ticket/3950)
- en: '**[bug] [ext]**'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Added support for bound parameters, e.g. those normally set up via [`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params"), to the `Result.count()` method. Previously, support
    for parameters were omitted. Pull request courtesy Pat Deegan.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对`Result.count()`方法添加了对绑定参数的支持，例如通常通过[`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")设置的参数。之前，对参数的支持被省略了。感谢 Pat Deegan 的拉取请求。
- en: 1.1.7
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.7
- en: 'Released: March 27, 2017'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年3月27日
- en: orm
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: An [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct can now be passed to the `Query.select_entity_from()` method. Entities
    will be pulled from the selectable represented by the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct. This allows special options for [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") such as [`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased") to be used in conjunction with `Query.select_entity_from()`.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造传递给`Query.select_entity_from()`方法。实体将从由[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造表示的可选择项中提取。这允许在与`Query.select_entity_from()`一起使用时使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")的特殊选项，例如[`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased")。
- en: 'References: [#3933](https://www.sqlalchemy.org/trac/ticket/3933)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3933](https://www.sqlalchemy.org/trac/ticket/3933)
- en: '**[orm] [bug]**'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a race condition which could occur under threaded environments as a result
    of the caching added via [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
    An internal collection of `Column` objects could be regenerated on an alias object
    inappropriately, confusing a joined eager loader when it attempts to render SQL
    and collect results and resulting in an attribute error. The collection is now
    generated up front before the alias object is cached and shared among threads.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多线程环境下可能发生的竞态条件，这是由于通过[#3915](https://www.sqlalchemy.org/trac/ticket/3915)添加的缓存引起的。内部`Column`对象的集合可能会不适当地在别名对象上重新生成，当尝试渲染SQL并收集结果时，会让连接的急加载器困惑，并导致属性错误。现在，在别名对象被缓存并在线程之间共享之前，该集合会提前生成。
- en: 'References: [#3947](https://www.sqlalchemy.org/trac/ticket/3947)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3947](https://www.sqlalchemy.org/trac/ticket/3947)
- en: engine
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added an exception handler that will warn for the “cause” exception on Py2K
    when the “autorollback” feature of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") itself raises an exception. In Py3K, the two exceptions
    are naturally reported by the interpreter as one occurring during the handling
    of the other. This is continuing with the series of changes for rollback failure
    handling that were last visited as part of [#2696](https://www.sqlalchemy.org/trac/ticket/2696)
    in 1.0.12.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个异常处理程序，当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的“autorollback”功能本身引发异常时，将会警告“cause”异常在 Py2K 上。在
    Py3K 中，这两个异常自然由解释器报告为一个在处理另一个时发生。这是继续处理回滚失败处理的一系列更改的一部分，上次在 1.0.12 中作为[#2696](https://www.sqlalchemy.org/trac/ticket/2696)的一部分讨论过。
- en: 'References: [#3946](https://www.sqlalchemy.org/trac/ticket/3946)'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3946](https://www.sqlalchemy.org/trac/ticket/3946)
- en: sql
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Added support for the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") and the [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") objects to be compatible with each other. That
    is, a variant can be created against a type like [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), and the instructions to create constraints and/or database-specific
    type objects will propagate correctly as per the variant’s dialect mapping.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对[`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")和[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")对象相互兼容的支持。也就是说，可以针对像[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")这样的类型创建一个变体，并且创建约束和/或数据库特定类型对象的指令将根据变体的方言映射正确传播。
- en: 'References: [#2892](https://www.sqlalchemy.org/trac/ticket/2892)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2892](https://www.sqlalchemy.org/trac/ticket/2892)
- en: '**[sql] [bug]**'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in compiler where the string identifier of a savepoint would be cached
    in the identifier quoting dictionary; as these identifiers are arbitrary, a small
    memory leak could occur if a single [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had an unbounded number of savepoints used, as
    well as if the savepoint clause constructs were used directly with an unbounded
    umber of savepoint names. The memory leak does **not** impact the vast majority
    of cases as normally the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), which renders savepoint names with a simple counter
    starting at “1”, is used on a per-transaction or per-fixed-number-of-transactions
    basis before being discarded.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器中的一个 bug，其中保存点的字符串标识符会被缓存在标识符引用字典中；由于这些标识符是任意的，如果一个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")使用了无限数量的保存点，或者直接使用了无限数量的保存点子句构造，可能会发生小内存泄漏。这个内存泄漏**不会**影响绝大多数情况，因为通常会在每个事务或固定数量的事务基础上使用一个简单计数器从“1”开始渲染保存点名称的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")在被丢弃之前使用。
- en: 'References: [#3931](https://www.sqlalchemy.org/trac/ticket/3931)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3931](https://www.sqlalchemy.org/trac/ticket/3931)
- en: '**[sql] [bug]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “schema translate” feature where the translated schema name
    would be invoked in terms of an alias name when rendered along with a column expression;
    occurred only when the source translate name was “None”. The “schema translate”
    feature now only takes effect for [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") and [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses, that is, objects that correspond to
    a DDL-creatable structure in a database.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“模式翻译”功能中的 bug，其中在与列表达式一起呈现时，翻译的模式名称将被调用为别名名称；仅当源翻译名称为“None”时才会发生。现在，“模式翻译”功能仅对[`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")和[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")子类生效，即对应于数据库中可创建 DDL 结构的对象。
- en: 'References: [#3924](https://www.sqlalchemy.org/trac/ticket/3924)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3924](https://www.sqlalchemy.org/trac/ticket/3924)
- en: oracle
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: A fix to cx_Oracle’s WITH_UNICODE mode which was uncovered by the fact that
    cx_Oracle 5.3 now seems to hardcode this flag on in the build; an internal method
    that uses this mode wasn’t using the correct signature.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle的WITH_UNICODE模式，这是由于cx_Oracle 5.3现在似乎在构建中硬编码了此标志；使用此模式的内部方法未使用正确的签名。
- en: 'This change is also **backported** to: 1.0.18'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.18
- en: 'References: [#3937](https://www.sqlalchemy.org/trac/ticket/3937)'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3937](https://www.sqlalchemy.org/trac/ticket/3937)
- en: 1.1.6
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.6
- en: 'Released: February 28, 2017'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年2月28日
- en: orm
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Addressed some long unattended performance concerns within the joined eager
    loader query construction system that have accumulated since earlier versions
    as a result of increased abstraction. The use of ad- hoc [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects per query, which produces lots of
    column lookup overhead each time, has been replaced with a cached approach that
    makes use of a small pool of [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects that are reused between invocations
    of joined eager loading. Some mechanics involving eager join path construction
    have also been optimized. Callcounts for an end-to-end query construction + single
    row fetch test with a worst-case joined loader scenario have been reduced by about
    60% vs. 1.1.5 and 42% vs. that of 0.8.6.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决了自从早期版本以来积累的一些长期未解决的性能问题，这是由于增加的抽象而导致的连接式贪婪加载查询构造系统。每次查询使用临时[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象进行列查找开销较大，现已更换为使用缓存方法，利用一小组在连接式贪婪加载调用之间重复使用的[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象。还对涉及贪婪连接路径构造的某些机制进行了优化。最坏情况下的连接式加载场景的端到端查询构造+单行提取测试的调用次数与1.1.5相比减少了约60%，与0.8.6相比减少了42%。
- en: 'References: [#3915](https://www.sqlalchemy.org/trac/ticket/3915)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3915](https://www.sqlalchemy.org/trac/ticket/3915)
- en: '**[orm] [bug]**'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a major inefficiency in the “eager_defaults” feature whereby an unnecessary
    SELECT would be emitted for column values where the ORM had explicitly inserted
    NULL, corresponding to attributes that were unset on the object but did not have
    any server default specified, as well as expired attributes on update that nevertheless
    had no server onupdate set up. As these columns are not part of the RETURNING
    that eager_defaults tries to use, they should not be post-SELECTed either.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“eager_defaults”功能中的一个主要低效性，即当ORM明确插入NULL时，会为列值发出不必要的SELECT，对应于对象上未设置但没有指定任何服务器默认值的属性，以及在更新时过期的属性，尽管没有设置服务器onupdate。由于这些列不是eager_defaults尝试使用的RETURNING的一部分，因此也不应该被后置SELECT。
- en: 'References: [#3909](https://www.sqlalchemy.org/trac/ticket/3909)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3909](https://www.sqlalchemy.org/trac/ticket/3909)
- en: '**[orm] [bug]**'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed two closely related bugs involving the mapper eager_defaults flag in conjunction
    with single-table inheritance; one where the eager defaults logic would inadvertently
    try to access a column that’s part of the mapper’s “exclude_properties” list (used
    by Declarative with single table inheritance) during the eager defaults fetch,
    and the other where the full load of the row in order to fetch the defaults would
    fail to use the correct inheriting mapper.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个与映射器eager_defaults标志密切相关的错误，与单表继承结合使用；一个是eager defaults逻辑会在eager defaults获取期间无意中尝试访问映射器的“exclude_properties”列表中的列（由具有单表继承的Declarative使用），另一个是为了获取默认值而对行进行完整加载时，会失败地使用不正确的继承映射器。
- en: 'References: [#3908](https://www.sqlalchemy.org/trac/ticket/3908)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3908](https://www.sqlalchemy.org/trac/ticket/3908)
- en: '**[orm] [bug]**'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug first introduced in 0.9.7 as a result of [#3106](https://www.sqlalchemy.org/trac/ticket/3106)
    which would cause an incorrect query in some forms of multi-level subqueryload
    against aliased entities, with an unnecessary extra FROM entity in the innermost
    subquery.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.9.7中首次引入的错误，由于[#3106](https://www.sqlalchemy.org/trac/ticket/3106)导致某些形式的多级子查询加载对别名实体产生错误查询，在最内层子查询中存在一个不必要的额外FROM实体。
- en: 'References: [#3893](https://www.sqlalchemy.org/trac/ticket/3893)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3893](https://www.sqlalchemy.org/trac/ticket/3893)
- en: orm declarative
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where the “automatic exclude” feature of declarative that ensures
    a column local to a single table inheritance subclass does not appear as an attribute
    on other derivations of the base would not take effect for multiple levels of
    subclassing from the base.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即declarative的“自动排除”功能确保单个表继承子类的列不会出现在基类的其他派生类属性中，对于从基类多级子类化不会生效。
- en: 'References: [#3895](https://www.sqlalchemy.org/trac/ticket/3895)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3895](https://www.sqlalchemy.org/trac/ticket/3895)
- en: sql
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the [`DDLEvents.column_reflect()`](../core/events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event would not allow a non-textual
    expression to be passed as the value of the “default” for the new column, such
    as a [`FetchedValue`](../core/defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    object to indicate a generic triggered default or a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct. Clarified the documentation in this
    regard as well.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即[`DDLEvents.column_reflect()`](../core/events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")事件不允许将非文本表达式作为新列的“default”值传递，例如[`FetchedValue`](../core/defaults.html#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")对象表示通用触发默认值或[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造。同时在文档中澄清了这一点。
- en: 'References: [#3905](https://www.sqlalchemy.org/trac/ticket/3905)'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3905](https://www.sqlalchemy.org/trac/ticket/3905)
- en: postgresql
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added regular expressions for the “IMPORT FOREIGN SCHEMA”, “REFRESH MATERIALIZED
    VIEW” PostgreSQL statements so that they autocommit when invoked via a connection
    or engine without an explicit transaction. Pull requests courtesy Frazer McLean
    and Paweł Stiasny.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为“IMPORT FOREIGN SCHEMA”、“REFRESH MATERIALIZED VIEW” PostgreSQL语句添加了正则表达式，以便在通过连接或引擎调用时自动提交，而不需要显式事务。感谢Frazer
    McLean和Paweł Stiasny的拉取请求。
- en: 'References: [#3804](https://www.sqlalchemy.org/trac/ticket/3804)'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3804](https://www.sqlalchemy.org/trac/ticket/3804)
- en: '**[postgresql] [bug]**'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") where the “whereclause” and
    “using” parameters would not be copied during an operation like [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")中的bug，其中“whereclause”和“using”参数在像[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")这样的操作期间不会被复制。
- en: 'References: [#3900](https://www.sqlalchemy.org/trac/ticket/3900)'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3900](https://www.sqlalchemy.org/trac/ticket/3900)
- en: mysql
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new MySQL 8.0 reserved words to the MySQL dialect for proper quoting.
    Pull request courtesy Hanno Schlichting.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了正确引用，将新的MySQL 8.0保留字添加到MySQL方言中。感谢Hanno Schlichting的拉取请求。
- en: mssql
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a version check to the “get_isolation_level” feature, which is invoked
    upon first connect, so that it skips for SQL Server version 2000, as the necessary
    system view is not available prior to SQL Server 2005.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“get_isolation_level”功能中添加了版本检查，该功能在首次连接时调用，因此对于SQL Server版本2000，它会跳过，因为在SQL
    Server 2005之前不可用。
- en: 'References: [#3898](https://www.sqlalchemy.org/trac/ticket/3898)'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3898](https://www.sqlalchemy.org/trac/ticket/3898)
- en: misc
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[feature] [ext]**'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added `Result.scalar()` and `Result.count()` to the “baked” query system.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`Result.scalar()`和`Result.count()`到“baked”查询系统。
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[bug] [ext]**'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in new [`sqlalchemy.ext.indexable`](../orm/extensions/indexable.html#module-sqlalchemy.ext.indexable
    "sqlalchemy.ext.indexable") extension where setting of a property that itself
    refers to another property would fail.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`sqlalchemy.ext.indexable`](../orm/extensions/indexable.html#module-sqlalchemy.ext.indexable
    "sqlalchemy.ext.indexable")扩展中的bug，其中设置一个属性，该属性本身引用另一个属性会失败。
- en: 'References: [#3901](https://www.sqlalchemy.org/trac/ticket/3901)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3901](https://www.sqlalchemy.org/trac/ticket/3901)
- en: 1.1.5
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.5
- en: 'Released: January 17, 2017'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年1月17日
- en: orm
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving joined eager loading against multiple entities when polymorphic
    inheritance is also in use which would throw “‘NoneType’ object has no attribute
    ‘isa’”. The issue was introduced by the fix for [#3611](https://www.sqlalchemy.org/trac/ticket/3611).
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多个实体上使用连接急加载时，当也使用多态继承时会抛出“'NoneType'对象没有'isa'属性”的错误。这个问题是由于修复[#3611](https://www.sqlalchemy.org/trac/ticket/3611)引入的。
- en: 'This change is also **backported** to: 1.0.17'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.17
- en: 'References: [#3884](https://www.sqlalchemy.org/trac/ticket/3884)'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3884](https://www.sqlalchemy.org/trac/ticket/3884)
- en: '**[orm] [bug]**'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug in subquery loading where an object encountered as an “existing” row,
    e.g. already loaded from a different path in the same query, would not invoke
    subquery loaders for unloaded attributes that specified this loading. This issue
    is in the same area as that of [#3431](https://www.sqlalchemy.org/trac/ticket/3431),
    [#3811](https://www.sqlalchemy.org/trac/ticket/3811) which involved similar issues
    with joined loading.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询加载中的错误，其中作为“现有”行遇到的对象，例如在同一查询中从不同路径加载的对象，不会调用指定此加载的未加载属性的子查询加载程序。这个问题与[#3431](https://www.sqlalchemy.org/trac/ticket/3431)、[#3811](https://www.sqlalchemy.org/trac/ticket/3811)中涉及的与连接加载类似的问题在同一领域。
- en: 'References: [#3854](https://www.sqlalchemy.org/trac/ticket/3854)'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3854](https://www.sqlalchemy.org/trac/ticket/3854)
- en: '**[orm] [bug]**'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: The [`Session.no_autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager now ensures that the autoflush
    flag is reset within a “finally” block, so that if an exception is raised within
    the block, the state still resets appropriately. Pull request courtesy Emin Arakelian.
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.no_autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush")上下文管理器现在确保在“finally”块中重置autoflush标志，以便如果在块内引发异常，则状态仍然适当地重置。感谢Emin
    Arakelian的拉取请求。'
- en: '**[orm] [bug]**'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where the single-table inheritance query criteria would not be inserted
    into the query in the case that the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") construct were used as the selection criteria.
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承查询条件未插入查询中的错误，当[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")构造用作选择条件时。
- en: 'References: [#3874](https://www.sqlalchemy.org/trac/ticket/3874)'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3874](https://www.sqlalchemy.org/trac/ticket/3874)
- en: '**[orm] [bug]**'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug related to [#3177](https://www.sqlalchemy.org/trac/ticket/3177), where
    a UNION or other set operation emitted by a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") would apply “single-inheritance” criteria to the outside
    of the union (also referencing the wrong selectable), even though this criteria
    is now expected to be already present on the inside subqueries. The single-inheritance
    criteria is now omitted once union() or another set operation is called against
    [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    in the same way as `Query.from_self()`.
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[#3177](https://www.sqlalchemy.org/trac/ticket/3177)相关的错误，即[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")发出的UNION或其他集合操作会将“单继承”条件应用于联合的外部（还引用了错误的可选择项），即使这些条件现在应该已经存在于内部子查询中。一旦对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")调用union()或另一个集合操作，单继承条件现在会被省略，就像`Query.from_self()`一样。
- en: 'References: [#3856](https://www.sqlalchemy.org/trac/ticket/3856)'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3856](https://www.sqlalchemy.org/trac/ticket/3856)
- en: examples
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed two issues with the versioned_history example, one is that the history
    table now gets autoincrement=False to avoid 1.1’s new errors regarding composite
    primary keys with autoincrement; the other is that the sqlite_autoincrement flag
    is now used to ensure on SQLite, unique identifiers are used for the lifespan
    of a table even if some rows are deleted. Pull request courtesy Carlos García
    Montoro.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了版本历史示例中的两个问题，一个是历史表现在autoincrement=False以避免1.1版本中关于自动增量的新错误；另一个是现在使用sqlite_autoincrement标志以确保在SQLite上，即使删除了某些行，也会为表的生命周期使用唯一标识符。感谢Carlos
    García Montoro的拉取请求。
- en: 'References: [#3872](https://www.sqlalchemy.org/trac/ticket/3872)'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3872](https://www.sqlalchemy.org/trac/ticket/3872)
- en: engine
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The “extend_existing” option of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") reflection would cause indexes and constraints to be
    doubled up in the case that the parameter were used with [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") (as the automap extension does) due to tables
    being reflected both within the foreign key path as well as directly. A new de-duplicating
    set is passed through within the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") sequence to prevent double reflection in
    this way.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")反射的“extend_existing”选项会导致索引和约束在使用该参数与[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")（如automap扩展所做的）时重复，因为表既在外键路径中反射，也直接反射。在[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")序列中传递一个新的去重集合，以防止以这种方式重复反射。'
- en: 'References: [#3861](https://www.sqlalchemy.org/trac/ticket/3861)'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3861](https://www.sqlalchemy.org/trac/ticket/3861)
- en: sql
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug originally introduced in 0.9 via [#1068](https://www.sqlalchemy.org/trac/ticket/1068)
    where order_by(<some Label()>) would order by the label name based on name alone,
    that is, even if the labeled expression were not at all the same expression otherwise
    present, implicitly or explicitly, in the selectable. The logic that orders by
    label now ensures that the labeled expression is related to the one that resolves
    to that name before ordering by the label name; additionally, the name has to
    resolve to an actual label explicit in the expression elsewhere, not just a column
    name. This logic is carefully kept separate from the order by(textual name) feature
    that has a slightly different purpose.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最初在0.9版本中引入的bug，通过[#1068](https://www.sqlalchemy.org/trac/ticket/1068)，其中`order_by(<some
    Label()>)`将根据名称单独排序，即使标记的表达式与可选择中隐式或显式存在的表达式完全不同。现在，按标签排序的逻辑确保标记的表达式与解析为该名称的表达式相关联，然后再按标签名称排序；此外，名称必须在表达式中的其他位置明确解析为实际标签，而不仅仅是列名。这种逻辑与具有稍微不同目的的按文本名称排序功能明确分开。
- en: 'References: [#3882](https://www.sqlalchemy.org/trac/ticket/3882)'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3882](https://www.sqlalchemy.org/trac/ticket/3882)
- en: '**[sql] [bug]**'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 1.1 regression where `import *` would not work for sqlalchemy.sql.expression,
    due to mis-spelled `any_` and `all_` functions.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.1版本中`import *`无法在sqlalchemy.sql.expression中工作的回归，因为`any_`和`all_`函数拼写错误。
- en: 'References: [#3878](https://www.sqlalchemy.org/trac/ticket/3878)'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3878](https://www.sqlalchemy.org/trac/ticket/3878)
- en: '**[sql] [bug]**'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The engine URL embedded in the exception for “could not reflect” in [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") now conceals the password; also the `__repr__`
    for `TLEngine` now acts like that of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), concealing the URL password. Pull request courtesy
    Valery Yundin.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")中“无法反射”异常中嵌入的引擎URL现在隐藏了密码；此外，`TLEngine`的`__repr__`现在的行为类似于[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，隐藏了URL密码。感谢Valery Yundin的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    where the “right hand coercion” logic, inherited from [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"), would coerce the right-hand side into the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") itself, rather than what the default type for the
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    would do. In the case of [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"), we want the type to act mostly like the base type
    so the default logic of [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") is now overridden to fall back to the underlying
    wrapped type’s logic. Is mostly relevant for JSON at the moment.
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    中的问题，其中“右手边强制转换”逻辑继承自 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")，会将右侧强制转换为 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 本身，而不是 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 的默认类型。在 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 的情况下，我们希望类型大部分像基本类型一样工作，因此现在覆盖了 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 的默认逻辑，以回退到基础包装类型的逻辑。目前主要与 JSON 有关。
- en: 'References: [#3859](https://www.sqlalchemy.org/trac/ticket/3859)'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3859](https://www.sqlalchemy.org/trac/ticket/3859)
- en: '**[sql] [bg]**'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bg]**'
- en: Fixed bug where literal_binds compiler flag was not honored by the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct for the “multiple values” feature;
    the subsequent values are now rendered as literals.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当 `literal_binds` 编译器标志未被 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造的“多值”功能所尊重时的 bug；随后的值现在被渲染为字面值。
- en: 'References: [#3880](https://www.sqlalchemy.org/trac/ticket/3880)'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3880](https://www.sqlalchemy.org/trac/ticket/3880)
- en: postgresql
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in new “ON CONFLICT DO UPDATE” feature where the “set” values for
    the UPDATE clause would not be subject to type-level processing, as normally takes
    effect to handle both user-defined type level conversions as well as dialect-required
    conversions, such as those required for JSON datatypes. Additionally, clarified
    that the keys in the `set_` dictionary should match the “key” of the column, if
    distinct from the column name. A warning is emitted for remaining column names
    that don’t match column keys; for compatibility reasons, these are emitted as
    they were previously.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“ON CONFLICT DO UPDATE”功能中的 bug，其中 UPDATE 子句的“set”值不会受到类型级别的处理，通常会生效以处理用户定义的类型级别转换以及方言所需的转换，例如
    JSON 数据类型所需的转换。此外，澄清了 `set_` 字典中的键应与列的“键”匹配，如果与列名不同。对于不匹配列键的剩余列名发出警告；出于兼容性原因，这些警告与以前一样发出。
- en: 'References: [#3888](https://www.sqlalchemy.org/trac/ticket/3888)'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3888](https://www.sqlalchemy.org/trac/ticket/3888)
- en: '**[postgresql] [bug]**'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`TIME`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIME
    "sqlalchemy.dialects.postgresql.TIME") and [`TIMESTAMP`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") datatypes now support a setting of
    zero for “precision”; previously a zero would be ignored. Pull request courtesy
    Ionuț Ciocîrlan.
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 [`TIME`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIME
    "sqlalchemy.dialects.postgresql.TIME") 和 [`TIMESTAMP`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") 数据类型支持“精度”设置为零；之前零值会被忽略。感谢 Ionuț Ciocîrlan
    的拉取请求。
- en: mysql
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added a new parameter `mysql_prefix` supported by the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct, allows specification of MySQL-specific prefixes
    such as “FULLTEXT”. Pull request courtesy Joseph Schorr.
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的参数 `mysql_prefix`，由 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造支持，允许指定 MySQL 特定的前缀，如 “FULLTEXT”。感谢 Joseph Schorr
    的拉取请求。
- en: '**[mysql] [bug]**'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect now will not warn when a reflected column has a “COMMENT”
    keyword on it, but note however the comment is not yet reflected; this is on the
    roadmap for a future release. Pull request courtesy Lele Long.
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在不会在反射的列上有“COMMENT”关键字时发出警告，但请注意评论尚未反射；这在未来的发布计划中。感谢 Lele Long 的拉取请求。
- en: 'References: [#3867](https://www.sqlalchemy.org/trac/ticket/3867)'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3867](https://www.sqlalchemy.org/trac/ticket/3867)
- en: mssql
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server dialects would attempt to select the last row identity
    for an INSERT from SELECT, failing in the case when the SELECT has no rows. For
    such a statement, the inline flag is set to True indicating no last primary key
    should be fetched.
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言尝试为 INSERT from SELECT 选择最后一行标识的 bug，在 SELECT 没有行的情况下会失败。对于这样的语句，内联标志设置为
    True，表示不应获取最后一个主键。
- en: 'References: [#3876](https://www.sqlalchemy.org/trac/ticket/3876)'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3876](https://www.sqlalchemy.org/trac/ticket/3876)
- en: oracle
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [postgresql]**'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [postgresql]**'
- en: Fixed bug where an INSERT from SELECT where the source table contains an autoincrementing
    Sequence would fail to compile correctly.
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在源表包含自动递增序列的情况下，从 SELECT 进行插入时编译失败的 bug。
- en: 'References: [#3877](https://www.sqlalchemy.org/trac/ticket/3877)'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3877](https://www.sqlalchemy.org/trac/ticket/3877)
- en: '**[oracle] [bug]**'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where the “COMPRESSION” keyword was used in the ALL_TABLES query on
    Oracle 9.2; even though Oracle docs state table compression was introduced in
    9i, the actual column is not present until 10.1.
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Oracle 9.2 上 ALL_TABLES 查询中使用“COMPRESSION”关键字的 bug；尽管 Oracle 文档说明表压缩是在
    9i 中引入的，但实际列直到 10.1 才存在。
- en: 'References: [#3875](https://www.sqlalchemy.org/trac/ticket/3875)'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3875](https://www.sqlalchemy.org/trac/ticket/3875)
- en: misc
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [py3k]**'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed Python 3.6 DeprecationWarnings related to escaped strings without the
    ‘r’ modifier, and added test coverage for Python 3.6.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与没有 ‘r’ 修饰符的转义字符串相关的 Python 3.6 DeprecationWarnings，并为 Python 3.6 添加了测试覆盖。
- en: 'This change is also **backported** to: 1.0.17'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 至：1.0.17
- en: 'References: [#3886](https://www.sqlalchemy.org/trac/ticket/3886)'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3886](https://www.sqlalchemy.org/trac/ticket/3886)
- en: '**[bug] [firebird]**'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Ported the fix for Oracle quoted-lowercase names to Firebird, so that a table
    name that is quoted as lower case can be reflected properly including when the
    table name comes from the get_table_names() inspection function.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将对 Oracle 引号小写名称的修复移植到 Firebird，以便正确反映作为小写的表名，即使表名来自 get_table_names() 检查函数。
- en: 'References: [#3548](https://www.sqlalchemy.org/trac/ticket/3548)'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3548](https://www.sqlalchemy.org/trac/ticket/3548)
- en: 1.1.4
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.4
- en: 'Released: November 15, 2016'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016 年 11 月 15 日
- en: orm
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where an alternate-named primary
    key attribute would not track properly into the UPDATE statement.
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") 中的一个 bug，即备用命名的主键属性在更新语句中无法正确跟踪。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 至：1.0.16
- en: 'References: [#3849](https://www.sqlalchemy.org/trac/ticket/3849)'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3849](https://www.sqlalchemy.org/trac/ticket/3849)
- en: '**[orm] [bug]**'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in `Session.bulk_save()` where an UPDATE would not function correctly
    in conjunction with a mapping that implements a version id counter.
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `Session.bulk_save()` 中的一个 bug，在实现版本 id 计数器的映射与 UPDATE 结合使用时无法正确运行。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 至：1.0.16
- en: 'References: [#3781](https://www.sqlalchemy.org/trac/ticket/3781)'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3781](https://www.sqlalchemy.org/trac/ticket/3781)
- en: '**[orm] [bug]**'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs"), [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") and other derived attributes would
    fail to refresh when mapper properties or other ORM constructs were added to the
    mapper/class after these accessors were first called.
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当首次调用 mapper 属性或其他 ORM 构造添加到映射器/类之后，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")、[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 和其他派生属性将无法刷新的 bug。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 至：1.0.16
- en: 'References: [#3778](https://www.sqlalchemy.org/trac/ticket/3778)'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3778](https://www.sqlalchemy.org/trac/ticket/3778)
- en: '**[orm] [bug]**'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in collections due to [#3457](https://www.sqlalchemy.org/trac/ticket/3457)
    whereby deserialize during pickle or deepcopy would fail to establish all attributes
    of an ORM collection, causing further mutation operations to fail.
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3457](https://www.sqlalchemy.org/trac/ticket/3457)中的反序列化在pickle或deepcopy期间失败，导致ORM集合的所有属性未能建立，进而导致进一步的变异操作失败，因此修复了集合中的回归。
- en: 'References: [#3852](https://www.sqlalchemy.org/trac/ticket/3852)'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3852](https://www.sqlalchemy.org/trac/ticket/3852)
- en: '**[orm] [bug]**'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed long-standing bug where the “noload” relationship loading strategy would
    cause backrefs and/or back_populates options to be ignored.
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长期存在的bug，即“noload”关系加载策略会导致忽略backrefs和/或back_populates选项。
- en: 'References: [#3845](https://www.sqlalchemy.org/trac/ticket/3845)'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3845](https://www.sqlalchemy.org/trac/ticket/3845)
- en: engine
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Removed long-broken “default_schema_name()” method from [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). This method was left over from a very old version
    and was non-working (e.g. would raise). Pull request courtesy Benjamin Dopplinger.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")中删除了长期存在的“default_schema_name()”方法。这个方法是从一个非常旧的版本遗留下来的，是不起作用的（例如会引发异常）。感谢Benjamin
    Dopplinger的拉取请求。
- en: sql
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where newly added warning for primary key on insert w/o autoincrement
    setting (see [#3216](https://www.sqlalchemy.org/trac/ticket/3216)) would fail
    to emit correctly when invoked upon a lower-case [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") construct.
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在没有设置自动增量的情况下插入主键时，新添加的警告会失败地发出，详情请见[#3216](https://www.sqlalchemy.org/trac/ticket/3216)。
- en: 'References: [#3842](https://www.sqlalchemy.org/trac/ticket/3842)'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3842](https://www.sqlalchemy.org/trac/ticket/3842)
- en: postgresql
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by the fix in [#3807](https://www.sqlalchemy.org/trac/ticket/3807)
    (version 1.1.0) where we ensured that the tablename was qualified in the WHERE
    clause of the DO UPDATE portion of PostgreSQL’s ON CONFLICT, however you *cannot*
    put the table name in the WHERE clause in the actual ON CONFLICT itself. This
    was an incorrect assumption, so that portion of the change in [#3807](https://www.sqlalchemy.org/trac/ticket/3807)
    is rolled back.
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于在[#3807](https://www.sqlalchemy.org/trac/ticket/3807)中修复的问题（版本1.1.0），我们确保在PostgreSQL的ON
    CONFLICT的DO UPDATE部分的WHERE子句中限定了表名，但是实际上*不能*在ON CONFLICT本身的WHERE子句中放置表名。这是一个错误的假设，因此将回滚在[#3807](https://www.sqlalchemy.org/trac/ticket/3807)中的更改部分。
- en: 'References: [#3807](https://www.sqlalchemy.org/trac/ticket/3807), [#3846](https://www.sqlalchemy.org/trac/ticket/3846)'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3807](https://www.sqlalchemy.org/trac/ticket/3807)，[#3846](https://www.sqlalchemy.org/trac/ticket/3846)
- en: mysql
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for server side cursors to the mysqlclient and pymysql dialects.
    This feature is available via the [`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") flag as well as the `server_side_cursors=True`
    dialect argument in the same way that it has been for psycopg2 on PostgreSQL.
    Pull request courtesy Roman Podoliaka.
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为mysqlclient和pymysql方言添加了对服务器端游标的支持。此功能可通过[`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")标志以及相同方式中的`server_side_cursors=True`方言参数来使用，就像在PostgreSQL上的psycopg2一样。感谢Roman
    Podoliaka的拉��请求。
- en: '**[mysql] [bug]**'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL’s native ENUM type supports any non-valid value being sent, and in response
    will return a blank string. A hardcoded rule to check for “is returning the blank
    string” has been added to the MySQL implementation for ENUM so that this blank
    string is returned to the application rather than being rejected as a non-valid
    value. Note that if your MySQL enum is linking values to objects, you still get
    the blank string back.
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL的原生ENUM类型支持发送任何非有效值，并且会返回一个空字符串。为了检查“是否返回空字符串”，在ENUM的MySQL实现中添加了一个硬编码规则，以便将此空字符串返回给应用程序，而不是将其拒绝为非有效值。请注意，如果您的MySQL枚举正在将值链接到对象，您仍将收到空字符串。
- en: 'References: [#3841](https://www.sqlalchemy.org/trac/ticket/3841)'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3841](https://www.sqlalchemy.org/trac/ticket/3841)
- en: sqlite
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added quotes to the PRAGMA directives in the pysqlcipher dialect to support
    additional cipher arguments appropriately. Pull request courtesy Kevin Jurczyk.
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在pysqlcipher方言中为PRAGMA指令添加引号，以适当支持附加的密码参数。感谢Kevin Jurczyk的拉取请求。
- en: '**[sqlite] [bug] [py3k]**'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [py3k]**'
- en: Added an optional import for the pysqlcipher3 DBAPI when using the pysqlcipher
    dialect. This package will attempt to be imported if the Python-2 only pysqlcipher
    DBAPI is non-present. Pull request courtesy Kevin Jurczyk.
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pysqlcipher方言时，添加了对pysqlcipher3 DBAPI的可选导入。如果Python-2专用的pysqlcipher DBAPI不存在，则此软件包将尝试导入。感谢Kevin
    Jurczyk的拉取请求。
- en: mssql
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in pyodbc dialect (as well as in the mostly non-working adodbapi dialect)
    whereby a semicolon present in the password or username fields could be interpreted
    as a separator for another token; the values are now quoted when semicolons are
    present.
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc方言中的错误（以及大部分不起作用的adodbapi方言），其中密码或用户名字段中存在分号时可能被解释为另一个标记的分隔符；现在在存在分号时对值进行引用。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3762](https://www.sqlalchemy.org/trac/ticket/3762)'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3762](https://www.sqlalchemy.org/trac/ticket/3762)
- en: 1.1.3
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.3
- en: 'Released: October 27, 2016'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年10月27日
- en: orm
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#2677](https://www.sqlalchemy.org/trac/ticket/2677)
    whereby calling [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") on an object that was already flushed as deleted
    in that session would fail to set up the object in the identity map (or reject
    the object), causing flush errors as the object were in a state not accommodated
    by the unit of work. The pre-1.1 behavior in this case has been restored, which
    is that the object is put back into the identity map so that the DELETE statement
    will be attempted again, which emits a warning that the number of expected rows
    was not matched (unless the row were restored outside of the session).
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2677](https://www.sqlalchemy.org/trac/ticket/2677)引起的回归问题，即在对已在该会话中标记为已删除的对象调用[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")时，会导致无法设置对象在标识映射中（或拒绝对象），从而导致刷新错误，因为对象处于工作单元不适应的状态。在这种情况下，恢复了1.1版本之前的行为，即将对象放回标识映射中，以便再次尝试DELETE语句，这会发出警告，指出未匹配预期行数（除非在会话外恢复了行）。
- en: 'References: [#3839](https://www.sqlalchemy.org/trac/ticket/3839)'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3839](https://www.sqlalchemy.org/trac/ticket/3839)
- en: '**[orm] [bug]**'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where some [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") methods like [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and others would fail if the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") were against a series of mapped columns, rather than the
    mapped entity as a whole.
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")方法（如[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")等）在针对一系列映射列而不是整个映射实体时会失败的回归问题。
- en: 'References: [#3836](https://www.sqlalchemy.org/trac/ticket/3836)'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3836](https://www.sqlalchemy.org/trac/ticket/3836)
- en: sql
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug involving new value translation and validation feature in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") whereby using the enum object in a string concatenation
    would maintain the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    type as the type of the expression overall, producing missing lookups. A string
    concatenation against an [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")-typed column now uses [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") as the datatype of the expression itself.
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")中使用新值翻译和验证功能时的错误，其中在字符串连接中使用枚举对象会将整个表达式的类型保持为[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型，导致查找缺失。现在，针对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型的列进行字符串连接将使用[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")作为表达式本身的数据类型。
- en: 'References: [#3833](https://www.sqlalchemy.org/trac/ticket/3833)'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3833](https://www.sqlalchemy.org/trac/ticket/3833)
- en: '**[sql] [bug]**'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression which occurred as a side effect of [#2919](https://www.sqlalchemy.org/trac/ticket/2919),
    which in the less typical case of a user-defined [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that was also itself an instance of [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") (rather than the implementation being such) would
    cause the column attachment events to be skipped for the type itself.
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，该问题是[#2919](https://www.sqlalchemy.org/trac/ticket/2919)的副作用，对于一个不太典型的情况，即用户定义的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")同时也是[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")的实例（而不是实现是这样的），会导致列附加事件被跳过。
- en: 'References: [#3832](https://www.sqlalchemy.org/trac/ticket/3832)'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3832](https://www.sqlalchemy.org/trac/ticket/3832)
- en: postgresql
  id: totrans-444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: PostgreSQL table reflection will ensure that the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag is set to False when reflecting a primary key
    column that is not of an [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") datatype, even if the default is related to an integer-generating
    sequence. This can happen if a column is created as SERIAL and the datatype is
    changed. The autoincrement flag can only be True if the datatype is of integer
    affinity in the 1.1 series.
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL表反射将确保在反射不是[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")数据类型的主键列时，[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")标志设置为False，即使默认值与生成整数的序列相关。如果列被创建为SERIAL并且数据类型被更改，则autoincrement标志只能在1.1系列中的整数亲和性数据类型为True时才能为True。
- en: 'References: [#3835](https://www.sqlalchemy.org/trac/ticket/3835)'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3835](https://www.sqlalchemy.org/trac/ticket/3835)
- en: 1.1.2
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.2
- en: 'Released: October 17, 2016'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年10月17日
- en: orm
  id: totrans-450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving the rule to disable a joined collection eager loader on
    the other side of a many-to-one lazy loader, first added in [#1495](https://www.sqlalchemy.org/trac/ticket/1495),
    where the rule would fail if the parent object had some other lazyloader-bound
    query options associated with it.
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，涉及到在一个多对一懒加载器的另一侧禁用连接集合急加载器的规则，首次添加在[#1495](https://www.sqlalchemy.org/trac/ticket/1495)中，如果父对象有一些其他与其关联的懒加载器绑定的查询选项，该规则将失败。
- en: 'References: [#3824](https://www.sqlalchemy.org/trac/ticket/3824)'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3824](https://www.sqlalchemy.org/trac/ticket/3824)
- en: '**[orm] [bug]**'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed self-referential entity, deferred column loading issue in a similar style
    as that of [#3431](https://www.sqlalchemy.org/trac/ticket/3431), [#3811](https://www.sqlalchemy.org/trac/ticket/3811)
    where an entity is present in multiple positions within the row due to self-referential
    eager loading; when the deferred loader only applies to one of the paths, the
    “present” column loader will now override the deferred non- load for that entity
    regardless of row ordering.
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以类似于[#3431](https://www.sqlalchemy.org/trac/ticket/3431)、[#3811](https://www.sqlalchemy.org/trac/ticket/3811)的方式修复了自引用实体、延迟列加载问题，其中一个实体由于自引用的急加载而在行中出现在多个位置；当延迟加载器仅适用于其中一个路径时，“存在”列加载器现在将覆盖该实体的延迟非加载，而不考虑行顺序。
- en: 'References: [#3822](https://www.sqlalchemy.org/trac/ticket/3822)'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3822](https://www.sqlalchemy.org/trac/ticket/3822)
- en: sql
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression caused by a newly added function that performs the “wrap
    callable” function of sql [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") objects, an attribute error raised for `__module__`
    when the default callable was a `functools.partial` or other object that doesn’t
    have a `__module__` attribute.
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于新增函数引起的回归问题，该函数执行sql [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator")对象的“包装可调用”函数时，当默认可调用是`functools.partial`或其他没有`__module__`属性的对象时，会引发`__module__`属性错误。
- en: 'References: [#3823](https://www.sqlalchemy.org/trac/ticket/3823)'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3823](https://www.sqlalchemy.org/trac/ticket/3823)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed regression in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type where event handlers were not transferred in the
    case of the type object being copied, due to a conflicting copy() method added
    as part of [#3250](https://www.sqlalchemy.org/trac/ticket/3250). This copy occurs
    normally in situations when the column is copied, such as in tometadata() or when
    using declarative mixins with columns. The event handler not being present would
    impact the constraint being created for a non-native enumerated type, but more
    critically the ENUM object on the PostgreSQL backend.
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型中的回归，其中事件处理程序在复制类型对象的情况下未被传递，这是由于[#3250](https://www.sqlalchemy.org/trac/ticket/3250)中添加的冲突的copy()方法。在复制列时，例如在tometadata()中或在使用具有列的声明性mixin时，通常会发生此复制。事件处理程序的缺失会影响为非本地枚举类型创建的约束，但更为关键的是PostgreSQL后端的ENUM对象。
- en: 'References: [#3827](https://www.sqlalchemy.org/trac/ticket/3827)'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3827](https://www.sqlalchemy.org/trac/ticket/3827)
- en: postgresql
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [sql]**'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [sql]**'
- en: Changed the naming convention used when generating bound parameters for a multi-VALUES
    insert statement, so that the numbered parameter names don’t conflict with the
    anonymized parameters of a WHERE clause, as is now common in a PostgreSQL ON CONFLICT
    construct.
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了生成多VALUES插入语句的绑定参数时使用的命名约定，以使编号参数名称不与现在在PostgreSQL ON CONFLICT构造中常见的WHERE子句的匿名参数发生冲突。
- en: 'References: [#3828](https://www.sqlalchemy.org/trac/ticket/3828)'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3828](https://www.sqlalchemy.org/trac/ticket/3828)
- en: 1.1.1
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.1
- en: 'Released: October 7, 2016'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年10月7日
- en: mssql
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The “SELECT SERVERPROPERTY” query added in [#3810](https://www.sqlalchemy.org/trac/ticket/3810)
    and [#3814](https://www.sqlalchemy.org/trac/ticket/3814) is failing on unknown
    combinations of Pyodbc and SQL Server. While failure of this function was anticipated,
    the exception catch was not broad enough so it now catches all forms of pyodbc.Error.
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[#3810](https://www.sqlalchemy.org/trac/ticket/3810)和[#3814](https://www.sqlalchemy.org/trac/ticket/3814)中添加的“SELECT
    SERVERPROPERTY”查询在未知的Pyodbc和SQL Server组合上失败。虽然预料到了此功能的失败，但异常捕获不够广泛，因此现在捕获所有形式的pyodbc.Error。
- en: 'References: [#3820](https://www.sqlalchemy.org/trac/ticket/3820)'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3820](https://www.sqlalchemy.org/trac/ticket/3820)
- en: misc
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [core]**'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [core]**'
- en: Changed the CompileError raised when various primary key missing situations
    are detected to a warning. The statement is again passed to the database where
    it will fail and the DBAPI error (usually IntegrityError) raises as usual.
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到各种缺失主键情��时，将引发的CompileError更改为警告。语句再次传递到数据库，其中将失败并像往常一样引发DBAPI错误（通常是IntegrityError）。
- en: See also
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为复合主键列隐式启用.autoincrement指令](migration_11.html#change-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: 1.1.0
  id: totrans-480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.0
- en: 'Released: October 5, 2016'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年10月5日
- en: orm
  id: totrans-482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Enhanced the new “raise” lazy loader strategy to also include a “raise_on_sql”
    variant, available both via [`relationship.lazy`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship") as well as [`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload"). This variant only raises if the lazy load would actually
    emit SQL, vs. raising if the lazy loader mechanism is invoked at all.
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了新的“raise”延迟加载策略，还包括一个“raise_on_sql”变体，可通过[`relationship.lazy`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship")和[`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload")使用。此变体仅在延迟加载实际发出SQL时才引发异常，而不是在调用延迟加载机制时引发异常。
- en: 'References: [#3812](https://www.sqlalchemy.org/trac/ticket/3812)'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3812](https://www.sqlalchemy.org/trac/ticket/3812)
- en: '**[orm] [feature]**'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") method now resets the group by collection if
    an argument of `None` is passed, in the same way that [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") has worked for a long time. Pull request courtesy
    Iuri Diniz.
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了`None`参数，[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")方法现在会重置分组集合，就像[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")长期以来的工作方式一样。感谢Iuri Diniz的拉取请求。
- en: '**[orm] [change]**'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Passing False to [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") in order to cancel all order by’s is deprecated;
    there is no longer any difference between calling this method with False or with
    None.
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将False传递给[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")以取消所有排序已被弃用；现在调用此方法时传递False或None之间不再有任何区别。
- en: '**[orm] [bug]**'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where joined eager loading would fail for a polymorphically- loaded
    mapper, where the polymorphic_on was set to an un-mapped expression such as a
    CASE expression.
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接的急切加载对于多态加载的映射器会失败的错误，其中多态_on设置为未映射表达式，如CASE表达式。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.0.16
- en: 'References: [#3800](https://www.sqlalchemy.org/trac/ticket/3800)'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3800](https://www.sqlalchemy.org/trac/ticket/3800)
- en: '**[orm] [bug]**'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ArgumentError raised for an invalid bind sent to a Session
    via [`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper"), [`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table"), or the constructor would fail to be correctly
    raised.
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当通过[`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")、[`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")或构造函数发送给Session的无效绑定时引发的ArgumentError无法正确引发的错误。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.0.16
- en: 'References: [#3798](https://www.sqlalchemy.org/trac/ticket/3798)'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3798](https://www.sqlalchemy.org/trac/ticket/3798)
- en: '**[orm] [bug]**'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a subqueryload of an “of_type()” object
    linked to a second subqueryload of a plain mapped class, or a longer chain of
    several “of_type()” attributes, would fail to link the joins correctly.
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急切加载中的错误，其中“of_type()”对象的子查询加载链接到第二个子查询加载的普通映射类，或者几个“of_type()”属性的更长链，将无法正确链接连接。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.0.15
- en: 'References: [#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)
- en: '**[orm] [bug]**'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ORM attributes can now be assigned any object that is has a `__clause_element__()`
    attribute, which will result in inline SQL the way any [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") class does. This covers other mapped
    attributes not otherwise transformed by further expression constructs.
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将ORM属性分配给具有`__clause_element__()`属性的任何对象，这将导致内联SQL，就像任何[`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")类一样。这涵盖了其他映射属性，否则不会被进一步表达式构造转换。
- en: 'References: [#3802](https://www.sqlalchemy.org/trac/ticket/3802)'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3802](https://www.sqlalchemy.org/trac/ticket/3802)
- en: '**[orm] [bug]**'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an adjustment to the bug fix first introduced in [ticket:3431] that involves
    an object appearing in multiple contexts in a single result set, such that an
    eager loader that would set the related object value to be None will still fire
    off, thus satisfying the load of that attribute. Previously, the adjustment only
    honored a non-None value arriving for an eagerly loaded attribute in a secondary
    row.
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对首次引入的[票号：3431]中的错误修复进行了调整，涉及到单个结果集中出现在多个上下文中的对象，因此会触发将相关对象值设置为None的急切加载器，从而满足该属性的加载。先前，该调整仅在次要行中急切加载属性的非None值到达时才受到尊重。
- en: 'References: [#3811](https://www.sqlalchemy.org/trac/ticket/3811)'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3811](https://www.sqlalchemy.org/trac/ticket/3811)
- en: '**[orm] [bug]**'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new [`SessionEvents.persistent_to_deleted()`](../orm/events.html#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") event where the target object
    could be garbage collected before the event is fired off.
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`SessionEvents.persistent_to_deleted()`](../orm/events.html#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted")事件中的错误，其中目标对象可能在事件触发之前被垃圾回收。
- en: 'References: [#3808](https://www.sqlalchemy.org/trac/ticket/3808)'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3808](https://www.sqlalchemy.org/trac/ticket/3808)
- en: '**[orm] [bug]**'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The primaryjoin of a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct can now include a [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") object that includes a callable function
    to generate values. Previously, the lazy loader strategy would be incompatible
    with this use, and additionally would fail to correctly detect if the “use_get”
    criteria should be used if the primary key were involved with the bound parameter.
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造的 primaryjoin 现在可以包括一个包含可调用函数以生成值的 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 对象。以前，延迟加载策略与此用法不兼容，并且还会无法正确检测是否应该使用“use_get”条件，如果主键与绑定参数有关。'
- en: 'References: [#3767](https://www.sqlalchemy.org/trac/ticket/3767)'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3767](https://www.sqlalchemy.org/trac/ticket/3767)
- en: '**[orm] [bug]**'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An UPDATE emitted from the ORM flush process can now accommodate a SQL expression
    element for a column within the primary key of an object, if the target database
    supports RETURNING in order to provide the new value, or if the PK value is set
    “to itself” for the purposes of bumping some other trigger / onupdate on the column.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 ORM 刷新过程中发出的 UPDATE 现在可以适应对象主键中的列的 SQL 表达式元素，如果目标数据库支持 RETURNING 以提供新值，或者如果将
    PK 值设置为“自身”以用于触发其他触发器/列的 onupdate。
- en: 'References: [#3801](https://www.sqlalchemy.org/trac/ticket/3801)'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3801](https://www.sqlalchemy.org/trac/ticket/3801)
- en: '**[orm] [bug]**'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the “simple many-to-one” condition that allows lazy loading
    to use get() from identity map would fail to be invoked if the primaryjoin of
    the relationship had multiple clauses separated by AND which were not in the same
    order as that of the primary key columns being compared in each clause. This ordering
    difference occurs for a composite foreign key where the table-bound columns on
    the referencing side were not in the same order in the .c collection as the primary
    key columns on the referenced side….which in turn occurs a lot if one is using
    declarative mixins and/or declared_attr to set up columns.
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即“简单的一对多”条件允许延迟加载使用来自标识映射的 get() 失败的情况，如果关系的 primaryjoin 具有由 AND 分隔的多个子句，并且这些子句的顺序与每个子句中比较的主键列的顺序不同。这种顺序差异发生在复合外键的情况下，其中引用方的表绑定列在
    .c 集合中的顺序与被引用方的主键列不同……如果使用声明性混入和/或 declared_attr 来设置列，则会经常发生这种情况。
- en: 'References: [#3788](https://www.sqlalchemy.org/trac/ticket/3788)'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3788](https://www.sqlalchemy.org/trac/ticket/3788)
- en: '**[orm] [bug]**'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An exception is raised when two `@validates` decorators on a mapping make use
    of the same name. Only one validator of a certain name at a time is supported,
    there’s no mechanism to chain these together, as the order of the validators at
    the level of function decorator can’t be made deterministic.
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当映射上的两个 `@validates` 装饰器使用相同名称时，会引发异常。一次只支持一个特定名称的验证器，没有机制将它们链接在一起，因为在函数装饰器级别上验证器的顺序无法确定。
- en: See also
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named @validates decorators will now raise an exception](migration_11.html#change-3776)'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[具有相同名称的 @validates 装饰器现在会引发异常](migration_11.html#change-3776)'
- en: 'References: [#3776](https://www.sqlalchemy.org/trac/ticket/3776)'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3776](https://www.sqlalchemy.org/trac/ticket/3776)
- en: '**[orm] [bug]**'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Mapper errors raised during [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") now explicitly include the name of the originating
    mapper in the exception message to help in those situations where the wrapped
    exception does not itself include the source mapper. Pull request courtesy John
    Perkins.
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 过程中引发的 Mapper 错误现在在异常消息中明确包含了源映射器的名称，以帮助处理那些被包装异常本身不包含源映射器的情况。感谢
    John Perkins 的拉取请求。
- en: orm declarative
  id: totrans-527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明性
- en: '**[orm] [declarative] [change]**'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [change]**'
- en: Constructing a declarative base class that inherits from another class will
    also inherit its docstring. This means `as_declarative()` acts more like a normal
    class decorator.
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继承另一个类的声明性基类也将继承其文档字符串。这意味着 `as_declarative()` 的行为更像是一个普通的类装饰器。
- en: sql
  id: totrans-530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    where the internal method `_reset_exported()` would corrupt the state of the object.
    This method is intended for selectable objects and is called by the ORM in some
    cases; an erroneous mapper configuration would could lead the ORM to call this
    on a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中的内部方法`_reset_exported()`会破坏对象状态的错误。该方法旨在用于可选择对象，并在某些情况下被ORM调用；错误的映射配置可能导致ORM在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象上调用此方法。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.15
- en: 'References: [#3755](https://www.sqlalchemy.org/trac/ticket/3755)'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3755](https://www.sqlalchemy.org/trac/ticket/3755)
- en: '**[sql] [bug]**'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Execution options can now be propagated from within a statement at compile time
    to the outermost statement, so that if an embedded element wants to set “autocommit”
    to be True for example, it can propagate this to the enclosing statement. Currently,
    this feature is enabled for a DML-oriented CTE embedded inside of a SELECT statement,
    e.g. INSERT/UPDATE/DELETE inside of SELECT.
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在编译时从语句内部传播执行选项到最外层语句，因此，如果嵌入元素想要将“autocommit”设置为True，它可以将此传播到封闭语句。目前，此功能仅适用于嵌入在SELECT语句中的面向DML的CTE，例如在SELECT语句中的INSERT/UPDATE/DELETE。
- en: 'References: [#3805](https://www.sqlalchemy.org/trac/ticket/3805)'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3805](https://www.sqlalchemy.org/trac/ticket/3805)
- en: '**[sql] [bug]**'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A string sent as a column default via the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter is now escaped for quotes.
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数发送的作为列默认值的字符串现在已经为引号进行了转义。
- en: See also
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[String server_default now literal quoted](migration_11.html#change-3809)'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[String server_default now literal quoted](migration_11.html#change-3809)'
- en: 'References: [#3809](https://www.sqlalchemy.org/trac/ticket/3809)'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3809](https://www.sqlalchemy.org/trac/ticket/3809)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Added compiler-level flags used by PostgreSQL to place additional parenthesis
    than would normally be generated by precedence rules around operations involving
    JSON, HSTORE indexing operators as well as within their operands since it has
    been observed that PostgreSQL’s precedence rules for at least the HSTORE indexing
    operator is not consistent between 9.4 and 9.5.
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了编译器级别的标志，用于PostgreSQL在涉及JSON、HSTORE索引操作符以及它们的操作数时放置额外的括号，因为观察到PostgreSQL至少在HSTORE索引操作符的优先规则在9.4和9.5之间不一致。
- en: 'References: [#3806](https://www.sqlalchemy.org/trac/ticket/3806)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3806](https://www.sqlalchemy.org/trac/ticket/3806)
- en: '**[sql] [bug] [mysql]**'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: The `BaseException` exception class is now intercepted by the exception-handling
    routines of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), and includes handling by the `ConnectionEvents.handle_error()`
    event. The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is now **invalidated** by default in the case
    of a system level exception that is not a subclass of `Exception`, including `KeyboardInterrupt`
    and the greenlet `GreenletExit` class, to prevent further operations from occurring
    upon a database connection that is in an unknown and possibly corrupted state.
    The MySQL drivers are most targeted by this change however the change is across
    all DBAPIs.
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`BaseException`异常类现在被[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的异常处理例程拦截，并包括`ConnectionEvents.handle_error()`事件的处理。在系统级别异常（不是`Exception`的子类，包括`KeyboardInterrupt`和greenlet
    `GreenletExit`类）的情况下，默认情况下现在会使[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")**失效**，以防止在处于未知且可能已损坏状态的数据库连接上发生进一步操作。这个更改主要针对MySQL驱动程序，但是这个更改适用于所有DBAPIs。'
- en: See also
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Engines now invalidate connections, run error handlers for BaseException](migration_11.html#change-3803)'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Engines now invalidate connections, run error handlers for BaseException](migration_11.html#change-3803)'
- en: 'References: [#3803](https://www.sqlalchemy.org/trac/ticket/3803)'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3803](https://www.sqlalchemy.org/trac/ticket/3803)
- en: '**[sql] [bug]**'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The “eq” and “ne” operators are no longer part of the list of “associative”
    operators, while they remain considered to be “commutative”. This allows an expression
    like `(x == y) == z` to be maintained at the SQL level with parenthesis. Pull
    request courtesy John Passaro.
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “eq” 和 “ne” 运算符不再是“关联”运算符列表的一部分，尽管它们仍被认为是“可交换的”。这允许像 `(x == y) == z` 这样的表达式在
    SQL 级别保持括号。感谢 John Passaro 的拉取请求。
- en: 'References: [#3799](https://www.sqlalchemy.org/trac/ticket/3799)'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3799](https://www.sqlalchemy.org/trac/ticket/3799)
- en: '**[sql] [bug]**'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Stringify of expression with unnamed [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, as occurs in lots of situations including
    ORM error reporting, will now render the name in string context as “<name unknown>”
    rather than raising a compile error.
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式中使用未命名的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的字符串化，如在许多情况下包括 ORM 错误报告中，现在将在字符串上下文中呈现名称为“<name unknown>”，而不是引发编译错误。
- en: 'References: [#3789](https://www.sqlalchemy.org/trac/ticket/3789)'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3789](https://www.sqlalchemy.org/trac/ticket/3789)
- en: '**[sql] [bug]**'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Raise a more descriptive exception / message when ClauseElement or non-SQLAlchemy
    objects that are not “executable” are erroneously passed to `.execute()`; a new
    exception ObjectNotExecutableError is raised consistently in all cases.
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 ClauseElement 或非 SQLAlchemy 对象被错误地传递给 `.execute()` 时，会引发更具描述性的异常/消息；在所有情况下都一致引发新异常
    ObjectNotExecutableError。
- en: 'References: [#3786](https://www.sqlalchemy.org/trac/ticket/3786)'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3786](https://www.sqlalchemy.org/trac/ticket/3786)
- en: '**[sql] [bug] [mysql] [postgresql]**'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql] [postgresql]**'
- en: Fixed regression in JSON datatypes where the “literal processor” for a JSON
    index value would not be invoked. The native String and Integer datatypes are
    now called upon from within the JSONIndexType and JSONPathType. This is applied
    to the generic, PostgreSQL, and MySQL JSON types and also has a dependency on
    [#3766](https://www.sqlalchemy.org/trac/ticket/3766).
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 JSON 数据类型中的回归，其中 JSON 索引值的“literal processor”不会被调用。现在从 JSONIndexType 和 JSONPathType
    中调用原生的 String 和 Integer 数据类型。这适用于通用、PostgreSQL 和 MySQL 的 JSON 类型，也依赖于 [#3766](https://www.sqlalchemy.org/trac/ticket/3766)。
- en: 'References: [#3765](https://www.sqlalchemy.org/trac/ticket/3765)'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3765](https://www.sqlalchemy.org/trac/ticket/3765)
- en: '**[sql] [bug]**'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    would fail to extract columns from compound SQL expressions if those SQL expressions
    were wrapped inside of an ORM-style `__clause_element__()` construct. This bug
    exists in 1.0.x as well, however in 1.1 is more noticeable as hybrid_property
    @expression now returns a wrapped element.
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    无法从包含在 ORM 风格 `__clause_element__()` 结构中的复合 SQL 表达式中提取列的 bug。这个 bug 在 1.0.x 中也存在，但在
    1.1 中更为明显，因为 hybrid_property @expression 现在返回一个包装元素。
- en: 'References: [#3763](https://www.sqlalchemy.org/trac/ticket/3763)'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3763](https://www.sqlalchemy.org/trac/ticket/3763)
- en: postgresql
  id: totrans-566
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: An adjustment to ON CONFLICT such that the “inserted_primary_key” logic is able
    to accommodate the case where there’s no INSERT or UPDATE and there’s no net change.
    The value comes out as None in this case, rather than failing on an exception.
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整 ON CONFLICT，使“inserted_primary_key”逻辑能够适应没有 INSERT 或 UPDATE 且没有净变化的情况。在这种情况下，该值为
    None，而不是引发异常。
- en: 'References: [#3813](https://www.sqlalchemy.org/trac/ticket/3813)'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3813](https://www.sqlalchemy.org/trac/ticket/3813)
- en: '**[postgresql] [bug]**'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue in new PG “on conflict” construct where columns including those
    of the “excluded” namespace would not be table-qualified in the WHERE clauses
    in the statement.
  id: totrans-571
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 修复了新的 PG “on conflict” 结构中的问题，其中包括“excluded”命名空间的列在语句的 WHERE 子句中不会被表限定。
- en: 'References: [#3807](https://www.sqlalchemy.org/trac/ticket/3807)'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3807](https://www.sqlalchemy.org/trac/ticket/3807)
- en: mysql
  id: totrans-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Added support for parsing MySQL/Connector boolean and integer arguments within
    the URL query string: connection_timeout, connect_timeout, pool_size, get_warnings,
    raise_on_warnings, raw, consume_results, ssl_verify_cert, force_ipv6, pool_reset_session,
    compress, allow_local_infile, use_pure.'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 URL 查询字符串中添加了对解析 MySQL/Connector 布尔值和整数参数的支持：connection_timeout、connect_timeout、pool_size、get_warnings、raise_on_warnings、raw、consume_results、ssl_verify_cert、force_ipv6、pool_reset_session、compress、allow_local_infile、use_pure。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.0.15
- en: 'References: [#3787](https://www.sqlalchemy.org/trac/ticket/3787)'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3787](https://www.sqlalchemy.org/trac/ticket/3787)
- en: '**[mysql] [bug]**'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where the “literal_binds” flag would not be propagated to a CAST expression
    under MySQL.
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在MySQL下设置单表inh子类的错误，该子类包括额外列会破坏映射表的外键集合，从而干扰关系的初始化。
- en: 'References: [#3766](https://www.sqlalchemy.org/trac/ticket/3766)'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3766](https://www.sqlalchemy.org/trac/ticket/3766)
- en: mssql
  id: totrans-581
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Changed the query used to get “default schema name”, from one that queries the
    database principals table to using the “schema_name()” function, as issues have
    been reported that the former system was unavailable on the Azure Data Warehouse
    edition. It is hoped that this will finally work across all SQL Server versions
    and authentication styles.
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了用于获取“默认模式名称”的查询，从查询数据库主体表的查询更改为使用“schema_name()”函数，因为已报告有关前一系统在Azure Data
    Warehouse版本上不可用的问题。希望这将最终在所有SQL Server版本和身份验证样式上正常工作。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3810](https://www.sqlalchemy.org/trac/ticket/3810)'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3810](https://www.sqlalchemy.org/trac/ticket/3810)
- en: '**[mssql] [bug]**'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Updated the server version info scheme for pyodbc to use SQL Server SERVERPROPERTY(),
    rather than relying upon pyodbc.SQL_DBMS_VER, which continues to be unreliable
    particularly with FreeTDS.
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了pyodbc的服务器版本信息方案，使用SQL Server SERVERPROPERTY()，而不是依赖于pyodbc.SQL_DBMS_VER，后者仍然不可靠，特别是对于FreeTDS。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3814](https://www.sqlalchemy.org/trac/ticket/3814)'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3814](https://www.sqlalchemy.org/trac/ticket/3814)
- en: '**[mssql] [bug]**'
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added error code 20017 “unexpected EOF from the server” to the list of disconnect
    exceptions that result in a connection pool reset. Pull request courtesy Ken Robbins.
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将错误代码20017“服务器意外的EOF”添加到导致连接池重置的断开异常列表中。感谢Ken Robbins的拉取请求。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3791](https://www.sqlalchemy.org/trac/ticket/3791)'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3791](https://www.sqlalchemy.org/trac/ticket/3791)
- en: misc
  id: totrans-594
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [orm.declarative]**'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm.declarative]**'
- en: Fixed bug where setting up a single-table inh subclass of a joined-table subclass
    which included an extra column would corrupt the foreign keys collection of the
    mapped table, thereby interfering with the initialization of relationships.
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在设置一个单表inh子类的bug，该子类包括一个额外列，会破坏映射表的外键集合，从而干扰关系的初始化。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3797](https://www.sqlalchemy.org/trac/ticket/3797)'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3797](https://www.sqlalchemy.org/trac/ticket/3797)
- en: 1.1.0b3
  id: totrans-599
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.0b3
- en: 'Released: July 26, 2016'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年7月26日
- en: orm
  id: totrans-601
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [change]**'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Removed a warning that dates back to 0.4 which emits when a same-named relationship
    is placed on two mappers that inherits via joined or single table inheritance.
    The warning does not apply to the current unit of work implementation.
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了一个警告，该警告可以追溯到0.4版本，当在通过连接或单表继承继承的两个映射器上放置同名关系时会发出。该警告不适用于当前的工作单元实现。
- en: See also
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named relationships on inheriting mappers no longer warn](migration_11.html#change-3749)'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[继承映射器上的同名关系不再发出警告](migration_11.html#change-3749)'
- en: 'References: [#3749](https://www.sqlalchemy.org/trac/ticket/3749)'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3749](https://www.sqlalchemy.org/trac/ticket/3749)
- en: sql
  id: totrans-607
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new CTE feature for update/insert/delete stated as a CTE inside
    of an enclosing statement (typically SELECT) whereby oninsert and onupdate values
    weren’t called upon for the embedded statement.
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了新的CTE功能中的错误，用于update/insert/delete，作为包含语句（通常是SELECT）内的CTE陈述，其中oninsert和onupdate值未调用嵌入语句。 '
- en: 'References: [#3745](https://www.sqlalchemy.org/trac/ticket/3745)'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3745](https://www.sqlalchemy.org/trac/ticket/3745)
- en: '**[sql] [bug]**'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new CTE feature for update/insert/delete whereby an anonymous (e.g.
    no name passed) [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct around the statement would fail.
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的CTE功能中的错误，用于update/insert/delete，其中围绕语句的匿名（例如，未传递名称）[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")构造将失败。
- en: 'References: [#3744](https://www.sqlalchemy.org/trac/ticket/3744)'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3744](https://www.sqlalchemy.org/trac/ticket/3744)
- en: postgresql
  id: totrans-614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug whereby [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") and [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") types were not deeply inspected enough by the PostgreSQL
    dialect to determine if SMALLSERIAL or BIGSERIAL needed to be rendered rather
    than SERIAL.
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 方言对于 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 和 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 类型检查不够深入的 bug，以确定是否应该渲染 SMALLSERIAL 或 BIGSERIAL 而不是
    SERIAL。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.0.14
- en: 'References: [#3739](https://www.sqlalchemy.org/trac/ticket/3739)'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3739](https://www.sqlalchemy.org/trac/ticket/3739)
- en: oracle
  id: totrans-619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update"), where the Oracle “rownum”
    approach to LIMIT/OFFSET would fail to accommodate for the expressions inside
    the “OF” clause, which must be stated at the topmost level referring to expression
    within the subquery. The expressions are now added to the subquery if needed.
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") 中的 bug，其中 Oracle 的“rownum”方法限制/偏移失败，因为“OF”子句内的表达式没有适应，必须在最顶层引用子查询内的表达式。如果需要，现在将表达式添加到子查询中。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.0.14
- en: 'References: [#3741](https://www.sqlalchemy.org/trac/ticket/3741)'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3741](https://www.sqlalchemy.org/trac/ticket/3741)
- en: misc
  id: totrans-624
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[feature] [ext]**'
  id: totrans-625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added a “default” parameter to the new sqlalchemy.ext.indexable extension.
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为新的 sqlalchemy.ext.indexable 扩展添加了“default”参数。
- en: '**[bug] [ext]**'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in `sqlalchemy.ext.baked` where the unbaking of a subquery eager loader
    query would fail due to a variable scoping issue, when multiple subquery loaders
    were involved. Pull request courtesy Mark Hahnenberg.
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `sqlalchemy.ext.baked` 中的 bug，在涉及多个子查询加载器时，子查询加载器查询的解除处理失败了，这是由于变量作用域问题导致的。感谢
    Mark Hahnenberg 提供的拉取请求。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.0.15
- en: 'References: [#3743](https://www.sqlalchemy.org/trac/ticket/3743)'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3743](https://www.sqlalchemy.org/trac/ticket/3743)
- en: '**[bug] [ext]**'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: sqlalchemy.ext.indexable will intercept IndexError as well as KeyError when
    raising as AttributeError.
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.ext.indexable 在引发 AttributeError 时也会拦截 IndexError 和 KeyError。
- en: 1.1.0b2
  id: totrans-633
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.0b2
- en: 'Released: July 1, 2016'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年7月1日
- en: sql
  id: totrans-635
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in SQL math negation operator where the type of the expression would
    no longer be the numeric type of the original. This would cause issues where the
    type determined result set behaviors.
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL 数学否定运算符的问题，其中表达式的类型将不再是原始的数字类型。这将导致类型确定结果集行为的问题。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.0.14
- en: 'References: [#3735](https://www.sqlalchemy.org/trac/ticket/3735)'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3735](https://www.sqlalchemy.org/trac/ticket/3735)
- en: '**[sql] [bug]**'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the `__getstate__` / `__setstate__` methods for sqlalchemy.util.Properties
    were non-working due to the transition in the 1.0 series to `__slots__`. The issue
    potentially impacted some third-party applications. Pull request courtesy Pieter
    Mulder.
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 sqlalchemy.util.Properties 的 `__getstate__` / `__setstate__` 方法由于 1.0 系列转换到
    `__slots__` 导致的无法工作的 bug。该问题可能会影响一些第三方应用程序。感谢 Pieter Mulder 提供的拉取请求。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.0.14
- en: 'References: [#3728](https://www.sqlalchemy.org/trac/ticket/3728)'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3728](https://www.sqlalchemy.org/trac/ticket/3728)
- en: '**[sql] [bug]**'
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The processing performed by the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype for backends that only feature integer types
    has been made consistent between the pure Python and C-extension versions, in
    that the C-extension version will accept any integer value from the database as
    a boolean, not just zero and one; additionally, non-boolean integer values being
    sent to the database are coerced to exactly zero or one, instead of being passed
    as the original integer value.
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅包含整数类型的后端的 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    数据类型的处理在纯 Python 和 C 扩展版本之间已经保持一致，C 扩展版本将接受来自数据库的任何整数值作为布尔值，而不仅仅是零和一；此外，发送到数据库的非布尔整数值将被强制转换为精确的零或一，而不是作为原始整数值传递。
- en: See also
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Non-native boolean integer values coerced to zero/one/None in all cases](migration_11.html#change-3730)'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[非本地布尔整数值在所有情况下被强制转换为零/一/无](migration_11.html#change-3730)'
- en: 'References: [#3730](https://www.sqlalchemy.org/trac/ticket/3730)'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3730](https://www.sqlalchemy.org/trac/ticket/3730)
- en: '**[sql] [bug]**'
  id: totrans-649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Rolled back the validation rules a bit in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") to allow unknown string values to pass through, unless
    the flag `validate_string=True` is passed to the Enum; any other kind of object
    is still of course rejected. While the immediate use is to allow comparisons to
    enums with LIKE, the fact that this use exists indicates there may be more unknown-string-comparison
    use cases than we expected, which hints that perhaps there are some unknown string-INSERT
    cases too.
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")中稍微回滚了验证规则，以允许未知字符串值通过，除非向Enum���递了标志`validate_string=True`；当然，任何其他类型的对象仍然被拒绝。虽然立即使用是为了允许与LIKE枚举进行比较，但存在这种用法表明可能存在更多未知字符串比较用例，这暗示可能还有一些未知字符串插入用例。
- en: 'References: [#3725](https://www.sqlalchemy.org/trac/ticket/3725)'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3725](https://www.sqlalchemy.org/trac/ticket/3725)
- en: postgresql
  id: totrans-652
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [ext]**'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [ext]**'
- en: Made a slight behavioral change in the `sqlalchemy.ext.compiler` extension,
    whereby the existing compilation schemes for an established construct would be
    removed if that construct itself didn’t already have its own dedicated `__visit_name__`.
    This was a rare occurrence in 1.0, however in 1.1 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") subclasses [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") and has this behavior. As a result, setting up a compilation
    handler for another dialect such as SQLite would render the main [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") object no longer compilable.
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`sqlalchemy.ext.compiler`扩展中进行了轻微的行为更改，如果已建立的构造的编译方案没有自己专用的`__visit_name__`，则会将其删除。这在1.0中很少发生，但在1.1中，[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")子类[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")并具有此行为。因此，为其他方言（如SQLite）设置编译处理程序将使主[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")对象不再可编译。
- en: 'References: [#3732](https://www.sqlalchemy.org/trac/ticket/3732)'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3732](https://www.sqlalchemy.org/trac/ticket/3732)
- en: mysql
  id: totrans-656
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Dialed back the “order the primary key columns per auto-increment” described
    in [No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)
    a bit, so that if the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") is explicitly defined, the order of
    columns is maintained exactly, allowing control of this behavior when necessary.
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[不再为具有AUTO_INCREMENT的复合主键生成隐式KEY](migration_11.html#change-mysql-3216)中稍微减少了“按照自动增量排序主键列”的描述，因此如果[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")被明确定义，列的顺序将被保持完全一致，允许在必要时控制此行为。
- en: 'References: [#3726](https://www.sqlalchemy.org/trac/ticket/3726)'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3726](https://www.sqlalchemy.org/trac/ticket/3726)
- en: 1.1.0b1
  id: totrans-660
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.0b1
- en: 'Released: June 16, 2016'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年6月16日
- en: orm
  id: totrans-662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature] [ext]**'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [ext]**'
- en: A new ORM extension [Indexable](../orm/extensions/indexable.html) is added,
    which allows construction of Python attributes which refer to specific elements
    of “indexed” structures such as arrays and JSON fields. Pull request courtesy
    Jeong YunWon.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的ORM扩展[Indexable](../orm/extensions/indexable.html)，允许构建引用“索引”结构的特定元素的Python属性，例如数组和JSON字段。感谢Jeong
    YunWon的拉取请求。
- en: See also
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Indexable ORM extension](migration_11.html#feature-indexable)'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的可索引ORM扩展](migration_11.html#feature-indexable)'
- en: '**[orm] [feature]**'
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new flag [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings") which allows an ORM bulk INSERT
    to occur with NULL values rendered; this bypasses server side defaults, however
    allows all statements to be formed with the same set of columns, allowing them
    to be batched. Pull request courtesy Tobias Sauerwein.
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新标志 [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings")，它允许使用 NULL 值进行 ORM 批量 INSERT；这将绕过服务器端默认值，但允许使用相同的列集形成所有语句，从而使它们可以批处理。由
    Tobias Sauerwein 提供的拉取请求。
- en: '**[orm] [feature]**'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new event [`AttributeEvents.init_scalar()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar"), as well as a new example suite
    illustrating its use. This event can be used to provide a Core-generated default
    value to a Python-side attribute before the object is persisted.
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新事件 [`AttributeEvents.init_scalar()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar")，以及一个新的示例套件，说明了其用法。此事件可用于在对象持久化之前为
    Python 端的属性提供由 Core 生成的默认值。
- en: See also
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[New init_scalar() event intercepts default values at ORM level](migration_11.html#change-1311)'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的 init_scalar() 事件拦截 ORM 级别的默认值](migration_11.html#change-1311)'
- en: 'References: [#1311](https://www.sqlalchemy.org/trac/ticket/1311)'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1311](https://www.sqlalchemy.org/trac/ticket/1311)
- en: '**[orm] [feature]**'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added [`AutomapBase.prepare.schema`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.schema
    "sqlalchemy.ext.automap.AutomapBase.prepare") to the [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") method, to indicate which schema
    tables should be reflected from if not the default schema. Pull request courtesy
    Josh Marlow.
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 [`AutomapBase.prepare.schema`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.schema
    "sqlalchemy.ext.automap.AutomapBase.prepare") 到 [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 方法，以指示应从哪个模式中反映表，如果不是默认模式。由 Josh
    Marlow 提供的拉取请求。
- en: '**[orm] [feature]**'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new parameter `mapper.passive_deletes` to available mapper options. This
    allows a DELETE to proceed for a joined-table inheritance mapping against the
    base table only, while allowing for ON DELETE CASCADE to handle deleting the row
    from the subclass tables.
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 `mapper.passive_deletes` 到可用的映射器选项。这允许针对基表的联合表继承映射进行 DELETE 操作，同时允许 ON
    DELETE CASCADE 处理从子类表中删除行。
- en: See also
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[passive_deletes feature for joined-inheritance mappings](migration_11.html#change-2349)'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对于联合继承映射的被动删除功能](migration_11.html#change-2349)'
- en: 'References: [#2349](https://www.sqlalchemy.org/trac/ticket/2349)'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2349](https://www.sqlalchemy.org/trac/ticket/2349)
- en: '**[orm] [feature]**'
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Calling str() on a core SQL construct has been made more “friendly”, when the
    construct contains non-standard SQL elements such as RETURNING, array index operations,
    or dialect-specific or custom datatypes. A string is now returned in these cases
    rendering an approximation of the construct (typically the PostgreSQL-style version
    of it) rather than raising an error.
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对核心 SQL 结构调用 str() 方法已经变得更加“友好”，当结构包含非标准 SQL 元素时，例如 RETURNING、数组索引操作或方言特定或自定义数据类型时。在这些情况下，将返回一个字符串，呈现出结构的近似值（通常是其
    PostgreSQL 风格版本），而不是引发错误。
- en: See also
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[“Friendly” stringification of Core SQL constructs without a dialect](migration_11.html#change-3631)'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[没有方言的核心 SQL 结构的“友好”字符串化](migration_11.html#change-3631)'
- en: 'References: [#3631](https://www.sqlalchemy.org/trac/ticket/3631)'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3631](https://www.sqlalchemy.org/trac/ticket/3631)
- en: '**[orm] [feature]**'
  id: totrans-686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The `str()` call for [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will now take into account the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound, when generating the string form of the SQL,
    so that the actual SQL that would be emitted to the database is shown, if possible.
    Previously, only the engine associated with the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") to which the mappings are associated would be used,
    if present. If no bind can be located either on the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") to which the mappings are associated, then the “default”
    dialect is used to render the SQL, as was the case previously.
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的`str()`调用现在将考虑[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")绑定的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，在生成SQL的字符串形式时，以便显示将要发送到数据库的实际SQL，如果可能的话。以前，只有与映射相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")的引擎会被使用，如果存在的话。如果无法在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或与映射相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上找到绑定，则使用“默认”方言来呈现SQL，就像以前一样。
- en: See also
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stringify of Query will consult the Session for the correct dialect](migration_11.html#change-3081)'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[查询的字符串化将查询会话以获取正确的方言](migration_11.html#change-3081)'
- en: 'References: [#3081](https://www.sqlalchemy.org/trac/ticket/3081)'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3081](https://www.sqlalchemy.org/trac/ticket/3081)
- en: '**[orm] [feature]**'
  id: totrans-691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`SessionEvents`](../orm/events.html#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")
    suite now includes events to allow unambiguous tracking of all object lifecycle
    state transitions in terms of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") itself, e.g. pending, transient, persistent, detached.
    The state of the object within each event is also defined.
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SessionEvents`](../orm/events.html#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")套件现在包括事件，允许对所有对象生命周期状态转换进行明确跟踪，以[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")本身为基础，例如挂起、瞬态、持久、分离。每个事件中对象的状态也被定义。'
- en: See also
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新会话生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [feature]**'
  id: totrans-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new session lifecycle state [deleted](../glossary.html#term-deleted).
    This new state represents an object that has been deleted from the [persistent](../glossary.html#term-persistent)
    state and will move to the [detached](../glossary.html#term-detached) state once
    the transaction is committed. This resolves the long-standing issue that objects
    which were deleted existed in a gray area between persistent and detached. The
    [`InstanceState.persistent`](../orm/internals.html#sqlalchemy.orm.InstanceState.persistent
    "sqlalchemy.orm.InstanceState.persistent") accessor will **no longer** report
    on a deleted object as persistent; the [`InstanceState.deleted`](../orm/internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") accessor will instead be True for these
    objects, until they become detached.
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的会话生命周期状态[deleted](../glossary.html#term-deleted)。这个新状态表示一个已从[persistent](../glossary.html#term-persistent)状态中删除的对象，一旦事务提交，将转移到[detached](../glossary.html#term-detached)状态。这解决了长期存在的问题，即被删除的对象存在于持久和分离之间的灰色区域。[`InstanceState.persistent`](../orm/internals.html#sqlalchemy.orm.InstanceState.persistent
    "sqlalchemy.orm.InstanceState.persistent")访问器**不再**将已删除对象报告为持久；相反，这些对象的[`InstanceState.deleted`](../orm/internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted")访问器将为True，直到它们变为分离状态。
- en: See also
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新会话生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [feature]**'
  id: totrans-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new checks for the common error case of passing mapped classes or mapped
    instances into contexts where they are interpreted as SQL bound parameters; a
    new exception is raised for this.
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对将映射类或映射实例传递到被解释为SQL绑定参数的上下文的常见错误情况的新检查；为此引发了新异常。
- en: See also
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specific checks added for passing mapped classes, instances as SQL literals](migration_11.html#change-3321)'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为传递映射类、实例作为 SQL 文字添加了具体检查](migration_11.html#change-3321)'
- en: 'References: [#3321](https://www.sqlalchemy.org/trac/ticket/3321)'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3321](https://www.sqlalchemy.org/trac/ticket/3321)
- en: '**[orm] [feature]**'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new relationship loading strategy [`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload") (also accessible via `lazy='raise'`). This strategy
    behaves almost like [`noload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.noload
    "sqlalchemy.orm.noload") but instead of returning `None` it raises an InvalidRequestError.
    Pull request courtesy Adrian Moennich.
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的关系加载策略[`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload")（也可通过`lazy='raise'`访问）。这个策略几乎像[`noload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.noload
    "sqlalchemy.orm.noload")一样工作，但是它不是返回`None`而是引发一个InvalidRequestError。拉取请求由Adrian
    Moennich提供。
- en: See also
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “raise” / “raise_on_sql” loader strategies](migration_11.html#change-3512)'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“raise” / “raise_on_sql”加载器策略](migration_11.html#change-3512)'
- en: 'References: [#3512](https://www.sqlalchemy.org/trac/ticket/3512)'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3512](https://www.sqlalchemy.org/trac/ticket/3512)
- en: '**[orm] [change]**'
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [变更]**'
- en: The [`Mapper.order_by`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.order_by
    "sqlalchemy.orm.Mapper") parameter is deprecated. This is an old parameter no
    longer relevant to how SQLAlchemy works, once the Query object was introduced.
    By deprecating it we establish that we aren’t supporting non-working use cases
    and that we encourage applications to move off of the use of this parameter.
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapper.order_by`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.order_by
    "sqlalchemy.orm.Mapper") 参数已被弃用。这是一个旧参数，与SQLAlchemy的工作方式不再相关，一旦引入了查询对象。通过弃用它，我们确立了我们不支持不起作用的用例，并鼓励应用程序摆脱使用该参数的做法。'
- en: See also
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mapper.order_by is deprecated](migration_11.html#change-3394)'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Mapper.order_by 已弃用](migration_11.html#change-3394)'
- en: 'References: [#3394](https://www.sqlalchemy.org/trac/ticket/3394)'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3394](https://www.sqlalchemy.org/trac/ticket/3394)
- en: '**[orm] [change]**'
  id: totrans-716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [变更]**'
- en: The [`Session.weak_identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.params.weak_identity_map
    "sqlalchemy.orm.Session") parameter is deprecated. See the new recipe at [Session
    Referencing Behavior](../orm/session_state_management.html#session-referencing-behavior)
    for an event-based approach to maintaining strong identity map behavior.
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.weak_identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.params.weak_identity_map
    "sqlalchemy.orm.Session") 参数已被弃用。请参阅[Session Referencing Behavior](../orm/session_state_management.html#session-referencing-behavior)中的新方案，使用基于事件的方法来维护强身份映射行为。'
- en: See also
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的会话生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [bug]**'
  id: totrans-721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed an issue where a many-to-one change of an object from one parent to another
    could work inconsistently when combined with an un-flushed modification of the
    foreign key attribute. The attribute move now considers the database-committed
    value of the foreign key in order to locate the “previous” parent of the object
    being moved. This allows events to fire off correctly including backref events.
    Previously, these events would not always fire. Applications which may have relied
    on the previously broken behavior may be affected.
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即将对象从一个父对象更改为另一个父对象的多对一更改可能与未刷新的外键属性的修改结合使用时工作不一致的问题。现在，属性移动考虑了外键的数据库提交值，以定位正在移动的对象的“以前”父对象。这样可以正确触发事件，包括反向引用事件。以前，这些事件并不总是会触发。可能依赖于先前损坏行为的应用可能会受到影响。
- en: See also
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fix involving many-to-one object moves with user-initiated foreign key manipulations](migration_11.html#change-3708)'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[修复了涉及由用户启动的外键操纵的多对一对象移动的问题](migration_11.html#change-3708)'
- en: 'References: [#3708](https://www.sqlalchemy.org/trac/ticket/3708)'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3708](https://www.sqlalchemy.org/trac/ticket/3708)
- en: '**[orm] [bug]**'
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where deferred columns would inadvertently be set up for database
    load on the next object-wide unexpire, when the object were merged into the session
    with `session.merge(obj, load=False)`.
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当使用`session.merge(obj, load=False)`将对象合并到会话中时，延迟列可能会意外地设置为在下一个对象范围内取消过期时进行数据库加载。
- en: 'References: [#3488](https://www.sqlalchemy.org/trac/ticket/3488)'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3488](https://www.sqlalchemy.org/trac/ticket/3488)
- en: '**[orm] [bug] [mysql]**'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [mysql]**'
- en: Further continuing on the common MySQL exception case of a savepoint being cancelled
    first covered in [#2696](https://www.sqlalchemy.org/trac/ticket/2696), the failure
    mode in which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is placed when a SAVEPOINT vanishes before rollback has been improved to allow
    the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to still function outside of that savepoint. It is assumed that the savepoint
    operation failed and was cancelled.
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步延续了关于MySQL常见异常情况的讨论，即在[#2696](https://www.sqlalchemy.org/trac/ticket/2696)中首次涵盖的保存点首先被取消的情况，当SAVEPOINT在回滚之前消失时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")所处的失败模式已经得到改进，以允许[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在该保存点之外继续运行。假定保存点操作失败并被取消。
- en: See also
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved Session state when a SAVEPOINT is cancelled by the database](migration_11.html#change-3680)'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[数据库取消SAVEPOINT时改进的Session状态](migration_11.html#change-3680)'
- en: 'References: [#3680](https://www.sqlalchemy.org/trac/ticket/3680)'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3680](https://www.sqlalchemy.org/trac/ticket/3680)
- en: '**[orm] [bug]**'
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a newly inserted instance that is rolled back would still potentially
    cause persistence conflicts on the next transaction, because the instance would
    not be checked that it was expired. This fix will resolve a large class of cases
    that erroneously cause the “New instance with identity X conflicts with persistent
    instance Y” error.
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即新插入的实例如果被回滚，仍可能在下一个事务中引起持久性冲突，因为实例未被检查是否已过期。此修复将解决一大类错误地导致“具有标识X的新实例与持久实例Y冲突”的情况。
- en: See also
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Erroneous “new instance X conflicts with persistent instance Y” flush errors
    fixed](migration_11.html#change-3677)'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[修复了错误的“新实例X与持久实例Y冲突”刷新错误](migration_11.html#change-3677)'
- en: 'References: [#3677](https://www.sqlalchemy.org/trac/ticket/3677)'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3677](https://www.sqlalchemy.org/trac/ticket/3677)
- en: '**[orm] [bug]**'
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An improvement to the workings of [`Query.correlate()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.correlate
    "sqlalchemy.orm.Query.correlate") such that when a “polymorphic” entity is used
    which represents a straight join of several tables, the statement will ensure
    that all the tables within the join are part of what’s correlating.
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Query.correlate()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.correlate
    "sqlalchemy.orm.Query.correlate")的工作方式进行了改进，以便在使用代表多个表直接连接的“多态”实体时，语句将确保连接中的所有表都是相关的。
- en: See also
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvements to the Query.correlate method with polymorphic entities](migration_11.html#change-3662)'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进了具有多态实体的Query.correlate方法](migration_11.html#change-3662)'
- en: 'References: [#3662](https://www.sqlalchemy.org/trac/ticket/3662)'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3662](https://www.sqlalchemy.org/trac/ticket/3662)
- en: '**[orm] [bug]**'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug which would cause an eagerly loaded many-to-one attribute to not be
    loaded, if the joined eager load were from a row where the same entity were present
    multiple times, some calling for the attribute to be eagerly loaded and others
    not. The logic here is revised to take in the attribute even though a different
    loader path has handled the parent entity already.
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug会导致一个急切加载的多对一属性不被加载，如果连接的急切加载来自一个行，其中同一实体多次出现，有些要求属性急切加载，而其他则不需要。这里的逻辑被修改为即使不同的加载路径已经处理了父实体，也要考虑属性。
- en: See also
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joined eager loading where the same entity is present multiple times in one
    row](migration_11.html#change-3431)'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在一行中同一实体多次出现时的连接急切加载](migration_11.html#change-3431)'
- en: 'References: [#3431](https://www.sqlalchemy.org/trac/ticket/3431)'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3431](https://www.sqlalchemy.org/trac/ticket/3431)
- en: '**[orm] [bug]**'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A refinement to the logic which adds columns to the resulting SQL when [`Query.distinct()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.distinct
    "sqlalchemy.orm.Query.distinct") is combined with [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") such that columns which are already present will
    not be added a second time, even if they are labeled with a different name. Regardless
    of this change, the extra columns added to the SQL have never been returned in
    the final result, so this change only impacts the string form of the statement
    as well as its behavior when used in a Core execution context. Additionally, columns
    are no longer added when the DISTINCT ON format is used, provided the query is
    not wrapped inside a subquery due to joined eager loading.
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Query.distinct()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.distinct
    "sqlalchemy.orm.Query.distinct")与[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")组合时向生成的SQL添加列的逻辑进行了改进，使得已经存在的列不会被第二次添加，即使它们使用不同名称标记。尽管有这个改变，SQL中添加的额外列从未在最终结果中返回，因此这个改变只影响语句的字符串形式以及在核心执行上下文中使用时的行为。此外，当使用DISTINCT
    ON格式时，不再添加列，前提是查询没有由于连接的急加载而包装在子查询中。
- en: See also
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Columns no longer added redundantly with DISTINCT + ORDER BY](migration_11.html#change-3641)'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用DISTINCT + ORDER BY不再冗余添加列](migration_11.html#change-3641)'
- en: 'References: [#3641](https://www.sqlalchemy.org/trac/ticket/3641)'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3641](https://www.sqlalchemy.org/trac/ticket/3641)
- en: '**[orm] [bug]**'
  id: totrans-754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where two same-named relationships that refer to a base class and
    a concrete-inherited subclass would raise an error if those relationships were
    set up using “backref”, while setting up the identical configuration using relationship()
    instead with the conflicting names would succeed, as is allowed in the case of
    a concrete mapping.
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个同名关系引用基类和具体继承子类时，如果这些关系是使用“backref”设置的，那么会引发错误，而使用relationship()设置相同配置的情况下，使用冲突名称将成功，就像在具体映射的情况下允许的那样。
- en: See also
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named backrefs will not raise an error when applied to concrete inheritance
    subclasses](migration_11.html#change-3630)'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[应用于具体继承子类时，同名backrefs不会引发错误](migration_11.html#change-3630)'
- en: 'References: [#3630](https://www.sqlalchemy.org/trac/ticket/3630)'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3630](https://www.sqlalchemy.org/trac/ticket/3630)
- en: '**[orm] [bug]**'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") method now tracks pending objects by primary key
    before emitting an INSERT, and merges distinct objects with duplicate primary
    keys together as they are encountered, which is essentially semi-deterministic
    at best. This behavior matches what happens already with persistent objects.
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")方法现在在发出INSERT之前通过主键跟踪待处理对象，并在遇到具有重复主键的不同对象时将它们合并在一起，这在最好的情况下基本上是半确定性的。这种行为与持久对象已经发生的情况相匹配。'
- en: See also
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.merge resolves pending conflicts the same as persistent](migration_11.html#change-3601)'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.merge解决待处理冲突与持久对象相同](migration_11.html#change-3601)'
- en: 'References: [#3601](https://www.sqlalchemy.org/trac/ticket/3601)'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3601](https://www.sqlalchemy.org/trac/ticket/3601)
- en: '**[orm] [bug]**'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the “single table inheritance” criteria would be added onto
    the end of a query in some inappropriate situations, such as when querying from
    an exists() of a single-inheritance subclass.
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些不适当情况下，例如在从单继承子类的exists()查询时，会将“单表继承”标准添加到查询末尾的错误。
- en: See also
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Further Fixes to single-table inheritance querying](migration_11.html#change-3582)'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[进一步修复单表继承查询](migration_11.html#change-3582)'
- en: 'References: [#3582](https://www.sqlalchemy.org/trac/ticket/3582)'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3582](https://www.sqlalchemy.org/trac/ticket/3582)
- en: '**[orm] [bug]**'
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a new type-level modifier [`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") which indicates to the ORM that
    a positive set of None should be persisted as the value NULL, instead of omitting
    the column from the INSERT statement. This feature is used both as part of the
    implementation for [#3514](https://www.sqlalchemy.org/trac/ticket/3514) as well
    as a standalone feature available on any type.
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的类型级别修饰符[`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")，指示ORM应将一组正值的None持久化为值NULL，而不是在INSERT语句中省略列。此功能既用作[#3514](https://www.sqlalchemy.org/trac/ticket/3514)的实现的一部分，也作为任何类型可用的独立功能。
- en: See also
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New options allowing explicit persistence of NULL over a default](migration_11.html#change-3250)'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[允许显式持久化NULL覆盖默认值的新选项](migration_11.html#change-3250)'
- en: 'References: [#3250](https://www.sqlalchemy.org/trac/ticket/3250)'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3250](https://www.sqlalchemy.org/trac/ticket/3250)
- en: '**[orm] [bug]**'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Internal calls to “bookkeeping” functions within [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") and related bulk methods have been
    scaled back to the extent that this functionality is not currently used, e.g.
    checks for column default values to be fetched after an INSERT or UPDATE statement.
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")和相关批量方法内部调用的“簿记”功能已经减少到目前未使用的程度，例如在INSERT或UPDATE语句之后获取列默认值的检查。'
- en: 'References: [#3526](https://www.sqlalchemy.org/trac/ticket/3526)'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3526](https://www.sqlalchemy.org/trac/ticket/3526)
- en: '**[orm] [bug] [postgresql]**'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [postgresql]**'
- en: Additional fixes have been made regarding the value of `None` in conjunction
    with the PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") type. When the [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag is left at its default value of `False`, the ORM
    will now correctly insert the JSON “‘null’” string into the column whenever the
    value on the ORM object is set to the value `None` or when the value `None` is
    used with [`Session.bulk_insert_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings"), **including** if the column has
    a default or server default on it.
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于与 PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 类型一起使用值`None`的附加修复已经完成。当[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")标志保持默认值`False`时，ORM现在将正确地在ORM对象上的值设置为`None`或在[`Session.bulk_insert_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")中使用值`None`时，将JSON的“'null'”字符串插入到列中，**包括**如果列上有默认值或服务器默认值。
- en: See also
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[JSON “null” is inserted as expected with ORM operations, omitted when not
    present](migration_11.html#change-3514)'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[JSON“null”在ORM操作中按预期插入，在不存在时被省略](migration_11.html#change-3514)'
- en: '[New options allowing explicit persistence of NULL over a default](migration_11.html#change-3250)'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[允许显式持久化NULL覆盖默认值的新选项](migration_11.html#change-3250)'
- en: 'References: [#3514](https://www.sqlalchemy.org/trac/ticket/3514)'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3514](https://www.sqlalchemy.org/trac/ticket/3514)
- en: engine
  id: totrans-783
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added connection pool events `ConnectionEvents.close()`, `ConnectionEvents.detach()`,
    `ConnectionEvents.close_detached()`.
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了连接池事件`ConnectionEvents.close()`，`ConnectionEvents.detach()`，`ConnectionEvents.close_detached()`。
- en: '**[engine] [feature]**'
  id: totrans-786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: All string formatting of bound parameter sets and result rows for logging, exception,
    and `repr()` purposes now truncate very large scalar values within each collection,
    including an “N characters truncated” notation, similar to how the display for
    large multiple-parameter sets are themselves truncated.
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于日志记录、异常和`repr()`目的的所有绑定参数集和结果行的字符串格式化现在在每个集合中截断非常大的标量值，包括“N个字符被截断”注释，类似于大型多参数集本身被截断的显示方式。
- en: See also
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Large parameter and row values are now truncated in logging and exception
    displays](migration_11.html#change-2837)'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在日志和异常显示中截断大型参数和行值](migration_11.html#change-2837)'
- en: 'References: [#2837](https://www.sqlalchemy.org/trac/ticket/2837)'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2837](https://www.sqlalchemy.org/trac/ticket/2837)
- en: '**[engine] [feature]**'
  id: totrans-791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Multi-tenancy schema translation for [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects is added. This supports the use case of an
    application that uses the same set of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in many schemas, such as schema-per-user. A
    new execution option [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") is added.
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象添加了多租户模式翻译。这支持应用程序在许多模式中使用相同的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的用例，例如每个用户一个模式。添加了一个新的执行选项[`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")。
- en: See also
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multi-Tenancy Schema Translation for Table objects](migration_11.html#change-2685)'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Table对象的多租户模式翻译](migration_11.html#change-2685)'
- en: 'References: [#2685](https://www.sqlalchemy.org/trac/ticket/2685)'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2685](https://www.sqlalchemy.org/trac/ticket/2685)
- en: '**[engine] [feature]**'
  id: totrans-796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added a new entrypoint system to the engine to allow “plugins” to be stated
    in the query string for a URL. Custom plugins can be written which will be given
    the chance up front to alter and/or consume the engine’s URL and keyword arguments,
    and then at engine create time will be given the engine itself to allow additional
    modifications or event registration. Plugins are written as a subclass of [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin"); see that class for details.
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为引擎添加了新的入口系统，允许在URL的查询字符串中声明“插件”。可以编写自定义插件，这些插件将有机会在前期修改和/或使用引擎的URL和关键字参数，然后在引擎创建时将获得引擎本身以允许进行额外的修改或事件注册。插件被编写为[`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")的子类；请参阅该类以获取详细信息。
- en: 'References: [#3536](https://www.sqlalchemy.org/trac/ticket/3536)'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3536](https://www.sqlalchemy.org/trac/ticket/3536)
- en: sql
  id: totrans-799
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added TABLESAMPLE support via the new [`FromClause.tablesample()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method and standalone function.
    Pull request courtesy Ilja Everilä.
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的[`FromClause.tablesample()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample")方法和独立函数添加了TABLESAMPLE支持。感谢Ilja
    Everilä的拉取请求。
- en: See also
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for TABLESAMPLE](migration_11.html#change-3718)'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持TABLESAMPLE](migration_11.html#change-3718)'
- en: 'References: [#3718](https://www.sqlalchemy.org/trac/ticket/3718)'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3718](https://www.sqlalchemy.org/trac/ticket/3718)
- en: '**[sql] [feature]**'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for ranges in window functions, using the [`over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.range_
    "sqlalchemy.sql.expression.over") and [`over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over") parameters.
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持窗口函数中的范围，使用[`over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.range_
    "sqlalchemy.sql.expression.over")和[`over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over")参数。
- en: See also
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for RANGE and ROWS specification within window functions](migration_11.html#change-3049)'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持窗口函数中的RANGE和ROWS规范](migration_11.html#change-3049)'
- en: 'References: [#3049](https://www.sqlalchemy.org/trac/ticket/3049)'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3049](https://www.sqlalchemy.org/trac/ticket/3049)
- en: '**[sql] [feature]**'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Implemented reflection of CHECK constraints for SQLite and PostgreSQL. This
    is available via the new inspector method [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") as well as when
    reflecting [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects in the form of [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") objects present in the constraints collection.
    Pull request courtesy Alex Grönholm.
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了SQLite和PostgreSQL的CHECK约束的反射。可以通过新的检查器方法[`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")以及在反射[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象时以[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")对象的形式存在于约束集合中。感谢Alex Grönholm的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: New [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") and [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") operators; pull
    request courtesy Sebastian Bank.
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增[`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from")和[`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from")操作符；感谢Sebastian
    Bank的拉取请求。
- en: See also
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for IS DISTINCT FROM and IS NOT DISTINCT FROM](migration_11.html#change-is-distinct-from)'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[IS DISTINCT FROM和IS NOT DISTINCT FROM的支持](migration_11.html#change-is-distinct-from)'
- en: '**[sql] [feature]**'
  id: totrans-816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added a hook in `DDLCompiler.visit_create_table()` called `DDLCompiler.create_table_suffix()`,
    allowing custom dialects to add keywords after the “CREATE TABLE” clause. Pull
    request courtesy Mark Sandan.
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`DDLCompiler.visit_create_table()`中增加了一个名为`DDLCompiler.create_table_suffix()`的钩子，允许自定义方言在“CREATE
    TABLE”子句之后添加关键字。感谢Mark Sandan的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Negative integer indexes are now accommodated by rows returned from a `ResultProxy`.
    Pull request courtesy Emanuele Gaifas.
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 负整数索引现在由`ResultProxy`返回的行支持。感谢Emanuele Gaifas的拉取请求。
- en: See also
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Negative integer indexes accommodated by Core result rows](migration_11.html#change-gh-231)'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心结果行支持负整数索引](migration_11.html#change-gh-231)'
- en: '**[sql] [feature]**'
  id: totrans-822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added [`Select.lateral()`](../core/selectable.html#sqlalchemy.sql.expression.Select.lateral
    "sqlalchemy.sql.expression.Select.lateral") and related constructs to allow for
    the SQL standard LATERAL keyword, currently only supported by PostgreSQL.
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了[`Select.lateral()`](../core/selectable.html#sqlalchemy.sql.expression.Select.lateral
    "sqlalchemy.sql.expression.Select.lateral")和相关构造，以允许使用SQL标准的LATERAL关键字，目前仅受PostgreSQL支持。
- en: See also
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for the SQL LATERAL keyword](migration_11.html#change-2857)'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQL LATERAL关键字的支持](migration_11.html#change-2857)'
- en: 'References: [#2857](https://www.sqlalchemy.org/trac/ticket/2857)'
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2857](https://www.sqlalchemy.org/trac/ticket/2857)
- en: '**[sql] [feature]**'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added support for rendering “FULL OUTER JOIN” to both Core and ORM. Pull request
    courtesy Stefan Urbanek.
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对“FULL OUTER JOIN”在Core和ORM中的渲染支持。感谢Stefan Urbanek的拉取请求。
- en: See also
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Core and ORM support for FULL OUTER JOIN](migration_11.html#change-1957)'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心和ORM支持FULL OUTER JOIN](migration_11.html#change-1957)'
- en: 'References: [#1957](https://www.sqlalchemy.org/trac/ticket/1957)'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1957](https://www.sqlalchemy.org/trac/ticket/1957)
- en: '**[sql] [feature]**'
  id: totrans-832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: CTE functionality has been expanded to support all DML, allowing INSERT, UPDATE,
    and DELETE statements to both specify their own WITH clause, as well as for these
    statements themselves to be CTE expressions when they include a RETURNING clause.
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CTE功能已扩展到支持所有DML，允许INSERT、UPDATE和DELETE语句指定自己的WITH子句，以及当这些语句包含RETURNING子句时，这些语句本身也可以是CTE表达式。
- en: See also
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CTE Support for INSERT, UPDATE, DELETE](migration_11.html#change-2551)'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CTE支持INSERT、UPDATE、DELETE](migration_11.html#change-2551)'
- en: 'References: [#2551](https://www.sqlalchemy.org/trac/ticket/2551)'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2551](https://www.sqlalchemy.org/trac/ticket/2551)
- en: '**[sql] [feature]**'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added support for PEP-435-style enumerated classes, namely Python 3’s `enum.Enum`
    class but also including compatible enumeration libraries, to the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype. The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype now also performs in-Python validation of incoming
    values, and adds an option to forego creating the CHECK constraint [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum"). Pull request courtesy Alex Grönholm.
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对PEP-435风格的枚举类的支持，即Python 3的`enum.Enum`类，但也包括兼容的枚举库，到[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")数据类型。[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")数据类型现在还在Python中验证传入值，并添加了一个选项来避免创建CHECK约束[`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum")。感谢Alex Grönholm的拉取请求。
- en: See also
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for Python’s native enum type and compatible forms](migration_11.html#change-3292)'
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持Python的原生枚举类型和兼容形式](migration_11.html#change-3292)'
- en: '[The Enum type now does in-Python validation of values](migration_11.html#change-3095)'
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Enum类型现在在Python中验证值](migration_11.html#change-3095)'
- en: 'References: [#3095](https://www.sqlalchemy.org/trac/ticket/3095), [#3292](https://www.sqlalchemy.org/trac/ticket/3292)'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3095](https://www.sqlalchemy.org/trac/ticket/3095), [#3292](https://www.sqlalchemy.org/trac/ticket/3292)
- en: '**[sql] [feature]**'
  id: totrans-843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A deep improvement to the recently added [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method, and its interaction with
    result-row processing, now allows the columns passed to the method to be positionally
    matched with the result columns in the statement, rather than matching on name
    alone. The advantage to this includes that when linking a textual SQL statement
    to an ORM or Core table model, no system of labeling or de-duping of common column
    names needs to occur, which also means there’s no need to worry about how label
    names match to ORM columns and so-forth. In addition, the `ResultProxy` has been
    further enhanced to map column and string keys to a row with greater precision
    in some cases.
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对最近添加的 [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") 方法以及其与结果行处理的交互进行了深度改进，现在允许将传递给该方法的列与语句中的结果列进行位置匹配，而不仅仅是根据名称匹配。这样做的好处包括，当将文本
    SQL 语句链接到 ORM 或核心表模型时，无需进行常见列名的标记或去重，这也意味着无需担心标签名称如何与 ORM 列匹配等等。此外，`ResultProxy`
    在某些情况下进一步增强，以更精确地将列和字符串键映射到行。
- en: See also
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[ResultSet column matching enhancements; positional column setup for textual
    SQL](migration_11.html#change-3501) - feature overview'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ResultSet 列匹配增强；文本 SQL 的位置列设置](migration_11.html#change-3501) - 特性概述'
- en: '[TextClause.columns() will match columns positionally, not by name, when passed
    positionally](migration_11.html#behavior-change-3501) - backwards compatibility
    remarks'
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TextClause.columns() 将按位置而不是按名称匹配列](migration_11.html#behavior-change-3501)
    - 向后兼容性备注'
- en: 'References: [#3501](https://www.sqlalchemy.org/trac/ticket/3501)'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3501](https://www.sqlalchemy.org/trac/ticket/3501)
- en: '**[sql] [feature]**'
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new type to core [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON"). This is the base of the PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") type as well as that of the new [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON") type, so that a PG/MySQL-agnostic JSON column
    may be used. The type features basic index and path searching support.
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在核心中添加了一个新类型 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")。这是
    PostgreSQL 的基础 [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 类型以及新 [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON") 类型的基础，因此可以使用 PG/MySQL 不可知的 JSON 列。该类型具有基本的索引和路径搜索支持。
- en: See also
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[JSON support added to Core](migration_11.html#change-3619)'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Core 添加了对 JSON 的支持](migration_11.html#change-3619)'
- en: 'References: [#3619](https://www.sqlalchemy.org/trac/ticket/3619)'
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3619](https://www.sqlalchemy.org/trac/ticket/3619)
- en: '**[sql] [feature]**'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for “set-aggregate” functions of the form `<function> WITHIN GROUP
    (ORDER BY <criteria>)`, using the method [`FunctionElement.within_group()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group"). A series of common set-aggregate
    functions with return types derived from the set have been added. This includes
    functions like [`percentile_cont`](../core/functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`dense_rank`](../core/functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") and others.
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对形式为 `<function> WITHIN GROUP (ORDER BY <criteria>)` 的“set-aggregate”函数的支持，使用方法
    [`FunctionElement.within_group()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")。已添加一系列常见的 set-aggregate
    函数，其返回类型从集合派生。这包括像 [`percentile_cont`](../core/functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")、[`dense_rank`](../core/functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") 等函数。
- en: See also
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[New Function features, “WITHIN GROUP”, array_agg and set aggregate functions](migration_11.html#change-3132)'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的功能特性，“WITHIN GROUP”、“array_agg”和集合聚合函数](migration_11.html#change-3132)'
- en: 'References: [#1370](https://www.sqlalchemy.org/trac/ticket/1370)'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1370](https://www.sqlalchemy.org/trac/ticket/1370)
- en: '**[sql] [feature] [postgresql]**'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature] [postgresql]**'
- en: Added support for the SQL-standard function [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg"), which automatically returns an [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") of the correct type and supports index
    / slice operations, as well as [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg"), which returns a [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") with additional comparison features. As
    arrays are only supported on PostgreSQL at the moment, only actually works on
    PostgreSQL. Also added a new construct [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") in support of PG’s “ORDER
    BY” extension.
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 SQL 标准函数 [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") 的支持，该函数会自动返回正确类型的 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 并支持索引/切片操作，还有 [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg")，它返回一个带有额外比较功能的 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")。由于目前只有 PostgreSQL 支持数组，因此只在 PostgreSQL
    上有效。还新增了一个支持 PG 的“ORDER BY”扩展的新构造 [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by")。
- en: See also
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Function features, “WITHIN GROUP”, array_agg and set aggregate functions](migration_11.html#change-3132)'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新函数功能，“WITHIN GROUP”，array_agg 和 set 聚合函数](migration_11.html#change-3132)'
- en: 'References: [#3132](https://www.sqlalchemy.org/trac/ticket/3132)'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3132](https://www.sqlalchemy.org/trac/ticket/3132)
- en: '**[sql] [feature]**'
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new type to core [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"). This is the base of the PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type, and is now part of Core to begin
    supporting various SQL-standard array-supporting features including some functions
    and eventual support for native arrays on other databases that have an “array”
    concept, such as DB2 or Oracle. Additionally, new operators [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") have been added. These support not just array
    constructs on PostgreSQL, but also subqueries that are usable on MySQL (but sadly
    not on PostgreSQL).
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在核心中新增了一个新类型 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")。这是
    PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 类型的基础，现在已经成为核心的一部分，以开始支持各种 SQL 标准的数组支持功能，包括一些函数和最终支持其他具有“数组”概念的数据库上的本地数组，如
    DB2 或 Oracle。此外，还添加了新的运算符 [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") 和 [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")。这些不仅支持 PostgreSQL 上的数组构造，还支持可在 MySQL 上使用的子查询（但遗憾的是在
    PostgreSQL 上不可用）。
- en: See also
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Array support added to Core; new ANY and ALL operators](migration_11.html#change-3516)'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心添加了数组支持；新增了 ANY 和 ALL 运算符](migration_11.html#change-3516)'
- en: 'References: [#3516](https://www.sqlalchemy.org/trac/ticket/3516)'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3516](https://www.sqlalchemy.org/trac/ticket/3516)
- en: '**[sql] [change] [mysql]**'
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change] [mysql]**'
- en: The system by which a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") considers itself to be an “auto increment” column
    has been changed, such that autoincrement is no longer implicitly enabled for
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that has a composite primary key. In order to accommodate being able to enable
    autoincrement for a composite PK member column while at the same time maintaining
    SQLAlchemy’s long standing behavior of enabling implicit autoincrement for a single
    integer primary key, a third state has been added to the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter `"auto"`, which is now the default.
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    认为自己是“自动增量”列的系统已更改，因此不再为具有复合主键的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 隐式启用自动增量。为了能够为复合主键成员列启用自动增量，同时保持 SQLAlchemy 长期以来为单个整数主键启用隐式自动增量的行为，已将第三状态添加到
    [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 参数中 `"auto"`，这现在是默认值。'
- en: See also
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为复合主键列隐式启用 .autoincrement 指令](migration_11.html#change-3216)'
- en: '[No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)'
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为具有 AUTO_INCREMENT 的复合主键生成隐式 KEY](migration_11.html#change-mysql-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: '**[sql] [bug]**'
  id: totrans-875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '`FromClause.count()` is deprecated. This function makes use of an arbitrary
    column in the table and is not reliable; for Core use, `func.count()` should be
    preferred.'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FromClause.count()` 已被弃用。该函数使用表中的任意列，并不可靠；对于 Core 使用，应优先使用 `func.count()`。'
- en: 'References: [#3724](https://www.sqlalchemy.org/trac/ticket/3724)'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3724](https://www.sqlalchemy.org/trac/ticket/3724)
- en: '**[sql] [bug]**'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed an assertion that would raise somewhat inappropriately if a [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") were associated with a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is associated with a lower-case-t [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"); the association should be ignored for
    the purposes of associating the index with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个断言，如果一个与小写-t [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") 关联的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联了一个 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")，则会不太恰当地引发；为了将索引与 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 关联起来，应忽略该关联。
- en: 'References: [#3616](https://www.sqlalchemy.org/trac/ticket/3616)'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3616](https://www.sqlalchemy.org/trac/ticket/3616)
- en: '**[sql] [bug]**'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") construct is now a fully fledged Core
    expression element which is late-evaluated at compile time. Previously, the function
    was only a conversion function which would handle different expression inputs
    by returning either a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") of a column-oriented expression or a copy of
    a given [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object, which in particular prevented
    the operation from being logically maintained when an ORM-level expression transformation
    would convert a column to a bound parameter (e.g. for lazy loading).
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") 构造现在是一个完全成熟的 Core 表达式元素，在编译时进行延迟评估。以前，该函数只是一个转换函数，通过返回一个
    [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    或基于列的表达式的副本的 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 处理不同的表达式输入，特别是当 ORM 级别的表达式转换将列转换为绑定参数时（例如用于延迟加载）时，该操作无法被逻辑地维护。'
- en: See also
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The type_coerce function is now a persistent SQL element](migration_11.html#change-3531)'
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[type_coerce 函数现在是一个持久的 SQL 元素](migration_11.html#change-3531)'
- en: 'References: [#3531](https://www.sqlalchemy.org/trac/ticket/3531)'
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3531](https://www.sqlalchemy.org/trac/ticket/3531)
- en: '**[sql] [bug]**'
  id: totrans-886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") type extender will now work in conjunction with
    a [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    implementation, typically [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") with regards to ensuring that the per-table events
    are propagated from the implementation type to the outer type. These events are
    used to ensure that the constraints or PostgreSQL types (e.g. ENUM) are correctly
    created (and possibly dropped) along with the parent table.
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类型扩展现在将与[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")实现一起工作，通常是[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")或[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，以确保从实现类型传播到外部类型的每个表事件。这些事件用于确保约束或 PostgreSQL 类型（例如
    ENUM）与父表一起正确创建（可能删除）。'
- en: See also
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[TypeDecorator now works with Enum, Boolean, “schema” types automatically](migration_11.html#change-2919)'
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TypeDecorator 现在自动与 Enum、Boolean、“模式”类型配合工作](migration_11.html#change-2919)'
- en: 'References: [#2919](https://www.sqlalchemy.org/trac/ticket/2919)'
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2919](https://www.sqlalchemy.org/trac/ticket/2919)
- en: '**[sql] [bug]**'
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The behavior of the [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union
    "sqlalchemy.sql.expression.union") construct and related constructs such as [`Query.union()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.union
    "sqlalchemy.orm.Query.union") now handle the case where the embedded SELECT statements
    need to be parenthesized due to the fact that they include LIMIT, OFFSET and/or
    ORDER BY. These queries **do not work on SQLite**, and will fail on that backend
    as they did before, but should now work on all other backends.
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")构造及相关构造如[`Query.union()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.union
    "sqlalchemy.orm.Query.union")现在处理嵌套的 SELECT 语句需要加括号的情况，因为它们包含 LIMIT、OFFSET 和/或
    ORDER BY。这些查询**在 SQLite 上不起作用**，并且在该后端上会像以前一样失败，但现在应该在所有其他后端上起作用。'
- en: See also
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[A UNION or similar of SELECTs with LIMIT/OFFSET/ORDER BY now parenthesizes
    the embedded selects](migration_11.html#change-2528)'
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 LIMIT/OFFSET/ORDER BY 的 SELECT 的 UNION 或类似操作现在会给嵌套的 SELECT 加括号](migration_11.html#change-2528)'
- en: 'References: [#2528](https://www.sqlalchemy.org/trac/ticket/2528)'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2528](https://www.sqlalchemy.org/trac/ticket/2528)
- en: schema
  id: totrans-896
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [enhancement]**'
  id: totrans-897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [增强]**'
- en: The default generation functions passed to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are now run through “update_wrapper”, or an
    equivalent function if a callable non-function is passed, so that introspection
    tools preserve the name and docstring of the wrapped function. Pull request courtesy
    hsum.
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的默认生成函数现在通过“update_wrapper”运行，或者如果传递了可调用的非函数，则通过等效函数运行，以便内省工具保留包装函数的名称和文档字符串。拉取请求由
    hsum 提供。
- en: postgresql
  id: totrans-899
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for PostgreSQL’s INSERT..ON CONFLICT using a new PostgreSQL-specific
    [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.dml.Insert")
    object. Pull request and extensive efforts here by Robin Thomas.
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 的 INSERT..ON CONFLICT 的支持，使用了一个新的 PostgreSQL 特定的[`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.dml.Insert")对象。由 Robin Thomas 在此处进行了拉取请求和大量工作。
- en: See also
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for INSERT..ON CONFLICT (DO UPDATE | DO NOTHING)](migration_11.html#change-3529)'
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持 INSERT..ON CONFLICT (DO UPDATE | DO NOTHING)](migration_11.html#change-3529)'
- en: 'References: [#3529](https://www.sqlalchemy.org/trac/ticket/3529)'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3529](https://www.sqlalchemy.org/trac/ticket/3529)
- en: '**[postgresql] [feature]**'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: The DDL for DROP INDEX will emit “CONCURRENTLY” if the `postgresql_concurrently`
    flag is set upon the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") and if the database in use is detected as PostgreSQL
    version 9.2 or greater. For CREATE INDEX, database version detection is also added
    which will omit the clause if PG version is less than 8.2\. Pull request courtesy
    Iuri de Silvio.
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")上设置了`postgresql_concurrently`标志，并且检测到正在使用的数据库为PostgreSQL版本9.2或更高版本，则DROP
    INDEX的DDL将发出“CONCURRENTLY”。对于CREATE INDEX，还添加了数据库版本检测，如果PG版本低于8.2，则将省略该子句。感谢Iuri
    de Silvio提供的拉取请求。
- en: '**[postgresql] [feature]**'
  id: totrans-907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added new parameter `PGInspector.get_view_names.include`, allowing specification
    for what kinds of views should be returned. Currently “plain” and “materialized”
    views are included. Pull request courtesy Sebastian Bank.
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数`PGInspector.get_view_names.include`，允许指定应返回哪种类型的视图。当前包括“plain”和“materialized”视图。感谢Sebastian
    Bank提供的拉取请求。
- en: 'References: [#3588](https://www.sqlalchemy.org/trac/ticket/3588)'
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3588](https://www.sqlalchemy.org/trac/ticket/3588)
- en: '**[postgresql] [feature]**'
  id: totrans-910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added `postgresql_tablespace` as an argument to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") to allow specification of TABLESPACE for an index in
    PostgreSQL. Complements the same-named parameter on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Benjamin Bertrand.
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`postgresql_tablespace`作为参数添加到[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")中，以允许在PostgreSQL中为索引指定TABLESPACE。与[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上的同名参数相辅相成。感谢Benjamin Bertrand提供的拉取请求。
- en: 'References: [#3720](https://www.sqlalchemy.org/trac/ticket/3720)'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3720](https://www.sqlalchemy.org/trac/ticket/3720)
- en: '**[postgresql] [feature]**'
  id: totrans-913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added new parameter [`GenerativeSelect.with_for_update.key_share`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.key_share
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"), which will render
    the `FOR NO KEY UPDATE` version of `FOR UPDATE` and `FOR KEY SHARE` instead of
    `FOR SHARE` on the PostgreSQL backend. Pull request courtesy Sergey Skopin.
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`GenerativeSelect.with_for_update.key_share`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.key_share
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")，它将在PostgreSQL后端上呈现`FOR
    NO KEY UPDATE`版本的`FOR UPDATE`和`FOR KEY SHARE`，而不是`FOR SHARE`。感谢Sergey Skopin提供的拉取请求。
- en: '**[postgresql] [feature] [oracle]**'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能] [oracle]**'
- en: Added new parameter [`GenerativeSelect.with_for_update.skip_locked`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.skip_locked
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"), which will render
    the `SKIP LOCKED` phrase for a `FOR UPDATE` or `FOR SHARE` lock on the PostgreSQL
    and Oracle backends. Pull request courtesy Jack Zhou.
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`GenerativeSelect.with_for_update.skip_locked`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.skip_locked
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")，它将在PostgreSQL和Oracle后端上为`FOR
    UPDATE`或`FOR SHARE`锁呈现`SKIP LOCKED`短语。感谢Jack Zhou提供的拉取请求。
- en: '**[postgresql] [feature]**'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added a new dialect for the PyGreSQL PostgreSQL dialect. Thanks to Christoph
    Zwerschke and Kaolin Imago Fire for their efforts.
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PyGreSQL PostgreSQL方言添加了一个新的方言。感谢Christoph Zwerschke和Kaolin Imago Fire的努力。
- en: '**[postgresql] [feature]**'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added a new constant `JSON.NULL`, indicating that the JSON NULL value should
    be used for a value regardless of other settings.
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新常量`JSON.NULL`，表示应使用JSON NULL值作为值，而不考虑其他设置。
- en: See also
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New JSON.NULL Constant Added](migration_11.html#change-3514-jsonnull)'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新增JSON.NULL常量](migration_11.html#change-3514-jsonnull)'
- en: 'References: [#3514](https://www.sqlalchemy.org/trac/ticket/3514)'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3514](https://www.sqlalchemy.org/trac/ticket/3514)
- en: '**[postgresql] [change]**'
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [更改]**'
- en: The `sqlalchemy.dialects.postgres` module, long deprecated, is removed; this
    has emitted a warning for many years and projects should be calling upon `sqlalchemy.dialects.postgresql`.
    Engine URLs of the form `postgres://` will still continue to function, however.
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 长期弃用的`sqlalchemy.dialects.postgres`模块已被移除；多年来一直发出警告，项目应该调用`sqlalchemy.dialects.postgresql`。形式为`postgres://`的引擎URL仍将继续运行。
- en: '**[postgresql] [bug]**'
  id: totrans-926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added support for reflecting the source of materialized views to the PostgreSQL
    version of the [`Inspector.get_view_definition()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_definition
    "sqlalchemy.engine.reflection.Inspector.get_view_definition") method.
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对将物化视图源反射到[`Inspector.get_view_definition()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_definition
    "sqlalchemy.engine.reflection.Inspector.get_view_definition")方法的PostgreSQL版本的支持。
- en: 'References: [#3587](https://www.sqlalchemy.org/trac/ticket/3587)'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3587](https://www.sqlalchemy.org/trac/ticket/3587)
- en: '**[postgresql] [bug]**'
  id: totrans-929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The use of a [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") object that refers to a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") subtype will now emit the expected “CREATE
    TYPE” and “DROP TYPE” DDL when the type is used within a “CREATE TABLE” or “DROP
    TABLE”.
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用了一个引用[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")或[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")子类型的[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")对象现在在类型在“CREATE TABLE”或“DROP TABLE”中使用时会发出预期的“CREATE
    TYPE”和“DROP TYPE” DDL。
- en: See also
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ARRAY with ENUM will now emit CREATE TYPE for the ENUM](migration_11.html#change-2729)'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[带有ENUM的ARRAY现在将为ENUM发出CREATE TYPE](migration_11.html#change-2729)'
- en: 'References: [#2729](https://www.sqlalchemy.org/trac/ticket/2729)'
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2729](https://www.sqlalchemy.org/trac/ticket/2729)
- en: '**[postgresql] [bug]**'
  id: totrans-934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The “hashable” flag on special datatypes such as [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY"), [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") is now set to False, which allows these
    types to be fetchable in ORM queries that include entities within the row.
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特殊数据类型如[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")、[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")和[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")上的“可哈希”标志现在设置为False，这允许在包含行内实体的ORM查询中获取这些类型。
- en: See also
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changes regarding “unhashable” types, impacts deduping of ORM rows](migration_11.html#change-3499)'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关于“不可哈希”类型的更改，影响ORM行的去重](migration_11.html#change-3499)'
- en: '[ARRAY and JSON types now correctly specify “unhashable”](migration_11.html#change-3499-postgresql)'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ARRAY和JSON类型现在正确指定“不可哈希”](migration_11.html#change-3499-postgresql)'
- en: 'References: [#3499](https://www.sqlalchemy.org/trac/ticket/3499)'
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3499](https://www.sqlalchemy.org/trac/ticket/3499)
- en: '**[postgresql] [bug]**'
  id: totrans-940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type now supports multidimensional indexed
    access, e.g. expressions such as `somecol[5][6]` without any need for explicit
    casts or type coercions, provided that the [`ARRAY.dimensions`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.params.dimensions
    "sqlalchemy.dialects.postgresql.ARRAY") parameter is set to the desired number
    of dimensions.
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 类型现在支持多维索引访问，例如表达式`somecol[5][6]`，无需任何显式转换或类型强制转换，只要[`ARRAY.dimensions`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.params.dimensions
    "sqlalchemy.dialects.postgresql.ARRAY") 参数设置为所需的维数即可。
- en: See also
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[正确的SQL类型来自于ARRAY、JSON、HSTORE的索引访问](migration_11.html#change-3503)'
- en: 'References: [#3487](https://www.sqlalchemy.org/trac/ticket/3487)'
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3487](https://www.sqlalchemy.org/trac/ticket/3487)
- en: '**[postgresql] [bug]**'
  id: totrans-945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The return type for the [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") when using indexed access has been fixed
    to work like PostgreSQL itself, and returns an expression that itself is of type
    [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")
    or [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Previously, the accessor would return
    [`NullType`](../core/type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType")
    which disallowed subsequent JSON-like operators to be used.
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用索引访问时，[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 和 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 的返回类型已经修复，使其像 PostgreSQL 本身一样工作，并返回一个表达式，该表达式本身是类型为
    [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")
    或 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    的类型。之前，访问器会返回 [`NullType`](../core/type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType")，这将禁止使用后续类似
    JSON 的运算符。
- en: See also
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从数组、JSON、HSTORE 的索引访问中建立正确的 SQL 类型](migration_11.html#change-3503)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: '**[postgresql] [bug]**'
  id: totrans-950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON"), [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") and [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") datatypes now allow full control over
    the return type from an indexed textual access operation, either `column[someindex].astext`
    for a JSON type or `column[someindex]` for an HSTORE type, via the [`JSON.astext_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.astext_type
    "sqlalchemy.dialects.postgresql.JSON") and [`HSTORE.text_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE.params.text_type
    "sqlalchemy.dialects.postgresql.HSTORE") parameters.
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")、[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 和 [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 数据类型现在允许完全控制从索引文本访问操作的返回类型，对于 JSON 类型使用
    `column[someindex].astext`，对于 HSTORE 类型使用 `column[someindex]`，通过 [`JSON.astext_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.astext_type
    "sqlalchemy.dialects.postgresql.JSON") 和 [`HSTORE.text_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE.params.text_type
    "sqlalchemy.dialects.postgresql.HSTORE") 参数。'
- en: See also
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从数组、JSON、HSTORE 的索引访问中建立正确的 SQL 类型](migration_11.html#change-3503)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: '**[postgresql] [bug]**'
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") modifier no longer calls
    upon [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") implicitly, as PG’s JSON/JSONB
    types allow cross-casting between each other as well. Code that makes use of [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") on JSON indexed access, e.g. `col[someindex].cast(Integer)`,
    will need to be changed to call [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") explicitly.
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") 修饰符不再隐式调用 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")，因为 PG 的 JSON/JSONB 类型允许彼此之间的交叉转换。在
    JSON 索引访问上使用 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 的代码，例如 `col[someindex].cast(Integer)`，需要改为显式调用
    [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext")。'
- en: See also
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The JSON cast() operation now requires .astext is called explicitly](migration_11.html#change-3503-cast)'
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[现在需要显式调用 .astext 来执行 JSON 转换操作](migration_11.html#change-3503-cast)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: mysql
  id: totrans-960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added support for “autocommit” on MySQL drivers, via the AUTOCOMMIT isolation
    level setting. Pull request courtesy Roman Podoliaka.
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 MySQL 驱动程序添加了“自动提交”支持，通过 AUTOCOMMIT 隔离级别设置。 感谢 Roman Podoliaka 的拉取请求。
- en: See also
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added support for AUTOCOMMIT “isolation level”](migration_11.html#change-3332)'
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[增加了对“自动提交”“隔离级别”的支持](migration_11.html#change-3332)'
- en: 'References: [#3332](https://www.sqlalchemy.org/trac/ticket/3332)'
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3332](https://www.sqlalchemy.org/trac/ticket/3332)
- en: '**[mysql] [feature]**'
  id: totrans-966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    for MySQL 5.7\. The JSON type provides persistence of JSON values in MySQL as
    well as basic operator support of “getitem” and “getpath”, making use of the `JSON_EXTRACT`
    function in order to refer to individual paths in a JSON structure.
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 MySQL 5.7 添加了 [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")。 JSON 类型提供了在 MySQL 中持久化 JSON 值以及“getitem”和“getpath”基本运算符的支持，利用
    `JSON_EXTRACT` 函数来引用 JSON 结构中的单个路径。
- en: See also
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL JSON Support](migration_11.html#change-3547)'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL JSON 支持](migration_11.html#change-3547)'
- en: 'References: [#3547](https://www.sqlalchemy.org/trac/ticket/3547)'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3547](https://www.sqlalchemy.org/trac/ticket/3547)
- en: '**[mysql] [change]**'
  id: totrans-971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [更改]**'
- en: The MySQL dialect no longer generates an extra “KEY” directive when generating
    CREATE TABLE DDL for a table using InnoDB with a composite primary key with AUTO_INCREMENT
    on a column that isn’t the first column; to overcome InnoDB’s limitation here,
    the PRIMARY KEY constraint is now generated with the AUTO_INCREMENT column placed
    first in the list of columns.
  id: totrans-972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言不再在使用 InnoDB 的表的 CREATE TABLE DDL 生成额外的“KEY”指令，该表具有具有 AUTO_INCREMENT
    的复合主键，而不是在第一列上； 为了克服这里 InnoDB 的限制，PRIMARY KEY 约束现在生成的 AUTO_INCREMENT 列放在列列表中的第一位。
- en: See also
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)'
  id: totrans-974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为具有 AUTO_INCREMENT 的列的复合主键生成隐式 KEY](migration_11.html#change-mysql-3216)'
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对于复合主键列，不再隐式启用 .autoincrement 指令](migration_11.html#change-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: sqlite
  id: totrans-977
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [功能]**'
- en: The SQLite dialect now reflects ON UPDATE and ON DELETE phrases within foreign
    key constraints. Pull request courtesy Michal Petrucha.
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 方言现在反映了外键约束中的 ON UPDATE 和 ON DELETE 词组。 感谢 Michal Petrucha 的拉取请求。
- en: '**[sqlite] [feature]**'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [功能]**'
- en: The SQLite dialect now reflects the names of primary key constraints. Pull request
    courtesy Diana Clarke.
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 方言现在反映了主键约束的名称。 感谢 Diana Clarke 的拉取请求。
- en: See also
  id: totrans-982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflection of the name of PRIMARY KEY constraints](migration_11.html#change-3629)'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[主键约束名称的反射](migration_11.html#change-3629)'
- en: 'References: [#3629](https://www.sqlalchemy.org/trac/ticket/3629)'
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3629](https://www.sqlalchemy.org/trac/ticket/3629)
- en: '**[sqlite] [change]**'
  id: totrans-985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [更改]**'
- en: Added support to the SQLite dialect for the [`Inspector.get_schema_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_schema_names
    "sqlalchemy.engine.reflection.Inspector.get_schema_names") method to work with
    SQLite; pull request courtesy Brian Van Klaveren. Also repaired support for creation
    of indexes with schemas as well as reflection of foreign key constraints in schema-bound
    tables.
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQLite 方言添加了对 [`Inspector.get_schema_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_schema_names
    "sqlalchemy.engine.reflection.Inspector.get_schema_names") 方法的支持，以与 SQLite 一起工作；
    感谢 Brian Van Klaveren 的拉取请求。 修复了与模式有关的索引创建以及模式绑定表中外键约束的反射支持。
- en: See also
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved Support for Remote Schemas](migration_11.html#change-sqlite-schemas)'
  id: totrans-988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进的远程模式支持](migration_11.html#change-sqlite-schemas)'
- en: '**[sqlite] [bug]**'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: The workaround for right-nested joins on SQLite, where they are rewritten as
    subqueries in order to work around SQLite’s lack of support for this syntax, is
    lifted when SQLite version 3.7.16 or greater is detected.
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQLite 上的右嵌套连接的解决方案，其中它们被重写为子查询以解决 SQLite 不支持此语法的问题，当检测到 SQLite 版本为 3.7.16
    或更高版本时解除限制。
- en: See also
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Right-nested join workaround lifted for SQLite version 3.7.16](migration_11.html#change-3634)'
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 SQLite 版本 3.7.16 解除了右嵌套连接的限制](migration_11.html#change-3634)'
- en: 'References: [#3634](https://www.sqlalchemy.org/trac/ticket/3634)'
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3634](https://www.sqlalchemy.org/trac/ticket/3634)
- en: '**[sqlite] [bug]**'
  id: totrans-994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: The workaround for SQLite’s unexpected delivery of column names as `tablename.columnname`
    for some kinds of queries is now disabled when SQLite version 3.10.0 or greater
    is detected.
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到 SQLite 版本 3.10.0 或更高版本时，对于某些查询以 `tablename.columnname` 形式传递列名的 SQLite 的意外行为的解决方法现在已禁用。
- en: See also
  id: totrans-996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dotted column names workaround lifted for SQLite version 3.10.0](migration_11.html#change-3633)'
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[针对 SQLite 版本 3.10.0 解除的点列名解决方法](migration_11.html#change-3633)'
- en: 'References: [#3633](https://www.sqlalchemy.org/trac/ticket/3633)'
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3633](https://www.sqlalchemy.org/trac/ticket/3633)
- en: mssql
  id: totrans-999
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: The `mssql_clustered` flag available on [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") now defaults to `None`, and can be set to False which
    will render the NONCLUSTERED keyword in particular for a primary key, allowing
    a different index to be used as “clustered”. Pull request courtesy Saulius Žemaitaitis.
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mssql_clustered` 标志现在默认为 `None`，可设置为 False，这将为主键渲染 NONCLUSTERED 关键字，允许使用不同的索引作为“clustered”。感谢
    Saulius Žemaitaitis 的拉取请求。'
- en: '**[mssql] [feature]**'
  id: totrans-1002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Added basic isolation level support to the SQL Server dialects via [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") and [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameters.
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 和 [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数，为 SQL Server 方言添加了基本的隔离级别支持。
- en: See also
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added transaction isolation level support for SQL Server](migration_11.html#change-3534)'
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为 SQL Server 添加事务隔离级别支持](migration_11.html#change-3534)'
- en: 'References: [#3534](https://www.sqlalchemy.org/trac/ticket/3534)'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3534](https://www.sqlalchemy.org/trac/ticket/3534)
- en: '**[mssql] [change]**'
  id: totrans-1007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [更改]**'
- en: The `legacy_schema_aliasing` flag, introduced in version 1.0.5 as part of [#3424](https://www.sqlalchemy.org/trac/ticket/3424)
    to allow disabling of the MSSQL dialect’s attempts to create aliases for schema-qualified
    tables, now defaults to False; the old behavior is now disabled unless explicitly
    turned on.
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`legacy_schema_aliasing` 标志，作为版本 1.0.5 中的一部分引入，允许禁用 MSSQL 方言为模式限定表创建别名的尝试，现在默认为
    False；除非显式打开，否则旧行为现已禁用。'
- en: See also
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The legacy_schema_aliasing flag is now set to False](migration_11.html#change-3434)'
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[legacy_schema_aliasing 标志现在设置为 False](migration_11.html#change-3434)'
- en: 'References: [#3434](https://www.sqlalchemy.org/trac/ticket/3434)'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3434](https://www.sqlalchemy.org/trac/ticket/3434)
- en: '**[mssql] [bug]**'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Adjustments to the mxODBC dialect to make use of the `BinaryNull` symbol when
    appropriate in conjunction with the `VARBINARY` data type. Pull request courtesy
    Sheila Allen.
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整 mxODBC 方言以在适当情况下使用 `BinaryNull` 符号与 `VARBINARY` 数据类型一起。感谢 Sheila Allen 的拉取请求。
- en: '**[mssql] [bug]**'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed issue where the SQL Server dialect would reflect a string- or other variable-length
    column type with unbounded length by assigning the token `"max"` to the length
    attribute of the string. While using the `"max"` token explicitly is supported
    by the SQL Server dialect, it isn’t part of the normal contract of the base string
    types, and instead the length should just be left as None. The dialect now assigns
    the length to None on reflection of the type so that the type behaves normally
    in other contexts.
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言在将字符串或其他可变长度列类型反映为无界长度时分配字符串的长度属性为 `"max"` 的问题。虽然 SQL Server
    方言支持显式使用 `"max"` 标记，但它不是基本字符串类型的正常约定的一部分，而是长度应该保持为 None。方言现在在反射类型时将长度分配为 None，以便在其他上下文中正常使用该类型。
- en: See also
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[String / varlength types no longer represent “max” explicitly on reflection](migration_11.html#change-3504)'
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[String / varlength 类型在反射时不再显式表示“max”](migration_11.html#change-3504)'
- en: 'References: [#3504](https://www.sqlalchemy.org/trac/ticket/3504)'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3504](https://www.sqlalchemy.org/trac/ticket/3504)
- en: misc
  id: totrans-1019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [扩展]**'
- en: Added [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet") and [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") helper classes to the [Mutation Tracking](../orm/extensions/mutable.html)
    extension. Pull request courtesy Jeong YunWon.
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[Mutation Tracking](../orm/extensions/mutable.html)扩展添加了[`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet")和[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")辅助类。感谢Jeong YunWon的拉取请求。
- en: 'References: [#3297](https://www.sqlalchemy.org/trac/ticket/3297)'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3297](https://www.sqlalchemy.org/trac/ticket/3297)
- en: '**[bug] [ext]**'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: The docstring specified on a hybrid property or method is now honored at the
    class level, allowing it to work with tools like Sphinx autodoc. The mechanics
    here necessarily involve some wrapping of expressions to occur for hybrid properties,
    which may cause them to appear differently using introspection.
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在类级别尊重在混合属性或方法上指定的文档字符串，使其能够与Sphinx autodoc等工具一起使用。这里的机制必然涉及对混合属性进行一些包装，这可能会导致它们在内省时显示不同。
- en: See also
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Hybrid properties and methods now propagate the docstring as well as .info](migration_11.html#change-3653)'
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[混合属性和方法现在也传播文档字符串以及.info](migration_11.html#change-3653)'
- en: 'References: [#3653](https://www.sqlalchemy.org/trac/ticket/3653)'
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3653](https://www.sqlalchemy.org/trac/ticket/3653)
- en: '**[bug] [sybase]**'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [sybase]**'
- en: The unsupported Sybase dialect now raises `NotImplementedError` when attempting
    to compile a query that includes “offset”; Sybase has no straightforward “offset”
    feature.
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不支持的Sybase方言现在在尝试编译包含“offset”的查询时引发`NotImplementedError`；Sybase没有直接的“offset”功能。
- en: 'References: [#2278](https://www.sqlalchemy.org/trac/ticket/2278)'
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2278](https://www.sqlalchemy.org/trac/ticket/2278)
- en: 1.1.18
  id: totrans-1031
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.18
- en: 'Released: March 6, 2018'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年3月6日
- en: postgresql
  id: totrans-1033
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [py3k]**'
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误] [py3k]**'
- en: Fixed bug in PostgreSQL COLLATE / ARRAY adjustment first introduced in [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    where new behaviors in Python 3.7 regular expressions caused the fix to fail.
  id: totrans-1035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 PostgreSQL COLLATE / ARRAY 调整中首次引入的错误，最初在[#4006](https://www.sqlalchemy.org/trac/ticket/4006)中，Python
    3.7正则表达式的新行为导致修复失败。
- en: 'References: [#4208](https://www.sqlalchemy.org/trac/ticket/4208)'
  id: totrans-1036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4208](https://www.sqlalchemy.org/trac/ticket/4208)
- en: mysql
  id: totrans-1037
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: MySQL dialects now query the server version using `SELECT @@version` explicitly
    to the server to ensure we are getting the correct version information back. Proxy
    servers like MaxScale interfere with the value that is passed to the DBAPI’s connection.server_version
    value so this is no longer reliable.
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在显式使用`SELECT @@version`查询服务器版本，以确保我们获得正确的版本信息。代理服务器如MaxScale干扰了传递给DBAPI的connection.server_version值，因此这不再可靠。
- en: 'References: [#4205](https://www.sqlalchemy.org/trac/ticket/4205)'
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4205](https://www.sqlalchemy.org/trac/ticket/4205)
- en: postgresql
  id: totrans-1041
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [py3k]**'
  id: totrans-1042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误] [py3k]**'
- en: Fixed bug in PostgreSQL COLLATE / ARRAY adjustment first introduced in [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    where new behaviors in Python 3.7 regular expressions caused the fix to fail.
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 PostgreSQL COLLATE / ARRAY 调整中首次引入的错误，最初在[#4006](https://www.sqlalchemy.org/trac/ticket/4006)中，Python
    3.7正则表达式的新行为导致修复失败。
- en: 'References: [#4208](https://www.sqlalchemy.org/trac/ticket/4208)'
  id: totrans-1044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4208](https://www.sqlalchemy.org/trac/ticket/4208)
- en: mysql
  id: totrans-1045
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: MySQL dialects now query the server version using `SELECT @@version` explicitly
    to the server to ensure we are getting the correct version information back. Proxy
    servers like MaxScale interfere with the value that is passed to the DBAPI’s connection.server_version
    value so this is no longer reliable.
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在显式使用`SELECT @@version`查询服务器版本，以确保我们获得正确的版本信息。代理服务器如MaxScale干扰了传递给DBAPI的connection.server_version值，因此这不再可靠。
- en: 'References: [#4205](https://www.sqlalchemy.org/trac/ticket/4205)'
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4205](https://www.sqlalchemy.org/trac/ticket/4205)
- en: 1.1.17
  id: totrans-1049
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.17
- en: 'Released: February 22, 2018'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年2月22日
- en: '**[bug] [ext]**'
  id: totrans-1051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Repaired regression caused in 1.2.3 and 1.1.16 regarding association proxy objects,
    revising the approach to [#4185](https://www.sqlalchemy.org/trac/ticket/4185)
    when calculating the “owning class” of an association proxy to default to choosing
    the current class if the proxy object is not directly associated with a mapped
    class, such as a mixin.
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.2.3 和 1.1.16 中关于关联代理对象的回归，修订了在计算关联代理的“拥有类”时默认选择当前类的方法，如果代理对象与映射类没有直接关联，例如一个
    mixin。
- en: 'References: [#4185](https://www.sqlalchemy.org/trac/ticket/4185)'
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4185](https://www.sqlalchemy.org/trac/ticket/4185)
- en: 1.1.16
  id: totrans-1054
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.16
- en: 'Released: February 16, 2018'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年2月16日
- en: orm
  id: totrans-1056
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in post_update feature where an UPDATE is emitted when the parent
    object has been deleted but the dependent object is not. This issue has existed
    for a long time however since 1.2 now asserts rows matched for post_update, this
    was raising an error.
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在父对象已被删除但相关对象尚未删除时 post_update 功能会发出 UPDATE 的问题。这个问题已经存在很长时间，但自 1.2 版本开始为
    post_update 断言匹配的行数，这导致了错误。
- en: 'References: [#4187](https://www.sqlalchemy.org/trac/ticket/4187)'
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4187](https://www.sqlalchemy.org/trac/ticket/4187)
- en: '**[orm] [bug]**'
  id: totrans-1060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by fix for issue [#4116](https://www.sqlalchemy.org/trac/ticket/4116)
    affecting versions 1.2.2 as well as 1.1.15, which had the effect of mis-calculation
    of the “owning class” of an [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as the `NoneType` class in
    some declarative mixin/inheritance situations as well as if the association proxy
    were accessed off of an un-mapped class. The “figure out the owner” logic has
    been replaced by an in-depth routine that searches through the complete mapper
    hierarchy assigned to the class or subclass to determine the correct (we hope)
    match; will not assign the owner if no match is found. An exception is now raised
    if the proxy is used against an un-mapped instance.
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复问题 [#4116](https://www.sqlalchemy.org/trac/ticket/4116) 而引起的回归，影响版本 1.2.2
    和 1.1.15，导致在某些声明性 mixin/继承情况下以及如果关联代理从未映射的类中访问时，[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy)
    的“拥有类”被错误地计算为 `NoneType` 类。现在，“找到所有者”逻辑已被替换为一个深入的程序，该程序搜索分配给类或子类的完整映射器层次结构，以确定正确（我们希望）的匹配；如果找不到匹配项，则不会分配所有者。如果代理用于未映射的实例，则现在会引发异常。
- en: 'References: [#4185](https://www.sqlalchemy.org/trac/ticket/4185)'
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4185](https://www.sqlalchemy.org/trac/ticket/4185)
- en: '**[orm] [bug]**'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an object that is expunged during a rollback of a nested or
    subtransaction which also had its primary key mutated would not be correctly removed
    from the session, causing subsequent issues in using the session.
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在嵌套或子事务回滚期间被清除的对象，同时其主键被改变，会导致该对象未能正确从会话中移除的错误，从而导致后续使用会话时出现问题。
- en: 'References: [#4151](https://www.sqlalchemy.org/trac/ticket/4151)'
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4151](https://www.sqlalchemy.org/trac/ticket/4151)
- en: sql
  id: totrans-1066
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added [`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") and [`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") as top level imports in the `sqlalchemy.`
    and `sqlalchemy.sql.` namespace. Pull request courtesy Lele Gaifax.
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `sqlalchemy.` 和 `sqlalchemy.sql.` 命名空间中添加了 [`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") 和 [`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") 作为顶级导入。感谢 Lele Gaifax 提交的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") where using the “multi-values” format
    in combination with [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects as keys rather than strings would fail. Pull
    request courtesy Aubrey Stark-Toller.
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 中使用“multi-values”格式与 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象作为键而不是字符串时会失败的 bug。感谢 Aubrey Stark-Toller 提交的拉取请求。
- en: 'References: [#4162](https://www.sqlalchemy.org/trac/ticket/4162)'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4162](https://www.sqlalchemy.org/trac/ticket/4162)
- en: postgresql
  id: totrans-1072
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added “SSL SYSCALL error: Operation timed out” to the list of messages that
    trigger a “disconnect” scenario for the psycopg2 driver. Pull request courtesy
    André Cruz.'
  id: totrans-1074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将“SSL SYSCALL error: Operation timed out”添加到触发psycopg2驱动程序“断开”场景的消息列表中。感谢André
    Cruz的拉取请求。'
- en: '**[postgresql] [bug]**'
  id: totrans-1075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added “TRUNCATE” to the list of keywords accepted by the PostgreSQL dialect
    as an “autocommit”-triggering keyword. Pull request courtesy Jacob Hayes.
  id: totrans-1076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“TRUNCATE”添加到PostgreSQL方言接受的关键字列表中，作为“自动提交”触发关键字。感谢Jacob Hayes的拉取请求。
- en: mysql
  id: totrans-1077
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed bug where the MySQL “concat” and “match” operators failed to propagate
    kwargs to the left and right expressions, causing compiler options such as “literal_binds”
    to fail.
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL的“concat”和“match”运算符未能将kwargs传播到左右表达式的错误，导致编译器选项（如“literal_binds”）失败。
- en: 'References: [#4136](https://www.sqlalchemy.org/trac/ticket/4136)'
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4136](https://www.sqlalchemy.org/trac/ticket/4136)
- en: misc
  id: totrans-1081
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [池]**'
- en: Fixed a fairly serious connection pool bug where a connection that is acquired
    after being refreshed as a result of a user-defined [`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") or due to the 1.2-released “pre_ping” feature
    would not be correctly reset if the connection were returned to the pool by weakref
    cleanup (e.g. the front-facing object is garbage collected); the weakref would
    still refer to the previously invalidated DBAPI connection which would have the
    reset operation erroneously called upon it instead. This would lead to stack traces
    in the logs and a connection being checked into the pool without being reset,
    which can cause locking issues.
  id: totrans-1083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当严重的连接池错误，即在由于用户定义的[`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")或由于1.2版本发布的“pre_ping”功能导致刷新后获取的连接，如果连接由weakref清理（例如前端对象被垃圾回收）后返回到池中，该连接将不会被正确重置；弱引用仍将指向先前失效的DBAPI连接，而该连接将错误地调用重置操作。这将导致日志中的堆栈跟踪和连接被检入池中而未被重置，这可能导致锁定问题。
- en: 'References: [#4184](https://www.sqlalchemy.org/trac/ticket/4184)'
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4184](https://www.sqlalchemy.org/trac/ticket/4184)
- en: orm
  id: totrans-1085
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue in post_update feature where an UPDATE is emitted when the parent
    object has been deleted but the dependent object is not. This issue has existed
    for a long time however since 1.2 now asserts rows matched for post_update, this
    was raising an error.
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在父对象已被删除但依赖对象未被删除时，post_update功能会发出UPDATE的问题。这个问题已经存在很长时间，但自1.2版本开始，现在对于post_update会断言匹配的行数，这会引发错误。
- en: 'References: [#4187](https://www.sqlalchemy.org/trac/ticket/4187)'
  id: totrans-1088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4187](https://www.sqlalchemy.org/trac/ticket/4187)
- en: '**[orm] [bug]**'
  id: totrans-1089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression caused by fix for issue [#4116](https://www.sqlalchemy.org/trac/ticket/4116)
    affecting versions 1.2.2 as well as 1.1.15, which had the effect of mis-calculation
    of the “owning class” of an [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as the `NoneType` class in
    some declarative mixin/inheritance situations as well as if the association proxy
    were accessed off of an un-mapped class. The “figure out the owner” logic has
    been replaced by an in-depth routine that searches through the complete mapper
    hierarchy assigned to the class or subclass to determine the correct (we hope)
    match; will not assign the owner if no match is found. An exception is now raised
    if the proxy is used against an un-mapped instance.
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于问题[#4116](https://www.sqlalchemy.org/trac/ticket/4116)的修复引起的回归，影响了1.2.2版本以及1.1.15版本，导致在某些声明性mixin/继承情况下，[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")的“拥有类”被错误地计算为`NoneType`类，以及如果关联代理从未映射的类中访问。现在，“找到所有者”的逻辑已被替换为一个深入的例程，该例程通过搜索分配给类或子类的完整映射器层次结构来确定正确（我们希望）的匹配；如果找不到匹配项，则不会分配所有者。如果代理针对未映射的实例使用，则现在会引发异常。
- en: 'References: [#4185](https://www.sqlalchemy.org/trac/ticket/4185)'
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4185](https://www.sqlalchemy.org/trac/ticket/4185)
- en: '**[orm] [bug]**'
  id: totrans-1092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where an object that is expunged during a rollback of a nested or
    subtransaction which also had its primary key mutated would not be correctly removed
    from the session, causing subsequent issues in using the session.
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在嵌套或子事务回滚期间被清除的对象，同时其主键被突变，将不会被正确地从会话中移除的错误，导致在使用会话时出现后续问题。
- en: 'References: [#4151](https://www.sqlalchemy.org/trac/ticket/4151)'
  id: totrans-1094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4151](https://www.sqlalchemy.org/trac/ticket/4151)
- en: sql
  id: totrans-1095
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added [`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") and [`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") as top level imports in the `sqlalchemy.`
    and `sqlalchemy.sql.` namespace. Pull request courtesy Lele Gaifax.
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst")和[`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast")作为`sqlalchemy.`和`sqlalchemy.sql.`命名空间中的顶级导入添加。感谢
    Lele Gaifax 的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") where using the “multi-values” format
    in combination with [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects as keys rather than strings would fail. Pull
    request courtesy Aubrey Stark-Toller.
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")中使用“multi-values”格式与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象作为键而不是字符串时会失败的 bug。感谢 Aubrey Stark-Toller 的拉取请求。
- en: 'References: [#4162](https://www.sqlalchemy.org/trac/ticket/4162)'
  id: totrans-1100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4162](https://www.sqlalchemy.org/trac/ticket/4162)
- en: postgresql
  id: totrans-1101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added “SSL SYSCALL error: Operation timed out” to the list of messages that
    trigger a “disconnect” scenario for the psycopg2 driver. Pull request courtesy
    André Cruz.'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将“SSL SYSCALL error: Operation timed out”添加到了 psycopg2 驱动程序的“断开连接”场景触发消息列表中。感谢
    André Cruz 的拉取请求。'
- en: '**[postgresql] [bug]**'
  id: totrans-1104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “TRUNCATE” to the list of keywords accepted by the PostgreSQL dialect
    as an “autocommit”-triggering keyword. Pull request courtesy Jacob Hayes.
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“TRUNCATE”添加到了 PostgreSQL 方言接受的关键字列表中，作为“autocommit”触发关键字。感谢 Jacob Hayes 的拉取请求。
- en: mysql
  id: totrans-1106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where the MySQL “concat” and “match” operators failed to propagate
    kwargs to the left and right expressions, causing compiler options such as “literal_binds”
    to fail.
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL 的“concat”和“match”运算符未能将 kwargs 传播到左右表达式的 bug，导致编译器选项如“literal_binds”失败。
- en: 'References: [#4136](https://www.sqlalchemy.org/trac/ticket/4136)'
  id: totrans-1109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4136](https://www.sqlalchemy.org/trac/ticket/4136)
- en: misc
  id: totrans-1110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-1111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed a fairly serious connection pool bug where a connection that is acquired
    after being refreshed as a result of a user-defined [`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") or due to the 1.2-released “pre_ping” feature
    would not be correctly reset if the connection were returned to the pool by weakref
    cleanup (e.g. the front-facing object is garbage collected); the weakref would
    still refer to the previously invalidated DBAPI connection which would have the
    reset operation erroneously called upon it instead. This would lead to stack traces
    in the logs and a connection being checked into the pool without being reset,
    which can cause locking issues.
  id: totrans-1112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当严重的连接池 bug，当一个连接在由用户定义的[`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")或由 1.2 版本发布的“pre_ping”功能刷新后被获取时，如果连接被弱引用清理（例如前端对象被垃圾回收），则连接不会被正确重置；弱引用仍然会指向先前失效的
    DBAPI 连接，导致重置操作错误地被调用。这将导致日志中的堆栈跟踪和连接被检入池中而未被重置，可能会导致锁定问题。
- en: 'References: [#4184](https://www.sqlalchemy.org/trac/ticket/4184)'
  id: totrans-1113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4184](https://www.sqlalchemy.org/trac/ticket/4184)
- en: 1.1.15
  id: totrans-1114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.15
- en: 'Released: November 3, 2017'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年11月3日
- en: orm
  id: totrans-1116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-1117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed bug where the association proxy would inadvertently link itself to an
    [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object if it were called first with the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as a parent, causing errors upon subsequent
    usage.
  id: totrans-1118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理在首次调用时会不经意地将自身链接到一个[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象的 bug，如果首次调用时将[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")作为父级，会导致后续使用时出现错误。
- en: 'References: [#4116](https://www.sqlalchemy.org/trac/ticket/4116)'
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4116](https://www.sqlalchemy.org/trac/ticket/4116)
- en: '**[orm] [bug]**'
  id: totrans-1120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM relationship would warn against conflicting sync targets
    (e.g. two relationships would both write to the same column) for sibling classes
    in an inheritance hierarchy, where the two relationships would never actually
    conflict during writes.
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，ORM关系会警告存在冲突的同步目标（例如，两个关系都写入同一列）对于继承层次结构中的兄弟类，这两个关系实际上永远不会在写入时发生冲突。
- en: 'References: [#4078](https://www.sqlalchemy.org/trac/ticket/4078)'
  id: totrans-1122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4078](https://www.sqlalchemy.org/trac/ticket/4078)
- en: '**[orm] [bug]**'
  id: totrans-1123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where correlated select used against single-table inheritance entity
    would fail to render correctly in the outer query, due to adjustment for single
    inheritance discriminator criteria inappropriately re-applying the criteria to
    the outer query.
  id: totrans-1124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对单表继承实体使用相关选择时，在外部查询中无法正确呈现的bug，因为单一继承鉴别器标准的调整不当地重新应用于外部查询。
- en: 'References: [#4103](https://www.sqlalchemy.org/trac/ticket/4103)'
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4103](https://www.sqlalchemy.org/trac/ticket/4103)
- en: orm declarative
  id: totrans-1126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed a bug where a descriptor, which is a mapped column or a relationship elsewhere
    in a hierarchy based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), would be referenced during
    a refresh operation, leading to an error since the attribute is not mapped as
    a mapper property. A similar issue can arise for other attributes like the “type”
    column added by [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") if the class fails to include
    “concrete=True” in its mapper, however the check here should also prevent that
    scenario from causing a problem.
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中描述符，即基于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")的映射列或关系在刷新操作期间被引用，导致错误，因为该属性未映射为映射器属性。如果类未在其映射器中包含“concrete=True”，则类似的问题也可能出现，例如[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")添加的“type”列，但此处的检查也应防止该场景引起问题。
- en: 'References: [#4124](https://www.sqlalchemy.org/trac/ticket/4124)'
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4124](https://www.sqlalchemy.org/trac/ticket/4124)
- en: sql
  id: totrans-1130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where `__repr__` of [`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") would fail if the argument were a tuple. Pull
    request courtesy Nicolas Caniart.
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当参数为元组时，[`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")的`__repr__`会失败。感谢Nicolas Caniart的拉取请求。
- en: 'References: [#4126](https://www.sqlalchemy.org/trac/ticket/4126)'
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4126](https://www.sqlalchemy.org/trac/ticket/4126)
- en: '**[sql] [bug]**'
  id: totrans-1134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the recently added [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") and [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") methods didn’t work when called
    as methods, as opposed to using the standalone functions [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_"). Also added documentation examples for these
    relatively unintuitive SQL operators.
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，最近添加的[`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")和[`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法在作为方法调用时无法正常工作，而不是使用独立函数[`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")和[`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")。还为这些相对晦涩的SQL操作符添加了文档示例。
- en: 'References: [#4093](https://www.sqlalchemy.org/trac/ticket/4093)'
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4093](https://www.sqlalchemy.org/trac/ticket/4093)
- en: postgresql
  id: totrans-1137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Made further fixes to the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") class in conjunction with COLLATE, as the fix made in
    [#4006](https://www.sqlalchemy.org/trac/ticket/4006) failed to accommodate for
    a multidimensional array.
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了与COLLATE一起使用[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")类的问题，因为在[#4006](https://www.sqlalchemy.org/trac/ticket/4006)中进行的修复未能适应多维数组。
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-1141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function where passing an argument that
    is already of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"),
    such as a PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct, would produce a `ValueError`,
    due to the function attempting to nest the arrays.
  id: totrans-1142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") 函数中的错误，其中传递已经是 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 类型的参数，例如 PostgreSQL 的 [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 构造，会产生 `ValueError`，因为函数尝试嵌套数组。
- en: 'References: [#4107](https://www.sqlalchemy.org/trac/ticket/4107)'
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4107](https://www.sqlalchemy.org/trac/ticket/4107)
- en: '**[postgresql] [bug]**'
  id: totrans-1144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL `Insert.on_conflict_do_update()` which would prevent
    the insert statement from being used as a CTE, e.g. via `Insert.cte()`, within
    another statement.
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL `Insert.on_conflict_do_update()` 中的错误，该错误会阻止插入语句作为 CTE（例如通过 `Insert.cte()`）在另一个语句中使用。
- en: 'References: [#4074](https://www.sqlalchemy.org/trac/ticket/4074)'
  id: totrans-1146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4074](https://www.sqlalchemy.org/trac/ticket/4074)
- en: mysql
  id: totrans-1147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Warning emitted when MariaDB 10.2.8 or earlier in the 10.2 series is detected
    as there are major issues with CHECK constraints within these versions that were
    resolved as of 10.2.9.
  id: totrans-1149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到 MariaDB 10.2.8 或更早版本的 10.2 系列时发出警告，因为这些版本中的 CHECK 约束存在重大问题，这些问题已在 10.2.9
    中解决。
- en: Note that this changelog message was NOT released with SQLAlchemy 1.2.0b3 and
    was added retroactively.
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此更改日志消息未随 SQLAlchemy 1.2.0b3 发布，而是事后添加的。
- en: 'References: [#4097](https://www.sqlalchemy.org/trac/ticket/4097)'
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4097](https://www.sqlalchemy.org/trac/ticket/4097)
- en: '**[mysql] [bug]**'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7.20 now warns for use of the @tx_isolation variable; a version check
    is now performed and uses @transaction_isolation instead to prevent this warning.
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7.20 现在会警告使用 @tx_isolation 变量；现在执行版本检查并使用 @transaction_isolation 以防止此警告。
- en: 'References: [#4120](https://www.sqlalchemy.org/trac/ticket/4120)'
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4120](https://www.sqlalchemy.org/trac/ticket/4120)
- en: '**[mysql] [bug]**'
  id: totrans-1155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where CURRENT_TIMESTAMP would not reflect correctly in the MariaDB
    10.2 series due to a syntax change, where the function is now represented as `current_timestamp()`.
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MariaDB 10.2 系列中 CURRENT_TIMESTAMP 由于语法更改而无法正确反映的问题，其中该函数现在表示为 `current_timestamp()`。
- en: 'References: [#4096](https://www.sqlalchemy.org/trac/ticket/4096)'
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4096](https://www.sqlalchemy.org/trac/ticket/4096)
- en: '**[mysql] [bug]**'
  id: totrans-1158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'MariaDB 10.2 now supports CHECK constraints (warning: use version 10.2.9 or
    greater due to upstream issues noted in [#4097](https://www.sqlalchemy.org/trac/ticket/4097)).
    Reflection now takes these CHECK constraints into account when they are present
    in the `SHOW CREATE TABLE` output.'
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MariaDB 10.2 现在支持 CHECK 约束（警告：由于上游问题，请使用版本 10.2.9 或更高版本）。反射现在在 `SHOW CREATE
    TABLE` 输出中考虑这些 CHECK 约束。
- en: 'References: [#4098](https://www.sqlalchemy.org/trac/ticket/4098)'
  id: totrans-1160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4098](https://www.sqlalchemy.org/trac/ticket/4098)
- en: sqlite
  id: totrans-1161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug where SQLite CHECK constraint reflection would fail if the referenced
    table were in a remote schema, e.g. on SQLite a remote database referred to by
    ATTACH.
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite CHECK 约束反射失败的错误，如果引用的表位于远程模式中，例如在 SQLite 中由 ATTACH 引用的远程数据库。
- en: 'References: [#4099](https://www.sqlalchemy.org/trac/ticket/4099)'
  id: totrans-1164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4099](https://www.sqlalchemy.org/trac/ticket/4099)
- en: mssql
  id: totrans-1165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a full range of “connection closed” exception codes to the PyODBC dialect
    for SQL Server, including ‘08S01’, ‘01002’, ‘08003’, ‘08007’, ‘08S02’, ‘08001’,
    ‘HYT00’, ‘HY010’. Previously, only ‘08S01’ was covered.
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 的 PyODBC 方言添加了完整的“连接关闭”异常代码范围，包括 ‘08S01’、‘01002’、‘08003’、‘08007’、‘08S02’、‘08001’、‘HYT00’、‘HY010’。以前只覆盖了
    ‘08S01’。
- en: 'References: [#4095](https://www.sqlalchemy.org/trac/ticket/4095)'
  id: totrans-1168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4095](https://www.sqlalchemy.org/trac/ticket/4095)
- en: orm
  id: totrans-1169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-1170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed bug where the association proxy would inadvertently link itself to an
    [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object if it were called first with the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as a parent, causing errors upon subsequent
    usage.
  id: totrans-1171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当关联代理在首次调用时不经意地将自身链接到一个[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象时，如果首次调用时[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")作为父级，会在后续使用时导致错误的bug。
- en: 'References: [#4116](https://www.sqlalchemy.org/trac/ticket/4116)'
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4116](https://www.sqlalchemy.org/trac/ticket/4116)
- en: '**[orm] [bug]**'
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM relationship would warn against conflicting sync targets
    (e.g. two relationships would both write to the same column) for sibling classes
    in an inheritance hierarchy, where the two relationships would never actually
    conflict during writes.
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM关系在继承层次结构中的兄弟类中可能会发出警告，提示存在冲突的同步目标（例如，两个关系都写入同一列），而实际上这两个关系在写入时永远不会发生冲突。
- en: 'References: [#4078](https://www.sqlalchemy.org/trac/ticket/4078)'
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4078](https://www.sqlalchemy.org/trac/ticket/4078)
- en: '**[orm] [bug]**'
  id: totrans-1176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where correlated select used against single-table inheritance entity
    would fail to render correctly in the outer query, due to adjustment for single
    inheritance discriminator criteria inappropriately re-applying the criteria to
    the outer query.
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对单表继承实体使用相关子查询会导致外部查询无法正确渲染的bug，因为不恰当地重新应用了单一继承鉴别器条件以重新应用条件到外部查询。
- en: 'References: [#4103](https://www.sqlalchemy.org/trac/ticket/4103)'
  id: totrans-1178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4103](https://www.sqlalchemy.org/trac/ticket/4103)
- en: orm declarative
  id: totrans-1179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed a bug where a descriptor, which is a mapped column or a relationship elsewhere
    in a hierarchy based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), would be referenced during
    a refresh operation, leading to an error since the attribute is not mapped as
    a mapper property. A similar issue can arise for other attributes like the “type”
    column added by [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") if the class fails to include
    “concrete=True” in its mapper, however the check here should also prevent that
    scenario from causing a problem.
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在刷新操作期间引用描述符（即基于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")的映射列或关系）会导致错误的bug，因为该属性未映射为映射器属性。如果类未在其映射器中包含“concrete=True”，则类似的问题也可能出现在其他属性上，例如[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")添加的“type”列，但此处的检查也应防止该场景引起问题。
- en: 'References: [#4124](https://www.sqlalchemy.org/trac/ticket/4124)'
  id: totrans-1182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4124](https://www.sqlalchemy.org/trac/ticket/4124)
- en: sql
  id: totrans-1183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-1184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where `__repr__` of [`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") would fail if the argument were a tuple. Pull
    request courtesy Nicolas Caniart.
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当[`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")的`__repr__`参数为元组时会失败的bug。感谢Nicolas Caniart的拉取请求。
- en: 'References: [#4126](https://www.sqlalchemy.org/trac/ticket/4126)'
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4126](https://www.sqlalchemy.org/trac/ticket/4126)
- en: '**[sql] [bug]**'
  id: totrans-1187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the recently added [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") and [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") methods didn’t work when called
    as methods, as opposed to using the standalone functions [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_"). Also added documentation examples for these
    relatively unintuitive SQL operators.
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近添加的 [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 和 [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") 方法在作为方法调用时无法正常工作的错误，而不是使用独立函数
    [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    和 [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")。还为这些相对晦涩的
    SQL 操作符添加了文档示例。
- en: 'References: [#4093](https://www.sqlalchemy.org/trac/ticket/4093)'
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4093](https://www.sqlalchemy.org/trac/ticket/4093)
- en: postgresql
  id: totrans-1190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Made further fixes to the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") class in conjunction with COLLATE, as the fix made in
    [#4006](https://www.sqlalchemy.org/trac/ticket/4006) failed to accommodate for
    a multidimensional array.
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了与 COLLATE 结合使用的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 类的问题，因为在 [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    中进行的修复未能考虑到多维数组。
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-1194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function where passing an argument that
    is already of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"),
    such as a PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct, would produce a `ValueError`,
    due to the function attempting to nest the arrays.
  id: totrans-1195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")函数中的错误，当传递一个已经是[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")类型的参数时，比如一个 PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 构造，会产生`ValueError`，因为函数尝试嵌套数组。
- en: 'References: [#4107](https://www.sqlalchemy.org/trac/ticket/4107)'
  id: totrans-1196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4107](https://www.sqlalchemy.org/trac/ticket/4107)
- en: '**[postgresql] [bug]**'
  id: totrans-1197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL `Insert.on_conflict_do_update()` which would prevent
    the insert statement from being used as a CTE, e.g. via `Insert.cte()`, within
    another statement.
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL `Insert.on_conflict_do_update()` 中的错误，该错误会阻止插入语句作为 CTE 使用，例如通过
    `Insert.cte()` 在另一个语句中。
- en: 'References: [#4074](https://www.sqlalchemy.org/trac/ticket/4074)'
  id: totrans-1199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4074](https://www.sqlalchemy.org/trac/ticket/4074)
- en: mysql
  id: totrans-1200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Warning emitted when MariaDB 10.2.8 or earlier in the 10.2 series is detected
    as there are major issues with CHECK constraints within these versions that were
    resolved as of 10.2.9.
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到 MariaDB 10.2.8 或更早版本的 10.2 系列时发出警告，因为这些版本中的 CHECK 约束存在重大问题，这些问题在 10.2.9
    中已解决。
- en: Note that this changelog message was NOT released with SQLAlchemy 1.2.0b3 and
    was added retroactively.
  id: totrans-1203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此更改日志消息未随 SQLAlchemy 1.2.0b3 发布，而是事后添加的。
- en: 'References: [#4097](https://www.sqlalchemy.org/trac/ticket/4097)'
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4097](https://www.sqlalchemy.org/trac/ticket/4097)
- en: '**[mysql] [bug]**'
  id: totrans-1205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7.20 now warns for use of the @tx_isolation variable; a version check
    is now performed and uses @transaction_isolation instead to prevent this warning.
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7.20 现在警告使用 @tx_isolation 变量；现在执行版本检查并使用 @transaction_isolation 代替以防止此警告。
- en: 'References: [#4120](https://www.sqlalchemy.org/trac/ticket/4120)'
  id: totrans-1207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4120](https://www.sqlalchemy.org/trac/ticket/4120)
- en: '**[mysql] [bug]**'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where CURRENT_TIMESTAMP would not reflect correctly in the MariaDB
    10.2 series due to a syntax change, where the function is now represented as `current_timestamp()`.
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MariaDB 10.2 系列中，CURRENT_TIMESTAMP 无法正确反映的问题，因为语法发生了变化，现在该函数表示为 `current_timestamp()`。
- en: 'References: [#4096](https://www.sqlalchemy.org/trac/ticket/4096)'
  id: totrans-1210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4096](https://www.sqlalchemy.org/trac/ticket/4096)
- en: '**[mysql] [bug]**'
  id: totrans-1211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'MariaDB 10.2 now supports CHECK constraints (warning: use version 10.2.9 or
    greater due to upstream issues noted in [#4097](https://www.sqlalchemy.org/trac/ticket/4097)).
    Reflection now takes these CHECK constraints into account when they are present
    in the `SHOW CREATE TABLE` output.'
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MariaDB 10.2 现在支持 CHECK 约束（警告：由于上游问题，请使用版本 10.2.9 或更高版本，详见[#4097](https://www.sqlalchemy.org/trac/ticket/4097)）。反射现在在存在这些
    CHECK 约束时考虑这些 CHECK 约束，当它们出现在 `SHOW CREATE TABLE` 输出中时。
- en: 'References: [#4098](https://www.sqlalchemy.org/trac/ticket/4098)'
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4098](https://www.sqlalchemy.org/trac/ticket/4098)
- en: sqlite
  id: totrans-1214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug where SQLite CHECK constraint reflection would fail if the referenced
    table were in a remote schema, e.g. on SQLite a remote database referred to by
    ATTACH.
  id: totrans-1216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite CHECK 约束反射的 bug，如果引用的表位于远程模式中，例如 SQLite 中由 ATTACH 引用的远程数据库，则会失败。
- en: 'References: [#4099](https://www.sqlalchemy.org/trac/ticket/4099)'
  id: totrans-1217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4099](https://www.sqlalchemy.org/trac/ticket/4099)
- en: mssql
  id: totrans-1218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a full range of “connection closed” exception codes to the PyODBC dialect
    for SQL Server, including ‘08S01’, ‘01002’, ‘08003’, ‘08007’, ‘08S02’, ‘08001’,
    ‘HYT00’, ‘HY010’. Previously, only ‘08S01’ was covered.
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 的 PyODBC 方言添加了一整套“连接关闭”异常代码，包括 ‘08S01’、‘01002’、‘08003’、‘08007’、‘08S02’、‘08001’、‘HYT00’、‘HY010’。之前只覆盖了
    ‘08S01’。
- en: 'References: [#4095](https://www.sqlalchemy.org/trac/ticket/4095)'
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4095](https://www.sqlalchemy.org/trac/ticket/4095)
- en: 1.1.14
  id: totrans-1222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.14
- en: 'Released: September 5, 2017'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年9月5日
- en: orm
  id: totrans-1224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") following along similar lines as that of [#4030](https://www.sqlalchemy.org/trac/ticket/4030),
    where an internal check for a target object in the identity map could lead to
    an error if it were to be garbage collected immediately before the merge routine
    actually retrieves the object.
  id: totrans-1226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Session.merge()`中修复了一个 bug，与[#4030](https://www.sqlalchemy.org/trac/ticket/4030)类似，其中对于身份映射中的目标对象的内部检查可能导致错误，如果在合并过程实际检索对象之前立即对其进行垃圾回收。
- en: 'References: [#4069](https://www.sqlalchemy.org/trac/ticket/4069)'
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4069](https://www.sqlalchemy.org/trac/ticket/4069)
- en: '**[orm] [bug]**'
  id: totrans-1228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option would not be recognized if it extended
    from a relationship that was loading using joined eager loading. Additionally,
    as the bug led to excess work being performed, Python function call counts are
    also improved by 20% within the initial calculation of result set columns, complementing
    the joined eager load improvements of [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当一个 [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") 选项不会被识别，如果它延伸自使用连接式急加载加载的关系。此外，由于该 bug 导致执行了过多的工作，Python
    函数调用数量在结果集列的初始计算中也提高了 20%，补充了 [#3915](https://www.sqlalchemy.org/trac/ticket/3915)
    的连接式急加载改进。
- en: 'References: [#4048](https://www.sqlalchemy.org/trac/ticket/4048)'
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4048](https://www.sqlalchemy.org/trac/ticket/4048)
- en: '**[orm] [bug]**'
  id: totrans-1231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed race condition in ORM identity map which would cause objects to be inappropriately
    removed during a load operation, causing duplicate object identities to occur,
    particularly under joined eager loading which involves deduplication of objects.
    The issue is specific to garbage collection of weak references and is observed
    only under the PyPy interpreter.
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 身份映射中修复了竞争条件，该条件会导致对象在加载操作期间被不适当地移除，从而导致重复对象标识出现，特别是在涉及对象去重的连接急加载下。此问题特定于弱引用的垃圾收集，并且仅在
    PyPy 解释器下观察到。
- en: 'References: [#4068](https://www.sqlalchemy.org/trac/ticket/4068)'
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4068](https://www.sqlalchemy.org/trac/ticket/4068)
- en: '**[orm] [bug]**'
  id: totrans-1234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where objects in a collection that had the primary
    key attribute set to `None` for a key that is typically autoincrementing would
    be considered to be a database-persisted key for part of the internal deduplication
    process, causing only one object to actually be inserted in the database.
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Session.merge()`中修复了一个 bug，其中集合中的对象的主键属性设置为 `None`，对于通常是自动增量的键，将被视为数据库持久化键的一部分，导致在内部去重处理过程中实际上只插入一个对象到数据库中。
- en: 'References: [#4056](https://www.sqlalchemy.org/trac/ticket/4056)'
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4056](https://www.sqlalchemy.org/trac/ticket/4056)
- en: '**[orm] [bug]**'
  id: totrans-1237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised when a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") is used against an attribute that is not against a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), such as an association proxy. Previously, a
    recursion overflow would occur trying to locate non-existent attributes.
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当针对不是[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")的属性（例如关联代理）使用[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")时，会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。以前，尝试定位不存在的属性会导致递归溢出。
- en: 'References: [#4067](https://www.sqlalchemy.org/trac/ticket/4067)'
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4067](https://www.sqlalchemy.org/trac/ticket/4067)
- en: sql
  id: totrans-1240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Altered the range specification for window functions to allow for two of the
    same PRECEDING or FOLLOWING keywords in a range by allowing for the left side
    of the range to be positive and for the right to be negative, e.g. (1, 3) is “1
    FOLLOWING AND 3 FOLLOWING”.
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了窗口函数的范围规范，允许范围中出现两个相同的 PRECEDING 或 FOLLOWING 关键字，通过允许范围的左侧为正数，右侧为负数，例如 (1,
    3) 表示“1 FOLLOWING AND 3 FOLLOWING”。
- en: 'References: [#4053](https://www.sqlalchemy.org/trac/ticket/4053)'
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4053](https://www.sqlalchemy.org/trac/ticket/4053)
- en: orm
  id: totrans-1244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") following along similar lines as that of [#4030](https://www.sqlalchemy.org/trac/ticket/4030),
    where an internal check for a target object in the identity map could lead to
    an error if it were to be garbage collected immediately before the merge routine
    actually retrieves the object.
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的一个 bug，与[#4030](https://www.sqlalchemy.org/trac/ticket/4030)类似，其中对于身份映射中的目标对象的内部检查，如果在合并过程实际检索对象之前立即被垃圾回收，可能会导致错误。
- en: 'References: [#4069](https://www.sqlalchemy.org/trac/ticket/4069)'
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4069](https://www.sqlalchemy.org/trac/ticket/4069)
- en: '**[orm] [bug]**'
  id: totrans-1248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option would not be recognized if it extended
    from a relationship that was loading using joined eager loading. Additionally,
    as the bug led to excess work being performed, Python function call counts are
    also improved by 20% within the initial calculation of result set columns, complementing
    the joined eager load improvements of [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中一个[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项如果从使用连接式急加载加载的关系扩展，则不会被识别。此外，由于该 bug 导致执行过多的工作，因此在结果集列的初始计算中，Python
    函数调用次数也提高了 20%，这与[#3915](https://www.sqlalchemy.org/trac/ticket/3915)的连接式急加载改进相辅相成。
- en: 'References: [#4048](https://www.sqlalchemy.org/trac/ticket/4048)'
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4048](https://www.sqlalchemy.org/trac/ticket/4048)
- en: '**[orm] [bug]**'
  id: totrans-1251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed race condition in ORM identity map which would cause objects to be inappropriately
    removed during a load operation, causing duplicate object identities to occur,
    particularly under joined eager loading which involves deduplication of objects.
    The issue is specific to garbage collection of weak references and is observed
    only under the PyPy interpreter.
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 身份映射中的竞争条件，导致在加载操作期间不适当地移除对象，从而导致重复的对象标识出现，特别是在涉及对象去重的连接式急加载下。该问题特定于弱引用的垃圾回收，并且仅在
    PyPy 解释器下观察到。
- en: 'References: [#4068](https://www.sqlalchemy.org/trac/ticket/4068)'
  id: totrans-1253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4068](https://www.sqlalchemy.org/trac/ticket/4068)
- en: '**[orm] [bug]**'
  id: totrans-1254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where objects in a collection that had the primary
    key attribute set to `None` for a key that is typically autoincrementing would
    be considered to be a database-persisted key for part of the internal deduplication
    process, causing only one object to actually be inserted in the database.
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的一个 bug，其中集合中的对象的主键属性设置为`None`，而该属性通常是自动递增的，会被视为数据库持久化键的一部分，导致内部去重过程中实际上只有一个对象被插入到数据库中。
- en: 'References: [#4056](https://www.sqlalchemy.org/trac/ticket/4056)'
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4056](https://www.sqlalchemy.org/trac/ticket/4056)
- en: '**[orm] [bug]**'
  id: totrans-1257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised when a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") is used against an attribute that is not against a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), such as an association proxy. Previously, a
    recursion overflow would occur trying to locate non-existent attributes.
  id: totrans-1258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对不是[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")的属性使用[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")时，会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。以前，尝试定位不存在的属性会导致递归溢出。
- en: 'References: [#4067](https://www.sqlalchemy.org/trac/ticket/4067)'
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4067](https://www.sqlalchemy.org/trac/ticket/4067)
- en: sql
  id: totrans-1260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Altered the range specification for window functions to allow for two of the
    same PRECEDING or FOLLOWING keywords in a range by allowing for the left side
    of the range to be positive and for the right to be negative, e.g. (1, 3) is “1
    FOLLOWING AND 3 FOLLOWING”.
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了窗口函数的范围规范，允许在范围内使用两个相同的 PRECEDING 或 FOLLOWING 关键字，通过允许范围的左侧为正数，右侧为负数，例如(1,
    3)表示“1 FOLLOWING AND 3 FOLLOWING”。
- en: 'References: [#4053](https://www.sqlalchemy.org/trac/ticket/4053)'
  id: totrans-1263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4053](https://www.sqlalchemy.org/trac/ticket/4053)
- en: 1.1.13
  id: totrans-1264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.13
- en: 'Released: August 3, 2017'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年8月3日
- en: oracle
  id: totrans-1266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-1267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [performance] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复[#3937](https://www.sqlalchemy.org/trac/ticket/3937)引起的性能回归，其中 cx_Oracle
    版本 5.3 删除了其命名空间中的`.UNICODE`符号，这被解释为 cx_Oracle 的“WITH_UNICODE”模式被无条件地打开，从而在 SQLAlchemy
    一侧调用函数，无条件地将所有字符串转换为 unicode，并导致性能影响。实际上，根据 cx_Oracle 的作者，“WITH_UNICODE”模式自 5.1
    版本起已完全移除，因此昂贵的 unicode 转换函数不再必要，如果在 Python 2 下检测到 cx_Oracle 5.1 或更高版本，则会禁用这些函数。在[#3937](https://www.sqlalchemy.org/trac/ticket/3937)中删除的针对“WITH_UNICODE”模式的警告也已恢复。
- en: 'This change is also **backported** to: 1.0.19'
  id: totrans-1269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.19
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: oracle
  id: totrans-1271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-1272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [performance] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-1273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复[#3937](https://www.sqlalchemy.org/trac/ticket/3937)引起的性能回归，其中 cx_Oracle
    版本 5.3 删除了其命名空间中的`.UNICODE`符号，这被解释为 cx_Oracle 的“WITH_UNICODE”模式被无条件地打开，从而在 SQLAlchemy
    一侧调用函数，无条件地将所有字符串转换为 unicode，并导致性能影响。实际上，根据 cx_Oracle 的作者，“WITH_UNICODE”模式自 5.1
    版本起已完全移除，因此昂贵的 unicode 转换函数不再必要，如果在 Python 2 下检测到 cx_Oracle 5.1 或更高版本，则会禁用这些函数。在[#3937](https://www.sqlalchemy.org/trac/ticket/3937)中删除的针对“WITH_UNICODE”模式的警告也已恢复。
- en: 'This change is also **backported** to: 1.0.19'
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.19
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: 1.1.12
  id: totrans-1276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.12
- en: 'Released: July 24, 2017'
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年7月24日
- en: orm
  id: totrans-1278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 1.1.11 where adding additional non-entity columns to a
    query that includes an entity with subqueryload relationships would fail, due
    to an inspection added in 1.1.11 as a result of [#4011](https://www.sqlalchemy.org/trac/ticket/4011).
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从1.1.11开始的回归，当向包含具有子查询加载关系的实体的查询中添加额外的非实体列时，由于1.1.11中添加的检查导致失败，这是由于[#4011](https://www.sqlalchemy.org/trac/ticket/4011)的结果。
- en: 'References: [#4033](https://www.sqlalchemy.org/trac/ticket/4033)'
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4033](https://www.sqlalchemy.org/trac/ticket/4033)
- en: '**[orm] [bug]**'
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug involving JSON NULL evaluation logic added in 1.1 as part of [#3514](https://www.sqlalchemy.org/trac/ticket/3514)
    where the logic would not accommodate ORM mapped attributes named differently
    from the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that was mapped.
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.1版本中添加的涉及JSON NULL评估逻辑的错误，该逻辑作为[#3514](https://www.sqlalchemy.org/trac/ticket/3514)的一部分添加，其中逻辑不会适应与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")不同命名的ORM映射属性。
- en: 'References: [#4031](https://www.sqlalchemy.org/trac/ticket/4031)'
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4031](https://www.sqlalchemy.org/trac/ticket/4031)
- en: '**[orm] [bug]**'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Added `KeyError` checks to all methods within `WeakInstanceDict` where a check
    for `key in dict` is followed by indexed access to that key, to guard against
    a race against garbage collection that under load can remove the key from the
    dict after the code assumes its present, leading to very infrequent `KeyError`
    raises.
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`WeakInstanceDict`中的所有方法中添加了`KeyError`检查，其中在检查`key in dict`之后紧接着对该键进行索引访问，以防止在负载下可能会将键从字典中移除的垃圾回收竞争导致代码假定其存在后，非常少见地引发`KeyError`。
- en: 'References: [#4030](https://www.sqlalchemy.org/trac/ticket/4030)'
  id: totrans-1287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4030](https://www.sqlalchemy.org/trac/ticket/4030)
- en: oracle
  id: totrans-1288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [postgresql]**'
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [功能] [postgresql]**'
- en: Added new keywords [`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence") and [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") to [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), to allow rendering of the CACHE parameter understood
    by Oracle and PostgreSQL, and the ORDER parameter understood by Oracle. Pull request
    courtesy David Moore.
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")添加了新关键字[`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence")和[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence")，以允许渲染Oracle和PostgreSQL理解的CACHE参数，以及Oracle理解的ORDER参数。感谢David
    Moore的拉取请求。
- en: tests
  id: totrans-1291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-1292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-1293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与Python 3.6.2的更改不兼容的测试固定问题，涉及上下文管理器的更改。
- en: 'This change is also **backported** to: 1.0.18'
  id: totrans-1294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.18
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-1295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: orm
  id: totrans-1296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression from 1.1.11 where adding additional non-entity columns to a
    query that includes an entity with subqueryload relationships would fail, due
    to an inspection added in 1.1.11 as a result of [#4011](https://www.sqlalchemy.org/trac/ticket/4011).
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从1.1.11开始的回归，当向包含具有子查询加载关系的实体的查询中添加额外的非实体列时，由于1.1.11中添加的检查导致失败，这是由于[#4011](https://www.sqlalchemy.org/trac/ticket/4011)的结果。
- en: 'References: [#4033](https://www.sqlalchemy.org/trac/ticket/4033)'
  id: totrans-1299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4033](https://www.sqlalchemy.org/trac/ticket/4033)
- en: '**[orm] [bug]**'
  id: totrans-1300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug involving JSON NULL evaluation logic added in 1.1 as part of [#3514](https://www.sqlalchemy.org/trac/ticket/3514)
    where the logic would not accommodate ORM mapped attributes named differently
    from the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that was mapped.
  id: totrans-1301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.1版本中添加的涉及JSON NULL评估逻辑的错误，该逻辑作为[#3514](https://www.sqlalchemy.org/trac/ticket/3514)的一部分添加，其中逻辑不会适应与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")不同命名的ORM映射属性。
- en: 'References: [#4031](https://www.sqlalchemy.org/trac/ticket/4031)'
  id: totrans-1302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4031](https://www.sqlalchemy.org/trac/ticket/4031)
- en: '**[orm] [bug]**'
  id: totrans-1303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Added `KeyError` checks to all methods within `WeakInstanceDict` where a check
    for `key in dict` is followed by indexed access to that key, to guard against
    a race against garbage collection that under load can remove the key from the
    dict after the code assumes its present, leading to very infrequent `KeyError`
    raises.
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`WeakInstanceDict`中的所有方法中添加了`KeyError`检查，其中在检查`key in dict`之后紧接着对该键进行索引访问，以防止在负载下可能会将键从字典中移除的垃圾回收竞争导致代码假定其存在后，非常少见地引发`KeyError`。
- en: 'References: [#4030](https://www.sqlalchemy.org/trac/ticket/4030)'
  id: totrans-1305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4030](https://www.sqlalchemy.org/trac/ticket/4030)
- en: oracle
  id: totrans-1306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [postgresql]**'
  id: totrans-1307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature] [postgresql]**'
- en: Added new keywords [`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence") and [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") to [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), to allow rendering of the CACHE parameter understood
    by Oracle and PostgreSQL, and the ORDER parameter understood by Oracle. Pull request
    courtesy David Moore.
  id: totrans-1308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新关键字[`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence")和[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence")到[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，以允许Oracle和PostgreSQL理解的CACHE参数的呈现，以及Oracle理解的ORDER参数。拉取请求由David
    Moore提供。
- en: tests
  id: totrans-1309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug] [py3k]**'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与Python 3.6.2的更改不兼容的测试固定装置中的问题，涉及上下文管理器。
- en: 'This change is also **backported** to: 1.0.18'
  id: totrans-1312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.18
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: 1.1.11
  id: totrans-1314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.11
- en: 'Released: Monday, June 19, 2017'
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年6月19日星期一
- en: orm
  id: totrans-1316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue with subquery eagerloading which continues on from the series of
    issues fixed in [#2699](https://www.sqlalchemy.org/trac/ticket/2699), [#3106](https://www.sqlalchemy.org/trac/ticket/3106),
    [#3893](https://www.sqlalchemy.org/trac/ticket/3893) involving that the “subquery”
    contains the correct FROM clause when beginning from a joined inheritance subclass
    and then subquery eager loading onto a relationship from the base class, while
    the query also includes criteria against the subclass. The fix in the previous
    tickets did not accommodate for additional subqueryload operations loading more
    deeply from the first level, so the fix has been further generalized.
  id: totrans-1318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的问题，该问题继续自[#2699](https://www.sqlalchemy.org/trac/ticket/2699)、[#3106](https://www.sqlalchemy.org/trac/ticket/3106)、[#3893](https://www.sqlalchemy.org/trac/ticket/3893)修复的系列问题，涉及到“子查询”在从连接的继承子类开始，然后对基类的关系进行子查询急加载时包含正确的FROM子句，同时查询还包括对子类的条件。之前票证中的修复未考虑到从第一级更深层次加载更多的子查询操作，因此修复进一步泛化。
- en: 'References: [#4011](https://www.sqlalchemy.org/trac/ticket/4011)'
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4011](https://www.sqlalchemy.org/trac/ticket/4011)
- en: sql
  id: totrans-1320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed AttributeError which would occur in [`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct during an iteration of the
    structure.
  id: totrans-1322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup")结构迭代期间可能发生的AttributeError。
- en: 'References: [#4012](https://www.sqlalchemy.org/trac/ticket/4012)'
  id: totrans-1323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4012](https://www.sqlalchemy.org/trac/ticket/4012)
- en: postgresql
  id: totrans-1324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Continuing with the fix that correctly handles PostgreSQL version string “10devel”
    released in 1.1.8, an additional regexp bump to handle version strings of the
    form “10beta1”. While PostgreSQL now offers better ways to get this information,
    we are sticking w/ the regexp at least through 1.1.x for the least amount of risk
    to compatibility w/ older or alternate PostgreSQL databases.
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续处理正确处理1.1.8中发布的PostgreSQL版本字符串“10devel”的修复，增加了一个正则表达式版本以处理形式为“10beta1”的版本字符串。虽然PostgreSQL现在提供更好的方法来获取这些信息，但至少在1.1.x中我们仍然坚持使用正则表达式，以最小化与旧版或替代PostgreSQL数据库的兼容性风险。
- en: 'References: [#4005](https://www.sqlalchemy.org/trac/ticket/4005)'
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4005](https://www.sqlalchemy.org/trac/ticket/4005)
- en: '**[postgresql] [bug]**'
  id: totrans-1328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where using [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") with a string type that features a collation would fail
    to produce the correct syntax within CREATE TABLE.
  id: totrans-1329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用带有排序的字符串类型的[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")在CREATE
    TABLE中未能生成正确语法的错误。
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: mysql
  id: totrans-1331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7 has introduced permission limiting for the “SHOW VARIABLES” command;
    the MySQL dialect will now handle when SHOW returns no row, in particular for
    the initial fetch of SQL_MODE, and will emit a warning that user permissions should
    be modified to allow the row to be present.
  id: totrans-1333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7引入了对“SHOW VARIABLES”命令的权限限制；MySQL方言现在将处理当SHOW返回没有行时的情况，特别是对于SQL_MODE的初始获取，并将发出警告，提示用户权限应该被修改以允许该行存在。
- en: 'References: [#4007](https://www.sqlalchemy.org/trac/ticket/4007)'
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4007](https://www.sqlalchemy.org/trac/ticket/4007)
- en: mssql
  id: totrans-1335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server transaction isolation must be fetched from a different
    view when using Azure data warehouse, the query is now attempted against both
    views and then a NotImplemented is raised unconditionally if failure continues
    to provide the best resiliency against future arbitrary API changes in new SQL
    Server versions.
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用Azure数据仓库时必须从不同视图获取SQL Server事务隔离的错误，现在查询将尝试针对两个视图，如果失败继续，则无条件地引发NotImplemented，以提供对未来新SQL
    Server版本中任意API更改的最佳弹性。
- en: 'References: [#3994](https://www.sqlalchemy.org/trac/ticket/3994)'
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3994](https://www.sqlalchemy.org/trac/ticket/3994)
- en: '**[mssql] [bug]**'
  id: totrans-1339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a placeholder type [`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML") to the SQL Server dialect, so that a reflected
    table which includes this type can be re-rendered as a CREATE TABLE. The type
    has no special round-trip behavior nor does it currently support additional qualifying
    arguments.
  id: totrans-1340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server方言中添加了一个占位符类型[`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML")，以便包含此类型的反射表可以重新呈现为CREATE TABLE。该类型没有特殊的往返行为，也不支持当前支持额外的限定参数。
- en: 'References: [#3973](https://www.sqlalchemy.org/trac/ticket/3973)'
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3973](https://www.sqlalchemy.org/trac/ticket/3973)
- en: oracle
  id: totrans-1342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Support for two-phase transactions has been removed entirely for cx_Oracle when
    version 6.0b1 or later of the DBAPI is in use. The two- phase feature historically
    has never been usable under cx_Oracle 5.x in any case, and cx_Oracle 6.x has removed
    the connection-level “twophase” flag upon which this feature relied.
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用cx_Oracle的版本6.0b1或更高版本时，完全删除了cx_Oracle的两阶段事务支持。在任何情况下，两阶段功能在cx_Oracle 5.x下历史上从未可用过，而cx_Oracle
    6.x已经删除了此功能依赖的连接级“twophase”标志。
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: orm
  id: totrans-1346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue with subquery eagerloading which continues on from the series of
    issues fixed in [#2699](https://www.sqlalchemy.org/trac/ticket/2699), [#3106](https://www.sqlalchemy.org/trac/ticket/3106),
    [#3893](https://www.sqlalchemy.org/trac/ticket/3893) involving that the “subquery”
    contains the correct FROM clause when beginning from a joined inheritance subclass
    and then subquery eager loading onto a relationship from the base class, while
    the query also includes criteria against the subclass. The fix in the previous
    tickets did not accommodate for additional subqueryload operations loading more
    deeply from the first level, so the fix has been further generalized.
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询预加载的问题，这是继[#2699](https://www.sqlalchemy.org/trac/ticket/2699)、[#3106](https://www.sqlalchemy.org/trac/ticket/3106)、[#3893](https://www.sqlalchemy.org/trac/ticket/3893)修复的一系列问题的延续，涉及到当从一个连接的继承子类开始，然后对基类的关系进行子查询预加载时，“子查询”包含正确的FROM子句，同时查询还包括对子类的条件。之前票证中的修复没有考虑到从第一级更深层次加载更多的subqueryload操作，因此修复已进一步泛化。
- en: 'References: [#4011](https://www.sqlalchemy.org/trac/ticket/4011)'
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4011](https://www.sqlalchemy.org/trac/ticket/4011)
- en: sql
  id: totrans-1350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed AttributeError which would occur in [`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct during an iteration of the
    structure.
  id: totrans-1352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup")结构迭代期间可能发生的AttributeError。
- en: 'References: [#4012](https://www.sqlalchemy.org/trac/ticket/4012)'
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4012](https://www.sqlalchemy.org/trac/ticket/4012)
- en: postgresql
  id: totrans-1354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Continuing with the fix that correctly handles PostgreSQL version string “10devel”
    released in 1.1.8, an additional regexp bump to handle version strings of the
    form “10beta1”. While PostgreSQL now offers better ways to get this information,
    we are sticking w/ the regexp at least through 1.1.x for the least amount of risk
    to compatibility w/ older or alternate PostgreSQL databases.
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复正确处理 PostgreSQL 版本字符串“10devel”（在 1.1.8 中发布）的问题，增加了一个正则表达式来处理形式为“10beta1”的版本字符串。虽然
    PostgreSQL 现在提供了更好的获取此信息的方法，但至少在 1.1.x 中，我们仍然坚持使用正则表达式，以最大程度地减少与旧版或其他 PostgreSQL
    数据库的兼容性风险。
- en: 'References: [#4005](https://www.sqlalchemy.org/trac/ticket/4005)'
  id: totrans-1357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4005](https://www.sqlalchemy.org/trac/ticket/4005)
- en: '**[postgresql] [bug]**'
  id: totrans-1358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where using [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") with a string type that features a collation would fail
    to produce the correct syntax within CREATE TABLE.
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在使用带有排序规则的字符串类型的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 时，无法在 CREATE TABLE 中生成正确的语法。
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-1360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: mysql
  id: totrans-1361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7 has introduced permission limiting for the “SHOW VARIABLES” command;
    the MySQL dialect will now handle when SHOW returns no row, in particular for
    the initial fetch of SQL_MODE, and will emit a warning that user permissions should
    be modified to allow the row to be present.
  id: totrans-1363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7 引入了对“SHOW VARIABLES”命令的权限限制；MySQL 方言现在将处理当 SHOW 不返回任何行时的情况，特别是对于 SQL_MODE
    的初始获取，并将发出警告，提示用户权限应该被修改以允许该行存在。
- en: 'References: [#4007](https://www.sqlalchemy.org/trac/ticket/4007)'
  id: totrans-1364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4007](https://www.sqlalchemy.org/trac/ticket/4007)
- en: mssql
  id: totrans-1365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server transaction isolation must be fetched from a different
    view when using Azure data warehouse, the query is now attempted against both
    views and then a NotImplemented is raised unconditionally if failure continues
    to provide the best resiliency against future arbitrary API changes in new SQL
    Server versions.
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在使用 Azure 数据仓库时，SQL Server 事务隔离必须从不同的视图中获取，现在查询将尝试针对两个视图执行，如果失败继续提供最佳的弹性，以防止未来新
    SQL Server 版本中的任意 API 更改引起的问题。
- en: 'References: [#3994](https://www.sqlalchemy.org/trac/ticket/3994)'
  id: totrans-1368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3994](https://www.sqlalchemy.org/trac/ticket/3994)
- en: '**[mssql] [bug]**'
  id: totrans-1369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a placeholder type [`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML") to the SQL Server dialect, so that a reflected
    table which includes this type can be re-rendered as a CREATE TABLE. The type
    has no special round-trip behavior nor does it currently support additional qualifying
    arguments.
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 SQL Server 方言添加了一个占位符类型 [`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML")，以便包含此类型的反射表可以重新呈现为 CREATE TABLE。该类型没有特殊的往返行为，也不支持额外的限定参数。
- en: 'References: [#3973](https://www.sqlalchemy.org/trac/ticket/3973)'
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3973](https://www.sqlalchemy.org/trac/ticket/3973)
- en: oracle
  id: totrans-1372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Support for two-phase transactions has been removed entirely for cx_Oracle when
    version 6.0b1 or later of the DBAPI is in use. The two- phase feature historically
    has never been usable under cx_Oracle 5.x in any case, and cx_Oracle 6.x has removed
    the connection-level “twophase” flag upon which this feature relied.
  id: totrans-1374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 cx_Oracle 版本 6.0b1 或更高版本的 DBAPI 时，完全移除了 cx_Oracle 的两阶段事务支持。历史上，在任何情况下，cx_Oracle
    5.x 下的两阶段功能从未可用，而 cx_Oracle 6.x 已经移除了此功能所依赖的连接级“twophase”标志。
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: 1.1.10
  id: totrans-1376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.10
- en: 'Released: Friday, May 19, 2017'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年5月19日星期五
- en: orm
  id: totrans-1378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a cascade such as “delete-orphan” (but others as well) would
    fail to locate an object linked to a relationship that itself is local to a subclass
    in an inheritance relationship, thus causing the operation to not take place.
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当级联操作（如“delete-orphan”等）无法定位到与继承关系中本身是子类本地关系的对象相关联的对象时，导致操作无法执行。
- en: 'References: [#3986](https://www.sqlalchemy.org/trac/ticket/3986)'
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3986](https://www.sqlalchemy.org/trac/ticket/3986)
- en: schema
  id: totrans-1382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-1383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is now raised if a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object is created with a mismatched
    number of “local” and “remote” columns, which otherwise causes the internal state
    of the constraint to be incorrect. Note that this also impacts the condition where
    a dialect’s reflection process produces a mismatched set of columns for a foreign
    key constraint.
  id: totrans-1384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果创建一个具有不匹配的“本地”和“远程”列数量的[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，将引发[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")，否则会导致约束的内部状态不正确。请注意，这也会影响方言的反射过程产生不匹配列集的情况。
- en: 'References: [#3949](https://www.sqlalchemy.org/trac/ticket/3949)'
  id: totrans-1385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3949](https://www.sqlalchemy.org/trac/ticket/3949)
- en: postgresql
  id: totrans-1386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “autocommit” support for GRANT, REVOKE keywords. Pull request courtesy
    Jacob Hayes.
  id: totrans-1388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为GRANT、REVOKE关键字添加了“autocommit”支持。感谢Jacob Hayes的拉取请求。
- en: mysql
  id: totrans-1389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Removed an ancient and unnecessary intercept of the UTC_TIMESTAMP MySQL function,
    which was getting in the way of using it with a parameter.
  id: totrans-1391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对UTC_TIMESTAMP MySQL函数的古老且不必要的拦截，这会妨碍使用带参数的函数。
- en: 'References: [#3966](https://www.sqlalchemy.org/trac/ticket/3966)'
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3966](https://www.sqlalchemy.org/trac/ticket/3966)
- en: '**[mysql] [bug]**'
  id: totrans-1393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL dialect regarding rendering of table options in conjunction
    with PARTITION options when rendering CREATE TABLE. The PARTITION related options
    need to follow the table options, whereas previously this ordering was not enforced.
  id: totrans-1394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL方言中关于在渲染CREATE TABLE时与PARTITION选项一起渲染表选项的错误。PARTITION相关选项需要跟随表选项，而以前这种顺序没有得到执行。
- en: 'References: [#3961](https://www.sqlalchemy.org/trac/ticket/3961)'
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3961](https://www.sqlalchemy.org/trac/ticket/3961)
- en: oracle
  id: totrans-1396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle dialect where version string parsing would fail for cx_Oracle
    version 6.0b1 due to the “b” character. Version string parsing is now via a regexp
    rather than a simple split.
  id: totrans-1398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle方言中版本字符串解析对于cx_Oracle版本6.0b1会失败的错误，原因是“b”字符。现在版本字符串解析通过正则表达式而不是简单的拆分。
- en: 'References: [#3975](https://www.sqlalchemy.org/trac/ticket/3975)'
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3975](https://www.sqlalchemy.org/trac/ticket/3975)
- en: misc
  id: totrans-1400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-1401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Protected against testing “None” as a class in the case where declarative classes
    are being garbage collected and new automap prepare() operations are taking place
    concurrently, very infrequently hitting a weakref that has not been fully acted
    upon after gc.
  id: totrans-1402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明类被垃圾回收并且新的automap prepare()操作同时进行时，防止将“None”作为类进行测试，非常罕见地会在gc后未完全处理的弱引用上命中。
- en: 'References: [#3980](https://www.sqlalchemy.org/trac/ticket/3980)'
  id: totrans-1403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3980](https://www.sqlalchemy.org/trac/ticket/3980)
- en: orm
  id: totrans-1404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a cascade such as “delete-orphan” (but others as well) would
    fail to locate an object linked to a relationship that itself is local to a subclass
    in an inheritance relationship, thus causing the operation to not take place.
  id: totrans-1406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即“delete-orphan”（以及其他一些）级联操作无法定位到与继承关系中的子类本地关系链接的对象，从而导致操作无法执行。
- en: 'References: [#3986](https://www.sqlalchemy.org/trac/ticket/3986)'
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3986](https://www.sqlalchemy.org/trac/ticket/3986)
- en: schema
  id: totrans-1408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-1409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is now raised if a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object is created with a mismatched
    number of “local” and “remote” columns, which otherwise causes the internal state
    of the constraint to be incorrect. Note that this also impacts the condition where
    a dialect’s reflection process produces a mismatched set of columns for a foreign
    key constraint.
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果创建一个具有不匹配的“本地”和“远程”列数量的[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，将引发[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")，否则会导致约束的内部状态不正确。请注意，这也会影响方言的反射过程产生不匹配列集的情况。
- en: 'References: [#3949](https://www.sqlalchemy.org/trac/ticket/3949)'
  id: totrans-1411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3949](https://www.sqlalchemy.org/trac/ticket/3949)
- en: postgresql
  id: totrans-1412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “autocommit” support for GRANT, REVOKE keywords. Pull request courtesy
    Jacob Hayes.
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为GRANT、REVOKE关键字添加了“autocommit”支持。感谢Jacob Hayes的Pull请求。
- en: mysql
  id: totrans-1415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL
- en: '**[mysql] [bug]**'
  id: totrans-1416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Removed an ancient and unnecessary intercept of the UTC_TIMESTAMP MySQL function,
    which was getting in the way of using it with a parameter.
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对UTC_TIMESTAMP MySQL函数的古老且不必要的拦截，这妨碍了将其与参数一起使用。
- en: 'References: [#3966](https://www.sqlalchemy.org/trac/ticket/3966)'
  id: totrans-1418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3966](https://www.sqlalchemy.org/trac/ticket/3966)
- en: '**[mysql] [bug]**'
  id: totrans-1419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL dialect regarding rendering of table options in conjunction
    with PARTITION options when rendering CREATE TABLE. The PARTITION related options
    need to follow the table options, whereas previously this ordering was not enforced.
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL方言中关于在渲染CREATE TABLE时与PARTITION选项一起渲染表选项的bug。PARTITION相关选项需要跟随表选项，而以前未强制执行此顺序。
- en: 'References: [#3961](https://www.sqlalchemy.org/trac/ticket/3961)'
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3961](https://www.sqlalchemy.org/trac/ticket/3961)
- en: oracle
  id: totrans-1422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle] [bug]**'
  id: totrans-1423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle dialect where version string parsing would fail for cx_Oracle
    version 6.0b1 due to the “b” character. Version string parsing is now via a regexp
    rather than a simple split.
  id: totrans-1424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle方言中版本字符串解析在cx_Oracle版本6.0b1中由于“b”字符而失败的bug。现在版本字符串解析通过正则表达式而不是简单的分割。
- en: 'References: [#3975](https://www.sqlalchemy.org/trac/ticket/3975)'
  id: totrans-1425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3975](https://www.sqlalchemy.org/trac/ticket/3975)
- en: misc
  id: totrans-1426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Protected against testing “None” as a class in the case where declarative classes
    are being garbage collected and new automap prepare() operations are taking place
    concurrently, very infrequently hitting a weakref that has not been fully acted
    upon after gc.
  id: totrans-1428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 防止在声明类被垃圾回收并发生新的automap prepare()操作时，测试“None”作为类的情况，非常少见地会在gc后仍未完全处理的weakref上命中。
- en: 'References: [#3980](https://www.sqlalchemy.org/trac/ticket/3980)'
  id: totrans-1429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3980](https://www.sqlalchemy.org/trac/ticket/3980)
- en: 1.1.9
  id: totrans-1430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.9
- en: 'Released: April 4, 2017'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年4月4日
- en: sql
  id: totrans-1432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression released in 1.1.5 due to [#3859](https://www.sqlalchemy.org/trac/ticket/3859)
    where adjustments to the “right-hand-side” evaluation of an expression based on
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    to honor the underlying type’s “right-hand-side” rules caused the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") type to be inappropriately lost, in those cases when
    we *do* want the left-hand side type to be transferred directly to the right hand
    side so that bind-level rules can be applied to the expression’s argument.
  id: totrans-1434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3859](https://www.sqlalchemy.org/trac/ticket/3859)中发布的1.1.5中的回归，根据[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")的“右侧”规则调整表达式的“右侧”评估，以尊重底层类型的“右侧”规则，导致在我们*确实*希望左侧类型直接传递到右侧，以便将绑定级规则应用于表达式参数时，[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型被不适当地丢失。
- en: 'References: [#3952](https://www.sqlalchemy.org/trac/ticket/3952)'
  id: totrans-1435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3952](https://www.sqlalchemy.org/trac/ticket/3952)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Changed the mechanics of `ResultProxy` to unconditionally delay the “autoclose”
    step until the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is done with the object; in the case where PostgreSQL
    ON CONFLICT with RETURNING returns no rows, autoclose was occurring in this previously
    non-existent use case, causing the usual autocommit behavior that occurs unconditionally
    upon INSERT/UPDATE/DELETE to fail.
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了`ResultProxy`的机制，无条件地延迟“autoclose”步骤，直到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")完成对象的操作；在PostgreSQL ON CONFLICT与RETURNING返回零行的情况下，之前不存在的用例中，autoclose会发生，导致以前无条件发生的INSERT/UPDATE/DELETE上的通常自动提交行为失败。
- en: 'References: [#3955](https://www.sqlalchemy.org/trac/ticket/3955)'
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3955](https://www.sqlalchemy.org/trac/ticket/3955)
- en: misc
  id: totrans-1439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed regression released in 1.1.8 due to [#3950](https://www.sqlalchemy.org/trac/ticket/3950)
    where the deeper search for information about column types in the case of a “schema
    type” or a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would produce an attribute error if the mapping
    also contained a [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-1441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.1.8版本中由于[#3950](https://www.sqlalchemy.org/trac/ticket/3950)导致的回归问题，即在“模式类型”或[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的情况下对列类型的更深层搜索会在映射中还包含[`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")时产生属性错误。
- en: 'References: [#3956](https://www.sqlalchemy.org/trac/ticket/3956)'
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3956](https://www.sqlalchemy.org/trac/ticket/3956)
- en: sql
  id: totrans-1443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression released in 1.1.5 due to [#3859](https://www.sqlalchemy.org/trac/ticket/3859)
    where adjustments to the “right-hand-side” evaluation of an expression based on
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    to honor the underlying type’s “right-hand-side” rules caused the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") type to be inappropriately lost, in those cases when
    we *do* want the left-hand side type to be transferred directly to the right hand
    side so that bind-level rules can be applied to the expression’s argument.
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.1.5版本中由于[#3859](https://www.sqlalchemy.org/trac/ticket/3859)导致的回归问题，即基于[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")的表达式的“右侧”评估调整以遵守基础类型的“右侧”规则，导致[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型在我们*确实*希望左侧类型直接传递到右侧以便将绑定级规则应用于表达式参数时不适当丢失。
- en: 'References: [#3952](https://www.sqlalchemy.org/trac/ticket/3952)'
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3952](https://www.sqlalchemy.org/trac/ticket/3952)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Changed the mechanics of `ResultProxy` to unconditionally delay the “autoclose”
    step until the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is done with the object; in the case where PostgreSQL
    ON CONFLICT with RETURNING returns no rows, autoclose was occurring in this previously
    non-existent use case, causing the usual autocommit behavior that occurs unconditionally
    upon INSERT/UPDATE/DELETE to fail.
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了`ResultProxy`的机制，无条件地延迟“自动关闭”步骤，直到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")完成对象处理；在PostgreSQL ON CONFLICT with RETURNING返回零行的情况下，之前不存在的用例中，自动关闭会发生，导致以前在INSERT/UPDATE/DELETE上无条件发生的自动提交行为失败。
- en: 'References: [#3955](https://www.sqlalchemy.org/trac/ticket/3955)'
  id: totrans-1449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3955](https://www.sqlalchemy.org/trac/ticket/3955)
- en: misc
  id: totrans-1450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-1451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed regression released in 1.1.8 due to [#3950](https://www.sqlalchemy.org/trac/ticket/3950)
    where the deeper search for information about column types in the case of a “schema
    type” or a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would produce an attribute error if the mapping
    also contained a [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-1452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.1.8版本中由于[#3950](https://www.sqlalchemy.org/trac/ticket/3950)导致的回归问题，即在“模式类型”或[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的情况下对列类型的更深层搜索会在映射中还包含[`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")时产生属性错误。
- en: 'References: [#3956](https://www.sqlalchemy.org/trac/ticket/3956)'
  id: totrans-1453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3956](https://www.sqlalchemy.org/trac/ticket/3956)
- en: 1.1.8
  id: totrans-1454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.8
- en: 'Released: March 31, 2017'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年3月31日
- en: postgresql
  id: totrans-1456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for parsing the PostgreSQL version string for a development version
    like “PostgreSQL 10devel”. Pull request courtesy Sean McCully.
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对解析PostgreSQL版本字符串的支持，例如“PostgreSQL 10devel”。感谢Sean McCully的拉取请求。
- en: misc
  id: totrans-1459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-1460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") where the [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") method would not track a type that
    had been copied using `TypeEngine.copy()`. This became more of a regression in
    1.1 compared to 1.0 because the [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class is now a subclass of [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget"), which among other things indicates to
    the parent [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that the type should be copied when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is. These copies are common when using declarative
    with mixins or abstract classes.
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")中的错误，其中[`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable")方法不会跟踪使用 `TypeEngine.copy()` 复制的类型。这在
    1.1 版本相比于 1.0 版本更加的退化，因为 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类现在是 [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") 的子类之一，它表明当 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 被复制时，类型也应该被复制。在使用混合或抽象类的情况下，这些复制是常见的。
- en: 'References: [#3950](https://www.sqlalchemy.org/trac/ticket/3950)'
  id: totrans-1462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3950](https://www.sqlalchemy.org/trac/ticket/3950)
- en: '**[bug] [ext]**'
  id: totrans-1463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Added support for bound parameters, e.g. those normally set up via [`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params"), to the `Result.count()` method. Previously, support
    for parameters were omitted. Pull request courtesy Pat Deegan.
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增对绑定参数的支持，例如通常通过[`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")设置的参数，到`Result.count()`方法。以前，对参数的支持被省略了。感谢 Pat Deegan
    的拉取请求。
- en: postgresql
  id: totrans-1465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for parsing the PostgreSQL version string for a development version
    like “PostgreSQL 10devel”. Pull request courtesy Sean McCully.
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增对解析 PostgreSQL 版本字符串的支持，例如开发版本的 “PostgreSQL 10devel”。感谢 Sean McCully 的拉取请求。
- en: misc
  id: totrans-1468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") where the [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") method would not track a type that
    had been copied using `TypeEngine.copy()`. This became more of a regression in
    1.1 compared to 1.0 because the [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class is now a subclass of [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget"), which among other things indicates to
    the parent [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that the type should be copied when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is. These copies are common when using declarative
    with mixins or abstract classes.
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")中的错误，其中[`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable")方法不会跟踪使用 `TypeEngine.copy()` 复制的类型。这在
    1.1 版本相比于 1.0 版本更加的退化，因为 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类现在是 [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") 的子类之一，它表明当 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 被复制时，类型也应该被复制。在使用混合或抽象类的情况下，这些复制是常见的。
- en: 'References: [#3950](https://www.sqlalchemy.org/trac/ticket/3950)'
  id: totrans-1471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3950](https://www.sqlalchemy.org/trac/ticket/3950)
- en: '**[bug] [ext]**'
  id: totrans-1472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Added support for bound parameters, e.g. those normally set up via [`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params"), to the `Result.count()` method. Previously, support
    for parameters were omitted. Pull request courtesy Pat Deegan.
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增对绑定参数的支持，例如通常通过[`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")设置的参数，到`Result.count()`方法。以前，对参数的支持被省略了。感谢 Pat Deegan
    的拉取请求。
- en: 1.1.7
  id: totrans-1474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.7
- en: 'Released: March 27, 2017'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年3月27日
- en: orm
  id: totrans-1476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: An [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct can now be passed to the `Query.select_entity_from()` method. Entities
    will be pulled from the selectable represented by the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct. This allows special options for [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") such as [`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased") to be used in conjunction with `Query.select_entity_from()`.
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造传递给`Query.select_entity_from()`方法。实体将从由[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造表示的可选择项中提取。这允许与`Query.select_entity_from()`一起使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")的特殊选项，例如[`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased")。
- en: 'References: [#3933](https://www.sqlalchemy.org/trac/ticket/3933)'
  id: totrans-1479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3933](https://www.sqlalchemy.org/trac/ticket/3933)
- en: '**[orm] [bug]**'
  id: totrans-1480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a race condition which could occur under threaded environments as a result
    of the caching added via [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
    An internal collection of `Column` objects could be regenerated on an alias object
    inappropriately, confusing a joined eager loader when it attempts to render SQL
    and collect results and resulting in an attribute error. The collection is now
    generated up front before the alias object is cached and shared among threads.
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个在多线程环境下可能发生的竞争条件，这是通过 [#3915](https://www.sqlalchemy.org/trac/ticket/3915)
    添加的缓存导致的。一个内部的`Column`对象集合可能会不适当地在别名对象上重新生成，当尝试渲染 SQL 并收集结果时，会混淆一个连接的急切加载器，导致属性错误。现在，在别名对象被缓存和在线程之间共享之前，集合会提前生成并共享。
- en: 'References: [#3947](https://www.sqlalchemy.org/trac/ticket/3947)'
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3947](https://www.sqlalchemy.org/trac/ticket/3947)
- en: engine
  id: totrans-1483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added an exception handler that will warn for the “cause” exception on Py2K
    when the “autorollback” feature of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") itself raises an exception. In Py3K, the two exceptions
    are naturally reported by the interpreter as one occurring during the handling
    of the other. This is continuing with the series of changes for rollback failure
    handling that were last visited as part of [#2696](https://www.sqlalchemy.org/trac/ticket/2696)
    in 1.0.12.
  id: totrans-1485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个异常处理程序，当“autorollback”功能的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")本身引发异常时，将会警告“cause���异常在 Py2K 上。在 Py3K 中，两个异常自然地由解释器报告为一个发生在处理另一个异常时。这是继续处理回滚失败处理的一系列更改之一，上次访问是在
    1.0.12 中的[#2696](https://www.sqlalchemy.org/trac/ticket/2696)。
- en: 'References: [#3946](https://www.sqlalchemy.org/trac/ticket/3946)'
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3946](https://www.sqlalchemy.org/trac/ticket/3946)
- en: sql
  id: totrans-1487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Added support for the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") and the [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") objects to be compatible with each other. That
    is, a variant can be created against a type like [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), and the instructions to create constraints and/or database-specific
    type objects will propagate correctly as per the variant’s dialect mapping.
  id: totrans-1489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对[`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")和[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")对象相互兼容的支持。也就是说，可以针对像[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")这样的类型创建一个变体，并且创建约束和/或数据库特定类型对象的指令将根据变体的方言映射正确传播。
- en: 'References: [#2892](https://www.sqlalchemy.org/trac/ticket/2892)'
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2892](https://www.sqlalchemy.org/trac/ticket/2892)
- en: '**[sql] [bug]**'
  id: totrans-1491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in compiler where the string identifier of a savepoint would be cached
    in the identifier quoting dictionary; as these identifiers are arbitrary, a small
    memory leak could occur if a single [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had an unbounded number of savepoints used, as
    well as if the savepoint clause constructs were used directly with an unbounded
    umber of savepoint names. The memory leak does **not** impact the vast majority
    of cases as normally the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), which renders savepoint names with a simple counter
    starting at “1”, is used on a per-transaction or per-fixed-number-of-transactions
    basis before being discarded.
  id: totrans-1492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器中的一个错误，其中保存点的字符串标识符会被缓存在标识符引用字典中；由于这些标识符是任意的，如果一个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")有大量未限定数量的保存点使用，以及如果保存点子句构造直接使用了未限定数量的保存点名称，那么可能会发生小内存泄漏。这个内存泄漏**不会**影响绝大多数情况，因为通常是针对每个事务或固定数量的事务使用渲染保存点名称的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，它从“1”开始的简单计数器。
- en: 'References: [#3931](https://www.sqlalchemy.org/trac/ticket/3931)'
  id: totrans-1493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3931](https://www.sqlalchemy.org/trac/ticket/3931)
- en: '**[sql] [bug]**'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “schema translate” feature where the translated schema name
    would be invoked in terms of an alias name when rendered along with a column expression;
    occurred only when the source translate name was “None”. The “schema translate”
    feature now only takes effect for [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") and [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses, that is, objects that correspond to
    a DDL-creatable structure in a database.
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“模式翻译”功能中的错误，其中在与列表达式一起渲染时，翻译的模式名称会被调用为别名名称；仅当源翻译名称为“None”时才会发生。现在，“模式翻译”功能仅对[`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")和[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")子类产生影响，也就是说，对应于数据库中可DDL创建的结构的对象。
- en: 'References: [#3924](https://www.sqlalchemy.org/trac/ticket/3924)'
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3924](https://www.sqlalchemy.org/trac/ticket/3924)
- en: oracle
  id: totrans-1497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: A fix to cx_Oracle’s WITH_UNICODE mode which was uncovered by the fact that
    cx_Oracle 5.3 now seems to hardcode this flag on in the build; an internal method
    that uses this mode wasn’t using the correct signature.
  id: totrans-1499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 的 WITH_UNICODE 模式，这是因为 cx_Oracle 5.3 现在似乎在构建中硬编码了这个标志；使用此模式的内部方法没有使用正确的签名。
- en: 'This change is also **backported** to: 1.0.18'
  id: totrans-1500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.18
- en: 'References: [#3937](https://www.sqlalchemy.org/trac/ticket/3937)'
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3937](https://www.sqlalchemy.org/trac/ticket/3937)
- en: orm
  id: totrans-1502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: An [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct can now be passed to the `Query.select_entity_from()` method. Entities
    will be pulled from the selectable represented by the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct. This allows special options for [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") such as [`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased") to be used in conjunction with `Query.select_entity_from()`.
  id: totrans-1504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造现在可以传递给 `Query.select_entity_from()` 方法。实体将从由 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造表示的可选择对象中拉取。这允许与 `Query.select_entity_from()` 结合使用
    [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    的特殊选项，如 [`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased")。'
- en: 'References: [#3933](https://www.sqlalchemy.org/trac/ticket/3933)'
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3933](https://www.sqlalchemy.org/trac/ticket/3933)
- en: '**[orm] [bug]**'
  id: totrans-1506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a race condition which could occur under threaded environments as a result
    of the caching added via [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
    An internal collection of `Column` objects could be regenerated on an alias object
    inappropriately, confusing a joined eager loader when it attempts to render SQL
    and collect results and resulting in an attribute error. The collection is now
    generated up front before the alias object is cached and shared among threads.
  id: totrans-1507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个在多线程环境下可能发生的竞争条件，这是由于通过[#3915](https://www.sqlalchemy.org/trac/ticket/3915)添加的缓存引起的。一个内部的`Column`对象集合可能会在别名对象上不恰当地重新生成，当尝试渲染SQL并收集结果时，这会让一个连接的急切加载器感到困惑，并导致属性错误。现在，在别名对象被缓存和在线程之间共享之前，该集合会被提前生成并共享。
- en: 'References: [#3947](https://www.sqlalchemy.org/trac/ticket/3947)'
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3947](https://www.sqlalchemy.org/trac/ticket/3947)
- en: engine
  id: totrans-1509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added an exception handler that will warn for the “cause” exception on Py2K
    when the “autorollback” feature of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") itself raises an exception. In Py3K, the two exceptions
    are naturally reported by the interpreter as one occurring during the handling
    of the other. This is continuing with the series of changes for rollback failure
    handling that were last visited as part of [#2696](https://www.sqlalchemy.org/trac/ticket/2696)
    in 1.0.12.
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个异常处理程序，当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的“autorollback”功能本身引发异常时，将会对Py2K上的“cause”异常发出警告。在Py3K中，这两个异常会被解释器自然地报告为一个发生在处理另一个时。这是继续处理回滚失败处理的一系列更改之一，上次访问是在1.0.12中的[#2696](https://www.sqlalchemy.org/trac/ticket/2696)。
- en: 'References: [#3946](https://www.sqlalchemy.org/trac/ticket/3946)'
  id: totrans-1512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3946](https://www.sqlalchemy.org/trac/ticket/3946)
- en: sql
  id: totrans-1513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Added support for the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") and the [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") objects to be compatible with each other. That
    is, a variant can be created against a type like [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), and the instructions to create constraints and/or database-specific
    type objects will propagate correctly as per the variant’s dialect mapping.
  id: totrans-1515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对[`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")和[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")对象相互兼容的支持。也就是说，一个变体可以针对像[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")这样的类型创建，并且创建约束和/或数据库特定类型对象的指令将根据变体的方言映射正确传播。
- en: 'References: [#2892](https://www.sqlalchemy.org/trac/ticket/2892)'
  id: totrans-1516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2892](https://www.sqlalchemy.org/trac/ticket/2892)
- en: '**[sql] [bug]**'
  id: totrans-1517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in compiler where the string identifier of a savepoint would be cached
    in the identifier quoting dictionary; as these identifiers are arbitrary, a small
    memory leak could occur if a single [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had an unbounded number of savepoints used, as
    well as if the savepoint clause constructs were used directly with an unbounded
    umber of savepoint names. The memory leak does **not** impact the vast majority
    of cases as normally the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), which renders savepoint names with a simple counter
    starting at “1”, is used on a per-transaction or per-fixed-number-of-transactions
    basis before being discarded.
  id: totrans-1518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器中的一个bug，即保存点的字符串标识符会被缓存在标识符引用字典中；由于这些标识符是任意的，如果一个单独的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")使用了无限数量的保存点，或者如果直接使用保存点子句构造了无限数量的保存点名称，就会发生一个小内存泄漏。这个内存泄漏**不会**影响绝大多数情况，因为通常会在每个事务或每个固定数量的事务基础上使用一个简单计数器从“1”开始渲染保存点名称的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，然后将其丢弃。
- en: 'References: [#3931](https://www.sqlalchemy.org/trac/ticket/3931)'
  id: totrans-1519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3931](https://www.sqlalchemy.org/trac/ticket/3931)
- en: '**[sql] [bug]**'
  id: totrans-1520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “schema translate” feature where the translated schema name
    would be invoked in terms of an alias name when rendered along with a column expression;
    occurred only when the source translate name was “None”. The “schema translate”
    feature now only takes effect for [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") and [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses, that is, objects that correspond to
    a DDL-creatable structure in a database.
  id: totrans-1521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“schema translate”功能中的错误，其中在与列表达式一起渲染时，翻译后的模式名称将以别名名称的形式调用；仅在源翻译名称为“None”时才会发生。现在，“schema
    translate”功能仅在 [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 和 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") 子类上才生效，即对应于数据库中可DDL创建的结构的对象。
- en: 'References: [#3924](https://www.sqlalchemy.org/trac/ticket/3924)'
  id: totrans-1522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3924](https://www.sqlalchemy.org/trac/ticket/3924)
- en: oracle
  id: totrans-1523
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: A fix to cx_Oracle’s WITH_UNICODE mode which was uncovered by the fact that
    cx_Oracle 5.3 now seems to hardcode this flag on in the build; an internal method
    that uses this mode wasn’t using the correct signature.
  id: totrans-1525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过发现 cx_Oracle 5.3 现在似乎在构建时强制启用 WITH_UNICODE 模式的一个修复，揭示了 cx_Oracle 的 WITH_UNICODE
    模式存在的问题；一个使用此模式的内部方法未使用正确的签名。
- en: 'This change is also **backported** to: 1.0.18'
  id: totrans-1526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **向后移植** 到：1.0.18
- en: 'References: [#3937](https://www.sqlalchemy.org/trac/ticket/3937)'
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3937](https://www.sqlalchemy.org/trac/ticket/3937)
- en: 1.1.6
  id: totrans-1528
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.6
- en: 'Released: February 28, 2017'
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年2月28日
- en: orm
  id: totrans-1530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Addressed some long unattended performance concerns within the joined eager
    loader query construction system that have accumulated since earlier versions
    as a result of increased abstraction. The use of ad- hoc [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects per query, which produces lots of
    column lookup overhead each time, has been replaced with a cached approach that
    makes use of a small pool of [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects that are reused between invocations
    of joined eager loading. Some mechanics involving eager join path construction
    have also been optimized. Callcounts for an end-to-end query construction + single
    row fetch test with a worst-case joined loader scenario have been reduced by about
    60% vs. 1.1.5 and 42% vs. that of 0.8.6.
  id: totrans-1532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决了加入了 eager 加载器查询构造系统中长时间未解决的性能问题，这些问题是自早期版本以来由于增加的抽象而积累起来的。每次查询使用 ad-hoc [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 对象产生大量列查找开销，现已用一个缓存方法替换，该方法利用了一小部分在调用之间重复使用的
    [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    对象池。还对一些涉及 eager 连接路径构造的机制进行了优化。与 1.1.5 相比，最坏情况下的 joined loader 场景的端到端查询构造 + 单行提取测试的调用次数减少了约
    60%，与 0.8.6 相比减少了约 42%。
- en: 'References: [#3915](https://www.sqlalchemy.org/trac/ticket/3915)'
  id: totrans-1533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3915](https://www.sqlalchemy.org/trac/ticket/3915)
- en: '**[orm] [bug]**'
  id: totrans-1534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a major inefficiency in the “eager_defaults” feature whereby an unnecessary
    SELECT would be emitted for column values where the ORM had explicitly inserted
    NULL, corresponding to attributes that were unset on the object but did not have
    any server default specified, as well as expired attributes on update that nevertheless
    had no server onupdate set up. As these columns are not part of the RETURNING
    that eager_defaults tries to use, they should not be post-SELECTed either.
  id: totrans-1535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“eager_defaults”功能中的一个主要效率问题，即对于 ORM 显式插入 NULL 的列值会发出不必要的 SELECT，这些列对应于对象上未设置的属性，但没有指定任何服务器默认值，以及在更新时已过期的属性，但仍然没有设置服务器的
    onupdate。由于这些列不是 eager_defaults 尝试使用的 RETURNING 的一部分，因此也不应进行后续选择。
- en: 'References: [#3909](https://www.sqlalchemy.org/trac/ticket/3909)'
  id: totrans-1536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3909](https://www.sqlalchemy.org/trac/ticket/3909)
- en: '**[orm] [bug]**'
  id: totrans-1537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed two closely related bugs involving the mapper eager_defaults flag in conjunction
    with single-table inheritance; one where the eager defaults logic would inadvertently
    try to access a column that’s part of the mapper’s “exclude_properties” list (used
    by Declarative with single table inheritance) during the eager defaults fetch,
    and the other where the full load of the row in order to fetch the defaults would
    fail to use the correct inheriting mapper.
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个密切相关的 bug，涉及映射器的 eager_defaults 标志与单表继承结合使用时的情况；一个是 eager defaults 逻辑会在
    eager defaults 获取期间无意中尝试访问映射器的 “exclude_properties” 列表中的列（由单表继承使用）的 bug，另一个是为了获取默认值而对行进行完全加载时，使用错误的继承映射器的
    bug。
- en: 'References: [#3908](https://www.sqlalchemy.org/trac/ticket/3908)'
  id: totrans-1539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3908](https://www.sqlalchemy.org/trac/ticket/3908)
- en: '**[orm] [bug]**'
  id: totrans-1540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug first introduced in 0.9.7 as a result of [#3106](https://www.sqlalchemy.org/trac/ticket/3106)
    which would cause an incorrect query in some forms of multi-level subqueryload
    against aliased entities, with an unnecessary extra FROM entity in the innermost
    subquery.
  id: totrans-1541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 0.9.7 引入的 bug，由于 [#3106](https://www.sqlalchemy.org/trac/ticket/3106) 导致某些形式的多级子查询加载针对别名实体会出现不正确查询的
    bug，在最内层子查询中会多出一个不必要的额外 FROM 实体。
- en: 'References: [#3893](https://www.sqlalchemy.org/trac/ticket/3893)'
  id: totrans-1542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3893](https://www.sqlalchemy.org/trac/ticket/3893)
- en: orm declarative
  id: totrans-1543
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where the “automatic exclude” feature of declarative that ensures
    a column local to a single table inheritance subclass does not appear as an attribute
    on other derivations of the base would not take effect for multiple levels of
    subclassing from the base.
  id: totrans-1545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“自动排除”特性的 bug，在声明中确保单个表继承子类的列不会出现在基类的其他派生类属性中，对于从基类进行多级子类化时不会生效的 bug。
- en: 'References: [#3895](https://www.sqlalchemy.org/trac/ticket/3895)'
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3895](https://www.sqlalchemy.org/trac/ticket/3895)
- en: sql
  id: totrans-1547
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the [`DDLEvents.column_reflect()`](../core/events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event would not allow a non-textual
    expression to be passed as the value of the “default” for the new column, such
    as a [`FetchedValue`](../core/defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    object to indicate a generic triggered default or a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct. Clarified the documentation in this
    regard as well.
  id: totrans-1549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`DDLEvents.column_reflect()`](../core/events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") 事件的 bug，在新列的 “default” 值中不允许传递非文本表达式的
    bug，例如用于指示通用触发默认或 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造的 [`FetchedValue`](../core/defaults.html#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue") 对象。同时在文档中澄清了这一点。
- en: 'References: [#3905](https://www.sqlalchemy.org/trac/ticket/3905)'
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3905](https://www.sqlalchemy.org/trac/ticket/3905)
- en: postgresql
  id: totrans-1551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added regular expressions for the “IMPORT FOREIGN SCHEMA”, “REFRESH MATERIALIZED
    VIEW” PostgreSQL statements so that they autocommit when invoked via a connection
    or engine without an explicit transaction. Pull requests courtesy Frazer McLean
    and Paweł Stiasny.
  id: totrans-1553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“IMPORT FOREIGN SCHEMA”、“REFRESH MATERIALIZED VIEW” PostgreSQL 语句添加了正则表达式，使其在通过连接或引擎调用时自动提交，而无需显式事务。感谢
    Frazer McLean 和 Paweł Stiasny 的拉取请求。
- en: 'References: [#3804](https://www.sqlalchemy.org/trac/ticket/3804)'
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3804](https://www.sqlalchemy.org/trac/ticket/3804)
- en: '**[postgresql] [bug]**'
  id: totrans-1555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") where the “whereclause” and
    “using” parameters would not be copied during an operation like [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").
  id: totrans-1556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 中 [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 的 bug，在像 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 这样的操作中，“whereclause” 和 “using” 参数将不会被复制。
- en: 'References: [#3900](https://www.sqlalchemy.org/trac/ticket/3900)'
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3900](https://www.sqlalchemy.org/trac/ticket/3900)
- en: mysql
  id: totrans-1558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new MySQL 8.0 reserved words to the MySQL dialect for proper quoting.
    Pull request courtesy Hanno Schlichting.
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 MySQL 方言添加了新的 MySQL 8.0 保留字，以便正确引用。感谢 Hanno Schlichting 的拉取请求。
- en: mssql
  id: totrans-1561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a version check to the “get_isolation_level” feature, which is invoked
    upon first connect, so that it skips for SQL Server version 2000, as the necessary
    system view is not available prior to SQL Server 2005.
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“get_isolation_level”功能中添加了一个版本检查，该功能在首次连接时调用，因此对于SQL Server 2000版本，它会跳过，因为在SQL
    Server 2005之前不可用必要的系统视图。
- en: 'References: [#3898](https://www.sqlalchemy.org/trac/ticket/3898)'
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3898](https://www.sqlalchemy.org/trac/ticket/3898)
- en: misc
  id: totrans-1565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added `Result.scalar()` and `Result.count()` to the “baked” query system.
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加`Result.scalar()`和`Result.count()`到“烘焙”查询系统中。
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[bug] [ext]**'
  id: totrans-1569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in new [`sqlalchemy.ext.indexable`](../orm/extensions/indexable.html#module-sqlalchemy.ext.indexable
    "sqlalchemy.ext.indexable") extension where setting of a property that itself
    refers to another property would fail.
  id: totrans-1570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`sqlalchemy.ext.indexable`](../orm/extensions/indexable.html#module-sqlalchemy.ext.indexable
    "sqlalchemy.ext.indexable")扩展中的错误，其中设置一个属性，该属性本身引用另一个属性将失败。
- en: 'References: [#3901](https://www.sqlalchemy.org/trac/ticket/3901)'
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3901](https://www.sqlalchemy.org/trac/ticket/3901)
- en: orm
  id: totrans-1572
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Addressed some long unattended performance concerns within the joined eager
    loader query construction system that have accumulated since earlier versions
    as a result of increased abstraction. The use of ad- hoc [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects per query, which produces lots of
    column lookup overhead each time, has been replaced with a cached approach that
    makes use of a small pool of [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects that are reused between invocations
    of joined eager loading. Some mechanics involving eager join path construction
    have also been optimized. Callcounts for an end-to-end query construction + single
    row fetch test with a worst-case joined loader scenario have been reduced by about
    60% vs. 1.1.5 and 42% vs. that of 0.8.6.
  id: totrans-1574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决了在连接的急切加载器查询构造系统中长期存在的性能问题，这些问题自早期版本以来一直积累，这是由于抽象层次的增加所导致的。每次查询都使用临时[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象，这会产生大量的列查找开销，现在已经被一个缓存方法取代，该方法利用一小组在连接的急切加载之间重复使用的[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象。还对涉及急切连接路径构造的一些机制进行了优化。对于最坏情况下的连接加载器方案的端到端查询构造+单行获取测试的调用次数，与1.1.5相比减少了约60%，与0.8.6相比减少了约42%。
- en: 'References: [#3915](https://www.sqlalchemy.org/trac/ticket/3915)'
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3915](https://www.sqlalchemy.org/trac/ticket/3915)
- en: '**[orm] [bug]**'
  id: totrans-1576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a major inefficiency in the “eager_defaults” feature whereby an unnecessary
    SELECT would be emitted for column values where the ORM had explicitly inserted
    NULL, corresponding to attributes that were unset on the object but did not have
    any server default specified, as well as expired attributes on update that nevertheless
    had no server onupdate set up. As these columns are not part of the RETURNING
    that eager_defaults tries to use, they should not be post-SELECTed either.
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“eager_defaults”功能中的一个主要低效性，即当ORM明确插入NULL对应于对象上未设置但没有指定任何服务器默认值的属性，以及在更新时过期的属性，尽管没有设置服务器onupdate时，将发出不必要的SELECT。由于这些列不是eager_defaults尝试使用的RETURNING的一部分，它们也不应该被后续SELECT。
- en: 'References: [#3909](https://www.sqlalchemy.org/trac/ticket/3909)'
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3909](https://www.sqlalchemy.org/trac/ticket/3909)
- en: '**[orm] [bug]**'
  id: totrans-1579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed two closely related bugs involving the mapper eager_defaults flag in conjunction
    with single-table inheritance; one where the eager defaults logic would inadvertently
    try to access a column that’s part of the mapper’s “exclude_properties” list (used
    by Declarative with single table inheritance) during the eager defaults fetch,
    and the other where the full load of the row in order to fetch the defaults would
    fail to use the correct inheriting mapper.
  id: totrans-1580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个与映射器急切默认标志相关的紧密相关的错误，与单表继承结合使用；一个是急切默认逻辑会在急切默认获取期间无意中尝试访问映射器的“exclude_properties”列表中的列（由具有单表继承的Declarative使用），另一个是为了获取默认值而完全加载行时，会失败地使用不正确的继承映射器。
- en: 'References: [#3908](https://www.sqlalchemy.org/trac/ticket/3908)'
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3908](https://www.sqlalchemy.org/trac/ticket/3908)
- en: '**[orm] [bug]**'
  id: totrans-1582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug first introduced in 0.9.7 as a result of [#3106](https://www.sqlalchemy.org/trac/ticket/3106)
    which would cause an incorrect query in some forms of multi-level subqueryload
    against aliased entities, with an unnecessary extra FROM entity in the innermost
    subquery.
  id: totrans-1583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.9.7 中首次引入的 bug，由于 [#3106](https://www.sqlalchemy.org/trac/ticket/3106)
    导致某些形式的多级子查询加载对别名实体的错误查询，在最内层子查询中多了一个不必要的额外 FROM 实体。
- en: 'References: [#3893](https://www.sqlalchemy.org/trac/ticket/3893)'
  id: totrans-1584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3893](https://www.sqlalchemy.org/trac/ticket/3893)
- en: orm declarative
  id: totrans-1585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where the “automatic exclude” feature of declarative that ensures
    a column local to a single table inheritance subclass does not appear as an attribute
    on other derivations of the base would not take effect for multiple levels of
    subclassing from the base.
  id: totrans-1587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明式的 “自动排除” 功能的 bug，该功能确保单个表继承子类的列不会出现在基类的其他派生类的属性中。
- en: 'References: [#3895](https://www.sqlalchemy.org/trac/ticket/3895)'
  id: totrans-1588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3895](https://www.sqlalchemy.org/trac/ticket/3895)
- en: sql
  id: totrans-1589
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the [`DDLEvents.column_reflect()`](../core/events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event would not allow a non-textual
    expression to be passed as the value of the “default” for the new column, such
    as a [`FetchedValue`](../core/defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    object to indicate a generic triggered default or a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct. Clarified the documentation in this
    regard as well.
  id: totrans-1591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`DDLEvents.column_reflect()`](../core/events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") 事件中的一个 bug，该事件不允许将非文本表达式作为新列的 “default”
    值传递，例如 [`FetchedValue`](../core/defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    对象表示通用触发默认值或 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造。同时也在文档中对此进行了澄清。
- en: 'References: [#3905](https://www.sqlalchemy.org/trac/ticket/3905)'
  id: totrans-1592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3905](https://www.sqlalchemy.org/trac/ticket/3905)
- en: postgresql
  id: totrans-1593
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added regular expressions for the “IMPORT FOREIGN SCHEMA”, “REFRESH MATERIALIZED
    VIEW” PostgreSQL statements so that they autocommit when invoked via a connection
    or engine without an explicit transaction. Pull requests courtesy Frazer McLean
    and Paweł Stiasny.
  id: totrans-1595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 “IMPORT FOREIGN SCHEMA”、“REFRESH MATERIALIZED VIEW” PostgreSQL 语句添加了正则表达式，以便在通过连接或引擎调用时自动提交，而无需显式事务。感谢
    Frazer McLean 和 Paweł Stiasny 的拉取请求。
- en: 'References: [#3804](https://www.sqlalchemy.org/trac/ticket/3804)'
  id: totrans-1596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3804](https://www.sqlalchemy.org/trac/ticket/3804)
- en: '**[postgresql] [bug]**'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") where the “whereclause” and
    “using” parameters would not be copied during an operation like [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 中的一个 bug，在类似 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 这样的操作中，“whereclause” 和 “using” 参数不会被复制。
- en: 'References: [#3900](https://www.sqlalchemy.org/trac/ticket/3900)'
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3900](https://www.sqlalchemy.org/trac/ticket/3900)
- en: mysql
  id: totrans-1600
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new MySQL 8.0 reserved words to the MySQL dialect for proper quoting.
    Pull request courtesy Hanno Schlichting.
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 MySQL 8.0 添加了新的保留字到 MySQL 方言以进行正确引用。感谢 Hanno Schlichting 的拉取请求。
- en: mssql
  id: totrans-1603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a version check to the “get_isolation_level” feature, which is invoked
    upon first connect, so that it skips for SQL Server version 2000, as the necessary
    system view is not available prior to SQL Server 2005.
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 “get_isolation_level” 功能添加了版本检查，该功能在首次连接时调用，以便在 SQL Server 版本 2000 中跳过���因为在
    SQL Server 2005 之前不可用必要的系统视图。
- en: 'References: [#3898](https://www.sqlalchemy.org/trac/ticket/3898)'
  id: totrans-1606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3898](https://www.sqlalchemy.org/trac/ticket/3898)
- en: misc
  id: totrans-1607
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added `Result.scalar()` and `Result.count()` to the “baked” query system.
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 “baked” 查询系统添加了 `Result.scalar()` 和 `Result.count()`。
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[bug] [ext]**'
  id: totrans-1611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in new [`sqlalchemy.ext.indexable`](../orm/extensions/indexable.html#module-sqlalchemy.ext.indexable
    "sqlalchemy.ext.indexable") extension where setting of a property that itself
    refers to another property would fail.
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`sqlalchemy.ext.indexable`](../orm/extensions/indexable.html#module-sqlalchemy.ext.indexable
    "sqlalchemy.ext.indexable")扩展中设置引用另一个属性的属性会失败的错误。
- en: 'References: [#3901](https://www.sqlalchemy.org/trac/ticket/3901)'
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3901](https://www.sqlalchemy.org/trac/ticket/3901)
- en: 1.1.5
  id: totrans-1614
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.5
- en: 'Released: January 17, 2017'
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年1月17日
- en: orm
  id: totrans-1616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving joined eager loading against multiple entities when polymorphic
    inheritance is also in use which would throw “‘NoneType’ object has no attribute
    ‘isa’”. The issue was introduced by the fix for [#3611](https://www.sqlalchemy.org/trac/ticket/3611).
  id: totrans-1618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及多个实体的连接急加载与多态继承同时使用时会抛出“‘NoneType’对象没有‘isa’属性”的错误的错误。此问题是由对[#3611](https://www.sqlalchemy.org/trac/ticket/3611)的修复引入的。
- en: 'This change is also **backported** to: 1.0.17'
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.17
- en: 'References: [#3884](https://www.sqlalchemy.org/trac/ticket/3884)'
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3884](https://www.sqlalchemy.org/trac/ticket/3884)
- en: '**[orm] [bug]**'
  id: totrans-1621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery loading where an object encountered as an “existing” row,
    e.g. already loaded from a different path in the same query, would not invoke
    subquery loaders for unloaded attributes that specified this loading. This issue
    is in the same area as that of [#3431](https://www.sqlalchemy.org/trac/ticket/3431),
    [#3811](https://www.sqlalchemy.org/trac/ticket/3811) which involved similar issues
    with joined loading.
  id: totrans-1622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询加载中的错误，其中作为“现有”行遇到的对象，例如在同一查询中从不同路径加载的对象，不会为指定了此加载的未加载属性调用子查询加载程序。此问题与[#3431](https://www.sqlalchemy.org/trac/ticket/3431)、[#3811](https://www.sqlalchemy.org/trac/ticket/3811)中涉及的与连接加载类似的问题在同一领域。
- en: 'References: [#3854](https://www.sqlalchemy.org/trac/ticket/3854)'
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3854](https://www.sqlalchemy.org/trac/ticket/3854)
- en: '**[orm] [bug]**'
  id: totrans-1624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Session.no_autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager now ensures that the autoflush
    flag is reset within a “finally” block, so that if an exception is raised within
    the block, the state still resets appropriately. Pull request courtesy Emin Arakelian.
  id: totrans-1625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.no_autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush")上下文管理器现在确保在“finally”块内重置自动刷新标志，以便如果在块内引发异常，则状态仍然适当地重置。感谢Emin
    Arakelian提供的拉取请求。'
- en: '**[orm] [bug]**'
  id: totrans-1626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the single-table inheritance query criteria would not be inserted
    into the query in the case that the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") construct were used as the selection criteria.
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承查询标准不会插入到查询中的错误，即如果[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")构造用作选择标准。
- en: 'References: [#3874](https://www.sqlalchemy.org/trac/ticket/3874)'
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3874](https://www.sqlalchemy.org/trac/ticket/3874)
- en: '**[orm] [bug]**'
  id: totrans-1629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug related to [#3177](https://www.sqlalchemy.org/trac/ticket/3177), where
    a UNION or other set operation emitted by a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") would apply “single-inheritance” criteria to the outside
    of the union (also referencing the wrong selectable), even though this criteria
    is now expected to be already present on the inside subqueries. The single-inheritance
    criteria is now omitted once union() or another set operation is called against
    [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    in the same way as `Query.from_self()`.
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[#3177](https://www.sqlalchemy.org/trac/ticket/3177)相关的错误，其中[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")发出的UNION或其他集合操作会将“单继承”标准应用于联合的外部（还引用了错误的可选择项），尽管现在预期这些标准已经存在于内部子查询中。一旦针对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")调用union()或另一个集合操作，单继承标准就会像`Query.from_self()`一样被省略。
- en: 'References: [#3856](https://www.sqlalchemy.org/trac/ticket/3856)'
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3856](https://www.sqlalchemy.org/trac/ticket/3856)
- en: examples
  id: totrans-1632
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-1633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed two issues with the versioned_history example, one is that the history
    table now gets autoincrement=False to avoid 1.1’s new errors regarding composite
    primary keys with autoincrement; the other is that the sqlite_autoincrement flag
    is now used to ensure on SQLite, unique identifiers are used for the lifespan
    of a table even if some rows are deleted. Pull request courtesy Carlos García
    Montoro.
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了版本历史示例中的两个问题，一个是历史表现在autoincrement=False以避免1.1版本中关于自动增量的复合主键的新错误；另一个是现在使用sqlite_autoincrement标志以确保在SQLite上，即使删除了一些行，表的生命周期中也使用唯一标识符。感谢Carlos
    García Montoro的拉取请求。
- en: 'References: [#3872](https://www.sqlalchemy.org/trac/ticket/3872)'
  id: totrans-1635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3872](https://www.sqlalchemy.org/trac/ticket/3872)
- en: engine
  id: totrans-1636
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The “extend_existing” option of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") reflection would cause indexes and constraints to be
    doubled up in the case that the parameter were used with [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") (as the automap extension does) due to tables
    being reflected both within the foreign key path as well as directly. A new de-duplicating
    set is passed through within the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") sequence to prevent double reflection in
    this way.
  id: totrans-1638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")反射的“extend_existing”选项会导致索引和约束在使用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")（如automap扩展所做的）参数时会重复出现，因为表既在外键路径中反射，也直接反射。在[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")序列中传递一个新的去重集合，以防止以这种方式重复反射。'
- en: 'References: [#3861](https://www.sqlalchemy.org/trac/ticket/3861)'
  id: totrans-1639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3861](https://www.sqlalchemy.org/trac/ticket/3861)
- en: sql
  id: totrans-1640
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug originally introduced in 0.9 via [#1068](https://www.sqlalchemy.org/trac/ticket/1068)
    where order_by(<some Label()>) would order by the label name based on name alone,
    that is, even if the labeled expression were not at all the same expression otherwise
    present, implicitly or explicitly, in the selectable. The logic that orders by
    label now ensures that the labeled expression is related to the one that resolves
    to that name before ordering by the label name; additionally, the name has to
    resolve to an actual label explicit in the expression elsewhere, not just a column
    name. This logic is carefully kept separate from the order by(textual name) feature
    that has a slightly different purpose.
  id: totrans-1642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最初在0.9版本中引入的bug，通过[#1068](https://www.sqlalchemy.org/trac/ticket/1068)，其中order_by(<some
    Label()>)会根据名称单独对标签名称进行排序，即使标记的表达式与可选择的其他表达式完全不同，隐式或显式地存在。现在，按标签排序的逻辑确保标记的表达式与解析为该名称的表达式相关联，然后按标签名称排序；此外，名称必须在表达式中的其他地方明确解析为实际标签，而不仅仅是列名。这种逻辑与按(textual
    name)排序的功能严格分开，后者具有稍微不同的目的。
- en: 'References: [#3882](https://www.sqlalchemy.org/trac/ticket/3882)'
  id: totrans-1643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3882](https://www.sqlalchemy.org/trac/ticket/3882)
- en: '**[sql] [bug]**'
  id: totrans-1644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 1.1 regression where `import *` would not work for sqlalchemy.sql.expression,
    due to mis-spelled `any_` and `all_` functions.
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.1版本中`import *`无法在sqlalchemy.sql.expression中工作的回归问题，因为`any_`和`all_`函数拼写错误。
- en: 'References: [#3878](https://www.sqlalchemy.org/trac/ticket/3878)'
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3878](https://www.sqlalchemy.org/trac/ticket/3878)
- en: '**[sql] [bug]**'
  id: totrans-1647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The engine URL embedded in the exception for “could not reflect” in [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") now conceals the password; also the `__repr__`
    for `TLEngine` now acts like that of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), concealing the URL password. Pull request courtesy
    Valery Yundin.
  id: totrans-1648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")中“无法反射”异常中嵌入的引擎URL现在隐藏了密码；此外，`TLEngine`的`__repr__`现在的行为类似于[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，隐藏了URL密码。感谢Valery Yundin的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    where the “right hand coercion” logic, inherited from [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"), would coerce the right-hand side into the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") itself, rather than what the default type for the
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    would do. In the case of [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"), we want the type to act mostly like the base type
    so the default logic of [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") is now overridden to fall back to the underlying
    wrapped type’s logic. Is mostly relevant for JSON at the moment.
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    中的问题，其中“right hand coercion”逻辑继承自 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") ，会将右侧强制转换为 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 本身，而不是默认的 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 的默认类型。在 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 的情况下，我们希望类型大部分像基本类型一样运行，因此默认的 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 逻辑现在被重写为回退到基础包装类型的逻辑。目前主要与 JSON 相关。
- en: 'References: [#3859](https://www.sqlalchemy.org/trac/ticket/3859)'
  id: totrans-1651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3859](https://www.sqlalchemy.org/trac/ticket/3859)
- en: '**[sql] [bg]**'
  id: totrans-1652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bg]**'
- en: Fixed bug where literal_binds compiler flag was not honored by the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct for the “multiple values” feature;
    the subsequent values are now rendered as literals.
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当“literal_binds”编译器标志对“multiple values”特性的 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造未被遵守时，随后的值现在将作为文字呈现。
- en: 'References: [#3880](https://www.sqlalchemy.org/trac/ticket/3880)'
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3880](https://www.sqlalchemy.org/trac/ticket/3880)
- en: postgresql
  id: totrans-1655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in new “ON CONFLICT DO UPDATE” feature where the “set” values for
    the UPDATE clause would not be subject to type-level processing, as normally takes
    effect to handle both user-defined type level conversions as well as dialect-required
    conversions, such as those required for JSON datatypes. Additionally, clarified
    that the keys in the `set_` dictionary should match the “key” of the column, if
    distinct from the column name. A warning is emitted for remaining column names
    that don’t match column keys; for compatibility reasons, these are emitted as
    they were previously.
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“ON CONFLICT DO UPDATE”功能中的错误，其中 UPDATE 子句的“set”值将不受类型级别处理的影响，通常会处理用户定义的类型级别转换以及方言要求的转换，例如
    JSON 数据类型所需的转换。另外，澄清了 `set_` 字典中的键应该与列的“键”匹配，如果与列名不同，则应匹配。对于不匹配列名的剩余列名，将发出警告；出于兼容性原因，这些警告将像以前一样发出。
- en: 'References: [#3888](https://www.sqlalchemy.org/trac/ticket/3888)'
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3888](https://www.sqlalchemy.org/trac/ticket/3888)
- en: '**[postgresql] [bug]**'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`TIME`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIME
    "sqlalchemy.dialects.postgresql.TIME") and [`TIMESTAMP`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") datatypes now support a setting of
    zero for “precision”; previously a zero would be ignored. Pull request courtesy
    Ionuț Ciocîrlan.
  id: totrans-1660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TIME`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIME "sqlalchemy.dialects.postgresql.TIME")
    和 [`TIMESTAMP`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") 数据类型现在支持“精度”设置为零；以前零会被忽略。感谢 Ionuț
    Ciocîrlan 提供的拉取请求。'
- en: mysql
  id: totrans-1661
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added a new parameter `mysql_prefix` supported by the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct, allows specification of MySQL-specific prefixes
    such as “FULLTEXT”. Pull request courtesy Joseph Schorr.
  id: totrans-1663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的参数 `mysql_prefix`，由 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造支持，允许指定 MySQL 特定的前缀，如“FULLTEXT”。感谢 Joseph Schorr
    提供的拉取请求。
- en: '**[mysql] [bug]**'
  id: totrans-1664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect now will not warn when a reflected column has a “COMMENT”
    keyword on it, but note however the comment is not yet reflected; this is on the
    roadmap for a future release. Pull request courtesy Lele Long.
  id: totrans-1665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在在反射的列上有“COMMENT”关键字时不会发出警告，但需要注意的是，评论尚未反映出来；这在未来的发布计划中。感谢 Lele Long
    提供的拉取请求。
- en: 'References: [#3867](https://www.sqlalchemy.org/trac/ticket/3867)'
  id: totrans-1666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3867](https://www.sqlalchemy.org/trac/ticket/3867)
- en: mssql
  id: totrans-1667
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server dialects would attempt to select the last row identity
    for an INSERT from SELECT, failing in the case when the SELECT has no rows. For
    such a statement, the inline flag is set to True indicating no last primary key
    should be fetched.
  id: totrans-1669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言尝试从 SELECT 中选择最后一行标识符进行插入时出现 bug 的问题，在 SELECT 没有行的情况下会失败。对于这样的语句，内联标志被设置为
    True，表示不应获取最后一个主键。
- en: 'References: [#3876](https://www.sqlalchemy.org/trac/ticket/3876)'
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3876](https://www.sqlalchemy.org/trac/ticket/3876)
- en: oracle
  id: totrans-1671
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [postgresql]**'
  id: totrans-1672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [postgresql]**'
- en: Fixed bug where an INSERT from SELECT where the source table contains an autoincrementing
    Sequence would fail to compile correctly.
  id: totrans-1673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在源表包含自动递增序列的情况下，从 SELECT 进行插入会无法正确编译。
- en: 'References: [#3877](https://www.sqlalchemy.org/trac/ticket/3877)'
  id: totrans-1674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3877](https://www.sqlalchemy.org/trac/ticket/3877)
- en: '**[oracle] [bug]**'
  id: totrans-1675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where the “COMPRESSION” keyword was used in the ALL_TABLES query on
    Oracle 9.2; even though Oracle docs state table compression was introduced in
    9i, the actual column is not present until 10.1.
  id: totrans-1676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Oracle 9.2 上在 ALL_TABLES 查询中使用“COMPRESSION”关键字的 bug；尽管 Oracle 文档指出表压缩是在
    9i 中引入的，但实际列直到 10.1 才存在。
- en: 'References: [#3875](https://www.sqlalchemy.org/trac/ticket/3875)'
  id: totrans-1677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3875](https://www.sqlalchemy.org/trac/ticket/3875)
- en: misc
  id: totrans-1678
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [py3k]**'
  id: totrans-1679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed Python 3.6 DeprecationWarnings related to escaped strings without the
    ‘r’ modifier, and added test coverage for Python 3.6.
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与未带‘r’修饰符的转义字符串相关的 Python 3.6 DeprecationWarnings，并为 Python 3.6 添加了测试覆盖。
- en: 'This change is also **backported** to: 1.0.17'
  id: totrans-1681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.17
- en: 'References: [#3886](https://www.sqlalchemy.org/trac/ticket/3886)'
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3886](https://www.sqlalchemy.org/trac/ticket/3886)
- en: '**[bug] [firebird]**'
  id: totrans-1683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Ported the fix for Oracle quoted-lowercase names to Firebird, so that a table
    name that is quoted as lower case can be reflected properly including when the
    table name comes from the get_table_names() inspection function.
  id: totrans-1684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用于 Oracle 引用小写名称的修复移植到 Firebird，以便可以正确反映以小写引用的表名，包括表名来自 get_table_names() 检查函数的情况。
- en: 'References: [#3548](https://www.sqlalchemy.org/trac/ticket/3548)'
  id: totrans-1685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3548](https://www.sqlalchemy.org/trac/ticket/3548)
- en: orm
  id: totrans-1686
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving joined eager loading against multiple entities when polymorphic
    inheritance is also in use which would throw “‘NoneType’ object has no attribute
    ‘isa’”. The issue was introduced by the fix for [#3611](https://www.sqlalchemy.org/trac/ticket/3611).
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及多个实体的连接急加载以及同时使用多态继承时会抛出“'NoneType' object has no attribute 'isa'”错误的 bug。此问题是由于
    [#3611](https://www.sqlalchemy.org/trac/ticket/3611) 的修复引入的。
- en: 'This change is also **backported** to: 1.0.17'
  id: totrans-1689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.17
- en: 'References: [#3884](https://www.sqlalchemy.org/trac/ticket/3884)'
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3884](https://www.sqlalchemy.org/trac/ticket/3884)
- en: '**[orm] [bug]**'
  id: totrans-1691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery loading where an object encountered as an “existing” row,
    e.g. already loaded from a different path in the same query, would not invoke
    subquery loaders for unloaded attributes that specified this loading. This issue
    is in the same area as that of [#3431](https://www.sqlalchemy.org/trac/ticket/3431),
    [#3811](https://www.sqlalchemy.org/trac/ticket/3811) which involved similar issues
    with joined loading.
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询加载中的 bug，当对象作为“现有”行遇到时，例如在同一查询中从不同路径加载的对象，不会为指定了此加载的未加载属性调用子查询加载器。这个问题与
    [#3431](https://www.sqlalchemy.org/trac/ticket/3431)、[#3811](https://www.sqlalchemy.org/trac/ticket/3811)
    中涉及的与连接加载类似的问题在同一领域。
- en: 'References: [#3854](https://www.sqlalchemy.org/trac/ticket/3854)'
  id: totrans-1693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3854](https://www.sqlalchemy.org/trac/ticket/3854)
- en: '**[orm] [bug]**'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Session.no_autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager now ensures that the autoflush
    flag is reset within a “finally” block, so that if an exception is raised within
    the block, the state still resets appropriately. Pull request courtesy Emin Arakelian.
  id: totrans-1695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.no_autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") 上下文管理器现在确保在“finally”块中重置自动刷新标志，因此如果在块内引发异常，则状态仍会适当重置。感谢
    Emin Arakelian 的拉取请求。'
- en: '**[orm] [bug]**'
  id: totrans-1696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the single-table inheritance query criteria would not be inserted
    into the query in the case that the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") construct were used as the selection criteria.
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承查询条件不会插入到查询中的 bug，即在选择条件中使用 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") 构造时。
- en: 'References: [#3874](https://www.sqlalchemy.org/trac/ticket/3874)'
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3874](https://www.sqlalchemy.org/trac/ticket/3874)
- en: '**[orm] [bug]**'
  id: totrans-1699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug related to [#3177](https://www.sqlalchemy.org/trac/ticket/3177), where
    a UNION or other set operation emitted by a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") would apply “single-inheritance” criteria to the outside
    of the union (also referencing the wrong selectable), even though this criteria
    is now expected to be already present on the inside subqueries. The single-inheritance
    criteria is now omitted once union() or another set operation is called against
    [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    in the same way as `Query.from_self()`.
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 [#3177](https://www.sqlalchemy.org/trac/ticket/3177) 相关的 bug，即 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 发出的 UNION 或其他集合操作会将“单继承”条件应用于联合的外部（还引用了错误的可选择项），尽管现在预期这些条件已经存在于内部子查询中。一旦对
    [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    调用 union() 或其他集合操作，单继承条件就会像 `Query.from_self()` 一样被省略。
- en: 'References: [#3856](https://www.sqlalchemy.org/trac/ticket/3856)'
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3856](https://www.sqlalchemy.org/trac/ticket/3856)
- en: examples
  id: totrans-1702
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed two issues with the versioned_history example, one is that the history
    table now gets autoincrement=False to avoid 1.1’s new errors regarding composite
    primary keys with autoincrement; the other is that the sqlite_autoincrement flag
    is now used to ensure on SQLite, unique identifiers are used for the lifespan
    of a table even if some rows are deleted. Pull request courtesy Carlos García
    Montoro.
  id: totrans-1704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了版本化历史示例的两个问题，一个是历史表现在 autoincrement=False 以避免 1.1 版本关于具有自动增量的复合主键的新错误；另一个是现在使用
    sqlite_autoincrement 标志以确保在 SQLite 上，即使删除了某些行，也会为表的生命周期使用唯一标识符。感谢 Carlos García
    Montoro 的拉取请求。
- en: 'References: [#3872](https://www.sqlalchemy.org/trac/ticket/3872)'
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3872](https://www.sqlalchemy.org/trac/ticket/3872)
- en: engine
  id: totrans-1706
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The “extend_existing” option of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") reflection would cause indexes and constraints to be
    doubled up in the case that the parameter were used with [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") (as the automap extension does) due to tables
    being reflected both within the foreign key path as well as directly. A new de-duplicating
    set is passed through within the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") sequence to prevent double reflection in
    this way.
  id: totrans-1708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    反射的“extend_existing”选项会导致索引和约束在使用 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")（如 automap 扩展所做的那样）参数时会重复出现，因为表会在外键路径和直接反射两次。在
    [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 序列中传递一个新的去重集合，以防止这种重复反射。'
- en: 'References: [#3861](https://www.sqlalchemy.org/trac/ticket/3861)'
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3861](https://www.sqlalchemy.org/trac/ticket/3861)
- en: sql
  id: totrans-1710
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug originally introduced in 0.9 via [#1068](https://www.sqlalchemy.org/trac/ticket/1068)
    where order_by(<some Label()>) would order by the label name based on name alone,
    that is, even if the labeled expression were not at all the same expression otherwise
    present, implicitly or explicitly, in the selectable. The logic that orders by
    label now ensures that the labeled expression is related to the one that resolves
    to that name before ordering by the label name; additionally, the name has to
    resolve to an actual label explicit in the expression elsewhere, not just a column
    name. This logic is carefully kept separate from the order by(textual name) feature
    that has a slightly different purpose.
  id: totrans-1712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最初在 0.9 版本中引入的 bug，通过 [#1068](https://www.sqlalchemy.org/trac/ticket/1068)，其中
    order_by(<some Label()>) 会根据名称对标签进行排序，即使标记的表达式与可选择的其他表达式在其他地方明确或隐式地存在，也是如此。现在，按标签排序的逻辑确保标记的表达式与解析为该名称的表达式相关联，然后再按标签名称排序；此外，名称必须在表达式的其他地方明确表示为实际标签，而不仅仅是列名。这种逻辑与按照（文本名称）排序的功能严格分开，后者具有稍微不同的目的。
- en: 'References: [#3882](https://www.sqlalchemy.org/trac/ticket/3882)'
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3882](https://www.sqlalchemy.org/trac/ticket/3882)
- en: '**[sql] [bug]**'
  id: totrans-1714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 1.1 regression where `import *` would not work for sqlalchemy.sql.expression,
    due to mis-spelled `any_` and `all_` functions.
  id: totrans-1715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.1 版本的一个回归问题，即 `import *` 对于 sqlalchemy.sql.expression 不起作用，因为 `any_` 和
    `all_` 函数拼写错误。
- en: 'References: [#3878](https://www.sqlalchemy.org/trac/ticket/3878)'
  id: totrans-1716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3878](https://www.sqlalchemy.org/trac/ticket/3878)
- en: '**[sql] [bug]**'
  id: totrans-1717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The engine URL embedded in the exception for “could not reflect” in [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") now conceals the password; also the `__repr__`
    for `TLEngine` now acts like that of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), concealing the URL password. Pull request courtesy
    Valery Yundin.
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 中“无法反射”异常中嵌入的引擎 URL 现在隐藏了密码；此外，`TLEngine`
    的 `__repr__` 现在的行为类似于 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，隐藏了 URL 密码。感谢 Valery Yundin 提交的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    where the “right hand coercion” logic, inherited from [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"), would coerce the right-hand side into the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") itself, rather than what the default type for the
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    would do. In the case of [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"), we want the type to act mostly like the base type
    so the default logic of [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") is now overridden to fall back to the underlying
    wrapped type’s logic. Is mostly relevant for JSON at the moment.
  id: totrans-1720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    中的问题，其中“右手边强制转换”逻辑，继承自 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")，会将右侧强制转换为 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 本身，而不是默认类型所做的。在 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 的情况下，我们希望该类型大部分像基本类型一样运行，因此现在覆盖了 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 的默认逻辑，以回退到基础包装类型的逻辑。目前主要与 JSON 相关。
- en: 'References: [#3859](https://www.sqlalchemy.org/trac/ticket/3859)'
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3859](https://www.sqlalchemy.org/trac/ticket/3859)
- en: '**[sql] [bg]**'
  id: totrans-1722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bg]**'
- en: Fixed bug where literal_binds compiler flag was not honored by the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct for the “multiple values” feature;
    the subsequent values are now rendered as literals.
  id: totrans-1723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 literal_binds 编译器标志未被 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造的“多值”功能所遵守的 bug；随后的值现在被呈现为文字值。
- en: 'References: [#3880](https://www.sqlalchemy.org/trac/ticket/3880)'
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3880](https://www.sqlalchemy.org/trac/ticket/3880)
- en: postgresql
  id: totrans-1725
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in new “ON CONFLICT DO UPDATE” feature where the “set” values for
    the UPDATE clause would not be subject to type-level processing, as normally takes
    effect to handle both user-defined type level conversions as well as dialect-required
    conversions, such as those required for JSON datatypes. Additionally, clarified
    that the keys in the `set_` dictionary should match the “key” of the column, if
    distinct from the column name. A warning is emitted for remaining column names
    that don’t match column keys; for compatibility reasons, these are emitted as
    they were previously.
  id: totrans-1727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“ON CONFLICT DO UPDATE”功能中的 bug，即 UPDATE 子句的“set”值不会受到类型级别处理的影响，通常会处理用户定义的类型级别转换以及方言所需的转换，例如
    JSON 数据类型所需的转换。此外，澄清了`set_`字典中的键应与列的“key”匹配，如果与列名不同。对于不匹配列键的剩余列名发出警告；出于兼容性原因，这些列名会像以前一样发出。
- en: 'References: [#3888](https://www.sqlalchemy.org/trac/ticket/3888)'
  id: totrans-1728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3888](https://www.sqlalchemy.org/trac/ticket/3888)
- en: '**[postgresql] [bug]**'
  id: totrans-1729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`TIME`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIME
    "sqlalchemy.dialects.postgresql.TIME") and [`TIMESTAMP`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") datatypes now support a setting of
    zero for “precision”; previously a zero would be ignored. Pull request courtesy
    Ionuț Ciocîrlan.
  id: totrans-1730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TIME`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIME "sqlalchemy.dialects.postgresql.TIME")
    和 [`TIMESTAMP`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") 数据类型现在支持“precision”设置为零；以前零会被忽略。感谢
    Ionuț Ciocîrlan 的拉取请求。'
- en: mysql
  id: totrans-1731
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added a new parameter `mysql_prefix` supported by the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct, allows specification of MySQL-specific prefixes
    such as “FULLTEXT”. Pull request courtesy Joseph Schorr.
  id: totrans-1733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新参数`mysql_prefix`，由[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造支持，允许指定 MySQL 特定的前缀，如“FULLTEXT”。感谢 Joseph Schorr 的拉取请求。
- en: '**[mysql] [bug]**'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect now will not warn when a reflected column has a “COMMENT”
    keyword on it, but note however the comment is not yet reflected; this is on the
    roadmap for a future release. Pull request courtesy Lele Long.
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在不会在反射列上有“COMMENT”关键字时发出警告，但请注意评论尚未反映；这在将来的版本中计划。感谢 Lele Long 的拉取请求。
- en: 'References: [#3867](https://www.sqlalchemy.org/trac/ticket/3867)'
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3867](https://www.sqlalchemy.org/trac/ticket/3867)
- en: mssql
  id: totrans-1737
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server dialects would attempt to select the last row identity
    for an INSERT from SELECT, failing in the case when the SELECT has no rows. For
    such a statement, the inline flag is set to True indicating no last primary key
    should be fetched.
  id: totrans-1739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言尝试选择 INSERT from SELECT 的最后一行标识时失败的 bug，在 SELECT 没有行的情况下会失败。对于这样的语句，内联标志设置为
    True，表示不应获取最后一个主键。
- en: 'References: [#3876](https://www.sqlalchemy.org/trac/ticket/3876)'
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3876](https://www.sqlalchemy.org/trac/ticket/3876)
- en: oracle
  id: totrans-1741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [postgresql]**'
  id: totrans-1742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [postgresql]**'
- en: Fixed bug where an INSERT from SELECT where the source table contains an autoincrementing
    Sequence would fail to compile correctly.
  id: totrans-1743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在源表包含自动递增序列的情况下，从 SELECT 进行 INSERT 会导致编译错误的 bug。
- en: 'References: [#3877](https://www.sqlalchemy.org/trac/ticket/3877)'
  id: totrans-1744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3877](https://www.sqlalchemy.org/trac/ticket/3877)
- en: '**[oracle] [bug]**'
  id: totrans-1745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where the “COMPRESSION” keyword was used in the ALL_TABLES query on
    Oracle 9.2; even though Oracle docs state table compression was introduced in
    9i, the actual column is not present until 10.1.
  id: totrans-1746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Oracle 9.2 上在 ALL_TABLES 查询中使用“COMPRESSION”关键字的 bug；尽管 Oracle 文档中指出表压缩是在
    9i 中引入的，但实际列直到 10.1 才存在。
- en: 'References: [#3875](https://www.sqlalchemy.org/trac/ticket/3875)'
  id: totrans-1747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3875](https://www.sqlalchemy.org/trac/ticket/3875)
- en: misc
  id: totrans-1748
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [py3k]**'
  id: totrans-1749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed Python 3.6 DeprecationWarnings related to escaped strings without the
    ‘r’ modifier, and added test coverage for Python 3.6.
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与没有‘r’修饰符的转义字符串相关的 Python 3.6 DeprecationWarnings，并为 Python 3.6 添加了测试覆盖。
- en: 'This change is also **backported** to: 1.0.17'
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.0.17
- en: 'References: [#3886](https://www.sqlalchemy.org/trac/ticket/3886)'
  id: totrans-1752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3886](https://www.sqlalchemy.org/trac/ticket/3886)
- en: '**[bug] [firebird]**'
  id: totrans-1753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Ported the fix for Oracle quoted-lowercase names to Firebird, so that a table
    name that is quoted as lower case can be reflected properly including when the
    table name comes from the get_table_names() inspection function.
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将解决 Oracle 引号小写名称的问题移植到 Firebird，以便可以正确反映作为小写引号的表名，包括表名来自 get_table_names()
    检查函数时。
- en: 'References: [#3548](https://www.sqlalchemy.org/trac/ticket/3548)'
  id: totrans-1755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3548](https://www.sqlalchemy.org/trac/ticket/3548)
- en: 1.1.4
  id: totrans-1756
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.4
- en: 'Released: November 15, 2016'
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016 年 11 月 15 日
- en: orm
  id: totrans-1758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where an alternate-named primary
    key attribute would not track properly into the UPDATE statement.
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") 中的 bug，即备用命名的主键属性无法正确跟踪到 UPDATE
    语句中的问题。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.0.16
- en: 'References: [#3849](https://www.sqlalchemy.org/trac/ticket/3849)'
  id: totrans-1762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3849](https://www.sqlalchemy.org/trac/ticket/3849)
- en: '**[orm] [bug]**'
  id: totrans-1763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in `Session.bulk_save()` where an UPDATE would not function correctly
    in conjunction with a mapping that implements a version id counter.
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `Session.bulk_save()` 中的 bug，当与实现版本 id 计数器的映射配合使用时，UPDATE 将无法正确运行的问题。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.0.16
- en: 'References: [#3781](https://www.sqlalchemy.org/trac/ticket/3781)'
  id: totrans-1766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3781](https://www.sqlalchemy.org/trac/ticket/3781)
- en: '**[orm] [bug]**'
  id: totrans-1767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs"), [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") and other derived attributes would
    fail to refresh when mapper properties or other ORM constructs were added to the
    mapper/class after these accessors were first called.
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即当在第一次调用这些访问器之后向映射器/类添加映射器属性或其他 ORM 构造时，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")、[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 和其他派生属性将无法刷新的问题。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.0.16
- en: 'References: [#3778](https://www.sqlalchemy.org/trac/ticket/3778)'
  id: totrans-1770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3778](https://www.sqlalchemy.org/trac/ticket/3778)
- en: '**[orm] [bug]**'
  id: totrans-1771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in collections due to [#3457](https://www.sqlalchemy.org/trac/ticket/3457)
    whereby deserialize during pickle or deepcopy would fail to establish all attributes
    of an ORM collection, causing further mutation operations to fail.
  id: totrans-1772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#3457](https://www.sqlalchemy.org/trac/ticket/3457) 导致的 collections 中的回归
    bug 修复，即在 pickle 或 deepcopy 过程中反序列化将无法建立 ORM 集合的所有属性，导致进一步的变异操作失败。
- en: 'References: [#3852](https://www.sqlalchemy.org/trac/ticket/3852)'
  id: totrans-1773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3852](https://www.sqlalchemy.org/trac/ticket/3852)
- en: '**[orm] [bug]**'
  id: totrans-1774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed long-standing bug where the “noload” relationship loading strategy would
    cause backrefs and/or back_populates options to be ignored.
  id: totrans-1775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长期存在的 bug，即“noload”关系加载策略会导致忽略 backrefs 和/或 back_populates 选项的问题。
- en: 'References: [#3845](https://www.sqlalchemy.org/trac/ticket/3845)'
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3845](https://www.sqlalchemy.org/trac/ticket/3845)
- en: engine
  id: totrans-1777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Removed long-broken “default_schema_name()” method from [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). This method was left over from a very old version
    and was non-working (e.g. would raise). Pull request courtesy Benjamin Dopplinger.
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    中删除了长期存在但已损坏的“default_schema_name()”方法。该方法是来自非常旧的版本，并且是不工作的（例如，将引发异常）。感谢 Benjamin
    Dopplinger 提供的拉取请求。
- en: sql
  id: totrans-1780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where newly added warning for primary key on insert w/o autoincrement
    setting (see [#3216](https://www.sqlalchemy.org/trac/ticket/3216)) would fail
    to emit correctly when invoked upon a lower-case [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") construct.
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了新增的警告，用于没有设置自增设置的插入主键时会失败正确发出的问题（参见 [#3216](https://www.sqlalchemy.org/trac/ticket/3216)），当应用于小写
    [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    构造时。 '
- en: 'References: [#3842](https://www.sqlalchemy.org/trac/ticket/3842)'
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3842](https://www.sqlalchemy.org/trac/ticket/3842)
- en: postgresql
  id: totrans-1784
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by the fix in [#3807](https://www.sqlalchemy.org/trac/ticket/3807)
    (version 1.1.0) where we ensured that the tablename was qualified in the WHERE
    clause of the DO UPDATE portion of PostgreSQL’s ON CONFLICT, however you *cannot*
    put the table name in the WHERE clause in the actual ON CONFLICT itself. This
    was an incorrect assumption, so that portion of the change in [#3807](https://www.sqlalchemy.org/trac/ticket/3807)
    is rolled back.
  id: totrans-1786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复[#3807](https://www.sqlalchemy.org/trac/ticket/3807)（版本1.1.0）引起的回归错误，我们确保在PostgreSQL的ON
    CONFLICT的DO UPDATE部分的WHERE子句中限定了表名，然而你*不能*在实际的ON CONFLICT本身的WHERE子句中放置表名。这是一个错误的假设，因此在[#3807](https://www.sqlalchemy.org/trac/ticket/3807)中的这部分更改被撤销。
- en: 'References: [#3807](https://www.sqlalchemy.org/trac/ticket/3807), [#3846](https://www.sqlalchemy.org/trac/ticket/3846)'
  id: totrans-1787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3807](https://www.sqlalchemy.org/trac/ticket/3807), [#3846](https://www.sqlalchemy.org/trac/ticket/3846)
- en: mysql
  id: totrans-1788
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for server side cursors to the mysqlclient and pymysql dialects.
    This feature is available via the [`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") flag as well as the `server_side_cursors=True`
    dialect argument in the same way that it has been for psycopg2 on PostgreSQL.
    Pull request courtesy Roman Podoliaka.
  id: totrans-1790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为mysqlclient和pymysql方言添加了对服务器端游标的支持。这个功能可以通过[`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")标志以及相同方式中的`server_side_cursors=True`方言参数来使用，就像在PostgreSQL上的psycopg2中一样。感谢Roman
    Podoliaka的拉取请求。
- en: '**[mysql] [bug]**'
  id: totrans-1791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL’s native ENUM type supports any non-valid value being sent, and in response
    will return a blank string. A hardcoded rule to check for “is returning the blank
    string” has been added to the MySQL implementation for ENUM so that this blank
    string is returned to the application rather than being rejected as a non-valid
    value. Note that if your MySQL enum is linking values to objects, you still get
    the blank string back.
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL的原生ENUM类型支持发送任何非有效值，并且会返回一个空字符串。为了将这个空字符串返回给应用程序而不被拒绝为非有效值，MySQL的ENUM实现中添加了一个硬编码规则来检查“是否返回空字符串”。请注意，如果你的MySQL枚举将值链接到对象，你仍然会得到空字符串返回。
- en: 'References: [#3841](https://www.sqlalchemy.org/trac/ticket/3841)'
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3841](https://www.sqlalchemy.org/trac/ticket/3841)
- en: sqlite
  id: totrans-1794
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added quotes to the PRAGMA directives in the pysqlcipher dialect to support
    additional cipher arguments appropriately. Pull request courtesy Kevin Jurczyk.
  id: totrans-1796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在pysqlcipher方言的PRAGMA指令中添加了引号，以适当支持额外的密码参数。感谢Kevin Jurczyk的拉取请求。
- en: '**[sqlite] [bug] [py3k]**'
  id: totrans-1797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [py3k]**'
- en: Added an optional import for the pysqlcipher3 DBAPI when using the pysqlcipher
    dialect. This package will attempt to be imported if the Python-2 only pysqlcipher
    DBAPI is non-present. Pull request courtesy Kevin Jurczyk.
  id: totrans-1798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pysqlcipher方言时，为pysqlcipher3 DBAPI添加了一个可选导入。如果Python-2专用的pysqlcipher DBAPI不存在，这个包将尝试被导入。感谢Kevin
    Jurczyk的拉取请求。
- en: mssql
  id: totrans-1799
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in pyodbc dialect (as well as in the mostly non-working adodbapi dialect)
    whereby a semicolon present in the password or username fields could be interpreted
    as a separator for another token; the values are now quoted when semicolons are
    present.
  id: totrans-1801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc方言（以及大部分不工作的adodbapi方言）中的错误，其中密码或用户名字段中存在的分号可能被解释为另一个标记的分隔符；当存在分号时，现在这些值将被引用。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯到**：1.0.16
- en: 'References: [#3762](https://www.sqlalchemy.org/trac/ticket/3762)'
  id: totrans-1803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3762](https://www.sqlalchemy.org/trac/ticket/3762)
- en: orm
  id: totrans-1804
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where an alternate-named primary
    key attribute would not track properly into the UPDATE statement.
  id: totrans-1806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")中的错误，其中替代命名的主键属性无法正确跟踪到UPDATE语句中。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯到**：1.0.16
- en: 'References: [#3849](https://www.sqlalchemy.org/trac/ticket/3849)'
  id: totrans-1808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3849](https://www.sqlalchemy.org/trac/ticket/3849)
- en: '**[orm] [bug]**'
  id: totrans-1809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in `Session.bulk_save()` where an UPDATE would not function correctly
    in conjunction with a mapping that implements a version id counter.
  id: totrans-1810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Session.bulk_save()`中的错误，其中UPDATE与实现版本id计数器的映射无法正确运行。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3781](https://www.sqlalchemy.org/trac/ticket/3781)'
  id: totrans-1812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3781](https://www.sqlalchemy.org/trac/ticket/3781)
- en: '**[orm] [bug]**'
  id: totrans-1813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs"), [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") and other derived attributes would
    fail to refresh when mapper properties or other ORM constructs were added to the
    mapper/class after these accessors were first called.
  id: totrans-1814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当在首次调用这些访问器后向映射器/类添加映射器属性或其他 ORM 构造时，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")、[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 和其他派生属性无法刷新的 bug。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3778](https://www.sqlalchemy.org/trac/ticket/3778)'
  id: totrans-1816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3778](https://www.sqlalchemy.org/trac/ticket/3778)
- en: '**[orm] [bug]**'
  id: totrans-1817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed regression in collections due to [#3457](https://www.sqlalchemy.org/trac/ticket/3457)
    whereby deserialize during pickle or deepcopy would fail to establish all attributes
    of an ORM collection, causing further mutation operations to fail.
  id: totrans-1818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#3457](https://www.sqlalchemy.org/trac/ticket/3457) 导致的集合中的反序列化回退问题已修复，pickle
    或 deepcopy 过程中会导致 ORM 集合的所有属性无法建立，进而导致进一步的变异操作失败。
- en: 'References: [#3852](https://www.sqlalchemy.org/trac/ticket/3852)'
  id: totrans-1819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3852](https://www.sqlalchemy.org/trac/ticket/3852)
- en: '**[orm] [bug]**'
  id: totrans-1820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed long-standing bug where the “noload” relationship loading strategy would
    cause backrefs and/or back_populates options to be ignored.
  id: totrans-1821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长期存在的 bug，即“noload”关系加载策略会导致 backrefs 和/或 back_populates 选项被忽略的问题。
- en: 'References: [#3845](https://www.sqlalchemy.org/trac/ticket/3845)'
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3845](https://www.sqlalchemy.org/trac/ticket/3845)
- en: engine
  id: totrans-1823
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Removed long-broken “default_schema_name()” method from [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). This method was left over from a very old version
    and was non-working (e.g. would raise). Pull request courtesy Benjamin Dopplinger.
  id: totrans-1825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")中移除了长期存在的破损的“default_schema_name()”方法。这个方法是从一个非常旧的版本遗留下来的，是无效的（例如，会引发异常）。感谢
    Benjamin Dopplinger 的拉取请求。
- en: sql
  id: totrans-1826
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug where newly added warning for primary key on insert w/o autoincrement
    setting (see [#3216](https://www.sqlalchemy.org/trac/ticket/3216)) would fail
    to emit correctly when invoked upon a lower-case [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") construct.
  id: totrans-1828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在没有设置自动增量的情况下插入主键时新增的警告（参见 [#3216](https://www.sqlalchemy.org/trac/ticket/3216)）在调用小写
    [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    构造时无法正确发出。
- en: 'References: [#3842](https://www.sqlalchemy.org/trac/ticket/3842)'
  id: totrans-1829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3842](https://www.sqlalchemy.org/trac/ticket/3842)
- en: postgresql
  id: totrans-1830
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed regression caused by the fix in [#3807](https://www.sqlalchemy.org/trac/ticket/3807)
    (version 1.1.0) where we ensured that the tablename was qualified in the WHERE
    clause of the DO UPDATE portion of PostgreSQL’s ON CONFLICT, however you *cannot*
    put the table name in the WHERE clause in the actual ON CONFLICT itself. This
    was an incorrect assumption, so that portion of the change in [#3807](https://www.sqlalchemy.org/trac/ticket/3807)
    is rolled back.
  id: totrans-1832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复 [#3807](https://www.sqlalchemy.org/trac/ticket/3807)（版本 1.1.0）引起的回退，我们确保在
    PostgreSQL 的 ON CONFLICT 的 DO UPDATE 部分的 WHERE 子句中限定了表名，然而实际上*不能*在 ON CONFLICT
    本身的 WHERE 子句中放置表名。这是一个错误的假设，因此将回滚 [#3807](https://www.sqlalchemy.org/trac/ticket/3807)
    中的这部分更改。
- en: 'References: [#3807](https://www.sqlalchemy.org/trac/ticket/3807), [#3846](https://www.sqlalchemy.org/trac/ticket/3846)'
  id: totrans-1833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3807](https://www.sqlalchemy.org/trac/ticket/3807)，[#3846](https://www.sqlalchemy.org/trac/ticket/3846)
- en: mysql
  id: totrans-1834
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [特性]**'
- en: Added support for server side cursors to the mysqlclient and pymysql dialects.
    This feature is available via the [`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") flag as well as the `server_side_cursors=True`
    dialect argument in the same way that it has been for psycopg2 on PostgreSQL.
    Pull request courtesy Roman Podoliaka.
  id: totrans-1836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为mysqlclient和pymysql方言添加了对服务器端游标的支持。通过[`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")标志以及相同方式的`server_side_cursors=True`方言参数可用此功能，就像在PostgreSQL上对psycopg2一样。感谢Roman
    Podoliaka的Pull请求。
- en: '**[mysql] [bug]**'
  id: totrans-1837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL’s native ENUM type supports any non-valid value being sent, and in response
    will return a blank string. A hardcoded rule to check for “is returning the blank
    string” has been added to the MySQL implementation for ENUM so that this blank
    string is returned to the application rather than being rejected as a non-valid
    value. Note that if your MySQL enum is linking values to objects, you still get
    the blank string back.
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL的本机ENUM类型支持发送任何非有效值，并且响应将返回空字符串。已向ENUM的MySQL实现添加了一个硬编码规则，以检查“返回空字符串”，以便将此空字符串返回给应用程序而不被拒绝为非有效值。请注意，如果您的MySQL枚举将值链接到对象，则仍然会返回空字符串。
- en: 'References: [#3841](https://www.sqlalchemy.org/trac/ticket/3841)'
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3841](https://www.sqlalchemy.org/trac/ticket/3841)
- en: sqlite
  id: totrans-1840
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added quotes to the PRAGMA directives in the pysqlcipher dialect to support
    additional cipher arguments appropriately. Pull request courtesy Kevin Jurczyk.
  id: totrans-1842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在pysqlcipher方言中的PRAGMA指令中添加了引号，以适当支持附加的密码参数。感谢Kevin Jurczyk的Pull请求。
- en: '**[sqlite] [bug] [py3k]**'
  id: totrans-1843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [py3k]**'
- en: Added an optional import for the pysqlcipher3 DBAPI when using the pysqlcipher
    dialect. This package will attempt to be imported if the Python-2 only pysqlcipher
    DBAPI is non-present. Pull request courtesy Kevin Jurczyk.
  id: totrans-1844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pysqlcipher方言时，为pysqlcipher3 DBAPI添加了可选导入。如果Python-2仅pysqlcipher DBAPI不存在，则尝试导入此包。感谢Kevin
    Jurczyk的Pull请求。
- en: mssql
  id: totrans-1845
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in pyodbc dialect (as well as in the mostly non-working adodbapi dialect)
    whereby a semicolon present in the password or username fields could be interpreted
    as a separator for another token; the values are now quoted when semicolons are
    present.
  id: totrans-1847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc方言中的错误（以及基本上不起作用的adodbapi方言中的错误），其中密码或用户名字段中存在分号时可能会将分号解释为另一个令牌的分隔符；现在在存在分号时对值进行引用。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯到**：1.0.16
- en: 'References: [#3762](https://www.sqlalchemy.org/trac/ticket/3762)'
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3762](https://www.sqlalchemy.org/trac/ticket/3762)
- en: 1.1.3
  id: totrans-1850
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.3
- en: 'Released: October 27, 2016'
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年10月27日
- en: orm
  id: totrans-1852
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#2677](https://www.sqlalchemy.org/trac/ticket/2677)
    whereby calling [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") on an object that was already flushed as deleted
    in that session would fail to set up the object in the identity map (or reject
    the object), causing flush errors as the object were in a state not accommodated
    by the unit of work. The pre-1.1 behavior in this case has been restored, which
    is that the object is put back into the identity map so that the DELETE statement
    will be attempted again, which emits a warning that the number of expected rows
    was not matched (unless the row were restored outside of the session).
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2677](https://www.sqlalchemy.org/trac/ticket/2677)引起的回归，即在该会话中已经刷新为删除状态的对象调用[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")会导致对象未能在标识映射中设置（或拒绝该对象），从而导致刷新错误，因为该对象处于工作单元无法容纳的状态。在这种情况下，恢复了1.1版本之前的行为，即将对象放回标识映射中，以便再次尝试DELETE语句，这会发出警告，指出未匹配预期行数（除非在会话之外还原了该行）。
- en: 'References: [#3839](https://www.sqlalchemy.org/trac/ticket/3839)'
  id: totrans-1855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3839](https://www.sqlalchemy.org/trac/ticket/3839)
- en: '**[orm] [bug]**'
  id: totrans-1856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where some [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") methods like [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and others would fail if the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") were against a series of mapped columns, rather than the
    mapped entity as a whole.
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")方法（如[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")等）在针对一系列映射列而不是整个映射实体的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")时会失败的回归。
- en: 'References: [#3836](https://www.sqlalchemy.org/trac/ticket/3836)'
  id: totrans-1858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3836](https://www.sqlalchemy.org/trac/ticket/3836)
- en: sql
  id: totrans-1859
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug involving new value translation and validation feature in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") whereby using the enum object in a string concatenation
    would maintain the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    type as the type of the expression overall, producing missing lookups. A string
    concatenation against an [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")-typed column now uses [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") as the datatype of the expression itself.
  id: totrans-1861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")中使用新值翻译和验证功能时的错误，其中在字符串连接中使用枚举对象会将整个表达式的类型保持为[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型，导致查找丢失。现在，针对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型的列进行字符串连接将使用[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")作为表达式本身的数据类型。
- en: 'References: [#3833](https://www.sqlalchemy.org/trac/ticket/3833)'
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3833](https://www.sqlalchemy.org/trac/ticket/3833)
- en: '**[sql] [bug]**'
  id: totrans-1863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression which occurred as a side effect of [#2919](https://www.sqlalchemy.org/trac/ticket/2919),
    which in the less typical case of a user-defined [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that was also itself an instance of [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") (rather than the implementation being such) would
    cause the column attachment events to be skipped for the type itself.
  id: totrans-1864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在用户定义的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")同时也是[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")实例的情况下，由于[#2919](https://www.sqlalchemy.org/trac/ticket/2919)的副作用而导致列附加事件被跳过的回归。
- en: 'References: [#3832](https://www.sqlalchemy.org/trac/ticket/3832)'
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3832](https://www.sqlalchemy.org/trac/ticket/3832)
- en: postgresql
  id: totrans-1866
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: PostgreSQL table reflection will ensure that the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag is set to False when reflecting a primary key
    column that is not of an [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") datatype, even if the default is related to an integer-generating
    sequence. This can happen if a column is created as SERIAL and the datatype is
    changed. The autoincrement flag can only be True if the datatype is of integer
    affinity in the 1.1 series.
  id: totrans-1868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL表反射将确保在反射主键列时，如果列不是[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")数据类型，则[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")标志设置为False，即使默认值与生成整数的序列相关。如果列被创建为SERIAL并且数据类型已更改，则可能会发生这种情况。在1.1系列中，只有数据类型为整数亲和性时，autoincrement标志才能为True。
- en: 'References: [#3835](https://www.sqlalchemy.org/trac/ticket/3835)'
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3835](https://www.sqlalchemy.org/trac/ticket/3835)
- en: orm
  id: totrans-1870
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#2677](https://www.sqlalchemy.org/trac/ticket/2677)
    whereby calling [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") on an object that was already flushed as deleted
    in that session would fail to set up the object in the identity map (or reject
    the object), causing flush errors as the object were in a state not accommodated
    by the unit of work. The pre-1.1 behavior in this case has been restored, which
    is that the object is put back into the identity map so that the DELETE statement
    will be attempted again, which emits a warning that the number of expected rows
    was not matched (unless the row were restored outside of the session).
  id: totrans-1872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2677](https://www.sqlalchemy.org/trac/ticket/2677)引起的回归，其中在会话中已经刷新为删除状态的对象上调用[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")将无法设置对象到标识映射（或拒绝对象），导致刷新错误，因为对象处于工作单元无法容纳的状态。
    在这种情况下，已恢复了1.1之前的行为，即将对象放回到标识映射中，以便再次尝试DELETE语句，这会发出警告，指出未匹配预期行数（除非行在会话外被恢复）。
- en: 'References: [#3839](https://www.sqlalchemy.org/trac/ticket/3839)'
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3839](https://www.sqlalchemy.org/trac/ticket/3839)
- en: '**[orm] [bug]**'
  id: totrans-1874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where some [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") methods like [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and others would fail if the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") were against a series of mapped columns, rather than the
    mapped entity as a whole.
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了某些[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")方法（例如[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")等）失败的回归，如果[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")针对一系列映射列而不是整个映射实体。
- en: 'References: [#3836](https://www.sqlalchemy.org/trac/ticket/3836)'
  id: totrans-1876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3836](https://www.sqlalchemy.org/trac/ticket/3836)
- en: sql
  id: totrans-1877
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug involving new value translation and validation feature in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") whereby using the enum object in a string concatenation
    would maintain the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    type as the type of the expression overall, producing missing lookups. A string
    concatenation against an [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")-typed column now uses [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") as the datatype of the expression itself.
  id: totrans-1879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的新值翻译和验证功能中涉及的错误，其中在字符串串联中使用枚举对象会将[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型保留为表达式的整体类型，导致查找丢失。 现在，对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型的列进行字符串串联将使用[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")作为表达式本身的数据类型。
- en: 'References: [#3833](https://www.sqlalchemy.org/trac/ticket/3833)'
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3833](https://www.sqlalchemy.org/trac/ticket/3833)
- en: '**[sql] [bug]**'
  id: totrans-1881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression which occurred as a side effect of [#2919](https://www.sqlalchemy.org/trac/ticket/2919),
    which in the less typical case of a user-defined [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that was also itself an instance of [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") (rather than the implementation being such) would
    cause the column attachment events to be skipped for the type itself.
  id: totrans-1882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2919](https://www.sqlalchemy.org/trac/ticket/2919)的副作用导致的回归，即在用户定义的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")也是[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")实例的情况下（而不是实现为此的情况）会导致跳过类型本身的列附加事件。
- en: 'References: [#3832](https://www.sqlalchemy.org/trac/ticket/3832)'
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3832](https://www.sqlalchemy.org/trac/ticket/3832)
- en: postgresql
  id: totrans-1884
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: PostgreSQL table reflection will ensure that the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag is set to False when reflecting a primary key
    column that is not of an [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") datatype, even if the default is related to an integer-generating
    sequence. This can happen if a column is created as SERIAL and the datatype is
    changed. The autoincrement flag can only be True if the datatype is of integer
    affinity in the 1.1 series.
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL表反射将确保在反射主键列时，如果默认值与生成整数的序列相关联，将[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")标志设置为False，即使数据类型已更改为不是[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")数据类型。如果列被创建为SERIAL并且数据类型已更改，则autoincrement标志只能在1.1系列中的整数亲和性数据类型为True。
- en: 'References: [#3835](https://www.sqlalchemy.org/trac/ticket/3835)'
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3835](https://www.sqlalchemy.org/trac/ticket/3835)
- en: 1.1.2
  id: totrans-1888
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.2
- en: 'Released: October 17, 2016'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年10月17日
- en: orm
  id: totrans-1890
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving the rule to disable a joined collection eager loader on
    the other side of a many-to-one lazy loader, first added in [#1495](https://www.sqlalchemy.org/trac/ticket/1495),
    where the rule would fail if the parent object had some other lazyloader-bound
    query options associated with it.
  id: totrans-1892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，涉及到在一个多对一懒加载器的另一侧禁用连接集合急加载器的规则，首次添加在[#1495](https://www.sqlalchemy.org/trac/ticket/1495)中，如果父对象有一些其他与lazyloader绑定的查询选项，则规则会失败。
- en: 'References: [#3824](https://www.sqlalchemy.org/trac/ticket/3824)'
  id: totrans-1893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3824](https://www.sqlalchemy.org/trac/ticket/3824)
- en: '**[orm] [bug]**'
  id: totrans-1894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed self-referential entity, deferred column loading issue in a similar style
    as that of [#3431](https://www.sqlalchemy.org/trac/ticket/3431), [#3811](https://www.sqlalchemy.org/trac/ticket/3811)
    where an entity is present in multiple positions within the row due to self-referential
    eager loading; when the deferred loader only applies to one of the paths, the
    “present” column loader will now override the deferred non- load for that entity
    regardless of row ordering.
  id: totrans-1895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自引用实体中延迟列加载问题，类似于[#3431](https://www.sqlalchemy.org/trac/ticket/3431)、[#3811](https://www.sqlalchemy.org/trac/ticket/3811)中的问题，其中由于自引用急加载而导致实体在行中出现多次；当延迟加载器仅适用于其中一条路径时，“存在”列加载器现在将覆盖该实体的延迟非加载，而不考虑行顺序。
- en: 'References: [#3822](https://www.sqlalchemy.org/trac/ticket/3822)'
  id: totrans-1896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3822](https://www.sqlalchemy.org/trac/ticket/3822)
- en: sql
  id: totrans-1897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression caused by a newly added function that performs the “wrap
    callable” function of sql [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") objects, an attribute error raised for `__module__`
    when the default callable was a `functools.partial` or other object that doesn’t
    have a `__module__` attribute.
  id: totrans-1899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于新增的执行sql [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator")对象的“包装可调用”函数而引起的回归问题，在默认可调用对象是`functools.partial`或其他没有`__module__`属性的对象时，会引发`__module__`的属性错误。
- en: 'References: [#3823](https://www.sqlalchemy.org/trac/ticket/3823)'
  id: totrans-1900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3823](https://www.sqlalchemy.org/trac/ticket/3823)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed regression in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type where event handlers were not transferred in the
    case of the type object being copied, due to a conflicting copy() method added
    as part of [#3250](https://www.sqlalchemy.org/trac/ticket/3250). This copy occurs
    normally in situations when the column is copied, such as in tometadata() or when
    using declarative mixins with columns. The event handler not being present would
    impact the constraint being created for a non-native enumerated type, but more
    critically the ENUM object on the PostgreSQL backend.
  id: totrans-1902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型中的回归问题，其中事件处理程序在类型对象被复制时未被传递，这是由于在[#3250](https://www.sqlalchemy.org/trac/ticket/3250)中添加了一个冲突的copy()方法。在复制列时，例如在tometadata()中或在使用带有列的声明性混合时，通常会发生此复制。事件处理程序的缺失会影响为非本地枚举类型创建的约束，但更为关键的是在PostgreSQL后端的ENUM对象上。
- en: 'References: [#3827](https://www.sqlalchemy.org/trac/ticket/3827)'
  id: totrans-1903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3827](https://www.sqlalchemy.org/trac/ticket/3827)
- en: postgresql
  id: totrans-1904
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [sql]**'
  id: totrans-1905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [sql]**'
- en: Changed the naming convention used when generating bound parameters for a multi-VALUES
    insert statement, so that the numbered parameter names don’t conflict with the
    anonymized parameters of a WHERE clause, as is now common in a PostgreSQL ON CONFLICT
    construct.
  id: totrans-1906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了生成多值插入语句的绑定参数时使用的命名约定，以便编号参数名称不会与WHERE子句中的匿名参数发生冲突，这在PostgreSQL ON CONFLICT结构中现在很常见。
- en: 'References: [#3828](https://www.sqlalchemy.org/trac/ticket/3828)'
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3828](https://www.sqlalchemy.org/trac/ticket/3828)
- en: orm
  id: totrans-1908
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving the rule to disable a joined collection eager loader on
    the other side of a many-to-one lazy loader, first added in [#1495](https://www.sqlalchemy.org/trac/ticket/1495),
    where the rule would fail if the parent object had some other lazyloader-bound
    query options associated with it.
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug涉及在许多对一懒加载器的另一侧禁用连接集合急加载器的规则，首次添加在[#1495](https://www.sqlalchemy.org/trac/ticket/1495)中，如果父对象有一些其他与之关联的懒加载器绑定的查询选项，该规则将失败。
- en: 'References: [#3824](https://www.sqlalchemy.org/trac/ticket/3824)'
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3824](https://www.sqlalchemy.org/trac/ticket/3824)
- en: '**[orm] [bug]**'
  id: totrans-1912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed self-referential entity, deferred column loading issue in a similar style
    as that of [#3431](https://www.sqlalchemy.org/trac/ticket/3431), [#3811](https://www.sqlalchemy.org/trac/ticket/3811)
    where an entity is present in multiple positions within the row due to self-referential
    eager loading; when the deferred loader only applies to one of the paths, the
    “present” column loader will now override the deferred non- load for that entity
    regardless of row ordering.
  id: totrans-1913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自引用实体中延迟列加载问题，类似于[#3431](https://www.sqlalchemy.org/trac/ticket/3431)、[#3811](https://www.sqlalchemy.org/trac/ticket/3811)中的问题，其中由于自引用的急加载，实体在行中出现在多个位置；当延迟加载器仅适用于其中一个路径时，“present”列加载器现在将覆盖该实体的延迟非加载，而不考虑行顺序。
- en: 'References: [#3822](https://www.sqlalchemy.org/trac/ticket/3822)'
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3822](https://www.sqlalchemy.org/trac/ticket/3822)
- en: sql
  id: totrans-1915
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression caused by a newly added function that performs the “wrap
    callable” function of sql [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") objects, an attribute error raised for `__module__`
    when the default callable was a `functools.partial` or other object that doesn’t
    have a `__module__` attribute.
  id: totrans-1917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于新增函数执行sql [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator")对象的“wrap callable”函数而引起的回归，当默认可调用函数为`functools.partial`或其他没有`__module__`属性的对象时，会引发`__module__`属性错误。
- en: 'References: [#3823](https://www.sqlalchemy.org/trac/ticket/3823)'
  id: totrans-1918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3823](https://www.sqlalchemy.org/trac/ticket/3823)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed regression in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type where event handlers were not transferred in the
    case of the type object being copied, due to a conflicting copy() method added
    as part of [#3250](https://www.sqlalchemy.org/trac/ticket/3250). This copy occurs
    normally in situations when the column is copied, such as in tometadata() or when
    using declarative mixins with columns. The event handler not being present would
    impact the constraint being created for a non-native enumerated type, but more
    critically the ENUM object on the PostgreSQL backend.
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型中的回归，其中事件处理程序在类型对象被复制的情况下未传递，这是由于在[#3250](https://www.sqlalchemy.org/trac/ticket/3250)中添加的冲突的copy()方法。在复制列时，例如在tometadata()中或在使用具有列的声明性mixin时，会正常发生此复制。事件处理程序的缺失会影响为非本地枚举类型创建的约束，但更为关键的是PostgreSQL后端的ENUM对象。
- en: 'References: [#3827](https://www.sqlalchemy.org/trac/ticket/3827)'
  id: totrans-1921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3827](https://www.sqlalchemy.org/trac/ticket/3827)
- en: postgresql
  id: totrans-1922
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [sql]**'
  id: totrans-1923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [sql]**'
- en: Changed the naming convention used when generating bound parameters for a multi-VALUES
    insert statement, so that the numbered parameter names don’t conflict with the
    anonymized parameters of a WHERE clause, as is now common in a PostgreSQL ON CONFLICT
    construct.
  id: totrans-1924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了生成多值插入语句的绑定参数时使用的命名约定，以便编号参数名称不会与WHERE子句中的匿名参数发生冲突，这在PostgreSQL ON CONFLICT结构中现在很常见。
- en: 'References: [#3828](https://www.sqlalchemy.org/trac/ticket/3828)'
  id: totrans-1925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3828](https://www.sqlalchemy.org/trac/ticket/3828)
- en: 1.1.1
  id: totrans-1926
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.1
- en: 'Released: October 7, 2016'
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年10月7日
- en: mssql
  id: totrans-1928
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The “SELECT SERVERPROPERTY” query added in [#3810](https://www.sqlalchemy.org/trac/ticket/3810)
    and [#3814](https://www.sqlalchemy.org/trac/ticket/3814) is failing on unknown
    combinations of Pyodbc and SQL Server. While failure of this function was anticipated,
    the exception catch was not broad enough so it now catches all forms of pyodbc.Error.
  id: totrans-1930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[#3810](https://www.sqlalchemy.org/trac/ticket/3810)和[#3814](https://www.sqlalchemy.org/trac/ticket/3814)中添加的“SELECT
    SERVERPROPERTY”查询在未知的 Pyodbc 和 SQL Server 组合上失败。虽然预料到了这个函数的失败，但异常捕获不够广泛，因此现在捕获所有形式的
    pyodbc.Error。
- en: 'References: [#3820](https://www.sqlalchemy.org/trac/ticket/3820)'
  id: totrans-1931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3820](https://www.sqlalchemy.org/trac/ticket/3820)
- en: misc
  id: totrans-1932
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [core]**'
  id: totrans-1933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [核心]**'
- en: Changed the CompileError raised when various primary key missing situations
    are detected to a warning. The statement is again passed to the database where
    it will fail and the DBAPI error (usually IntegrityError) raises as usual.
  id: totrans-1934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到各种缺失主键的情况时，将引发的CompileError更改为警告。语句再次传递给数据库，将会失败，并像往常一样引发 DBAPI 错误（通常是 IntegrityError）。
- en: See also
  id: totrans-1935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为复合主键列隐式启用.autoincrement指令](migration_11.html#change-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-1937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: mssql
  id: totrans-1938
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The “SELECT SERVERPROPERTY” query added in [#3810](https://www.sqlalchemy.org/trac/ticket/3810)
    and [#3814](https://www.sqlalchemy.org/trac/ticket/3814) is failing on unknown
    combinations of Pyodbc and SQL Server. While failure of this function was anticipated,
    the exception catch was not broad enough so it now catches all forms of pyodbc.Error.
  id: totrans-1940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[#3810](https://www.sqlalchemy.org/trac/ticket/3810)和[#3814](https://www.sqlalchemy.org/trac/ticket/3814)中添加的“SELECT
    SERVERPROPERTY”查询在未知的 Pyodbc 和 SQL Server 组合上失败。虽然预料到了这个函数的失败，但异常捕获不够广泛，因此现在捕获所有形式的
    pyodbc.Error。
- en: 'References: [#3820](https://www.sqlalchemy.org/trac/ticket/3820)'
  id: totrans-1941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3820](https://www.sqlalchemy.org/trac/ticket/3820)
- en: misc
  id: totrans-1942
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [core]**'
  id: totrans-1943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [核心]**'
- en: Changed the CompileError raised when various primary key missing situations
    are detected to a warning. The statement is again passed to the database where
    it will fail and the DBAPI error (usually IntegrityError) raises as usual.
  id: totrans-1944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到各种缺失主键的情况时，将引发的CompileError更改为警告。语句再次传递给数据库，将会失败，并像往常一样引发 DBAPI 错误（通常是 IntegrityError）。
- en: See also
  id: totrans-1945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为复合主键列隐式启用.autoincrement指令](migration_11.html#change-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: 1.1.0
  id: totrans-1948
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.0
- en: 'Released: October 5, 2016'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年10月5日
- en: orm
  id: totrans-1950
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Enhanced the new “raise” lazy loader strategy to also include a “raise_on_sql”
    variant, available both via [`relationship.lazy`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship") as well as [`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload"). This variant only raises if the lazy load would actually
    emit SQL, vs. raising if the lazy loader mechanism is invoked at all.
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加强了新的“raise”懒加载策略，还包括一个“raise_on_sql”变体，可以通过[`relationship.lazy`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship")和[`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload")两种方式使用。这个变体只有在懒加载实际发出 SQL 时才会引发，而不是在任何时候调用懒加载机制时引发。
- en: 'References: [#3812](https://www.sqlalchemy.org/trac/ticket/3812)'
  id: totrans-1953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3812](https://www.sqlalchemy.org/trac/ticket/3812)
- en: '**[orm] [feature]**'
  id: totrans-1954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") method now resets the group by collection if
    an argument of `None` is passed, in the same way that [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") has worked for a long time. Pull request courtesy
    Iuri Diniz.
  id: totrans-1955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")方法现在如果传递`None`参数，则会重置分组集合，就像[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")长期以来的工作方式一样。感谢 Iuri Diniz 提供的拉取请求。'
- en: '**[orm] [change]**'
  id: totrans-1956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: Passing False to [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") in order to cancel all order by’s is deprecated;
    there is no longer any difference between calling this method with False or with
    None.
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 False 传递给[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 以取消所有排序已弃用；使用 False 或 None 调用此方法不再有任何区别。
- en: '**[orm] [bug]**'
  id: totrans-1958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where joined eager loading would fail for a polymorphically- loaded
    mapper, where the polymorphic_on was set to an un-mapped expression such as a
    CASE expression.
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即连接的贪婪加载将无法针对多态加载的映射器进行加载，其中多态性在未映射的表达式上设置，例如 CASE 表达式。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.0.16
- en: 'References: [#3800](https://www.sqlalchemy.org/trac/ticket/3800)'
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3800](https://www.sqlalchemy.org/trac/ticket/3800)
- en: '**[orm] [bug]**'
  id: totrans-1962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ArgumentError raised for an invalid bind sent to a Session
    via [`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper"), [`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table"), or the constructor would fail to be correctly
    raised.
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即对通过 [`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")、[`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table") 或构造函数发送的无效绑定引发的 ArgumentError 未能被正确引发。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.0.16
- en: 'References: [#3798](https://www.sqlalchemy.org/trac/ticket/3798)'
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3798](https://www.sqlalchemy.org/trac/ticket/3798)
- en: '**[orm] [bug]**'
  id: totrans-1966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a subqueryload of an “of_type()” object
    linked to a second subqueryload of a plain mapped class, or a longer chain of
    several “of_type()” attributes, would fail to link the joins correctly.
  id: totrans-1967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了子查询贪婪加载中的错误，在这种情况下，“of_type()”对象的子查询加载链接到第二个子查询加载的普通映射类，或者是几个“of_type()”属性的较长链，将无法正确链接连接。 '
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-1968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.0.15
- en: 'References: [#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)'
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)
- en: '**[orm] [bug]**'
  id: totrans-1970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ORM attributes can now be assigned any object that is has a `__clause_element__()`
    attribute, which will result in inline SQL the way any [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") class does. This covers other mapped
    attributes not otherwise transformed by further expression constructs.
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 属性现在可以分配任何具有 `__clause_element__()` 属性的对象，这将导致内联 SQL，就像任何 [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 类一样。这涵盖了其他通过进一步表达式构造未转换的映射属性。
- en: 'References: [#3802](https://www.sqlalchemy.org/trac/ticket/3802)'
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3802](https://www.sqlalchemy.org/trac/ticket/3802)
- en: '**[orm] [bug]**'
  id: totrans-1973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an adjustment to the bug fix first introduced in [ticket:3431] that involves
    an object appearing in multiple contexts in a single result set, such that an
    eager loader that would set the related object value to be None will still fire
    off, thus satisfying the load of that attribute. Previously, the adjustment only
    honored a non-None value arriving for an eagerly loaded attribute in a secondary
    row.
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[票务：3431](https://www.sqlalchemy.org/trac/ticket/3431)中首次引入的错误修复进行了调整，涉及到在单个结果集中出现多个上下文中的对象的情况，这样一个贪婪的加载器将会将相关对象的值设置为
    None，但仍然会触发加载该属性。之前，调整仅在次要行中贪婪加载属性时才尊重非 None 值的到来。
- en: 'References: [#3811](https://www.sqlalchemy.org/trac/ticket/3811)'
  id: totrans-1975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3811](https://www.sqlalchemy.org/trac/ticket/3811)
- en: '**[orm] [bug]**'
  id: totrans-1976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new [`SessionEvents.persistent_to_deleted()`](../orm/events.html#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") event where the target object
    could be garbage collected before the event is fired off.
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 [`SessionEvents.persistent_to_deleted()`](../orm/events.html#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") 事件中的错误，其中目标对象可能在事件触发之前被垃圾回收。
- en: 'References: [#3808](https://www.sqlalchemy.org/trac/ticket/3808)'
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3808](https://www.sqlalchemy.org/trac/ticket/3808)
- en: '**[orm] [bug]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The primaryjoin of a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct can now include a [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") object that includes a callable function
    to generate values. Previously, the lazy loader strategy would be incompatible
    with this use, and additionally would fail to correctly detect if the “use_get”
    criteria should be used if the primary key were involved with the bound parameter.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造的 primaryjoin 现在可以包含一个 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 对象，该对象包含一个可调用函数来生成值。以前，延迟加载策略与此用法不兼容，并且还会无法正确检测是否应该使用“use_get”条件，如果主键与绑定参数有关。'
- en: 'References: [#3767](https://www.sqlalchemy.org/trac/ticket/3767)'
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3767](https://www.sqlalchemy.org/trac/ticket/3767)
- en: '**[orm] [bug]**'
  id: totrans-1982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An UPDATE emitted from the ORM flush process can now accommodate a SQL expression
    element for a column within the primary key of an object, if the target database
    supports RETURNING in order to provide the new value, or if the PK value is set
    “to itself” for the purposes of bumping some other trigger / onupdate on the column.
  id: totrans-1983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 ORM 刷新过程中发出的 UPDATE 现在可以适应对象主键中的列的 SQL 表达式元素，如果目标数据库支持 RETURNING 以提供新值，或者如果为了触发其他触发器/列的
    onupdate 而将 PK 值设置为“自身”。
- en: 'References: [#3801](https://www.sqlalchemy.org/trac/ticket/3801)'
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3801](https://www.sqlalchemy.org/trac/ticket/3801)
- en: '**[orm] [bug]**'
  id: totrans-1985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the “simple many-to-one” condition that allows lazy loading
    to use get() from identity map would fail to be invoked if the primaryjoin of
    the relationship had multiple clauses separated by AND which were not in the same
    order as that of the primary key columns being compared in each clause. This ordering
    difference occurs for a composite foreign key where the table-bound columns on
    the referencing side were not in the same order in the .c collection as the primary
    key columns on the referenced side….which in turn occurs a lot if one is using
    declarative mixins and/or declared_attr to set up columns.
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即“简单的一对多”条件，允许延迟加载使用来自标识映射的 get() 失败的情况，如果关系的 primaryjoin 具有由 AND
    分隔的多个子句，并且这些子句的顺序与每个子句中比较的主键列的顺序不同。这种顺序差异发生在复合外键的情况下，其中引用方的表绑定列在 .c 集合中的顺序与被引用方的主键列不同……如果使用声明性混入和/或
    declared_attr 来设置列，则会经常发生这种情况。
- en: 'References: [#3788](https://www.sqlalchemy.org/trac/ticket/3788)'
  id: totrans-1987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3788](https://www.sqlalchemy.org/trac/ticket/3788)
- en: '**[orm] [bug]**'
  id: totrans-1988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An exception is raised when two `@validates` decorators on a mapping make use
    of the same name. Only one validator of a certain name at a time is supported,
    there’s no mechanism to chain these together, as the order of the validators at
    the level of function decorator can’t be made deterministic.
  id: totrans-1989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当映射上的两个 `@validates` 装饰器使用相同名称时，会引发异常。一次只支持一个特定名称的验证器，没有机制将它们链接在一起，因为在函数装饰器级别上验证器的顺序无法确定。
- en: See also
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named @validates decorators will now raise an exception](migration_11.html#change-3776)'
  id: totrans-1991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[相同名称的 @validates 装饰器现在会引发异常](migration_11.html#change-3776)'
- en: 'References: [#3776](https://www.sqlalchemy.org/trac/ticket/3776)'
  id: totrans-1992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3776](https://www.sqlalchemy.org/trac/ticket/3776)
- en: '**[orm] [bug]**'
  id: totrans-1993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Mapper errors raised during [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") now explicitly include the name of the originating
    mapper in the exception message to help in those situations where the wrapped
    exception does not itself include the source mapper. Pull request courtesy John
    Perkins.
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 过程中引发的映射器错误现在在异常消息中明确包含原始映射器的名称，以帮助处理那些包装异常本身不包含源映射器的情况。感谢
    John Perkins 的拉取请求。
- en: orm declarative
  id: totrans-1995
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明性
- en: '**[orm] [declarative] [change]**'
  id: totrans-1996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [change]**'
- en: Constructing a declarative base class that inherits from another class will
    also inherit its docstring. This means `as_declarative()` acts more like a normal
    class decorator.
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建一个继承自另一个类的声明性基类也将继承其文档字符串。这意味着 `as_declarative()` 的行为更像一个普通的类装饰器。
- en: sql
  id: totrans-1998
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    where the internal method `_reset_exported()` would corrupt the state of the object.
    This method is intended for selectable objects and is called by the ORM in some
    cases; an erroneous mapper configuration would could lead the ORM to call this
    on a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中的错误，其中内部方法`_reset_exported()`会破坏对象的状态。此方法用于可选择对象，并在某些情况下由ORM调用；错误的映射器配置可能导致ORM在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象上调用此方法。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-2001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.15
- en: 'References: [#3755](https://www.sqlalchemy.org/trac/ticket/3755)'
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3755](https://www.sqlalchemy.org/trac/ticket/3755)
- en: '**[sql] [bug]**'
  id: totrans-2003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Execution options can now be propagated from within a statement at compile time
    to the outermost statement, so that if an embedded element wants to set “autocommit”
    to be True for example, it can propagate this to the enclosing statement. Currently,
    this feature is enabled for a DML-oriented CTE embedded inside of a SELECT statement,
    e.g. INSERT/UPDATE/DELETE inside of SELECT.
  id: totrans-2004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行选项现在可以在编译时从语句传播到最外层语句，因此，如果嵌入元素想要将“autocommit”设置为True，例如，它可以将此传播到封闭语句。目前，此功能已启用用于嵌入在SELECT语句中的面向DML的CTE，例如，在SELECT语句中的INSERT/UPDATE/DELETE。
- en: 'References: [#3805](https://www.sqlalchemy.org/trac/ticket/3805)'
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3805](https://www.sqlalchemy.org/trac/ticket/3805)
- en: '**[sql] [bug]**'
  id: totrans-2006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A string sent as a column default via the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter is now escaped for quotes.
  id: totrans-2007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数作为列默认值发送的字符串现在已经为引号进行了转义。
- en: See also
  id: totrans-2008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[String server_default now literal quoted](migration_11.html#change-3809)'
  id: totrans-2009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[String server_default现在是文字引用](migration_11.html#change-3809)'
- en: 'References: [#3809](https://www.sqlalchemy.org/trac/ticket/3809)'
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3809](https://www.sqlalchemy.org/trac/ticket/3809)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-2011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Added compiler-level flags used by PostgreSQL to place additional parenthesis
    than would normally be generated by precedence rules around operations involving
    JSON, HSTORE indexing operators as well as within their operands since it has
    been observed that PostgreSQL’s precedence rules for at least the HSTORE indexing
    operator is not consistent between 9.4 and 9.5.
  id: totrans-2012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了由PostgreSQL使用的编译器级别标志，用于在涉及JSON、HSTORE索引运算符以及其操作数的操作中放置比通常由优先规则生成的额外括号，因为已经观察到PostgreSQL至少在HSTORE索引运算符之间的优先规则在9.4和9.5之间不一致。
- en: 'References: [#3806](https://www.sqlalchemy.org/trac/ticket/3806)'
  id: totrans-2013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3806](https://www.sqlalchemy.org/trac/ticket/3806)
- en: '**[sql] [bug] [mysql]**'
  id: totrans-2014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: The `BaseException` exception class is now intercepted by the exception-handling
    routines of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), and includes handling by the `ConnectionEvents.handle_error()`
    event. The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is now **invalidated** by default in the case
    of a system level exception that is not a subclass of `Exception`, including `KeyboardInterrupt`
    and the greenlet `GreenletExit` class, to prevent further operations from occurring
    upon a database connection that is in an unknown and possibly corrupted state.
    The MySQL drivers are most targeted by this change however the change is across
    all DBAPIs.
  id: totrans-2015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`BaseException`异常类现在被[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的异常处理例程拦截，并包括`ConnectionEvents.handle_error()`事件的处理。在系统级别异常（不是`Exception`的子类，包括`KeyboardInterrupt`和greenlet
    `GreenletExit`类）的情况下，默认情况下[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")现在被**作废**，以防止在处于未知且可能已损坏状态的数据库连接上发生进一步操作。MySQL驱动程序是这种变化的主要目标，但这种变化适用于所有DBAPIs。'
- en: See also
  id: totrans-2016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Engines now invalidate connections, run error handlers for BaseException](migration_11.html#change-3803)'
  id: totrans-2017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Engines现在作废连接，运行BaseException的错误处理程序](migration_11.html#change-3803)'
- en: 'References: [#3803](https://www.sqlalchemy.org/trac/ticket/3803)'
  id: totrans-2018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3803](https://www.sqlalchemy.org/trac/ticket/3803)
- en: '**[sql] [bug]**'
  id: totrans-2019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The “eq” and “ne” operators are no longer part of the list of “associative”
    operators, while they remain considered to be “commutative”. This allows an expression
    like `(x == y) == z` to be maintained at the SQL level with parenthesis. Pull
    request courtesy John Passaro.
  id: totrans-2020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “eq”和“ne”运算符不再是“关联”运算符列表的一部分，但它们仍然被认为是“可交换的”。这允许在SQL级别保持带有括号的表达式`(x == y) ==
    z`。感谢John Passaro的拉取请求。
- en: 'References: [#3799](https://www.sqlalchemy.org/trac/ticket/3799)'
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3799](https://www.sqlalchemy.org/trac/ticket/3799)
- en: '**[sql] [bug]**'
  id: totrans-2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Stringify of expression with unnamed [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, as occurs in lots of situations including
    ORM error reporting, will now render the name in string context as “<name unknown>”
    rather than raising a compile error.
  id: totrans-2023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于包含未命名[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的表达式的字符串化，例如ORM错误报告中经常发生的情况，现在在字符串上下文中呈现名称为“<name
    unknown>”，而不是引发编译错误。
- en: 'References: [#3789](https://www.sqlalchemy.org/trac/ticket/3789)'
  id: totrans-2024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3789](https://www.sqlalchemy.org/trac/ticket/3789)
- en: '**[sql] [bug]**'
  id: totrans-2025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Raise a more descriptive exception / message when ClauseElement or non-SQLAlchemy
    objects that are not “executable” are erroneously passed to `.execute()`; a new
    exception ObjectNotExecutableError is raised consistently in all cases.
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ClauseElement或非SQLAlchemy对象被错误地传递给`.execute()`时，抛出更具描述性的异常/消息；在所有情况下一致地引发新异常ObjectNotExecutableError。
- en: 'References: [#3786](https://www.sqlalchemy.org/trac/ticket/3786)'
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3786](https://www.sqlalchemy.org/trac/ticket/3786)
- en: '**[sql] [bug] [mysql] [postgresql]**'
  id: totrans-2028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql] [postgresql]**'
- en: Fixed regression in JSON datatypes where the “literal processor” for a JSON
    index value would not be invoked. The native String and Integer datatypes are
    now called upon from within the JSONIndexType and JSONPathType. This is applied
    to the generic, PostgreSQL, and MySQL JSON types and also has a dependency on
    [#3766](https://www.sqlalchemy.org/trac/ticket/3766).
  id: totrans-2029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了JSON数据类型中的回归，其中JSON索引值的“文字处理器”不会被调用。现在从JSONIndexType和JSONPathType内调用本机String和Integer数据类型。这适用于通用、PostgreSQL和MySQL
    JSON类型，还依赖于[#3766](https://www.sqlalchemy.org/trac/ticket/3766)。
- en: 'References: [#3765](https://www.sqlalchemy.org/trac/ticket/3765)'
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3765](https://www.sqlalchemy.org/trac/ticket/3765)
- en: '**[sql] [bug]**'
  id: totrans-2031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    would fail to extract columns from compound SQL expressions if those SQL expressions
    were wrapped inside of an ORM-style `__clause_element__()` construct. This bug
    exists in 1.0.x as well, however in 1.1 is more noticeable as hybrid_property
    @expression now returns a wrapped element.
  id: totrans-2032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当将SQL表达式包装在ORM风格的`__clause_element__()`构造内部时，[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")无法从复合SQL表达式中提取列的错误。这个bug也存在于1.0.x中，但在1.1中更为明显，因为hybrid_property
    @expression现在返回一个包装元素。
- en: 'References: [#3763](https://www.sqlalchemy.org/trac/ticket/3763)'
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3763](https://www.sqlalchemy.org/trac/ticket/3763)
- en: postgresql
  id: totrans-2034
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: An adjustment to ON CONFLICT such that the “inserted_primary_key” logic is able
    to accommodate the case where there’s no INSERT or UPDATE and there’s no net change.
    The value comes out as None in this case, rather than failing on an exception.
  id: totrans-2036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整ON CONFLICT，使���inserted_primary_key”逻辑能够适应没有INSERT或UPDATE且没有净变化的情况。在这种情况下，值为None，而不是在异常上失败。
- en: 'References: [#3813](https://www.sqlalchemy.org/trac/ticket/3813)'
  id: totrans-2037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3813](https://www.sqlalchemy.org/trac/ticket/3813)
- en: '**[postgresql] [bug]**'
  id: totrans-2038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue in new PG “on conflict” construct where columns including those
    of the “excluded” namespace would not be table-qualified in the WHERE clauses
    in the statement.
  id: totrans-2039
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 修复了新的PG“on conflict”构造中的问题，其中包括“excluded”命名空间的列在语句的WHERE子句中不会被表格限定。
- en: 'References: [#3807](https://www.sqlalchemy.org/trac/ticket/3807)'
  id: totrans-2040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3807](https://www.sqlalchemy.org/trac/ticket/3807)
- en: mysql
  id: totrans-2041
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Added support for parsing MySQL/Connector boolean and integer arguments within
    the URL query string: connection_timeout, connect_timeout, pool_size, get_warnings,
    raise_on_warnings, raw, consume_results, ssl_verify_cert, force_ipv6, pool_reset_session,
    compress, allow_local_infile, use_pure.'
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对解析MySQL/Connector布尔值和整数参数的支持，这些参数在URL查询字符串中：connection_timeout、connect_timeout、pool_size、get_warnings、raise_on_warnings、raw、consume_results、ssl_verify_cert、force_ipv6、pool_reset_session、compress、allow_local_infile、use_pure。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.0.15
- en: 'References: [#3787](https://www.sqlalchemy.org/trac/ticket/3787)'
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3787](https://www.sqlalchemy.org/trac/ticket/3787)
- en: '**[mysql] [bug]**'
  id: totrans-2046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where the “literal_binds” flag would not be propagated to a CAST expression
    under MySQL.
  id: totrans-2047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在MySQL下“literal_binds”标志不会传播到CAST表达式的错误。
- en: 'References: [#3766](https://www.sqlalchemy.org/trac/ticket/3766)'
  id: totrans-2048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3766](https://www.sqlalchemy.org/trac/ticket/3766)
- en: mssql
  id: totrans-2049
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Changed the query used to get “default schema name”, from one that queries the
    database principals table to using the “schema_name()” function, as issues have
    been reported that the former system was unavailable on the Azure Data Warehouse
    edition. It is hoped that this will finally work across all SQL Server versions
    and authentication styles.
  id: totrans-2051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用于获取“默认模式名称”的查询更改为使用“schema_name()”函数，而不是查询数据库原则表的查询，因为已经有人报告说前一个系统在Azure数据仓库版本上不可用。希望这将最终在所有SQL
    Server版本和身份验证样式上工作。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.0.16
- en: 'References: [#3810](https://www.sqlalchemy.org/trac/ticket/3810)'
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3810](https://www.sqlalchemy.org/trac/ticket/3810)
- en: '**[mssql] [bug]**'
  id: totrans-2054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Updated the server version info scheme for pyodbc to use SQL Server SERVERPROPERTY(),
    rather than relying upon pyodbc.SQL_DBMS_VER, which continues to be unreliable
    particularly with FreeTDS.
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了pyodbc的服务器版本信息方案，使用SQL Server的SERVERPROPERTY()，而不是依赖于pyodbc.SQL_DBMS_VER，后者在特别是FreeTDS中仍然不可靠。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.0.16
- en: 'References: [#3814](https://www.sqlalchemy.org/trac/ticket/3814)'
  id: totrans-2057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3814](https://www.sqlalchemy.org/trac/ticket/3814)
- en: '**[mssql] [bug]**'
  id: totrans-2058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added error code 20017 “unexpected EOF from the server” to the list of disconnect
    exceptions that result in a connection pool reset. Pull request courtesy Ken Robbins.
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将错误代码20017“服务器意外结束”添加到断开连接异常列表中，导致连接池重置。感谢Ken Robbins提供的拉取请求。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.0.16
- en: 'References: [#3791](https://www.sqlalchemy.org/trac/ticket/3791)'
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3791](https://www.sqlalchemy.org/trac/ticket/3791)
- en: misc
  id: totrans-2062
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [orm.declarative]**'
  id: totrans-2063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm.declarative]**'
- en: Fixed bug where setting up a single-table inh subclass of a joined-table subclass
    which included an extra column would corrupt the foreign keys collection of the
    mapped table, thereby interfering with the initialization of relationships.
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，设置一个单表继承子类的连接表子类，该连接表子类包含一个额外的列，会破坏映射表的外键集合，从而干扰关系的初始化。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.0.16
- en: 'References: [#3797](https://www.sqlalchemy.org/trac/ticket/3797)'
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3797](https://www.sqlalchemy.org/trac/ticket/3797)
- en: orm
  id: totrans-2067
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Enhanced the new “raise” lazy loader strategy to also include a “raise_on_sql”
    variant, available both via [`relationship.lazy`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship") as well as [`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload"). This variant only raises if the lazy load would actually
    emit SQL, vs. raising if the lazy loader mechanism is invoked at all.
  id: totrans-2069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了新的“raise”懒惰加载器策略，还包括一个“raise_on_sql”变体，通过[`relationship.lazy`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship")以及[`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload")都可以使用。此变体仅在懒加载实际上会发出SQL时才引发，而不是在调用懒加载机制时引发。
- en: 'References: [#3812](https://www.sqlalchemy.org/trac/ticket/3812)'
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3812](https://www.sqlalchemy.org/trac/ticket/3812)
- en: '**[orm] [feature]**'
  id: totrans-2071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") method now resets the group by collection if
    an argument of `None` is passed, in the same way that [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") has worked for a long time. Pull request courtesy
    Iuri Diniz.
  id: totrans-2072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")方法现在如果传递`None`参数，则重置分组集合，就像[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")一直以来的工作方式一样。感谢Iuri Diniz提供的拉取请求。'
- en: '**[orm] [change]**'
  id: totrans-2073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Passing False to [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") in order to cancel all order by’s is deprecated;
    there is no longer any difference between calling this method with False or with
    None.
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将False传递给[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")以取消所有排序已弃用；使用False或None调用此方法不再有区别。
- en: '**[orm] [bug]**'
  id: totrans-2075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where joined eager loading would fail for a polymorphically- loaded
    mapper, where the polymorphic_on was set to an un-mapped expression such as a
    CASE expression.
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接急切加载在多态加载的映射器中失败的错误，其中多态_on设置为未映射表达式，例如CASE表达式。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3800](https://www.sqlalchemy.org/trac/ticket/3800)'
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3800](https://www.sqlalchemy.org/trac/ticket/3800)
- en: '**[orm] [bug]**'
  id: totrans-2079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ArgumentError raised for an invalid bind sent to a Session
    via [`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper"), [`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table"), or the constructor would fail to be correctly
    raised.
  id: totrans-2080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对通过[`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")、[`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")或构造函数发送到会话的无效绑定引发的ArgumentError未能正确引发的错误。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3798](https://www.sqlalchemy.org/trac/ticket/3798)'
  id: totrans-2082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3798](https://www.sqlalchemy.org/trac/ticket/3798)
- en: '**[orm] [bug]**'
  id: totrans-2083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a subqueryload of an “of_type()” object
    linked to a second subqueryload of a plain mapped class, or a longer chain of
    several “of_type()” attributes, would fail to link the joins correctly.
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急切加载中的错误，其中一个“of_type()”对象的子查询加载链接到第二个普通映射类的子查询加载，或者更长的几个“of_type()”属性链，将无法正确链接连接。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-2085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.15
- en: 'References: [#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)'
  id: totrans-2086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)
- en: '**[orm] [bug]**'
  id: totrans-2087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ORM attributes can now be assigned any object that is has a `__clause_element__()`
    attribute, which will result in inline SQL the way any [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") class does. This covers other mapped
    attributes not otherwise transformed by further expression constructs.
  id: totrans-2088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将ORM属性分配给具有`__clause_element__()`属性的任何对象，这将导致内联SQL的生成方式与任何[`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")类一样。这涵盖了其他映射属性，否则不会被进一步的表达式构造转换。
- en: 'References: [#3802](https://www.sqlalchemy.org/trac/ticket/3802)'
  id: totrans-2089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3802](https://www.sqlalchemy.org/trac/ticket/3802)
- en: '**[orm] [bug]**'
  id: totrans-2090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an adjustment to the bug fix first introduced in [ticket:3431] that involves
    an object appearing in multiple contexts in a single result set, such that an
    eager loader that would set the related object value to be None will still fire
    off, thus satisfying the load of that attribute. Previously, the adjustment only
    honored a non-None value arriving for an eagerly loaded attribute in a secondary
    row.
  id: totrans-2091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对首次引入的[票号：3431]中的错误修复进行了调整，涉及到一个对象在单个结果集中出现在多个上下文中，因此会触发一个急切加载器，将相关对象值设置为None，从而满足该属性的加载。之前，该调整只会在次要行中急切加载属性的非None值到达时才会生效。
- en: 'References: [#3811](https://www.sqlalchemy.org/trac/ticket/3811)'
  id: totrans-2092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3811](https://www.sqlalchemy.org/trac/ticket/3811)
- en: '**[orm] [bug]**'
  id: totrans-2093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new [`SessionEvents.persistent_to_deleted()`](../orm/events.html#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") event where the target object
    could be garbage collected before the event is fired off.
  id: totrans-2094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`SessionEvents.persistent_to_deleted()`](../orm/events.html#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted")事件中的错误，其中目标对象可能在事件触发之前被垃圾回收。
- en: 'References: [#3808](https://www.sqlalchemy.org/trac/ticket/3808)'
  id: totrans-2095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3808](https://www.sqlalchemy.org/trac/ticket/3808)
- en: '**[orm] [bug]**'
  id: totrans-2096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The primaryjoin of a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct can now include a [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") object that includes a callable function
    to generate values. Previously, the lazy loader strategy would be incompatible
    with this use, and additionally would fail to correctly detect if the “use_get”
    criteria should be used if the primary key were involved with the bound parameter.
  id: totrans-2097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造函数的primaryjoin现在可以包括一个包含可调用函数以生成值的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")对象。以前，惰性加载策略与此用法不兼容，并且还会无法正确检测是否应该使用“use_get”标准，如果主键与绑定参数有关。'
- en: 'References: [#3767](https://www.sqlalchemy.org/trac/ticket/3767)'
  id: totrans-2098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3767](https://www.sqlalchemy.org/trac/ticket/3767)
- en: '**[orm] [bug]**'
  id: totrans-2099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An UPDATE emitted from the ORM flush process can now accommodate a SQL expression
    element for a column within the primary key of an object, if the target database
    supports RETURNING in order to provide the new value, or if the PK value is set
    “to itself” for the purposes of bumping some other trigger / onupdate on the column.
  id: totrans-2100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从ORM刷新过程中发出的UPDATE现在可以适应对象主键中的列的SQL表达式元素，如果目标数据库支持RETURNING以提供新值，或者如果将PK值设置为“自身”以用于触发其他触发器/列的onupdate。
- en: 'References: [#3801](https://www.sqlalchemy.org/trac/ticket/3801)'
  id: totrans-2101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3801](https://www.sqlalchemy.org/trac/ticket/3801)
- en: '**[orm] [bug]**'
  id: totrans-2102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the “simple many-to-one” condition that allows lazy loading
    to use get() from identity map would fail to be invoked if the primaryjoin of
    the relationship had multiple clauses separated by AND which were not in the same
    order as that of the primary key columns being compared in each clause. This ordering
    difference occurs for a composite foreign key where the table-bound columns on
    the referencing side were not in the same order in the .c collection as the primary
    key columns on the referenced side….which in turn occurs a lot if one is using
    declarative mixins and/or declared_attr to set up columns.
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即“简单的一对多”条件允许惰性加载使用来自标识映射的get()时，如果关系的primaryjoin有多个由AND分隔的子句，并且这些子句的顺序与每个子句中比较的主键列的顺序不同，则无法调用。这种排序差异发生在复合外键的情况下，其中引用方的表绑定列在.c集合中的顺序与被引用方的主键列不同……如果使用声明性mixin和/或declared_attr设置列，则会经常发生这种情况。
- en: 'References: [#3788](https://www.sqlalchemy.org/trac/ticket/3788)'
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3788](https://www.sqlalchemy.org/trac/ticket/3788)
- en: '**[orm] [bug]**'
  id: totrans-2105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An exception is raised when two `@validates` decorators on a mapping make use
    of the same name. Only one validator of a certain name at a time is supported,
    there’s no mechanism to chain these together, as the order of the validators at
    the level of function decorator can’t be made deterministic.
  id: totrans-2106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当映射上的两个`@validates`装饰器使用相同名称时，会引发异常。一次只支持一个特定名称的验证器，没有机制将它们链接在一起，因为在函数装饰器级别上验证器的顺序无法确定。
- en: See also
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named @validates decorators will now raise an exception](migration_11.html#change-3776)'
  id: totrans-2108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[相同名称的@validates装饰器现在会引发异常](migration_11.html#change-3776)'
- en: 'References: [#3776](https://www.sqlalchemy.org/trac/ticket/3776)'
  id: totrans-2109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3776](https://www.sqlalchemy.org/trac/ticket/3776)
- en: '**[orm] [bug]**'
  id: totrans-2110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Mapper errors raised during [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") now explicitly include the name of the originating
    mapper in the exception message to help in those situations where the wrapped
    exception does not itself include the source mapper. Pull request courtesy John
    Perkins.
  id: totrans-2111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")期间引发的映射器错误现在在异常消息中明确包含源映射器的名称，以帮助处理那些包装异常本身不包含源映射器的情况。感谢John
    Perkins的拉取请求。
- en: orm declarative
  id: totrans-2112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [change]**'
  id: totrans-2113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [change]**'
- en: Constructing a declarative base class that inherits from another class will
    also inherit its docstring. This means `as_declarative()` acts more like a normal
    class decorator.
  id: totrans-2114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建一个继承自另一个类的声明性基类也会继承其文档字符串。这意味着`as_declarative()`的行为更像一个普通的类装饰器。
- en: sql
  id: totrans-2115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    where the internal method `_reset_exported()` would corrupt the state of the object.
    This method is intended for selectable objects and is called by the ORM in some
    cases; an erroneous mapper configuration would could lead the ORM to call this
    on a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中的错误，其中内部方法`_reset_exported()`会破坏对象的状态。此方法旨在用于可选择对象，并在某些情况下由ORM调用；错误的映射器配置可能导致ORM在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象上调用此方法。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-2118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.15
- en: 'References: [#3755](https://www.sqlalchemy.org/trac/ticket/3755)'
  id: totrans-2119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3755](https://www.sqlalchemy.org/trac/ticket/3755)
- en: '**[sql] [bug]**'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Execution options can now be propagated from within a statement at compile time
    to the outermost statement, so that if an embedded element wants to set “autocommit”
    to be True for example, it can propagate this to the enclosing statement. Currently,
    this feature is enabled for a DML-oriented CTE embedded inside of a SELECT statement,
    e.g. INSERT/UPDATE/DELETE inside of SELECT.
  id: totrans-2121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行选项现在可以在编译时从语句内传播到最外层语句，因此，如果嵌入元素想要将“autocommit”设置为True，例如，它可以将此传播到封闭语句。目前，此功能已启用用于嵌入在SELECT语句内的面向DML的CTE，例如，在SELECT内的INSERT/UPDATE/DELETE。
- en: 'References: [#3805](https://www.sqlalchemy.org/trac/ticket/3805)'
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3805](https://www.sqlalchemy.org/trac/ticket/3805)
- en: '**[sql] [bug]**'
  id: totrans-2123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A string sent as a column default via the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter is now escaped for quotes.
  id: totrans-2124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数作为列默认值发送的字符串现在已经为引号进行了转义。
- en: See also
  id: totrans-2125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[String server_default now literal quoted](migration_11.html#change-3809)'
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[String server_default现在是文字引用](migration_11.html#change-3809)'
- en: 'References: [#3809](https://www.sqlalchemy.org/trac/ticket/3809)'
  id: totrans-2127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3809](https://www.sqlalchemy.org/trac/ticket/3809)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-2128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Added compiler-level flags used by PostgreSQL to place additional parenthesis
    than would normally be generated by precedence rules around operations involving
    JSON, HSTORE indexing operators as well as within their operands since it has
    been observed that PostgreSQL’s precedence rules for at least the HSTORE indexing
    operator is not consistent between 9.4 and 9.5.
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了由PostgreSQL使用的编译器级别标志，用于在涉及JSON、HSTORE索引操作符以及它们的操作数时放置比通常由优先规则生成的括号更多的操作符，因为观察到PostgreSQL至少对于HSTORE索引操作符的优先规则在9.4和9.5之间不一致。
- en: 'References: [#3806](https://www.sqlalchemy.org/trac/ticket/3806)'
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3806](https://www.sqlalchemy.org/trac/ticket/3806)
- en: '**[sql] [bug] [mysql]**'
  id: totrans-2131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: The `BaseException` exception class is now intercepted by the exception-handling
    routines of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), and includes handling by the `ConnectionEvents.handle_error()`
    event. The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is now **invalidated** by default in the case
    of a system level exception that is not a subclass of `Exception`, including `KeyboardInterrupt`
    and the greenlet `GreenletExit` class, to prevent further operations from occurring
    upon a database connection that is in an unknown and possibly corrupted state.
    The MySQL drivers are most targeted by this change however the change is across
    all DBAPIs.
  id: totrans-2132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")的异常处理例程拦截了`BaseException`异常类，并包括`ConnectionEvents.handle_error()`事件的处理。在系统级别异常（不是`Exception`的子类，包括`KeyboardInterrupt`和greenlet
    `GreenletExit`类）的情况下，默认情况下现在[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")被**使无效**，以防止在处于未知且可能已损坏状态的数据库连接上发生进一步操作。MySQL驱动程序是此更改的主要目标，但此更改适用于所有DBAPIs。
- en: See also
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Engines now invalidate connections, run error handlers for BaseException](migration_11.html#change-3803)'
  id: totrans-2134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[引擎现在使连接无效，运行BaseException的错误处理程序](migration_11.html#change-3803)'
- en: 'References: [#3803](https://www.sqlalchemy.org/trac/ticket/3803)'
  id: totrans-2135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3803](https://www.sqlalchemy.org/trac/ticket/3803)
- en: '**[sql] [bug]**'
  id: totrans-2136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The “eq” and “ne” operators are no longer part of the list of “associative”
    operators, while they remain considered to be “commutative”. This allows an expression
    like `(x == y) == z` to be maintained at the SQL level with parenthesis. Pull
    request courtesy John Passaro.
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “eq”和“ne”运算符不再是“关联”运算符列表的一部分，尽管它们仍被认为是“可交换的”。这允许像`(x == y) == z`这样的表达式在SQL级别上保持括号。感谢John
    Passaro提供的拉取请求。
- en: 'References: [#3799](https://www.sqlalchemy.org/trac/ticket/3799)'
  id: totrans-2138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3799](https://www.sqlalchemy.org/trac/ticket/3799)
- en: '**[sql] [bug]**'
  id: totrans-2139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Stringify of expression with unnamed [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, as occurs in lots of situations including
    ORM error reporting, will now render the name in string context as “<name unknown>”
    rather than raising a compile error.
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在许多情况下包括ORM错误报告中出现的未命名[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的表达式字符串化，现在在字符串上下文中将名称呈现为“<name unknown>”��而不是引发编译错误。
- en: 'References: [#3789](https://www.sqlalchemy.org/trac/ticket/3789)'
  id: totrans-2141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3789](https://www.sqlalchemy.org/trac/ticket/3789)
- en: '**[sql] [bug]**'
  id: totrans-2142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Raise a more descriptive exception / message when ClauseElement or non-SQLAlchemy
    objects that are not “executable” are erroneously passed to `.execute()`; a new
    exception ObjectNotExecutableError is raised consistently in all cases.
  id: totrans-2143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ClauseElement或非SQLAlchemy对象被错误地传递给`.execute()`时，引发一个更具描述性的异常/消息；在所有情况下一致地引发一个新的异常ObjectNotExecutableError。
- en: 'References: [#3786](https://www.sqlalchemy.org/trac/ticket/3786)'
  id: totrans-2144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3786](https://www.sqlalchemy.org/trac/ticket/3786)
- en: '**[sql] [bug] [mysql] [postgresql]**'
  id: totrans-2145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql] [postgresql]**'
- en: Fixed regression in JSON datatypes where the “literal processor” for a JSON
    index value would not be invoked. The native String and Integer datatypes are
    now called upon from within the JSONIndexType and JSONPathType. This is applied
    to the generic, PostgreSQL, and MySQL JSON types and also has a dependency on
    [#3766](https://www.sqlalchemy.org/trac/ticket/3766).
  id: totrans-2146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了JSON数据类型中的回归，其中JSON索引值的“literal processor”不会被调用的问题。现在从JSONIndexType和JSONPathType内部调用原生的String和Integer数据类型。这适用于通用的、PostgreSQL和MySQL的JSON类型，还依赖于[#3766](https://www.sqlalchemy.org/trac/ticket/3766)。
- en: 'References: [#3765](https://www.sqlalchemy.org/trac/ticket/3765)'
  id: totrans-2147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3765](https://www.sqlalchemy.org/trac/ticket/3765)
- en: '**[sql] [bug]**'
  id: totrans-2148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    would fail to extract columns from compound SQL expressions if those SQL expressions
    were wrapped inside of an ORM-style `__clause_element__()` construct. This bug
    exists in 1.0.x as well, however in 1.1 is more noticeable as hybrid_property
    @expression now returns a wrapped element.
  id: totrans-2149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")无法从包含在ORM风格`__clause_element__()`构造内部的复合SQL表达式中提取列的错误。这个bug在1.0.x中也存在，但在1.1中更为明显，因为hybrid_property
    @expression现在返回一个包装元素。
- en: 'References: [#3763](https://www.sqlalchemy.org/trac/ticket/3763)'
  id: totrans-2150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3763](https://www.sqlalchemy.org/trac/ticket/3763)
- en: postgresql
  id: totrans-2151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: An adjustment to ON CONFLICT such that the “inserted_primary_key” logic is able
    to accommodate the case where there’s no INSERT or UPDATE and there’s no net change.
    The value comes out as None in this case, rather than failing on an exception.
  id: totrans-2153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了ON CONFLICT，使“inserted_primary_key”逻辑能够适应没有INSERT或UPDATE且没有净变化的情况。在这种情况下，该值为None，而不是在异常上失败。
- en: 'References: [#3813](https://www.sqlalchemy.org/trac/ticket/3813)'
  id: totrans-2154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3813](https://www.sqlalchemy.org/trac/ticket/3813)
- en: '**[postgresql] [bug]**'
  id: totrans-2155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue in new PG “on conflict” construct where columns including those
    of the “excluded” namespace would not be table-qualified in the WHERE clauses
    in the statement.
  id: totrans-2156
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 修复了新的PG“on conflict”构造中的问题，其中包括“排除”命名空间的列在语句的WHERE子句中不会被表格限定。
- en: 'References: [#3807](https://www.sqlalchemy.org/trac/ticket/3807)'
  id: totrans-2157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3807](https://www.sqlalchemy.org/trac/ticket/3807)
- en: mysql
  id: totrans-2158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Added support for parsing MySQL/Connector boolean and integer arguments within
    the URL query string: connection_timeout, connect_timeout, pool_size, get_warnings,
    raise_on_warnings, raw, consume_results, ssl_verify_cert, force_ipv6, pool_reset_session,
    compress, allow_local_infile, use_pure.'
  id: totrans-2160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对解析MySQL/Connector布尔值和整数参数的支持，这些参数在URL查询字符串中：connection_timeout, connect_timeout,
    pool_size, get_warnings, raise_on_warnings, raw, consume_results, ssl_verify_cert,
    force_ipv6, pool_reset_session, compress, allow_local_infile, use_pure。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-2161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.0.15
- en: 'References: [#3787](https://www.sqlalchemy.org/trac/ticket/3787)'
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3787](https://www.sqlalchemy.org/trac/ticket/3787)
- en: '**[mysql] [bug]**'
  id: totrans-2163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where the “literal_binds” flag would not be propagated to a CAST expression
    under MySQL.
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在MySQL下“literal_binds”标志不会传播到CAST表达式的bug。
- en: 'References: [#3766](https://www.sqlalchemy.org/trac/ticket/3766)'
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3766](https://www.sqlalchemy.org/trac/ticket/3766)
- en: mssql
  id: totrans-2166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Changed the query used to get “default schema name”, from one that queries the
    database principals table to using the “schema_name()” function, as issues have
    been reported that the former system was unavailable on the Azure Data Warehouse
    edition. It is hoped that this will finally work across all SQL Server versions
    and authentication styles.
  id: totrans-2168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了用于获取“默认模式名称”的查询，从查询数据库主体表的查询更改为使用“schema_name()”函数，因为有报道称前一系统在Azure Data
    Warehouse版本上不可用。希望这将最终在所有SQL Server版本和认证样式上都起作用。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3810](https://www.sqlalchemy.org/trac/ticket/3810)'
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3810](https://www.sqlalchemy.org/trac/ticket/3810)
- en: '**[mssql] [bug]**'
  id: totrans-2171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Updated the server version info scheme for pyodbc to use SQL Server SERVERPROPERTY(),
    rather than relying upon pyodbc.SQL_DBMS_VER, which continues to be unreliable
    particularly with FreeTDS.
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了用于pyodbc的服务器版本信息方案，使用SQL Server SERVERPROPERTY()，而不是依赖于pyodbc.SQL_DBMS_VER，后者在FreeTDS中仍然不可靠。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3814](https://www.sqlalchemy.org/trac/ticket/3814)'
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3814](https://www.sqlalchemy.org/trac/ticket/3814)
- en: '**[mssql] [bug]**'
  id: totrans-2175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added error code 20017 “unexpected EOF from the server” to the list of disconnect
    exceptions that result in a connection pool reset. Pull request courtesy Ken Robbins.
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将错误代码20017“服务器意外EOF”添加到导致连接池重置的断开异常列表中。感谢Ken Robbins的拉取请求。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3791](https://www.sqlalchemy.org/trac/ticket/3791)'
  id: totrans-2178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3791](https://www.sqlalchemy.org/trac/ticket/3791)
- en: misc
  id: totrans-2179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [orm.declarative]**'
  id: totrans-2180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm.declarative]**'
- en: Fixed bug where setting up a single-table inh subclass of a joined-table subclass
    which included an extra column would corrupt the foreign keys collection of the
    mapped table, thereby interfering with the initialization of relationships.
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即设置一个包含额外列的联接表子类的单表继承子类会破坏映射表的外键集合，从而干扰关系的初始化。
- en: 'This change is also **backported** to: 1.0.16'
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.0.16
- en: 'References: [#3797](https://www.sqlalchemy.org/trac/ticket/3797)'
  id: totrans-2183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3797](https://www.sqlalchemy.org/trac/ticket/3797)
- en: 1.1.0b3
  id: totrans-2184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.0b3
- en: 'Released: July 26, 2016'
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年7月26日
- en: orm
  id: totrans-2186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [change]**'
  id: totrans-2187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Removed a warning that dates back to 0.4 which emits when a same-named relationship
    is placed on two mappers that inherits via joined or single table inheritance.
    The warning does not apply to the current unit of work implementation.
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了一个警告，该警告可以追溯到0.4版本，当在通过联接或单表继承进行继承的两个映射器上放置同名关系时会发出警告。该警告不适用于当前的工作单元实现。
- en: See also
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named relationships on inheriting mappers no longer warn](migration_11.html#change-3749)'
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[继承映射器上的同名关系不再警告](migration_11.html#change-3749)'
- en: 'References: [#3749](https://www.sqlalchemy.org/trac/ticket/3749)'
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3749](https://www.sqlalchemy.org/trac/ticket/3749)
- en: sql
  id: totrans-2192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new CTE feature for update/insert/delete stated as a CTE inside
    of an enclosing statement (typically SELECT) whereby oninsert and onupdate values
    weren’t called upon for the embedded statement.
  id: totrans-2194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个新的CTE功能中的错误，用于在嵌套语句（通常是SELECT）中作为CTE声明的update/insert/delete语句中，嵌入语句中的oninsert和onupdate值未被调用的问题。
- en: 'References: [#3745](https://www.sqlalchemy.org/trac/ticket/3745)'
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3745](https://www.sqlalchemy.org/trac/ticket/3745)
- en: '**[sql] [bug]**'
  id: totrans-2196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new CTE feature for update/insert/delete whereby an anonymous (e.g.
    no name passed) [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct around the statement would fail.
  id: totrans-2197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个新的CTE功能中的错误，即在update/insert/delete中，围绕语句的匿名（例如未传递名称）[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")构造会失败的问题。
- en: 'References: [#3744](https://www.sqlalchemy.org/trac/ticket/3744)'
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3744](https://www.sqlalchemy.org/trac/ticket/3744)
- en: postgresql
  id: totrans-2199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug whereby [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") and [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") types were not deeply inspected enough by the PostgreSQL
    dialect to determine if SMALLSERIAL or BIGSERIAL needed to be rendered rather
    than SERIAL.
  id: totrans-2201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")和[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型未被PostgreSQL方言深度检查以确定是否需要呈现SMALLSERIAL或BIGSERIAL而不是SERIAL的错误。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-2202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.0.14
- en: 'References: [#3739](https://www.sqlalchemy.org/trac/ticket/3739)'
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3739](https://www.sqlalchemy.org/trac/ticket/3739)
- en: oracle
  id: totrans-2204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update"), where the Oracle “rownum”
    approach to LIMIT/OFFSET would fail to accommodate for the expressions inside
    the “OF” clause, which must be stated at the topmost level referring to expression
    within the subquery. The expressions are now added to the subquery if needed.
  id: totrans-2206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")中的错误，其中Oracle的“rownum”方法对LIMIT/OFFSET无法容纳“OF”子句内的表达式，这些表达式必须在顶层引用子查询中的表达式。如果需要，这些表达式现在将添加到子查询中。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.0.14
- en: 'References: [#3741](https://www.sqlalchemy.org/trac/ticket/3741)'
  id: totrans-2208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3741](https://www.sqlalchemy.org/trac/ticket/3741)
- en: misc
  id: totrans-2209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[feature] [ext]**'
  id: totrans-2210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added a “default” parameter to the new sqlalchemy.ext.indexable extension.
  id: totrans-2211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为新的sqlalchemy.ext.indexable扩展添加了一个“default”参数。
- en: '**[bug] [ext]**'
  id: totrans-2212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in `sqlalchemy.ext.baked` where the unbaking of a subquery eager loader
    query would fail due to a variable scoping issue, when multiple subquery loaders
    were involved. Pull request courtesy Mark Hahnenberg.
  id: totrans-2213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.baked`中的错误，其中解除子查询急加载器查询的失败，由于变量作用域问题，当涉及多个子查询加载器时会失败。感谢Mark
    Hahnenberg的拉取请求。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-2214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.0.15
- en: 'References: [#3743](https://www.sqlalchemy.org/trac/ticket/3743)'
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3743](https://www.sqlalchemy.org/trac/ticket/3743)
- en: '**[bug] [ext]**'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: sqlalchemy.ext.indexable will intercept IndexError as well as KeyError when
    raising as AttributeError.
  id: totrans-2217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.ext.indexable将在引发AttributeError时拦截IndexError和KeyError。
- en: orm
  id: totrans-2218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [change]**'
  id: totrans-2219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Removed a warning that dates back to 0.4 which emits when a same-named relationship
    is placed on two mappers that inherits via joined or single table inheritance.
    The warning does not apply to the current unit of work implementation.
  id: totrans-2220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了一个警告，该警告可以追溯到0.4版本，当一个同名关系被放置在通过联接或单表继承继承的两个映射器上时会发出警告。该警告不适用于当前的工作单元实现。
- en: See also
  id: totrans-2221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named relationships on inheriting mappers no longer warn](migration_11.html#change-3749)'
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[继承映射器上的同名关系不再警告](migration_11.html#change-3749)'
- en: 'References: [#3749](https://www.sqlalchemy.org/trac/ticket/3749)'
  id: totrans-2223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3749](https://www.sqlalchemy.org/trac/ticket/3749)
- en: sql
  id: totrans-2224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new CTE feature for update/insert/delete stated as a CTE inside
    of an enclosing statement (typically SELECT) whereby oninsert and onupdate values
    weren’t called upon for the embedded statement.
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的CTE功能中的错误，用于在嵌套语句（通常是SELECT）中作为CTE声明的update/insert/delete功能，其中oninsert和onupdate值未在嵌入语句中调用。
- en: 'References: [#3745](https://www.sqlalchemy.org/trac/ticket/3745)'
  id: totrans-2227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3745](https://www.sqlalchemy.org/trac/ticket/3745)
- en: '**[sql] [bug]**'
  id: totrans-2228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new CTE feature for update/insert/delete whereby an anonymous (e.g.
    no name passed) [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct around the statement would fail.
  id: totrans-2229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的CTE功能中的错误，其中围绕语句的匿名（例如未传递名称）[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")构造将失败。
- en: 'References: [#3744](https://www.sqlalchemy.org/trac/ticket/3744)'
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3744](https://www.sqlalchemy.org/trac/ticket/3744)
- en: postgresql
  id: totrans-2231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug whereby [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") and [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") types were not deeply inspected enough by the PostgreSQL
    dialect to determine if SMALLSERIAL or BIGSERIAL needed to be rendered rather
    than SERIAL.
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")和[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型未被PostgreSQL方言深度检查以确定是否需要渲染SMALLSERIAL或BIGSERIAL而不是SERIAL的bug。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.14
- en: 'References: [#3739](https://www.sqlalchemy.org/trac/ticket/3739)'
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3739](https://www.sqlalchemy.org/trac/ticket/3739)
- en: oracle
  id: totrans-2236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update"), where the Oracle “rownum”
    approach to LIMIT/OFFSET would fail to accommodate for the expressions inside
    the “OF” clause, which must be stated at the topmost level referring to expression
    within the subquery. The expressions are now added to the subquery if needed.
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")中的bug，在Oracle的“rownum”方法中，LIMIT/OFFSET无法适应“OF”子句中的表达式，这些表达式必须在子查询中的最顶层引用表达式。如果需要，这些表达式现在将添加到子查询中。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-2239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.14
- en: 'References: [#3741](https://www.sqlalchemy.org/trac/ticket/3741)'
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3741](https://www.sqlalchemy.org/trac/ticket/3741)
- en: misc
  id: totrans-2241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-2242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added a “default” parameter to the new sqlalchemy.ext.indexable extension.
  id: totrans-2243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为新的sqlalchemy.ext.indexable扩展添加了一个“default”参数。
- en: '**[bug] [ext]**'
  id: totrans-2244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in `sqlalchemy.ext.baked` where the unbaking of a subquery eager loader
    query would fail due to a variable scoping issue, when multiple subquery loaders
    were involved. Pull request courtesy Mark Hahnenberg.
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.baked`中的bug，在涉及多个子查询加载器时，解除子查询贪婪加载器查询的问题由于变量作���域问题而失败。感谢Mark
    Hahnenberg的拉取请求。
- en: 'This change is also **backported** to: 1.0.15'
  id: totrans-2246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.15
- en: 'References: [#3743](https://www.sqlalchemy.org/trac/ticket/3743)'
  id: totrans-2247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3743](https://www.sqlalchemy.org/trac/ticket/3743)
- en: '**[bug] [ext]**'
  id: totrans-2248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: sqlalchemy.ext.indexable will intercept IndexError as well as KeyError when
    raising as AttributeError.
  id: totrans-2249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.ext.indexable在引发AttributeError时也会拦截IndexError和KeyError。
- en: 1.1.0b2
  id: totrans-2250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.0b2
- en: 'Released: July 1, 2016'
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年7月1日
- en: sql
  id: totrans-2252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in SQL math negation operator where the type of the expression would
    no longer be the numeric type of the original. This would cause issues where the
    type determined result set behaviors.
  id: totrans-2254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL数学否定运算符中的问题，其中表达式的类型将不再是原始的数值类型。这会导致确定结果集行为的问题。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.14
- en: 'References: [#3735](https://www.sqlalchemy.org/trac/ticket/3735)'
  id: totrans-2256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3735](https://www.sqlalchemy.org/trac/ticket/3735)
- en: '**[sql] [bug]**'
  id: totrans-2257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the `__getstate__` / `__setstate__` methods for sqlalchemy.util.Properties
    were non-working due to the transition in the 1.0 series to `__slots__`. The issue
    potentially impacted some third-party applications. Pull request courtesy Pieter
    Mulder.
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sqlalchemy.util.Properties的`__getstate__` / `__setstate__`方法由于1.0系列向`__slots__`的过渡而无法工作的bug。该问题可能会影响一些第三方应用程序。感谢Pieter
    Mulder的拉取请求。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-2259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.0.14
- en: 'References: [#3728](https://www.sqlalchemy.org/trac/ticket/3728)'
  id: totrans-2260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3728](https://www.sqlalchemy.org/trac/ticket/3728)
- en: '**[sql] [bug]**'
  id: totrans-2261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The processing performed by the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype for backends that only feature integer types
    has been made consistent between the pure Python and C-extension versions, in
    that the C-extension version will accept any integer value from the database as
    a boolean, not just zero and one; additionally, non-boolean integer values being
    sent to the database are coerced to exactly zero or one, instead of being passed
    as the original integer value.
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")数据类型在仅具有整数类型的后端上的处理已经在纯Python和C扩展版本之间保持一致，C扩展版本将接受数据库中的任何整数值作为布尔值，而不仅仅是零和一；此外，发送到数据库的非布尔整数值将被强制转换为零或一，而不是作为原始整数值传递。'
- en: See also
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Non-native boolean integer values coerced to zero/one/None in all cases](migration_11.html#change-3730)'
  id: totrans-2264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[非本地布尔整数值在所有情况下被强制转换为零/一/无](migration_11.html#change-3730)'
- en: 'References: [#3730](https://www.sqlalchemy.org/trac/ticket/3730)'
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3730](https://www.sqlalchemy.org/trac/ticket/3730)
- en: '**[sql] [bug]**'
  id: totrans-2266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Rolled back the validation rules a bit in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") to allow unknown string values to pass through, unless
    the flag `validate_string=True` is passed to the Enum; any other kind of object
    is still of course rejected. While the immediate use is to allow comparisons to
    enums with LIKE, the fact that this use exists indicates there may be more unknown-string-comparison
    use cases than we expected, which hints that perhaps there are some unknown string-INSERT
    cases too.
  id: totrans-2267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    中将验证规则稍微回滚，以允许未知字符串值通过，除非将标志 `validate_string=True` 传递给 Enum；当然，任何其他类型的对象仍然被拒绝。虽然立即使用是允许与
    LIKE 的枚举比较，但存在此使用表明可能有更多未知字符串比较用例，这暗示可能存在一些未知字符串插入用例。
- en: 'References: [#3725](https://www.sqlalchemy.org/trac/ticket/3725)'
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3725](https://www.sqlalchemy.org/trac/ticket/3725)
- en: postgresql
  id: totrans-2269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [ext]**'
  id: totrans-2270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [ext]**'
- en: Made a slight behavioral change in the `sqlalchemy.ext.compiler` extension,
    whereby the existing compilation schemes for an established construct would be
    removed if that construct itself didn’t already have its own dedicated `__visit_name__`.
    This was a rare occurrence in 1.0, however in 1.1 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") subclasses [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") and has this behavior. As a result, setting up a compilation
    handler for another dialect such as SQLite would render the main [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") object no longer compilable.
  id: totrans-2271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `sqlalchemy.ext.compiler` 扩展中进行了轻微的行为更改，其中已建立的构造的现有编译方案将被移除，如果该构造本身尚未拥有专用的
    `__visit_name__`。这在 1.0 中很少见，但是在 1.1 中，[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 子类 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 并具有此行为。结果，为其他方言（例如 SQLite）设置编译处理程序将使主 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 对象不再可编译。
- en: 'References: [#3732](https://www.sqlalchemy.org/trac/ticket/3732)'
  id: totrans-2272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3732](https://www.sqlalchemy.org/trac/ticket/3732)
- en: mysql
  id: totrans-2273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Dialed back the “order the primary key columns per auto-increment” described
    in [No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)
    a bit, so that if the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") is explicitly defined, the order of
    columns is maintained exactly, allowing control of this behavior when necessary.
  id: totrans-2275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [不再生成带 AUTO_INCREMENT 的复合主键的隐式 KEY](migration_11.html#change-mysql-3216) 中略微调整了“按自动增量排序主键列”的描述，因此，如果
    [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 被明确定义，列的顺序将完全保持不变，允许在必要时控制此行为。
- en: 'References: [#3726](https://www.sqlalchemy.org/trac/ticket/3726)'
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3726](https://www.sqlalchemy.org/trac/ticket/3726)
- en: sql
  id: totrans-2277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in SQL math negation operator where the type of the expression would
    no longer be the numeric type of the original. This would cause issues where the
    type determined result set behaviors.
  id: totrans-2279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL 数学否定运算符中的问题，其中表达式的类型将不再是原始表达式的数字类型。这将导致类型确定结果集行为的问题。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-2280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 到：1.0.14
- en: 'References: [#3735](https://www.sqlalchemy.org/trac/ticket/3735)'
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3735](https://www.sqlalchemy.org/trac/ticket/3735)
- en: '**[sql] [bug]**'
  id: totrans-2282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the `__getstate__` / `__setstate__` methods for sqlalchemy.util.Properties
    were non-working due to the transition in the 1.0 series to `__slots__`. The issue
    potentially impacted some third-party applications. Pull request courtesy Pieter
    Mulder.
  id: totrans-2283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 sqlalchemy.util.Properties 的 `__getstate__` / `__setstate__` 方法由于 1.0 系列向
    `__slots__` 过渡而无法正常工作的错误。该问题可能会影响一些第三方应用程序。感谢 Pieter Mulder 的拉取请求。
- en: 'This change is also **backported** to: 1.0.14'
  id: totrans-2284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 到：1.0.14
- en: 'References: [#3728](https://www.sqlalchemy.org/trac/ticket/3728)'
  id: totrans-2285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3728](https://www.sqlalchemy.org/trac/ticket/3728)
- en: '**[sql] [bug]**'
  id: totrans-2286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The processing performed by the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype for backends that only feature integer types
    has been made consistent between the pure Python and C-extension versions, in
    that the C-extension version will accept any integer value from the database as
    a boolean, not just zero and one; additionally, non-boolean integer values being
    sent to the database are coerced to exactly zero or one, instead of being passed
    as the original integer value.
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅具有整数类型的后端执行的[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")数据类型的处理在纯Python和C扩展版本之间已经保持一致，即C扩展版本将接受数据库中的任何整数值作为布尔值，而不仅仅是零和一；此外，发送到数据库的非布尔整数值被强制转换为零或一，而不是作为原始整数值传递。
- en: See also
  id: totrans-2288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Non-native boolean integer values coerced to zero/one/None in all cases](migration_11.html#change-3730)'
  id: totrans-2289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[所有情况下将非本地布尔整数值强制转换为零/一/None](migration_11.html#change-3730)'
- en: 'References: [#3730](https://www.sqlalchemy.org/trac/ticket/3730)'
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3730](https://www.sqlalchemy.org/trac/ticket/3730)
- en: '**[sql] [bug]**'
  id: totrans-2291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Rolled back the validation rules a bit in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") to allow unknown string values to pass through, unless
    the flag `validate_string=True` is passed to the Enum; any other kind of object
    is still of course rejected. While the immediate use is to allow comparisons to
    enums with LIKE, the fact that this use exists indicates there may be more unknown-string-comparison
    use cases than we expected, which hints that perhaps there are some unknown string-INSERT
    cases too.
  id: totrans-2292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")中稍微回退了验证规则，允许未知字符串值通过，除非向Enum传递了标志`validate_string=True`；当然，任何其他类型的对象仍然被拒绝。虽然立即使用是为了允许与LIKE一起比较枚举，但存在这种用法表明可能存在更多未知字符串比较用例，这暗示可能还有一些未知字符串插入用例。
- en: 'References: [#3725](https://www.sqlalchemy.org/trac/ticket/3725)'
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3725](https://www.sqlalchemy.org/trac/ticket/3725)
- en: postgresql
  id: totrans-2294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [ext]**'
  id: totrans-2295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [ext]**'
- en: Made a slight behavioral change in the `sqlalchemy.ext.compiler` extension,
    whereby the existing compilation schemes for an established construct would be
    removed if that construct itself didn’t already have its own dedicated `__visit_name__`.
    This was a rare occurrence in 1.0, however in 1.1 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") subclasses [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") and has this behavior. As a result, setting up a compilation
    handler for another dialect such as SQLite would render the main [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") object no longer compilable.
  id: totrans-2296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`sqlalchemy.ext.compiler`扩展中对行为进行了轻微更改，如果已建立的结构本身没有专用的`__visit_name__`，则会删除该结构的现有编译方案。这在1.0中很少见，但在1.1中[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")子类[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")并具有此行为。因此，为其他方言（如SQLite）设置编译处理程序将导致主[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")对象不再可编译。
- en: 'References: [#3732](https://www.sqlalchemy.org/trac/ticket/3732)'
  id: totrans-2297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3732](https://www.sqlalchemy.org/trac/ticket/3732)
- en: mysql
  id: totrans-2298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Dialed back the “order the primary key columns per auto-increment” described
    in [No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)
    a bit, so that if the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") is explicitly defined, the order of
    columns is maintained exactly, allowing control of this behavior when necessary.
  id: totrans-2300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[不再为具有AUTO_INCREMENT的复合主键生成隐式KEY](migration_11.html#change-mysql-3216)中稍微调整了“按自动增量排序主键列”的描述，因此如果明确定义了[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")，则列的顺序将保持完全一致，允许在必要时控制此行为。
- en: 'References: [#3726](https://www.sqlalchemy.org/trac/ticket/3726)'
  id: totrans-2301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3726](https://www.sqlalchemy.org/trac/ticket/3726)
- en: 1.1.0b1
  id: totrans-2302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.0b1
- en: 'Released: June 16, 2016'
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年6月16日
- en: orm
  id: totrans-2304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature] [ext]**'
  id: totrans-2305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [ext]**'
- en: A new ORM extension [Indexable](../orm/extensions/indexable.html) is added,
    which allows construction of Python attributes which refer to specific elements
    of “indexed” structures such as arrays and JSON fields. Pull request courtesy
    Jeong YunWon.
  id: totrans-2306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增 ORM 扩展 [Indexable](../orm/extensions/indexable.html)，允许构建 Python 属性，这些属性引用“索引”结构的特定元素，如数组和
    JSON 字段。感谢 Jeong YunWon 提交的拉取请求。
- en: See also
  id: totrans-2307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Indexable ORM extension](migration_11.html#feature-indexable)'
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的 Indexable ORM 扩展](migration_11.html#feature-indexable)'
- en: '**[orm] [feature]**'
  id: totrans-2309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new flag [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings") which allows an ORM bulk INSERT
    to occur with NULL values rendered; this bypasses server side defaults, however
    allows all statements to be formed with the same set of columns, allowing them
    to be batched. Pull request courtesy Tobias Sauerwein.
  id: totrans-2310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增标志 [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings")，允许 ORM 批量插入时渲染 NULL 值；这将绕过服务器端默认值，但允许所有语句使用相同的列集合，从而可以进行批处理。感谢
    Tobias Sauerwein 提交的拉取请求。
- en: '**[orm] [feature]**'
  id: totrans-2311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new event [`AttributeEvents.init_scalar()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar"), as well as a new example suite
    illustrating its use. This event can be used to provide a Core-generated default
    value to a Python-side attribute before the object is persisted.
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增事件 [`AttributeEvents.init_scalar()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar")，以及一个新的示例套件，说明其用法。此事件可用于在对象持久化之前为
    Python 端属性提供 Core 生成的默认值。
- en: See also
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New init_scalar() event intercepts default values at ORM level](migration_11.html#change-1311)'
  id: totrans-2314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 层面新增 init_scalar() 事件拦截默认值](migration_11.html#change-1311)'
- en: 'References: [#1311](https://www.sqlalchemy.org/trac/ticket/1311)'
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1311](https://www.sqlalchemy.org/trac/ticket/1311)
- en: '**[orm] [feature]**'
  id: totrans-2316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added [`AutomapBase.prepare.schema`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.schema
    "sqlalchemy.ext.automap.AutomapBase.prepare") to the [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") method, to indicate which schema
    tables should be reflected from if not the default schema. Pull request courtesy
    Josh Marlow.
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 方法中新增 [`AutomapBase.prepare.schema`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.schema
    "sqlalchemy.ext.automap.AutomapBase.prepare")，用于指示应从哪个模式反射表，如果不是默认模式。感谢 Josh Marlow
    提交的拉取请求。
- en: '**[orm] [feature]**'
  id: totrans-2318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new parameter `mapper.passive_deletes` to available mapper options. This
    allows a DELETE to proceed for a joined-table inheritance mapping against the
    base table only, while allowing for ON DELETE CASCADE to handle deleting the row
    from the subclass tables.
  id: totrans-2319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增参数 `mapper.passive_deletes` 到可用的映射器选项中。这允许针对基表进行 DELETE 操作，而允许 ON DELETE CASCADE
    处理从子类表中删除行。
- en: See also
  id: totrans-2320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[passive_deletes feature for joined-inheritance mappings](migration_11.html#change-2349)'
  id: totrans-2321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[joined-inheritance 映射的 passive_deletes 功能](migration_11.html#change-2349)'
- en: 'References: [#2349](https://www.sqlalchemy.org/trac/ticket/2349)'
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2349](https://www.sqlalchemy.org/trac/ticket/2349)
- en: '**[orm] [feature]**'
  id: totrans-2323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Calling str() on a core SQL construct has been made more “friendly”, when the
    construct contains non-standard SQL elements such as RETURNING, array index operations,
    or dialect-specific or custom datatypes. A string is now returned in these cases
    rendering an approximation of the construct (typically the PostgreSQL-style version
    of it) rather than raising an error.
  id: totrans-2324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对核心 SQL 构造调用 str() 时，如果构造包含非标准 SQL 元素，如 RETURNING、数组索引操作或方言特定或自定义数据类型，则现在更加“友好”。在这些情况下，将返回一个字符串，呈现构造的近似值（通常是其
    PostgreSQL 风格的版本），而不是引发错误。
- en: See also
  id: totrans-2325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Friendly” stringification of Core SQL constructs without a dialect](migration_11.html#change-3631)'
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不带方言的 Core SQL 构造的“友好”字符串化](migration_11.html#change-3631)'
- en: 'References: [#3631](https://www.sqlalchemy.org/trac/ticket/3631)'
  id: totrans-2327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3631](https://www.sqlalchemy.org/trac/ticket/3631)
- en: '**[orm] [feature]**'
  id: totrans-2328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The `str()` call for [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will now take into account the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound, when generating the string form of the SQL,
    so that the actual SQL that would be emitted to the database is shown, if possible.
    Previously, only the engine associated with the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") to which the mappings are associated would be used,
    if present. If no bind can be located either on the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") to which the mappings are associated, then the “default”
    dialect is used to render the SQL, as was the case previously.
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的`str()`调用现在将考虑绑定到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，在生成SQL的字符串形式时，如果可能的话，显示将要发送到数据库的实际SQL。以前，只有与映射相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的引擎会被使用，如果存在的话。如果无法在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或与映射相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上找到绑定，则将使用“默认”方言来呈现SQL，就像以前一样。
- en: See also
  id: totrans-2330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stringify of Query will consult the Session for the correct dialect](migration_11.html#change-3081)'
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[查询的字符串化将查询会话的正确方言](migration_11.html#change-3081)'
- en: 'References: [#3081](https://www.sqlalchemy.org/trac/ticket/3081)'
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3081](https://www.sqlalchemy.org/trac/ticket/3081)
- en: '**[orm] [feature]**'
  id: totrans-2333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`SessionEvents`](../orm/events.html#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")
    suite now includes events to allow unambiguous tracking of all object lifecycle
    state transitions in terms of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") itself, e.g. pending, transient, persistent, detached.
    The state of the object within each event is also defined.
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SessionEvents`](../orm/events.html#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")套件现在包括事件，允许明确跟踪所有对象生命周期状态转换，例如[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")本身，如挂起、瞬态、持久、分离。还定义了每个事件中对象的状态。'
- en: See also
  id: totrans-2335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-2336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的会话生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [feature]**'
  id: totrans-2338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new session lifecycle state [deleted](../glossary.html#term-deleted).
    This new state represents an object that has been deleted from the [persistent](../glossary.html#term-persistent)
    state and will move to the [detached](../glossary.html#term-detached) state once
    the transaction is committed. This resolves the long-standing issue that objects
    which were deleted existed in a gray area between persistent and detached. The
    [`InstanceState.persistent`](../orm/internals.html#sqlalchemy.orm.InstanceState.persistent
    "sqlalchemy.orm.InstanceState.persistent") accessor will **no longer** report
    on a deleted object as persistent; the [`InstanceState.deleted`](../orm/internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") accessor will instead be True for these
    objects, until they become detached.
  id: totrans-2339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的会话生命周期状态[deleted](../glossary.html#term-deleted)。这个新状态表示一个已经从[persistent](../glossary.html#term-persistent)状态中删除的对象，一旦事务提交，它将转移到[detached](../glossary.html#term-detached)状态。这解决了长期存在的问题，即被删除的对象存在于持久和分离之间的灰色区域。[`InstanceState.persistent`](../orm/internals.html#sqlalchemy.orm.InstanceState.persistent
    "sqlalchemy.orm.InstanceState.persistent")访问器将**不再**报告已删除对象为持久；相反，这些对象的[`InstanceState.deleted`](../orm/internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted")访问器将为True，直到它们变为分离状态。
- en: See also
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-2341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的会话生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-2342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [feature]**'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new checks for the common error case of passing mapped classes or mapped
    instances into contexts where they are interpreted as SQL bound parameters; a
    new exception is raised for this.
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的检查，用于常见错误情况，即将映射类或映射实例传递到被解释为SQL绑定参数的上下文中；为此将引发新异常。
- en: See also
  id: totrans-2345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specific checks added for passing mapped classes, instances as SQL literals](migration_11.html#change-3321)'
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为传递映射类和实例添加了特定检查作为SQL字面值](migration_11.html#change-3321)'
- en: 'References: [#3321](https://www.sqlalchemy.org/trac/ticket/3321)'
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3321](https://www.sqlalchemy.org/trac/ticket/3321)
- en: '**[orm] [feature]**'
  id: totrans-2348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new relationship loading strategy [`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload") (also accessible via `lazy='raise'`). This strategy
    behaves almost like [`noload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.noload
    "sqlalchemy.orm.noload") but instead of returning `None` it raises an InvalidRequestError.
    Pull request courtesy Adrian Moennich.
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的关系加载策略[`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload")（也可通过`lazy='raise'`访问）。此策略的行为几乎与[`noload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.noload
    "sqlalchemy.orm.noload")相同，但不是返回`None`而是引发一个InvalidRequestError。拉取请求由Adrian Moennich提供。
- en: See also
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “raise” / “raise_on_sql” loader strategies](migration_11.html#change-3512)'
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“raise”/“raise_on_sql”加载策略](migration_11.html#change-3512)'
- en: 'References: [#3512](https://www.sqlalchemy.org/trac/ticket/3512)'
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3512](https://www.sqlalchemy.org/trac/ticket/3512)
- en: '**[orm] [change]**'
  id: totrans-2353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: The [`Mapper.order_by`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.order_by
    "sqlalchemy.orm.Mapper") parameter is deprecated. This is an old parameter no
    longer relevant to how SQLAlchemy works, once the Query object was introduced.
    By deprecating it we establish that we aren’t supporting non-working use cases
    and that we encourage applications to move off of the use of this parameter.
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapper.order_by`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.order_by
    "sqlalchemy.orm.Mapper")参数已弃用。这是一个旧参数，与SQLAlchemy的工作方式不再相关，一旦引入了Query对象。通过弃用它，我们确立了我们不支持不起作用的用例，并鼓励应用程序停止使用此参数。'
- en: See also
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mapper.order_by is deprecated](migration_11.html#change-3394)'
  id: totrans-2356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Mapper.order_by已弃用](migration_11.html#change-3394)'
- en: 'References: [#3394](https://www.sqlalchemy.org/trac/ticket/3394)'
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3394](https://www.sqlalchemy.org/trac/ticket/3394)
- en: '**[orm] [change]**'
  id: totrans-2358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: The [`Session.weak_identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.params.weak_identity_map
    "sqlalchemy.orm.Session") parameter is deprecated. See the new recipe at [Session
    Referencing Behavior](../orm/session_state_management.html#session-referencing-behavior)
    for an event-based approach to maintaining strong identity map behavior.
  id: totrans-2359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.weak_identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.params.weak_identity_map
    "sqlalchemy.orm.Session")参数已弃用。请参阅[Session Referencing Behavior](../orm/session_state_management.html#session-referencing-behavior)中的新配方，了解基于事件的维护强引用映射行为的方法。'
- en: See also
  id: totrans-2360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-2361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的会话生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [bug]**'
  id: totrans-2363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an issue where a many-to-one change of an object from one parent to another
    could work inconsistently when combined with an un-flushed modification of the
    foreign key attribute. The attribute move now considers the database-committed
    value of the foreign key in order to locate the “previous” parent of the object
    being moved. This allows events to fire off correctly including backref events.
    Previously, these events would not always fire. Applications which may have relied
    on the previously broken behavior may be affected.
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即将对象从一个父对象改为另一个父对象的多对一更改在与未刷新的外键属性修改结合时可能工作不一致的情况。现在，属性移动考虑了外键的数据库提交值，以定位正在移动的对象的“先前”父对象。这样可以正确触发事件，包括反向引用事件。以前，这些事件并不总是触发。可能依赖于先前破损行为的应用可能会受到影响。
- en: See also
  id: totrans-2365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fix involving many-to-one object moves with user-initiated foreign key manipulations](migration_11.html#change-3708)'
  id: totrans-2366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[涉及用户启动的外键操作的多对一对象移动的修复](migration_11.html#change-3708)'
- en: 'References: [#3708](https://www.sqlalchemy.org/trac/ticket/3708)'
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3708](https://www.sqlalchemy.org/trac/ticket/3708)
- en: '**[orm] [bug]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where deferred columns would inadvertently be set up for database
    load on the next object-wide unexpire, when the object were merged into the session
    with `session.merge(obj, load=False)`.
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了延迟列在对象被合并到会话中时不经意地设置为数据库加载的错误，该对象在下一个对象范围的未过期时，通过`session.merge(obj, load=False)`合并到会话中。
- en: 'References: [#3488](https://www.sqlalchemy.org/trac/ticket/3488)'
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3488](https://www.sqlalchemy.org/trac/ticket/3488)
- en: '**[orm] [bug] [mysql]**'
  id: totrans-2371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [mysql]**'
- en: Further continuing on the common MySQL exception case of a savepoint being cancelled
    first covered in [#2696](https://www.sqlalchemy.org/trac/ticket/2696), the failure
    mode in which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is placed when a SAVEPOINT vanishes before rollback has been improved to allow
    the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to still function outside of that savepoint. It is assumed that the savepoint
    operation failed and was cancelled.
  id: totrans-2372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步延续了最初在[#2696](https://www.sqlalchemy.org/trac/ticket/2696)中涵盖的常见 MySQL 异常情况，即在回滚之前
    SAVEPOINT 被取消的情况下，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的故障模式已经改进，以允许
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    仍然在那个 SAVEPOINT 之外正常运行。假设保存点操作失败并已取消。
- en: See also
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved Session state when a SAVEPOINT is cancelled by the database](migration_11.html#change-3680)'
  id: totrans-2374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[取消数据库 SAVEPOINT 时改进的会话状态](migration_11.html#change-3680)'
- en: 'References: [#3680](https://www.sqlalchemy.org/trac/ticket/3680)'
  id: totrans-2375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3680](https://www.sqlalchemy.org/trac/ticket/3680)
- en: '**[orm] [bug]**'
  id: totrans-2376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a newly inserted instance that is rolled back would still potentially
    cause persistence conflicts on the next transaction, because the instance would
    not be checked that it was expired. This fix will resolve a large class of cases
    that erroneously cause the “New instance with identity X conflicts with persistent
    instance Y” error.
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果回滚了一个新插入的实例，由于实例未检查是否已过期，因此仍可能在下一个事务中导致持久性冲突。此修复将解决大量错误地导致“新实例 X
    的标识与持久实例 Y 冲突”的错误的情况。
- en: See also
  id: totrans-2378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Erroneous “new instance X conflicts with persistent instance Y” flush errors
    fixed](migration_11.html#change-3677)'
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[修复了错误的“新实例 X 与持久实例 Y 冲突”的 flush 错误](migration_11.html#change-3677)'
- en: 'References: [#3677](https://www.sqlalchemy.org/trac/ticket/3677)'
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3677](https://www.sqlalchemy.org/trac/ticket/3677)
- en: '**[orm] [bug]**'
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An improvement to the workings of [`Query.correlate()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.correlate
    "sqlalchemy.orm.Query.correlate") such that when a “polymorphic” entity is used
    which represents a straight join of several tables, the statement will ensure
    that all the tables within the join are part of what’s correlating.
  id: totrans-2382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Query.correlate()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.correlate
    "sqlalchemy.orm.Query.correlate")的改进，当使用代表多个表直接连接的“多态”实体时，语句将确保连接中的所有表都是相关的。
- en: See also
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvements to the Query.correlate method with polymorphic entities](migration_11.html#change-3662)'
  id: totrans-2384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用多态实体改进 Query.correlate 方法](migration_11.html#change-3662)'
- en: 'References: [#3662](https://www.sqlalchemy.org/trac/ticket/3662)'
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3662](https://www.sqlalchemy.org/trac/ticket/3662)
- en: '**[orm] [bug]**'
  id: totrans-2386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug which would cause an eagerly loaded many-to-one attribute to not be
    loaded, if the joined eager load were from a row where the same entity were present
    multiple times, some calling for the attribute to be eagerly loaded and others
    not. The logic here is revised to take in the attribute even though a different
    loader path has handled the parent entity already.
  id: totrans-2387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，该错误可能导致急切加载的多对一属性未加载，如果连接的急切加载来自同一个实体在多个位置出现的行，则一些位置需要急切加载属性，而其他位置不需要。这里的逻辑已经修改，以便即使不同的加载路径已经处理了父实体，也要接受该属性。
- en: See also
  id: totrans-2388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joined eager loading where the same entity is present multiple times in one
    row](migration_11.html#change-3431)'
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在一行中多次出现相同实体的连接急切加载](migration_11.html#change-3431)'
- en: 'References: [#3431](https://www.sqlalchemy.org/trac/ticket/3431)'
  id: totrans-2390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3431](https://www.sqlalchemy.org/trac/ticket/3431)
- en: '**[orm] [bug]**'
  id: totrans-2391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A refinement to the logic which adds columns to the resulting SQL when [`Query.distinct()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.distinct
    "sqlalchemy.orm.Query.distinct") is combined with [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") such that columns which are already present will
    not be added a second time, even if they are labeled with a different name. Regardless
    of this change, the extra columns added to the SQL have never been returned in
    the final result, so this change only impacts the string form of the statement
    as well as its behavior when used in a Core execution context. Additionally, columns
    are no longer added when the DISTINCT ON format is used, provided the query is
    not wrapped inside a subquery due to joined eager loading.
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Query.distinct()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.distinct
    "sqlalchemy.orm.Query.distinct")与[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")组合时向生成的SQL添加列的逻辑进行了优化，以便已经存在的列不会被第二次添加，即使它们使用不同的名称标记。无论这种更改，SQL中添加的额外列从未在最终结果中返回，因此这种更改仅影响语句的字符串形式以及在核心执行上下文中使用时的行为。此外，当使用DISTINCT
    ON格式时，如果查询由于连接的急加载而不是包装在子查询中，则不再添加列。
- en: See also
  id: totrans-2393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Columns no longer added redundantly with DISTINCT + ORDER BY](migration_11.html#change-3641)'
  id: totrans-2394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用DISTINCT + ORDER BY时不再冗余添加列](migration_11.html#change-3641)'
- en: 'References: [#3641](https://www.sqlalchemy.org/trac/ticket/3641)'
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3641](https://www.sqlalchemy.org/trac/ticket/3641)
- en: '**[orm] [bug]**'
  id: totrans-2396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where two same-named relationships that refer to a base class and
    a concrete-inherited subclass would raise an error if those relationships were
    set up using “backref”, while setting up the identical configuration using relationship()
    instead with the conflicting names would succeed, as is allowed in the case of
    a concrete mapping.
  id: totrans-2397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个同名关系引用基类和具体继承子类时，如果这些关系是使用“backref”设置的，会引发错误的问题，而使用relationship()设置相同配置并使用冲突名称则会成功，这在具体映射的情况下是允许的。
- en: See also
  id: totrans-2398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named backrefs will not raise an error when applied to concrete inheritance
    subclasses](migration_11.html#change-3630)'
  id: totrans-2399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[应用于具体继承子类时，同名backrefs不会引发错误](migration_11.html#change-3630)'
- en: 'References: [#3630](https://www.sqlalchemy.org/trac/ticket/3630)'
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3630](https://www.sqlalchemy.org/trac/ticket/3630)
- en: '**[orm] [bug]**'
  id: totrans-2401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") method now tracks pending objects by primary key
    before emitting an INSERT, and merges distinct objects with duplicate primary
    keys together as they are encountered, which is essentially semi-deterministic
    at best. This behavior matches what happens already with persistent objects.
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    方法现在在发出INSERT之前通过主键跟踪待处理对象，并在遇到重复主键的不同对象时将其合并在一起，这在最好的情况下基本上是半确定性的。这种行为与持久对象的情况已经匹配。'
- en: See also
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.merge resolves pending conflicts the same as persistent](migration_11.html#change-3601)'
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.merge解决待处理冲突与持久对象相同](migration_11.html#change-3601)'
- en: 'References: [#3601](https://www.sqlalchemy.org/trac/ticket/3601)'
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3601](https://www.sqlalchemy.org/trac/ticket/3601)
- en: '**[orm] [bug]**'
  id: totrans-2406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the “single table inheritance” criteria would be added onto
    the end of a query in some inappropriate situations, such as when querying from
    an exists() of a single-inheritance subclass.
  id: totrans-2407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些不适当情况下，例如从单继承子类的exists()查询时，会将“单表继承”条件添加到查询末尾的错误。
- en: See also
  id: totrans-2408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Further Fixes to single-table inheritance querying](migration_11.html#change-3582)'
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对单表继承查询的进一步修复](migration_11.html#change-3582)'
- en: 'References: [#3582](https://www.sqlalchemy.org/trac/ticket/3582)'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3582](https://www.sqlalchemy.org/trac/ticket/3582)
- en: '**[orm] [bug]**'
  id: totrans-2411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a new type-level modifier [`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") which indicates to the ORM that
    a positive set of None should be persisted as the value NULL, instead of omitting
    the column from the INSERT statement. This feature is used both as part of the
    implementation for [#3514](https://www.sqlalchemy.org/trac/ticket/3514) as well
    as a standalone feature available on any type.
  id: totrans-2412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的类型级修饰符[`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")，指示ORM应将一组正值的None持久化为值NULL，而不是在INSERT语句中省略列。此功能既用作[#3514](https://www.sqlalchemy.org/trac/ticket/3514)的实现的一部分，也可作为任何类型上可用的独立功能。
- en: See also
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New options allowing explicit persistence of NULL over a default](migration_11.html#change-3250)'
  id: totrans-2414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新增选项允许显式持久化NULL而不是默认值](migration_11.html#change-3250)'
- en: 'References: [#3250](https://www.sqlalchemy.org/trac/ticket/3250)'
  id: totrans-2415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3250](https://www.sqlalchemy.org/trac/ticket/3250)
- en: '**[orm] [bug]**'
  id: totrans-2416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Internal calls to “bookkeeping” functions within [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") and related bulk methods have been
    scaled back to the extent that this functionality is not currently used, e.g.
    checks for column default values to be fetched after an INSERT or UPDATE statement.
  id: totrans-2417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")和相关批量方法中的“簿记”函数的内部调用已经减少到目前未使用此功能的程度，例如在INSERT或UPDATE语句之后获取列默认值的检查。
- en: 'References: [#3526](https://www.sqlalchemy.org/trac/ticket/3526)'
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3526](https://www.sqlalchemy.org/trac/ticket/3526)
- en: '**[orm] [bug] [postgresql]**'
  id: totrans-2419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [postgresql]**'
- en: Additional fixes have been made regarding the value of `None` in conjunction
    with the PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") type. When the [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag is left at its default value of `False`, the ORM
    will now correctly insert the JSON “‘null’” string into the column whenever the
    value on the ORM object is set to the value `None` or when the value `None` is
    used with [`Session.bulk_insert_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings"), **including** if the column has
    a default or server default on it.
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 类型中`None`值的额外修复已经完成。当[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")标志保持默认值`False`时，ORM现在将正确地在ORM对象上的值设置为`None`或在使用[`Session.bulk_insert_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")时将JSON“‘null’”字符串插入到列中，**包括**如果列上有默认值或服务器默认值。
- en: See also
  id: totrans-2421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[JSON “null” is inserted as expected with ORM operations, omitted when not
    present](migration_11.html#change-3514)'
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM操作中JSON的“null”如预期般插入，当不存在时被省略](migration_11.html#change-3514)'
- en: '[New options allowing explicit persistence of NULL over a default](migration_11.html#change-3250)'
  id: totrans-2423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新增选项允许显式持久化NULL而不是默认值](migration_11.html#change-3250)'
- en: 'References: [#3514](https://www.sqlalchemy.org/trac/ticket/3514)'
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3514](https://www.sqlalchemy.org/trac/ticket/3514)
- en: engine
  id: totrans-2425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added connection pool events `ConnectionEvents.close()`, `ConnectionEvents.detach()`,
    `ConnectionEvents.close_detached()`.
  id: totrans-2427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了连接池事件`ConnectionEvents.close()`，`ConnectionEvents.detach()`，`ConnectionEvents.close_detached()`。
- en: '**[engine] [feature]**'
  id: totrans-2428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: All string formatting of bound parameter sets and result rows for logging, exception,
    and `repr()` purposes now truncate very large scalar values within each collection,
    including an “N characters truncated” notation, similar to how the display for
    large multiple-parameter sets are themselves truncated.
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，用于日志记录、异常和`repr()`目的的所有绑定参数集和结果行的字符串格式化都会在每个集合中截断非常大的标量值，包括“N个字符被截断”的标记，类似于大型多参数集的显示本身被截断的方式。
- en: See also
  id: totrans-2430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Large parameter and row values are now truncated in logging and exception
    displays](migration_11.html#change-2837)'
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[日志和异常显示中现在截断大型参数和行值](migration_11.html#change-2837)'
- en: 'References: [#2837](https://www.sqlalchemy.org/trac/ticket/2837)'
  id: totrans-2432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2837](https://www.sqlalchemy.org/trac/ticket/2837)
- en: '**[engine] [feature]**'
  id: totrans-2433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Multi-tenancy schema translation for [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects is added. This supports the use case of an
    application that uses the same set of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in many schemas, such as schema-per-user. A
    new execution option [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") is added.
  id: totrans-2434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象添加了多租户模式翻译。这支持应用程序在许多模式中使用相同的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的用例，例如每用户一个模式的模式。增加了一个新的执行选项 [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")。
- en: See also
  id: totrans-2435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multi-Tenancy Schema Translation for Table objects](migration_11.html#change-2685)'
  id: totrans-2436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Table 对象的多租户模式翻译](migration_11.html#change-2685)'
- en: 'References: [#2685](https://www.sqlalchemy.org/trac/ticket/2685)'
  id: totrans-2437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2685](https://www.sqlalchemy.org/trac/ticket/2685)
- en: '**[engine] [feature]**'
  id: totrans-2438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [特性]**'
- en: Added a new entrypoint system to the engine to allow “plugins” to be stated
    in the query string for a URL. Custom plugins can be written which will be given
    the chance up front to alter and/or consume the engine’s URL and keyword arguments,
    and then at engine create time will be given the engine itself to allow additional
    modifications or event registration. Plugins are written as a subclass of [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin"); see that class for details.
  id: totrans-2439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在引擎中增加了一个新的入口系统，允许在 URL 的查询字符串中声明“插件”。可以编写自定义插件，这些插件将被提前给予修改和/或使用引擎的 URL 和关键字参数的机会，然后在引擎创建时将被给予引擎本身以允许额外的修改或事件注册。插件被编写为
    [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") 的子类；详见该类的详细信息。
- en: 'References: [#3536](https://www.sqlalchemy.org/trac/ticket/3536)'
  id: totrans-2440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3536](https://www.sqlalchemy.org/trac/ticket/3536)
- en: sql
  id: totrans-2441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added TABLESAMPLE support via the new [`FromClause.tablesample()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method and standalone function.
    Pull request courtesy Ilja Everilä.
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的 [`FromClause.tablesample()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") 方法和独立函数添加了 TABLESAMPLE 支持。感谢
    Ilja Everilä 的 Pull 请求。
- en: See also
  id: totrans-2444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for TABLESAMPLE](migration_11.html#change-3718)'
  id: totrans-2445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TABLESAMPLE 支持](migration_11.html#change-3718)'
- en: 'References: [#3718](https://www.sqlalchemy.org/trac/ticket/3718)'
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3718](https://www.sqlalchemy.org/trac/ticket/3718)
- en: '**[sql] [feature]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added support for ranges in window functions, using the [`over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.range_
    "sqlalchemy.sql.expression.over") and [`over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over") parameters.
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对窗口函数中范围的支持，使用 [`over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.range_
    "sqlalchemy.sql.expression.over") 和 [`over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over") 参数。
- en: See also
  id: totrans-2449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for RANGE and ROWS specification within window functions](migration_11.html#change-3049)'
  id: totrans-2450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[窗口函数内的 RANGE 和 ROWS 规范支持](migration_11.html#change-3049)'
- en: 'References: [#3049](https://www.sqlalchemy.org/trac/ticket/3049)'
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3049](https://www.sqlalchemy.org/trac/ticket/3049)
- en: '**[sql] [feature]**'
  id: totrans-2452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Implemented reflection of CHECK constraints for SQLite and PostgreSQL. This
    is available via the new inspector method [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") as well as when
    reflecting [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects in the form of [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") objects present in the constraints collection.
    Pull request courtesy Alex Grönholm.
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了 SQLite 和 PostgreSQL 的 CHECK 约束反射。通过新的检查器方法 [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") 以及在反映 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象时以 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 对象的形式存在于约束集合中。感谢 Alex Grönholm 的 Pull 请求。
- en: '**[sql] [feature]**'
  id: totrans-2454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: New [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") and [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") operators; pull
    request courtesy Sebastian Bank.
  id: totrans-2455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增 [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") 和 [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") 操作符；感谢 Sebastian
    Bank 提交的拉取请求。
- en: See also
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for IS DISTINCT FROM and IS NOT DISTINCT FROM](migration_11.html#change-is-distinct-from)'
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[IS DISTINCT FROM 和 IS NOT DISTINCT FROM 的支持](migration_11.html#change-is-distinct-from)'
- en: '**[sql] [feature]**'
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a hook in `DDLCompiler.visit_create_table()` called `DDLCompiler.create_table_suffix()`,
    allowing custom dialects to add keywords after the “CREATE TABLE” clause. Pull
    request courtesy Mark Sandan.
  id: totrans-2459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `DDLCompiler.visit_create_table()` 中添加了名为 `DDLCompiler.create_table_suffix()`
    的钩子，允许自定义方言在 “CREATE TABLE” 子句之后添加关键字。感谢 Mark Sandan 提交的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-2460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Negative integer indexes are now accommodated by rows returned from a `ResultProxy`.
    Pull request courtesy Emanuele Gaifas.
  id: totrans-2461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ResultProxy` 返回的行现在支持负整数索引。感谢 Emanuele Gaifas 提交的拉取请求。'
- en: See also
  id: totrans-2462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Negative integer indexes accommodated by Core result rows](migration_11.html#change-gh-231)'
  id: totrans-2463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心结果行可容纳负整数索引](migration_11.html#change-gh-231)'
- en: '**[sql] [feature]**'
  id: totrans-2464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added [`Select.lateral()`](../core/selectable.html#sqlalchemy.sql.expression.Select.lateral
    "sqlalchemy.sql.expression.Select.lateral") and related constructs to allow for
    the SQL standard LATERAL keyword, currently only supported by PostgreSQL.
  id: totrans-2465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加 [`Select.lateral()`](../core/selectable.html#sqlalchemy.sql.expression.Select.lateral
    "sqlalchemy.sql.expression.Select.lateral") 和相关构造，以支持 SQL 标准的 LATERAL 关键字，目前仅受
    PostgreSQL 支持。
- en: See also
  id: totrans-2466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for the SQL LATERAL keyword](migration_11.html#change-2857)'
  id: totrans-2467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQL LATERAL 关键字的支持](migration_11.html#change-2857)'
- en: 'References: [#2857](https://www.sqlalchemy.org/trac/ticket/2857)'
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2857](https://www.sqlalchemy.org/trac/ticket/2857)
- en: '**[sql] [feature]**'
  id: totrans-2469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for rendering “FULL OUTER JOIN” to both Core and ORM. Pull request
    courtesy Stefan Urbanek.
  id: totrans-2470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对 “FULL OUTER JOIN” 的渲染支持，包括 Core 和 ORM。感谢 Stefan Urbanek 提交的拉取请求。
- en: See also
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Core and ORM support for FULL OUTER JOIN](migration_11.html#change-1957)'
  id: totrans-2472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心和 ORM 对 FULL OUTER JOIN 的支持](migration_11.html#change-1957)'
- en: 'References: [#1957](https://www.sqlalchemy.org/trac/ticket/1957)'
  id: totrans-2473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1957](https://www.sqlalchemy.org/trac/ticket/1957)
- en: '**[sql] [feature]**'
  id: totrans-2474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: CTE functionality has been expanded to support all DML, allowing INSERT, UPDATE,
    and DELETE statements to both specify their own WITH clause, as well as for these
    statements themselves to be CTE expressions when they include a RETURNING clause.
  id: totrans-2475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CTE 功能已扩展以支持所有 DML，允许 INSERT、UPDATE 和 DELETE 语句指定自己的 WITH 子句，以及在这些语句包含 RETURNING
    子句时，这些语句本身也可以是 CTE 表达式。
- en: See also
  id: totrans-2476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CTE Support for INSERT, UPDATE, DELETE](migration_11.html#change-2551)'
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CTE 支持 INSERT、UPDATE、DELETE](migration_11.html#change-2551)'
- en: 'References: [#2551](https://www.sqlalchemy.org/trac/ticket/2551)'
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2551](https://www.sqlalchemy.org/trac/ticket/2551)
- en: '**[sql] [feature]**'
  id: totrans-2479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for PEP-435-style enumerated classes, namely Python 3’s `enum.Enum`
    class but also including compatible enumeration libraries, to the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype. The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype now also performs in-Python validation of incoming
    values, and adds an option to forego creating the CHECK constraint [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum"). Pull request courtesy Alex Grönholm.
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对 PEP-435 样式的枚举类的支持，包括 Python 3 的 `enum.Enum` 类，以及兼容的枚举库，到 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 数据类型中。[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 数据类型现在还在 Python 中对传入的值进行验证，并添加了一个选项来跳过创建 CHECK 约束 [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum"). 感谢 Alex Grönholm 提交的拉取请求。
- en: See also
  id: totrans-2481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for Python’s native enum type and compatible forms](migration_11.html#change-3292)'
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 Python 原生枚举类型及兼容形式的支持](migration_11.html#change-3292)'
- en: '[The Enum type now does in-Python validation of values](migration_11.html#change-3095)'
  id: totrans-2483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Enum 类型现在对值进行了在 Python 中的验证](migration_11.html#change-3095)'
- en: 'References: [#3095](https://www.sqlalchemy.org/trac/ticket/3095), [#3292](https://www.sqlalchemy.org/trac/ticket/3292)'
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3095](https://www.sqlalchemy.org/trac/ticket/3095), [#3292](https://www.sqlalchemy.org/trac/ticket/3292)
- en: '**[sql] [feature]**'
  id: totrans-2485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A deep improvement to the recently added [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method, and its interaction with
    result-row processing, now allows the columns passed to the method to be positionally
    matched with the result columns in the statement, rather than matching on name
    alone. The advantage to this includes that when linking a textual SQL statement
    to an ORM or Core table model, no system of labeling or de-duping of common column
    names needs to occur, which also means there’s no need to worry about how label
    names match to ORM columns and so-forth. In addition, the `ResultProxy` has been
    further enhanced to map column and string keys to a row with greater precision
    in some cases.
  id: totrans-2486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最近新增的 [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") 方法及其与结果行处理的交互得到了深度改进，现在允许该方法传递的列与语句中的结果列按位置匹配，而不是仅匹配名称。这样做的好处包括，在将文本
    SQL 语句链接到 ORM 或 Core 表模型时，无需进行常见列名称的标记或去重处理，这也意味着不需要担心标签名称与 ORM 列的匹配等问题。此外，`ResultProxy`
    在某些情况下进一步增强，以更精确地将列和字符串键映射到行。
- en: See also
  id: totrans-2487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[ResultSet column matching enhancements; positional column setup for textual
    SQL](migration_11.html#change-3501) - feature overview'
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ResultSet 列匹配增强；文本 SQL 的位置列设置](migration_11.html#change-3501) - 特性概述'
- en: '[TextClause.columns() will match columns positionally, not by name, when passed
    positionally](migration_11.html#behavior-change-3501) - backwards compatibility
    remarks'
  id: totrans-2489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TextClause.columns() 现在会按位置匹配列，而不是按名称匹配](migration_11.html#behavior-change-3501)
    - 向后兼容说明'
- en: 'References: [#3501](https://www.sqlalchemy.org/trac/ticket/3501)'
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3501](https://www.sqlalchemy.org/trac/ticket/3501)
- en: '**[sql] [feature]**'
  id: totrans-2491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new type to core [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON"). This is the base of the PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") type as well as that of the new [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON") type, so that a PG/MySQL-agnostic JSON column
    may be used. The type features basic index and path searching support.
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 核心新增了一个新类型 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")。这是
    PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 类型以及新的 [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON") 类型的基础，因此可以使用 PG/MySQL 通用的 JSON 列。该类型具有基本的索引和路径搜索支持。
- en: See also
  id: totrans-2493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[JSON support added to Core](migration_11.html#change-3619)'
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心添加了 JSON 支持](migration_11.html#change-3619)'
- en: 'References: [#3619](https://www.sqlalchemy.org/trac/ticket/3619)'
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3619](https://www.sqlalchemy.org/trac/ticket/3619)
- en: '**[sql] [feature]**'
  id: totrans-2496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for “set-aggregate” functions of the form `<function> WITHIN GROUP
    (ORDER BY <criteria>)`, using the method [`FunctionElement.within_group()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group"). A series of common set-aggregate
    functions with return types derived from the set have been added. This includes
    functions like [`percentile_cont`](../core/functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`dense_rank`](../core/functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") and others.
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“set-aggregate”函数的支持，格式为 `<function> WITHIN GROUP (ORDER BY <criteria>)`，使用
    [`FunctionElement.within_group()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") 方法。已添加了一系列常见的 set-aggregate
    函数，返回类型派生自集合。这包括诸如 [`percentile_cont`](../core/functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")、[`dense_rank`](../core/functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") 等函数。
- en: See also
  id: totrans-2498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[New Function features, “WITHIN GROUP”, array_agg and set aggregate functions](migration_11.html#change-3132)'
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新增函数特性，“WITHIN GROUP”、“array_agg” 和集合聚合函数](migration_11.html#change-3132)'
- en: 'References: [#1370](https://www.sqlalchemy.org/trac/ticket/1370)'
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1370](https://www.sqlalchemy.org/trac/ticket/1370)
- en: '**[sql] [feature] [postgresql]**'
  id: totrans-2501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature] [postgresql]**'
- en: Added support for the SQL-standard function [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg"), which automatically returns an [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") of the correct type and supports index
    / slice operations, as well as [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg"), which returns a [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") with additional comparison features. As
    arrays are only supported on PostgreSQL at the moment, only actually works on
    PostgreSQL. Also added a new construct [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") in support of PG’s “ORDER
    BY” extension.
  id: totrans-2502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对SQL标准函数[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")的支持，它会自动返回正确类型的[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")并支持索引/切片操作，以及[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg")，它返回一个带有额外比较功能的[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")。由于目前只有PostgreSQL支持数组，因此只能在PostgreSQL上实际运行。还添加了一个新的构造[`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by")以支持PG的“ORDER BY”扩展。
- en: See also
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Function features, “WITHIN GROUP”, array_agg and set aggregate functions](migration_11.html#change-3132)'
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新功能特性，“WITHIN GROUP”，array_agg和set聚合函数](migration_11.html#change-3132)'
- en: 'References: [#3132](https://www.sqlalchemy.org/trac/ticket/3132)'
  id: totrans-2505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3132](https://www.sqlalchemy.org/trac/ticket/3132)
- en: '**[sql] [feature]**'
  id: totrans-2506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new type to core [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"). This is the base of the PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type, and is now part of Core to begin
    supporting various SQL-standard array-supporting features including some functions
    and eventual support for native arrays on other databases that have an “array”
    concept, such as DB2 or Oracle. Additionally, new operators [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") have been added. These support not just array
    constructs on PostgreSQL, but also subqueries that are usable on MySQL (but sadly
    not on PostgreSQL).
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在核心中添加了一个新类型[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")。这是PostgreSQL
    [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型的基础，现在已经成为核心的一部分，开始支持各种支持SQL标准数组的功能，包括一些函数以及对其他具有“数组”概念的数据库（如DB2或Oracle）的原生数组的支持。此外，还添加了新的运算符[`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")和[`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")。这些不仅支持PostgreSQL上的数组构造，还支持可在MySQL上使用的子查询（但遗憾的是在PostgreSQL上不支持）。
- en: See also
  id: totrans-2508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Array support added to Core; new ANY and ALL operators](migration_11.html#change-3516)'
  id: totrans-2509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心添加了数组支持；新增ANY和ALL运算符](migration_11.html#change-3516)'
- en: 'References: [#3516](https://www.sqlalchemy.org/trac/ticket/3516)'
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3516](https://www.sqlalchemy.org/trac/ticket/3516)
- en: '**[sql] [change] [mysql]**'
  id: totrans-2511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change] [mysql]**'
- en: The system by which a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") considers itself to be an “auto increment” column
    has been changed, such that autoincrement is no longer implicitly enabled for
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that has a composite primary key. In order to accommodate being able to enable
    autoincrement for a composite PK member column while at the same time maintaining
    SQLAlchemy’s long standing behavior of enabling implicit autoincrement for a single
    integer primary key, a third state has been added to the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter `"auto"`, which is now the default.
  id: totrans-2512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    认为自己是“自增”列的系统已更改，因此不再为具有复合主键的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 隐式启用 autoincrement。为了能够为复合主键成员列启用自增，同时保持 SQLAlchemy
    长期以来启用单个整数主键的隐式自增的行为，已向 [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 参数添加了第三状态 `"auto"`，现在这是默认值。'
- en: See also
  id: totrans-2513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为复合主键列隐式启用 .autoincrement 指令](migration_11.html#change-3216)'
- en: '[No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)'
  id: totrans-2515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为具有 AUTO_INCREMENT 的复合主键生成隐式 KEY](migration_11.html#change-mysql-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: '**[sql] [bug]**'
  id: totrans-2517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '`FromClause.count()` is deprecated. This function makes use of an arbitrary
    column in the table and is not reliable; for Core use, `func.count()` should be
    preferred.'
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FromClause.count()` 已弃用。此函数使用表中的任意列，不可靠；对于核心使用，应优先使用 `func.count()`。'
- en: 'References: [#3724](https://www.sqlalchemy.org/trac/ticket/3724)'
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3724](https://www.sqlalchemy.org/trac/ticket/3724)
- en: '**[sql] [bug]**'
  id: totrans-2520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed an assertion that would raise somewhat inappropriately if a [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") were associated with a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is associated with a lower-case-t [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"); the association should be ignored for
    the purposes of associating the index with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个断言，如果 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    与一个小写的 [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") 关联，而该 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 又与一个 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联，则会不太恰当地引发；为了将索引与 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 关联起来，应忽略该关联。
- en: 'References: [#3616](https://www.sqlalchemy.org/trac/ticket/3616)'
  id: totrans-2522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3616](https://www.sqlalchemy.org/trac/ticket/3616)
- en: '**[sql] [bug]**'
  id: totrans-2523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") construct is now a fully fledged Core
    expression element which is late-evaluated at compile time. Previously, the function
    was only a conversion function which would handle different expression inputs
    by returning either a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") of a column-oriented expression or a copy of
    a given [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object, which in particular prevented
    the operation from being logically maintained when an ORM-level expression transformation
    would convert a column to a bound parameter (e.g. for lazy loading).
  id: totrans-2524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") 构造现在是一个完全成熟的核心表达式元素，在编译时进行延迟评估。先前，该函数只是一个转换函数，通过返回一个
    [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    或列定向表达式的复制 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象，处理不同的表达式输入，特别是当 ORM 级别的表达式转换将列转换为绑定参数时（例如用于惰性加载），这会阻止该操作在逻辑上保持不变。'
- en: See also
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The type_coerce function is now a persistent SQL element](migration_11.html#change-3531)'
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[type_coerce 函数现在是持久的 SQL 元素](migration_11.html#change-3531)'
- en: 'References: [#3531](https://www.sqlalchemy.org/trac/ticket/3531)'
  id: totrans-2527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3531](https://www.sqlalchemy.org/trac/ticket/3531)
- en: '**[sql] [bug]**'
  id: totrans-2528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") type extender will now work in conjunction with
    a [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    implementation, typically [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") with regards to ensuring that the per-table events
    are propagated from the implementation type to the outer type. These events are
    used to ensure that the constraints or PostgreSQL types (e.g. ENUM) are correctly
    created (and possibly dropped) along with the parent table.
  id: totrans-2529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类型扩展器将与 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") 实现一起工作，通常是 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 或 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，以确保从实现类型传播到外部类型的每个表事件。这些事件用于确保约束或 PostgreSQL 类型（例如
    ENUM）与父表一起正确创建（可能删除）。
- en: See also
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[TypeDecorator now works with Enum, Boolean, “schema” types automatically](migration_11.html#change-2919)'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TypeDecorator 现在自动与 Enum、Boolean、“schema”类型配合工作](migration_11.html#change-2919)'
- en: 'References: [#2919](https://www.sqlalchemy.org/trac/ticket/2919)'
  id: totrans-2532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2919](https://www.sqlalchemy.org/trac/ticket/2919)
- en: '**[sql] [bug]**'
  id: totrans-2533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavior of the [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union
    "sqlalchemy.sql.expression.union") construct and related constructs such as [`Query.union()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.union
    "sqlalchemy.orm.Query.union") now handle the case where the embedded SELECT statements
    need to be parenthesized due to the fact that they include LIMIT, OFFSET and/or
    ORDER BY. These queries **do not work on SQLite**, and will fail on that backend
    as they did before, but should now work on all other backends.
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    构造和相关构造的行为，例如 [`Query.union()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.union
    "sqlalchemy.orm.Query.union") 现在处理嵌入的 SELECT 语句需要括号的情况，因为它们包含 LIMIT、OFFSET 和/或
    ORDER BY。这些查询在 SQLite 上**不适用**，并且在该后端上像以前一样失败，但现在应该在所有其他后端上工作。'
- en: See also
  id: totrans-2535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[A UNION or similar of SELECTs with LIMIT/OFFSET/ORDER BY now parenthesizes
    the embedded selects](migration_11.html#change-2528)'
  id: totrans-2536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[UNION 或类似的 SELECT 使用 LIMIT/OFFSET/ORDER BY 现在会给嵌入式 SELECT 添加括号](migration_11.html#change-2528)'
- en: 'References: [#2528](https://www.sqlalchemy.org/trac/ticket/2528)'
  id: totrans-2537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2528](https://www.sqlalchemy.org/trac/ticket/2528)
- en: schema
  id: totrans-2538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [enhancement]**'
  id: totrans-2539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [enhancement]**'
- en: The default generation functions passed to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are now run through “update_wrapper”, or an
    equivalent function if a callable non-function is passed, so that introspection
    tools preserve the name and docstring of the wrapped function. Pull request courtesy
    hsum.
  id: totrans-2540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，传递给 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的默认生成函数现在通过“update_wrapper”或等效的函数运行，如果传递的是一个可调用但不是函数的对象，以便内省工具保留包装函数的名称和文档字符串。拉取请求由
    hsum 提供。
- en: postgresql
  id: totrans-2541
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL’s INSERT..ON CONFLICT using a new PostgreSQL-specific
    [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.dml.Insert")
    object. Pull request and extensive efforts here by Robin Thomas.
  id: totrans-2543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 的 INSERT..ON CONFLICT 的支持，使用了一个新的 PostgreSQL 特定的 [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.dml.Insert") 对象。拉取请求和 Robin Thomas 的大量工作。
- en: See also
  id: totrans-2544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[Support for INSERT..ON CONFLICT (DO UPDATE | DO NOTHING)](migration_11.html#change-3529)'
  id: totrans-2545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持 INSERT..ON CONFLICT (DO UPDATE | DO NOTHING)](migration_11.html#change-3529)'
- en: 'References: [#3529](https://www.sqlalchemy.org/trac/ticket/3529)'
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3529](https://www.sqlalchemy.org/trac/ticket/3529)
- en: '**[postgresql] [feature]**'
  id: totrans-2547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: The DDL for DROP INDEX will emit “CONCURRENTLY” if the `postgresql_concurrently`
    flag is set upon the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") and if the database in use is detected as PostgreSQL
    version 9.2 or greater. For CREATE INDEX, database version detection is also added
    which will omit the clause if PG version is less than 8.2\. Pull request courtesy
    Iuri de Silvio.
  id: totrans-2548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    上设置了 `postgresql_concurrently` 标志，并且检测到正在使用的数据库为 PostgreSQL 版本 9.2 或更高，则 DROP
    INDEX 的 DDL 将发出 “CONCURRENTLY”。对于 CREATE INDEX，还添加了数据库版本检测，如果 PG 版本小于 8.2，则将省略该子句。感谢
    Iuri de Silvio 的 Pull request。
- en: '**[postgresql] [feature]**'
  id: totrans-2549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added new parameter `PGInspector.get_view_names.include`, allowing specification
    for what kinds of views should be returned. Currently “plain” and “materialized”
    views are included. Pull request courtesy Sebastian Bank.
  id: totrans-2550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 `PGInspector.get_view_names.include`，允许指定应返回哪种视图。目前包括 “plain” 和 “materialized”
    视图。感谢 Sebastian Bank 的 Pull request。
- en: 'References: [#3588](https://www.sqlalchemy.org/trac/ticket/3588)'
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3588](https://www.sqlalchemy.org/trac/ticket/3588)
- en: '**[postgresql] [feature]**'
  id: totrans-2552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added `postgresql_tablespace` as an argument to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") to allow specification of TABLESPACE for an index in
    PostgreSQL. Complements the same-named parameter on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Benjamin Bertrand.
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 `postgresql_tablespace` 作为 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 的参数，允许在 PostgreSQL 中为索引指定 TABLESPACE。与 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 上的同名参数相辅相成。感谢 Benjamin Bertrand 的 Pull request。
- en: 'References: [#3720](https://www.sqlalchemy.org/trac/ticket/3720)'
  id: totrans-2554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3720](https://www.sqlalchemy.org/trac/ticket/3720)
- en: '**[postgresql] [feature]**'
  id: totrans-2555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added new parameter [`GenerativeSelect.with_for_update.key_share`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.key_share
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"), which will render
    the `FOR NO KEY UPDATE` version of `FOR UPDATE` and `FOR KEY SHARE` instead of
    `FOR SHARE` on the PostgreSQL backend. Pull request courtesy Sergey Skopin.
  id: totrans-2556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 [`GenerativeSelect.with_for_update.key_share`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.key_share
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")，它将在 PostgreSQL 后端上呈现
    `FOR NO KEY UPDATE` 版本的 `FOR UPDATE` 和 `FOR KEY SHARE`，而不是 `FOR SHARE`。感谢 Sergey
    Skopin 的 Pull request。
- en: '**[postgresql] [feature] [oracle]**'
  id: totrans-2557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能] [oracle]**'
- en: Added new parameter [`GenerativeSelect.with_for_update.skip_locked`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.skip_locked
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"), which will render
    the `SKIP LOCKED` phrase for a `FOR UPDATE` or `FOR SHARE` lock on the PostgreSQL
    and Oracle backends. Pull request courtesy Jack Zhou.
  id: totrans-2558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 [`GenerativeSelect.with_for_update.skip_locked`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.skip_locked
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")，它将在 PostgreSQL 和
    Oracle 后端上为 `FOR UPDATE` 或 `FOR SHARE` 锁呈现 `SKIP LOCKED` 短语。感谢 Jack Zhou 的 Pull
    request。
- en: '**[postgresql] [feature]**'
  id: totrans-2559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added a new dialect for the PyGreSQL PostgreSQL dialect. Thanks to Christoph
    Zwerschke and Kaolin Imago Fire for their efforts.
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PyGreSQL PostgreSQL 方言的新方言。感谢 Christoph Zwerschke 和 Kaolin Imago Fire 的努力。
- en: '**[postgresql] [feature]**'
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added a new constant `JSON.NULL`, indicating that the JSON NULL value should
    be used for a value regardless of other settings.
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的常量 `JSON.NULL`，表示应该使用 JSON NULL 值作为值，而不考虑其他设置。
- en: See also
  id: totrans-2563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New JSON.NULL Constant Added](migration_11.html#change-3514-jsonnull)'
  id: totrans-2564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新增 JSON.NULL 常量](migration_11.html#change-3514-jsonnull)'
- en: 'References: [#3514](https://www.sqlalchemy.org/trac/ticket/3514)'
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3514](https://www.sqlalchemy.org/trac/ticket/3514)
- en: '**[postgresql] [change]**'
  id: totrans-2566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [变更]**'
- en: The `sqlalchemy.dialects.postgres` module, long deprecated, is removed; this
    has emitted a warning for many years and projects should be calling upon `sqlalchemy.dialects.postgresql`.
    Engine URLs of the form `postgres://` will still continue to function, however.
  id: totrans-2567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sqlalchemy.dialects.postgres` 模块，长期弃用，已被移除；多年来一直发出警告，项目应该调用 `sqlalchemy.dialects.postgresql`。然而，形式为
    `postgres://` 的 Engine URLs 仍将继续运行。'
- en: '**[postgresql] [bug]**'
  id: totrans-2568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added support for reflecting the source of materialized views to the PostgreSQL
    version of the [`Inspector.get_view_definition()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_definition
    "sqlalchemy.engine.reflection.Inspector.get_view_definition") method.
  id: totrans-2569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对将物化视图源反映到PostgreSQL版本的[`Inspector.get_view_definition()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_definition
    "sqlalchemy.engine.reflection.Inspector.get_view_definition")方法的支持。
- en: 'References: [#3587](https://www.sqlalchemy.org/trac/ticket/3587)'
  id: totrans-2570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3587](https://www.sqlalchemy.org/trac/ticket/3587)
- en: '**[postgresql] [bug]**'
  id: totrans-2571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The use of a [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") object that refers to a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") subtype will now emit the expected “CREATE
    TYPE” and “DROP TYPE” DDL when the type is used within a “CREATE TABLE” or “DROP
    TABLE”.
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用引用[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")对象，指向[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")或[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")子类型时，现在在类型在“CREATE TABLE”或“DROP TABLE”中使用时，将会发出预期的“CREATE
    TYPE”和“DROP TYPE” DDL。
- en: See also
  id: totrans-2573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ARRAY with ENUM will now emit CREATE TYPE for the ENUM](migration_11.html#change-2729)'
  id: totrans-2574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ARRAY with ENUM will now emit CREATE TYPE for the ENUM](migration_11.html#change-2729)'
- en: 'References: [#2729](https://www.sqlalchemy.org/trac/ticket/2729)'
  id: totrans-2575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2729](https://www.sqlalchemy.org/trac/ticket/2729)
- en: '**[postgresql] [bug]**'
  id: totrans-2576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The “hashable” flag on special datatypes such as [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY"), [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") is now set to False, which allows these
    types to be fetchable in ORM queries that include entities within the row.
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特殊数据类型（如[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")、[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")和[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")）上的“可哈希”标志现在设置为False，这允许在包含行内实体的ORM查询中获取这些类型。
- en: See also
  id: totrans-2578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changes regarding “unhashable” types, impacts deduping of ORM rows](migration_11.html#change-3499)'
  id: totrans-2579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关于“不可哈希”类型的更改，影响ORM行的去重](migration_11.html#change-3499)'
- en: '[ARRAY and JSON types now correctly specify “unhashable”](migration_11.html#change-3499-postgresql)'
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ARRAY and JSON types now correctly specify “unhashable”](migration_11.html#change-3499-postgresql)'
- en: 'References: [#3499](https://www.sqlalchemy.org/trac/ticket/3499)'
  id: totrans-2581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3499](https://www.sqlalchemy.org/trac/ticket/3499)
- en: '**[postgresql] [bug]**'
  id: totrans-2582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type now supports multidimensional indexed
    access, e.g. expressions such as `somecol[5][6]` without any need for explicit
    casts or type coercions, provided that the [`ARRAY.dimensions`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.params.dimensions
    "sqlalchemy.dialects.postgresql.ARRAY") parameter is set to the desired number
    of dimensions.
  id: totrans-2583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 类型现在支持多维索引访问，例如表达式`somecol[5][6]`，无需进行显式转换或类型强制，只要[`ARRAY.dimensions`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.params.dimensions
    "sqlalchemy.dialects.postgresql.ARRAY")参数设置为所需的维数即可。
- en: See also
  id: totrans-2584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-2585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
- en: 'References: [#3487](https://www.sqlalchemy.org/trac/ticket/3487)'
  id: totrans-2586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3487](https://www.sqlalchemy.org/trac/ticket/3487)
- en: '**[postgresql] [bug]**'
  id: totrans-2587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The return type for the [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") when using indexed access has been fixed
    to work like PostgreSQL itself, and returns an expression that itself is of type
    [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")
    or [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Previously, the accessor would return
    [`NullType`](../core/type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType")
    which disallowed subsequent JSON-like operators to be used.
  id: totrans-2588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用索引访问时，[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 和 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 的返回类型已经修复，使其与 PostgreSQL 自身一样工作，并返回一个表达式，该表达式本身是
    [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")
    或 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    类型。以前，访问器会返回 [`NullType`](../core/type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType")，这会禁止后续使用类似
    JSON 的操作符。
- en: See also
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-2590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[已从数组、JSON、HSTORE的索引访问中正确确定SQL类型](migration_11.html#change-3503)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-2591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: '**[postgresql] [bug]**'
  id: totrans-2592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON"), [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") and [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") datatypes now allow full control over
    the return type from an indexed textual access operation, either `column[someindex].astext`
    for a JSON type or `column[someindex]` for an HSTORE type, via the [`JSON.astext_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.astext_type
    "sqlalchemy.dialects.postgresql.JSON") and [`HSTORE.text_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE.params.text_type
    "sqlalchemy.dialects.postgresql.HSTORE") parameters.
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")、[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 和 [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 数据类型现在允许通过 [`JSON.astext_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.astext_type
    "sqlalchemy.dialects.postgresql.JSON") 和 [`HSTORE.text_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE.params.text_type
    "sqlalchemy.dialects.postgresql.HSTORE") 参数对从索引文本访问操作的返回类型进行完全控制，例如 JSON 类型为 `column[someindex].astext`
    或 HSTORE 类型为 `column[someindex]`。'
- en: See also
  id: totrans-2594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[已从数组、JSON、HSTORE的索引访问中正确确定SQL类型](migration_11.html#change-3503)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: '**[postgresql] [bug]**'
  id: totrans-2597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") modifier no longer calls
    upon [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") implicitly, as PG’s JSON/JSONB
    types allow cross-casting between each other as well. Code that makes use of [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") on JSON indexed access, e.g. `col[someindex].cast(Integer)`,
    will need to be changed to call [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") explicitly.
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") 修饰符不再隐式调用 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")，因为 PG 的 JSON/JSONB 类型允许彼此之间的交叉转换。对
    JSON 索引访问上使用 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 的代码，例如 `col[someindex].cast(Integer)`，需要显式调用
    [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext")。'
- en: See also
  id: totrans-2599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[The JSON cast() operation now requires .astext is called explicitly](migration_11.html#change-3503-cast)'
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[现在对JSON cast()操作需要显式调用.astext](migration_11.html#change-3503-cast)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: mysql
  id: totrans-2602
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added support for “autocommit” on MySQL drivers, via the AUTOCOMMIT isolation
    level setting. Pull request courtesy Roman Podoliaka.
  id: totrans-2604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过AUTOCOMMIT隔离级别设置，为MySQL驱动程序添加了对“autocommit”的支持。感谢Roman Podoliaka的拉取请求。
- en: See also
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added support for AUTOCOMMIT “isolation level”](migration_11.html#change-3332)'
  id: totrans-2606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[增加了对AUTOCOMMIT“隔离级别”的支持](migration_11.html#change-3332)'
- en: 'References: [#3332](https://www.sqlalchemy.org/trac/ticket/3332)'
  id: totrans-2607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3332](https://www.sqlalchemy.org/trac/ticket/3332)
- en: '**[mysql] [feature]**'
  id: totrans-2608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    for MySQL 5.7\. The JSON type provides persistence of JSON values in MySQL as
    well as basic operator support of “getitem” and “getpath”, making use of the `JSON_EXTRACT`
    function in order to refer to individual paths in a JSON structure.
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为MySQL 5.7添加了[`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")。JSON类型在MySQL中提供了JSON值的持久性以及“getitem”和“getpath”的基本操作支持，利用`JSON_EXTRACT`函数来引用JSON结构中的单个路径。
- en: See also
  id: totrans-2610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL JSON Support](migration_11.html#change-3547)'
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL JSON支持](migration_11.html#change-3547)'
- en: 'References: [#3547](https://www.sqlalchemy.org/trac/ticket/3547)'
  id: totrans-2612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3547](https://www.sqlalchemy.org/trac/ticket/3547)
- en: '**[mysql] [change]**'
  id: totrans-2613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [更改]**'
- en: The MySQL dialect no longer generates an extra “KEY” directive when generating
    CREATE TABLE DDL for a table using InnoDB with a composite primary key with AUTO_INCREMENT
    on a column that isn’t the first column; to overcome InnoDB’s limitation here,
    the PRIMARY KEY constraint is now generated with the AUTO_INCREMENT column placed
    first in the list of columns.
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用InnoDB在具有复合主键的表上生成CREATE TABLE DDL时，MySQL方言不再生成额外的“KEY”指令；为了克服InnoDB在此处的限制，现在会在列的列表中首先放置AUTO_INCREMENT列来生成PRIMARY
    KEY约束。
- en: See also
  id: totrans-2615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)'
  id: totrans-2616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为具有AUTO_INCREMENT的复合主键生成隐式KEY](migration_11.html#change-mysql-3216)'
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-2617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为复合主键列隐式启用.autoincrement指令](migration_11.html#change-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: sqlite
  id: totrans-2619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-2620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [功能]**'
- en: The SQLite dialect now reflects ON UPDATE and ON DELETE phrases within foreign
    key constraints. Pull request courtesy Michal Petrucha.
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言现在反映了外键约束中的ON UPDATE和ON DELETE短语。感谢Michal Petrucha的拉取请求。
- en: '**[sqlite] [feature]**'
  id: totrans-2622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [功能]**'
- en: The SQLite dialect now reflects the names of primary key constraints. Pull request
    courtesy Diana Clarke.
  id: totrans-2623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言现在反映了主键约束的名称。感谢Diana Clarke的拉取请求。
- en: See also
  id: totrans-2624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflection of the name of PRIMARY KEY constraints](migration_11.html#change-3629)'
  id: totrans-2625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[反映主键约束名称](migration_11.html#change-3629)'
- en: 'References: [#3629](https://www.sqlalchemy.org/trac/ticket/3629)'
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3629](https://www.sqlalchemy.org/trac/ticket/3629)
- en: '**[sqlite] [change]**'
  id: totrans-2627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [更改]**'
- en: Added support to the SQLite dialect for the [`Inspector.get_schema_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_schema_names
    "sqlalchemy.engine.reflection.Inspector.get_schema_names") method to work with
    SQLite; pull request courtesy Brian Van Klaveren. Also repaired support for creation
    of indexes with schemas as well as reflection of foreign key constraints in schema-bound
    tables.
  id: totrans-2628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLite方言添加了对[`Inspector.get_schema_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_schema_names
    "sqlalchemy.engine.reflection.Inspector.get_schema_names")方法的支持，以便与SQLite一起使用；感谢Brian
    Van Klaveren的拉取请求。还修复了在具有模式的索引创建以及模式绑定表中外键约束的反射支持。
- en: See also
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved Support for Remote Schemas](migration_11.html#change-sqlite-schemas)'
  id: totrans-2630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[远程模式的改进支持](migration_11.html#change-sqlite-schemas)'
- en: '**[sqlite] [bug]**'
  id: totrans-2631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: The workaround for right-nested joins on SQLite, where they are rewritten as
    subqueries in order to work around SQLite’s lack of support for this syntax, is
    lifted when SQLite version 3.7.16 or greater is detected.
  id: totrans-2632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到SQLite版本3.7.16或更高版本时，对SQLite中右嵌套连接的解决方法被取消。
- en: See also
  id: totrans-2633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Right-nested join workaround lifted for SQLite version 3.7.16](migration_11.html#change-3634)'
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite版本3.7.16解决了右嵌套连接的问题](migration_11.html#change-3634)'
- en: 'References: [#3634](https://www.sqlalchemy.org/trac/ticket/3634)'
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3634](https://www.sqlalchemy.org/trac/ticket/3634)
- en: '**[sqlite] [bug]**'
  id: totrans-2636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: The workaround for SQLite’s unexpected delivery of column names as `tablename.columnname`
    for some kinds of queries is now disabled when SQLite version 3.10.0 or greater
    is detected.
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到 SQLite 版本为 3.10.0 或更高版本时，对于某些类型的查询，SQLite 意外地将列名作为 `tablename.columnname`
    传送的解决方法现已禁用。
- en: See also
  id: totrans-2638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dotted column names workaround lifted for SQLite version 3.10.0](migration_11.html#change-3633)'
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[针对 SQLite 版本 3.10.0 解除了点分列名的解决方法](migration_11.html#change-3633)'
- en: 'References: [#3633](https://www.sqlalchemy.org/trac/ticket/3633)'
  id: totrans-2640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3633](https://www.sqlalchemy.org/trac/ticket/3633)
- en: mssql
  id: totrans-2641
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [特性]**'
- en: The `mssql_clustered` flag available on [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") now defaults to `None`, and can be set to False which
    will render the NONCLUSTERED keyword in particular for a primary key, allowing
    a different index to be used as “clustered”. Pull request courtesy Saulius Žemaitaitis.
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 上现有的 `mssql_clustered` 标志现在默认为 `None`，并且可以设置为 False，这将为主键特别渲染
    NONCLUSTERED 关键字，允许使用不同的索引作为“clustered”。 拉取请求由 Saulius Žemaitaitis 提供。'
- en: '**[mssql] [feature]**'
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [特性]**'
- en: Added basic isolation level support to the SQL Server dialects via [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") and [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameters.
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 和 [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数，向 SQL Server 方言添加了基本的隔离级别支持。
- en: See also
  id: totrans-2646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added transaction isolation level support for SQL Server](migration_11.html#change-3534)'
  id: totrans-2647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为 SQL Server 添加了事务隔离级别支持](migration_11.html#change-3534)'
- en: 'References: [#3534](https://www.sqlalchemy.org/trac/ticket/3534)'
  id: totrans-2648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3534](https://www.sqlalchemy.org/trac/ticket/3534)
- en: '**[mssql] [change]**'
  id: totrans-2649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [更改]**'
- en: The `legacy_schema_aliasing` flag, introduced in version 1.0.5 as part of [#3424](https://www.sqlalchemy.org/trac/ticket/3424)
    to allow disabling of the MSSQL dialect’s attempts to create aliases for schema-qualified
    tables, now defaults to False; the old behavior is now disabled unless explicitly
    turned on.
  id: totrans-2650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`legacy_schema_aliasing` 标志，作为版本 1.0.5 的一部分引入，以允许禁用 MSSQL 方言尝试为模式合格的表创建别名，现在默认为
    False； 旧的行为现在已禁用，除非显式打开。'
- en: See also
  id: totrans-2651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The legacy_schema_aliasing flag is now set to False](migration_11.html#change-3434)'
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[legacy_schema_aliasing 标志现在设置为 False](migration_11.html#change-3434)'
- en: 'References: [#3434](https://www.sqlalchemy.org/trac/ticket/3434)'
  id: totrans-2653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3434](https://www.sqlalchemy.org/trac/ticket/3434)
- en: '**[mssql] [bug]**'
  id: totrans-2654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Adjustments to the mxODBC dialect to make use of the `BinaryNull` symbol when
    appropriate in conjunction with the `VARBINARY` data type. Pull request courtesy
    Sheila Allen.
  id: totrans-2655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整 mxODBC 方言以在适当情况下使用 `BinaryNull` 符号与 `VARBINARY` 数据类型配合使用。 拉取请求由 Sheila Allen
    提供。
- en: '**[mssql] [bug]**'
  id: totrans-2656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed issue where the SQL Server dialect would reflect a string- or other variable-length
    column type with unbounded length by assigning the token `"max"` to the length
    attribute of the string. While using the `"max"` token explicitly is supported
    by the SQL Server dialect, it isn’t part of the normal contract of the base string
    types, and instead the length should just be left as None. The dialect now assigns
    the length to None on reflection of the type so that the type behaves normally
    in other contexts.
  id: totrans-2657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言反映字符串或其他可变长度列类型的问题，通过将 token `"max"` 分配给字符串的长度属性来分配无界长度。 虽然
    SQL Server 方言显式支持使用 `"max"` token，但它不是基本字符串类型的正常约定的一部分，相反，长度应该保持为 None。 方言现在在类型反映时将长度分配为
    None，以便该类型在其他上下文中正常工作。
- en: See also
  id: totrans-2658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[String / varlength types no longer represent “max” explicitly on reflection](migration_11.html#change-3504)'
  id: totrans-2659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[字符串 / 可变长度类型不再在反射时明确表示“max”](migration_11.html#change-3504)'
- en: 'References: [#3504](https://www.sqlalchemy.org/trac/ticket/3504)'
  id: totrans-2660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3504](https://www.sqlalchemy.org/trac/ticket/3504)
- en: misc
  id: totrans-2661
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[feature] [ext]**'
  id: totrans-2662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet") and [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") helper classes to the [Mutation Tracking](../orm/extensions/mutable.html)
    extension. Pull request courtesy Jeong YunWon.
  id: totrans-2663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet") 和 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 辅助类到 [Mutation Tracking](../orm/extensions/mutable.html)
    扩展。拉取请求由 Jeong YunWon 提供。
- en: 'References: [#3297](https://www.sqlalchemy.org/trac/ticket/3297)'
  id: totrans-2664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3297](https://www.sqlalchemy.org/trac/ticket/3297)
- en: '**[bug] [ext]**'
  id: totrans-2665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The docstring specified on a hybrid property or method is now honored at the
    class level, allowing it to work with tools like Sphinx autodoc. The mechanics
    here necessarily involve some wrapping of expressions to occur for hybrid properties,
    which may cause them to appear differently using introspection.
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在混合属性或方法上指定的文档字符串将在类级别上受到尊重，使其能够与 Sphinx autodoc 等工具一起使用。这里的机制必然涉及一些对混合属性进行包装的表达式，这可能会导致它们在内省时显示出不同的外观。
- en: See also
  id: totrans-2667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Hybrid properties and methods now propagate the docstring as well as .info](migration_11.html#change-3653)'
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[混合属性和方法现在也传播文档字符串以及.info](migration_11.html#change-3653)'
- en: 'References: [#3653](https://www.sqlalchemy.org/trac/ticket/3653)'
  id: totrans-2669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3653](https://www.sqlalchemy.org/trac/ticket/3653)
- en: '**[bug] [sybase]**'
  id: totrans-2670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [sybase]**'
- en: The unsupported Sybase dialect now raises `NotImplementedError` when attempting
    to compile a query that includes “offset”; Sybase has no straightforward “offset”
    feature.
  id: totrans-2671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不支持的 Sybase 方言现在在尝试编译包含“偏移”的查询时会引发 `NotImplementedError`；Sybase 没有直接的“偏移”功能。
- en: 'References: [#2278](https://www.sqlalchemy.org/trac/ticket/2278)'
  id: totrans-2672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2278](https://www.sqlalchemy.org/trac/ticket/2278)
- en: orm
  id: totrans-2673
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature] [ext]**'
  id: totrans-2674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [ext]**'
- en: A new ORM extension [Indexable](../orm/extensions/indexable.html) is added,
    which allows construction of Python attributes which refer to specific elements
    of “indexed” structures such as arrays and JSON fields. Pull request courtesy
    Jeong YunWon.
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 ORM 扩展 [Indexable](../orm/extensions/indexable.html)，它允许构建指向“索引”结构特定元素的
    Python 属性，如数组和 JSON 字段。拉取请求由 Jeong YunWon 提供。
- en: See also
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Indexable ORM extension](migration_11.html#feature-indexable)'
  id: totrans-2677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的可索引 ORM 扩展](migration_11.html#feature-indexable)'
- en: '**[orm] [feature]**'
  id: totrans-2678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new flag [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings") which allows an ORM bulk INSERT
    to occur with NULL values rendered; this bypasses server side defaults, however
    allows all statements to be formed with the same set of columns, allowing them
    to be batched. Pull request courtesy Tobias Sauerwein.
  id: totrans-2679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的标志 [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings")，允许 ORM 批量插入发生时渲染 NULL 值；这将绕过服务器端默认值，但允许所有语句使用相同的列集形成，从而使它们能够被批处理。拉取请求由
    Tobias Sauerwein 提供。
- en: '**[orm] [feature]**'
  id: totrans-2680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event [`AttributeEvents.init_scalar()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar"), as well as a new example suite
    illustrating its use. This event can be used to provide a Core-generated default
    value to a Python-side attribute before the object is persisted.
  id: totrans-2681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件 [`AttributeEvents.init_scalar()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar")，以及一个新的示例套件，说明了其用法。此事件可用于在对象持久化之前为
    Python 端属性提供由 Core 生成的默认值。
- en: See also
  id: totrans-2682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New init_scalar() event intercepts default values at ORM level](migration_11.html#change-1311)'
  id: totrans-2683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的 init_scalar() 事件拦截 ORM 级别的默认值](migration_11.html#change-1311)'
- en: 'References: [#1311](https://www.sqlalchemy.org/trac/ticket/1311)'
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1311](https://www.sqlalchemy.org/trac/ticket/1311)
- en: '**[orm] [feature]**'
  id: totrans-2685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added [`AutomapBase.prepare.schema`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.schema
    "sqlalchemy.ext.automap.AutomapBase.prepare") to the [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") method, to indicate which schema
    tables should be reflected from if not the default schema. Pull request courtesy
    Josh Marlow.
  id: totrans-2686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 方法中新增了 [`AutomapBase.prepare.schema`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.schema
    "sqlalchemy.ext.automap.AutomapBase.prepare") 参数，指示如果不是默认模式，则应该从哪个模式表反映。拉取请求由
    Josh Marlow 提供。
- en: '**[orm] [feature]**'
  id: totrans-2687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new parameter `mapper.passive_deletes` to available mapper options. This
    allows a DELETE to proceed for a joined-table inheritance mapping against the
    base table only, while allowing for ON DELETE CASCADE to handle deleting the row
    from the subclass tables.
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在可用的映射器选项中新增了新参数 `mapper.passive_deletes`。这允许对基表进行联合表继承映射的 DELETE 操作，同时允许 ON
    DELETE CASCADE 处理从子类表删除行。
- en: See also
  id: totrans-2689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[passive_deletes feature for joined-inheritance mappings](migration_11.html#change-2349)'
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[联合继承映射的被动删除功能](migration_11.html#change-2349)'
- en: 'References: [#2349](https://www.sqlalchemy.org/trac/ticket/2349)'
  id: totrans-2691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2349](https://www.sqlalchemy.org/trac/ticket/2349)
- en: '**[orm] [feature]**'
  id: totrans-2692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Calling str() on a core SQL construct has been made more “friendly”, when the
    construct contains non-standard SQL elements such as RETURNING, array index operations,
    or dialect-specific or custom datatypes. A string is now returned in these cases
    rendering an approximation of the construct (typically the PostgreSQL-style version
    of it) rather than raising an error.
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对核心 SQL 构造调用 str() 方法变得更“友好”了，当构造包含非标准 SQL 元素（如 RETURNING、数组索引操作或方言特定或自定义数据类型）时。在这些情况下，将返回一个字符串，渲染构造的近似值（通常是其
    PostgreSQL 风格版本），而不是引发错误。
- en: See also
  id: totrans-2694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[“Friendly” stringification of Core SQL constructs without a dialect](migration_11.html#change-3631)'
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心 SQL 构造的“友好”字符串化，无需方言](migration_11.html#change-3631)'
- en: 'References: [#3631](https://www.sqlalchemy.org/trac/ticket/3631)'
  id: totrans-2696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3631](https://www.sqlalchemy.org/trac/ticket/3631)
- en: '**[orm] [feature]**'
  id: totrans-2697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The `str()` call for [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will now take into account the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound, when generating the string form of the SQL,
    so that the actual SQL that would be emitted to the database is shown, if possible.
    Previously, only the engine associated with the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") to which the mappings are associated would be used,
    if present. If no bind can be located either on the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") to which the mappings are associated, then the “default”
    dialect is used to render the SQL, as was the case previously.
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    的 `str()` 调用现在将考虑到 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 绑定的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，在生成 SQL 的字符串形式时，以便显示将要发送到数据库的实际 SQL（如果可能的话）。以前，如果存在，只会使用与映射相关联的
    [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    相关的引擎。如果无法在 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    或映射相关联的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    上找到绑定，则使用“默认”方言来渲染 SQL，就像以前一样。
- en: See also
  id: totrans-2699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Stringify of Query will consult the Session for the correct dialect](migration_11.html#change-3081)'
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[查询的字符串化将参考 Session 来获取正确的方言](migration_11.html#change-3081)'
- en: 'References: [#3081](https://www.sqlalchemy.org/trac/ticket/3081)'
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3081](https://www.sqlalchemy.org/trac/ticket/3081)
- en: '**[orm] [feature]**'
  id: totrans-2702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`SessionEvents`](../orm/events.html#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")
    suite now includes events to allow unambiguous tracking of all object lifecycle
    state transitions in terms of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") itself, e.g. pending, transient, persistent, detached.
    The state of the object within each event is also defined.
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SessionEvents`](../orm/events.html#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")
    套件现在包括事件，允许明确跟踪所有对象的生命周期状态转换，即 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 本身，例如 pending、transient、persistent、detached。每个事件中的对象状态也已定义。'
- en: See also
  id: totrans-2704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-2705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的会话生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-2706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [feature]**'
  id: totrans-2707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: Added a new session lifecycle state [deleted](../glossary.html#term-deleted).
    This new state represents an object that has been deleted from the [persistent](../glossary.html#term-persistent)
    state and will move to the [detached](../glossary.html#term-detached) state once
    the transaction is committed. This resolves the long-standing issue that objects
    which were deleted existed in a gray area between persistent and detached. The
    [`InstanceState.persistent`](../orm/internals.html#sqlalchemy.orm.InstanceState.persistent
    "sqlalchemy.orm.InstanceState.persistent") accessor will **no longer** report
    on a deleted object as persistent; the [`InstanceState.deleted`](../orm/internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") accessor will instead be True for these
    objects, until they become detached.
  id: totrans-2708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的会话生命周期状态 [deleted](../glossary.html#term-deleted)。这个新状态表示一个从 [persistent](../glossary.html#term-persistent)
    状态中删除的对象，并且一旦事务提交，将转移到 [detached](../glossary.html#term-detached) 状态。这解决了长期存在的问题，即已删除的对象存在于持久状态和已分离状态之间的灰色地带。[`InstanceState.persistent`](../orm/internals.html#sqlalchemy.orm.InstanceState.persistent
    "sqlalchemy.orm.InstanceState.persistent") 访问器将**不再**报告已删除对象为持久；相反，对于这些对象，[`InstanceState.deleted`](../orm/internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") 访问器将为 True，直到它们变为分离状态。
- en: See also
  id: totrans-2709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的会话生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [feature]**'
  id: totrans-2712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: Added new checks for the common error case of passing mapped classes or mapped
    instances into contexts where they are interpreted as SQL bound parameters; a
    new exception is raised for this.
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对将映射类或映射实例传递到将其解释为 SQL 绑定参数的上下文中的常见错误情况的新检查；为此引发了一个新的异常。
- en: See also
  id: totrans-2714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specific checks added for passing mapped classes, instances as SQL literals](migration_11.html#change-3321)'
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为将映射类、实例作为 SQL 字面量传递而添加的特定检查](migration_11.html#change-3321)'
- en: 'References: [#3321](https://www.sqlalchemy.org/trac/ticket/3321)'
  id: totrans-2716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3321](https://www.sqlalchemy.org/trac/ticket/3321)
- en: '**[orm] [feature]**'
  id: totrans-2717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: Added new relationship loading strategy [`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload") (also accessible via `lazy='raise'`). This strategy
    behaves almost like [`noload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.noload
    "sqlalchemy.orm.noload") but instead of returning `None` it raises an InvalidRequestError.
    Pull request courtesy Adrian Moennich.
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的关系加载策略 [`raiseload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.raiseload
    "sqlalchemy.orm.raiseload")（也可通过 `lazy='raise'` 访问）。该策略几乎行为类似于 [`noload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.noload
    "sqlalchemy.orm.noload")，但不返回 `None`，而是引发一个 InvalidRequestError。此拉取请求由 Adrian
    Moennich 提供。
- en: See also
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “raise” / “raise_on_sql” loader strategies](migration_11.html#change-3512)'
  id: totrans-2720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“raise” / “raise_on_sql” 加载策略](migration_11.html#change-3512)'
- en: 'References: [#3512](https://www.sqlalchemy.org/trac/ticket/3512)'
  id: totrans-2721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3512](https://www.sqlalchemy.org/trac/ticket/3512)
- en: '**[orm] [change]**'
  id: totrans-2722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [变更]**'
- en: The [`Mapper.order_by`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.order_by
    "sqlalchemy.orm.Mapper") parameter is deprecated. This is an old parameter no
    longer relevant to how SQLAlchemy works, once the Query object was introduced.
    By deprecating it we establish that we aren’t supporting non-working use cases
    and that we encourage applications to move off of the use of this parameter.
  id: totrans-2723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapper.order_by`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.order_by
    "sqlalchemy.orm.Mapper") 参数已被弃用。这是一个旧参数，与 SQLAlchemy 的工作方式不再相关，一旦引入了查询对象。通过将其弃用，我们确定我们不支持不起作用的用例，并鼓励应用程序停止使用此参数。'
- en: See also
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mapper.order_by is deprecated](migration_11.html#change-3394)'
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Mapper.order_by已弃用](migration_11.html#change-3394)'
- en: 'References: [#3394](https://www.sqlalchemy.org/trac/ticket/3394)'
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3394](https://www.sqlalchemy.org/trac/ticket/3394)
- en: '**[orm] [change]**'
  id: totrans-2727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: The [`Session.weak_identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.params.weak_identity_map
    "sqlalchemy.orm.Session") parameter is deprecated. See the new recipe at [Session
    Referencing Behavior](../orm/session_state_management.html#session-referencing-behavior)
    for an event-based approach to maintaining strong identity map behavior.
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.weak_identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.params.weak_identity_map
    "sqlalchemy.orm.Session")参数已弃用。请参阅[Session Referencing Behavior](../orm/session_state_management.html#session-referencing-behavior)中的新配方，以了解维护强身份映射行为的基于事件的方法。'
- en: See also
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Session lifecycle events](migration_11.html#change-2677)'
  id: totrans-2730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的Session生命周期事件](migration_11.html#change-2677)'
- en: 'References: [#2677](https://www.sqlalchemy.org/trac/ticket/2677)'
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2677](https://www.sqlalchemy.org/trac/ticket/2677)
- en: '**[orm] [bug]**'
  id: totrans-2732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an issue where a many-to-one change of an object from one parent to another
    could work inconsistently when combined with an un-flushed modification of the
    foreign key attribute. The attribute move now considers the database-committed
    value of the foreign key in order to locate the “previous” parent of the object
    being moved. This allows events to fire off correctly including backref events.
    Previously, these events would not always fire. Applications which may have relied
    on the previously broken behavior may be affected.
  id: totrans-2733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即将对象从一个父对象更改为另一个父对象的多对一更改在与外键属性的未刷新修改结合时可能工作不一致。现在，属性移动考虑了外键的数据库提交值，以定位正在移动的对象的“先前”父对象。这允许事件正确触发，包括反向引用事件。以前，这些事件并不总是触发。可能依赖于先前错误行为的应用程序可能会受到影响。
- en: See also
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fix involving many-to-one object moves with user-initiated foreign key manipulations](migration_11.html#change-3708)'
  id: totrans-2735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[修复了涉及用户发起的外键操作的多对一对象移动的问题](migration_11.html#change-3708)'
- en: 'References: [#3708](https://www.sqlalchemy.org/trac/ticket/3708)'
  id: totrans-2736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3708](https://www.sqlalchemy.org/trac/ticket/3708)
- en: '**[orm] [bug]**'
  id: totrans-2737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where deferred columns would inadvertently be set up for database
    load on the next object-wide unexpire, when the object were merged into the session
    with `session.merge(obj, load=False)`.
  id: totrans-2738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当对象通过`session.merge(obj, load=False)`合并到会话中时，延迟列会在下一个对象级别的取消过期时意外地设置为数据库加载。
- en: 'References: [#3488](https://www.sqlalchemy.org/trac/ticket/3488)'
  id: totrans-2739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3488](https://www.sqlalchemy.org/trac/ticket/3488)
- en: '**[orm] [bug] [mysql]**'
  id: totrans-2740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [mysql]**'
- en: Further continuing on the common MySQL exception case of a savepoint being cancelled
    first covered in [#2696](https://www.sqlalchemy.org/trac/ticket/2696), the failure
    mode in which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is placed when a SAVEPOINT vanishes before rollback has been improved to allow
    the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to still function outside of that savepoint. It is assumed that the savepoint
    operation failed and was cancelled.
  id: totrans-2741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步延续了常见的MySQL异常情况，即在[#2696](https://www.sqlalchemy.org/trac/ticket/2696)中首次涵盖的保存点被取消的情况，当SAVEPOINT在回滚之前消失时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的失败模式已经改进，以允许[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在该保存点之外继续运行。假定保存点操作失败并被取消。
- en: See also
  id: totrans-2742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved Session state when a SAVEPOINT is cancelled by the database](migration_11.html#change-3680)'
  id: totrans-2743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[数据库取消SAVEPOINT时改进的Session状态](migration_11.html#change-3680)'
- en: 'References: [#3680](https://www.sqlalchemy.org/trac/ticket/3680)'
  id: totrans-2744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3680](https://www.sqlalchemy.org/trac/ticket/3680)
- en: '**[orm] [bug]**'
  id: totrans-2745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a newly inserted instance that is rolled back would still potentially
    cause persistence conflicts on the next transaction, because the instance would
    not be checked that it was expired. This fix will resolve a large class of cases
    that erroneously cause the “New instance with identity X conflicts with persistent
    instance Y” error.
  id: totrans-2746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在回滚的新插入实例仍可能在下一个事务中引起持久性冲突，因为实例未被检查为已过期。此修复将解决一大类错误地导致“具有标识X的新实例与持久实例Y冲突”的错误的情况。
- en: See also
  id: totrans-2747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Erroneous “new instance X conflicts with persistent instance Y” flush errors
    fixed](migration_11.html#change-3677)'
  id: totrans-2748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[修复了错误的“新实例X与持久实例Y冲突”的刷新错误](migration_11.html#change-3677)'
- en: 'References: [#3677](https://www.sqlalchemy.org/trac/ticket/3677)'
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3677](https://www.sqlalchemy.org/trac/ticket/3677)
- en: '**[orm] [bug]**'
  id: totrans-2750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An improvement to the workings of [`Query.correlate()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.correlate
    "sqlalchemy.orm.Query.correlate") such that when a “polymorphic” entity is used
    which represents a straight join of several tables, the statement will ensure
    that all the tables within the join are part of what’s correlating.
  id: totrans-2751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Query.correlate()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.correlate
    "sqlalchemy.orm.Query.correlate")的工作方式进行了改进，以确保当使用代表几个表的直接连接的“多态”实体时，语句将确保连接中的所有表都是相关的。
- en: See also
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvements to the Query.correlate method with polymorphic entities](migration_11.html#change-3662)'
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对具有多态实体的Query.correlate方法进行改进](migration_11.html#change-3662)'
- en: 'References: [#3662](https://www.sqlalchemy.org/trac/ticket/3662)'
  id: totrans-2754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3662](https://www.sqlalchemy.org/trac/ticket/3662)
- en: '**[orm] [bug]**'
  id: totrans-2755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug which would cause an eagerly loaded many-to-one attribute to not be
    loaded, if the joined eager load were from a row where the same entity were present
    multiple times, some calling for the attribute to be eagerly loaded and others
    not. The logic here is revised to take in the attribute even though a different
    loader path has handled the parent entity already.
  id: totrans-2756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug会导致一个被急加载的多对一属性无法加载，如果连接式急加载来自一个同一实体多次出现的行，有些要求属性被急加载，而其他则不是。这里的逻辑被修改为即使不同的加载路径已经处理了父实体，也要考虑属性。
- en: See also
  id: totrans-2757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joined eager loading where the same entity is present multiple times in one
    row](migration_11.html#change-3431)'
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在一行中多次出现相同实体的连接式预加载](migration_11.html#change-3431)'
- en: 'References: [#3431](https://www.sqlalchemy.org/trac/ticket/3431)'
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3431](https://www.sqlalchemy.org/trac/ticket/3431)
- en: '**[orm] [bug]**'
  id: totrans-2760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A refinement to the logic which adds columns to the resulting SQL when [`Query.distinct()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.distinct
    "sqlalchemy.orm.Query.distinct") is combined with [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") such that columns which are already present will
    not be added a second time, even if they are labeled with a different name. Regardless
    of this change, the extra columns added to the SQL have never been returned in
    the final result, so this change only impacts the string form of the statement
    as well as its behavior when used in a Core execution context. Additionally, columns
    are no longer added when the DISTINCT ON format is used, provided the query is
    not wrapped inside a subquery due to joined eager loading.
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Query.distinct()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.distinct
    "sqlalchemy.orm.Query.distinct")与[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")结合使用时，对结果SQL添加列的逻辑进行了改进，以确保已经存在的列不会被第二次添加，即使它们使用不同的名称标记。尽管有这个改变，SQL中添加的额外列从未在最终结果中返回，因此这个改变只影响语句的字符串形式以及在核心执行上下文中使用时的行为。此外，当使用DISTINCT
    ON格式时，不再添加列，前提是查询不是由于连接式预加载而包装在子查询中。
- en: See also
  id: totrans-2762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Columns no longer added redundantly with DISTINCT + ORDER BY](migration_11.html#change-3641)'
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用DISTINCT + ORDER BY时不再冗余添加列](migration_11.html#change-3641)'
- en: 'References: [#3641](https://www.sqlalchemy.org/trac/ticket/3641)'
  id: totrans-2764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3641](https://www.sqlalchemy.org/trac/ticket/3641)
- en: '**[orm] [bug]**'
  id: totrans-2765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where two same-named relationships that refer to a base class and
    a concrete-inherited subclass would raise an error if those relationships were
    set up using “backref”, while setting up the identical configuration using relationship()
    instead with the conflicting names would succeed, as is allowed in the case of
    a concrete mapping.
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即两个同名关系引用一个基类和一个具体继承子类时，如果使用“backref”设置这些关系会引发错误，而使用relationship()设置相同配置而使用冲突名称则会成功，这在具体映射的情况下是允许的。
- en: See also
  id: totrans-2767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Same-named backrefs will not raise an error when applied to concrete inheritance
    subclasses](migration_11.html#change-3630)'
  id: totrans-2768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[应用于具体继承子类时，同名的backrefs不会引发错误](migration_11.html#change-3630)'
- en: 'References: [#3630](https://www.sqlalchemy.org/trac/ticket/3630)'
  id: totrans-2769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3630](https://www.sqlalchemy.org/trac/ticket/3630)
- en: '**[orm] [bug]**'
  id: totrans-2770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") method now tracks pending objects by primary key
    before emitting an INSERT, and merges distinct objects with duplicate primary
    keys together as they are encountered, which is essentially semi-deterministic
    at best. This behavior matches what happens already with persistent objects.
  id: totrans-2771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")方法现在在发出INSERT之前通过主键跟踪挂起对象，并在遇到重复主键的不同对象时将它们合并在一起，这在最好的情况下基本上是半确定性的。这种行为与持久对象已经发生的情况相匹配。'
- en: See also
  id: totrans-2772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Session.merge resolves pending conflicts the same as persistent](migration_11.html#change-3601)'
  id: totrans-2773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.merge 解决挂起冲突与持久性相同](migration_11.html#change-3601)'
- en: 'References: [#3601](https://www.sqlalchemy.org/trac/ticket/3601)'
  id: totrans-2774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3601](https://www.sqlalchemy.org/trac/ticket/3601)
- en: '**[orm] [bug]**'
  id: totrans-2775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the “single table inheritance” criteria would be added onto
    the end of a query in some inappropriate situations, such as when querying from
    an exists() of a single-inheritance subclass.
  id: totrans-2776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些不适当情况下将“单表继承”条件添加到查询末尾的错误，例如在从单继承子类的exists()查询时。
- en: See also
  id: totrans-2777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Further Fixes to single-table inheritance querying](migration_11.html#change-3582)'
  id: totrans-2778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[进一步修复单表继承查询](migration_11.html#change-3582)'
- en: 'References: [#3582](https://www.sqlalchemy.org/trac/ticket/3582)'
  id: totrans-2779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3582](https://www.sqlalchemy.org/trac/ticket/3582)
- en: '**[orm] [bug]**'
  id: totrans-2780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a new type-level modifier [`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") which indicates to the ORM that
    a positive set of None should be persisted as the value NULL, instead of omitting
    the column from the INSERT statement. This feature is used both as part of the
    implementation for [#3514](https://www.sqlalchemy.org/trac/ticket/3514) as well
    as a standalone feature available on any type.
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的类型级别修饰符[`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")，指示ORM应将一组正面的 None 持久化为值 NULL，而不是在INSERT语句中省略列。这个功能既作为[#3514](https://www.sqlalchemy.org/trac/ticket/3514)的实现的一部分，也作为任何类型可用的独立功能。
- en: See also
  id: totrans-2782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New options allowing explicit persistence of NULL over a default](migration_11.html#change-3250)'
  id: totrans-2783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[允许显式持久化 NULL 覆盖默认值的新选项](migration_11.html#change-3250)'
- en: 'References: [#3250](https://www.sqlalchemy.org/trac/ticket/3250)'
  id: totrans-2784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3250](https://www.sqlalchemy.org/trac/ticket/3250)
- en: '**[orm] [bug]**'
  id: totrans-2785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Internal calls to “bookkeeping” functions within [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") and related bulk methods have been
    scaled back to the extent that this functionality is not currently used, e.g.
    checks for column default values to be fetched after an INSERT or UPDATE statement.
  id: totrans-2786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")内部调用的“簿记”功能以及相关的批量方法已经减少到目前未使用的程度，例如在INSERT或UPDATE语句之后获取列默认值的检查。'
- en: 'References: [#3526](https://www.sqlalchemy.org/trac/ticket/3526)'
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3526](https://www.sqlalchemy.org/trac/ticket/3526)
- en: '**[orm] [bug] [postgresql]**'
  id: totrans-2788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [postgresql]**'
- en: Additional fixes have been made regarding the value of `None` in conjunction
    with the PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") type. When the [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag is left at its default value of `False`, the ORM
    will now correctly insert the JSON “‘null’” string into the column whenever the
    value on the ORM object is set to the value `None` or when the value `None` is
    used with [`Session.bulk_insert_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings"), **including** if the column has
    a default or server default on it.
  id: totrans-2789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对 PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 类型与`None`值的附加修复已经完成。当[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 标志保持默认值`False`时，ORM现在将正确地将 JSON “‘null’” 字符串插入到列中，无论是当ORM对象上的值设置为`None`时，还是当值`None`与[`Session.bulk_insert_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")一起使用时，**包括**列上有默认值或服务器默认值的情况。
- en: See also
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[JSON “null” is inserted as expected with ORM operations, omitted when not
    present](migration_11.html#change-3514)'
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[JSON “null” 在 ORM 操作中如预期般插入，当不存在时被省略](migration_11.html#change-3514)'
- en: '[New options allowing explicit persistence of NULL over a default](migration_11.html#change-3250)'
  id: totrans-2792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新增选项允许显式持久化 NULL 覆盖默认值](migration_11.html#change-3250)'
- en: 'References: [#3514](https://www.sqlalchemy.org/trac/ticket/3514)'
  id: totrans-2793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3514](https://www.sqlalchemy.org/trac/ticket/3514)
- en: engine
  id: totrans-2794
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Added connection pool events `ConnectionEvents.close()`, `ConnectionEvents.detach()`,
    `ConnectionEvents.close_detached()`.
  id: totrans-2796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了连接池事件`ConnectionEvents.close()`，`ConnectionEvents.detach()`，`ConnectionEvents.close_detached()`。
- en: '**[engine] [feature]**'
  id: totrans-2797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: All string formatting of bound parameter sets and result rows for logging, exception,
    and `repr()` purposes now truncate very large scalar values within each collection,
    including an “N characters truncated” notation, similar to how the display for
    large multiple-parameter sets are themselves truncated.
  id: totrans-2798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，用于日志记录、异常和`repr()`目的的所有绑定参数集和结果行的字符串格式化都会截断每个集合中非常大的标量值，包括“N 个字符被截断”说明，类似于对于大型多参数集合本身被截断的显示。
- en: See also
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Large parameter and row values are now truncated in logging and exception
    displays](migration_11.html#change-2837)'
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[日志和异常显示中现在截断大型参数和行值](migration_11.html#change-2837)'
- en: 'References: [#2837](https://www.sqlalchemy.org/trac/ticket/2837)'
  id: totrans-2801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2837](https://www.sqlalchemy.org/trac/ticket/2837)
- en: '**[engine] [feature]**'
  id: totrans-2802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Multi-tenancy schema translation for [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects is added. This supports the use case of an
    application that uses the same set of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in many schemas, such as schema-per-user. A
    new execution option [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") is added.
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象添加了多租户模式翻译。这支持应用程序在许多模式中使用相同的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的用例，例如每个用户一个模式。添加了一个新的执行选项[`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")。
- en: See also
  id: totrans-2804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multi-Tenancy Schema Translation for Table objects](migration_11.html#change-2685)'
  id: totrans-2805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Table 对象的多租户模式翻译](migration_11.html#change-2685)'
- en: 'References: [#2685](https://www.sqlalchemy.org/trac/ticket/2685)'
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2685](https://www.sqlalchemy.org/trac/ticket/2685)
- en: '**[engine] [feature]**'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Added a new entrypoint system to the engine to allow “plugins” to be stated
    in the query string for a URL. Custom plugins can be written which will be given
    the chance up front to alter and/or consume the engine’s URL and keyword arguments,
    and then at engine create time will be given the engine itself to allow additional
    modifications or event registration. Plugins are written as a subclass of [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin"); see that class for details.
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在引擎中添加了一个新的入口系统，允许在 URL 的查询字符串中声明“插件”。可以编写自定义插件，这些插件将有机会在最初修改和/或使用引擎的 URL 和关键字参数，然后在引擎创建时将获得引擎本身以允许额外的修改或事件注册。插件被编写为[`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")的子类；详细信息请参见该类。
- en: 'References: [#3536](https://www.sqlalchemy.org/trac/ticket/3536)'
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3536](https://www.sqlalchemy.org/trac/ticket/3536)
- en: sql
  id: totrans-2810
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [feature]**'
  id: totrans-2811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [功能]**'
- en: Added TABLESAMPLE support via the new [`FromClause.tablesample()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method and standalone function.
    Pull request courtesy Ilja Everilä.
  id: totrans-2812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的[`FromClause.tablesample()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample")方法和独立函数添加了 TABLESAMPLE 支持。感谢
    Ilja Everilä 的拉取请求。
- en: See also
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for TABLESAMPLE](migration_11.html#change-3718)'
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持 TABLESAMPLE](migration_11.html#change-3718)'
- en: 'References: [#3718](https://www.sqlalchemy.org/trac/ticket/3718)'
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3718](https://www.sqlalchemy.org/trac/ticket/3718)
- en: '**[sql] [feature]**'
  id: totrans-2816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [功能]**'
- en: Added support for ranges in window functions, using the [`over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.range_
    "sqlalchemy.sql.expression.over") and [`over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over") parameters.
  id: totrans-2817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对窗口函数中范围的支持，使用[`over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.range_
    "sqlalchemy.sql.expression.over")和[`over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over")参数。
- en: See also
  id: totrans-2818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for RANGE and ROWS specification within window functions](migration_11.html#change-3049)'
  id: totrans-2819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[窗口函数中的RANGE和ROWS规范支持](migration_11.html#change-3049)'
- en: 'References: [#3049](https://www.sqlalchemy.org/trac/ticket/3049)'
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3049](https://www.sqlalchemy.org/trac/ticket/3049)
- en: '**[sql] [feature]**'
  id: totrans-2821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Implemented reflection of CHECK constraints for SQLite and PostgreSQL. This
    is available via the new inspector method [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") as well as when
    reflecting [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects in the form of [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") objects present in the constraints collection.
    Pull request courtesy Alex Grönholm.
  id: totrans-2822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了SQLite和PostgreSQL的CHECK约束的反射。这可以通过新的检查器方法[`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")以及在反射[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象时以[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")对象的形式存在于约束集合中。感谢Alex Grönholm的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-2823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: New [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") and [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") operators; pull
    request courtesy Sebastian Bank.
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的[`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from")和[`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from")操作符；感谢Sebastian
    Bank的拉取请求。
- en: See also
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for IS DISTINCT FROM and IS NOT DISTINCT FROM](migration_11.html#change-is-distinct-from)'
  id: totrans-2826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[IS DISTINCT FROM和IS NOT DISTINCT FROM的支持](migration_11.html#change-is-distinct-from)'
- en: '**[sql] [feature]**'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a hook in `DDLCompiler.visit_create_table()` called `DDLCompiler.create_table_suffix()`,
    allowing custom dialects to add keywords after the “CREATE TABLE” clause. Pull
    request courtesy Mark Sandan.
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`DDLCompiler.visit_create_table()`中添加了一个名为`DDLCompiler.create_table_suffix()`的钩子，允许自定义方言在“CREATE
    TABLE”子句之后添加关键字。感谢Mark Sandan的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-2829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Negative integer indexes are now accommodated by rows returned from a `ResultProxy`.
    Pull request courtesy Emanuele Gaifas.
  id: totrans-2830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 负整数索���现在可以被`ResultProxy`返回的行容纳。感谢Emanuele Gaifas的拉取请求。
- en: See also
  id: totrans-2831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Negative integer indexes accommodated by Core result rows](migration_11.html#change-gh-231)'
  id: totrans-2832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Core结果行中容纳负整数索引](migration_11.html#change-gh-231)'
- en: '**[sql] [feature]**'
  id: totrans-2833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added [`Select.lateral()`](../core/selectable.html#sqlalchemy.sql.expression.Select.lateral
    "sqlalchemy.sql.expression.Select.lateral") and related constructs to allow for
    the SQL standard LATERAL keyword, currently only supported by PostgreSQL.
  id: totrans-2834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`Select.lateral()`](../core/selectable.html#sqlalchemy.sql.expression.Select.lateral
    "sqlalchemy.sql.expression.Select.lateral")和相关构造，以允许使用SQL标准的LATERAL关键字，目前仅受PostgreSQL支持。
- en: See also
  id: totrans-2835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for the SQL LATERAL keyword](migration_11.html#change-2857)'
  id: totrans-2836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQL LATERAL关键字的支持](migration_11.html#change-2857)'
- en: 'References: [#2857](https://www.sqlalchemy.org/trac/ticket/2857)'
  id: totrans-2837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2857](https://www.sqlalchemy.org/trac/ticket/2857)
- en: '**[sql] [feature]**'
  id: totrans-2838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for rendering “FULL OUTER JOIN” to both Core and ORM. Pull request
    courtesy Stefan Urbanek.
  id: totrans-2839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对“FULL OUTER JOIN”在Core和ORM中的渲染支持。感谢Stefan Urbanek的拉取请求。
- en: See also
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Core and ORM support for FULL OUTER JOIN](migration_11.html#change-1957)'
  id: totrans-2841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Core和ORM对FULL OUTER JOIN的支持](migration_11.html#change-1957)'
- en: 'References: [#1957](https://www.sqlalchemy.org/trac/ticket/1957)'
  id: totrans-2842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1957](https://www.sqlalchemy.org/trac/ticket/1957)
- en: '**[sql] [feature]**'
  id: totrans-2843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: CTE functionality has been expanded to support all DML, allowing INSERT, UPDATE,
    and DELETE statements to both specify their own WITH clause, as well as for these
    statements themselves to be CTE expressions when they include a RETURNING clause.
  id: totrans-2844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CTE功能已扩展到支持所有DML，允许INSERT、UPDATE和DELETE语句指定自己的WITH子句，以及当它们包含RETURNING子句时，这些语句本身也可以是CTE表达式。
- en: See also
  id: totrans-2845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[CTE Support for INSERT, UPDATE, DELETE](migration_11.html#change-2551)'
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CTE支持INSERT、UPDATE、DELETE](migration_11.html#change-2551)'
- en: 'References: [#2551](https://www.sqlalchemy.org/trac/ticket/2551)'
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2551](https://www.sqlalchemy.org/trac/ticket/2551)
- en: '**[sql] [feature]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for PEP-435-style enumerated classes, namely Python 3’s `enum.Enum`
    class but also including compatible enumeration libraries, to the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype. The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype now also performs in-Python validation of incoming
    values, and adds an option to forego creating the CHECK constraint [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum"). Pull request courtesy Alex Grönholm.
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对PEP-435风格的枚举类的支持，即Python 3的`enum.Enum`类，但也包括兼容的枚举库，到[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")数据类型。[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")数据类型现在还会对传入的值进行Python验证，并添加一个选项来避免创建CHECK约束[`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum")。感谢Alex Grönholm的拉取请求。
- en: See also
  id: totrans-2850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for Python’s native enum type and compatible forms](migration_11.html#change-3292)'
  id: totrans-2851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持Python的原生枚举类型和兼容形式](migration_11.html#change-3292)'
- en: '[The Enum type now does in-Python validation of values](migration_11.html#change-3095)'
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 枚举类型现在在Python中对值进行验证（[migration_11.html#change-3095](migration_11.html#change-3095)）
- en: 'References: [#3095](https://www.sqlalchemy.org/trac/ticket/3095), [#3292](https://www.sqlalchemy.org/trac/ticket/3292)'
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3095](https://www.sqlalchemy.org/trac/ticket/3095)，[#3292](https://www.sqlalchemy.org/trac/ticket/3292)
- en: '**[sql] [feature]**'
  id: totrans-2854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A deep improvement to the recently added [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method, and its interaction with
    result-row processing, now allows the columns passed to the method to be positionally
    matched with the result columns in the statement, rather than matching on name
    alone. The advantage to this includes that when linking a textual SQL statement
    to an ORM or Core table model, no system of labeling or de-duping of common column
    names needs to occur, which also means there’s no need to worry about how label
    names match to ORM columns and so-forth. In addition, the `ResultProxy` has been
    further enhanced to map column and string keys to a row with greater precision
    in some cases.
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对最近添加的[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法进行了深度改进，以及它与结果行处理的交互，现在允许传递给该方法的列与语句中的结果列进行位置匹配，而不仅仅是按名称匹配。这样做的好处包括，当将文本SQL语句链接到ORM或Core表模型时，不需要进行常见列名的标记或去重系统，这也意味着不需要担心标签名称如何与ORM列匹配等等。此外，在某些情况下，`ResultProxy`已经进一步增强，以更精确地将列和字符串键映射到行。
- en: See also
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ResultSet column matching enhancements; positional column setup for textual
    SQL](migration_11.html#change-3501) - feature overview'
  id: totrans-2857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ResultSet列匹配增强；文本SQL的位置列设置](migration_11.html#change-3501) - 功能概述'
- en: '[TextClause.columns() will match columns positionally, not by name, when passed
    positionally](migration_11.html#behavior-change-3501) - backwards compatibility
    remarks'
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当按位置传递时，[TextClause.columns()将按位置匹配列，而不是按名称匹配](migration_11.html#behavior-change-3501)
    - 向后兼容性说明
- en: 'References: [#3501](https://www.sqlalchemy.org/trac/ticket/3501)'
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3501](https://www.sqlalchemy.org/trac/ticket/3501)
- en: '**[sql] [feature]**'
  id: totrans-2860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new type to core [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON"). This is the base of the PostgreSQL [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") type as well as that of the new [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON") type, so that a PG/MySQL-agnostic JSON column
    may be used. The type features basic index and path searching support.
  id: totrans-2861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了核心的新类型[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")。这是PostgreSQL
    [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")类型以及新的[`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")类型的基础，因此可以使用一个与PG/MySQL无关的JSON列。该类型具有基本的索引和路径搜索支持。
- en: See also
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[JSON support added to Core](migration_11.html#change-3619)'
  id: totrans-2863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[JSON support added to Core](migration_11.html#change-3619)'
- en: 'References: [#3619](https://www.sqlalchemy.org/trac/ticket/3619)'
  id: totrans-2864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3619](https://www.sqlalchemy.org/trac/ticket/3619)
- en: '**[sql] [feature]**'
  id: totrans-2865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for “set-aggregate” functions of the form `<function> WITHIN GROUP
    (ORDER BY <criteria>)`, using the method [`FunctionElement.within_group()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group"). A series of common set-aggregate
    functions with return types derived from the set have been added. This includes
    functions like [`percentile_cont`](../core/functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`dense_rank`](../core/functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") and others.
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对形式为`<function> WITHIN GROUP (ORDER BY <criteria>)`的“set-aggregate”函数的支持，使用方法[`FunctionElement.within_group()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")。已添加一系列常见的set-aggregate函数，其返回类型源自该集合。这包括函数如[`percentile_cont`](../core/functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")、[`dense_rank`](../core/functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank")等。
- en: See also
  id: totrans-2867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Function features, “WITHIN GROUP”, array_agg and set aggregate functions](migration_11.html#change-3132)'
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[New Function features, “WITHIN GROUP”, array_agg and set aggregate functions](migration_11.html#change-3132)'
- en: 'References: [#1370](https://www.sqlalchemy.org/trac/ticket/1370)'
  id: totrans-2869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1370](https://www.sqlalchemy.org/trac/ticket/1370)
- en: '**[sql] [feature] [postgresql]**'
  id: totrans-2870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature] [postgresql]**'
- en: Added support for the SQL-standard function [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg"), which automatically returns an [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") of the correct type and supports index
    / slice operations, as well as [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg"), which returns a [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") with additional comparison features. As
    arrays are only supported on PostgreSQL at the moment, only actually works on
    PostgreSQL. Also added a new construct [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") in support of PG’s “ORDER
    BY” extension.
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对SQL标准函数[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")的支持，它会自动返回正确类型的[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")并支持索引/切片操作，还有[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg")，它返回一个带有额外比较功能的[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")。由于目前只有PostgreSQL支持数组，因此只在PostgreSQL上有效。还添加了一个新的构造函数[`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by")以支持PG的“ORDER BY”扩展。
- en: See also
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Function features, “WITHIN GROUP”, array_agg and set aggregate functions](migration_11.html#change-3132)'
  id: totrans-2873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[New Function features, “WITHIN GROUP”, array_agg and set aggregate functions](migration_11.html#change-3132)'
- en: 'References: [#3132](https://www.sqlalchemy.org/trac/ticket/3132)'
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3132](https://www.sqlalchemy.org/trac/ticket/3132)
- en: '**[sql] [feature]**'
  id: totrans-2875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new type to core [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"). This is the base of the PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type, and is now part of Core to begin
    supporting various SQL-standard array-supporting features including some functions
    and eventual support for native arrays on other databases that have an “array”
    concept, such as DB2 or Oracle. Additionally, new operators [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") have been added. These support not just array
    constructs on PostgreSQL, but also subqueries that are usable on MySQL (but sadly
    not on PostgreSQL).
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在核心中添加了一个新类型[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")。这是PostgreSQL
    [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型的基础，并且现在已经成为核心的一部分，以开始支持各种支持SQL标准数组的功能，包括一些函数和最终支持其他具有“数组”概念的数据库上的本机数组，例如DB2或Oracle。此外，还添加了新的运算符[`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")和[`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")。这些不仅支持PostgreSQL上的数组构造，还支持可在MySQL上使用的子查询（但遗憾的是在PostgreSQL上不支持）。
- en: See also
  id: totrans-2877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Array support added to Core; new ANY and ALL operators](migration_11.html#change-3516)'
  id: totrans-2878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Core添加了数组支持；新增ANY和ALL运算符](migration_11.html#change-3516)'
- en: 'References: [#3516](https://www.sqlalchemy.org/trac/ticket/3516)'
  id: totrans-2879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3516](https://www.sqlalchemy.org/trac/ticket/3516)
- en: '**[sql] [change] [mysql]**'
  id: totrans-2880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change] [mysql]**'
- en: The system by which a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") considers itself to be an “auto increment” column
    has been changed, such that autoincrement is no longer implicitly enabled for
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that has a composite primary key. In order to accommodate being able to enable
    autoincrement for a composite PK member column while at the same time maintaining
    SQLAlchemy’s long standing behavior of enabling implicit autoincrement for a single
    integer primary key, a third state has been added to the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter `"auto"`, which is now the default.
  id: totrans-2881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")认为自己是“自动增量”列的系统已更改，因此不再为具有复合主键的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")隐式启用autoincrement。为了能够为复合主键成员列启用autoincrement，同时保持SQLAlchemy长期以来为单个整数主键启用隐式autoincrement的行为，已向[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")参数添加了第三状态“auto”，这现在是默认值。'
- en: See also
  id: totrans-2882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-2883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为复合主键列隐式启用.autoincrement指令](migration_11.html#change-3216)'
- en: '[No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)'
  id: totrans-2884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为具有AUTO_INCREMENT的复合主键生成隐式KEY](migration_11.html#change-mysql-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-2885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: '**[sql] [bug]**'
  id: totrans-2886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '`FromClause.count()` is deprecated. This function makes use of an arbitrary
    column in the table and is not reliable; for Core use, `func.count()` should be
    preferred.'
  id: totrans-2887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FromClause.count()`已被弃用。此函数使用表中的任意列，并不可靠；对于核心使用，应优先使用`func.count()`。'
- en: 'References: [#3724](https://www.sqlalchemy.org/trac/ticket/3724)'
  id: totrans-2888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3724](https://www.sqlalchemy.org/trac/ticket/3724)
- en: '**[sql] [bug]**'
  id: totrans-2889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed an assertion that would raise somewhat inappropriately if a [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") were associated with a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is associated with a lower-case-t [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"); the association should be ignored for
    the purposes of associating the index with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-2890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个断言，如果一个 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    与一个小写的 [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") 关联，那么它会相当不恰当地引发；为了将索引与 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 关联，应忽略此关联。
- en: 'References: [#3616](https://www.sqlalchemy.org/trac/ticket/3616)'
  id: totrans-2891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3616](https://www.sqlalchemy.org/trac/ticket/3616)
- en: '**[sql] [bug]**'
  id: totrans-2892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") construct is now a fully fledged Core
    expression element which is late-evaluated at compile time. Previously, the function
    was only a conversion function which would handle different expression inputs
    by returning either a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") of a column-oriented expression or a copy of
    a given [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object, which in particular prevented
    the operation from being logically maintained when an ORM-level expression transformation
    would convert a column to a bound parameter (e.g. for lazy loading).
  id: totrans-2893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") 构造现在是一个完全成熟的 Core 表达式元素，在编译时进行延迟评估。之前，该函数只是一个转换函数，通过返回列导向表达式的
    [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    或给定 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象的副本来处理不同的表达式输入，特别是在 ORM 级别的表达式转换将列转换为绑定参数（例如用于惰性加载）时，该操作不能被逻辑地维护。'
- en: See also
  id: totrans-2894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[The type_coerce function is now a persistent SQL element](migration_11.html#change-3531)'
  id: totrans-2895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[type_coerce 函数现在是一个持久的 SQL 元素](migration_11.html#change-3531)'
- en: 'References: [#3531](https://www.sqlalchemy.org/trac/ticket/3531)'
  id: totrans-2896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3531](https://www.sqlalchemy.org/trac/ticket/3531)
- en: '**[sql] [bug]**'
  id: totrans-2897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") type extender will now work in conjunction with
    a [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    implementation, typically [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") with regards to ensuring that the per-table events
    are propagated from the implementation type to the outer type. These events are
    used to ensure that the constraints or PostgreSQL types (e.g. ENUM) are correctly
    created (and possibly dropped) along with the parent table.
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类型扩展器现在将与 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") 实现一起工作，通常是 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 或 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，以确保表格事件从实现类型传播到外部类型。这些事件用于确保正确创建（以及可能删除）约束或 PostgreSQL
    类型（例如 ENUM），以及与父表一起。'
- en: See also
  id: totrans-2899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[TypeDecorator now works with Enum, Boolean, “schema” types automatically](migration_11.html#change-2919)'
  id: totrans-2900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TypeDecorator 现在可以自动与 Enum、Boolean 和“schema” 类型配合使用](migration_11.html#change-2919)'
- en: 'References: [#2919](https://www.sqlalchemy.org/trac/ticket/2919)'
  id: totrans-2901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2919](https://www.sqlalchemy.org/trac/ticket/2919)
- en: '**[sql] [bug]**'
  id: totrans-2902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavior of the [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union
    "sqlalchemy.sql.expression.union") construct and related constructs such as [`Query.union()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.union
    "sqlalchemy.orm.Query.union") now handle the case where the embedded SELECT statements
    need to be parenthesized due to the fact that they include LIMIT, OFFSET and/or
    ORDER BY. These queries **do not work on SQLite**, and will fail on that backend
    as they did before, but should now work on all other backends.
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")构造和相关构造的行为，如[`Query.union()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.union
    "sqlalchemy.orm.Query.union")现在处理嵌入的 SELECT 语句需要括号的情况，因为它们包括 LIMIT、OFFSET 和/或
    ORDER BY。这些查询**在 SQLite 上不起作用**，并且在该后端上会像以前一样失败，但现在应该在所有其他后端上正常工作。'
- en: See also
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[A UNION or similar of SELECTs with LIMIT/OFFSET/ORDER BY now parenthesizes
    the embedded selects](migration_11.html#change-2528)'
  id: totrans-2905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用带有 LIMIT/OFFSET/ORDER BY 的 UNION 或类似的 SELECT 现在将嵌入的 SELECT 括在括号中](migration_11.html#change-2528)'
- en: 'References: [#2528](https://www.sqlalchemy.org/trac/ticket/2528)'
  id: totrans-2906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2528](https://www.sqlalchemy.org/trac/ticket/2528)
- en: schema
  id: totrans-2907
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [enhancement]**'
  id: totrans-2908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [enhancement]**'
- en: The default generation functions passed to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are now run through “update_wrapper”, or an
    equivalent function if a callable non-function is passed, so that introspection
    tools preserve the name and docstring of the wrapped function. Pull request courtesy
    hsum.
  id: totrans-2909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的默认生成函数现在通过“update_wrapper”运行，或者如果传递了可调用的非函数，则通过等效函数运行，以便内省工具保留包装函数的名称和文档字符串。感谢
    hsum 提交的拉取请求。
- en: postgresql
  id: totrans-2910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL’s INSERT..ON CONFLICT using a new PostgreSQL-specific
    [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.dml.Insert")
    object. Pull request and extensive efforts here by Robin Thomas.
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 的 INSERT..ON CONFLICT 的支持，使用了一个新的 PostgreSQL 特定的[`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.dml.Insert")对象。感谢 Robin Thomas 提交的拉取请求和大量工作。
- en: See also
  id: totrans-2913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for INSERT..ON CONFLICT (DO UPDATE | DO NOTHING)](migration_11.html#change-3529)'
  id: totrans-2914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持 INSERT..ON CONFLICT (DO UPDATE | DO NOTHING)](migration_11.html#change-3529)'
- en: 'References: [#3529](https://www.sqlalchemy.org/trac/ticket/3529)'
  id: totrans-2915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3529](https://www.sqlalchemy.org/trac/ticket/3529)
- en: '**[postgresql] [feature]**'
  id: totrans-2916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: The DDL for DROP INDEX will emit “CONCURRENTLY” if the `postgresql_concurrently`
    flag is set upon the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") and if the database in use is detected as PostgreSQL
    version 9.2 or greater. For CREATE INDEX, database version detection is also added
    which will omit the clause if PG version is less than 8.2\. Pull request courtesy
    Iuri de Silvio.
  id: totrans-2917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")上设置了`postgresql_concurrently`标志，并且检测到正在使用的数据库是
    PostgreSQL 版本 9.2 或更高，则 DROP INDEX 的 DDL 将发出“CONCURRENTLY”。对于 CREATE INDEX，还添加了数据库版本检测，如果
    PG 版本低于 8.2，则将省略该子句。感谢 Iuri de Silvio 提交的拉取请求。
- en: '**[postgresql] [feature]**'
  id: totrans-2918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new parameter `PGInspector.get_view_names.include`, allowing specification
    for what kinds of views should be returned. Currently “plain” and “materialized”
    views are included. Pull request courtesy Sebastian Bank.
  id: totrans-2919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数`PGInspector.get_view_names.include`，允许指定应返回哪种类型的视图。目前包括“plain”和“materialized”视图。感谢
    Sebastian Bank 提交的拉取请求。
- en: 'References: [#3588](https://www.sqlalchemy.org/trac/ticket/3588)'
  id: totrans-2920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3588](https://www.sqlalchemy.org/trac/ticket/3588)
- en: '**[postgresql] [feature]**'
  id: totrans-2921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added `postgresql_tablespace` as an argument to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") to allow specification of TABLESPACE for an index in
    PostgreSQL. Complements the same-named parameter on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Benjamin Bertrand.
  id: totrans-2922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`postgresql_tablespace`作为参数添加到[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")中，以允许在 PostgreSQL 中为索引指定 TABLESPACE。与[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上的同名参数相辅相成。感谢 Benjamin Bertrand 提交的拉取请求。
- en: 'References: [#3720](https://www.sqlalchemy.org/trac/ticket/3720)'
  id: totrans-2923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3720](https://www.sqlalchemy.org/trac/ticket/3720)
- en: '**[postgresql] [feature]**'
  id: totrans-2924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new parameter [`GenerativeSelect.with_for_update.key_share`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.key_share
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"), which will render
    the `FOR NO KEY UPDATE` version of `FOR UPDATE` and `FOR KEY SHARE` instead of
    `FOR SHARE` on the PostgreSQL backend. Pull request courtesy Sergey Skopin.
  id: totrans-2925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了新参数[`GenerativeSelect.with_for_update.key_share`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.key_share
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")，该参数将在 PostgreSQL
    后端上呈现`FOR NO KEY UPDATE`版本的`FOR UPDATE`和`FOR KEY SHARE`，而不是`FOR SHARE`。感谢Sergey
    Skopin的拉取请求。
- en: '**[postgresql] [feature] [oracle]**'
  id: totrans-2926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature] [oracle]**'
- en: Added new parameter [`GenerativeSelect.with_for_update.skip_locked`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.skip_locked
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"), which will render
    the `SKIP LOCKED` phrase for a `FOR UPDATE` or `FOR SHARE` lock on the PostgreSQL
    and Oracle backends. Pull request courtesy Jack Zhou.
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了新参数[`GenerativeSelect.with_for_update.skip_locked`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update.params.skip_locked
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")，该参数将在 PostgreSQL
    和 Oracle 后端上为`FOR UPDATE`或`FOR SHARE`锁呈现`SKIP LOCKED`短语。感谢Jack Zhou的拉取请求。
- en: '**[postgresql] [feature]**'
  id: totrans-2928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new dialect for the PyGreSQL PostgreSQL dialect. Thanks to Christoph
    Zwerschke and Kaolin Imago Fire for their efforts.
  id: totrans-2929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PyGreSQL PostgreSQL 方言新增了一个新的方言。感谢Christoph Zwerschke和Kaolin Imago Fire的努力。
- en: '**[postgresql] [feature]**'
  id: totrans-2930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new constant `JSON.NULL`, indicating that the JSON NULL value should
    be used for a value regardless of other settings.
  id: totrans-2931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了一个新的常量`JSON.NULL`，表示无论其他设置如何，都应使用 JSON NULL 值。
- en: See also
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New JSON.NULL Constant Added](migration_11.html#change-3514-jsonnull)'
  id: totrans-2933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新增 JSON.NULL 常量](migration_11.html#change-3514-jsonnull)'
- en: 'References: [#3514](https://www.sqlalchemy.org/trac/ticket/3514)'
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3514](https://www.sqlalchemy.org/trac/ticket/3514)
- en: '**[postgresql] [change]**'
  id: totrans-2935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change]**'
- en: The `sqlalchemy.dialects.postgres` module, long deprecated, is removed; this
    has emitted a warning for many years and projects should be calling upon `sqlalchemy.dialects.postgresql`.
    Engine URLs of the form `postgres://` will still continue to function, however.
  id: totrans-2936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除`sqlalchemy.dialects.postgres`模块，该模块长期已过时；这已经发出了多年的警告，项目应该调用`sqlalchemy.dialects.postgresql`。形式为`postgres://`的引擎
    URL 仍将继续使用。
- en: '**[postgresql] [bug]**'
  id: totrans-2937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for reflecting the source of materialized views to the PostgreSQL
    version of the [`Inspector.get_view_definition()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_definition
    "sqlalchemy.engine.reflection.Inspector.get_view_definition") method.
  id: totrans-2938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了对在 PostgreSQL 版本的[`Inspector.get_view_definition()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_definition
    "sqlalchemy.engine.reflection.Inspector.get_view_definition")方法中反映材料化视图来源的支持。
- en: 'References: [#3587](https://www.sqlalchemy.org/trac/ticket/3587)'
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3587](https://www.sqlalchemy.org/trac/ticket/3587)
- en: '**[postgresql] [bug]**'
  id: totrans-2940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The use of a [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") object that refers to a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") subtype will now emit the expected “CREATE
    TYPE” and “DROP TYPE” DDL when the type is used within a “CREATE TABLE” or “DROP
    TABLE”.
  id: totrans-2941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")对象引用一个[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")或[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")子类型时，现在将会在该类型在“CREATE TABLE”或“DROP TABLE”中使用时发出预期的“CREATE
    TYPE”和“DROP TYPE” DDL。
- en: See also
  id: totrans-2942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[ARRAY with ENUM will now emit CREATE TYPE for the ENUM](migration_11.html#change-2729)'
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ARRAY with ENUM will now emit CREATE TYPE for the ENUM](migration_11.html#change-2729)'
- en: 'References: [#2729](https://www.sqlalchemy.org/trac/ticket/2729)'
  id: totrans-2944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2729](https://www.sqlalchemy.org/trac/ticket/2729)
- en: '**[postgresql] [bug]**'
  id: totrans-2945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The “hashable” flag on special datatypes such as [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY"), [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") is now set to False, which allows these
    types to be fetchable in ORM queries that include entities within the row.
  id: totrans-2946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特殊数据类型（如[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")、[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")和[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")）上的“可散列”标志现在设置为False，这允许在包含行内实体的ORM查询中获取这些类型。
- en: See also
  id: totrans-2947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changes regarding “unhashable” types, impacts deduping of ORM rows](migration_11.html#change-3499)'
  id: totrans-2948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关于“不可散列”类型的更改，影响ORM行的去重](migration_11.html#change-3499)'
- en: '[ARRAY and JSON types now correctly specify “unhashable”](migration_11.html#change-3499-postgresql)'
  id: totrans-2949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[数组和JSON类型现在正确指定为“不可散列”](migration_11.html#change-3499-postgresql)'
- en: 'References: [#3499](https://www.sqlalchemy.org/trac/ticket/3499)'
  id: totrans-2950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3499](https://www.sqlalchemy.org/trac/ticket/3499)
- en: '**[postgresql] [bug]**'
  id: totrans-2951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type now supports multidimensional indexed
    access, e.g. expressions such as `somecol[5][6]` without any need for explicit
    casts or type coercions, provided that the [`ARRAY.dimensions`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.params.dimensions
    "sqlalchemy.dialects.postgresql.ARRAY") parameter is set to the desired number
    of dimensions.
  id: totrans-2952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 类型现在支持多维索引访问，例如`somecol[5][6]`这样的表达式，无需显式转换或类型强制转换，只要[`ARRAY.dimensions`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.params.dimensions
    "sqlalchemy.dialects.postgresql.ARRAY")参数设置为所需的维数即可。
- en: See also
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-2954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从数组、JSON、HSTORE的索引访问中建立正确的SQL类型](migration_11.html#change-3503)'
- en: 'References: [#3487](https://www.sqlalchemy.org/trac/ticket/3487)'
  id: totrans-2955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3487](https://www.sqlalchemy.org/trac/ticket/3487)
- en: '**[postgresql] [bug]**'
  id: totrans-2956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The return type for the [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") when using indexed access has been fixed
    to work like PostgreSQL itself, and returns an expression that itself is of type
    [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")
    or [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Previously, the accessor would return
    [`NullType`](../core/type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType")
    which disallowed subsequent JSON-like operators to be used.
  id: totrans-2957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用索引访问时，[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")和[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")的返回类型已经修复，使其像PostgreSQL本身一样工作，并返回一个表达式，该表达式本身是类型[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")或[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")。以前，访问器会返回[`NullType`](../core/type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType")，这将禁止使用后续类似JSON的运算符。
- en: See also
  id: totrans-2958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-2959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从数组、JSON、HSTORE的索引访问中建立正确的SQL类型](migration_11.html#change-3503)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-2960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: '**[postgresql] [bug]**'
  id: totrans-2961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON"), [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") and [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") datatypes now allow full control over
    the return type from an indexed textual access operation, either `column[someindex].astext`
    for a JSON type or `column[someindex]` for an HSTORE type, via the [`JSON.astext_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.astext_type
    "sqlalchemy.dialects.postgresql.JSON") and [`HSTORE.text_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE.params.text_type
    "sqlalchemy.dialects.postgresql.HSTORE") parameters.
  id: totrans-2962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")、[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 和 [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 数据类型现在允许完全控制从索引文本访问操作的返回类型，对于 JSON 类型是`column[someindex].astext`，对于
    HSTORE 类型是`column[someindex]`，通过 [`JSON.astext_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.astext_type
    "sqlalchemy.dialects.postgresql.JSON") 和 [`HSTORE.text_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE.params.text_type
    "sqlalchemy.dialects.postgresql.HSTORE") 参数。'
- en: See also
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correct SQL Types are Established from Indexed Access of ARRAY, JSON, HSTORE](migration_11.html#change-3503)'
  id: totrans-2964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[正确的 SQL 类型是通过对数组、JSON、HSTORE 进行索引访问来建立的](migration_11.html#change-3503)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-2965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: '**[postgresql] [bug]**'
  id: totrans-2966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") modifier no longer calls
    upon [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") implicitly, as PG’s JSON/JSONB
    types allow cross-casting between each other as well. Code that makes use of [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") on JSON indexed access, e.g. `col[someindex].cast(Integer)`,
    will need to be changed to call [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") explicitly.
  id: totrans-2967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") 修改器不再隐式调用 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")，因为 PG 的 JSON/JSONB 类型允许彼此之间的交叉转换。在
    JSON 索引访问上使用 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 的代码，例如 `col[someindex].cast(Integer)`，现在需要显式调用
    [`Comparator.astext`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext")。'
- en: See also
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The JSON cast() operation now requires .astext is called explicitly](migration_11.html#change-3503-cast)'
  id: totrans-2969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[JSON cast() 操作现在需要显式调用 .astext](migration_11.html#change-3503-cast)'
- en: 'References: [#3503](https://www.sqlalchemy.org/trac/ticket/3503)'
  id: totrans-2970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3503](https://www.sqlalchemy.org/trac/ticket/3503)
- en: mysql
  id: totrans-2971
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for “autocommit” on MySQL drivers, via the AUTOCOMMIT isolation
    level setting. Pull request courtesy Roman Podoliaka.
  id: totrans-2973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 MySQL 驱���程序的“autocommit”支持，通过 AUTOCOMMIT 隔离级别设置。感谢 Roman Podoliaka 的拉取请求。
- en: See also
  id: totrans-2974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added support for AUTOCOMMIT “isolation level”](migration_11.html#change-3332)'
  id: totrans-2975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[增加了对 AUTOCOMMIT “隔离级别”的支持](migration_11.html#change-3332)'
- en: 'References: [#3332](https://www.sqlalchemy.org/trac/ticket/3332)'
  id: totrans-2976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3332](https://www.sqlalchemy.org/trac/ticket/3332)
- en: '**[mysql] [feature]**'
  id: totrans-2977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added [`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON "sqlalchemy.dialects.mysql.JSON")
    for MySQL 5.7\. The JSON type provides persistence of JSON values in MySQL as
    well as basic operator support of “getitem” and “getpath”, making use of the `JSON_EXTRACT`
    function in order to refer to individual paths in a JSON structure.
  id: totrans-2978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 MySQL 5.7 添加了[`JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")。JSON 类型在 MySQL 中提供了 JSON 值的持久性，以及基本的“getitem”和“getpath”操作符支持，利用`JSON_EXTRACT`函数来引用
    JSON 结构中的单个路径。
- en: See also
  id: totrans-2979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL JSON Support](migration_11.html#change-3547)'
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL JSON 支持](migration_11.html#change-3547)'
- en: 'References: [#3547](https://www.sqlalchemy.org/trac/ticket/3547)'
  id: totrans-2981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3547](https://www.sqlalchemy.org/trac/ticket/3547)
- en: '**[mysql] [change]**'
  id: totrans-2982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: The MySQL dialect no longer generates an extra “KEY” directive when generating
    CREATE TABLE DDL for a table using InnoDB with a composite primary key with AUTO_INCREMENT
    on a column that isn’t the first column; to overcome InnoDB’s limitation here,
    the PRIMARY KEY constraint is now generated with the AUTO_INCREMENT column placed
    first in the list of columns.
  id: totrans-2983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用InnoDB在列不是第一列上具有AUTO_INCREMENT的复合主键的表生成CREATE TABLE DDL时，MySQL方言不再生成额外的“KEY”指令；为了克服InnoDB在这里的限制，现在主键约束将在列列表中的AUTO_INCREMENT列放在第一位。
- en: See also
  id: totrans-2984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[No more generation of an implicit KEY for composite primary key w/ AUTO_INCREMENT](migration_11.html#change-mysql-3216)'
  id: totrans-2985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为具有AUTO_INCREMENT的复合主键生成隐式KEY](migration_11.html#change-mysql-3216)'
- en: '[The .autoincrement directive is no longer implicitly enabled for a composite
    primary key column](migration_11.html#change-3216)'
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再为复合主键列隐式启用.autoincrement指令](migration_11.html#change-3216)'
- en: 'References: [#3216](https://www.sqlalchemy.org/trac/ticket/3216)'
  id: totrans-2987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3216](https://www.sqlalchemy.org/trac/ticket/3216)
- en: sqlite
  id: totrans-2988
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-2989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [功能]**'
- en: The SQLite dialect now reflects ON UPDATE and ON DELETE phrases within foreign
    key constraints. Pull request courtesy Michal Petrucha.
  id: totrans-2990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言现在反映了外键约束中的ON UPDATE和ON DELETE短语。感谢Michal Petrucha的拉取请求。
- en: '**[sqlite] [feature]**'
  id: totrans-2991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [功能]**'
- en: The SQLite dialect now reflects the names of primary key constraints. Pull request
    courtesy Diana Clarke.
  id: totrans-2992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言现在反映了主键约束的名称。感谢Diana Clarke的拉取请求。
- en: See also
  id: totrans-2993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflection of the name of PRIMARY KEY constraints](migration_11.html#change-3629)'
  id: totrans-2994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[主键约束名称的反射](migration_11.html#change-3629)'
- en: 'References: [#3629](https://www.sqlalchemy.org/trac/ticket/3629)'
  id: totrans-2995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3629](https://www.sqlalchemy.org/trac/ticket/3629)
- en: '**[sqlite] [change]**'
  id: totrans-2996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [更改]**'
- en: Added support to the SQLite dialect for the [`Inspector.get_schema_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_schema_names
    "sqlalchemy.engine.reflection.Inspector.get_schema_names") method to work with
    SQLite; pull request courtesy Brian Van Klaveren. Also repaired support for creation
    of indexes with schemas as well as reflection of foreign key constraints in schema-bound
    tables.
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLite方言添加了对[`Inspector.get_schema_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_schema_names
    "sqlalchemy.engine.reflection.Inspector.get_schema_names")方法的支持；感谢Brian Van Klaveren的拉取请求。还修复了在具有模式的索引创建以及模式绑定表中外键约束的反射支持。
- en: See also
  id: totrans-2998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved Support for Remote Schemas](migration_11.html#change-sqlite-schemas)'
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[远程模式的改进支持](migration_11.html#change-sqlite-schemas)'
- en: '**[sqlite] [bug]**'
  id: totrans-3000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: The workaround for right-nested joins on SQLite, where they are rewritten as
    subqueries in order to work around SQLite’s lack of support for this syntax, is
    lifted when SQLite version 3.7.16 or greater is detected.
  id: totrans-3001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到SQLite版本为3.7.16或更高版本时，针对SQLite右嵌套连接的解决方法，其中它们被重写为子查询以解决SQLite不支持此语法的问题，将被取消。
- en: See also
  id: totrans-3002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Right-nested join workaround lifted for SQLite version 3.7.16](migration_11.html#change-3634)'
  id: totrans-3003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite版本3.7.16取消右嵌套连接解决方法](migration_11.html#change-3634)'
- en: 'References: [#3634](https://www.sqlalchemy.org/trac/ticket/3634)'
  id: totrans-3004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3634](https://www.sqlalchemy.org/trac/ticket/3634)
- en: '**[sqlite] [bug]**'
  id: totrans-3005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: The workaround for SQLite’s unexpected delivery of column names as `tablename.columnname`
    for some kinds of queries is now disabled when SQLite version 3.10.0 or greater
    is detected.
  id: totrans-3006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到SQLite版本为3.10.0或更高版本时，针对SQLite某些查询意外将列名传递为`tablename.columnname`的解决方法现已禁用。
- en: See also
  id: totrans-3007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dotted column names workaround lifted for SQLite version 3.10.0](migration_11.html#change-3633)'
  id: totrans-3008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[取消SQLite版本3.10.0的点列名解决方法](migration_11.html#change-3633)'
- en: 'References: [#3633](https://www.sqlalchemy.org/trac/ticket/3633)'
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3633](https://www.sqlalchemy.org/trac/ticket/3633)
- en: mssql
  id: totrans-3010
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-3011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: The `mssql_clustered` flag available on [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") now defaults to `None`, and can be set to False which
    will render the NONCLUSTERED keyword in particular for a primary key, allowing
    a different index to be used as “clustered”. Pull request courtesy Saulius Žemaitaitis.
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用于 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 的 `mssql_clustered` 标志现在默认为 `None`，并且可以设置为 False，这将特别为主键渲染
    NONCLUSTERED 关键字，允许使用不同的索引作为“聚集”。感谢 Saulius Žemaitaitis 的拉取请求。
- en: '**[mssql] [feature]**'
  id: totrans-3013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added basic isolation level support to the SQL Server dialects via [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") and [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameters.
  id: totrans-3014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")和[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数，为 SQL Server 方言添加了基本的隔离级别支持。
- en: See also
  id: totrans-3015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added transaction isolation level support for SQL Server](migration_11.html#change-3534)'
  id: totrans-3016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为 SQL Server 添加了事务隔离级别支持](migration_11.html#change-3534)'
- en: 'References: [#3534](https://www.sqlalchemy.org/trac/ticket/3534)'
  id: totrans-3017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3534](https://www.sqlalchemy.org/trac/ticket/3534)
- en: '**[mssql] [change]**'
  id: totrans-3018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [change]**'
- en: The `legacy_schema_aliasing` flag, introduced in version 1.0.5 as part of [#3424](https://www.sqlalchemy.org/trac/ticket/3424)
    to allow disabling of the MSSQL dialect’s attempts to create aliases for schema-qualified
    tables, now defaults to False; the old behavior is now disabled unless explicitly
    turned on.
  id: totrans-3019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`legacy_schema_aliasing` 标志在 1.0.5 版本中引入，作为 [#3424](https://www.sqlalchemy.org/trac/ticket/3424)
    的一部分，允许禁用 MSSQL 方言尝试为模式合格的表创建别名。现在默认为 False；除非显式启用，否则将禁用旧行为。'
- en: See also
  id: totrans-3020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The legacy_schema_aliasing flag is now set to False](migration_11.html#change-3434)'
  id: totrans-3021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[legacy_schema_aliasing 标志现在设置为 False](migration_11.html#change-3434)'
- en: 'References: [#3434](https://www.sqlalchemy.org/trac/ticket/3434)'
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3434](https://www.sqlalchemy.org/trac/ticket/3434)
- en: '**[mssql] [bug]**'
  id: totrans-3023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Adjustments to the mxODBC dialect to make use of the `BinaryNull` symbol when
    appropriate in conjunction with the `VARBINARY` data type. Pull request courtesy
    Sheila Allen.
  id: totrans-3024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 mxODBC 方言进行了调整，以便在适当情况下与 `VARBINARY` 数据类型一起使用 `BinaryNull` 符号。感谢 Sheila Allen
    的拉取请求。
- en: '**[mssql] [bug]**'
  id: totrans-3025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where the SQL Server dialect would reflect a string- or other variable-length
    column type with unbounded length by assigning the token `"max"` to the length
    attribute of the string. While using the `"max"` token explicitly is supported
    by the SQL Server dialect, it isn’t part of the normal contract of the base string
    types, and instead the length should just be left as None. The dialect now assigns
    the length to None on reflection of the type so that the type behaves normally
    in other contexts.
  id: totrans-3026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言将字符串或其他可变长度列类型的无限长度反映为将标记“max”分配给字符串的长度属性的问题。虽然 SQL Server
    方言明确支持使用“max”标记，但它并不是基本字符串类型的正常约定的一部分，相反，长度应该只留为空。方言现在在反射类型时将长度分配为 None，以便类型在其他情境中表现正常。
- en: See also
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[String / varlength types no longer represent “max” explicitly on reflection](migration_11.html#change-3504)'
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射时，字符串/可变长度类型不再明确表示“max”。
- en: 'References: [#3504](https://www.sqlalchemy.org/trac/ticket/3504)'
  id: totrans-3029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3504](https://www.sqlalchemy.org/trac/ticket/3504)
- en: misc
  id: totrans-3030
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-3031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet") and [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") helper classes to the [Mutation Tracking](../orm/extensions/mutable.html)
    extension. Pull request courtesy Jeong YunWon.
  id: totrans-3032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet") 和 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 辅助类添加到 [Mutation Tracking](../orm/extensions/mutable.html)
    扩展中。感谢 Jeong YunWon 的拉取请求。
- en: 'References: [#3297](https://www.sqlalchemy.org/trac/ticket/3297)'
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3297](https://www.sqlalchemy.org/trac/ticket/3297)
- en: '**[bug] [ext]**'
  id: totrans-3034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The docstring specified on a hybrid property or method is now honored at the
    class level, allowing it to work with tools like Sphinx autodoc. The mechanics
    here necessarily involve some wrapping of expressions to occur for hybrid properties,
    which may cause them to appear differently using introspection.
  id: totrans-3035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对混合属性或方法指定的文档字符串现在在类级别上得到了尊重，使其能够与 Sphinx autodoc 等工具一起使用。这里的机制必然涉及对混合属性进行一些表达式包装，这可能会导致它们在使用内省时显示出不同的外观。
- en: See also
  id: totrans-3036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅：
- en: '[Hybrid properties and methods now propagate the docstring as well as .info](migration_11.html#change-3653)'
  id: totrans-3037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[混合属性和方法现在传播文档字符串以及 .info](migration_11.html#change-3653)'
- en: 'References: [#3653](https://www.sqlalchemy.org/trac/ticket/3653)'
  id: totrans-3038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3653](https://www.sqlalchemy.org/trac/ticket/3653)
- en: '**[bug] [sybase]**'
  id: totrans-3039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [sybase]**'
- en: The unsupported Sybase dialect now raises `NotImplementedError` when attempting
    to compile a query that includes “offset”; Sybase has no straightforward “offset”
    feature.
  id: totrans-3040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不支持的 Sybase 方言现在在尝试编译包含“offset”的查询时引发 `NotImplementedError`；Sybase 没有直接的“offset”功能。
- en: 'References: [#2278](https://www.sqlalchemy.org/trac/ticket/2278)'
  id: totrans-3041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2278](https://www.sqlalchemy.org/trac/ticket/2278)
