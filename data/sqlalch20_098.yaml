- en: Engine Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引擎配置
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/engines.html](https://docs.sqlalchemy.org/en/20/core/engines.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/engines.html](https://docs.sqlalchemy.org/en/20/core/engines.html)
- en: The [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is the starting point for any SQLAlchemy application. It’s “home base” for the
    actual database and its [DBAPI](../glossary.html#term-DBAPI), delivered to the
    SQLAlchemy application through a connection pool and a [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect"), which describes how to talk to a specific kind of
    database/DBAPI combination.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    是任何 SQLAlchemy 应用的起点。它是实际数据库和通过连接池和 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 传递给 SQLAlchemy 应用程序的 [DBAPI](../glossary.html#term-DBAPI)
    的“主基地”，[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    描述了如何与特定类型的数据库/DBAPI 组合进行通信。'
- en: 'The general structure can be illustrated as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通用结构可如下所示：
- en: '![../_images/sqla_engine_arch.png](../Images/f551a4dda3e52a3c0fd8a1de0517174e.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/sqla_engine_arch.png](../Images/f551a4dda3e52a3c0fd8a1de0517174e.png)'
- en: Where above, an [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    references both a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    and a [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), which
    together interpret the DBAPI’s module functions as well as the behavior of the
    database.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述中，[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    同时引用了 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    和 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，它们一起解释了 DBAPI
    的模块函数以及数据库的行为。
- en: 'Creating an engine is just a matter of issuing a single call, [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创建引擎只需发出一个单独的调用，[`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above engine creates a [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") object tailored towards PostgreSQL, as well as a
    [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") object which
    will establish a DBAPI connection at `localhost:5432` when a connection request
    is first received. Note that the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and its underlying [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") do **not** establish the first actual DBAPI connection
    until the [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") or [`Engine.begin()`](connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") methods are called. Either of these methods
    may also be invoked by other SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") dependent objects such as the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object when they first require database connectivity.
    In this way, [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") can be
    said to have a *lazy initialization* behavior.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 上述引擎创建了一个针对 PostgreSQL 定制的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 对象，以及一个 [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 对象，当首次收到连接请求时，将在 `localhost:5432` 建立 DBAPI 连接。请注意，[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 及其底层的 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    在首次调用 [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    或 [`Engine.begin()`](connections.html#sqlalchemy.engine.Engine.begin "sqlalchemy.engine.Engine.begin")
    方法之前都不会建立第一个实际的 DBAPI 连接。当其他 SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 依赖对象（例如首次需要数据库连接时的 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象）首次需要数据库连接时，也可以调用这些方法中的任何一个。通过这种方式，[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 和 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    可以说具有*延迟初始化*行为。
- en: The [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    once created, can either be used directly to interact with the database, or can
    be passed to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object to work with the ORM. This section covers the details of configuring an
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    The next section, [Working with Engines and Connections](connections.html), will
    detail the usage API of the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and similar, typically for non-ORM applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，它可以直接用于与数据库交互，也可以传递给一个
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象以与 ORM 一起使用。本节介绍了配置 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的详细信息。下一节，[使用 Engines 和 Connections](connections.html)，将详细介绍 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 和类似对象的使用 API，通常用于非 ORM 应用程序。
- en: '## Supported Databases'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '## 支持的数据库'
- en: SQLAlchemy includes many [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") implementations for various backends. Dialects for
    the most common databases are included with SQLAlchemy; a handful of others require
    an additional install of a separate dialect.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 包含许多不同后端的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    实现。SQLAlchemy 包含最常见数据库的方言；另外一些需要额外安装单独的方言。
- en: 'See the section [Dialects](../dialects/index.html) for information on the various
    backends available.  ## Database URLs'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [方言](../dialects/index.html) 部分了解各种可用后端的信息。## 数据库 URL
- en: 'The [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function produces an [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object based on a URL. The format of the URL generally follows [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt),
    with some exceptions, including that underscores, not dashes or periods, are accepted
    within the “scheme” portion. URLs typically include username, password, hostname,
    database name fields, as well as optional keyword arguments for additional configuration.
    In some cases a file path is accepted, and in others a “data source name” replaces
    the “host” and “database” portions. The typical form of a database URL is:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine") 函数基于
    URL 生成一个 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象。URL 的格式通常遵循 [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt) 的规范，但也有一些例外，包括“scheme”部分中接受下划线而不是破折号或句点。URL
    通常包括用户名、密码、主机名、数据库名称字段，以及用于额外配置的可选关键字参数。在某些情况下，可以接受文件路径，而在其他情况下，“数据源名称”取代了“主机”和“数据库”部分。数据库
    URL 的典型形式是：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Dialect names include the identifying name of the SQLAlchemy dialect, a name
    such as `sqlite`, `mysql`, `postgresql`, `oracle`, or `mssql`. The drivername
    is the name of the DBAPI to be used to connect to the database using all lowercase
    letters. If not specified, a “default” DBAPI will be imported if available - this
    default is typically the most widely known driver available for that backend.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 方言名称包括 SQLAlchemy 方言的标识名称，例如 `sqlite`、`mysql`、`postgresql`、`oracle` 或 `mssql`。驱动名称是要使用的
    DBAPI 的名称，全部使用小写字母连接到数据库。如果未指定，将导入“默认”DBAPI（如果可用）- 该默认值通常是该后端可用的最广为人知的驱动程序。
- en: Escaping Special Characters such as @ signs in Passwords
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转义特殊字符，例如密码中的 @ 符号
- en: When constructing a fully formed URL string to pass to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), **special characters such as those that may be used
    in the user and password need to be URL encoded to be parsed correctly.**. **This
    includes the @ sign**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个完整的 URL 字符串以传递给 [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    时，**特殊字符（如用户和密码中可能使用的字符）需要进行 URL 编码才能正确解析。**。**这包括 @ 符号**。
- en: 'Below is an example of a URL that includes the password `"kx@jj5/g"`, where
    the “at” sign and slash characters are represented as `%40` and `%2F`, respectively:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个包含密码 `"kx@jj5/g"` 的 URL 示例，其中“at”符号和斜杠字符分别表示为 `%40` 和 `%2F`：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The encoding for the above password can be generated using [urllib.parse](https://docs.python.org/3/library/urllib.parse.html):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上述密码的编码可以使用 [urllib.parse](https://docs.python.org/3/library/urllib.parse.html)
    生成：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The URL may then be passed as a string to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以将 URL 作为字符串传递给 [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As an alternative to escaping special characters in order to create a complete
    URL string, the object passed to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") may instead be an instance of the [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object, which bypasses the parsing phase and can accommodate
    for unescaped strings directly. See the next section for an example.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为在创建完整的 URL 字符串时转义特殊字符的替代方法，可以将传递给 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的对象替换为 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象，它可以直接绕过解析阶段并直接处理未转义的字符串。请参阅下一节的示例。
- en: 'Changed in version 1.4: Support for `@` signs in hostnames and database names
    has been fixed. As a side effect of this fix, `@` signs in passwords must be escaped.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：修复了主机名和数据库名中 `@` 符号的支持。由于此修复的副作用，密码中的 `@` 符号必须进行转义。
- en: Creating URLs Programmatically
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 程序化创建 URL
- en: The value passed to [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    may be an instance of [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL"),
    instead of a plain string, which bypasses the need for string parsing to be used,
    and therefore does not need an escaped URL string to be provided.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的值可以是 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 的一个实例，而不是一个普通字符串，这样可以绕过需要使用字符串解析的步骤，因此不需要提供转义的
    URL 字符串。
- en: 'The [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object is created
    using the [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    constructor method, passing all fields individually. Special characters such as
    those within passwords may be passed without any modification:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    构造方法创建 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，通过逐个传递所有字段。密码中的特殊字符可以不做任何修改地传递：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The constructed [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    may then be passed directly to [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    in place of a string argument:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 构造的 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象然后可以直接传递给 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，而不是一个字符串参数：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")'
- en: '[`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")'
- en: Backend-Specific URLs
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后端特定的 URLs
- en: Examples for common connection styles follow below. For a full index of detailed
    information on all included dialects as well as links to third-party dialects,
    see [Dialects](../dialects/index.html).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是常见连接样式的示例。要获取所有包含的方言的详细信息以及第三方方言的链接，请参阅[Dialects](../dialects/index.html)。
- en: PostgreSQL
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: 'The PostgreSQL dialect uses psycopg2 as the default DBAPI. Other PostgreSQL
    DBAPIs include pg8000 and asyncpg:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言使用 psycopg2 作为默认的 DBAPI。其他 PostgreSQL DBAPI 包括 pg8000 和 asyncpg：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: More notes on connecting to PostgreSQL at [PostgreSQL](../dialects/postgresql.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 PostgreSQL 的更多注意事项请参考[PostgreSQL](../dialects/postgresql.html)。
- en: MySQL
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MySQL
- en: 'The MySQL dialect uses mysqlclient as the default DBAPI. There are other MySQL
    DBAPIs available, including PyMySQL:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 方言使用 mysqlclient 作为默认的 DBAPI。还有其他可用的 MySQL DBAPI，包括 PyMySQL：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: More notes on connecting to MySQL at [MySQL and MariaDB](../dialects/mysql.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 MySQL 的更多注意事项请参考[MySQL 和 MariaDB](../dialects/mysql.html)。
- en: Oracle
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Oracle
- en: 'The Oracle dialect uses cx_oracle as the default DBAPI:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 方言使用 cx_oracle 作为默认的 DBAPI：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: More notes on connecting to Oracle at [Oracle](../dialects/oracle.html).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 Oracle 的更多注意事项请参考[Oracle](../dialects/oracle.html)。
- en: Microsoft SQL Server
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: 'The SQL Server dialect uses pyodbc as the default DBAPI. pymssql is also available:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 方言使用 pyodbc 作为默认的 DBAPI。也可以使用 pymssql：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: More notes on connecting to SQL Server at [Microsoft SQL Server](../dialects/mssql.html).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 SQL Server 的更多注意事项请参考[Microsoft SQL Server](../dialects/mssql.html)。
- en: SQLite
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite connects to file-based databases, using the Python built-in module `sqlite3`
    by default.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 连接到基于文件的数据库，默认情况下使用 Python 内置模块 `sqlite3`。
- en: 'As SQLite connects to local files, the URL format is slightly different. The
    “file” portion of the URL is the filename of the database. For a relative file
    path, this requires three slashes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SQLite 连接到本地文件，URL 格式略有不同。URL 的 “file” 部分是数据库的文件名。对于相对文件路径，这需要三个斜杠：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And for an absolute file path, the three slashes are followed by the absolute
    path:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于绝对文件路径，三个斜杠后面跟着绝对路径：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To use a SQLite `:memory:` database, specify an empty URL:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 SQLite 的 `:memory:` 数据库，请指定一个空的 URL：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: More notes on connecting to SQLite at [SQLite](../dialects/sqlite.html).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 关于连接到 SQLite 的更多注释请参见[SQLite](../dialects/sqlite.html)。
- en: Others
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他
- en: 'See [Dialects](../dialects/index.html), the top-level page for all additional
    dialect documentation.  ## Engine Creation API'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[方言](../dialects/index.html)，其中包含所有额外方言文档的顶级页面。## Engine Creation API
- en: '| Object Name | Description |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [create_engine](#sqlalchemy.create_engine)(url, **kwargs) | Create a new
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instance. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [create_engine](#sqlalchemy.create_engine)(url, **kwargs) | 创建一个新的 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 实例。 |'
- en: '| [create_mock_engine](#sqlalchemy.create_mock_engine)(url, executor, **kw)
    | Create a “mock” engine used for echoing DDL. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [create_mock_engine](#sqlalchemy.create_mock_engine)(url, executor, **kw)
    | 创建一个用于回显 DDL 的“模拟”引擎。 |'
- en: '| [create_pool_from_url](#sqlalchemy.create_pool_from_url)(url, **kwargs) |
    Create a pool instance from the given url. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [create_pool_from_url](#sqlalchemy.create_pool_from_url)(url, **kwargs) |
    从给定的 URL 创建一个池实例。 |'
- en: '| [engine_from_config](#sqlalchemy.engine_from_config)(configuration[, prefix],
    **kwargs) | Create a new Engine instance using a configuration dictionary. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [engine_from_config](#sqlalchemy.engine_from_config)(configuration[, prefix],
    **kwargs) | 使用配置字典创建一个新的 Engine 实例。 |'
- en: '| [make_url](#sqlalchemy.engine.make_url)(name_or_url) | Given a string, produce
    a new URL instance. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [make_url](#sqlalchemy.engine.make_url)(name_or_url) | 给定一个字符串，生成一个新的 URL
    实例。 |'
- en: '| [URL](#sqlalchemy.engine.URL) | Represent the components of a URL used to
    connect to a database. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [URL](#sqlalchemy.engine.URL) | 表示用于连接到数据库的 URL 的组件。 |'
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Create a new [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    实例。
- en: 'The standard calling form is to send the [URL](#database-urls) as the first
    positional argument, usually a string that indicates database dialect and connection
    arguments:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 标准调用形式是将 [URL](#database-urls) 作为第一个位置参数发送，通常是一个指示数据库方言和连接参数的字符串：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: Please review [Database URLs](#database-urls) for general guidelines in composing
    URL strings. In particular, special characters, such as those often part of passwords,
    must be URL encoded to be properly parsed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅[数据库 URL](#database-urls) 以获取编写 URL 字符串的一般指南。特别是，诸如密码中经常出现的特殊字符必须进行 URL 编码才能正确解析。
- en: 'Additional keyword arguments may then follow it which establish various options
    on the resulting [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and its underlying [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    and [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") constructs:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以跟随它的附加关键字参数，这些参数在结果 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 及其底层 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 和 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    构造上建立各种选项：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The string form of the URL is `dialect[+driver]://user:password@host/dbname[?key=value..]`,
    where `dialect` is a database name such as `mysql`, `oracle`, `postgresql`, etc.,
    and `driver` the name of a DBAPI, such as `psycopg2`, `pyodbc`, `cx_oracle`, etc.
    Alternatively, the URL can be an instance of [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.url.URL").
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: URL 的字符串形式是 `dialect[+driver]://user:password@host/dbname[?key=value..]`，其中
    `dialect` 是数据库名称，例如 `mysql`、`oracle`、`postgresql` 等，而 `driver` 是 DBAPI 的名称，例如
    `psycopg2`、`pyodbc`、`cx_oracle` 等。或者，URL 可以是 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.url.URL")
    的实例。
- en: '`**kwargs` takes a wide variety of options which are routed towards their appropriate
    components. Arguments may be specific to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), the underlying [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect"), as well as the [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"). Specific dialects also accept keyword arguments that
    are unique to that dialect. Here, we describe the parameters that are common to
    most [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    usage.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`**kwargs` 接受各种选项，这些选项将被路由到其相应的组件。参数可能是特定于 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、底层 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")，以及 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    的。特定的方言也接受特定于该方言的关键字参数。在这里，我们描述了大多数 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 使用的参数。'
- en: Once established, the newly resulting [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") will request a connection from the underlying [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") once [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") is called, or a method which depends on it
    such as `Engine.execute()` is invoked. The [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") in turn will establish the first actual DBAPI connection
    when this request is received. The [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call itself does **not** establish any actual DBAPI
    connections directly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立，新生成的[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")在调用[`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect")或依赖于它的方法（如`Engine.execute()`）时，将从底层的[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")请求连接。当收到此请求时，[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")将建立第一个实际的DBAPI连接。[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")调用本身**不会**直接建立任何实际的DBAPI连接。
- en: See also
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Engine Configuration](#)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[引擎配置](#)'
- en: '[Dialects](../dialects/index.html)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[方言](../dialects/index.html)'
- en: '[Working with Engines and Connections](connections.html)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用引擎和连接](connections.html)'
- en: 'Parameters:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connect_args` – a dictionary of options which will be passed directly to the
    DBAPI’s `connect()` method as additional keyword arguments. See the example at
    [Custom DBAPI connect() arguments / on-connect routines](#custom-dbapi-args).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connect_args` – 一个字典选项，将作为额外的关键字参数直接传递给DBAPI的`connect()`方法。请参见[自定义DBAPI connect()参数
    / on-connect例程](#custom-dbapi-args)中的示例。'
- en: '`creator` –'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creator` –'
- en: a callable which returns a DBAPI connection. This creation function will be
    passed to the underlying connection pool and will be used to create all new database
    connections. Usage of this function causes connection parameters specified in
    the URL argument to be bypassed.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可调用的函数，返回一个DBAPI连接。此创建函数将传递给底层连接池，并将用于创建所有新的数据库连接。使用此函数会绕过URL参数中指定的连接参数。
- en: This hook is not as flexible as the newer [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") hook which allows complete control
    over how a connection is made to the database, given the full set of URL arguments
    and state beforehand.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个钩子不像较新的[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")钩子那样灵活，后者允许完全控制如何连接到数据库，考虑到之前的URL参数和状态。
- en: See also
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") - event hook that allows full control
    over DBAPI connection mechanics.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") - 允许完全控制DBAPI连接机制的事件钩子。'
- en: '[Custom DBAPI connect() arguments / on-connect routines](#custom-dbapi-args)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义DBAPI connect()参数 / on-connect例程](#custom-dbapi-args)'
- en: '`echo=False` –'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo=False` –'
- en: if True, the Engine will log all statements as well as a `repr()` of their parameter
    lists to the default log handler, which defaults to `sys.stdout` for output. If
    set to the string `"debug"`, result rows will be printed to the standard output
    as well. The `echo` attribute of `Engine` can be modified at any time to turn
    logging on and off; direct control of logging is also available using the standard
    Python `logging` module.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则Engine将记录所有语句以及它们参数列表的`repr()`到默认的日志处理程序，该处理程序默认为`sys.stdout`。如果设置为字符串`"debug"`，结果行也将打印到标准输出。`Engine`的`echo`属性可以随时修改以打开和关闭日志记录；还可以使用标准的Python
    `logging`模块直接控制日志记录。
- en: See also
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 关于如何配置日志记录的更多详细信息。'
- en: '`echo_pool=False` –'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo_pool=False` –'
- en: if True, the connection pool will log informational output such as when connections
    are invalidated as well as when connections are recycled to the default log handler,
    which defaults to `sys.stdout` for output. If set to the string `"debug"`, the
    logging will include pool checkouts and checkins. Direct control of logging is
    also available using the standard Python `logging` module.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则连接池将记录信息性输出，例如当连接无效时以及当连接被回收时，将输出到默认的日志处理程序，该处理程序默认为`sys.stdout`。如果设置为字符串`"debug"`，日志记录将包括池的检出和检入。还可以使用标准的Python
    `logging`模块直接控制日志记录。
- en: See also
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 关于如何配置日志记录的更多详细信息。'
- en: '`empty_in_strategy` –'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`empty_in_strategy` –'
- en: No longer used; SQLAlchemy now uses “empty set” behavior for IN in all cases.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再使用；SQLAlchemy 现在在所有情况下都使用“空集合”行为来处理 IN。
- en: 'Deprecated since version 1.4: The [`create_engine.empty_in_strategy`](#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") keyword is deprecated, and no longer has any effect.
    All IN expressions are now rendered using the “expanding parameter” strategy which
    renders a set of boundexpressions, or an “empty set” SELECT, at statement executiontime.'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`create_engine.empty_in_strategy`](#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 关键字已弃用，不再起作用。所有 IN 表达式现在都使用“扩展参数”策略进行渲染，该策略在语句执行时会渲染一组绑定的表达式，或者一个“空集合”SELECT。
- en: '`enable_from_linting` –'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_from_linting` –'
- en: defaults to True. Will emit a warning if a given SELECT statement is found to
    have un-linked FROM elements which would cause a cartesian product.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 True。如果发现给定的 SELECT 语句具有未链接的 FROM 元素，会发出警告，这些元素会导致笛卡尔积。
- en: New in version 1.4.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: See also
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Built-in FROM linting will warn for any potential cartesian products in a
    SELECT statement](../changelog/migration_14.html#change-4737)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[内置的 FROM linting 将为 SELECT 语句中的任何潜在笛卡尔积发出警告](../changelog/migration_14.html#change-4737)'
- en: '`execution_options` – Dictionary execution options which will be applied to
    all connections. See [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` – 将应用于所有连接的字典执行选项。参见 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '`future` –'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`future` –'
- en: Use the 2.0 style [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    API.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 2.0 风格的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    API。
- en: As of SQLAlchemy 2.0, this parameter is present for backwards compatibility
    only and must remain at its default value of `True`.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 SQLAlchemy 2.0 开始，此参数仅用于向后兼容，必须保持默认值为 `True`。
- en: The [`create_engine.future`](#sqlalchemy.create_engine.params.future "sqlalchemy.create_engine")
    parameter will be deprecated in a subsequent 2.x release and eventually removed.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.future`](#sqlalchemy.create_engine.params.future "sqlalchemy.create_engine")
    参数将在随后的 2.x 版本中弃用，并最终被移除。'
- en: New in version 1.4.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Changed in version 2.0: All [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects are “future” style engines and there is no
    longer a `future=False` mode of operation.'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：所有 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象都是“未来”风格的引擎，不再有 `future=False` 的操作模式。
- en: See also
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLAlchemy 2.0 - Major Migration Guide](../changelog/migration_20.html)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 2.0 - 主要迁移指南](../changelog/migration_20.html)'
- en: '`hide_parameters` –'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide_parameters` –'
- en: Boolean, when set to True, SQL statement parameters will not be displayed in
    INFO logging nor will they be formatted into the string representation of [`StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") objects.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值，当设置为 True 时，SQL 语句参数将不会显示在 INFO 日志中，也不会被格式化为 [`StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") 对象的字符串表示形式。
- en: New in version 1.3.8.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.3.8 中新增。
- en: See also
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 关于如何配置日志记录的更多详细信息。'
- en: '`implicit_returning=True` – Legacy parameter that may only be set to True.
    In SQLAlchemy 2.0, this parameter does nothing. In order to disable “implicit
    returning” for statements invoked by the ORM, configure this on a per-table basis
    using the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`implicit_returning=True` – 只能设置为 True 的旧参数。在 SQLAlchemy 2.0 中，此参数无效。为了禁用 ORM
    调用的语句的“隐式返回”，请在每个表上使用 [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") 参数进行配置。'
- en: '`insertmanyvalues_page_size` –'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertmanyvalues_page_size` –'
- en: number of rows to format into an INSERT statement when the statement uses “insertmanyvalues”
    mode, which is a paged form of bulk insert that is used for many backends when
    using [executemany](../glossary.html#term-executemany) execution typically in
    conjunction with RETURNING. Defaults to 1000, but may also be subject to dialect-specific
    limiting factors which may override this value on a per-statement basis.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当语句使用“insertmanyvalues”模式时，格式化为INSERT语句的行数。这是一种分页形式的批量插入，通常与[executemany](../glossary.html#term-executemany)执行一起使用，与RETURNING一起使用。默认为1000，但也可能受方言特定的限制因素的影响，这些因素可能会覆盖此值的每个语句的基础。
- en: New in version 2.0.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版本中的新内容。
- en: See also
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关于INSERT语句的“插入多个值”行为](connections.html#engine-insertmanyvalues)'
- en: '[Controlling the Batch Size](connections.html#engine-insertmanyvalues-page-size)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[控制批量大小](connections.html#engine-insertmanyvalues-page-size)'
- en: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options")'
- en: '`isolation_level` –'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level` –'
- en: optional string name of an isolation level which will be set on all new connections
    unconditionally. Isolation levels are typically some subset of the string names
    `"SERIALIZABLE"`, `"REPEATABLE READ"`, `"READ COMMITTED"`, `"READ UNCOMMITTED"`
    and `"AUTOCOMMIT"` based on backend.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无条件地在所有新连接上设置的隔离级别的可选字符串名称。隔离级别通常是字符串名称的一些子集`"SERIALIZABLE"`、`"REPEATABLE READ"`、`"READ
    COMMITTED"`、`"READ UNCOMMITTED"`和`"AUTOCOMMIT"`根据后端。
- en: The [`create_engine.isolation_level`](#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter is in contrast to the [`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option, which may
    be set on an individual [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), as well as the same parameter passed to [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"), where it may be used to create
    multiple engines with different isolation levels that share a common connection
    pool and dialect.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数与[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")执行选项形成对比，后者可以在单个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上设置，以及传递给[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")的相同参数，它可以用于创建具有不同隔离级别的多个引擎，这些引擎共享一个公共的连接池和方言。'
- en: 'Changed in version 2.0: The [`create_engine.isolation_level`](#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter has been generalized to work on all dialects
    which support the concept of isolation level, and is provided as a more succinct,
    up front configuration switch in contrast to the execution option which is more
    of an ad-hoc programmatic option.'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：[`create_engine.isolation_level`](#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数已被概括为适用于所有支持隔离级别概念的方言，并提供为更简洁、更前置的配置开关，与执行选项形成对比，后者更多是一种临时的编程选项。
- en: See also
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](connections.html#dbapi-autocommit)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括DBAPI自动提交](connections.html#dbapi-autocommit)'
- en: '`json_deserializer` –'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_deserializer` –'
- en: for dialects that support the [`JSON`](type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype, this is a Python callable that will convert
    a JSON string to a Python object. By default, the Python `json.loads` function
    is used.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于支持[`JSON`](type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")数据类型的方言，这是一个将JSON字符串转换为Python对象的Python可调用函数。默认情况下，使用Python的`json.loads`函数。
- en: 'Changed in version 1.3.7: The SQLite dialect renamed this from `_json_deserializer`.'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.3.7开始更改：SQLite方言将其从`_json_deserializer`改名为。
- en: '`json_serializer` –'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_serializer` –'
- en: for dialects that support the [`JSON`](type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype, this is a Python callable that will render
    a given object as JSON. By default, the Python `json.dumps` function is used.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对支持[`JSON`](type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")数据类型的方言来说，这是一个Python可调用函数，用于将给定对象呈现为JSON。默认情况下，使用Python的`json.dumps`函数。
- en: 'Changed in version 1.3.7: The SQLite dialect renamed this from `_json_serializer`.'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在1.3.7版本中更改：SQLite方言将其从`_json_serializer`重命名为其他内容。
- en: '`label_length=None` –'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_length=None` –'
- en: optional integer value which limits the size of dynamically generated column
    labels to that many characters. If less than 6, labels are generated as “_(counter)”.
    If `None`, the value of `dialect.max_identifier_length`, which may be affected
    via the [`create_engine.max_identifier_length`](#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") parameter, is used instead. The value of [`create_engine.label_length`](#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine") may not be larger than that of [`create_engine.max_identfier_length`](#sqlalchemy.create_engine.params.max_identfier_length
    "sqlalchemy.create_engine").
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选整数值，限制动态生成的列标签的大小到该字符数。如果小于6，则标签生成为“_(counter)”。如果为`None`，则使用[`create_engine.max_identifier_length`](#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")参数受影响的`dialect.max_identifier_length`的值。[`create_engine.label_length`](#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine")的值不能大于[`create_engine.max_identfier_length`](#sqlalchemy.create_engine.params.max_identfier_length
    "sqlalchemy.create_engine")的值。
- en: See also
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`create_engine.max_identifier_length`](#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.max_identifier_length`](#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")'
- en: '`logging_name` –'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging_name` –'
- en: String identifier which will be used within the “name” field of logging records
    generated within the “sqlalchemy.engine” logger. Defaults to a hexstring of the
    object’s id.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于在“sqlalchemy.engine”记录器中生成的日志记录的“name”字段内使用的字符串标识符。默认为对象的id的十六进制字符串。
- en: See also
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志](#dbengine-logging) - 关于如何配置日志的进一步详细信息。'
- en: '[`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options")'
- en: '`max_identifier_length` –'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_identifier_length` –'
- en: integer; override the max_identifier_length determined by the dialect. if `None`
    or zero, has no effect. This is the database’s configured maximum number of characters
    that may be used in a SQL identifier such as a table name, column name, or label
    name. All dialects determine this value automatically, however in the case of
    a new database version for which this value has changed but SQLAlchemy’s dialect
    has not been adjusted, the value may be passed here.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 整数；覆盖方言确定的`max_identifier_length`。如果为`None`或零，则无效果。这是数据库配置的最大字符数，可以在SQL标识符（如表名、列名或标签名）中使用。所有方言都会自动确定此值，但是如果数据库版本更改了此值但是SQLAlchemy的方言没有进行调整，可以在此处传递此值。
- en: New in version 1.3.9.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3.9版本中的新内容。
- en: See also
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`create_engine.label_length`](#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine")'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.label_length`](#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine")'
- en: '`max_overflow=10` – the number of connections to allow in connection pool “overflow”,
    that is connections that can be opened above and beyond the pool_size setting,
    which defaults to five. this is only used with [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool").'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_overflow=10` – 允许在连接池“溢出”中打开的连接数，即在池大小设置之上可以打开的连接数，默认为五。仅与[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")一起使用。'
- en: '`module=None` – reference to a Python module object (the module itself, not
    its string name). Specifies an alternate DBAPI module to be used by the engine’s
    dialect. Each sub-dialect references a specific DBAPI which will be imported before
    first connect. This parameter causes the import to be bypassed, and the given
    module to be used instead. Can be used for testing of DBAPIs as well as to inject
    “mock” DBAPI implementations into the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module=None` – Python模块对象的引用（模块本身，而不是其字符串名称）。指定引擎方言要使用的替代DBAPI模块。每个子方言引用一个特定的DBAPI，将在首次连接之前导入。此参数导致导入被绕过，并且使用给定模块代替。可以用于测试DBAPI以及将“模拟”DBAPI实现注入到[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")中。'
- en: '`paramstyle=None` – The [paramstyle](https://legacy.python.org/dev/peps/pep-0249/#paramstyle)
    to use when rendering bound parameters. This style defaults to the one recommended
    by the DBAPI itself, which is retrieved from the `.paramstyle` attribute of the
    DBAPI. However, most DBAPIs accept more than one paramstyle, and in particular
    it may be desirable to change a “named” paramstyle into a “positional” one, or
    vice versa. When this attribute is passed, it should be one of the values `"qmark"`,
    `"numeric"`, `"named"`, `"format"` or `"pyformat"`, and should correspond to a
    parameter style known to be supported by the DBAPI in use.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paramstyle=None` – 渲染绑定参数时要使用的[paramstyle](https://legacy.python.org/dev/peps/pep-0249/#paramstyle)。此样式默认为DBAPI本身推荐的样式，从DBAPI的`.paramstyle`属性中检索。然而，大多数DBAPI接受多种paramstyle，特别是可能希望将“命名”paramstyle转换为“位置”paramstyle，反之亦然。当传递此属性时，它应该是值之一`"qmark"`、`"numeric"`、`"named"`、`"format"`或`"pyformat"`，并且应该对应于DBAPI已知支持的参数样式。'
- en: '`pool=None` – an already-constructed instance of [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"), such as a [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") instance. If non-None, this pool will be used directly
    as the underlying connection pool for the engine, bypassing whatever connection
    parameters are present in the URL argument. For information on constructing connection
    pools manually, see [Connection Pooling](pooling.html).'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool=None` – 已构造的[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实例，例如[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")实例。如果非None，则此池将直接用作引擎的底层连接池，绕过URL参数中存在的任何连接参数。有关手动构建连接池的信息，请参见[连接池](pooling.html)。'
- en: '`poolclass=None` – a [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    subclass, which will be used to create a connection pool instance using the connection
    parameters given in the URL. Note this differs from `pool` in that you don’t actually
    instantiate the pool in this case, you just indicate what type of pool to be used.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poolclass=None` – [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")子类，将使用URL中给定的连接参数创建连接池实例。请注意，这与`pool`不同，因为在这种情况下您实际上不会实例化池，只是指示要使用哪种类型的池。'
- en: '`pool_logging_name` –'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_logging_name` –'
- en: String identifier which will be used within the “name” field of logging records
    generated within the “sqlalchemy.pool” logger. Defaults to a hexstring of the
    object’s id.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将在“sqlalchemy.pool”记录生成的“name”字段中使用的字符串标识符。默认为对象的id的十六进制字符串。
- en: See also
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 关于如何配置日志记录的更多细节。'
- en: '`pool_pre_ping` –'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_pre_ping` –'
- en: boolean, if True will enable the connection pool “pre-ping” feature that tests
    connections for liveness upon each checkout.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值，如果为True，则启用连接池的“预检”功能，即在每次检出时测试连接的活动性。
- en: New in version 1.2.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.2版中的新功能。
- en: See also
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Disconnect Handling - Pessimistic](pooling.html#pool-disconnects-pessimistic)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[断开处理 - 悲观](pooling.html#pool-disconnects-pessimistic)'
- en: '`pool_size=5` – the number of connections to keep open inside the connection
    pool. This used with [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    as well as [`SingletonThreadPool`](pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool"). With [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"), a `pool_size` setting of 0 indicates no limit; to
    disable pooling, set `poolclass` to [`NullPool`](pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") instead.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_size=5` – 在连接池中保持打开的连接数。这与[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")以及[`SingletonThreadPool`](pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")一起使用。对于[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")，设置`pool_size`为 0 表示没有限制；要禁用池化，请将`poolclass`设置为[`NullPool`](pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")。'
- en: '`pool_recycle=-1` –'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_recycle=-1` –'
- en: this setting causes the pool to recycle connections after the given number of
    seconds has passed. It defaults to -1, or no timeout. For example, setting to
    3600 means connections will be recycled after one hour. Note that MySQL in particular
    will disconnect automatically if no activity is detected on a connection for eight
    hours (although this is configurable with the MySQLDB connection itself and the
    server configuration as well).
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此设置在给定的秒数过去后导致池回收连接。默认为 -1，或无超时。例如，将其设置为 3600 表示一小时后将回收连接。请注意，特别是 MySQL 将在连接上没有检测到活动时自动断开连接八小时（虽然这可以通过
    MySQLDB 连接本身和服务器配置进行配置）。
- en: See also
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Pool Recycle](pooling.html#pool-setting-recycle)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置池回收](pooling.html#pool-setting-recycle)'
- en: '`pool_reset_on_return=''rollback''` –'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_reset_on_return=''rollback''` –'
- en: set the [`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter of the underlying [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") object, which can be set to the values `"rollback"`, `"commit"`,
    or `None`.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置底层[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")对象的[`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数，可以设置为值`"rollback"`、`"commit"`或`None`。
- en: See also
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reset On Return](pooling.html#pool-reset-on-return)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[归还时重置](pooling.html#pool-reset-on-return)'
- en: '`pool_timeout=30` –'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_timeout=30` –'
- en: number of seconds to wait before giving up on getting a connection from the
    pool. This is only used with [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"). This can be a float but is subject to the limitations
    of Python time functions which may not be reliable in the tens of milliseconds.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从池中获取连接之前等待的秒数。仅与[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")一起使用。可以是浮点数，但受
    Python 时间函数的限制，可能不可靠达到几十毫秒。
- en: '`pool_use_lifo=False` –'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_use_lifo=False` –'
- en: use LIFO (last-in-first-out) when retrieving connections from [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") instead of FIFO (first-in-first-out). Using LIFO,
    a server-side timeout scheme can reduce the number of connections used during
    non- peak periods of use. When planning for server-side timeouts, ensure that
    a recycle or pre-ping strategy is in use to gracefully handle stale connections.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")检索连接时使用
    LIFO（后进先出）而不是 FIFO（先进先出）。使用 LIFO，服务器端超时方案可以在非高峰使用期间减少使用的连接数。在规划服务器端超时时，请确保使用回收或预先
    ping 策略优雅地处理过时的连接。
- en: New in version 1.3.
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自版本 1.3 新增。
- en: ''
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Using FIFO vs. LIFO](pooling.html#pool-use-lifo)'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[使用 FIFO vs. LIFO](pooling.html#pool-use-lifo)'
- en: ''
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Dealing with Disconnects](pooling.html#pool-disconnects)'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[处理断开连接](pooling.html#pool-disconnects)'
- en: '`plugins` –'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugins` –'
- en: string list of plugin names to load. See [`CreateEnginePlugin`](connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") for background.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要加载的插件名称字符串列表。请参阅[`CreateEnginePlugin`](connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")获取背景信息。
- en: New in version 1.2.3.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 1.2.3 新增。
- en: '`query_cache_size` –'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_cache_size` –'
- en: size of the cache used to cache the SQL string form of queries. Set to zero
    to disable caching.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于缓存查询的 SQL 字符串形式的缓存大小。设置为零以禁用缓存。
- en: The cache is pruned of its least recently used items when its size reaches N
    * 1.5\. Defaults to 500, meaning the cache will always store at least 500 SQL
    statements when filled, and will grow up to 750 items at which point it is pruned
    back down to 500 by removing the 250 least recently used items.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当缓存大小达到 N * 1.5 时，将剪辑其最近最少使用的项。默认为 500，这意味着当填充时，缓存将始终存储至少 500 条 SQL 语句，并且将增长到
    750 项，然后通过删除最近最少使用的 250 项将其剪裁回 500。
- en: Caching is accomplished on a per-statement basis by generating a cache key that
    represents the statement’s structure, then generating string SQL for the current
    dialect only if that key is not present in the cache. All statements support caching,
    however some features such as an INSERT with a large set of parameters will intentionally
    bypass the cache. SQL logging will indicate statistics for each statement whether
    or not it were pull from the cache.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缓存是通过生成代表语句结构的缓存键来实现的，然后仅当该键不存在于缓存中时，才为当前方言生成字符串 SQL。所有语句都支持缓存，但是某些功能，例如具有大量参数的
    INSERT 操作，将有意绕过缓存。SQL 记录将指示每个语句的统计信息，无论是否从缓存中获取。
- en: Note
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: some ORM functions related to unit-of-work persistence as well as some attribute
    loading strategies will make use of individual per-mapper caches outside of the
    main cache.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些与工作单元持久性相关的 ORM 函数以及一些属性加载策略将使用主缓存之外的每个映射器的个别缓存。
- en: See also
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQL 编译缓存](connections.html#sql-caching)'
- en: New in version 1.4.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能。
- en: '`use_insertmanyvalues` –'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_insertmanyvalues` –'
- en: True by default, use the “insertmanyvalues” execution style for INSERT..RETURNING
    statements by default.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 True，对于 INSERT..RETURNING 语句，默认使用“insertmanyvalues”执行样式。
- en: New in version 2.0.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: See also
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关于 INSERT 语句的“Insert Many Values”行为](connections.html#engine-insertmanyvalues)'
- en: '[PRE17]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a new Engine instance using a configuration dictionary.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置字典创建一个新的 Engine 实例。
- en: The dictionary is typically produced from a config file.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 该字典通常由配置文件生成。
- en: The keys of interest to `engine_from_config()` should be prefixed, e.g. `sqlalchemy.url`,
    `sqlalchemy.echo`, etc. The ‘prefix’ argument indicates the prefix to be searched
    for. Each matching key (after the prefix is stripped) is treated as though it
    were the corresponding keyword argument to a [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`engine_from_config()`感兴趣的键应添加前缀，例如`sqlalchemy.url`，`sqlalchemy.echo`等。 ‘prefix’参数表示要搜索的前缀。每个匹配的键（在剥离前缀后）都被视为对[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")调用的相应关键字参数。
- en: The only required key is (assuming the default prefix) `sqlalchemy.url`, which
    provides the [database URL](#database-urls).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一必需的键是（假设默认前缀为）`sqlalchemy.url`，它提供了[数据库 URL](#database-urls)。
- en: A select set of keyword arguments will be “coerced” to their expected type based
    on string values. The set of arguments is extensible per-dialect using the `engine_config_types`
    accessor.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一组关键字参数将基于字符串值“强制转换”为其预期类型。每个方言可以使用`engine_config_types`访问器进行参数集的可扩展。
- en: 'Parameters:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`configuration` – A dictionary (typically produced from a config file, but
    this is not a requirement). Items whose keys start with the value of ‘prefix’
    will have that prefix stripped, and will then be passed to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine").'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration` – 一个字典（通常从配置文件生成，但这不是必需的）。其键以“prefix”值开头的项目将剥离该前缀，然后将传递给[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。'
- en: '`prefix` – Prefix to match and then strip from keys in ‘configuration’.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefix` – 匹配并从‘configuration’中的键中剥离的前缀。'
- en: '`kwargs` – Each keyword argument to `engine_from_config()` itself overrides
    the corresponding item taken from the ‘configuration’ dictionary. Keyword arguments
    should *not* be prefixed.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – `engine_from_config()`的每个关键字参数本身都会覆盖从‘configuration’字典中获取的相应项目。关键字参数不应添加前缀。'
- en: '[PRE18]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Create a “mock” engine used for echoing DDL.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于回显 DDL 的“模拟”引擎。
- en: This is a utility function used for debugging or storing the output of DDL sequences
    as generated by [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and related methods.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于调试或存储由[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")及其相关方法生成的 DDL 序列输出的实用函数。
- en: The function accepts a URL which is used only to determine the kind of dialect
    to be used, as well as an “executor” callable function which will receive a SQL
    expression object and parameters, which can then be echoed or otherwise printed.
    The executor’s return value is not handled, nor does the engine allow regular
    string statements to be invoked, and is therefore only useful for DDL that is
    sent to the database without receiving any results.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个URL，仅用于确定要使用的方言类型，以及一个“executor”可调用函数，该函数将接收SQL表达式对象和参数，然后可以回显或以其他方式打印。执行者的返回值不受处理，引擎也不允许调用常规字符串语句，因此仅在将DDL发送到数据库而不接收任何结果时有用。
- en: 'E.g.:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE19]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Parameters:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`url` – A string URL which typically needs to contain only the database backend
    name.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url` - 一个字符串URL，通常只需包含数据库后端名称。'
- en: '`executor` – a callable which receives the arguments `sql`, `*multiparams`
    and `**params`. The `sql` parameter is typically an instance of [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"), which can then be compiled into a string
    using `ExecutableDDLElement.compile()`.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executor` - 一个可调用对象，接收参数`sql`，`*multiparams`和`**params`。`sql`参数通常是[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")的实例，可以使用`ExecutableDDLElement.compile()`编译成字符串。'
- en: 'New in version 1.4: - the [`create_mock_engine()`](#sqlalchemy.create_mock_engine
    "sqlalchemy.create_mock_engine") function replaces the previous “mock” engine
    strategy used with [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine").'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增：- [`create_mock_engine()`](#sqlalchemy.create_mock_engine "sqlalchemy.create_mock_engine")函数替换了以前与[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")一起使用的“模拟”引擎策略。
- en: See also
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How can I get the CREATE TABLE/ DROP TABLE output as a string?](../faq/metadata_schema.html#faq-ddl-as-string)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将CREATE TABLE / DROP TABLE输出为字符串？](../faq/metadata_schema.html#faq-ddl-as-string)'
- en: '[PRE20]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Given a string, produce a new URL instance.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串，生成一个新的URL实例。
- en: The format of the URL generally follows [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt),
    with some exceptions, including that underscores, and not dashes or periods, are
    accepted within the “scheme” portion.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: URL的格式通常遵循[RFC-1738](https://www.ietf.org/rfc/rfc1738.txt)，但也有一些例外，包括“scheme”部分接受下划线而不是破折号或句点。
- en: If a [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object is passed,
    it is returned as is.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象，则原样返回。
- en: See also
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Database URLs](#database-urls)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据库URL](#database-urls)'
- en: '[PRE21]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create a pool instance from the given url.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的url创建一个池实例。
- en: If `poolclass` is not provided the pool class used is selected using the dialect
    specified in the URL.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未提供`poolclass`，则使用URL中指定的方言选择要使用的池类。
- en: The arguments passed to [`create_pool_from_url()`](#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") are identical to the pool argument passed to
    the [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`create_pool_from_url()`](#sqlalchemy.create_pool_from_url "sqlalchemy.create_pool_from_url")的参数与传递给[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")函数的池参数相同。
- en: New in version 2.0.10.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.10中新增。
- en: '[PRE22]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Represent the components of a URL used to connect to a database.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 表示用于连接到数据库的URL的各个组件。
- en: URLs are typically constructed from a fully formatted URL string, where the
    [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url") function
    is used internally by the [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function in order to parse the URL string into its individual components, which
    are then used to construct a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object. When parsing from a formatted URL string, the parsing format generally
    follows [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt), with some exceptions.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: URL通常是从完整格式的URL字符串构建的，其中[`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")函数在内部由[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")函数使用，以将URL字符串解析为其各个组件，然后用于构建新的[`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象。当从格式化的URL字符串解析时，解析格式通常遵循[RFC-1738](https://www.ietf.org/rfc/rfc1738.txt)，但也有一些例外情况。
- en: A [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object may also be
    produced directly, either by using the [`make_url()`](#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") function with a fully formed URL string, or by using
    the [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    constructor in order to construct a [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    programmatically given individual fields. The resulting [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object may be passed directly to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") in place of a string argument, which will bypass the
    usage of [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    within the engine’s creation process.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接生成 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，方法是使用带有完整形式
    URL 字符串的 [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    函数，或者使用 [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    构造函数以编程方式给出单个字段来构造 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")。生成的
    [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象可以直接传递给 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 以替代字符串参数，这将绕过引擎创建过程中 [`make_url()`](#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") 的使用。
- en: 'Changed in version 1.4: The [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object is now an immutable object. To create a URL, use the [`make_url()`](#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") or [`URL.create()`](#sqlalchemy.engine.URL.create
    "sqlalchemy.engine.URL.create") function / method. To modify a [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"), use methods like [`URL.set()`](#sqlalchemy.engine.URL.set
    "sqlalchemy.engine.URL.set") and [`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict
    "sqlalchemy.engine.URL.update_query_dict") to return a new [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object with modifications. See notes for this change
    at [The URL object is now immutable](../changelog/migration_14.html#change-5526).'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象现在是不可变的对象。要创建
    URL，请使用 [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    或 [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    函数/方法。要修改 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")，请使用类似 [`URL.set()`](#sqlalchemy.engine.URL.set
    "sqlalchemy.engine.URL.set") 和 [`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict
    "sqlalchemy.engine.URL.update_query_dict") 的方法返回带有修改的新 [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象。有关此更改的注释，请参阅 [URL 对象现在是不可变的](../changelog/migration_14.html#change-5526)。
- en: See also
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Database URLs](#database-urls)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据库 URL](#database-urls)'
- en: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") contains the following
    attributes:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 包含以下属性：'
- en: '[`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername"):
    database backend and driver name, such as `postgresql+psycopg2`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername"):
    数据库后端和驱动程序名称，例如 `postgresql+psycopg2`'
- en: '[`URL.username`](#sqlalchemy.engine.URL.username "sqlalchemy.engine.URL.username"):
    username string'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.username`](#sqlalchemy.engine.URL.username "sqlalchemy.engine.URL.username"):
    用户名字符串'
- en: '[`URL.password`](#sqlalchemy.engine.URL.password "sqlalchemy.engine.URL.password"):
    password string'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.password`](#sqlalchemy.engine.URL.password "sqlalchemy.engine.URL.password"):
    密码字符串'
- en: '[`URL.host`](#sqlalchemy.engine.URL.host "sqlalchemy.engine.URL.host"): string
    hostname'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.host`](#sqlalchemy.engine.URL.host "sqlalchemy.engine.URL.host"): 字符串主机名'
- en: '[`URL.port`](#sqlalchemy.engine.URL.port "sqlalchemy.engine.URL.port"): integer
    port number'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.port`](#sqlalchemy.engine.URL.port "sqlalchemy.engine.URL.port"): 整数端口号'
- en: '[`URL.database`](#sqlalchemy.engine.URL.database "sqlalchemy.engine.URL.database"):
    string database name'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.database`](#sqlalchemy.engine.URL.database "sqlalchemy.engine.URL.database"):
    字符串数据库名称'
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query"):
    an immutable mapping representing the query string. contains strings for keys
    and either strings or tuples of strings for values.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query"):
    表示查询字符串的不可变映射。包含键的字符串和值的字符串或字符串元组。'
- en: '**Members**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[create()](#sqlalchemy.engine.URL.create), [database](#sqlalchemy.engine.URL.database),
    [difference_update_query()](#sqlalchemy.engine.URL.difference_update_query), [drivername](#sqlalchemy.engine.URL.drivername),
    [get_backend_name()](#sqlalchemy.engine.URL.get_backend_name), [get_dialect()](#sqlalchemy.engine.URL.get_dialect),
    [get_driver_name()](#sqlalchemy.engine.URL.get_driver_name), [host](#sqlalchemy.engine.URL.host),
    [normalized_query](#sqlalchemy.engine.URL.normalized_query), [password](#sqlalchemy.engine.URL.password),
    [port](#sqlalchemy.engine.URL.port), [query](#sqlalchemy.engine.URL.query), [render_as_string()](#sqlalchemy.engine.URL.render_as_string),
    [set()](#sqlalchemy.engine.URL.set), [translate_connect_args()](#sqlalchemy.engine.URL.translate_connect_args),
    [update_query_dict()](#sqlalchemy.engine.URL.update_query_dict), [update_query_pairs()](#sqlalchemy.engine.URL.update_query_pairs),
    [update_query_string()](#sqlalchemy.engine.URL.update_query_string), [username](#sqlalchemy.engine.URL.username)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[create()](#sqlalchemy.engine.URL.create), [database](#sqlalchemy.engine.URL.database),
    [difference_update_query()](#sqlalchemy.engine.URL.difference_update_query), [drivername](#sqlalchemy.engine.URL.drivername),
    [get_backend_name()](#sqlalchemy.engine.URL.get_backend_name), [get_dialect()](#sqlalchemy.engine.URL.get_dialect),
    [get_driver_name()](#sqlalchemy.engine.URL.get_driver_name), [host](#sqlalchemy.engine.URL.host),
    [normalized_query](#sqlalchemy.engine.URL.normalized_query), [password](#sqlalchemy.engine.URL.password),
    [port](#sqlalchemy.engine.URL.port), [query](#sqlalchemy.engine.URL.query), [render_as_string()](#sqlalchemy.engine.URL.render_as_string),
    [set()](#sqlalchemy.engine.URL.set), [translate_connect_args()](#sqlalchemy.engine.URL.translate_connect_args),
    [update_query_dict()](#sqlalchemy.engine.URL.update_query_dict), [update_query_pairs()](#sqlalchemy.engine.URL.update_query_pairs),
    [update_query_string()](#sqlalchemy.engine.URL.update_query_string), [username](#sqlalchemy.engine.URL.username)'
- en: '**Class signature**'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    (`builtins.tuple`)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") (`builtins.tuple`)
- en: '[PRE23]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Create a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象。
- en: See also
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Database URLs](#database-urls)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据库URL](#database-urls)'
- en: 'Parameters:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`drivername` – the name of the database backend. This name will correspond
    to a module in sqlalchemy/databases or a third party plug-in.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drivername` – 数据库后端的名称。该名称将对应于sqlalchemy/databases模块中的一个模块或第三方插件。'
- en: '`username` – The user name.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username` – 用户名。'
- en: '`password` –'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password` –'
- en: database password. Is typically a string, but may also be an object that can
    be stringified with `str()`.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库密码。通常是一个字符串，但也可以是可以用`str()`字符串化的对象。
- en: Note
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The password string should **not** be URL encoded when passed as an argument
    to [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create");
    the string should contain the password characters exactly as they would be typed.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为参数传递给[`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")时，密码字符串不应该进行URL编码；该字符串应该包含与用户输入一致的密码字符。
- en: Note
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: A password-producing object will be stringified only **once** per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object. For dynamic password generation per connect,
    see [Generating dynamic authentication tokens](#engines-dynamic-tokens).
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象只会对密码生成对象进行一次字符串化。对于每次连接的动态密码生成，请参见[生成动态认证令牌](#engines-dynamic-tokens)。
- en: '`host` – The name of the host.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host` – 主机名。'
- en: '`port` – The port number.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port` – 端口号。'
- en: '`database` – The database name.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database` – 数据库名称。'
- en: '`query` – A dictionary of string keys to string values to be passed to the
    dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python
    DBAPI directly, use the [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") parameter to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). See also [`URL.normalized_query`](#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query") for a dictionary that is consistently
    string->list of string.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` – 一个将要传递给方言和/或DBAPI的字符串键到字符串值的字典。要直接指定非字符串参数给Python DBAPI，使用[`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")参数传递给[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。另请参见[`URL.normalized_query`](#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query")，用于一个一致为字符串->字符串列表的字典。'
- en: 'Returns:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象。
- en: 'New in version 1.4: The [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object is now an **immutable named tuple**. In addition, the `query` dictionary
    is also immutable. To create a URL, use the `make_url()` or [`URL.create()`](#sqlalchemy.engine.URL.create
    "sqlalchemy.engine.URL.create") function/ method. To modify a [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"), use the [`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")
    and `URL.update_query()` methods.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能：[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象现在是**不可变命名元组**。此外，`query`字典也是不可变的。要创建URL，请使用`make_url()`或[`URL.create()`](#sqlalchemy.engine.URL.create
    "sqlalchemy.engine.URL.create")函数/方法。要修改[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")，请使用[`URL.set()`](#sqlalchemy.engine.URL.set
    "sqlalchemy.engine.URL.set")和`URL.update_query()`方法。
- en: '[PRE24]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: database name
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库名称
- en: '[PRE25]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Remove the given names from the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    dictionary, returning the new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL").
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 从[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")字典中删除给定名称，返回新的[`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")。
- en: 'E.g.:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE26]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Equivalent to using [`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")
    as follows:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于使用[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")如下：
- en: '[PRE27]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: New in version 1.4.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: See also
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
- en: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
- en: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
- en: '[PRE28]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: database backend and driver name, such as `postgresql+psycopg2`
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库后端和驱动程序名称，如`postgresql+psycopg2`
- en: '[PRE29]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Return the backend name.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 返回后端名称。
- en: This is the name that corresponds to the database backend in use, and is the
    portion of the [`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")
    that is to the left of the plus sign.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与使用的数据库后端对应的名称，是[`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")中加号左侧的部分。
- en: '[PRE30]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Return the SQLAlchemy [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    class corresponding to this URL’s driver name.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此URL的驱动程序名称对应的SQLAlchemy [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")类。
- en: '[PRE31]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Return the backend name.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 返回后端名称。
- en: This is the name that corresponds to the DBAPI driver in use, and is the portion
    of the [`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")
    that is to the right of the plus sign.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与使用的DBAPI驱动程序对应的名称，是[`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")中加号右侧的部分。
- en: If the [`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")
    does not include a plus sign, then the default [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") for this [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    is imported in order to get the driver name.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")不包含加号，则导入此[`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的默认[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以获取驱动程序名称。
- en: '[PRE32]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: hostname or IP number. May also be a data source name for some drivers.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 主机名或IP地址。对于某些驱动程序，也可以是数据源名称。
- en: '[PRE33]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Return the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    dictionary with values normalized into sequences.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 返回带有值规范化为序列的[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")字典。
- en: 'As the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    dictionary may contain either string values or sequences of string values to differentiate
    between parameters that are specified multiple times in the query string, code
    that needs to handle multiple parameters generically will wish to use this attribute
    so that all parameters present are presented as sequences. Inspiration is from
    Python’s `urllib.parse.parse_qs` function. E.g.:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")字典可能包含字符串值或字符串值序列，以区分在查询字符串中多次指定的参数，需要通用处理多个参数的代码将希望使用此属性，以便所有存在的参数都呈现为序列。灵感来自Python的`urllib.parse.parse_qs`函数。例如：
- en: '[PRE34]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: password, which is normally a string but may also be any object that has a `__str__()`
    method.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 密码，通常是字符串，但也可以是具有`__str__()`方法的任何对象。
- en: '[PRE36]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: integer port number
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 整数端口号
- en: '[PRE37]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'an immutable mapping representing the query string. contains strings for keys
    and either strings or tuples of strings for values, e.g.:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 表示查询字符串的不可变映射。键包含字符串，值为字符串或字符串元组，例如：
- en: '[PRE38]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: See also
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.normalized_query`](#sqlalchemy.engine.URL.normalized_query "sqlalchemy.engine.URL.normalized_query")
    - normalizes all values into sequences for consistent processing'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.normalized_query`](#sqlalchemy.engine.URL.normalized_query "sqlalchemy.engine.URL.normalized_query")
    - 将所有值标准化为序列以进行一致处理。'
- en: 'Methods for altering the contents of [`URL.query`](#sqlalchemy.engine.URL.query
    "sqlalchemy.engine.URL.query"):'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 更改 [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    内容的方法：
- en: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
- en: '[`URL.update_query_string()`](#sqlalchemy.engine.URL.update_query_string "sqlalchemy.engine.URL.update_query_string")'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_string()`](#sqlalchemy.engine.URL.update_query_string "sqlalchemy.engine.URL.update_query_string")'
- en: '[`URL.update_query_pairs()`](#sqlalchemy.engine.URL.update_query_pairs "sqlalchemy.engine.URL.update_query_pairs")'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_pairs()`](#sqlalchemy.engine.URL.update_query_pairs "sqlalchemy.engine.URL.update_query_pairs") '
- en: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
- en: '[PRE39]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Render this [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object as
    a string.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染此 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象为字符串。
- en: This method is used when the `__str__()` or `__repr__()` methods are used. The
    method directly includes additional options.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在使用 `__str__()` 或 `__repr__()` 方法时使用。该方法直接包括附加选项。
- en: 'Parameters:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**hide_password** – Defaults to True. The password is not shown in the string
    unless this is set to False.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**hide_password** – 默认为True。除非设置为False，否则不显示密码。'
- en: '[PRE40]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: return a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    with modifications.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有修改的新 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象。
- en: Values are used if they are non-None. To set a value to `None` explicitly, use
    the `URL._replace()` method adapted from `namedtuple`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果非空则使用值。要明确将值设置为 `None`，请使用从 `namedtuple` 转换的 `URL._replace()` 方法。
- en: 'Parameters:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`drivername` – new drivername'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drivername` – 新驱动名称'
- en: '`username` – new username'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username` – 新的用户名'
- en: '`password` – new password'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password` – 新密码'
- en: '`host` – new hostname'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host` – 新的主机名'
- en: '`port` – new port'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port` – 新端口'
- en: '`query` – new query parameters, passed a dict of string keys referring to string
    or sequence of string values. Fully replaces the previous list of arguments.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` – 新的查询参数，传递一个字符串键的字典，引用字符串或字符串值的序列。完全替换之前的参数列表。'
- en: 'Returns:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 新 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象。
- en: New in version 1.4.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: See also
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
- en: '[PRE41]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Translate url attributes into a dictionary of connection arguments.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 将 url 属性转换为连接参数的字典。
- en: Returns attributes of this url (host, database, username, password, port) as
    a plain dictionary. The attribute names are used as the keys by default. Unset
    or false attributes are omitted from the final dictionary.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 url 的属性（主机、数据库、用户名、密码、端口）作为普通字典返回。默认情况下，属性名称用作键。未设置或为假的属性将从最终字典中省略。
- en: 'Parameters:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`**kw` – Optional, alternate key names for url attributes.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 可选，用于 url 属性的替代键名。'
- en: '`names` – Deprecated. Same purpose as the keyword-based alternate names, but
    correlates the name to the original positionally.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`names` – 已弃用。与基于关键字的替代名称具有相同目的，但将名称与原始位置相关联。'
- en: '[PRE42]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Return a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    with the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    parameter dictionary updated by the given dictionary.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，其 [`URL.query`](#sqlalchemy.engine.URL.query
    "sqlalchemy.engine.URL.query") 参数字典由给定字典更新。
- en: The dictionary typically contains string keys and string values. In order to
    represent a query parameter that is expressed multiple times, pass a sequence
    of string values.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 字典通常包含字符串键和字符串值。为了表示多次表达的查询参数，请传递字符串值序列。
- en: 'E.g.:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE43]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Parameters:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`query_parameters` – A dictionary with string keys and values that are either
    strings, or sequences of strings.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_parameters` – 具有字符串键和字符串或字符串序列值的字典。'
- en: '`append` – if True, parameters in the existing query string will not be removed;
    new parameters will be in addition to those present. If left at its default of
    False, keys present in the given query parameters will replace those of the existing
    query string.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append` – 如果为 True，则现有查询字符串中的参数不会被删除；新参数将添加到已有参数之后。如果保持默认值 False，则给定查询参数中的键将替换现有查询字符串中的键。'
- en: New in version 1.4.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中添加。
- en: See also
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
- en: '[`URL.update_query_string()`](#sqlalchemy.engine.URL.update_query_string "sqlalchemy.engine.URL.update_query_string")'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_string()`](#sqlalchemy.engine.URL.update_query_string "sqlalchemy.engine.URL.update_query_string")'
- en: '[`URL.update_query_pairs()`](#sqlalchemy.engine.URL.update_query_pairs "sqlalchemy.engine.URL.update_query_pairs")'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_pairs()`](#sqlalchemy.engine.URL.update_query_pairs "sqlalchemy.engine.URL.update_query_pairs")'
- en: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
- en: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
- en: '[PRE44]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Return a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    with the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    parameter dictionary updated by the given sequence of key/value pairs
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，其 [`URL.query`](#sqlalchemy.engine.URL.query
    "sqlalchemy.engine.URL.query") 参数字典由给定的键值对序列更新
- en: 'E.g.:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE45]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Parameters:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`key_value_pairs` – A sequence of tuples containing two strings each.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_value_pairs` – 包含两个字符串的元组序列。'
- en: '`append` – if True, parameters in the existing query string will not be removed;
    new parameters will be in addition to those present. If left at its default of
    False, keys present in the given query parameters will replace those of the existing
    query string.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append` – 如果为 True，则现有查询字符串中的参数不会被删除；新参数将添加到已有参数之后。如果保持默认值 False，则给定查询参数中的键将替换现有查询字符串中的键。'
- en: New in version 1.4.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中添加。
- en: See also
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
- en: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
- en: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
- en: '[PRE46]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Return a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    with the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    parameter dictionary updated by the given query string.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，其 [`URL.query`](#sqlalchemy.engine.URL.query
    "sqlalchemy.engine.URL.query") 参数字典由给定的查询字符串更新。
- en: 'E.g.:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE47]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Parameters:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`query_string` – a URL escaped query string, not including the question mark.'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_string` – 一个 URL 编码的查询字符串，不包括问号。'
- en: '`append` – if True, parameters in the existing query string will not be removed;
    new parameters will be in addition to those present. If left at its default of
    False, keys present in the given query parameters will replace those of the existing
    query string.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append` – 如果为 True，则现有查询字符串中的参数不会被删除；新参数将添加到已有参数之后。如果保持默认值 False，则给定查询参数中的键将替换现有查询字符串中的键。'
- en: New in version 1.4.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中添加。
- en: See also
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
- en: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
- en: '[PRE48]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: username string
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名 字符串
- en: Pooling
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池
- en: The [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    will ask the connection pool for a connection when the `connect()` or `execute()`
    methods are called. The default connection pool, [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"), will open connections to the database on an as-needed
    basis. As concurrent statements are executed, [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") will grow its pool of connections to a default size
    of five, and will allow a default “overflow” of ten. Since the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is essentially “home base” for the connection pool,
    it follows that you should keep a single [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") per database established within an application, rather
    than creating a new one for each connection.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `connect()` 或 `execute()` 方法时，[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 将向连接池请求连接。默认的连接池 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 将根据需要打开到数据库的连接。随着并发语句的执行，[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 将增加其连接池的大小，默认为五个，并允许默认的 "溢出" 十个。由于 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 本质上是连接池的“主基地”，因此在应用程序中应该为每个数据库保留一个单独的 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，而不是为每个连接创建一个新的。
- en: Note
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    is not used by default for SQLite engines. See [SQLite](../dialects/sqlite.html)
    for details on SQLite connection pool usage.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SQLite 引擎不使用 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")。有关
    SQLite 连接池使用的详细信息，请参阅 [SQLite](../dialects/sqlite.html)。
- en: For more information on connection pooling, see [Connection Pooling](pooling.html).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 有关连接池的更多信息，请参阅 [连接池](pooling.html)。
- en: '## Custom DBAPI connect() arguments / on-connect routines'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义 DBAPI connect() 参数 / 连接时例程
- en: For cases where special connection methods are needed, in the vast majority
    of cases, it is most appropriate to use one of several hooks at the [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") level in order to customize this process. These are
    described in the following sub-sections.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要特殊连接方法的情况，在绝大多数情况下，最合适的方法是在 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 级别使用多个钩子来自定义此过程。这些在以下子部分中描述。
- en: Special Keyword Arguments Passed to dbapi.connect()
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 dbapi.connect() 传递的特殊关键字参数
- en: All Python DBAPIs accept additional arguments beyond the basics of connecting.
    Common parameters include those to specify character set encodings and timeout
    values; more complex data includes special DBAPI constants and objects and SSL
    sub-parameters. There are two rudimentary means of passing these arguments without
    complexity.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 Python DBAPI 都接受除了基本连接之外的额外参数。常见参数包括用于指定字符集编码和超时值的参数；更复杂的数据包括特殊的 DBAPI 常量和对象以及
    SSL 子参数。有两种简单的方式可以传递这些参数而不复杂化。
- en: Add Parameters to the URL Query string
  id: totrans-401
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将参数添加到 URL 查询字符串中
- en: 'Simple string values, as well as some numeric values and boolean flags, may
    be often specified in the query string of the URL directly. A common example of
    this is DBAPIs that accept an argument `encoding` for character encodings, such
    as most MySQL DBAPIs:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的字符串值，以及一些数字值和布尔标志，通常可以直接在 URL 的查询字符串中指定。一个常见的例子是接受字符编码参数 `encoding` 的 DBAPI，例如大多数
    MySQL DBAPI：
- en: '[PRE49]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The advantage of using the query string is that additional DBAPI options may
    be specified in configuration files in a manner that’s portable to the DBAPI specified
    in the URL. The specific parameters passed through at this level vary by SQLAlchemy
    dialect. Some dialects pass all arguments through as strings, while others will
    parse for specific datatypes and move parameters to different places, such as
    into driver-level DSNs and connect strings. As per-dialect behavior in this area
    currently varies, the dialect documentation should be consulted for the specific
    dialect in use to see if particular parameters are supported at this level.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 使用查询字符串的优点在于可以在配置文件中指定其他的 DBAPI 选项，这样做的方式在 URL 中指定的 DBAPI 方式是可移植的。在此级别传递的具体参数因
    SQLAlchemy 方言而异。某些方言将所有参数都作为字符串传递，而其他方言将解析特定的数据类型并将参数移动到不同的位置，例如到驱动程序级别的 DSN 和连接字符串中。由于此领域中方言的行为目前存在差异，因此应该查阅特定方言的文档以查看是否支持在此级别上支持特定参数。
- en: Tip
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'A general technique to display the exact arguments passed to the DBAPI for
    a given URL may be performed using the [`Dialect.create_connect_args()`](internals.html#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method directly as follows:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定URL显示传递给DBAPI的确切参数的一般技术可以直接使用[`Dialect.create_connect_args()`](internals.html#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")方法进行如下操作：
- en: '[PRE50]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The above `args, kwargs` pair is normally passed to the DBAPI as `dbapi.connect(*args,
    **kwargs)`.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`args, kwargs`对通常作为`dbapi.connect(*args, **kwargs)`传递给DBAPI。
- en: Use the connect_args dictionary parameter
  id: totrans-409
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用connect_args字典参数
- en: 'A more general system of passing any parameter to the `dbapi.connect()` function
    that is guaranteed to pass all parameters at all times is the [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary parameter. This may be used for parameters
    that are otherwise not handled by the dialect when added to the query string,
    as well as when special sub-structures or objects must be passed to the DBAPI.
    Sometimes it’s just that a particular flag must be sent as the `True` symbol and
    the SQLAlchemy dialect is not aware of this keyword argument to coerce it from
    its string form as presented in the URL. Below illustrates the use of a psycopg2
    “connection factory” that replaces the underlying implementation the connection:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 将任何参数传递给保证在任何时候传递所有参数的`dbapi.connect()`函数的更通用的系统是[`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典参数。这可用于否则不被方言处理的参数添加到查询字符串时，以及当需要将特殊子结构或对象传递给DBAPI时。有时只是需要将特定标志发送为`True`符号，而SQLAlchemy方言并不知道如何将其从URL中呈现的字符串形式强制为此关键字参数。下面说明了使用取代连接的基础实现的psycopg2“连接工厂”的用法：
- en: '[PRE51]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Another example is the pyodbc “timeout” parameter:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是pyodbc的“timeout”参数：
- en: '[PRE52]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The above example also illustrates that both URL “query string” parameters as
    well as [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") may be used at the same time; in the case of pyodbc,
    the “driver” keyword has special meaning within the URL.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例还说明了URL“查询字符串”参数以及[`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")都可以同时使用；在pyodbc的情况下，“driver”关键字在URL中具有特殊含义。
- en: Controlling how parameters are passed to the DBAPI connect() function
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制参数传递给DBAPI connect()函数的方式
- en: 'Beyond manipulating the parameters passed to `connect()`, we can further customize
    how the DBAPI `connect()` function itself is called using the [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") event hook. This hook is passed
    the full `*args, **kwargs` that the dialect would send to `connect()`. These collections
    can then be modified in place to alter how they are used:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 除了操作传递给`connect()`的参数之外，我们还可以使用[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")事件挂钩进一步定制如何调用DBAPI `connect()`函数本身。此挂钩将传递完整的`*args,
    **kwargs`，方言将发送到`connect()`。然后，可以在原地修改这些集合以更改它们的使用方式：
- en: '[PRE53]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '#### Generating dynamic authentication tokens'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 生成动态认证令牌'
- en: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") is also an ideal way to dynamically
    insert an authentication token that might change over the lifespan of an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). For example, if the token gets generated by `get_authentication_token()`
    and passed to the DBAPI in a `token` parameter, this could be implemented as:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")也是一个理想的方法，可以动态插入可能在[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")生命周期内更改的认证令牌。例如，如果令牌由`get_authentication_token()`生成并作为`token`参数传递给DBAPI，则可以实现如下：'
- en: '[PRE54]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: See also
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Connecting to databases with access tokens](../dialects/mssql.html#mssql-pyodbc-access-tokens)
    - a more concrete example involving SQL Server'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用访问令牌连接到数据库](../dialects/mssql.html#mssql-pyodbc-access-tokens) - 一个涉及SQL
    Server的更具体的示例'
- en: Modifying the DBAPI connection after connect, or running commands after connect
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改连接后的DBAPI连接或在连接后运行命令
- en: 'For a DBAPI connection that SQLAlchemy creates without issue, but where we
    would like to modify the completed connection before it’s actually used, such
    as for setting special flags or running certain commands, the [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event hook is the most appropriate hook.
    This hook is called for every new connection created, before it is used by SQLAlchemy:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLAlchemy 创建的 DBAPI 连接，没有问题，但我们希望在实际使用之前修改完成的连接，例如设置特殊标志或运行某些命令，[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") 事件钩子是最合适的钩子。这个钩子在每次创建新连接时都会被调用，在 SQLAlchemy
    使用之前：
- en: '[PRE55]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Fully Replacing the DBAPI `connect()` function
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全替换 DBAPI 的 `connect()` 函数
- en: 'Finally, the [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") event hook can also allow us to
    take over the connection process entirely by establishing the connection and returning
    it:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") 事件钩子也可以允许我们完全接管连接过程，建立连接并返回它：
- en: '[PRE56]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") hook supersedes the previous [`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") hook, which remains available. [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") has the distinct advantage that
    the complete arguments parsed from the URL are also passed to the user-defined
    function which is not the case with [`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine").  ## Configuring Logging'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") 钩子取代了以前的 [`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") 钩子，但前者仍然可用。[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") 具有一个明显的优势，就是解析自 URL 的完整参数也会传递给用户定义的函数，而这在
    [`create_engine.creator`](#sqlalchemy.create_engine.params.creator "sqlalchemy.create_engine")
    中不是这样的。 ## 配置日志记录'
- en: Python’s standard [logging](https://docs.python.org/library/logging.html) module
    is used to implement informational and debug log output with SQLAlchemy. This
    allows SQLAlchemy’s logging to integrate in a standard way with other applications
    and libraries. There are also two parameters [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") present on [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") which allow immediate logging to `sys.stdout` for
    the purposes of local development; these parameters ultimately interact with the
    regular Python loggers described below.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的标准 [logging](https://docs.python.org/library/logging.html) 模块用于实现 SQLAlchemy
    的信息和调试日志输出。这使得 SQLAlchemy 的日志记录可以以标准方式与其他应用程序和库集成。[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 还有两个参数 [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 和 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine")，允许立即将日志记录到 `sys.stdout` 以便进行本地开发；这些参数最终会与下面描述的常规 Python
    记录器交互。
- en: 'This section assumes familiarity with the above linked logging module. All
    logging performed by SQLAlchemy exists underneath the `sqlalchemy` namespace,
    as used by `logging.getLogger(''sqlalchemy'')`. When logging has been configured
    (i.e. such as via `logging.basicConfig()`), the general namespace of SA loggers
    that can be turned on is as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假设您熟悉上面链接的日志记录模块。SQLAlchemy 所执行的所有日志记录都存在于 `sqlalchemy` 命名空间下，就像 `logging.getLogger('sqlalchemy')`
    一样。当配置了日志记录（例如通过 `logging.basicConfig()`），可以打开的 SA 日志记录器的通用命名空间如下：
- en: '`sqlalchemy.engine` - controls SQL echoing. Set to `logging.INFO` for SQL query
    output, `logging.DEBUG` for query + result set output. These settings are equivalent
    to `echo=True` and `echo="debug"` on [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine"), respectively.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.engine` - 控制 SQL 回显。设置为 `logging.INFO` 以输出 SQL 查询，设置为 `logging.DEBUG`
    以输出查询 + 结果集。这些设置等同于 [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 上的 `echo=True` 和 `echo="debug"`。'
- en: '`sqlalchemy.pool` - controls connection pool logging. Set to `logging.INFO`
    to log connection invalidation and recycle events; set to `logging.DEBUG` to additionally
    log all pool checkins and checkouts. These settings are equivalent to `pool_echo=True`
    and `pool_echo="debug"` on [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine"), respectively.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.pool` - 控制连接池日志记录。设置为 `logging.INFO` 以记录连接失效和重用事件；设置为 `logging.DEBUG`
    以另外记录所有池的签入和签出。这些设置等同于在 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") 上分别设置 `pool_echo=True` 和 `pool_echo="debug"`。'
- en: '`sqlalchemy.dialects` - controls custom logging for SQL dialects, to the extent
    that logging is used within specific dialects, which is generally minimal.'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.dialects` - 控制用于 SQL 方言的自定义日志记录，日志记录程度在特定方言中使用的情况下通常很少。'
- en: '`sqlalchemy.orm` - controls logging of various ORM functions to the extent
    that logging is used within the ORM, which is generally minimal. Set to `logging.INFO`
    to log some top-level information on mapper configurations.'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm` - 控制在 ORM 中使用日志记录的各种 ORM 函数的日志记录程度，通常很少。设置为 `logging.INFO`
    以记录一些关于映射器配置的顶级信息。'
- en: 'For example, to log SQL queries using Python logging instead of the `echo=True`
    flag:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用 Python 日志记录而不是 `echo=True` 标志来记录 SQL 查询：
- en: '[PRE57]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: By default, the log level is set to `logging.WARN` within the entire `sqlalchemy`
    namespace so that no log operations occur, even within an application that has
    logging enabled otherwise.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，整个 `sqlalchemy` 命名空间中的日志级别设置为 `logging.WARN`，以便即使在已启用日志记录的应用程序中，也不会发生任何日志操作。
- en: Note
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    conserves Python function call overhead by only emitting log statements when the
    current logging level is detected as `logging.INFO` or `logging.DEBUG`. It only
    checks this level when a new connection is procured from the connection pool.
    Therefore when changing the logging configuration for an already-running application,
    any [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    that’s currently active, or more commonly a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session") object that’s active in a transaction, won’t
    log any SQL according to the new configuration until a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is procured (in the case of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session"), this is after the current transaction ends
    and a new one begins).
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    通过仅在检测到当前日志级别为 `logging.INFO` 或 `logging.DEBUG` 时发出日志语句来节省 Python 函数调用开销。它仅在从连接池获取新连接时检查此级别。因此，在已经运行的应用程序中更改日志配置时，任何当前活动的
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")（通常更常见的是活动事务中的
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.session.Session")
    对象）将根据新配置不会记录任何 SQL，直到获取新的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")（对于 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session")，这是在当前事务结束并开始新事务之后）。
- en: More on the Echo Flag
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于回显标志的更多信息
- en: 'As mentioned previously, the [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") parameters are a shortcut to immediate logging to
    `sys.stdout`:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，[`create_engine.echo`](#sqlalchemy.create_engine.params.echo "sqlalchemy.create_engine")
    和 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool "sqlalchemy.create_engine")
    参数是立即记录到 `sys.stdout` 的快捷方式：
- en: '[PRE58]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Use of these flags is roughly equivalent to:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些标志大致相当于：
- en: '[PRE59]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: It’s important to note that these two flags work **independently** of any existing
    logging configuration, and will make use of `logging.basicConfig()` unconditionally.
    This has the effect of being configured **in addition** to any existing logger
    configurations. Therefore, **when configuring logging explicitly, ensure all echo
    flags are set to False at all times**, to avoid getting duplicate log lines.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这两个标志**独立**于任何现有的日志配置，并且将无条件使用 `logging.basicConfig()`。这会在任何现有的记录器配置之外**额外**进行配置。因此，**在明确配置日志记录时，请始终确保所有回显标志始终设置为
    False**，以避免获得重复的日志行。
- en: Setting the Logging Name
  id: totrans-447
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置日志名称
- en: 'The logger name of instance such as an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    defaults to using a truncated hex identifier string. To set this to a specific
    name, use the [`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") and [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") with [`sqlalchemy.create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"); the name will be appended to the logging name `sqlalchemy.engine.Engine`:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 实例的记录器名称，例如 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 的默认值为使用截断的十六进制标识符字符串。要将其设置为特定名称，请使用
    [`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name "sqlalchemy.create_engine")
    和 [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") 与 [`sqlalchemy.create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")；名称将附加到记录名称 `sqlalchemy.engine.Engine`：
- en: '[PRE60]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Tip
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The [`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") and [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") parameters may also be used in conjunction with [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine"). However, an unavoidable double logging condition
    will occur if other engines are created with echo flags set to True and **no**
    logging name. This is because a handler will be added automatically for `sqlalchemy.engine.Engine`
    which will log messages both for the name-less engine as well as engines with
    logging names. For example:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") 和 [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") 参数也可以与 [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 和 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") 一起使用。但是，如果其他引擎的回声标志设置为 True，而没有记录名称，则将发生不可避免的双重记录条件。这是因为将自动为
    `sqlalchemy.engine.Engine` 添加一个处理程序，该处理程序将同时记录无名称引擎和具有记录名称的引擎的消息。例如：'
- en: '[PRE61]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The above scenario will double log `SELECT 3`. To resolve, ensure all engines
    have a `logging_name` set, or use explicit logger / handler setup without using
    [`create_engine.echo`](#sqlalchemy.create_engine.params.echo "sqlalchemy.create_engine")
    and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool "sqlalchemy.create_engine").
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 上述场景将双重记录 `SELECT 3`。要解决此问题，请确保所有引擎都设置了 `logging_name`，或者使用显式记录器/处理程序设置，而不使用
    [`create_engine.echo`](#sqlalchemy.create_engine.params.echo "sqlalchemy.create_engine")
    和 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool "sqlalchemy.create_engine")。
- en: '### Setting Per-Connection / Sub-Engine Tokens'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '### 设置每个连接/子引擎令牌'
- en: New in version 1.4.0b2.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.0b2 版本中的新功能。
- en: While the logging name is appropriate to establish on an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object that is long lived, it’s not flexible enough
    to accommodate for an arbitrarily large list of names, for the case of tracking
    individual connections and/or transactions in log messages.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 当记录名称适合于在长时间存在的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象上建立时，它并不灵活到足以容纳任意大的名称列表，用于跟踪日志消息中的单个连接和/或事务的情况。
- en: 'For this use case, the log message itself generated by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects may be augmented with additional tokens such
    as transaction or request identifiers. The [`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") parameter accepts a string argument
    that may be used to establish per-connection tracking tokens:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种用例，由 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    和 [`Result`](connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象生成的日志消息本身可以使用其他令牌进行增强，例如事务或请求标识符。 [`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") 参数接受一个字符串参数，该参数可用于建立每个连接的跟踪令牌：
- en: '[PRE62]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The [`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") parameter may also be established
    on engines or sub-engines via [`create_engine.execution_options`](#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"). This may be useful to apply different
    logging tokens to different components of an application without creating new
    engines:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options")参数也可以通过[`create_engine.execution_options`](#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine")或[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")在引擎或子引擎上建立。这可能对应用程序的不同组件应用不同的日志令牌而无需创建新引擎很有用：'
- en: '[PRE63]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Hiding Parameters
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐藏参数
- en: 'The logging emitted by [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") also indicates an excerpt of the SQL parameters that
    are present for a particular statement. To prevent these parameters from being
    logged for privacy purposes, enable the [`create_engine.hide_parameters`](#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine") flag:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")发出的日志还指示了特定语句中存在的
    SQL 参数的摘录。为了防止出于隐私目的记录这些参数，启用[`create_engine.hide_parameters`](#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine")标志：'
- en: '[PRE64]  ## Supported Databases'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE64]  ## 支持的数据库'
- en: SQLAlchemy includes many [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") implementations for various backends. Dialects for
    the most common databases are included with SQLAlchemy; a handful of others require
    an additional install of a separate dialect.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 包括许多用于各种后端的[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")实现。SQLAlchemy
    包含最常见数据库的方言；另外一些需要额外安装单独的方言。
- en: See the section [Dialects](../dialects/index.html) for information on the various
    backends available.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[Dialects](../dialects/index.html)部分，了解可用的各种后端信息。
- en: '## Database URLs'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '## 数据库 URL'
- en: 'The [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function produces an [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object based on a URL. The format of the URL generally follows [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt),
    with some exceptions, including that underscores, not dashes or periods, are accepted
    within the “scheme” portion. URLs typically include username, password, hostname,
    database name fields, as well as optional keyword arguments for additional configuration.
    In some cases a file path is accepted, and in others a “data source name” replaces
    the “host” and “database” portions. The typical form of a database URL is:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")函数基于
    URL 生成一个[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象。URL
    的格式通常遵循[RFC-1738](https://www.ietf.org/rfc/rfc1738.txt)，但也有一些例外，包括“scheme”部分接受下划线而不是破折号或句点。URL
    通常包括用户名、密码、主机名、数据库名字段，以及用于额外配置的可选关键字参数。在某些情况下，接受文件路径，而在其他情况下，“数据源名称”取代“主机”和“数据库”部分。数据库
    URL 的典型形式为：'
- en: '[PRE65]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Dialect names include the identifying name of the SQLAlchemy dialect, a name
    such as `sqlite`, `mysql`, `postgresql`, `oracle`, or `mssql`. The drivername
    is the name of the DBAPI to be used to connect to the database using all lowercase
    letters. If not specified, a “default” DBAPI will be imported if available - this
    default is typically the most widely known driver available for that backend.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 方言名称包括 SQLAlchemy 方言的标识名称，如`sqlite`、`mysql`、`postgresql`、`oracle`或`mssql`。驱动程序名称是用于使用所有小写字母连接到数据库的
    DBAPI 的名称。如果未指定，将导入“默认”DBAPI（如果可用）- 这个默认通常是该后端可用的最广为人知的驱动程序。
- en: Escaping Special Characters such as @ signs in Passwords
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转义特殊字符，如密码中的@符号
- en: When constructing a fully formed URL string to pass to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), **special characters such as those that may be used
    in the user and password need to be URL encoded to be parsed correctly.**. **This
    includes the @ sign**.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建完整的 URL 字符串以传递给[`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")时，**特殊字符（如用户和密码中可能使用的字符）需要进行
    URL 编码以正确解析。**。**这包括@符号**。
- en: 'Below is an example of a URL that includes the password `"kx@jj5/g"`, where
    the “at” sign and slash characters are represented as `%40` and `%2F`, respectively:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包含密码 `"kx@jj5/g"` 的 URL 的示例，其中“at” 符号和斜杠字符分别表示为 `%40` 和 `%2F`：
- en: '[PRE66]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The encoding for the above password can be generated using [urllib.parse](https://docs.python.org/3/library/urllib.parse.html):'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 上述密码的编码可以使用 [urllib.parse](https://docs.python.org/3/library/urllib.parse.html)
    生成：
- en: '[PRE67]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The URL may then be passed as a string to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 URL 可以作为字符串传递给 [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")：
- en: '[PRE68]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: As an alternative to escaping special characters in order to create a complete
    URL string, the object passed to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") may instead be an instance of the [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object, which bypasses the parsing phase and can accommodate
    for unescaped strings directly. See the next section for an example.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 作为在创建完整 URL 字符串时替代转义特殊字符的选择，传递给 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的对象可以是 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象的实例，它绕过了解析阶段，可以直接容纳未转义的字符串。查看下一节以获取示例。
- en: 'Changed in version 1.4: Support for `@` signs in hostnames and database names
    has been fixed. As a side effect of this fix, `@` signs in passwords must be escaped.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的变化：已修复主机名和数据库名中 `@` 符号的支持。作为此修复的副作用，密码中的 `@` 符号必须转义。
- en: Creating URLs Programmatically
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以编程方式创建 URL
- en: The value passed to [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    may be an instance of [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL"),
    instead of a plain string, which bypasses the need for string parsing to be used,
    and therefore does not need an escaped URL string to be provided.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的值可以是 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 的实例，而不是简单的字符串，这样可以绕过使用字符串解析的需要，因此不需要提供转义的
    URL 字符串。
- en: 'The [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object is created
    using the [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    constructor method, passing all fields individually. Special characters such as
    those within passwords may be passed without any modification:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    构造方法创建 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，逐个传递所有字段。密码中的特殊字符可以不作任何修改地传递：
- en: '[PRE69]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The constructed [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    may then be passed directly to [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    in place of a string argument:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 构造的 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象然后可以直接传递给 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 代替字符串参数：
- en: '[PRE70]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: See also
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")'
- en: '[`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")'
- en: Backend-Specific URLs
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特定后端的 URL
- en: Examples for common connection styles follow below. For a full index of detailed
    information on all included dialects as well as links to third-party dialects,
    see [Dialects](../dialects/index.html).
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是常见连接样式的示例。有关所有包含方言的详细信息以及第三方方言的链接的完整索引，请参见 [方言](../dialects/index.html)。
- en: PostgreSQL
  id: totrans-491
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: 'The PostgreSQL dialect uses psycopg2 as the default DBAPI. Other PostgreSQL
    DBAPIs include pg8000 and asyncpg:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言使用 psycopg2 作为默认的 DBAPI。其他 PostgreSQL DBAPI 包括 pg8000 和 asyncpg：
- en: '[PRE71]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: More notes on connecting to PostgreSQL at [PostgreSQL](../dialects/postgresql.html).
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 关于连接到 PostgreSQL 的更多说明请参见 [PostgreSQL](../dialects/postgresql.html)。
- en: MySQL
  id: totrans-495
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MySQL
- en: 'The MySQL dialect uses mysqlclient as the default DBAPI. There are other MySQL
    DBAPIs available, including PyMySQL:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 方言使用 mysqlclient 作为默认的 DBAPI。还有其他可用的 MySQL DBAPI，包括 PyMySQL：
- en: '[PRE72]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: More notes on connecting to MySQL at [MySQL and MariaDB](../dialects/mysql.html).
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 关于连接到 MySQL 的更多说明请参见 [MySQL 和 MariaDB](../dialects/mysql.html)。
- en: Oracle
  id: totrans-499
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Oracle
- en: 'The Oracle dialect uses cx_oracle as the default DBAPI:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 方言使用 cx_oracle 作为默认的 DBAPI：
- en: '[PRE73]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: More notes on connecting to Oracle at [Oracle](../dialects/oracle.html).
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 关于连接到 Oracle 的更多说明请参见 [Oracle](../dialects/oracle.html)。
- en: Microsoft SQL Server
  id: totrans-503
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: 'The SQL Server dialect uses pyodbc as the default DBAPI. pymssql is also available:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 方言使用 pyodbc 作为默认的 DBAPI。pymssql 也可用：
- en: '[PRE74]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: More notes on connecting to SQL Server at [Microsoft SQL Server](../dialects/mssql.html).
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 关于连接到 SQL Server 的更多说明请参见 [Microsoft SQL Server](../dialects/mssql.html)。
- en: SQLite
  id: totrans-507
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite connects to file-based databases, using the Python built-in module `sqlite3`
    by default.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite连接到基于文件的数据库，默认使用Python内置模块`sqlite3`。
- en: 'As SQLite connects to local files, the URL format is slightly different. The
    “file” portion of the URL is the filename of the database. For a relative file
    path, this requires three slashes:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SQLite连接到本地文件，URL格式略有不同。URL的“file”部分是数据库的文件名。对于相对文件路径，这需要三个斜杠：
- en: '[PRE75]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'And for an absolute file path, the three slashes are followed by the absolute
    path:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 对于绝对文件路径，三个斜杠后跟绝对路径：
- en: '[PRE76]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'To use a SQLite `:memory:` database, specify an empty URL:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用SQLite `:memory:`数据库，请指定空URL：
- en: '[PRE77]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: More notes on connecting to SQLite at [SQLite](../dialects/sqlite.html).
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 关于连接到SQLite的更多说明请参见[SQLite](../dialects/sqlite.html)。
- en: Others
  id: totrans-516
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他
- en: See [Dialects](../dialects/index.html), the top-level page for all additional
    dialect documentation.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Dialects](../dialects/index.html)，所有其他方言文档的顶级页面。
- en: Escaping Special Characters such as @ signs in Passwords
  id: totrans-518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转义密码中的特殊字符，例如@符号
- en: When constructing a fully formed URL string to pass to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), **special characters such as those that may be used
    in the user and password need to be URL encoded to be parsed correctly.**. **This
    includes the @ sign**.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造完整的URL字符串以传递给[`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")时，**需要对特殊字符进行URL编码才能正确解析**。**这包括@符号**。
- en: 'Below is an example of a URL that includes the password `"kx@jj5/g"`, where
    the “at” sign and slash characters are represented as `%40` and `%2F`, respectively:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个包含密码`"kx@jj5/g"`的URL示例，其中“at”符号和斜杠字符分别表示为`%40`和`%2F`：
- en: '[PRE78]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The encoding for the above password can be generated using [urllib.parse](https://docs.python.org/3/library/urllib.parse.html):'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 上述密码的编码可以使用[urllib.parse](https://docs.python.org/3/library/urllib.parse.html)生成：
- en: '[PRE79]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The URL may then be passed as a string to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 然后URL可以作为字符串传递给[`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")：
- en: '[PRE80]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: As an alternative to escaping special characters in order to create a complete
    URL string, the object passed to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") may instead be an instance of the [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object, which bypasses the parsing phase and can accommodate
    for unescaped strings directly. See the next section for an example.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 作为在创建完整URL字符串时转义特殊字符的替代方法，传递给[`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")的对象可以是[`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象的实例，它会绕过解析阶段并可以直接适应未转义的字符串。请参阅下一节的示例。
- en: 'Changed in version 1.4: Support for `@` signs in hostnames and database names
    has been fixed. As a side effect of this fix, `@` signs in passwords must be escaped.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：修复了对主机名和数据库名中的`@`符号的支持。由于此修复的副作用，密码中的`@`符号必须转义。
- en: Creating URLs Programmatically
  id: totrans-528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以编程方式创建URL
- en: The value passed to [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    may be an instance of [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL"),
    instead of a plain string, which bypasses the need for string parsing to be used,
    and therefore does not need an escaped URL string to be provided.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")的值可以是[`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的实例，而不是简单的字符串，这将绕过使用字符串解析的需要，因此不需要提供已转义的URL字符串。
- en: 'The [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object is created
    using the [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    constructor method, passing all fields individually. Special characters such as
    those within passwords may be passed without any modification:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象是使用[`URL.create()`](#sqlalchemy.engine.URL.create
    "sqlalchemy.engine.URL.create")构造方法创建的，分别传递所有字段。例如密码中的特殊字符可以直接传递而无需任何修改：'
- en: '[PRE81]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The constructed [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    may then be passed directly to [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    in place of a string argument:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 然后构造的[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象可以直接传递给[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")以替代字符串参数：
- en: '[PRE82]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: See also
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")'
- en: '[`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")'
- en: Backend-Specific URLs
  id: totrans-537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后端特定的URL
- en: Examples for common connection styles follow below. For a full index of detailed
    information on all included dialects as well as links to third-party dialects,
    see [Dialects](../dialects/index.html).
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是常见连接样式的示例。有关所有包含方言的详细信息以及链接到第三方方言的链接的完整索引，请参阅[方言](../dialects/index.html)。
- en: PostgreSQL
  id: totrans-539
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: 'The PostgreSQL dialect uses psycopg2 as the default DBAPI. Other PostgreSQL
    DBAPIs include pg8000 and asyncpg:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言默认使用 psycopg2 作为默认的 DBAPI。其他 PostgreSQL DBAPI 包括 pg8000 和 asyncpg：
- en: '[PRE83]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: More notes on connecting to PostgreSQL at [PostgreSQL](../dialects/postgresql.html).
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 在[PostgreSQL](../dialects/postgresql.html)中有关连接到 PostgreSQL 的更多注意事项。
- en: MySQL
  id: totrans-543
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MySQL
- en: 'The MySQL dialect uses mysqlclient as the default DBAPI. There are other MySQL
    DBAPIs available, including PyMySQL:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 方言默认使用 mysqlclient 作为默认的 DBAPI。还有其他可用的 MySQL DBAPI，包括 PyMySQL：
- en: '[PRE84]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: More notes on connecting to MySQL at [MySQL and MariaDB](../dialects/mysql.html).
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 在[MySQL 和 MariaDB](../dialects/mysql.html)中有关连接到 MySQL 的更多注意事项。
- en: Oracle
  id: totrans-547
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Oracle
- en: 'The Oracle dialect uses cx_oracle as the default DBAPI:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 方言默认使用 cx_oracle 作为默认的 DBAPI：
- en: '[PRE85]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: More notes on connecting to Oracle at [Oracle](../dialects/oracle.html).
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Oracle](../dialects/oracle.html)中有关连接到 Oracle 的更多注意事项。
- en: Microsoft SQL Server
  id: totrans-551
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: 'The SQL Server dialect uses pyodbc as the default DBAPI. pymssql is also available:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 方言默认使用 pyodbc 作为默认的 DBAPI。pymssql 也可用：
- en: '[PRE86]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: More notes on connecting to SQL Server at [Microsoft SQL Server](../dialects/mssql.html).
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Microsoft SQL Server](../dialects/mssql.html)中有关连接到 SQL Server 的更多注意事项。
- en: SQLite
  id: totrans-555
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite connects to file-based databases, using the Python built-in module `sqlite3`
    by default.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 连接到基于文件的数据库，默认情况下使用 Python 内置模块`sqlite3`。
- en: 'As SQLite connects to local files, the URL format is slightly different. The
    “file” portion of the URL is the filename of the database. For a relative file
    path, this requires three slashes:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SQLite 连接到本地文件，URL 格式略有不同。 URL 的“file”部分是数据库的文件名。对于相对文件路径，这需要三个斜杠：
- en: '[PRE87]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'And for an absolute file path, the three slashes are followed by the absolute
    path:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 对于绝对文件路径，三个斜杠后跟绝对路径：
- en: '[PRE88]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'To use a SQLite `:memory:` database, specify an empty URL:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 SQLite `:memory:` 数据库，请指定一个空 URL：
- en: '[PRE89]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: More notes on connecting to SQLite at [SQLite](../dialects/sqlite.html).
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 在[SQLite](../dialects/sqlite.html)中有关连接到 SQLite 的更多注意事项。
- en: Others
  id: totrans-564
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他
- en: See [Dialects](../dialects/index.html), the top-level page for all additional
    dialect documentation.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[方言](../dialects/index.html)，这是所有额外方言文档的顶级页面。
- en: PostgreSQL
  id: totrans-566
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: 'The PostgreSQL dialect uses psycopg2 as the default DBAPI. Other PostgreSQL
    DBAPIs include pg8000 and asyncpg:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言默认使用 psycopg2 作为默认的 DBAPI。其他 PostgreSQL DBAPI 包括 pg8000 和 asyncpg：
- en: '[PRE90]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: More notes on connecting to PostgreSQL at [PostgreSQL](../dialects/postgresql.html).
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 在[PostgreSQL](../dialects/postgresql.html)中有关连接到 PostgreSQL 的更多注意事项。
- en: MySQL
  id: totrans-570
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MySQL
- en: 'The MySQL dialect uses mysqlclient as the default DBAPI. There are other MySQL
    DBAPIs available, including PyMySQL:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 方言默认使用 mysqlclient 作为默认的 DBAPI。还有其他可用的 MySQL DBAPI，包括 PyMySQL：
- en: '[PRE91]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: More notes on connecting to MySQL at [MySQL and MariaDB](../dialects/mysql.html).
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在[MySQL 和 MariaDB](../dialects/mysql.html)中有关连接到 MySQL 的更多注意事项。
- en: Oracle
  id: totrans-574
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Oracle
- en: 'The Oracle dialect uses cx_oracle as the default DBAPI:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 方言默认使用 cx_oracle 作为默认的 DBAPI：
- en: '[PRE92]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: More notes on connecting to Oracle at [Oracle](../dialects/oracle.html).
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Oracle](../dialects/oracle.html)中有关连接到 Oracle 的更多注意事项。
- en: Microsoft SQL Server
  id: totrans-578
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: 'The SQL Server dialect uses pyodbc as the default DBAPI. pymssql is also available:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 方言默认使用 pyodbc 作为默认的 DBAPI。pymssql 也可用：
- en: '[PRE93]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: More notes on connecting to SQL Server at [Microsoft SQL Server](../dialects/mssql.html).
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Microsoft SQL Server](../dialects/mssql.html)中有关连接到 SQL Server 的更多注意事项。
- en: SQLite
  id: totrans-582
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite connects to file-based databases, using the Python built-in module `sqlite3`
    by default.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 连接到基于文件的数据库，默认情况下使用 Python 内置模块`sqlite3`。
- en: 'As SQLite connects to local files, the URL format is slightly different. The
    “file” portion of the URL is the filename of the database. For a relative file
    path, this requires three slashes:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SQLite 连接到本地文件，URL 格式略有不同。 URL 的“file”部分是数据库的文件名。对于相对文件路径，这需要三个斜杠：
- en: '[PRE94]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'And for an absolute file path, the three slashes are followed by the absolute
    path:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 对于绝对文件路径，三个斜杠后跟绝对路径：
- en: '[PRE95]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'To use a SQLite `:memory:` database, specify an empty URL:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 SQLite `:memory:` 数据库，请指定一个空 URL：
- en: '[PRE96]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: More notes on connecting to SQLite at [SQLite](../dialects/sqlite.html).
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 在[SQLite](../dialects/sqlite.html)中有关连接到 SQLite 的更多注意事项。
- en: Others
  id: totrans-591
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他
- en: See [Dialects](../dialects/index.html), the top-level page for all additional
    dialect documentation.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[方言](../dialects/index.html)，这是所有额外方言文档的顶级页面。
- en: '## Engine Creation API'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '## 引擎创建 API'
- en: '| Object Name | Description |'
  id: totrans-594
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-595
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [create_engine](#sqlalchemy.create_engine)(url, **kwargs) | Create a new
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instance. |'
  id: totrans-596
  prefs: []
  type: TYPE_TB
  zh: '| [create_engine](#sqlalchemy.create_engine)(url, **kwargs) | 创建一个新的 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 实例。 |'
- en: '| [create_mock_engine](#sqlalchemy.create_mock_engine)(url, executor, **kw)
    | Create a “mock” engine used for echoing DDL. |'
  id: totrans-597
  prefs: []
  type: TYPE_TB
  zh: '| [create_mock_engine](#sqlalchemy.create_mock_engine)(url, executor, **kw)
    | 创建用于回显 DDL 的“模拟”引擎。 |'
- en: '| [create_pool_from_url](#sqlalchemy.create_pool_from_url)(url, **kwargs) |
    Create a pool instance from the given url. |'
  id: totrans-598
  prefs: []
  type: TYPE_TB
  zh: '| [create_pool_from_url](#sqlalchemy.create_pool_from_url)(url, **kwargs) |
    根据给定的 URL 创建一个池实例。 |'
- en: '| [engine_from_config](#sqlalchemy.engine_from_config)(configuration[, prefix],
    **kwargs) | Create a new Engine instance using a configuration dictionary. |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
  zh: '| [engine_from_config](#sqlalchemy.engine_from_config)(configuration[, prefix],
    **kwargs) | 使用配置字典创建一个新的 Engine 实例。 |'
- en: '| [make_url](#sqlalchemy.engine.make_url)(name_or_url) | Given a string, produce
    a new URL instance. |'
  id: totrans-600
  prefs: []
  type: TYPE_TB
  zh: '| [make_url](#sqlalchemy.engine.make_url)(name_or_url) | 给定一个字符串，生成一个新的 URL
    实例。 |'
- en: '| [URL](#sqlalchemy.engine.URL) | Represent the components of a URL used to
    connect to a database. |'
  id: totrans-601
  prefs: []
  type: TYPE_TB
  zh: '| [URL](#sqlalchemy.engine.URL) | 表示用于连接到数据库的 URL 的组件。 |'
- en: '[PRE97]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Create a new [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instance.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    实例。
- en: 'The standard calling form is to send the [URL](#database-urls) as the first
    positional argument, usually a string that indicates database dialect and connection
    arguments:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的调用形式是将 [URL](#database-urls) 作为第一个位置参数发送，通常是一个指示数据库方言和连接参数的字符串：
- en: '[PRE98]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Note
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please review [Database URLs](#database-urls) for general guidelines in composing
    URL strings. In particular, special characters, such as those often part of passwords,
    must be URL encoded to be properly parsed.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[数据库 URL](#database-urls)以获取编写 URL 字符串的一般准则。特别是，特殊字符（例如密码中经常包含的字符）必须进行 URL
    编码才能正确解析。
- en: 'Additional keyword arguments may then follow it which establish various options
    on the resulting [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and its underlying [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    and [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") constructs:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 随后可以跟随其他关键字参数，这些参数将在生成的 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 及其基础的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 和 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    构造上建立各种选项：
- en: '[PRE99]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: The string form of the URL is `dialect[+driver]://user:password@host/dbname[?key=value..]`,
    where `dialect` is a database name such as `mysql`, `oracle`, `postgresql`, etc.,
    and `driver` the name of a DBAPI, such as `psycopg2`, `pyodbc`, `cx_oracle`, etc.
    Alternatively, the URL can be an instance of [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.url.URL").
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: URL 的字符串形式为 `dialect[+driver]://user:password@host/dbname[?key=value..]`，其中
    `dialect` 是数据库名称，例如 `mysql`、`oracle`、`postgresql` 等，而 `driver` 是 DBAPI 的名称，例如
    `psycopg2`、`pyodbc`、`cx_oracle` 等。另外，URL 还可以是 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.url.URL")
    的实例。
- en: '`**kwargs` takes a wide variety of options which are routed towards their appropriate
    components. Arguments may be specific to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), the underlying [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect"), as well as the [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"). Specific dialects also accept keyword arguments that
    are unique to that dialect. Here, we describe the parameters that are common to
    most [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    usage.'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '`**kwargs` 接受各种路由到其适当组件的选项。参数可能特定于 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、底层 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")，以及 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")。特定方言还接受特定于该方言的关键字参数。在这里，我们描述了大多数
    [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine") 使用的通用参数。'
- en: Once established, the newly resulting [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") will request a connection from the underlying [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") once [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") is called, or a method which depends on it
    such as `Engine.execute()` is invoked. The [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") in turn will establish the first actual DBAPI connection
    when this request is received. The [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call itself does **not** establish any actual DBAPI
    connections directly.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立，新生成的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    将在调用 [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect "sqlalchemy.engine.Engine.connect")
    或依赖于它的方法，例如调用 `Engine.execute()` 时从底层 [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 请求连接。当收到此请求时，[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 反过来将建立第一个实际的 DBAPI 连接。 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 调用本身**不会**直接建立任何实际的 DBAPI 连接。
- en: See also
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Engine Configuration](#)'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '[引擎配置](#)'
- en: '[Dialects](../dialects/index.html)'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '[方言](../dialects/index.html)'
- en: '[Working with Engines and Connections](connections.html)'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用引擎和连接](connections.html)'
- en: 'Parameters:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connect_args` – a dictionary of options which will be passed directly to the
    DBAPI’s `connect()` method as additional keyword arguments. See the example at
    [Custom DBAPI connect() arguments / on-connect routines](#custom-dbapi-args).'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connect_args` – 一个选项字典，将作为额外的关键字参数直接传递给 DBAPI 的 `connect()` 方法。请参阅[自定义 DBAPI
    connect() 参数 / on-connect routines](#custom-dbapi-args)的示例。'
- en: '`creator` –'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creator` –'
- en: a callable which returns a DBAPI connection. This creation function will be
    passed to the underlying connection pool and will be used to create all new database
    connections. Usage of this function causes connection parameters specified in
    the URL argument to be bypassed.
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 DBAPI 连接的可调用对象。此创建函数将传递给底层连接池，并将用于创建所有新的数据库连接。使用此函数会使 URL 参数中指定的连接参数被绕过。
- en: This hook is not as flexible as the newer [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") hook which allows complete control
    over how a connection is made to the database, given the full set of URL arguments
    and state beforehand.
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此钩子不如较新的 [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") 钩子灵活，后者允许完全控制在数据库中如何建立连接，给定全套 URL
    参数和先前的状态。
- en: See also
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") - event hook that allows full control
    over DBAPI connection mechanics.'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") - 事件钩子，允许完全控制 DBAPI 连接机制。'
- en: '[Custom DBAPI connect() arguments / on-connect routines](#custom-dbapi-args)'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义 DBAPI connect() 参数 / on-connect routines](#custom-dbapi-args)'
- en: '`echo=False` –'
  id: totrans-625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo=False` –'
- en: if True, the Engine will log all statements as well as a `repr()` of their parameter
    lists to the default log handler, which defaults to `sys.stdout` for output. If
    set to the string `"debug"`, result rows will be printed to the standard output
    as well. The `echo` attribute of `Engine` can be modified at any time to turn
    logging on and off; direct control of logging is also available using the standard
    Python `logging` module.
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则引擎将记录所有语句以及它们参数列表的`repr()`到默认的日志处理程序，默认情况下为`sys.stdout`输出。如果设置为字符串`"debug"`，则结果行也将打印到标准输出。`Engine`的`echo`属性可以随时修改以打开和关闭日志记录；也可以使用标准的
    Python `logging` 模块直接控制日志记录。
- en: See also
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 如何配置日志记录的更多细节。'
- en: '`echo_pool=False` –'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo_pool=False` –'
- en: if True, the connection pool will log informational output such as when connections
    are invalidated as well as when connections are recycled to the default log handler,
    which defaults to `sys.stdout` for output. If set to the string `"debug"`, the
    logging will include pool checkouts and checkins. Direct control of logging is
    also available using the standard Python `logging` module.
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则连接池将记录信息输出，例如当连接无效时以及当连接被回收到默认日志处理程序时，该默认日志处理程序默认为`sys.stdout`用于输出。如果设置为字符串`"debug"`，则日志将包括池检出和签入。也可以使用标准的
    Python `logging` 模块进行日志记录。
- en: See also
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 关于如何配置日志记录的更多详细信息。'
- en: '`empty_in_strategy` –'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`empty_in_strategy` –'
- en: No longer used; SQLAlchemy now uses “empty set” behavior for IN in all cases.
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再使用；SQLAlchemy现在在所有情况下都使用“空集”行为来处理IN。
- en: 'Deprecated since version 1.4: The [`create_engine.empty_in_strategy`](#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") keyword is deprecated, and no longer has any effect.
    All IN expressions are now rendered using the “expanding parameter” strategy which
    renders a set of boundexpressions, or an “empty set” SELECT, at statement executiontime.'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自1.4版本起弃用：[`create_engine.empty_in_strategy`](#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")关键字已弃用，不再起作用。现在所有IN表达式都使用“扩展参数”策略进行渲染，在语句执行时渲染一组boundexpressions，或者一个“空集”SELECT。
- en: '`enable_from_linting` –'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_from_linting` –'
- en: defaults to True. Will emit a warning if a given SELECT statement is found to
    have un-linked FROM elements which would cause a cartesian product.
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为True。如果发现给定的SELECT语句具有未链接的FROM元素，可能导致笛卡尔积，则会发出警告。
- en: New in version 1.4.
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4版本中的新功能。
- en: See also
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Built-in FROM linting will warn for any potential cartesian products in a
    SELECT statement](../changelog/migration_14.html#change-4737)'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[内置的FROM linting将警告任何SELECT语句中可能存在的笛卡尔积](../changelog/migration_14.html#change-4737)'
- en: '`execution_options` – Dictionary execution options which will be applied to
    all connections. See [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` – 将应用于所有连接的字典执行选项。参见[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '`future` –'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`future` –'
- en: Use the 2.0 style [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    API.
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用2.0风格的[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")和[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") API。
- en: As of SQLAlchemy 2.0, this parameter is present for backwards compatibility
    only and must remain at its default value of `True`.
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 2.0开始，此���数仅用于向后兼容，必须保持其默认值为`True`。
- en: The [`create_engine.future`](#sqlalchemy.create_engine.params.future "sqlalchemy.create_engine")
    parameter will be deprecated in a subsequent 2.x release and eventually removed.
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.future`](#sqlalchemy.create_engine.params.future "sqlalchemy.create_engine")参数将在随后的2.x版本中被弃用，并最终移除。'
- en: New in version 1.4.
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4版本中的新功能。
- en: 'Changed in version 2.0: All [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects are “future” style engines and there is no
    longer a `future=False` mode of operation.'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版本中的更改：所有[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象都是“future”风格的引擎，不再有`future=False`操作模式。
- en: See also
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLAlchemy 2.0 - Major Migration Guide](../changelog/migration_20.html)'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 2.0 - 主要迁移指南](../changelog/migration_20.html)'
- en: '`hide_parameters` –'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide_parameters` –'
- en: Boolean, when set to True, SQL statement parameters will not be displayed in
    INFO logging nor will they be formatted into the string representation of [`StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") objects.
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值，当设置为True时，SQL语句参数将不会显示在INFO日志中，也不会被格式化为[`StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")对象的字符串表示。
- en: New in version 1.3.8.
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3.8版本中的新功能。
- en: See also
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 关于如何配置日志记录的更多详细信息。'
- en: '`implicit_returning=True` – Legacy parameter that may only be set to True.
    In SQLAlchemy 2.0, this parameter does nothing. In order to disable “implicit
    returning” for statements invoked by the ORM, configure this on a per-table basis
    using the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter.'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`implicit_returning=True` – 旧参数，只能设置为True。在SQLAlchemy 2.0中，此参数不起作用。为了禁用ORM调用的语句的“隐式返回”，请在每个表上使用[`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")参数进行配置。'
- en: '`insertmanyvalues_page_size` –'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertmanyvalues_page_size` –'
- en: number of rows to format into an INSERT statement when the statement uses “insertmanyvalues”
    mode, which is a paged form of bulk insert that is used for many backends when
    using [executemany](../glossary.html#term-executemany) execution typically in
    conjunction with RETURNING. Defaults to 1000, but may also be subject to dialect-specific
    limiting factors which may override this value on a per-statement basis.
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用“insertmanyvalues”模式的语句格式化为INSERT语句时，插入的行数。该模式是用于许多后端的分页形式的批量插入，在使用[executemany](../glossary.html#term-executemany)执行时通常与RETURNING一起使用。默认为1000，但也可能受到方言特定的限制因素的影响，这些因素可能会在每个语句的基础上覆盖此值。
- en: New in version 2.0.
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 2.0 版本起新增。
- en: See also
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“插入多个值”INSERT语句行为](connections.html#engine-insertmanyvalues)'
- en: '[Controlling the Batch Size](connections.html#engine-insertmanyvalues-page-size)'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[控制批量大小](connections.html#engine-insertmanyvalues-page-size)'
- en: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options")'
- en: '`isolation_level` –'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level` –'
- en: optional string name of an isolation level which will be set on all new connections
    unconditionally. Isolation levels are typically some subset of the string names
    `"SERIALIZABLE"`, `"REPEATABLE READ"`, `"READ COMMITTED"`, `"READ UNCOMMITTED"`
    and `"AUTOCOMMIT"` based on backend.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 必要时，所有新连接上都将设置的隔离级别的可选字符串名称。隔离级别通常是基于后端的字符串名称`"SERIALIZABLE"`、`"REPEATABLE READ"`、`"READ
    COMMITTED"`、`"READ UNCOMMITTED"`和`"AUTOCOMMIT"`的某些子集。
- en: The [`create_engine.isolation_level`](#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter is in contrast to the [`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option, which may
    be set on an individual [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), as well as the same parameter passed to [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"), where it may be used to create
    multiple engines with different isolation levels that share a common connection
    pool and dialect.
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数与[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")执行选项形成对比，后者可在单个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上设置，以及传递给[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")的相同参数，在那里可以用来创建具有不同隔离级别的多个引擎，这些引擎共享一个公共连接池和方言。'
- en: 'Changed in version 2.0: The [`create_engine.isolation_level`](#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter has been generalized to work on all dialects
    which support the concept of isolation level, and is provided as a more succinct,
    up front configuration switch in contrast to the execution option which is more
    of an ad-hoc programmatic option.'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始更改：[`create_engine.isolation_level`](#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数已泛化，适用于所有支持隔离级别概念的方言，并提供作为更简洁、直接的配置开关，与执行选项形成对比，后者更像是一种临时编程选项。
- en: See also
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](connections.html#dbapi-autocommit)'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括DBAPI自动提交](connections.html#dbapi-autocommit)'
- en: '`json_deserializer` –'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_deserializer` –'
- en: for dialects that support the [`JSON`](type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype, this is a Python callable that will convert
    a JSON string to a Python object. By default, the Python `json.loads` function
    is used.
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于支持[`JSON`](type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")数据类型的方言，这是一个Python可调用对象，它将JSON字符串转换为Python对象。默认情况下，使用Python的`json.loads`函数。
- en: 'Changed in version 1.3.7: The SQLite dialect renamed this from `_json_deserializer`.'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 1.3.7 版本开始更改：SQLite 方言将其从`_json_deserializer`改名为此。
- en: '`json_serializer` –'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_serializer` –'
- en: for dialects that support the [`JSON`](type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype, this is a Python callable that will render
    a given object as JSON. By default, the Python `json.dumps` function is used.
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于支持 [`JSON`](type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    数据类型的方言，这是一个 Python 可调用函数，它将给定对象呈现为 JSON。默认情况下，使用 Python 的 `json.dumps` 函数。
- en: 'Changed in version 1.3.7: The SQLite dialect renamed this from `_json_serializer`.'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 `1.3.7` 开始更改：SQLite 方言将其从 `_json_serializer` 重命名为 `_json_serializer`。
- en: '`label_length=None` –'
  id: totrans-675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_length=None` -'
- en: optional integer value which limits the size of dynamically generated column
    labels to that many characters. If less than 6, labels are generated as “_(counter)”.
    If `None`, the value of `dialect.max_identifier_length`, which may be affected
    via the [`create_engine.max_identifier_length`](#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") parameter, is used instead. The value of [`create_engine.label_length`](#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine") may not be larger than that of [`create_engine.max_identfier_length`](#sqlalchemy.create_engine.params.max_identfier_length
    "sqlalchemy.create_engine").
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选整数值，将动态生成的列标签的大小限制为该数目的字符数。如果小于 6，则标签将生成为“_(计数器)”。如果为 `None`，则使用 `dialect.max_identifier_length`
    的值，可以通过 [`create_engine.max_identifier_length`](#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") 参数进行设置。[`create_engine.label_length`](#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine") 的值不能大于 [`create_engine.max_identfier_length`](#sqlalchemy.create_engine.params.max_identfier_length
    "sqlalchemy.create_engine") 的值。
- en: See also
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`create_engine.max_identifier_length`](#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.max_identifier_length`](#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")'
- en: '`logging_name` –'
  id: totrans-679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging_name` -'
- en: String identifier which will be used within the “name” field of logging records
    generated within the “sqlalchemy.engine” logger. Defaults to a hexstring of the
    object’s id.
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于在 “sqlalchemy.engine” 记录器中生成的日志记录的 “name” 字段中使用的字符串标识符。默认为对象 id 的十六进制字符串。
- en: See also
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 关于如何配置日志记录的更多详细信息。'
- en: '[`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options")'
- en: '`max_identifier_length` –'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_identifier_length` -'
- en: integer; override the max_identifier_length determined by the dialect. if `None`
    or zero, has no effect. This is the database’s configured maximum number of characters
    that may be used in a SQL identifier such as a table name, column name, or label
    name. All dialects determine this value automatically, however in the case of
    a new database version for which this value has changed but SQLAlchemy’s dialect
    has not been adjusted, the value may be passed here.
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 整数；覆盖由方言确定的 max_identifier_length。如果为 `None` 或零，则无效。这是数据库配置的最大字符数，可用于 SQL 标识符（如表名、列名或标签名）。所有方言都会自动确定此值，但是在新数据库版本中，此值已更改但未调整
    SQLAlchemy 方言的情况下，可以将值传递到此处。
- en: New in version 1.3.9.
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 `1.3.9` 新增。
- en: See also
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`create_engine.label_length`](#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine")'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.label_length`](#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine")'
- en: '`max_overflow=10` – the number of connections to allow in connection pool “overflow”,
    that is connections that can be opened above and beyond the pool_size setting,
    which defaults to five. this is only used with [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool").'
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_overflow=10` - 允许在连接池 “溢出” 中打开的连接数，即可以超过 pool_size 设置的连接数，后者默认为五。仅在 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 中使用。'
- en: '`module=None` – reference to a Python module object (the module itself, not
    its string name). Specifies an alternate DBAPI module to be used by the engine’s
    dialect. Each sub-dialect references a specific DBAPI which will be imported before
    first connect. This parameter causes the import to be bypassed, and the given
    module to be used instead. Can be used for testing of DBAPIs as well as to inject
    “mock” DBAPI implementations into the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module=None` – 指向Python模块对象的引用（模块本身，而不是其字符串名称）。指定引擎方言要使用的备用DBAPI模块。每个子方言引用一个特定的DBAPI，该DBAPI将在第一次连接之前导入。此参数导致跳过导入，并改用给定的模块。不仅可用于DBAPI的测试，还可用于将“模拟”DBAPI实现注入到[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")中。'
- en: '`paramstyle=None` – The [paramstyle](https://legacy.python.org/dev/peps/pep-0249/#paramstyle)
    to use when rendering bound parameters. This style defaults to the one recommended
    by the DBAPI itself, which is retrieved from the `.paramstyle` attribute of the
    DBAPI. However, most DBAPIs accept more than one paramstyle, and in particular
    it may be desirable to change a “named” paramstyle into a “positional” one, or
    vice versa. When this attribute is passed, it should be one of the values `"qmark"`,
    `"numeric"`, `"named"`, `"format"` or `"pyformat"`, and should correspond to a
    parameter style known to be supported by the DBAPI in use.'
  id: totrans-691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paramstyle=None` – 渲染绑定参数时使用的[paramstyle](https://legacy.python.org/dev/peps/pep-0249/#paramstyle)。此样式默认为DBAPI本身推荐的样式，该样式从DBAPI的`.paramstyle`属性中获取。然而，大多数DBAPI都接受多种paramstyle，特别是将“命名”paramstyle转换为“位置”paramstyle，或者反之，可能是可取的。当传递此属性时，它应该是以下值之一：`"qmark"`、`"numeric"`、`"named"`、`"format"`或`"pyformat"`，并且应该对应于所使用的DBAPI已知支持的参数样式。'
- en: '`pool=None` – an already-constructed instance of [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"), such as a [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") instance. If non-None, this pool will be used directly
    as the underlying connection pool for the engine, bypassing whatever connection
    parameters are present in the URL argument. For information on constructing connection
    pools manually, see [Connection Pooling](pooling.html).'
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool=None` – [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")的一个已构造实例，例如[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")实例。如果非None，则此池将直接用作引擎的底层连接池，跳过URL参数中存在的任何连接参数。有关手动构造连接池的信息，请参阅[连接池](pooling.html)。'
- en: '`poolclass=None` – a [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    subclass, which will be used to create a connection pool instance using the connection
    parameters given in the URL. Note this differs from `pool` in that you don’t actually
    instantiate the pool in this case, you just indicate what type of pool to be used.'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poolclass=None` – 一个[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")子类，将使用URL中给定的连接参数来创建连接池实例。请注意，这与`pool`不同，因为在这种情况下，您实际上并不实例化池，而是指示要使用何种类型的池。'
- en: '`pool_logging_name` –'
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_logging_name` –'
- en: String identifier which will be used within the “name” field of logging records
    generated within the “sqlalchemy.pool” logger. Defaults to a hexstring of the
    object’s id.
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将在“sqlalchemy.pool”记录器中生成的日志记录的“name”字段内使用的字符串标识符。默认为对象id的十六进制字符串。
- en: See also
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](#dbengine-logging) - further detail on how to configure
    logging.'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](#dbengine-logging) - 关于如何配置日志记录的更多详细信息。'
- en: '`pool_pre_ping` –'
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_pre_ping` –'
- en: boolean, if True will enable the connection pool “pre-ping” feature that tests
    connections for liveness upon each checkout.
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则启用连接池“预检”功能，该功能在每次检出时测试连接的活动性。
- en: New in version 1.2.
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.2起新增。
- en: See also
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Disconnect Handling - Pessimistic](pooling.html#pool-disconnects-pessimistic)'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[断开处理 - 悲观](pooling.html#pool-disconnects-pessimistic)'
- en: '`pool_size=5` – the number of connections to keep open inside the connection
    pool. This used with [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    as well as [`SingletonThreadPool`](pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool"). With [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"), a `pool_size` setting of 0 indicates no limit; to
    disable pooling, set `poolclass` to [`NullPool`](pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") instead.'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_size=5` – 在连接池中保持打开的连接数。与 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 以及 [`SingletonThreadPool`](pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") 一起使用。对于 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")，`pool_size` 设置为 0 表示没有限制；要禁用池化，请将 `poolclass` 设置为
    [`NullPool`](pooling.html#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")。'
- en: '`pool_recycle=-1` –'
  id: totrans-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_recycle=-1` –'
- en: this setting causes the pool to recycle connections after the given number of
    seconds has passed. It defaults to -1, or no timeout. For example, setting to
    3600 means connections will be recycled after one hour. Note that MySQL in particular
    will disconnect automatically if no activity is detected on a connection for eight
    hours (although this is configurable with the MySQLDB connection itself and the
    server configuration as well).
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此设置会导致池在经过给定的秒数后重新利用连接。默认值为-1，或者没有超时。例如，将其设置为3600意味着连接将在一小时后重新利用。请注意，特别是 MySQL
    会在连接上检测不到任何活动时自动断开连接，时间为八小时（尽管可以通过 MySQLDB 连接本身和服务器配置进行配置）。
- en: See also
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Pool Recycle](pooling.html#pool-setting-recycle)'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置池回收](pooling.html#pool-setting-recycle)'
- en: '`pool_reset_on_return=''rollback''` –'
  id: totrans-708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_reset_on_return=''rollback''` –'
- en: set the [`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter of the underlying [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") object, which can be set to the values `"rollback"`, `"commit"`,
    or `None`.
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置底层 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 对象的
    [`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") 参数，该参数可以设置为值 `"rollback"`、`"commit"` 或 `None`。
- en: See also
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reset On Return](pooling.html#pool-reset-on-return)'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[返回时重置](pooling.html#pool-reset-on-return)'
- en: '`pool_timeout=30` –'
  id: totrans-712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_timeout=30` –'
- en: number of seconds to wait before giving up on getting a connection from the
    pool. This is only used with [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"). This can be a float but is subject to the limitations
    of Python time functions which may not be reliable in the tens of milliseconds.
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从池中获取连接之前等待的秒数。仅与 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    一起使用。这可以是一个浮点数，但受 Python 时间函数的限制，可能不可靠在十几毫秒的范围内。
- en: '`pool_use_lifo=False` –'
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_use_lifo=False` –'
- en: use LIFO (last-in-first-out) when retrieving connections from [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") instead of FIFO (first-in-first-out). Using LIFO,
    a server-side timeout scheme can reduce the number of connections used during
    non- peak periods of use. When planning for server-side timeouts, ensure that
    a recycle or pre-ping strategy is in use to gracefully handle stale connections.
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    检索连接时使用 LIFO（后进先出）而不是 FIFO（先进先出）。使用 LIFO，服务器端的超时方案可以在非高峰使用期间减少使用的连接数。在规划服务器端超时时，请确保使用回收或预先
    ping 策略以优雅地处理陈旧的连接。
- en: New in version 1.3.
  id: totrans-716
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能。
- en: ''
  id: totrans-717
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-718
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-719
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Using FIFO vs. LIFO](pooling.html#pool-use-lifo)'
  id: totrans-720
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[使用 FIFO vs. LIFO](pooling.html#pool-use-lifo)'
- en: ''
  id: totrans-721
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Dealing with Disconnects](pooling.html#pool-disconnects)'
  id: totrans-722
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[处理断开连接](pooling.html#pool-disconnects)'
- en: '`plugins` –'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugins` –'
- en: string list of plugin names to load. See [`CreateEnginePlugin`](connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") for background.
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要加载的插件名称的字符串列表。有关背景，请参阅 [`CreateEnginePlugin`](connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")。
- en: New in version 1.2.3.
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2.3 中的新功能。
- en: '`query_cache_size` –'
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_cache_size` –'
- en: size of the cache used to cache the SQL string form of queries. Set to zero
    to disable caching.
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于缓存查询的 SQL 字符串形式的缓存大小。将其设置为零以禁用缓存。
- en: The cache is pruned of its least recently used items when its size reaches N
    * 1.5\. Defaults to 500, meaning the cache will always store at least 500 SQL
    statements when filled, and will grow up to 750 items at which point it is pruned
    back down to 500 by removing the 250 least recently used items.
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当缓存大小达到 N * 1.5 时，最近最少使用的项目将被清理。默认为 500，意味着缓存填满时始终至少存储 500 条 SQL 语句，并且会增长到 750
    个项目，然后通过删除最近最少使用的 250 个项目将其减少到 500。
- en: Caching is accomplished on a per-statement basis by generating a cache key that
    represents the statement’s structure, then generating string SQL for the current
    dialect only if that key is not present in the cache. All statements support caching,
    however some features such as an INSERT with a large set of parameters will intentionally
    bypass the cache. SQL logging will indicate statistics for each statement whether
    or not it were pull from the cache.
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缓存是在每个语句的基础上完成的，方法是生成一个表示语句结构的缓存键，然后仅当该键不在缓存中时才为当前方言生成字符串 SQL。所有语句都支持缓存，但是一些特性，如具有大量参数的
    INSERT，将有意绕过缓存。SQL 日志将指示每个语句的统计信息，无论是否从缓存中拉取。
- en: Note
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: some ORM functions related to unit-of-work persistence as well as some attribute
    loading strategies will make use of individual per-mapper caches outside of the
    main cache.
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些与工作单元持久性相关的 ORM 函数以及一些属性加载策略将使用主缓存之外的每个映射器缓存。
- en: See also
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQL 编译缓存](connections.html#sql-caching)'
- en: New in version 1.4.
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '`use_insertmanyvalues` –'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_insertmanyvalues` –'
- en: True by default, use the “insertmanyvalues” execution style for INSERT..RETURNING
    statements by default.
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 True，对于 INSERT..RETURNING 语句，默认使用“insertmanyvalues”执行样式。
- en: New in version 2.0.
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: See also
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[INSERT 语句的“插入多个值”行为](connections.html#engine-insertmanyvalues)'
- en: '[PRE100]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Create a new Engine instance using a configuration dictionary.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置字典创建一个新的 Engine 实例。
- en: The dictionary is typically produced from a config file.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 该字典通常由配置文件生成。
- en: The keys of interest to `engine_from_config()` should be prefixed, e.g. `sqlalchemy.url`,
    `sqlalchemy.echo`, etc. The ‘prefix’ argument indicates the prefix to be searched
    for. Each matching key (after the prefix is stripped) is treated as though it
    were the corresponding keyword argument to a [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `engine_from_config()` 感兴趣的键应该有前缀，例如 `sqlalchemy.url`，`sqlalchemy.echo` 等。‘prefix’参数指示要搜索的前缀。每个匹配键（前缀被剥离后）都被视为对
    [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine") 调用的相应关键字参数。
- en: The only required key is (assuming the default prefix) `sqlalchemy.url`, which
    provides the [database URL](#database-urls).
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一必需的键是（假设默认前缀为）`sqlalchemy.url`，它提供了[数据库 URL](#database-urls)。
- en: A select set of keyword arguments will be “coerced” to their expected type based
    on string values. The set of arguments is extensible per-dialect using the `engine_config_types`
    accessor.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 一组选择的关键字参数将根据字符串值“强制转换”为其预期类型。使用 `engine_config_types` 访问器可针对每个方言扩展参数集。
- en: 'Parameters:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`configuration` – A dictionary (typically produced from a config file, but
    this is not a requirement). Items whose keys start with the value of ‘prefix’
    will have that prefix stripped, and will then be passed to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine").'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration` – 一个字典（通常由配置文件生成，但这不是必需的）。键以“prefix”值开头的项目将删除该前缀，然后传递给 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。'
- en: '`prefix` – Prefix to match and then strip from keys in ‘configuration’.'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefix` – 用于在“configuration”中匹配并剥离键的前缀。'
- en: '`kwargs` – Each keyword argument to `engine_from_config()` itself overrides
    the corresponding item taken from the ‘configuration’ dictionary. Keyword arguments
    should *not* be prefixed.'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – 传递给 `engine_from_config()` 的每个关键字参数本身都会覆盖从“configuration”字典中获取的相应项目。关键字参数不应有前缀。'
- en: '[PRE101]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Create a “mock” engine used for echoing DDL.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于回显 DDL 的“模拟”引擎。
- en: This is a utility function used for debugging or storing the output of DDL sequences
    as generated by [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and related methods.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于调试或存储由 [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和相关方法生成的 DDL 序列输出的实用函数。
- en: The function accepts a URL which is used only to determine the kind of dialect
    to be used, as well as an “executor” callable function which will receive a SQL
    expression object and parameters, which can then be echoed or otherwise printed.
    The executor’s return value is not handled, nor does the engine allow regular
    string statements to be invoked, and is therefore only useful for DDL that is
    sent to the database without receiving any results.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个 URL 参数，仅用于确定要使用的方言类型，以及一个“执行器”可调用函数，该函数将接收一个 SQL 表达式对象和参数，然后可以将其回显或以其他方式打印。执行器的返回值不受处理，也不允许调用常规字符串语句，因此仅对发送到数据库的
    DDL 有用而不接收任何结果。
- en: 'E.g.:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE102]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Parameters:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`url` – A string URL which typically needs to contain only the database backend
    name.'
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url` – 一个字符串 URL，通常只需包含数据库后端名称。'
- en: '`executor` – a callable which receives the arguments `sql`, `*multiparams`
    and `**params`. The `sql` parameter is typically an instance of [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"), which can then be compiled into a string
    using `ExecutableDDLElement.compile()`.'
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executor` – 一个可调用的函数，接收参数 `sql`、`*multiparams` 和 `**params`。`sql` 参数通常是 [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 的实例，然后可以使用 `ExecutableDDLElement.compile()`
    将其编译为字符串。'
- en: 'New in version 1.4: - the [`create_mock_engine()`](#sqlalchemy.create_mock_engine
    "sqlalchemy.create_mock_engine") function replaces the previous “mock” engine
    strategy used with [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine").'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始新增：- [`create_mock_engine()`](#sqlalchemy.create_mock_engine "sqlalchemy.create_mock_engine")
    函数取代了以前与 [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    一起使用的“模拟”引擎策略。
- en: See also
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How can I get the CREATE TABLE/ DROP TABLE output as a string?](../faq/metadata_schema.html#faq-ddl-as-string)'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将 CREATE TABLE/ DROP TABLE 输出作为字符串获取？](../faq/metadata_schema.html#faq-ddl-as-string)'
- en: '[PRE103]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Given a string, produce a new URL instance.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串，生成一个新的 URL 实例。
- en: The format of the URL generally follows [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt),
    with some exceptions, including that underscores, and not dashes or periods, are
    accepted within the “scheme” portion.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: URL 的格式通常遵循 [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt)，但也有一些例外情况，包括在“scheme”部分接受下划线而不是破折号或句点。
- en: If a [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object is passed,
    it is returned as is.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，则返回原样。
- en: See also
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Database URLs](#database-urls)'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据库 URL](#database-urls)'
- en: '[PRE104]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Create a pool instance from the given url.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的 URL 创建一个池实例。
- en: If `poolclass` is not provided the pool class used is selected using the dialect
    specified in the URL.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未提供 `poolclass` 参数，则使用 URL 中指定的方言选择池类。
- en: The arguments passed to [`create_pool_from_url()`](#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") are identical to the pool argument passed to
    the [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 [`create_pool_from_url()`](#sqlalchemy.create_pool_from_url "sqlalchemy.create_pool_from_url")
    的参数与传递给 [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    函数的池参数相同。
- en: New in version 2.0.10.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.10 开始新增。
- en: '[PRE105]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Represent the components of a URL used to connect to a database.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 表示用于连接到数据库的 URL 的各个组件。
- en: URLs are typically constructed from a fully formatted URL string, where the
    [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url") function
    is used internally by the [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function in order to parse the URL string into its individual components, which
    are then used to construct a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object. When parsing from a formatted URL string, the parsing format generally
    follows [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt), with some exceptions.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: URL 通常是从完全格式化的 URL 字符串构建的，其中 [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    函数在内部由 [`create_engine()`](#sqlalchemy.create_engine "sqlalchemy.create_engine")
    函数使用，以将 URL 字符串解析为其各个组件，然后用于构造一个新的 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象。在解析格式化的 URL 字符串时，解析格式通常遵循 [RFC-1738](https://www.ietf.org/rfc/rfc1738.txt)，但也有一些例外情况。
- en: A [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object may also be
    produced directly, either by using the [`make_url()`](#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") function with a fully formed URL string, or by using
    the [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    constructor in order to construct a [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    programmatically given individual fields. The resulting [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object may be passed directly to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") in place of a string argument, which will bypass the
    usage of [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    within the engine’s creation process.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象也可以直接生成，可以使用具有完整形式的
    URL 字符串的 [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    函数，也可以使用 [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    构造函数以编程方式给出单个字段来构造一个 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")。生成的
    [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象可以直接传递给 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 以替换字符串参数的使用，这将在引擎的创建过程中绕过 [`make_url()`](#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") 的使用。
- en: 'Changed in version 1.4: The [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object is now an immutable object. To create a URL, use the [`make_url()`](#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") or [`URL.create()`](#sqlalchemy.engine.URL.create
    "sqlalchemy.engine.URL.create") function / method. To modify a [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"), use methods like [`URL.set()`](#sqlalchemy.engine.URL.set
    "sqlalchemy.engine.URL.set") and [`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict
    "sqlalchemy.engine.URL.update_query_dict") to return a new [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object with modifications. See notes for this change
    at [The URL object is now immutable](../changelog/migration_14.html#change-5526).'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象现在是一个不可变对象。要创建
    URL，请使用 [`make_url()`](#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    或 [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")
    函数/方法。要修改 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")，请使用诸如 [`URL.set()`](#sqlalchemy.engine.URL.set
    "sqlalchemy.engine.URL.set") 和 [`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict
    "sqlalchemy.engine.URL.update_query_dict") 等方法返回具有修改的新 [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象。有关此更改的说明，请参见[URL 对象现在是不可变的](../changelog/migration_14.html#change-5526)。
- en: See also
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Database URLs](#database-urls)'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据库 URL](#database-urls)'
- en: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") contains the following
    attributes:'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 包含以下属性：'
- en: '[`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername"):
    database backend and driver name, such as `postgresql+psycopg2`'
  id: totrans-781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername"):
    数据库后端和驱动程序名称，例如`postgresql+psycopg2`'
- en: '[`URL.username`](#sqlalchemy.engine.URL.username "sqlalchemy.engine.URL.username"):
    username string'
  id: totrans-782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.username`](#sqlalchemy.engine.URL.username "sqlalchemy.engine.URL.username"):
    用户名字符串'
- en: '[`URL.password`](#sqlalchemy.engine.URL.password "sqlalchemy.engine.URL.password"):
    password string'
  id: totrans-783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.password`](#sqlalchemy.engine.URL.password "sqlalchemy.engine.URL.password"):
    密码字符串'
- en: '[`URL.host`](#sqlalchemy.engine.URL.host "sqlalchemy.engine.URL.host"): string
    hostname'
  id: totrans-784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.host`](#sqlalchemy.engine.URL.host "sqlalchemy.engine.URL.host"): 主机名字符串'
- en: '[`URL.port`](#sqlalchemy.engine.URL.port "sqlalchemy.engine.URL.port"): integer
    port number'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.port`](#sqlalchemy.engine.URL.port "sqlalchemy.engine.URL.port"): 整数端口号'
- en: '[`URL.database`](#sqlalchemy.engine.URL.database "sqlalchemy.engine.URL.database"):
    string database name'
  id: totrans-786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.database`](#sqlalchemy.engine.URL.database "sqlalchemy.engine.URL.database"):
    数据库名称字符串'
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query"):
    an immutable mapping representing the query string. contains strings for keys
    and either strings or tuples of strings for values.'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query"):
    一个表示查询字符串的不可变映射。包含键的字符串和值的字符串或字符串元组。'
- en: '**Members**'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[create()](#sqlalchemy.engine.URL.create), [database](#sqlalchemy.engine.URL.database),
    [difference_update_query()](#sqlalchemy.engine.URL.difference_update_query), [drivername](#sqlalchemy.engine.URL.drivername),
    [get_backend_name()](#sqlalchemy.engine.URL.get_backend_name), [get_dialect()](#sqlalchemy.engine.URL.get_dialect),
    [get_driver_name()](#sqlalchemy.engine.URL.get_driver_name), [host](#sqlalchemy.engine.URL.host),
    [normalized_query](#sqlalchemy.engine.URL.normalized_query), [password](#sqlalchemy.engine.URL.password),
    [port](#sqlalchemy.engine.URL.port), [query](#sqlalchemy.engine.URL.query), [render_as_string()](#sqlalchemy.engine.URL.render_as_string),
    [set()](#sqlalchemy.engine.URL.set), [translate_connect_args()](#sqlalchemy.engine.URL.translate_connect_args),
    [update_query_dict()](#sqlalchemy.engine.URL.update_query_dict), [update_query_pairs()](#sqlalchemy.engine.URL.update_query_pairs),
    [update_query_string()](#sqlalchemy.engine.URL.update_query_string), [username](#sqlalchemy.engine.URL.username)'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '[create()](#sqlalchemy.engine.URL.create), [database](#sqlalchemy.engine.URL.database),
    [difference_update_query()](#sqlalchemy.engine.URL.difference_update_query), [drivername](#sqlalchemy.engine.URL.drivername),
    [get_backend_name()](#sqlalchemy.engine.URL.get_backend_name), [get_dialect()](#sqlalchemy.engine.URL.get_dialect),
    [get_driver_name()](#sqlalchemy.engine.URL.get_driver_name), [host](#sqlalchemy.engine.URL.host),
    [normalized_query](#sqlalchemy.engine.URL.normalized_query), [password](#sqlalchemy.engine.URL.password),
    [port](#sqlalchemy.engine.URL.port), [query](#sqlalchemy.engine.URL.query), [render_as_string()](#sqlalchemy.engine.URL.render_as_string),
    [set()](#sqlalchemy.engine.URL.set), [translate_connect_args()](#sqlalchemy.engine.URL.translate_connect_args),
    [update_query_dict()](#sqlalchemy.engine.URL.update_query_dict), [update_query_pairs()](#sqlalchemy.engine.URL.update_query_pairs),
    [update_query_string()](#sqlalchemy.engine.URL.update_query_string), [username](#sqlalchemy.engine.URL.username)'
- en: '**Class signature**'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    (`builtins.tuple`)
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") (`builtins.tuple`)
- en: '[PRE106]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Create a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象。
- en: See also
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Database URLs](#database-urls)'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据库 URL](#database-urls)'
- en: 'Parameters:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`drivername` – the name of the database backend. This name will correspond
    to a module in sqlalchemy/databases or a third party plug-in.'
  id: totrans-797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drivername` – 数据库后端的名称。该名称将对应于 sqlalchemy/databases 中的一个模块或第三方插件。'
- en: '`username` – The user name.'
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username` – 用户名。'
- en: '`password` –'
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password` –'
- en: database password. Is typically a string, but may also be an object that can
    be stringified with `str()`.
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库密码。通常为字符串，但也可以是可以使用`str()`进行字符串化的对象。
- en: Note
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The password string should **not** be URL encoded when passed as an argument
    to [`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create");
    the string should contain the password characters exactly as they would be typed.
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为参数传递给[`URL.create()`](#sqlalchemy.engine.URL.create "sqlalchemy.engine.URL.create")时，密码字符串不应进行
    URL 编码；该字符串应该包含与键入的密码字符完全相同。
- en: Note
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: A password-producing object will be stringified only **once** per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object. For dynamic password generation per connect,
    see [Generating dynamic authentication tokens](#engines-dynamic-tokens).
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象，一个生成密码的对象只会被字符串化**一次**。对于每次连接的动态密码生成，请参阅[生成动态认证令牌](#engines-dynamic-tokens)。
- en: '`host` – The name of the host.'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host` – 主机名。'
- en: '`port` – The port number.'
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port` – 端口号。'
- en: '`database` – The database name.'
  id: totrans-807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database` – 数据库名称。'
- en: '`query` – A dictionary of string keys to string values to be passed to the
    dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python
    DBAPI directly, use the [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") parameter to [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). See also [`URL.normalized_query`](#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query") for a dictionary that is consistently
    string->list of string.'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` – 一个字符串键到字符串值的字典，将在连接时传递给方言和/或 DBAPI。要直接指定 Python DBAPI 的非字符串参数，请使用[`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")参数来调用[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。另请参阅[`URL.normalized_query`](#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query")，用于一个一致的字符串->字符串列表字典。'
- en: 'Returns:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象。
- en: 'New in version 1.4: The [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object is now an **immutable named tuple**. In addition, the `query` dictionary
    is also immutable. To create a URL, use the `make_url()` or [`URL.create()`](#sqlalchemy.engine.URL.create
    "sqlalchemy.engine.URL.create") function/ method. To modify a [`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"), use the [`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")
    and `URL.update_query()` methods.'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象现在是一个**不可变的命名元组**。此外，`query`字典也是不可变的。要创建URL，请使用`make_url()`或[`URL.create()`](#sqlalchemy.engine.URL.create
    "sqlalchemy.engine.URL.create")函数/方法。要修改[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")，请使用[`URL.set()`](#sqlalchemy.engine.URL.set
    "sqlalchemy.engine.URL.set")和`URL.update_query()`方法。
- en: '[PRE107]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: database name
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库名称
- en: '[PRE108]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Remove the given names from the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    dictionary, returning the new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL").
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 从[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")字典中删除给定的名称，返回新的[`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")。
- en: 'E.g.:'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE109]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Equivalent to using [`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")
    as follows:'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于以下使用[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")：
- en: '[PRE110]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: New in version 1.4.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始。
- en: See also
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
- en: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
- en: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
- en: '[PRE111]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: database backend and driver name, such as `postgresql+psycopg2`
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库后端和驱动程序名称，如`postgresql+psycopg2`
- en: '[PRE112]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Return the backend name.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 返回后端名称。
- en: This is the name that corresponds to the database backend in use, and is the
    portion of the [`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")
    that is to the left of the plus sign.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与正在使用的数据库后端相对应的名称，并且是[`URL.drivername`](#sqlalchemy.engine.URL.drivername
    "sqlalchemy.engine.URL.drivername")左侧的部分。
- en: '[PRE113]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Return the SQLAlchemy [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    class corresponding to this URL’s driver name.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此URL的驱动程序名称对应的SQLAlchemy [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")类。
- en: '[PRE114]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Return the backend name.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 返回后端名称。
- en: This is the name that corresponds to the DBAPI driver in use, and is the portion
    of the [`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")
    that is to the right of the plus sign.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与正在使用的DBAPI驱动程序相对应的名称，并且是[`URL.drivername`](#sqlalchemy.engine.URL.drivername
    "sqlalchemy.engine.URL.drivername")右侧的部分。
- en: If the [`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")
    does not include a plus sign, then the default [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") for this [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    is imported in order to get the driver name.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`URL.drivername`](#sqlalchemy.engine.URL.drivername "sqlalchemy.engine.URL.drivername")中不包含加号，则导入此[`URL`](#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的默认[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以获取驱动程序名称。
- en: '[PRE115]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: hostname or IP number. May also be a data source name for some drivers.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 主机名或IP地址。对于某些驱动程序，也可以是数据源名称。
- en: '[PRE116]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Return the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    dictionary with values normalized into sequences.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 将值标准化为序列后返回[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")字典。
- en: 'As the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    dictionary may contain either string values or sequences of string values to differentiate
    between parameters that are specified multiple times in the query string, code
    that needs to handle multiple parameters generically will wish to use this attribute
    so that all parameters present are presented as sequences. Inspiration is from
    Python’s `urllib.parse.parse_qs` function. E.g.:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")字典可能包含字符串值或字符串值序列以区分在查询字符串中多次指定的参数，因此需要通用处理多个参数的代码将希望使用此属性以便将所有出现的参数表示为序列。灵感来自Python的`urllib.parse.parse_qs`函数。例如：
- en: '[PRE117]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: password, which is normally a string but may also be any object that has a `__str__()`
    method.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 密码，通常是一个字符串，但也可能是具有`__str__()`方法的任何对象。
- en: '[PRE119]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: integer port number
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 整数端口号
- en: '[PRE120]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'an immutable mapping representing the query string. contains strings for keys
    and either strings or tuples of strings for values, e.g.:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 代表查询字符串的不可变映射。包含键的字符串和值的字符串或字符串元组，例如：
- en: '[PRE121]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: See also
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.normalized_query`](#sqlalchemy.engine.URL.normalized_query "sqlalchemy.engine.URL.normalized_query")
    - normalizes all values into sequences for consistent processing'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.normalized_query`](#sqlalchemy.engine.URL.normalized_query "sqlalchemy.engine.URL.normalized_query")
    - 将所有值标准化为序列以进行一致处理'
- en: 'Methods for altering the contents of [`URL.query`](#sqlalchemy.engine.URL.query
    "sqlalchemy.engine.URL.query"):'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 更改[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")内容的方法：
- en: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
- en: '[`URL.update_query_string()`](#sqlalchemy.engine.URL.update_query_string "sqlalchemy.engine.URL.update_query_string")'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_string()`](#sqlalchemy.engine.URL.update_query_string "sqlalchemy.engine.URL.update_query_string")'
- en: '[`URL.update_query_pairs()`](#sqlalchemy.engine.URL.update_query_pairs "sqlalchemy.engine.URL.update_query_pairs")'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_pairs()`](#sqlalchemy.engine.URL.update_query_pairs "sqlalchemy.engine.URL.update_query_pairs")'
- en: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
- en: '[PRE122]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Render this [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object as
    a string.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象呈现为字符串。
- en: This method is used when the `__str__()` or `__repr__()` methods are used. The
    method directly includes additional options.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`__str__()`或`__repr__()`方法时使用此方法。该方法直接包括附加选项。
- en: 'Parameters:'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**hide_password** – Defaults to True. The password is not shown in the string
    unless this is set to False.'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '**hide_password** – 默认为True。除非设置为False，否则密码不会显示在字符串中。'
- en: '[PRE123]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: return a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    with modifications.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个带有修改的[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象。
- en: Values are used if they are non-None. To set a value to `None` explicitly, use
    the `URL._replace()` method adapted from `namedtuple`.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值为非None，则使用该值。要将值显式设置为`None`，请使用从`namedtuple`调整的`URL._replace()`方法。
- en: 'Parameters:'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`drivername` – new drivername'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drivername` – 新的驱动程序名称'
- en: '`username` – new username'
  id: totrans-866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username` – 新用户名'
- en: '`password` – new password'
  id: totrans-867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password` – 新密码'
- en: '`host` – new hostname'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host` – 新主机名'
- en: '`port` – new port'
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port` – 新端口'
- en: '`query` – new query parameters, passed a dict of string keys referring to string
    or sequence of string values. Fully replaces the previous list of arguments.'
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` – 新的查询参数，传递一个字符串键的字典，指向字符串或字符串值序列。完全替换了以前的参数列表。'
- en: 'Returns:'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象。
- en: New in version 1.4.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: See also
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
- en: '[PRE124]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Translate url attributes into a dictionary of connection arguments.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 将url属性翻译为连接参数的字典。
- en: Returns attributes of this url (host, database, username, password, port) as
    a plain dictionary. The attribute names are used as the keys by default. Unset
    or false attributes are omitted from the final dictionary.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 将此url的属性（主机、数据库、用户名、密码、端口）作为普通字典返回。默认情况下，属性名称用作键。未设置或为false的属性将从最终字典中省略。
- en: 'Parameters:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`**kw` – Optional, alternate key names for url attributes.'
  id: totrans-880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 可选，url属性的替代键名。'
- en: '`names` – Deprecated. Same purpose as the keyword-based alternate names, but
    correlates the name to the original positionally.'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`names` – 已弃用。与基于关键字的替代名称具有相同目的，但将名称与原始位置相关联。'
- en: '[PRE125]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Return a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    with the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    parameter dictionary updated by the given dictionary.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由给定字典更新的[`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象的新对象。
- en: The dictionary typically contains string keys and string values. In order to
    represent a query parameter that is expressed multiple times, pass a sequence
    of string values.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 字典通常包含字符串键和字符串值。为了表示表达多次的查询参数，传递一个字符串值序列。
- en: 'E.g.:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE126]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Parameters:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`query_parameters` – A dictionary with string keys and values that are either
    strings, or sequences of strings.'
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_parameters` – 具有字符串键和值的字典，值为字符串或字符串序列。'
- en: '`append` – if True, parameters in the existing query string will not be removed;
    new parameters will be in addition to those present. If left at its default of
    False, keys present in the given query parameters will replace those of the existing
    query string.'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append` – 如果为 True，则现有查询字符串中的参数不会被删除；新参数将添加到已有参数之后。如果保持其默认值 False，则给定查询参数中的键将替换现有查询字符串中的键。'
- en: New in version 1.4.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新内容。
- en: See also
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
- en: '[`URL.update_query_string()`](#sqlalchemy.engine.URL.update_query_string "sqlalchemy.engine.URL.update_query_string")'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_string()`](#sqlalchemy.engine.URL.update_query_string "sqlalchemy.engine.URL.update_query_string")'
- en: '[`URL.update_query_pairs()`](#sqlalchemy.engine.URL.update_query_pairs "sqlalchemy.engine.URL.update_query_pairs")'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_pairs()`](#sqlalchemy.engine.URL.update_query_pairs "sqlalchemy.engine.URL.update_query_pairs")'
- en: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
- en: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
- en: '[PRE127]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Return a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    with the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    parameter dictionary updated by the given sequence of key/value pairs
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，其参数字典由给定的键/值对序列更新。
- en: 'E.g.:'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE128]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Parameters:'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`key_value_pairs` – A sequence of tuples containing two strings each.'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_value_pairs` – 包含两个字符串的元组序列。'
- en: '`append` – if True, parameters in the existing query string will not be removed;
    new parameters will be in addition to those present. If left at its default of
    False, keys present in the given query parameters will replace those of the existing
    query string.'
  id: totrans-903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append` – 如果为 True，则现有查询字符串中的参数不会被删除；新参数将添加到已有参数之后。如果保持其默认值 False，则给定查询参数中的键将替换现有查询字符串中的键。'
- en: New in version 1.4.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新内容。
- en: See also
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
- en: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.difference_update_query()`](#sqlalchemy.engine.URL.difference_update_query
    "sqlalchemy.engine.URL.difference_update_query")'
- en: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.set()`](#sqlalchemy.engine.URL.set "sqlalchemy.engine.URL.set")'
- en: '[PRE129]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Return a new [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") object
    with the [`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")
    parameter dictionary updated by the given query string.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`URL`](#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象，其参数字典由给定的查询字符串更新。
- en: 'E.g.:'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE130]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Parameters:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`query_string` – a URL escaped query string, not including the question mark.'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_string` – 一个 URL 转义的查询字符串，不包括问号。'
- en: '`append` – if True, parameters in the existing query string will not be removed;
    new parameters will be in addition to those present. If left at its default of
    False, keys present in the given query parameters will replace those of the existing
    query string.'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append` – 如果为 True，则现有查询字符串中的参数不会被删除；新参数将添加到已有参数之后。如果保持其默认值 False，则给定查询参数中的键将替换现有查询字符串中的键。'
- en: New in version 1.4.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新内容。
- en: See also
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.query`](#sqlalchemy.engine.URL.query "sqlalchemy.engine.URL.query")'
- en: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.update_query_dict()`](#sqlalchemy.engine.URL.update_query_dict "sqlalchemy.engine.URL.update_query_dict")'
- en: '[PRE131]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: username string
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名 字符串
- en: Pooling
  id: totrans-922
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 池化
- en: The [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    will ask the connection pool for a connection when the `connect()` or `execute()`
    methods are called. The default connection pool, [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"), will open connections to the database on an as-needed
    basis. As concurrent statements are executed, [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") will grow its pool of connections to a default size
    of five, and will allow a default “overflow” of ten. Since the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is essentially “home base” for the connection pool,
    it follows that you should keep a single [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") per database established within an application, rather
    than creating a new one for each connection.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `connect()` 或 `execute()` 方法时，[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 将向连接池请求连接。默认连接池 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 将根据需要打开与数据库的连接。随着并发语句的执行，[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 将增加其连接池的大小至默认大小为五，并允许默认的“溢出”为十。由于 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 本质上是连接池的“基地”，因此在应用程序中，应该保持单个 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 与数据库建立连接，而不是为每个连接创建新的。
- en: Note
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    is not used by default for SQLite engines. See [SQLite](../dialects/sqlite.html)
    for details on SQLite connection pool usage.'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SQLite 引擎不使用 [`QueuePool`](pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")。有关
    SQLite 连接池使用的详细信息，请参阅[SQLite](../dialects/sqlite.html)。
- en: For more information on connection pooling, see [Connection Pooling](pooling.html).
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多有关连接池的信息，请参阅[连接池](pooling.html)。
- en: '## Custom DBAPI connect() arguments / on-connect routines'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '## 自定义 DBAPI connect() 参数 / 连接时例程'
- en: For cases where special connection methods are needed, in the vast majority
    of cases, it is most appropriate to use one of several hooks at the [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") level in order to customize this process. These are
    described in the following sub-sections.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要特殊连接方法的情况，在绝大多数情况下，最适合的方法是使用 [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 层级中的一些钩子来自定义此过程。这些在以下子章节中描述。
- en: Special Keyword Arguments Passed to dbapi.connect()
  id: totrans-929
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递给 `dbapi.connect()` 的特殊关键字参数
- en: All Python DBAPIs accept additional arguments beyond the basics of connecting.
    Common parameters include those to specify character set encodings and timeout
    values; more complex data includes special DBAPI constants and objects and SSL
    sub-parameters. There are two rudimentary means of passing these arguments without
    complexity.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Python DBAPI 都接受除连接基础之外的附加参数。常见的参数包括用于指定字符集编码和超时值的参数；更复杂的数据包括特殊的 DBAPI 常量和对象以及
    SSL 子参数。有两种基本的方式可以在不复杂的情况下传递这些参数。
- en: Add Parameters to the URL Query string
  id: totrans-931
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将参数添加到 URL 查询字符串
- en: 'Simple string values, as well as some numeric values and boolean flags, may
    be often specified in the query string of the URL directly. A common example of
    this is DBAPIs that accept an argument `encoding` for character encodings, such
    as most MySQL DBAPIs:'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的字符串值，以及一些数值和布尔标志，可以直接在 URL 的查询字符串中指定。其中一个常见的例子是接受字符编码参数 `encoding` 的 DBAPI，例如大多数
    MySQL DBAPI：
- en: '[PRE132]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: The advantage of using the query string is that additional DBAPI options may
    be specified in configuration files in a manner that’s portable to the DBAPI specified
    in the URL. The specific parameters passed through at this level vary by SQLAlchemy
    dialect. Some dialects pass all arguments through as strings, while others will
    parse for specific datatypes and move parameters to different places, such as
    into driver-level DSNs and connect strings. As per-dialect behavior in this area
    currently varies, the dialect documentation should be consulted for the specific
    dialect in use to see if particular parameters are supported at this level.
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 使用查询字符串的优点是可以在配置文件中指定附加的 DBAPI 选项，以便与 URL 中指定的 DBAPI 兼容。在这个级别传递的具体参数因 SQLAlchemy
    方言而异。一些方言将所有参数都作为字符串传递，而另一些方言将解析特定的数据类型并将参数移到不同的位置，比如驱动程序级别的 DSN 和连接字符串。由于此领域的每个方言的行为当前存在差异，因此应该查阅用于特定方言的方言文档，以查看在此级别是否支持特定参数。
- en: Tip
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'A general technique to display the exact arguments passed to the DBAPI for
    a given URL may be performed using the [`Dialect.create_connect_args()`](internals.html#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method directly as follows:'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`Dialect.create_connect_args()`](internals.html#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") 方法可以执行以下操作，显示给定 URL 的 DBAPI 传递的确切参数：
- en: '[PRE133]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: The above `args, kwargs` pair is normally passed to the DBAPI as `dbapi.connect(*args,
    **kwargs)`.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `args, kwargs` 对通常作为 `dbapi.connect(*args, **kwargs)` 传递给 DBAPI。
- en: Use the connect_args dictionary parameter
  id: totrans-939
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 `connect_args` 字典参数
- en: 'A more general system of passing any parameter to the `dbapi.connect()` function
    that is guaranteed to pass all parameters at all times is the [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary parameter. This may be used for parameters
    that are otherwise not handled by the dialect when added to the query string,
    as well as when special sub-structures or objects must be passed to the DBAPI.
    Sometimes it’s just that a particular flag must be sent as the `True` symbol and
    the SQLAlchemy dialect is not aware of this keyword argument to coerce it from
    its string form as presented in the URL. Below illustrates the use of a psycopg2
    “connection factory” that replaces the underlying implementation the connection:'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更一般的系统，用于将任何参数传递给 `dbapi.connect()` 函数，保证始终传递所有参数，是 [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 字典参数。这可用于否则未在查询字符串中处理的参数，以及在必须将特殊子结构或对象传递给 DBAPI 时。有时，只需将特定标志作为
    `True` 符号发送，而 SQLAlchemy 方言并不知道如何从 URL 中的字符串形式强制转换此关键字参数。下面示例说明了使用 psycopg2 “连接工厂”
    替换连接的基础实现：
- en: '[PRE134]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Another example is the pyodbc “timeout” parameter:'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是 pyodbc 的 “timeout” 参数：
- en: '[PRE135]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: The above example also illustrates that both URL “query string” parameters as
    well as [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") may be used at the same time; in the case of pyodbc,
    the “driver” keyword has special meaning within the URL.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例还说明了 URL “查询字符串”参数以及 [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 可以同时使用；在 pyodbc 的情况下，“driver” 关键字在 URL 中具有特殊含义。
- en: Controlling how parameters are passed to the DBAPI connect() function
  id: totrans-945
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制参数如何传递给 DBAPI 的 `connect()` 函数
- en: 'Beyond manipulating the parameters passed to `connect()`, we can further customize
    how the DBAPI `connect()` function itself is called using the [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") event hook. This hook is passed
    the full `*args, **kwargs` that the dialect would send to `connect()`. These collections
    can then be modified in place to alter how they are used:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 除了操作传递给 `connect()` 的参数外，我们还可以使用 [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") 事件挂钩进一步定制 DBAPI `connect()` 函数本身的调用方式。此挂钩传递了方言将发送给
    `connect()` 的完整 `*args, **kwargs`。然后，这些集合可以就地修改以更改它们的使用方式：
- en: '[PRE136]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '#### Generating dynamic authentication tokens'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 生成动态认证令牌'
- en: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") is also an ideal way to dynamically
    insert an authentication token that might change over the lifespan of an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). For example, if the token gets generated by `get_authentication_token()`
    and passed to the DBAPI in a `token` parameter, this could be implemented as:'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") 也是动态插入认证令牌的理想方式，该令牌可能在 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的生命周期内发生变化。例如，如果令牌由 `get_authentication_token()` 生成并在
    `token` 参数中传递给 DBAPI，则可以实现如下：'
- en: '[PRE137]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: See also
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Connecting to databases with access tokens](../dialects/mssql.html#mssql-pyodbc-access-tokens)
    - a more concrete example involving SQL Server'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用访问令牌连接数据库](../dialects/mssql.html#mssql-pyodbc-access-tokens) - 涉及 SQL Server
    的更具体示例'
- en: Modifying the DBAPI connection after connect, or running commands after connect
  id: totrans-953
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改连接后的 DBAPI 连接，或在连接后运行命令
- en: 'For a DBAPI connection that SQLAlchemy creates without issue, but where we
    would like to modify the completed connection before it’s actually used, such
    as for setting special flags or running certain commands, the [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event hook is the most appropriate hook.
    This hook is called for every new connection created, before it is used by SQLAlchemy:'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQLAlchemy创建的DBAPI连接，如果我们想在实际使用之前修改已完成的连接，比如设置特殊标志或运行某些命令，[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect")事件钩子是最合适的钩子。这个钩子在每个新连接创建时调用，然后被SQLAlchemy使用：
- en: '[PRE138]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Fully Replacing the DBAPI `connect()` function
  id: totrans-956
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全替换DBAPI的`connect()`函数
- en: 'Finally, the [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") event hook can also allow us to
    take over the connection process entirely by establishing the connection and returning
    it:'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")事件钩子也可以让我们完全接管连接过程，建立连接并返回它：
- en: '[PRE139]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: The [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") hook supersedes the previous [`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") hook, which remains available. [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") has the distinct advantage that
    the complete arguments parsed from the URL are also passed to the user-defined
    function which is not the case with [`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine").
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")钩子取代了以前的[`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine")钩子，该钩子仍然可用。[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")具有一个明显的优势，即从URL解析的完整参数也传递给用户定义的函数，而这在[`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine")中并非如此。'
- en: Special Keyword Arguments Passed to dbapi.connect()
  id: totrans-960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递给`dbapi.connect()`的特殊关键字参数
- en: All Python DBAPIs accept additional arguments beyond the basics of connecting.
    Common parameters include those to specify character set encodings and timeout
    values; more complex data includes special DBAPI constants and objects and SSL
    sub-parameters. There are two rudimentary means of passing these arguments without
    complexity.
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Python DBAPI都接受除了基本连接之外的额外参数。常见参数包括用于指定字符集编码和超时值的参数；更复杂的数据包括特殊的DBAPI常量和对象以及SSL子参数。有两种基本的方法可以传递这些参数而不增加复杂性。
- en: Add Parameters to the URL Query string
  id: totrans-962
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将参数添加到URL查询字符串中
- en: 'Simple string values, as well as some numeric values and boolean flags, may
    be often specified in the query string of the URL directly. A common example of
    this is DBAPIs that accept an argument `encoding` for character encodings, such
    as most MySQL DBAPIs:'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的字符串值，以及一些数值和布尔标志，通常可以直接在URL的查询字符串中指定。一个常见的例子是接受`encoding`参数用于字符编码的DBAPIs，比如大多数MySQL
    DBAPIs：
- en: '[PRE140]'
  id: totrans-964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: The advantage of using the query string is that additional DBAPI options may
    be specified in configuration files in a manner that’s portable to the DBAPI specified
    in the URL. The specific parameters passed through at this level vary by SQLAlchemy
    dialect. Some dialects pass all arguments through as strings, while others will
    parse for specific datatypes and move parameters to different places, such as
    into driver-level DSNs and connect strings. As per-dialect behavior in this area
    currently varies, the dialect documentation should be consulted for the specific
    dialect in use to see if particular parameters are supported at this level.
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 使用查询字符串的优势在于可以在配置文件中指定额外的DBAPI选项，以一种对URL中指定的DBAPI可移植的方式。在这个级别传递的具体参数因SQLAlchemy方言而异。一些方言将所有参数都作为字符串传递，而其他方言将解析特定数据类型并将参数移动到不同位置，比如驱动程序级别的DSN和连接字符串。由于当前在这个领域的方言行为各不相同，应该查阅特定方言的文档，以查看在这个级别是否支持特定参数。
- en: Tip
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'A general technique to display the exact arguments passed to the DBAPI for
    a given URL may be performed using the [`Dialect.create_connect_args()`](internals.html#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method directly as follows:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 一种显示给定 URL 的 DBAPI 所传递的精确参数的一般技术可以直接使用 [`Dialect.create_connect_args()`](internals.html#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") 方法，如下所示：
- en: '[PRE141]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: The above `args, kwargs` pair is normally passed to the DBAPI as `dbapi.connect(*args,
    **kwargs)`.
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `args, kwargs` 对通常作为 `dbapi.connect(*args, **kwargs)` 传递给 DBAPI。
- en: Use the connect_args dictionary parameter
  id: totrans-970
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 `connect_args` 字典参数
- en: 'A more general system of passing any parameter to the `dbapi.connect()` function
    that is guaranteed to pass all parameters at all times is the [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary parameter. This may be used for parameters
    that are otherwise not handled by the dialect when added to the query string,
    as well as when special sub-structures or objects must be passed to the DBAPI.
    Sometimes it’s just that a particular flag must be sent as the `True` symbol and
    the SQLAlchemy dialect is not aware of this keyword argument to coerce it from
    its string form as presented in the URL. Below illustrates the use of a psycopg2
    “connection factory” that replaces the underlying implementation the connection:'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更通用的系统，用于向 `dbapi.connect()` 函数传递任何参数，并保证始终传递所有参数，是 [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 字典参数。这可用于那些否则不被方言处理的参数，当它们添加到查询字符串时，以及当必须将特殊子结构或对象传递给
    DBAPI 时。有时，只需将特定标志发送为 `True` 符号，而 SQLAlchemy 方言不知道此关键字参数以将其从其URL中呈现的字符串形式强制转换。下面说明了使用
    psycopg2 “连接工厂” 的示例，用它替换了连接的底层实现：
- en: '[PRE142]'
  id: totrans-972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Another example is the pyodbc “timeout” parameter:'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是 pyodbc 的 “timeout” 参数：
- en: '[PRE143]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: The above example also illustrates that both URL “query string” parameters as
    well as [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") may be used at the same time; in the case of pyodbc,
    the “driver” keyword has special meaning within the URL.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例还说明了 URL “查询字符串”参数以及 [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 可以同时使用；在 pyodbc 的情况下，“driver” 关键字在 URL 中具有特殊意义。
- en: Add Parameters to the URL Query string
  id: totrans-976
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向 URL 查询字符串添加参数
- en: 'Simple string values, as well as some numeric values and boolean flags, may
    be often specified in the query string of the URL directly. A common example of
    this is DBAPIs that accept an argument `encoding` for character encodings, such
    as most MySQL DBAPIs:'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的字符串值，以及一些数值和布尔标志，通常可以直接在 URL 的查询字符串中指定。这种情况的常见例子是接受字符编码参数 `encoding` 的 DBAPI，例如大多数
    MySQL DBAPI：
- en: '[PRE144]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: The advantage of using the query string is that additional DBAPI options may
    be specified in configuration files in a manner that’s portable to the DBAPI specified
    in the URL. The specific parameters passed through at this level vary by SQLAlchemy
    dialect. Some dialects pass all arguments through as strings, while others will
    parse for specific datatypes and move parameters to different places, such as
    into driver-level DSNs and connect strings. As per-dialect behavior in this area
    currently varies, the dialect documentation should be consulted for the specific
    dialect in use to see if particular parameters are supported at this level.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 使用查询字符串的优点是可以在配置文件中指定其他 DBAPI 选项，这种方式对于在 URL 中指定的 DBAPI 是可移植的。通过此级别传递的特定参数因
    SQLAlchemy 方言而异。一些方言将所有参数作为字符串传递，而其他方言将解析特定的数据类型并将参数移到不同的位置，例如到驱动程序级别的 DSN 和连接字符串。由于此领域的方言行为目前有所变化，因此应查阅使用的特定方言的方言文档，以查看在此级别是否支持特定参数。
- en: Tip
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'A general technique to display the exact arguments passed to the DBAPI for
    a given URL may be performed using the [`Dialect.create_connect_args()`](internals.html#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method directly as follows:'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 一种显示给定 URL 的 DBAPI 所传递的精确参数的一般技术可以直接使用 [`Dialect.create_connect_args()`](internals.html#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") 方法，如下所示：
- en: '[PRE145]'
  id: totrans-982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: The above `args, kwargs` pair is normally passed to the DBAPI as `dbapi.connect(*args,
    **kwargs)`.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `args, kwargs` 对通常作为 `dbapi.connect(*args, **kwargs)` 传递给 DBAPI。
- en: Use the connect_args dictionary parameter
  id: totrans-984
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 `connect_args` 字典参数
- en: 'A more general system of passing any parameter to the `dbapi.connect()` function
    that is guaranteed to pass all parameters at all times is the [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary parameter. This may be used for parameters
    that are otherwise not handled by the dialect when added to the query string,
    as well as when special sub-structures or objects must be passed to the DBAPI.
    Sometimes it’s just that a particular flag must be sent as the `True` symbol and
    the SQLAlchemy dialect is not aware of this keyword argument to coerce it from
    its string form as presented in the URL. Below illustrates the use of a psycopg2
    “connection factory” that replaces the underlying implementation the connection:'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 将任何参数传递给`dbapi.connect()`函数的更通用的系统，保证始终传递所有参数的是[`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典参数。这可以用于否则不会由方言处理的添加到查询字符串的参数，以及当必须将特殊子结构或对象传递给 DBAPI
    时。有时只是一个特定标志必须作为`True`符号发送，并且 SQLAlchemy 方言不知道此关键字参数以将其从 URL 中呈现的字符串形式强制转换为其。下面说明了使用
    psycopg2 的“connection factory”替换连接的底层实现的示例：
- en: '[PRE146]'
  id: totrans-986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Another example is the pyodbc “timeout” parameter:'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是 pyodbc 的“timeout”参数：
- en: '[PRE147]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: The above example also illustrates that both URL “query string” parameters as
    well as [`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") may be used at the same time; in the case of pyodbc,
    the “driver” keyword has special meaning within the URL.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例还说明了 URL“查询字符串”参数以及[`create_engine.connect_args`](#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")都可以同时使用；在 pyodbc 的情况下，“driver”关键字在 URL 中具有特殊含义。
- en: Controlling how parameters are passed to the DBAPI connect() function
  id: totrans-990
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制参数传递到 DBAPI connect() 函数的方式
- en: 'Beyond manipulating the parameters passed to `connect()`, we can further customize
    how the DBAPI `connect()` function itself is called using the [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") event hook. This hook is passed
    the full `*args, **kwargs` that the dialect would send to `connect()`. These collections
    can then be modified in place to alter how they are used:'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 除了操纵传递给 `connect()` 的参数之外，我们还可以通过[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")事件钩子进一步自定义 DBAPI `connect()` 函数本身的调用方式。此钩子传递了方言将发送给
    `connect()` 的完整的 `*args, **kwargs`。然后可以修改这些集合以更改它们的使用方式：
- en: '[PRE148]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '#### Generating dynamic authentication tokens'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 生成动态认证令牌'
- en: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") is also an ideal way to dynamically
    insert an authentication token that might change over the lifespan of an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). For example, if the token gets generated by `get_authentication_token()`
    and passed to the DBAPI in a `token` parameter, this could be implemented as:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")也是一种理想的方法，可以动态插入可能会随着[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")寿命而变化的认证令牌。例如，如果令牌由`get_authentication_token()`生成并在`token`参数中传递给
    DBAPI，则可以实现为：'
- en: '[PRE149]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: See also
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Connecting to databases with access tokens](../dialects/mssql.html#mssql-pyodbc-access-tokens)
    - a more concrete example involving SQL Server  #### Generating dynamic authentication
    tokens'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用访问令牌连接数据库](../dialects/mssql.html#mssql-pyodbc-access-tokens) - 一个更具体的例子涉及
    SQL Server  #### 生成动态认证令牌'
- en: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") is also an ideal way to dynamically
    insert an authentication token that might change over the lifespan of an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). For example, if the token gets generated by `get_authentication_token()`
    and passed to the DBAPI in a `token` parameter, this could be implemented as:'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")也是一种理想的方法，可以动态插入可能会随着[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")寿命而变化的认证令牌。例如，如果令牌由`get_authentication_token()`生成并在`token`参数中传递给
    DBAPI，则可以实现为：'
- en: '[PRE150]'
  id: totrans-999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: See also
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Connecting to databases with access tokens](../dialects/mssql.html#mssql-pyodbc-access-tokens)
    - a more concrete example involving SQL Server'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用访问令牌连接数据库](../dialects/mssql.html#mssql-pyodbc-access-tokens) - 一个更具体的涉及SQL
    Server的例子'
- en: Modifying the DBAPI connection after connect, or running commands after connect
  id: totrans-1002
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在连接后修改DBAPI连接，或在连接后运行命令
- en: 'For a DBAPI connection that SQLAlchemy creates without issue, but where we
    would like to modify the completed connection before it’s actually used, such
    as for setting special flags or running certain commands, the [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event hook is the most appropriate hook.
    This hook is called for every new connection created, before it is used by SQLAlchemy:'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQLAlchemy创建的DBAPI连接，虽然没有问题，但我们想要在实际使用之前修改完成的连接的情况，例如设置特殊标志或运行某些命令，[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect")事件钩子是最合适的钩子。这个钩子在每次创建新连接时调用，然后由SQLAlchemy使用：
- en: '[PRE151]'
  id: totrans-1004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Fully Replacing the DBAPI `connect()` function
  id: totrans-1005
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全替换DBAPI的`connect()`函数
- en: 'Finally, the [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") event hook can also allow us to
    take over the connection process entirely by establishing the connection and returning
    it:'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")事件钩子也可以允许我们完全接管连接过程，建立连接并返回它：
- en: '[PRE152]'
  id: totrans-1007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: The [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") hook supersedes the previous [`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") hook, which remains available. [`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect") has the distinct advantage that
    the complete arguments parsed from the URL are also passed to the user-defined
    function which is not the case with [`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine").
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")钩子取代了以前的[`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine")钩子，后者仍然可用。[`DialectEvents.do_connect()`](events.html#sqlalchemy.events.DialectEvents.do_connect
    "sqlalchemy.events.DialectEvents.do_connect")的明显优势是解析自URL的完整参数也传递给用户定义的函数，而对于[`create_engine.creator`](#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine")不是这样。'
- en: '## Configuring Logging'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: '## 配置日志记录'
- en: Python’s standard [logging](https://docs.python.org/library/logging.html) module
    is used to implement informational and debug log output with SQLAlchemy. This
    allows SQLAlchemy’s logging to integrate in a standard way with other applications
    and libraries. There are also two parameters [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") present on [`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine") which allow immediate logging to `sys.stdout` for
    the purposes of local development; these parameters ultimately interact with the
    regular Python loggers described below.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: Python的标准[logging](https://docs.python.org/library/logging.html)模块用于实现SQLAlchemy的信息和调试日志输出。这使得SQLAlchemy的日志记录可以以标准方式与其他应用程序和库集成。[`create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")上还有两个参数[`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine")和[`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine")，它们允许立即将日志记录到`sys.stdout`以进行本地开发；这些参数最终与下面描述的常规Python记录器进行交互。
- en: 'This section assumes familiarity with the above linked logging module. All
    logging performed by SQLAlchemy exists underneath the `sqlalchemy` namespace,
    as used by `logging.getLogger(''sqlalchemy'')`. When logging has been configured
    (i.e. such as via `logging.basicConfig()`), the general namespace of SA loggers
    that can be turned on is as follows:'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节假设您熟悉上面链接的日志记录模块。SQLAlchemy执行的所有日志记录都存在于`sqlalchemy`命名空间下，就像`logging.getLogger('sqlalchemy')`所使用的那样。当日志记录已经配置好（例如通过`logging.basicConfig()`），可以打开的SA日志记录器的一般命名空间如下所示：
- en: '`sqlalchemy.engine` - controls SQL echoing. Set to `logging.INFO` for SQL query
    output, `logging.DEBUG` for query + result set output. These settings are equivalent
    to `echo=True` and `echo="debug"` on [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine"), respectively.'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.engine` - 控制 SQL 回显。设置为`logging.INFO`以输出 SQL 查询结果，设置为`logging.DEBUG`以输出查询结果集。这些设置相当于[`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 上的`echo=True`和`echo="debug"`。'
- en: '`sqlalchemy.pool` - controls connection pool logging. Set to `logging.INFO`
    to log connection invalidation and recycle events; set to `logging.DEBUG` to additionally
    log all pool checkins and checkouts. These settings are equivalent to `pool_echo=True`
    and `pool_echo="debug"` on [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine"), respectively.'
  id: totrans-1013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.pool` - 控制连接池日志记录。设置为`logging.INFO`以记录连接失效和回收事件；设置为`logging.DEBUG`以额外记录所有连接池的签入和签出。这些设置相当于[`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") 上的`pool_echo=True`和`pool_echo="debug"`。'
- en: '`sqlalchemy.dialects` - controls custom logging for SQL dialects, to the extent
    that logging is used within specific dialects, which is generally minimal.'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.dialects` - 控制 SQL 方言的自定义日志记录，以特定方言内部使用日志的程度为准，通常很少。'
- en: '`sqlalchemy.orm` - controls logging of various ORM functions to the extent
    that logging is used within the ORM, which is generally minimal. Set to `logging.INFO`
    to log some top-level information on mapper configurations.'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm` - 控制各种 ORM 函数的日志记录，以 ORM 内部使用日志的程度为准，通常很少。设置为`logging.INFO`以记录一些有关映射器配置的顶级信息。'
- en: 'For example, to log SQL queries using Python logging instead of the `echo=True`
    flag:'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用 Python 日志记录而不是`echo=True`标志记录 SQL 查询：
- en: '[PRE153]'
  id: totrans-1017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: By default, the log level is set to `logging.WARN` within the entire `sqlalchemy`
    namespace so that no log operations occur, even within an application that has
    logging enabled otherwise.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，整个 `sqlalchemy` 命名空间的日志级别设置为`logging.WARN`，因此即使在已启用日志记录的应用程序中也不会发生任何日志操作。
- en: Note
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    conserves Python function call overhead by only emitting log statements when the
    current logging level is detected as `logging.INFO` or `logging.DEBUG`. It only
    checks this level when a new connection is procured from the connection pool.
    Therefore when changing the logging configuration for an already-running application,
    any [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    that’s currently active, or more commonly a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session") object that’s active in a transaction, won’t
    log any SQL according to the new configuration until a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is procured (in the case of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session"), this is after the current transaction ends
    and a new one begins).
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    通过仅在检测到当前日志级别为`logging.INFO`或`logging.DEBUG`时发出日志语句来节省 Python 函数调用开销。仅在从连接池获取新连接时才检查此级别。因此，在更改已运行应用程序的日志配置时，任何当前活动的
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")（更常见的是处于事务中的活动
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.session.Session")
    对象）都不会根据新配置记录任何 SQL，直到获取新的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")（在 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session") 的情况下，这是在当前事务结束并开始新事务之后）。
- en: More on the Echo Flag
  id: totrans-1021
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多关于 Echo 标志
- en: 'As mentioned previously, the [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") parameters are a shortcut to immediate logging to
    `sys.stdout`:'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，[`create_engine.echo`](#sqlalchemy.create_engine.params.echo "sqlalchemy.create_engine")
    和 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool "sqlalchemy.create_engine")
    参数是直接将日志记录到 `sys.stdout` 的快捷方式：
- en: '[PRE154]'
  id: totrans-1023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Use of these flags is roughly equivalent to:'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些标志大致相当于：
- en: '[PRE155]'
  id: totrans-1025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: It’s important to note that these two flags work **independently** of any existing
    logging configuration, and will make use of `logging.basicConfig()` unconditionally.
    This has the effect of being configured **in addition** to any existing logger
    configurations. Therefore, **when configuring logging explicitly, ensure all echo
    flags are set to False at all times**, to avoid getting duplicate log lines.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这两个标志**独立**于任何现有的日志配置工作，并且将无条件地使用 `logging.basicConfig()`。这将在**除了**任何现有记录器配置之外**额外**配置。因此，在显式配置日志时，请确保始终将所有回显标志设置为
    False，以避免获取重复的日志行。
- en: Setting the Logging Name
  id: totrans-1027
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置日志名称
- en: 'The logger name of instance such as an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    defaults to using a truncated hex identifier string. To set this to a specific
    name, use the [`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") and [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") with [`sqlalchemy.create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"); the name will be appended to the logging name `sqlalchemy.engine.Engine`:'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 的实例的记录器名称默认为使用截断的十六进制标识符字符串。要将其设置为特定名称，请使用
    [`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name "sqlalchemy.create_engine")
    和 [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") 与 [`sqlalchemy.create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")；名称将附加到日志名称 `sqlalchemy.engine.Engine`：
- en: '[PRE156]'
  id: totrans-1029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Tip
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The [`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") and [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") parameters may also be used in conjunction with [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine"). However, an unavoidable double logging condition
    will occur if other engines are created with echo flags set to True and **no**
    logging name. This is because a handler will be added automatically for `sqlalchemy.engine.Engine`
    which will log messages both for the name-less engine as well as engines with
    logging names. For example:'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") 和 [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") 参数也可与 [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 和 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") 结合使用。然而，如果其他引擎创建时将回显标志设置为 True 而没有日志名称，则将会发生无法避免的双重记录条件。这是因为将自动为
    `sqlalchemy.engine.Engine` 添加处理程序，它将同时记录无名称的引擎和具有日志名称的引擎的消息。例如：'
- en: '[PRE157]'
  id: totrans-1032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: The above scenario will double log `SELECT 3`. To resolve, ensure all engines
    have a `logging_name` set, or use explicit logger / handler setup without using
    [`create_engine.echo`](#sqlalchemy.create_engine.params.echo "sqlalchemy.create_engine")
    and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool "sqlalchemy.create_engine").
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 上述情况将会双重记录 `SELECT 3`。为解决此问题，请确保所有引擎都设置了 `logging_name`，或者使用显式的记录器/处理器设置，而不使用[`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") 和 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine")。
- en: '### Setting Per-Connection / Sub-Engine Tokens'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '### 设置每个连接/子引擎令牌'
- en: New in version 1.4.0b2.
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4.0b2 版本新增。
- en: While the logging name is appropriate to establish on an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object that is long lived, it’s not flexible enough
    to accommodate for an arbitrarily large list of names, for the case of tracking
    individual connections and/or transactions in log messages.
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在长期存在的[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象上建立日志名称是适当的，但它不够灵活，无法容纳任意长的名称列表，以跟踪日志消息中的单个连接和/或事务的情况。
- en: 'For this use case, the log message itself generated by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects may be augmented with additional tokens such
    as transaction or request identifiers. The [`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") parameter accepts a string argument
    that may be used to establish per-connection tracking tokens:'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此用例，由 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    和 [`Result`](connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象生成的日志消息本身可以通过附加诸如事务或请求标识符之类的其他标记来增强。 [`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") 参数接受一个字符串参数，该参数可用于建立每个连接的跟踪标记：
- en: '[PRE158]'
  id: totrans-1038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'The [`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") parameter may also be established
    on engines or sub-engines via [`create_engine.execution_options`](#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"). This may be useful to apply different
    logging tokens to different components of an application without creating new
    engines:'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") 参数也可以通过 [`create_engine.execution_options`](#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") 或 [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 在引擎或子引擎上建立。这可能对将不同的日志标记应用于应用程序的不同组件而不创建新引擎非常有用：'
- en: '[PRE159]'
  id: totrans-1040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Hiding Parameters
  id: totrans-1041
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐藏参数
- en: 'The logging emitted by [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") also indicates an excerpt of the SQL parameters that
    are present for a particular statement. To prevent these parameters from being
    logged for privacy purposes, enable the [`create_engine.hide_parameters`](#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine") flag:'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    发出的日志还显示了特定语句中存在的 SQL 参数摘录。为了防止出于隐私目的记录这些参数，请启用 [`create_engine.hide_parameters`](#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine") 标志：'
- en: '[PRE160]'
  id: totrans-1043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: More on the Echo Flag
  id: totrans-1044
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回声标记的更多信息
- en: 'As mentioned previously, the [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") parameters are a shortcut to immediate logging to
    `sys.stdout`:'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，[`create_engine.echo`](#sqlalchemy.create_engine.params.echo "sqlalchemy.create_engine")
    和 [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool "sqlalchemy.create_engine")
    参数是立即记录到 `sys.stdout` 的快捷方式：
- en: '[PRE161]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Use of these flags is roughly equivalent to:'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些标志大致相当于：
- en: '[PRE162]'
  id: totrans-1048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: It’s important to note that these two flags work **independently** of any existing
    logging configuration, and will make use of `logging.basicConfig()` unconditionally.
    This has the effect of being configured **in addition** to any existing logger
    configurations. Therefore, **when configuring logging explicitly, ensure all echo
    flags are set to False at all times**, to avoid getting duplicate log lines.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这两个标志**独立**于任何现有的日志配置工作，并且无条件使用 `logging.basicConfig()`。这会使其效果**叠加**到任何现有的记录器配置中。因此，**在明确配置日志时，请始终确保所有回声标志都设置为
    False**，以避免获得重复的日志行。
- en: Setting the Logging Name
  id: totrans-1050
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置日志名称
- en: 'The logger name of instance such as an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    defaults to using a truncated hex identifier string. To set this to a specific
    name, use the [`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") and [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") with [`sqlalchemy.create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine"); the name will be appended to the logging name `sqlalchemy.engine.Engine`:'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 实例的记录器名称（如[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")）默认为使用截断的十六进制标识符字符串。要将其设置为特定名称，请使用[`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine")和[`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine")与[`sqlalchemy.create_engine()`](#sqlalchemy.create_engine
    "sqlalchemy.create_engine")；该名称将附加到日志名称`sqlalchemy.engine.Engine`：
- en: '[PRE163]'
  id: totrans-1052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Tip
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The [`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine") and [`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine") parameters may also be used in conjunction with [`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine") and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine"). However, an unavoidable double logging condition
    will occur if other engines are created with echo flags set to True and **no**
    logging name. This is because a handler will be added automatically for `sqlalchemy.engine.Engine`
    which will log messages both for the name-less engine as well as engines with
    logging names. For example:'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.logging_name`](#sqlalchemy.create_engine.params.logging_name
    "sqlalchemy.create_engine")和[`create_engine.pool_logging_name`](#sqlalchemy.create_engine.params.pool_logging_name
    "sqlalchemy.create_engine")参数也可以与[`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine")和[`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine")一起使用。但是，如果其他引擎设置了echo标志为True而没有设置日志名称，则将会发生不可避免的双重记录条件。这是因为将自动为`sqlalchemy.engine.Engine`添加处理程序，该处理程序将同时为无名称的引擎和具有日志名称的引擎记录消息。例如：'
- en: '[PRE164]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: The above scenario will double log `SELECT 3`. To resolve, ensure all engines
    have a `logging_name` set, or use explicit logger / handler setup without using
    [`create_engine.echo`](#sqlalchemy.create_engine.params.echo "sqlalchemy.create_engine")
    and [`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool "sqlalchemy.create_engine").
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 上述情景将对`SELECT 3`进行双重记录。为了解决此问题，请确保所有引擎都设置了`logging_name`，或者在不使用[`create_engine.echo`](#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine")和[`create_engine.echo_pool`](#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine")的情况下，使用显式的记录器/处理程序设置。
- en: '### Setting Per-Connection / Sub-Engine Tokens'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '### 设置每个连接/子引擎令牌'
- en: New in version 1.4.0b2.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.0b2版本中的新功能。
- en: While the logging name is appropriate to establish on an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object that is long lived, it’s not flexible enough
    to accommodate for an arbitrarily large list of names, for the case of tracking
    individual connections and/or transactions in log messages.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '虽然在长期存在的[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象上建立记录名称是合适的，但是对于跟踪日志消息中的单个连接和/或事务的情况，它的灵活性不够。 '
- en: 'For this use case, the log message itself generated by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects may be augmented with additional tokens such
    as transaction or request identifiers. The [`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") parameter accepts a string argument
    that may be used to establish per-connection tracking tokens:'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种用例，由[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和[`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象生成的日志消息本身可能会使用附加令牌（例如事务或请求标识符）进行扩充。[`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options")参数接受一个字符串参数，该参数可用于建立每个连接的跟踪令牌：
- en: '[PRE165]'
  id: totrans-1061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'The [`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") parameter may also be established
    on engines or sub-engines via [`create_engine.execution_options`](#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"). This may be useful to apply different
    logging tokens to different components of an application without creating new
    engines:'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.logging_token`](connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") 参数也可以通过 [`create_engine.execution_options`](#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") 或 [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 在引擎或子引擎上建立。这可能对于在不创建新引擎的情况下将不同的日志令牌应用于应用程序的不同组件很有用：'
- en: '[PRE166]'
  id: totrans-1063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Hiding Parameters
  id: totrans-1064
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐藏参数
- en: 'The logging emitted by [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") also indicates an excerpt of the SQL parameters that
    are present for a particular statement. To prevent these parameters from being
    logged for privacy purposes, enable the [`create_engine.hide_parameters`](#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine") flag:'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    发出的日志还指示了对于特定语句存在的 SQL 参数的摘录。为了防止出于隐私目的记录这些参数，请启用 [`create_engine.hide_parameters`](#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine") 标志：'
- en: '[PRE167]'
  id: totrans-1066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
