- en: Declarative Mapping Styles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明性映射样式
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/declarative_styles.html](https://docs.sqlalchemy.org/en/20/orm/declarative_styles.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/declarative_styles.html](https://docs.sqlalchemy.org/en/20/orm/declarative_styles.html)
- en: As introduced at [Declarative Mapping](mapping_styles.html#orm-declarative-mapping),
    the **Declarative Mapping** is the typical way that mappings are constructed in
    modern SQLAlchemy. This section will provide an overview of forms that may be
    used for Declarative mapper configuration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 [声明性映射](mapping_styles.html#orm-declarative-mapping) 中介绍的，**声明性映射** 是现代 SQLAlchemy
    中构建映射的典型方式。本节将概述可用于声明性映射器配置的形式。
- en: '## Using a Declarative Base Class'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用声明性基类'
- en: 'The most common approach is to generate a “Declarative Base” class by subclassing
    the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    superclass:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的方法是通过将 [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 超类作为子类生成“声明性基类”：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The Declarative Base class may also be created given an existing [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") by assigning it as a class variable named `registry`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过将现有的 [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    赋值为名为 `registry` 的类变量来创建声明性基类：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Changed in version 2.0: The [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass supersedes the use of the [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") methods; the superclass approach integrates
    with [**PEP 484**](https://peps.python.org/pep-0484/) tools without the use of
    plugins. See [ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    for migration notes.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中更改：[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 超类取代了 [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 函数和 [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") 方法的使用；超类方法与 [**PEP 484**](https://peps.python.org/pep-0484/)
    工具集成，无需使用插件。请参阅 [ORM 声明模型](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    迁移说明。
- en: 'With the declarative base class, new mapped classes are declared as subclasses
    of the base:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明性基类，新的映射类被声明为基类的子类：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Above, the `Base` class serves as a base for new classes that are to be mapped,
    as above new mapped classes `User` and `Address` are constructed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 上述中，`Base` 类作为新映射类的基础，如上所述，新映射类 `User` 和 `Address` 被构建。
- en: For each subclass constructed, the body of the class then follows the declarative
    mapping approach which defines both a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well as a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object behind the scenes which comprise a full mapping.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个构建的子类，类的主体随后遵循声明性映射方法，该方法在幕后定义了既是 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 也是 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象的一体化映射。
- en: See also
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table Configuration with Declarative](declarative_tables.html) - describes
    how to specify the components of the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be generated, including notes and options on the
    use of the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    construct and how it interacts with the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation type'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明性表配置 - 描述如何指定生成的映射 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的组件，包括关于使用 [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造的说明和选项，以及它与 [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 注解类型的交互方式。
- en: '[Mapper Configuration with Declarative](declarative_config.html) - describes
    all other aspects of ORM mapper configuration within Declarative including [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration, SQL expressions and [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") parameters  ## Declarative Mapping using a Decorator
    (no declarative base)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明性配置的映射器](declarative_config.html) - 描述了声明性中ORM映射器配置的所有其他方面，包括[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")配置、SQL表达式和[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")参数  ## 使用装饰器的声明性映射（无声明性基类）'
- en: As an alternative to using the “declarative base” class is to apply declarative
    mapping to a class explicitly, using either an imperative technique similar to
    that of a “classical” mapping, or more succinctly by using a decorator. The [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") function is a class decorator that can be applied
    to any Python class with no hierarchy in place. The Python class otherwise is
    configured in declarative style normally.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用“声明性基类”的替代方案，可以将声明性映射明确应用于类，方法是使用类似于“经典”映射的命令式技术，或者更简洁地使用装饰器。 [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")函数是一个类装饰器，可应用于任何没有层次结构的Python类。否则，Python类通常以声明性样式进行配置。
- en: 'The example below sets up the identical mapping as seen in the previous section,
    using the [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator rather than using the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例设置了与上一节中看到的相同的映射，使用[`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")装饰器而不是使用[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")超类：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When using the above style, the mapping of a particular class will **only**
    proceed if the decorator is applied to that class directly. For inheritance mappings
    (described in detail at [Mapping Class Inheritance Hierarchies](inheritance.html)),
    the decorator should be applied to each subclass that is to be mapped:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用上述风格时，特定类的映射**仅**在直接应用装饰器到该类时进行。对于继承映射（在[映射类继承层次结构](inheritance.html)中详细描述），应将装饰器应用于要映射的每个子类：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Both the [declarative table](declarative_tables.html#orm-declarative-table)
    and [imperative table](declarative_tables.html#orm-imperative-table-configuration)
    table configuration styles may be used with either the Declarative Base or decorator
    styles of Declarative mapping.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是使用声明性基类还是装饰器样式的声明性映射，都可以使用[声明性表](declarative_tables.html#orm-declarative-table)和[命令式表](declarative_tables.html#orm-imperative-table-configuration)表配置样式。
- en: 'The decorator form of mapping is useful when combining a SQLAlchemy declarative
    mapping with other class instrumentation systems such as [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    and [attrs](https://pypi.org/project/attrs/), though note that SQLAlchemy 2.0
    now features dataclasses integration with Declarative Base classes as well.  ##
    Using a Declarative Base Class'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '当将SQLAlchemy声明性映射与其他类仪器化系统（如[dataclasses](https://docs.python.org/3/library/dataclasses.html)和[attrs](https://pypi.org/project/attrs/)）结合使用时，装饰器形式的映射很有用，尽管请注意，SQLAlchemy
    2.0现在也具有与声明性基类的dataclasses集成。  ## 使用声明性基类'
- en: 'The most common approach is to generate a “Declarative Base” class by subclassing
    the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    superclass:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的方法是通过对[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")超类进行子类化来生成“声明性基类”：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The Declarative Base class may also be created given an existing [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") by assigning it as a class variable named `registry`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过将其分配为名为`registry`的类变量来使用现有的[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")创建声明性基类：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Changed in version 2.0: The [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass supersedes the use of the [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") methods; the superclass approach integrates
    with [**PEP 484**](https://peps.python.org/pep-0484/) tools without the use of
    plugins. See [ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    for migration notes.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")超类取代了[`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")函数和[`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")方法的使用；超类方法集成了[**PEP 484**](https://peps.python.org/pep-0484/)工具，无需使用插件。有关迁移说明，请参见[ORM声明模型](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)。
- en: 'With the declarative base class, new mapped classes are declared as subclasses
    of the base:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明性基类，新的映射类被声明为基类的子类：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Above, the `Base` class serves as a base for new classes that are to be mapped,
    as above new mapped classes `User` and `Address` are constructed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`Base` 类充当要映射的新类的基类，如上所述，构造了新的映射类`User`和`Address`。
- en: For each subclass constructed, the body of the class then follows the declarative
    mapping approach which defines both a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well as a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object behind the scenes which comprise a full mapping.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个构造的子类，类的主体随后遵循声明性映射方法，该方法在幕后定义了一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")以及一个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象，它们组成了一个完整的映射。
- en: See also
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Table Configuration with Declarative](declarative_tables.html) - describes
    how to specify the components of the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be generated, including notes and options on the
    use of the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    construct and how it interacts with the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation type'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明性进行表配置](declarative_tables.html) - 描述了如何指定要生成的映射[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的组件，包括有关使用[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造的注释和选项以及它与[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")注解类型的交互方式。'
- en: '[Mapper Configuration with Declarative](declarative_config.html) - describes
    all other aspects of ORM mapper configuration within Declarative including [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration, SQL expressions and [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") parameters'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明性进行映射配置](declarative_config.html) - 描述了在声明中进行的ORM映射器配置的所有其他方面，包括[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")配置、SQL表达式和[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")参数。'
- en: '## Declarative Mapping using a Decorator (no declarative base)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用装饰器进行声明性映射（无声明基类）'
- en: As an alternative to using the “declarative base” class is to apply declarative
    mapping to a class explicitly, using either an imperative technique similar to
    that of a “classical” mapping, or more succinctly by using a decorator. The [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") function is a class decorator that can be applied
    to any Python class with no hierarchy in place. The Python class otherwise is
    configured in declarative style normally.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用“声明基类”类的替代方法是显式地将声明映射应用于类，可以使用类似于“传统”映射的命令式技术，也可以更简洁地使用装饰器。 [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") 函数是一个类装饰器，可以应用于任何没有层次结构的 Python 类。否则，Python
    类通常以声明样式配置。
- en: 'The example below sets up the identical mapping as seen in the previous section,
    using the [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator rather than using the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例设置了与前一部分中相同的映射，使用 [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") 装饰器而不是使用 [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 超类：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When using the above style, the mapping of a particular class will **only**
    proceed if the decorator is applied to that class directly. For inheritance mappings
    (described in detail at [Mapping Class Inheritance Hierarchies](inheritance.html)),
    the decorator should be applied to each subclass that is to be mapped:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用上述风格时，特定类的映射仅在直接将装饰器应用于该类时才会进行。对于继承映射（在[映射类继承层次结构](inheritance.html)中详细描述），应该将装饰器应用于要映射的每个子类：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Both the [declarative table](declarative_tables.html#orm-declarative-table)
    and [imperative table](declarative_tables.html#orm-imperative-table-configuration)
    table configuration styles may be used with either the Declarative Base or decorator
    styles of Declarative mapping.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是 [声明式表](declarative_tables.html#orm-declarative-table) 还是 [命令式表](declarative_tables.html#orm-imperative-table-configuration)
    的表配置风格都可以与声明式映射的声明基类或装饰器风格一起使用。
- en: The decorator form of mapping is useful when combining a SQLAlchemy declarative
    mapping with other class instrumentation systems such as [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    and [attrs](https://pypi.org/project/attrs/), though note that SQLAlchemy 2.0
    now features dataclasses integration with Declarative Base classes as well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用装饰器形式的映射在将 SQLAlchemy 声明式映射与其他类的装配系统（如[dataclasses](https://docs.python.org/3/library/dataclasses.html)和[attrs](https://pypi.org/project/attrs/)）结合时很有用，但要注意，SQLAlchemy
    2.0 现在也支持在声明式基类中与 dataclasses 集成。
