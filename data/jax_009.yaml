- en: Automatic vectorization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动向量化
- en: 原文：[`jax.readthedocs.io/en/latest/automatic-vectorization.html`](https://jax.readthedocs.io/en/latest/automatic-vectorization.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/automatic-vectorization.html`](https://jax.readthedocs.io/en/latest/automatic-vectorization.html)
- en: 'In the previous section we discussed JIT compilation via the `jax.jit()` function.
    This notebook discusses another of JAX’s transforms: vectorization via `jax.vmap()`.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们讨论了通过`jax.jit()`函数进行的JIT编译。本文档还讨论了JAX的另一个转换：通过`jax.vmap()`进行向量化。
- en: Manual vectorization
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动向量化
- en: 'Consider the following simple code that computes the convolution of two one-dimensional
    vectors:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下简单代码，计算两个一维向量的卷积：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Suppose we would like to apply this function to a batch of weights `w` to a
    batch of vectors `x`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望将此函数应用于一批权重`w`到一批向量`x`。
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The most naive option would be to simply loop over the batch in Python:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的选择是在Python中简单地循环遍历批处理：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This produces the correct result, however it is not very efficient.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生正确的结果，但效率不高。
- en: In order to batch the computation efficiently, you would normally have to rewrite
    the function manually to ensure it is done in vectorized form. This is not particularly
    difficult to implement, but does involve changing how the function treats indices,
    axes, and other parts of the input.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地批处理计算，通常需要手动重写函数，以确保它以向量化形式完成。这并不难实现，但涉及更改函数处理索引、轴和输入其他部分的方式。
- en: 'For example, we could manually rewrite `convolve()` to support vectorized computation
    across the batch dimension as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以手动重写`convolve()`，以支持跨批处理维度的向量化计算，如下所示：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Such re-implementation can be messy and error-prone as the complexity of a function
    increases; fortunately JAX provides another way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着函数复杂性的增加，这种重新实现可能会变得混乱且容易出错；幸运的是，JAX提供了另一种方法。
- en: Automatic vectorization
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动向量化
- en: 'In JAX, the `jax.vmap()` transformation is designed to generate such a vectorized
    implementation of a function automatically:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在JAX中，`jax.vmap()`转换旨在自动生成这样的函数的向量化实现：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It does this by tracing the function similarly to `jax.jit()`, and automatically
    adding batch axes at the beginning of each input.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过类似于`jax.jit()`的追踪函数来实现这一点，并在每个输入的开头自动添加批处理轴。
- en: If the batch dimension is not the first, you may use the `in_axes` and `out_axes`
    arguments to specify the location of the batch dimension in inputs and outputs.
    These may be an integer if the batch axis is the same for all inputs and outputs,
    or lists, otherwise.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果批处理维度不是第一维，则可以使用`in_axes`和`out_axes`参数来指定输入和输出中批处理维度的位置。如果所有输入和输出的批处理轴相同，则可以使用整数，否则可以使用列表。
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`jax.vmap()` also supports the case where only one of the arguments is batched:
    for example, if you would like to convolve to a single set of weights `w` with
    a batch of vectors `x`; in this case the `in_axes` argument can be set to `None`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.vmap()`还支持只有一个参数被批处理的情况：例如，如果您希望将一组单一的权重`w`与一批向量`x`进行卷积；在这种情况下，`in_axes`参数可以设置为`None`：'
- en: '[PRE11]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Combining transformations
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合转换
- en: 'As with all JAX transformations, `jax.jit()` and `jax.vmap()` are designed
    to be composable, which means you can wrap a vmapped function with `jit`, or a
    jitted function with `vmap`, and everything will work correctly:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有JAX转换一样，`jax.jit()`和`jax.vmap()`都设计为可组合的，这意味着您可以用`jit`包装一个vmapped函数，或用`vmap`包装一个jitted函数，一切都会正常工作：
- en: '[PRE13]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
