- en: Visitor and Traversal Utilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问者和遍历实用程序
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/visitors.html](https://docs.sqlalchemy.org/en/20/core/visitors.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/visitors.html](https://docs.sqlalchemy.org/en/20/core/visitors.html)
- en: The [`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    module consists of classes and functions that serve the purpose of generically
    **traversing** a Core SQL expression structure. This is not unlike the Python
    `ast` module in that is presents a system by which a program can operate upon
    each component of a SQL expression. Common purposes this serves are locating various
    kinds of elements such as [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    objects, as well as altering the state of the structure such as replacing certain
    FROM clauses with others.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    模块由用于通用地 **遍历** 核心 SQL 表达式结构的类和函数组成。这与 Python 的 `ast` 模块类似，因为它提供了一个程序可以操作 SQL
    表达式每个组件的系统。它通常用于定位各种类型的元素，如 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    或 [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    对象，以及更改结构状态，如使用其他 FROM 子句替换某些 FROM 子句。'
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: the [`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    module is an internal API and is not fully public. It is subject to change and
    may additionally not function as expected for use patterns that aren’t considered
    within SQLAlchemy’s own internals.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    模块是一个内部 API，不是完全公开的。它可能会发生变化，而且对于不考虑 SQLAlchemy 内部工作方式的使用模式可能无法正常运行。'
- en: The [`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    module is part of the **internals** of SQLAlchemy and it is not usually used by
    calling application code. It is however used in certain edge cases such as when
    constructing caching routines as well as when building out custom SQL expressions
    using the [Custom SQL Constructs and Compilation Extension](compiler.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    模块是 SQLAlchemy 的 **内部** 部分，通常不会由调用应用程序代码使用。但是，在某些边缘情况下会使用它，例如构建缓存例程以及使用 [自定义 SQL
    构造和编译扩展](compiler.html) 构建自定义 SQL 表达式时。'
- en: Visitor/traversal interface and library functions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 访问者/遍历接口和库函数。
- en: '| Object Name | Description |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [anon_map](#sqlalchemy.sql.visitors.anon_map) | alias of `cache_anon_map`
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [anon_map](#sqlalchemy.sql.visitors.anon_map) | `cache_anon_map` 的别名 |'
- en: '| [cloned_traverse](#sqlalchemy.sql.visitors.cloned_traverse)(obj, opts, visitors)
    | Clone the given expression structure, allowing modifications by visitors for
    mutable objects. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [cloned_traverse](#sqlalchemy.sql.visitors.cloned_traverse)(obj, opts, visitors)
    | 克隆给定的表达式结构，允许访问者修改可变对象。 |'
- en: '| [ExternalTraversal](#sqlalchemy.sql.visitors.ExternalTraversal) | Base class
    for visitor objects which can traverse externally using the [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse") function. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [ExternalTraversal](#sqlalchemy.sql.visitors.ExternalTraversal) | 用于可以使用
    [`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")
    函数进行外部遍历的访问者对象的基类。 |'
- en: '| [InternalTraversal](#sqlalchemy.sql.visitors.InternalTraversal) | Defines
    visitor symbols used for internal traversal. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [InternalTraversal](#sqlalchemy.sql.visitors.InternalTraversal) | 定义用于内部遍历的访问者符号。
    |'
- en: '| [iterate](#sqlalchemy.sql.visitors.iterate)(obj[, opts]) | Traverse the given
    expression structure, returning an iterator. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [iterate](#sqlalchemy.sql.visitors.iterate)(obj[, opts]) | 遍历给定的表达式结构，返回一个迭代器。
    |'
- en: '| [replacement_traverse](#sqlalchemy.sql.visitors.replacement_traverse)(obj,
    opts, replace) | Clone the given expression structure, allowing element replacement
    by a given replacement function. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [replacement_traverse](#sqlalchemy.sql.visitors.replacement_traverse)(obj,
    opts, replace) | 克隆给定的表达式结构，允许使用给定的替换函数进行元素替换。 |'
- en: '| [traverse](#sqlalchemy.sql.visitors.traverse)(obj, opts, visitors) | Traverse
    and visit the given expression structure using the default iterator. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [traverse](#sqlalchemy.sql.visitors.traverse)(obj, opts, visitors) | 使用默认迭代器遍历给定的表达式结构并访问。
    |'
- en: '| [traverse_using](#sqlalchemy.sql.visitors.traverse_using)(iterator, obj,
    visitors) | Visit the given expression structure using the given iterator of objects.
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [traverse_using](#sqlalchemy.sql.visitors.traverse_using)(iterator, obj,
    visitors) | 使用给定的对象迭代器访问给定的表达式结构。 |'
- en: '| [Visitable](#sqlalchemy.sql.visitors.Visitable) | Base class for visitable
    objects. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [Visitable](#sqlalchemy.sql.visitors.Visitable) | 可访问对象的基类。 |'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Base class for visitor objects which can traverse externally using the [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse") function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 用于使用[`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")函数进行外部遍历的访问者对象的基类。
- en: Direct usage of the [`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")
    function is usually preferred.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用[`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")函数通常更可取。
- en: '**Members**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[chain()](#sqlalchemy.sql.visitors.ExternalTraversal.chain), [iterate()](#sqlalchemy.sql.visitors.ExternalTraversal.iterate),
    [traverse()](#sqlalchemy.sql.visitors.ExternalTraversal.traverse), [visitor_iterator](#sqlalchemy.sql.visitors.ExternalTraversal.visitor_iterator)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[chain()](#sqlalchemy.sql.visitors.ExternalTraversal.chain), [iterate()](#sqlalchemy.sql.visitors.ExternalTraversal.iterate),
    [traverse()](#sqlalchemy.sql.visitors.ExternalTraversal.traverse), [visitor_iterator](#sqlalchemy.sql.visitors.ExternalTraversal.visitor_iterator)'
- en: '**Class signature**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.visitors.ExternalTraversal`](#sqlalchemy.sql.visitors.ExternalTraversal
    "sqlalchemy.sql.visitors.ExternalTraversal") (`sqlalchemy.util.langhelpers.MemoizedSlots`)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.visitors.ExternalTraversal`](#sqlalchemy.sql.visitors.ExternalTraversal
    "sqlalchemy.sql.visitors.ExternalTraversal")（`sqlalchemy.util.langhelpers.MemoizedSlots`）
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ‘Chain’ an additional ExternalTraversal onto this ExternalTraversal
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在此ExternalTraversal上“链接”一个额外的ExternalTraversal
- en: The chained visitor will receive all visit events after this one.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 连接的访问者将在此后接收所有访问事件。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Traverse the given expression structure, returning an iterator of all elements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历给定的表达式结构，返回所有元素的迭代器。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Traverse and visit the given expression structure.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历并访问给定的表达式结构。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Iterate through this visitor and each ‘chained’ visitor.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此访问者和每个“链接”访问者进行迭代。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Defines visitor symbols used for internal traversal.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 定义用于内部遍历的访问者符号。
- en: The [`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal "sqlalchemy.sql.visitors.InternalTraversal")
    class is used in two ways. One is that it can serve as the superclass for an object
    that implements the various visit methods of the class. The other is that the
    symbols themselves of [`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal") are used within the `_traverse_internals`
    collection. Such as, the [`Case`](sqlelement.html#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case") object defines `_traverse_internals` as
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal "sqlalchemy.sql.visitors.InternalTraversal")类有两种用法。一种是它可以作为一个实现该类各种访问方法的对象的超类。另一种是[`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal")自身的符号被用在`_traverse_internals`集合中。例如，[`Case`](sqlelement.html#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case")对象将`_traverse_internals`定义为'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Above, the [`Case`](sqlelement.html#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    class indicates its internal state as the attributes named `value`, `whens`, and
    `else_`. They each link to an [`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal") method which indicates the type of
    datastructure to which each attribute refers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，[`Case`](sqlelement.html#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")类将其内部状态表示为名为`value`、`whens`和`else_`的属性。它们各自链接到一个[`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal")方法，该方法指示每个属性引用的数据结构类型。
- en: 'Using the `_traverse_internals` structure, objects of type `InternalTraversible`
    will have the following methods automatically implemented:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`_traverse_internals`结构，`InternalTraversible`类型的对象将自动实现以下方法：
- en: '`HasTraverseInternals.get_children()`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HasTraverseInternals.get_children()`'
- en: '`HasTraverseInternals._copy_internals()`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HasTraverseInternals._copy_internals()`'
- en: '`HasCacheKey._gen_cache_key()`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HasCacheKey._gen_cache_key()`'
- en: Subclasses can also implement these methods directly, particularly for the `HasTraverseInternals._copy_internals()`
    method, when special steps are needed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 子类还可以直接实现这些方法，特别是`HasTraverseInternals._copy_internals()`方法，当需要特殊步骤时。
- en: New in version 1.4.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Members**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dp_annotations_key](#sqlalchemy.sql.visitors.InternalTraversal.dp_annotations_key),
    [dp_anon_name](#sqlalchemy.sql.visitors.InternalTraversal.dp_anon_name), [dp_boolean](#sqlalchemy.sql.visitors.InternalTraversal.dp_boolean),
    [dp_clauseelement](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement),
    [dp_clauseelement_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_list),
    [dp_clauseelement_tuple](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_tuple),
    [dp_clauseelement_tuples](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_tuples),
    [dp_dialect_options](#sqlalchemy.sql.visitors.InternalTraversal.dp_dialect_options),
    [dp_dml_multi_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_multi_values),
    [dp_dml_ordered_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_ordered_values),
    [dp_dml_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_values), [dp_fromclause_canonical_column_collection](#sqlalchemy.sql.visitors.InternalTraversal.dp_fromclause_canonical_column_collection),
    [dp_fromclause_ordered_set](#sqlalchemy.sql.visitors.InternalTraversal.dp_fromclause_ordered_set),
    [dp_has_cache_key](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key),
    [dp_has_cache_key_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key_list),
    [dp_has_cache_key_tuples](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key_tuples),
    [dp_ignore](#sqlalchemy.sql.visitors.InternalTraversal.dp_ignore), [dp_inspectable](#sqlalchemy.sql.visitors.InternalTraversal.dp_inspectable),
    [dp_inspectable_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_inspectable_list),
    [dp_multi](#sqlalchemy.sql.visitors.InternalTraversal.dp_multi), [dp_multi_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_multi_list),
    [dp_named_ddl_element](#sqlalchemy.sql.visitors.InternalTraversal.dp_named_ddl_element),
    [dp_operator](#sqlalchemy.sql.visitors.InternalTraversal.dp_operator), [dp_plain_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_plain_dict),
    [dp_plain_obj](#sqlalchemy.sql.visitors.InternalTraversal.dp_plain_obj), [dp_prefix_sequence](#sqlalchemy.sql.visitors.InternalTraversal.dp_prefix_sequence),
    [dp_propagate_attrs](#sqlalchemy.sql.visitors.InternalTraversal.dp_propagate_attrs),
    [dp_statement_hint_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_statement_hint_list),
    [dp_string](#sqlalchemy.sql.visitors.InternalTraversal.dp_string), [dp_string_clauseelement_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_clauseelement_dict),
    [dp_string_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_list), [dp_string_multi_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_multi_dict),
    [dp_table_hint_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_table_hint_list),
    [dp_type](#sqlalchemy.sql.visitors.InternalTraversal.dp_type), [dp_unknown_structure](#sqlalchemy.sql.visitors.InternalTraversal.dp_unknown_structure)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[dp_annotations_key](#sqlalchemy.sql.visitors.InternalTraversal.dp_annotations_key),
    [dp_anon_name](#sqlalchemy.sql.visitors.InternalTraversal.dp_anon_name), [dp_boolean](#sqlalchemy.sql.visitors.InternalTraversal.dp_boolean),
    [dp_clauseelement](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement),
    [dp_clauseelement_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_list),
    [dp_clauseelement_tuple](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_tuple),
    [dp_clauseelement_tuples](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_tuples),
    [dp_dialect_options](#sqlalchemy.sql.visitors.InternalTraversal.dp_dialect_options),
    [dp_dml_multi_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_multi_values),
    [dp_dml_ordered_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_ordered_values),
    [dp_dml_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_values), [dp_fromclause_canonical_column_collection](#sqlalchemy.sql.visitors.InternalTraversal.dp_fromclause_canonical_column_collection),
    [dp_fromclause_ordered_set](#sqlalchemy.sql.visitors.InternalTraversal.dp_fromclause_ordered_set),
    [dp_has_cache_key](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key),
    [dp_has_cache_key_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key_list),
    [dp_has_cache_key_tuples](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key_tuples),
    [dp_ignore](#sqlalchemy.sql.visitors.InternalTraversal.dp_ignore), [dp_inspectable](#sqlalchemy.sql.visitors.InternalTraversal.dp_inspectable),
    [dp_inspectable_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_inspectable_list),
    [dp_multi](#sqlalchemy.sql.visitors.InternalTraversal.dp_multi), [dp_multi_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_multi_list),
    [dp_named_ddl_element](#sqlalchemy.sql.visitors.InternalTraversal.dp_named_ddl_element),
    [dp_operator](#sqlalchemy.sql.visitors.InternalTraversal.dp_operator), [dp_plain_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_plain_dict),
    [dp_plain_obj](#sqlalchemy.sql.visitors.InternalTraversal.dp_plain_obj), [dp_prefix_sequence](#sqlalchemy.sql.visitors.InternalTraversal.dp_prefix_sequence),
    [dp_propagate_attrs](#sqlalchemy.sql.visitors.InternalTraversal.dp_propagate_attrs),
    [dp_statement_hint_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_statement_hint_list),
    [dp_string](#sqlalchemy.sql.visitors.InternalTraversal.dp_string), [dp_string_clauseelement_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_clauseelement_dict),
    [dp_string_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_list), [dp_string_multi_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_multi_dict),
    [dp_table_hint_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_table_hint_list),
    [dp_type](#sqlalchemy.sql.visitors.InternalTraversal.dp_type), [dp_unknown_structure](#sqlalchemy.sql.visitors.InternalTraversal.dp_unknown_structure)'
- en: '**Class signature**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.visitors.InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal") (`enum.Enum`)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.visitors.InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal") (`enum.Enum`)。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Visit the _annotations_cache_key element.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 _annotations_cache_key 元素。
- en: This is a dictionary of additional information about a ClauseElement that modifies
    its role. It should be included when comparing or caching objects, however generating
    this key is relatively expensive. Visitors should check the “_annotations” dict
    for non-None first before creating this key.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有关修改其角色的 ClauseElement 的其他信息的字典。在比较或缓存对象时应包括此信息，但是生成此键相对昂贵。在创建此键之前，访问者应首先检查“_annotations”字典是否为非
    None。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Visit a potentially “anonymized” string value.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 访问可能“匿名化”的字符串值。
- en: The string value is considered to be significant for cache key generation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串值被视为缓存键生成的重要因素。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Visit a boolean value.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 访问布尔值。
- en: The boolean value is considered to be significant for cache key generation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值被视为缓存键生成的重要因素。
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Visit a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 对象。
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Visit a list of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 访问包含 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 对象的列表。
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Visit a tuple of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 访问包含 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 对象的元组。
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Visit a list of tuples which contain [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 访问包含 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 对象的元组列表。
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Visit a dialect options structure.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 访问方言选项结构。
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Visit the values() multi-valued list of dictionaries of an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") object.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    对象的字典的值（值为多个）。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Visit the values() ordered tuple list of an [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [`Update`](dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    对象的有序元组列表的值。
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Visit the values() dictionary of a [`ValuesBase`](dml.html#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") (e.g. Insert or Update) object.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [`ValuesBase`](dml.html#sqlalchemy.sql.expression.ValuesBase "sqlalchemy.sql.expression.ValuesBase")（例如
    Insert 或 Update）对象的字典的值。
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Visit a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object in the context of the `columns`
    attribute.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象的 `columns` 属性的上下文中。
- en: The column collection is “canonical”, meaning it is the originally defined location
    of the [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") objects. Right now this means that the
    object being visited is a [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object only.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 列集合是“规范的”，这意味着它是 [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 对象的最初定义位置。目前这意味着正在访问的对象只能是 [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") 或 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Visit an ordered set of [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象的有序集合。
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Visit a [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") object.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    对象。
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Visit a list of [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") objects.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 访问包含 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    对象的列表。
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Visit a list of tuples which contain [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") objects.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 访问包含 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    对象的元组列表。
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Specify an object that should be ignored entirely.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 指定应完全忽略的对象。
- en: This currently applies function call argument caching where some arguments should
    not be considered to be part of a cache key.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这目前适用于函数调用参数缓存，其中一些参数不应被视为缓存键的一部分。
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Visit an inspectable object where the return value is a [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") object.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 访问可检查对象，其返回值是[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey")对象。
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Visit a list of inspectable objects which upon inspection are HasCacheKey objects.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 访问可检查对象的列表，在检查后是`HasCacheKey`对象。
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Visit an object that may be a [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") or may be a plain hashable object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 访问可能是[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")或可能是普通可哈希对象的对象。
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Visit a tuple containing elements that may be [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") or may be a plain hashable object.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 访问包含可能是[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey")或可能是普通可哈希对象的元组。
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Visit a simple named DDL element.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 访问简单的命名DDL元素。
- en: The current object used by this method is the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence").
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用的当前对象是[`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")。
- en: The object is only considered to be important for cache key generation as far
    as its name, but not any other aspects of it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象仅在缓存键生成中被认为是重要的，就其名称而言，但不涉及其它方面。
- en: '[PRE29]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Visit an operator.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 访问一个运算符。
- en: The operator is a function from the `sqlalchemy.sql.operators` module.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符是`sqlalchemy.sql.operators`模块中的函数。
- en: The operator value is considered to be significant for cache key generation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符值被认为在缓存键生成中是重要的。
- en: '[PRE30]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Visit a dictionary with string keys.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 访问具有字符串键的字典。
- en: The keys of the dictionary should be strings, the values should be immutable
    and hashable. The dictionary is considered to be significant for cache key generation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的键应该是字符串，值应该是不可变的和可哈希的。 字典被认为在缓存键生成中是重要的。
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Visit a plain python object.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 访问普通的 Python 对象。
- en: The value should be immutable and hashable, such as an integer. The value is
    considered to be significant for cache key generation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 值应该是不可变的和可哈希的，例如整数。 值被认为在缓存键生成中是重要的。
- en: '[PRE32]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Visit the sequence represented by [`HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes") or [`HasSuffixes`](selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes").
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 访问由[`HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes "sqlalchemy.sql.expression.HasPrefixes")或[`HasSuffixes`](selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")表示的序列。
- en: '[PRE33]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Visit the propagate attrs dict. This hardcodes to the particular elements we
    care about right now.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 访问传播属性字典。 这是硬编码到我们目前关心的特定元素。
- en: '[PRE34]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Visit the `_statement_hints` collection of a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象的`_statement_hints`集合。
- en: '[PRE35]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Visit a plain string value.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 访问普通的字符串值。
- en: Examples include table and column names, bound parameter keys, special keywords
    such as “UNION”, “UNION ALL”.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，表名和列名，绑定参数键，特殊关键字如“UNION”，“UNION ALL”。
- en: The string value is considered to be significant for cache key generation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串值被认为在缓存键生成中是重要的。
- en: '[PRE36]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Visit a dictionary of string keys to [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 访问具有字符串键到[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")对象的字典。
- en: '[PRE37]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Visit a list of strings.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 访问字符串列表。
- en: '[PRE38]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Visit a dictionary of string keys to values which may either be plain immutable/hashable
    or [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    objects.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 访问具有字符串键和值的字典，值可能是普通的不可变/可哈希的对象，也可能是[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey")对象。
- en: '[PRE39]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Visit the `_hints` collection of a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象的`_hints`集合。
- en: '[PRE40]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Visit a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    object
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")对象。
- en: The type object is considered to be significant for cache key generation.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 类型对象被认为对缓存键生成很重要。
- en: '[PRE41]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Visit an unknown structure.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 访问一个未知的结构。
- en: '[PRE42]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Base class for visitable objects.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 用于可访问对象的基类。
- en: '[`Visitable`](#sqlalchemy.sql.visitors.Visitable "sqlalchemy.sql.visitors.Visitable")
    is used to implement the SQL compiler dispatch functions. Other forms of traversal
    such as for cache key generation are implemented separately using the `HasTraverseInternals`
    interface.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Visitable`](#sqlalchemy.sql.visitors.Visitable "sqlalchemy.sql.visitors.Visitable")
    用于实现 SQL 编译器分发函数。其他形式的遍历，例如用于缓存键生成的遍历，是使用 `HasTraverseInternals` 接口单独实现的。'
- en: 'Changed in version 2.0: The [`Visitable`](#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable") class was named `Traversible` in the 1.4
    series; the name is changed back to [`Visitable`](#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable") in 2.0 which is what it was prior to 1.4.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0 中发生了变化：1.4 系列中的 [`Visitable`](#sqlalchemy.sql.visitors.Visitable "sqlalchemy.sql.visitors.Visitable")
    类被命名为 `Traversible`；该名称在 2.0 中改回了 [`Visitable`](#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable")，这是 1.4 之前的名称。
- en: Both names remain importable in both 1.4 and 2.0 versions.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 和 2.0 版本中，这两个名称仍然可导入。
- en: '[PRE43]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: alias of `cache_anon_map`
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`cache_anon_map` 的别名'
- en: '[PRE44]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Clone the given expression structure, allowing modifications by visitors for
    mutable objects.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆给定的表达式结构，允许访问者修改可变对象。
- en: Traversal usage is the same as that of [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse"). The visitor functions present in the `visitors`
    dictionary may also modify the internals of the given structure as the traversal
    proceeds.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历用法与 [`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")
    相同。`visitors` 字典中的访问者函数也可以在遍历过程中修改给定结构的内部。
- en: The [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse "sqlalchemy.sql.visitors.cloned_traverse")
    function does **not** provide objects that are part of the `Immutable` interface
    to the visit methods (this primarily includes [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") and [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects). As this traversal is only intended to allow
    in-place mutation of objects, `Immutable` objects are skipped. The `Immutable._clone()`
    method is still called on each object to allow for objects to replace themselves
    with a different object based on a clone of their sub-internals (e.g. a [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") that clones its subquery to return a
    new [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse "sqlalchemy.sql.visitors.cloned_traverse")
    函数**不会**提供属于`Immutable`接口的对象给访问方法（这主要包括 [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")、[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")、[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") 和 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象）。由于此遍历仅旨在允许对象的原地突变，因此跳过`Immutable`对象。仍然在每个对象上调用
    `Immutable._clone()` 方法，以允许对象根据其子内部的克隆替换自身为不同的对象（例如，一个克隆其子查询以返回一个新的 [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 的 [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")）。'
- en: 'Changed in version 2.0: The [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") function omits objects that are part
    of the `Immutable` interface.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0 中发生了变化：[`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") 函数省略了属于`Immutable`接口的对象。
- en: The central API feature used by the [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") and [`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse
    "sqlalchemy.sql.visitors.replacement_traverse") functions, in addition to the
    [`ClauseElement.get_children()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.get_children
    "sqlalchemy.sql.expression.ClauseElement.get_children") function that is used
    to achieve the iteration, is the `ClauseElement._copy_internals()` method. For
    a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    structure to support cloning and replacement traversals correctly, it needs to
    be able to pass a cloning function into its internal members in order to make
    copies of them.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用于实现迭代的 [`ClauseElement.get_children()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.get_children
    "sqlalchemy.sql.expression.ClauseElement") 函数外，[`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") 和 [`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse
    "sqlalchemy.sql.visitors.replacement_traverse") 函数使用的中心 API 特性是 `ClauseElement._copy_internals()`
    方法。要正确支持克隆和替换遍历的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 结构，它需要能够将克隆函数传递给其内部成员，以便对其进行复制。
- en: See also
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")'
- en: '[`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse "sqlalchemy.sql.visitors.replacement_traverse")'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse "sqlalchemy.sql.visitors.replacement_traverse")'
- en: '[PRE45]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Traverse the given expression structure, returning an iterator.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历给定的表达式结构，返回一个迭代器。
- en: Traversal is configured to be breadth-first.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历配置为广度优先。
- en: The central API feature used by the [`iterate()`](#sqlalchemy.sql.visitors.iterate
    "sqlalchemy.sql.visitors.iterate") function is the [`ClauseElement.get_children()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.get_children
    "sqlalchemy.sql.expression.ClauseElement.get_children") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects. This method should return
    all the [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects which are associated with a
    particular [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") object. For example, a [`Case`](sqlelement.html#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case") structure will refer to a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects within its “whens” and “else_”
    member variables.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`iterate()`](#sqlalchemy.sql.visitors.iterate "sqlalchemy.sql.visitors.iterate")
    函数使用的中心 API 特性是 [`ClauseElement.get_children()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.get_children
    "sqlalchemy.sql.expression.ClauseElement") 方法，用于 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 对象。该方法应返回与特定 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 对象关联的所有 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 对象。例如，[`Case`](sqlelement.html#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case") 结构将在其 “whens” 和 “else_” 成员变量中引用一系列 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象。'
- en: 'Parameters:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`obj` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") structure to be traversed'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 要遍历的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 结构'
- en: '`opts` – dictionary of iteration options. This dictionary is usually empty
    in modern usage.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opts` – 迭代选项的字典。在现代用法中，此字典通常为空。'
- en: '[PRE46]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Clone the given expression structure, allowing element replacement by a given
    replacement function.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆给定的表达式结构，允许通过给定的替换函数进行元素替换。
- en: This function is very similar to the [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") function, except instead of being passed
    a dictionary of visitors, all elements are unconditionally passed into the given
    replace function. The replace function then has the option to return an entirely
    new object which will replace the one given. If it returns `None`, then the object
    is kept in place.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与[`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse "sqlalchemy.sql.visitors.cloned_traverse")函数非常相似，不同之处在于，该函数不是被传递一个访问者字典，而是所有元素都无条件地传递给给定的替换函数。然后，替换函数可以选择返回一个完全新的对象，该对象将替换给定的对象。如果返回`None`，则保留对象在原位。
- en: The difference in usage between [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") and [`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse
    "sqlalchemy.sql.visitors.replacement_traverse") is that in the former case, an
    already-cloned object is passed to the visitor function, and the visitor function
    can then manipulate the internal state of the object. In the case of the latter,
    the visitor function should only return an entirely different object, or do nothing.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse "sqlalchemy.sql.visitors.cloned_traverse")和[`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse
    "sqlalchemy.sql.visitors.replacement_traverse")之间的使用差异在于，在前一种情况下，已克隆的对象被传递给访问者函数，然后访问者函数可以操作对象的内部状态。在后一种情况下，访问者函数应该只返回一个完全不同的对象，或者什么也不做。'
- en: The use case for [`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse
    "sqlalchemy.sql.visitors.replacement_traverse") is that of replacing a FROM clause
    inside of a SQL structure with a different one, as is a common use case within
    the ORM.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse "sqlalchemy.sql.visitors.replacement_traverse")的用例是在SQL结构内部用不同的FROM子句替换一个FROM子句，这是ORM中常见的用例。'
- en: '[PRE47]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Traverse and visit the given expression structure using the default iterator.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认迭代器遍历和访问给定的表达式结构。
- en: 'e.g.:'
  id: totrans-163
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如：
- en: ''
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-165
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The iteration of objects uses the [`iterate()`](#sqlalchemy.sql.visitors.iterate
    "sqlalchemy.sql.visitors.iterate") function, which does a breadth-first traversal
    using a stack.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的迭代使用[`iterate()`](#sqlalchemy.sql.visitors.iterate "sqlalchemy.sql.visitors.iterate")函数，该函数使用堆栈进行广度优先遍历。
- en: 'Parameters:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`obj` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") structure to be traversed'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 要遍历的[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")结构'
- en: '`opts` – dictionary of iteration options. This dictionary is usually empty
    in modern usage.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opts` – 迭代选项的字典。在现代用法中，该字典通常为空。'
- en: '`visitors` – dictionary of visit functions. The dictionary should have strings
    as keys, each of which would correspond to the `__visit_name__` of a particular
    kind of SQL expression object, and callable functions as values, each of which
    represents a visitor function for that kind of object.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`visitors` – 访问函数的字典。该字典应该有字符串作为键，每个键对应于特定类型的SQL表达式对象的`__visit_name__`，并且可调用的函数作为值，每个值代表该类型对象的访问函数。'
- en: '[PRE49]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Visit the given expression structure using the given iterator of objects.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的对象迭代器访问给定的表达式结构。
- en: '[`traverse_using()`](#sqlalchemy.sql.visitors.traverse_using "sqlalchemy.sql.visitors.traverse_using")
    is usually called internally as the result of the [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse") function.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[`traverse_using()`](#sqlalchemy.sql.visitors.traverse_using "sqlalchemy.sql.visitors.traverse_using")通常在内部作为[`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse")函数的结果而调用。'
- en: 'Parameters:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`iterator` – an iterable or sequence which will yield [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") structures; the iterator is assumed
    to be the product of the [`iterate()`](#sqlalchemy.sql.visitors.iterate "sqlalchemy.sql.visitors.iterate")
    function.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`iterator` – 一个可迭代或序列，它将生成[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")结构；假定该迭代器是[`iterate()`](#sqlalchemy.sql.visitors.iterate
    "sqlalchemy.sql.visitors.iterate")函数的产品。'
- en: '`obj` – the [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") that was used as the target of the
    [`iterate()`](#sqlalchemy.sql.visitors.iterate "sqlalchemy.sql.visitors.iterate")
    function.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 作为[`iterate()`](#sqlalchemy.sql.visitors.iterate "sqlalchemy.sql.visitors.iterate")函数目标使用的[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。'
- en: '`visitors` – dictionary of visit functions. See [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse") for details on this dictionary.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`visitors` – 访问函数的字典。有关此字典的详细信息，请参见[`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse")。'
- en: See also
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")'
