- en: 'Appendix 1: Details on Text Extraction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录1：文本提取的详细信息
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/app1.html](https://pymupdf.readthedocs.io/en/latest/app1.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pymupdf.readthedocs.io/en/latest/app1.html](https://pymupdf.readthedocs.io/en/latest/app1.html)
- en: This chapter provides background on the text extraction methods of PyMuPDF.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了PyMuPDF的文本提取方法背景。
- en: Information of interest are
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的信息包括
- en: what do they provide?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提供了什么？
- en: what do they imply (processing time / data sizes)?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们意味着什么（处理时间/数据大小）？
- en: General structure of a TextPage
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TextPage的一般结构
- en: '[TextPage](textpage.html#textpage) is one of (Py-) MuPDF’s classes. It is normally
    created (and destroyed again) behind the curtain, when [Page](page.html#page)
    text extraction methods are used, but it is also available directly and can be
    used as a persistent object. Other than its name suggests, images may optionally
    also be part of a text page:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[TextPage](textpage.html#textpage)是(Py-)MuPDF的类之一。通常在使用[Page](page.html#page)文本提取方法时在幕后创建（和销毁），但也可以直接使用并且可以作为持久对象使用。除了其名称所示，图像也可以选择性地作为文本页面的一部分：'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A **text page** consists of blocks (= roughly paragraphs).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**文本页面**由块（≈大致段落）组成。
- en: A **block** consists of either lines and their characters, or an image.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**块**由行及其字符或图像组成。
- en: A **line** consists of spans.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一**行**由*span*组成。
- en: 'A **span** consists of adjacent characters with identical font properties:
    name, size, flags and color.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**span**由具有相同字体属性的相邻字符组成：名称、大小、标志和颜色。
- en: Plain Text
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纯文本
- en: Function [`TextPage.extractText()`](textpage.html#TextPage.extractText "TextPage.extractText")
    (or *Page.get_text(“text”)*) extracts a page’s plain **text in original order**
    as specified by the creator of the document.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`TextPage.extractText()`](textpage.html#TextPage.extractText "TextPage.extractText")（或者*Page.get_text(“text”)*）提取页面的原始顺序中的纯文本。
- en: 'An example output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例输出：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The output may not equal an accustomed “natural” reading order. However, you
    can request a reordering following the scheme “top-left to bottom-right” by executing
    `page.get_text("text", sort=True)`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能与习惯的“自然”阅读顺序不一致。但是，您可以执行`page.get_text("text", sort=True)`请求按照“从左上到右下”的方案重新排序。
- en: BLOCKS
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块
- en: 'Function [`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS
    "TextPage.extractBLOCKS") (or *Page.get_text(“blocks”)*) extracts a page’s text
    blocks as a list of items like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS "TextPage.extractBLOCKS")（或者*Page.get_text(“blocks”)*）提取页面的文本块作为像这样的项目列表：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Where the first 4 items are the float coordinates of the block’s bbox. The lines
    within each block are concatenated by a new-line character.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前4个项目是块的浮点坐标。每个块内的行由换行符连接。
- en: 'This is a high-speed method, which by default also extracts image meta information:
    Each image appears as a block with one text line, which contains meta information.
    The image itself is not shown.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种高速方法，默认情况下也会提取图像的元信息：每个图像显示为一个块，其中包含元信息的文本行。图像本身不会显示。
- en: As with simple text output above, the `sort` argument can be used as well to
    obtain a reading order.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与上面的简单文本输出一样，也可以使用`sort`参数来获取阅读顺序。
- en: 'Example output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: WORDS
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单词
- en: 'Function [`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS "TextPage.extractWORDS")
    (or *Page.get_text(“words”)*) extracts a page’s text **words** as a list of items
    like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS "TextPage.extractWORDS")（或者*Page.get_text(“words”)*）提取页面的文本**单词**作为像这样的项目列表：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Where the first 4 items are the float coordinates of the words’s bbox. The last
    three integers provide some more information on the word’s whereabouts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前4个项目是单词的浮点bbox坐标。最后三个整数提供有关单词位置的更多信息。
- en: This is a high-speed method. As with the previous methods, argument `sort=True`
    will reorder the words.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种高速方法。与前面的方法一样，参数`sort=True`将重新排序单词。
- en: 'Example output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: HTML
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML
- en: '[`TextPage.extractHTML()`](textpage.html#TextPage.extractHTML "TextPage.extractHTML")
    (or *Page.get_text(“html”)* output fully reflects the structure of the page’s
    *TextPage* – much like DICT / JSON below. This includes images, font information
    and text positions. If wrapped in HTML header and trailer code, it can readily
    be displayed by an internet browser. Our above example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractHTML()`](textpage.html#TextPage.extractHTML "TextPage.extractHTML")（或者*Page.get_text(“html”)*输出完整反映了*TextPage*页面的结构
    - 就像下面的DICT / JSON一样。其中包括图像、字体信息和文本位置。如果包含在HTML头和尾部代码中，它可以被互联网浏览器轻松显示。我们上面的例子：'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '## Controlling Quality of HTML Output'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '## 控制HTML输出的质量'
- en: 'While HTML output has improved a lot in MuPDF v1.12.0, it is not yet bug-free:
    we have found problems in the areas **font support** and **image positioning**.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管MuPDF v1.12.0中的HTML输出已经有了很大改进，但还不是无bug的：我们在**字体支持**和**图像定位**方面发现了问题。
- en: HTML text contains references to the fonts used of the original document. If
    these are not known to the browser (a fat chance!), it will replace them with
    others; the results will probably look awkward. This issue varies greatly by browser
    – on my Windows machine, MS Edge worked just fine, whereas Firefox looked horrible.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML文本包含对原始文档中使用的字体的引用。如果浏览器不认识这些字体（几乎不可能！），它将用其他字体替换它们；结果可能看起来很奇怪。这个问题因浏览器而异——在我的Windows机器上，MS
    Edge表现得很好，而Firefox看起来很糟糕。
- en: For PDFs with a complex structure, images may not be positioned and / or sized
    correctly. This seems to be the case for rotated pages and pages, where the various
    possible page bbox variants do not coincide (e.g. *MediaBox != CropBox*). We do
    not know yet, how to address this – we filed a bug at MuPDF’s site.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于具有复杂结构的PDF文件，图像可能无法正确地定位和/或调整大小。这在旋转页面和页面bbox变体不重合的情况下可能发生（例如*MediaBox !=
    CropBox*）。我们还不知道如何解决这个问题——我们在MuPDF的网站上提交了一个bug报告。
- en: 'To address the font issue, you can use a simple utility script to scan through
    the HTML file and replace font references. Here is a little example that replaces
    all fonts with one of the [PDF Base 14 Fonts](app3.html#base-14-fonts): serifed
    fonts will become “Times”, non-serifed “Helvetica” and monospaced will become
    “Courier”. Their respective variations for “bold”, “italic”, etc. are hopefully
    done correctly by your browser:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决字体问题，您可以使用一个简单的实用脚本扫描HTML文件并替换字体引用。这里有一个小例子，将所有字体替换为[PDF基本14种字体](app3.html#base-14-fonts)之一：有衬线字体将变成“Times”，非衬线字体将变成“Helvetica”，等宽字体将变成“Courier”。希望您的浏览器能够正确处理它们的粗体、斜体等变体：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: DICT (or JSON)
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DICT（或 JSON）
- en: '[`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")
    (or *Page.get_text(“dict”, sort=False)*) output fully reflects the structure of
    a *TextPage* and provides image content and position detail (*bbox* – boundary
    boxes in pixel units) for every block, line and span. Images are stored as *bytes*
    for DICT output and base64 encoded strings for JSON output.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")（或
    *Page.get_text("dict", sort=False)*）输出完全反映了*TextPage*的结构，并为每个块、行和 span 提供了图像内容和位置详细信息（*bbox*——以像素为单位的边界框）。对于DICT输出，图像以*bytes*形式存储，而对于JSON输出，它们以base64编码字符串存储。'
- en: For a visualization of the dictionary structure have a look at [Structure of
    Dictionary Outputs](textpage.html#textpagedict).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看字典输出结构的可视化，请查看[字典输出的结构](textpage.html#textpagedict)。
- en: 'Here is how this looks like:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的外观：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: RAWDICT (or RAWJSON)
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RAWDICT（或 RAWJSON）
- en: '[`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT "TextPage.extractRAWDICT")
    (or *Page.get_text(“rawdict”, sort=False)*) is an **information superset of DICT**
    and takes the detail level one step deeper. It looks exactly like the above, except
    that the *“text”* items (*string*) in the spans are replaced by the list *“chars”*.
    Each *“chars”* entry is a character *dict*. For example, here is what you would
    see in place of item *“text”: “Text in black color.”* above:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT "TextPage.extractRAWDICT")（或
    *Page.get_text("rawdict", sort=False)*）是**DICT**的信息超集，将详细级别提升一步。它看起来与上面的完全相同，只是其中的*“text”*项目（*string*）在
    spans 中被*“chars”*列表替换。每个*“chars”*条目都是一个字符*dict*。例如，以下是上述*“text”: “Text in black
    color.”*条目的替代内容：'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: XML
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML
- en: 'The [`TextPage.extractXML()`](textpage.html#TextPage.extractXML "TextPage.extractXML")
    (or *Page.get_text(“xml”)*) version extracts text (no images) with the detail
    level of RAWDICT:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractXML()`](textpage.html#TextPage.extractXML "TextPage.extractXML")（或
    *Page.get_text("xml")*）版本提取了没有图像的文本，详细级别与RAWDICT相同：'
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We have successfully tested [lxml](https://pypi.org/project/lxml/) to interpret
    this output.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功测试了[lxml](https://pypi.org/project/lxml/)来解释此输出。
- en: XHTML
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XHTML
- en: '[`TextPage.extractXHTML()`](textpage.html#TextPage.extractXHTML "TextPage.extractXHTML")
    (or *Page.get_text(“xhtml”)*) is a variation of TEXT but in HTML format, containing
    the bare text and images (“semantic” output):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractXHTML()`](textpage.html#TextPage.extractXHTML "TextPage.extractXHTML")（或
    *Page.get_text("xhtml")*）是TEXT的HTML格式变体，包含裸文本和图像（“语义”输出）：'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '## Text Extraction Flags Defaults'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '## 文本提取标志的默认值'
- en: 'New in version 1.16.2: Method [`Page.get_text()`](page.html#Page.get_text "Page.get_text")
    supports a keyword parameter *flags* *(int)* to control the amount and the quality
    of extracted data. The following table shows the defaults settings (flags parameter
    omitted or None) for each extraction variant. If you specify flags with a value
    other than *None*, be aware that you must set **all desired** options. A description
    of the respective bit settings can be found in [Text Extraction Flags](vars.html#textpreserve).'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增于版本 1.16.2：方法 [`Page.get_text()`](page.html#Page.get_text "Page.get_text")
    支持关键参数 *flags*（整数），以控制提取数据的量和质量。下表显示了每个提取变体的默认设置（省略或设为 *None* 的 flags 参数）。如果指定的
    flags 值不为 *None*，请确保设置 **所有所需的** 选项。有关各位设置的描述，请参阅 [Text Extraction Flags](vars.html#textpreserve)。
- en: 'New in v1.19.6: The default combinations in the following table are now available
    as Python constants: [`TEXTFLAGS_TEXT`](vars.html#TEXTFLAGS_TEXT "TEXTFLAGS_TEXT"),
    [`TEXTFLAGS_WORDS`](vars.html#TEXTFLAGS_WORDS "TEXTFLAGS_WORDS"), [`TEXTFLAGS_BLOCKS`](vars.html#TEXTFLAGS_BLOCKS
    "TEXTFLAGS_BLOCKS"), [`TEXTFLAGS_DICT`](vars.html#TEXTFLAGS_DICT "TEXTFLAGS_DICT"),
    [`TEXTFLAGS_RAWDICT`](vars.html#TEXTFLAGS_RAWDICT "TEXTFLAGS_RAWDICT"), [`TEXTFLAGS_HTML`](vars.html#TEXTFLAGS_HTML
    "TEXTFLAGS_HTML"), [`TEXTFLAGS_XHTML`](vars.html#TEXTFLAGS_XHTML "TEXTFLAGS_XHTML"),
    [`TEXTFLAGS_XML`](vars.html#TEXTFLAGS_XML "TEXTFLAGS_XML"), and [`TEXTFLAGS_SEARCH`](vars.html#TEXTFLAGS_SEARCH
    "TEXTFLAGS_SEARCH"). You can now easily modify a default flag, e.g.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增于 v1.19.6：以下表格中的默认组合现在可作为 Python 常量使用：[`TEXTFLAGS_TEXT`](vars.html#TEXTFLAGS_TEXT
    "TEXTFLAGS_TEXT")、[`TEXTFLAGS_WORDS`](vars.html#TEXTFLAGS_WORDS "TEXTFLAGS_WORDS")、[`TEXTFLAGS_BLOCKS`](vars.html#TEXTFLAGS_BLOCKS
    "TEXTFLAGS_BLOCKS")、[`TEXTFLAGS_DICT`](vars.html#TEXTFLAGS_DICT "TEXTFLAGS_DICT")、[`TEXTFLAGS_RAWDICT`](vars.html#TEXTFLAGS_RAWDICT
    "TEXTFLAGS_RAWDICT")、[`TEXTFLAGS_HTML`](vars.html#TEXTFLAGS_HTML "TEXTFLAGS_HTML")、[`TEXTFLAGS_XHTML`](vars.html#TEXTFLAGS_XHTML
    "TEXTFLAGS_XHTML")、[`TEXTFLAGS_XML`](vars.html#TEXTFLAGS_XML "TEXTFLAGS_XML")
    和 [`TEXTFLAGS_SEARCH`](vars.html#TEXTFLAGS_SEARCH "TEXTFLAGS_SEARCH")。现在，您可以轻松修改默认标志，例如：
- en: '**include** images in a “blocks” output:'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包括** 图片在“块”输出中：'
- en: ''
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`flags = TEXTFLAGS_BLOCKS | TEXT_PRESERVE_IMAGES`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`flags = TEXTFLAGS_BLOCKS | TEXT_PRESERVE_IMAGES`'
- en: ''
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exclude** images from a “dict” output:'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不包括** 图片在“字典”输出中：'
- en: ''
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`flags = TEXTFLAGS_DICT & ~TEXT_PRESERVE_IMAGES`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`flags = TEXTFLAGS_DICT & ~TEXT_PRESERVE_IMAGES`'
- en: ''
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'set **dehyphenation off** in text searches:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文本搜索中关闭 **去连字符** 选项：
- en: ''
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`flags = TEXTFLAGS_SEARCH & ~TEXT_DEHYPHENATE`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`flags = TEXTFLAGS_SEARCH & ~TEXT_DEHYPHENATE`'
- en: '| Indicator | text | html | xhtml | xml | dict | rawdict | words | blocks |
    search |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 指示符 | 文本 | html | xhtml | xml | 字典 | 原始字典 | 单词 | 块 | 搜索 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| preserve ligatures | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 保留连字 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
- en: '| preserve whitespace | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 保留空格 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
- en: '| preserve images | n/a | 1 | 1 | n/a | 1 | 1 | n/a | 0 | 0 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 保留图片 | n/a | 1 | 1 | n/a | 1 | 1 | n/a | 0 | 0 |'
- en: '| inhibit spaces | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 抑制空格 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |'
- en: '| dehyphenate | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 取消连字符 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |'
- en: '| clip to mediabox | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 剪裁至媒体框 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
- en: '| use CID instead of U+FFFD | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 使用 CID 而非 U+FFFD | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 |'
- en: '**search** refers to the text search function.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索** 指的是文本搜索功能。'
- en: '**“json”** is handled exactly like **“dict”** and is hence left out.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“json”** 的处理与 **“dict”** 完全相同，因此被省略。'
- en: '**“rawjson”** is handled exactly like **“rawdict”** and is hence left out.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“rawjson”** 的处理与 **“rawdict”** 完全相同，因此被省略。'
- en: An “n/a” specification means a value of 0 and setting this bit never has any
    effect on the output (but an adverse effect on performance).
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “n/a” 指定意味着值为 0，设置此位不会对输出产生任何影响（但会影响性能）。
- en: 'If you are not interested in images when using an output variant which includes
    them by default, then by all means set the respective bit off: You will experience
    a better performance and much lower space requirements.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在使用默认包含图像的输出变体时对图像不感兴趣，那么请务必关闭相应的位：这将提升性能并大大减少空间需求。
- en: 'To show the effect of [`TEXT_INHIBIT_SPACES`](vars.html#TEXT_INHIBIT_SPACES
    "TEXT_INHIBIT_SPACES") have a look at this example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 [`TEXT_INHIBIT_SPACES`](vars.html#TEXT_INHIBIT_SPACES "TEXT_INHIBIT_SPACES")
    的效果，请看这个例子：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Performance
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: 'The text extraction methods differ significantly both: in terms of information
    they supply, and in terms of resource requirements and runtimes. Generally, more
    information of course means, that more processing is required and a higher data
    volume is generated.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 文本提取方法在提供的信息和资源需求及运行时间方面存在显著差异。通常，更多信息意味着需要更多处理和生成更高的数据量。
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Especially images have a **very significant** impact. Make sure to exclude them
    (via the *flags* parameter) whenever you do not need them. To process the below
    mentioned 2’700 total pages with default flags settings required 160 seconds across
    all extraction methods. When all images where excluded, less than 50% of that
    time (77 seconds) were needed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是图像对结果有**非常显著**的影响。确保在不需要时排除它们（通过*flags*参数）。处理下述提到的2,700页总页数使用默认标志设置需要160秒。当排除所有图像时，仅需要这些时间的不到50%（77秒）。
- en: To begin with, all methods are **very fast** in relation to other products out
    there in the market. In terms of processing speed, we are not aware of a faster
    (free) tool. Even the most detailed method, RAWDICT, processes all 1’310 pages
    of the [Adobe PDF References](app3.html#adobemanual) in less than 5 seconds (simple
    text needs less than 2 seconds here).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，与市场上其他产品相比，所有方法在处理速度上都**非常快**。就处理速度而言，我们不知道有比这个更快的（免费）工具。即使是最详细的方法，如RAWDICT，在不到5秒的时间内处理完所有1,310页的[Adobe
    PDF 参考手册](app3.html#adobemanual)（简单文本在这里不到2秒）。
- en: The following table shows average relative speeds (“RSpeed”, baseline 1.00 is
    TEXT), taken across ca. 1400 text-heavy and 1300 image-heavy pages.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了平均相对速度（“RSpeed”，基准为1.00为TEXT），涵盖了约1,400页文本密集和1,300页图像密集的页面。
- en: '| Method | RSpeed | Comments | no images |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| Method | RSpeed | 评论 | 没有图像 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| TEXT | 1.00 | no images, **plain** text, line breaks | 1.00 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| TEXT | 1.00 | 没有图像，**普通**文本，换行 | 1.00 |'
- en: '| BLOCKS | 1.00 | image bboxes (only), **block** level text with bboxes, line
    breaks | 1.00 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| BLOCKS | 1.00 | 图像边界框（仅），**块**级文本与边界框，换行 | 1.00 |'
- en: '| WORDS | 1.02 | no images, **word** level text with bboxes | 1.02 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| WORDS | 1.02 | 没有图像，**字**级文本与边界框 | 1.02 |'
- en: '| XML | 2.72 | no images, **char** level text, layout and font details | 2.72
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| XML | 2.72 | 没有图像，**字符**级文本，布局和字体细节 | 2.72 |'
- en: '| XHTML | 3.32 | **base64** images, **span** level text, no layout info | 1.00
    |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| XHTML | 3.32 | **base64**图像，**跨度**级文本，无布局信息 | 1.00 |'
- en: '| HTML | 3.54 | **base64** images, **span** level text, layout and font details
    | 1.01 |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| HTML | 3.54 | **base64**图像，**跨度**级文本，布局和字体细节 | 1.01 |'
- en: '| DICT | 3.93 | **binary** images, **span** level text, layout and font details
    | 1.04 |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| DICT | 3.93 | **二进制**图像，**跨度**级文本，布局和字体细节 | 1.04 |'
- en: '| RAWDICT | 4.50 | **binary** images, **char** level text, layout and font
    details | 1.68 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| RAWDICT | 4.50 | **二进制**图像，**字符**级文本，布局和字体细节 | 1.68 |'
- en: 'As mentioned: when excluding image extraction (last column), the relative speeds
    are changing drastically: except RAWDICT and XML, the other methods are almost
    equally fast, and RAWDICT requires 40% less execution time than the **now slowest
    XML**.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述：在排除图像提取（最后一列）时，相对速度发生了显著变化：除了RAWDICT和XML外，其他方法几乎同样快，而RAWDICT比**现在最慢的XML**需要少40%的执行时间。
- en: Look at chapter **Appendix 1** for more performance information.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 查看**附录1**章节获取更多性能信息。
- en: Do you have any feedback on this page?
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对本页有任何反馈吗？
- en: '* * *'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按原样提供，不带任何明示或暗示的保证。本软件在许可下分发，未经授权不得复制、修改或分发。有关详细信息，请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)的许可信息或联系位于美国旧金山94129号，Mesa街39号，108A套房的Artifex
    Software Inc。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此文档覆盖了所有1.24.4版本。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
- en: General structure of a TextPage
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TextPage的一般结构
- en: '[TextPage](textpage.html#textpage) is one of (Py-) MuPDF’s classes. It is normally
    created (and destroyed again) behind the curtain, when [Page](page.html#page)
    text extraction methods are used, but it is also available directly and can be
    used as a persistent object. Other than its name suggests, images may optionally
    also be part of a text page:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[TextPage](textpage.html#textpage) 是（Py-）MuPDF 的类之一。通常在使用[Page](page.html#page)文本提取方法时在幕后创建（和销毁），但也可以直接使用，并可用作持久对象。除了其名称暗示的，图像也可以选择作为文本页的一部分：'
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A **text page** consists of blocks (= roughly paragraphs).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本页**由块组成（≈ 段落）。'
- en: A **block** consists of either lines and their characters, or an image.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**块**由行及其字符或图像组成。'
- en: A **line** consists of spans.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**行**由跨度组成。'
- en: 'A **span** consists of adjacent characters with identical font properties:
    name, size, flags and color.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨度**由具有相同字体属性的相邻字符组成：名称、大小、标志和颜色。'
- en: Plain Text
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纯文本
- en: Function [`TextPage.extractText()`](textpage.html#TextPage.extractText "TextPage.extractText")
    (or *Page.get_text(“text”)*) extracts a page’s plain **text in original order**
    as specified by the creator of the document.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`TextPage.extractText()`](textpage.html#TextPage.extractText "TextPage.extractText")（或*Page.get_text(“text”)*）提取页面按文档创建者指定的原始顺序的纯文本。
- en: 'An example output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The output may not equal an accustomed “natural” reading order. However, you
    can request a reordering following the scheme “top-left to bottom-right” by executing
    `page.get_text("text", sort=True)`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能与习惯的“自然”阅读顺序不同。然而，您可以通过执行`page.get_text("text", sort=True)`请求按照“从左上到右下”的方案重新排序。
- en: BLOCKS
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BLOCKS
- en: 'Function [`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS
    "TextPage.extractBLOCKS") (or *Page.get_text(“blocks”)*) extracts a page’s text
    blocks as a list of items like:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS "TextPage.extractBLOCKS")（或*Page.get_text(“blocks”)*）提取页面的文本块作为项目列表，如下所示：
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Where the first 4 items are the float coordinates of the block’s bbox. The lines
    within each block are concatenated by a new-line character.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 前4个项目是块边界框的浮点坐标。每个块内的行通过换行符连接。
- en: 'This is a high-speed method, which by default also extracts image meta information:
    Each image appears as a block with one text line, which contains meta information.
    The image itself is not shown.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种高速方法，默认情况下还提取图像元信息：每个图像都显示为包含元信息的一行文本块。图像本身不会显示。
- en: As with simple text output above, the `sort` argument can be used as well to
    obtain a reading order.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述简单文本输出一样，`sort`参数也可以用来获取阅读顺序。
- en: 'Example output:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: WORDS
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WORDS
- en: 'Function [`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS "TextPage.extractWORDS")
    (or *Page.get_text(“words”)*) extracts a page’s text **words** as a list of items
    like:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS "TextPage.extractWORDS")（或*Page.get_text(“words”)*）提取页面的文本**单词**作为项目列表，如下所示：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Where the first 4 items are the float coordinates of the words’s bbox. The last
    three integers provide some more information on the word’s whereabouts.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 前4个项目是单词边界框的浮点坐标。最后三个整数提供有关单词位置的更多信息。
- en: This is a high-speed method. As with the previous methods, argument `sort=True`
    will reorder the words.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种高速方法。与之前的方法一样，使用参数`sort=True`将重新排序单词。
- en: 'Example output:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出：
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: HTML
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML
- en: '[`TextPage.extractHTML()`](textpage.html#TextPage.extractHTML "TextPage.extractHTML")
    (or *Page.get_text(“html”)* output fully reflects the structure of the page’s
    *TextPage* – much like DICT / JSON below. This includes images, font information
    and text positions. If wrapped in HTML header and trailer code, it can readily
    be displayed by an internet browser. Our above example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractHTML()`](textpage.html#TextPage.extractHTML "TextPage.extractHTML")（或*Page.get_text(“html”)*）完全反映了页面的*TextPage*结构，类似于下面的
    DICT / JSON。这包括图像、字体信息和文本位置。如果包含在 HTML 头部和尾部代码中，它可以轻松地被互联网浏览器显示。我们的上述示例：'
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '## Controlling Quality of HTML Output'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '## 控制 HTML 输出的质量'
- en: 'While HTML output has improved a lot in MuPDF v1.12.0, it is not yet bug-free:
    we have found problems in the areas **font support** and **image positioning**.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 HTML 输出在 MuPDF v1.12.0 中有了很大改进，但仍不是无 bug 的：我们发现了**字体支持**和**图像定位**方面的问题。
- en: HTML text contains references to the fonts used of the original document. If
    these are not known to the browser (a fat chance!), it will replace them with
    others; the results will probably look awkward. This issue varies greatly by browser
    – on my Windows machine, MS Edge worked just fine, whereas Firefox looked horrible.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML文本包含对原始文档使用的字体的引用。如果浏览器不知道这些字体（几乎不可能！），它将用其他字体替换它们；结果可能看起来很奇怪。这个问题在不同的浏览器上差异很大——在我的Windows机器上，MS
    Edge工作得很好，而Firefox看起来很糟糕。
- en: For PDFs with a complex structure, images may not be positioned and / or sized
    correctly. This seems to be the case for rotated pages and pages, where the various
    possible page bbox variants do not coincide (e.g. *MediaBox != CropBox*). We do
    not know yet, how to address this – we filed a bug at MuPDF’s site.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于结构复杂的PDF，图像可能无法正确定位和/或调整大小。这似乎是旋转页面和页面等情况的问题，其中各种可能的页面bbox变体不重合（例如*MediaBox
    != CropBox*）。我们尚不清楚如何解决这个问题——我们在MuPDF的网站上报告了一个错误。
- en: 'To address the font issue, you can use a simple utility script to scan through
    the HTML file and replace font references. Here is a little example that replaces
    all fonts with one of the [PDF Base 14 Fonts](app3.html#base-14-fonts): serifed
    fonts will become “Times”, non-serifed “Helvetica” and monospaced will become
    “Courier”. Their respective variations for “bold”, “italic”, etc. are hopefully
    done correctly by your browser:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决字体问题，您可以使用一个简单的实用程序脚本扫描HTML文件并替换字体引用。这里有一个小例子，将所有字体替换为[PDF基本14字体](app3.html#base-14-fonts)之一：有衬线字体将成为“Times”，无衬线字体将成为“Helvetica”，等宽字体将成为“Courier”。希望您的浏览器能够正确处理它们的粗体、斜体等变体：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: DICT (or JSON)
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DICT（或JSON）
- en: '[`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")
    (or *Page.get_text(“dict”, sort=False)*) output fully reflects the structure of
    a *TextPage* and provides image content and position detail (*bbox* – boundary
    boxes in pixel units) for every block, line and span. Images are stored as *bytes*
    for DICT output and base64 encoded strings for JSON output.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")（或*Page.get_text(“dict”,
    sort=False)*）的输出完全反映了*TextPage*的结构，并为每个块、行和跨度提供图像内容和位置详细信息（*bbox*——以像素为单位的边界框）。图像以字典输出的形式存储，并且以JSON输出的形式进行base64编码。'
- en: For a visualization of the dictionary structure have a look at [Structure of
    Dictionary Outputs](textpage.html#textpagedict).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看字典输出结构的可视化，请参阅[字典输出结构](textpage.html#textpagedict)。
- en: 'Here is how this looks like:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的外观：
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: RAWDICT (or RAWJSON)
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RAWDICT（或RAWJSON）
- en: '[`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT "TextPage.extractRAWDICT")
    (or *Page.get_text(“rawdict”, sort=False)*) is an **information superset of DICT**
    and takes the detail level one step deeper. It looks exactly like the above, except
    that the *“text”* items (*string*) in the spans are replaced by the list *“chars”*.
    Each *“chars”* entry is a character *dict*. For example, here is what you would
    see in place of item *“text”: “Text in black color.”* above:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT "TextPage.extractRAWDICT")（或*Page.get_text(“rawdict”,
    sort=False)*）是**DICT的信息超集**，并进一步深入到详细级别。它的外观与上述完全相同，只是*“text”*项（*string*）在跨度中被*“chars”*列表替换。每个*“chars”*条目都是一个字符*dict*。例如，这是上面示例中*“text”:
    “Text in black color.”*的替代内容：'
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: XML
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML
- en: 'The [`TextPage.extractXML()`](textpage.html#TextPage.extractXML "TextPage.extractXML")
    (or *Page.get_text(“xml”)*) version extracts text (no images) with the detail
    level of RAWDICT:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractXML()`](textpage.html#TextPage.extractXML "TextPage.extractXML")（或*Page.get_text(“xml”)*）版本提取了具有RAW字典详细级别的文本（无图像）：'
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We have successfully tested [lxml](https://pypi.org/project/lxml/) to interpret
    this output.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功测试了[lxml](https://pypi.org/project/lxml/)来解释这个输出。
- en: XHTML
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XHTML
- en: '[`TextPage.extractXHTML()`](textpage.html#TextPage.extractXHTML "TextPage.extractXHTML")
    (or *Page.get_text(“xhtml”)*) is a variation of TEXT but in HTML format, containing
    the bare text and images (“semantic” output):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextPage.extractXHTML()`](textpage.html#TextPage.extractXHTML "TextPage.extractXHTML")（或*Page.get_text(“xhtml”)*）是TEXT的一种变体，但以HTML格式呈现，包含裸文本和图像（“语义”输出）：'
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '## Text Extraction Flags Defaults'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '## 文本提取标志默认值'
- en: 'New in version 1.16.2: Method [`Page.get_text()`](page.html#Page.get_text "Page.get_text")
    supports a keyword parameter *flags* *(int)* to control the amount and the quality
    of extracted data. The following table shows the defaults settings (flags parameter
    omitted or None) for each extraction variant. If you specify flags with a value
    other than *None*, be aware that you must set **all desired** options. A description
    of the respective bit settings can be found in [Text Extraction Flags](vars.html#textpreserve).'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本 1.16.2 开始：方法[`Page.get_text()`](page.html#Page.get_text "Page.get_text")
    支持关键参数 *flags* *(int)* 以控制提取数据的数量和质量。以下表格显示了每个提取变体的默认设置（省略了flags参数或设为None）。如果您指定了除
    *None* 以外的值的 flags，请注意您必须设置**所有所需的**选项。有关各位设置的描述，请参见[文本提取标志](vars.html#textpreserve)。
- en: 'New in v1.19.6: The default combinations in the following table are now available
    as Python constants: [`TEXTFLAGS_TEXT`](vars.html#TEXTFLAGS_TEXT "TEXTFLAGS_TEXT"),
    [`TEXTFLAGS_WORDS`](vars.html#TEXTFLAGS_WORDS "TEXTFLAGS_WORDS"), [`TEXTFLAGS_BLOCKS`](vars.html#TEXTFLAGS_BLOCKS
    "TEXTFLAGS_BLOCKS"), [`TEXTFLAGS_DICT`](vars.html#TEXTFLAGS_DICT "TEXTFLAGS_DICT"),
    [`TEXTFLAGS_RAWDICT`](vars.html#TEXTFLAGS_RAWDICT "TEXTFLAGS_RAWDICT"), [`TEXTFLAGS_HTML`](vars.html#TEXTFLAGS_HTML
    "TEXTFLAGS_HTML"), [`TEXTFLAGS_XHTML`](vars.html#TEXTFLAGS_XHTML "TEXTFLAGS_XHTML"),
    [`TEXTFLAGS_XML`](vars.html#TEXTFLAGS_XML "TEXTFLAGS_XML"), and [`TEXTFLAGS_SEARCH`](vars.html#TEXTFLAGS_SEARCH
    "TEXTFLAGS_SEARCH"). You can now easily modify a default flag, e.g.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本 v1.19.6 开始：以下表中的默认组合现在作为 Python 常量提供：[`TEXTFLAGS_TEXT`](vars.html#TEXTFLAGS_TEXT
    "TEXTFLAGS_TEXT"), [`TEXTFLAGS_WORDS`](vars.html#TEXTFLAGS_WORDS "TEXTFLAGS_WORDS"),
    [`TEXTFLAGS_BLOCKS`](vars.html#TEXTFLAGS_BLOCKS "TEXTFLAGS_BLOCKS"), [`TEXTFLAGS_DICT`](vars.html#TEXTFLAGS_DICT
    "TEXTFLAGS_DICT"), [`TEXTFLAGS_RAWDICT`](vars.html#TEXTFLAGS_RAWDICT "TEXTFLAGS_RAWDICT"),
    [`TEXTFLAGS_HTML`](vars.html#TEXTFLAGS_HTML "TEXTFLAGS_HTML"), [`TEXTFLAGS_XHTML`](vars.html#TEXTFLAGS_XHTML
    "TEXTFLAGS_XHTML"), [`TEXTFLAGS_XML`](vars.html#TEXTFLAGS_XML "TEXTFLAGS_XML"),
    和 [`TEXTFLAGS_SEARCH`](vars.html#TEXTFLAGS_SEARCH "TEXTFLAGS_SEARCH")。现在您可以轻松修改默认标志，例如：
- en: '**include** images in a “blocks” output:'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“blocks”输出中**包含**图像：
- en: ''
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`flags = TEXTFLAGS_BLOCKS | TEXT_PRESERVE_IMAGES`'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`flags = TEXTFLAGS_BLOCKS | TEXT_PRESERVE_IMAGES`'
- en: ''
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exclude** images from a “dict” output:'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“dict”输出中**排除**图像：
- en: ''
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`flags = TEXTFLAGS_DICT & ~TEXT_PRESERVE_IMAGES`'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`flags = TEXTFLAGS_DICT & ~TEXT_PRESERVE_IMAGES`'
- en: ''
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'set **dehyphenation off** in text searches:'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文本搜索中关闭**连字化**：
- en: ''
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`flags = TEXTFLAGS_SEARCH & ~TEXT_DEHYPHENATE`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`flags = TEXTFLAGS_SEARCH & ~TEXT_DEHYPHENATE`'
- en: '| Indicator | text | html | xhtml | xml | dict | rawdict | words | blocks |
    search |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 指示符 | 文本 | html | xhtml | xml | dict | rawdict | 词语 | 块 | 搜索 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| preserve ligatures | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 保留连字 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
- en: '| preserve whitespace | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 保留空白 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
- en: '| preserve images | n/a | 1 | 1 | n/a | 1 | 1 | n/a | 0 | 0 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 保留图像 | n/a | 1 | 1 | n/a | 1 | 1 | n/a | 0 | 0 |'
- en: '| inhibit spaces | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 禁止空格 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |'
- en: '| dehyphenate | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 连字化 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |'
- en: '| clip to mediabox | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 剪切到mediabox | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |'
- en: '| use CID instead of U+FFFD | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 使用 CID 而非 U+FFFD | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 |'
- en: '**search** refers to the text search function.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索** 是指文本搜索功能。'
- en: '**“json”** is handled exactly like **“dict”** and is hence left out.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“json”** 和 **“dict”** 处理方式完全相同，因此被省略。'
- en: '**“rawjson”** is handled exactly like **“rawdict”** and is hence left out.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“rawjson”** 和 **“rawdict”** 处理方式完全相同，因此被省略。'
- en: An “n/a” specification means a value of 0 and setting this bit never has any
    effect on the output (but an adverse effect on performance).
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “n/a” 规范意味着值为 0，并且设置此位对输出没有任何影响（但对性能有不利影响）。
- en: 'If you are not interested in images when using an output variant which includes
    them by default, then by all means set the respective bit off: You will experience
    a better performance and much lower space requirements.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在使用默认包含图像的输出变体时不对图像感兴趣，那么请务必关闭相应的位：您将体验到更好的性能和更低的空间需求。
- en: 'To show the effect of [`TEXT_INHIBIT_SPACES`](vars.html#TEXT_INHIBIT_SPACES
    "TEXT_INHIBIT_SPACES") have a look at this example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看[`TEXT_INHIBIT_SPACES`](vars.html#TEXT_INHIBIT_SPACES "TEXT_INHIBIT_SPACES")
    的效果，请参考以下示例：
- en: '[PRE25]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Performance
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: 'The text extraction methods differ significantly both: in terms of information
    they supply, and in terms of resource requirements and runtimes. Generally, more
    information of course means, that more processing is required and a higher data
    volume is generated.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 文本提取方法在提供的信息量、资源需求和运行时间方面有显著差异。显然，提供更多信息意味着需要更多的处理和生成更大的数据量。
- en: Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: Especially images have a **very significant** impact. Make sure to exclude them
    (via the *flags* parameter) whenever you do not need them. To process the below
    mentioned 2’700 total pages with default flags settings required 160 seconds across
    all extraction methods. When all images where excluded, less than 50% of that
    time (77 seconds) were needed.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是图像对性能有**非常显著**的影响。确保在不需要时（通过*flags*参数）将其排除。在默认标志设置下处理下述提到的2700页总共需要160秒。当所有图像都排除时，只需要不到这个时间的一半（77秒）。
- en: To begin with, all methods are **very fast** in relation to other products out
    there in the market. In terms of processing speed, we are not aware of a faster
    (free) tool. Even the most detailed method, RAWDICT, processes all 1’310 pages
    of the [Adobe PDF References](app3.html#adobemanual) in less than 5 seconds (simple
    text needs less than 2 seconds here).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，所有方法在市场上相比其他产品**非常快**。就处理速度而言，我们不知道有比这更快的（免费）工具。即使是最详细的方法RAW字典，在不到5秒的时间内就可以处理完所有1,310页的[Adobe
    PDF参考手册](app3.html#adobemanual)（简单文本只需不到2秒）。
- en: The following table shows average relative speeds (“RSpeed”, baseline 1.00 is
    TEXT), taken across ca. 1400 text-heavy and 1300 image-heavy pages.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了平均相对速度（“RSpeed”，基准为1.00是TEXT），涵盖了约1400页文本密集和1300页图像密集的页面。
- en: '| Method | RSpeed | Comments | no images |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| Method | RSpeed | Comments | 无图像 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| TEXT | 1.00 | no images, **plain** text, line breaks | 1.00 |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| TEXT | 1.00 | 无图像，**普通**文本，换行符 | 1.00 |'
- en: '| BLOCKS | 1.00 | image bboxes (only), **block** level text with bboxes, line
    breaks | 1.00 |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| BLOCKS | 1.00 | 图像边界框（仅限），**块**级文本和边界框，换行符 | 1.00 |'
- en: '| WORDS | 1.02 | no images, **word** level text with bboxes | 1.02 |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| WORDS | 1.02 | 无图像，**单词**级文本和边界框 | 1.02 |'
- en: '| XML | 2.72 | no images, **char** level text, layout and font details | 2.72
    |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| XML | 2.72 | 无图像，**字符**级文本，布局和字体详细信息 | 2.72 |'
- en: '| XHTML | 3.32 | **base64** images, **span** level text, no layout info | 1.00
    |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| XHTML | 3.32 | **base64**图像，**跨度**级文本，无布局信息 | 1.00 |'
- en: '| HTML | 3.54 | **base64** images, **span** level text, layout and font details
    | 1.01 |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| HTML | 3.54 | **base64**图像，**跨度**级文本，布局和字体详细信息 | 1.01 |'
- en: '| DICT | 3.93 | **binary** images, **span** level text, layout and font details
    | 1.04 |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| DICT | 3.93 | **二进制**图像，**跨度**级文本，布局和字体详细信息 | 1.04 |'
- en: '| RAWDICT | 4.50 | **binary** images, **char** level text, layout and font
    details | 1.68 |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| RAWDICT | 4.50 | **二进制**图像，**字符**级文本，布局和字体详细信息 | 1.68 |'
- en: 'As mentioned: when excluding image extraction (last column), the relative speeds
    are changing drastically: except RAWDICT and XML, the other methods are almost
    equally fast, and RAWDICT requires 40% less execution time than the **now slowest
    XML**.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述：当排除图像提取（最后一列）时，相对速度会发生显著变化：除了RAWDICT和XML外，其他方法几乎同样快，而RAWDICT的执行时间比现在最慢的XML要少40%。
- en: Look at chapter **Appendix 1** for more performance information.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 查看附录1章节获取更多性能信息。
- en: Do you have any feedback on this page?
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对本页有任何反馈吗？
- en: '* * *'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按原样提供，不附带任何明示或暗示的保证。本软件根据许可分发，未经授权不得复制、修改或分发。请参考[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)获取许可信息或联系Artifex
    Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA 94129, United States获取更多信息。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档涵盖了所有1.24.4版本及其之前的版本。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
