- en: Working with Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理数据
- en: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/data.html](https://docs.sqlalchemy.org/en/20/tutorial/data.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/data.html](https://docs.sqlalchemy.org/en/20/tutorial/data.html)
- en: In [Working with Transactions and the DBAPI](dbapi_transactions.html#tutorial-working-with-transactions),
    we learned the basics of how to interact with the Python DBAPI and its transactional
    state. Then, in [Working with Database Metadata](metadata.html#tutorial-working-with-metadata),
    we learned how to represent database tables, columns, and constraints within SQLAlchemy
    using the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    and related objects. In this section we will combine both concepts above to create,
    select and manipulate data within a relational database. Our interaction with
    the database is **always** in terms of a transaction, even if we’ve set our database
    driver to use [autocommit](../core/connections.html#dbapi-autocommit) behind the
    scenes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[处理事务和DBAPI](dbapi_transactions.html#tutorial-working-with-transactions)中，我们学习了如何与Python
    DBAPI及其事务状态进行交互的基础知识。然后，在[处理数据库元数据](metadata.html#tutorial-working-with-metadata)中，我们学习了如何使用[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")和相关对象在SQLAlchemy中表示数据库表、列和约束。在本节中，我们将结合上述两个概念来创建、选择和操作关系数据库中的数据。我们与数据库的交互**始终**是在事务的范围内，即使我们已经设置我们的数据库驱动程序在后台使用[自动提交](../core/connections.html#dbapi-autocommit)。
- en: 'The components of this section are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的组成部分如下：
- en: '[Using INSERT Statements](data_insert.html#tutorial-core-insert) - to get some
    data into the database, we introduce and demonstrate the Core [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct. INSERTs from an ORM perspective
    are described in the next section [Data Manipulation with the ORM](orm_data_manipulation.html#tutorial-orm-data-manipulation).'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用INSERT语句](data_insert.html#tutorial-core-insert) - 为了将一些数据插入数据库，我们介绍并演示了核心[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造。从ORM的角度来看，INSERT在下一节[使用ORM进行数据操作](orm_data_manipulation.html#tutorial-orm-data-manipulation)中进行了描述。'
- en: '[Using SELECT Statements](data_select.html#tutorial-selecting-data) - this
    section will describe in detail the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, which is the most commonly used
    object in SQLAlchemy. The [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct emits SELECT statements for both
    Core and ORM centric applications and both use cases will be described here. Additional
    ORM use cases are also noted in the later section [Using Relationships in Queries](orm_related_objects.html#tutorial-select-relationships)
    as well as the [ORM Querying Guide](../orm/queryguide/index.html).'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用SELECT语句](data_select.html#tutorial-selecting-data) - 本节将详细描述[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造，这是SQLAlchemy中最常用的对象。[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造为Core和ORM中心应用程序发出SELECT语句，并且这两种用例将在此处进行描述。在稍后的[在查询中使用关系](orm_related_objects.html#tutorial-select-relationships)部分以及[ORM查询指南](../orm/queryguide/index.html)中还会提到其他ORM用例。'
- en: '[Using UPDATE and DELETE Statements](data_update.html#tutorial-core-update-delete)
    - Rounding out the INSERT and SELECTion of data, this section will describe from
    a Core perspective the use of the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") constructs. ORM-specific UPDATE and DELETE
    is similarly described in the [Data Manipulation with the ORM](orm_data_manipulation.html#tutorial-orm-data-manipulation)
    section.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用UPDATE和DELETE语句](data_update.html#tutorial-core-update-delete) - 补充了数据的插入和选择，本节将从核心的角度描述[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")和[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")构造的使用。ORM特定的UPDATE和DELETE同样在[使用ORM进行数据操作](orm_data_manipulation.html#tutorial-orm-data-manipulation)部分中进行描述。'
