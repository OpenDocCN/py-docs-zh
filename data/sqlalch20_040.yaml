- en: Relationships API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系 API
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/relationship_api.html](https://docs.sqlalchemy.org/en/20/orm/relationship_api.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/relationship_api.html](https://docs.sqlalchemy.org/en/20/orm/relationship_api.html)
- en: '| Object Name | Description |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [backref](#sqlalchemy.orm.backref)(name, **kwargs) | When using the [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") parameter, provides specific parameters to be used
    when the new [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    is generated. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [backref](#sqlalchemy.orm.backref)(name, **kwargs) | 在使用[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")参数时，提供在生成新的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")时使用的特定参数。 |'
- en: '| [dynamic_loader](#sqlalchemy.orm.dynamic_loader)([argument], **kw) | Construct
    a dynamically-loading mapper property. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [dynamic_loader](#sqlalchemy.orm.dynamic_loader)([argument], **kw) | 构造一个动态加载的映射器属性。
    |'
- en: '| [foreign](#sqlalchemy.orm.foreign)(expr) | Annotate a portion of a primaryjoin
    expression with a ‘foreign’ annotation. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [foreign](#sqlalchemy.orm.foreign)(expr) | 使用‘foreign’注释对主要连接表达式的部分进行注释。
    |'
- en: '| [relationship](#sqlalchemy.orm.relationship)([argument, secondary], *, [uselist,
    collection_class, primaryjoin, secondaryjoin, back_populates, order_by, backref,
    overlaps, post_update, cascade, viewonly, init, repr, default, default_factory,
    compare, kw_only, lazy, passive_deletes, passive_updates, active_history, enable_typechecks,
    foreign_keys, remote_side, join_depth, comparator_factory, single_parent, innerjoin,
    distinct_target_key, load_on_pending, query_class, info, omit_join, sync_backref],
    **kw) | Provide a relationship between two mapped classes. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [relationship](#sqlalchemy.orm.relationship)([argument, secondary], *, [uselist,
    collection_class, primaryjoin, secondaryjoin, back_populates, order_by, backref,
    overlaps, post_update, cascade, viewonly, init, repr, default, default_factory,
    compare, kw_only, lazy, passive_deletes, passive_updates, active_history, enable_typechecks,
    foreign_keys, remote_side, join_depth, comparator_factory, single_parent, innerjoin,
    distinct_target_key, load_on_pending, query_class, info, omit_join, sync_backref],
    **kw) | 提供两个映射类之间的关联。 |'
- en: '| [remote](#sqlalchemy.orm.remote)(expr) | Annotate a portion of a primaryjoin
    expression with a ‘remote’ annotation. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [remote](#sqlalchemy.orm.remote)(expr) | 使用‘remote’注释对主要连接表达式的部分进行注释。 |'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Provide a relationship between two mapped classes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 提供两个映射类之间的关联。
- en: This corresponds to a parent-child or associative table relationship. The constructed
    class is an instance of [`Relationship`](internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这对应于父子或关联表关系。构造的类是[`Relationship`](internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")的一个实例。
- en: See also
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with ORM Related Objects](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - tutorial introduction to [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 ORM 相关对象](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中对[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")进行教程介绍'
- en: '[Relationship Configuration](relationships.html) - narrative documentation'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[关系配置](relationships.html) - 叙述性文档'
- en: 'Parameters:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`argument` –'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument` –'
- en: 'This parameter refers to the class that is to be related. It accepts several
    forms, including a direct reference to the target class itself, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance for the target class, a Python callable / lambda
    that will return a reference to the class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") when called, and finally a string name for the class,
    which will be resolved from the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") in use in order to locate the class, e.g.:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数指的是要相关联的类。它接受几种形式，包括对目标类本身的直接引用，目标类的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")实例，将在调用时返回对类或[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的引用的Python可调用/ lambda，以及类的字符串名称，这将从正在使用的[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")中解析类，以便找到该类，例如：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The [`relationship.argument`](#sqlalchemy.orm.relationship.params.argument
    "sqlalchemy.orm.relationship") may also be omitted from the [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct entirely, and instead placed inside a
    [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped") annotation
    on the left side, which should include a Python collection type if the relationship
    is expected to be a collection, such as:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.argument`](#sqlalchemy.orm.relationship.params.argument "sqlalchemy.orm.relationship")
    也可以完全省略不在 [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    构造中传递，而是放置在左侧的 [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    注释中，如果关系预期为集合，则应包含 Python 集合类型，例如：'
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or for a many-to-one or one-to-one relationship:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者对于多对一或一对一关系：
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Defining Mapped Properties with Declarative](declarative_config.html#orm-declarative-properties)
    - further detail on relationship configuration when using Declarative.'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用声明性定义映射属性](declarative_config.html#orm-declarative-properties) - 在使用声明性时关系配置的更多细节。'
- en: '`secondary` –'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secondary` –'
- en: For a many-to-many relationship, specifies the intermediary table, and is typically
    an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    In less common circumstances, the argument may also be specified as an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct, or even a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") construct.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于多对多关系，指定中间表，通常是 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的一个实例。在较不常见的情况下，参数也可以指定为 [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 构造，甚至是 [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 构造。
- en: '[`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary "sqlalchemy.orm.relationship")
    may also be passed as a callable function which is evaluated at mapper initialization
    time. When using Declarative, it may also be a string argument noting the name
    of a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is present in the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection associated with the parent-mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary "sqlalchemy.orm.relationship")
    可以作为一个可调用函数传递，该函数在映射初始化时进行评估。使用声明性时，它也可以是一个字符串参数，指示存在于与父映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 关联的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合中的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的名称。'
- en: Warning
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为 Python 可评估字符串传递时，使用 Python 的 `eval()` 函数解释该参数。**不要将不受信任的输入传递给该字符串**。有关声明性评估
    [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    参数的详细信息，请参阅 [关系参数的评估](extensions/declarative/relationships.html#declarative-relationship-eval)
    。
- en: The [`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") keyword argument is typically applied in the case
    where the intermediary [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is not otherwise expressed in any direct class mapping.
    If the “secondary” table is also explicitly mapped elsewhere (e.g. as in [Association
    Object](basic_relationships.html#association-pattern)), one should consider applying
    the [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly "sqlalchemy.orm.relationship")
    flag so that this [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    is not used for persistence operations which may conflict with those of the association
    object pattern.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary "sqlalchemy.orm.relationship")关键字参数通常适用于中间[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")在任何直接类映射中没有其他表达的情况。如果“secondary”表也在其他地方明确映射（例如在[关联对象](basic_relationships.html#association-pattern)中），则应考虑应用[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")标志，以便这个[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")不用于可能与关联对象模式冲突的持久化操作。'
- en: See also
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Many To Many](basic_relationships.html#relationships-many-to-many) - Reference
    example of “many to many”.'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多对多](basic_relationships.html#relationships-many-to-many) - “多对多”关系的参考示例。'
- en: '[Self-Referential Many-to-Many Relationship](join_conditions.html#self-referential-many-to-many)
    - Specifics on using many-to-many in a self-referential case.'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自引用多对多关系](join_conditions.html#self-referential-many-to-many) - 在自引用情况下使用多对多的具体细节。'
- en: '[Configuring Many-to-Many Relationships](extensions/declarative/relationships.html#declarative-many-to-many)
    - Additional options when using Declarative.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置多对多关系](extensions/declarative/relationships.html#declarative-many-to-many)
    - 在使用声明式时的附加选项。'
- en: '[Association Object](basic_relationships.html#association-pattern) - an alternative
    to [`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary "sqlalchemy.orm.relationship")
    when composing association table relationships, allowing additional attributes
    to be specified on the association table.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联对象](basic_relationships.html#association-pattern) - 在组合关联表关系时的一种替代[`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")的方法，允许在关联表上指定附加属性。'
- en: '[Composite “Secondary” Joins](join_conditions.html#composite-secondary-join)
    - a lesser-used pattern which in some cases can enable complex [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") SQL conditions to be used.'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[复合“次要”连接](join_conditions.html#composite-secondary-join) - 一种较少使用的模式，在某些情况下可以使复杂的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") SQL条件得以使用。'
- en: '`active_history=False` – When `True`, indicates that the “previous” value for
    a many-to-one reference should be loaded when replaced, if not already loaded.
    Normally, history tracking logic for simple many-to-ones only needs to be aware
    of the “new” value in order to perform a flush. This flag is available for applications
    that make use of [`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history") which also need to know the “previous”
    value of the attribute.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_history=False` – 当为`True`时，表示当替换时应加载多对一引用的“先前”值，如果尚未加载。通常，对于简单的多对一引用，历史跟踪逻辑只需要了解“新”值即可执行刷新。此标志适用于使用[`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history")并且还需要知道属性的“先前”值的应用程序。'
- en: '`backref` –'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backref` –'
- en: A reference to a string relationship name, or a [`backref()`](#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") construct, which will be used to automatically generate
    a new [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the related class, which then refers to this one using a bi-directional [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") configuration.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用一个字符串关系名称，或者一个[`backref()`](#sqlalchemy.orm.backref "sqlalchemy.orm.backref")构造，将被用来自动生成一个新的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")在相关类上，然后使用双向[`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")配置来引用这个类。
- en: In modern Python, explicit use of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") with [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") should be preferred, as it is more robust in terms
    of mapper configuration as well as more conceptually straightforward. It also
    integrates with new [**PEP 484**](https://peps.python.org/pep-0484/) typing features
    introduced in SQLAlchemy 2.0 which is not possible with dynamically generated
    attributes.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在现代 Python 中，应优先使用[`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")和[`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")的显式用法，因为在映射器配置和概念上更为健壮直观。它还与 SQLAlchemy 2.0 中引入的新的[**PEP
    484**](https://peps.python.org/pep-0484/)类型特性集成，而动态生成属性则不支持此特性。
- en: See also
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using the legacy ‘backref’ relationship parameter](backref.html#relationships-backref)
    - notes on using [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用传统的 ‘backref’ 关系参数](backref.html#relationships-backref) - 关于使用[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")的注意事项'
- en: '[Working with ORM Related Objects](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial),
    presents an overview of bi-directional relationship configuration and behaviors
    using [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与 ORM 相关对象的工作](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中，使用[`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")提供了双向关系配置和行为的概述'
- en: '[`backref()`](#sqlalchemy.orm.backref "sqlalchemy.orm.backref") - allows control
    over [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    configuration when using [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship").'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`backref()`](#sqlalchemy.orm.backref "sqlalchemy.orm.backref") - 在使用[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")时允许控制[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的配置。'
- en: '`back_populates` –'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`back_populates` –'
- en: Indicates the name of a [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the related class that will be synchronized with this one. It is usually expected
    that the [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the related class also refer to this one. This allows objects on both sides
    of each [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    to synchronize in-Python state changes and also provides directives to the [unit
    of work](../glossary.html#term-unit-of-work) flush process how changes along these
    relationships should be persisted.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示与此类同步的相关类上的[`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")的名称。通常期望相关类上的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")也参考了这个。这允许每个[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")两侧的对象同步 Python 状态变化，并为[工作单元](../glossary.html#term-unit-of-work)刷新过程提供指令，指导沿着这些关系的更改如何持久化。
- en: See also
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with ORM Related Objects](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial),
    presents an overview of bi-directional relationship configuration and behaviors.'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与 ORM 相关对象的工作](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中，提供了双向关系配置和行为的概述。'
- en: '[Basic Relationship Patterns](basic_relationships.html#relationship-patterns)
    - includes many examples of [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship").'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[基本关系模式](basic_relationships.html#relationship-patterns) - 包含了许多[`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")的示例。'
- en: '[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref "sqlalchemy.orm.relationship")
    - legacy form which allows more succinct configuration, but does not support explicit
    typing'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref "sqlalchemy.orm.relationship")
    - 旧形式，允许更简洁的配置，但不支持显式类型化'
- en: '`overlaps` –'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlaps` –'
- en: A string name or comma-delimited set of names of other relationships on either
    this mapper, a descendant mapper, or a target mapper with which this relationship
    may write to the same foreign keys upon persistence. The only effect this has
    is to eliminate the warning that this relationship will conflict with another
    upon persistence. This is used for such relationships that are truly capable of
    conflicting with each other on write, but the application will ensure that no
    such conflicts occur.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串名称或以逗号分隔的名称集，位于此映射器、后代映射器或目标映射器上，此关系可以与之同时写入相同的外键。此唯一的效果是消除此关系将在持久化时与另一个关系发生冲突的警告。这用于真正可能在写入时与彼此冲突的关系，但应用程序将确保不会发生此类冲突。
- en: New in version 1.4.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: See also
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[relationship X will copy column Q to column P, which conflicts with relationship(s):
    ‘Y’](../errors.html#error-qzyx) - usage example'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关系 X 将列 Q 复制到列 P，与关系‘Y’冲突](../errors.html#error-qzyx) - 用法示例'
- en: '`cascade` –'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cascade` –'
- en: A comma-separated list of cascade rules which determines how Session operations
    should be “cascaded” from parent to child. This defaults to `False`, which means
    the default cascade should be used - this default cascade is `"save-update, merge"`.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个逗号分隔的级联规则列表，确定 Session 操作应该如何从父级到子级进行“级联”。默认为 `False`，表示应该使用默认级联 - 此默认级联为
    `"save-update, merge"`。
- en: The available cascades are `save-update`, `merge`, `expunge`, `delete`, `delete-orphan`,
    and `refresh-expire`. An additional option, `all` indicates shorthand for `"save-update,
    merge, refresh-expire, expunge, delete"`, and is often used as in `"all, delete-orphan"`
    to indicate that related objects should follow along with the parent object in
    all cases, and be deleted when de-associated.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用的级联包括 `save-update`、`merge`、`expunge`、`delete`、`delete-orphan` 和 `refresh-expire`。另一个选项
    `all` 表示 `"save-update, merge, refresh-expire, expunge, delete"` 的简写，通常用于指示相关对象应在所有情况下跟随父对象，并在取消关联时删除。
- en: See also
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Cascades](cascades.html#unitofwork-cascades) - Full detail on each of the
    available cascade options.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[级联](cascades.html#unitofwork-cascades) - 每个可用级联选项的详细信息。'
- en: '`cascade_backrefs=False` –'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cascade_backrefs=False` –'
- en: Legacy; this flag is always False.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 旧版本；此标志始终为 False。
- en: 'Changed in version 2.0: “cascade_backrefs” functionality has been removed.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 2.0 中更改：“cascade_backrefs” 功能已被移除。
- en: '`collection_class` –'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collection_class` –'
- en: A class or callable that returns a new list-holding object. will be used in
    place of a plain list for storing elements.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个类或可调用对象，返回一个新的列表持有对象。将用于代替普通列表存储元素。
- en: See also
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Customizing Collection Access](collection_api.html#custom-collections) - Introductory
    documentation and examples.'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义集合访问](collection_api.html#custom-collections) - 入门文档和示例。'
- en: '`comparator_factory` –'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comparator_factory` –'
- en: A class which extends `Comparator` which provides custom SQL clause generation
    for comparison operations.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个扩展了 `Comparator` 的类，为比较操作提供自定义 SQL 子句生成。
- en: See also
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    - some detail on redefining comparators at this level.'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    - 在此级别重新定义比较器的一些详细信息。'
- en: '[Operator Customization](mapped_attributes.html#custom-comparators) - Brief
    intro to this feature.'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[操作符自定义](mapped_attributes.html#custom-comparators) - 关于这一特性的简要介绍。'
- en: '`distinct_target_key=None` –'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`distinct_target_key=None` –'
- en: Indicate if a “subquery” eager load should apply the DISTINCT keyword to the
    innermost SELECT statement. When left as `None`, the DISTINCT keyword will be
    applied in those cases when the target columns do not comprise the full primary
    key of the target table. When set to `True`, the DISTINCT keyword is applied to
    the innermost SELECT unconditionally.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指示“子查询”预加载是否应将 DISTINCT 关键字应用于内层 SELECT 语句。当留空时，当目标列不包括目标表的完整主键时，将应用 DISTINCT
    关键字。当设置为 `True` 时，DISTINCT 关键字将无条件地应用于内层 SELECT。
- en: It may be desirable to set this flag to False when the DISTINCT is reducing
    performance of the innermost subquery beyond that of what duplicate innermost
    rows may be causing.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 DISTINCT 降低内层子查询的性能超出重复的内层行可能导致的性能时，将此标志设置为 False 可能是合适的。
- en: See also
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Relationship Loading Techniques](queryguide/relationships.html) - includes
    an introduction to subquery eager loading.'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关系加载技术](queryguide/relationships.html) - 包括对子查询预加载的介绍。'
- en: '`doc` – Docstring which will be applied to the resulting descriptor.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc` – 将应用于生成描述符的文档字符串。'
- en: '`foreign_keys` –'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`foreign_keys` –'
- en: A list of columns which are to be used as “foreign key” columns, or columns
    which refer to the value in a remote column, within the context of this [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") object’s [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition. That is, if the [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition of this [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is `a.id == b.a_id`, and the values in `b.a_id`
    are required to be present in `a.id`, then the “foreign key” column of this [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is `b.a_id`.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在此 [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    对象的 [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") 条件的上下文中用作“外键”列或引用远程列中的值的列的列表。也就是说，如果此 [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的 [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") 条件是 `a.id == b.a_id`，并且要求 `b.a_id` 中的值在 `a.id`
    中存在，则此 [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    的“外键”列是 `b.a_id`。
- en: 'In normal cases, the [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") parameter is **not required.** [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will automatically determine which columns in the
    [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin "sqlalchemy.orm.relationship")
    condition are to be considered “foreign key” columns based on those [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that specify [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), or are otherwise listed as referencing columns
    in a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") construct. [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") is only needed when:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在正常情况下，**不需要** [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") 参数。[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 将根据那些指定了 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象或以其他方式列在 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 构造中的引用列的那些列自动确定在 [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") 条件中应被视为“外键”列。只有在以下情况下才需要 [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") 参数：
- en: There is more than one way to construct a join from the local table to the remote
    table, as there are multiple foreign key references present. Setting `foreign_keys`
    will limit the [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    to consider just those columns specified here as “foreign”.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本地表到远程表的连接可以有多种构造方式，因为存在多个外键引用。设置 `foreign_keys` 将限制 [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 仅考虑此处指定的列作为“外键”。
- en: ''
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    being mapped does not actually have [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") constructs present, often because the
    table was reflected from a database that does not support foreign key reflection
    (MySQL MyISAM).
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 被映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    实际上没有 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    或 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 构造存在，通常是因为该表是从不支持外键反射的数据库（MySQL MyISAM）反射而来。
- en: ''
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") argument is used to construct a non-standard join
    condition, which makes use of columns or expressions that do not normally refer
    to their “parent” column, such as a join condition expressed by a complex comparison
    using a SQL function.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") 参数用于构建非标准的连接条件，该条件使用通常不会引用其“父”列的列或表达式，例如使用 SQL
    函数进行的复杂比较表达的连接条件。'
- en: The [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    construct will raise informative error messages that suggest the use of the [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") parameter when presented with an ambiguous condition.
    In typical cases, if [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    doesn’t raise any exceptions, the [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") parameter is usually not needed.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")构造引发信息性错误消息时，建议使用[`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship")参数，以处理模棱两可的情况。在典型情况下，如果[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")没有引发任何异常，则通常不需要[`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship")参数。
- en: '[`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") may also be passed as a callable function which
    is evaluated at mapper initialization time, and may be passed as a Python-evaluable
    string when using Declarative.'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") 也可以传递为一个在映射器初始化时求值的可调用函数，并且在使用声明性时可以传递为Python可评估的字符串。'
- en: Warning
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为Python可评估的字符串传递时，该参数将使用Python的`eval()`函数进行解释。**不要将不受信任的输入传递给此字符串**。有关使用[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")参数的声明性评估的详细信息，请参阅[关系参数的评估](extensions/declarative/relationships.html#declarative-relationship-eval)。
- en: See also
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Handling Multiple Join Paths](join_conditions.html#relationship-foreign-keys)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[处理多个连接路径](join_conditions.html#relationship-foreign-keys)'
- en: '[Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[创建自定义外键条件](join_conditions.html#relationship-custom-foreign)'
- en: '[`foreign()`](#sqlalchemy.orm.foreign "sqlalchemy.orm.foreign") - allows direct
    annotation of the “foreign” columns within a [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition.'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`foreign()`](#sqlalchemy.orm.foreign "sqlalchemy.orm.foreign") - 允许在[`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")条件中直接注释“外键”列。'
- en: '`info` – Optional data dictionary which will be populated into the [`MapperProperty.info`](internals.html#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") attribute of this object.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将被填充到此对象的[`MapperProperty.info`](internals.html#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info")属性中。'
- en: '`innerjoin=False` –'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innerjoin=False` –'
- en: When `True`, joined eager loads will use an inner join to join against related
    tables instead of an outer join. The purpose of this option is generally one of
    performance, as inner joins generally perform better than outer joins.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，连接式急加载将使用内连接而不是外连接来与相关表连接。该选项的目的通常是性能之一，因为内连接通常比外连接执行得更好。
- en: This flag can be set to `True` when the relationship references an object via
    many-to-one using local foreign keys that are not nullable, or when the reference
    is one-to-one or a collection that is guaranteed to have one or at least one entry.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当关系引用通过不可为空的本地外键引用对象时，或者引用为一对一或保证具有一个或至少一个条目的集合时，可以将此标志设置为`True`。
- en: The option supports the same “nested” and “unnested” options as that of [`joinedload.innerjoin`](queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload"). See that flag for details on nested / unnested behaviors.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该选项支持与[`joinedload.innerjoin`](queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload")相同的“嵌套”和“未嵌套”选项。有关嵌套/未嵌套行为的详细信息，请参阅该标志。
- en: See also
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`joinedload.innerjoin`](queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload") - the option as specified by loader option, including
    detail on nesting behavior.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`joinedload.innerjoin`](queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload") - 由加载器选项指定的选项，包括嵌套行为的详细信息。'
- en: '[What Kind of Loading to Use ?](queryguide/relationships.html#what-kind-of-loading)
    - Discussion of some details of various loader options.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[应该使用什么类型的加载？](queryguide/relationships.html#what-kind-of-loading) - 讨论各种加载器选项的一些细节。'
- en: '`join_depth` –'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join_depth` –'
- en: When non-`None`, an integer value indicating how many levels deep “eager” loaders
    should join on a self-referring or cyclical relationship. The number counts how
    many times the same Mapper shall be present in the loading condition along a particular
    join branch. When left at its default of `None`, eager loaders will stop chaining
    when they encounter a the same target mapper which is already higher up in the
    chain. This option applies both to joined- and subquery- eager loaders.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当非`None`时，表示“急切”加载器应该在自引用或循环关系上连接多少级深度的整数值。该数字计算相同Mapper在加载条件中沿着特定连接分支出现的次数。当保持默认值`None`时，急切加载器在遇到已经在链中较高位置的相同目标映射器时将停止链接。此选项适用于连接和子查询急切加载器。
- en: See also
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Configuring Self-Referential Eager Loading](self_referential.html#self-referential-eager-loading)
    - Introductory documentation and examples.'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置自引用急切加载](self_referential.html#self-referential-eager-loading) - 入门文档和示例。'
- en: '`lazy=''select''` –'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lazy=''select''` –'
- en: 'specifies How the related items should be loaded. Default value is `select`.
    Values include:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定相关项目应该如何加载。默认值为`select`。值包括：
- en: '`select` - items should be loaded lazily when the property is first accessed,
    using a separate SELECT statement, or identity map fetch for simple many-to-one
    references.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select` - 当首次访问属性时，应该懒加载项目，使用一个单独的SELECT语句，或者对于简单的多对一引用，使用标识映射获取。'
- en: '`immediate` - items should be loaded as the parents are loaded, using a separate
    SELECT statement, or identity map fetch for simple many-to-one references.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`immediate` - 项目应该在父项加载时加载，使用一个单独的SELECT语句，或者对于简单的多对一引用，使用标识映射获取。'
- en: '`joined` - items should be loaded “eagerly” in the same query as that of the
    parent, using a JOIN or LEFT OUTER JOIN. Whether the join is “outer” or not is
    determined by the [`relationship.innerjoin`](#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") parameter.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joined` - 项目应该在与父项相同的查询中“急切”加载，使用JOIN或LEFT OUTER JOIN。JOIN是“外部”的还是不是由[`relationship.innerjoin`](#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship")参数确定。'
- en: '`subquery` - items should be loaded “eagerly” as the parents are loaded, using
    one additional SQL statement, which issues a JOIN to a subquery of the original
    statement, for each collection requested.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subquery` - 项目应该在父项加载时“急切”加载，使用一个额外的SQL语句，为每个请求的集合发出一个JOIN到原始语句的子查询。'
- en: '`selectin` - items should be loaded “eagerly” as the parents are loaded, using
    one or more additional SQL statements, which issues a JOIN to the immediate parent
    object, specifying primary key identifiers using an IN clause.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectin` - 项目应该在父项加载时“急切”加载，使用一个或多个额外的SQL语句，发出一个JOIN到直接父对象，使用IN子句指定主键标识符。'
- en: '`noload` - no loading should occur at any time. The related collection will
    remain empty. The `noload` strategy is not recommended for general use. For a
    general use “never load” approach, see [Write Only Relationships](large_collections.html#write-only-relationship)'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noload` - 任何时候都不应发生加载。相关集合将保持为空。不建议一般使用`noload`策略。对于一般的“永不加载”方法，请参见[仅写关系](large_collections.html#write-only-relationship)。'
- en: '`raise` - lazy loading is disallowed; accessing the attribute, if its value
    were not already loaded via eager loading, will raise an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"). This strategy can be used when objects
    are to be detached from their attached [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") after they are loaded.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raise` - 禁止惰性加载；如果属性的值尚未通过急切加载加载，则访问该属性将引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。当对象在加载后要从其附加的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中分离时，可以使用此策略。'
- en: '`raise_on_sql` - lazy loading that emits SQL is disallowed; accessing the attribute,
    if its value were not already loaded via eager loading, will raise an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"), `if the lazy load needs to emit SQL`. If
    the lazy load can pull the related value from the identity map or determine that
    it should be None, the value is loaded. This strategy can be used when objects
    will remain associated with the attached [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), however additional SELECT statements should be blocked.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raise_on_sql` - 禁止发出 SQL 的延迟加载；如果该属性的值尚未通过急加载加载，则访问该属性将引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")，“如果延迟加载需要发出 SQL”。如果延迟加载可以从标识映射中提取相关值或确定它应该是None，则加载该值。当对象将保持与附加的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联时，可以使用此策略，但应阻止附加的额外SELECT语句。'
- en: '`write_only` - the attribute will be configured with a special “virtual collection”
    that may receive [`WriteOnlyCollection.add()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.add
    "sqlalchemy.orm.WriteOnlyCollection.add") and [`WriteOnlyCollection.remove()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.remove
    "sqlalchemy.orm.WriteOnlyCollection.remove") commands to add or remove individual
    objects, but will not under any circumstances load or iterate the full set of
    objects from the database directly. Instead, methods such as [`WriteOnlyCollection.select()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.select
    "sqlalchemy.orm.WriteOnlyCollection.select"), [`WriteOnlyCollection.insert()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.insert
    "sqlalchemy.orm.WriteOnlyCollection.insert"), [`WriteOnlyCollection.update()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.update
    "sqlalchemy.orm.WriteOnlyCollection.update") and [`WriteOnlyCollection.delete()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.delete
    "sqlalchemy.orm.WriteOnlyCollection.delete") are provided which generate SQL constructs
    that may be used to load and modify rows in bulk. Used for large collections that
    are never appropriate to load at once into memory.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write_only` - 该属性将配置为具有特殊的“虚拟集合”，该集合可能接收[`WriteOnlyCollection.add()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.add
    "sqlalchemy.orm.WriteOnlyCollection.add")和[`WriteOnlyCollection.remove()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.remove
    "sqlalchemy.orm.WriteOnlyCollection.remove")命令以添加或删除单个对象，但绝不会直接从数据库加载或迭代完整对象集。而是提供了诸如[`WriteOnlyCollection.select()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.select
    "sqlalchemy.orm.WriteOnlyCollection.select")、[`WriteOnlyCollection.insert()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.insert
    "sqlalchemy.orm.WriteOnlyCollection.insert")、[`WriteOnlyCollection.update()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.update
    "sqlalchemy.orm.WriteOnlyCollection.update")和[`WriteOnlyCollection.delete()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.delete
    "sqlalchemy.orm.WriteOnlyCollection.delete")等方法，生成可用于批量加载和修改行的SQL构造。用于从不适合一次加载到内存中的大型集合。'
- en: The `write_only` loader style is configured automatically when the [`WriteOnlyMapped`](large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") annotation is provided on the left hand side
    within a Declarative mapping. See the section [Write Only Relationships](large_collections.html#write-only-relationship)
    for examples.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在声明性映射的左侧提供[`WriteOnlyMapped`](large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped")注释时，将自动配置`write_only`加载程序样式。有关示例，请参阅[仅写关系](large_collections.html#write-only-relationship)部分。
- en: New in version 2.0.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 2.0 中新增。
- en: See also
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Write Only Relationships](large_collections.html#write-only-relationship)
    - in the [ORM Querying Guide](queryguide/index.html)'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[仅写关系](large_collections.html#write-only-relationship) - 在[ORM查询指南](queryguide/index.html)中'
- en: '`dynamic` - the attribute will return a pre-configured [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object for all read operations, onto which further filtering
    operations can be applied before iterating the results.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dynamic` - 属性将为所有读操作返回预配置的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，可以在迭代结果之前应用进一步的过滤操作。'
- en: The `dynamic` loader style is configured automatically when the [`DynamicMapped`](large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") annotation is provided on the left hand side within
    a Declarative mapping. See the section [Dynamic Relationship Loaders](large_collections.html#dynamic-relationship)
    for examples.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在声明式映射中的左侧提供了[`DynamicMapped`](large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped")注释时，将自动配置`dynamic`加载程序样式。有关示例，请参见[动态关系加载器](large_collections.html#dynamic-relationship)一节。
- en: Legacy Feature
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统功能
- en: The “dynamic” lazy loader strategy is the legacy form of what is now the “write_only”
    strategy described in the section [Write Only Relationships](large_collections.html#write-only-relationship).
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: “动态”懒加载策略是现在描述的“只写”策略的传统形式，详见[仅写关系](large_collections.html#write-only-relationship)一节。
- en: See also
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Dynamic Relationship Loaders](large_collections.html#dynamic-relationship)
    - in the [ORM Querying Guide](queryguide/index.html)'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[动态关系加载器](large_collections.html#dynamic-relationship) - 在[ORM查询指南](queryguide/index.html)中'
- en: '[Write Only Relationships](large_collections.html#write-only-relationship)
    - more generally useful approach for large collections that should not fully load
    into memory'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[仅写关系](large_collections.html#write-only-relationship) - 用于大型集合的更普遍有用的方法，不应完全加载到内存中。'
- en: True - a synonym for ‘select’
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: True - ‘select’的同义词
- en: False - a synonym for ‘joined’
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: False - ‘joined’的同义词
- en: None - a synonym for ‘noload’
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: None - ‘noload’的同义词
- en: See also
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Relationship Loading Techniques](queryguide/relationships.html#orm-queryguide-relationship-loaders)
    - Full documentation on relationship loader configuration in the [ORM Querying
    Guide](queryguide/index.html).'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关系加载技术](queryguide/relationships.html#orm-queryguide-relationship-loaders)
    - 在[ORM查询指南](queryguide/index.html)中关于关系加载程序配置的完整文档。'
- en: '`load_on_pending=False` –'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load_on_pending=False` –'
- en: Indicates loading behavior for transient or pending parent objects.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指示暂态或挂起父对象的加载行为。
- en: When set to `True`, causes the lazy-loader to issue a query for a parent object
    that is not persistent, meaning it has never been flushed. This may take effect
    for a pending object when autoflush is disabled, or for a transient object that
    has been “attached” to a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    but is not part of its pending collection.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为`True`时，会导致惰性加载程序对尚未持久的父对象发出查询，即从未刷新过的父对象。当自动刷新被禁用时，这可能会对挂起对象产生影响，或者对已“附加”到[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")但不属于其挂起集合的暂态对象产生影响。
- en: The [`relationship.load_on_pending`](#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship") flag does not improve behavior when the ORM is
    used normally - object references should be constructed at the object level, not
    at the foreign key level, so that they are present in an ordinary way before a
    flush proceeds. This flag is not not intended for general use.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.load_on_pending`](#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship")标志在ORM正常使用时不会改善行为 - 对象引用应在对象级别构造，而不是在外键级别构造，以便它们在刷新进行之前以普通方式存在。此标志不打算供常规使用。'
- en: See also
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.enable_relationship_loading()`](session_api.html#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") - this method establishes
    “load on pending” behavior for the whole object, and also allows loading on objects
    that remain transient or detached.'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.enable_relationship_loading()`](session_api.html#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") - 此方法为整个对象建立了“在挂起时加载”的行为，还允许在保持为暂态或游离状态的对象上加载。'
- en: '`order_by` –'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_by` –'
- en: Indicates the ordering that should be applied when loading these items. [`relationship.order_by`](#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship") is expected to refer to one of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects to which the target class is mapped, or the
    attribute itself bound to the target class which refers to the column.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指示加载这些项时应应用的排序。[`relationship.order_by`](#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship")预期引用目标类映射到的一个[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象之一，或者绑定到引用列的目标类的属性本身。
- en: '[`relationship.order_by`](#sqlalchemy.orm.relationship.params.order_by "sqlalchemy.orm.relationship")
    may also be passed as a callable function which is evaluated at mapper initialization
    time, and may be passed as a Python-evaluable string when using Declarative.'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.order_by`](#sqlalchemy.orm.relationship.params.order_by "sqlalchemy.orm.relationship")
    还可以作为可调用函数传递，该函数在映射器初始化时进行评估，并且在使用 Declarative 时可以作为 Python 可评估字符串进行传递。'
- en: Warning
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为 Python 可评估字符串传递时，该参数将使用 Python 的 `eval()` 函数进行解释。**不要将不受信任的输入传递给此字符串**。有关[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")参数的声明性评估的详细信息，请参阅[关系参数的评估](extensions/declarative/relationships.html#declarative-relationship-eval)。
- en: '`passive_deletes=False` –'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passive_deletes=False` -'
- en: Indicates loading behavior during delete operations.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指示删除操作期间的加载行为。
- en: A value of True indicates that unloaded child items should not be loaded during
    a delete operation on the parent. Normally, when a parent item is deleted, all
    child items are loaded so that they can either be marked as deleted, or have their
    foreign key to the parent set to NULL. Marking this flag as True usually implies
    an ON DELETE <CASCADE|SET NULL> rule is in place which will handle updating/deleting
    child rows on the database side.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: True 的值表示在父对象的删除操作期间不应加载未加载的子项目。通常，当删除父项目时，所有子项目都会加载，以便可以将它们标记为已删除，或者将它们的外键设置为
    NULL。将此标志标记为 True 通常意味着已经存在一个 ON DELETE <CASCADE|SET NULL> 规则，该规则将处理数据库端的更新/删除子行。
- en: Additionally, setting the flag to the string value ‘all’ will disable the “nulling
    out” of the child foreign keys, when the parent object is deleted and there is
    no delete or delete-orphan cascade enabled. This is typically used when a triggering
    or error raise scenario is in place on the database side. Note that the foreign
    key attributes on in-session child objects will not be changed after a flush occurs
    so this is a very special use-case setting. Additionally, the “nulling out” will
    still occur if the child object is de-associated with the parent.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，将标志设置为字符串值“all”将禁用在父对象被删除且未启用删除或删除-孤儿级联时的“空值”子外键。当数据库端存在触发或错误提升方案时，通常会使用此选项。请注意，在刷新后，会话中的子对象上的外键属性不会更改，因此这是一个非常特殊的用例设置。此外，如果子对象与父对象解除关联，则“nulling
    out”仍会发生。
- en: See also
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using foreign key ON DELETE cascade with ORM relationships](cascades.html#passive-deletes)
    - Introductory documentation and examples.'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用ORM关系的外键ON DELETE级联](cascades.html#passive-deletes) - 入门文档和示例。'
- en: '`passive_updates=True` –'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passive_updates=True` -'
- en: Indicates the persistence behavior to take when a referenced primary key value
    changes in place, indicating that the referencing foreign key columns will also
    need their value changed.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指示当引用的主键值在原位更改时要采取的持久性行为，这表示引用的外键列也需要更改其值。
- en: When True, it is assumed that `ON UPDATE CASCADE` is configured on the foreign
    key in the database, and that the database will handle propagation of an UPDATE
    from a source column to dependent rows. When False, the SQLAlchemy [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct will attempt to emit its own UPDATE statements
    to modify related targets. However note that SQLAlchemy **cannot** emit an UPDATE
    for more than one level of cascade. Also, setting this flag to False is not compatible
    in the case where the database is in fact enforcing referential integrity, unless
    those constraints are explicitly “deferred”, if the target backend supports it.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，假定数据库上的外键已配置为 `ON UPDATE CASCADE`，并且数据库将处理从源列到依赖行的 UPDATE 传播。当为 False
    时，SQLAlchemy [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    构造将尝试发出自己的 UPDATE 语句以修改相关目标。但请注意，SQLAlchemy **无法** 对超过一级的级联发出 UPDATE。此外，将此标志设置为
    False 在数据库实际强制执行引用完整性的情况下不兼容，除非这些约束明确为“延迟”，如果目标后端支持。
- en: It is highly advised that an application which is employing mutable primary
    keys keeps `passive_updates` set to True, and instead uses the referential integrity
    features of the database itself in order to handle the change efficiently and
    fully.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议使用可变主键的应用程序将 `passive_updates` 设置为 True，并且使用数据库本身的引用完整性功能来高效完全处理更改。
- en: See also
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mutable Primary Keys / Update Cascades](relationship_persistence.html#passive-updates)
    - Introductory documentation and examples.'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[可变主键 / 更新级联](relationship_persistence.html#passive-updates) - 介绍文档和示例。'
- en: '`mapper.passive_updates` - a similar flag which takes effect for joined-table
    inheritance mappings.'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mapper.passive_updates` - 类似的标志也适用于连接表继承映射。'
- en: '`post_update` –'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_update` –'
- en: This indicates that the relationship should be handled by a second UPDATE statement
    after an INSERT or before a DELETE. This flag is used to handle saving bi-directional
    dependencies between two individual rows (i.e. each row references the other),
    where it would otherwise be impossible to INSERT or DELETE both rows fully since
    one row exists before the other. Use this flag when a particular mapping arrangement
    will incur two rows that are dependent on each other, such as a table that has
    a one-to-many relationship to a set of child rows, and also has a column that
    references a single child row within that list (i.e. both tables contain a foreign
    key to each other). If a flush operation returns an error that a “cyclical dependency”
    was detected, this is a cue that you might want to use [`relationship.post_update`](#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") to “break” the cycle.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这表示关系应该在插入后或删除前通过第二个 UPDATE 语句进行处理。该标志用于处理两个单独行之间的双向依赖关系（即每行引用另一行），否则将无法完全插入或删除两行，因为一行在另一行之前存在。当特定的映射安排将导致两行彼此依赖时，请使用此标志，例如，一个表与一组子行之间存在一对多关系，并且还有一个列引用该列表中的单个子行（即两个表相互包含对方的外键）。如果刷新操作返回检测到“循环依赖”错误，这表明您可能希望使用
    [`relationship.post_update`](#sqlalchemy.orm.relationship.params.post_update "sqlalchemy.orm.relationship")
    来“打破”循环。
- en: See also
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Rows that point to themselves / Mutually Dependent Rows](relationship_persistence.html#post-update)
    - Introductory documentation and examples.'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[指向自身的行 / 相互依赖行](relationship_persistence.html#post-update) - 介绍文档和示例。'
- en: '`primaryjoin` –'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`primaryjoin` –'
- en: A SQL expression that will be used as the primary join of the child object against
    the parent object, or in a many-to-many relationship the join of the parent object
    to the association table. By default, this value is computed based on the foreign
    key relationships of the parent and child tables (or association table).
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用作子对象与父对象之间的主要连接的 SQL 表达式，或者在多对多关系中将父对象连接到关联表。默认情况下，此值基于父表和子表（或关联表）的外键关系计算。
- en: '[`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") may also be passed as a callable function which
    is evaluated at mapper initialization time, and may be passed as a Python-evaluable
    string when using Declarative.'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") 也可以作为一个可调用函数传递，该函数在映射器初始化时进行评估，并且在使用声明性时可以作为一个可评估的
    Python 字符串进行传递。'
- en: Warning
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为一个可评估的 Python 字符串传递时，该参数将使用 Python 的 `eval()` 函数进行解释。**不要传递不受信任的输入给此字符串**。有关声明性评估
    [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    参数的详细信息，请参阅[关系参数的评估](extensions/declarative/relationships.html#declarative-relationship-eval)。
- en: See also
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specifying Alternate Join Conditions](join_conditions.html#relationship-primaryjoin)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[指定替代连接条件](join_conditions.html#relationship-primaryjoin)'
- en: '`remote_side` –'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remote_side` –'
- en: Used for self-referential relationships, indicates the column or list of columns
    that form the “remote side” of the relationship.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于自引用关系，指示形成关系的“远端”的列或列列表。
- en: '[`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") may also be passed as a callable function which
    is evaluated at mapper initialization time, and may be passed as a Python-evaluable
    string when using Declarative.'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") 还可以作为可调用函数传递，在映射器初始化时进行评估，并且在使用声明性时可以作为 Python
    可评估字符串传递。'
- en: Warning
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为 Python 可评估字符串传递时，该参数将使用 Python 的 `eval()` 函数进行解释。**不要将不受信任的输入传递给此字符串**。有关使用
    [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    参数的声明性评估的详细信息，请参阅[关系参数的评估](extensions/declarative/relationships.html#declarative-relationship-eval)。
- en: See also
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Adjacency List Relationships](self_referential.html#self-referential) - in-depth
    explanation of how [`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") is used to configure self-referential relationships.'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[邻接列表关系](self_referential.html#self-referential) - 如何配置自引用关系的详细说明，[`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") 的使用。'
- en: '[`remote()`](#sqlalchemy.orm.remote "sqlalchemy.orm.remote") - an annotation
    function that accomplishes the same purpose as [`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship"), typically when a custom [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition is used.'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`remote()`](#sqlalchemy.orm.remote "sqlalchemy.orm.remote") - 完成与 [`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") 相同目的的注释函数，通常在使用自定义 [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") 条件时使用。'
- en: '`query_class` –'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_class` –'
- en: A [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    subclass that will be used internally by the `AppenderQuery` returned by a “dynamic”
    relationship, that is, a relationship that specifies `lazy="dynamic"` or was otherwise
    constructed using the [`dynamic_loader()`](#sqlalchemy.orm.dynamic_loader "sqlalchemy.orm.dynamic_loader")
    function.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    的子类，将在由“动态”关系返回的 `AppenderQuery` 内部使用，即指定了 `lazy="dynamic"` 的关系或以其他方式使用了 [`dynamic_loader()`](#sqlalchemy.orm.dynamic_loader
    "sqlalchemy.orm.dynamic_loader") 函数构造的关系。'
- en: See also
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dynamic Relationship Loaders](large_collections.html#dynamic-relationship)
    - Introduction to “dynamic” relationship loaders.'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[动态关联加载器](large_collections.html#dynamic-relationship) - “动态”关联加载器的介绍。'
- en: '`secondaryjoin` –'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secondaryjoin` –'
- en: A SQL expression that will be used as the join of an association table to the
    child object. By default, this value is computed based on the foreign key relationships
    of the association and child tables.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用作关联表与子对象的连接的 SQL 表达式。默认情况下，此值根据关联和子表的外键关系计算而来。
- en: '[`relationship.secondaryjoin`](#sqlalchemy.orm.relationship.params.secondaryjoin
    "sqlalchemy.orm.relationship") may also be passed as a callable function which
    is evaluated at mapper initialization time, and may be passed as a Python-evaluable
    string when using Declarative.'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.secondaryjoin`](#sqlalchemy.orm.relationship.params.secondaryjoin
    "sqlalchemy.orm.relationship") 还可以作为可调用函数传递，在映射器初始化时进行评估，并且在使用声明性时可以作为 Python
    可评估字符串传递。'
- en: Warning
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为 Python 可评估字符串传递时，该参数将使用 Python 的 `eval()` 函数进行解释。**不要将不受信任的输入传递给此字符串**。有关使用
    [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    参数的声明性评估的详细信息，请参阅[关系参数的评估](extensions/declarative/relationships.html#declarative-relationship-eval)。
- en: See also
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specifying Alternate Join Conditions](join_conditions.html#relationship-primaryjoin)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[指定替代连接条件](join_conditions.html#relationship-primaryjoin)'
- en: '`single_parent` –'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`single_parent` –'
- en: When True, installs a validator which will prevent objects from being associated
    with more than one parent at a time. This is used for many-to-one or many-to-many
    relationships that should be treated either as one-to-one or one-to-many. Its
    usage is optional, except for [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs which are many-to-one or many-to-many
    and also specify the `delete-orphan` cascade option. The [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct itself will raise an error instructing
    when this option is required.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，安装一个验证器，该验证器将阻止对象同时与多个父对象关联。这用于应将多对一或多对多关系视为一对一或一对多的情况。除了指定`delete-orphan`级联选项的多对一或多对多关系外，其使用是可选的。当要求此选项时，[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造本身将引发错误指示。
- en: See also
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Cascades](cascades.html#unitofwork-cascades) - includes detail on when the
    [`relationship.single_parent`](#sqlalchemy.orm.relationship.params.single_parent
    "sqlalchemy.orm.relationship") flag may be appropriate.'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[级联操作](cascades.html#unitofwork-cascades) - 包括有关何时适合使用[`relationship.single_parent`](#sqlalchemy.orm.relationship.params.single_parent
    "sqlalchemy.orm.relationship")标志的详细信息。'
- en: '`uselist` –'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uselist` –'
- en: A boolean that indicates if this property should be loaded as a list or a scalar.
    In most cases, this value is determined automatically by [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") at mapper configuration time. When using explicit
    [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped") annotations,
    [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist "sqlalchemy.orm.relationship")
    may be derived from the whether or not the annotation within [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") contains a collection class. Otherwise, [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") may be derived from the type and direction of the
    relationship - one to many forms a list, many to one forms a scalar, many to many
    is a list. If a scalar is desired where normally a list would be present, such
    as a bi-directional one-to-one relationship, use an appropriate [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation or set [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") to False.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个布尔值，指示此属性是否应加载为列表或标量。在大多数情况下，此值由[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")在映射配置时自动确定。当使用显式的[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")注解时，[`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")可以根据[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")中的注解是否包含集合类来推导出。否则，[`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")可以从关系的类型和方向推导出 - 一对多形成一个列表，多对一形成一个标量，多对多是一个列表。如果希望在通常存在列表的地方使用标量，例如双向一对一关系，请使用适当的[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")注解或将[`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")设置为False。
- en: 'The [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist "sqlalchemy.orm.relationship")
    flag is also available on an existing [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct as a read-only attribute, which can be
    used to determine if this [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    deals with collections or scalar attributes:'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist "sqlalchemy.orm.relationship")标志也可用于现有的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造，作为一个只读属性，可用于确定此[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")是否处理集合或标量属性：'
- en: '[PRE4]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See also
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[One To One](basic_relationships.html#relationships-one-to-one) - Introduction
    to the “one to one” relationship pattern, which is typically when an alternate
    setting for [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") is involved.'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[一对一关系](basic_relationships.html#relationships-one-to-one) - 介绍了“一对一”关系模式，通常涉及[`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")的备用设置。'
- en: '`viewonly=False` –'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`viewonly=False` –'
- en: When set to `True`, the relationship is used only for loading objects, and not
    for any persistence operation. A [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") which specifies [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") can work with a wider range of SQL operations within
    the [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition, including operations that feature the
    use of a variety of comparison operators as well as SQL functions such as [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast"). The [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") flag is also of general use when defining any kind
    of [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    that doesn’t represent the full set of related objects, to prevent modifications
    of the collection from resulting in persistence operations.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为`True`时，该关系仅用于加载对象，而不用于任何持久性操作。指定了[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")可以在[`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")条件内与更广泛的SQL操作一起使用，其中包括使用各种比较运算符以及SQL函数，如[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")。[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")标志在定义任何不代表完整相关对象集的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")时也是一般用途，以防止对集合的修改导致持久性操作。
- en: See also
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Notes on using the viewonly relationship parameter](join_conditions.html#relationship-viewonly-notes)
    - more details on best practices when using [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship").'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关于使用视图关系参数的注意事项](join_conditions.html#relationship-viewonly-notes) - 使用[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")时的最佳实践的更多细节。'
- en: '`sync_backref` –'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sync_backref` -'
- en: A boolean that enables the events used to synchronize the in-Python attributes
    when this relationship is target of either [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") or [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship").
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个布尔值，用于在此关系是[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")或[`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")的目标时启用用于同步Python属性的事件。
- en: Defaults to `None`, which indicates that an automatic value should be selected
    based on the value of the [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") flag. When left at its default, changes in state
    will be back-populated only if neither sides of a relationship is viewonly.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为`None`，表示应根据[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")标志的值选择自动值。在其默认状态下，只有在关系的任一方都不是视图时状态变化才会被回填。
- en: New in version 1.3.17.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.3.17中新增。
- en: 'Changed in version 1.4: - A relationship that specifies [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") automatically implies that [`relationship.sync_backref`](#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") is `False`.'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始：- 指定了[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")的关系自动意味着[`relationship.sync_backref`](#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship")为`False`。
- en: See also
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly "sqlalchemy.orm.relationship")'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly "sqlalchemy.orm.relationship")'
- en: '`omit_join` –'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`omit_join` -'
- en: Allows manual control over the “selectin” automatic join optimization. Set to
    `False` to disable the “omit join” feature added in SQLAlchemy 1.3; or leave as
    `None` to leave automatic optimization in place.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许手动控制“selectin”自动连接优化。将其设置为`False`以禁用SQLAlchemy 1.3中添加的“omit join”功能；或者将其保留为`None`以保留自动优化。
- en: Note
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This flag may only be set to `False`. It is not necessary to set it to `True`
    as the “omit_join” optimization is automatically detected; if it is not detected,
    then the optimization is not supported.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标志只能设置为`False`。不需要将其设置为`True`，因为“omit_join”优化会自动检测到；如果未检测到，则不支持优化。
- en: 'Changed in version 1.3.11: setting `omit_join` to True will now emit a warning
    as this was not the intended use of this flag.'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本1.3.11中更改：设置`omit_join`为True现在会发出警告，因为这不是此标志的预期使用方式。
- en: New in version 1.3.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.3开始新添加。
- en: '`init` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__init__()` method as
    generated by the dataclass process.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init` – 专门针对[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，指定映射属性是否应作为dataclass流程生成的`__init__()`方法的一部分。'
- en: '`repr` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__repr__()` method as
    generated by the dataclass process.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repr` – 专门针对[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，指定映射属性是否应作为dataclass流程生成的`__repr__()`方法的一部分。'
- en: '`default_factory` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies a default-value generation function that will take place as part of
    the `__init__()` method as generated by the dataclass process.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_factory` – 专门针对[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，指定一个默认值生成函数，该函数将作为dataclass流程生成的`__init__()`方法的一部分进行处理。'
- en: '`compare` –'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compare` –'
- en: Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be included in comparison operations when generating
    the `__eq__()` and `__ne__()` methods for the mapped class.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 专门针对[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，表示在生成映射类的`__eq__()`和`__ne__()`方法时，此字段是否应包含在比较操作中。
- en: New in version 2.0.0b4.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0.0b4开始新添加。
- en: '`kw_only` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be marked as keyword-only when generating the `__init__()`.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kw_only` – 专门针对[声明性数据类映射](dataclasses.html#orm-declarative-native-dataclasses)，表示在生成`__init__()`时此字段是否应标记为关键字参数。'
- en: '[PRE5]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When using the [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") parameter, provides specific parameters to be used
    when the new [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    is generated.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref "sqlalchemy.orm.relationship")参数时，提供要在生成新的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")时使用的特定参数。
- en: 'E.g.:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE6]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref "sqlalchemy.orm.relationship")
    parameter is generally considered to be legacy; for modern applications, using
    explicit [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    constructs linked together using the [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") parameter should be preferred.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一般认为[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref "sqlalchemy.orm.relationship")参数是遗留的；对于现代应用程序，应优先使用显式的[`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造，使用[`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")参数进行链接。
- en: See also
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using the legacy ‘backref’ relationship parameter](backref.html#relationships-backref)
    - background on backrefs'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统的‘backref’关系参数的背景信息，请参阅[使用传统的‘backref’关系参数](backref.html#relationships-backref)。
- en: '[PRE7]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Construct a dynamically-loading mapper property.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个动态加载的映射器属性。
- en: 'This is essentially the same as using the `lazy=''dynamic''` argument with
    [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship"):'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这与使用`relationship()`的`lazy='dynamic'`参数基本相同：
- en: '[PRE8]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See the section [Dynamic Relationship Loaders](large_collections.html#dynamic-relationship)
    for more details on dynamic loading.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于动态加载的详细信息，请参阅[动态关系加载器](large_collections.html#dynamic-relationship)一节。
- en: '[PRE9]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Annotate a portion of a primaryjoin expression with a ‘foreign’ annotation.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“foreign”注解注释主要联接表达式的一部分。
- en: See the section [Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)
    for a description of use.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[创建自定义外键条件](join_conditions.html#relationship-custom-foreign)一节，了解其用法描述。
- en: See also
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[创建自定义外键条件](join_conditions.html#relationship-custom-foreign)'
- en: '[`remote()`](#sqlalchemy.orm.remote "sqlalchemy.orm.remote")'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[`remote()`](#sqlalchemy.orm.remote "sqlalchemy.orm.remote")'
- en: '[PRE10]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Annotate a portion of a primaryjoin expression with a ‘remote’ annotation.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“remote”注解注释主要联接表达式的一部分。
- en: See the section [Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)
    for a description of use.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 参见章节[创建自定义外键条件](join_conditions.html#relationship-custom-foreign)以了解其用法描述。
- en: See also
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅也
- en: '[Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[创建自定义外键条件](join_conditions.html#relationship-custom-foreign)'
- en: '[`foreign()`](#sqlalchemy.orm.foreign "sqlalchemy.orm.foreign")'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[`foreign()`](#sqlalchemy.orm.foreign "sqlalchemy.orm.foreign")'
