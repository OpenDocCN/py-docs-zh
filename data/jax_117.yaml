- en: jax.sharding module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.sharding 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.sharding.html`](https://jax.readthedocs.io/en/latest/jax.sharding.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.sharding.html`](https://jax.readthedocs.io/en/latest/jax.sharding.html)
- en: '## Classes'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 类'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Describes how a `jax.Array` is laid out across devices.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了`jax.Array`如何跨设备布局。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The set of devices in the `Sharding` that are addressable by the current process.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sharding`中由当前进程可寻址的设备集合。'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A mapping from addressable devices to the slice of array data each contains.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从可寻址设备到它们包含的数组数据切片的映射。
- en: '`addressable_devices_indices_map` contains that part of `device_indices_map`
    that applies to the addressable devices.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`addressable_devices_indices_map` 包含适用于可寻址设备的`device_indices_map`部分。'
- en: 'Parameters:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*)'
- en: 'Return type:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), …] | None]'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(在 Python v3.12 中)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(在 Python v3.12 中)"), …] | None]'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The set of devices that this `Sharding` spans.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Sharding`跨越的设备集合。
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在多控制器 JAX 中，设备集合是全局的，即包括来自其他进程的不可寻址设备。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Returns a mapping from devices to the array slices each contains.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从设备到它们包含的数组切片的映射。
- en: The mapping includes all global devices, i.e., including non-addressable devices
    from other processes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 映射包括所有全局设备，即包括来自其他进程的不可寻址设备。
- en: 'Parameters:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*)'
- en: 'Return type:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), …]]'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(在 Python v3.12 中)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(在 Python v3.12 中)"), …]]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Returns `True` if two shardings are equivalent.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个分片等效，则返回`True`。
- en: Two shardings are equivalent if they place the same logical array shards on
    the same devices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们在相同设备上放置了相同的逻辑数组分片，则两个分片是等效的。
- en: For example, a `NamedSharding` may be equivalent to a `PositionalSharding` if
    both place the same shards of the array on the same devices.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`NamedSharding`和`PositionalSharding`都将数组的相同分片放置在相同的设备上，则它们可能是等效的。
- en: 'Parameters:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**self** (*Sharding*)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**self** (*Sharding*)'
- en: '**other** (*Sharding*)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**other** (*Sharding*)'
- en: '**ndim** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)"))'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ndim** ([*int*](https://docs.python.org/3/library/functions.html#int "(在
    Python v3.12 中)"))'
- en: 'Return type:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(在 Python v3.12
    中)")'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Is this sharding fully addressable?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否是完全可寻址的？
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前进程能够寻址`Sharding`中列出的所有设备，则分片是完全可寻址的。在多进程 JAX 中，`is_fully_addressable` 等效于
    "is_local"。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Is this sharding fully replicated?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全复制？
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个设备都有整个数据的完整副本，则分片是完全复制的。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Returns the memory kind of the sharding.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分片的内存类型。
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Returns the shape of the data on each device.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 返回每个设备上数据的形状。
- en: The shard shape returned by this function is calculated from `global_shape`
    and the properties of the sharding.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回的分片形状是从`global_shape`和分片属性计算得出的。
- en: 'Parameters:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*)'
- en: 'Return type:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.12)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), …]'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(在 Python v3.12
    中)")[[int](https://docs.python.org/3/library/functions.html#int "(在 Python v3.12
    中)"), …]'
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Returns a new Sharding instance with the specified memory kind.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定内存类型的新分片实例。
- en: 'Parameters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.12 中)"))'
- en: 'Return type:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '*Sharding*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*分片*'
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Bases: `Sharding`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`分片`
- en: A `Sharding` that places its data on a single device.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将其数据放置在单个设备上的`分片`。
- en: 'Parameters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**device** – A single `Device`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**device** – 单个`设备`。'
- en: Example
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The set of devices that this `Sharding` spans.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此`分片`跨越的设备集。
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在多控制器 JAX 中，设备集是全局的，即包括来自其他进程的非可寻址设备。
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Returns a mapping from devices to the array slices each contains.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从设备到每个包含的数组片段的映射。
- en: The mapping includes all global devices, i.e., including non-addressable devices
    from other processes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 映射包括所有全局设备，即包括来自其他进程的非可寻址设备。
- en: 'Parameters:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*)'
- en: 'Return type:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), …]]'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[*映射*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(在 Python v3.12 中)")[*设备*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(在 Python v3.12 中)"), …]]'
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Is this sharding fully addressable?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全可寻址？
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前进程可以寻址`分片`中命名的所有设备，则称分片完全可寻址。`is_fully_addressable`在多进程 JAX 中等同于“is_local”。
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Is this sharding fully replicated?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全复制？
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个设备都有整个数据的完整副本，则分片完全复制。
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Returns the memory kind of the sharding.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分片的内存类型。
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Returns a new Sharding instance with the specified memory kind.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定内存类型的新分片实例。
- en: 'Parameters:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.12 中)"))'
- en: 'Return type:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '*SingleDeviceSharding*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*单设备分片*'
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Bases: `Sharding`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`分片`
- en: A `NamedSharding` expresses sharding using named axes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`NamedSharding`使用命名轴来表示分片。
- en: A `NamedSharding` is a pair of a `Mesh` of devices and `PartitionSpec` which
    describes how to shard an array across that mesh.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`NamedSharding`是设备`Mesh`和描述如何跨该网格对数组进行分片的`PartitionSpec`的组合。
- en: A `Mesh` is a multidimensional NumPy array of JAX devices, where each axis of
    the mesh has a name, e.g. `'x'` or `'y'`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Mesh`是 JAX 设备的多维 NumPy 数组，其中网格的每个轴都有一个名称，例如 `'x'` 或 `'y'`。
- en: A `PartitionSpec` is a tuple, whose elements can be a `None`, a mesh axis, or
    a tuple of mesh axes. Each element describes how an input dimension is partitioned
    across zero or more mesh dimensions. For example, `PartitionSpec('x', 'y')` says
    that the first dimension of data is sharded across `x` axis of the mesh, and the
    second dimension is sharded across `y` axis of the mesh.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`PartitionSpec`是一个元组，其元素可以是`None`、一个网格轴或一组网格轴的元组。每个元素描述如何在零个或多个网格维度上对输入维度进行分区。例如，`PartitionSpec('x',
    'y')`表示数据的第一维在网格的 `x` 轴上进行分片，第二维在网格的 `y` 轴上进行分片。
- en: The Distributed arrays and automatic parallelization ([`jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#namedsharding-gives-a-way-to-express-shardings-with-names`](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#namedsharding-gives-a-way-to-express-shardings-with-names))
    tutorial has more details and diagrams that explain how `Mesh` and `PartitionSpec`
    are used.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式数组和自动并行化（[`jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#namedsharding-gives-a-way-to-express-shardings-with-names`](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#namedsharding-gives-a-way-to-express-shardings-with-names)）教程详细讲解了如何使用`Mesh`和`PartitionSpec`，包括更多细节和图示。
- en: 'Parameters:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**mesh** – A `jax.sharding.Mesh` object.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mesh** – 一个`jax.sharding.Mesh`对象。'
- en: '**spec** – A `jax.sharding.PartitionSpec` object.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**spec** – 一个 `jax.sharding.PartitionSpec` 对象。'
- en: Example
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The set of devices in the `Sharding` that are addressable by the current process.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当前进程可以访问的`Sharding`中的设备集。
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The set of devices that this `Sharding` spans.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 该`Sharding`跨越的设备集。
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在多控制器 JAX 中，设备集是全局的，即包括来自其他进程的不可寻址设备。
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Is this sharding fully addressable?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全可寻址？
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一个分片如果当前进程可以访问`Sharding`中列出的所有设备，则被视为完全可寻址。在多进程 JAX 中，“is_fully_addressable”等同于“is_local”。
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Is this sharding fully replicated?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全复制？
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个设备都有整个数据的完整副本，则称分片为完全复制。
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Returns the memory kind of the sharding.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分片的内存类型。
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: (self) -> object
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`(self) -> object`'
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: (self) -> object
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`(self) -> object`'
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Returns a new Sharding instance with the specified memory kind.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定内存类型的新`Sharding`实例。
- en: 'Parameters:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.12 中)"))'
- en: 'Return type:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '*NamedSharding*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*NamedSharding*'
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Bases: `Sharding`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Sharding`
- en: 'Parameters:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**devices** (*Sequence**[**xc.Device**]* *|* *np.ndarray*)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**devices** (*Sequence**[**xc.Device**]* *|* *np.ndarray*)'
- en: '**memory_kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") *|* *None*)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**memory_kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12 中)") *|* *None*)'
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The set of devices that this `Sharding` spans.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 该`Sharding`跨越的设备集。
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在多控制器 JAX 中，设备集是全局的，即包括来自其他进程的不可寻址设备。
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Is this sharding fully addressable?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全可寻址？
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一个分片如果当前进程可以访问`Sharding`中列出的所有设备，则被视为完全可寻址。在多进程 JAX 中，“is_fully_addressable”等同于“is_local”。
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Is this sharding fully replicated?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全复制？
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个设备都有整个数据的完整副本，则称分片为完全复制。
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Returns the memory kind of the sharding.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分片的内存类型。
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Returns a new Sharding instance with the specified memory kind.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定内存类型的新`Sharding`实例。
- en: 'Parameters:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.12 中)"))'
- en: 'Return type:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '*PositionalSharding*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*PositionalSharding*'
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Bases: `Sharding`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Sharding`
- en: Describes a sharding used by `jax.pmap()`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了`jax.pmap()`使用的分片。
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Creates a `PmapSharding` which matches the default placement used by `jax.pmap()`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`PmapSharding`，与`jax.pmap()`使用的默认放置方式匹配。
- en: 'Parameters:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*) – The shape of the input array.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*) – 输入数组的形状。'
- en: '**sharded_dim** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – Dimension the input array is sharded on. Defaults to 0.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sharded_dim** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")") – 输入数组进行分片的维度。默认为 0。'
- en: '**devices** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")**[*Device**]* *|* *None*) – Optional sequence of devices
    to use. If omitted, the implicit'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**devices**（[*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(在Python v3.12中)")**[*Device*]** *|* *None*） – 可选的设备序列。如果省略，隐含的'
- en: '**used** (*device order used by pmap is*) – `jax.local_devices()`.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**used**（*pmap使用的设备顺序是*） – `jax.local_devices()`。'
- en: '**of** (*which is the order*) – `jax.local_devices()`.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**of**（*这是顺序*） – `jax.local_devices()`。'
- en: 'Return type:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '*PmapSharding*'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*PmapSharding*'
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The set of devices that this `Sharding` spans.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Sharding`跨越的设备集合。
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在多控制器JAX中，设备集合是全局的，即包括其他进程的非可寻址设备。
- en: '[PRE38]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: (self) -> ndarray
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: （self）-> ndarray
- en: '[PRE39]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Returns a mapping from devices to the array slices each contains.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 返回设备到每个包含的数组切片的映射。
- en: The mapping includes all global devices, i.e., including non-addressable devices
    from other processes.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 映射包括所有全局设备，即包括其他进程的非可寻址设备。
- en: 'Parameters:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**global_shape**（[*元组*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在Python v3.12中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)")*，…**]*）'
- en: 'Return type:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), …]]'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(在Python v3.12中)")[*Device*，[元组](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在Python v3.12中)")[[切片](https://docs.python.org/3/library/functions.html#slice
    "(在Python v3.12中)")，…]]'
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Returns `True` if two shardings are equivalent.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个分片等效，则返回`True`。
- en: Two shardings are equivalent if they place the same logical array shards on
    the same devices.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们将相同的逻辑数组分片放置在相同的设备上，则两个分片是等效的。
- en: For example, a `NamedSharding` may be equivalent to a `PositionalSharding` if
    both place the same shards of the array on the same devices.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`NamedSharding`和`PositionalSharding`将数组的相同分片放置在相同的设备上，则它们可能是等效的。
- en: 'Parameters:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**self** (*PmapSharding*)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**self**（*PmapSharding*）'
- en: '**other** (*PmapSharding*)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**other**（*PmapSharding*）'
- en: '**ndim** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)"))'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ndim**（[*int*](https://docs.python.org/3/library/functions.html#int "(在Python
    v3.12中)")）'
- en: 'Return type:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[布尔](https://docs.python.org/3/library/functions.html#bool "(在Python v3.12中)")（"in
    Python v3.12"）'
- en: '[PRE41]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Is this sharding fully addressable?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分片是否完全可寻址？
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前进程能够处理`Sharding`中命名的所有设备，则分片是完全可寻址的。在多进程JAX中，`is_fully_addressable`相当于“is_local”。
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Is this sharding fully replicated?
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分片是否完全复制？
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个设备都有完整数据的副本，则分片是完全复制的。
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Returns the memory kind of the sharding.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分片的内存类型。
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Returns the shape of the data on each device.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 返回每个设备上数据的形状。
- en: The shard shape returned by this function is calculated from `global_shape`
    and the properties of the sharding.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回的分片形状是从`global_shape`和分片属性计算而来的。
- en: 'Parameters:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**global_shape**（[*元组*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在Python v3.12中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)")*，…**]*）'
- en: 'Return type:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.12)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), …]'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[元组](https://docs.python.org/3/library/stdtypes.html#tuple "(在Python v3.12中)")[[int](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)")，…]'
- en: '[PRE45]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: (self) -> jax::ShardingSpec
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: （self）-> jax::ShardingSpec
- en: '[PRE46]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Returns a new Sharding instance with the specified memory kind.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定内存类型的新Sharding实例。
- en: 'Parameters:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12中)")）'
- en: '[PRE47]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Bases: `Sharding`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Sharding`
- en: '[PRE48]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The set of devices that this `Sharding` spans.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Sharding`跨越的设备集合。
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在多控制器JAX中，设备集是全局的，即包括来自其他进程的不可寻址设备。
- en: '[PRE49]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Is this sharding fully addressable?
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全可寻址？
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前进程可以访问`Sharding`中命名的所有设备，则分片是完全可寻址的。`is_fully_addressable`相当于多进程JAX中的“is_local”。
- en: '[PRE50]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Is this sharding fully replicated?
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此分片是否完全复制？
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一个分片是完全复制的，如果每个设备都有整个数据的完整副本。
- en: '[PRE51]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Returns the memory kind of the sharding.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分片的内存类型。
- en: '[PRE52]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Returns a new Sharding instance with the specified memory kind.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定内存类型的新Sharding实例。
- en: 'Parameters:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.12 中)")）'
- en: 'Return type:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '*GSPMDSharding*'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '*GSPMDSharding*'
- en: '[PRE53]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Tuple describing how to partition an array across a mesh of devices.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 元组描述如何在设备网格上对数组进行分区。
- en: Each element is either `None`, a string, or a tuple of strings. See the documentation
    of `jax.sharding.NamedSharding` for more details.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 每个元素都可以是`None`、字符串或字符串元组。有关更多详细信息，请参阅`jax.sharding.NamedSharding`的文档。
- en: This class exists so JAX’s pytree utilities can distinguish a partition specifications
    from tuples that should be treated as pytrees.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此类存在，以便JAX的pytree实用程序可以区分分区规范和应视为pytrees的元组。
- en: '[PRE54]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Declare the hardware resources available in the scope of this manager.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 声明在此管理器范围内可用的硬件资源。
- en: In particular, all `axis_names` become valid resource names inside the managed
    block and can be used e.g. in the `in_axis_resources` argument of `jax.experimental.pjit.pjit()`.
    Also see JAX’s multi-process programming model ([`jax.readthedocs.io/en/latest/multi_process.html`](https://jax.readthedocs.io/en/latest/multi_process.html))
    and the Distributed arrays and automatic parallelization tutorial ([`jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html`](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html))
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，所有`axis_names`在管理块内都变成有效的资源名称，并且可以在`jax.experimental.pjit.pjit()`的`in_axis_resources`参数中使用，还请参阅JAX的多进程编程模型（[`jax.readthedocs.io/en/latest/multi_process.html`](https://jax.readthedocs.io/en/latest/multi_process.html)）和分布式数组与自动并行化教程（[`jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html`](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html)）
- en: If you are compiling in multiple threads, make sure that the `with Mesh` context
    manager is inside the function that the threads will execute.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在多线程中编译，请确保`with Mesh`上下文管理器位于线程将执行的函数内部。
- en: 'Parameters:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**devices** ([*ndarray*](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)")) – A NumPy ndarray object containing JAX device objects (as
    obtained e.g. from `jax.devices()`).'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**devices**（[*ndarray*](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v2.0 中)")） - 包含JAX设备对象（例如从`jax.devices()`获得的对象）的NumPy ndarray对象。'
- en: '**axis_names** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*,* *...**]*) – A sequence of resource axis names to be assigned
    to the dimensions of the `devices` argument. Its length should match the rank
    of `devices`.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**axis_names**（[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(在 Python v3.12 中)")*,* *...**]*) - 资源轴名称序列，用于分配给`devices`参数的维度。其长度应与`devices`的秩匹配。'
- en: Example
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE55]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
