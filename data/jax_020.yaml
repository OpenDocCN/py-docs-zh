- en: Device Memory Profiling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备内存分析
- en: 原文：[`jax.readthedocs.io/en/latest/device_memory_profiling.html`](https://jax.readthedocs.io/en/latest/device_memory_profiling.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/device_memory_profiling.html`](https://jax.readthedocs.io/en/latest/device_memory_profiling.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'May 2023 update: we recommend using Tensorboard profiling for device memory
    analysis. After taking a profile, open the `memory_viewer` tab of the Tensorboard
    profiler for more detailed and understandable device memory usage.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2023 年 5 月更新：我们建议使用 Tensorboard 进行设备内存分析。在进行分析后，打开 Tensorboard 分析器的 `memory_viewer`
    标签以获取更详细和易于理解的设备内存使用情况。
- en: 'The JAX Device Memory Profiler allows us to explore how and why JAX programs
    are using GPU or TPU memory. For example, it can be used to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 设备内存分析器允许我们探索 JAX 程序如何以及为何使用 GPU 或 TPU 内存。例如，它可用于：
- en: Figure out which arrays and executables are in GPU memory at a given time, or
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查明在特定时间点哪些数组和可执行文件位于 GPU 内存中，或者
- en: Track down memory leaks.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追踪内存泄漏。
- en: Installation
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: The JAX device memory profiler emits output that can be interpreted using pprof
    ([google/pprof](https://github.com/google/pprof)). Start by installing `pprof`,
    by following its [installation instructions](https://github.com/google/pprof#building-pprof).
    At the time of writing, installing `pprof` requires first installing [Go](https://golang.org/)
    of version 1.16+, [Graphviz](http://www.graphviz.org/), and then running
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 设备内存分析器生成的输出可使用 pprof ([google/pprof](https://github.com/google/pprof))
    解释。首先按照其 [安装说明](https://github.com/google/pprof#building-pprof) 安装 `pprof`。撰写时，安装
    `pprof` 需要先安装版本为 1.16+ 的 [Go](https://golang.org/)，[Graphviz](http://www.graphviz.org/)，然后运行
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: which installs `pprof` as `$GOPATH/bin/pprof`, where `GOPATH` defaults to `~/go`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 `pprof` 作为 `$GOPATH/bin/pprof`，其中 `GOPATH` 默认为 `~/go`。
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The version of `pprof` from [google/pprof](https://github.com/google/pprof)
    is not the same as the older tool of the same name distributed as part of the
    `gperftools` package. The `gperftools` version of `pprof` will not work with JAX.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 [google/pprof](https://github.com/google/pprof) 的 `pprof` 版本与作为 `gperftools`
    软件包一部分分发的同名旧工具不同。`gperftools` 版本的 `pprof` 不适用于 JAX。
- en: Understanding how a JAX program is using GPU or TPU memory
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 JAX 程序如何使用 GPU 或 TPU 内存
- en: A common use of the device memory profiler is to figure out why a JAX program
    is using a large amount of GPU or TPU memory, for example if trying to debug an
    out-of-memory problem.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 设备内存分析器的常见用途是找出为何 JAX 程序使用大量 GPU 或 TPU 内存，例如调试内存不足问题。
- en: 'To capture a device memory profile to disk, use `jax.profiler.save_device_memory_profile()`.
    For example, consider the following Python program:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要将设备内存分析保存到磁盘，使用 `jax.profiler.save_device_memory_profile()`。例如，考虑以下 Python
    程序：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we first run the program above and then execute
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们首先运行上述程序，然后执行
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`pprof` opens a web browser containing the following visualization of the device
    memory profile in callgraph format:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`pprof` 打开一个包含设备内存分析调用图格式的 Web 浏览器：'
- en: '![Device memory profiling example](img/3866a83aa3ccf48282b5c1c8b894115a.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![设备内存分析示例](img/3866a83aa3ccf48282b5c1c8b894115a.png)'
- en: The callgraph is a visualization of the Python stack at the point the allocation
    of each live buffer was made. For example, in this specific case, the visualization
    shows that `func2` and its callees were responsible for allocating 76.30MB, of
    which 38.15MB was allocated inside the call from `func1` to `func2`. For more
    information about how to interpret callgraph visualizations, see the [pprof documentation](https://github.com/google/pprof/blob/master/doc/README.md#interpreting-the-callgraph).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 调用图是在每个活动缓冲区分配的 Python 栈的可视化。例如，在这个特定情况下，可视化显示 `func2` 及其被调用者负责分配了 76.30MB，其中
    38.15MB 是在从 `func1` 到 `func2` 的调用中分配的。有关如何解释调用图可视化的更多信息，请参阅 [pprof 文档](https://github.com/google/pprof/blob/master/doc/README.md#interpreting-the-callgraph)。
- en: Functions compiled with `jax.jit()` are opaque to the device memory profiler.
    That is, any memory allocated inside a `jit`-compiled function will be attributed
    to the function as a whole.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `jax.jit()` 编译的函数对设备内存分析器不透明。也就是说，任何在 `jit` 编译函数内部分配的内存都将归因于整个函数。
- en: In the example, the call to `block_until_ready()` is to ensure that `func2`
    completes before the device memory profile is collected. See Asynchronous dispatch
    for more details.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，调用 `block_until_ready()` 是为了确保在收集设备内存分析之前 `func2` 完成。有关更多详细信息，请参阅异步调度。
- en: Debugging memory leaks
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试内存泄漏
- en: We can also use the JAX device memory profiler to track down memory leaks by
    using `pprof` to visualize the change in memory usage between two device memory
    profiles taken at different times. For example, consider the following program
    which accumulates JAX arrays into a constantly-growing Python list.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 JAX 设备内存分析器，通过使用 `pprof` 来可视化在不同时间点获取的两个设备内存配置文件中的内存使用情况变化，以追踪内存泄漏。例如，考虑以下程序，该程序将
    JAX 数组累积到一个不断增长的 Python 列表中。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we simply visualize the device memory profile at the end of execution (`memory9.prof`),
    it may not be obvious that each iteration of the loop in `anotherfunc` accumulates
    more device memory allocations:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仅在执行结束时可视化设备内存配置文件（`memory9.prof`），则可能不明显，即 `anotherfunc` 中的每次循环迭代都会累积更多的设备内存分配：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Device memory profile at end of execution](img/ff218217e3f7353d34fdece0bedc0800.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![执行结束时的设备内存配置文件](img/ff218217e3f7353d34fdece0bedc0800.png)'
- en: The large but fixed allocation inside `afunction` dominates the profile but
    does not grow over time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `afunction` 内部的大型但固定分配主导配置文件，但不会随时间增长。
- en: 'By using `pprof`’s [`--diff_base` feature](https://github.com/google/pprof/blob/master/doc/README.md#comparing-profiles)
    to visualize the change in memory usage across loop iterations, we can identify
    why the memory usage of the program increases over time:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `pprof` 的 [`--diff_base` 功能](https://github.com/google/pprof/blob/master/doc/README.md#comparing-profiles)
    来可视化循环迭代中内存使用情况的变化，我们可以找出程序内存使用量随时间增加的原因：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Device memory profile at end of execution](img/9d4eb42f4ab4cb41e8c6abfa6858c107.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![执行结束时的设备内存配置文件](img/9d4eb42f4ab4cb41e8c6abfa6858c107.png)'
- en: The visualization shows that the memory growth can be attributed to the call
    to `normal` inside `anotherfunc`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化显示，内存增长可以归因于 `anotherfunc` 中对 `normal` 的调用。
