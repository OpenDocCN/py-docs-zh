- en: Microsoft SQL Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: 原文：[https://docs.sqlalchemy.org/en/20/dialects/mssql.html](https://docs.sqlalchemy.org/en/20/dialects/mssql.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/dialects/mssql.html](https://docs.sqlalchemy.org/en/20/dialects/mssql.html)
- en: Support for the Microsoft SQL Server database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Microsoft SQL Server 数据库的支持。
- en: The following table summarizes current support levels for database release versions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了当前数据库发布版本的支持水平。
- en: '**Supported Microsoft SQL Server versions**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持的 Microsoft SQL Server 版本**'
- en: '| Support type | Versions |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 支持类型 | 版本 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Fully tested in CI](index.html#term-Fully-tested-in-CI) | 2017 |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [CI 全面测试](index.html#term-Fully-tested-in-CI) | 2017 |'
- en: '| [Normal support](index.html#term-Normal-support) | 2012+ |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [正常支持](index.html#term-Normal-support) | 2012+ |'
- en: '| [Best effort](index.html#term-Best-effort) | 2005+ |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [尽力而为](index.html#term-Best-effort) | 2005+ |'
- en: DBAPI Support
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DBAPI 支持
- en: The following dialect/DBAPI options are available. Please refer to individual
    DBAPI sections for connect information.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的方言/DBAPI选项如下。请参考各个 DBAPI 部分获取连接信息。
- en: '[PyODBC](#module-sqlalchemy.dialects.mssql.pyodbc)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyODBC](#module-sqlalchemy.dialects.mssql.pyodbc)'
- en: '[pymssql](#module-sqlalchemy.dialects.mssql.pymssql)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pymssql](#module-sqlalchemy.dialects.mssql.pymssql)'
- en: '[aioodbc](#module-sqlalchemy.dialects.mssql.aioodbc)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[aioodbc](#module-sqlalchemy.dialects.mssql.aioodbc)'
- en: '## External Dialects'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '## 外部方言'
- en: 'In addition to the above DBAPI layers with native SQLAlchemy support, there
    are third-party dialects for other DBAPI layers that are compatible with SQL Server.
    See the “External Dialects” list on the [Dialects](index.html) page.  ## Auto
    Increment Behavior / IDENTITY Columns'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '除了上述具有原生 SQLAlchemy 支持的 DBAPI 层之外，还有适用于 SQL Server 的与第三方方言兼容的其他 DBAPI 层。请参阅[Dialects](index.html)页面上的“外部方言”列表。  ##
    自动递增行为 / IDENTITY 列'
- en: 'SQL Server provides so-called “auto incrementing” behavior using the `IDENTITY`
    construct, which can be placed on any single integer column in a table. SQLAlchemy
    considers `IDENTITY` within its default “autoincrement” behavior for an integer
    primary key column, described at [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column"). This means that by default, the first integer primary
    key column in a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    will be considered to be the identity column - unless it is associated with a
    [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    - and will generate DDL as such:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 使用 `IDENTITY` 结构提供所谓的“自动递增”行为，可以放置在表中的任何单个整数列上。SQLAlchemy 将 `IDENTITY`
    视为整数主键列的默认“autoincrement”行为的一部分，该行为在 [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 中描述。这意味着默认情况下，[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中的第一个整数主键列将被视为标识列 - 除非它与 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 关联 - 并将生成 DDL 如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The above example will generate DDL as:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例将生成 DDL 如下：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For the case where this default generation of `IDENTITY` is not desired, specify
    `False` for the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag, on the first integer primary key column:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不希望使用默认生成的 `IDENTITY` 的情况，请在第一个整数主键列上将 [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 标志设置为 `False`：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To add the `IDENTITY` keyword to a non-primary key column, specify `True` for
    the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag on the desired [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, and ensure that [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") is set to `False` on any integer primary key column:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `IDENTITY` 关键字添加到非主键列，请在所需的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象上将 [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 标志设置为 `True`，并确保在任何整数主键列上将 [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 设置为 `False`：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Changed in version 1.4: Added [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct in a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to specify the start and increment parameters of an
    IDENTITY. These replace the use of the [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object in order to specify these values.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版更改：在 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    中添加了 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    结构，以指定 IDENTITY 的起始和增量参数。这些取代了使用 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 对象来指定这些值。
- en: 'Deprecated since version 1.4: The `mssql_identity_start` and `mssql_identity_increment`
    parameters to [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    are deprecated and should we replaced by an [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object. Specifying both ways of configuring an IDENTITY
    will result in a compile error. These options are also no longer returned as part
    of the `dialect_options` key in [`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"). Use the information in
    the `identity` key instead.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版弃用：[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `mssql_identity_start` 和 `mssql_identity_increment` 参数已被弃用，应该用 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 对象替换。同时指定两种配置 IDENTITY 的方式将导致编译错误。这些选项也不再作为 [`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") 中 `dialect_options` 键的一部分返回。请使用
    `identity` 键中的信息。
- en: 'Deprecated since version 1.3: The use of [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to specify IDENTITY characteristics is deprecated
    and will be removed in a future release. Please use the [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object parameters [`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") and [`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity").'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.3 版弃用：使用 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    指定 IDENTITY 特性已被弃用，并将在未来版本中删除。请使用 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 对象参数 [`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") 和 [`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity")。
- en: 'Changed in version 1.4: Removed the ability to use a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object to modify IDENTITY characteristics. [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") objects now only manipulate true T-SQL SEQUENCE
    types.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版更改：移除了使用 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 对象修改 IDENTITY 特性的能力。[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 对象现在仅操作真正的 T-SQL SEQUENCE 类型。
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There can only be one IDENTITY column on the table. When using `autoincrement=True`
    to enable the IDENTITY keyword, SQLAlchemy does not guard against multiple columns
    specifying the option simultaneously. The SQL Server database will instead reject
    the `CREATE TABLE` statement.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 表中只能有一个 IDENTITY 列。当使用 `autoincrement=True` 启用 IDENTITY 关键字时，SQLAlchemy 不会防止多个列同时指定该选项。SQL
    Server 数据库将拒绝 `CREATE TABLE` 语句。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An INSERT statement which attempts to provide a value for a column that is marked
    with IDENTITY will be rejected by SQL Server. In order for the value to be accepted,
    a session-level option “SET IDENTITY_INSERT” must be enabled. The SQLAlchemy SQL
    Server dialect will perform this operation automatically when using a core [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct; if the execution specifies a value
    for the IDENTITY column, the “IDENTITY_INSERT” option will be enabled for the
    span of that statement’s invocation.However, this scenario is not high performing
    and should not be relied upon for normal use. If a table doesn’t actually require
    IDENTITY behavior in its integer primary key column, the keyword should be disabled
    when creating the table by ensuring that `autoincrement=False` is set.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试为标记为 IDENTITY 的列提供值的 INSERT 语句将被 SQL Server 拒绝。为了接受该值，必须启用会话级选项“SET IDENTITY_INSERT”。当使用核心
    [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造时，SQLAlchemy SQL Server 方言将在执行指定 IDENTITY 列的值时自动执行此操作；如果执行为该语句的调用启用了“IDENTITY_INSERT”选项。然而，这种情况性能不高，不应依赖于正常使用。如果表实际上不需要其整数主键列的
    IDENTITY 行为，则在创建表时应禁用该关键字，确保设置 `autoincrement=False`。
- en: Controlling “Start” and “Increment”
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制“Start”和“Increment”
- en: 'Specific control over the “start” and “increment” values for the `IDENTITY`
    generator are provided using the [`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") and [`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity") parameters passed to the [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递给 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    对象的 [`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") 和 [`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity") 参数，可以对 `IDENTITY` 生成器的“start”和“increment”值进行具体控制：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The CREATE TABLE for the above [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object would be:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的 CREATE TABLE 将是：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    object supports many other parameter in addition to `start` and `increment`. These
    are not supported by SQL Server and will be ignored when generating the CREATE
    TABLE ddl.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    对象支持许多其他参数，除了 `start` 和 `increment` 之外。这些参数不受 SQL Server 支持，在生成 CREATE TABLE ddl
    时将被忽略。'
- en: 'Changed in version 1.3.19: The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object is now used to affect the `IDENTITY` generator
    for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    under SQL Server. Previously, the [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object was used. As SQL Server now supports real
    sequences as a separate construct, [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") will be functional in the normal way starting from
    SQLAlchemy version 1.4.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.3.19 更改：[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 对象现在用于影响 SQL Server 下的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的 `IDENTITY` 生成器。以前使用 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 对象。由于 SQL Server 现在支持真正的序列作为一个单独的构造，[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 将从 SQLAlchemy 版本 1.4 开始以正常方式运行。
- en: Using IDENTITY with Non-Integer numeric types
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用非整数数值类型的 IDENTITY
- en: 'SQL Server also allows `IDENTITY` to be used with `NUMERIC` columns. To implement
    this pattern smoothly in SQLAlchemy, the primary datatype of the column should
    remain as `Integer`, however the underlying implementation type deployed to the
    SQL Server database can be specified as `Numeric` using [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant"):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 也允许将 `IDENTITY` 用于 `NUMERIC` 列。为了在 SQLAlchemy 中顺利实现这种模式，列的主要数据类型应保持为
    `Integer`，但是可以使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 指定在 SQL Server 数据库中部署的底层实现类型为 `Numeric`：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above example, `Integer().with_variant()` provides clear usage information
    that accurately describes the intent of the code. The general restriction that
    `autoincrement` only applies to `Integer` is established at the metadata level
    and not at the per-dialect level.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，`Integer().with_variant()`提供了清晰的使用信息，准确描述了代码的意图。`autoincrement`仅适用于`Integer`的一般限制是在元数据级别而不是每个方言级别建立的。
- en: 'When using the above pattern, the primary key identifier that comes back from
    the insertion of a row, which is also the value that would be assigned to an ORM
    object such as `TestTable` above, will be an instance of `Decimal()` and not `int`
    when using SQL Server. The numeric return type of the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type can be changed to return floats by passing False
    to [`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric"). To normalize the return type of the above `Numeric(10,
    0)` to return Python ints (which also support “long” integer values in Python
    3), use [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述模式时，从行插入返回的主键标识符（也是将分配给诸如上面的`TestTable`之类的 ORM 对象的值）在使用 SQL Server 时将是`Decimal()`的实例，而不是`int`。通过向[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")类型的[`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric")传递 False 来更改上述`Numeric(10, 0)`的返回类型以返回浮点数。为了将上述`Numeric(10,
    0)`的返回类型规范化为返回 Python int（Python 3 中还支持“长”整数值），请使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '### INSERT behavior'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '### INSERT 行为'
- en: Handling of the `IDENTITY` column at INSERT time involves two key techniques.
    The most common is being able to fetch the “last inserted value” for a given `IDENTITY`
    column, a process which SQLAlchemy performs implicitly in many cases, most importantly
    within the ORM.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 INSERT 时处理 `IDENTITY` 列涉及两个关键技术。最常见的是能够获取给定 `IDENTITY` 列的“最后插入值”，这是 SQLAlchemy
    在许多情况下隐式执行的过程，最重要的是在 ORM 中。
- en: 'The process for fetching this value has several variants:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 获取此值的过程有几种变体：
- en: 'In the vast majority of cases, RETURNING is used in conjunction with INSERT
    statements on SQL Server in order to get newly generated primary key values:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在绝大多数情况下，RETURNING 与 SQL Server 上的 INSERT 语句一起使用，以获取新生成的主键值：
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As of SQLAlchemy 2.0, the [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature is also used by default to optimize many-row INSERT statements; for SQL
    Server the feature takes place for both RETURNING and-non RETURNING INSERT statements.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 SQLAlchemy 2.0 开始，默认还使用 [“插入多个值”行为适用于 INSERT 语句](../core/connections.html#engine-insertmanyvalues)
    功能来优化多行 INSERT 语句；对于 SQL Server，该功能适用于 RETURNING 和非 RETURNING INSERT 语句。
- en: 'Changed in version 2.0.10: The [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature for SQL Server was temporarily disabled for SQLAlchemy version 2.0.9 due
    to issues with row ordering. As of 2.0.10 the feature is re-enabled, with special
    case handling for the unit of work’s requirement for RETURNING to be ordered.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 2.0.10 中更改：由于与行排序问题有关，SQLAlchemy 版本 2.0.9 的 SQL Server 的 [“插入多个值”行为适用于 INSERT
    语句](../core/connections.html#engine-insertmanyvalues) 功能暂时被禁用。从 2.0.10 开始，该功能已重新启用，并针对工作单元对
    RETURNING 的要求进行了特殊处理，以进行排序。
- en: 'When RETURNING is not available or has been disabled via `implicit_returning=False`,
    either the `scope_identity()` function or the `@@identity` variable is used; behavior
    varies by backend:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 RETURNING 不可用或已通过`implicit_returning=False`禁用时，将使用`scope_identity()`函数或`@@identity`变量；后端的行为各不相同：
- en: 'when using PyODBC, the phrase `; select scope_identity()` will be appended
    to the end of the INSERT statement; a second result set will be fetched in order
    to receive the value. Given a table as:'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PyODBC 时，短语`; select scope_identity()`将附加到 INSERT 语句的末尾；将获取第二个结果集以接收该值。给定表格为：
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'an INSERT will look like:'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: INSERT 将如下所示：
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Other dialects such as pymssql will call upon `SELECT scope_identity() AS lastrowid`
    subsequent to an INSERT statement. If the flag `use_scope_identity=False` is passed
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"),
    the statement `SELECT @@identity AS lastrowid` is used instead.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他方言如 pymssql 在 INSERT 语句之后调用 `SELECT scope_identity() AS lastrowid`。如果将标志 `use_scope_identity=False`
    传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")，则会使用语句
    `SELECT @@identity AS lastrowid`。
- en: 'A table that contains an `IDENTITY` column will prohibit an INSERT statement
    that refers to the identity column explicitly. The SQLAlchemy dialect will detect
    when an INSERT construct, created using a core [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct (not a plain string SQL), refers
    to the identity column, and in this case will emit `SET IDENTITY_INSERT ON` prior
    to the insert statement proceeding, and `SET IDENTITY_INSERT OFF` subsequent to
    the execution. Given this example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 `IDENTITY` 列的表将禁止明确引用标识列的 INSERT 语句。当使用核心 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 构造（而不是纯字符串 SQL）创建的 INSERT 构造引用标识列时，SQLAlchemy
    方言将检测到，并且在此情况下将在执行 INSERT 语句之前发出 `SET IDENTITY_INSERT ON`，并在执行后发出 `SET IDENTITY_INSERT
    OFF`。例如：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The above column will be created with IDENTITY, however the INSERT statement
    we emit is specifying explicit values. In the echo output we can see how SQLAlchemy
    handles this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列将使用 IDENTITY 创建，但我们发出的 INSERT 语句指定了显式值。在回声输出中，我们可以看到 SQLAlchemy 如何处理这种情况：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is an auxiliary use case suitable for testing and bulk insert scenarios.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是适用于测试和大量插入场景的辅助用例。
- en: SEQUENCE support
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SEQUENCE 支持
- en: 'The [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object creates “real” sequences, i.e., `CREATE SEQUENCE`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象创建“真正”的序列，即 `CREATE SEQUENCE`：'
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For integer primary key generation, SQL Server’s `IDENTITY` construct should
    generally be preferred vs. sequence.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于整数主键生成，通常应优先选择 SQL Server 的 `IDENTITY` 构造而不是序列。
- en: Tip
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The default start value for T-SQL is `-2**63` instead of 1 as in most other
    SQL databases. Users should explicitly set the [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") to 1 if that’s the expected default:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: T-SQL 的默认起始值为 `-2**63`，而不是大多数其他 SQL 数据库中的 1。如果这是预期的默认值，则用户应明确设置 [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") 为 1：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'New in version 1.4: added SQL Server support for [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 新版 1.4 中新增 SQL Server 对 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 的支持
- en: 'Changed in version 2.0: The SQL Server dialect will no longer implicitly render
    “START WITH 1” for `CREATE SEQUENCE`, which was the behavior first implemented
    in version 1.4.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 起更改：SQL Server 方言不再为 `CREATE SEQUENCE` 隐式呈现“START WITH 1”，这是在版本 1.4
    中首次实现的行为。
- en: MAX on VARCHAR / NVARCHAR
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VARCHAR / NVARCHAR 上的 MAX
- en: SQL Server supports the special string “MAX” within the [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR") and [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR") datatypes, to indicate “maximum length possible”.
    The dialect currently handles this as a length of “None” in the base type, rather
    than supplying a dialect-specific version of these types, so that a base type
    specified such as `VARCHAR(None)` can assume “unlengthed” behavior on more than
    one backend without using dialect-specific types.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 支持特殊字符串“MAX”在 [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR") 和 [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR") 数据类型中，表示“最大可能长度”。当前的方言将此处理为基本类型中的长度“None”，而不是提供这些类型的方言特定版本，因此指定基本类型如
    `VARCHAR(None)` 可以在不同的后端上假定“无长度”的行为而不使用方言特定的类型。
- en: 'To build a SQL Server VARCHAR or NVARCHAR with MAX length, use None:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建具有 MAX 长度的 SQL Server VARCHAR 或 NVARCHAR，请使用 None：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Collation Support
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 校对支持
- en: 'Character collations are supported by the base string types, specified by the
    string argument “collation”:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 字符排序由字符串参数“collation”指定的基本字符串类型支持：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When such a column is associated with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), the CREATE TABLE statement for this column will yield:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当这样的列与 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    关联时，此列的 CREATE TABLE 语句将产生：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: LIMIT/OFFSET Support
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LIMIT/OFFSET 支持
- en: MSSQL has added support for LIMIT / OFFSET as of SQL Server 2012, via the “OFFSET
    n ROWS” and “FETCH NEXT n ROWS” clauses. SQLAlchemy supports these syntaxes automatically
    if SQL Server 2012 or greater is detected.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 自 SQL Server 2012 起已添加了对 LIMIT / OFFSET 的支持，通过“OFFSET n ROWS”和“FETCH NEXT
    n ROWS”子句。如果检测到 SQL Server 2012 或更高版本，SQLAlchemy 将自动支持这些语法。
- en: 'Changed in version 1.4: support added for SQL Server “OFFSET n ROWS” and “FETCH
    NEXT n ROWS” syntax.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本更改：增加了对 SQL Server “OFFSET n ROWS” 和 “FETCH NEXT n ROWS” 语法的支持。
- en: 'For statements that specify only LIMIT and no OFFSET, all versions of SQL Server
    support the TOP keyword. This syntax is used for all SQL Server versions when
    no OFFSET clause is present. A statement such as:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅指定 LIMIT 而不带 OFFSET 的语句，所有版本的 SQL Server 都支持 TOP 关键字。当没有 OFFSET 子句时，此语法用于所有
    SQL Server 版本。例如：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'will render similarly to:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将类似于渲染：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For versions of SQL Server prior to SQL Server 2012, a statement that uses
    LIMIT and OFFSET, or just OFFSET alone, will be rendered using the `ROW_NUMBER()`
    window function. A statement such as:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于早于 SQL Server 2012 的 SQL Server 版本，使用 LIMIT 和 OFFSET 或仅 OFFSET 的语句将使用 `ROW_NUMBER()`
    窗口函数进行渲染。例如：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'will render similarly to:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将类似于渲染：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note that when using LIMIT and/or OFFSET, whether using the older or newer SQL
    Server syntaxes, the statement must have an ORDER BY as well, else a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") is raised.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当使用 LIMIT 和/或 OFFSET 时，无论是使用较旧还是较新的 SQL Server 语法，语句都必须有 ORDER BY，否则会引发 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '## DDL Comment Support'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '## DDL 注释支持'
- en: Comment support, which includes DDL rendering for attributes such as [`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") and [`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column"), as well as the ability to reflect these comments,
    is supported assuming a supported version of SQL Server is in use. If a non-supported
    version such as Azure Synapse is detected at first-connect time (based on the
    presence of the `fn_listextendedproperty` SQL function), comment support including
    rendering and table-comment reflection is disabled, as both features rely upon
    SQL Server stored procedures and functions that are not available on all backend
    types.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注释支持包括对 [`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") 和 [`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") 等属性的 DDL 渲染，以及反映这些注释的能力，假设使用的 SQL Server 版本支持。如果在首次连接时检测到不支持的版本，如
    Azure Synapse（基于 `fn_listextendedproperty` SQL 函数的存在），则禁用注释支持，包括渲染和表注释反射，因为这两个功能都依赖于并非所有后端类型都可用的
    SQL Server 存储过程和函数。
- en: 'To force comment support to be on or off, bypassing autodetection, set the
    parameter `supports_comments` within [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制启用或禁用注释支持，绕过自动检测，在 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 中设置参数 `supports_comments`：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'New in version 2.0: Added support for table and column comments for the SQL
    Server dialect, including DDL generation and reflection.  ## Transaction Isolation
    Level'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '版本 2.0 新增了对 SQL Server 方言的表和列注释的支持，包括 DDL 生成和反射。 ## 事务隔离级别'
- en: All SQL Server dialects support setting of transaction isolation level both
    via a dialect-specific parameter [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") accepted by [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), as well as the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") argument as passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). This feature works by issuing
    the command `SET TRANSACTION ISOLATION LEVEL <level>` for each new connection.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SQL Server 方言都支持通过方言特定参数[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")（由[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")接受）以及作为传递给[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")的参数的[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")来设置事务隔离级别。此功能通过为每个新连接发出`SET TRANSACTION
    ISOLATION LEVEL <level>`命令来工作。
- en: 'To set isolation level using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    设置隔离级别：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To set using per-connection execution options:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用每个连接的执行选项来设置：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Valid values for `isolation_level` include:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`isolation_level` 的有效值包括：'
- en: '`AUTOCOMMIT` - pyodbc / pymssql-specific'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT` - 仅适用于 pyodbc / pymssql'
- en: '`READ COMMITTED`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`SNAPSHOT` - specific to SQL Server'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SNAPSHOT` - 适用于 SQL Server 特定的隔离级别'
- en: There are also more options for isolation level configurations, such as “sub-engine”
    objects linked to a main [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which each apply different isolation level settings.
    See the discussion at [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)
    for background.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离级别配置还有更多选项，比如与主[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")相关联的“子引擎”对象，每个对象都应用不同的隔离级别设置。有关详情，请参阅[设置事务隔离级别，包括 DBAPI
    自动提交](../core/connections.html#dbapi-autocommit)中的讨论。
- en: See also
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)  ##
    Temporary Table / Resource Reset for Connection Pooling'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括 DBAPI 自动提交](../core/connections.html#dbapi-autocommit)  ## 临时表
    / 资源重置以用于连接池'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    connection pool implementation used by the SQLAlchemy [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object includes [reset on return](../core/pooling.html#pool-reset-on-return)
    behavior that will invoke the DBAPI `.rollback()` method when connections are
    returned to the pool. While this rollback will clear out the immediate state used
    by the previous transaction, it does not cover a wider range of session-level
    state, including temporary tables as well as other server state such as prepared
    statement handles and statement caches. An undocumented SQL Server procedure known
    as `sp_reset_connection` is known to be a workaround for this issue which will
    reset most of the session state that builds up on a connection, including temporary
    tables.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象使用的 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    连接池实现包括在连接返回池时调用 DBAPI 的`.rollback()`方法的 [重置行为](../core/pooling.html#pool-reset-on-return)，虽然此回滚会清除上一个事务使用的即时状态，但它不包括更广泛的会话级状态，包括临时表以及其他服务器状态，如预编译的语句句柄和语句缓存。一个名为
    `sp_reset_connection` 的未记录的 SQL Server 过程已知可解决此问题，它将重置在连接上建立的大部分会话状态，包括临时表。
- en: 'To install `sp_reset_connection` as the means of performing reset-on-return,
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook may be used, as demonstrated
    in the example below. The [`create_engine.pool_reset_on_return`](../core/engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `sp_reset_connection` 安装为执行返回时的重置手段，可以使用 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件挂钩，如下面的示例所示。[`create_engine.pool_reset_on_return`](../core/engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") 参数设置为 `None`，以便自定义方案可以完全替换默认行为。自定义挂钩实现在任何情况下都调用 `.rollback()`，因为通常重要的是
    DBAPI 自身对提交/回滚的跟踪将与事务的状态保持一致：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.0b3 中更改：为 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件添加了额外的状态参数，并确保该事件对所有“重置”事件都会被调用，以便作为自定义“重置”处理程序的适当位置。以前使用
    [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") 处理程序的方案仍然可用。
- en: See also
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reset On Return](../core/pooling.html#pool-reset-on-return) - in the [Connection
    Pooling](../core/pooling.html) documentation'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回时重置](../core/pooling.html#pool-reset-on-return) - 在 [连接池](../core/pooling.html)
    文档中'
- en: Nullability
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可空性
- en: 'MSSQL has support for three levels of column nullability. The default nullability
    allows nulls and is explicit in the CREATE TABLE construct:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 支持三种列可空性级别。默认的可空性允许空值，并在 CREATE TABLE 构造中明确指定：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If `nullable=None` is specified then no specification is made. In other words
    the database’s configured default is used. This will render:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了 `nullable=None`，则不进行任何规定。换句话说，将使用数据库配置的默认值。这将导致：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If `nullable` is `True` or `False` then the column will be `NULL` or `NOT NULL`
    respectively.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `nullable` 是 `True` 或 `False`，则列将分别为 `NULL` 或 `NOT NULL`。
- en: Date / Time Handling
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期/时间处理
- en: DATE and TIME are supported. Bind parameters are converted to datetime.datetime()
    objects as required by most MSSQL drivers, and results are processed from strings
    if needed. The DATE and TIME types are not available for MSSQL 2005 and previous
    - if a server version below 2008 is detected, DDL for these types will be issued
    as DATETIME.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: DATE 和 TIME 是受支持的。必要时，绑定参数将转换为 datetime.datetime() 对象，大多数 MSSQL 驱动程序都需要这样做，并且如果需要的话，结果将从字符串中进行处理。
    DATE 和 TIME 类型对于 MSSQL 2005 及以前的版本不可用 - 如果检测到低于 2008 的服务器版本，则将为这些类型发出 DATETIME
    的 DDL。
- en: '## Large Text/Binary Type Deprecation'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '## 大型文本/二进制类型弃用'
- en: Per [SQL Server 2012/2014 Documentation](https://technet.microsoft.com/en-us/library/ms187993.aspx),
    the `NTEXT`, `TEXT` and `IMAGE` datatypes are to be removed from SQL Server in
    a future release. SQLAlchemy normally relates these types to the [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), [`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 [SQL Server 2012/2014 文档](https://technet.microsoft.com/en-us/library/ms187993.aspx)，`NTEXT`、`TEXT`
    和 `IMAGE` 数据类型将在将来的版本中从 SQL Server 中删除。SQLAlchemy 通常将这些类型关联到 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")、[`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 和 [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") 数据类型。
- en: 'In order to accommodate this change, a new flag `deprecate_large_types` is
    added to the dialect, which will be automatically set based on detection of the
    server version in use, if not otherwise set by the user. The behavior of this
    flag is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应这种变化，为该方言添加了一个新标志 `deprecate_large_types`，如果用户没有另外设置，则将基于使用的服务器版本自动设置。此标志的行为如下：
- en: When this flag is `True`, the [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), [`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes, when used to render DDL, will render
    the types `NVARCHAR(max)`, `VARCHAR(max)`, and `VARBINARY(max)`, respectively.
    This is a new behavior as of the addition of this flag.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当此标志为`True`时，当用于渲染DDL时，[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")、[`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")和[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")数据类型将分别呈现类型`NVARCHAR(max)`、`VARCHAR(max)`和`VARBINARY(max)`。这是从添加此标志开始的新行为。
- en: When this flag is `False`, the [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), [`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes, when used to render DDL, will render
    the types `NTEXT`, `TEXT`, and `IMAGE`, respectively. This is the long-standing
    behavior of these types.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当此标志为`False`时，当用于渲染DDL时，[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")、[`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")和[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")数据类型将分别呈现类型`NTEXT`、`TEXT`和`IMAGE`。这是这些类型的长期行为。
- en: The flag begins with the value `None`, before a database connection is established.
    If the dialect is used to render DDL without the flag being set, it is interpreted
    the same as `False`.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在建立数据库连接之前，标志始于值`None`。如果使用方言渲染DDL而没有设置标志，则其被解释为`False`。
- en: On first connection, the dialect detects if SQL Server version 2012 or greater
    is in use; if the flag is still at `None`, it sets it to `True` or `False` based
    on whether 2012 or greater is detected.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在首次连接时，方言会检测是否使用了SQL Server版本2012或更高版本；如果标志仍然为`None`，则基于是否检测到2012或更高版本，将其设置为`True`或`False`。
- en: 'The flag can be set to either `True` or `False` when the dialect is created,
    typically via [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当方言创建时，可以将标志设置为`True`或`False`，通常通过[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")来实现：
- en: '[PRE28]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Complete control over whether the “old” or “new” types are rendered is available
    in all SQLAlchemy versions by using the UPPERCASE type objects instead: [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR"), [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"), [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY"), [`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"), [`NTEXT`](#sqlalchemy.dialects.mssql.NTEXT "sqlalchemy.dialects.mssql.NTEXT"),
    [`IMAGE`](#sqlalchemy.dialects.mssql.IMAGE "sqlalchemy.dialects.mssql.IMAGE")
    will always remain fixed and always output exactly that type.  ## Multipart Schema
    Names'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在所有SQLAlchemy版本中，始终可以使用大写类型对象完全控制“旧”或“新”类型的渲染：[`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR")、[`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR")、[`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY")、[`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT")、[`NTEXT`](#sqlalchemy.dialects.mssql.NTEXT "sqlalchemy.dialects.mssql.NTEXT")、[`IMAGE`](#sqlalchemy.dialects.mssql.IMAGE
    "sqlalchemy.dialects.mssql.IMAGE")将始终保持不变，并且始终输出确切的类型。  ## 多部分模式名称'
- en: 'SQL Server schemas sometimes require multiple parts to their “schema” qualifier,
    that is, including the database name and owner name as separate tokens, such as
    `mydatabase.dbo.some_table`. These multipart names can be set at once using the
    [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument of [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server模式有时需要多部分来表示其“模式”限定符，即将数据库名称和所有者名称作为单独的标记，例如`mydatabase.dbo.some_table`。可以使用[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数一次设置这些多部分名称。
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When performing operations such as table or component reflection, a schema
    argument that contains a dot will be split into separate “database” and “owner”
    components in order to correctly query the SQL Server information schema tables,
    as these two values are stored separately. Additionally, when rendering the schema
    name for DDL or SQL, the two components will be quoted separately for case sensitive
    names and other special characters. Given an argument as below:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行诸如表或组件反射之类的操作时，包含点的模式参数将被拆分为单独的“数据库”和“所有者”组件，以便正确查询SQL Server信息模式表，因为这两个值是分开存储的。此外，在为DDL或SQL呈现模式名称时，这两个组件将被分别引用以用于区分大小写的名称和其他特殊字符。给定如下参数：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The above schema would be rendered as `[MyDataBase].dbo`, and also in reflection,
    would be reflected using “dbo” as the owner and “MyDataBase” as the database name.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模式将呈现为`[MyDataBase].dbo`，并且在反射中，将使用“dbo”作为所有者和“MyDataBase”作为数据库名称进行反射。
- en: 'To control how the schema name is broken into database / owner, specify brackets
    (which in SQL Server are quoting characters) in the name. Below, the “owner” will
    be considered as `MyDataBase.dbo` and the “database” will be None:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制模式名称如何被拆分为数据库/所有者，请在名称中指定括号（在SQL Server中是引用字符）。下面，“所有者”将被视为`MyDataBase.dbo`，而“数据库”将为None：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To individually specify both database and owner name with special characters
    or embedded dots, use two sets of brackets:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要单独指定带有特殊字符或嵌入点的数据库和所有者名称，请使用两组括号：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Changed in version 1.2: the SQL Server dialect now treats brackets as identifier
    delimiters splitting the schema into separate database and owner tokens, to allow
    dots within either name itself.  ## Legacy Schema Mode'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '自版本1.2更改：SQL Server方言现在将括号视为标识符分隔符，将模式拆分为单独的数据库和所有者标记，以允许名称本身中的点。  ## 传统模式模式'
- en: 'Very old versions of the MSSQL dialect introduced the behavior such that a
    schema-qualified table would be auto-aliased when used in a SELECT statement;
    given a table:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 非常旧版本的MSSQL方言引入了这样的行为，即在SELECT语句中使用模式限定的表时，将自动为其设置别名；给定一个表：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'this legacy mode of rendering would assume that “customer_schema.account” would
    not be accepted by all parts of the SQL statement, as illustrated below:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此传统呈现模式将假定“customer_schema.account”不会被SQL语句的所有部分接受，如下所示：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This mode of behavior is now off by default, as it appears to have served no
    purpose; however in the case that legacy applications rely upon it, it is available
    using the `legacy_schema_aliasing` argument to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as illustrated above.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此行为模式现在默认关闭，因为似乎没有任何作用；但是，如果传统应用程序依赖于它，则可以使用`legacy_schema_aliasing`参数来[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，如上所示。
- en: 'Deprecated since version 1.4: The `legacy_schema_aliasing` flag is now deprecated
    and will be removed in a future release.  ## Clustered Index Support'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '自版本1.4弃用：`legacy_schema_aliasing`标志现已弃用，并将在将来的版本中删除。  ## 聚集索引支持'
- en: The MSSQL dialect supports clustered indexes (and primary keys) via the `mssql_clustered`
    option. This option is available to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"). and [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"). For indexes this option can be combined
    with the `mssql_columnstore` one to create a clustered columnstore index.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL方言支持通过`mssql_clustered`选项生成聚集索引（和主键）。此选项适用于[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")和[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")。对于索引，此选项可以与`mssql_columnstore`结合使用以创建聚集列存储索引。
- en: 'To generate a clustered index:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成聚集索引：
- en: '[PRE35]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: which renders the index as `CREATE CLUSTERED INDEX my_index ON table (x)`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引呈现为`CREATE CLUSTERED INDEX my_index ON table (x)`。
- en: 'To generate a clustered primary key use:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成聚集主键，请使用：
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'which will render the table, for example, as:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将例如呈现表为：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Similarly, we can generate a clustered unique constraint using:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以使用以下方式生成��集唯一约束：
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To explicitly request a non-clustered primary key (for example, when a separate
    clustered index is desired), use:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要显式请求非聚集主键（例如，当需要单独的聚集索引时），请使用：
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'which will render the table, for example, as:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将例如呈现表为：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Columnstore Index Support
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列存储索引支持
- en: The MSSQL dialect supports columnstore indexes via the `mssql_columnstore` option.
    This option is available to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"). It be combined with the `mssql_clustered` option to
    create a clustered columnstore index.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 方言通过 `mssql_columnstore` 选项支持列存储索引。此选项适用于 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")。它可以与 `mssql_clustered` 选项结合使用以创建聚集列存储索引。
- en: 'To generate a columnstore index:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 生成列存储索引：
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: which renders the index as `CREATE COLUMNSTORE INDEX my_index ON table (x)`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染索引为 `CREATE COLUMNSTORE INDEX my_index ON table (x)`。
- en: 'To generate a clustered columnstore index provide no columns:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成聚集列存储索引，请不提供列：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: the above renders the index as `CREATE CLUSTERED COLUMNSTORE INDEX my_index
    ON table`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将索引渲染为 `CREATE CLUSTERED COLUMNSTORE INDEX my_index ON table`。
- en: New in version 2.0.18.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.18 中新增。
- en: MSSQL-Specific Index Options
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MSSQL 特定的索引选项
- en: In addition to clustering, the MSSQL dialect supports other special options
    for [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index").
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 除了聚集外，MSSQL 方言还支持其他特殊选项用于 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")。
- en: INCLUDE
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包括
- en: 'The `mssql_include` option renders INCLUDE(colname) for the given string names:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`mssql_include` 选项为给定的字符串名称渲染 INCLUDE(colname)：'
- en: '[PRE43]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: would render the index as `CREATE INDEX my_index ON table (x) INCLUDE (y)`
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引渲染为 `CREATE INDEX my_index ON table (x) INCLUDE (y)`
- en: '### Filtered Indexes'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '### 过滤索引'
- en: 'The `mssql_where` option renders WHERE(condition) for the given string names:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`mssql_where` 选项为给定的字符串名称渲染 WHERE(condition)：'
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: would render the index as `CREATE INDEX my_index ON table (x) WHERE x > 10`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引渲染为 `CREATE INDEX my_index ON table (x) WHERE x > 10`。
- en: New in version 1.3.4.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.4 中新增。
- en: Index ordering
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引排序
- en: 'Index ordering is available via functional expressions, such as:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 索引排序可通过功能表达式实现，例如：
- en: '[PRE45]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: would render the index as `CREATE INDEX my_index ON table (x DESC)`
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引渲染为 `CREATE INDEX my_index ON table (x DESC)`
- en: See also
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Functional Indexes](../core/constraints.html#schema-indexes-functional)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[功能索引](../core/constraints.html#schema-indexes-functional)'
- en: Compatibility Levels
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性级别
- en: MSSQL supports the notion of setting compatibility levels at the database level.
    This allows, for instance, to run a database that is compatible with SQL2000 while
    running on a SQL2005 database server. `server_version_info` will always return
    the database server version information (in this case SQL2005) and not the compatibility
    level information. Because of this, if running under a backwards compatibility
    mode SQLAlchemy may attempt to use T-SQL statements that are unable to be parsed
    by the database server.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 支持在数据库级别设置兼容性级别的概念。例如，可以在运行在 SQL2005 数据库服务器上的数据库上运行与 SQL2000 兼容的数据库。`server_version_info`
    将始终返回数据库服务器版本信息（在本例中为 SQL2005），而不是兼容性级别信息。因此，如果在向后兼容模式下运行，SQLAlchemy 可能会尝试使用数据库服务器无法解析的
    T-SQL 语句。
- en: '## Triggers'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '## 触发器'
- en: 'SQLAlchemy by default uses OUTPUT INSERTED to get at newly generated primary
    key values via IDENTITY columns or other server side defaults. MS-SQL does not
    allow the usage of OUTPUT INSERTED on tables that have triggers. To disable the
    usage of OUTPUT INSERTED on a per-table basis, specify `implicit_returning=False`
    for each [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    which has triggers:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 默认使用 OUTPUT INSERTED 来获取通过 IDENTITY 列或其他服务器端默认生成的新主键值。MS-SQL 不允许在具有触发器的表上使用
    OUTPUT INSERTED。要在每个具有触发器的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 上禁用 OUTPUT INSERTED 的使用，为其指定 `implicit_returning=False`：
- en: '[PRE46]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Declarative form:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 声明形式：
- en: '[PRE47]  ## Rowcount Support / ORM Versioning'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE47]  ## 行数支持 / ORM 版本控制'
- en: The SQL Server drivers may have limited ability to return the number of rows
    updated from an UPDATE or DELETE statement.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 驱动程序可能有限的能力返回从 UPDATE 或 DELETE 语句中更新的行数。
- en: As of this writing, the PyODBC driver is not able to return a rowcount when
    OUTPUT INSERTED is used. Previous versions of SQLAlchemy therefore had limitations
    for features such as the “ORM Versioning” feature that relies upon accurate rowcounts
    in order to match version numbers with matched rows.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，PyODBC 驱动程序无法在使用 OUTPUT INSERTED 时返回行数。因此，之前的 SQLAlchemy 版本对于依赖于准确行数以将版本号与匹配行匹配的功能（如“ORM
    版本控制”功能）存在限制。
- en: SQLAlchemy 2.0 now retrieves the “rowcount” manually for these particular use
    cases based on counting the rows that arrived back within RETURNING; so while
    the driver still has this limitation, the ORM Versioning feature is no longer
    impacted by it. As of SQLAlchemy 2.0.5, ORM versioning has been fully re-enabled
    for the pyodbc driver.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 现在针对这些特定用例基于返回的行数手动检索“rowcount”；因此，虽然驱动程序仍然具有此限制，但 ORM 版本功能不再受其影响。从
    SQLAlchemy 2.0.5 开始，ORM 版本控制已完全重新启用 pyodbc 驱动程序。
- en: 'Changed in version 2.0.5: ORM versioning support is restored for the pyodbc
    driver. Previously, a warning would be emitted during ORM flush that versioning
    was not supported.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.5 中更改：为 pyodbc 驱动程序恢复了 ORM 版本控制支持。之前，在 ORM 刷新期间会发出警告，说明不支持版本控制。
- en: Enabling Snapshot Isolation
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用快照隔离
- en: 'SQL Server has a default transaction isolation mode that locks entire tables,
    and causes even mildly concurrent applications to have long held locks and frequent
    deadlocks. Enabling snapshot isolation for the database as a whole is recommended
    for modern levels of concurrency support. This is accomplished via the following
    ALTER DATABASE commands executed at the SQL prompt:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 具有默认的事务隔离模式，它锁定整个表，并导致即使是轻度并发的应用程序也具有长时间的持有锁定和频繁的死锁。推荐为整个数据库启用快照隔离以支持现代的并发级别。这通过在
    SQL 提示符下执行以下 ALTER DATABASE 命令来完成：
- en: '[PRE48]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Background on SQL Server snapshot isolation is available at [https://msdn.microsoft.com/en-us/library/ms175095.aspx](https://msdn.microsoft.com/en-us/library/ms175095.aspx).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 SQL Server 快照隔离的背景信息，请参阅 [https://msdn.microsoft.com/en-us/library/ms175095.aspx](https://msdn.microsoft.com/en-us/library/ms175095.aspx)。
- en: SQL Server SQL Constructs
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL Server SQL 构造
- en: '| Object Name | Description |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [try_cast](#sqlalchemy.dialects.mssql.try_cast)(expression, type_) | Produce
    a `TRY_CAST` expression for backends which support it; this is a `CAST` which
    returns NULL for un-castable conversions. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [try_cast](#sqlalchemy.dialects.mssql.try_cast)(expression, type_) | 为支持的后端生成一个
    `TRY_CAST` 表达式；这是一个 `CAST`，对于不可转换的转换返回 NULL。 |'
- en: '[PRE49]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Produce a `TRY_CAST` expression for backends which support it; this is a `CAST`
    which returns NULL for un-castable conversions.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为支持它的后端生成一个 `TRY_CAST` 表达式；这是一个 `CAST`，对于不可转换的转换返回 NULL。
- en: In SQLAlchemy, this construct is supported **only** by the SQL Server dialect,
    and will raise a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") if used on other included backends. However, third
    party backends may also support this construct.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 中，此结构仅由 SQL Server 方言支持，并且如果在其他包含的后端上使用，将引发 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。但是，第三方后端也可能支持此结构。
- en: Tip
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: As [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") originates from the SQL Server dialect,
    it’s importable both from `sqlalchemy.` as well as from `sqlalchemy.dialects.mssql`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") 起源于 SQL Server 方言，因此可以从 `sqlalchemy.` 以及
    `sqlalchemy.dialects.mssql` 导入。
- en: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    returns an instance of [`TryCast`](../core/sqlelement.html#sqlalchemy.sql.expression.TryCast
    "sqlalchemy.sql.expression.TryCast") and generally behaves similarly to the [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast") construct; at the SQL level, the difference
    between `CAST` and `TRY_CAST` is that `TRY_CAST` returns NULL for an un-castable
    expression, such as attempting to cast a string `"hi"` to an integer value.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    返回一个 [`TryCast`](../core/sqlelement.html#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    实例，并且通常行为类似于 [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    结构；在 SQL 层面，`CAST` 和 `TRY_CAST` 的区别在于 `TRY_CAST` 对于不可转换的表达式，如将字符串 `"hi"` 转换为整数值，将返回
    NULL。'
- en: 'E.g.:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE50]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The above would render on Microsoft SQL Server as:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容在 Microsoft SQL Server 上呈现为：
- en: '[PRE51]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'New in version 2.0.14: [`try_cast()`](#sqlalchemy.dialects.mssql.try_cast "sqlalchemy.dialects.mssql.try_cast")
    has been generalized from the SQL Server dialect into a general use construct
    that may be supported by additional dialects.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.14 中：[`try_cast()`](#sqlalchemy.dialects.mssql.try_cast "sqlalchemy.dialects.mssql.try_cast")
    已从 SQL Server 方言广义化为一个可能由其他方言支持的通用结构。
- en: SQL Server Data Types
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL Server 数据类型
- en: 'As with all SQLAlchemy dialects, all UPPERCASE types that are known to be valid
    with SQL server are importable from the top level dialect, whether they originate
    from [`sqlalchemy.types`](../core/type_basics.html#module-sqlalchemy.types "sqlalchemy.types")
    or from the local dialect:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有SQLAlchemy方言一样，所有已知与SQL Server有效的大写类型都可以从顶级方言导入，无论它们是来自[`sqlalchemy.types`](../core/type_basics.html#module-sqlalchemy.types
    "sqlalchemy.types")还是来自本地方言：
- en: '[PRE52]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Types which are specific to SQL Server, or have SQL Server-specific construction
    arguments, are as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是特定于SQL Server或具有SQL Server特定构造参数的类型：
- en: '| Object Name | Description |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BIT](#sqlalchemy.dialects.mssql.BIT) | MSSQL BIT type. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [BIT](#sqlalchemy.dialects.mssql.BIT) | MSSQL BIT类型。 |'
- en: '| [DATETIME2](#sqlalchemy.dialects.mssql.DATETIME2) |  |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [DATETIME2](#sqlalchemy.dialects.mssql.DATETIME2) |  |'
- en: '| [DATETIMEOFFSET](#sqlalchemy.dialects.mssql.DATETIMEOFFSET) |  |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [DATETIMEOFFSET](#sqlalchemy.dialects.mssql.DATETIMEOFFSET) |  |'
- en: '| [DOUBLE_PRECISION](#sqlalchemy.dialects.mssql.DOUBLE_PRECISION) | the SQL
    Server DOUBLE PRECISION datatype. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [DOUBLE_PRECISION](#sqlalchemy.dialects.mssql.DOUBLE_PRECISION) | SQL Server
    DOUBLE PRECISION数据类型。 |'
- en: '| [IMAGE](#sqlalchemy.dialects.mssql.IMAGE) |  |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [IMAGE](#sqlalchemy.dialects.mssql.IMAGE) |  |'
- en: '| [JSON](#sqlalchemy.dialects.mssql.JSON) | MSSQL JSON type. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [JSON](#sqlalchemy.dialects.mssql.JSON) | MSSQL JSON类型。 |'
- en: '| [MONEY](#sqlalchemy.dialects.mssql.MONEY) |  |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [MONEY](#sqlalchemy.dialects.mssql.MONEY) |  |'
- en: '| [NTEXT](#sqlalchemy.dialects.mssql.NTEXT) | MSSQL NTEXT type, for variable-length
    unicode text up to 2^30 characters. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [NTEXT](#sqlalchemy.dialects.mssql.NTEXT) | MSSQL NTEXT类型，用于最多2^30个字符的可变长度Unicode文本。
    |'
- en: '| [REAL](#sqlalchemy.dialects.mssql.REAL) | the SQL Server REAL datatype. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| [REAL](#sqlalchemy.dialects.mssql.REAL) | SQL Server REAL数据类型。 |'
- en: '| [ROWVERSION](#sqlalchemy.dialects.mssql.ROWVERSION) | Implement the SQL Server
    ROWVERSION type. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [ROWVERSION](#sqlalchemy.dialects.mssql.ROWVERSION) | 实现SQL Server ROWVERSION类型。
    |'
- en: '| [SMALLDATETIME](#sqlalchemy.dialects.mssql.SMALLDATETIME) |  |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [SMALLDATETIME](#sqlalchemy.dialects.mssql.SMALLDATETIME) |  |'
- en: '| [SMALLMONEY](#sqlalchemy.dialects.mssql.SMALLMONEY) |  |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [SMALLMONEY](#sqlalchemy.dialects.mssql.SMALLMONEY) |  |'
- en: '| [SQL_VARIANT](#sqlalchemy.dialects.mssql.SQL_VARIANT) |  |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [SQL_VARIANT](#sqlalchemy.dialects.mssql.SQL_VARIANT) |  |'
- en: '| [TIME](#sqlalchemy.dialects.mssql.TIME) |  |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| [TIME](#sqlalchemy.dialects.mssql.TIME) |  |'
- en: '| [TIMESTAMP](#sqlalchemy.dialects.mssql.TIMESTAMP) | Implement the SQL Server
    TIMESTAMP type. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| [TIMESTAMP](#sqlalchemy.dialects.mssql.TIMESTAMP) | 实现SQL Server TIMESTAMP类型。
    |'
- en: '| [TINYINT](#sqlalchemy.dialects.mssql.TINYINT) |  |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [TINYINT](#sqlalchemy.dialects.mssql.TINYINT) |  |'
- en: '| [UNIQUEIDENTIFIER](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER) |  |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [UNIQUEIDENTIFIER](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER) |  |'
- en: '| [XML](#sqlalchemy.dialects.mssql.XML) | MSSQL XML type. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [XML](#sqlalchemy.dialects.mssql.XML) | MSSQL XML类型。 |'
- en: '[PRE53]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: MSSQL BIT type.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL BIT类型。
- en: Both pyodbc and pymssql return values from BIT columns as Python <class ‘bool’>
    so just subclass Boolean.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: pyodbc和pymssql都将BIT列的值作为Python <class ‘bool’>返回，因此只需子类化Boolean。
- en: '**Members**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.BIT.__init__)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.BIT.__init__)'
- en: '**Class signature**'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.BIT`](#sqlalchemy.dialects.mssql.BIT "sqlalchemy.dialects.mssql.BIT")
    ([`sqlalchemy.types.Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"))
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.BIT`](#sqlalchemy.dialects.mssql.BIT "sqlalchemy.dialects.mssql.BIT")
    ([`sqlalchemy.types.Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"))
- en: '[PRE54]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '*inherited from the* `sqlalchemy.types.Boolean.__init__` *method of* [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.types.Boolean.__init__` *方法的* [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")'
- en: Construct a Boolean.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个布尔值。
- en: 'Parameters:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`create_constraint` –'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. If the boolean is generated as an int/smallint, also create
    a CHECK constraint on the table that ensures 1 or 0 as a value.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为False。如果布尔值生成为int/smallint，则还会在表上创建一个CHECK约束，确保值为1或0。
- en: Note
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Boolean.name`](../core/type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") parameter or by setting up an appropriate naming convention;
    see [Configuring Constraint Naming Conventions](../core/constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议CHECK约束具有显式名称，以支持模式管理问题。这可以通过设置[`Boolean.name`](../core/type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean")参数或设置适当的命名约定来实现；有关背景信息，请参阅[配置约束命名约定](../core/constraints.html#constraint-naming-conventions)。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：- 此标志现在默认为False，表示对于非本地枚举类型不会生成CHECK约束。
- en: '`name` – if a CHECK constraint is generated, specify the name of the constraint.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 如果生成CHECK约束，请指定约束的名称。'
- en: '[PRE55]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The SQL CHAR type.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: SQL CHAR 类型。
- en: '**Class signature**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.CHAR` ([`sqlalchemy.types.String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"))
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.CHAR` ([`sqlalchemy.types.String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"))
- en: '[PRE56]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.types.String.__init__` *方法的* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
- en: Create a string-holding type.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于DDL和CAST表达式中的列的长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用`length`，如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。值是以字节还是字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行呈现。例如：
- en: '[PRE57]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型应该用于预期存储非ASCII数据的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE58]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '**Class signature**'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.DATETIME2`](#sqlalchemy.dialects.mssql.DATETIME2
    "sqlalchemy.dialects.mssql.DATETIME2") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.DATETIME2`](#sqlalchemy.dialects.mssql.DATETIME2
    "sqlalchemy.dialects.mssql.DATETIME2") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))
- en: '[PRE59]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '**Class signature**'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.DATETIMEOFFSET`](#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.DATETIMEOFFSET`](#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))
- en: '[PRE60]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: the SQL Server DOUBLE PRECISION datatype.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server DOUBLE PRECISION 数据类型。
- en: New in version 2.0.11.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.11中新增。
- en: '**Class signature**'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.DOUBLE_PRECISION`](#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION") ([`sqlalchemy.types.DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION"))
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.DOUBLE_PRECISION`](#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION") ([`sqlalchemy.types.DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION"))
- en: '[PRE61]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '**Members**'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.IMAGE.__init__)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.IMAGE.__init__)'
- en: '**Class signature**'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.IMAGE`](#sqlalchemy.dialects.mssql.IMAGE "sqlalchemy.dialects.mssql.IMAGE")
    ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.IMAGE`](#sqlalchemy.dialects.mssql.IMAGE "sqlalchemy.dialects.mssql.IMAGE")
    ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
- en: '[PRE62]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '*inherited from the* `sqlalchemy.types.LargeBinary.__init__` *method of* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.types.LargeBinary.__init__` *方法的* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
- en: Construct a LargeBinary type.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 LargeBinary 类型。
- en: 'Parameters:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选，用于 DDL 语句的列长度，用于那些接受长度的二进制类型，例如 MySQL BLOB 类型。'
- en: '[PRE63]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: MSSQL JSON type.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL JSON 类型。
- en: MSSQL supports JSON-formatted data as of SQL Server 2016.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 支持 JSON 格式的数据，自 SQL Server 2016 起。
- en: The [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    datatype at the DDL level will represent the datatype as `NVARCHAR(max)`, but
    provides for JSON-level comparison functions as well as Python coercion behavior.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: DDL 级别的 [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    数据类型将以 `NVARCHAR(max)` 形式表示数据类型，但也提供了 JSON 级别的比较函数以及 Python 强制转换行为。
- en: '[`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    is used automatically whenever the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype is used against a SQL Server backend.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 自动使用 [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    每当基础 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    数据类型针对 SQL Server 后端使用时。
- en: See also
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - main documentation for the generic cross-platform JSON datatype.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - 通用跨平台 JSON 数据类型的主要文档。'
- en: The [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    type supports persistence of JSON values as well as the core index operations
    provided by [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    datatype, by adapting the operations to render the `JSON_VALUE` or `JSON_QUERY`
    functions at the database level.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    类型支持将 JSON 值持久化存储，以及通过将操作适配到数据库级别的 `JSON_VALUE` 或 `JSON_QUERY` 函数来提供的核心索引操作，以支持
    [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    数据类型。'
- en: The SQL Server [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    type necessarily makes use of the `JSON_QUERY` and `JSON_VALUE` functions when
    querying for elements of a JSON object. These two functions have a major restriction
    in that they are **mutually exclusive** based on the type of object to be returned.
    The `JSON_QUERY` function **only** returns a JSON dictionary or list, but not
    an individual string, numeric, or boolean element; the `JSON_VALUE` function **only**
    returns an individual string, numeric, or boolean element. **both functions either
    return NULL or raise an error if they are not used against the correct expected
    value**.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    类型在查询 JSON 对象元素时必然使用 `JSON_QUERY` 和 `JSON_VALUE` 函数。这两个函数有一个主要限制，即它们根据要返回的对象类型是**互斥的**。`JSON_QUERY`
    函数**仅**返回 JSON 字典或列表，但不返回单个字符串、数值或布尔值元素；`JSON_VALUE` 函数**仅**返回单个字符串、数值或布尔值元素。**如果它们没有针对正确的预期值使用，这两个函数都会返回
    NULL 或引发错误**。
- en: 'To handle this awkward requirement, indexed access rules are as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这个尴尬的要求，索引访问规则如下：
- en: 'When extracting a sub element from a JSON that is itself a JSON dictionary
    or list, the [`Comparator.as_json()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_json
    "sqlalchemy.types.JSON.Comparator.as_json") accessor should be used:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当从一个 JSON 中提取一个子元素，该 JSON 本身是一个 JSON 字典或列表时，应使用 [`Comparator.as_json()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_json
    "sqlalchemy.types.JSON.Comparator.as_json") 访问器：
- en: '[PRE64]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'When extracting a sub element from a JSON that is a plain boolean, string,
    integer, or float, use the appropriate method among [`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean"), [`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string"), [`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer"), [`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float"):'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从JSON中提取平面布尔值、字符串、整数或浮点数的子元素时，使用以下适当的方法之一： [`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean"), [`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string"), [`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer"), [`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float"):'
- en: '[PRE65]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: New in version 1.4.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '**Members**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.JSON.__init__)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.JSON.__init__)'
- en: '**Class signature**'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    ([`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON"))
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    ([`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON"))
- en: '[PRE66]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '*inherited from the* `sqlalchemy.types.JSON.__init__` *method of* [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    *方法* [`sqlalchemy.types.JSON.__init__`](#sqlalchemy.dialects.mssql.JSON.__init__)'
- en: Construct a [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    类型。
- en: 'Parameters:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**none_as_null=False** –'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '**none_as_null=False** –'
- en: 'if True, persist the value `None` as a SQL NULL value, not the JSON encoding
    of `null`. Note that when this flag is False, the [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct can still be used to persist a NULL
    value, which may be passed directly as a parameter value that is specially interpreted
    by the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type as SQL NULL:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则将值`None`持久化为SQL NULL值，而不是`null`的JSON编码。注意，当此标志为False时，[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 构造仍然可以用于持久化NULL值，可以直接将其作为参数值传递，该值由 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 类型特别解释为SQL NULL：
- en: '[PRE67]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Note
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") does **not** apply to the values passed to [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"); a value of `None` passed for these parameters means
    “no default present”.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 不适用于传递给 [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 和 [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 的值；这些参数的传递值为 `None` 意味着“没有默认值”。'
- en: Additionally, when used in SQL comparison expressions, the Python value `None`
    continues to refer to SQL null, and not JSON NULL. The [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag refers explicitly to the **persistence** of the
    value within an INSERT or UPDATE statement. The [`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") value should be used for SQL expressions that wish
    to compare to JSON null.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当用于SQL比较表达式时，Python 值 `None` 仍然指代SQL null，而不是JSON NULL。[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 标志明确指的是在INSERT或UPDATE语句中值的**持久化**。 [`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") 值应用于希望与JSON null进行比较的SQL表达式。
- en: See also
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
- en: '[PRE68]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '**Class signature**'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.MONEY`](#sqlalchemy.dialects.mssql.MONEY "sqlalchemy.dialects.mssql.MONEY")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.MONEY`](#sqlalchemy.dialects.mssql.MONEY "sqlalchemy.dialects.mssql.MONEY")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE69]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The SQL NCHAR type.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NCHAR类型。
- en: '**Class signature**'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.NCHAR` ([`sqlalchemy.types.Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode"))
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.NCHAR` ([`sqlalchemy.types.Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode"))
- en: '[PRE70]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`sqlalchemy.types.String.__init__`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") *方法*'
- en: Create a string-holding type.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个保存字符串的类型。
- en: 'Parameters:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于DDL和CAST表达式中的列长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。值是以字节还是字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行呈现。例如：
- en: '[PRE71]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Note
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE72]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: MSSQL NTEXT type, for variable-length unicode text up to 2^30 characters.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL NTEXT类型，用于最多2^30个字符的可变长度Unicode文本。
- en: '**Members**'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.NTEXT.__init__)'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.NTEXT.__init__)'
- en: '**Class signature**'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.NTEXT`](#sqlalchemy.dialects.mssql.NTEXT "sqlalchemy.dialects.mssql.NTEXT")
    ([`sqlalchemy.types.UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"))
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.NTEXT`](#sqlalchemy.dialects.mssql.NTEXT "sqlalchemy.dialects.mssql.NTEXT")
    ([`sqlalchemy.types.UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"))
- en: '[PRE73]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`sqlalchemy.types.String.__init__`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") *方法*'
- en: Create a string-holding type.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个保存字符串的类型。
- en: 'Parameters:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于DDL和CAST表达式中的列长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。值是以字节还是字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行��现。例如：
- en: '[PRE74]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Note
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非 ASCII 数据的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE75]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The SQL NVARCHAR type.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NVARCHAR 类型。
- en: '**Class signature**'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.NVARCHAR` ([`sqlalchemy.types.Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode"))
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.NVARCHAR` ([`sqlalchemy.types.Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode"))
- en: '[PRE76]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法*'
- en: Create a string-holding type.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串持有类型。
- en: 'Parameters:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于 DDL 和 CAST 表达式中的列长度。如果不会发出 `CREATE TABLE`，则可以安全地省略。某些数据库可能需要在
    DDL 中使用长度，并且当包含没有长度的 `VARCHAR` 时，将在发出 `CREATE TABLE` DDL 时引发异常。该值被解释为字节还是字符是特定于数据库的。'
- en: '`collation` –'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于 DDL 和 CAST 表达式中的列级排序。使用 SQLite、MySQL 和 PostgreSQL 支持的 COLLATE 关键字呈现。例如：
- en: '[PRE77]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Note
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非 ASCII 数据的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE78]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: the SQL Server REAL datatype.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server REAL 数据类型。
- en: '**Class signature**'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.REAL`](#sqlalchemy.dialects.mssql.REAL "sqlalchemy.dialects.mssql.REAL")
    ([`sqlalchemy.types.REAL`](../core/type_basics.html#sqlalchemy.types.REAL "sqlalchemy.types.REAL"))
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.REAL`](#sqlalchemy.dialects.mssql.REAL "sqlalchemy.dialects.mssql.REAL")
    ([`sqlalchemy.types.REAL`](../core/type_basics.html#sqlalchemy.types.REAL "sqlalchemy.types.REAL"))
- en: '[PRE79]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Implement the SQL Server ROWVERSION type.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 SQL Server ROWVERSION 类型。
- en: The ROWVERSION datatype is a SQL Server synonym for the TIMESTAMP datatype,
    however current SQL Server documentation suggests using ROWVERSION for new datatypes
    going forward.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: ROWVERSION 数据类型是 TIMESTAMP 数据类型的 SQL Server 同义词，但当前 SQL Server 文档建议将 ROWVERSION
    用于未来的新数据类型。
- en: The ROWVERSION datatype does **not** reflect (e.g. introspect) from the database
    as itself; the returned datatype will be [`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP").
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: ROWVERSION 数据类型不会从数据库中反映出来，返回的数据类型将是 [`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP")。
- en: This is a read-only datatype that does not support INSERT of values.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种只读数据类型，不支持插入值。
- en: New in version 1.2.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: See also
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP "sqlalchemy.dialects.mssql.TIMESTAMP")'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP "sqlalchemy.dialects.mssql.TIMESTAMP")'
- en: '**Members**'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.ROWVERSION.__init__)'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.ROWVERSION.__init__)'
- en: '**Class signature**'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.ROWVERSION`](#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION") ([`sqlalchemy.dialects.mssql.base.TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.base.TIMESTAMP"))
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.ROWVERSION`](#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION") （[`sqlalchemy.dialects.mssql.base.TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.base.TIMESTAMP")）
- en: '[PRE80]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '*inherited from the* `sqlalchemy.dialects.mssql.base.TIMESTAMP.__init__` *method
    of* [`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP "sqlalchemy.dialects.mssql.base.TIMESTAMP")'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP "sqlalchemy.dialects.mssql.base.TIMESTAMP")
    *的* `sqlalchemy.dialects.mssql.base.TIMESTAMP.__init__` *方法继承*'
- en: Construct a TIMESTAMP or ROWVERSION type.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个TIMESTAMP或ROWVERSION类型。
- en: 'Parameters:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**convert_int** – if True, binary integer values will be converted to integers
    on read.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**convert_int** – 如果为True，则在读取时将二进制整数值转换为整数。'
- en: New in version 1.2.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2。
- en: '[PRE81]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '**Members**'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.SMALLDATETIME.__init__)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.SMALLDATETIME.__init__)'
- en: '**Class signature**'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.SMALLDATETIME`](#sqlalchemy.dialects.mssql.SMALLDATETIME
    "sqlalchemy.dialects.mssql.SMALLDATETIME") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.SMALLDATETIME`](#sqlalchemy.dialects.mssql.SMALLDATETIME
    "sqlalchemy.dialects.mssql.SMALLDATETIME") （`sqlalchemy.dialects.mssql.base._DateTimeBase`，[`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")）
- en: '[PRE82]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '*inherited from the* `sqlalchemy.types.DateTime.__init__` *method of* [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    *的* `sqlalchemy.types.DateTime.__init__` *方法继承*'
- en: Construct a new [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime").
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")。
- en: 'Parameters:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**timezone** – boolean. Indicates that the datetime type should enable timezone
    support, if available on the **base date/time-holding type only**. It is recommended
    to make use of the [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype directly when using this flag, as some
    databases include separate generic date/time-holding types distinct from the timezone-capable
    TIMESTAMP datatype, such as Oracle.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '**时区** – 布尔值。指示日期时间类型是否应在仅在**基础日期/时间持有类型上可用时启用时区支持**。建议在使用此标志时直接使用[`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP")数据类型，因为一些数据库包括与时区功能的TIMESTAMP数据类型不同的单独的通用日期/时间持有类型，如Oracle。'
- en: '[PRE83]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '**Class signature**'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.SMALLMONEY`](#sqlalchemy.dialects.mssql.SMALLMONEY
    "sqlalchemy.dialects.mssql.SMALLMONEY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.SMALLMONEY`](#sqlalchemy.dialects.mssql.SMALLMONEY
    "sqlalchemy.dialects.mssql.SMALLMONEY") （[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE84]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '**Class signature**'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.SQL_VARIANT`](#sqlalchemy.dialects.mssql.SQL_VARIANT
    "sqlalchemy.dialects.mssql.SQL_VARIANT") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.SQL_VARIANT`](#sqlalchemy.dialects.mssql.SQL_VARIANT
    "sqlalchemy.dialects.mssql.SQL_VARIANT") （[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE85]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The SQL TEXT type.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: SQL TEXT类型。
- en: '**Class signature**'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.TEXT` ([`sqlalchemy.types.Text`](../core/type_basics.html#sqlalchemy.types.Text
    "sqlalchemy.types.Text"))
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.TEXT` （[`sqlalchemy.types.Text`](../core/type_basics.html#sqlalchemy.types.Text
    "sqlalchemy.types.Text")）
- en: '[PRE86]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法继承*'
- en: Create a string-holding type.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串持有类型。
- en: 'Parameters:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选项，用于DDL和CAST表达式中的列长度。如果不会发出`CREATE TABLE`，可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含一个没有长度的`VARCHAR`，则在发出`CREATE
    TABLE`DDL时会引发异常。值是作为字节还是字符解释的是特定于数据库的。'
- en: '`collation` –'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选项，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行呈现。例如：
- en: '[PRE87]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Note
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非 ASCII 数据的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库中使用正确的类型。
- en: '[PRE88]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '**Class signature**'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.TIME`](#sqlalchemy.dialects.mssql.TIME "sqlalchemy.dialects.mssql.TIME")
    ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME "sqlalchemy.types.TIME"))
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.TIME`](#sqlalchemy.dialects.mssql.TIME "sqlalchemy.dialects.mssql.TIME")（[`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME
    "sqlalchemy.types.TIME")）
- en: '[PRE89]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Implement the SQL Server TIMESTAMP type.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 SQL Server TIMESTAMP 类型。
- en: Note this is **completely different** than the SQL Standard TIMESTAMP type,
    which is not supported by SQL Server. It is a read-only datatype that does not
    support INSERT of values.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与 SQL 标准 TIMESTAMP 类型完全不同，SQL Server 不支持该类型。它是一个只读数据类型，不支持插入值。
- en: New in version 1.2.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本 1.2 中引入。
- en: See also
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ROWVERSION`](#sqlalchemy.dialects.mssql.ROWVERSION "sqlalchemy.dialects.mssql.ROWVERSION")'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ROWVERSION`](#sqlalchemy.dialects.mssql.ROWVERSION "sqlalchemy.dialects.mssql.ROWVERSION")'
- en: '**Members**'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.TIMESTAMP.__init__)'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.TIMESTAMP.__init__)'
- en: '**Class signature**'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP") (`sqlalchemy.types._Binary`)
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP")（`sqlalchemy.types._Binary`）
- en: '[PRE90]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Construct a TIMESTAMP or ROWVERSION type.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 构造 TIMESTAMP 或 ROWVERSION 类型。
- en: 'Parameters:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**convert_int** – if True, binary integer values will be converted to integers
    on read.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '**convert_int** – 如果为True，则二进制整数值将在读取时转换为整数。'
- en: New in version 1.2.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本 1.2 中引入。
- en: '[PRE91]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '**Class signature**'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.TINYINT`](#sqlalchemy.dialects.mssql.TINYINT
    "sqlalchemy.dialects.mssql.TINYINT") ([`sqlalchemy.types.Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"))
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.TINYINT`](#sqlalchemy.dialects.mssql.TINYINT "sqlalchemy.dialects.mssql.TINYINT")（[`sqlalchemy.types.Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")）
- en: '[PRE92]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '**Members**'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.__init__)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.__init__)'
- en: '**Class signature**'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER`](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") ([`sqlalchemy.types.Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid"))
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER`](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER")（[`sqlalchemy.types.Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")）
- en: '[PRE93]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Construct a [`UNIQUEIDENTIFIER`](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") type.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 构造 [`UNIQUEIDENTIFIER`](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER")
    类型。
- en: 'Parameters:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**as_uuid=True** –'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '**as_uuid=True** –'
- en: if True, values will be interpreted as Python uuid objects, converting to/from
    string via the DBAPI.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则值将被解释为Python uuid对象，通过DBAPI转换为/从字符串。
- en: '[PRE94]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The MSSQL VARBINARY type.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL VARBINARY 类型。
- en: This type adds additional features to the core [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY") type, including “deprecate_large_types” mode where
    either `VARBINARY(max)` or IMAGE is rendered, as well as the SQL Server `FILESTREAM`
    option.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 该类型为核心的[`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")类型添加了额外的功能，包括“deprecate_large_types”模式，其中会渲染`VARBINARY(max)`或IMAGE，以及SQL
    Server的`FILESTREAM`选项。
- en: See also
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Large Text/Binary Type Deprecation](#mssql-large-type-deprecation)'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '[大型文本/二进制类型弃用](#mssql-large-type-deprecation)'
- en: '**Class signature**'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.VARBINARY` ([`sqlalchemy.types.VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY"), [`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.VARBINARY` ([`sqlalchemy.types.VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY"), [`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
- en: '[PRE95]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Construct a VARBINARY type.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个VARBINARY类型。
- en: 'Parameters:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选参数，在DDL语句中用于列长度，用于那些接受长度参数的二进制类型，比如MySQL的BLOB类型。'
- en: '`filestream=False` –'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filestream=False` –'
- en: if True, renders the `FILESTREAM` keyword in the table definition. In this case
    `length` must be `None` or `'max'`.
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，在表定义中会渲染`FILESTREAM`关键字。在这种情况下，`length`必须为`None`或者`'max'`。
- en: New in version 1.4.31.
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新于1.4.31版本。
- en: '[PRE96]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The SQL VARCHAR type.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: SQL VARCHAR类型。
- en: '**Class signature**'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.VARCHAR` ([`sqlalchemy.types.String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"))
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.VARCHAR` ([`sqlalchemy.types.String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"))
- en: '[PRE97]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法继承*'
- en: Create a string-holding type.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个保存字符串的类型。
- en: 'Parameters:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选参数，在DDL和CAST表达式中用于列长度。如果不会发出`CREATE TABLE`，可以安全地省略。某些数据库可能需要DDL中使用长度，并且如果包括了没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。值是以字节还是字符解释的，这取决于数据库。'
- en: '`collation` –'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选参数，在DDL和CAST表达式中用于列级别的排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字渲染。例如：
- en: '[PRE98]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Note
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或者[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型应该用于预期存储非ASCII数据的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE99]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: MSSQL XML type.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL XML类型。
- en: This is a placeholder type for reflection purposes that does not include any
    Python-side datatype support. It also does not currently support additional arguments,
    such as “CONTENT”, “DOCUMENT”, “xml_schema_collection”.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个占位符类型，用于反射目的，不包括任何Python端数据类型支持。它也不支持额外的参数，比如“CONTENT”、“DOCUMENT”、“xml_schema_collection”。
- en: '**Members**'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.XML.__init__)'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.XML.__init__)'
- en: '**Class signature**'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.XML`](#sqlalchemy.dialects.mssql.XML "sqlalchemy.dialects.mssql.XML")
    ([`sqlalchemy.types.Text`](../core/type_basics.html#sqlalchemy.types.Text "sqlalchemy.types.Text"))
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.XML`](#sqlalchemy.dialects.mssql.XML "sqlalchemy.dialects.mssql.XML")
    ([`sqlalchemy.types.Text`](../core/type_basics.html#sqlalchemy.types.Text "sqlalchemy.types.Text"))
- en: '[PRE100]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法*'
- en: Create a string-holding type.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选项，用于DDL和CAST表达式中列的长度。如果不会发出`CREATE TABLE`语句，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包括了没有长度的`VARCHAR`，则在发出`CREATE
    TABLE`DDL时会引发异常。值是按字节还是按字符解释，取决于数据库。'
- en: '`collation` –'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选项，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字呈现。例如：
- en: '[PRE101]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Note
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '## PyODBC'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '## PyODBC'
- en: Support for the Microsoft SQL Server database via the PyODBC driver.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 通过PyODBC驱动程序支持Microsoft SQL Server数据库。
- en: DBAPI
  id: totrans-509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyODBC is available
    at: [https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC的文档和下载信息（如果适用）可在以下网址获取：[https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)
- en: Connecting
  id: totrans-511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE102]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Connecting to PyODBC
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到PyODBC
- en: The URL here is to be translated to PyODBC connection strings, as detailed in
    [ConnectionStrings](https://code.google.com/p/pyodbc/wiki/ConnectionStrings).
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的URL将被翻译为PyODBC连接字符串，详见[ConnectionStrings](https://code.google.com/p/pyodbc/wiki/ConnectionStrings)。
- en: DSN Connections
  id: totrans-516
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: DSN连接
- en: 'A DSN connection in ODBC means that a pre-existing ODBC datasource is configured
    on the client machine. The application then specifies the name of this datasource,
    which encompasses details such as the specific ODBC driver in use as well as the
    network address of the database. Assuming a datasource is configured on the client,
    a basic DSN-based connection looks like:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: ODBC中的DSN连接意味着在客户端机器上配置了预先存在的ODBC数据源。然后，应用程序指定此数据源的名称，其中包括诸如正在使用的特定ODBC驱动程序以及数据库的网络地址等细节。假设在客户端上配置了数据源，则基本的基于DSN的连接如下所示：
- en: '[PRE103]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Which above, will pass the following connection string to PyODBC:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述内容传递给PyODBC的连接字符串如下：
- en: '[PRE104]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: If the username and password are omitted, the DSN form will also add the `Trusted_Connection=yes`
    directive to the ODBC string.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略了用户名和密码，则DSN表单还将向ODBC字符串添加`Trusted_Connection=yes`指令。
- en: Hostname Connections
  id: totrans-522
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主机名连接
- en: Hostname-based connections are also supported by pyodbc. These are often easier
    to use than a DSN and have the additional advantage that the specific database
    name to connect towards may be specified locally in the URL, rather than it being
    fixed as part of a datasource configuration.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC也支持基于主机名的连接。这通常比DSN更容易使用，并且具有另一个优势，即可以在URL中本地指定要连接到的特定数据库名称，而不是将其固定为数据源配置的一部分。
- en: 'When using a hostname connection, the driver name must also be specified in
    the query parameters of the URL. As these names usually have spaces in them, the
    name must be URL encoded which means using plus signs for spaces:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用主机名连接时，还必须在URL的查询参数中指定驱动程序名称。由于这些名称通常包含空格，因此必须对名称进行URL编码，这意味着使用加号代替空格：
- en: '[PRE105]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: The `driver` keyword is significant to the pyodbc dialect and must be specified
    in lowercase.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`driver`关键字对于pyodbc方言非常重要，必须以小写形式指定。'
- en: 'Any other names passed in the query string are passed through in the pyodbc
    connect string, such as `authentication`, `TrustServerCertificate`, etc. Multiple
    keyword arguments must be separated by an ampersand (`&`); these will be translated
    to semicolons when the pyodbc connect string is generated internally:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 查询字符串中传递的任何其他名称都将通过 pyodbc 连接字符串传递，例如 `authentication`、`TrustServerCertificate`
    等。 多个关键字参数必须用与号（`&`）分隔；这些参数在生成 pyodbc 连接字符串时将被转换为分号：
- en: '[PRE106]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The equivalent URL can be constructed using [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"):'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    构造相等的 URL：
- en: '[PRE107]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Pass through exact Pyodbc string
  id: totrans-531
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过确切的 Pyodbc 字符串传递
- en: 'A PyODBC connection string can also be sent in pyodbc’s format directly, as
    specified in [the PyODBC documentation](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases),
    using the parameter `odbc_connect`. A [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object can help make this easier:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 连接字符串也可以直接以 pyodbc 的格式发送，如[PyODBC 文档](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases)中所述，使用参数
    `odbc_connect`。 [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象可以帮助简化此过程：
- en: '[PRE108]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '#### Connecting to databases with access tokens'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用访问令牌连接到数据库'
- en: Some database servers are set up to only accept access tokens for login. For
    example, SQL Server allows the use of Azure Active Directory tokens to connect
    to databases. This requires creating a credential object using the `azure-identity`
    library. More information about the authentication step can be found in [Microsoft’s
    documentation](https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash).
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库服务器仅允许使用访问令牌进行登录。 例如，SQL Server 允许使用 Azure Active Directory 令牌连接到数据库。 这需要使用
    `azure-identity` 库创建凭据对象。 关于身份验证步骤的更多信息可以在 [Microsoft 文档](https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash)中找到。
- en: After getting an engine, the credentials need to be sent to `pyodbc.connect`
    each time a connection is requested. One way to do this is to set up an event
    listener on the engine that adds the credential token to the dialect’s connect
    call. This is discussed more generally in [Generating dynamic authentication tokens](../core/engines.html#engines-dynamic-tokens).
    For SQL Server in particular, this is passed as an ODBC connection attribute with
    a data structure [described by Microsoft](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token).
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 获得引擎后，每次请求连接都需要将凭据发送到 `pyodbc.connect`。 一种方法是在引擎上设置事件侦听器，该事件侦听器将凭据令牌添加到方言的连接调用中。
    关于这一点的更多讨论可以在 [生成动态身份验证令牌](../core/engines.html#engines-dynamic-tokens)中找到。 尤其对于
    SQL Server，这将作为由 Microsoft 描述的 ODBC 连接属性传递[的数据结构](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token)。
- en: 'The following code snippet will create an engine that connects to an Azure
    SQL database using Azure credentials:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段将创建一个引擎，该引擎使用 Azure 凭据连接到 Azure SQL 数据库：
- en: '[PRE109]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Tip
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `Trusted_Connection` token is currently added by the SQLAlchemy pyodbc
    dialect when no username or password is present. This needs to be removed per
    Microsoft’s [documentation for Azure access tokens](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token),
    stating that a connection string when using an access token must not contain `UID`,
    `PWD`, `Authentication` or `Trusted_Connection` parameters.  #### Avoiding transaction-related
    exceptions on Azure Synapse Analytics'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '当没有用户名或密码时，SQLAlchemy pyodbc 方言当前会添加 `Trusted_Connection` 令牌。 根据 Microsoft
    的[用于 Azure 访问令牌的文档](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token)，当使用访问令牌时，连接字符串不得包含
    `UID`、`PWD`、`Authentication` 或 `Trusted_Connection` 参数，需要将其删除。 #### 在 Azure Synapse
    Analytics 上避免事务相关的异常'
- en: Azure Synapse Analytics has a significant difference in its transaction handling
    compared to plain SQL Server; in some cases an error within a Synapse transaction
    can cause it to be arbitrarily terminated on the server side, which then causes
    the DBAPI `.rollback()` method (as well as `.commit()`) to fail. The issue prevents
    the usual DBAPI contract of allowing `.rollback()` to pass silently if no transaction
    is present as the driver does not expect this condition. The symptom of this failure
    is an exception with a message resembling ‘No corresponding transaction found.
    (111214)’ when attempting to emit a `.rollback()` after an operation had a failure
    of some kind.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Synapse Analytics 在事务处理方面与普通 SQL Server 有显着差异；在某些情况下，Synapse 事务中的错误可能导致服务器端任意终止，从而导致
    DBAPI 的 `.rollback()` 方法 (以及 `.commit()`) 失败。该问题阻止了允许 `.rollback()` 在没有事务存在时静默通过的常规
    DBAPI 合同，因为驱动程序不期望出现此条件。此故障的症状是，在某些操作失败后尝试发出 `.rollback()` 后，异常消息类似于‘No corresponding
    transaction found. (111214)’。
- en: 'This specific case can be handled by passing `ignore_no_transaction_on_rollback=True`
    to the SQL Server dialect via the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function as follows:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过向 SQL Server 方言传递 `ignore_no_transaction_on_rollback=True` 参数来处理此特定情况，方法是通过[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 函数如下所示：
- en: '[PRE110]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Using the above parameter, the dialect will catch `ProgrammingError` exceptions
    raised during `connection.rollback()` and emit a warning if the error message
    contains code `111214`, however will not raise an exception.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述参数，方言将捕获在 `connection.rollback()` 期间引发的 `ProgrammingError` 异常，并在错误消息中包含代码
    `111214` 时发出警告，但不会引发异常。
- en: 'New in version 1.4.40: Added the `ignore_no_transaction_on_rollback=True` parameter.'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.40 中的新功能：添加了 `ignore_no_transaction_on_rollback=True` 参数。
- en: Enable autocommit for Azure SQL Data Warehouse (DW) connections
  id: totrans-546
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为 Azure SQL 数据仓库 (DW) 连接启用自动提交
- en: 'Azure SQL Data Warehouse does not support transactions, and that can cause
    problems with SQLAlchemy’s “autobegin” (and implicit commit/rollback) behavior.
    We can avoid these problems by enabling autocommit at both the pyodbc and engine
    levels:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 数据仓库不支持事务，这可能会导致 SQLAlchemy 的“autobegin”（以及隐式提交/回滚）行为出现问题。我们可以通过在
    pyodbc 和 engine 级别启用自动提交来避免这些问题：
- en: '[PRE111]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Avoiding sending large string parameters as TEXT/NTEXT
  id: totrans-549
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 避免将大字符串参数发送为 TEXT/NTEXT
- en: By default, for historical reasons, Microsoft’s ODBC drivers for SQL Server
    send long string parameters (greater than 4000 SBCS characters or 2000 Unicode
    characters) as TEXT/NTEXT values. TEXT and NTEXT have been deprecated for many
    years and are starting to cause compatibility issues with newer versions of SQL_Server/Azure.
    For example, see [this issue](https://github.com/mkleehammer/pyodbc/issues/835).
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因，默认情况下，Microsoft 的 SQL Server ODBC 驱动程序将长字符串参数（大于 4000 个 SBCS 字符或 2000
    个 Unicode 字符）发送为 TEXT/NTEXT 值。多年来，TEXT 和 NTEXT 已经被弃用，并且开始在新版本的 SQL_Server/Azure
    中引起兼容性问题。例如，参见[此问题](https://github.com/mkleehammer/pyodbc/issues/835)。
- en: 'Starting with ODBC Driver 18 for SQL Server we can override the legacy behavior
    and pass long strings as varchar(max)/nvarchar(max) using the `LongAsMax=Yes`
    connection string parameter:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 从 ODBC 驱动程序 18 开始，我们可以通过 `LongAsMax=Yes` 连接字符串参数覆盖传统行为，并将长字符串作为 varchar(max)/nvarchar(max)
    传递：
- en: '[PRE112]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Pyodbc Pooling / connection close behavior
  id: totrans-553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pyodbc 连接池 / 连接关闭行为
- en: 'PyODBC uses internal [pooling](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    by default, which means connections will be longer lived than they are within
    SQLAlchemy itself. As SQLAlchemy has its own pooling behavior, it is often preferable
    to disable this behavior. This behavior can only be disabled globally at the PyODBC
    module level, **before** any connections are made:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 默认使用内部[连接池](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)，这意味着连接的生命周期比在
    SQLAlchemy 本身中更长。由于 SQLAlchemy 有自己的连接池行为，通常最好禁用此行为。此行为只能在创建任何连接之前在 PyODBC 模块级别**全局**禁用：
- en: '[PRE113]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: If this variable is left at its default value of `True`, **the application will
    continue to maintain active database connections**, even when the SQLAlchemy engine
    itself fully discards a connection or if the engine is disposed.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将此变量保留在默认值 `True`，**应用程序将继续保持活动数据库连接**，即使 SQLAlchemy 引擎本身完全丢弃连接或引擎被处理掉。
- en: See also
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[pooling](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    - in the PyODBC documentation.'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接池](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    - 在 PyODBC 文档中。'
- en: Driver / Unicode Support
  id: totrans-559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序 / Unicode 支持
- en: PyODBC works best with Microsoft ODBC drivers, particularly in the area of Unicode
    support on both Python 2 and Python 3.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 最适合与微软ODBC驱动程序一起使用，特别是在Python 2和Python 3上都支持Unicode的领域。
- en: Using the FreeTDS ODBC drivers on Linux or OSX with PyODBC is **not** recommended;
    there have been historically many Unicode-related issues in this area, including
    before Microsoft offered ODBC drivers for Linux and OSX. Now that Microsoft offers
    drivers for all platforms, for PyODBC support these are recommended. FreeTDS remains
    relevant for non-ODBC drivers such as pymssql where it works very well.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议在Linux或OSX上使用FreeTDS ODBC驱动程序与PyODBC一起使用；在这个领域，包括在微软为Linux和OSX提供ODBC驱动程序之前，历史上存在许多与Unicode相关的问题。现在微软为所有平台提供驱动程序，对于PyODBC支持，建议使用这些驱动程序。FreeTDS仍然适用于非ODBC驱动程序，例如pymssql，在那里它的工作非常出色。
- en: Rowcount Support
  id: totrans-562
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行计数支持
- en: Previous limitations with the SQLAlchemy ORM’s “versioned rows” feature with
    Pyodbc have been resolved as of SQLAlchemy 2.0.5\. See the notes at [Rowcount
    Support / ORM Versioning](#mssql-rowcount-versioning).
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 至于Pyodbc与SQLAlchemy ORM的“版本化行”功能之前的限制，在SQLAlchemy 2.0.5版中已经解决。请参阅[Rowcount Support
    / ORM Versioning](#mssql-rowcount-versioning)中的说明。
- en: '### Fast Executemany Mode'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '### 快速执行多次模式'
- en: 'The PyODBC driver includes support for a “fast executemany” mode of execution
    which greatly reduces round trips for a DBAPI `executemany()` call when using
    Microsoft ODBC drivers, for **limited size batches that fit in memory**. The feature
    is enabled by setting the attribute `.fast_executemany` on the DBAPI cursor when
    an executemany call is to be used. The SQLAlchemy PyODBC SQL Server dialect supports
    this parameter by passing the `fast_executemany` parameter to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") , when using the **Microsoft ODBC driver only**:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC驱动程序包括对执行DBAPI `executemany()` 调用时大大减少往返次数的“快速执行多次”模式的支持，当使用微软ODBC驱动程序时，对于**内存中适合的有限大小批次**。通过在DBAPI游标上设置属性
    `.fast_executemany` 来启用此功能，当要使用executemany调用时。SQLAlchemy PyODBC SQL Server方言通过将
    `fast_executemany` 参数传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 来支持此参数，仅当使用**微软ODBC驱动程序时**：
- en: '[PRE114]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Changed in version 2.0.9: - the `fast_executemany` parameter now has its intended
    effect of this PyODBC feature taking effect for all INSERT statements that are
    executed with multiple parameter sets, which don’t include RETURNING. Previously,
    SQLAlchemy 2.0’s [insertmanyvalues](../glossary.html#term-insertmanyvalues) feature
    would cause `fast_executemany` to not be used in most cases even if specified.'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0.9开始更改：- `fast_executemany` 参数现在具有其预期的效果，这使得PyODBC功能在执行具有多个参数集的所有INSERT语句时生效，不包括RETURNING。之前，SQLAlchemy
    2.0的[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能通常会导致即使指定了，也大多数情况下不使用`fast_executemany`。
- en: New in version 1.3.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3版中的新功能。
- en: See also
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[fast executemany](https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany)
    - on github  ### Setinputsizes Support'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '[快速执行多次](https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany)
    - 在 github ### 设置输入大小支持'
- en: As of version 2.0, the pyodbc `cursor.setinputsizes()` method is used for all
    statement executions, except for `cursor.executemany()` calls when fast_executemany=True
    where it is not supported (assuming [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    is kept enabled, “fastexecutemany” will not take place for INSERT statements in
    any case).
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始，pyodbc `cursor.setinputsizes()` 方法用于所有语句执行，除了当fast_executemany=True时，不支持`cursor.executemany()`调用（假设[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)已启用，“fastexecutemany”不管怎样都不会对INSERT语句产生影响）。
- en: The use of `cursor.setinputsizes()` can be disabled by passing `use_setinputsizes=False`
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine").
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `use_setinputsizes=False` 传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 可以禁用`cursor.setinputsizes()`的使用。
- en: When `use_setinputsizes` is left at its default of `True`, the specific per-type
    symbols passed to `cursor.setinputsizes()` can be programmatically customized
    using the [`DialectEvents.do_setinputsizes()`](../core/events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes") hook. See that method for
    usage examples.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `use_setinputsizes` 保持默认值 `True` 时，可以通过使用 [`DialectEvents.do_setinputsizes()`](../core/events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes") 钩子来自定义传递给 `cursor.setinputsizes()`
    的每种类型符号。请参阅该方法以获取用法示例。
- en: 'Changed in version 2.0: The mssql+pyodbc dialect now defaults to using `use_setinputsizes=True`
    for all statement executions with the exception of cursor.executemany() calls
    when fast_executemany=True. The behavior can be turned off by passing `use_setinputsizes=False`
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine").  ##
    pymssql'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '从 2.0 版本开始更改：mssql+pyodbc 方言现在默认为在所有语句执行中使用`use_setinputsizes=True`，但 fast_executemany=True
    时除外，快速执行多次`cursor.executemany()` 调用。该行为可以通过将 `use_setinputsizes=False` 传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 来关闭。 ## pymssql'
- en: Support for the Microsoft SQL Server database via the pymssql driver.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 pymssql 驱动程序支持 Microsoft SQL Server 数据库。
- en: Connecting
  id: totrans-576
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE115]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: pymssql is a Python module that provides a Python DBAPI interface around [FreeTDS](https://www.freetds.org/).
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: pymssql 是一个提供围绕 [FreeTDS](https://www.freetds.org/) 的 Python DBAPI 接口的 Python
    模块。
- en: 'Changed in version 2.0.5: pymssql was restored to SQLAlchemy’s continuous integration
    testing  ## aioodbc'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '从 2.0.5 版本开始更改：pymssql 已恢复到 SQLAlchemy 的持续集成测试  ## aioodbc'
- en: Support for the Microsoft SQL Server database via the aioodbc driver.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 aioodbc 驱动程序支持 Microsoft SQL Server 数据库。
- en: DBAPI
  id: totrans-582
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for aioodbc is available
    at: [https://pypi.org/project/aioodbc/](https://pypi.org/project/aioodbc/)'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: aioodbc 的文档和下载信息（如果适用）可在此处获取：[https://pypi.org/project/aioodbc/](https://pypi.org/project/aioodbc/)
- en: Connecting
  id: totrans-584
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE116]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Support for the SQL Server database in asyncio style, using the aioodbc driver
    which itself is a thread-wrapper around pyodbc.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 以 asyncio 样式支持 SQL Server 数据库，使用 aioodbc 驱动程序，它本身是 pyodbc 的线程包装器。
- en: 'New in version 2.0.23: Added the mssql+aioodbc dialect which builds on top
    of the pyodbc and general aio* dialect architecture.'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0.23 版本开始新增：添加了在 pyodbc 和通用 aio* 方言架构之上构建的 mssql+aioodbc 方言。
- en: Using a special asyncio mediation layer, the aioodbc dialect is usable as the
    backend for the [SQLAlchemy asyncio](../orm/extensions/asyncio.html) extension
    package.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的 asyncio 中介层，aioodbc 方言可用作 [SQLAlchemy asyncio](../orm/extensions/asyncio.html)
    扩展包的后端。
- en: Most behaviors and caveats for this driver are the same as that of the pyodbc
    dialect used on SQL Server; see [PyODBC](#mssql-pyodbc) for general background.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 该驱动程序的大多数行为和注意事项与在 SQL Server 上使用的 pyodbc 方言相同；有关一般背景，请参阅 [PyODBC](#mssql-pyodbc)。
- en: 'This dialect should normally be used only with the [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine creation function; connection
    styles are otherwise equivalent to those documented in the pyodbc section:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 该方言通常仅应与 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 引擎创建函数一起使用；否则，连接样式与在 pyodbc 部分文档中记录的相同：
- en: '[PRE117]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Support for the Microsoft SQL Server database.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 支持 Microsoft SQL Server 数据库。
- en: The following table summarizes current support levels for database release versions.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了数据库发布版本的当前支持级别。
- en: '**Supported Microsoft SQL Server versions**'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持的 Microsoft SQL Server 版本**'
- en: '| Support type | Versions |'
  id: totrans-596
  prefs: []
  type: TYPE_TB
  zh: '| 支持类型 | 版本 |'
- en: '| --- | --- |'
  id: totrans-597
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Fully tested in CI](index.html#term-Fully-tested-in-CI) | 2017 |'
  id: totrans-598
  prefs: []
  type: TYPE_TB
  zh: '| [在 CI 中进行全面测试](index.html#term-Fully-tested-in-CI) | 2017 |'
- en: '| [Normal support](index.html#term-Normal-support) | 2012+ |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
  zh: '| [普通支持](index.html#term-Normal-support) | 2012+ |'
- en: '| [Best effort](index.html#term-Best-effort) | 2005+ |'
  id: totrans-600
  prefs: []
  type: TYPE_TB
  zh: '| [尽力而为](index.html#term-Best-effort) | 2005+ |'
- en: DBAPI Support
  id: totrans-601
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DBAPI 支持
- en: The following dialect/DBAPI options are available. Please refer to individual
    DBAPI sections for connect information.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 提供以下方言/DBAPI 选项。请参阅各个 DBAPI 部分以获取连接信息。
- en: '[PyODBC](#module-sqlalchemy.dialects.mssql.pyodbc)'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyODBC](#module-sqlalchemy.dialects.mssql.pyodbc)'
- en: '[pymssql](#module-sqlalchemy.dialects.mssql.pymssql)'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pymssql](#module-sqlalchemy.dialects.mssql.pymssql)'
- en: '[aioodbc](#module-sqlalchemy.dialects.mssql.aioodbc)'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[aioodbc](#module-sqlalchemy.dialects.mssql.aioodbc)'
- en: '## External Dialects'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '## 外部方言'
- en: In addition to the above DBAPI layers with native SQLAlchemy support, there
    are third-party dialects for other DBAPI layers that are compatible with SQL Server.
    See the “External Dialects” list on the [Dialects](index.html) page.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 除了具有本地 SQLAlchemy 支持的上述 DBAPI 层之外，还有用于其他与 SQL Server 兼容的 DBAPI 层的第三方方言。请参阅 [方言](index.html)
    页面上的“外部方言”列表。
- en: '## Auto Increment Behavior / IDENTITY Columns'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '## 自动递增行为 / IDENTITY 列'
- en: 'SQL Server provides so-called “auto incrementing” behavior using the `IDENTITY`
    construct, which can be placed on any single integer column in a table. SQLAlchemy
    considers `IDENTITY` within its default “autoincrement” behavior for an integer
    primary key column, described at [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column"). This means that by default, the first integer primary
    key column in a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    will be considered to be the identity column - unless it is associated with a
    [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    - and will generate DDL as such:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server使用`IDENTITY`构造提供所谓的“自动增量”行为，该构造可以放置在表中的任何单个整数列上。SQLAlchemy将`IDENTITY`考虑在其整数主键列的默认“autoincrement”行为中，该行为在[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")中描述。这意味着默认情况下，[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中的第一个整数主键列将被视为标识列 - 除非它与[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")相关联 - 并且将生成DDL如下：
- en: '[PRE118]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The above example will generate DDL as:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例将生成DDL如下：
- en: '[PRE119]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'For the case where this default generation of `IDENTITY` is not desired, specify
    `False` for the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag, on the first integer primary key column:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不希望使用此默认生成的`IDENTITY`的情况，在第一个整数主键列上指定[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")标志为`False`：
- en: '[PRE120]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'To add the `IDENTITY` keyword to a non-primary key column, specify `True` for
    the [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag on the desired [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, and ensure that [`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") is set to `False` on any integer primary key column:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`IDENTITY`关键字添加到非主键列，请在所需的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象上指定[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")标志为`True`，并确保在任何整数主键列上将[`Column.autoincrement`](../core/metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")设置为`False`：
- en: '[PRE121]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Changed in version 1.4: Added [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct in a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to specify the start and increment parameters of an
    IDENTITY. These replace the use of the [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object in order to specify these values.'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4更改：在[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")中添加了[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")构造，用于指定`IDENTITY`的起始值和增量参数。这些参数取代了使用[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象来指定这些值。
- en: 'Deprecated since version 1.4: The `mssql_identity_start` and `mssql_identity_increment`
    parameters to [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    are deprecated and should we replaced by an [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object. Specifying both ways of configuring an IDENTITY
    will result in a compile error. These options are also no longer returned as part
    of the `dialect_options` key in [`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"). Use the information in
    the `identity` key instead.'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4弃用：[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的`mssql_identity_start`和`mssql_identity_increment`参数已弃用，应该用[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")对象替换。指定两种配置`IDENTITY`的方式将导致编译错误。这些选项也不再作为[`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")中`dialect_options`键的一部分返回。请改为使用`identity`键中的信息。
- en: 'Deprecated since version 1.3: The use of [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to specify IDENTITY characteristics is deprecated
    and will be removed in a future release. Please use the [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object parameters [`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") and [`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity").'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3起弃用：使用[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")指定IDENTITY特性已被弃用，并将在将来的版本中删除。请使用[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")对象参数[`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity")和[`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity")。
- en: 'Changed in version 1.4: Removed the ability to use a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object to modify IDENTITY characteristics. [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") objects now only manipulate true T-SQL SEQUENCE
    types.'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：移除了使用[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象修改IDENTITY特性的能力。现在，[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象仅操作真正的T-SQL SEQUENCE类型。
- en: Note
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There can only be one IDENTITY column on the table. When using `autoincrement=True`
    to enable the IDENTITY keyword, SQLAlchemy does not guard against multiple columns
    specifying the option simultaneously. The SQL Server database will instead reject
    the `CREATE TABLE` statement.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 表上只能有一个IDENTITY列。当使用`autoincrement=True`启用IDENTITY关键字时，SQLAlchemy不会阻止多个列同时指定该选项。相反，SQL
    Server数据库将拒绝`CREATE TABLE`语句。
- en: Note
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An INSERT statement which attempts to provide a value for a column that is marked
    with IDENTITY will be rejected by SQL Server. In order for the value to be accepted,
    a session-level option “SET IDENTITY_INSERT” must be enabled. The SQLAlchemy SQL
    Server dialect will perform this operation automatically when using a core [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct; if the execution specifies a value
    for the IDENTITY column, the “IDENTITY_INSERT” option will be enabled for the
    span of that statement’s invocation.However, this scenario is not high performing
    and should not be relied upon for normal use. If a table doesn’t actually require
    IDENTITY behavior in its integer primary key column, the keyword should be disabled
    when creating the table by ensuring that `autoincrement=False` is set.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试为标记为IDENTITY的列提供值的INSERT语句将被SQL Server拒绝。为了接受该值，必须启用会话级选项“SET IDENTITY_INSERT”。当使用核心[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造时，SQLAlchemy SQL Server方言将在执行指定IDENTITY列的值时自动执行此操作；如果执行为IDENTITY列指定了一个值，则“IDENTITY_INSERT”选项将在该语句调用的范围内启用。然而，这种情况的性能不高，不应该依赖于常规使用。如果表实际上不需要IDENTITY行为在其整数主键列中，创建表时应禁用该关键字，方法是确保`autoincrement=False`被设置。
- en: Controlling “Start” and “Increment”
  id: totrans-625
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制“开始”和“增量”
- en: 'Specific control over the “start” and “increment” values for the `IDENTITY`
    generator are provided using the [`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") and [`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity") parameters passed to the [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将参数[`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity")和[`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity")传递给[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")对象提供了对“开始”和“增量”值的特定控制：
- en: '[PRE122]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The CREATE TABLE for the above [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object would be:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的CREATE
    TABLE将是：
- en: '[PRE123]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Note
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    object supports many other parameter in addition to `start` and `increment`. These
    are not supported by SQL Server and will be ignored when generating the CREATE
    TABLE ddl.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")对象支持许多其他参数，除了`start`和`increment`之外。这些参数不受SQL
    Server支持，在生成CREATE TABLE ddl时将被忽略。'
- en: 'Changed in version 1.3.19: The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object is now used to affect the `IDENTITY` generator
    for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    under SQL Server. Previously, the [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object was used. As SQL Server now supports real
    sequences as a separate construct, [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") will be functional in the normal way starting from
    SQLAlchemy version 1.4.'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.19 中的更改：在 SQL Server 下，现在使用 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 对象来影响 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的 `IDENTITY` 生成器。之前使用的是 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 对象。由于 SQL Server 现在支持将实际序列作为一个独立的构造，因此 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 将从 SQLAlchemy 版本 1.4 开始以正常方式运作。
- en: Using IDENTITY with Non-Integer numeric types
  id: totrans-633
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用非整数数值类型的 IDENTITY
- en: 'SQL Server also allows `IDENTITY` to be used with `NUMERIC` columns. To implement
    this pattern smoothly in SQLAlchemy, the primary datatype of the column should
    remain as `Integer`, however the underlying implementation type deployed to the
    SQL Server database can be specified as `Numeric` using [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant"):'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 还允许将 `IDENTITY` 用于 `NUMERIC` 列。为了在 SQLAlchemy 中平滑实现这种模式，在列的主要数据类型应保持为
    `Integer`，但是可以使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 来指定部署到 SQL Server 数据库的底层实现类型为 `Numeric`：
- en: '[PRE124]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: In the above example, `Integer().with_variant()` provides clear usage information
    that accurately describes the intent of the code. The general restriction that
    `autoincrement` only applies to `Integer` is established at the metadata level
    and not at the per-dialect level.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`Integer().with_variant()` 提供了明确的使用信息，准确描述了代码的意图。将 `autoincrement` 仅适用于
    `Integer` 的一般限制建立在元数据级别而不是每个方言级别。
- en: 'When using the above pattern, the primary key identifier that comes back from
    the insertion of a row, which is also the value that would be assigned to an ORM
    object such as `TestTable` above, will be an instance of `Decimal()` and not `int`
    when using SQL Server. The numeric return type of the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type can be changed to return floats by passing False
    to [`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric"). To normalize the return type of the above `Numeric(10,
    0)` to return Python ints (which also support “long” integer values in Python
    3), use [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") as follows:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述模式时，从插入行返回的主键标识符（也是将分配给类似于上面的 `TestTable` 的 ORM 对象的值）将是 `Decimal()` 的实例，而不是使用
    SQL Server 时的 `int`。通过将 False 传递给 [`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric")，可以将 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") 类型的数值返回类型更改为浮点数。要将上述 `Numeric(10, 0)` 的返回类型规范化为返回
    Python 整数（在 Python 3 中也支持“长”整数值），请使用 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 如下所示：
- en: '[PRE125]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '### INSERT behavior'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '### 插入行为'
- en: Handling of the `IDENTITY` column at INSERT time involves two key techniques.
    The most common is being able to fetch the “last inserted value” for a given `IDENTITY`
    column, a process which SQLAlchemy performs implicitly in many cases, most importantly
    within the ORM.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 在 INSERT 时处理 `IDENTITY` 列涉及两个关键技术。最常见的是能够获取给定 `IDENTITY` 列的“最后插入值”，SQLAlchemy
    在许多情况下都会隐式执行这个过程，最重要的是在 ORM 中。
- en: 'The process for fetching this value has several variants:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 获取此值的过程有几种变体：
- en: 'In the vast majority of cases, RETURNING is used in conjunction with INSERT
    statements on SQL Server in order to get newly generated primary key values:'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在绝大多数情况下，在 SQL Server 上与 INSERT 语句一起使用 RETURNING 以获取新生成的主键值：
- en: '[PRE126]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: As of SQLAlchemy 2.0, the [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature is also used by default to optimize many-row INSERT statements; for SQL
    Server the feature takes place for both RETURNING and-non RETURNING INSERT statements.
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 2.0开始，默认还使用[INSERT语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues)功能来优化多行INSERT语句；对于SQL
    Server，该功能适用于RETURNING和非RETURNING INSERT语句。
- en: 'Changed in version 2.0.10: The [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature for SQL Server was temporarily disabled for SQLAlchemy version 2.0.9 due
    to issues with row ordering. As of 2.0.10 the feature is re-enabled, with special
    case handling for the unit of work’s requirement for RETURNING to be ordered.'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0.10开始更改：由于行排序问题，SQLAlchemy版本2.0.9暂时禁用了SQL Server的[INSERT语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues)功能。从2.0.10开始，该功能已重新启用，并对工作单元对RETURNING的排序要求进行了特殊处理。
- en: 'When RETURNING is not available or has been disabled via `implicit_returning=False`,
    either the `scope_identity()` function or the `@@identity` variable is used; behavior
    varies by backend:'
  id: totrans-646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`RETURNING`不可用或通过`implicit_returning=False`禁用时，将使用`scope_identity()`函数或`@@identity`变量；后端的行为各不相同：
- en: 'when using PyODBC, the phrase `; select scope_identity()` will be appended
    to the end of the INSERT statement; a second result set will be fetched in order
    to receive the value. Given a table as:'
  id: totrans-647
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PyODBC 时，短语`; select scope_identity()`将被附加到插入语句的末尾；为了接收值，将获取第二个结果集。给定一个表如下：
- en: '[PRE127]'
  id: totrans-648
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'an INSERT will look like:'
  id: totrans-649
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 插入操作看起来像是：
- en: '[PRE128]'
  id: totrans-650
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Other dialects such as pymssql will call upon `SELECT scope_identity() AS lastrowid`
    subsequent to an INSERT statement. If the flag `use_scope_identity=False` is passed
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"),
    the statement `SELECT @@identity AS lastrowid` is used instead.
  id: totrans-651
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他方言，如pymssql，在INSERT语句后调用`SELECT scope_identity() AS lastrowid`。如果将标志`use_scope_identity=False`传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，则将改为使用语句`SELECT @@identity AS lastrowid`。
- en: 'A table that contains an `IDENTITY` column will prohibit an INSERT statement
    that refers to the identity column explicitly. The SQLAlchemy dialect will detect
    when an INSERT construct, created using a core [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct (not a plain string SQL), refers
    to the identity column, and in this case will emit `SET IDENTITY_INSERT ON` prior
    to the insert statement proceeding, and `SET IDENTITY_INSERT OFF` subsequent to
    the execution. Given this example:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 包含`IDENTITY`列的表将禁止明确引用标识列的插入语句。SQLAlchemy方言将检测到当使用核心[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造创建的INSERT构造引用标识列时（而不是普通的字符串SQL），在这种情况下，将在插入语句执行之前发出`SET
    IDENTITY_INSERT ON`，并在执行后发出`SET IDENTITY_INSERT OFF`。给定此示例：
- en: '[PRE129]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The above column will be created with IDENTITY, however the INSERT statement
    we emit is specifying explicit values. In the echo output we can see how SQLAlchemy
    handles this:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列将使用IDENTITY创建，但我们发出的INSERT语句指定了显式值。在回显输出中，我们可以看到SQLAlchemy如何处理这个问题：
- en: '[PRE130]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: This is an auxiliary use case suitable for testing and bulk insert scenarios.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个适用于测试和批量插入场景的辅助用例。
- en: Controlling “Start” and “Increment”
  id: totrans-657
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制“开始”和“增量”
- en: 'Specific control over the “start” and “increment” values for the `IDENTITY`
    generator are provided using the [`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") and [`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity") parameters passed to the [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object:'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传递给[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")对象的[`Identity.start`](../core/defaults.html#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity")和[`Identity.increment`](../core/defaults.html#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity")参数提供对`IDENTITY`生成器的“开始”和“增量”值的特定控制：
- en: '[PRE131]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The CREATE TABLE for the above [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object would be:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的CREATE
    TABLE将是：
- en: '[PRE132]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Note
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    object supports many other parameter in addition to `start` and `increment`. These
    are not supported by SQL Server and will be ignored when generating the CREATE
    TABLE ddl.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")对象除了`start`和`increment`之外还支持许多其他参数。这些参数在SQL
    Server中不受支持，在生成CREATE TABLE ddl时将被忽略。'
- en: 'Changed in version 1.3.19: The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") object is now used to affect the `IDENTITY` generator
    for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    under SQL Server. Previously, the [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object was used. As SQL Server now supports real
    sequences as a separate construct, [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") will be functional in the normal way starting from
    SQLAlchemy version 1.4.'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3.19开始更改：[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")对象现在用于影响SQL Server下的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的`IDENTITY`生成器。以前，使用的是[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象。由于SQL Server现在支持真实的序列作为单独的构造，因此从SQLAlchemy版本1.4开始，[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")将以正常的方式运行。
- en: Using IDENTITY with Non-Integer numeric types
  id: totrans-665
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用非整数数值类型的IDENTITY
- en: 'SQL Server also allows `IDENTITY` to be used with `NUMERIC` columns. To implement
    this pattern smoothly in SQLAlchemy, the primary datatype of the column should
    remain as `Integer`, however the underlying implementation type deployed to the
    SQL Server database can be specified as `Numeric` using [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant"):'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server还允许将`IDENTITY`与`NUMERIC`列一起使用。要在SQLAlchemy中顺利实现此模式，列的主要数据类型应保持为`Integer`，但是可以使用[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")指定部署到SQL Server数据库的底层实现类型为`Numeric`：
- en: '[PRE133]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: In the above example, `Integer().with_variant()` provides clear usage information
    that accurately describes the intent of the code. The general restriction that
    `autoincrement` only applies to `Integer` is established at the metadata level
    and not at the per-dialect level.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`Integer().with_variant()`提供了清晰的使用信息，准确描述了代码的意图。`autoincrement`仅适用于`Integer`的一般限制是在元数据级别而不是在每个方言级别上建立的。
- en: 'When using the above pattern, the primary key identifier that comes back from
    the insertion of a row, which is also the value that would be assigned to an ORM
    object such as `TestTable` above, will be an instance of `Decimal()` and not `int`
    when using SQL Server. The numeric return type of the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type can be changed to return floats by passing False
    to [`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric"). To normalize the return type of the above `Numeric(10,
    0)` to return Python ints (which also support “long” integer values in Python
    3), use [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") as follows:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用上述模式时，从插入行返回的主键标识符，也就是将被分配给诸如上述`TestTable`的ORM对象的值，当使用SQL Server时将是`Decimal()`的实例，而不是`int`。
    [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")类型的数值返回类型可以通过将False传递给[`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric")来更改为返回浮点数。要将上述`Numeric(10, 0)`的返回类型规范化为返回Python整数（在Python
    3中也支持“long”整数值），请使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")如下所示：
- en: '[PRE134]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '### INSERT behavior'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '### 插入行为'
- en: Handling of the `IDENTITY` column at INSERT time involves two key techniques.
    The most common is being able to fetch the “last inserted value” for a given `IDENTITY`
    column, a process which SQLAlchemy performs implicitly in many cases, most importantly
    within the ORM.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 在INSERT时处理`IDENTITY`列涉及两种关键技术。最常见的是能够获取给定`IDENTITY`列的“最后插入的值”，这是SQLAlchemy在许多情况下隐式执行的过程，最重要的是在ORM中。
- en: 'The process for fetching this value has several variants:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 获取此值的过程有几种变体：
- en: 'In the vast majority of cases, RETURNING is used in conjunction with INSERT
    statements on SQL Server in order to get newly generated primary key values:'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在绝大多数情况下，RETURNING与SQL Server上的INSERT语句一起使用，以获取新生成的主键值：
- en: '[PRE135]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: As of SQLAlchemy 2.0, the [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature is also used by default to optimize many-row INSERT statements; for SQL
    Server the feature takes place for both RETURNING and-non RETURNING INSERT statements.
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 2.0开始，默认还使用[“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)功能来优化多行INSERT语句；对于SQL
    Server，该功能适用于RETURNING和非RETURNING INSERT语句。
- en: 'Changed in version 2.0.10: The [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature for SQL Server was temporarily disabled for SQLAlchemy version 2.0.9 due
    to issues with row ordering. As of 2.0.10 the feature is re-enabled, with special
    case handling for the unit of work’s requirement for RETURNING to be ordered.'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0.10开始更改：由于行排序问题，SQLAlchemy版本2.0.9暂时禁用了SQL Server的[“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)功能。从2.0.10开始，该功能重新启用，并针对工作单元对RETURNING的排序要求进行特殊处理。
- en: 'When RETURNING is not available or has been disabled via `implicit_returning=False`,
    either the `scope_identity()` function or the `@@identity` variable is used; behavior
    varies by backend:'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当RETURNING不可用或通过`implicit_returning=False`禁用时，将使用`scope_identity()`函数或`@@identity`变量；后端的行为各不相同：
- en: 'when using PyODBC, the phrase `; select scope_identity()` will be appended
    to the end of the INSERT statement; a second result set will be fetched in order
    to receive the value. Given a table as:'
  id: totrans-679
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PyODBC时，短语`; select scope_identity()`将附加到INSERT语句的末尾；为了接收值，将获取第二个结果集。假设有一个表：
- en: '[PRE136]'
  id: totrans-680
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'an INSERT will look like:'
  id: totrans-681
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个INSERT看起来像：
- en: '[PRE137]'
  id: totrans-682
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Other dialects such as pymssql will call upon `SELECT scope_identity() AS lastrowid`
    subsequent to an INSERT statement. If the flag `use_scope_identity=False` is passed
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"),
    the statement `SELECT @@identity AS lastrowid` is used instead.
  id: totrans-683
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他方言，如pymssql，在INSERT语句后将调用`SELECT scope_identity() AS lastrowid`。如果将标志`use_scope_identity=False`传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，则将使用语句`SELECT @@identity AS lastrowid`。
- en: 'A table that contains an `IDENTITY` column will prohibit an INSERT statement
    that refers to the identity column explicitly. The SQLAlchemy dialect will detect
    when an INSERT construct, created using a core [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct (not a plain string SQL), refers
    to the identity column, and in this case will emit `SET IDENTITY_INSERT ON` prior
    to the insert statement proceeding, and `SET IDENTITY_INSERT OFF` subsequent to
    the execution. Given this example:'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 包含`IDENTITY`列的表将禁止引用显式标识列的INSERT语句。当SQLAlchemy方言检测到使用核心[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造（而不是纯字符串SQL）创建的INSERT构造引用标识列时，在这种情况下，将在继续插入语句之前发出`SET
    IDENTITY_INSERT ON`，并在执行后继续发出`SET IDENTITY_INSERT OFF`。给出这个例子：
- en: '[PRE138]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The above column will be created with IDENTITY, however the INSERT statement
    we emit is specifying explicit values. In the echo output we can see how SQLAlchemy
    handles this:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列将使用IDENTITY创建，但我们发出的INSERT语句指定了显式值。在回显输出中，我们可以看到SQLAlchemy如何处理这个问题：
- en: '[PRE139]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: This is an auxiliary use case suitable for testing and bulk insert scenarios.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个适用于测试和批量插入场景的辅助用例。
- en: SEQUENCE support
  id: totrans-689
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SEQUENCE支持
- en: 'The [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object creates “real” sequences, i.e., `CREATE SEQUENCE`:'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")对象创建“真实”序列，即`CREATE
    SEQUENCE`：'
- en: '[PRE140]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: For integer primary key generation, SQL Server’s `IDENTITY` construct should
    generally be preferred vs. sequence.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 对于整数主键生成，通常应优先选择SQL Server的`IDENTITY`构造而不是序列。
- en: Tip
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The default start value for T-SQL is `-2**63` instead of 1 as in most other
    SQL databases. Users should explicitly set the [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") to 1 if that’s the expected default:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: T-SQL的默认起始值为`-2**63`，而不是大多数其他SQL数据库中的1。如果预期默认值是1，则用户应明确设置[`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence")：
- en: '[PRE141]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'New in version 1.4: added SQL Server support for [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：为[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")添加了对SQL
    Server的支持
- en: 'Changed in version 2.0: The SQL Server dialect will no longer implicitly render
    “START WITH 1” for `CREATE SEQUENCE`, which was the behavior first implemented
    in version 1.4.'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0版本中更改：SQL Server方言将不再隐式呈现“START WITH 1”用于`CREATE SEQUENCE`，这是在1.4版本中首次实现的行为。
- en: MAX on VARCHAR / NVARCHAR
  id: totrans-698
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VARCHAR / NVARCHAR上的MAX
- en: SQL Server supports the special string “MAX” within the [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR") and [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR") datatypes, to indicate “maximum length possible”.
    The dialect currently handles this as a length of “None” in the base type, rather
    than supplying a dialect-specific version of these types, so that a base type
    specified such as `VARCHAR(None)` can assume “unlengthed” behavior on more than
    one backend without using dialect-specific types.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server支持特殊字符串“MAX”在[`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR")和[`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR")数据类型中，以指示“可能的最大长度”。方言当前将此处理为基本类型中长度为“None”，而不是提供这些类型的特定于方言的版本，因此可以假定指定为`VARCHAR(None)`之类的基本类型在不使用特定于方言的类型的情况下，在多个后端上表现出“无长度”的行为。
- en: 'To build a SQL Server VARCHAR or NVARCHAR with MAX length, use None:'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建具有MAX长度的SQL Server VARCHAR或NVARCHAR，请使用None：
- en: '[PRE142]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Collation Support
  id: totrans-702
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串排序支持
- en: 'Character collations are supported by the base string types, specified by the
    string argument “collation”:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 基本字符串类型支持字符排序，由字符串参数“collation”指定：
- en: '[PRE143]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'When such a column is associated with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), the CREATE TABLE statement for this column will yield:'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 当此列与[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联时，该列的CREATE
    TABLE语句将产生：
- en: '[PRE144]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: LIMIT/OFFSET Support
  id: totrans-707
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LIMIT/OFFSET支持
- en: MSSQL has added support for LIMIT / OFFSET as of SQL Server 2012, via the “OFFSET
    n ROWS” and “FETCH NEXT n ROWS” clauses. SQLAlchemy supports these syntaxes automatically
    if SQL Server 2012 or greater is detected.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL从SQL Server 2012开始增加了对LIMIT / OFFSET的支持，通过“OFFSET n ROWS”和“FETCH NEXT n
    ROWS”子句。如果检测到SQL Server 2012或更高版本，则SQLAlchemy会自动支持这些语法。
- en: 'Changed in version 1.4: support added for SQL Server “OFFSET n ROWS” and “FETCH
    NEXT n ROWS” syntax.'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中更改：增加了对SQL Server“OFFSET n ROWS”和“FETCH NEXT n ROWS”语法的支持。
- en: 'For statements that specify only LIMIT and no OFFSET, all versions of SQL Server
    support the TOP keyword. This syntax is used for all SQL Server versions when
    no OFFSET clause is present. A statement such as:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅指定LIMIT而不指定OFFSET的语句，所有版本的SQL Server都支持TOP关键字。当没有OFFSET子句时，此语法用于所有SQL Server版本。例如这样的语句：
- en: '[PRE145]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'will render similarly to:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 将类似于以下内容呈现：
- en: '[PRE146]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'For versions of SQL Server prior to SQL Server 2012, a statement that uses
    LIMIT and OFFSET, or just OFFSET alone, will be rendered using the `ROW_NUMBER()`
    window function. A statement such as:'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQL Server 2012之前的版本，使用LIMIT和OFFSET或仅使用OFFSET的语句将使用`ROW_NUMBER()`窗口函数呈现。例如这样的语句：
- en: '[PRE147]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'will render similarly to:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 将类似于以下内容呈现：
- en: '[PRE148]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Note that when using LIMIT and/or OFFSET, whether using the older or newer SQL
    Server syntaxes, the statement must have an ORDER BY as well, else a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") is raised.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，无论是使用旧版还是新版SQL Server语法，使用LIMIT和/或OFFSET时，语句必须也有ORDER BY，否则会引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '## DDL Comment Support'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '## DDL注释支持'
- en: Comment support, which includes DDL rendering for attributes such as [`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") and [`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column"), as well as the ability to reflect these comments,
    is supported assuming a supported version of SQL Server is in use. If a non-supported
    version such as Azure Synapse is detected at first-connect time (based on the
    presence of the `fn_listextendedproperty` SQL function), comment support including
    rendering and table-comment reflection is disabled, as both features rely upon
    SQL Server stored procedures and functions that are not available on all backend
    types.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 支持注释，包括对[`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table")和[`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column")等属性的DDL呈现，以及反映这些注释的能力，假定正在使用受支持的SQL Server版本。如果在首次连接时检测到不受支持的版本（例如Azure
    Synapse）（基于`fn_listextendedproperty` SQL函数的存在），则会禁用注释支持，包括呈现和表注释反射，因为这两个功能依赖于并非所有后端类型都可用的SQL
    Server存储过程和函数。
- en: 'To force comment support to be on or off, bypassing autodetection, set the
    parameter `supports_comments` within [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制开启或关闭注释支持，绕过自动检测，请在 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 中设置参数 `supports_comments`：
- en: '[PRE149]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'New in version 2.0: Added support for table and column comments for the SQL
    Server dialect, including DDL generation and reflection.'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中：增加了对 SQL Server 方言的表和列注释的支持，包括 DDL 生成和反射。
- en: '## Transaction Isolation Level'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '## 事务隔离级别'
- en: All SQL Server dialects support setting of transaction isolation level both
    via a dialect-specific parameter [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") accepted by [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), as well as the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") argument as passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). This feature works by issuing
    the command `SET TRANSACTION ISOLATION LEVEL <level>` for each new connection.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SQL Server 方言都支持通过方言特定参数[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")（由[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 接受）以及传递给 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 的[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数来设置事务隔离级别。该功能通过为每个新连接发出命令
    `SET TRANSACTION ISOLATION LEVEL <level>` 来实现。
- en: 'To set isolation level using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    设置隔离级别：
- en: '[PRE150]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'To set using per-connection execution options:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 使用每个连接的执行选项来设置：
- en: '[PRE151]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Valid values for `isolation_level` include:'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '`isolation_level` 的有效值包括：'
- en: '`AUTOCOMMIT` - pyodbc / pymssql-specific'
  id: totrans-731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT` - pyodbc / pymssql 特有'
- en: '`READ COMMITTED`'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`SNAPSHOT` - specific to SQL Server'
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SNAPSHOT` - SQL Server 特有'
- en: There are also more options for isolation level configurations, such as “sub-engine”
    objects linked to a main [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which each apply different isolation level settings.
    See the discussion at [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)
    for background.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多关于隔离级别配置的选项，例如与主[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联的“子引擎”对象，每个对象都应用不同的隔离级别设置。请参阅[设置事务隔离级别，包括 DBAPI 自动提交](../core/connections.html#dbapi-autocommit)的讨论以获取更多背景信息。
- en: See also
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括 DBAPI 自动提交](../core/connections.html#dbapi-autocommit)'
- en: '## Temporary Table / Resource Reset for Connection Pooling'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '## 连接池的临时表 / 资源重置'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    connection pool implementation used by the SQLAlchemy [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object includes [reset on return](../core/pooling.html#pool-reset-on-return)
    behavior that will invoke the DBAPI `.rollback()` method when connections are
    returned to the pool. While this rollback will clear out the immediate state used
    by the previous transaction, it does not cover a wider range of session-level
    state, including temporary tables as well as other server state such as prepared
    statement handles and statement caches. An undocumented SQL Server procedure known
    as `sp_reset_connection` is known to be a workaround for this issue which will
    reset most of the session state that builds up on a connection, including temporary
    tables.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象使用的 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    连接池实现包含 [返回时重置](../core/pooling.html#pool-reset-on-return) 行为，当连接返回到池中时将调用 DBAPI
    的`.rollback()` 方法。虽然此回滚会清除前一个事务使用的即时状态，但它不涵盖更广泛范围的会话级状态，包括临时表以及其他服务器状态，如准备好的语句句柄和语句缓存。一个名为`sp_reset_connection`的未记录的
    SQL Server 程序被认为是此问题的解决方法，它将重置建立在连接上的大部分会话状态，包括临时表。
- en: 'To install `sp_reset_connection` as the means of performing reset-on-return,
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook may be used, as demonstrated
    in the example below. The [`create_engine.pool_reset_on_return`](../core/engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`sp_reset_connection`安装为执行返回时重置的方法，可以使用 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件钩子，如下例所示。将 [`create_engine.pool_reset_on_return`](../core/engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") 参数设置为`None`，以便自定义方案可以完全替换默认行为。自定义钩子实现在任何情况下调用`.rollback()`，因为通常重要的是
    DBAPI 自身的提交/回滚跟踪将保持与事务状态一致：
- en: '[PRE152]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0.0b3 版中更改：为 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件添加了额外的状态参数，并且还确保对所有“重置”事件进行调用，因此它适用于自定义“重置”处理程序的地方。先前使用
    [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") 处理程序的方案仍然可用。
- en: See also
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reset On Return](../core/pooling.html#pool-reset-on-return) - in the [Connection
    Pooling](../core/pooling.html) documentation'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回时重置](../core/pooling.html#pool-reset-on-return) - 在 [连接池](../core/pooling.html)
    文档中'
- en: Nullability
  id: totrans-747
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可空性
- en: 'MSSQL has support for three levels of column nullability. The default nullability
    allows nulls and is explicit in the CREATE TABLE construct:'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 支持三个级别的列可空性。默认的可空性允许空值，并且在 CREATE TABLE 构造中是显式的：
- en: '[PRE153]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'If `nullable=None` is specified then no specification is made. In other words
    the database’s configured default is used. This will render:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了`nullable=None`，则不做任何规定。换句话说，将使用数据库配置的默认值。这将呈现为：
- en: '[PRE154]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: If `nullable` is `True` or `False` then the column will be `NULL` or `NOT NULL`
    respectively.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`nullable`为`True`或`False`，则列将分别为`NULL`或`NOT NULL`。
- en: Date / Time Handling
  id: totrans-753
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期/时间处理
- en: DATE and TIME are supported. Bind parameters are converted to datetime.datetime()
    objects as required by most MSSQL drivers, and results are processed from strings
    if needed. The DATE and TIME types are not available for MSSQL 2005 and previous
    - if a server version below 2008 is detected, DDL for these types will be issued
    as DATETIME.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 支持 DATE 和 TIME。根据大多数 MSSQL 驱动程序的要求，绑定参数将转换为 datetime.datetime() 对象，并且如果需要的话，结果将从字符串中处理。对于
    MSSQL 2005 及之前版本，不可用 DATE 和 TIME 类型 - 如果检测到低于 2008 的服务器版本，则将为这些类型发出 DDL 作为 DATETIME。
- en: '## Large Text/Binary Type Deprecation'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '## 大文本/二进制类型弃用'
- en: Per [SQL Server 2012/2014 Documentation](https://technet.microsoft.com/en-us/library/ms187993.aspx),
    the `NTEXT`, `TEXT` and `IMAGE` datatypes are to be removed from SQL Server in
    a future release. SQLAlchemy normally relates these types to the [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), [`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 [SQL Server 2012/2014 文档](https://technet.microsoft.com/en-us/library/ms187993.aspx)，`NTEXT`、`TEXT`
    和 `IMAGE` 数据类型将在将来的发布中从 SQL Server 中删除。SQLAlchemy 通常将这些类型关联到 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")、[`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 和 [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") 数据类型。
- en: 'In order to accommodate this change, a new flag `deprecate_large_types` is
    added to the dialect, which will be automatically set based on detection of the
    server version in use, if not otherwise set by the user. The behavior of this
    flag is as follows:'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应这一变化，方言新增了一个名为 `deprecate_large_types` 的新标志，该标志将根据正在使用的服务器版本的检测自动设置，如果用户未设置其他值的话。该标志的行为如下：
- en: When this flag is `True`, the [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), [`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes, when used to render DDL, will render
    the types `NVARCHAR(max)`, `VARCHAR(max)`, and `VARBINARY(max)`, respectively.
    This is a new behavior as of the addition of this flag.
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当此标志为 `True` 时，[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")、[`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 和 [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") 数据类型在用于渲染 DDL 时，将分别呈现类型 `NVARCHAR(max)`、`VARCHAR(max)`
    和 `VARBINARY(max)`。这是此标志添加后的新行为。
- en: When this flag is `False`, the [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), [`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes, when used to render DDL, will render
    the types `NTEXT`, `TEXT`, and `IMAGE`, respectively. This is the long-standing
    behavior of these types.
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当此标志为 `False` 时，[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")、[`TextClause`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 和 [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") 数据类型在用于渲染 DDL 时，将分别呈现类型 `NTEXT`、`TEXT` 和 `IMAGE`。这是这些类型的长期行为。
- en: The flag begins with the value `None`, before a database connection is established.
    If the dialect is used to render DDL without the flag being set, it is interpreted
    the same as `False`.
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志在建立数据库连接之前以值 `None` 开始。如果方言在未设置标志的情况下用于渲染 DDL，则其解释方式与 `False` 相同。
- en: On first connection, the dialect detects if SQL Server version 2012 or greater
    is in use; if the flag is still at `None`, it sets it to `True` or `False` based
    on whether 2012 or greater is detected.
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一次连接时，方言会检测是否正在使用 SQL Server 2012 或更高版本；如果标志仍处于 `None`，则根据是否检测到 2012 或更高版本来设置为
    `True` 或 `False`。
- en: 'The flag can be set to either `True` or `False` when the dialect is created,
    typically via [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当创建方言时，可以将标志设置为 `True` 或 `False`，通常通过 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 完成：
- en: '[PRE155]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Complete control over whether the “old” or “new” types are rendered is available
    in all SQLAlchemy versions by using the UPPERCASE type objects instead: [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR"), [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"), [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY"), [`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"), [`NTEXT`](#sqlalchemy.dialects.mssql.NTEXT "sqlalchemy.dialects.mssql.NTEXT"),
    [`IMAGE`](#sqlalchemy.dialects.mssql.IMAGE "sqlalchemy.dialects.mssql.IMAGE")
    will always remain fixed and always output exactly that type.'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Complete control over whether the “old” or “new” types are rendered is available
    in all SQLAlchemy versions by using the UPPERCASE type objects instead: [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR"), [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"), [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY"), [`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"), [`NTEXT`](#sqlalchemy.dialects.mssql.NTEXT "sqlalchemy.dialects.mssql.NTEXT"),
    [`IMAGE`](#sqlalchemy.dialects.mssql.IMAGE "sqlalchemy.dialects.mssql.IMAGE")
    will always remain fixed and always output exactly that type.'
- en: '## Multipart Schema Names'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '## Multipart Schema Names'
- en: 'SQL Server schemas sometimes require multiple parts to their “schema” qualifier,
    that is, including the database name and owner name as separate tokens, such as
    `mydatabase.dbo.some_table`. These multipart names can be set at once using the
    [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument of [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"):'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 'SQL Server schemas sometimes require multiple parts to their “schema” qualifier,
    that is, including the database name and owner name as separate tokens, such as
    `mydatabase.dbo.some_table`. These multipart names can be set at once using the
    [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument of [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"):'
- en: '[PRE156]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'When performing operations such as table or component reflection, a schema
    argument that contains a dot will be split into separate “database” and “owner”
    components in order to correctly query the SQL Server information schema tables,
    as these two values are stored separately. Additionally, when rendering the schema
    name for DDL or SQL, the two components will be quoted separately for case sensitive
    names and other special characters. Given an argument as below:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 'When performing operations such as table or component reflection, a schema
    argument that contains a dot will be split into separate “database” and “owner”
    components in order to correctly query the SQL Server information schema tables,
    as these two values are stored separately. Additionally, when rendering the schema
    name for DDL or SQL, the two components will be quoted separately for case sensitive
    names and other special characters. Given an argument as below:'
- en: '[PRE157]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: The above schema would be rendered as `[MyDataBase].dbo`, and also in reflection,
    would be reflected using “dbo” as the owner and “MyDataBase” as the database name.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: The above schema would be rendered as `[MyDataBase].dbo`, and also in reflection,
    would be reflected using “dbo” as the owner and “MyDataBase” as the database name.
- en: 'To control how the schema name is broken into database / owner, specify brackets
    (which in SQL Server are quoting characters) in the name. Below, the “owner” will
    be considered as `MyDataBase.dbo` and the “database” will be None:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 'To control how the schema name is broken into database / owner, specify brackets
    (which in SQL Server are quoting characters) in the name. Below, the “owner” will
    be considered as `MyDataBase.dbo` and the “database” will be None:'
- en: '[PRE158]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'To individually specify both database and owner name with special characters
    or embedded dots, use two sets of brackets:'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 'To individually specify both database and owner name with special characters
    or embedded dots, use two sets of brackets:'
- en: '[PRE159]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Changed in version 1.2: the SQL Server dialect now treats brackets as identifier
    delimiters splitting the schema into separate database and owner tokens, to allow
    dots within either name itself.'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 'Changed in version 1.2: the SQL Server dialect now treats brackets as identifier
    delimiters splitting the schema into separate database and owner tokens, to allow
    dots within either name itself.'
- en: '## Legacy Schema Mode'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '## Legacy Schema Mode'
- en: 'Very old versions of the MSSQL dialect introduced the behavior such that a
    schema-qualified table would be auto-aliased when used in a SELECT statement;
    given a table:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 'Very old versions of the MSSQL dialect introduced the behavior such that a
    schema-qualified table would be auto-aliased when used in a SELECT statement;
    given a table:'
- en: '[PRE160]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'this legacy mode of rendering would assume that “customer_schema.account” would
    not be accepted by all parts of the SQL statement, as illustrated below:'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 'this legacy mode of rendering would assume that “customer_schema.account” would
    not be accepted by all parts of the SQL statement, as illustrated below:'
- en: '[PRE161]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: This mode of behavior is now off by default, as it appears to have served no
    purpose; however in the case that legacy applications rely upon it, it is available
    using the `legacy_schema_aliasing` argument to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as illustrated above.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 此行为模式现在默认关闭，因为似乎没有任何作用；但是，如果传统应用程序依赖于它，则可以使用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")中的`legacy_schema_aliasing`参数来使用，如上所示。
- en: 'Deprecated since version 1.4: The `legacy_schema_aliasing` flag is now deprecated
    and will be removed in a future release.'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：`legacy_schema_aliasing`标志现已弃用，并将在将来的版本中删除。
- en: '## Clustered Index Support'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '## 聚集索引支持'
- en: The MSSQL dialect supports clustered indexes (and primary keys) via the `mssql_clustered`
    option. This option is available to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"). and [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"). For indexes this option can be combined
    with the `mssql_columnstore` one to create a clustered columnstore index.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL方言支持通过`mssql_clustered`选项生成聚集索引（和主键）。此选项适用于[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")和[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")。对于索引，此选项可以与`mssql_columnstore`结合使用以创建聚集列存储索引。
- en: 'To generate a clustered index:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个聚集索引：
- en: '[PRE162]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: which renders the index as `CREATE CLUSTERED INDEX my_index ON table (x)`.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引渲染为`CREATE CLUSTERED INDEX my_index ON table (x)`。
- en: 'To generate a clustered primary key use:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个聚集主键，请使用：
- en: '[PRE163]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'which will render the table, for example, as:'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将表渲染为：
- en: '[PRE164]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Similarly, we can generate a clustered unique constraint using:'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以使用以下方法生成一个聚类唯一约束：
- en: '[PRE165]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'To explicitly request a non-clustered primary key (for example, when a separate
    clustered index is desired), use:'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 要明确请求非聚集主键（例如，当需要单独的聚集索引时），请使用：
- en: '[PRE166]'
  id: totrans-795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'which will render the table, for example, as:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将表渲染为：
- en: '[PRE167]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Columnstore Index Support
  id: totrans-798
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列存储索引支持
- en: The MSSQL dialect supports columnstore indexes via the `mssql_columnstore` option.
    This option is available to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"). It be combined with the `mssql_clustered` option to
    create a clustered columnstore index.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL方言通过`mssql_columnstore`选项支持列存储索引。此选项适用于[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")。它可以与`mssql_clustered`选项结合使用以创建聚集列存储索引。
- en: 'To generate a columnstore index:'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成列存储索引：
- en: '[PRE168]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: which renders the index as `CREATE COLUMNSTORE INDEX my_index ON table (x)`.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引渲染为`CREATE COLUMNSTORE INDEX my_index ON table (x)`。
- en: 'To generate a clustered columnstore index provide no columns:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个聚集列存储索引，请不提供列：
- en: '[PRE169]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: the above renders the index as `CREATE CLUSTERED COLUMNSTORE INDEX my_index
    ON table`.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将索引渲染为`CREATE CLUSTERED COLUMNSTORE INDEX my_index ON table`。
- en: New in version 2.0.18.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.18中的新功能。
- en: MSSQL-Specific Index Options
  id: totrans-807
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MSSQL特定的索引选项
- en: In addition to clustering, the MSSQL dialect supports other special options
    for [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index").
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 除了聚类外，MSSQL方言还支持其他特殊选项用于[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")。
- en: INCLUDE
  id: totrans-809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包括
- en: 'The `mssql_include` option renders INCLUDE(colname) for the given string names:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '`mssql_include`选项为给定的字符串名称渲染INCLUDE(colname)：'
- en: '[PRE170]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: would render the index as `CREATE INDEX my_index ON table (x) INCLUDE (y)`
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引渲染为`CREATE INDEX my_index ON table (x) INCLUDE (y)`
- en: '### Filtered Indexes'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '### 过滤索引'
- en: 'The `mssql_where` option renders WHERE(condition) for the given string names:'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: '`mssql_where`选项为给定的字符串名称渲染WHERE(condition)：'
- en: '[PRE171]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: would render the index as `CREATE INDEX my_index ON table (x) WHERE x > 10`.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引渲染为`CREATE INDEX my_index ON table (x) WHERE x > 10`。
- en: New in version 1.3.4.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.4中的新功能。
- en: Index ordering
  id: totrans-818
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引排序
- en: 'Index ordering is available via functional expressions, such as:'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 索引排序可通过功能表达式获得，例如：
- en: '[PRE172]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: would render the index as `CREATE INDEX my_index ON table (x DESC)`
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引渲染为`CREATE INDEX my_index ON table (x DESC)`
- en: See also
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Functional Indexes](../core/constraints.html#schema-indexes-functional)'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '[功能性索引](../core/constraints.html#schema-indexes-functional)'
- en: INCLUDE
  id: totrans-824
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包括
- en: 'The `mssql_include` option renders INCLUDE(colname) for the given string names:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '`mssql_include`选项为给定的字符串名称渲染INCLUDE(colname)：'
- en: '[PRE173]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: would render the index as `CREATE INDEX my_index ON table (x) INCLUDE (y)`
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染索引为`CREATE INDEX my_index ON table (x) INCLUDE (y)`。
- en: '### Filtered Indexes'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '### 过滤索引'
- en: 'The `mssql_where` option renders WHERE(condition) for the given string names:'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '`mssql_where` 选项为给定的字符串名称渲染 WHERE(condition)：'
- en: '[PRE174]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: would render the index as `CREATE INDEX my_index ON table (x) WHERE x > 10`.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染索引为`CREATE INDEX my_index ON table (x) WHERE x > 10`。
- en: New in version 1.3.4.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.3.4 版中新增。
- en: Index ordering
  id: totrans-833
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引排序
- en: 'Index ordering is available via functional expressions, such as:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过函数表达式实现索引排序，例如：
- en: '[PRE175]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: would render the index as `CREATE INDEX my_index ON table (x DESC)`
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染索引为`CREATE INDEX my_index ON table (x DESC)`。
- en: See also
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Functional Indexes](../core/constraints.html#schema-indexes-functional)'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '[功能索引](../core/constraints.html#schema-indexes-functional)'
- en: Compatibility Levels
  id: totrans-839
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性级别
- en: MSSQL supports the notion of setting compatibility levels at the database level.
    This allows, for instance, to run a database that is compatible with SQL2000 while
    running on a SQL2005 database server. `server_version_info` will always return
    the database server version information (in this case SQL2005) and not the compatibility
    level information. Because of this, if running under a backwards compatibility
    mode SQLAlchemy may attempt to use T-SQL statements that are unable to be parsed
    by the database server.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 支持在数据库级别设置兼容性级别的概念。这允许例如，在运行于 SQL2005 数据库服务器上时运行与 SQL2000 兼容的数据库。`server_version_info`
    将始终返回数据库服务器版本信息（在此情况下为 SQL2005），而不是兼容性级别信息。因此，如果在向后兼容模式下运行，则 SQLAlchemy 可能会尝试使用数据库服务器无法解析的
    T-SQL 语句。
- en: '## Triggers'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '## 触发器'
- en: 'SQLAlchemy by default uses OUTPUT INSERTED to get at newly generated primary
    key values via IDENTITY columns or other server side defaults. MS-SQL does not
    allow the usage of OUTPUT INSERTED on tables that have triggers. To disable the
    usage of OUTPUT INSERTED on a per-table basis, specify `implicit_returning=False`
    for each [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    which has triggers:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 默认使用 OUTPUT INSERTED 获取通过 IDENTITY 列或其他服务器端默认值生成的新主键值。MS-SQL 不允许在具有触发器的表上使用
    OUTPUT INSERTED。要在每个具有触发器的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 上禁用 OUTPUT INSERTED 的使用，请为其指定 `implicit_returning=False`：
- en: '[PRE176]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'Declarative form:'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 声明形式：
- en: '[PRE177]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '## Rowcount Support / ORM Versioning'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '## 行数支持 / ORM 版本控制'
- en: The SQL Server drivers may have limited ability to return the number of rows
    updated from an UPDATE or DELETE statement.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 驱动程序可能有限的能力来返回更新或删除语句所影响的行数。
- en: As of this writing, the PyODBC driver is not able to return a rowcount when
    OUTPUT INSERTED is used. Previous versions of SQLAlchemy therefore had limitations
    for features such as the “ORM Versioning” feature that relies upon accurate rowcounts
    in order to match version numbers with matched rows.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文撰写时，PyODBC 驱动程序无法在使用 OUTPUT INSERTED 时返回行数。因此，SQLAlchemy 的先前版本在功能上存在限制，例如依赖准确的行数来匹配版本号与匹配行的“ORM
    版本控制”功能。
- en: SQLAlchemy 2.0 now retrieves the “rowcount” manually for these particular use
    cases based on counting the rows that arrived back within RETURNING; so while
    the driver still has this limitation, the ORM Versioning feature is no longer
    impacted by it. As of SQLAlchemy 2.0.5, ORM versioning has been fully re-enabled
    for the pyodbc driver.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 现在根据返回的 RETURNING 中到达的行数手动检索这些特定用例的“行数”；因此，虽然驱动程序仍具有此限制，但 ORM
    版本控制功能不再受其影响。截至 SQLAlchemy 2.0.5，已完全重新启用了 pyodbc 驱动程序的 ORM 版本控制功能。
- en: 'Changed in version 2.0.5: ORM versioning support is restored for the pyodbc
    driver. Previously, a warning would be emitted during ORM flush that versioning
    was not supported.'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0.5 版更改：对于 pyodbc 驱动程序，已恢复 ORM 版本控制支持。先前，ORM 刷新期间会发出警告，说明不支持版本控制。
- en: Enabling Snapshot Isolation
  id: totrans-851
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用快照隔离
- en: 'SQL Server has a default transaction isolation mode that locks entire tables,
    and causes even mildly concurrent applications to have long held locks and frequent
    deadlocks. Enabling snapshot isolation for the database as a whole is recommended
    for modern levels of concurrency support. This is accomplished via the following
    ALTER DATABASE commands executed at the SQL prompt:'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 'SQL Server 具有默认的事务隔离模式，锁定整个表，并导致即使是稍微并发的应用程序也具有长时间持有的锁定和频繁的死锁。为了支持现代级别的并发性，建议为整个数据库启用快照隔离。这通过在
    SQL 提示符下执行以下 ALTER DATABASE 命令来完成： '
- en: '[PRE178]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Background on SQL Server snapshot isolation is available at [https://msdn.microsoft.com/en-us/library/ms175095.aspx](https://msdn.microsoft.com/en-us/library/ms175095.aspx).
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 SQL Server 快照隔离的背景信息，请访问 [https://msdn.microsoft.com/en-us/library/ms175095.aspx](https://msdn.microsoft.com/en-us/library/ms175095.aspx)。
- en: SQL Server SQL Constructs
  id: totrans-855
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL Server SQL 构造
- en: '| Object Name | Description |'
  id: totrans-856
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-857
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [try_cast](#sqlalchemy.dialects.mssql.try_cast)(expression, type_) | Produce
    a `TRY_CAST` expression for backends which support it; this is a `CAST` which
    returns NULL for un-castable conversions. |'
  id: totrans-858
  prefs: []
  type: TYPE_TB
  zh: '| [try_cast](#sqlalchemy.dialects.mssql.try_cast)(expression, type_) | 为支持的后端生成一个
    `TRY_CAST` 表达式；这是一个返回 NULL 的 `CAST`，用于不可转换的转换。 |'
- en: '[PRE179]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Produce a `TRY_CAST` expression for backends which support it; this is a `CAST`
    which returns NULL for un-castable conversions.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 为支持的后端生成一个 `TRY_CAST` 表达式；这是一个返回 NULL 的 `CAST`，用于不可转换的转换。
- en: In SQLAlchemy, this construct is supported **only** by the SQL Server dialect,
    and will raise a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") if used on other included backends. However, third
    party backends may also support this construct.
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 中，此构造仅受 SQL Server 方言支持，并且如果在其他包含的后端上使用，则会引发 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。但是，第三方后端也可能支持此构造。
- en: Tip
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: As [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") originates from the SQL Server dialect,
    it’s importable both from `sqlalchemy.` as well as from `sqlalchemy.dialects.mssql`.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") 来源于 SQL Server 方言，因此它既可以从 `sqlalchemy.`
    导入，也可以从 `sqlalchemy.dialects.mssql` 导入。
- en: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    returns an instance of [`TryCast`](../core/sqlelement.html#sqlalchemy.sql.expression.TryCast
    "sqlalchemy.sql.expression.TryCast") and generally behaves similarly to the [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast") construct; at the SQL level, the difference
    between `CAST` and `TRY_CAST` is that `TRY_CAST` returns NULL for an un-castable
    expression, such as attempting to cast a string `"hi"` to an integer value.'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    返回 [`TryCast`](../core/sqlelement.html#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    的实例，并且通常表现得与 [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    构造类似；在 SQL 层面，`CAST` 和 `TRY_CAST` 之间的区别在于 `TRY_CAST` 对于不可转换的表达式（例如，尝试将字符串 `"hi"`
    转换为整数值）返回 NULL。'
- en: 'E.g.:'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE180]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'The above would render on Microsoft SQL Server as:'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容在 Microsoft SQL Server 上呈现为：
- en: '[PRE181]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'New in version 2.0.14: [`try_cast()`](#sqlalchemy.dialects.mssql.try_cast "sqlalchemy.dialects.mssql.try_cast")
    has been generalized from the SQL Server dialect into a general use construct
    that may be supported by additional dialects.'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.14 开始：[`try_cast()`](#sqlalchemy.dialects.mssql.try_cast "sqlalchemy.dialects.mssql.try_cast")已从
    SQL Server 方言泛化为一个通用构造，可能由其他方言支持。
- en: SQL Server Data Types
  id: totrans-870
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL Server 数据类型
- en: 'As with all SQLAlchemy dialects, all UPPERCASE types that are known to be valid
    with SQL server are importable from the top level dialect, whether they originate
    from [`sqlalchemy.types`](../core/type_basics.html#module-sqlalchemy.types "sqlalchemy.types")
    or from the local dialect:'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有 SQLAlchemy 方言一样，所有已知在 SQL Server 中有效的大写类型都可以从顶级方言导入，无论其来源是[`sqlalchemy.types`](../core/type_basics.html#module-sqlalchemy.types
    "sqlalchemy.types") 还是来自本地方言：
- en: '[PRE182]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'Types which are specific to SQL Server, or have SQL Server-specific construction
    arguments, are as follows:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于 SQL Server 或具有 SQL Server 特定构造参数的类型如下：
- en: '| Object Name | Description |'
  id: totrans-874
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-875
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BIT](#sqlalchemy.dialects.mssql.BIT) | MSSQL BIT type. |'
  id: totrans-876
  prefs: []
  type: TYPE_TB
  zh: '| [BIT](#sqlalchemy.dialects.mssql.BIT) | MSSQL BIT 类型。 |'
- en: '| [DATETIME2](#sqlalchemy.dialects.mssql.DATETIME2) |  |'
  id: totrans-877
  prefs: []
  type: TYPE_TB
  zh: '| [DATETIME2](#sqlalchemy.dialects.mssql.DATETIME2) |  |'
- en: '| [DATETIMEOFFSET](#sqlalchemy.dialects.mssql.DATETIMEOFFSET) |  |'
  id: totrans-878
  prefs: []
  type: TYPE_TB
  zh: '| [DATETIMEOFFSET](#sqlalchemy.dialects.mssql.DATETIMEOFFSET) |  |'
- en: '| [DOUBLE_PRECISION](#sqlalchemy.dialects.mssql.DOUBLE_PRECISION) | the SQL
    Server DOUBLE PRECISION datatype. |'
  id: totrans-879
  prefs: []
  type: TYPE_TB
  zh: '| [DOUBLE_PRECISION](#sqlalchemy.dialects.mssql.DOUBLE_PRECISION) | SQL Server
    DOUBLE PRECISION 数据类型。 |'
- en: '| [IMAGE](#sqlalchemy.dialects.mssql.IMAGE) |  |'
  id: totrans-880
  prefs: []
  type: TYPE_TB
  zh: '| [IMAGE](#sqlalchemy.dialects.mssql.IMAGE) |  |'
- en: '| [JSON](#sqlalchemy.dialects.mssql.JSON) | MSSQL JSON type. |'
  id: totrans-881
  prefs: []
  type: TYPE_TB
  zh: '| [JSON](#sqlalchemy.dialects.mssql.JSON) | MSSQL JSON 类型。 |'
- en: '| [MONEY](#sqlalchemy.dialects.mssql.MONEY) |  |'
  id: totrans-882
  prefs: []
  type: TYPE_TB
  zh: '| [MONEY](#sqlalchemy.dialects.mssql.MONEY) |  |'
- en: '| [NTEXT](#sqlalchemy.dialects.mssql.NTEXT) | MSSQL NTEXT type, for variable-length
    unicode text up to 2^30 characters. |'
  id: totrans-883
  prefs: []
  type: TYPE_TB
  zh: '| [NTEXT](#sqlalchemy.dialects.mssql.NTEXT) | MSSQL NTEXT 类型，用于最多 2^30 个字符的变长
    unicode 文本。 |'
- en: '| [REAL](#sqlalchemy.dialects.mssql.REAL) | the SQL Server REAL datatype. |'
  id: totrans-884
  prefs: []
  type: TYPE_TB
  zh: '| [REAL](#sqlalchemy.dialects.mssql.REAL) | SQL Server REAL 数据类型。 |'
- en: '| [ROWVERSION](#sqlalchemy.dialects.mssql.ROWVERSION) | Implement the SQL Server
    ROWVERSION type. |'
  id: totrans-885
  prefs: []
  type: TYPE_TB
  zh: '| [ROWVERSION](#sqlalchemy.dialects.mssql.ROWVERSION) | 实现 SQL Server ROWVERSION
    类型。 |'
- en: '| [SMALLDATETIME](#sqlalchemy.dialects.mssql.SMALLDATETIME) |  |'
  id: totrans-886
  prefs: []
  type: TYPE_TB
  zh: '| [SMALLDATETIME](#sqlalchemy.dialects.mssql.SMALLDATETIME) |  |'
- en: '| [SMALLMONEY](#sqlalchemy.dialects.mssql.SMALLMONEY) |  |'
  id: totrans-887
  prefs: []
  type: TYPE_TB
  zh: '| [SMALLMONEY](#sqlalchemy.dialects.mssql.SMALLMONEY) |  |'
- en: '| [SQL_VARIANT](#sqlalchemy.dialects.mssql.SQL_VARIANT) |  |'
  id: totrans-888
  prefs: []
  type: TYPE_TB
  zh: '| [SQL_VARIANT](#sqlalchemy.dialects.mssql.SQL_VARIANT) |  |'
- en: '| [TIME](#sqlalchemy.dialects.mssql.TIME) |  |'
  id: totrans-889
  prefs: []
  type: TYPE_TB
  zh: '| [TIME](#sqlalchemy.dialects.mssql.TIME) |  |'
- en: '| [TIMESTAMP](#sqlalchemy.dialects.mssql.TIMESTAMP) | Implement the SQL Server
    TIMESTAMP type. |'
  id: totrans-890
  prefs: []
  type: TYPE_TB
  zh: '| [TIMESTAMP](#sqlalchemy.dialects.mssql.TIMESTAMP) | 实现 SQL Server TIMESTAMP
    类型。 |'
- en: '| [TINYINT](#sqlalchemy.dialects.mssql.TINYINT) |  |'
  id: totrans-891
  prefs: []
  type: TYPE_TB
  zh: '| [TINYINT](#sqlalchemy.dialects.mssql.TINYINT) |  |'
- en: '| [UNIQUEIDENTIFIER](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER) |  |'
  id: totrans-892
  prefs: []
  type: TYPE_TB
  zh: '| [UNIQUEIDENTIFIER](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER) |  |'
- en: '| [XML](#sqlalchemy.dialects.mssql.XML) | MSSQL XML type. |'
  id: totrans-893
  prefs: []
  type: TYPE_TB
  zh: '| [XML](#sqlalchemy.dialects.mssql.XML) | MSSQL XML 类型。 |'
- en: '[PRE183]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: MSSQL BIT type.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL BIT 类型。
- en: Both pyodbc and pymssql return values from BIT columns as Python <class ‘bool’>
    so just subclass Boolean.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: pyodbc 和 pymssql 都将 BIT 列的值作为 Python <class ‘bool’> 返回，因此只需对 Boolean 进行子类化。
- en: '**Members**'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.BIT.__init__)'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.BIT.__init__)'
- en: '**Class signature**'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.BIT`](#sqlalchemy.dialects.mssql.BIT "sqlalchemy.dialects.mssql.BIT")
    ([`sqlalchemy.types.Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"))
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.BIT`](#sqlalchemy.dialects.mssql.BIT "sqlalchemy.dialects.mssql.BIT")
    ([`sqlalchemy.types.Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"))
- en: '[PRE184]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '*inherited from the* `sqlalchemy.types.Boolean.__init__` *method of* [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    *的* `sqlalchemy.types.Boolean.__init__` *方法继承*'
- en: Construct a Boolean.
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个布尔值。
- en: 'Parameters:'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`create_constraint` –'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` - '
- en: defaults to False. If the boolean is generated as an int/smallint, also create
    a CHECK constraint on the table that ensures 1 or 0 as a value.
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。如果布尔值生成为 int/smallint，还会在表上创建 CHECK 约束，以确保值为 1 或 0。
- en: Note
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Boolean.name`](../core/type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") parameter or by setting up an appropriate naming convention;
    see [Configuring Constraint Naming Conventions](../core/constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议 CHECK 约束具有明确的名称，以支持模式管理方面的考虑。这可以通过设置 [`Boolean.name`](../core/type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") 参数或设置适当的命名约定来实现；请参阅 [配置约束命名约定](../core/constraints.html#constraint-naming-conventions)
    了解背景信息。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：- 此标志现在默认为 False，意味着对于非本地枚举类型不生成 CHECK 约束。
- en: '`name` – if a CHECK constraint is generated, specify the name of the constraint.'
  id: totrans-910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 如果生成 CHECK 约束，请指定约束的名称。'
- en: '[PRE185]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: The SQL CHAR type.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: SQL CHAR 类型。
- en: '**Class signature**'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.CHAR` ([`sqlalchemy.types.String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"))
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.CHAR` ([`sqlalchemy.types.String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"))
- en: '[PRE186]'
  id: totrans-915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法继承*'
- en: Create a string-holding type.
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个保存字符串的类型。
- en: 'Parameters:'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于 DDL 和 CAST 表达式中的列长度。如果不会发出 `CREATE TABLE`，则可以安全地省略。某些数据库可能需要用于
    DDL 的 `length`，如果包含了没有长度的 `VARCHAR`，则会在发出 `CREATE TABLE` DDL 时引发异常。值是作为字节还是字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于 DDL 和 CAST 表达式的列级别排序。使用 SQLite、MySQL 和 PostgreSQL 支持的 COLLATE 关键字进行呈现。例如：
- en: '[PRE187]'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: Note
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该为预计存储非 ASCII 数据的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 使用 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") 数据类型。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE188]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '**Class signature**'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.DATETIME2`](#sqlalchemy.dialects.mssql.DATETIME2
    "sqlalchemy.dialects.mssql.DATETIME2") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.DATETIME2`](#sqlalchemy.dialects.mssql.DATETIME2
    "sqlalchemy.dialects.mssql.DATETIME2")（`sqlalchemy.dialects.mssql.base._DateTimeBase`，[`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")）
- en: '[PRE189]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '**Class signature**'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.DATETIMEOFFSET`](#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.DATETIMEOFFSET`](#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET")（`sqlalchemy.dialects.mssql.base._DateTimeBase`，[`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")）
- en: '[PRE190]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: the SQL Server DOUBLE PRECISION datatype.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 的 DOUBLE PRECISION 数据类型。
- en: New in version 2.0.11.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 新版 2.0.11 中新增。
- en: '**Class signature**'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.DOUBLE_PRECISION`](#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION") ([`sqlalchemy.types.DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION"))
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.DOUBLE_PRECISION`](#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION")（[`sqlalchemy.types.DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION")）
- en: '[PRE191]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '**Members**'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.IMAGE.__init__)'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.IMAGE.__init__)'
- en: '**Class signature**'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.IMAGE`](#sqlalchemy.dialects.mssql.IMAGE "sqlalchemy.dialects.mssql.IMAGE")
    ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.IMAGE`](#sqlalchemy.dialects.mssql.IMAGE "sqlalchemy.dialects.mssql.IMAGE")（[`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")）
- en: '[PRE192]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '*inherited from the* `sqlalchemy.types.LargeBinary.__init__` *method of* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") *的* `sqlalchemy.types.LargeBinary.__init__` *方法*'
- en: Construct a LargeBinary type.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 LargeBinary 类型。
- en: 'Parameters:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选，用于 DDL 语句中的列长度，对于那些接受长度的二进制类型，如 MySQL 的 BLOB 类型。'
- en: '[PRE193]'
  id: totrans-946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: MSSQL JSON type.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL JSON 类型。
- en: MSSQL supports JSON-formatted data as of SQL Server 2016.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 支持 JSON 格式的数据，从 SQL Server 2016 开始。
- en: The [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    datatype at the DDL level will represent the datatype as `NVARCHAR(max)`, but
    provides for JSON-level comparison functions as well as Python coercion behavior.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DDL 级别上，[`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    数据类型将表示为 `NVARCHAR(max)`，但还提供了 JSON 级别的比较函数以及 Python 强制行为。
- en: '[`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    is used automatically whenever the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype is used against a SQL Server backend.'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 每当基本的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    数据类型用于 SQL Server 后端时，都会自动使用 [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")。
- en: See also
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - main documentation for the generic cross-platform JSON datatype.'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - 通用跨平台 JSON 数据类型的主要文档。'
- en: The [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    type supports persistence of JSON values as well as the core index operations
    provided by [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    datatype, by adapting the operations to render the `JSON_VALUE` or `JSON_QUERY`
    functions at the database level.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    类型支持将 JSON 值持久化，同时通过调整操作以在数据库级别渲染 `JSON_VALUE` 或 `JSON_QUERY` 函数来提供 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 数据类型提供的核心索引操作。'
- en: The SQL Server [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    type necessarily makes use of the `JSON_QUERY` and `JSON_VALUE` functions when
    querying for elements of a JSON object. These two functions have a major restriction
    in that they are **mutually exclusive** based on the type of object to be returned.
    The `JSON_QUERY` function **only** returns a JSON dictionary or list, but not
    an individual string, numeric, or boolean element; the `JSON_VALUE` function **only**
    returns an individual string, numeric, or boolean element. **both functions either
    return NULL or raise an error if they are not used against the correct expected
    value**.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server [`JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    类型在查询 JSON 对象的元素时必然使用 `JSON_QUERY` 和 `JSON_VALUE` 函数。 这两个函数有一个主要限制，即它们基于要返回的对象类型是
    **互斥的**。 `JSON_QUERY` 函数**仅**返回 JSON 字典或列表，而不是单个字符串、数字或布尔元素；`JSON_VALUE` 函数**仅**返回单个字符串、数字或布尔元素。
    **这两个函数都会在不使用预期正确的值时返回 NULL 或引发错误**。
- en: 'To handle this awkward requirement, indexed access rules are as follows:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这个尴尬的要求，索引访问规则如下：
- en: 'When extracting a sub element from a JSON that is itself a JSON dictionary
    or list, the [`Comparator.as_json()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_json
    "sqlalchemy.types.JSON.Comparator.as_json") accessor should be used:'
  id: totrans-956
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当从 JSON 中提取的子元素本身是 JSON 字典或列表时，应使用 [`Comparator.as_json()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_json
    "sqlalchemy.types.JSON.Comparator.as_json") 访问器：
- en: '[PRE194]'
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'When extracting a sub element from a JSON that is a plain boolean, string,
    integer, or float, use the appropriate method among [`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean"), [`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string"), [`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer"), [`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float"):'
  id: totrans-958
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '当从 JSON 中提取为普通布尔值、字符串、整数或浮点数的子元素时，请使用以下适当的方法之一：[`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean")、[`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string")、[`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer")、[`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float"):'
- en: '[PRE195]'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: New in version 1.4.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '**Members**'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.JSON.__init__)'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.JSON.__init__)'
- en: '**Class signature**'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")
    ([`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON"))
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.JSON`](#sqlalchemy.dialects.mssql.JSON "sqlalchemy.dialects.mssql.JSON")（[`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")）
- en: '[PRE196]'
  id: totrans-965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '*inherited from the* `sqlalchemy.types.JSON.__init__` *method of* [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    的 `sqlalchemy.types.JSON.__init__` *方法*'
- en: Construct a [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type.
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    类型。
- en: 'Parameters:'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**none_as_null=False** –'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: '**none_as_null=False** –'
- en: 'if True, persist the value `None` as a SQL NULL value, not the JSON encoding
    of `null`. Note that when this flag is False, the [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct can still be used to persist a NULL
    value, which may be passed directly as a parameter value that is specially interpreted
    by the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type as SQL NULL:'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则将值 `None` 持久化为 SQL NULL 值，而不是 `null` 的 JSON 编码。请注意，当此标志为 False 时，[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 构造仍然可以用于持久化 NULL 值，可以直接作为参数值传递，由 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 类型特殊解释为 SQL NULL：
- en: '[PRE197]'
  id: totrans-971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Note
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") does **not** apply to the values passed to [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"); a value of `None` passed for these parameters means
    “no default present”.'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 不适用于传递给 [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 和 [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 的值；这些参数的值为 `None` 表示“没有默认值”。'
- en: Additionally, when used in SQL comparison expressions, the Python value `None`
    continues to refer to SQL null, and not JSON NULL. The [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag refers explicitly to the **persistence** of the
    value within an INSERT or UPDATE statement. The [`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") value should be used for SQL expressions that wish
    to compare to JSON null.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 SQL 比较表达式中使用时，Python 值 `None` 仍然指的是 SQL 空值，而不是 JSON 的 NULL。[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 标志明确指示了值在 INSERT 或 UPDATE 语句中的**持久性**。[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") 值应该用于希望与 JSON null 进行比较的 SQL 表达式。
- en: See also
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
- en: '[PRE198]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '**Class signature**'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.MONEY`](#sqlalchemy.dialects.mssql.MONEY "sqlalchemy.dialects.mssql.MONEY")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.MONEY`](#sqlalchemy.dialects.mssql.MONEY "sqlalchemy.dialects.mssql.MONEY")
    ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE199]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: The SQL NCHAR type.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NCHAR 类型。
- en: '**Class signature**'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.NCHAR` ([`sqlalchemy.types.Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode"))
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.NCHAR` ([`sqlalchemy.types.Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode"))
- en: '[PRE200]'
  id: totrans-984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    的 `sqlalchemy.types.String.__init__` *方法*'
- en: Create a string-holding type.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个保存字符串的类型。
- en: 'Parameters:'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于DDL和CAST表达式中的列长度。如果不会发出 `CREATE TABLE`，则可以安全地省略。某些数据库可能要求在DDL中使用长度，并且如果包含没有长度的
    `VARCHAR`，则在发出 `CREATE TABLE` DDL 时会引发异常。值是按字节还是按字符解释是数据库特定的。'
- en: '`collation` –'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式中的列级别排序。使用由 SQLite、MySQL 和 PostgreSQL 支持的 COLLATE 关键字呈现。例如：
- en: '[PRE201]'
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Note
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE202]'
  id: totrans-994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: MSSQL NTEXT type, for variable-length unicode text up to 2^30 characters.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL NTEXT类型，用于最多2^30个字符的可变长度Unicode文本。
- en: '**Members**'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.NTEXT.__init__)'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.NTEXT.__init__)'
- en: '**Class signature**'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.NTEXT`](#sqlalchemy.dialects.mssql.NTEXT "sqlalchemy.dialects.mssql.NTEXT")
    ([`sqlalchemy.types.UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"))
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.NTEXT`](#sqlalchemy.dialects.mssql.NTEXT "sqlalchemy.dialects.mssql.NTEXT")
    ([`sqlalchemy.types.UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"))
- en: '[PRE203]'
  id: totrans-1000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法*'
- en: Create a string-holding type.
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选的，用于DDL和CAST表达式中的列的长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用`length`，如果包含一个没有长度的`VARCHAR`，则会在发出`CREATE
    TABLE` DDL时引发异常。值是以字节还是字符解释是数据库特定的。'
- en: '`collation` –'
  id: totrans-1005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行渲染。例如：
- en: '[PRE204]'
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Note
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE205]'
  id: totrans-1010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: The SQL NVARCHAR type.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NVARCHAR类型。
- en: '**Class signature**'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.NVARCHAR` ([`sqlalchemy.types.Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode"))
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.NVARCHAR` ([`sqlalchemy.types.Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode"))
- en: '[PRE206]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法*'
- en: Create a string-holding type.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选的，用于DDL和CAST表达式中的列的长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用`length`，如果包含一个没有长度的`VARCHAR`，则会在发出`CREATE
    TABLE` DDL时引发异常。值是以字节还是字符解释是与数据库相关的。'
- en: '`collation` –'
  id: totrans-1019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行渲染。例如：
- en: '[PRE207]'
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Note
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    期望存储非 ASCII 数据的 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") 数据类型。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE208]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: the SQL Server REAL datatype.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server REAL 数据类型。
- en: '**Class signature**'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.REAL`](#sqlalchemy.dialects.mssql.REAL "sqlalchemy.dialects.mssql.REAL")
    ([`sqlalchemy.types.REAL`](../core/type_basics.html#sqlalchemy.types.REAL "sqlalchemy.types.REAL"))
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.REAL`](#sqlalchemy.dialects.mssql.REAL "sqlalchemy.dialects.mssql.REAL")
    ([`sqlalchemy.types.REAL`](../core/type_basics.html#sqlalchemy.types.REAL "sqlalchemy.types.REAL"))。
- en: '[PRE209]'
  id: totrans-1028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Implement the SQL Server ROWVERSION type.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 SQL Server ROWVERSION 类型。
- en: The ROWVERSION datatype is a SQL Server synonym for the TIMESTAMP datatype,
    however current SQL Server documentation suggests using ROWVERSION for new datatypes
    going forward.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: ROWVERSION 数据类型是 SQL Server TIMESTAMP 数据类型的同义词，但当前的 SQL Server 文档建议将 ROWVERSION
    用于未来新的数据类型。
- en: The ROWVERSION datatype does **not** reflect (e.g. introspect) from the database
    as itself; the returned datatype will be [`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP").
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: ROWVERSION 数据类型 **不会** 作为自身反映（例如自省）从数据库中返回；返回的数据类型将是 [`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP")。
- en: This is a read-only datatype that does not support INSERT of values.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个只读数据类型，不支持插入值。
- en: New in version 1.2.
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中的新增功能。
- en: See also
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP "sqlalchemy.dialects.mssql.TIMESTAMP")'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP "sqlalchemy.dialects.mssql.TIMESTAMP")'
- en: '**Members**'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.ROWVERSION.__init__)'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.ROWVERSION.__init__)'
- en: '**Class signature**'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.ROWVERSION`](#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION") ([`sqlalchemy.dialects.mssql.base.TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.base.TIMESTAMP"))
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.ROWVERSION`](#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION") ([`sqlalchemy.dialects.mssql.base.TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.base.TIMESTAMP"))。
- en: '[PRE210]'
  id: totrans-1040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '*inherited from the* `sqlalchemy.dialects.mssql.base.TIMESTAMP.__init__` *method
    of* [`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP "sqlalchemy.dialects.mssql.base.TIMESTAMP")'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP "sqlalchemy.dialects.mssql.base.TIMESTAMP")
    *的* `sqlalchemy.dialects.mssql.base.TIMESTAMP.__init__` *方法*。'
- en: Construct a TIMESTAMP or ROWVERSION type.
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 TIMESTAMP 或 ROWVERSION 类型。
- en: 'Parameters:'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**convert_int** – if True, binary integer values will be converted to integers
    on read.'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '**convert_int** – 如果为 True，则在读取时将二进制整数值转换为整数。'
- en: New in version 1.2.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中的新增功能。
- en: '[PRE211]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '**Members**'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.SMALLDATETIME.__init__)'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.SMALLDATETIME.__init__)'
- en: '**Class signature**'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.SMALLDATETIME`](#sqlalchemy.dialects.mssql.SMALLDATETIME
    "sqlalchemy.dialects.mssql.SMALLDATETIME") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.SMALLDATETIME`](#sqlalchemy.dialects.mssql.SMALLDATETIME
    "sqlalchemy.dialects.mssql.SMALLDATETIME") (`sqlalchemy.dialects.mssql.base._DateTimeBase`,
    [`sqlalchemy.types.DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"))。
- en: '[PRE212]'
  id: totrans-1051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '*inherited from the* `sqlalchemy.types.DateTime.__init__` *method of* [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    *的* `sqlalchemy.types.DateTime.__init__` *方法*。'
- en: Construct a new [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime").
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的 [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")。
- en: 'Parameters:'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**timezone** – boolean. Indicates that the datetime type should enable timezone
    support, if available on the **base date/time-holding type only**. It is recommended
    to make use of the [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype directly when using this flag, as some
    databases include separate generic date/time-holding types distinct from the timezone-capable
    TIMESTAMP datatype, such as Oracle.'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: '**timezone** – 布尔值。指示日期/时间类型是否应启用时区支持，仅当**基本日期/时间持有类型可用**时。建议在使用此标志时直接使用 [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") 数据类型，因为某些数据库包含与支持时区的 TIMESTAMP 数据类型不同的单独的通用日期/时间持有类型，例如
    Oracle。'
- en: '[PRE213]'
  id: totrans-1056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '**Class signature**'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.SMALLMONEY`](#sqlalchemy.dialects.mssql.SMALLMONEY
    "sqlalchemy.dialects.mssql.SMALLMONEY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.SMALLMONEY`](#sqlalchemy.dialects.mssql.SMALLMONEY
    "sqlalchemy.dialects.mssql.SMALLMONEY")（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE214]'
  id: totrans-1059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '**Class signature**'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.SQL_VARIANT`](#sqlalchemy.dialects.mssql.SQL_VARIANT
    "sqlalchemy.dialects.mssql.SQL_VARIANT") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.SQL_VARIANT`](#sqlalchemy.dialects.mssql.SQL_VARIANT
    "sqlalchemy.dialects.mssql.SQL_VARIANT")（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE215]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: The SQL TEXT type.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: SQL TEXT 类型。
- en: '**Class signature**'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.TEXT` ([`sqlalchemy.types.Text`](../core/type_basics.html#sqlalchemy.types.Text
    "sqlalchemy.types.Text"))
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.TEXT`（[`sqlalchemy.types.Text`](../core/type_basics.html#sqlalchemy.types.Text
    "sqlalchemy.types.Text")）
- en: '[PRE216]'
  id: totrans-1066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法继承*'
- en: Create a string-holding type.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选项，用于 DDL 和 CAST 表达式中的列长度。如果不会发出 `CREATE TABLE`，则可以安全地省略。某些数据库可能要求在
    DDL 中使用长度，并且如果包括没有长度的 `VARCHAR`，则在发出 `CREATE TABLE` DDL 时会引发异常。该值是以字节还是字符解释是数据库特定的。'
- en: '`collation` –'
  id: totrans-1071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选项，用于 DDL 和 CAST 表达式中的列级排序。在 SQLite、MySQL 和 PostgreSQL 中使用 COLLATE 关键字进行呈现。例如：
- en: '[PRE217]'
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: Note
  id: totrans-1074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型应用于预期存储非 ASCII 数据的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE218]'
  id: totrans-1076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '**Class signature**'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.TIME`](#sqlalchemy.dialects.mssql.TIME "sqlalchemy.dialects.mssql.TIME")
    ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME "sqlalchemy.types.TIME"))
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.mssql.TIME`](#sqlalchemy.dialects.mssql.TIME "sqlalchemy.dialects.mssql.TIME")（[`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME
    "sqlalchemy.types.TIME")）
- en: '[PRE219]'
  id: totrans-1079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Implement the SQL Server TIMESTAMP type.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 SQL Server TIMESTAMP 类型。
- en: Note this is **completely different** than the SQL Standard TIMESTAMP type,
    which is not supported by SQL Server. It is a read-only datatype that does not
    support INSERT of values.
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这与 SQL 标准的 TIMESTAMP 类型**完全不同**，该类型不受 SQL Server 支持。它是一个只读数据类型，不支持插入值。
- en: New in version 1.2.
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: See also
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ROWVERSION`](#sqlalchemy.dialects.mssql.ROWVERSION "sqlalchemy.dialects.mssql.ROWVERSION")'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ROWVERSION`](#sqlalchemy.dialects.mssql.ROWVERSION "sqlalchemy.dialects.mssql.ROWVERSION")'
- en: '**Members**'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.TIMESTAMP.__init__)'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.TIMESTAMP.__init__)'
- en: '**Class signature**'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP") (`sqlalchemy.types._Binary`)
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.TIMESTAMP`](#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP") (`sqlalchemy.types._Binary`)
- en: '[PRE220]'
  id: totrans-1089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Construct a TIMESTAMP or ROWVERSION type.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 构造 TIMESTAMP 或 ROWVERSION 类型。
- en: 'Parameters:'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**convert_int** – if True, binary integer values will be converted to integers
    on read.'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: '**convert_int** – 如果为 True，则二进制整数值将在读取时转换为整数。'
- en: New in version 1.2.
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能，版本 1.2。
- en: '[PRE221]'
  id: totrans-1094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '**Class signature**'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.TINYINT`](#sqlalchemy.dialects.mssql.TINYINT
    "sqlalchemy.dialects.mssql.TINYINT") ([`sqlalchemy.types.Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"))
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.TINYINT`](#sqlalchemy.dialects.mssql.TINYINT "sqlalchemy.dialects.mssql.TINYINT")
    ([`sqlalchemy.types.Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"))
- en: '[PRE222]'
  id: totrans-1097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '**Members**'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.__init__)'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.__init__)'
- en: '**Class signature**'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER`](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") ([`sqlalchemy.types.Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid"))
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER`](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") ([`sqlalchemy.types.Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid"))
- en: '[PRE223]'
  id: totrans-1102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Construct a [`UNIQUEIDENTIFIER`](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") type.
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`UNIQUEIDENTIFIER`](#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER")
    类型。
- en: 'Parameters:'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**as_uuid=True** –'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: '**as_uuid=True** –'
- en: if True, values will be interpreted as Python uuid objects, converting to/from
    string via the DBAPI.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则将值解释为 Python uuid 对象，通过 DBAPI 转换为/从字符串。
- en: '[PRE224]'
  id: totrans-1107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: The MSSQL VARBINARY type.
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL VARBINARY 类型。
- en: This type adds additional features to the core [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY") type, including “deprecate_large_types” mode where
    either `VARBINARY(max)` or IMAGE is rendered, as well as the SQL Server `FILESTREAM`
    option.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型为核心 [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")
    类型添加了其他功能，包括“弃用大型类型”模式，在此模式下将呈现 `VARBINARY(max)` 或 IMAGE，以及 SQL Server `FILESTREAM`
    选项。
- en: See also
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Large Text/Binary Type Deprecation](#mssql-large-type-deprecation)'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '[大型文本/二进制类型弃用](#mssql-large-type-deprecation)'
- en: '**Class signature**'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.VARBINARY` ([`sqlalchemy.types.VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY"), [`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.VARBINARY` ([`sqlalchemy.types.VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY"), [`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
- en: '[PRE225]'
  id: totrans-1114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Construct a VARBINARY type.
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 VARBINARY 类型。
- en: 'Parameters:'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-1117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于 DDL 语句中的列的长度，用于那些接受长度的二进制类型，例如 MySQL BLOB 类型。'
- en: '`filestream=False` –'
  id: totrans-1118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filestream=False` –'
- en: if True, renders the `FILESTREAM` keyword in the table definition. In this case
    `length` must be `None` or `'max'`.
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，在表定义中渲染 `FILESTREAM` 关键字。在这种情况下，`length` 必须为 `None` 或 `'max'`。
- en: New in version 1.4.31.
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能，版本 1.4.31。
- en: '[PRE226]'
  id: totrans-1121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: The SQL VARCHAR type.
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: SQL VARCHAR 类型。
- en: '**Class signature**'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.mssql.VARCHAR` ([`sqlalchemy.types.String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"))
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.mssql.VARCHAR` ([`sqlalchemy.types.String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"))
- en: '[PRE227]'
  id: totrans-1125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法继承*'
- en: Create a string-holding type.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串持有类型。
- en: 'Parameters:'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于DDL和CAST表达式中的列长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。该值是以字节还是字符解释的取决于数据库。'
- en: '`collation` –'
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行呈现。例如：
- en: '[PRE228]'
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Note
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE229]'
  id: totrans-1135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: MSSQL XML type.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL XML 类型。
- en: This is a placeholder type for reflection purposes that does not include any
    Python-side datatype support. It also does not currently support additional arguments,
    such as “CONTENT”, “DOCUMENT”, “xml_schema_collection”.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于反射目的的占位符类型，不包括任何Python端数据类型支持。它也不支持额外的参数，如“CONTENT”、“DOCUMENT”、“xml_schema_collection”。
- en: '**Members**'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.mssql.XML.__init__)'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.mssql.XML.__init__)'
- en: '**Class signature**'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.mssql.XML`](#sqlalchemy.dialects.mssql.XML "sqlalchemy.dialects.mssql.XML")
    ([`sqlalchemy.types.Text`](../core/type_basics.html#sqlalchemy.types.Text "sqlalchemy.types.Text"))
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.mssql.XML`](#sqlalchemy.dialects.mssql.XML "sqlalchemy.dialects.mssql.XML")
    ([`sqlalchemy.types.Text`](../core/type_basics.html#sqlalchemy.types.Text "sqlalchemy.types.Text"))
- en: '[PRE230]'
  id: totrans-1142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    的 `sqlalchemy.types.String.__init__` *方法*'
- en: Create a string-holding type.
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于DDL和CAST表达式中的列长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。该值是以字节还是字符解释的取决于数据库。'
- en: '`collation` –'
  id: totrans-1147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行呈现。例如：
- en: '[PRE231]'
  id: totrans-1149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Note
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '## PyODBC'
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: '## PyODBC'
- en: Support for the Microsoft SQL Server database via the PyODBC driver.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过PyODBC驱动程序支持Microsoft SQL Server数据库。
- en: DBAPI
  id: totrans-1154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyODBC is available
    at: [https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)
- en: Connecting
  id: totrans-1156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE232]'
  id: totrans-1158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Connecting to PyODBC
  id: totrans-1159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到 PyODBC
- en: The URL here is to be translated to PyODBC connection strings, as detailed in
    [ConnectionStrings](https://code.google.com/p/pyodbc/wiki/ConnectionStrings).
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的 URL 将被翻译为 PyODBC 连接字符串，详细信息请参阅 [ConnectionStrings](https://code.google.com/p/pyodbc/wiki/ConnectionStrings)。
- en: DSN Connections
  id: totrans-1161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: DSN 连接
- en: 'A DSN connection in ODBC means that a pre-existing ODBC datasource is configured
    on the client machine. The application then specifies the name of this datasource,
    which encompasses details such as the specific ODBC driver in use as well as the
    network address of the database. Assuming a datasource is configured on the client,
    a basic DSN-based connection looks like:'
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: ODBC 中的 DSN 连接意味着在客户端机器上配置了预先存在的 ODBC 数据源。然后，应用程序指定此数据源的名称，其中包括诸如正在使用的特定 ODBC
    驱动程序以及数据库的网络地址等详细信息。假设客户端已配置了数据源，则基本的基于 DSN 的连接如下所示：
- en: '[PRE233]'
  id: totrans-1163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'Which above, will pass the following connection string to PyODBC:'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 以上内容将以下连接字符串传递给 PyODBC：
- en: '[PRE234]'
  id: totrans-1165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: If the username and password are omitted, the DSN form will also add the `Trusted_Connection=yes`
    directive to the ODBC string.
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略了用户名和密码，则 DSN 表单还将向 ODBC 字符串添加 `Trusted_Connection=yes` 指令。
- en: Hostname Connections
  id: totrans-1167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主机名连接
- en: Hostname-based connections are also supported by pyodbc. These are often easier
    to use than a DSN and have the additional advantage that the specific database
    name to connect towards may be specified locally in the URL, rather than it being
    fixed as part of a datasource configuration.
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 主机名连接也受到了 pyodbc 的支持。这通常比 DSN 更容易使用，并且具有另一个优势，即可以在 URL 中本地指定要连接的特定数据库名称，而不是作为数据源配置的一部分固定下来。
- en: 'When using a hostname connection, the driver name must also be specified in
    the query parameters of the URL. As these names usually have spaces in them, the
    name must be URL encoded which means using plus signs for spaces:'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用主机名连接时，驱动程序名称也必须在 URL 的查询参数中指定。由于这些名称通常带有空格，因此名称必须进行 URL 编码，这意味着使用加号代替空格：
- en: '[PRE235]'
  id: totrans-1170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: The `driver` keyword is significant to the pyodbc dialect and must be specified
    in lowercase.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: '`driver` 关键字对于 pyodbc 方言很重要，必须以小写形式指定。'
- en: 'Any other names passed in the query string are passed through in the pyodbc
    connect string, such as `authentication`, `TrustServerCertificate`, etc. Multiple
    keyword arguments must be separated by an ampersand (`&`); these will be translated
    to semicolons when the pyodbc connect string is generated internally:'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询字符串中传递的任何其他名称都会在 pyodbc 连接字符串中传递，例如`authentication`、`TrustServerCertificate`等。多个关键字参数必须用与号(`&`)分隔；这些在生成内部
    pyodbc 连接字符串时将被翻译为分号：
- en: '[PRE236]'
  id: totrans-1173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'The equivalent URL can be constructed using [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"):'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    构造等效的 URL：
- en: '[PRE237]'
  id: totrans-1175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Pass through exact Pyodbc string
  id: totrans-1176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过精确的 Pyodbc 字符串
- en: 'A PyODBC connection string can also be sent in pyodbc’s format directly, as
    specified in [the PyODBC documentation](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases),
    using the parameter `odbc_connect`. A [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object can help make this easier:'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 PyODBC 连接字符串也可以直接以 pyodbc 的格式发送，如 [PyODBC 文档](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases)
    中所述，使用参数 `odbc_connect`。一个 [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象可以帮助简化此过程：
- en: '[PRE238]'
  id: totrans-1178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '#### Connecting to databases with access tokens'
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用访问令牌连接数据库'
- en: Some database servers are set up to only accept access tokens for login. For
    example, SQL Server allows the use of Azure Active Directory tokens to connect
    to databases. This requires creating a credential object using the `azure-identity`
    library. More information about the authentication step can be found in [Microsoft’s
    documentation](https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash).
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 某些数据库服务器只设置为仅接受访问令牌进行登录。例如，SQL Server 允许使用 Azure Active Directory 令牌连接到数据库。这需要使用
    `azure-identity` 库创建凭据对象。有关身份验证步骤的更多信息，请参阅 [Microsoft 文档](https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash)。
- en: After getting an engine, the credentials need to be sent to `pyodbc.connect`
    each time a connection is requested. One way to do this is to set up an event
    listener on the engine that adds the credential token to the dialect’s connect
    call. This is discussed more generally in [Generating dynamic authentication tokens](../core/engines.html#engines-dynamic-tokens).
    For SQL Server in particular, this is passed as an ODBC connection attribute with
    a data structure [described by Microsoft](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token).
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 获得引擎后，每次请求连接时都需要将凭证发送到`pyodbc.connect`。一种方法是在引擎上设置事件监听器，该监听器将凭证令牌添加到方言的连接调用中。更详细地讨论了这一点，可以参考[生成动态认证令牌](../core/engines.html#engines-dynamic-tokens)。特别是对于
    SQL Server，这是作为一个 ODBC 连接属性传递的，具有由微软描述的数据结构。
- en: 'The following code snippet will create an engine that connects to an Azure
    SQL database using Azure credentials:'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将创建一个连接到 Azure SQL 数据库的引擎，使用 Azure 凭据连接：
- en: '[PRE239]'
  id: totrans-1183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Tip
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `Trusted_Connection` token is currently added by the SQLAlchemy pyodbc
    dialect when no username or password is present. This needs to be removed per
    Microsoft’s [documentation for Azure access tokens](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token),
    stating that a connection string when using an access token must not contain `UID`,
    `PWD`, `Authentication` or `Trusted_Connection` parameters.  #### Avoiding transaction-related
    exceptions on Azure Synapse Analytics'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有用户名或密码时，SQLAlchemy pyodbc 方言当前会添加`Trusted_Connection`令牌。根据 Microsoft 的[使用
    Azure 访问令牌](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token)文档，这需要删除，该文档指出，使用访问令牌时的连接字符串不得包含`UID`、`PWD`、`Authentication`或`Trusted_Connection`参数。####
    避免在 Azure Synapse Analytics 上出现与事务相关的异常
- en: Azure Synapse Analytics has a significant difference in its transaction handling
    compared to plain SQL Server; in some cases an error within a Synapse transaction
    can cause it to be arbitrarily terminated on the server side, which then causes
    the DBAPI `.rollback()` method (as well as `.commit()`) to fail. The issue prevents
    the usual DBAPI contract of allowing `.rollback()` to pass silently if no transaction
    is present as the driver does not expect this condition. The symptom of this failure
    is an exception with a message resembling ‘No corresponding transaction found.
    (111214)’ when attempting to emit a `.rollback()` after an operation had a failure
    of some kind.
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Synapse Analytics 在其事务处理方面与普通的 SQL Server 有显着的差异；在某些情况下，Synapse 事务内的错误可能导致服务器端任意终止，然后导致
    DBAPI 的`.rollback()`方法（以及`.commit()`）失败。这个问题阻止了通常的 DBAPI 合同允许`.rollback()`在没有事务存在时悄悄通过，因为驱动程序不期望出现这种情况。这种失败的症状是在尝试在某个操作失败后发出`.rollback()`时出现的异常，消息类似于“找不到相应的事务。
    (111214)”。
- en: 'This specific case can be handled by passing `ignore_no_transaction_on_rollback=True`
    to the SQL Server dialect via the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function as follows:'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下方式向 SQL Server 方言的[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")函数传递`ignore_no_transaction_on_rollback=True`参数，可以处理此特定情况：
- en: '[PRE240]'
  id: totrans-1188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Using the above parameter, the dialect will catch `ProgrammingError` exceptions
    raised during `connection.rollback()` and emit a warning if the error message
    contains code `111214`, however will not raise an exception.
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述参数，方言将捕获在`connection.rollback()`期间引发的`ProgrammingError`异常，并在错误消息中包含代码`111214`时发出警告，但不会引发异常。
- en: 'New in version 1.4.40: Added the `ignore_no_transaction_on_rollback=True` parameter.'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.40中新增了`ignore_no_transaction_on_rollback=True`参数。
- en: Enable autocommit for Azure SQL Data Warehouse (DW) connections
  id: totrans-1191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为 Azure SQL Data Warehouse (DW) 连接启用自动提交
- en: 'Azure SQL Data Warehouse does not support transactions, and that can cause
    problems with SQLAlchemy’s “autobegin” (and implicit commit/rollback) behavior.
    We can avoid these problems by enabling autocommit at both the pyodbc and engine
    levels:'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL Data Warehouse 不支持事务，这可能会导致 SQLAlchemy 的“自动开始”（以及隐式提交/回滚）行为出现问题。我们可以通过在
    pyodbc 和引擎级别启用自动提交来避免这些问题：
- en: '[PRE241]'
  id: totrans-1193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Avoiding sending large string parameters as TEXT/NTEXT
  id: totrans-1194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 避免将大型字符串参数作为 TEXT/NTEXT 发送
- en: By default, for historical reasons, Microsoft’s ODBC drivers for SQL Server
    send long string parameters (greater than 4000 SBCS characters or 2000 Unicode
    characters) as TEXT/NTEXT values. TEXT and NTEXT have been deprecated for many
    years and are starting to cause compatibility issues with newer versions of SQL_Server/Azure.
    For example, see [this issue](https://github.com/mkleehammer/pyodbc/issues/835).
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因，默认情况下，Microsoft 的 SQL Server ODBC 驱动程序将长字符串参数（大于 4000 个 SBCS 字符或 2000
    个 Unicode 字符）发送为 TEXT/NTEXT 值。多年来，TEXT 和 NTEXT 已经被弃用，并且开始在新版本的 SQL_Server/Azure
    中引起兼容性问题。例如，请参阅[此问题](https://github.com/mkleehammer/pyodbc/issues/835)。
- en: 'Starting with ODBC Driver 18 for SQL Server we can override the legacy behavior
    and pass long strings as varchar(max)/nvarchar(max) using the `LongAsMax=Yes`
    connection string parameter:'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 从 ODBC Driver 18 for SQL Server 开始，我们可以通过使用`LongAsMax=Yes`连接字符串参数覆盖传统行为，并将长字符串作为
    varchar(max)/nvarchar(max) 传递：
- en: '[PRE242]'
  id: totrans-1197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Pyodbc Pooling / connection close behavior
  id: totrans-1198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pyodbc 连接池 / 连接关闭行为
- en: 'PyODBC uses internal [pooling](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    by default, which means connections will be longer lived than they are within
    SQLAlchemy itself. As SQLAlchemy has its own pooling behavior, it is often preferable
    to disable this behavior. This behavior can only be disabled globally at the PyODBC
    module level, **before** any connections are made:'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 默认使用内部[连接池](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)，这意味着连接的生命周期将比在
    SQLAlchemy 中更长。由于 SQLAlchemy 有自己的连接池行为，通常最好禁用此行为。此行为只能在创建任何连接之前在 PyODBC 模块级别全局禁用，**之前**：
- en: '[PRE243]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: If this variable is left at its default value of `True`, **the application will
    continue to maintain active database connections**, even when the SQLAlchemy engine
    itself fully discards a connection or if the engine is disposed.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将此变量保留在其默认值`True`，**应用程序将继续保持活动数据库连接**，即使 SQLAlchemy 引擎本身完全丢弃连接或引擎被处理。
- en: See also
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[pooling](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    - in the PyODBC documentation.'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接池](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    - 在 PyODBC 文档中。'
- en: Driver / Unicode Support
  id: totrans-1204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序 / Unicode 支持
- en: PyODBC works best with Microsoft ODBC drivers, particularly in the area of Unicode
    support on both Python 2 and Python 3.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 最适合与 Microsoft ODBC 驱动程序一起使用，特别是在 Python 2 和 Python 3 上的 Unicode 支持方面。
- en: Using the FreeTDS ODBC drivers on Linux or OSX with PyODBC is **not** recommended;
    there have been historically many Unicode-related issues in this area, including
    before Microsoft offered ODBC drivers for Linux and OSX. Now that Microsoft offers
    drivers for all platforms, for PyODBC support these are recommended. FreeTDS remains
    relevant for non-ODBC drivers such as pymssql where it works very well.
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 或 OSX 上使用 FreeTDS ODBC 驱动程序与 PyODBC **不**推荐；在这个领域，包括在 Microsoft 为 Linux
    和 OSX 提供 ODBC 驱动程序之前，历史上存在许多与 Unicode 相关的问题。现在 Microsoft 为所有平台提供驱动程序，对于 PyODBC
    支持，建议使用这些驱动程序。FreeTDS 对于非 ODBC 驱动程序（如 pymssql）仍然很重要，在那里它运行得非常好。
- en: Rowcount Support
  id: totrans-1207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行数支持
- en: Previous limitations with the SQLAlchemy ORM’s “versioned rows” feature with
    Pyodbc have been resolved as of SQLAlchemy 2.0.5\. See the notes at [Rowcount
    Support / ORM Versioning](#mssql-rowcount-versioning).
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 SQLAlchemy 2.0.5 版本，已解决了 Pyodbc 与 SQLAlchemy ORM 的“版本化行”功能的先前限制。请参阅[行数支持
    / ORM 版本控制](#mssql-rowcount-versioning)处的说明。
- en: '### Fast Executemany Mode'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: '### 快速执行多个模式'
- en: 'The PyODBC driver includes support for a “fast executemany” mode of execution
    which greatly reduces round trips for a DBAPI `executemany()` call when using
    Microsoft ODBC drivers, for **limited size batches that fit in memory**. The feature
    is enabled by setting the attribute `.fast_executemany` on the DBAPI cursor when
    an executemany call is to be used. The SQLAlchemy PyODBC SQL Server dialect supports
    this parameter by passing the `fast_executemany` parameter to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") , when using the **Microsoft ODBC driver only**:'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 驱动程序包括对“快速执行多个”执行模式的支持，当使用 Microsoft ODBC 驱动程序时，对于**适合内存的有限大小批次**的 DBAPI
    `executemany()` 调用，可以大大减少往返次数。该功能通过在要使用 executemany 调用时在 DBAPI 游标上设置属性`.fast_executemany`
    来启用。当仅使用**Microsoft ODBC 驱动程序**时，SQLAlchemy PyODBC SQL Server 方言支持通过将 `fast_executemany`
    参数传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    来支持此参数：
- en: '[PRE244]'
  id: totrans-1211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'Changed in version 2.0.9: - the `fast_executemany` parameter now has its intended
    effect of this PyODBC feature taking effect for all INSERT statements that are
    executed with multiple parameter sets, which don’t include RETURNING. Previously,
    SQLAlchemy 2.0’s [insertmanyvalues](../glossary.html#term-insertmanyvalues) feature
    would cause `fast_executemany` to not be used in most cases even if specified.'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0.9开始更改：- `fast_executemany`参数现在对于执行多个参数集的所有INSERT语句具有其预期效果，不包括RETURNING。以前，SQLAlchemy
    2.0的[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能会导致在大多数情况下即使指定了`fast_executemany`也不会使用。
- en: New in version 1.3.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: See also
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[fast executemany](https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany)
    - on github  ### Setinputsizes Support'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: '[fast executemany](https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany)
    - 在github上  ### Setinputsizes支持'
- en: As of version 2.0, the pyodbc `cursor.setinputsizes()` method is used for all
    statement executions, except for `cursor.executemany()` calls when fast_executemany=True
    where it is not supported (assuming [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    is kept enabled, “fastexecutemany” will not take place for INSERT statements in
    any case).
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始，pyodbc的`cursor.setinputsizes()`方法用于所有语句执行，除了在`fast_executemany=True`时不支持`cursor.executemany()`调用（假设[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)已启用，“fastexecutemany”在任何情况下都不会对INSERT语句生效）。
- en: The use of `cursor.setinputsizes()` can be disabled by passing `use_setinputsizes=False`
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine").
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")传递`use_setinputsizes=False`可以禁用`cursor.setinputsizes()`的使用。
- en: When `use_setinputsizes` is left at its default of `True`, the specific per-type
    symbols passed to `cursor.setinputsizes()` can be programmatically customized
    using the [`DialectEvents.do_setinputsizes()`](../core/events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes") hook. See that method for
    usage examples.
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 当`use_setinputsizes`保持默认值`True`时，传递给`cursor.setinputsizes()`的特定每种类型符号可以使用[`DialectEvents.do_setinputsizes()`](../core/events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes")钩子进行程序化定制。请参阅该方法以获取用法示例。
- en: 'Changed in version 2.0: The mssql+pyodbc dialect now defaults to using `use_setinputsizes=True`
    for all statement executions with the exception of cursor.executemany() calls
    when fast_executemany=True. The behavior can be turned off by passing `use_setinputsizes=False`
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine").'
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：mssql+pyodbc方言现在默认为所有语句执行使用`use_setinputsizes=True`，除了在`fast_executemany=True`时的cursor.executemany()调用。可以通过向[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")传递`use_setinputsizes=False`来关闭此行为。
- en: DBAPI
  id: totrans-1220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for PyODBC is available
    at: [https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/pyodbc/](https://pypi.org/project/pyodbc/)
- en: Connecting
  id: totrans-1222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE245]'
  id: totrans-1224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Connecting to PyODBC
  id: totrans-1225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到PyODBC
- en: The URL here is to be translated to PyODBC connection strings, as detailed in
    [ConnectionStrings](https://code.google.com/p/pyodbc/wiki/ConnectionStrings).
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的URL将被翻译为PyODBC连接字符串，详细信息请参阅[ConnectionStrings](https://code.google.com/p/pyodbc/wiki/ConnectionStrings)。
- en: DSN Connections
  id: totrans-1227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: DSN连接
- en: 'A DSN connection in ODBC means that a pre-existing ODBC datasource is configured
    on the client machine. The application then specifies the name of this datasource,
    which encompasses details such as the specific ODBC driver in use as well as the
    network address of the database. Assuming a datasource is configured on the client,
    a basic DSN-based connection looks like:'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: ODBC中的DSN连接意味着客户端机器上配置了预先存在的ODBC数据源。然后，应用程序指定此数据源的名称，其中包括诸如正在使用的特定ODBC驱动程序以及数据库的网络地址等详细信息。假设客户端上配置了数据源，基本的基于DSN的连接如下所示：
- en: '[PRE246]'
  id: totrans-1229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'Which above, will pass the following connection string to PyODBC:'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 以上内容将向PyODBC传递以下连接字符串：
- en: '[PRE247]'
  id: totrans-1231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: If the username and password are omitted, the DSN form will also add the `Trusted_Connection=yes`
    directive to the ODBC string.
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略了用户名和密码，DSN表单还将向ODBC字符串添加`Trusted_Connection=yes`指令。
- en: Hostname Connections
  id: totrans-1233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主机名连接
- en: Hostname-based connections are also supported by pyodbc. These are often easier
    to use than a DSN and have the additional advantage that the specific database
    name to connect towards may be specified locally in the URL, rather than it being
    fixed as part of a datasource configuration.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: pyodbc 也支持基于主机名的连接。这通常比使用 DSN 更容易，并且具有以下额外的优势：可以在 URL 中本地指定要连接的特定数据库名称，而不是将其作为数据源配置的固定部分。
- en: 'When using a hostname connection, the driver name must also be specified in
    the query parameters of the URL. As these names usually have spaces in them, the
    name must be URL encoded which means using plus signs for spaces:'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 使用主机名连接时，还必须在 URL 的查询参数中指定驱动程序名称。由于这些名称通常包含空格，因此名称必须进行 URL 编码，这意味着使用加号代替空格：
- en: '[PRE248]'
  id: totrans-1236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: The `driver` keyword is significant to the pyodbc dialect and must be specified
    in lowercase.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '`driver` 关键字对于 pyodbc 方言是重要的，并且必须以小写形式指定。'
- en: 'Any other names passed in the query string are passed through in the pyodbc
    connect string, such as `authentication`, `TrustServerCertificate`, etc. Multiple
    keyword arguments must be separated by an ampersand (`&`); these will be translated
    to semicolons when the pyodbc connect string is generated internally:'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询字符串中传递的任何其他名称都将通过 pyodbc 连接字符串传递，例如 `authentication`、`TrustServerCertificate`
    等。多个关键字参数必须用和号 (`&`) 分隔；在内部生成 pyodbc 连接字符串时，这些将被翻译为分号：
- en: '[PRE249]'
  id: totrans-1239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'The equivalent URL can be constructed using [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"):'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`URL`](../core/engines.html#sqlalchemy.engine.URL) 构造等效的 URL：
- en: '[PRE250]'
  id: totrans-1241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Pass through exact Pyodbc string
  id: totrans-1242
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过准确的 Pyodbc 字符串传递
- en: 'A PyODBC connection string can also be sent in pyodbc’s format directly, as
    specified in [the PyODBC documentation](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases),
    using the parameter `odbc_connect`. A [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object can help make this easier:'
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以直接以 pyodbc 的格式发送 PyODBC 连接字符串，如 [PyODBC 文档](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases)
    中所指定，使用参数 `odbc_connect`。[`URL`](../core/engines.html#sqlalchemy.engine.URL) 对象可以帮助简化这一过程：
- en: '[PRE251]'
  id: totrans-1244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '#### Connecting to databases with access tokens'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用访问令牌连接到数据库'
- en: Some database servers are set up to only accept access tokens for login. For
    example, SQL Server allows the use of Azure Active Directory tokens to connect
    to databases. This requires creating a credential object using the `azure-identity`
    library. More information about the authentication step can be found in [Microsoft’s
    documentation](https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash).
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库服务器仅设置为仅接受访问令牌进行登录。例如，SQL Server 允许使用 Azure Active Directory 令牌连接到数据库。这需要使用
    `azure-identity` 库创建凭据对象。有关身份验证步骤的更多信息，请参阅 [Microsoft 文档](https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash)。
- en: After getting an engine, the credentials need to be sent to `pyodbc.connect`
    each time a connection is requested. One way to do this is to set up an event
    listener on the engine that adds the credential token to the dialect’s connect
    call. This is discussed more generally in [Generating dynamic authentication tokens](../core/engines.html#engines-dynamic-tokens).
    For SQL Server in particular, this is passed as an ODBC connection attribute with
    a data structure [described by Microsoft](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token).
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 获得引擎后，每次请求连接时都需要将凭据发送给 `pyodbc.connect`。一种方法是在引擎上设置事件侦听器，以将凭据令牌添加到方言的连接调用中。关于这一点，可以在
    [生成动态认证令牌](../core/engines.html#engines-dynamic-tokens) 中进行更一般的讨论。特别对于 SQL Server，这是作为
    ODBC 连接属性传递的，具有由 Microsoft 描述的数据结构。
- en: 'The following code snippet will create an engine that connects to an Azure
    SQL database using Azure credentials:'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将创建一个使用 Azure 凭据连接到 Azure SQL 数据库的引擎：
- en: '[PRE252]'
  id: totrans-1249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Tip
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `Trusted_Connection` token is currently added by the SQLAlchemy pyodbc
    dialect when no username or password is present. This needs to be removed per
    Microsoft’s [documentation for Azure access tokens](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token),
    stating that a connection string when using an access token must not contain `UID`,
    `PWD`, `Authentication` or `Trusted_Connection` parameters.  #### Avoiding transaction-related
    exceptions on Azure Synapse Analytics'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有用户名或密码时，SQLAlchemy pyodbc方言当前会添加`Trusted_Connection`令牌。根据微软的[文档](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token)，使用访问令牌时连接字符串不能包含`UID`、`PWD`、`Authentication`或`Trusted_Connection`参数，这需要删除。####
    避免Azure Synapse Analytics上的与事务相关的异常
- en: Azure Synapse Analytics has a significant difference in its transaction handling
    compared to plain SQL Server; in some cases an error within a Synapse transaction
    can cause it to be arbitrarily terminated on the server side, which then causes
    the DBAPI `.rollback()` method (as well as `.commit()`) to fail. The issue prevents
    the usual DBAPI contract of allowing `.rollback()` to pass silently if no transaction
    is present as the driver does not expect this condition. The symptom of this failure
    is an exception with a message resembling ‘No corresponding transaction found.
    (111214)’ when attempting to emit a `.rollback()` after an operation had a failure
    of some kind.
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Synapse Analytics在处理事务方面与普通的SQL Server有显着的不同；在某些情况下，Synapse事务内的错误可能导致服务器端任意终止，这将导致DBAPI的`.rollback()`方法（以及`.commit()`）失败。该问题阻止了通常的DBAPI合同，即允许`.rollback()`在没有事务存在时静默通过，因为驱动程序不期望出现这种情况。此失败的症状是，在某种操作失败后尝试发出`.rollback()`时出现类似于‘No
    corresponding transaction found. (111214)’的异常消息。
- en: 'This specific case can be handled by passing `ignore_no_transaction_on_rollback=True`
    to the SQL Server dialect via the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function as follows:'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式通过[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")函数将`ignore_no_transaction_on_rollback=True`传递给SQL Server方言来处理此特定情况：
- en: '[PRE253]'
  id: totrans-1254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Using the above parameter, the dialect will catch `ProgrammingError` exceptions
    raised during `connection.rollback()` and emit a warning if the error message
    contains code `111214`, however will not raise an exception.
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述参数，方言将捕获在`connection.rollback()`期间引发的`ProgrammingError`异常，并在错误消息包含代码`111214`时发出警告，但不会引发异常。
- en: 'New in version 1.4.40: Added the `ignore_no_transaction_on_rollback=True` parameter.'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.40中添加了`ignore_no_transaction_on_rollback=True`参数。
- en: Enable autocommit for Azure SQL Data Warehouse (DW) connections
  id: totrans-1257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为Azure SQL Data Warehouse（DW）连接启用自动提交
- en: 'Azure SQL Data Warehouse does not support transactions, and that can cause
    problems with SQLAlchemy’s “autobegin” (and implicit commit/rollback) behavior.
    We can avoid these problems by enabling autocommit at both the pyodbc and engine
    levels:'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL Data Warehouse不支持事务，这可能会导致SQLAlchemy的“autobegin”（和隐式提交/回滚）行为出现问题。我们可以通过在pyodbc和引擎级别启用自动提交来避免这些问题：
- en: '[PRE254]'
  id: totrans-1259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Avoiding sending large string parameters as TEXT/NTEXT
  id: totrans-1260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 避免将大型字符串参数发送为TEXT/NTEXT
- en: By default, for historical reasons, Microsoft’s ODBC drivers for SQL Server
    send long string parameters (greater than 4000 SBCS characters or 2000 Unicode
    characters) as TEXT/NTEXT values. TEXT and NTEXT have been deprecated for many
    years and are starting to cause compatibility issues with newer versions of SQL_Server/Azure.
    For example, see [this issue](https://github.com/mkleehammer/pyodbc/issues/835).
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因，默认情况下，Microsoft的SQL Server ODBC驱动程序将长字符串参数（大于4000个SBCS字符或2000个Unicode字符）发送为TEXT/NTEXT值。多年来，TEXT和NTEXT已经过时，并且开始与SQL_Server/Azure的新版本引起兼容性问题。例如，请参阅[此问题](https://github.com/mkleehammer/pyodbc/issues/835)。
- en: 'Starting with ODBC Driver 18 for SQL Server we can override the legacy behavior
    and pass long strings as varchar(max)/nvarchar(max) using the `LongAsMax=Yes`
    connection string parameter:'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 从ODBC驱动程序18开始，我们可以通过`LongAsMax=Yes`连接字符串参数覆盖传统行为，并将长字符串传递为varchar(max)/nvarchar(max)：
- en: '[PRE255]'
  id: totrans-1263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: DSN Connections
  id: totrans-1264
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: DSN连接
- en: 'A DSN connection in ODBC means that a pre-existing ODBC datasource is configured
    on the client machine. The application then specifies the name of this datasource,
    which encompasses details such as the specific ODBC driver in use as well as the
    network address of the database. Assuming a datasource is configured on the client,
    a basic DSN-based connection looks like:'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: ODBC 中的 DSN 连接意味着客户端计算机上配置了预定义的 ODBC 数据源。然后，应用程序指定此数据源的名称，其中包括诸如正在使用的特定 ODBC
    驱动程序以及数据库的网络地址等详细信息。假设客户端上配置了数据源，基本的基于 DSN 的连接如下所示：
- en: '[PRE256]'
  id: totrans-1266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Which above, will pass the following connection string to PyODBC:'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 以上内容将传递以下连接字符串给 PyODBC：
- en: '[PRE257]'
  id: totrans-1268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: If the username and password are omitted, the DSN form will also add the `Trusted_Connection=yes`
    directive to the ODBC string.
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略了用户名和密码，则 DSN 表单还将在 ODBC 字符串中添加 `Trusted_Connection=yes` 指令。
- en: Hostname Connections
  id: totrans-1270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主机名连接
- en: Hostname-based connections are also supported by pyodbc. These are often easier
    to use than a DSN and have the additional advantage that the specific database
    name to connect towards may be specified locally in the URL, rather than it being
    fixed as part of a datasource configuration.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 基于主机名的连接也受 pyodbc 支持。这些通常比 DSN 更容易使用，并且具有其他优点，即可以在 URL 中本地指定要连接的特定数据库名称，而不是作为数据源配置的一部分固定下来。
- en: 'When using a hostname connection, the driver name must also be specified in
    the query parameters of the URL. As these names usually have spaces in them, the
    name must be URL encoded which means using plus signs for spaces:'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用主机名连接时，驱动程序名称也必须在 URL 的查询参数中指定。由于这些名称通常包含空格，因此名称必须进行 URL 编码，这意味着用加号代替空格：
- en: '[PRE258]'
  id: totrans-1273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: The `driver` keyword is significant to the pyodbc dialect and must be specified
    in lowercase.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: '`driver` 关键字对于 pyodbc 方言至关重要，必须以小写指定。'
- en: 'Any other names passed in the query string are passed through in the pyodbc
    connect string, such as `authentication`, `TrustServerCertificate`, etc. Multiple
    keyword arguments must be separated by an ampersand (`&`); these will be translated
    to semicolons when the pyodbc connect string is generated internally:'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 查询字符串中传递的任何其他名称都将通过 pyodbc 连接字符串传递，例如`authentication`、`TrustServerCertificate`等。多个关键字参数必须用
    ampersand (`&`) 分隔；在生成内部 pyodbc 连接字符串时，这些将被翻译为分号：
- en: '[PRE259]'
  id: totrans-1276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'The equivalent URL can be constructed using [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"):'
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    构造等效的 URL：
- en: '[PRE260]'
  id: totrans-1278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Pass through exact Pyodbc string
  id: totrans-1279
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 经过准确的 Pyodbc 字符串
- en: 'A PyODBC connection string can also be sent in pyodbc’s format directly, as
    specified in [the PyODBC documentation](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases),
    using the parameter `odbc_connect`. A [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object can help make this easier:'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC 连接字符串也可以直接以 pyodbc 格式发送，如 [PyODBC 文档](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases)
    中所述，使用参数 `odbc_connect`。[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象可以帮助简化此过程：
- en: '[PRE261]'
  id: totrans-1281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '#### Connecting to databases with access tokens'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用访问令牌连接数据库'
- en: Some database servers are set up to only accept access tokens for login. For
    example, SQL Server allows the use of Azure Active Directory tokens to connect
    to databases. This requires creating a credential object using the `azure-identity`
    library. More information about the authentication step can be found in [Microsoft’s
    documentation](https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash).
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 某些数据库服务器设置为仅接受访问令牌进行登录。例如，SQL Server 允许使用 Azure Active Directory 令牌连接到数据库。这需要使用
    `azure-identity` 库创建凭据对象。有关身份验证步骤的更多信息，请参阅 [微软文档](https://docs.microsoft.com/zh-cn/azure/developer/python/azure-sdk-authenticate?tabs=bash)。
- en: After getting an engine, the credentials need to be sent to `pyodbc.connect`
    each time a connection is requested. One way to do this is to set up an event
    listener on the engine that adds the credential token to the dialect’s connect
    call. This is discussed more generally in [Generating dynamic authentication tokens](../core/engines.html#engines-dynamic-tokens).
    For SQL Server in particular, this is passed as an ODBC connection attribute with
    a data structure [described by Microsoft](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token).
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 获得引擎后，每次请求连接都需要将凭据发送到 `pyodbc.connect`。一种方法是在引擎上设置一个事件侦听器，该事件侦听器将凭据令牌添加到方言的连接调用中。这在
    [生成动态认证令牌](../core/engines.html#engines-dynamic-tokens) 中更一般地讨论过。特别对于 SQL Server，这是作为
    ODBC 连接属性传递的，其数据结构由 Microsoft 描述。
- en: 'The following code snippet will create an engine that connects to an Azure
    SQL database using Azure credentials:'
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将创建一个引擎，该引擎使用 Azure 凭据连接到 Azure SQL 数据库：
- en: '[PRE262]'
  id: totrans-1286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Tip
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `Trusted_Connection` token is currently added by the SQLAlchemy pyodbc dialect
    when no username or password is present. This needs to be removed per Microsoft’s
    [documentation for Azure access tokens](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token),
    stating that a connection string when using an access token must not contain `UID`,
    `PWD`, `Authentication` or `Trusted_Connection` parameters.
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有用户名或密码时，SQLAlchemy pyodbc 方言当前会添加 `Trusted_Connection` 令牌。根据 Microsoft 的
    [Azure 访问令牌文档](https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token)，当使用访问令牌时，连接字符串不得包含
    `UID`、`PWD`、`Authentication` 或 `Trusted_Connection` 参数，因此需要删除此参数。
- en: '#### Avoiding transaction-related exceptions on Azure Synapse Analytics'
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 避免在 Azure Synapse Analytics 上出现与事务相关的异常'
- en: Azure Synapse Analytics has a significant difference in its transaction handling
    compared to plain SQL Server; in some cases an error within a Synapse transaction
    can cause it to be arbitrarily terminated on the server side, which then causes
    the DBAPI `.rollback()` method (as well as `.commit()`) to fail. The issue prevents
    the usual DBAPI contract of allowing `.rollback()` to pass silently if no transaction
    is present as the driver does not expect this condition. The symptom of this failure
    is an exception with a message resembling ‘No corresponding transaction found.
    (111214)’ when attempting to emit a `.rollback()` after an operation had a failure
    of some kind.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Synapse Analytics 在事务处理方面与普通 SQL Server 有显着差异；在某些情况下，Synapse 事务中的错误可能导致服务器端任意终止，这会导致
    DBAPI 的 `.rollback()` 方法（以及 `.commit()`）失败。该问题阻止了通常的 DBAPI 契约，即允许 `.rollback()`
    在没有事务存在时悄无声息地传递，因为驱动程序不期望出现这种情况。此失败的症状是在尝试在某种操作失败后发出 `.rollback()` 时出现类似于 'No
    corresponding transaction found. (111214)' 的消息的异常。
- en: 'This specific case can be handled by passing `ignore_no_transaction_on_rollback=True`
    to the SQL Server dialect via the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function as follows:'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下方式将 `ignore_no_transaction_on_rollback=True` 传递给 SQL Server 方言，可以处理这种特殊情况，通过
    [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    函数：
- en: '[PRE263]'
  id: totrans-1292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Using the above parameter, the dialect will catch `ProgrammingError` exceptions
    raised during `connection.rollback()` and emit a warning if the error message
    contains code `111214`, however will not raise an exception.
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述参数，方言将捕获 `connection.rollback()` 期间引发的 `ProgrammingError` 异常，并在错误消息中包含代码
    `111214` 时发出警告，但不会引发异常。
- en: 'New in version 1.4.40: Added the `ignore_no_transaction_on_rollback=True` parameter.'
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.40 中新增了 `ignore_no_transaction_on_rollback=True` 参数。
- en: Enable autocommit for Azure SQL Data Warehouse (DW) connections
  id: totrans-1295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为 Azure SQL 数据仓库 (DW) 连接启用自动提交
- en: 'Azure SQL Data Warehouse does not support transactions, and that can cause
    problems with SQLAlchemy’s “autobegin” (and implicit commit/rollback) behavior.
    We can avoid these problems by enabling autocommit at both the pyodbc and engine
    levels:'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 数据仓库不支持事务，这可能会导致 SQLAlchemy 的 “自动开始” (以及隐式提交/回滚) 行为出现问题。我们可以通过在 pyodbc
    和引擎级别启用自动提交来避免这些问题：
- en: '[PRE264]'
  id: totrans-1297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: Avoiding sending large string parameters as TEXT/NTEXT
  id: totrans-1298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 避免将大型字符串参数发送为 TEXT/NTEXT
- en: By default, for historical reasons, Microsoft’s ODBC drivers for SQL Server
    send long string parameters (greater than 4000 SBCS characters or 2000 Unicode
    characters) as TEXT/NTEXT values. TEXT and NTEXT have been deprecated for many
    years and are starting to cause compatibility issues with newer versions of SQL_Server/Azure.
    For example, see [this issue](https://github.com/mkleehammer/pyodbc/issues/835).
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因，默认情况下，Microsoft的ODBC驱动程序会将长字符串参数（大于4000个SBCS字符或2000个Unicode字符）发送为TEXT/NTEXT值。多年来，TEXT和NTEXT已经被弃用，并且开始在新版本的SQL_Server/Azure中引起兼容性问题。例如，请参阅[此问题](https://github.com/mkleehammer/pyodbc/issues/835)。
- en: 'Starting with ODBC Driver 18 for SQL Server we can override the legacy behavior
    and pass long strings as varchar(max)/nvarchar(max) using the `LongAsMax=Yes`
    connection string parameter:'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 从ODBC Driver 18 for SQL Server开始，我们可以通过`LongAsMax=Yes`连接字符串参数覆盖传递长字符串作为varchar(max)/nvarchar(max)的传统行为：
- en: '[PRE265]'
  id: totrans-1301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Pyodbc Pooling / connection close behavior
  id: totrans-1302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pyodbc连接池/连接关闭行为
- en: 'PyODBC uses internal [pooling](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    by default, which means connections will be longer lived than they are within
    SQLAlchemy itself. As SQLAlchemy has its own pooling behavior, it is often preferable
    to disable this behavior. This behavior can only be disabled globally at the PyODBC
    module level, **before** any connections are made:'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC默认使用内部[连接池](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)，这意味着连接的生命周期将比在SQLAlchemy内部更长。由于SQLAlchemy具有自己的连接池行为，通常最好禁用此行为。此行为只能在创建任何连接之前在PyODBC模块级别全局禁用：
- en: '[PRE266]'
  id: totrans-1304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: If this variable is left at its default value of `True`, **the application will
    continue to maintain active database connections**, even when the SQLAlchemy engine
    itself fully discards a connection or if the engine is disposed.
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将此变量保留在其默认值`True`，**应用程序将继续保持活动数据库连接**，即使SQLAlchemy引擎本身完全丢弃连接或引擎被处理。
- en: See also
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[pooling](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    - in the PyODBC documentation.'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接池](https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling)
    - 在PyODBC文档中。'
- en: Driver / Unicode Support
  id: totrans-1308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 驱动程序/Unicode支持
- en: PyODBC works best with Microsoft ODBC drivers, particularly in the area of Unicode
    support on both Python 2 and Python 3.
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC最适合与Microsoft ODBC驱动程序一起使用，特别是在Python 2和Python 3的Unicode支持领域。
- en: Using the FreeTDS ODBC drivers on Linux or OSX with PyODBC is **not** recommended;
    there have been historically many Unicode-related issues in this area, including
    before Microsoft offered ODBC drivers for Linux and OSX. Now that Microsoft offers
    drivers for all platforms, for PyODBC support these are recommended. FreeTDS remains
    relevant for non-ODBC drivers such as pymssql where it works very well.
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux或OSX上使用FreeTDS ODBC驱动与PyODBC **不**推荐；在这个领域历史上存在许多与Unicode相关的问题，包括在Microsoft为Linux和OSX提供ODBC驱动之前。现在Microsoft为所有平台提供驱动程序，对于PyODBC支持，这些是推荐的。FreeTDS仍然适用于非ODBC驱动程序，如pymssql，在这里它运行得非常好。
- en: Rowcount Support
  id: totrans-1311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行数支持
- en: Previous limitations with the SQLAlchemy ORM’s “versioned rows” feature with
    Pyodbc have been resolved as of SQLAlchemy 2.0.5\. See the notes at [Rowcount
    Support / ORM Versioning](#mssql-rowcount-versioning).
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 截至SQLAlchemy 2.0.5版本，已解决了Pyodbc与SQLAlchemy ORM的“版本化行”功能的先前限制。请参阅[Rowcount Support
    / ORM Versioning](#mssql-rowcount-versioning)中的说明。
- en: '### Fast Executemany Mode'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: '### 快速Executemany模式'
- en: 'The PyODBC driver includes support for a “fast executemany” mode of execution
    which greatly reduces round trips for a DBAPI `executemany()` call when using
    Microsoft ODBC drivers, for **limited size batches that fit in memory**. The feature
    is enabled by setting the attribute `.fast_executemany` on the DBAPI cursor when
    an executemany call is to be used. The SQLAlchemy PyODBC SQL Server dialect supports
    this parameter by passing the `fast_executemany` parameter to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") , when using the **Microsoft ODBC driver only**:'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: PyODBC驱动程序包括对“快速executemany”执行模式的支持，当使用Microsoft ODBC驱动程序时，对于适合内存的**有限大小批次**的DBAPI
    `executemany()`调用大大减少了往返次数。当要使用executemany调用时，在DBAPI游标上设置属性`.fast_executemany`即可启用此功能。SQLAlchemy
    PyODBC SQL Server方言通过将`fast_executemany`参数传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")来支持此参数，仅使用**Microsoft ODBC驱动程序**：
- en: '[PRE267]'
  id: totrans-1315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'Changed in version 2.0.9: - the `fast_executemany` parameter now has its intended
    effect of this PyODBC feature taking effect for all INSERT statements that are
    executed with multiple parameter sets, which don’t include RETURNING. Previously,
    SQLAlchemy 2.0’s [insertmanyvalues](../glossary.html#term-insertmanyvalues) feature
    would cause `fast_executemany` to not be used in most cases even if specified.'
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.9 版本更改：- `fast_executemany` 参数现在对具有多个参数集的所有 INSERT 语句产生了预期的效果，这些参数集不包括 RETURNING。在以前的情况下，即使指定了，SQLAlchemy
    2.0 的 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 特性也会导致在大多数情况下不使用
    `fast_executemany`。
- en: New in version 1.3.
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能版本 1.3。
- en: See also
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[fast executemany](https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany)
    - on github'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: '[快速执行多次](https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany)
    - 在 github 上'
- en: '### Setinputsizes Support'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '### Setinputsizes 支持'
- en: As of version 2.0, the pyodbc `cursor.setinputsizes()` method is used for all
    statement executions, except for `cursor.executemany()` calls when fast_executemany=True
    where it is not supported (assuming [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    is kept enabled, “fastexecutemany” will not take place for INSERT statements in
    any case).
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始，pyodbc 的 `cursor.setinputsizes()` 方法用于所有语句执行，除了 `cursor.executemany()`
    调用 fast_executemany=True 的情况下不支持（假设保持 [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    已启用，“fastexecutemany” 将不会对任何情况下的 INSERT 语句产生作用）。
- en: The use of `cursor.setinputsizes()` can be disabled by passing `use_setinputsizes=False`
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine").
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `use_setinputsizes=False` 传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 可以禁用 `cursor.setinputsizes()` 的使用。
- en: When `use_setinputsizes` is left at its default of `True`, the specific per-type
    symbols passed to `cursor.setinputsizes()` can be programmatically customized
    using the [`DialectEvents.do_setinputsizes()`](../core/events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes") hook. See that method for
    usage examples.
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `use_setinputsizes` 保持默认值 `True` 时，传递给 `cursor.setinputsizes()` 的具体每种类型的符号可以使用
    [`DialectEvents.do_setinputsizes()`](../core/events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes") 钩子进行程序化定制。查看该方法以获取用法示例。
- en: 'Changed in version 2.0: The mssql+pyodbc dialect now defaults to using `use_setinputsizes=True`
    for all statement executions with the exception of cursor.executemany() calls
    when fast_executemany=True. The behavior can be turned off by passing `use_setinputsizes=False`
    to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine").'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本更改：mssql+pyodbc 方言现在默认为所有语句执行使用 `use_setinputsizes=True`，除了 cursor.executemany()
    调用 fast_executemany=True 时的情况。可以通过将 `use_setinputsizes=False` 传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 来关闭此行为。
- en: '## pymssql'
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: '## pymssql'
- en: Support for the Microsoft SQL Server database via the pymssql driver.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 pymssql 驱动程序支持 Microsoft SQL Server 数据库。
- en: Connecting
  id: totrans-1327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE268]'
  id: totrans-1329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: pymssql is a Python module that provides a Python DBAPI interface around [FreeTDS](https://www.freetds.org/).
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: pymssql 是一个提供围绕 [FreeTDS](https://www.freetds.org/) 的 Python DBAPI 接口的 Python
    模块。
- en: 'Changed in version 2.0.5: pymssql was restored to SQLAlchemy’s continuous integration
    testing'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.5 版本更改：pymssql 已恢复到 SQLAlchemy 的持续集成测试中。
- en: Connecting
  id: totrans-1332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE269]'
  id: totrans-1334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '## aioodbc'
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: '## aioodbc'
- en: Support for the Microsoft SQL Server database via the aioodbc driver.
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 aioodbc 驱动程序支持 Microsoft SQL Server 数据库。
- en: DBAPI
  id: totrans-1337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for aioodbc is available
    at: [https://pypi.org/project/aioodbc/](https://pypi.org/project/aioodbc/)'
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: aioodbc 的文档和下载信息（如适用）可在此处获取：[https://pypi.org/project/aioodbc/](https://pypi.org/project/aioodbc/)
- en: Connecting
  id: totrans-1339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE270]'
  id: totrans-1341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Support for the SQL Server database in asyncio style, using the aioodbc driver
    which itself is a thread-wrapper around pyodbc.
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 aioodbc 驱动程序以 asyncio 风格支持 SQL Server 数据库，该驱动程序本身是围绕 pyodbc 的线程包装器。
- en: 'New in version 2.0.23: Added the mssql+aioodbc dialect which builds on top
    of the pyodbc and general aio* dialect architecture.'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能版本 2.0.23：增加了 mssql+aioodbc 方言，它是基于 pyodbc 和通用 aio* 方言架构构建的。
- en: Using a special asyncio mediation layer, the aioodbc dialect is usable as the
    backend for the [SQLAlchemy asyncio](../orm/extensions/asyncio.html) extension
    package.
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的 asyncio 中介层，aioodbc 方言可作为 [SQLAlchemy asyncio](../orm/extensions/asyncio.html)
    扩展包的后端使用。
- en: Most behaviors and caveats for this driver are the same as that of the pyodbc
    dialect used on SQL Server; see [PyODBC](#mssql-pyodbc) for general background.
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 此驱动程序的大多数行为和注意事项与在SQL Server上使用的pyodbc方言相同；有关一般背景，请参阅[PyODBC](#mssql-pyodbc)。
- en: 'This dialect should normally be used only with the [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine creation function; connection
    styles are otherwise equivalent to those documented in the pyodbc section:'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言通常仅应与[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")引擎创建函数一起使用；否则连接样式与pyodbc部分中记录的相同：
- en: '[PRE271]'
  id: totrans-1347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: DBAPI
  id: totrans-1348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for aioodbc is available
    at: [https://pypi.org/project/aioodbc/](https://pypi.org/project/aioodbc/)'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和下载信息（如果适用）可在以下网址找到：[https://pypi.org/project/aioodbc/](https://pypi.org/project/aioodbc/)
- en: Connecting
  id: totrans-1350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接中
- en: 'Connect String:'
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE272]'
  id: totrans-1352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
