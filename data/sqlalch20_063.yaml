- en: Asynchronous I/O (asyncio)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步I/O（asyncio）
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html](https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html](https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html)
- en: Support for Python asyncio. Support for Core and ORM usage is included, using
    asyncio-compatible dialects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 支持Python asyncio。包括对Core和ORM使用的支持，使用与asyncio兼容的方言。
- en: New in version 1.4.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: Warning
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Please read [Asyncio Platform Installation Notes (Including Apple M1)](#asyncio-install)
    for important platform installation notes for many platforms, including **Apple
    M1 Architecture**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请阅读[Asyncio平台安装说明（包括Apple M1）](#asyncio-install)以获取许多平台的重要平台安装说明，包括**Apple M1架构**。
- en: See also
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Asynchronous IO Support for Core and ORM](../../changelog/migration_14.html#change-3414)
    - initial feature announcement'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Core和ORM的异步IO支持](../../changelog/migration_14.html#change-3414) - 初始功能公告'
- en: '[Asyncio Integration](../examples.html#examples-asyncio) - example scripts
    illustrating working examples of Core and ORM use within the asyncio extension.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[异步IO集成](../examples.html#examples-asyncio) - 展示了在asyncio扩展中使用Core和ORM的示例脚本。'
- en: '## Asyncio Platform Installation Notes (Including Apple M1)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '## Asyncio平台安装说明（包括Apple M1）'
- en: 'The asyncio extension requires Python 3 only. It also depends upon the [greenlet](https://pypi.org/project/greenlet/)
    library. This dependency is installed by default on common machine platforms including:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: asyncio扩展仅支持Python 3。它还依赖于[greenlet](https://pypi.org/project/greenlet/)库。这个依赖在常见的机器平台上默认安装，包括：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For the above platforms, `greenlet` is known to supply pre-built wheel files.
    For other platforms, **greenlet does not install by default**; the current file
    listing for greenlet can be seen at [Greenlet - Download Files](https://pypi.org/project/greenlet/#files).
    Note that **there are many architectures omitted, including Apple M1**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述平台，`greenlet`已知提供预构建的wheel文件。对于其他平台，**greenlet不会默认安装**；可以在[Greenlet - Download
    Files](https://pypi.org/project/greenlet/#files)查看当前的文件列表。请注意**有许多架构被省略，包括Apple
    M1**。
- en: 'To install SQLAlchemy while ensuring the `greenlet` dependency is present regardless
    of what platform is in use, the `[asyncio]` [setuptools extra](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-setuptools-extras)
    may be installed as follows, which will include also instruct `pip` to install
    `greenlet`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装SQLAlchemy并确保`greenlet`依赖存在，无论使用什么平台，可以按照以下方式安装`[asyncio]` [setuptools extra](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-setuptools-extras)，这也会指示`pip`安装`greenlet`：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that installation of `greenlet` on platforms that do not have a pre-built
    wheel file means that `greenlet` will be built from source, which requires that
    Python’s development libraries also be present.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在没有预构建wheel文件的平台上安装`greenlet`意味着`greenlet`将从源代码构建，这要求Python的开发库也存在。
- en: Synopsis - Core
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要 - Core
- en: 'For Core use, the [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function creates an instance of
    [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    which then offers an async version of the traditional [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") API. The [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") delivers an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") via its [`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect") and [`AsyncEngine.begin()`](#sqlalchemy.ext.asyncio.AsyncEngine.begin
    "sqlalchemy.ext.asyncio.AsyncEngine.begin") methods which both deliver asynchronous
    context managers. The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") can then invoke statements using either
    the [`AsyncConnection.execute()`](#sqlalchemy.ext.asyncio.AsyncConnection.execute
    "sqlalchemy.ext.asyncio.AsyncConnection.execute") method to deliver a buffered
    [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result"),
    or the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method to deliver a streaming
    server-side [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult"):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于核心用法，[`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")函数创建一个[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")的实例，然后提供传统[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") API的异步版本。[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")通过其[`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect")和[`AsyncEngine.begin()`](#sqlalchemy.ext.asyncio.AsyncEngine.begin
    "sqlalchemy.ext.asyncio.AsyncEngine.begin")方法提供一个[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")，这两个方法都提供异步上下文管理器。[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")然后可以使用[`AsyncConnection.execute()`](#sqlalchemy.ext.asyncio.AsyncConnection.execute
    "sqlalchemy.ext.asyncio.AsyncConnection.execute")方法来执行语句以提供一个缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")，或者使用[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")方法来提供一个流式的服务器端[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Above, the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method may be used to invoke
    special DDL functions such as [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") that don’t include an awaitable hook.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")方法可用于调用特殊的DDL函数，例如[`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")，这些函数不包括可等待的钩子。
- en: Tip
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'It’s advisable to invoke the [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") method using `await` when using
    the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    object in a scope that will go out of context and be garbage collected, as illustrated
    in the `async_main` function in the above example. This ensures that any connections
    held open by the connection pool will be properly disposed within an awaitable
    context. Unlike when using blocking IO, SQLAlchemy cannot properly dispose of
    these connections within methods like `__del__` or weakref finalizers as there
    is no opportunity to invoke `await`. Failing to explicitly dispose of the engine
    when it falls out of scope may result in warnings emitted to standard out resembling
    the form `RuntimeError: Event loop is closed` within garbage collection.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '在使用[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")对象的范围内调用`await`来调用[`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose")方法是明智的，如上例中的`async_main`函数所示。这确保了连接池保持的任何连接在可等待的上下文中被正确处理。与使用阻塞IO不同，SQLAlchemy无法在`__del__`或弱引用终结器等方法中正确处理这些连接，因为没有机会调用`await`。当引擎超出范围时未显式处理引擎可能导致发出到标准输出的警告，类似于`RuntimeError:
    Event loop is closed`的形式在垃圾回收中。'
- en: 'The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    also features a “streaming” API via the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method that returns an [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object. This result object uses a server-side
    cursor and provides an async/await API, such as an async iterator:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    还提供了一个“流式” API，通过 [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") 方法返回一个 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") 对象。该结果对象使用服务器端游标并提供了一个 async/await API，比如一个异步迭代器：'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '## Synopsis - ORM'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '## 概要 - ORM'
- en: Using [2.0 style](../../glossary.html#term-2.0-style) querying, the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class provides full ORM functionality.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [2.0 风格](../../glossary.html#term-2.0-style) 查询，[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 类提供了完整的 ORM 功能。
- en: Within the default mode of use, special care must be taken to avoid [lazy loading](../../glossary.html#term-lazy-loading)
    or other expired-attribute access involving ORM relationships and column attributes;
    the next section [Preventing Implicit IO when Using AsyncSession](#asyncio-orm-avoid-lazyloads)
    details this.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认使用模式下，必须特别小心，以避免涉及 ORM 关系和列属性的 [惰性加载](../../glossary.html#term-lazy-loading)
    或其他已过期的属性访问；下一节 [在使用 AsyncSession 时防止隐式 IO](#asyncio-orm-avoid-lazyloads) 对此进行了详细说明。
- en: Warning
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: A single instance of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is **not safe for use in multiple, concurrent tasks**. See the sections [Using
    AsyncSession with Concurrent Tasks](#asyncio-concurrency) and [Is the Session
    thread-safe? Is AsyncSession safe to share in concurrent tasks?](../session_basics.html#session-faq-threadsafe)
    for background.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    实例**不能安全地用于多个并发任务**。请参阅章节 [在并发任务中使用 AsyncSession](#asyncio-concurrency) 和 [会话是线程安全的吗？
    AsyncSession 是否安全用于共享在并发任务中？](../session_basics.html#session-faq-threadsafe) 了解背景信息。
- en: 'The example below illustrates a complete example including mapper and session
    configuration:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例演示了一个完整的示例，包括映射器和会话配置：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the example above, the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is instantiated using the optional [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") helper, which provides a factory
    for new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects with a fixed set of parameters, which here includes associating it with
    an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    against particular database URL. It is then passed to other methods where it may
    be used in a Python asynchronous context manager (i.e. `async with:` statement)
    so that it is automatically closed at the end of the block; this is equivalent
    to calling the [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，使用可选的 [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") 助手实例化了 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，该助手提供了一个带有固定参数集的新 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象的工厂，其中包括将其与特定数据库 URL 关联。然后将其传递给其他方法，在那里它可以在
    Python 异步上下文管理器（即 `async with:` 语句）中使用，以便在块结束时自动关闭；这相当于调用 [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") 方法。
- en: '### Using AsyncSession with Concurrent Tasks'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '### 在并发任务中使用 AsyncSession'
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object is a **mutable, stateful object** which represents a **single, stateful
    database transaction in progress**. Using concurrent tasks with asyncio, with
    APIs such as `asyncio.gather()` for example, should use a **separate** [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") **per individual task**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    对象是一个**可变的，有状态的对象**，代表了**正在进行的单个，有状态的数据库事务**。使用 asyncio 的并发任务，例如使用 `asyncio.gather()`
    等 API，应该**每个个体任务**使用**单独的** [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")。 '
- en: 'See the section [Is the Session thread-safe? Is AsyncSession safe to share
    in concurrent tasks?](../session_basics.html#session-faq-threadsafe) for a general
    description of the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with regards to how they should be used with concurrent workloads.  ### Preventing
    Implicit IO when Using AsyncSession'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [Is the Session thread-safe? Is AsyncSession safe to share in concurrent
    tasks?](../session_basics.html#session-faq-threadsafe) 部分，了解关于 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 和 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 如何在并发工作负载中使用的一般描述。### 在使用 AsyncSession
    时防止隐式 IO
- en: Using traditional asyncio, the application needs to avoid any points at which
    IO-on-attribute access may occur. Techniques that can be used to help this are
    below, many of which are illustrated in the preceding example.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统 asyncio，应用程序需要避免发生任何可能导致 IO-on-attribute 访问的点。以下是可用于帮助此目的的技术，在前述示例中有很多技术。
- en: 'Attributes that are lazy-loading relationships, deferred columns or expressions,
    or are being accessed in expiration scenarios can take advantage of the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin. This mixin, when added to a specific
    class or more generally to the Declarative `Base` superclass, provides an accessor
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") which delivers any attribute
    as an awaitable:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 懒加载关系、延迟列或表达式的属性，或在到期情况下被访问的属性可以利用 [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin。当将此 mixin 添加到特定类或更一般地添加到 Declarative
    `Base` 超类时，它提供一个访问器 [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs")，它将任何属性作为可等待对象提供：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Accessing the `A.bs` collection on newly loaded instances of `A` when eager
    loading is not in use will normally use [lazy loading](../../glossary.html#term-lazy-loading),
    which in order to succeed will usually emit IO to the database, which will fail
    under asyncio as no implicit IO is allowed. To access this attribute directly
    under asyncio without any prior loading operations, the attribute can be accessed
    as an awaitable by indicating the [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") prefix:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在不使用急加载的情况下，访问新加载的 `A` 实例上的 `A.bs` 集合通常会使用 [lazy loading](../../glossary.html#term-lazy-loading)，为了成功，通常会向数据库发出
    IO，但在 asyncio 下会失败，因为不允许隐式 IO。在没有任何先前加载操作的情况下直接访问此属性，在 asyncio 下，该属性可以作为可等待对象进行访问，指示
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") 前缀：
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin provides a succinct facade over the internal approach that’s also used by
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin 提供了一个简洁的外观，它覆盖了内部方法，该方法也被 [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") 方法使用。'
- en: New in version 2.0.13.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0.13 中的新功能。
- en: See also
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
- en: Collections can be replaced with **write only collections** that will never
    emit IO implicitly, by using the [Write Only Relationships](../large_collections.html#write-only-relationship)
    feature in SQLAlchemy 2.0\. Using this feature, collections are never read from,
    only queried using explicit SQL calls. See the example `async_orm_writeonly.py`
    in the [Asyncio Integration](../examples.html#examples-asyncio) section for an
    example of write-only collections used with asyncio.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SQLAlchemy 2.0 中的 [Write Only Relationships](../large_collections.html#write-only-relationship)
    特性，可以将集合替换为**只写集合**，这些集合永远不会隐式发出 IO，在此特性下，集合从不读取，只使用显式 SQL 调用查询。在 [Asyncio Integration](../examples.html#examples-asyncio)
    部分的示例 `async_orm_writeonly.py` 中，可见一个使用 asyncio 的只写集合示例。
- en: When using write only collections, the program’s behavior is simple and easy
    to predict regarding collections. However, the downside is that there is not any
    built-in system for loading many of these collections all at once, which instead
    would need to be performed manually. Therefore, many of the bullets below address
    specific techniques when using traditional lazy-loaded relationships with asyncio,
    which requires more care.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用仅写集合时，程序的行为在关于集合方面是简单且易于预测的。然而，缺点是没有任何内置系统可以一次性加载许多这些集合，而是需要手动执行。因此，下面的许多要点涉及在使用asyncio时使用传统的懒加载关系时需要更加小心的具体技术。
- en: If not using [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs"),
    relationships can be declared with `lazy="raise"` so that by default they will
    not attempt to emit SQL. In order to load collections, [eager loading](../../glossary.html#term-eager-loading)
    would be used instead.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不使用[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")，关系可以声明为`lazy="raise"`，这样默认情况下它们不会尝试发出SQL。为了加载集合，将使用[eager
    loading](../../glossary.html#term-eager-loading)。
- en: 'The most useful eager loading strategy is the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader, which is employed in the previous
    example in order to eagerly load the `A.bs` collection within the scope of the
    `await session.execute()` call:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最有用的急加载策略是[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")急加载器，在前面的例子中被用来在`await session.execute()`调用的范围内急加载`A.bs`集合：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When constructing new objects, **collections are always assigned a default,
    empty collection**, such as a list in the above example:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当构建新对象时，**集合总是被分配一个默认的空集合**，比如上面的例子中的列表：
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This allows the `.bs` collection on the above `A` object to be present and readable
    when the `A` object is flushed; otherwise, when the `A` is flushed, `.bs` would
    be unloaded and would raise an error on access.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许在刷新`A`对象时，上述`A`对象上的`.bs`集合存在且可读；否则，当刷新`A`时，`.bs`将被卸载并在访问时引发错误。
- en: 'The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is configured using [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") set to False, so that we may access attributes on an
    object subsequent to a call to [`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit"), as in the line at the end where
    we access an attribute:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")是使用[`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")设置为False进行配置的，这样我们可以在调用[`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit")之后访问对象的属性，就像在最后一行访问属性时一样：'
- en: '[PRE9]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Other guidelines include:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 其他指导原则包括：
- en: Methods like [`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire
    "sqlalchemy.ext.asyncio.AsyncSession.expire") should be avoided in favor of [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh"); **if** expiration is absolutely
    needed. Expiration should generally **not** be needed as [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") should normally be set to `False` when using asyncio.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该避免使用类似[`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire
    "sqlalchemy.ext.asyncio.AsyncSession.expire")的方法，而应该使用[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")；**如果**绝对需要过期。通常情况下不应该需要过期，因为在使用asyncio时通常应该将[`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")设置为`False`。
- en: 'A lazy-loaded relationship **can be loaded explicitly under asyncio** using
    [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh "sqlalchemy.ext.asyncio.AsyncSession.refresh"),
    **if** the desired attribute name is passed explicitly to [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), e.g.:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh "sqlalchemy.ext.asyncio.AsyncSession.refresh")可以显式加载懒加载关系，**如果**所需的属性名称被显式传递给[`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")，例如：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It’s of course preferable to use eager loading up front in order to have collections
    already set up without the need to lazy-load.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然最好一开始就使用急加载，以便无需延迟加载即可设置集合。
- en: 'New in version 2.0.4: Added support for [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") and the underlying [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method to force lazy-loaded relationships to
    load, if they are named explicitly in the [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") parameter. In previous versions, the relationship
    would be silently skipped even if named in the parameter.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0.4版中新增了对[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")和底层[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法的支持，以强制懒加载的关系加载，如果它们在[`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")参数中明确命名。在之前的版本中，即使在参数中命名了关系，也会被静默跳过。
- en: Avoid using the `all` cascade option documented at [Cascades](../cascades.html#unitofwork-cascades)
    in favor of listing out the desired cascade features explicitly. The `all` cascade
    option implies among others the [refresh-expire](../cascades.html#cascade-refresh-expire)
    setting, which means that the [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") method will expire the attributes
    on related objects, but not necessarily refresh those related objects assuming
    eager loading is not configured within the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), leaving them in an expired state.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用文档中记录的[Cascades](../cascades.html#unitofwork-cascades)中的`all`级联选项，而是明确列出所需的级联特性。`all`级联选项暗示了[refresh-expire](../cascades.html#cascade-refresh-expire)设置，这意味着[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")方法将使相关对象上的属性过期，但不一定会刷新那些相关对象，假设未在[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")内配置急加载，则将其保留在过期状态。
- en: Appropriate loader options should be employed for [`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") columns, if used at all, in addition to that of [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs as noted above. See [Limiting which
    Columns Load with Column Deferral](../queryguide/columns.html#orm-queryguide-column-deferral)
    for background on deferred column loading.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用，应该使用适当的加载器选项来为[`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")列进行延迟加载，除了上面注意到的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")结构。请参阅[Limiting which Columns Load with Column Deferral](../queryguide/columns.html#orm-queryguide-column-deferral)了解延迟列加载的背景信息。
- en: 'The “dynamic” relationship loader strategy described at [Dynamic Relationship
    Loaders](../large_collections.html#dynamic-relationship) is not compatible by
    default with the asyncio approach. It can be used directly only if invoked within
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method described at [Running Synchronous
    Methods and Functions under asyncio](#session-run-sync), or by using its `.statement`
    attribute to obtain a normal select:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[Dynamic Relationship Loaders](../large_collections.html#dynamic-relationship)中描述的“动态”关系加载器策略默认情况下不与asyncio方法兼容。只有在[Running
    Synchronous Methods and Functions under asyncio](#session-run-sync)中描述的[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")方法内调用时，或者通过使用其`.statement`属性获取普通选择时，它才能直接使用：
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The [write only](../large_collections.html#write-only-relationship) technique,
    introduced in version 2.0 of SQLAlchemy, is fully compatible with asyncio and
    should be preferred.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入SQLAlchemy 2.0版本的[write only](../large_collections.html#write-only-relationship)技术完全与asyncio兼容，并应优先使用。
- en: See also
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[“Dynamic” relationship loaders superseded by “Write Only”](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - notes on migration to 2.0 style'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“动态”关系加载器被“只写”所取代](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - 迁移到2.0样式的注意事项'
- en: 'If using asyncio with a database that does not support RETURNING, such as MySQL
    8, server default values such as generated timestamps will not be available on
    newly flushed objects unless the [`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") option is used. In SQLAlchemy 2.0, this behavior is applied
    automatically to backends like PostgreSQL, SQLite and MariaDB which use RETURNING
    to fetch new values when rows are INSERTed.  ### Running Synchronous Methods and
    Functions under asyncio'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在不支持 RETURNING 的数据库（例如 MySQL 8）中使用 asyncio，那么新刷新的对象上将不会有服务器默认值，例如生成的时间戳，除非使用
    [`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") 选项。在 SQLAlchemy 2.0 中，这种行为会自动应用于像 PostgreSQL、SQLite 和
    MariaDB 这样使用 RETURNING 在插入行时获取新值的后端。### 在 asyncio 下运行同步方法和函数
- en: Deep Alchemy
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: This approach is essentially exposing publicly the mechanism by which SQLAlchemy
    is able to provide the asyncio interface in the first place. While there is no
    technical issue with doing so, overall the approach can probably be considered
    “controversial” as it works against some of the central philosophies of the asyncio
    programming model, which is essentially that any programming statement that can
    potentially result in IO being invoked **must** have an `await` call, lest the
    program does not make it explicitly clear every line at which IO may occur. This
    approach does not change that general idea, except that it allows a series of
    synchronous IO instructions to be exempted from this rule within the scope of
    a function call, essentially bundled up into a single awaitable.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法本质上是公开了 SQLAlchemy 能够提供 asyncio 接口的机制。虽然这样做没有技术问题，但总体上这种方法可能被认为是“有争议的”，因为它违背了
    asyncio 编程模型的一些核心理念，即任何可能导致 IO 调用的编程语句**必须**有一个 `await` 调用，否则程序不会明确地指出每一行可能发生
    IO 的地方。这种方法并没有改变这个一般观念，只是允许一系列同步 IO 指令在函数调用范围内免除这个规则，实质上被打包成一个可等待对象。
- en: As an alternative means of integrating traditional SQLAlchemy “lazy loading”
    within an asyncio event loop, an **optional** method known as [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") is provided which will run any
    Python function inside of a greenlet, where traditional synchronous programming
    concepts will be translated to use `await` when they reach the database driver.
    A hypothetical approach here is an asyncio-oriented application can package up
    database-related methods into functions that are invoked using [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync").
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为在 asyncio 事件循环中集成传统 SQLAlchemy “延迟加载”的另一种方法，提供了一种名为 [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") 的**可选**方法，它将在一个 greenlet 中运行任何
    Python 函数，传统的同步编程概念将在到达数据库驱动程序时转换为使用 `await`。这里的一个假设方法是，一个面向 asyncio 的应用程序可以将与数据库相关的方法打包到使用
    [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync "sqlalchemy.ext.asyncio.AsyncSession.run_sync")
    调用的函数中。
- en: 'Altering the above example, if we didn’t use [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") for the `A.bs` collection, we could accomplish
    our treatment of these attribute accesses within a separate function:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 修改上面的示例，如果我们不为 `A.bs` 集合使用 [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")，我们可以在一个单独的函数中完成对这些属性访问的处理：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The above approach of running certain functions within a “sync” runner has
    some parallels to an application that runs a SQLAlchemy application on top of
    an event-based programming library such as `gevent`. The differences are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在“sync”运行器中运行某些函数的上述方法与在类似 `gevent` 的事件驱动编程库上运行 SQLAlchemy 应用程序的应用程序有一些相似之处。区别如下：
- en: unlike when using `gevent`, we can continue to use the standard Python asyncio
    event loop, or any custom event loop, without the need to integrate into the `gevent`
    event loop.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与使用 `gevent` 不同，我们可以继续使用标准的 Python asyncio 事件循环，或任何自定义事件循环，而无需集成到 `gevent` 事件循环中。
- en: There is no “monkeypatching” whatsoever. The above example makes use of a real
    asyncio driver and the underlying SQLAlchemy connection pool is also using the
    Python built-in `asyncio.Queue` for pooling connections.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有任何“猴子补丁”。上面的示例使用了真正的 asyncio 驱动程序，底层的 SQLAlchemy 连接池也使用了 Python 内置的 `asyncio.Queue`
    来池化连接。
- en: The program can freely switch between async/await code and contained functions
    that use sync code with virtually no performance penalty. There is no “thread
    executor” or any additional waiters or synchronization in use.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该程序可以自由地在异步/等待代码和使用同步代码的封装函数之间切换，几乎没有性能损失。没有使用“线程执行器”或任何额外的等待器或同步。
- en: 'The underlying network drivers are also using pure Python asyncio concepts,
    no third party networking libraries as `gevent` and `eventlet` provides are in
    use.  ## Using events with the asyncio extension'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 底层网络驱动程序也在使用纯Python asyncio概念，不使用`gevent`和`eventlet`提供的第三方网络库。## 使用与异步扩展的事件
- en: The SQLAlchemy [event system](../../core/event.html) is not directly exposed
    by the asyncio extension, meaning there is not yet an “async” version of a SQLAlchemy
    event handler.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的[事件系统](../../core/event.html)未直接由异步扩展暴露，这意味着目前还没有“异步”版本的SQLAlchemy事件处理程序。
- en: However, as the asyncio extension surrounds the usual synchronous SQLAlchemy
    API, regular “synchronous” style event handlers are freely available as they would
    be if asyncio were not used.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于异步扩展包围了通常的同步SQLAlchemy API，因此常规的“同步”风格事件处理程序可自由使用，就像没有使用asyncio一样。
- en: 'As detailed below, there are two current strategies to register events given
    asyncio-facing APIs:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所述，目前有两种策略可以注册给予asyncio-facing APIs的事件：
- en: 'Events can be registered at the instance level (e.g. a specific [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") instance) by associating the event with
    the `sync` attribute that refers to the proxied object. For example to register
    the [`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event against an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") instance, use its [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute as target. Targets
    include:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件可以在实例级别（例如特定的[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")实例）上注册，方法是将事件与引用代理对象的`sync`属性关联起来。例如，要针对[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")实例注册[`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect")事件，请使用其[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")属性作为目标。目标包括：
- en: '[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")'
- en: ''
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncConnection.sync_connection`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_connection")'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.sync_connection`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_connection")'
- en: ''
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncConnection.sync_engine`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_engine")'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.sync_engine`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_engine")'
- en: ''
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")'
- en: To register an event at the class level, targeting all instances of the same
    type (e.g. all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    instances), use the corresponding sync-style class. For example to register the
    [`SessionEvents.before_commit()`](../events.html#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") event against the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class, use the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class as the target.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在类级别注册事件，针对同一类型的所有实例（例如所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")实例），请使用相应的同步样式类。例如，要针对[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类注册[`SessionEvents.before_commit()`](../events.html#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")事件，请使用[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类作为目标。
- en: To register at the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") level, combine an explicit [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") with an [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker"), and associate events with the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")级别注册，请使用[`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker")将显式[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")与[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")组合，并将事件与[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")相关联。
- en: When working within an event handler that is within an asyncio context, objects
    like the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") continue to work in their usual “synchronous”
    way without requiring `await` or `async` usage; when messages are ultimately received
    by the asyncio database adapter, the calling style is transparently adapted back
    into the asyncio calling style. For events that are passed a DBAPI level connection,
    such as [`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect"), the object is a [pep-249](../../glossary.html#term-pep-249)
    compliant “connection” object which will adapt sync-style calls into the asyncio
    driver.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当在异步IO上下文中的事件处理程序中工作时，例如[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")等对象将继续以通常的“同步”方式工作，而不需要`await`或`async`使用；当消息最终由异步IO数据库适配器接收时，调用样式将透明地转换回异步IO调用样式。对于传递了DBAPI级别连接的事件，例如[`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect")，对象是一个符合[pep-249](../../glossary.html#term-pep-249)的“连接”对象，它将同步样式调用适配为异步IO驱动程序。
- en: Examples of Event Listeners with Async Engines / Sessions / Sessionmakers
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有异步引擎/会话/会话工厂的事件监听器示例
- en: 'Some examples of sync style event handlers associated with async-facing API
    constructs are illustrated below:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些与异步API构造相关的同步风格事件处理程序的示例：
- en: '**Core Events on AsyncEngine**'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AsyncEngine上的核心事件**'
- en: 'In this example, we access the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") as the target for [`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") and [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents"):'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们将[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")属性作为[`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")和[`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")的目标：
- en: '[PRE13]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Output:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE14]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**ORM Events on AsyncSession**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AsyncSession上的ORM事件**'
- en: 'In this example, we access [`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session") as the target for [`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents"):'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们将[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")作为[`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents")的目标：
- en: '[PRE15]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Output:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**ORM Events on async_sessionmaker**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**async_sessionmaker上的ORM事件**'
- en: 'For this use case, we make a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") as the event target, then assign it to the [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using the [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker") parameter:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这种用例，我们将[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")作为事件目标，然后使用[`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker")参数将其分配给[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")：
- en: '[PRE17]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Output:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE18]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '### Using awaitable-only driver methods in connection pool and other events'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '### 在连接池和其他事件中使用仅awaitable的驱动程序方法'
- en: As discussed in the above section, event handlers such as those oriented around
    the [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    event handlers receive a sync-style “DBAPI” connection, which is a wrapper object
    supplied by SQLAlchemy asyncio dialects to adapt the underlying asyncio “driver”
    connection into one that can be used by SQLAlchemy’s internals. A special use
    case arises when the user-defined implementation for such an event handler needs
    to make use of the ultimate “driver” connection directly, using awaitable only
    methods on that driver connection. One such example is the `.set_type_codec()`
    method supplied by the asyncpg driver.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如上一节所讨论的那样，诸如[`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")之类的事件处理程序接收到一个同步风格的“DBAPI”连接，这是SQLAlchemy asyncio方言提供的一个包装对象，用于将底层的asyncio“driver”连接适配成SQLAlchemy内部可以使用的连接。当用户定义的事件处理程序需要直接使用最终的“driver”连接，并且只使用该驱动连接上的awaitable方法时，就会出现一种特殊的用例。其中一个例子是asyncpg驱动程序提供的`.set_type_codec()`方法。
- en: To accommodate this use case, SQLAlchemy’s [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") class provides a method [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") that allows an awaitable function
    to be invoked within the “synchronous” context of an event handler or other SQLAlchemy
    internal. This method is directly analogous to the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method that allows a sync-style
    method to run under async.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应这种用例，SQLAlchemy的[`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection")类提供了一个方法[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")，允许在事件处理程序或其他SQLAlchemy内部的“同步”上下文中调用一个awaitable函数。这个方法直接类似于[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")方法，它允许一个同步风格的方法在async下运行。
- en: '[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") should be passed a function that
    will accept the innermost “driver” connection as a single argument, and return
    an awaitable that will be invoked by the [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method. The given function itself
    does not need to be declared as `async`; it’s perfectly fine for it to be a Python
    `lambda:`, as the return awaitable value will be invoked after being returned:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 应该向[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")传递一个接受内部“driver”连接作为单个参数的函数，并返回一个awaitable，该awaitable将由[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")方法调用。给定的函数本身不需要声明为`async`；它完全可以是Python的`lambda:`，因为返回的awaitable值将在返回后被调用：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Above, the object passed to the `register_custom_types` event handler is an
    instance of [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection"), which provides a DBAPI-like interface
    to an underlying async-only driver-level connection object. The [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method then provides access to
    an awaitable environment where the underlying driver level connection may be acted
    upon.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，传递给`register_custom_types`事件处理程序的对象是[`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection")的一个实例，它提供了一个类似DBAPI的接口，用于访问底层的仅async的驱动级连接对象。然后，[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")方法提供了访问底层驱动程序级连接的awaitable环境。
- en: New in version 1.4.30.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.30中的新功能。
- en: Using multiple asyncio event loops
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多个asyncio事件循环
- en: An application that makes use of multiple event loops, for example in the uncommon
    case of combining asyncio with multithreading, should not share the same [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") with different event loops when using the
    default pool implementation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个应用程序同时使用多个事件循环时，例如在罕见的情况下将 asyncio 与多线程结合使用时，当使用默认的池实现时，不应该将相同的 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") 与不同的事件循环共享。
- en: If an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    is be passed from one event loop to another, the method [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") should be called before it’s re-used
    on a new event loop. Failing to do so may lead to a `RuntimeError` along the lines
    of `Task <Task pending ...> got Future attached to a different loop`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    从一个事件循环传递到另一个事件循环，则在重新使用之前应调用 [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") 方法。未能这样做可能会导致类似于 `Task <Task pending
    ...> got Future attached to a different loop` 的 `RuntimeError`。
- en: 'If the same engine must be shared between different loop, it should be configured
    to disable pooling using [`NullPool`](../../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool"), preventing the Engine from using any connection more
    than once:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同一个引擎必须在不同的循环之间共享，则应配置为使用 [`NullPool`](../../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") 来禁用池，防止引擎重复使用任何连接：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '## Using asyncio scoped session'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用 asyncio scoped session'
- en: The “scoped session” pattern used in threaded SQLAlchemy with the [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") object is also available in asyncio, using an
    adapted version called [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session").
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在线程化的 SQLAlchemy 中使用的“scoped session”模式，使用适应版本称为 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session")，在 asyncio 中也是可用的。
- en: Tip
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: SQLAlchemy generally does not recommend the “scoped” pattern for new development
    as it relies upon mutable global state that must also be explicitly torn down
    when work within the thread or task is complete. Particularly when using asyncio,
    it’s likely a better idea to pass the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") directly to the awaitable functions that
    need it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 通常不推荐为新开发使用“scoped”模式，因为它依赖于必须在线程或任务完成后显式清除的可变全局状态。特别是在使用 asyncio
    时，直接将 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    传递给需要它的可等待函数可能是一个更好的主意。
- en: 'When using [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session"), as there’s no “thread-local” concept
    in the asyncio context, the “scopefunc” parameter must be provided to the constructor.
    The example below illustrates using the `asyncio.current_task()` function for
    this purpose:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")
    时，由于在 asyncio 上下文中没有“线程本地”概念，必须为构造函数提供“scopefunc”参数。下面的示例说明了使用 `asyncio.current_task()`
    函数来实现此目的：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Warning
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The “scopefunc” used by [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") is invoked **an arbitrary number
    of times** within a task, once for each time the underlying [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is accessed. The function should therefore
    be **idempotent** and lightweight, and should not attempt to create or mutate
    any state, such as establishing callbacks, etc.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")
    使用的“scopefunc”在任务中被调用**任意次数**，每次访问底层 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 时都会调用该函数。因此，该函数应该是**幂等**且轻量级的，并且不应尝试创建或改变任何状态，例如建立回调等。'
- en: Warning
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Using `current_task()` for the “key” in the scope requires that the [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") method is called from within
    the outermost awaitable, to ensure the key is removed from the registry when the
    task is complete, otherwise the task handle as well as the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") will remain in memory, essentially creating
    a memory leak. See the following example which illustrates the correct use of
    [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove").
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在作用域中使用 `current_task()` 作为“键”要求必须从最外层的可等待对象中调用 [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") 方法，以确保任务完成时从注册表中删除键，否则任务句柄和
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    将继续驻留在内存中，从根本上创建了内存泄漏。请参阅以下示例，该示例说明了 [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") 的正确用法。
- en: '[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")
    includes **proxy behavior** similar to that of [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session"), which means it can be treated as a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") directly, keeping in mind that the usual
    `await` keywords are necessary, including for the [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")
    包含与 [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    类似的 **代理行为**，这意味着它可以直接作为 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对待，需要注意通常需要使用 `await` 关键字，包括 [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") 方法：'
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'New in version 1.4.19.  ## Using the Inspector to inspect schema objects'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '新版版本 1.4.19。  ## 使用 Inspector 检查模式对象'
- en: 'SQLAlchemy does not yet offer an asyncio version of the [`Inspector`](../../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") (introduced at [Fine Grained Reflection
    with Inspector](../../core/reflection.html#metadata-reflection-inspector)), however
    the existing interface may be used in an asyncio context by leveraging the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method of [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection"):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 尚未提供 [`Inspector`](../../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 的 asyncio 版本（介绍请参见 [使用 Inspector 进行细粒度反射](../../core/reflection.html#metadata-reflection-inspector)），但是可以通过利用
    [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") 方法来在 asyncio 上下文中使用现有接口：
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See also
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Reflecting Database Objects](../../core/reflection.html#metadata-reflection)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[反射数据库对象](../../core/reflection.html#metadata-reflection)'
- en: '[Runtime Inspection API](../../core/inspection.html)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[运行时检查 API](../../core/inspection.html)'
- en: Engine API Documentation
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引擎 API 文档
- en: '| Object Name | Description |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [async_engine_from_config](#sqlalchemy.ext.asyncio.async_engine_from_config)(configuration[,
    prefix], **kwargs) | Create a new AsyncEngine instance using a configuration dictionary.
    |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [async_engine_from_config](#sqlalchemy.ext.asyncio.async_engine_from_config)(configuration[,
    prefix], **kwargs) | 使用配置字典创建一个新的 AsyncEngine 实例。 |'
- en: '| [AsyncConnection](#sqlalchemy.ext.asyncio.AsyncConnection) | An asyncio proxy
    for a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncConnection](#sqlalchemy.ext.asyncio.AsyncConnection) | 一个用于[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的 asyncio 代理。 |'
- en: '| [AsyncEngine](#sqlalchemy.ext.asyncio.AsyncEngine) | An asyncio proxy for
    a [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncEngine](#sqlalchemy.ext.asyncio.AsyncEngine) | 一个用于[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的 asyncio 代理。 |'
- en: '| [AsyncTransaction](#sqlalchemy.ext.asyncio.AsyncTransaction) | An asyncio
    proxy for a [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"). |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncTransaction](#sqlalchemy.ext.asyncio.AsyncTransaction) | [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")的一个asyncio代理。 |'
- en: '| [create_async_engine](#sqlalchemy.ext.asyncio.create_async_engine)(url, **kw)
    | Create a new async engine instance. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [create_async_engine](#sqlalchemy.ext.asyncio.create_async_engine)(url, **kw)
    | 创建一个新的异步引擎实例。 |'
- en: '| [create_async_pool_from_url](#sqlalchemy.ext.asyncio.create_async_pool_from_url)(url,
    **kwargs) | Create a new async engine instance. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [create_async_pool_from_url](#sqlalchemy.ext.asyncio.create_async_pool_from_url)(url,
    **kwargs) | 创建一个新的异步引擎实例。 |'
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Create a new async engine instance.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的异步引擎实例。
- en: Arguments passed to [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") are mostly identical to those passed
    to the [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function. The specified dialect must be an asyncio-compatible dialect such as
    [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine "sqlalchemy.ext.asyncio.create_async_engine")的参数基本与传递给[`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的参数相同。指定的方言必须是支持asyncio的方言，例如[asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg)。
- en: New in version 1.4.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版的新功能。
- en: 'Parameters:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**async_creator** –'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**async_creator** –'
- en: an async callable which returns a driver-level asyncio connection. If given,
    the function should take no arguments, and return a new asyncio connection from
    the underlying asyncio database driver; the connection will be wrapped in the
    appropriate structures to be used with the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"). Note that the parameters specified in the
    URL are not applied here, and the creator function should use its own connection
    parameters.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一个异步可调用函数，返回一个驱动级别的asyncio连接。如果给定，该函数不应该接受任何参数，并从底层的asyncio数据库驱动程序返回一个新的asyncio连接；连接将被包装在适当的结构中，以便与[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")一起使用。请注意，URL中指定的参数在此处不适用，创建函数应该使用自己的连接参数。
- en: This parameter is the asyncio equivalent of the [`create_engine.creator`](../../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter of the [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数是[`create_engine()`](../../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")函数的asyncio等效参数。
- en: New in version 2.0.16.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.16版的新功能。
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create a new AsyncEngine instance using a configuration dictionary.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置字典创建一个新的AsyncEngine实例。
- en: This function is analogous to the [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") function in SQLAlchemy Core, except that the
    requested dialect must be an asyncio-compatible dialect such as [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
    The argument signature of the function is identical to that of [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config").
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数类似于SQLAlchemy核心中的[`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")函数，不同之处在于所请求的方言必须是类似于[asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg)这样的支持asyncio的方言。该函数的参数签名与[`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")相同。
- en: New in version 1.4.29.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.29版的新功能。
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create a new async engine instance.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的异步引擎实例。
- en: Arguments passed to [`create_async_pool_from_url()`](#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") are mostly identical to those
    passed to the [`create_pool_from_url()`](../../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") function. The specified dialect must be an
    asyncio-compatible dialect such as [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`create_async_pool_from_url()`](#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url")的参数基本与传递给[`create_pool_from_url()`](../../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url")的参数相同。指定的方言必须是支持asyncio的方言，例如[asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg)。
- en: New in version 2.0.10.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.10版的新功能。
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: An asyncio proxy for a [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的
    asyncio 代理。
- en: '[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    is acquired using the [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")是使用[`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")函数获取的：'
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: New in version 1.4.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '**Members**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[begin()](#sqlalchemy.ext.asyncio.AsyncEngine.begin), [clear_compiled_cache()](#sqlalchemy.ext.asyncio.AsyncEngine.clear_compiled_cache),
    [connect()](#sqlalchemy.ext.asyncio.AsyncEngine.connect), [dialect](#sqlalchemy.ext.asyncio.AsyncEngine.dialect),
    [dispose()](#sqlalchemy.ext.asyncio.AsyncEngine.dispose), [driver](#sqlalchemy.ext.asyncio.AsyncEngine.driver),
    [echo](#sqlalchemy.ext.asyncio.AsyncEngine.echo), [engine](#sqlalchemy.ext.asyncio.AsyncEngine.engine),
    [execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.execution_options),
    [get_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.get_execution_options),
    [name](#sqlalchemy.ext.asyncio.AsyncEngine.name), [pool](#sqlalchemy.ext.asyncio.AsyncEngine.pool),
    [raw_connection()](#sqlalchemy.ext.asyncio.AsyncEngine.raw_connection), [sync_engine](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine),
    [update_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.update_execution_options),
    [url](#sqlalchemy.ext.asyncio.AsyncEngine.url)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[begin()](#sqlalchemy.ext.asyncio.AsyncEngine.begin), [clear_compiled_cache()](#sqlalchemy.ext.asyncio.AsyncEngine.clear_compiled_cache),
    [connect()](#sqlalchemy.ext.asyncio.AsyncEngine.connect), [dialect](#sqlalchemy.ext.asyncio.AsyncEngine.dialect),
    [dispose()](#sqlalchemy.ext.asyncio.AsyncEngine.dispose), [driver](#sqlalchemy.ext.asyncio.AsyncEngine.driver),
    [echo](#sqlalchemy.ext.asyncio.AsyncEngine.echo), [engine](#sqlalchemy.ext.asyncio.AsyncEngine.engine),
    [execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.execution_options),
    [get_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.get_execution_options),
    [name](#sqlalchemy.ext.asyncio.AsyncEngine.name), [pool](#sqlalchemy.ext.asyncio.AsyncEngine.pool),
    [raw_connection()](#sqlalchemy.ext.asyncio.AsyncEngine.raw_connection), [sync_engine](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine),
    [update_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.update_execution_options),
    [url](#sqlalchemy.ext.asyncio.AsyncEngine.url)'
- en: '**Class signature**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.AsyncConnectable`)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.AsyncConnectable`)
- en: '[PRE29]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Return a context manager which when entered will deliver an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") with an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") established.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个上下文管理器，当进入时将提供一个已建立 [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") 的 [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")。
- en: 'E.g.:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE30]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Clear the compiled cache associated with the dialect.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 清除与方言关联的编译缓存。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")类的代理，代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")类。
- en: This applies **only** to the built-in cache that is established via the `create_engine.query_cache_size`
    parameter. It will not impact any dictionary caches that were passed via the [`Connection.execution_options.compiled_cache`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") parameter.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅适用于通过`create_engine.query_cache_size`参数建立的内置缓存。它不会影响通过[`Connection.execution_options.compiled_cache`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options")参数传递的任何字典缓存。
- en: New in version 1.4.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Return an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")对象。
- en: 'The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    will procure a database connection from the underlying connection pool when it
    is entered as an async context manager:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为异步上下文管理器输入时，[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")将从底层连接池中获取数据库连接：
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    may also be started outside of a context manager by invoking its [`AsyncConnection.start()`](#sqlalchemy.ext.asyncio.AsyncConnection.start
    "sqlalchemy.ext.asyncio.AsyncConnection.start") method.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")也可以通过调用其[`AsyncConnection.start()`](#sqlalchemy.ext.asyncio.AsyncConnection.start
    "sqlalchemy.ext.asyncio.AsyncConnection.start")方法在上下文管理器之外启动。'
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Proxy for the `Engine.dialect` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的`Engine.dialect`属性。
- en: '[PRE35]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Dispose of the connection pool used by this [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")使用的连接池。
- en: 'Parameters:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**close** –'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**关闭** –'
- en: if left at its default of `True`, has the effect of fully closing all **currently
    checked in** database connections. Connections that are still checked out will
    **not** be closed, however they will no longer be associated with this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), so when they are closed individually, eventually
    the [`Pool`](../../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    which they are associated with will be garbage collected and they will be closed
    out fully, if not already closed on checkin.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将其默认值保留为`True`，则会完全关闭所有**当前已签入**的数据库连接。然而，仍在使用的连接将**不会**被关闭，但它们将不再与此[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联，因此当它们被单独关闭时，它们所关联的[`Pool`](../../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")最终将被垃圾回收，如果已经在签入时关闭，则将完全关闭。
- en: If set to `False`, the previous connection pool is de-referenced, and otherwise
    not touched in any way.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为`False`，则前一个连接池将被取消引用，否则不会以任何方式触及。
- en: See also
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Engine.dispose()`](../../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.dispose()`](../../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")'
- en: '[PRE36]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Driver name of the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") in use by this `Engine`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Engine`正在使用的[`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")的驱动程序名称。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类。
- en: '[PRE37]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When `True`, enable log output for this element.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当为`True`时，启用此元素的日志输出。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类。
- en: This has the effect of setting the Python logging level for the namespace of
    this element’s class and object reference. A value of boolean `True` indicates
    that the loglevel `logging.INFO` will be set for the logger, whereas the string
    value `debug` will set the loglevel to `logging.DEBUG`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置此元素类和对象引用的命名空间的Python日志级别。布尔值`True`表示将为记录器设置日志级别`logging.INFO`，而字符串值`debug`将将日志级别设置为`logging.DEBUG`。
- en: '[PRE38]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Returns this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类。
- en: Used for legacy schemes that accept [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") / [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects within the same variable.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 用于接受同一变量内的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") / [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象的传统方案。
- en: '[PRE39]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Return a new [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    that will provide [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") objects with the given execution options.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")，该引擎将以给定的执行选项提供
    [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    对象。
- en: Proxied from [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"). See that method for details.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 代理自 [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")。请参阅该方法了解详情。
- en: '[PRE40]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 获取执行期间将生效的非 SQL 选项。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    类的 [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    类的代理。
- en: See also
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[PRE41]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: String name of the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") in use by this `Engine`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `Engine` 使用的 [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") 的字符串名称。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    类的 [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    类的代理。
- en: '[PRE42]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Proxy for the `Engine.pool` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    类的 `Engine.pool` 属性的代理。
- en: '[PRE43]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Return a “raw” DBAPI connection from the connection pool.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 从连接池返回“原始” DBAPI 连接。
- en: See also
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Driver SQL and Raw DBAPI Connections](../../core/connections.html#dbapi-connections)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Driver SQL 和原始 DBAPI 连接](../../core/connections.html#dbapi-connections)'
- en: '[PRE44]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Reference to the sync-style [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") this [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") proxies requests towards.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    代理请求到同步样式的 [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")。
- en: This instance can be used as an event target.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例可用作事件目标。
- en: See also
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using events with the asyncio extension](#asyncio-events)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[与 asyncio 扩展一起使用事件](#asyncio-events)'
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Update the default execution_options dictionary of this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 更新此 [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的默认执行选项字典。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    类的 [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    类的代理。
- en: The given keys/values in **opt are added to the default execution options that
    will be used for all connections. The initial contents of this dictionary can
    be sent via the `execution_options` parameter to [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**opt 中给定的键/值将添加到将用于所有连接的默认执行选项中。此字典的初始内容可以通过 `execution_options` 参数发送到 [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。'
- en: See also
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[PRE46]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Proxy for the `Engine.url` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的`Engine.url`属性的代理。
- en: '[PRE47]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: An asyncio proxy for a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")的asyncio代理。
- en: '[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    is acquired using the [`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect") method of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"):'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")通过[`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect")方法获取：'
- en: '[PRE48]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: New in version 1.4.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: '**Members**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[aclose()](#sqlalchemy.ext.asyncio.AsyncConnection.aclose), [begin()](#sqlalchemy.ext.asyncio.AsyncConnection.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncConnection.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncConnection.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncConnection.closed), [commit()](#sqlalchemy.ext.asyncio.AsyncConnection.commit),
    [connection](#sqlalchemy.ext.asyncio.AsyncConnection.connection), [default_isolation_level](#sqlalchemy.ext.asyncio.AsyncConnection.default_isolation_level),
    [dialect](#sqlalchemy.ext.asyncio.AsyncConnection.dialect), [exec_driver_sql()](#sqlalchemy.ext.asyncio.AsyncConnection.exec_driver_sql),
    [execute()](#sqlalchemy.ext.asyncio.AsyncConnection.execute), [execution_options()](#sqlalchemy.ext.asyncio.AsyncConnection.execution_options),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_nested_transaction),
    [get_raw_connection()](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection),
    [get_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_transaction),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncConnection.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncConnection.invalidate), [invalidated](#sqlalchemy.ext.asyncio.AsyncConnection.invalidated),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncConnection.rollback), [run_sync()](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncConnection.scalar), [scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.scalars),
    [start()](#sqlalchemy.ext.asyncio.AsyncConnection.start), [stream()](#sqlalchemy.ext.asyncio.AsyncConnection.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars), [sync_connection](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection),
    [sync_engine](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[aclose()](#sqlalchemy.ext.asyncio.AsyncConnection.aclose)，[begin()](#sqlalchemy.ext.asyncio.AsyncConnection.begin)，[begin_nested()](#sqlalchemy.ext.asyncio.AsyncConnection.begin_nested)，[close()](#sqlalchemy.ext.asyncio.AsyncConnection.close)，[closed](#sqlalchemy.ext.asyncio.AsyncConnection.closed)，[commit()](#sqlalchemy.ext.asyncio.AsyncConnection.commit)，[connection](#sqlalchemy.ext.asyncio.AsyncConnection.connection)，[default_isolation_level](#sqlalchemy.ext.asyncio.AsyncConnection.default_isolation_level)，[dialect](#sqlalchemy.ext.asyncio.AsyncConnection.dialect)，[exec_driver_sql()](#sqlalchemy.ext.asyncio.AsyncConnection.exec_driver_sql)，[execute()](#sqlalchemy.ext.asyncio.AsyncConnection.execute)，[execution_options()](#sqlalchemy.ext.asyncio.AsyncConnection.execution_options)，[get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_nested_transaction)，[get_raw_connection()](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection)，[get_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_transaction)，[in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_nested_transaction)，[in_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_transaction)，[info](#sqlalchemy.ext.asyncio.AsyncConnection.info)，[invalidate()](#sqlalchemy.ext.asyncio.AsyncConnection.invalidate)，[invalidated](#sqlalchemy.ext.asyncio.AsyncConnection.invalidated)，[rollback()](#sqlalchemy.ext.asyncio.AsyncConnection.rollback)，[run_sync()](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync)，[scalar()](#sqlalchemy.ext.asyncio.AsyncConnection.scalar)，[scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.scalars)，[start()](#sqlalchemy.ext.asyncio.AsyncConnection.start)，[stream()](#sqlalchemy.ext.asyncio.AsyncConnection.stream)，[stream_scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars)，[sync_connection](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection)，[sync_engine](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine)'
- en: '**Class signature**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`, `sqlalchemy.ext.asyncio.AsyncConnectable`)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.ext.asyncio.AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`, `sqlalchemy.ext.asyncio.AsyncConnectable`)
- en: '[PRE49]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: A synonym for [`AsyncConnection.close()`](#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close").
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.close()`](#sqlalchemy.ext.asyncio.AsyncConnection.close "sqlalchemy.ext.asyncio.AsyncConnection.close")的同义词。'
- en: The [`AsyncConnection.aclose()`](#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") name is specifically to support
    the Python standard library `@contextlib.aclosing` context manager function.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.aclose()`](#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose")名称专门用于支持Python标准库`@contextlib.aclosing`上下文管理器函数。'
- en: New in version 2.0.20.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.20中的新功能。
- en: '[PRE50]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Begin a transaction prior to autobegin occurring.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动开始之前开始事务。
- en: '[PRE51]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Begin a nested transaction and return a transaction handle.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个嵌套事务并返回事务句柄。
- en: '[PRE52]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Close this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection").
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")。
- en: This has the effect of also rolling back the transaction if one is in place.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会导致回滚事务（如果存在）。
- en: '[PRE53]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Return True if this connection is closed.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此连接已关闭，则返回True。
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")类，代表[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")类。
- en: '[PRE54]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Commit the transaction that is currently in progress.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 提交当前正在进行的事务。
- en: This method commits the current transaction if one has been started. If no transaction
    was started, the method has no effect, assuming the connection is in a non-invalidated
    state.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已启动事务，则此方法提交当前事务。如果未启动事务，则该方法不起作用，假定连接处于非失效状态。
- en: A transaction is begun on a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") automatically whenever a statement is first executed,
    or when the [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 每当首次执行语句或调用[`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法时，都会自动在[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上开始事务。
- en: '[PRE55]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Not implemented for async; call [`AsyncConnection.get_raw_connection()`](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection").
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 未实现异步；调用[`AsyncConnection.get_raw_connection()`](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection")。
- en: '[PRE56]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The initial-connection time isolation level associated with the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") in use.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 与正在使用的[`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")相关联的初始连接时间隔离级别。
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")类，代表[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")类。
- en: This value is independent of the [`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and [`Engine.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") execution options, and is determined
    by the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    when the first connection is created, by performing a SQL query against the database
    for the current isolation level before any additional commands have been emitted.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 此值独立于[`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")和[`Engine.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options")执行选项，并由[`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")在创建第一个连接时确定，通过针对数据库执行SQL查询以获取当前隔离级别，然后再发出任何其他命令。
- en: Calling this accessor does not invoke any new SQL queries.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此访问器不会触发任何新的SQL查询。
- en: See also
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.get_isolation_level()`](../../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current actual isolation
    level'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](../../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前实际隔离级别'
- en: '[`create_engine.isolation_level`](../../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](../../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的隔离级别'
- en: '[`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的隔离级别'
- en: '[PRE57]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Proxy for the `Connection.dialect` attribute on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")类的`Connection.dialect`属性的代理。
- en: '[PRE58]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Executes a driver-level SQL string and return buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 执行驱动程序级别的SQL字符串并返回缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")。
- en: '[PRE59]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Executes a SQL statement construct and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 执行SQL语句构造并返回一个缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")。
- en: 'Parameters:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`object` –'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object` –'
- en: 'The statement to be executed. This is always an object that is in both the
    [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") and [`Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") hierarchies, including:'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要执行的语句。这始终是一个同时存在于[`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")和[`Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")层次结构中的对象，包括：
- en: '[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    - `Select`操作'
- en: '[`Insert`](../../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert`](../../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
- en: '[`TextClause`](../../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`TextualSelect`](../../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TextClause`](../../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 和 [`TextualSelect`](../../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")'
- en: '[`DDL`](../../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    and objects which inherit from [`ExecutableDDLElement`](../../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DDL`](../../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    和继承自[`ExecutableDDLElement`](../../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")的对象'
- en: '`parameters` – parameters which will be bound into the statement. This may
    be either a dictionary of parameter names to values, or a mutable sequence (e.g.
    a list) of dictionaries. When a list of dictionaries is passed, the underlying
    statement execution will make use of the DBAPI `cursor.executemany()` method.
    When a single dictionary is passed, the DBAPI `cursor.execute()` method will be
    used.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 将绑定到语句中的参数。这可以是参数名称到值的字典，也可以是可变序列（例如列表）的字典。当传递一个字典列表时，底层语句执行将使用DBAPI
    `cursor.executemany()`方法。当传递单个字典时，将使用DBAPI `cursor.execute()`方法。'
- en: '`execution_options` – optional dictionary of execution options, which will
    be associated with the statement execution. This dictionary can provide a subset
    of the options that are accepted by [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options").'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` – 可选的执行选项字典，将与语句执行关联。该字典可以提供[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项的子集。'
- en: 'Returns:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: '[PRE60]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Set non-SQL options for the connection which take effect during execution.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在执行期间生效的非SQL选项。
- en: This returns this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") object with the new options added.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")对象，其中添加了新选项。
- en: See [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") for full details on this method.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此方法的完整详情，请参阅[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")。
- en: '[PRE61]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Return an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    representing the current nested (savepoint) transaction, if any.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个表示当前嵌套（保存点）事务的[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")，如果有的话。
- en: This makes use of the underlying synchronous connection’s [`Connection.get_nested_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_nested_transaction
    "sqlalchemy.engine.Connection.get_nested_transaction") method to get the current
    [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction"),
    which is then proxied in a new [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") object.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用底层同步连接的[`Connection.get_nested_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_nested_transaction
    "sqlalchemy.engine.Connection.get_nested_transaction")方法获取当前[`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")，然后在新的[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")对象中进行代理。
- en: New in version 1.4.0b2.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中引入。
- en: '[PRE62]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Return the pooled DBAPI-level connection in use by this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection").
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")正在使用的池化DBAPI级连接。
- en: This is a SQLAlchemy connection-pool proxied connection which then has the attribute
    `_ConnectionFairy.driver_connection` that refers to the actual driver connection.
    Its `_ConnectionFairy.dbapi_connection` refers instead to an [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") instance that adapts the driver connection
    to the DBAPI protocol.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个SQLAlchemy连接池代理连接，然后具有属性`_ConnectionFairy.driver_connection`，该属性引用实际的驱动程序连接。其`_ConnectionFairy.dbapi_connection`则指代一个[`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection")实例，将驱动程序连接适配为DBAPI协议。
- en: '[PRE63]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Return an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    representing the current transaction, if any.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个表示当前事务的[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")，如果有的话。
- en: This makes use of the underlying synchronous connection’s [`Connection.get_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction") method to get the current [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"), which is then proxied in a new [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") object.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用底层同步连接的[`Connection.get_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction")方法获取当前[`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")，然后在新的[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")对象中进行代理。
- en: New in version 1.4.0b2.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中引入。
- en: '[PRE64]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Return True if a transaction is in progress.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务正在进行中，则返回True。
- en: New in version 1.4.0b2.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中引入。
- en: '[PRE65]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Return True if a transaction is in progress.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务正在进行中，则返回True。
- en: '[PRE66]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Return the [`Connection.info`](../../core/connections.html#sqlalchemy.engine.Connection.info
    "sqlalchemy.engine.Connection.info") dictionary of the underlying [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[`Connection.info`](../../core/connections.html#sqlalchemy.engine.Connection.info
    "sqlalchemy.engine.Connection.info")字典。
- en: This dictionary is freely writable for user-defined state to be associated with
    the database connection.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典可自由编写，以将用户定义的状态与数据库连接关联起来。
- en: This attribute is only available if the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") is currently connected. If the [`AsyncConnection.closed`](#sqlalchemy.ext.asyncio.AsyncConnection.closed
    "sqlalchemy.ext.asyncio.AsyncConnection.closed") attribute is `True`, then accessing
    this attribute will raise [`ResourceClosedError`](../../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError").
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '仅当[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")当前已连接时才可用此属性。如果[`AsyncConnection.closed`](#sqlalchemy.ext.asyncio.AsyncConnection.closed
    "sqlalchemy.ext.asyncio.AsyncConnection.closed")属性为`True`，则访问此属性将引发[`ResourceClosedError`](../../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")。 '
- en: New in version 1.4.0b2.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为1.4.0b2。
- en: '[PRE67]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Invalidate the underlying DBAPI connection associated with this [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 使与此[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")相关联的基础DBAPI连接无效。
- en: See the method [`Connection.invalidate()`](../../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") for full detail on this method.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 参见方法[`Connection.invalidate()`](../../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")，了解此方法的详细信息。
- en: '[PRE68]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Return True if this connection was invalidated.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此连接已失效，则返回True。
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")类的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")类。
- en: This does not indicate whether or not the connection was invalidated at the
    pool level, however
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不表示连接是否在池级别上失效。
- en: '[PRE69]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Roll back the transaction that is currently in progress.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前正在进行的事务。
- en: This method rolls back the current transaction if one has been started. If no
    transaction was started, the method has no effect. If a transaction was started
    and the connection is in an invalidated state, the transaction is cleared using
    this method.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已启动事务，则此方法将回滚当前事务。如果未启动事务，则该方法不起作用。如果已启动事务并且连接处于无效状态，则使用此方法清除事务。
- en: A transaction is begun on a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") automatically whenever a statement is first executed,
    or when the [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次执行语句或调用[`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法时，将自动在[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上启动事务。
- en: '[PRE70]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Invoke the given synchronous (i.e. not async) callable, passing a synchronous-style
    [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    as the first argument.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 调用给定的同步（即非异步）可调用对象，并将同步风格的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")作为第一个参数传递。
- en: This method allows traditional synchronous SQLAlchemy functions to run within
    the context of an asyncio application.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许在异步应用程序的上下文中运行传统的同步SQLAlchemy函数。
- en: 'E.g.:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE71]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This method maintains the asyncio event loop all the way through to the database
    connection by running the given callable in a specially instrumented greenlet.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在一个特别的被监控的greenlet中运行给定的可调用对象，此方法将一直维持asyncio事件循环直到数据库连接。
- en: 'The most rudimentary use of [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") is to invoke methods such as
    [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all"), given an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") that needs to be provided to [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") as a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")的最基本用法是调用诸如[`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")之类的方法，给定需要提供给[`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")作为[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")：'
- en: '[PRE72]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Note
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The provided callable is invoked inline within the asyncio event loop, and will
    block on traditional IO calls. IO within this callable should only call into SQLAlchemy’s
    asyncio database APIs which will be properly adapted to the greenlet context.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的可调用对象在 asyncio 事件循环内联调用，并且将在传统 IO 调用上阻塞。此可调用对象内的 IO 应仅调用进入 SQLAlchemy 的 asyncio
    数据库 API，这些 API 将被正确地适应到 greenlet 上下文中。
- en: See also
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync "sqlalchemy.ext.asyncio.AsyncSession.run_sync")'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync "sqlalchemy.ext.asyncio.AsyncSession.run_sync")'
- en: '[Running Synchronous Methods and Functions under asyncio](#session-run-sync)'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 asyncio 下运行同步方法和函数](#session-run-sync)'
- en: '[PRE73]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Executes a SQL statement construct and returns a scalar object.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 SQL 语句构造并返回标量对象。
- en: This method is shorthand for invoking the [`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method after invoking the [`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是在调用[`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法后调用[`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")方法的简写。参数是等效的。
- en: 'Returns:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a scalar Python value representing the first column of the first row returned.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 代表返回的第一行的第一列的标量 Python 值。
- en: '[PRE74]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Executes a SQL statement construct and returns a scalar objects.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 SQL 语句构造并返回标量对象。
- en: This method is shorthand for invoking the [`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method after invoking the [`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是在调用[`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法后调用[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")方法的简写。参数是等效的。
- en: 'Returns:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")对象。
- en: New in version 1.4.24.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.24 中的新功能。
- en: '[PRE75]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Start this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object’s context outside of using a Python `with:` block.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Python `with:` 块之外启动此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")对象的上下文。
- en: '[PRE76]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Execute a statement and return an awaitable yielding a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回一个产生[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")对象的可等待对象。
- en: 'E.g.:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE77]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method supports optional context
    manager use against the [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object, as in:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")方法支持可选的上下文管理器用法，针对[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象，如下所示：'
- en: '[PRE78]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: In the above pattern, the [`AsyncResult.close()`](#sqlalchemy.ext.asyncio.AsyncResult.close
    "sqlalchemy.ext.asyncio.AsyncResult.close") method is invoked unconditionally,
    even if the iterator is interrupted by an exception throw. Context manager use
    remains optional, however, and the function may be called in either an `async
    with fn():` or `await fn()` style.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述模式中，即使迭代器被异常抛出中断，[`AsyncResult.close()`](#sqlalchemy.ext.asyncio.AsyncResult.close
    "sqlalchemy.ext.asyncio.AsyncResult.close")方法也会无条件地被调用。然而，上下文管理器的使用仍然是可选的，并且该函数可以以`async
    with fn():`或`await fn()`的方式调用。
- en: 'New in version 2.0.0b3: added context manager support'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 新增于版本 2.0.0b3：增加了上下文管理器支持
- en: 'Returns:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an awaitable object that will yield an [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生一个可等待对象，该对象将生成一个[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")对象。
- en: See also
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars")'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars")'
- en: '[PRE79]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Execute a statement and return an awaitable yielding a [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回一个可等待的[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")对象。
- en: 'E.g.:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE80]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: This method is shorthand for invoking the `AsyncResult.scalars()` method after
    invoking the `Connection.stream()` method. Parameters are equivalent.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是在调用`Connection.stream()`方法后调用`AsyncResult.scalars()`方法的简写。参数是等效的。
- en: 'The [`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars") method supports optional
    context manager use against the [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object, as in:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars")方法支持针对[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")对象的可选上下文管理器使用，如下所示：'
- en: '[PRE81]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: In the above pattern, the [`AsyncScalarResult.close()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.close
    "sqlalchemy.ext.asyncio.AsyncScalarResult.close") method is invoked unconditionally,
    even if the iterator is interrupted by an exception throw. Context manager use
    remains optional, however, and the function may be called in either an `async
    with fn():` or `await fn()` style.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述模式中，即使迭代器被异常抛出中断，[`AsyncScalarResult.close()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.close
    "sqlalchemy.ext.asyncio.AsyncScalarResult.close")方法也会无条件地被调用。然而，上下文管理器的使用仍然是可选的，并且该函数可以以`async
    with fn():`或`await fn()`的方式调用。
- en: 'New in version 2.0.0b3: added context manager support'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 新增于版本 2.0.0b3：增加了上下文管理器支持
- en: 'Returns:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an awaitable object that will yield an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生一个可等待对象，该对象将生成一个[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")对象。
- en: New in version 1.4.24.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 新增于版本 1.4.24。
- en: See also
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")'
- en: '[PRE82]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Reference to the sync-style [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") proxies requests towards.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 引用同步式[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")指向此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")的请求代理。
- en: This instance can be used as an event target.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例可用作事件目标。
- en: See also
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Using events with the asyncio extension](#asyncio-events)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 asyncio 扩展的事件](#asyncio-events)'
- en: '[PRE83]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Reference to the sync-style [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") is associated with via its underlying
    [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 引用同步式[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")指向此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")的关联，通过其基础的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。
- en: This instance can be used as an event target.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例可用作事件目标。
- en: See also
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Using events with the asyncio extension](#asyncio-events)'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 asyncio 扩展的事件](#asyncio-events)'
- en: '[PRE84]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: An asyncio proxy for a [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")的asyncio代理。
- en: '**Members**'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.ext.asyncio.AsyncTransaction.close), [commit()](#sqlalchemy.ext.asyncio.AsyncTransaction.commit),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncTransaction.rollback), [start()](#sqlalchemy.ext.asyncio.AsyncTransaction.start)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.ext.asyncio.AsyncTransaction.close), [commit()](#sqlalchemy.ext.asyncio.AsyncTransaction.commit),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncTransaction.rollback), [start()](#sqlalchemy.ext.asyncio.AsyncTransaction.start)'
- en: '**Class signature**'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")（`sqlalchemy.ext.asyncio.base.ProxyComparable`，`sqlalchemy.ext.asyncio.base.StartableContext`）
- en: '[PRE85]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Close this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是begin/commit嵌套中的基本事务，则事务将rollback()。 否则，该方法返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 此用于取消事务而不影响封闭事务范围的事务。
- en: '[PRE86]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Commit this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: '[PRE87]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Roll back this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: '[PRE88]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Start this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    object’s context outside of using a Python `with:` block.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在不使用Python `with:`块的情况下启动此[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")对象的上下文。
- en: Result Set API Documentation
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果集API文档
- en: The [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object is an async-adapted version of the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object. It is only returned when using the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") or [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") methods, which return a result object
    that is on top of an active database cursor.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")对象是[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象的异步适配版本。 仅在使用[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")或[`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream")方法时返回结果对象，该对象位于活动数据库游标的顶部。'
- en: '| Object Name | Description |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AsyncMappingResult](#sqlalchemy.ext.asyncio.AsyncMappingResult) | A wrapper
    for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns dictionary values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncMappingResult](#sqlalchemy.ext.asyncio.AsyncMappingResult) | 包装器，用于将[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")返回字典值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")值。 |'
- en: '| [AsyncResult](#sqlalchemy.ext.asyncio.AsyncResult) | An asyncio wrapper around
    a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object. |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncResult](#sqlalchemy.ext.asyncio.AsyncResult) | [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象的asyncio包装器。 |'
- en: '| [AsyncScalarResult](#sqlalchemy.ext.asyncio.AsyncScalarResult) | A wrapper
    for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns scalar values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncScalarResult](#sqlalchemy.ext.asyncio.AsyncScalarResult) | 包装器，用于将[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")返回标量值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")值。 |'
- en: '| [AsyncTupleResult](#sqlalchemy.ext.asyncio.AsyncTupleResult) | A [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") that’s typed as returning plain Python tuples
    instead of rows. |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncTupleResult](#sqlalchemy.ext.asyncio.AsyncTupleResult) | 一个被类型化为返回普通Python元组而不是行的[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")。 |'
- en: '[PRE89]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: An asyncio wrapper around a [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 围绕[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的asyncio包装器。
- en: The [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    only applies to statement executions that use a server-side cursor. It is returned
    only from the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") and [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") methods.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")仅适用于使用服务器端游标的语句执行。它仅从[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")和[`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream")方法返回。'
- en: Note
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As is the case with [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"), this object is used for ORM results returned by [`AsyncSession.execute()`](#sqlalchemy.ext.asyncio.AsyncSession.execute
    "sqlalchemy.ext.asyncio.AsyncSession.execute"), which can yield instances of ORM
    mapped objects either individually or within tuple-like rows. Note that these
    result objects do not deduplicate instances or rows automatically as is the case
    with the legacy [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. For in-Python de-duplication of instances or rows, use the [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique
    "sqlalchemy.ext.asyncio.AsyncResult.unique") modifier method.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")一样，此对象用于由[`AsyncSession.execute()`](#sqlalchemy.ext.asyncio.AsyncSession.execute
    "sqlalchemy.ext.asyncio.AsyncSession.execute")返回的ORM结果，该结果可以单独或在类似元组的行中生成ORM映射对象的实例。请注意，这些结果对象不会像旧的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象一样自动去重实例或行。对于实例或行的Python内去重，请使用[`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique
    "sqlalchemy.ext.asyncio.AsyncResult.unique")修饰器方法。
- en: New in version 1.4.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Members**'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncResult.first),
    [freeze()](#sqlalchemy.ext.asyncio.AsyncResult.freeze), [keys()](#sqlalchemy.ext.asyncio.AsyncResult.keys),
    [mappings()](#sqlalchemy.ext.asyncio.AsyncResult.mappings), [one()](#sqlalchemy.ext.asyncio.AsyncResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncResult.partitions),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncResult.scalar), [scalar_one()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one_or_none),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncResult.scalars), [t](#sqlalchemy.ext.asyncio.AsyncResult.t),
    [tuples()](#sqlalchemy.ext.asyncio.AsyncResult.tuples), [unique()](#sqlalchemy.ext.asyncio.AsyncResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncResult.yield_per)'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.ext.asyncio.AsyncResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncResult.first),
    [freeze()](#sqlalchemy.ext.asyncio.AsyncResult.freeze), [keys()](#sqlalchemy.ext.asyncio.AsyncResult.keys),
    [mappings()](#sqlalchemy.ext.asyncio.AsyncResult.mappings), [one()](#sqlalchemy.ext.asyncio.AsyncResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncResult.partitions),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncResult.scalar), [scalar_one()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one_or_none),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncResult.scalars), [t](#sqlalchemy.ext.asyncio.AsyncResult.t),
    [tuples()](#sqlalchemy.ext.asyncio.AsyncResult.tuples), [unique()](#sqlalchemy.ext.asyncio.AsyncResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncResult.yield_per)'
- en: '**Class signature**'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.asyncio.AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
- en: '[PRE90]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Return all rows in a list.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 返回列表中的所有行。
- en: Closes the result set after invocation. Subsequent invocations will return an
    empty list.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用后关闭结果集。后续调用将返回一个空列表。
- en: 'Returns:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象的列表。
- en: '[PRE91]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `AsyncCommon.close()` *方法继承*'
- en: Close this result.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此结果。
- en: '[PRE92]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `AsyncCommon.closed` *属性继承*'
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 代理底层结果对象的 .closed 属性（如果有），否则引发`AttributeError`。
- en: New in version 2.0.0b3.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 `2.0.0b3` 中的新内容。
- en: '[PRE93]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Establish the columns that should be returned in each row.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 确定每行应返回的列。
- en: Refer to [`Result.columns()`](../../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整行为描述，请参阅同步 SQLAlchemy API 中的 [`Result.columns()`](../../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns")。
- en: '[PRE94]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: A synonym for the [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") method.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all "sqlalchemy.ext.asyncio.AsyncResult.all")
    方法的同义词。'
- en: New in version 2.0.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 `2.0` 中的新内容。
- en: '[PRE95]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Fetch many rows.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 检索多行。
- en: When all rows are exhausted, returns an empty list.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都被耗尽时，返回一个空列表。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是为了向后兼容 SQLAlchemy 1.x.x 提供的。
- en: To fetch rows in groups, use the [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") method.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 要按组检索行，请使用 [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") 方法。
- en: 'Returns:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象的列表。
- en: See also
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")'
- en: '[PRE96]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Fetch one row.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 检索一行。
- en: When all rows are exhausted, returns None.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都被耗尽时，返回`None`。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是为了向后兼容 SQLAlchemy 1.x.x 提供的。
- en: To fetch the first row of a result only, use the [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") method. To iterate through all rows,
    iterate the [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object directly.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅检索结果的第一行，请使用 [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") 方法。要遍历所有行，请直接迭代 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") 对象。
- en: 'Returns:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object if no filters are applied, or `None` if no rows remain.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未应用任何过滤器，则为 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象，否则为`None`。
- en: '[PRE97]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Fetch the first row or `None` if no row is present.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 检索第一行或如果不存在行则为`None`。
- en: Closes the result set and discards remaining rows.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭结果集并丢弃剩余行。
- en: Note
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar
    "sqlalchemy.ext.asyncio.AsyncResult.scalar") method, or combine [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first").
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回一个**行**（例如元组）。要返回确切的单个标量值，即第一行的第一列，请使用 [`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar
    "sqlalchemy.ext.asyncio.AsyncResult.scalar") 方法，或者结合 [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") 和 [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first")。
- en: Additionally, in contrast to the behavior of the legacy ORM [`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") method, **no limit is applied** to the SQL query
    which was invoked to produce this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult"); for a DBAPI driver that buffers results
    in memory before yielding rows, all rows will be sent to the Python process and
    all but the first row will be discarded.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与传统 ORM [`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") 方法的行为相反，对产生此[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")的 SQL 查询不应用任何限制；对于在向 Python 进程发送行之前在内存中缓冲结果的
    DBAPI 驱动程序，所有行将被发送到 Python 进程，除第一行外的所有行将被丢弃。
- en: See also
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query Unified with Core Select](../../changelog/migration_20.html#migration-20-unify-select)'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询与核心选择统一](../../changelog/migration_20.html#migration-20-unify-select)'
- en: 'Returns:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 返回���
- en: a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object, or None if no rows remain.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，如果没有剩余行则为
    None。
- en: See also
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar "sqlalchemy.ext.asyncio.AsyncResult.scalar")'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar "sqlalchemy.ext.asyncio.AsyncResult.scalar")'
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
- en: '[PRE98]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Return a callable object that will produce copies of this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") when invoked.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，当调用时将产生此[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")的副本。
- en: The callable object returned is an instance of [`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult").
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的可调用对象是[`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult")的实例。
- en: This is used for result set caching. The method must be called on the result
    when it has been unconsumed, and calling the method will consume the result fully.
    When the [`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") is retrieved from a cache, it can be called
    any number of times where it will produce a new [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object each time against its stored set of rows.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 用于结果集缓存。当结果未被消耗时，必须在结果上调用该方法，并且调用该方法将完全消耗结果。当从缓存中检索到[`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult")时，可以多次调用它，每次都会针对其存储的行集产生一个新的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。
- en: See also
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](../session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](../session_events.html#do-orm-execute-re-executing) - 在 ORM 中实现结果集缓存的示例用法。'
- en: '[PRE99]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.engine._WithKeys.keys` *方法的* `sqlalchemy.engine._WithKeys`'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代视图，该视图产生每个[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")所代表的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以表示核心语句返回的列标签或 ORM 执行返回的 orm 类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用 Python 的 `in` 运算符测试视图中是否包含键，该运算符将同时测试视图中表示的字符串键以及列对象等备用键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本更改：返回键视图对象而不是普通列表。
- en: '[PRE100]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Apply a mappings filter to returned rows, returning an instance of [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult").
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用映射过滤器，返回一个[`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult")的实例。
- en: When this filter is applied, fetching rows will return [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") objects instead of [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用此过滤器时，获取行将返回[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")对象，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: 'Returns:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: a new [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    filtering object referring to the underlying [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的指向底层[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的[`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult")过滤对象。
- en: '[PRE101]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Return exactly one row or raise an exception.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一行或引发异常。
- en: Raises [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound") if the result returns no rows, or [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows would be returned.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果返回没有行，则引发[`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")，如果将返回多行，则引发[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: Note
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one") method, or combine [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one").
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回一个**行**，例如元组。要返回确切的一个单一标量值，即第一行的第一列，请使用[`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one")方法，或结合[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars")和[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one")。
- en: New in version 1.4.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Returns:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: The first [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")。
- en: 'Raises:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '引发:'
- en: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")，[`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
- en: See also
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
- en: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
- en: '[`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one")'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one")'
- en: '[PRE102]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Return at most one result or raise an exception.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至多一个结果或引发异常。
- en: Returns `None` if the result has no rows. Raises [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows are returned.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有行，则返回`None`。如果返回多行，则引发[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: New in version 1.4.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Returns:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: The first [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    or `None` if no row is available.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")或如果没有可用行则为`None`。
- en: 'Raises:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '引发:'
- en: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
- en: See also
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
- en: '[PRE103]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Iterate through sub-lists of rows of the size given.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的行子列表。
- en: 'An async iterator is returned:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个异步迭代器：
- en: '[PRE104]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Refer to [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") in the synchronous SQLAlchemy API for a
    complete behavioral description.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的行为描述，请参阅同步SQLAlchemy API中的[`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")。
- en: '[PRE105]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Fetch the first column of the first row, and close the result set.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 提取第一行的第一列，并关闭结果集。
- en: Returns `None` if there are no rows to fetch.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有要提取的行，则返回`None`。
- en: No validation is performed to test if additional rows remain.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行验证以测试是否存在额外的行。
- en: After calling this method, the object is fully closed, e.g. the [`CursorResult.close()`](../../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method will have been called.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法后，对象已完全关闭，例如已调用[`CursorResult.close()`](../../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close")方法。
- en: 'Returns:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a Python scalar value, or `None` if no rows remain.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Python标量值，如果没有剩余行，则为`None`。
- en: '[PRE106]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Return exactly one scalar result or raise an exception.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个标量结果，否则引发异常。
- en: This is equivalent to calling [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and then [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one").
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于调用[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars")然后调用[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one")。
- en: See also
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
- en: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
- en: '[PRE107]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Return exactly one scalar result or `None`.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个标量结果或`None`。
- en: This is equivalent to calling [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and then [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none").
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于调用[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars")然后调用[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")。
- en: See also
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
- en: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
- en: '[PRE108]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Return an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    filtering object which will return single elements rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个过滤对象[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")，该对象将返回单个元素而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: Refer to [`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的行为描述，请参阅同步SQLAlchemy API中的[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")。
- en: 'Parameters:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**index** – integer or row key indicating the column to be fetched from each
    row, defaults to `0` indicating the first column.'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '**index** - 整数或行键，指示要从每行提取的列，默认为`0`，表示第一列。'
- en: 'Returns:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    filtering object referring to this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的过滤对象[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")，该对象引用此[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象。
- en: '[PRE109]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“typed tuple”类型过滤器。
- en: The [`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    attribute is a synonym for calling the [`AsyncResult.tuples()`](#sqlalchemy.ext.asyncio.AsyncResult.tuples
    "sqlalchemy.ext.asyncio.AsyncResult.tuples") method.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    属性是调用 [`AsyncResult.tuples()`](#sqlalchemy.ext.asyncio.AsyncResult.tuples "sqlalchemy.ext.asyncio.AsyncResult.tuples")
    方法的同义词。'
- en: New in version 2.0.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 新内容。
- en: '[PRE110]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型化元组”类型过滤器。
- en: This method returns the same [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object at runtime, however annotates as
    returning a [`AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult "sqlalchemy.ext.asyncio.AsyncTupleResult")
    object that will indicate to [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools that plain typed `Tuple` instances are returned rather than rows.
    This allows tuple unpacking and `__getitem__` access of [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects to by typed, for those cases where the statement
    invoked itself included typing information.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在运行时返回相同的 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    对象，但标注为返回 [`AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult "sqlalchemy.ext.asyncio.AsyncTupleResult")
    对象，这将向 [**PEP 484**](https://peps.python.org/pep-0484/) 类型工具指示，返回的是纯粹的 `Tuple`
    实例而不是行。这允许对 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象进行元组解包和 `__getitem__` 访问，对于语句本身包含类型信息的情况。
- en: New in version 2.0.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 新内容。
- en: 'Returns:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the `AsyncTupleResult` type at typing time.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 在类型工具运行时的 `AsyncTupleResult` 类型。
- en: See also
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    - shorter synonym'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    - 更短的同义词'
- en: '[`Row.t`](../../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    - [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    version'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row.t`](../../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    - [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    版本'
- en: '[PRE111]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Apply unique filtering to the objects returned by this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult").
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    返回的对象应用唯一过滤。
- en: Refer to [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的行为描述，请参阅同步 SQLAlchemy API 中的 [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")。
- en: '[PRE112]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *的方法* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行获取策略，一次获取 `num` 行。
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 方法是对 [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法的传递。请参阅该方法的文档以获取用法说明。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.40 新内容： - 添加 [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 以便该方法在所有结果集实现上都可用
- en: See also
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](../../core/connections.html#engine-stream-results) - 描述 [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../queryguide/api.html#orm-queryguide-yield-per) - 在[ORM
    查询指南](../queryguide/index.html)中'
- en: '[PRE113]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: A wrapper for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns scalar values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    的包装器，返回标量值而不是 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    值。
- en: The [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object is acquired by calling the [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") method.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    对象是通过调用 [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") 方法获得的。'
- en: Refer to the [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object in the synchronous SQLAlchemy API for
    a complete behavioral description.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅同步 SQLAlchemy API 中的 [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 对象，以获取完整的行为描述。
- en: New in version 1.4.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '**Members**'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncScalarResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncScalarResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncScalarResult.closed), [fetchall()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchmany), [first()](#sqlalchemy.ext.asyncio.AsyncScalarResult.first),
    [one()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one), [one_or_none()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one_or_none),
    [partitions()](#sqlalchemy.ext.asyncio.AsyncScalarResult.partitions), [unique()](#sqlalchemy.ext.asyncio.AsyncScalarResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncScalarResult.yield_per)'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.ext.asyncio.AsyncScalarResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncScalarResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncScalarResult.closed), [fetchall()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchmany), [first()](#sqlalchemy.ext.asyncio.AsyncScalarResult.first),
    [one()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one), [one_or_none()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one_or_none),
    [partitions()](#sqlalchemy.ext.asyncio.AsyncScalarResult.partitions), [unique()](#sqlalchemy.ext.asyncio.AsyncScalarResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncScalarResult.yield_per)'
- en: '**Class signature**'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") (`sqlalchemy.ext.asyncio.AsyncCommon`)
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.asyncio.AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") (`sqlalchemy.ext.asyncio.AsyncCommon`)
- en: '[PRE114]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Return all scalar values in a list.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 返回列表中的所有标量值。
- en: Equivalent to [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") except that scalar values, rather than
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于 [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all "sqlalchemy.ext.asyncio.AsyncResult.all")，只是返回标量值而不是
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象。
- en: '[PRE115]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon` *的* `AsyncCommon.close()` *方法*'
- en: Close this result.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此结果。
- en: '[PRE116]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon.closed` *属性的* `AsyncCommon`'
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 代理底层结果对象的 `.closed` 属性，如果有的话，否则引发 `AttributeError`。
- en: New in version 2.0.0b3.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0b3 中的新功能。
- en: '[PRE117]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: A synonym for the [`AsyncScalarResult.all()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.all
    "sqlalchemy.ext.asyncio.AsyncScalarResult.all") method.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncScalarResult.all()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.all "sqlalchemy.ext.asyncio.AsyncScalarResult.all")
    方法的同义词。'
- en: '[PRE118]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Fetch many objects.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多个对象。
- en: Equivalent to [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于 [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany")，只是返回标量值而不是 [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象。
- en: '[PRE119]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Fetch the first object or `None` if no object is present.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一个对象或 `None`（如果没有对象存在）。
- en: Equivalent to [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于 [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")，但返回的是标量值，而不是
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象。
- en: '[PRE120]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Return exactly one object or raise an exception.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 返回恰好一个对象或引发异常。
- en: Equivalent to [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one") except that scalar values, rather than
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于 [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")，但返回的是标量值，而不是
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象。
- en: '[PRE121]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Return at most one object or raise an exception.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至多一个对象或引发异常。
- en: Equivalent to [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于 [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")，但返回的是标量值，而不是 [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象。
- en: '[PRE122]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Iterate through sub-lists of elements of the size given.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的子列表元素。
- en: Equivalent to [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于 [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")，但返回的是标量值，而不是 [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象。
- en: '[PRE123]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Apply unique filtering to the objects returned by this [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult").
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    返回的对象应用唯一过滤。
- en: See [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    for usage details.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    以了解使用详情。
- en: '[PRE124]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")。'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略，一次提取 `num` 行。
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 方法是对 [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法的一个转发。请参阅该方法的文档以了解使用注意事项。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.40 新增：- 添加 [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")，以便在所有结果集实现中都可用
- en: See also
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](../../core/connections.html#engine-stream-results) - 描述了
    [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../queryguide/api.html#orm-queryguide-yield-per) - 在
    [ORM 查询指南](../queryguide/index.html) 中'
- en: '[PRE125]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: A wrapper for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns dictionary values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")的包装器，返回字典值而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")值。
- en: The [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    object is acquired by calling the [`AsyncResult.mappings()`](#sqlalchemy.ext.asyncio.AsyncResult.mappings
    "sqlalchemy.ext.asyncio.AsyncResult.mappings") method.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用[`AsyncResult.mappings()`](#sqlalchemy.ext.asyncio.AsyncResult.mappings
    "sqlalchemy.ext.asyncio.AsyncResult.mappings")方法获取[`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult")对象。
- en: Refer to the [`MappingResult`](../../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") object in the synchronous SQLAlchemy API for
    a complete behavioral description.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考同步SQLAlchemy API中的[`MappingResult`](../../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")对象，以获取完整的行为描述。
- en: New in version 1.4.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Members**'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncMappingResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncMappingResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncMappingResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncMappingResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncMappingResult.first),
    [keys()](#sqlalchemy.ext.asyncio.AsyncMappingResult.keys), [one()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncMappingResult.partitions),
    [unique()](#sqlalchemy.ext.asyncio.AsyncMappingResult.unique), [yield_per()](#sqlalchemy.ext.asyncio.AsyncMappingResult.yield_per)'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.ext.asyncio.AsyncMappingResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncMappingResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncMappingResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncMappingResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncMappingResult.first),
    [keys()](#sqlalchemy.ext.asyncio.AsyncMappingResult.keys), [one()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncMappingResult.partitions),
    [unique()](#sqlalchemy.ext.asyncio.AsyncMappingResult.unique), [yield_per()](#sqlalchemy.ext.asyncio.AsyncMappingResult.yield_per)'
- en: '**Class signature**'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
- en: '[PRE126]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Return all rows in a list.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 返回列表中的所有行。
- en: Equivalent to [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all "sqlalchemy.ext.asyncio.AsyncResult.all")，只是返回[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE127]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon.close()` *方法的* `AsyncCommon`'
- en: Close this result.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此结果。
- en: '[PRE128]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon.closed` *属性的* `AsyncCommon`'
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 代理底层结果对象的.closed属性，如果有的话，否则引发`AttributeError`。
- en: New in version 2.0.0b3.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.0b3中的新功能。
- en: '[PRE129]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Establish the columns that should be returned in each row.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 确定每行应返回的列。
- en: '[PRE130]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: A synonym for the [`AsyncMappingResult.all()`](#sqlalchemy.ext.asyncio.AsyncMappingResult.all
    "sqlalchemy.ext.asyncio.AsyncMappingResult.all") method.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncMappingResult.all()`](#sqlalchemy.ext.asyncio.AsyncMappingResult.all
    "sqlalchemy.ext.asyncio.AsyncMappingResult.all") 方法的同义词。'
- en: '[PRE131]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Fetch many rows.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多行。
- en: Equivalent to [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany")，只是返回[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE132]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Fetch one object.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一个对象。
- en: Equivalent to [`AsyncResult.fetchone()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchone
    "sqlalchemy.ext.asyncio.AsyncResult.fetchone") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.fetchone()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchone "sqlalchemy.ext.asyncio.AsyncResult.fetchone")，只是返回[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE133]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Fetch the first object or `None` if no object is present.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一个对象或`None`（如果不存在对象）。
- en: Equivalent to [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")，只是返回[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE134]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自*`sqlalchemy.engine._WithKeys`*的*`sqlalchemy.engine._WithKeys.keys`*方法*。'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代视图，该视图产生每个[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")所代表的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以表示核心语句返回的列的标签，也可以表示 orm 执行返回的 orm 类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 视图还可以使用 Python 的`in`操作符进行键包含测试，该操作符将同时测试视图中表示的字符串键以及列对象等备用键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起更改：返回的是键视图对象，而不是普通列表。
- en: '[PRE135]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Return exactly one object or raise an exception.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象或引发异常。
- en: Equivalent to [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")，只是返回[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE136]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Return at most one object or raise an exception.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个对象或引发异常。
- en: Equivalent to [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")，只是返回[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE137]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Iterate through sub-lists of elements of the size given.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代给定大小的元素子列表。
- en: Equivalent to [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")，但返回的是[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE138]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Apply unique filtering to the objects returned by this [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult").
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")返回的对象应用唯一过滤。
- en: See [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    for usage details.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")以获取使用详细信息。
- en: '[PRE139]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略以一次提取`num`行。
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")方法是对[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法的传递。请参阅该方法的文档以获取使用注意事项。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.40中：- 添加了[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")，以便该方法在所有结果集实现上都可用
- en: See also
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](../../core/connections.html#engine-stream-results) - 描述了[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用逐个提取大结果集](../queryguide/api.html#orm-queryguide-yield-per) - 在[ORM查询指南](../queryguide/index.html)中'
- en: '[PRE140]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: A [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that’s typed as returning plain Python tuples instead of rows.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")，其类型为返回普通的Python元组而不是行。
- en: Since [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    acts like a tuple in every way already, this class is a typing only class, regular
    [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    is still used at runtime.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")在所有方面都像元组一样，所以这个类只是一个类型类，正常的[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")仍然在运行时使用。
- en: '**Class signature**'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult
    "sqlalchemy.ext.asyncio.AsyncTupleResult") (`sqlalchemy.ext.asyncio.AsyncCommon`,
    `sqlalchemy.util.langhelpers.TypingOnly`)
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult
    "sqlalchemy.ext.asyncio.AsyncTupleResult") (`sqlalchemy.ext.asyncio.AsyncCommon`,
    `sqlalchemy.util.langhelpers.TypingOnly`)
- en: ORM Session API Documentation
  id: totrans-681
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORM会话API文档
- en: '| Object Name | Description |'
  id: totrans-682
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-683
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [async_object_session](#sqlalchemy.ext.asyncio.async_object_session)(instance)
    | Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    to which the given instance belongs. |'
  id: totrans-684
  prefs: []
  type: TYPE_TB
  zh: '| [async_object_session](#sqlalchemy.ext.asyncio.async_object_session)(实例)
    | 返回给定实例所属的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")。
    |'
- en: '| [async_scoped_session](#sqlalchemy.ext.asyncio.async_scoped_session) | Provides
    scoped management of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects. |'
  id: totrans-685
  prefs: []
  type: TYPE_TB
  zh: '| [async_scoped_session](#sqlalchemy.ext.asyncio.async_scoped_session) | 提供[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象的作用域管理。 |'
- en: '| [async_session](#sqlalchemy.ext.asyncio.async_session)(session) | Return
    the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    which is proxying the given [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object, if any. |'
  id: totrans-686
  prefs: []
  type: TYPE_TB
  zh: '| [async_session](#sqlalchemy.ext.asyncio.async_session)(会话) | 返回代理给定[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，如果有的话。 |'
- en: '| [async_sessionmaker](#sqlalchemy.ext.asyncio.async_sessionmaker) | A configurable
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    factory. |'
  id: totrans-687
  prefs: []
  type: TYPE_TB
  zh: '| [async_sessionmaker](#sqlalchemy.ext.asyncio.async_sessionmaker) | 可配置的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")工厂。 |'
- en: '| [AsyncAttrs](#sqlalchemy.ext.asyncio.AsyncAttrs) | Mixin class which provides
    an awaitable accessor for all attributes. |'
  id: totrans-688
  prefs: []
  type: TYPE_TB
  zh: '| [异步属性](#sqlalchemy.ext.asyncio.AsyncAttrs) | 提供所有属性的可等待访问器的混合类。 |'
- en: '| [AsyncSession](#sqlalchemy.ext.asyncio.AsyncSession) | Asyncio version of
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    |'
  id: totrans-689
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncSession](#sqlalchemy.ext.asyncio.AsyncSession) | [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的Asyncio版本。 |'
- en: '| [AsyncSessionTransaction](#sqlalchemy.ext.asyncio.AsyncSessionTransaction)
    | A wrapper for the ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. |'
  id: totrans-690
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncSessionTransaction](#sqlalchemy.ext.asyncio.AsyncSessionTransaction)
    | ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")对象的包装器。 |'
- en: '| [close_all_sessions](#sqlalchemy.ext.asyncio.close_all_sessions)() | Close
    all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions. |'
  id: totrans-691
  prefs: []
  type: TYPE_TB
  zh: '| [close_all_sessions](#sqlalchemy.ext.asyncio.close_all_sessions)() | 关闭所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")会话。 |'
- en: '[PRE141]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    to which the given instance belongs.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定实例所属的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")。
- en: This function makes use of the sync-API function [`object_session`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session") to retrieve the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which refers to the given instance, and from there links
    it to the original [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数利用同步API函数[`object_session`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session")来检索引用给定实例的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，然后将其链接到原始的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")。
- en: If the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    has been garbage collected, the return value is `None`.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")已被垃圾回收，返回值为`None`。
- en: This functionality is also available from the [`InstanceState.async_session`](../internals.html#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session") accessor.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能也可以从[`InstanceState.async_session`](../internals.html#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session")访问器中获得。
- en: 'Parameters:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**instance** – an ORM mapped instance'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '**实例** – 一个ORM映射实例'
- en: 'Returns:'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: an [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object, or `None`.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")对象，或`None`。
- en: New in version 1.4.18.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.18中的新功能。
- en: '[PRE142]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    which is proxying the given [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object, if any.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 返回代理给定[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，如果有的话。
- en: 'Parameters:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**session** – a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    instance.'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '**session** – 一个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    实例。'
- en: 'Returns:'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    instance, or `None`.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    实例，或 `None`。
- en: New in version 1.4.18.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.18 中的新功能。
- en: '[PRE143]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    会话。
- en: New in version 2.0.23.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.23 中的新功能。
- en: See also
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`close_all_sessions()`'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '`close_all_sessions()`'
- en: '[PRE144]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: A configurable [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    factory.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可配置的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    工厂。
- en: The [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    factory works in the same way as the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") factory, to generate new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects when called, creating them given
    the configurational arguments established here.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    工厂的工作方式与[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    工厂相同，当调用时生成新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    对象，根据此处建立的配置参数创建它们。'
- en: 'e.g.:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE145]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: The [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    is useful so that different parts of a program can create new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects with a fixed configuration established
    up front. Note that [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects may also be instantiated directly when not using [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    很有用，因此程序的不同部分可以使用预先建立的固定配置创建新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象。请注意，当不使用[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") 时，也可以直接实例化[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象。'
- en: 'New in version 2.0: [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") provides a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") class that’s dedicated to the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") object, including pep-484 typing support.'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能：[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") 提供了一个专门用于[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象的[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") 类，包括 pep-484 类型支持。
- en: See also
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Synopsis - ORM](#asyncio-orm) - shows example use'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '[概要 - ORM](#asyncio-orm) - 展示示例用法'
- en: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    - general overview of the'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    - 关于的一般概述'
- en: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    architecture'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    架构'
- en: '[Opening and Closing a Session](../session_basics.html#session-getting) - introductory
    text on creating sessions using [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '[打开和关闭会话](../session_basics.html#session-getting) - 介绍如何使用[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") 创建会话的文本。'
- en: '**Members**'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__init__),
    [begin()](#sqlalchemy.ext.asyncio.async_sessionmaker.begin), [configure()](#sqlalchemy.ext.asyncio.async_sessionmaker.configure)'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__init__),
    [begin()](#sqlalchemy.ext.asyncio.async_sessionmaker.begin), [configure()](#sqlalchemy.ext.asyncio.async_sessionmaker.configure)'
- en: '**Class signature**'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") (`typing.Generic`)
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") (`typing.Generic`)
- en: '[PRE146]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Produce a new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object using the configuration established in this [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")中建立的配置生成一个新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象。
- en: 'In Python, the `__call__` method is invoked on an object when it is “called”
    in the same way as a function:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，当对象以与函数相同的方式“调用”时，会调用`__call__`方法：
- en: '[PRE147]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Construct a new [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")。
- en: All arguments here except for `class_` correspond to arguments accepted by [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") directly. See the [`AsyncSession.__init__()`](#sqlalchemy.ext.asyncio.AsyncSession.__init__
    "sqlalchemy.ext.asyncio.AsyncSession.__init__") docstring for more details on
    parameters.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的所有参数（除了`class_`）都直接对应于[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")直接接受的参数。请查看[`AsyncSession.__init__()`](#sqlalchemy.ext.asyncio.AsyncSession.__init__
    "sqlalchemy.ext.asyncio.AsyncSession.__init__")文档字符串以获取有关参数的更多详细信息。
- en: '[PRE149]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Produce a context manager that both provides a new `AsyncSession` as well as
    a transaction that commits.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个上下文管理器，既提供一个新的`AsyncSession`，又提供一个提交的事务。
- en: 'e.g.:'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE150]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: (Re)configure the arguments for this async_sessionmaker.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 重新配置此 async_sessionmaker 的参数。
- en: 'e.g.:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE152]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Provides scoped management of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 提供对[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")对象的作用域管理。
- en: See the section [Using asyncio scoped session](#asyncio-scoped-session) for
    usage details.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[使用 asyncio scoped session](#asyncio-scoped-session)一节获取详细的使用说明。
- en: New in version 1.4.19.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.19 中新增。
- en: '**Members**'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.ext.asyncio.async_scoped_session.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_scoped_session.__init__),
    [aclose()](#sqlalchemy.ext.asyncio.async_scoped_session.aclose), [add()](#sqlalchemy.ext.asyncio.async_scoped_session.add),
    [add_all()](#sqlalchemy.ext.asyncio.async_scoped_session.add_all), [autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.autoflush),
    [begin()](#sqlalchemy.ext.asyncio.async_scoped_session.begin), [begin_nested()](#sqlalchemy.ext.asyncio.async_scoped_session.begin_nested),
    [bind](#sqlalchemy.ext.asyncio.async_scoped_session.bind), [close()](#sqlalchemy.ext.asyncio.async_scoped_session.close),
    [close_all()](#sqlalchemy.ext.asyncio.async_scoped_session.close_all), [commit()](#sqlalchemy.ext.asyncio.async_scoped_session.commit),
    [configure()](#sqlalchemy.ext.asyncio.async_scoped_session.configure), [connection()](#sqlalchemy.ext.asyncio.async_scoped_session.connection),
    [delete()](#sqlalchemy.ext.asyncio.async_scoped_session.delete), [deleted](#sqlalchemy.ext.asyncio.async_scoped_session.deleted),
    [dirty](#sqlalchemy.ext.asyncio.async_scoped_session.dirty), [execute()](#sqlalchemy.ext.asyncio.async_scoped_session.execute),
    [expire()](#sqlalchemy.ext.asyncio.async_scoped_session.expire), [expire_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expire_all),
    [expunge()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge), [expunge_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge_all),
    [flush()](#sqlalchemy.ext.asyncio.async_scoped_session.flush), [get()](#sqlalchemy.ext.asyncio.async_scoped_session.get),
    [get_bind()](#sqlalchemy.ext.asyncio.async_scoped_session.get_bind), [get_one()](#sqlalchemy.ext.asyncio.async_scoped_session.get_one),
    [identity_key()](#sqlalchemy.ext.asyncio.async_scoped_session.identity_key), [identity_map](#sqlalchemy.ext.asyncio.async_scoped_session.identity_map),
    [info](#sqlalchemy.ext.asyncio.async_scoped_session.info), [invalidate()](#sqlalchemy.ext.asyncio.async_scoped_session.invalidate),
    [is_active](#sqlalchemy.ext.asyncio.async_scoped_session.is_active), [is_modified()](#sqlalchemy.ext.asyncio.async_scoped_session.is_modified),
    [merge()](#sqlalchemy.ext.asyncio.async_scoped_session.merge), [new](#sqlalchemy.ext.asyncio.async_scoped_session.new),
    [no_autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.no_autoflush), [object_session()](#sqlalchemy.ext.asyncio.async_scoped_session.object_session),
    [refresh()](#sqlalchemy.ext.asyncio.async_scoped_session.refresh), [remove()](#sqlalchemy.ext.asyncio.async_scoped_session.remove),
    [reset()](#sqlalchemy.ext.asyncio.async_scoped_session.reset), [rollback()](#sqlalchemy.ext.asyncio.async_scoped_session.rollback),
    [scalar()](#sqlalchemy.ext.asyncio.async_scoped_session.scalar), [scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.scalars),
    [session_factory](#sqlalchemy.ext.asyncio.async_scoped_session.session_factory),
    [stream()](#sqlalchemy.ext.asyncio.async_scoped_session.stream), [stream_scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.stream_scalars)'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.ext.asyncio.async_scoped_session.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_scoped_session.__init__),
    [aclose()](#sqlalchemy.ext.asyncio.async_scoped_session.aclose), [add()](#sqlalchemy.ext.asyncio.async_scoped_session.add),
    [add_all()](#sqlalchemy.ext.asyncio.async_scoped_session.add_all), [autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.autoflush),
    [begin()](#sqlalchemy.ext.asyncio.async_scoped_session.begin), [begin_nested()](#sqlalchemy.ext.asyncio.async_scoped_session.begin_nested),
    [bind](#sqlalchemy.ext.asyncio.async_scoped_session.bind), [close()](#sqlalchemy.ext.asyncio.async_scoped_session.close),
    [close_all()](#sqlalchemy.ext.asyncio.async_scoped_session.close_all), [commit()](#sqlalchemy.ext.asyncio.async_scoped_session.commit),
    [configure()](#sqlalchemy.ext.asyncio.async_scoped_session.configure), [connection()](#sqlalchemy.ext.asyncio.async_scoped_session.connection),
    [delete()](#sqlalchemy.ext.asyncio.async_scoped_session.delete), [deleted](#sqlalchemy.ext.asyncio.async_scoped_session.deleted),
    [dirty](#sqlalchemy.ext.asyncio.async_scoped_session.dirty), [execute()](#sqlalchemy.ext.asyncio.async_scoped_session.execute),
    [expire()](#sqlalchemy.ext.asyncio.async_scoped_session.expire), [expire_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expire_all),
    [expunge()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge), [expunge_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge_all),
    [flush()](#sqlalchemy.ext.asyncio.async_scoped_session.flush), [get()](#sqlalchemy.ext.asyncio.async_scoped_session.get),
    [get_bind()](#sqlalchemy.ext.asyncio.async_scoped_session.get_bind), [get_one()](#sqlalchemy.ext.asyncio.async_scoped_session.get_one),
    [identity_key()](#sqlalchemy.ext.asyncio.async_scoped_session.identity_key), [identity_map](#sqlalchemy.ext.asyncio.async_scoped_session.identity_map),
    [info](#sqlalchemy.ext.asyncio.async_scoped_session.info), [invalidate()](#sqlalchemy.ext.asyncio.async_scoped_session.invalidate),
    [is_active](#sqlalchemy.ext.asyncio.async_scoped_session.is_active), [is_modified()](#sqlalchemy.ext.asyncio.async_scoped_session.is_modified),
    [merge()](#sqlalchemy.ext.asyncio.async_scoped_session.merge), [new](#sqlalchemy.ext.asyncio.async_scoped_session.new),
    [no_autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.no_autoflush), [object_session()](#sqlalchemy.ext.asyncio.async_scoped_session.object_session),
    [refresh()](#sqlalchemy.ext.asyncio.async_scoped_session.refresh), [remove()](#sqlalchemy.ext.asyncio.async_scoped_session.remove),
    [reset()](#sqlalchemy.ext.asyncio.async_scoped_session.reset), [rollback()](#sqlalchemy.ext.asyncio.async_scoped_session.rollback),
    [scalar()](#sqlalchemy.ext.asyncio.async_scoped_session.scalar), [scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.scalars),
    [session_factory](#sqlalchemy.ext.asyncio.async_scoped_session.session_factory),
    [stream()](#sqlalchemy.ext.asyncio.async_scoped_session.stream), [stream_scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.stream_scalars)'
- en: '**Class signature**'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") (`typing.Generic`)
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") (`typing.Generic`)
- en: '[PRE154]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Return the current [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession"),
    creating it using the [`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") if not present.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")，如果不存在则使用[`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory")创建它。
- en: 'Parameters:'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Keyword arguments will be passed to the [`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") callable, if an existing [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is not present. If the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is present and keyword arguments have been
    passed, [`InvalidRequestError`](../../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 如果不存在现有的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")，关键字参数将被传递给[`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory")可调用对象。如果存在[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")并且已传递关键字参数，则会引发[`InvalidRequestError`](../../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。'
- en: '[PRE155]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Construct a new [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session").
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session")。
- en: 'Parameters:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session_factory` – a factory to create new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") instances. This is usually, but not necessarily,
    an instance of [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").'
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session_factory` – 用于创建新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")实例的工厂。通常情况下，但不一定，是[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")的实例。'
- en: '`scopefunc` – function which defines the current scope. A function such as
    `asyncio.current_task` may be useful here.'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopefunc` – 定义当前范围的函数。例如，`asyncio.current_task`可能在这里很有用。'
- en: '[PRE156]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: A synonym for [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close").
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 是[`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")的一个同义词。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: The [`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")
    name is specifically to support the Python standard library `@contextlib.aclosing`
    context manager function.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")的名称是专门为了支持
    Python 标准库中的`@contextlib.aclosing`上下文管理器函数。'
- en: New in version 2.0.20.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.20 中新增。
- en: '[PRE157]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Place an object into this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象放入此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Objects that are in the [transient](../../glossary.html#term-transient) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [pending](../../glossary.html#term-pending)
    state, until the next flush, at which point they will move to the [persistent](../../glossary.html#term-persistent)
    state.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递到[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[瞬态](../../glossary.html#term-transient)状态的对象将移动到[挂起](../../glossary.html#term-pending)状态，直到下一次刷新，此时它们将转移到[持久](../../glossary.html#term-persistent)状态。
- en: Objects that are in the [detached](../../glossary.html#term-detached) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [persistent](../../glossary.html#term-persistent)
    state directly.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递到[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[分离](../../glossary.html#term-detached)状态的对象将直接转移到[持久](../../glossary.html#term-persistent)状态。
- en: If the transaction used by the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务被回滚，当它们传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")时处于瞬态状态的对象将被移回[瞬态](../../glossary.html#term-transient)状态，并且将不再存在于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](../session_basics.html#session-adding) - 在[使用会话的基础知识](../session_basics.html#id1)'
- en: '[PRE158]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Add the given collection of instances to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的实例集合添加到此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，为[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类代理。
- en: See the documentation for [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 有关一般行为描述，请参阅[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")的文档。
- en: See also
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](../session_basics.html#session-adding) - 在[使用会话的基础知识](../session_basics.html#id1)'
- en: '[PRE159]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类代理`Session.autoflush`属性。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类代理。
- en: '[PRE160]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 代理类[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")的代表类[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")。
- en: 'The underlying [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will perform the “begin” action when the [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object is entered:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象进入时，底层的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将执行“开始”操作：
- en: '[PRE161]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Note that database IO will not normally occur when the session-level transaction
    is begun, as database transactions begin on an on-demand basis. However, the begin
    block is async to accommodate for a [`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event hook that may perform
    IO.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当会话级事务开始时，通常不会发生数据库IO，因为数据库事务是按需开始的。但是，开始块是异步的，以适应可能执行IO的[`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")事件挂钩。
- en: For a general description of ORM begin, see [`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin").
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 关于ORM开始的一般描述，请参阅[`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")。
- en: '[PRE162]'
  id: totrans-795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object which will begin a “nested”
    transaction, e.g. SAVEPOINT.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象，该对象将开始一个“嵌套”事务，例如SAVEPOINT。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 代理类[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")的代表类[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")。
- en: Behavior is the same as that of [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin").
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与[`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin "sqlalchemy.ext.asyncio.AsyncSession.begin")的行为相同。
- en: For a general description of ORM begin nested, see [`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested").
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 关于ORM开始嵌套的一般描述，请参阅[`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。
- en: See also
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../../dialects/sqlite.html#aiosqlite-serializable)
    - special workarounds required with the SQLite asyncio driver in order for SAVEPOINT
    to work correctly.'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '[可序列化隔离/保存点/事务DDL（asyncio版本）](../../dialects/sqlite.html#aiosqlite-serializable)
    - 为了使SAVEPOINT正常工作，SQLite asyncio驱动程序需要特殊的解决方法。'
- en: '[PRE163]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Proxy for the `AsyncSession.bind` attribute on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 代理类`AsyncSession.bind`属性的代表类[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")。
- en: '[PRE164]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Close out the transactional resources and ORM objects used by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")使用的事务资源和ORM对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 代理类[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")的代表类[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")。
- en: See also
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - main documentation for “close”'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - “close”的主要文档'
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](../session_basics.html#session-closing) - 关于[`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close")和[`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset
    "sqlalchemy.ext.asyncio.AsyncSession.reset")语义的详细信息。'
- en: '[PRE165]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")会话。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类为[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类代理。
- en: 'Deprecated since version 2.0: The [`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") method is deprecated and will
    be removed in a future release. Please refer to [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions").'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始弃用：[`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all")方法已弃用，并将在将来的版本中移除。请参阅[`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions")。
- en: '[PRE166]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Commit the current transaction in progress.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 提交当前进行中的事务。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类为[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类代理。
- en: See also
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - main documentation for “commit”'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - “commit”的主要文档'
- en: '[PRE167]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: reconfigure the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") used by this [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 重新配置此[`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")使用的[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")。
- en: See [`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure")。
- en: '[PRE168]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Return a [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object corresponding to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个与此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的事务状态相对应的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类为[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类代理。
- en: This method may also be used to establish execution options for the database
    connection used by the current transaction.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法还可用于为当前事务使用的数据库连接建立执行选项。
- en: 'New in version 1.4.24: Added **kw arguments which are passed through to the
    underlying [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") method.'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.24中添加了传递给底层[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")方法的**kw参数。
- en: See also
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - main documentation for “connection”'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - “connection”的主要文档'
- en: '[PRE169]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Mark an instance as deleted.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为已删除。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: The database delete operation occurs upon `flush()`.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库删除操作发生在`flush()`时。
- en: As this operation may need to cascade along unloaded relationships, it is awaitable
    to allow for those queries to take place.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此操作可能需要沿未加载的关系级联，因此它是可等待的，以允许执行这些查询。
- en: See also
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - main documentation for delete'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - 删除的主要文档'
- en: '[PRE170]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: The set of all instances marked as ‘deleted’ within this `Session`
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为‘删除’的所有实例的集合
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: '[PRE171]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: The set of all persistent instances considered dirty.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 所有持久实例的集合被视为脏数据。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: 'E.g.:'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE172]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Instances are considered dirty when they were modified but not deleted.
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例被修改但未被删除时，将其视为脏数据。
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此‘脏数据’计算是‘乐观的’；大多数属性设置或集合修改操作都会将实例标记为‘脏数据’并将其放入此集合中，即使属性的值没有净变化。在刷新时，将每个属性的值与先前保存的值进行比较，如果没有净变化，则不会执行任何SQL操作（这是一种更昂贵的操作，因此仅在刷新时执行）。
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实例的属性是否具有可执行的净变化，请使用[`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")方法。
- en: '[PRE173]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Execute a statement and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: See also
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - main documentation for execute'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - 执行的主要文档'
- en: '[PRE174]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Expire the attributes on an instance.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 使实例上的属性过期。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例的属性标记为过时。下次访问过期属性时，将向[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的相同值，而不管该事务之外的数据库状态如何更改。
- en: To expire all objects in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use `Session.expire_all()`.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时使[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的所有对象过期，请使用`Session.expire_all()`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire()` only makes sense
    for the specific case that a non-ORM SQL statement was emitted in the current
    transaction.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的默认行为是在调用`Session.rollback()`或`Session.commit()`方法时使所有状态过期，以便为新事务加载新状态。因此，仅在当前事务中发出非ORM
    SQL语句的特定情况下调用`Session.expire()`才有意义。'
- en: 'Parameters:'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – The instance to be refreshed.'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 需要刷新的实例。'
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选的字符串属性名称列表，指示要过期的属性子集。'
- en: See also
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](../session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE175]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Expires all persistent instances within this Session.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 使此会话中的所有持久实例过期。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 当下次访问持久实例上的任何属性时，将使用[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与先前在该事务中读取的值相同的值，而不考虑该事务外部数据库状态的变化。
- en: To expire individual objects and individual attributes on those objects, use
    `Session.expire()`.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 要过期单个对象和这些对象上的单个属性，请使用`Session.expire()`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire_all()` is not usually
    needed, assuming the transaction is isolated.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`Session.rollback()`或`Session.commit()`方法时，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的默认行为是过期所有状态，以便为新事务加载新状态。因此，通常不需要调用`Session.expire_all()`，假设事务是隔离的。
- en: See also
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](../session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE176]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Remove the instance from this `Session`.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中移除实例。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放实例的所有内部引用。将根据*expunge*级联规则应用级联。
- en: '[PRE177]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Remove all object instances from this `Session`.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中移除所有对象实例。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于在此`Session`中对所有对象调用`expunge(obj)`。
- en: '[PRE178]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Flush all the object changes to the database.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有对象更改刷新到数据库。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: See also
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - main documentation for flush'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - flush的主要文档'
- en: '[PRE179]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果找不到则返回`None`。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: See also
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - main documentation for get'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - get的主要文档'
- en: '[PRE180]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Return a “bind” to which the synchronous proxied [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个同步代理的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")绑定到的“bind”。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Unlike the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, this method is currently **not** used
    by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    in any way in order to resolve engines for requests.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法不同，这个方法目前**不**以任何方式被[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")使用，以解析请求的引擎。
- en: Note
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method proxies directly to the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, however is currently **not** useful
    as an override target, in contrast to that of the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method. The example below illustrates how to
    implement custom [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes that work with [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法直接代理到[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法，但目前**不**作为一个覆盖目标有用，与[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法相反。下面的示例说明了如何实现与[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")和[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")一起工作的自定义[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方案。
- en: 'The pattern introduced at [Custom Vertical Partitioning](../persistence_techniques.html#session-custom-partitioning)
    illustrates how to apply a custom bind-lookup scheme to a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") given a set of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. To apply a corresponding [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") implementation for use with a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") objects, continue to subclass [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and apply it to [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") using [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession"). The inner method must continue to return
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, which can be acquired from a [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") using the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute:'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 在[自定义垂直分区](../persistence_techniques.html#session-custom-partitioning)中介绍的模式说明了如何将自定义绑定查找方案应用于给定一组[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。要为与[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")和[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")对象一起使用的[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")实现，继续对[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")进行子类化，并将其应用于[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，使用[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession")。内部方法必须继续返回[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")实例，可以从[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")使用[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")属性获取：
- en: '[PRE181]'
  id: totrans-908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: The [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method is called in a non-asyncio, implicitly
    non-blocking context in the same manner as ORM event hooks and functions that
    are invoked via [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync"), so routines that wish to run
    SQL commands inside of [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") can continue to do so using blocking-style
    code, which will be translated to implicitly async calls at the point of invoking
    IO on the database drivers.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法在非异步、隐式非阻塞上下文中调用，方式与ORM事件钩子和通过[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")调用的函数相同，因此希望在[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")内运行SQL命令的例程可以继续使用阻塞式代码，这将在调用数据库驱动程序的IO点时转换为隐式异步调用。'
- en: '[PRE182]'
  id: totrans-910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Return an instance based on the given primary key identifier, or raise an exception
    if not found.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 返回基于给定主键标识符的实例，如果未找到则引发异常。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发`sqlalchemy.orm.exc.NoResultFound`。
- en: '..versionadded: 2.0.22'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: '..版本新增: 2.0.22'
- en: See also
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - main documentation for get_one'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - get_one的主要文档'
- en: '[PRE183]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Return an identity key.
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 返回标识键。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: This is an alias of [`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE184]'
  id: totrans-922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Proxy for the [`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")属性，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: '[PRE185]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: A user-modifiable dictionary.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 可由用户修改的字典。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") constructor or factory methods. The dictionary
    here is always local to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典的初始值可以使用`info`参数来填充[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")构造函数或[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")构造函数或工厂方法。此处的字典始终局限于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，可以独立于所有其他[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象进行修改。
- en: '[PRE186]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Close this Session, using connection invalidation.
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此Session，使用连接失效。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: For a complete description, see [`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate").
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 完整描述，请参阅[`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")。
- en: '[PRE187]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不处于“部分回滚”状态，则为True。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: 'Changed in version 1.4: The [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不再立即开始新事务，因此当首次实例化[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，此属性将为False。
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: “partial rollback”状态通常表示[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的刷新过程失败，必须发出[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法才能完全回滚事务。
- en: If this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")根本不在事务中，则在首次使用时[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将自动开始，因此在这种情况下[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")将返回True。
- en: Otherwise, if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will also return True.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")在事务中，并且该事务尚未在内部回滚，则[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")也将返回True。
- en: See also
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../../faq/sessions.html#faq-session-rollback)'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '[“由于刷新期间的先前异常，此Session的事务已回滚。”（或类似）](../../faq/sessions.html#faq-session-rollback)'
- en: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
- en: '[PRE188]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Return `True` if the given instance has locally modified attributes.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定实例具有本地修改的属性，则返回`True`。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检索实例上每个被检测属性的历史记录，并比较当前值与先前提交的值（如果有）。
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这是检查给定实例是否在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")集合中的更昂贵且更准确的版本；将对每个属性的净“脏”状态进行完整测试。
- en: 'E.g.:'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 例如（E.g.）：
- en: '[PRE189]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'A few caveats to this method apply:'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 对此方法有一些注意事项：
- en: Instances present in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")集合中的实例在使用此方法进行测试时可能报告为`False`。这是因为对象可能已通过属性突变接收到变更事件，从而将其放置在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")中，但最终状态与从数据库加载的状态相同，在这里没有净变化。
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用新值时，标量属性可能没有记录先前设置的值，如果属性在应用新值时未加载或已过期，则会出现这种情况 - 在这些情况下，即使与其数据库值相比最终没有净变化，也会假定属性已更改。在大多数情况下，当发生设置事件时，SQLAlchemy不需要“旧”值，因此如果旧值不存在，则会跳过发出SQL调用的费用，这基于对标量值的更新通常是需要的假设，并且在那几种情况下，它不是。与发出防御性SELECT相比，平均成本较低。
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当属性容器的`active_history`标志设置为`True`时，才无条件地在设置时获取“旧”值。此标志通常设置为主键属性和不是简单的多对一的标量对象引用。要为任意映射列设置此标志，请使用[`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的`active_history`参数。
- en: 'Parameters:'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 参数（Parameters）：
- en: '`instance` – mapped instance to be tested for pending changes.'
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要测试挂起更改的映射实例。'
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  id: totrans-959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_collections` – 表示是否应该在操作中包含多值集合。将其设置为`False`是一种仅检测基于本地列的属性（即标量列或多对一外键），这些属性在刷新时将导致此实例更新的方法。'
- en: '[PRE190]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Copy the state of a given instance into a corresponding instance within this
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 复制给定实例的状态到此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")中的相应实例。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: See also
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - main documentation for merge'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - merge 的主要文档'
- en: '[PRE191]'
  id: totrans-965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: The set of all instances marked as ‘new’ within this `Session`.
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为“新”的所有实例的集合。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: '[PRE192]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Return a context manager that disables autoflush.
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个禁用自动刷新的上下文管理器。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: 'e.g.:'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE193]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 在`with:`块内执行的操作不会受到在查询访问时发生的刷新的影响。这在初始化涉及现有数据库查询的一系列对象时非常有用，其中未完成的对象不应立即被刷新。
- en: '[PRE194]'
  id: totrans-976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Return the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象所属的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This is an alias of [`object_session()`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`object_session()`](../session_api.html#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")的别名。
- en: '[PRE195]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Expire and refresh the attributes on the given instance.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 使给定实例的属性过期并刷新。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: A query will be issued to the database and all attributes will be refreshed
    with their current database value.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 将向数据库发出查询，并使用其当前数据库值刷新所有属性。
- en: This is the async version of the [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. See that method for a complete description
    of all options.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")方法的异步版本。有关所有选项的完整描述，请参阅该方法。
- en: See also
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - main documentation for refresh'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - 刷新的主要文档'
- en: '[PRE196]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Dispose of the current [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), if present.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 丢弃当前的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")（如果存在）。
- en: Different from scoped_session’s remove method, this method would use await to
    wait for the close method of AsyncSession.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 与 scoped_session 的 remove 方法不同，此方法将使用 await 等待 AsyncSession 的 close 方法。
- en: '[PRE197]'
  id: totrans-991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭事务资源和此 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    使用的 ORM 对象，将会重置会话到其初始状态。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类，代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类。
- en: New in version 2.0.22.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.22 中新增。
- en: See also
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - main documentation for “reset”'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - 重置的主要文档'
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](../session_basics.html#session-closing) - 关于 [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") 和 [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset
    "sqlalchemy.ext.asyncio.AsyncSession.reset") 语义的详细信息。'
- en: '[PRE198]'
  id: totrans-998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Rollback the current transaction in progress.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前进行中的事务。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类，代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类。
- en: See also
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - main documentation for “rollback”'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - 回滚的主要文档'
- en: '[PRE199]'
  id: totrans-1003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Execute a statement and return a scalar result.
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类，代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类。
- en: See also
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - main documentation for scalar'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - 标量的主要文档'
- en: '[PRE200]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Execute a statement and return scalar results.
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类，代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类。
- en: 'Returns:'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 对象
- en: 'New in version 1.4.24: Added [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中新增：添加了 [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")
- en: 'New in version 1.4.26: Added [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.26 中新增：添加了 [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")
- en: See also
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - 标量的主要文档'
- en: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - streaming version'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - 流式版本'
- en: '[PRE201]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: The session_factory provided to __init__ is stored in this attribute and may
    be accessed at a later time. This can be useful when a new non-scoped [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is needed.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给 __init__ 的 session_factory 存储在此属性中，可在以后访问。当需要新的非作用域 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 时，这可能会很有用。
- en: '[PRE202]'
  id: totrans-1020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Execute a statement and return a streaming [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回流式 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类的 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的代理。
- en: '[PRE203]'
  id: totrans-1023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Execute a statement and return a stream of scalar results.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果流。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类的 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的代理。
- en: 'Returns:'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    对象
- en: New in version 1.4.24.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.24 新增。
- en: See also
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - 标量的主要文档'
- en: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - non streaming version'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - 非流式版本'
- en: '[PRE204]'
  id: totrans-1032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Mixin class which provides an awaitable accessor for all attributes.
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 混合类，为所有属性提供可等待的访问器。
- en: 'E.g.:'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE205]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'In the above example, the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin is applied to the declarative `Base`
    class where it takes effect for all subclasses. This mixin adds a single new attribute
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") to all classes, which will
    yield the value of any attribute as an awaitable. This allows attributes which
    may be subject to lazy loading or deferred / unexpiry loading to be accessed such
    that IO can still be emitted:'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，将 [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    混合类应用于声明的 `Base` 类，在所有子类中生效。此混合类为所有类添加一个新属性 [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") ，它将任何属性的值作为可等待返回。这允许访问可能受惰性加载、延迟加载或未过期加载影响的属性，以便仍然可以发出
    IO：
- en: '[PRE206]'
  id: totrans-1037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'The [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") performs a call against the
    attribute that is approximately equivalent to using the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method, e.g.:'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") 对属性执行调用，这相当于使用 [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") 方法，例如：'
- en: '[PRE207]'
  id: totrans-1039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: New in version 2.0.13.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.13 新增。
- en: '**Members**'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[awaitable_attrs](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs)'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: '[awaitable_attrs](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs)'
- en: See also
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Preventing Implicit IO when Using AsyncSession](#asyncio-orm-avoid-lazyloads)'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用 AsyncSession 时防止隐式 IO](#asyncio-orm-avoid-lazyloads)'
- en: '[PRE208]'
  id: totrans-1045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: provide a namespace of all attributes on this object wrapped as awaitables.
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 提供所有属性的命名空间，这些属性在此对象上被封装为可等待。
- en: 'e.g.:'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE209]'
  id: totrans-1048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Asyncio version of [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的异步版本。'
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is a proxy for a traditional [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")是传统[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例的代理。'
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is **not safe for use in concurrent tasks.**. See [Is the Session thread-safe?
    Is AsyncSession safe to share in concurrent tasks?](../session_basics.html#session-faq-threadsafe)
    for background.
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    **不能安全地用于并发任务**。详见[会话线程安全吗？AsyncSession在并发任务中是否安全共享？](../session_basics.html#session-faq-threadsafe)。'
- en: New in version 1.4.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: To use an [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with custom [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    implementations, see the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") parameter.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 要想使用自定义[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")实现的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，请参见[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession")参数。
- en: '**Members**'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[sync_session_class](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class),
    [__init__()](#sqlalchemy.ext.asyncio.AsyncSession.__init__), [aclose()](#sqlalchemy.ext.asyncio.AsyncSession.aclose),
    [add()](#sqlalchemy.ext.asyncio.AsyncSession.add), [add_all()](#sqlalchemy.ext.asyncio.AsyncSession.add_all),
    [autoflush](#sqlalchemy.ext.asyncio.AsyncSession.autoflush), [begin()](#sqlalchemy.ext.asyncio.AsyncSession.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncSession.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncSession.close),
    [close_all()](#sqlalchemy.ext.asyncio.AsyncSession.close_all), [commit()](#sqlalchemy.ext.asyncio.AsyncSession.commit),
    [connection()](#sqlalchemy.ext.asyncio.AsyncSession.connection), [delete()](#sqlalchemy.ext.asyncio.AsyncSession.delete),
    [deleted](#sqlalchemy.ext.asyncio.AsyncSession.deleted), [dirty](#sqlalchemy.ext.asyncio.AsyncSession.dirty),
    [execute()](#sqlalchemy.ext.asyncio.AsyncSession.execute), [expire()](#sqlalchemy.ext.asyncio.AsyncSession.expire),
    [expire_all()](#sqlalchemy.ext.asyncio.AsyncSession.expire_all), [expunge()](#sqlalchemy.ext.asyncio.AsyncSession.expunge),
    [expunge_all()](#sqlalchemy.ext.asyncio.AsyncSession.expunge_all), [flush()](#sqlalchemy.ext.asyncio.AsyncSession.flush),
    [get()](#sqlalchemy.ext.asyncio.AsyncSession.get), [get_bind()](#sqlalchemy.ext.asyncio.AsyncSession.get_bind),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_nested_transaction),
    [get_one()](#sqlalchemy.ext.asyncio.AsyncSession.get_one), [get_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_transaction),
    [identity_key()](#sqlalchemy.ext.asyncio.AsyncSession.identity_key), [identity_map](#sqlalchemy.ext.asyncio.AsyncSession.identity_map),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncSession.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncSession.invalidate), [is_active](#sqlalchemy.ext.asyncio.AsyncSession.is_active),
    [is_modified()](#sqlalchemy.ext.asyncio.AsyncSession.is_modified), [merge()](#sqlalchemy.ext.asyncio.AsyncSession.merge),
    [new](#sqlalchemy.ext.asyncio.AsyncSession.new), [no_autoflush](#sqlalchemy.ext.asyncio.AsyncSession.no_autoflush),
    [object_session()](#sqlalchemy.ext.asyncio.AsyncSession.object_session), [refresh()](#sqlalchemy.ext.asyncio.AsyncSession.refresh),
    [reset()](#sqlalchemy.ext.asyncio.AsyncSession.reset), [rollback()](#sqlalchemy.ext.asyncio.AsyncSession.rollback),
    [run_sync()](#sqlalchemy.ext.asyncio.AsyncSession.run_sync), [scalar()](#sqlalchemy.ext.asyncio.AsyncSession.scalar),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncSession.scalars), [stream()](#sqlalchemy.ext.asyncio.AsyncSession.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars), [sync_session](#sqlalchemy.ext.asyncio.AsyncSession.sync_session)'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: '[同步会话类](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class), [__init__()](#sqlalchemy.ext.asyncio.AsyncSession.__init__),
    [aclose()](#sqlalchemy.ext.asyncio.AsyncSession.aclose), [add()](#sqlalchemy.ext.asyncio.AsyncSession.add),
    [add_all()](#sqlalchemy.ext.asyncio.AsyncSession.add_all), [autoflush](#sqlalchemy.ext.asyncio.AsyncSession.autoflush),
    [begin()](#sqlalchemy.ext.asyncio.AsyncSession.begin), [begin_nested()](#sqlalchemy.ext.asyncio.AsyncSession.begin_nested),
    [close()](#sqlalchemy.ext.asyncio.AsyncSession.close), [close_all()](#sqlalchemy.ext.asyncio.AsyncSession.close_all),
    [commit()](#sqlalchemy.ext.asyncio.AsyncSession.commit), [connection()](#sqlalchemy.ext.asyncio.AsyncSession.connection),
    [delete()](#sqlalchemy.ext.asyncio.AsyncSession.delete), [deleted](#sqlalchemy.ext.asyncio.AsyncSession.deleted),
    [dirty](#sqlalchemy.ext.asyncio.AsyncSession.dirty), [execute()](#sqlalchemy.ext.asyncio.AsyncSession.execute),
    [expire()](#sqlalchemy.ext.asyncio.AsyncSession.expire), [expire_all()](#sqlalchemy.ext.asyncio.AsyncSession.expire_all),
    [expunge()](#sqlalchemy.ext.asyncio.AsyncSession.expunge), [expunge_all()](#sqlalchemy.ext.asyncio.AsyncSession.expunge_all),
    [flush()](#sqlalchemy.ext.asyncio.AsyncSession.flush), [get()](#sqlalchemy.ext.asyncio.AsyncSession.get),
    [get_bind()](#sqlalchemy.ext.asyncio.AsyncSession.get_bind), [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_nested_transaction),
    [get_one()](#sqlalchemy.ext.asyncio.AsyncSession.get_one), [get_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_transaction),
    [identity_key()](#sqlalchemy.ext.asyncio.AsyncSession.identity_key), [identity_map](#sqlalchemy.ext.asyncio.AsyncSession.identity_map),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncSession.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncSession.invalidate), [is_active](#sqlalchemy.ext.asyncio.AsyncSession.is_active),
    [is_modified()](#sqlalchemy.ext.asyncio.AsyncSession.is_modified), [merge()](#sqlalchemy.ext.asyncio.AsyncSession.merge),
    [new](#sqlalchemy.ext.asyncio.AsyncSession.new), [no_autoflush](#sqlalchemy.ext.asyncio.AsyncSession.no_autoflush),
    [object_session()](#sqlalchemy.ext.asyncio.AsyncSession.object_session), [refresh()](#sqlalchemy.ext.asyncio.AsyncSession.refresh),
    [reset()](#sqlalchemy.ext.asyncio.AsyncSession.reset), [rollback()](#sqlalchemy.ext.asyncio.AsyncSession.rollback),
    [run_sync()](#sqlalchemy.ext.asyncio.AsyncSession.run_sync), [scalar()](#sqlalchemy.ext.asyncio.AsyncSession.scalar),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncSession.scalars), [stream()](#sqlalchemy.ext.asyncio.AsyncSession.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars), [sync_session](#sqlalchemy.ext.asyncio.AsyncSession.sync_session)'
- en: '**Class signature**'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`)
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")（`sqlalchemy.ext.asyncio.base.ReversibleProxy`）
- en: '[PRE211]'
  id: totrans-1059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: The class or callable that provides the underlying [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance for a particular [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")提供基础[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例的类或可调用对象。
- en: At the class level, this attribute is the default value for the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") parameter. Custom subclasses of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") can override this.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 在类级别，此属性是[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession")参数的默认值。[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")的自定义子类可以覆盖此值。
- en: At the instance level, this attribute indicates the current class or callable
    that was used to provide the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance for this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") instance.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例级别，此属性指示当前类或可调用对象，用于为此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")实例提供[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例。
- en: New in version 1.4.24.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.24 中的新功能。
- en: '[PRE212]'
  id: totrans-1064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: Construct a new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")。
- en: All parameters other than `sync_session_class` are passed to the `sync_session_class`
    callable directly to instantiate a new [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Refer to [`Session.__init__()`](../session_api.html#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__") for parameter documentation.
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`sync_session_class`之外的所有参数都直接传递给`sync_session_class`可调用对象，以实例化一个新的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。有关参数文档，请参阅[`Session.__init__()`](../session_api.html#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__")。
- en: 'Parameters:'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**sync_session_class** –'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '**sync_session_class** –'
- en: A [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    subclass or other callable which will be used to construct the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which will be proxied. This parameter may be used to
    provide custom [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    subclasses. Defaults to the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session_class") class-level attribute.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")子类或其他可调用对象，将用于构造将被代理的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。此参数可用于提供自定义的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")子类。默认为[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session_class")类级别属性。
- en: New in version 1.4.24.
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.24 中的新功能。
- en: '[PRE213]'
  id: totrans-1071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: A synonym for [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close").
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")的同义词。'
- en: The [`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")
    name is specifically to support the Python standard library `@contextlib.aclosing`
    context manager function.
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")名称专门用于支持
    Python 标准库中的`@contextlib.aclosing`上下文管理器函数。'
- en: New in version 2.0.20.
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.20 中的新功能。
- en: '[PRE214]'
  id: totrans-1075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: Place an object into this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象放入此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Objects that are in the [transient](../../glossary.html#term-transient) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [pending](../../glossary.html#term-pending)
    state, until the next flush, at which point they will move to the [persistent](../../glossary.html#term-persistent)
    state.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法的对象处于[瞬态](../../glossary.html#term-transient)状态时，它们将转移到[挂起](../../glossary.html#term-pending)状态，直到下一次刷新，此时它们将转移到[持久](../../glossary.html#term-persistent)状态。
- en: Objects that are in the [detached](../../glossary.html#term-detached) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [persistent](../../glossary.html#term-persistent)
    state directly.
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[分离](../../glossary.html#term-detached)状态的对象将直接转移到[持久](../../glossary.html#term-persistent)状态。
- en: If the transaction used by the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务被回滚，则当传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")方法时处于瞬态的对象将被移回[瞬态](../../glossary.html#term-transient)状态，并且将不再存在于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](../session_basics.html#session-adding) - 在[使用会话的基础知识](../session_basics.html#id1)'
- en: '[PRE215]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Add the given collection of instances to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的实例集合添加到此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: See the documentation for [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")的文档以获取一般行为描述。
- en: See also
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](../session_basics.html#session-adding) - 在[使用会话的基础知识](../session_basics.html#id1)'
- en: '[PRE216]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的`Session.autoflush`属性的代理。
- en: '[PRE217]'
  id: totrans-1093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object.
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象。
- en: 'The underlying [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will perform the “begin” action when the [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object is entered:'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象被输入时，底层的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将执行“开始”操作：
- en: '[PRE218]'
  id: totrans-1096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: Note that database IO will not normally occur when the session-level transaction
    is begun, as database transactions begin on an on-demand basis. However, the begin
    block is async to accommodate for a [`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event hook that may perform
    IO.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当会话级事务开始时，通常不会发生数据库IO，因为数据库事务是按需开始的。但是，开始块是异步的，以适应可能执行IO的[`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")事件钩子。
- en: For a general description of ORM begin, see [`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin").
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 有关ORM开始的一般描述，请参阅[`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")。
- en: '[PRE219]'
  id: totrans-1099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object which will begin a “nested”
    transaction, e.g. SAVEPOINT.
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将开始“嵌套”事务（例如SAVEPOINT）的[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象。
- en: Behavior is the same as that of [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin").
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与[`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin "sqlalchemy.ext.asyncio.AsyncSession.begin")相同。
- en: For a general description of ORM begin nested, see [`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested").
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 有关ORM开始嵌套的一般描述，请参阅[`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。
- en: See also
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../../dialects/sqlite.html#aiosqlite-serializable)
    - special workarounds required with the SQLite asyncio driver in order for SAVEPOINT
    to work correctly.'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: '[可序列化隔离/保存点/事务DDL（asyncio版本）](../../dialects/sqlite.html#aiosqlite-serializable)
    - 在SQLite asyncio��动程序中为SAVEPOINT正常工作所需的特殊解决方法。'
- en: '[PRE220]'
  id: totrans-1105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Close out the transactional resources and ORM objects used by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")使用的事务资源和ORM对象。
- en: See also
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - main documentation for “close”'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - “close”主要文档'
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](../session_basics.html#session-closing) - 关于[`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close")和[`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset
    "sqlalchemy.ext.asyncio.AsyncSession.reset")语义的详细信息。'
- en: '[PRE221]'
  id: totrans-1110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")会话。
- en: 'Deprecated since version 2.0: The [`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") method is deprecated and will
    be removed in a future release. Please refer to [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions").'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0起弃用：[`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all")方法已弃用，并将在将来的版本中删除。请参考[`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions")。
- en: '[PRE222]'
  id: totrans-1113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Commit the current transaction in progress.
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 提交当前进行中的事务。
- en: See also
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - main documentation for “commit”'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - “commit”主要文档'
- en: '[PRE223]'
  id: totrans-1117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Return a [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object corresponding to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个与此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的事务状态对应的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")对象。
- en: This method may also be used to establish execution options for the database
    connection used by the current transaction.
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法也可用于为当前事务使用的数据库连接建立执行选项。
- en: 'New in version 1.4.24: Added **kw arguments which are passed through to the
    underlying [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") method.'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.24中添加了**kw参数，这些参数将传递给底层的[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")方法。
- en: See also
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - main documentation for “connection”'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - “连接”的主要文档'
- en: '[PRE224]'
  id: totrans-1123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Mark an instance as deleted.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为已删除。
- en: The database delete operation occurs upon `flush()`.
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库删除操作发生在`flush()`时。
- en: As this operation may need to cascade along unloaded relationships, it is awaitable
    to allow for those queries to take place.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此操作可能需要沿着未加载的关系进行级联，因此需要等待以便进行这些查询。
- en: See also
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - main documentation for delete'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - 删除的主要文档'
- en: '[PRE225]'
  id: totrans-1129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: The set of all instances marked as ‘deleted’ within this `Session`
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Session`中所有标记为“已删除”的实例的集合
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: '[PRE226]'
  id: totrans-1132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: The set of all persistent instances considered dirty.
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 被视为所有持久实例的脏集合。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: 'E.g.:'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE227]'
  id: totrans-1136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Instances are considered dirty when they were modified but not deleted.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例被修改但未删除时，会被视为脏。
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此“脏”计算是“乐观”的；大多数属性设置或集合修改操作都会将实例标记为“脏”，并将其放入此集合中，即使属性的值没有净变化。在flush时，将每个属性的值与其先前保存的值进行比较，如果没有净变化，则不会发生SQL操作（这是一项更昂贵的操作，因此只在flush时执行）。
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实例的属性是否具有可行的净变化，请使用[`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")方法。
- en: '[PRE228]'
  id: totrans-1140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Execute a statement and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回一个缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。
- en: See also
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - main documentation for execute'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - 执行的主要文档'
- en: '[PRE229]'
  id: totrans-1144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Expire the attributes on an instance.
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 使实例上的属性过期。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例的属性标记为过时。下次访问过期属性时，将使用[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的相同值，而不考虑该事务之外数据库状态的更改。
- en: To expire all objects in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use `Session.expire_all()`.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时使[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的所有对象过期，请使用`Session.expire_all()`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire()` only makes sense
    for the specific case that a non-ORM SQL statement was emitted in the current
    transaction.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`Session.rollback()`或`Session.commit()`方法时，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的默认行为是使所有状态过期，以便为新事务加载新状态。因此，仅在当前事务中发出非ORM SQL语句的特定情况下调用`Session.expire()`才有意义。
- en: 'Parameters:'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – The instance to be refreshed.'
  id: totrans-1151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 需要刷新的实例。'
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选的字符串属性名称列表，指示要过期的属性子集。'
- en: See also
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](../session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE230]'
  id: totrans-1158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Expires all persistent instances within this Session.
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 使此会话中的所有持久实例过期。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 当持久化实例上的任何属性下次被访问时，将使用[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的相同值，而不考虑该事务之外数据库状态的更改。
- en: To expire individual objects and individual attributes on those objects, use
    `Session.expire()`.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 要使单个对象和这些对象上的单个属性过期，请使用`Session.expire()`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire_all()` is not usually
    needed, assuming the transaction is isolated.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`Session.rollback()`或`Session.commit()`方法时，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的默认行为是使所有状态过期，以便为新事务加载新状态。因此，通常不需要调用`Session.expire_all()`，假设事务是隔离的。
- en: See also
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](../session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE231]'
  id: totrans-1169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Remove the instance from this `Session`.
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中删除实例。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放对实例的所有内部引用。级联将根据*expunge*级联规则应用。
- en: '[PRE232]'
  id: totrans-1173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Remove all object instances from this `Session`.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中删除所有对象实例。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 这等效于在此`Session`中的所有对象上调用`expunge(obj)`。
- en: '[PRE233]'
  id: totrans-1177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Flush all the object changes to the database.
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有对象更改刷新到数据库。
- en: See also
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - main documentation for flush'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - 刷新的主要文档'
- en: '[PRE234]'
  id: totrans-1181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果找不到则返回`None`。
- en: See also
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - main documentation for get'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - get 的主要文档'
- en: '[PRE235]'
  id: totrans-1185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Return a “bind” to which the synchronous proxied [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个“绑定”，用于同步代理的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")绑定。
- en: Unlike the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, this method is currently **not** used
    by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    in any way in order to resolve engines for requests.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法不同，此方法目前**未**以任何方式被此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")使用，以便为请求解析引擎。
- en: Note
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method proxies directly to the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, however is currently **not** useful
    as an override target, in contrast to that of the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method. The example below illustrates how to
    implement custom [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes that work with [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法直接代理到[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法，但目前**不**像[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法那样作为一个重写目标有用。下面的示例说明了如何实现与[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")和[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")配合使用的自定义[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方案。
- en: 'The pattern introduced at [Custom Vertical Partitioning](../persistence_techniques.html#session-custom-partitioning)
    illustrates how to apply a custom bind-lookup scheme to a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") given a set of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. To apply a corresponding [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") implementation for use with a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") objects, continue to subclass [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and apply it to [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") using [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession"). The inner method must continue to return
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, which can be acquired from a [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") using the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute:'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [自定义垂直分区](../persistence_techniques.html#session-custom-partitioning) 中引入的模式说明了如何对给定一组
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象的 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    应用自定义绑定查找方案。要应用相应的 [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") 实现以与 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 和 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") 对象一起使用，继续对 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 进行子类化，并使用 [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") 将其应用到 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")。内部方法必须继续返回 [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 实例，可以使用 [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") 的 [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") 属性从中获取：
- en: '[PRE236]'
  id: totrans-1191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: The [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method is called in a non-asyncio, implicitly
    non-blocking context in the same manner as ORM event hooks and functions that
    are invoked via [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync"), so routines that wish to run
    SQL commands inside of [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") can continue to do so using blocking-style
    code, which will be translated to implicitly async calls at the point of invoking
    IO on the database drivers.
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个非异步、隐式非阻塞上下文中调用 [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") 方法，方式与通过 [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") 调用的 ORM 事件钩子和函数相同，因此希望在 [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") 中运行 SQL 命令的例程可以继续使用阻塞式代码，这将在调用数据库驱动程序的 IO 时被转换为隐式异步调用。
- en: '[PRE237]'
  id: totrans-1193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Return the current nested transaction in progress, if any.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的嵌套事务，如果有的话。
- en: 'Returns:'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object, or `None`.
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") 对象，或 `None`。
- en: New in version 1.4.18.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 新增于版本 1.4.18。
- en: '[PRE238]'
  id: totrans-1198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Return an instance based on the given primary key identifier, or raise an exception
    if not found.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果找不到则引发异常。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发 `sqlalchemy.orm.exc.NoResultFound` 异常。
- en: '..versionadded: 2.0.22'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: '..versionadded: 2.0.22'
- en: See also
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - main documentation for get_one'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - get_one 的主要文档'
- en: '[PRE239]'
  id: totrans-1204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Return the current root transaction in progress, if any.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的根事务，如果有的话。
- en: 'Returns:'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object, or `None`.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") 对象，或 `None`。
- en: New in version 1.4.18.
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.18版本中的新功能。
- en: '[PRE240]'
  id: totrans-1209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Return an identity key.
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 返回标识键。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类上代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: This is an alias of [`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE241]'
  id: totrans-1213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Proxy for the [`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")属性。
- en: '[PRE242]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Return True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a nested transaction, e.g. SAVEPOINT.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")已开始嵌套事务（例如，SAVEPOINT），则返回True。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类上代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: New in version 1.4.
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中的新功能。
- en: '[PRE243]'
  id: totrans-1219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: Return True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a transaction.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")已开始事务，则返回True。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类上代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: New in version 1.4.
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中的新功能。
- en: See also
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")的代理。'
- en: '[PRE244]'
  id: totrans-1225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: A user-modifiable dictionary.
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 可以由用户修改的字典。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类上代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") constructor or factory methods. The dictionary
    here is always local to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典的初始值可以使用`info`参数来填充[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")构造函数或[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")构造函数或工厂方法。此处的字典始终局限于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，并且可以独立于所有其他[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象进行修改。
- en: '[PRE245]'
  id: totrans-1229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Close this Session, using connection invalidation.
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用连接失效关闭此会话。
- en: For a complete description, see [`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate").
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整描述，请参阅[`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")。
- en: '[PRE246]'
  id: totrans-1232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不处于“部分回滚”状态，则为True。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类上代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: 'Changed in version 1.4: The [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不再立即开始新的事务，因此在首次实例化[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，此属性将为False。
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: “部分回滚”状态通常表示[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的flush过程失败，并且必须发出[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法以完全回滚事务。
- en: If this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")根本不处于事务中，则在首次使用时将自动开始，因此在这种情况下[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")将返回True。
- en: Otherwise, if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will also return True.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")位于事务中，并且该事务尚未在内部回滚，则[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")也将返回True。
- en: See also
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../../faq/sessions.html#faq-session-rollback)'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: '[“由于在flush期间发生先前异常，此会话的事务已回滚。”（或类似）](../../faq/sessions.html#faq-session-rollback)'
- en: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
- en: '[PRE247]'
  id: totrans-1242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: Return `True` if the given instance has locally modified attributes.
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定实例具有本地修改的属性，则返回`True`。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检索实例上每个被检测属性的历史记录，并将当前值与其先前提交的值进行比较（如果有）。
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是检查给定实例是否在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")集合中更昂贵和准确的版本；执行每个属性的净“脏”状态的全面测试。
- en: 'E.g.:'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE248]'
  id: totrans-1248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'A few caveats to this method apply:'
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有一些注意事项：
- en: Instances present in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  id: totrans-1250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")集合中的实例在使用此方法进行测试时可能报告`False`。这是因为对象可能已通过属性变化接收到更改事件，从而将其放置在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")中，但最终状态与从数据库加载的状态相同，在此处没有净变化。
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  id: totrans-1251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新值被应用时，标量属性可能没有记录先前设置的值，如果在接收到新值时未加载或过期，则在这些情况下，假设属性具有更改，即使最终对其数据库值没有净更改也是如此。在大多数情况下，当发生设置事件时，SQLAlchemy不需要“旧”值，因此如果旧值不存在，则跳过SQL调用的开销，这基于假设标量值的UPDATE通常是必需的，并且在极少数情况下，当它不是时，平均成本比发出防御性SELECT更低。
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅当属性容器的`active_history`标志设置为`True`时，才无条件地获取“旧”值。此标志通常设置为主键属性和不是简单多对一的标量对象引用。要为任意映射列设置此标志，请使用[`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的`active_history`参数。
- en: 'Parameters:'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – mapped instance to be tested for pending changes.'
  id: totrans-1254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要测试是否存在待处理更改的映射实例。'
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_collections` – 指示是否应该在操作中包含多值集合。将其设置为`False`是一种检测仅基于本地列的属性（即标量列或多对一外键），这些属性会导致此实例在flush时进行更新的方法。'
- en: '[PRE249]'
  id: totrans-1256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: Copy the state of a given instance into a corresponding instance within this
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定实例的状态复制到此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")中的相应实例。
- en: See also
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - main documentation for merge'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - merge的主要文档'
- en: '[PRE250]'
  id: totrans-1260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: The set of all instances marked as ‘new’ within this `Session`.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为“new”的所有实例的集合。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: '[PRE251]'
  id: totrans-1263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Return a context manager that disables autoflush.
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个上下文管理器，用于禁用自动flush。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: 'e.g.:'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE252]'
  id: totrans-1267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: 在`with:`块中进行的操作将不受查询访问时发生的flush的影响。这在初始化一系列涉及现有数据库查询的对象时很有用，其中未完成的对象不应立即被flush。
- en: '[PRE253]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Return the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象所属的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: This is an alias of [`object_session()`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`object_session()`](../session_api.html#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")
    的别名。
- en: '[PRE254]'
  id: totrans-1273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Expire and refresh the attributes on the given instance.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 使给定实例的属性过期并刷新。
- en: A query will be issued to the database and all attributes will be refreshed
    with their current database value.
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 将向数据库发出查询，并刷新所有属性为其当前数据库值。
- en: This is the async version of the [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. See that method for a complete description
    of all options.
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法的异步版本。有关所有选项的完整描述，请参阅该方法。
- en: See also
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - main documentation for refresh'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - refresh 的主要文档'
- en: '[PRE255]'
  id: totrans-1279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭事务资源和此 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    使用的 ORM 对象，将会重置会话到初始状态。
- en: New in version 2.0.22.
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.22 中新增。
- en: See also
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - main documentation for “reset”'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - “reset” 的主要文档'
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](../session_basics.html#session-closing) - 关于 [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") 和 [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset
    "sqlalchemy.ext.asyncio.AsyncSession.reset") 语义的详细信息。'
- en: '[PRE256]'
  id: totrans-1285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: Rollback the current transaction in progress.
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前进行中的事务。
- en: See also
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - main documentation for “rollback”'
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - “rollback” 的主要文档'
- en: '[PRE257]'
  id: totrans-1289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Invoke the given synchronous (i.e. not async) callable, passing a synchronous-style
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as the first argument.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 调用给定的同步（即非异步）可调用对象，并将同步式 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 作为第一个参数传递。
- en: This method allows traditional synchronous SQLAlchemy functions to run within
    the context of an asyncio application.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法允许在 asyncio 应用程序的上下文中运行传统的同步 SQLAlchemy 函数。
- en: 'E.g.:'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE258]'
  id: totrans-1293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: This method maintains the asyncio event loop all the way through to the database
    connection by running the given callable in a specially instrumented greenlet.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法通过在特别检测的绿色线程中运行给定的可调用对象，从而一直维持 asyncio 事件循环与数据库连接。
- en: Tip
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The provided callable is invoked inline within the asyncio event loop, and will
    block on traditional IO calls. IO within this callable should only call into SQLAlchemy’s
    asyncio database APIs which will be properly adapted to the greenlet context.
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 在 asyncio 事件循环中内联调用提供的可调用对象，并将在传统 IO 调用上阻塞。此可调用对象内的 IO 应仅调用 SQLAlchemy 的 asyncio
    数据库 API，这些 API 将正确适应绿色线程上下文。
- en: See also
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    - a mixin for ORM mapped classes that provides a similar feature more succinctly
    on a per-attribute basis'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    - 为 ORM 映射类提供类似功能的混入，以便每个属性更简洁地提供类似功能'
- en: '[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")'
- en: '[Running Synchronous Methods and Functions under asyncio](#session-run-sync)'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 asyncio 下运行同步方法和函数](#session-run-sync)'
- en: '[PRE259]'
  id: totrans-1301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: Execute a statement and return a scalar result.
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: See also
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - main documentation for scalar'
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - scalar 的主要文档'
- en: '[PRE260]'
  id: totrans-1305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Execute a statement and return scalar results.
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: 'Returns:'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")对象
- en: 'New in version 1.4.24: Added [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")'
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.24中新增了[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")
- en: 'New in version 1.4.26: Added [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")'
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.26中新增了[`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")
- en: See also
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - 标量的主要文档'
- en: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - streaming version'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - 流式版本'
- en: '[PRE261]'
  id: totrans-1314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Execute a statement and return a streaming [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回流式[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")对象。
- en: '[PRE262]'
  id: totrans-1316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Execute a statement and return a stream of scalar results.
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果流。
- en: 'Returns:'
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")对象
- en: New in version 1.4.24.
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.24中新增。
- en: See also
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - 标量的主要文档'
- en: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - non streaming version'
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - 非流式版本'
- en: '[PRE263]'
  id: totrans-1324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Reference to the underlying [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") proxies requests towards.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 引用底层的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")代理请求。
- en: This instance can be used as an event target.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例可用作事件目标。
- en: See also
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using events with the asyncio extension](#asyncio-events)'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 asyncio 扩展的事件](#asyncio-events)'
- en: '[PRE264]'
  id: totrans-1329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: A wrapper for the ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object.
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 用于ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") 对象的包装器。
- en: This object is provided so that a transaction-holding object for the [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") may be returned.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象提供了一个用于返回[`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin")的事务持有对象。
- en: The object supports both explicit calls to [`AsyncSessionTransaction.commit()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit") and [`AsyncSessionTransaction.rollback()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback"), as well as use as
    an async context manager.
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象支持对[`AsyncSessionTransaction.commit()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit")和[`AsyncSessionTransaction.rollback()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback")的显式调用，以及作为异步上下文管理器的使用。
- en: New in version 1.4.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中新增。
- en: '**Members**'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[commit()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit), [rollback()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback)'
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: '[commit()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit), [rollback()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback)'
- en: '**Class signature**'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
- en: '[PRE265]'
  id: totrans-1338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Commit this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 提交这个[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: '[PRE266]'
  id: totrans-1340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: Roll back this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚这个[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: '## Asyncio Platform Installation Notes (Including Apple M1)'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: '## Asyncio 平台安装说明（包括 Apple M1）'
- en: 'The asyncio extension requires Python 3 only. It also depends upon the [greenlet](https://pypi.org/project/greenlet/)
    library. This dependency is installed by default on common machine platforms including:'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: asyncio 扩展仅支持 Python 3。它还依赖于[greenlet](https://pypi.org/project/greenlet/)库。这个依赖默认安装在常见的机器平���上，包括：
- en: '[PRE267]'
  id: totrans-1344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: For the above platforms, `greenlet` is known to supply pre-built wheel files.
    For other platforms, **greenlet does not install by default**; the current file
    listing for greenlet can be seen at [Greenlet - Download Files](https://pypi.org/project/greenlet/#files).
    Note that **there are many architectures omitted, including Apple M1**.
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述平台，已知`greenlet`提供预构建的 wheel 文件。对于其他平台，**默认情况下不安装 greenlet**；可以在[Greenlet
    - Download Files](https://pypi.org/project/greenlet/#files)查看当前的 greenlet 文件列表。请注意**有许多架构被省略，包括
    Apple M1**。
- en: 'To install SQLAlchemy while ensuring the `greenlet` dependency is present regardless
    of what platform is in use, the `[asyncio]` [setuptools extra](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-setuptools-extras)
    may be installed as follows, which will include also instruct `pip` to install
    `greenlet`:'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: '要安装 SQLAlchemy 并确保 `greenlet` 依赖存在，无论使用何种平台，可以按照以下方式安装 `[asyncio]` [setuptools
    extra](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-setuptools-extras)，这也会指示
    `pip` 安装 `greenlet`:'
- en: '[PRE268]'
  id: totrans-1347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Note that installation of `greenlet` on platforms that do not have a pre-built
    wheel file means that `greenlet` will be built from source, which requires that
    Python’s development libraries also be present.
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在没有预构建 wheel 文件的平台上安装 `greenlet` 意味着 `greenlet` 将从源代码构建，这要求 Python 的开发库也存在。
- en: Synopsis - Core
  id: totrans-1349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要 - 核心
- en: 'For Core use, the [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function creates an instance of
    [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    which then offers an async version of the traditional [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") API. The [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") delivers an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") via its [`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect") and [`AsyncEngine.begin()`](#sqlalchemy.ext.asyncio.AsyncEngine.begin
    "sqlalchemy.ext.asyncio.AsyncEngine.begin") methods which both deliver asynchronous
    context managers. The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") can then invoke statements using either
    the [`AsyncConnection.execute()`](#sqlalchemy.ext.asyncio.AsyncConnection.execute
    "sqlalchemy.ext.asyncio.AsyncConnection.execute") method to deliver a buffered
    [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result"),
    or the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method to deliver a streaming
    server-side [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult"):'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '对于核心用途，[`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 函数创建一个[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")实例，然后提供传统[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") API的异步版本。[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")通过其[`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect")和[`AsyncEngine.begin()`](#sqlalchemy.ext.asyncio.AsyncEngine.begin
    "sqlalchemy.ext.asyncio.AsyncEngine.begin")方法提供一个[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")，两者都提供异步上下文管理器。[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")然后可以使用[`AsyncConnection.execute()`](#sqlalchemy.ext.asyncio.AsyncConnection.execute
    "sqlalchemy.ext.asyncio.AsyncConnection.execute")方法来执行语句，以提供一个缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")，或者使用[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")方法来提供一个流式的服务器端[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult"):'
- en: '[PRE269]'
  id: totrans-1351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Above, the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method may be used to invoke
    special DDL functions such as [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") that don’t include an awaitable hook.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 上文提到的[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")方法可用于调用特殊的DDL函数，例如[`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")，这些函数不包括可等待的挂钩。
- en: Tip
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'It’s advisable to invoke the [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") method using `await` when using
    the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    object in a scope that will go out of context and be garbage collected, as illustrated
    in the `async_main` function in the above example. This ensures that any connections
    held open by the connection pool will be properly disposed within an awaitable
    context. Unlike when using blocking IO, SQLAlchemy cannot properly dispose of
    these connections within methods like `__del__` or weakref finalizers as there
    is no opportunity to invoke `await`. Failing to explicitly dispose of the engine
    when it falls out of scope may result in warnings emitted to standard out resembling
    the form `RuntimeError: Event loop is closed` within garbage collection.'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: '在使用[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")对象的范围超出上下文并被垃圾收集时，建议使用`await`调用[`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose")方法，如上例中的`async_main`函数所示。这确保了连接池保持的任何连接都将在可等待的上下文中正确处理。与使用阻塞IO不同，SQLAlchemy无法在像`__del__`或weakref
    finalizer之类的方法中正确处理这些连接，因为没有机会调用`await`。当引擎超出范围时未显式处理时，可能会导致发出到标准输出的警告，形式类似于垃圾收集中的`RuntimeError:
    Event loop is closed`。'
- en: 'The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    also features a “streaming” API via the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method that returns an [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object. This result object uses a server-side
    cursor and provides an async/await API, such as an async iterator:'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")还通过[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")方法提供了一个“流式”API，返回一个[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象。此结果对象使用服务器端游标并提供异步/等待API，例如异步迭代器：'
- en: '[PRE270]'
  id: totrans-1356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '## Synopsis - ORM'
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: '## 概述 - ORM'
- en: Using [2.0 style](../../glossary.html#term-2.0-style) querying, the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class provides full ORM functionality.
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[2.0风格](../../glossary.html#term-2.0-style)查询，[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类提供完整的ORM功能。
- en: Within the default mode of use, special care must be taken to avoid [lazy loading](../../glossary.html#term-lazy-loading)
    or other expired-attribute access involving ORM relationships and column attributes;
    the next section [Preventing Implicit IO when Using AsyncSession](#asyncio-orm-avoid-lazyloads)
    details this.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认使用模式下，必须特别小心避免涉及ORM关系和列属性的[延迟加载](../../glossary.html#term-lazy-loading)或其他已过期属性访问；下一节[在使用AsyncSession时防止隐式IO](#asyncio-orm-avoid-lazyloads)详细说明了这一点。
- en: Warning
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: A single instance of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is **not safe for use in multiple, concurrent tasks**. See the sections [Using
    AsyncSession with Concurrent Tasks](#asyncio-concurrency) and [Is the Session
    thread-safe? Is AsyncSession safe to share in concurrent tasks?](../session_basics.html#session-faq-threadsafe)
    for background.
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 单个[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")实例**不适合在多个并发任务中使用**。有关背景信息，请参阅[使用AsyncSession处理并发任务](#asyncio-concurrency)和[会话线程安全吗？AsyncSession在并发任务中是否安全共享？](../session_basics.html#session-faq-threadsafe)部分。
- en: 'The example below illustrates a complete example including mapper and session
    configuration:'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了包括映射器和会话配置在内的完整示例：
- en: '[PRE271]'
  id: totrans-1363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: In the example above, the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is instantiated using the optional [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") helper, which provides a factory
    for new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects with a fixed set of parameters, which here includes associating it with
    an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    against particular database URL. It is then passed to other methods where it may
    be used in a Python asynchronous context manager (i.e. `async with:` statement)
    so that it is automatically closed at the end of the block; this is equivalent
    to calling the [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") method.
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，使用可选的 [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") 助手来实例化 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，该助手提供了一个新 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象的工厂，并带有一组固定的参数，其中包括将其与特定数据库 URL 关联起来的
    [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")。然后将其传递给其他方法，在这些方法中，它可能会在
    Python 异步上下文管理器中使用（即 `async with:` 语句），以便在块结束时自动关闭；这相当于调用 [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") 方法。
- en: '### Using AsyncSession with Concurrent Tasks'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 AsyncSession 处理并发任务'
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object is a **mutable, stateful object** which represents a **single, stateful
    database transaction in progress**. Using concurrent tasks with asyncio, with
    APIs such as `asyncio.gather()` for example, should use a **separate** [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") **per individual task**.
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    对象是一个**可变的、有状态的对象**，表示正在进行的**单个、有状态的数据库事务**。使用 asyncio 的并发任务，例如使用 `asyncio.gather()`
    等 API，应该为每个单独的任务使用**单独的** [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")。'
- en: 'See the section [Is the Session thread-safe? Is AsyncSession safe to share
    in concurrent tasks?](../session_basics.html#session-faq-threadsafe) for a general
    description of the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with regards to how they should be used with concurrent workloads.  ### Preventing
    Implicit IO when Using AsyncSession'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在并发工作负载中如何使用 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    和 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    的一般描述，请参阅 [Session 线程安全吗？AsyncSession 在并发任务中共享是否安全？](../session_basics.html#session-faq-threadsafe)
    部分。### 使用 AsyncSession 时防止隐式 IO
- en: Using traditional asyncio, the application needs to avoid any points at which
    IO-on-attribute access may occur. Techniques that can be used to help this are
    below, many of which are illustrated in the preceding example.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统的 asyncio，应用程序需要避免出现任何可能发生 IO-on-attribute 访问的点。可以用以下技术来帮助解决这个问题，其中许多技术在前面的示例中有所体现。
- en: 'Attributes that are lazy-loading relationships, deferred columns or expressions,
    or are being accessed in expiration scenarios can take advantage of the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin. This mixin, when added to a specific
    class or more generally to the Declarative `Base` superclass, provides an accessor
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") which delivers any attribute
    as an awaitable:'
  id: totrans-1369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 惰性加载关系、延迟列或表达式的属性，或者在过期情况下访问的属性，可以利用 [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") 混合类。当将此混合类添加到特定类或更一般地添加到声明性的 `Base` 超类时，它提供了一个访问器
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs")，它将任何属性作为可等待对象传递：
- en: '[PRE272]'
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: 'Accessing the `A.bs` collection on newly loaded instances of `A` when eager
    loading is not in use will normally use [lazy loading](../../glossary.html#term-lazy-loading),
    which in order to succeed will usually emit IO to the database, which will fail
    under asyncio as no implicit IO is allowed. To access this attribute directly
    under asyncio without any prior loading operations, the attribute can be accessed
    as an awaitable by indicating the [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") prefix:'
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在不使用急切加载时，访问新加载的`A`实例上的`A.bs`集合通常会使用[延迟加载](../../glossary.html#term-lazy-loading)，为了成功，通常会向数据库发出IO，这在asyncio下会失败，因为不允许隐式IO。在没有任何先前加载操作的情况下，在asyncio下直接访问此属性，该属性可以作为可等待对象访问，通过指定[`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs")前缀：
- en: '[PRE273]'
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: The [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin provides a succinct facade over the internal approach that’s also used by
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method.
  id: totrans-1373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin提供了一个简洁的外观，覆盖了内部方法，该方法也被[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")方法使用。'
- en: New in version 2.0.13.
  id: totrans-1374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本2.0.13中的新功能。
- en: See also
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
  id: totrans-1376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
- en: Collections can be replaced with **write only collections** that will never
    emit IO implicitly, by using the [Write Only Relationships](../large_collections.html#write-only-relationship)
    feature in SQLAlchemy 2.0\. Using this feature, collections are never read from,
    only queried using explicit SQL calls. See the example `async_orm_writeonly.py`
    in the [Asyncio Integration](../examples.html#examples-asyncio) section for an
    example of write-only collections used with asyncio.
  id: totrans-1377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合可以被替换为**只写集合**，这些集合永远不会隐式发出IO，通过在SQLAlchemy 2.0中使用[Write Only Relationships](../large_collections.html#write-only-relationship)功能。使用此功能，集合永远不会被读取，只能通过显式SQL调用进行查询。查看[Asyncio
    Integration](../examples.html#examples-asyncio)部分中的示例`async_orm_writeonly.py`，展示了如何在asyncio中使用只写集合。
- en: When using write only collections, the program’s behavior is simple and easy
    to predict regarding collections. However, the downside is that there is not any
    built-in system for loading many of these collections all at once, which instead
    would need to be performed manually. Therefore, many of the bullets below address
    specific techniques when using traditional lazy-loaded relationships with asyncio,
    which requires more care.
  id: totrans-1378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用只写集合时，程序的行为在处理集合方面是简单且易于预测的。然而，缺点是没有任何内置系统可以一次性加载这些集合中的许多，而需要手动执行。因此，下面的许多要点涉及在使用传统的延迟加载关系与asyncio时需要更加小心的具体技术。
- en: If not using [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs"),
    relationships can be declared with `lazy="raise"` so that by default they will
    not attempt to emit SQL. In order to load collections, [eager loading](../../glossary.html#term-eager-loading)
    would be used instead.
  id: totrans-1379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不使用[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")，关系可以声明为`lazy="raise"`，这样默认情况下它们不会尝试发出SQL。为了加载集合，将使用[eager
    loading](../../glossary.html#term-eager-loading)。
- en: 'The most useful eager loading strategy is the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader, which is employed in the previous
    example in order to eagerly load the `A.bs` collection within the scope of the
    `await session.execute()` call:'
  id: totrans-1380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最有用的急切加载策略是[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")急切加载器，在前面的示例中被用来在`await session.execute()`调用的范围内急切加载`A.bs`集合：
- en: '[PRE274]'
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'When constructing new objects, **collections are always assigned a default,
    empty collection**, such as a list in the above example:'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当构建新对象时，**集合总是被分配一个默认的空集合**，比如上面的示例中的列表：
- en: '[PRE275]'
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: This allows the `.bs` collection on the above `A` object to be present and readable
    when the `A` object is flushed; otherwise, when the `A` is flushed, `.bs` would
    be unloaded and would raise an error on access.
  id: totrans-1384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使得在刷新`A`对象时，上述`A`对象上的`.bs`集合可以存在且可读；否则，当刷新`A`时，`.bs`将会被卸载，并在访问时引发错误。
- en: 'The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is configured using [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") set to False, so that we may access attributes on an
    object subsequent to a call to [`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit"), as in the line at the end where
    we access an attribute:'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")配置为使用[`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")设置为False，以便我们可以在调用[`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit")后访问对象上的属性，就像在最后一行访问属性的地方一样：'
- en: '[PRE276]'
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: 'Other guidelines include:'
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 其他指南包括：
- en: Methods like [`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire
    "sqlalchemy.ext.asyncio.AsyncSession.expire") should be avoided in favor of [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh"); **if** expiration is absolutely
    needed. Expiration should generally **not** be needed as [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") should normally be set to `False` when using asyncio.
  id: totrans-1388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该避免使用类似[`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire
    "sqlalchemy.ext.asyncio.AsyncSession.expire")的方法，而应该使用[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")；**如果**绝对需要过期。当使用asyncio时，通常不需要过期，因为[`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")应该通常设置为`False`。
- en: 'A lazy-loaded relationship **can be loaded explicitly under asyncio** using
    [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh "sqlalchemy.ext.asyncio.AsyncSession.refresh"),
    **if** the desired attribute name is passed explicitly to [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), e.g.:'
  id: totrans-1389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在asyncio下显式加载延迟加载的关系，使用[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")，**如果**所需的属性名称明确传递给[`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")，例如：
- en: '[PRE277]'
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: It’s of course preferable to use eager loading up front in order to have collections
    already set up without the need to lazy-load.
  id: totrans-1391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，最好在一开始就使用急加载，以便在不需要延迟加载的情况下已经设置好集合。
- en: 'New in version 2.0.4: Added support for [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") and the underlying [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method to force lazy-loaded relationships to
    load, if they are named explicitly in the [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") parameter. In previous versions, the relationship
    would be silently skipped even if named in the parameter.'
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本2.0.4中的新功能：增加了对[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")和底层[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法的支持，以强制加载延迟加载的关系，如果它们在[`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")参数中明确命名。在先前的版本中，即使在参数中命名，关系也会被静默跳过。
- en: Avoid using the `all` cascade option documented at [Cascades](../cascades.html#unitofwork-cascades)
    in favor of listing out the desired cascade features explicitly. The `all` cascade
    option implies among others the [refresh-expire](../cascades.html#cascade-refresh-expire)
    setting, which means that the [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") method will expire the attributes
    on related objects, but not necessarily refresh those related objects assuming
    eager loading is not configured within the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), leaving them in an expired state.
  id: totrans-1393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用[Cascades](../cascades.html#unitofwork-cascades)中记录的`all`级联选项，而是明确列出所需的级联特性。`all`级联选项暗示了[refresh-expire](../cascades.html#cascade-refresh-expire)设置，这意味着[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")方法将使相关对象的属性过期，但不一定刷新这些相关对象，假设未在[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中配置急加载，将它们保持在过期状态。
- en: Appropriate loader options should be employed for [`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") columns, if used at all, in addition to that of [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs as noted above. See [Limiting which
    Columns Load with Column Deferral](../queryguide/columns.html#orm-queryguide-column-deferral)
    for background on deferred column loading.
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在[`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred "sqlalchemy.orm.deferred")列中使用了适当的加载选项，应该使用适当的加载选项，此外还应该注意[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")结构。请参见[限制使用延迟列加载的列](../queryguide/columns.html#orm-queryguide-column-deferral)以获取关于延迟列加载的背景信息。
- en: 'The “dynamic” relationship loader strategy described at [Dynamic Relationship
    Loaders](../large_collections.html#dynamic-relationship) is not compatible by
    default with the asyncio approach. It can be used directly only if invoked within
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method described at [Running Synchronous
    Methods and Functions under asyncio](#session-run-sync), or by using its `.statement`
    attribute to obtain a normal select:'
  id: totrans-1395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[动态关系加载器](../large_collections.html#dynamic-relationship)一节描述的“动态”关系加载器策略在默认情况下与asyncio方法不兼容。它只能在[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")方法中直接调用，或者通过使用其`.statement`属性获取普通select：
- en: '[PRE278]'
  id: totrans-1396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: The [write only](../large_collections.html#write-only-relationship) technique,
    introduced in version 2.0 of SQLAlchemy, is fully compatible with asyncio and
    should be preferred.
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[只写](../large_collections.html#write-only-relationship)技术，在SQLAlchemy的2.0版本中引入，完全兼容asyncio，并应该优先使用。'
- en: See also
  id: totrans-1398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Dynamic” relationship loaders superseded by “Write Only”](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - notes on migration to 2.0 style'
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“动态”关系加载器被“只写”取代](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - 迁移到2.0风格的注意事项'
- en: 'If using asyncio with a database that does not support RETURNING, such as MySQL
    8, server default values such as generated timestamps will not be available on
    newly flushed objects unless the [`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") option is used. In SQLAlchemy 2.0, this behavior is applied
    automatically to backends like PostgreSQL, SQLite and MariaDB which use RETURNING
    to fetch new values when rows are INSERTed.  ### Running Synchronous Methods and
    Functions under asyncio'
  id: totrans-1400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在与不支持RETURNING的数据库（例如MySQL 8）一起使用asyncio，那么在刷新的新对象上将不会有服务器默认值，例如生成的时间戳，除非使用了[`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")选项。在SQLAlchemy 2.0中，这种行为自动应用于像PostgreSQL、SQLite和MariaDB这样使用RETURNING来在插入行时获取新值的后端。###
    在asyncio下运行同步方法和函数
- en: Deep Alchemy
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: This approach is essentially exposing publicly the mechanism by which SQLAlchemy
    is able to provide the asyncio interface in the first place. While there is no
    technical issue with doing so, overall the approach can probably be considered
    “controversial” as it works against some of the central philosophies of the asyncio
    programming model, which is essentially that any programming statement that can
    potentially result in IO being invoked **must** have an `await` call, lest the
    program does not make it explicitly clear every line at which IO may occur. This
    approach does not change that general idea, except that it allows a series of
    synchronous IO instructions to be exempted from this rule within the scope of
    a function call, essentially bundled up into a single awaitable.
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法本质上是公开了SQLAlchemy能够首先提供asyncio接口的机制。虽然在技术上没有任何问题，但总的来说，这种方法可能被认为是“有争议的”，因为它违背了asyncio编程模型的一些核心理念，即任何可能导致IO被调用的编程语句**必须**有一个`await`调用，以防程序不明确地指明每一行可能发生IO的位置。这种方法并没有改变这个一般的想法，只是允许一系列同步IO指令在函数调用的范围内豁免这个规则，基本上被捆绑成一个可等待的。
- en: As an alternative means of integrating traditional SQLAlchemy “lazy loading”
    within an asyncio event loop, an **optional** method known as [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") is provided which will run any
    Python function inside of a greenlet, where traditional synchronous programming
    concepts will be translated to use `await` when they reach the database driver.
    A hypothetical approach here is an asyncio-oriented application can package up
    database-related methods into functions that are invoked using [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync").
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 作为在 asyncio 事件循环中集成传统 SQLAlchemy “延迟加载” 的替代方法，提供了一个名为[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")的**可选**方法，它将运行任何 Python 函数在一个 greenlet
    中，传统的同步编程概念将被转换为在到达数据库驱动程序时使用`await`。这里的一个假设方法是一个面向 asyncio 的应用程序可以将与数据库相关的方法打包成函数，这些函数使用[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")调用。
- en: 'Altering the above example, if we didn’t use [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") for the `A.bs` collection, we could accomplish
    our treatment of these attribute accesses within a separate function:'
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 修改上面的示例，如果我们不使用[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")来加载`A.bs`集合，我们可以在一个单独的函数中完成对这些属性访问的处理：
- en: '[PRE279]'
  id: totrans-1405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'The above approach of running certain functions within a “sync” runner has
    some parallels to an application that runs a SQLAlchemy application on top of
    an event-based programming library such as `gevent`. The differences are as follows:'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个应用程序中运行某些函数在“同步”运行器中的上述方法与在一个基于事件的编程库（如`gevent`）上运行 SQLAlchemy 应用程序有一些相似之处。区别如下：
- en: unlike when using `gevent`, we can continue to use the standard Python asyncio
    event loop, or any custom event loop, without the need to integrate into the `gevent`
    event loop.
  id: totrans-1407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与使用`gevent`不同，我们可以继续使用标准的 Python asyncio 事件循环，或任何自定义事件循环，而无需集成到`gevent`事件循环中。
- en: There is no “monkeypatching” whatsoever. The above example makes use of a real
    asyncio driver and the underlying SQLAlchemy connection pool is also using the
    Python built-in `asyncio.Queue` for pooling connections.
  id: totrans-1408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全没有“monkeypatching”。上面的示例使用了一个真正的 asyncio 驱动程序，底层的 SQLAlchemy 连接池也使用 Python
    内置的`asyncio.Queue`来池化连接。
- en: The program can freely switch between async/await code and contained functions
    that use sync code with virtually no performance penalty. There is no “thread
    executor” or any additional waiters or synchronization in use.
  id: totrans-1409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序可以自由地在 async/await 代码和使用同步代码的包含函数之间切换，几乎没有性能损失。没有“线程执行器”或任何额外的等待器或同步在使用。
- en: 'The underlying network drivers are also using pure Python asyncio concepts,
    no third party networking libraries as `gevent` and `eventlet` provides are in
    use.  ### Using AsyncSession with Concurrent Tasks'
  id: totrans-1410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 底层网络驱动程序也使用纯 Python asyncio 概念，不使用`gevent`和`eventlet`提供的第三方网络库。### 与并发任务一起使用
    AsyncSession
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object is a **mutable, stateful object** which represents a **single, stateful
    database transaction in progress**. Using concurrent tasks with asyncio, with
    APIs such as `asyncio.gather()` for example, should use a **separate** [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") **per individual task**.
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")对象是一个**可变的、有状态的对象**，代表着**正在进行的单个、有状态的数据库事务**。使用
    asyncio 进行并发任务，例如使用`asyncio.gather()`等 API，应该为每个单独的任务使用一个**独立的**[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")。'
- en: See the section [Is the Session thread-safe? Is AsyncSession safe to share in
    concurrent tasks?](../session_basics.html#session-faq-threadsafe) for a general
    description of the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with regards to how they should be used with concurrent workloads.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[会话是否线程安全？AsyncSession 是否可以在并发任务中共享？](../session_basics.html#session-faq-threadsafe)部分，了解关于[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")和[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")在处理并发工作负载时应如何使用的一般描述。
- en: '### Preventing Implicit IO when Using AsyncSession'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 AsyncSession 时防止隐式 IO'
- en: Using traditional asyncio, the application needs to avoid any points at which
    IO-on-attribute access may occur. Techniques that can be used to help this are
    below, many of which are illustrated in the preceding example.
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统的asyncio，应用程序需要避免发生可能导致IO-on-attribute访问的任何点。下面列出的技术可以帮助实现这一点，其中许多在前面的示例中有所说明。
- en: 'Attributes that are lazy-loading relationships, deferred columns or expressions,
    or are being accessed in expiration scenarios can take advantage of the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin. This mixin, when added to a specific
    class or more generally to the Declarative `Base` superclass, provides an accessor
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") which delivers any attribute
    as an awaitable:'
  id: totrans-1415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟加载关系、延迟列或表达式，或在过期情况下访问的属性可以利用[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin。当将此mixin添加到特定类或更一般地添加到Declarative `Base`超类时，会提供一个访问器[`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs")，将任何属性作为可等待对象传递：
- en: '[PRE280]'
  id: totrans-1416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'Accessing the `A.bs` collection on newly loaded instances of `A` when eager
    loading is not in use will normally use [lazy loading](../../glossary.html#term-lazy-loading),
    which in order to succeed will usually emit IO to the database, which will fail
    under asyncio as no implicit IO is allowed. To access this attribute directly
    under asyncio without any prior loading operations, the attribute can be accessed
    as an awaitable by indicating the [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") prefix:'
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在不使用急加载时，访问新加载实例`A`上的`A.bs`集合通常会使用[延迟加载](../../glossary.html#term-lazy-loading)，为了成功，通常会向数据库发出IO请求，而在asyncio下会失败，因为不允许隐式IO。要在asyncio下直接访问此属性而不需要任何先前的加载操作，可以通过指定[`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs")前缀将属性访问为可等待对象：
- en: '[PRE281]'
  id: totrans-1418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: The [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin provides a succinct facade over the internal approach that’s also used by
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method.
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin提供了一个简洁的外观，也是[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")方法使用的内部方法。'
- en: New in version 2.0.13.
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本2.0.13中的新功能。
- en: See also
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
  id: totrans-1422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
- en: Collections can be replaced with **write only collections** that will never
    emit IO implicitly, by using the [Write Only Relationships](../large_collections.html#write-only-relationship)
    feature in SQLAlchemy 2.0\. Using this feature, collections are never read from,
    only queried using explicit SQL calls. See the example `async_orm_writeonly.py`
    in the [Asyncio Integration](../examples.html#examples-asyncio) section for an
    example of write-only collections used with asyncio.
  id: totrans-1423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合可以被**只写集合**替换，永远不会隐式发出IO，通过在SQLAlchemy 2.0中使用[只写关系](../large_collections.html#write-only-relationship)功能。使用此功能，集合永远不会被读取，只能使用显式SQL调用进行查询。请参见[Asyncio
    Integration](../examples.html#examples-asyncio)部分中的示例`async_orm_writeonly.py`，演示了在asyncio中使用只写集合的示例。
- en: When using write only collections, the program’s behavior is simple and easy
    to predict regarding collections. However, the downside is that there is not any
    built-in system for loading many of these collections all at once, which instead
    would need to be performed manually. Therefore, many of the bullets below address
    specific techniques when using traditional lazy-loaded relationships with asyncio,
    which requires more care.
  id: totrans-1424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用只写集合时，程序在处理集合方面的行为简单且易于预测。然而，缺点是没有任何内置系统可以一次性加载许多这些集合，而是需要手动执行。因此，下面的许多要点涉及在使用传统的延迟加载关系与asyncio时需要更加小心的具体技术。
- en: If not using [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs"),
    relationships can be declared with `lazy="raise"` so that by default they will
    not attempt to emit SQL. In order to load collections, [eager loading](../../glossary.html#term-eager-loading)
    would be used instead.
  id: totrans-1425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不使用[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")，可以使用`lazy="raise"`声明关系，这样默认情况下它们不会尝试发出SQL。为了加载集合，将使用[急加载](../../glossary.html#term-eager-loading)。
- en: 'The most useful eager loading strategy is the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader, which is employed in the previous
    example in order to eagerly load the `A.bs` collection within the scope of the
    `await session.execute()` call:'
  id: totrans-1426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最有用的急加载策略是[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")急加载器，在前面的示例中用于在`await session.execute()`调用范围内急加载`A.bs`集合：
- en: '[PRE282]'
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: 'When constructing new objects, **collections are always assigned a default,
    empty collection**, such as a list in the above example:'
  id: totrans-1428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建新对象时，**集合总是分配一个默认的空集合**，例如上面示例中的列表：
- en: '[PRE283]'
  id: totrans-1429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: This allows the `.bs` collection on the above `A` object to be present and readable
    when the `A` object is flushed; otherwise, when the `A` is flushed, `.bs` would
    be unloaded and would raise an error on access.
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`A`对象被刷新时，允许上述`A`对象上的`.bs`集合存在并可读；否则，当`A`被刷新时，`.bs`将被卸载并在访问时引发错误。
- en: 'The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is configured using [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") set to False, so that we may access attributes on an
    object subsequent to a call to [`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit"), as in the line at the end where
    we access an attribute:'
  id: totrans-1431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")配置为使用[`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")设置为False，这样我们可以在调用[`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit")后访问对象的属性，就像在最后一行访问属性时一样：'
- en: '[PRE284]'
  id: totrans-1432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'Other guidelines include:'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 其他指南包括：
- en: Methods like [`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire
    "sqlalchemy.ext.asyncio.AsyncSession.expire") should be avoided in favor of [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh"); **if** expiration is absolutely
    needed. Expiration should generally **not** be needed as [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") should normally be set to `False` when using asyncio.
  id: totrans-1434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像[`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire "sqlalchemy.ext.asyncio.AsyncSession.expire")这样的方法应该避免使用，而应该使用[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")；**如果**绝对需要过期。通常情况下不应该需要过期，因为在使用asyncio时通常应将[`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")设置为`False`。
- en: 'A lazy-loaded relationship **can be loaded explicitly under asyncio** using
    [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh "sqlalchemy.ext.asyncio.AsyncSession.refresh"),
    **if** the desired attribute name is passed explicitly to [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), e.g.:'
  id: totrans-1435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh "sqlalchemy.ext.asyncio.AsyncSession.refresh")可以显式加载懒加载关系**在asyncio下**，**如果**需要显式传递所需的属性名称给[`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")，例如：
- en: '[PRE285]'
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: It’s of course preferable to use eager loading up front in order to have collections
    already set up without the need to lazy-load.
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然最好一开始就使用急加载，以便在不需要懒加载的情况下已经设置好集合。
- en: 'New in version 2.0.4: Added support for [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") and the underlying [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method to force lazy-loaded relationships to
    load, if they are named explicitly in the [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") parameter. In previous versions, the relationship
    would be silently skipped even if named in the parameter.'
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0.4版本中新增：增加了对[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")和底层的[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法的支持，以强制延迟加载的关系加载，如果它们在[`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")参数中明确命名。在先前的版本中，即使在参数中命名，关系也会被静默跳过。
- en: Avoid using the `all` cascade option documented at [Cascades](../cascades.html#unitofwork-cascades)
    in favor of listing out the desired cascade features explicitly. The `all` cascade
    option implies among others the [refresh-expire](../cascades.html#cascade-refresh-expire)
    setting, which means that the [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") method will expire the attributes
    on related objects, but not necessarily refresh those related objects assuming
    eager loading is not configured within the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), leaving them in an expired state.
  id: totrans-1439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用[Cascades](../cascades.html#unitofwork-cascades)文档中记录的`all`级联选项，而是明确列出所需的级联特性。`all`级联选项暗示了[refresh-expire](../cascades.html#cascade-refresh-expire)设置，这意味着[`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh")方法将使相关对象的属性过期，但不一定会刷新那些相关对象，假设未在[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中配置急加载，它们将保持在过期状态。
- en: Appropriate loader options should be employed for [`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") columns, if used at all, in addition to that of [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs as noted above. See [Limiting which
    Columns Load with Column Deferral](../queryguide/columns.html#orm-queryguide-column-deferral)
    for background on deferred column loading.
  id: totrans-1440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用[`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred "sqlalchemy.orm.deferred")列，应该使用适当的加载器选项，除了如上所述的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造。有关延迟列加载的背景，请参阅[限制使用列延迟加载](../queryguide/columns.html#orm-queryguide-column-deferral)。
- en: 'The “dynamic” relationship loader strategy described at [Dynamic Relationship
    Loaders](../large_collections.html#dynamic-relationship) is not compatible by
    default with the asyncio approach. It can be used directly only if invoked within
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method described at [Running Synchronous
    Methods and Functions under asyncio](#session-run-sync), or by using its `.statement`
    attribute to obtain a normal select:'
  id: totrans-1441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在默认情况下，“动态”关系加载策略在[动态关系加载器](../large_collections.html#dynamic-relationship)中描述，与asyncio方法不兼容。只有在[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")方法中调用，或者通过使用其`.statement`属性获取正常的select语句，才能直接使用它：
- en: '[PRE286]'
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: The [write only](../large_collections.html#write-only-relationship) technique,
    introduced in version 2.0 of SQLAlchemy, is fully compatible with asyncio and
    should be preferred.
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[仅写入](../large_collections.html#write-only-relationship)技术，在SQLAlchemy的2.0版本中引入，与asyncio完全兼容，应该优先考虑使用。'
- en: See also
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“Dynamic” relationship loaders superseded by “Write Only”](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - notes on migration to 2.0 style'
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“动态”关系加载器被“仅写入”取代](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - 迁移到2.0风格的注意事项'
- en: If using asyncio with a database that does not support RETURNING, such as MySQL
    8, server default values such as generated timestamps will not be available on
    newly flushed objects unless the [`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") option is used. In SQLAlchemy 2.0, this behavior is applied
    automatically to backends like PostgreSQL, SQLite and MariaDB which use RETURNING
    to fetch new values when rows are INSERTed.
  id: totrans-1446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在使用 asyncio 与不支持 RETURNING 的数据库（例如 MySQL 8）时，服务器默认值（例如生成的时间戳）将不会在新刷新的对象上可用，除非使用了[`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") 选项。在 SQLAlchemy 2.0 中，这种行为会自动应用于像 PostgreSQL、SQLite 和
    MariaDB 这样使用 RETURNING 在插入行时获取新值的后端。
- en: '### Running Synchronous Methods and Functions under asyncio'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: '### 在 asyncio 下运行同步方法和函数'
- en: Deep Alchemy
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: 深度合成
- en: This approach is essentially exposing publicly the mechanism by which SQLAlchemy
    is able to provide the asyncio interface in the first place. While there is no
    technical issue with doing so, overall the approach can probably be considered
    “controversial” as it works against some of the central philosophies of the asyncio
    programming model, which is essentially that any programming statement that can
    potentially result in IO being invoked **must** have an `await` call, lest the
    program does not make it explicitly clear every line at which IO may occur. This
    approach does not change that general idea, except that it allows a series of
    synchronous IO instructions to be exempted from this rule within the scope of
    a function call, essentially bundled up into a single awaitable.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法实质上是公开了 SQLAlchemy 能够在第一时间提供 asyncio 接口的机制。虽然这样做没有技术问题，但总的来说，这种方法可能被认为是“有争议的”，因为它违背了
    asyncio 编程模型的一些核心理念，即任何可能导致 IO 调用的编程语句**必须**具有一个 `await` 调用，否则程序在 IO 可能发生的每一行都不会明确地表明。这种方法并没有改变这个一般性的想法，除了它允许一系列同步
    IO 指令在函数调用的范围内被豁免这个规则，本质上被捆绑成一个可等待的。
- en: As an alternative means of integrating traditional SQLAlchemy “lazy loading”
    within an asyncio event loop, an **optional** method known as [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") is provided which will run any
    Python function inside of a greenlet, where traditional synchronous programming
    concepts will be translated to use `await` when they reach the database driver.
    A hypothetical approach here is an asyncio-oriented application can package up
    database-related methods into functions that are invoked using [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync").
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 作为在 asyncio 事件循环中集成传统 SQLAlchemy “懒加载”的另一种替代方法，提供了一种称为[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") 的**可选**方法，该方法将在一个 greenlet 内运行任何
    Python 函数，其中当它们到达数据库驱动程序时，传统的同步编程概念将被转换为使用 `await`。这里的一个假设性方法是，一个以 asyncio 为导向的应用程序可以将数据库相关方法打包成函数，这些函数将使用[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") 被调用。
- en: 'Altering the above example, if we didn’t use [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") for the `A.bs` collection, we could accomplish
    our treatment of these attribute accesses within a separate function:'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 修改上面的示例，如果我们不使用[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 来处理 `A.bs` 集合，我们可以在一个单独的函数内完成对这些属性访问的处理：
- en: '[PRE287]'
  id: totrans-1452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: 'The above approach of running certain functions within a “sync” runner has
    some parallels to an application that runs a SQLAlchemy application on top of
    an event-based programming library such as `gevent`. The differences are as follows:'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 在“同步”运行器中运行某些函数的上述方法与在基于事件的编程库（例如 `gevent`）上运行 SQLAlchemy 应用程序有一些相似之处。区别如下：
- en: unlike when using `gevent`, we can continue to use the standard Python asyncio
    event loop, or any custom event loop, without the need to integrate into the `gevent`
    event loop.
  id: totrans-1454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与使用 `gevent` 不同，我们可以继续使用标准的 Python asyncio 事件循环，或者任何自定义的事件循环，而无需将其集成到 `gevent`
    事件循环中。
- en: There is no “monkeypatching” whatsoever. The above example makes use of a real
    asyncio driver and the underlying SQLAlchemy connection pool is also using the
    Python built-in `asyncio.Queue` for pooling connections.
  id: totrans-1455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全没有“猴子补丁”。上面的示例利用了一个真正的 asyncio 驱动程序，底层的 SQLAlchemy 连接池也使用了 Python 内置的 `asyncio.Queue`
    来池化连接。
- en: The program can freely switch between async/await code and contained functions
    that use sync code with virtually no performance penalty. There is no “thread
    executor” or any additional waiters or synchronization in use.
  id: totrans-1456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序可以自由在async/await代码和使用同步代码的包含函数之间切换，几乎没有性能损失。不使用“线程执行器”或任何额外的等待器或同步。
- en: The underlying network drivers are also using pure Python asyncio concepts,
    no third party networking libraries as `gevent` and `eventlet` provides are in
    use.
  id: totrans-1457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 底层网络驱动程序也使用纯Python asyncio概念，不使用`gevent`和`eventlet`等第三方网络库。
- en: '## Using events with the asyncio extension'
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用asyncio扩展与事件'
- en: The SQLAlchemy [event system](../../core/event.html) is not directly exposed
    by the asyncio extension, meaning there is not yet an “async” version of a SQLAlchemy
    event handler.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [事件系统](../../core/event.html)不会直接暴露给asyncio扩展，这意味着尚未有SQLAlchemy事件处理程序的“异步”版本。
- en: However, as the asyncio extension surrounds the usual synchronous SQLAlchemy
    API, regular “synchronous” style event handlers are freely available as they would
    be if asyncio were not used.
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于asyncio扩展包围了通常的同步SQLAlchemy API，因此常规的“同步”风格事件处理程序可以自由使用，就像没有使用asyncio一样。
- en: 'As detailed below, there are two current strategies to register events given
    asyncio-facing APIs:'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所述，目前有两种注册事件的策略，针对面向asyncio的API：
- en: 'Events can be registered at the instance level (e.g. a specific [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") instance) by associating the event with
    the `sync` attribute that refers to the proxied object. For example to register
    the [`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event against an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") instance, use its [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute as target. Targets
    include:'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件可以在实例级别注册（例如特定的[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")实例），通过将事件与引用代理对象的`sync`属性关联。例如，要针对[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")实例注册[`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect")事件，请使用其[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")属性作为目标。目标包括：
- en: '[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")'
  id: totrans-1463
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")'
- en: ''
  id: totrans-1464
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncConnection.sync_connection`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_connection")'
  id: totrans-1465
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.sync_connection`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_connection")'
- en: ''
  id: totrans-1466
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncConnection.sync_engine`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_engine")'
  id: totrans-1467
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.sync_engine`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_engine")'
- en: ''
  id: totrans-1468
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")'
  id: totrans-1469
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")'
- en: To register an event at the class level, targeting all instances of the same
    type (e.g. all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    instances), use the corresponding sync-style class. For example to register the
    [`SessionEvents.before_commit()`](../events.html#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") event against the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class, use the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class as the target.
  id: totrans-1470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在类级别注册事件，针对同一类型的所有实例（例如所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")实例），请使用相应的同步风格类。例如，要针对[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类注册[`SessionEvents.before_commit()`](../events.html#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")事件，请将[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类作为目标。
- en: To register at the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") level, combine an explicit [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") with an [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker"), and associate events with the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  id: totrans-1471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")级别注册，结合一个明确的[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")和一个[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")，使用[`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker")，并将事件与[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")关联。
- en: When working within an event handler that is within an asyncio context, objects
    like the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") continue to work in their usual “synchronous”
    way without requiring `await` or `async` usage; when messages are ultimately received
    by the asyncio database adapter, the calling style is transparently adapted back
    into the asyncio calling style. For events that are passed a DBAPI level connection,
    such as [`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect"), the object is a [pep-249](../../glossary.html#term-pep-249)
    compliant “connection” object which will adapt sync-style calls into the asyncio
    driver.
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: 在异步上下文中工作的事件处理程序中，像[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")这样的对象继续以通常的“同步”方式工作，而不需要`await`或`async`的使用；当消息最终被异步数据库适配器接收时，调用风格会透明地转换回异步调用风格。对于传递了DBAPI级别连接的事件，例如[`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect")，该对象是一个符合[pep-249](../../glossary.html#term-pep-249)的“连接”对象，它将同步样式调用转换为异步驱动程序。
- en: Examples of Event Listeners with Async Engines / Sessions / Sessionmakers
  id: totrans-1473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 具有异步引擎/会话/会话制造器的事件监听器示例
- en: 'Some examples of sync style event handlers associated with async-facing API
    constructs are illustrated below:'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 一些与面向异步API构造相关的同步样式事件处理程序示例如下：
- en: '**Core Events on AsyncEngine**'
  id: totrans-1475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在AsyncEngine上的核心事件**'
- en: 'In this example, we access the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") as the target for [`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") and [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents"):'
  id: totrans-1476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们访问[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")属性，作为[`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")和[`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")的目标：
- en: '[PRE288]'
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'Output:'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE289]'
  id: totrans-1479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '**ORM Events on AsyncSession**'
  id: totrans-1480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在AsyncSession上的ORM事件**'
- en: 'In this example, we access [`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session") as the target for [`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents"):'
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们访问[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")作为[`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents")的目标：
- en: '[PRE290]'
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: 'Output:'
  id: totrans-1483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE291]'
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '**ORM Events on async_sessionmaker**'
  id: totrans-1485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在async_sessionmaker上的ORM事件**'
- en: 'For this use case, we make a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") as the event target, then assign it to the [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using the [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker") parameter:'
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这种用例，我们将[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")作为事件目标，然后将其分配给[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")，使用[`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker")参数：
- en: '[PRE292]'
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: 'Output:'
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE293]'
  id: totrans-1489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '### Using awaitable-only driver methods in connection pool and other events'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '### 在连接池和其他事件中使用仅可等待的驱动程序方法'
- en: As discussed in the above section, event handlers such as those oriented around
    the [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    event handlers receive a sync-style “DBAPI” connection, which is a wrapper object
    supplied by SQLAlchemy asyncio dialects to adapt the underlying asyncio “driver”
    connection into one that can be used by SQLAlchemy’s internals. A special use
    case arises when the user-defined implementation for such an event handler needs
    to make use of the ultimate “driver” connection directly, using awaitable only
    methods on that driver connection. One such example is the `.set_type_codec()`
    method supplied by the asyncpg driver.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 如上节所述，事件处理程序（例如那些围绕 [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents") 的事件处理程序）接收到一个同步风格的“DBAPI”连接，这是由 SQLAlchemy asyncio
    方言提供的包装对象，用于将底层 asyncio “驱动程序”连接适配成可以被 SQLAlchemy 内部使用的对象。当用户定义的实现需要直接使用最终的“驱动程序”连接，并在该驱动程序连接上使用仅可等待方法时，就会出现特殊的用例。其中一个例子是
    asyncpg 驱动程序提供的 `.set_type_codec()` 方法。
- en: To accommodate this use case, SQLAlchemy’s [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") class provides a method [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") that allows an awaitable function
    to be invoked within the “synchronous” context of an event handler or other SQLAlchemy
    internal. This method is directly analogous to the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method that allows a sync-style
    method to run under async.
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应这种用例，SQLAlchemy 的 [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") 类提供了一个方法 [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")，允许在事件处理程序或其他 SQLAlchemy 内部的“同步”上下文中调用可等待函数。这个方法直接对应于
    [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") 方法，后者允许在异步环境中运行同步风格的方法。
- en: '[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") should be passed a function that
    will accept the innermost “driver” connection as a single argument, and return
    an awaitable that will be invoked by the [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method. The given function itself
    does not need to be declared as `async`; it’s perfectly fine for it to be a Python
    `lambda:`, as the return awaitable value will be invoked after being returned:'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") 应该传递一个函数，该函数将接受内部的“驱动程序”连接作为单个参数，并返回一个可等待对象，该对象将由
    [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") 方法调用。给定的函数本身不需要声明为 `async`；它可以是一个
    Python 的 `lambda:`，因为返回的可等待值将在返回后被调用：'
- en: '[PRE294]'
  id: totrans-1494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: Above, the object passed to the `register_custom_types` event handler is an
    instance of [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection"), which provides a DBAPI-like interface
    to an underlying async-only driver-level connection object. The [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method then provides access to
    an awaitable environment where the underlying driver level connection may be acted
    upon.
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，传递给 `register_custom_types` 事件处理程序的对象是 [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") 的一个实例，它提供了对底层仅支持异步驱动程序级连接对象的类似 DBAPI 的接口。然后，[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") 方法提供了对一个可等待环境的访问，在该环境中可以对底层驱动程序级连接进行操作。
- en: New in version 1.4.30.
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.30 中的新功能。
- en: Examples of Event Listeners with Async Engines / Sessions / Sessionmakers
  id: totrans-1497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异步引擎 / 会话 / 会话工厂的事件监听器示例
- en: 'Some examples of sync style event handlers associated with async-facing API
    constructs are illustrated below:'
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 下面给出了一些与异步 API 构造相关的同步风格事件处理程序的示例：
- en: '**Core Events on AsyncEngine**'
  id: totrans-1499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步引擎的核心事件**'
- en: 'In this example, we access the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") as the target for [`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") and [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents"):'
  id: totrans-1500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")属性作为[`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")和[`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")的目标：
- en: '[PRE295]'
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: 'Output:'
  id: totrans-1502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE296]'
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '**ORM Events on AsyncSession**'
  id: totrans-1504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AsyncSession上的ORM事件**'
- en: 'In this example, we access [`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session") as the target for [`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents"):'
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")作为[`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents")的目标：
- en: '[PRE297]'
  id: totrans-1506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: 'Output:'
  id: totrans-1507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE298]'
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '**ORM Events on async_sessionmaker**'
  id: totrans-1509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步会话工厂上的ORM事件**'
- en: 'For this use case, we make a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") as the event target, then assign it to the [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using the [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker") parameter:'
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这种用例，我们将[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")作为事件目标，然后使用[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")并使用[`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class")参数进行赋值：
- en: '[PRE299]'
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'Output:'
  id: totrans-1512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE300]'
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '### Using awaitable-only driver methods in connection pool and other events'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: '### 在连接池和其他事件中使用仅可等待的驱动程序方法'
- en: As discussed in the above section, event handlers such as those oriented around
    the [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    event handlers receive a sync-style “DBAPI” connection, which is a wrapper object
    supplied by SQLAlchemy asyncio dialects to adapt the underlying asyncio “driver”
    connection into one that can be used by SQLAlchemy’s internals. A special use
    case arises when the user-defined implementation for such an event handler needs
    to make use of the ultimate “driver” connection directly, using awaitable only
    methods on that driver connection. One such example is the `.set_type_codec()`
    method supplied by the asyncpg driver.
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 如上节所述，事件处理程序（例如围绕[`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")事件处理程序定位的事件处理程序）接收到一个同步风格的“DBAPI”连接，这是SQLAlchemy
    asyncio方言提供的包装对象，用于将底层的asyncio“driver”连接适配为SQLAlchemy内部可以使用的连接。当用户定义的实现需要直接使用最终的“driver”连接时，使用该驱动连接上的仅可等待方法时会出现特殊的用例。一个这样的例子是asyncpg驱动程序提供的`.set_type_codec()`方法。
- en: To accommodate this use case, SQLAlchemy’s [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") class provides a method [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") that allows an awaitable function
    to be invoked within the “synchronous” context of an event handler or other SQLAlchemy
    internal. This method is directly analogous to the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method that allows a sync-style
    method to run under async.
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应这种用例，SQLAlchemy的[`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection")类提供了一个方法[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")，允许在事件处理程序或其他SQLAlchemy内部的“同步”上下文中调用可等待函数。这个方法直接类似于[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")方法，允许同步风格的方法在异步下运行。
- en: '[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") should be passed a function that
    will accept the innermost “driver” connection as a single argument, and return
    an awaitable that will be invoked by the [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method. The given function itself
    does not need to be declared as `async`; it’s perfectly fine for it to be a Python
    `lambda:`, as the return awaitable value will be invoked after being returned:'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")应该传递一个接受最内层的“driver”连接作为单个参数的函数，并返回一个由[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")方法调用的可等待对象。给定函数本身不需要声明为`async`；它完全可以是一个Python的`lambda:`，因为返回的可等待值将在返回后被调用：'
- en: '[PRE301]'
  id: totrans-1518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Above, the object passed to the `register_custom_types` event handler is an
    instance of [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection"), which provides a DBAPI-like interface
    to an underlying async-only driver-level connection object. The [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method then provides access to
    an awaitable environment where the underlying driver level connection may be acted
    upon.
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，传递给`register_custom_types`事件处理程序的对象是[`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection")的一个实例，它提供了对底层仅异步驱动程序级连接对象的类似DBAPI的接口。然后，[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async")方法提供了对可等待环境的访问，其中底层驱动程序级连接可以被操作。
- en: New in version 1.4.30.
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.30版本中新增。
- en: Using multiple asyncio event loops
  id: totrans-1521
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多个asyncio事件循环
- en: An application that makes use of multiple event loops, for example in the uncommon
    case of combining asyncio with multithreading, should not share the same [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") with different event loops when using the
    default pool implementation.
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个事件循环的应用程序，例如在将asyncio与多线程结合的不常见情况下，在使用默认池实现时不应该将同一个[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")与不同的事件循环共享。
- en: If an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    is be passed from one event loop to another, the method [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") should be called before it’s re-used
    on a new event loop. Failing to do so may lead to a `RuntimeError` along the lines
    of `Task <Task pending ...> got Future attached to a different loop`
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从一个事件循环传递[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")到另一个事件循环，应该在它被重新使用于新的事件循环之前调用[`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose")方法。未这样做可能会导致类似于`Task <Task pending
    ...> got Future attached to a different loop`的`RuntimeError`。
- en: 'If the same engine must be shared between different loop, it should be configured
    to disable pooling using [`NullPool`](../../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool"), preventing the Engine from using any connection more
    than once:'
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同一个引擎必须在不同的循环之间共享，应该配置为禁用连接池，使用[`NullPool`](../../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")，防止引擎使用任何连接超过一次：
- en: '[PRE302]'
  id: totrans-1525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '## Using asyncio scoped session'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用asyncio scoped session'
- en: The “scoped session” pattern used in threaded SQLAlchemy with the [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") object is also available in asyncio, using an
    adapted version called [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session").
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用带有[`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")对象的线程化SQLAlchemy中使用的“scoped
    session”模式也可在asyncio中使用，使用一个名为[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session")的调整版本。
- en: Tip
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: SQLAlchemy generally does not recommend the “scoped” pattern for new development
    as it relies upon mutable global state that must also be explicitly torn down
    when work within the thread or task is complete. Particularly when using asyncio,
    it’s likely a better idea to pass the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") directly to the awaitable functions that
    need it.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy通常不建议在新开发中使用“scoped”模式，因为它依赖于可变的全局状态，当线程或任务内的工作完成时，必须明确地将其销毁。特别是在使用asyncio时，直接将[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")传递给需要它的可等待函数可能是一个更好的主意。
- en: 'When using [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session"), as there’s no “thread-local” concept
    in the asyncio context, the “scopefunc” parameter must be provided to the constructor.
    The example below illustrates using the `asyncio.current_task()` function for
    this purpose:'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")时，由于asyncio上下文中没有“线程本地”概念，必须向构造函数提供“scopefunc”参数。下面的示例演示了使用`asyncio.current_task()`函数来实现这一目的：
- en: '[PRE303]'
  id: totrans-1531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Warning
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The “scopefunc” used by [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") is invoked **an arbitrary number
    of times** within a task, once for each time the underlying [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is accessed. The function should therefore
    be **idempotent** and lightweight, and should not attempt to create or mutate
    any state, such as establishing callbacks, etc.
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")中的“scopefunc”在任务中被**任意次**调用，每次访问底层的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")时都会被调用。因此，该函数应该是**幂等的**和轻量级的，并且不应尝试创建或改变任何状态，比如建立回调等。
- en: Warning
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Using `current_task()` for the “key” in the scope requires that the [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") method is called from within
    the outermost awaitable, to ensure the key is removed from the registry when the
    task is complete, otherwise the task handle as well as the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") will remain in memory, essentially creating
    a memory leak. See the following example which illustrates the correct use of
    [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove").
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 在作用于范围的“key”中使用`current_task()`要求在最外层可等待内调用[`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove")方法，以确保在任务完成时从注册表中移除该键，否则任务句柄以及[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")将仍然保留在内存中，实质上创建了内存泄漏。请参阅以下示例，演示了[`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove")的正确使用方法。
- en: '[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")
    includes **proxy behavior** similar to that of [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session"), which means it can be treated as a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") directly, keeping in mind that the usual
    `await` keywords are necessary, including for the [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") method:'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: '[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")包括与[`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")类似的**代理行为**，这意味着它可以直接被视为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，需要注意的是，通常需要使用`await`关键字，包括[`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove")方法：'
- en: '[PRE304]'
  id: totrans-1537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: New in version 1.4.19.
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4.19版本新增。
- en: '## Using the Inspector to inspect schema objects'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用检视器检视模式对象'
- en: 'SQLAlchemy does not yet offer an asyncio version of the [`Inspector`](../../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") (introduced at [Fine Grained Reflection
    with Inspector](../../core/reflection.html#metadata-reflection-inspector)), however
    the existing interface may be used in an asyncio context by leveraging the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method of [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection"):'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 目前尚未提供[`Inspector`](../../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")的 asyncio 版本（在[使用 Inspector 进行细粒度反射](../../core/reflection.html#metadata-reflection-inspector)中介绍），但是现有的接口可以通过利用[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")方法的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")在 asyncio 上下文中使用：
- en: '[PRE305]'
  id: totrans-1541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: See also
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflecting Database Objects](../../core/reflection.html#metadata-reflection)'
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: '[反射数据库对象](../../core/reflection.html#metadata-reflection)'
- en: '[Runtime Inspection API](../../core/inspection.html)'
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: '[运行时检查 API](../../core/inspection.html)'
- en: Engine API Documentation
  id: totrans-1545
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引擎 API 文档
- en: '| Object Name | Description |'
  id: totrans-1546
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1547
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [async_engine_from_config](#sqlalchemy.ext.asyncio.async_engine_from_config)(configuration[,
    prefix], **kwargs) | Create a new AsyncEngine instance using a configuration dictionary.
    |'
  id: totrans-1548
  prefs: []
  type: TYPE_TB
  zh: '| [async_engine_from_config](#sqlalchemy.ext.asyncio.async_engine_from_config)(configuration[,
    prefix], **kwargs) | 使用配置字典创建一个新的 AsyncEngine 实例。 |'
- en: '| [AsyncConnection](#sqlalchemy.ext.asyncio.AsyncConnection) | An asyncio proxy
    for a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). |'
  id: totrans-1549
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncConnection](#sqlalchemy.ext.asyncio.AsyncConnection) | 用于[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的 asyncio 代理。 |'
- en: '| [AsyncEngine](#sqlalchemy.ext.asyncio.AsyncEngine) | An asyncio proxy for
    a [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    |'
  id: totrans-1550
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncEngine](#sqlalchemy.ext.asyncio.AsyncEngine) | 用于[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的 asyncio 代理。 |'
- en: '| [AsyncTransaction](#sqlalchemy.ext.asyncio.AsyncTransaction) | An asyncio
    proxy for a [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"). |'
  id: totrans-1551
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncTransaction](#sqlalchemy.ext.asyncio.AsyncTransaction) | 用于[`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")的 asyncio 代理。 |'
- en: '| [create_async_engine](#sqlalchemy.ext.asyncio.create_async_engine)(url, **kw)
    | Create a new async engine instance. |'
  id: totrans-1552
  prefs: []
  type: TYPE_TB
  zh: '| [create_async_engine](#sqlalchemy.ext.asyncio.create_async_engine)(url, **kw)
    | 创建一个新的异步引擎实例。 |'
- en: '| [create_async_pool_from_url](#sqlalchemy.ext.asyncio.create_async_pool_from_url)(url,
    **kwargs) | Create a new async engine instance. |'
  id: totrans-1553
  prefs: []
  type: TYPE_TB
  zh: '| [create_async_pool_from_url](#sqlalchemy.ext.asyncio.create_async_pool_from_url)(url,
    **kwargs) | 创建一个新的异步引擎实例。 |'
- en: '[PRE306]'
  id: totrans-1554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: Create a new async engine instance.
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的异���引擎实例。
- en: Arguments passed to [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") are mostly identical to those passed
    to the [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function. The specified dialect must be an asyncio-compatible dialect such as
    [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine "sqlalchemy.ext.asyncio.create_async_engine")的参数与传递给[`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")函数的参数基本相同。指定的方言必须是一个 asyncio 兼容的方言，如[asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg)。
- en: New in version 1.4.
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Parameters:'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**async_creator** –'
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: '**async_creator** –'
- en: an async callable which returns a driver-level asyncio connection. If given,
    the function should take no arguments, and return a new asyncio connection from
    the underlying asyncio database driver; the connection will be wrapped in the
    appropriate structures to be used with the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"). Note that the parameters specified in the
    URL are not applied here, and the creator function should use its own connection
    parameters.
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 一个异步可调用函数，返回一个驱动级别的 asyncio 连接。如果提供了该函数，它不应该带任何参数，并且应该从底层 asyncio 数据库驱动程序返回一个新的
    asyncio 连接；该连接将被包装在适当的结构中，以便与[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")一起使用。请注意，URL 中指定的参数在此处不适用，创建函数应该使用自己的连接参数。
- en: This parameter is the asyncio equivalent of the [`create_engine.creator`](../../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter of the [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数是 [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    函数的 asyncio 等效参数。
- en: New in version 2.0.16.
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.16 中新增。
- en: '[PRE307]'
  id: totrans-1563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: Create a new AsyncEngine instance using a configuration dictionary.
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置字典创建一个新的 AsyncEngine 实例。
- en: This function is analogous to the [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") function in SQLAlchemy Core, except that the
    requested dialect must be an asyncio-compatible dialect such as [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
    The argument signature of the function is identical to that of [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config").
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数类似于 SQLAlchemy 核心中的 [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") 函数，不同之处在于请求的方言必须是类似于 [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg)
    这样的 asyncio 兼容方言。函数的参数签名与 [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") 完全相同。
- en: New in version 1.4.29.
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.29 中新增。
- en: '[PRE308]'
  id: totrans-1567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: Create a new async engine instance.
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的异步引擎实例。
- en: Arguments passed to [`create_async_pool_from_url()`](#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") are mostly identical to those
    passed to the [`create_pool_from_url()`](../../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") function. The specified dialect must be an
    asyncio-compatible dialect such as [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 [`create_async_pool_from_url()`](#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") 的参数大部分与传递给 [`create_pool_from_url()`](../../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") 函数的参数相同。指定的方言必须是类似于 [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg)
    这样的 asyncio 兼容方言。
- en: New in version 2.0.10.
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.10 中新增。
- en: '[PRE309]'
  id: totrans-1571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: An asyncio proxy for a [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的 asyncio 代理。
- en: '[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    is acquired using the [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function:'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    是通过 [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine "sqlalchemy.ext.asyncio.create_async_engine")
    函数获取的：'
- en: '[PRE310]'
  id: totrans-1574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: New in version 1.4.
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: '**Members**'
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[begin()](#sqlalchemy.ext.asyncio.AsyncEngine.begin), [clear_compiled_cache()](#sqlalchemy.ext.asyncio.AsyncEngine.clear_compiled_cache),
    [connect()](#sqlalchemy.ext.asyncio.AsyncEngine.connect), [dialect](#sqlalchemy.ext.asyncio.AsyncEngine.dialect),
    [dispose()](#sqlalchemy.ext.asyncio.AsyncEngine.dispose), [driver](#sqlalchemy.ext.asyncio.AsyncEngine.driver),
    [echo](#sqlalchemy.ext.asyncio.AsyncEngine.echo), [engine](#sqlalchemy.ext.asyncio.AsyncEngine.engine),
    [execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.execution_options),
    [get_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.get_execution_options),
    [name](#sqlalchemy.ext.asyncio.AsyncEngine.name), [pool](#sqlalchemy.ext.asyncio.AsyncEngine.pool),
    [raw_connection()](#sqlalchemy.ext.asyncio.AsyncEngine.raw_connection), [sync_engine](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine),
    [update_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.update_execution_options),
    [url](#sqlalchemy.ext.asyncio.AsyncEngine.url)'
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: '[begin()](#sqlalchemy.ext.asyncio.AsyncEngine.begin), [clear_compiled_cache()](#sqlalchemy.ext.asyncio.AsyncEngine.clear_compiled_cache),
    [connect()](#sqlalchemy.ext.asyncio.AsyncEngine.connect), [dialect](#sqlalchemy.ext.asyncio.AsyncEngine.dialect),
    [dispose()](#sqlalchemy.ext.asyncio.AsyncEngine.dispose), [driver](#sqlalchemy.ext.asyncio.AsyncEngine.driver),
    [echo](#sqlalchemy.ext.asyncio.AsyncEngine.echo), [engine](#sqlalchemy.ext.asyncio.AsyncEngine.engine),
    [execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.execution_options),
    [get_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.get_execution_options),
    [name](#sqlalchemy.ext.asyncio.AsyncEngine.name), [pool](#sqlalchemy.ext.asyncio.AsyncEngine.pool),
    [raw_connection()](#sqlalchemy.ext.asyncio.AsyncEngine.raw_connection), [sync_engine](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine),
    [update_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.update_execution_options),
    [url](#sqlalchemy.ext.asyncio.AsyncEngine.url)'
- en: '**Class signature**'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.AsyncConnectable`)
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")（`sqlalchemy.ext.asyncio.base.ProxyComparable`，`sqlalchemy.ext.asyncio.AsyncConnectable`）
- en: '[PRE311]'
  id: totrans-1580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: Return a context manager which when entered will deliver an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") with an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") established.
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个上下文管理器，当进入时将提供一个已建立[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")。
- en: 'E.g.:'
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE312]'
  id: totrans-1583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-1584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: Clear the compiled cache associated with the dialect.
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: 清除与方言关联的已编译缓存。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类。
- en: This applies **only** to the built-in cache that is established via the `create_engine.query_cache_size`
    parameter. It will not impact any dictionary caches that were passed via the [`Connection.execution_options.compiled_cache`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") parameter.
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅适用于通过`create_engine.query_cache_size`参数建立的内置缓存。它不会影响通过[`Connection.execution_options.compiled_cache`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options")参数传递的任何字典缓存。
- en: New in version 1.4.
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE314]'
  id: totrans-1589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: Return an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object.
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")对象。
- en: 'The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    will procure a database connection from the underlying connection pool when it
    is entered as an async context manager:'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为异步上下文管理器输入时，[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")将从底层连接池中获取数据库连接：
- en: '[PRE315]'
  id: totrans-1592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    may also be started outside of a context manager by invoking its [`AsyncConnection.start()`](#sqlalchemy.ext.asyncio.AsyncConnection.start
    "sqlalchemy.ext.asyncio.AsyncConnection.start") method.
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过调用其[`AsyncConnection.start()`](#sqlalchemy.ext.asyncio.AsyncConnection.start
    "sqlalchemy.ext.asyncio.AsyncConnection.start")方法在上下文管理器之外启动[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")。
- en: '[PRE316]'
  id: totrans-1594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: Proxy for the `Engine.dialect` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的`Engine.dialect`属性的代理。
- en: '[PRE317]'
  id: totrans-1596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: Dispose of the connection pool used by this [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")使用的连接池。
- en: 'Parameters:'
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**close** –'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: '**close** –'
- en: if left at its default of `True`, has the effect of fully closing all **currently
    checked in** database connections. Connections that are still checked out will
    **not** be closed, however they will no longer be associated with this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), so when they are closed individually, eventually
    the [`Pool`](../../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    which they are associated with will be garbage collected and they will be closed
    out fully, if not already closed on checkin.
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 如果保持默认值`True`，则会完全关闭所有**当前已签入**的数据库连接。仍在签出的连接将**不会**被关闭，但它们将不再与此[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联，因此当它们被单独关闭时，它们将最终被垃圾回收，并且如果尚未在签入时关闭，则它们将被完全关闭。
- en: If set to `False`, the previous connection pool is de-referenced, and otherwise
    not touched in any way.
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为`False`，则先前的连接池将被取消引用，否则不会以任何方式触及。
- en: See also
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Engine.dispose()`](../../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.dispose()`](../../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")'
- en: '[PRE318]'
  id: totrans-1604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: Driver name of the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") in use by this `Engine`.
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Engine`正在使用的[`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")的驱动程序名称。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")类，代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")类。
- en: '[PRE319]'
  id: totrans-1607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: When `True`, enable log output for this element.
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: 当为`True`时，启用此元素的日志输出。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")类，代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")类。
- en: This has the effect of setting the Python logging level for the namespace of
    this element’s class and object reference. A value of boolean `True` indicates
    that the loglevel `logging.INFO` will be set for the logger, whereas the string
    value `debug` will set the loglevel to `logging.DEBUG`.
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置此元素的类和对象引用的Python日志级别的效果。布尔值`True`表示将为记录器设置日志级别`logging.INFO`，而字符串值`debug`将将日志级别设置为`logging.DEBUG`。
- en: '[PRE320]'
  id: totrans-1611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: Returns this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")类，代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")类。
- en: Used for legacy schemes that accept [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") / [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects within the same variable.
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: 用于接受相同变量中的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") / [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象的传统方案。
- en: '[PRE321]'
  id: totrans-1615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: Return a new [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    that will provide [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") objects with the given execution options.
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")，将提供具有给定执行选项的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")对象。
- en: Proxied from [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"). See that method for details.
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 从[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")代理。有关详细信息，请参阅该方法。
- en: '[PRE322]'
  id: totrans-1618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非SQL选项。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")类，代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")类。
- en: See also
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[PRE323]'
  id: totrans-1623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: String name of the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") in use by this `Engine`.
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Engine`正在使用的[`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")的字符串名称。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")类，代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")类。
- en: '[PRE324]'
  id: totrans-1626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: Proxy for the `Engine.pool` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 代理`Engine.pool`属性，代表[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类。
- en: '[PRE325]'
  id: totrans-1628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: Return a “raw” DBAPI connection from the connection pool.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 从连接池返回“原始”DBAPI连接。
- en: See also
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Driver SQL and Raw DBAPI Connections](../../core/connections.html#dbapi-connections)'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: '[与Driver SQL和原始DBAPI连接一起工作](../../core/connections.html#dbapi-connections)'
- en: '[PRE326]'
  id: totrans-1632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: Reference to the sync-style [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") this [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") proxies requests towards.
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")代理请求的同步式[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的引用。
- en: This instance can be used as an event target.
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例可用作事件目标。
- en: See also
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using events with the asyncio extension](#asyncio-events)'
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用asyncio扩展处理事件](#asyncio-events)'
- en: '[PRE327]'
  id: totrans-1637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: Update the default execution_options dictionary of this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 更新此[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的默认执行选项字典。
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类。
- en: The given keys/values in **opt are added to the default execution options that
    will be used for all connections. The initial contents of this dictionary can
    be sent via the `execution_options` parameter to [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: '**opt中给定的键/值将添加到将用于所有连接的默认执行选项中。此字典的初始内容可以通过`execution_options`参数发送到[`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。'
- en: See also
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '[PRE328]'
  id: totrans-1644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: Proxy for the `Engine.url` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")类的`Engine.url`属性。
- en: '[PRE329]'
  id: totrans-1646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: An asyncio proxy for a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")的asyncio代理。
- en: '[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    is acquired using the [`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect") method of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"):'
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: '使用[`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect "sqlalchemy.ext.asyncio.AsyncEngine.connect")方法获取[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection"):'
- en: '[PRE330]'
  id: totrans-1649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: New in version 1.4.
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Members**'
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[aclose()](#sqlalchemy.ext.asyncio.AsyncConnection.aclose), [begin()](#sqlalchemy.ext.asyncio.AsyncConnection.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncConnection.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncConnection.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncConnection.closed), [commit()](#sqlalchemy.ext.asyncio.AsyncConnection.commit),
    [connection](#sqlalchemy.ext.asyncio.AsyncConnection.connection), [default_isolation_level](#sqlalchemy.ext.asyncio.AsyncConnection.default_isolation_level),
    [dialect](#sqlalchemy.ext.asyncio.AsyncConnection.dialect), [exec_driver_sql()](#sqlalchemy.ext.asyncio.AsyncConnection.exec_driver_sql),
    [execute()](#sqlalchemy.ext.asyncio.AsyncConnection.execute), [execution_options()](#sqlalchemy.ext.asyncio.AsyncConnection.execution_options),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_nested_transaction),
    [get_raw_connection()](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection),
    [get_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_transaction),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncConnection.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncConnection.invalidate), [invalidated](#sqlalchemy.ext.asyncio.AsyncConnection.invalidated),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncConnection.rollback), [run_sync()](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncConnection.scalar), [scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.scalars),
    [start()](#sqlalchemy.ext.asyncio.AsyncConnection.start), [stream()](#sqlalchemy.ext.asyncio.AsyncConnection.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars), [sync_connection](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection),
    [sync_engine](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine)'
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: '[aclose()](#sqlalchemy.ext.asyncio.AsyncConnection.aclose), [begin()](#sqlalchemy.ext.asyncio.AsyncConnection.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncConnection.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncConnection.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncConnection.closed), [commit()](#sqlalchemy.ext.asyncio.AsyncConnection.commit),
    [connection](#sqlalchemy.ext.asyncio.AsyncConnection.connection), [default_isolation_level](#sqlalchemy.ext.asyncio.AsyncConnection.default_isolation_level),
    [dialect](#sqlalchemy.ext.asyncio.AsyncConnection.dialect), [exec_driver_sql()](#sqlalchemy.ext.asyncio.AsyncConnection.exec_driver_sql),
    [execute()](#sqlalchemy.ext.asyncio.AsyncConnection.execute), [execution_options()](#sqlalchemy.ext.asyncio.AsyncConnection.execution_options),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_nested_transaction),
    [get_raw_connection()](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection),
    [get_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_transaction),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncConnection.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncConnection.invalidate), [invalidated](#sqlalchemy.ext.asyncio.AsyncConnection.invalidated),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncConnection.rollback), [run_sync()](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncConnection.scalar), [scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.scalars),
    [start()](#sqlalchemy.ext.asyncio.AsyncConnection.start), [stream()](#sqlalchemy.ext.asyncio.AsyncConnection.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars), [sync_connection](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection),
    [sync_engine](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine)'
- en: '**Class signature**'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`, `sqlalchemy.ext.asyncio.AsyncConnectable`)
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`, `sqlalchemy.ext.asyncio.AsyncConnectable`)
- en: '[PRE331]'
  id: totrans-1655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: A synonym for [`AsyncConnection.close()`](#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close").
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.close()`](#sqlalchemy.ext.asyncio.AsyncConnection.close "sqlalchemy.ext.asyncio.AsyncConnection.close")的同义词。'
- en: The [`AsyncConnection.aclose()`](#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") name is specifically to support
    the Python standard library `@contextlib.aclosing` context manager function.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.aclose()`](#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") 名称特别支持 Python 标准库 `@contextlib.aclosing`
    上下文管理器函数。'
- en: New in version 2.0.20.
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0.20 版本中新增。
- en: '[PRE332]'
  id: totrans-1659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: Begin a transaction prior to autobegin occurring.
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动开始之前开始一个事务。
- en: '[PRE333]'
  id: totrans-1661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Begin a nested transaction and return a transaction handle.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个嵌套事务并返回一个事务句柄。
- en: '[PRE334]'
  id: totrans-1663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Close this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection").
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭这个[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")。
- en: This has the effect of also rolling back the transaction if one is in place.
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会导致事务回滚（如果存在的话）。
- en: '[PRE335]'
  id: totrans-1666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: Return True if this connection is closed.
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `True` 如果此连接已关闭。
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")类的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")类的代理。
- en: '[PRE336]'
  id: totrans-1669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: Commit the transaction that is currently in progress.
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: 提交当前正在进行的事务。
- en: This method commits the current transaction if one has been started. If no transaction
    was started, the method has no effect, assuming the connection is in a non-invalidated
    state.
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已启动事务，则此方法会提交当前事务。如果未启动事务，则该方法不起作用，假定连接处于非失效状态。
- en: A transaction is begun on a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") automatically whenever a statement is first executed,
    or when the [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次执行语句或调用 [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 方法时，[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")自动开始事务。
- en: '[PRE337]'
  id: totrans-1673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: Not implemented for async; call [`AsyncConnection.get_raw_connection()`](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection").
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 未实现异步; 调用 [`AsyncConnection.get_raw_connection()`](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection")。
- en: '[PRE338]'
  id: totrans-1675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: The initial-connection time isolation level associated with the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") in use.
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: 与正在使用的[`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")相关联的初始连接时间隔离级别。
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")类的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")类的代理。
- en: This value is independent of the [`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and [`Engine.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") execution options, and is determined
    by the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    when the first connection is created, by performing a SQL query against the database
    for the current isolation level before any additional commands have been emitted.
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: '此值与[`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")和[`Engine.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options")执行选项无关，并且由[`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")在创建第一个连接时确定，通过对数据库执行 SQL 查询以获取当前隔离级别，然后在发出任何其他命令之前。 '
- en: Calling this accessor does not invoke any new SQL queries.
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此访问器不会触发任何新的 SQL 查询。
- en: See also
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.get_isolation_level()`](../../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current actual isolation
    level'
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](../../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前实际隔离级别'
- en: '[`create_engine.isolation_level`](../../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](../../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的隔离级别'
- en: '[`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的隔离级别'
- en: '[PRE339]'
  id: totrans-1684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: Proxy for the `Connection.dialect` attribute on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")类的`Connection.dialect`属性的代理。
- en: '[PRE340]'
  id: totrans-1686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: Executes a driver-level SQL string and return buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: 执行驱动程序级别的SQL字符串并返回缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")。
- en: '[PRE341]'
  id: totrans-1688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: Executes a SQL statement construct and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: 执行SQL语句构造并返回一个缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")。
- en: 'Parameters:'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`object` –'
  id: totrans-1691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object` –'
- en: 'The statement to be executed. This is always an object that is in both the
    [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") and [`Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") hierarchies, including:'
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要执行的语句。这始终是同时在[`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")和[`Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")层次结构中的对象，包括：
- en: '[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
  id: totrans-1693
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
- en: '[`Insert`](../../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
  id: totrans-1694
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert`](../../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
- en: '[`TextClause`](../../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`TextualSelect`](../../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")'
  id: totrans-1695
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TextClause`](../../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")和[`TextualSelect`](../../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")'
- en: '[`DDL`](../../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    and objects which inherit from [`ExecutableDDLElement`](../../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")'
  id: totrans-1696
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DDL`](../../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")和从[`ExecutableDDLElement`](../../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")继承的对象'
- en: '`parameters` – parameters which will be bound into the statement. This may
    be either a dictionary of parameter names to values, or a mutable sequence (e.g.
    a list) of dictionaries. When a list of dictionaries is passed, the underlying
    statement execution will make use of the DBAPI `cursor.executemany()` method.
    When a single dictionary is passed, the DBAPI `cursor.execute()` method will be
    used.'
  id: totrans-1697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 将绑定到语句中的参数。这可以是参数名称到值的字典，也可以是可变序列（例如列表）的字典。当传递一个字典列表时，底层语句执行将使用DBAPI
    `cursor.executemany()` 方法。当传递单个字典时，将使用DBAPI `cursor.execute()` 方法。'
- en: '`execution_options` – optional dictionary of execution options, which will
    be associated with the statement execution. This dictionary can provide a subset
    of the options that are accepted by [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options").'
  id: totrans-1698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` – 可选的执行选项字典，将与语句执行关联。此字典可以提供[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项子集。'
- en: 'Returns:'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: '[PRE342]'
  id: totrans-1701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: Set non-SQL options for the connection which take effect during execution.
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: 为连接设置在执行期间生效的非SQL选项。
- en: This returns this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") object with the new options added.
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回带有新选项的此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")对象。
- en: See [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") for full details on this method.
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此方法的详细信息，请参阅[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")。
- en: '[PRE343]'
  id: totrans-1705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: Return an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    representing the current nested (savepoint) transaction, if any.
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在当前嵌套（保存点）事务，则返回表示当前嵌套（保存点）事务的[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: This makes use of the underlying synchronous connection’s [`Connection.get_nested_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_nested_transaction
    "sqlalchemy.engine.Connection.get_nested_transaction") method to get the current
    [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction"),
    which is then proxied in a new [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") object.
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 这利用了底层同步连接的[`Connection.get_nested_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_nested_transaction
    "sqlalchemy.engine.Connection.get_nested_transaction")方法来获取当前[`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")，然后在新的[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")对象中进行代理。
- en: New in version 1.4.0b2.
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本 1.4.0b2 中新增。
- en: '[PRE344]'
  id: totrans-1709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Return the pooled DBAPI-level connection in use by this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection").
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")使用的汇总的
    DBAPI 级连接。
- en: This is a SQLAlchemy connection-pool proxied connection which then has the attribute
    `_ConnectionFairy.driver_connection` that refers to the actual driver connection.
    Its `_ConnectionFairy.dbapi_connection` refers instead to an [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") instance that adapts the driver connection
    to the DBAPI protocol.
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个由 SQLAlchemy 连接池代理的连接，然后具有属性 `_ConnectionFairy.driver_connection`，该属性引用实际的驱动程序连接。其
    `_ConnectionFairy.dbapi_connection` 引用的是将驱动程序连接适配到 DBAPI 协议的[`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection")实例。
- en: '[PRE345]'
  id: totrans-1712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: Return an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    representing the current transaction, if any.
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在当前事务，则返回表示当前事务的[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: This makes use of the underlying synchronous connection’s [`Connection.get_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction") method to get the current [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"), which is then proxied in a new [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") object.
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: 这利用了底层同步连接的[`Connection.get_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction")方法来获取当前[`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")，然后在新的[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction")对象中进行代理。
- en: New in version 1.4.0b2.
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本 1.4.0b2 中新增。
- en: '[PRE346]'
  id: totrans-1716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: Return True if a transaction is in progress.
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务正在进行中，则返回 True。
- en: New in version 1.4.0b2.
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本 1.4.0b2 中新增。
- en: '[PRE347]'
  id: totrans-1719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: Return True if a transaction is in progress.
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务正在进行中，则返回 True。
- en: '[PRE348]'
  id: totrans-1721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: Return the [`Connection.info`](../../core/connections.html#sqlalchemy.engine.Connection.info
    "sqlalchemy.engine.Connection.info") dictionary of the underlying [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[`Connection.info`](../../core/connections.html#sqlalchemy.engine.Connection.info
    "sqlalchemy.engine.Connection.info")字典。
- en: This dictionary is freely writable for user-defined state to be associated with
    the database connection.
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典可以自由写入，用于关联与数据库连接相关的用户定义状态。
- en: This attribute is only available if the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") is currently connected. If the [`AsyncConnection.closed`](#sqlalchemy.ext.asyncio.AsyncConnection.closed
    "sqlalchemy.ext.asyncio.AsyncConnection.closed") attribute is `True`, then accessing
    this attribute will raise [`ResourceClosedError`](../../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError").
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 仅当[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")当前连接时才可用此属性。如果[`AsyncConnection.closed`](#sqlalchemy.ext.asyncio.AsyncConnection.closed
    "sqlalchemy.ext.asyncio.AsyncConnection.closed")属性为`True`，则访问此属性将引发[`ResourceClosedError`](../../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")。
- en: New in version 1.4.0b2.
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.0b2中新增。
- en: '[PRE349]'
  id: totrans-1726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: Invalidate the underlying DBAPI connection associated with this [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 使与此[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")相关联的底层DBAPI连接失效。
- en: See the method [`Connection.invalidate()`](../../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") for full detail on this method.
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此方法的详细信息，请参阅[`Connection.invalidate()`](../../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法。
- en: '[PRE350]'
  id: totrans-1729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: Return True if this connection was invalidated.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此连接被使无效，则返回True。
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")类的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")类。
- en: This does not indicate whether or not the connection was invalidated at the
    pool level, however
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不表示连接是否在池级别被使无效。
- en: '[PRE351]'
  id: totrans-1733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: Roll back the transaction that is currently in progress.
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前正在进行的事务。
- en: This method rolls back the current transaction if one has been started. If no
    transaction was started, the method has no effect. If a transaction was started
    and the connection is in an invalidated state, the transaction is cleared using
    this method.
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已启动事务，则此方法将回滚当前事务。如果未启动事务，则该方法不起作用。如果已启动事务且连接处于无效状态，则使用此方法清除事务。
- en: A transaction is begun on a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") automatically whenever a statement is first executed,
    or when the [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: 每当首次执行语句或调用[`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法时，[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上都会自动开始事务。
- en: '[PRE352]'
  id: totrans-1737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: Invoke the given synchronous (i.e. not async) callable, passing a synchronous-style
    [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    as the first argument.
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 调用给定的同步（即非异步）可调用对象，将同步风格的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")作为第一个参数传递。
- en: This method allows traditional synchronous SQLAlchemy functions to run within
    the context of an asyncio application.
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许传统的同步SQLAlchemy函数在异步应用程序的上下文中运行。
- en: 'E.g.:'
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE353]'
  id: totrans-1741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: This method maintains the asyncio event loop all the way through to the database
    connection by running the given callable in a specially instrumented greenlet.
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在特别调试的greenlet中运行给定的可调用对象，此方法将一直保持异步事件循环直到数据库连接。
- en: 'The most rudimentary use of [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") is to invoke methods such as
    [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all"), given an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") that needs to be provided to [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") as a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object:'
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")的最基本用法是调用诸如[`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")之类的方法，给定一个需要提供给[`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")对象作为[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象：'
- en: '[PRE354]'
  id: totrans-1744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: Note
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The provided callable is invoked inline within the asyncio event loop, and will
    block on traditional IO calls. IO within this callable should only call into SQLAlchemy’s
    asyncio database APIs which will be properly adapted to the greenlet context.
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的可调用对象在 asyncio 事件循环中内联调用，并将阻塞传统 IO 调用。此可调用对象中的 IO 应仅调用到 SQLAlchemy 的 asyncio
    数据库 API，这些 API 将被正确地适配到 greenlet 上下文。
- en: See also
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync "sqlalchemy.ext.asyncio.AsyncSession.run_sync")'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync "sqlalchemy.ext.asyncio.AsyncSession.run_sync")'
- en: '[Running Synchronous Methods and Functions under asyncio](#session-run-sync)'
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 asyncio 下运行同步方法和函数](#session-run-sync)'
- en: '[PRE355]'
  id: totrans-1750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: Executes a SQL statement construct and returns a scalar object.
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 SQL 语句构造并返回标量对象。
- en: This method is shorthand for invoking the [`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method after invoking the [`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是在调用[`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法后调用[`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")方法的简写。参数是等效的。
- en: 'Returns:'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a scalar Python value representing the first column of the first row returned.
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: 代表返回的第一行的第一列的标量 Python 值。
- en: '[PRE356]'
  id: totrans-1755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: Executes a SQL statement construct and returns a scalar objects.
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 SQL 语句构造并返回标量对象。
- en: This method is shorthand for invoking the [`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method after invoking the [`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是在调用[`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法后调用[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")方法的简写。参数是等效的。
- en: 'Returns:'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object.
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")对象。
- en: New in version 1.4.24.
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中新增。
- en: '[PRE357]'
  id: totrans-1761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: Start this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object’s context outside of using a Python `with:` block.
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Python 的`with:`块之外启动此[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")对象的上下文。
- en: '[PRE358]'
  id: totrans-1763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: Execute a statement and return an awaitable yielding a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回一个等待可迭代的[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")对象。
- en: 'E.g.:'
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE359]'
  id: totrans-1766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: 'The [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method supports optional context
    manager use against the [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object, as in:'
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")方法支持可选的上下文管理器用法，针对[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象，如下所示：'
- en: '[PRE360]'
  id: totrans-1768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: In the above pattern, the [`AsyncResult.close()`](#sqlalchemy.ext.asyncio.AsyncResult.close
    "sqlalchemy.ext.asyncio.AsyncResult.close") method is invoked unconditionally,
    even if the iterator is interrupted by an exception throw. Context manager use
    remains optional, however, and the function may be called in either an `async
    with fn():` or `await fn()` style.
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述模式中，[`AsyncResult.close()`](#sqlalchemy.ext.asyncio.AsyncResult.close "sqlalchemy.ext.asyncio.AsyncResult.close")方法无条件调用，即使迭代器被异常中断。但上下文管理器的使用仍然是可选的，函数可以以`async
    with fn():`或`await fn()`的方式调用。
- en: 'New in version 2.0.0b3: added context manager support'
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.0b3中：添加了上下文管理器支持
- en: 'Returns:'
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an awaitable object that will yield an [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可等待对象，将产生一个[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")对象。
- en: See also
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars")'
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars")'
- en: '[PRE361]'
  id: totrans-1775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: Execute a statement and return an awaitable yielding a [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object.
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回一个可等待对象，产生一个[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")对象。
- en: 'E.g.:'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE362]'
  id: totrans-1778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: This method is shorthand for invoking the `AsyncResult.scalars()` method after
    invoking the `Connection.stream()` method. Parameters are equivalent.
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是在调用`Connection.stream()`方法后调用`AsyncResult.scalars()`方法的简写。参数是等效的。
- en: 'The [`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars") method supports optional
    context manager use against the [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object, as in:'
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars")方法支持可选的上下文管理器使用，针对[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")对象，如下所示：'
- en: '[PRE363]'
  id: totrans-1781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: In the above pattern, the [`AsyncScalarResult.close()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.close
    "sqlalchemy.ext.asyncio.AsyncScalarResult.close") method is invoked unconditionally,
    even if the iterator is interrupted by an exception throw. Context manager use
    remains optional, however, and the function may be called in either an `async
    with fn():` or `await fn()` style.
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述模式中，[`AsyncScalarResult.close()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.close
    "sqlalchemy.ext.asyncio.AsyncScalarResult.close")方法无条件调用，即使迭代器被异常中断。但上下文管理器的使用仍然是可选的，函数可以以`async
    with fn():`或`await fn()`的方式调用。
- en: 'New in version 2.0.0b3: added context manager support'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.0b3中：添加了上下文管理器支持
- en: 'Returns:'
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an awaitable object that will yield an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object.
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可等待��象，将产生一个[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")对象。
- en: New in version 1.4.24.
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.24中。
- en: See also
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")'
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")'
- en: '[PRE364]'
  id: totrans-1789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: Reference to the sync-style [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") proxies requests towards.
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 引用与其关联的同步式[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")。
- en: This instance can be used as an event target.
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例可用作事件目标。
- en: See also
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using events with the asyncio extension](#asyncio-events)'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 asyncio 扩展处理事件](#asyncio-events)'
- en: '[PRE365]'
  id: totrans-1794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: Reference to the sync-style [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") is associated with via its underlying
    [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: 引用与其关联的同步式[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")。
- en: This instance can be used as an event target.
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例可用作事件目标。
- en: See also
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using events with the asyncio extension](#asyncio-events)'
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 asyncio 扩展处理事件](#asyncio-events)'
- en: '[PRE366]'
  id: totrans-1799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: An asyncio proxy for a [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") 的 asyncio 代理。
- en: '**Members**'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.ext.asyncio.AsyncTransaction.close), [commit()](#sqlalchemy.ext.asyncio.AsyncTransaction.commit),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncTransaction.rollback), [start()](#sqlalchemy.ext.asyncio.AsyncTransaction.start)'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.ext.asyncio.AsyncTransaction.close), [commit()](#sqlalchemy.ext.asyncio.AsyncTransaction.commit),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncTransaction.rollback), [start()](#sqlalchemy.ext.asyncio.AsyncTransaction.start)'
- en: '**Class signature**'
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.asyncio.AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
- en: '[PRE367]'
  id: totrans-1805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: Close this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此事务是嵌套在 begin/commit 中的基本事务，则事务将回滚。否则，该方法返回。
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: 用于取消事务而不影响封闭事务范围。
- en: '[PRE368]'
  id: totrans-1809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: Commit this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此 [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: '[PRE369]'
  id: totrans-1811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: Roll back this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此 [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: '[PRE370]'
  id: totrans-1813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: Start this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    object’s context outside of using a Python `with:` block.
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: 在不使用 Python `with:` 块的情况下启动此 [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") 对象的上下文。
- en: Result Set API Documentation
  id: totrans-1815
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果集 API 文档
- en: The [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object is an async-adapted version of the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object. It is only returned when using the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") or [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") methods, which return a result object
    that is on top of an active database cursor.
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    对象是 [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象的异步适配版本。仅在使用 [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") 或 [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") 方法时返回，该方法返回一个位于活动数据库游标之上的结果对象。'
- en: '| Object Name | Description |'
  id: totrans-1817
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1818
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AsyncMappingResult](#sqlalchemy.ext.asyncio.AsyncMappingResult) | A wrapper
    for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns dictionary values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  id: totrans-1819
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncMappingResult](#sqlalchemy.ext.asyncio.AsyncMappingResult) | 用于返回字典值而不是
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    值的 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    的包装器。 |'
- en: '| [AsyncResult](#sqlalchemy.ext.asyncio.AsyncResult) | An asyncio wrapper around
    a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object. |'
  id: totrans-1820
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncResult](#sqlalchemy.ext.asyncio.AsyncResult) | 一个围绕 [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象的 asyncio 包装器。 |'
- en: '| [AsyncScalarResult](#sqlalchemy.ext.asyncio.AsyncScalarResult) | A wrapper
    for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns scalar values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  id: totrans-1821
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncScalarResult](#sqlalchemy.ext.asyncio.AsyncScalarResult) | 用于返回标量值而不是
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    值的 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    的包装器。 |'
- en: '| [AsyncTupleResult](#sqlalchemy.ext.asyncio.AsyncTupleResult) | A [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") that’s typed as returning plain Python tuples
    instead of rows. |'
  id: totrans-1822
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncTupleResult](#sqlalchemy.ext.asyncio.AsyncTupleResult) | 一个被类型化为返回普通Python元组而不是行的[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")。 |'
- en: '[PRE371]'
  id: totrans-1823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: An asyncio wrapper around a [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: 一个围绕[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的asyncio包装��。
- en: The [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    only applies to statement executions that use a server-side cursor. It is returned
    only from the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") and [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") methods.
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")仅适用于使用服务器端游标的语句执行。它仅从[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")和[`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream")方法返回。'
- en: Note
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As is the case with [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"), this object is used for ORM results returned by [`AsyncSession.execute()`](#sqlalchemy.ext.asyncio.AsyncSession.execute
    "sqlalchemy.ext.asyncio.AsyncSession.execute"), which can yield instances of ORM
    mapped objects either individually or within tuple-like rows. Note that these
    result objects do not deduplicate instances or rows automatically as is the case
    with the legacy [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. For in-Python de-duplication of instances or rows, use the [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique
    "sqlalchemy.ext.asyncio.AsyncResult.unique") modifier method.
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")相同，此对象用于由[`AsyncSession.execute()`](#sqlalchemy.ext.asyncio.AsyncSession.execute
    "sqlalchemy.ext.asyncio.AsyncSession.execute")返回的ORM结果，可以单独返回ORM映射对象的实例或在类似元组的行中返回。请注意，这些结果对象不会像传统的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象一样自动去重实例或行。要在Python中去重实例或行，请使用[`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique
    "sqlalchemy.ext.asyncio.AsyncResult.unique")修改器方法。
- en: New in version 1.4.
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Members**'
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncResult.first),
    [freeze()](#sqlalchemy.ext.asyncio.AsyncResult.freeze), [keys()](#sqlalchemy.ext.asyncio.AsyncResult.keys),
    [mappings()](#sqlalchemy.ext.asyncio.AsyncResult.mappings), [one()](#sqlalchemy.ext.asyncio.AsyncResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncResult.partitions),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncResult.scalar), [scalar_one()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one_or_none),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncResult.scalars), [t](#sqlalchemy.ext.asyncio.AsyncResult.t),
    [tuples()](#sqlalchemy.ext.asyncio.AsyncResult.tuples), [unique()](#sqlalchemy.ext.asyncio.AsyncResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncResult.yield_per)'
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.ext.asyncio.AsyncResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncResult.first),
    [freeze()](#sqlalchemy.ext.asyncio.AsyncResult.freeze), [keys()](#sqlalchemy.ext.asyncio.AsyncResult.keys),
    [mappings()](#sqlalchemy.ext.asyncio.AsyncResult.mappings), [one()](#sqlalchemy.ext.asyncio.AsyncResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncResult.partitions),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncResult.scalar), [scalar_one()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one_or_none),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncResult.scalars), [t](#sqlalchemy.ext.asyncio.AsyncResult.t),
    [tuples()](#sqlalchemy.ext.asyncio.AsyncResult.tuples), [unique()](#sqlalchemy.ext.asyncio.AsyncResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncResult.yield_per)'
- en: '**Class signature**'
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")（`sqlalchemy.engine._WithKeys`，`sqlalchemy.ext.asyncio.AsyncCommon`）
- en: '[PRE372]'
  id: totrans-1833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: Return all rows in a list.
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有行的列表。
- en: Closes the result set after invocation. Subsequent invocations will return an
    empty list.
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用后关闭结果集。后续调用将返回空列表。
- en: 'Returns:'
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: 一列[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的列表。
- en: '[PRE373]'
  id: totrans-1838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon.close()` *方法的* `AsyncCommon`'
- en: Close this result.
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此结果。
- en: '[PRE374]'
  id: totrans-1841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon.closed` *属性的* `AsyncCommon`'
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: 代理底层结果对象的`.closed`属性，如果有的话，否则引发`AttributeError`。
- en: New in version 2.0.0b3.
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.0b3 版本中的新功能。
- en: '[PRE375]'
  id: totrans-1845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: Establish the columns that should be returned in each row.
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
  zh: 确定每行应返回的列。
- en: Refer to [`Result.columns()`](../../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的行为描述，请参阅同步 SQLAlchemy API 中的[`Result.columns()`](../../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns")。
- en: '[PRE376]'
  id: totrans-1848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: A synonym for the [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") method.
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all "sqlalchemy.ext.asyncio.AsyncResult.all")方法的同义词。'
- en: New in version 2.0.
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: '[PRE377]'
  id: totrans-1851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: Fetch many rows.
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多行。
- en: When all rows are exhausted, returns an empty list.
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都用尽时，返回空列表。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是为了与 SQLAlchemy 1.x.x 向后兼容而提供的。
- en: To fetch rows in groups, use the [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") method.
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: 要以分组方式获取行，请使用[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")方法。
- en: 'Returns:'
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: 一列[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象的列表。
- en: See also
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")'
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")'
- en: '[PRE378]'
  id: totrans-1860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Fetch one row.
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一行。
- en: When all rows are exhausted, returns None.
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有行都用尽时，返回`None`。
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是为了与 SQLAlchemy 1.x.x 向后兼容而提供的。
- en: To fetch the first row of a result only, use the [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") method. To iterate through all rows,
    iterate the [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object directly.
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 仅获取结果的第一行，请使用[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first")方法。要遍历所有行，请直接迭代[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象。
- en: 'Returns:'
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object if no filters are applied, or `None` if no rows remain.
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未应用任何过滤器，则为[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象，如果没有剩余行则为`None`。
- en: '[PRE379]'
  id: totrans-1867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: Fetch the first row or `None` if no row is present.
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行或如果不存在行则获取`None`。
- en: Closes the result set and discards remaining rows.
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭结果集并丢弃剩余行。
- en: Note
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar
    "sqlalchemy.ext.asyncio.AsyncResult.scalar") method, or combine [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first").
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回一个**行**，例如元组。要返回确切的单个标量值，即第一行的第一列，请使用[`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar
    "sqlalchemy.ext.asyncio.AsyncResult.scalar")方法，或者结合[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars")和[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first")。
- en: Additionally, in contrast to the behavior of the legacy ORM [`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") method, **no limit is applied** to the SQL query
    which was invoked to produce this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult"); for a DBAPI driver that buffers results
    in memory before yielding rows, all rows will be sent to the Python process and
    all but the first row will be discarded.
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与传统ORM [`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") 方法的行为相反，对于调用以产生此 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") 的 SQL 查询不会应用任何限制；对于在生成行之前在内存中缓冲结果的DBAPI驱动程序，所有行都将发送到Python进程，除了第一行之外的所有行都将被丢弃。
- en: See also
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query Unified with Core Select](../../changelog/migration_20.html#migration-20-unify-select)'
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM Query Unified with Core Select](../../changelog/migration_20.html#migration-20-unify-select)'
- en: 'Returns:'
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object, or None if no rows remain.
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象，如果没有剩余行则为 None。'
- en: See also
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar "sqlalchemy.ext.asyncio.AsyncResult.scalar")'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar "sqlalchemy.ext.asyncio.AsyncResult.scalar")'
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
- en: '[PRE380]'
  id: totrans-1880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: Return a callable object that will produce copies of this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") when invoked.
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，当调用时将产生此[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")的副本。
- en: The callable object returned is an instance of [`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult").
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的可调用对象是[`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult")的一个实例。
- en: This is used for result set caching. The method must be called on the result
    when it has been unconsumed, and calling the method will consume the result fully.
    When the [`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") is retrieved from a cache, it can be called
    any number of times where it will produce a new [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object each time against its stored set of rows.
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于结果集缓存。 当结果未被消耗时必须调用该方法，并且调用该方法将完全消耗结果。 当从缓存中检索到[`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult")时，可以任意多次调用它，每次都会针对其存储的行集产生一个新的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。
- en: See also
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](../session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](../session_events.html#do-orm-execute-re-executing) - 在ORM中实现结果集缓存的示例用法。'
- en: '[PRE381]'
  id: totrans-1886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.engine._WithKeys` *的* `sqlalchemy.engine._WithKeys.keys`
    *方法*'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代的视图，该视图生成每个[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")表示的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: 这些键可以表示核心语句返回的列的标签，或者orm执行返回的orm类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用Python `in` 运算符测试视图是否包含键，该运算符将测试视图中表示的字符串键，以及列对象等替代键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：返回的是一个键视图对象，而不是一个普通列表。
- en: '[PRE382]'
  id: totrans-1892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: Apply a mappings filter to returned rows, returning an instance of [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult").
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用映射过滤器，返回 [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") 的一个实例。
- en: When this filter is applied, fetching rows will return [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") objects instead of [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: 应用此过滤器时，获取行将返回 [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") 对象而不是 [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象。
- en: 'Returns:'
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    filtering object referring to the underlying [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 指向底层 [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象的新 [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    过滤对象。
- en: '[PRE383]'
  id: totrans-1897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: Return exactly one row or raise an exception.
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一行或引发异常。
- en: Raises [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound") if the result returns no rows, or [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows would be returned.
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有行则引发 [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")，如果返回多行则引发 [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: Note
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one") method, or combine [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one").
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法默认返回一个**行**，例如元组。要返回确切的一个标量值，即第一行的第一列，请使用 [`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one") 方法，或者组合 [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") 和 [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one")。
- en: New in version 1.4.
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Returns:'
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")。
- en: 'Raises:'
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")，[`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
- en: See also
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
- en: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
- en: '[`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one")'
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one")'
- en: '[PRE384]'
  id: totrans-1911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: Return at most one result or raise an exception.
  id: totrans-1912
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至多一个结果或引发异常。
- en: Returns `None` if the result has no rows. Raises [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows are returned.
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果没有行则返回 `None`。如果返回多行则引发 [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")。
- en: New in version 1.4.
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Returns:'
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The first [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    or `None` if no row is available.
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")或如果没有行可用则为`None`。
- en: 'Raises:'
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
- en: See also
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
- en: '[PRE385]'
  id: totrans-1922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: Iterate through sub-lists of rows of the size given.
  id: totrans-1923
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历给定大小的行子列表。
- en: 'An async iterator is returned:'
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个异步迭代器：
- en: '[PRE386]'
  id: totrans-1925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: Refer to [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") in the synchronous SQLAlchemy API for a
    complete behavioral description.
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[完整的行为描述](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")中的[`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")同步SQLAlchemy API。
- en: '[PRE387]'
  id: totrans-1927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: Fetch the first column of the first row, and close the result set.
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一行的第一列，并关闭结果集。
- en: Returns `None` if there are no rows to fetch.
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有要获取的行，则返回`None`。
- en: No validation is performed to test if additional rows remain.
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行任何验证来测试是否有额外的行剩余。
- en: After calling this method, the object is fully closed, e.g. the [`CursorResult.close()`](../../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method will have been called.
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法后，对象已完全关闭，例如已调用[`CursorResult.close()`](../../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close")方法。
- en: 'Returns:'
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a Python scalar value, or `None` if no rows remain.
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Python标量值，如果没有剩余行，则为`None`。
- en: '[PRE388]'
  id: totrans-1934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: Return exactly one scalar result or raise an exception.
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的标量结果或引发异常。
- en: This is equivalent to calling [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and then [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one").
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于调用[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars")然后调用[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one")。
- en: See also
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
- en: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
- en: '[PRE389]'
  id: totrans-1940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: Return exactly one scalar result or `None`.
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的标量结果或`None`。
- en: This is equivalent to calling [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and then [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none").
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于调用[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars")然后调用[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")。
- en: See also
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
- en: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
- en: '[PRE390]'
  id: totrans-1946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: Return an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    filtering object which will return single elements rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")过滤对象，该对象将返回单个元素而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: Refer to [`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[完整的行为描述](../../core/connections.html#sqlalchemy.engine.Result.scalars "sqlalchemy.engine.Result.scalars")中的[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")同步SQLAlchemy API。
- en: 'Parameters:'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**index** – integer or row key indicating the column to be fetched from each
    row, defaults to `0` indicating the first column.'
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
  zh: '**index** – 指示要从每行中提取的列的整数或行键，默认为`0`，表示第一列。'
- en: 'Returns:'
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a new [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    filtering object referring to this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")过滤对象，指的是此[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象。
- en: '[PRE391]'
  id: totrans-1953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“typed tuple”类型过滤器。
- en: The [`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    attribute is a synonym for calling the [`AsyncResult.tuples()`](#sqlalchemy.ext.asyncio.AsyncResult.tuples
    "sqlalchemy.ext.asyncio.AsyncResult.tuples") method.
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    属性是调用 [`AsyncResult.tuples()`](#sqlalchemy.ext.asyncio.AsyncResult.tuples "sqlalchemy.ext.asyncio.AsyncResult.tuples")
    方法的同义词。'
- en: New in version 2.0.
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0。
- en: '[PRE392]'
  id: totrans-1957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: Apply a “typed tuple” typing filter to returned rows.
  id: totrans-1958
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回的行应用“类型化元组”类型过滤器。
- en: This method returns the same [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object at runtime, however annotates as
    returning a [`AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult "sqlalchemy.ext.asyncio.AsyncTupleResult")
    object that will indicate to [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools that plain typed `Tuple` instances are returned rather than rows.
    This allows tuple unpacking and `__getitem__` access of [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects to by typed, for those cases where the statement
    invoked itself included typing information.
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在运行时返回相同的 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    对象，但注释为返回一个 [`AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult "sqlalchemy.ext.asyncio.AsyncTupleResult")
    对象，该对象将指示给 [**PEP 484**](https://peps.python.org/pep-0484/) 类型工具以提示普通的类型化 `Tuple`
    实例而不是行。这允许对 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象进行元组解包和 `__getitem__` 访问进行类型化，对于语句本身包含了类型信息的情况。
- en: New in version 2.0.
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0。
- en: 'Returns:'
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the `AsyncTupleResult` type at typing time.
  id: totrans-1962
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写时为 `AsyncTupleResult` 类型。
- en: See also
  id: totrans-1963
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    - shorter synonym'
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    - 更短的同义词'
- en: '[`Row.t`](../../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    - [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    version'
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row.t`](../../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    - [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    版本'
- en: '[PRE393]'
  id: totrans-1966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: Apply unique filtering to the objects returned by this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult").
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
  zh: 对由此 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    返回的对象应用唯一过滤。
- en: Refer to [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅同步 SQLAlchemy API 中的 [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")，获取完整的行为描述。
- en: '[PRE394]'
  id: totrans-1969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-1970
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略，一次提取 `num` 行。
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 方法是对 [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法的透传。请参阅该方法的文档以获取用法说明。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.40 中新增：- 添加了 [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 方法，使该方法在所有结果集实现中都可用。
- en: See also
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](../../core/connections.html#engine-stream-results) - 描述 [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../queryguide/api.html#orm-queryguide-yield-per) - 在[ORM
    查询指南](../queryguide/index.html)中'
- en: '[PRE395]'
  id: totrans-1977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: A wrapper for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns scalar values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
  zh: 用于返回标量值而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")值的[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")的包装器。
- en: The [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object is acquired by calling the [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") method.
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")方法获取[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")对象。
- en: Refer to the [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object in the synchronous SQLAlchemy API for
    a complete behavioral description.
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: 参考同步 SQLAlchemy API 中的[`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")对象以获取完整的行为描述。
- en: New in version 1.4.
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中新增。
- en: '**Members**'
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncScalarResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncScalarResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncScalarResult.closed), [fetchall()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchmany), [first()](#sqlalchemy.ext.asyncio.AsyncScalarResult.first),
    [one()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one), [one_or_none()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one_or_none),
    [partitions()](#sqlalchemy.ext.asyncio.AsyncScalarResult.partitions), [unique()](#sqlalchemy.ext.asyncio.AsyncScalarResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncScalarResult.yield_per)'
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.ext.asyncio.AsyncScalarResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncScalarResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncScalarResult.closed), [fetchall()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchmany), [first()](#sqlalchemy.ext.asyncio.AsyncScalarResult.first),
    [one()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one), [one_or_none()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one_or_none),
    [partitions()](#sqlalchemy.ext.asyncio.AsyncScalarResult.partitions), [unique()](#sqlalchemy.ext.asyncio.AsyncScalarResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncScalarResult.yield_per)'
- en: '**Class signature**'
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") (`sqlalchemy.ext.asyncio.AsyncCommon`)
  id: totrans-1985
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")（`sqlalchemy.ext.asyncio.AsyncCommon`）
- en: '[PRE396]'
  id: totrans-1986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: Return all scalar values in a list.
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: 返回列表中的所有标量值。
- en: Equivalent to [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") except that scalar values, rather than
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all "sqlalchemy.ext.asyncio.AsyncResult.all")，只是返回标量值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE397]'
  id: totrans-1989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon` *的* `close()` *方法*'
- en: Close this result.
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此结果。
- en: '[PRE398]'
  id: totrans-1992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon` *的* `closed` *属性*'
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
  zh: 代理底层结果对象的`.closed`属性，如果没有则引发`AttributeError`。
- en: New in version 2.0.0b3.
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.0b3中新增。
- en: '[PRE399]'
  id: totrans-1996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: A synonym for the [`AsyncScalarResult.all()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.all
    "sqlalchemy.ext.asyncio.AsyncScalarResult.all") method.
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncScalarResult.all()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.all "sqlalchemy.ext.asyncio.AsyncScalarResult.all")方法的同义词。'
- en: '[PRE400]'
  id: totrans-1998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: Fetch many objects.
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多个对象。
- en: Equivalent to [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany")，只是返回标量值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE401]'
  id: totrans-2001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: Fetch the first object or `None` if no object is present.
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一个对象或如果没有对象则返回`None`。
- en: Equivalent to [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")，但返回的是标量值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE402]'
  id: totrans-2004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: Return exactly one object or raise an exception.
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象或引发异常。
- en: Equivalent to [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one") except that scalar values, rather than
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")，但返回的是标量值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE403]'
  id: totrans-2007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: Return at most one object or raise an exception.
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至多一个对象或引发异常。
- en: Equivalent to [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")，但返回的是标量值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE404]'
  id: totrans-2010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: Iterate through sub-lists of elements of the size given.
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历给定大小的子元素子列表。
- en: Equivalent to [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")，但返回的是标量值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE405]'
  id: totrans-2013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: Apply unique filtering to the objects returned by this [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult").
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: 将唯一性过滤应用于此[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")返回的对象。
- en: See [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    for usage details.
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用详细信息，请参阅[`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique
    "sqlalchemy.ext.asyncio.AsyncResult.unique")。
- en: '[PRE406]'
  id: totrans-2016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略，一次提取`num`行。
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 方法是对 [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法的传递。有关使用说明，请参阅该方法的文档。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.40 版本中的新功能：- 添加了[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")，以便该方法在所有结果集实现上都可用。
- en: See also
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](../../core/connections.html#engine-stream-results) - 描述了[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")的核心行为。'
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../queryguide/api.html#orm-queryguide-yield-per) - 在[ORM
    查询指南](../queryguide/index.html)中'
- en: '[PRE407]'
  id: totrans-2024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: A wrapper for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns dictionary values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    的包装器，返回的是字典值，而不是 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    值。
- en: The [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    object is acquired by calling the [`AsyncResult.mappings()`](#sqlalchemy.ext.asyncio.AsyncResult.mappings
    "sqlalchemy.ext.asyncio.AsyncResult.mappings") method.
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`AsyncResult.mappings()`](#sqlalchemy.ext.asyncio.AsyncResult.mappings "sqlalchemy.ext.asyncio.AsyncResult.mappings")
    方法会获取 [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    对象。
- en: Refer to the [`MappingResult`](../../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") object in the synchronous SQLAlchemy API for
    a complete behavioral description.
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整行为描述，请参考同步 SQLAlchemy API 中的 [`MappingResult`](../../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") 对象。
- en: New in version 1.4.
  id: totrans-2028
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中引入的新功能。
- en: '**Members**'
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncMappingResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncMappingResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncMappingResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncMappingResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncMappingResult.first),
    [keys()](#sqlalchemy.ext.asyncio.AsyncMappingResult.keys), [one()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncMappingResult.partitions),
    [unique()](#sqlalchemy.ext.asyncio.AsyncMappingResult.unique), [yield_per()](#sqlalchemy.ext.asyncio.AsyncMappingResult.yield_per)'
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: '[all()](#sqlalchemy.ext.asyncio.AsyncMappingResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncMappingResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncMappingResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncMappingResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncMappingResult.first),
    [keys()](#sqlalchemy.ext.asyncio.AsyncMappingResult.keys), [one()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncMappingResult.partitions),
    [unique()](#sqlalchemy.ext.asyncio.AsyncMappingResult.unique), [yield_per()](#sqlalchemy.ext.asyncio.AsyncMappingResult.yield_per)'
- en: '**Class signature**'
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.asyncio.AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
- en: '[PRE408]'
  id: totrans-2033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: Return all rows in a list.
  id: totrans-2034
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有行的列表。
- en: Equivalent to [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于 [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all "sqlalchemy.ext.asyncio.AsyncResult.all")，不同之处在于返回的是
    [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    值，而不是 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象。
- en: '[PRE409]'
  id: totrans-2036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  id: totrans-2037
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon.close()` *方法的* `AsyncCommon`'
- en: Close this result.
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此结果。
- en: '[PRE410]'
  id: totrans-2039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `AsyncCommon.closed` *属性的* `AsyncCommon`'
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
  zh: 代理底层结果对象的 `.closed` 属性，如果有的话，否则会引发 `AttributeError`。
- en: New in version 2.0.0b3.
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本 2.0.0b3 中引入。
- en: '[PRE411]'
  id: totrans-2043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: Establish the columns that should be returned in each row.
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: 确定每行中应返回的列。
- en: '[PRE412]'
  id: totrans-2045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: A synonym for the [`AsyncMappingResult.all()`](#sqlalchemy.ext.asyncio.AsyncMappingResult.all
    "sqlalchemy.ext.asyncio.AsyncMappingResult.all") method.
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncMappingResult.all()`](#sqlalchemy.ext.asyncio.AsyncMappingResult.all
    "sqlalchemy.ext.asyncio.AsyncMappingResult.all") 方法的同义词。'
- en: '[PRE413]'
  id: totrans-2047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: Fetch many rows.
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
  zh: 获取多行。
- en: Equivalent to [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany")，但返回的是[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE414]'
  id: totrans-2050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: Fetch one object.
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一个对象。
- en: Equivalent to [`AsyncResult.fetchone()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchone
    "sqlalchemy.ext.asyncio.AsyncResult.fetchone") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.fetchone()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchone "sqlalchemy.ext.asyncio.AsyncResult.fetchone")，但返回的是[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE415]'
  id: totrans-2053
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: Fetch the first object or `None` if no object is present.
  id: totrans-2054
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一个对象或`None`（如果没有对象存在）。
- en: Equivalent to [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")，但返回的是[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE416]'
  id: totrans-2056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  id: totrans-2057
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.engine._WithKeys.keys` *方法的* `sqlalchemy.engine._WithKeys`'
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可迭代的视图，该视图会产生每个[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")所代表的字符串键。
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: 这些键可以表示核心语句返回的列的标签，或者ORM执行返回的ORM类的名称。
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
  zh: 该视图还可以使用Python的`in`运算符进行键包含性测试，该测试将同时测试视图中表示的字符串键，以及列对象等备用键。
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：返回一个键视图对象，而不是一个普通列表。
- en: '[PRE417]'
  id: totrans-2062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: Return exactly one object or raise an exception.
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个对象或引发异常。
- en: Equivalent to [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")，但返回的是[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE418]'
  id: totrans-2065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: Return at most one object or raise an exception.
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至多一个对象或引发异常。
- en: Equivalent to [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")，但返回的是[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE419]'
  id: totrans-2068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: Iterate through sub-lists of elements of the size given.
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历给定大小的子列表元素。
- en: Equivalent to [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  id: totrans-2070
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")，不同之处在于返回的是[`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping")值，而不是[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: '[PRE420]'
  id: totrans-2071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: Apply unique filtering to the objects returned by this [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult").
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
  zh: 对由此[`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")返回的对象应用唯一过滤。
- en: See [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    for usage details.
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")以获取使用详情。
- en: '[PRE421]'
  id: totrans-2074
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *方法的* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
  zh: 配置行提取策略，一次提取`num`行。
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") 方法是对[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法的一个传递。查看该方法的文档以获取使用说明。'
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.40 中新增：- 添加[`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per")，以便该方法在所有结果集实现上都可用
- en: See also
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](../../core/connections.html#engine-stream-results) - 描述了[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")的核心行为'
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](../queryguide/api.html#orm-queryguide-yield-per) - 在[ORM
    查询指南](../queryguide/index.html)中'
- en: '[PRE422]'
  id: totrans-2082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: A [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that’s typed as returning plain Python tuples instead of rows.
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")，其类型为返回普通的
    Python 元组而不是行。
- en: Since [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    acts like a tuple in every way already, this class is a typing only class, regular
    [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    is still used at runtime.
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")在所有方面都像一个元组，因此这个类只是一个类型类，运行时仍然使用常规的[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")。
- en: '**Class signature**'
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult
    "sqlalchemy.ext.asyncio.AsyncTupleResult") (`sqlalchemy.ext.asyncio.AsyncCommon`,
    `sqlalchemy.util.langhelpers.TypingOnly`)
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult
    "sqlalchemy.ext.asyncio.AsyncTupleResult")（`sqlalchemy.ext.asyncio.AsyncCommon`，`sqlalchemy.util.langhelpers.TypingOnly`）
- en: ORM Session API Documentation
  id: totrans-2087
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORM 会话 API 文档
- en: '| Object Name | Description |'
  id: totrans-2088
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2089
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [async_object_session](#sqlalchemy.ext.asyncio.async_object_session)(instance)
    | Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    to which the given instance belongs. |'
  id: totrans-2090
  prefs: []
  type: TYPE_TB
  zh: '| [async_object_session](#sqlalchemy.ext.asyncio.async_object_session)(实例)
    | 返回给定实例所属的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")。
    |'
- en: '| [async_scoped_session](#sqlalchemy.ext.asyncio.async_scoped_session) | Provides
    scoped management of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects. |'
  id: totrans-2091
  prefs: []
  type: TYPE_TB
  zh: '| [async_scoped_session](#sqlalchemy.ext.asyncio.async_scoped_session) | 提供[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象的作用域管理。 |'
- en: '| [async_session](#sqlalchemy.ext.asyncio.async_session)(session) | Return
    the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    which is proxying the given [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object, if any. |'
  id: totrans-2092
  prefs: []
  type: TYPE_TB
  zh: '| [async_session](#sqlalchemy.ext.asyncio.async_session)(会话) | 返回代理给定[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，如果有的话。 |'
- en: '| [async_sessionmaker](#sqlalchemy.ext.asyncio.async_sessionmaker) | A configurable
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    factory. |'
  id: totrans-2093
  prefs: []
  type: TYPE_TB
  zh: '| [async_sessionmaker](#sqlalchemy.ext.asyncio.async_sessionmaker) | 可配置的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")工厂。 |'
- en: '| [AsyncAttrs](#sqlalchemy.ext.asyncio.AsyncAttrs) | Mixin class which provides
    an awaitable accessor for all attributes. |'
  id: totrans-2094
  prefs: []
  type: TYPE_TB
  zh: '| [异步属性](#sqlalchemy.ext.asyncio.AsyncAttrs) | 提供所有属性的可等待访问器的混合类。 |'
- en: '| [AsyncSession](#sqlalchemy.ext.asyncio.AsyncSession) | Asyncio version of
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    |'
  id: totrans-2095
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncSession](#sqlalchemy.ext.asyncio.AsyncSession) | [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的Asyncio版本。 |'
- en: '| [AsyncSessionTransaction](#sqlalchemy.ext.asyncio.AsyncSessionTransaction)
    | A wrapper for the ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. |'
  id: totrans-2096
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncSessionTransaction](#sqlalchemy.ext.asyncio.AsyncSessionTransaction)
    | ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")对象的包装器。 |'
- en: '| [close_all_sessions](#sqlalchemy.ext.asyncio.close_all_sessions)() | Close
    all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions. |'
  id: totrans-2097
  prefs: []
  type: TYPE_TB
  zh: '| [close_all_sessions](#sqlalchemy.ext.asyncio.close_all_sessions)() | 关闭所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")会话。 |'
- en: '[PRE423]'
  id: totrans-2098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    to which the given instance belongs.
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定实例所属的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")。
- en: This function makes use of the sync-API function [`object_session`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session") to retrieve the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which refers to the given instance, and from there links
    it to the original [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数利用同步API函数[`object_session`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session")来检索引用给定实例的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，然后将其链接到原始的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")。
- en: If the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    has been garbage collected, the return value is `None`.
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")已被垃圾回收，返回值为`None`。
- en: This functionality is also available from the [`InstanceState.async_session`](../internals.html#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session") accessor.
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能也可以从[`InstanceState.async_session`](../internals.html#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session")访问器中使用。
- en: 'Parameters:'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**instance** – an ORM mapped instance'
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: '**实例** – 一个ORM映射实例'
- en: 'Returns:'
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object, or `None`.
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")对象，或`None`。
- en: New in version 1.4.18.
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.18中新增。
- en: '[PRE424]'
  id: totrans-2108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    which is proxying the given [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object, if any.
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回代理给定[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，如果有的话。
- en: 'Parameters:'
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**session** – a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    instance.'
  id: totrans-2111
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话** – 一个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")实例。'
- en: 'Returns:'
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    instance, or `None`.
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")实例，或`None`。
- en: New in version 1.4.18.
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.18中的新功能。
- en: '[PRE425]'
  id: totrans-2115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")会话。
- en: New in version 2.0.23.
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.23中的新功能。
- en: See also
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`close_all_sessions()`'
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
  zh: '`close_all_sessions()`'
- en: '[PRE426]'
  id: totrans-2120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: A configurable [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    factory.
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可配置的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")工厂。
- en: The [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    factory works in the same way as the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") factory, to generate new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects when called, creating them given
    the configurational arguments established here.
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: '[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")工厂的工作方式与[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")工厂相同，当调用时生成新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象，根据此处建立的配置参数创建它们。'
- en: 'e.g.:'
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE427]'
  id: totrans-2124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: The [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    is useful so that different parts of a program can create new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects with a fixed configuration established
    up front. Note that [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects may also be instantiated directly when not using [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")很有用，因此程序的不同部分可以使用预先建立的固定配置创建新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象。请注意，当不使用[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")时，也可以直接实例化[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象。'
- en: 'New in version 2.0: [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") provides a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") class that’s dedicated to the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") object, including pep-484 typing support.'
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能：[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")提供了一个专门用于[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象的[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")类，包括pep-484类型支持。
- en: See also
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Synopsis - ORM](#asyncio-orm) - shows example use'
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
  zh: '[概要 - ORM](#asyncio-orm) - 显示示例用法'
- en: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    - general overview of the'
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    - 一般概述'
- en: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    architecture'
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")架构'
- en: '[Opening and Closing a Session](../session_basics.html#session-getting) - introductory
    text on creating sessions using [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").'
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: '[打开和关闭会话](../session_basics.html#session-getting) - 创建会话的入门文本，使用[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")。'
- en: '**Members**'
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__init__),
    [begin()](#sqlalchemy.ext.asyncio.async_sessionmaker.begin), [configure()](#sqlalchemy.ext.asyncio.async_sessionmaker.configure)'
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__init__),
    [begin()](#sqlalchemy.ext.asyncio.async_sessionmaker.begin), [configure()](#sqlalchemy.ext.asyncio.async_sessionmaker.configure)'
- en: '**Class signature**'
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") (`typing.Generic`)
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") (`typing.Generic`)
- en: '[PRE428]'
  id: totrans-2136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: Produce a new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object using the configuration established in this [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")中建立的配置生成一个新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象。
- en: 'In Python, the `__call__` method is invoked on an object when it is “called”
    in the same way as a function:'
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，当对象“被调用”时，将调用`__call__`方法，方式与函数相同：
- en: '[PRE429]'
  id: totrans-2139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-2140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: Construct a new [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")。
- en: All arguments here except for `class_` correspond to arguments accepted by [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") directly. See the [`AsyncSession.__init__()`](#sqlalchemy.ext.asyncio.AsyncSession.__init__
    "sqlalchemy.ext.asyncio.AsyncSession.__init__") docstring for more details on
    parameters.
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的所有参数（除了`class_`）都对应于[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")直接接受的参数。有关参数的更多详细信息，请参阅[`AsyncSession.__init__()`](#sqlalchemy.ext.asyncio.AsyncSession.__init__
    "sqlalchemy.ext.asyncio.AsyncSession.__init__")文档字符串。
- en: '[PRE431]'
  id: totrans-2143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: Produce a context manager that both provides a new `AsyncSession` as well as
    a transaction that commits.
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个上下文管理器，既提供一个新的`AsyncSession`，又提供一个提交事务。
- en: 'e.g.:'
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE432]'
  id: totrans-2146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-2147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: (Re)configure the arguments for this async_sessionmaker.
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: (Re)配置此`async_sessionmaker`的参数。
- en: 'e.g.:'
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE434]'
  id: totrans-2150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-2151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: Provides scoped management of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects.
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: 提供对[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")对象的作用域管理。
- en: See the section [Using asyncio scoped session](#asyncio-scoped-session) for
    usage details.
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[使用 asyncio scoped session](#asyncio-scoped-session)部分以获取详细用法。
- en: New in version 1.4.19.
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4.19起新增。
- en: '**Members**'
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.ext.asyncio.async_scoped_session.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_scoped_session.__init__),
    [aclose()](#sqlalchemy.ext.asyncio.async_scoped_session.aclose), [add()](#sqlalchemy.ext.asyncio.async_scoped_session.add),
    [add_all()](#sqlalchemy.ext.asyncio.async_scoped_session.add_all), [autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.autoflush),
    [begin()](#sqlalchemy.ext.asyncio.async_scoped_session.begin), [begin_nested()](#sqlalchemy.ext.asyncio.async_scoped_session.begin_nested),
    [bind](#sqlalchemy.ext.asyncio.async_scoped_session.bind), [close()](#sqlalchemy.ext.asyncio.async_scoped_session.close),
    [close_all()](#sqlalchemy.ext.asyncio.async_scoped_session.close_all), [commit()](#sqlalchemy.ext.asyncio.async_scoped_session.commit),
    [configure()](#sqlalchemy.ext.asyncio.async_scoped_session.configure), [connection()](#sqlalchemy.ext.asyncio.async_scoped_session.connection),
    [delete()](#sqlalchemy.ext.asyncio.async_scoped_session.delete), [deleted](#sqlalchemy.ext.asyncio.async_scoped_session.deleted),
    [dirty](#sqlalchemy.ext.asyncio.async_scoped_session.dirty), [execute()](#sqlalchemy.ext.asyncio.async_scoped_session.execute),
    [expire()](#sqlalchemy.ext.asyncio.async_scoped_session.expire), [expire_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expire_all),
    [expunge()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge), [expunge_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge_all),
    [flush()](#sqlalchemy.ext.asyncio.async_scoped_session.flush), [get()](#sqlalchemy.ext.asyncio.async_scoped_session.get),
    [get_bind()](#sqlalchemy.ext.asyncio.async_scoped_session.get_bind), [get_one()](#sqlalchemy.ext.asyncio.async_scoped_session.get_one),
    [identity_key()](#sqlalchemy.ext.asyncio.async_scoped_session.identity_key), [identity_map](#sqlalchemy.ext.asyncio.async_scoped_session.identity_map),
    [info](#sqlalchemy.ext.asyncio.async_scoped_session.info), [invalidate()](#sqlalchemy.ext.asyncio.async_scoped_session.invalidate),
    [is_active](#sqlalchemy.ext.asyncio.async_scoped_session.is_active), [is_modified()](#sqlalchemy.ext.asyncio.async_scoped_session.is_modified),
    [merge()](#sqlalchemy.ext.asyncio.async_scoped_session.merge), [new](#sqlalchemy.ext.asyncio.async_scoped_session.new),
    [no_autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.no_autoflush), [object_session()](#sqlalchemy.ext.asyncio.async_scoped_session.object_session),
    [refresh()](#sqlalchemy.ext.asyncio.async_scoped_session.refresh), [remove()](#sqlalchemy.ext.asyncio.async_scoped_session.remove),
    [reset()](#sqlalchemy.ext.asyncio.async_scoped_session.reset), [rollback()](#sqlalchemy.ext.asyncio.async_scoped_session.rollback),
    [scalar()](#sqlalchemy.ext.asyncio.async_scoped_session.scalar), [scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.scalars),
    [session_factory](#sqlalchemy.ext.asyncio.async_scoped_session.session_factory),
    [stream()](#sqlalchemy.ext.asyncio.async_scoped_session.stream), [stream_scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.stream_scalars)'
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.ext.asyncio.async_scoped_session.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_scoped_session.__init__),
    [aclose()](#sqlalchemy.ext.asyncio.async_scoped_session.aclose), [add()](#sqlalchemy.ext.asyncio.async_scoped_session.add),
    [add_all()](#sqlalchemy.ext.asyncio.async_scoped_session.add_all), [autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.autoflush),
    [begin()](#sqlalchemy.ext.asyncio.async_scoped_session.begin), [begin_nested()](#sqlalchemy.ext.asyncio.async_scoped_session.begin_nested),
    [bind](#sqlalchemy.ext.asyncio.async_scoped_session.bind), [close()](#sqlalchemy.ext.asyncio.async_scoped_session.close),
    [close_all()](#sqlalchemy.ext.asyncio.async_scoped_session.close_all), [commit()](#sqlalchemy.ext.asyncio.async_scoped_session.commit),
    [configure()](#sqlalchemy.ext.asyncio.async_scoped_session.configure), [connection()](#sqlalchemy.ext.asyncio.async_scoped_session.connection),
    [delete()](#sqlalchemy.ext.asyncio.async_scoped_session.delete), [deleted](#sqlalchemy.ext.asyncio.async_scoped_session.deleted),
    [dirty](#sqlalchemy.ext.asyncio.async_scoped_session.dirty), [execute()](#sqlalchemy.ext.asyncio.async_scoped_session.execute),
    [expire()](#sqlalchemy.ext.asyncio.async_scoped_session.expire), [expire_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expire_all),
    [expunge()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge), [expunge_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge_all),
    [flush()](#sqlalchemy.ext.asyncio.async_scoped_session.flush), [get()](#sqlalchemy.ext.asyncio.async_scoped_session.get),
    [get_bind()](#sqlalchemy.ext.asyncio.async_scoped_session.get_bind), [get_one()](#sqlalchemy.ext.asyncio.async_scoped_session.get_one),
    [identity_key()](#sqlalchemy.ext.asyncio.async_scoped_session.identity_key), [identity_map](#sqlalchemy.ext.asyncio.async_scoped_session.identity_map),
    [info](#sqlalchemy.ext.asyncio.async_scoped_session.info), [invalidate()](#sqlalchemy.ext.asyncio.async_scoped_session.invalidate),
    [is_active](#sqlalchemy.ext.asyncio.async_scoped_session.is_active), [is_modified()](#sqlalchemy.ext.asyncio.async_scoped_session.is_modified),
    [merge()](#sqlalchemy.ext.asyncio.async_scoped_session.merge), [new](#sqlalchemy.ext.asyncio.async_scoped_session.new),
    [no_autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.no_autoflush), [object_session()](#sqlalchemy.ext.asyncio.async_scoped_session.object_session),
    [refresh()](#sqlalchemy.ext.asyncio.async_scoped_session.refresh), [remove()](#sqlalchemy.ext.asyncio.async_scoped_session.remove),
    [reset()](#sqlalchemy.ext.asyncio.async_scoped_session.reset), [rollback()](#sqlalchemy.ext.asyncio.async_scoped_session.rollback),
    [scalar()](#sqlalchemy.ext.asyncio.async_scoped_session.scalar), [scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.scalars),
    [session_factory](#sqlalchemy.ext.asyncio.async_scoped_session.session_factory),
    [stream()](#sqlalchemy.ext.asyncio.async_scoped_session.stream), [stream_scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.stream_scalars)'
- en: '**Class signature**'
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") (`typing.Generic`)
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session")（`typing.Generic`）
- en: '[PRE436]'
  id: totrans-2159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: Return the current [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession"),
    creating it using the [`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") if not present.
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")，如果不存在则使用[`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory")创建它。
- en: 'Parameters:'
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Keyword arguments will be passed to the [`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") callable, if an existing [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is not present. If the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is present and keyword arguments have been
    passed, [`InvalidRequestError`](../../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.'
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 如果不存在现有的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")，关键字参数将传递给[`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory")可调用对象。如果存在[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")并且传递了关键字参数，则会引发[`InvalidRequestError`](../../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。'
- en: '[PRE437]'
  id: totrans-2163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: Construct a new [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session").
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session")。
- en: 'Parameters:'
  id: totrans-2165
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session_factory` – a factory to create new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") instances. This is usually, but not necessarily,
    an instance of [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").'
  id: totrans-2166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session_factory` – 用于创建新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")实例的工厂。通常情况下，但不一定，是[`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")的一个实例。'
- en: '`scopefunc` – function which defines the current scope. A function such as
    `asyncio.current_task` may be useful here.'
  id: totrans-2167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopefunc` – 定义当前范围的函数。例如`asyncio.current_task`可能在这里有用。'
- en: '[PRE438]'
  id: totrans-2168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: A synonym for [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close").
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")的同义词。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: The [`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")
    name is specifically to support the Python standard library `@contextlib.aclosing`
    context manager function.
  id: totrans-2171
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")名称专门用于支持Python标准库的`@contextlib.aclosing`上下文管理器函数。'
- en: New in version 2.0.20.
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.20中新增。
- en: '[PRE439]'
  id: totrans-2173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: Place an object into this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个对象放入这个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2175
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Objects that are in the [transient](../../glossary.html#term-transient) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [pending](../../glossary.html#term-pending)
    state, until the next flush, at which point they will move to the [persistent](../../glossary.html#term-persistent)
    state.
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[瞬态](../../glossary.html#term-transient)状态的对象将移动到[挂起](../../glossary.html#term-pending)状态，直到下一次刷新，在此时它们将移动到[持久](../../glossary.html#term-persistent)状态。
- en: Objects that are in the [detached](../../glossary.html#term-detached) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [persistent](../../glossary.html#term-persistent)
    state directly.
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[分离](../../glossary.html#term-detached)状态的对象将直接移动到[持久](../../glossary.html#term-persistent)状态。
- en: If the transaction used by the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务被回滚，则传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")时处于瞬态的对象将被移回[瞬态](../../glossary.html#term-transient)状态，并且不再存在于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](../session_basics.html#session-adding) - 在[使用会话的基础知识](../session_basics.html#id1)'
- en: '[PRE440]'
  id: totrans-2183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: Add the given collection of instances to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的实例集合添加到这个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: See the documentation for [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  id: totrans-2187
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")的文档以获取一般行为描述。
- en: See also
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  id: totrans-2189
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](../session_basics.html#session-adding) - 在[使用会话的基础知识](../session_basics.html#id1)'
- en: '[PRE441]'
  id: totrans-2191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的`Session.autoflush`属性的代理。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: '[PRE442]'
  id: totrans-2194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object.
  id: totrans-2195
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: 'The underlying [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will perform the “begin” action when the [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object is entered:'
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: 当进入[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象时，底层的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将执行“begin”操作：
- en: '[PRE443]'
  id: totrans-2198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: Note that database IO will not normally occur when the session-level transaction
    is begun, as database transactions begin on an on-demand basis. However, the begin
    block is async to accommodate for a [`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event hook that may perform
    IO.
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当会话级事务开始时，通常不会发生数据库IO，因为数据库事务是按需开始的。但是，`begin`块是异步的，以适应可能执行IO的[`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")事件钩子。
- en: For a general description of ORM begin, see [`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin").
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: 有关ORM开始的一般描述，请参阅[`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")。
- en: '[PRE444]'
  id: totrans-2201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object which will begin a “nested”
    transaction, e.g. SAVEPOINT.
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将开始“嵌套”事务（例如SAVEPOINT）的[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Behavior is the same as that of [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin").
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与[`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin "sqlalchemy.ext.asyncio.AsyncSession.begin")相同。
- en: For a general description of ORM begin nested, see [`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested").
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: 有关ORM嵌套开始的一般描述，请参阅[`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。
- en: See also
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../../dialects/sqlite.html#aiosqlite-serializable)
    - special workarounds required with the SQLite asyncio driver in order for SAVEPOINT
    to work correctly.'
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: '[可序列化隔离/保存点/事务DDL（asyncio版本）](../../dialects/sqlite.html#aiosqlite-serializable)
    - 在SQLite asyncio驱动程序中为了使SAVEPOINT正常工作而需要特殊的解决方法。'
- en: '[PRE445]'
  id: totrans-2208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: Proxy for the `AsyncSession.bind` attribute on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的`AsyncSession.bind`属性。
- en: '[PRE446]'
  id: totrans-2210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: Close out the transactional resources and ORM objects used by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")使用的事务资源和ORM对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: See also
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - main documentation for “close”'
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - “close”的主要文档'
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](../session_basics.html#session-closing) - 关于 [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") 和 [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset
    "sqlalchemy.ext.asyncio.AsyncSession.reset") 语义的详细信息。'
- en: '[PRE447]'
  id: totrans-2216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭所有 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    会话。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类，为 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类做代理。
- en: 'Deprecated since version 2.0: The [`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") method is deprecated and will
    be removed in a future release. Please refer to [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions").'
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 弃用：[`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") 方法已弃用，并将在将来的版本中删除。请参考 [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions")。
- en: '[PRE448]'
  id: totrans-2220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: Commit the current transaction in progress.
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: 提交当前进行中的事务。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类，为 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类做代理。
- en: See also
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - main documentation for “commit”'
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - “commit” 的主要文档'
- en: '[PRE449]'
  id: totrans-2225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: reconfigure the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") used by this [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
  zh: 重新配置由此 [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    使用的 [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")。
- en: See [`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure")。
- en: '[PRE450]'
  id: totrans-2228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: Return a [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object corresponding to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象的事务状态对应的 [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类，为 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类做代理。
- en: This method may also be used to establish execution options for the database
    connection used by the current transaction.
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法还可用于为当前事务所使用的数据库连接建立执行选项。
- en: 'New in version 1.4.24: Added **kw arguments which are passed through to the
    underlying [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") method.'
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能，版本 1.4.24：添加了传递给底层 [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") 方法的 **kw 参数。
- en: See also
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - main documentation for “connection”'
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - “connection” 的主要文档'
- en: '[PRE451]'
  id: totrans-2235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: Mark an instance as deleted.
  id: totrans-2236
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个实例标记为已删除。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理。
- en: The database delete operation occurs upon `flush()`.
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库删除操作发生在`flush()`时。
- en: As this operation may need to cascade along unloaded relationships, it is awaitable
    to allow for those queries to take place.
  id: totrans-2239
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此操作可能需要沿着未加载的关系级联，因此它是可等待的，以允许进行这些查询。
- en: See also
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - main documentation for delete'
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - 删除的主要文档'
- en: '[PRE452]'
  id: totrans-2242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: The set of all instances marked as ‘deleted’ within this `Session`
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为“已删除”的所有实例的集合。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: '[PRE453]'
  id: totrans-2246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: The set of all persistent instances considered dirty.
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
  zh: 被认为是脏的所有持久实例的集合。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: 'E.g.:'
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE454]'
  id: totrans-2251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: Instances are considered dirty when they were modified but not deleted.
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例被修改但未被删除时，被视为脏。
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此“脏”计算是“乐观的”；大多数属性设置或集合修改操作都会将实例标记为“脏”，并将其放入此集合中，即使属性的值没有净变化。在flush时，将每个属性的值与其先前保存的值进行比较，如果没有净变化，将不会发生SQL操作（这是一种更昂贵的操作，因此仅在flush时执行）。
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实例的属性是否有可操作的净变化，请使用[`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")方法。
- en: '[PRE455]'
  id: totrans-2255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: Execute a statement and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回一个缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理。
- en: See also
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - main documentation for execute'
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - 执行的主要文档'
- en: '[PRE456]'
  id: totrans-2260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: Expire the attributes on an instance.
  id: totrans-2261
  prefs: []
  type: TYPE_NORMAL
  zh: 使实例的属性过期。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  id: totrans-2264
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例的属性标记为过时。下次访问过期属性时，将向[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的值相同的值，而不管该事务之外的数据库状态发生的变化。
- en: To expire all objects in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use `Session.expire_all()`.
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时使[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的所有对象过期，请使用`Session.expire_all()`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire()` only makes sense
    for the specific case that a non-ORM SQL statement was emitted in the current
    transaction.
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`Session.rollback()`或`Session.commit()`方法时，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的默认行为是使所有状态过期，以便为新事务加载新状态。因此，仅在当前事务中发出非ORM SQL语句的特定情况下调用`Session.expire()`才有意义。
- en: 'Parameters:'
  id: totrans-2267
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – The instance to be refreshed.'
  id: totrans-2268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要刷新的实例。'
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  id: totrans-2269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选的字符串属性名称列表，指示要过期的属性子集。'
- en: See also
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  id: totrans-2271
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](../session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-2272
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-2273
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE457]'
  id: totrans-2275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: Expires all persistent instances within this Session.
  id: totrans-2276
  prefs: []
  type: TYPE_NORMAL
  zh: 使此Session中的所有持久实例过期。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的代理，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  id: totrans-2279
  prefs: []
  type: TYPE_NORMAL
  zh: 当持久实例上的任何属性下次被访问时，将使用[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的相同值，而不管该事务之外的数据库状态的变化。
- en: To expire individual objects and individual attributes on those objects, use
    `Session.expire()`.
  id: totrans-2280
  prefs: []
  type: TYPE_NORMAL
  zh: 要使单个对象和这些对象上的单个属性过期，请使用`Session.expire()`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire_all()` is not usually
    needed, assuming the transaction is isolated.
  id: totrans-2281
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的默认行为是在调用`Session.rollback()`或`Session.commit()`方法时使所有状态过期，以便为新事务加载新状态。因此，通常不需要调用`Session.expire_all()`，假设事务是隔离的。'
- en: See also
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  id: totrans-2283
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](../session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-2284
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE458]'
  id: totrans-2287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: Remove the instance from this `Session`.
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中删除实例。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放对实例的所有内部引用。将根据*expunge*级联规则应用级联。
- en: '[PRE459]'
  id: totrans-2292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: Remove all object instances from this `Session`.
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中删除所有对象实例。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的代理类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在此`Session`中的所有对象上调用`expunge(obj)`。
- en: '[PRE460]'
  id: totrans-2297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: Flush all the object changes to the database.
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有对象更改刷新到数据库。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: See also
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - main documentation for flush'
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - flush的主要文档'
- en: '[PRE461]'
  id: totrans-2302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果找不到则返回`None`。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2304
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: See also
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - main documentation for get'
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - get的主要文档'
- en: '[PRE462]'
  id: totrans-2307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: Return a “bind” to which the synchronous proxied [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个“绑定”，将同步代理的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")绑定到其中。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类的代理。
- en: Unlike the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, this method is currently **not** used
    by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    in any way in order to resolve engines for requests.
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法不同，此方法目前**不**以任何方式被[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")使用，以解析请求的引擎。
- en: Note
  id: totrans-2311
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method proxies directly to the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, however is currently **not** useful
    as an override target, in contrast to that of the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method. The example below illustrates how to
    implement custom [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes that work with [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法直接代理到[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法，但目前**不**作为覆盖目标有用，与[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法相比。下面的示例说明了如何实现与[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")和[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")配合使用的自定义[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方案。
- en: 'The pattern introduced at [Custom Vertical Partitioning](../persistence_techniques.html#session-custom-partitioning)
    illustrates how to apply a custom bind-lookup scheme to a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") given a set of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. To apply a corresponding [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") implementation for use with a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") objects, continue to subclass [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and apply it to [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") using [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession"). The inner method must continue to return
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, which can be acquired from a [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") using the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute:'
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
  zh: 在[自定义垂直分区](../persistence_techniques.html#session-custom-partitioning)中介绍的模式说明了如何将自定义绑定查找方案应用于给定一组[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。要为与[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")和[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")对象一起使用的[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")实现，继续对[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")进行子类化，并使用[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession")将其应用于[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")。内部方法必须继续返回[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")实例，可以从[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")使用[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")属性获取：
- en: '[PRE463]'
  id: totrans-2314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: The [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method is called in a non-asyncio, implicitly
    non-blocking context in the same manner as ORM event hooks and functions that
    are invoked via [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync"), so routines that wish to run
    SQL commands inside of [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") can continue to do so using blocking-style
    code, which will be translated to implicitly async calls at the point of invoking
    IO on the database drivers.
  id: totrans-2315
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法在非异步、隐式非阻塞的上下文中调用，方式与ORM事件钩子和通过[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")调用的函数相同，因此希望在[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")内运行SQL命令的例程可以继续使用阻塞式代码，这将在调用数据库驱动程序的IO时转换为隐式异步调用。'
- en: '[PRE464]'
  id: totrans-2316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: Return an instance based on the given primary key identifier, or raise an exception
    if not found.
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果未找到则引发异常。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发`sqlalchemy.orm.exc.NoResultFound`异常。
- en: '..versionadded: 2.0.22'
  id: totrans-2320
  prefs: []
  type: TYPE_NORMAL
  zh: '..versionadded: 2.0.22'
- en: See also
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - main documentation for get_one'
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - get_one的主要文档'
- en: '[PRE465]'
  id: totrans-2323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: Return an identity key.
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
  zh: 返���一个标识键。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2325
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: This is an alias of [`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE466]'
  id: totrans-2328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: Proxy for the [`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")属性，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2330
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: '[PRE467]'
  id: totrans-2331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: A user-modifiable dictionary.
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可修改的字典。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2333
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") constructor or factory methods. The dictionary
    here is always local to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-2335
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`info`参数来填充此字典的初始值，该参数可以传递给[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")构造函数或[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")构造函数或工厂方法。此处的字典始终局限于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，并且可以独立于所有其他[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象进行修改。
- en: '[PRE468]'
  id: totrans-2336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: Close this Session, using connection invalidation.
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
  zh: 使用连接失效关闭此Session。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2338
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: For a complete description, see [`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate").
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: 完整描述，请参阅[`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")。
- en: '[PRE469]'
  id: totrans-2340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不处于“部分回滚”状态，则为True。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: 'Changed in version 1.4: The [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  id: totrans-2344
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中更改：[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不再立即开始新事务，因此在首次实例化[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，此属性将为False。
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
  zh: “部分回滚”状态通常表示[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的刷新过程失败，必须发出[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法以完全回滚事务。
- en: If this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  id: totrans-2346
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")根本不在事务中，则首次使用时[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将自动开始，因此在这种情况下，[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")将返回True。
- en: Otherwise, if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will also return True.
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")在事务中，并且该事务在内部未回滚，则[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")也将返回True。
- en: See also
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../../faq/sessions.html#faq-session-rollback)'
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
  zh: '[“此会话的事务由于在刷新期间发生的先前异常而回滚。”（或类似）](../../faq/sessions.html#faq-session-rollback)'
- en: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
- en: '[PRE470]'
  id: totrans-2351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: Return `True` if the given instance has locally modified attributes.
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的实例具有本地修改的属性，则返回`True`。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类。
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检索实例上每个受检属性的历史记录，并将当前值与先前提交的值进行比较（如果有）。
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是检查[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    集合中是否存在给定实例的更昂贵和准确的版本；对每个属性的净“脏”状态进行全面测试。
- en: 'E.g.:'
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE471]'
  id: totrans-2358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: 'A few caveats to this method apply:'
  id: totrans-2359
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有一些注意事项：
- en: Instances present in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  id: totrans-2360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    集合中存在的实例在使用此方法进行测试时可能会报告 `False`。这是因为对象可能已通过属性突变接收到更改事件，从而将其放入 [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")，但最终状态与从数据库加载的状态相同，因此在此处没有净变化。
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  id: totrans-2361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量属性在新值应用时可能没有记录先前设置的值，如果属性在收到新值时未加载或已过期，则假定属性发生了更改，即使最终与数据库值没有净变化。在大多数情况下，当发生设置事件时，SQLAlchemy
    不需要“旧”值，因此如果旧值不存在，则会跳过 SQL 调用的开销，这是基于标量值通常需要进行更新的假设，而在极少数情况下，与发出防御性 SELECT 相比，平均成本更低。
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅当属性容器的 `active_history` 标志设置为 `True` 时，才无条件地在设置时获取“旧”值。此标志通常设置为主键属性和不是简单的一对多的标量对象引用。要为任意映射列设置此标志，请使用
    [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    的 `active_history` 参数。
- en: 'Parameters:'
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – mapped instance to be tested for pending changes.'
  id: totrans-2364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要测试是否存在待处理更改的映射实例。'
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  id: totrans-2365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_collections` – 指示是否应在操作中包含多值集合。将其设置为 `False` 是一种检测仅基于本地列的属性（即标量列或一对多外键）的方法，这将导致在刷新时对此实例进行更新。'
- en: '[PRE472]'
  id: totrans-2366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: Copy the state of a given instance into a corresponding instance within this
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-2367
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定实例的状态复制到此 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    中的相应实例。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类的 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的代理。
- en: See also
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - main documentation for merge'
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - 合并的主要文档'
- en: '[PRE473]'
  id: totrans-2371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: The set of all instances marked as ‘new’ within this `Session`.
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 `Session` 中标记为“新”的所有实例的集合。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类提供代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，为[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类提供代理。
- en: '[PRE474]'
  id: totrans-2375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: Return a context manager that disables autoflush.
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个上下文管理器，用于禁用自动刷新。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类提供代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，为[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类提供代理。
- en: 'e.g.:'
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE475]'
  id: totrans-2380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: 在`with:`块中进行的操作不会受到查询访问时的刷新影响。这在初始化涉及现有数据库查询的一系列对象时很有用，其中未完成的对象不应立即被刷新。
- en: '[PRE476]'
  id: totrans-2382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: Return the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象所属的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类提供代理。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类，为[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类提供代理。
- en: This is an alias of [`object_session()`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`object_session()`](../session_api.html#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")的别名。
- en: '[PRE477]'
  id: totrans-2387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: Expire and refresh the attributes on the given instance.
  id: totrans-2388
  prefs: []
  type: TYPE_NORMAL
  zh: 使给定实例上的属性过期并刷新。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类，为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")类提供代理。
- en: A query will be issued to the database and all attributes will be refreshed
    with their current database value.
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: 将向数据库发出查询，并刷新所有属性以获取其当前数据库值。
- en: This is the async version of the [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. See that method for a complete description
    of all options.
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")方法的异步版本。查看该方法以获取所有选项的完整描述。
- en: See also
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - main documentation for refresh'
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - 刷新的主要文档'
- en: '[PRE478]'
  id: totrans-2394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Dispose of the current [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), if present.
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
  zh: 处理当前的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")，如果存在的话。
- en: Different from scoped_session’s remove method, this method would use await to
    wait for the close method of AsyncSession.
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
  zh: 不同于 scoped_session 的 remove 方法，此方法将使用 await 等待 AsyncSession 的 close 方法。
- en: '[PRE479]'
  id: totrans-2397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    使用的事务资源和 ORM 对象，将会将 session 重置为其初始状态。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类的 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的代理。
- en: New in version 2.0.22.
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.22。
- en: See also
  id: totrans-2401
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - main documentation for “reset”'
  id: totrans-2402
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - “reset” 的主要文档'
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](../session_basics.html#session-closing) - 关于 [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") 和 [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset
    "sqlalchemy.ext.asyncio.AsyncSession.reset") 语义的详细信息。'
- en: '[PRE480]'
  id: totrans-2404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: Rollback the current transaction in progress.
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前进行中的事务。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类的 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的代理。
- en: See also
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - main documentation for “rollback”'
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - “rollback” 的主要文档'
- en: '[PRE481]'
  id: totrans-2409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: Execute a statement and return a scalar result.
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类的 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的代理。
- en: See also
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - main documentation for scalar'
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - scalar 的主要文档'
- en: '[PRE482]'
  id: totrans-2414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: Execute a statement and return scalar results.
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2416
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.scoping.async_scoped_session")
    类的 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的代理。
- en: 'Returns:'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object
  id: totrans-2418
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 对象
- en: 'New in version 1.4.24: Added [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")'
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中新增了 [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")
- en: 'New in version 1.4.26: Added [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")'
  id: totrans-2420
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.26 中新增了 [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")
- en: See also
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - scalars 的主要文档'
- en: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - streaming version'
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - 流式版本'
- en: '[PRE483]'
  id: totrans-2424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: The session_factory provided to __init__ is stored in this attribute and may
    be accessed at a later time. This can be useful when a new non-scoped [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is needed.
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给`__init__`的session_factory存储在此属性中，稍后可以访问。当需要新的非作用域[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")时，这可能很有用。
- en: '[PRE484]'
  id: totrans-2426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: Execute a statement and return a streaming [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回流式[`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")对象。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2428
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: '[PRE485]'
  id: totrans-2429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: Execute a statement and return a stream of scalar results.
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果流。
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的代理，代表[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session")类。
- en: 'Returns:'
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")对象
- en: New in version 1.4.24.
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.24 中的新功能。
- en: See also
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - 标量的主要文档'
- en: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - non streaming version'
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - 非流式版本'
- en: '[PRE486]'
  id: totrans-2438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: Mixin class which provides an awaitable accessor for all attributes.
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
  zh: 提供所有属性的可等待访问器的mixin类。
- en: 'E.g.:'
  id: totrans-2440
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE487]'
  id: totrans-2441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: 'In the above example, the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin is applied to the declarative `Base`
    class where it takes effect for all subclasses. This mixin adds a single new attribute
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") to all classes, which will
    yield the value of any attribute as an awaitable. This allows attributes which
    may be subject to lazy loading or deferred / unexpiry loading to be accessed such
    that IO can still be emitted:'
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin 应用于声明性`Base`类，对所有子类生效。此mixin为所有类添加了一个新属性[`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs")，它将任何属性的值作为可等待对象返回。这允��访问可能受惰性加载或延迟/未过期加载影响的属性，以便仍然可以发出IO：
- en: '[PRE488]'
  id: totrans-2443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: 'The [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") performs a call against the
    attribute that is approximately equivalent to using the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method, e.g.:'
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") 执行针对属性的调用，大致相当于使用[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")方法，例如：'
- en: '[PRE489]'
  id: totrans-2445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: New in version 2.0.13.
  id: totrans-2446
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.13 中的新功能。
- en: '**Members**'
  id: totrans-2447
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[awaitable_attrs](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs)'
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: '[awaitable_attrs](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs)'
- en: See also
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Preventing Implicit IO when Using AsyncSession](#asyncio-orm-avoid-lazyloads)'
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用AsyncSession时防止隐式IO](#asyncio-orm-avoid-lazyloads)'
- en: '[PRE490]'
  id: totrans-2451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: provide a namespace of all attributes on this object wrapped as awaitables.
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个将此对象上的所有属性命名空间包装为可等待对象的方法。
- en: 'e.g.:'
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE491]'
  id: totrans-2454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-2455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: Asyncio version of [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的Asyncio版本。'
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is a proxy for a traditional [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance.
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")是传统[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例的代理。'
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is **not safe for use in concurrent tasks.**. See [Is the Session thread-safe?
    Is AsyncSession safe to share in concurrent tasks?](../session_basics.html#session-faq-threadsafe)
    for background.
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    **不适合在并发任务中使用**。请参阅[Session 线程安全吗？AsyncSession 在并发任务中安全共享吗？](../session_basics.html#session-faq-threadsafe)了解背景。'
- en: New in version 1.4.
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: To use an [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with custom [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    implementations, see the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") parameter.
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: 要在自定义[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")实现中使用[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，请查看[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession")参数。
- en: '**Members**'
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[sync_session_class](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class),
    [__init__()](#sqlalchemy.ext.asyncio.AsyncSession.__init__), [aclose()](#sqlalchemy.ext.asyncio.AsyncSession.aclose),
    [add()](#sqlalchemy.ext.asyncio.AsyncSession.add), [add_all()](#sqlalchemy.ext.asyncio.AsyncSession.add_all),
    [autoflush](#sqlalchemy.ext.asyncio.AsyncSession.autoflush), [begin()](#sqlalchemy.ext.asyncio.AsyncSession.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncSession.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncSession.close),
    [close_all()](#sqlalchemy.ext.asyncio.AsyncSession.close_all), [commit()](#sqlalchemy.ext.asyncio.AsyncSession.commit),
    [connection()](#sqlalchemy.ext.asyncio.AsyncSession.connection), [delete()](#sqlalchemy.ext.asyncio.AsyncSession.delete),
    [deleted](#sqlalchemy.ext.asyncio.AsyncSession.deleted), [dirty](#sqlalchemy.ext.asyncio.AsyncSession.dirty),
    [execute()](#sqlalchemy.ext.asyncio.AsyncSession.execute), [expire()](#sqlalchemy.ext.asyncio.AsyncSession.expire),
    [expire_all()](#sqlalchemy.ext.asyncio.AsyncSession.expire_all), [expunge()](#sqlalchemy.ext.asyncio.AsyncSession.expunge),
    [expunge_all()](#sqlalchemy.ext.asyncio.AsyncSession.expunge_all), [flush()](#sqlalchemy.ext.asyncio.AsyncSession.flush),
    [get()](#sqlalchemy.ext.asyncio.AsyncSession.get), [get_bind()](#sqlalchemy.ext.asyncio.AsyncSession.get_bind),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_nested_transaction),
    [get_one()](#sqlalchemy.ext.asyncio.AsyncSession.get_one), [get_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_transaction),
    [identity_key()](#sqlalchemy.ext.asyncio.AsyncSession.identity_key), [identity_map](#sqlalchemy.ext.asyncio.AsyncSession.identity_map),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncSession.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncSession.invalidate), [is_active](#sqlalchemy.ext.asyncio.AsyncSession.is_active),
    [is_modified()](#sqlalchemy.ext.asyncio.AsyncSession.is_modified), [merge()](#sqlalchemy.ext.asyncio.AsyncSession.merge),
    [new](#sqlalchemy.ext.asyncio.AsyncSession.new), [no_autoflush](#sqlalchemy.ext.asyncio.AsyncSession.no_autoflush),
    [object_session()](#sqlalchemy.ext.asyncio.AsyncSession.object_session), [refresh()](#sqlalchemy.ext.asyncio.AsyncSession.refresh),
    [reset()](#sqlalchemy.ext.asyncio.AsyncSession.reset), [rollback()](#sqlalchemy.ext.asyncio.AsyncSession.rollback),
    [run_sync()](#sqlalchemy.ext.asyncio.AsyncSession.run_sync), [scalar()](#sqlalchemy.ext.asyncio.AsyncSession.scalar),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncSession.scalars), [stream()](#sqlalchemy.ext.asyncio.AsyncSession.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars), [sync_session](#sqlalchemy.ext.asyncio.AsyncSession.sync_session)'
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: '[sync_session_class](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class),
    [__init__()](#sqlalchemy.ext.asyncio.AsyncSession.__init__), [aclose()](#sqlalchemy.ext.asyncio.AsyncSession.aclose),
    [add()](#sqlalchemy.ext.asyncio.AsyncSession.add), [add_all()](#sqlalchemy.ext.asyncio.AsyncSession.add_all),
    [autoflush](#sqlalchemy.ext.asyncio.AsyncSession.autoflush), [begin()](#sqlalchemy.ext.asyncio.AsyncSession.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncSession.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncSession.close),
    [close_all()](#sqlalchemy.ext.asyncio.AsyncSession.close_all), [commit()](#sqlalchemy.ext.asyncio.AsyncSession.commit),
    [connection()](#sqlalchemy.ext.asyncio.AsyncSession.connection), [delete()](#sqlalchemy.ext.asyncio.AsyncSession.delete),
    [deleted](#sqlalchemy.ext.asyncio.AsyncSession.deleted), [dirty](#sqlalchemy.ext.asyncio.AsyncSession.dirty),
    [execute()](#sqlalchemy.ext.asyncio.AsyncSession.execute), [expire()](#sqlalchemy.ext.asyncio.AsyncSession.expire),
    [expire_all()](#sqlalchemy.ext.asyncio.AsyncSession.expire_all), [expunge()](#sqlalchemy.ext.asyncio.AsyncSession.expunge),
    [expunge_all()](#sqlalchemy.ext.asyncio.AsyncSession.expunge_all), [flush()](#sqlalchemy.ext.asyncio.AsyncSession.flush),
    [get()](#sqlalchemy.ext.asyncio.AsyncSession.get), [get_bind()](#sqlalchemy.ext.asyncio.AsyncSession.get_bind),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_nested_transaction),
    [get_one()](#sqlalchemy.ext.asyncio.AsyncSession.get_one), [get_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_transaction),
    [identity_key()](#sqlalchemy.ext.asyncio.AsyncSession.identity_key), [identity_map](#sqlalchemy.ext.asyncio.AsyncSession.identity_map),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncSession.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncSession.invalidate), [is_active](#sqlalchemy.ext.asyncio.AsyncSession.is_active),
    [is_modified()](#sqlalchemy.ext.asyncio.AsyncSession.is_modified), [merge()](#sqlalchemy.ext.asyncio.AsyncSession.merge),
    [new](#sqlalchemy.ext.asyncio.AsyncSession.new), [no_autoflush](#sqlalchemy.ext.asyncio.AsyncSession.no_autoflush),
    [object_session()](#sqlalchemy.ext.asyncio.AsyncSession.object_session), [refresh()](#sqlalchemy.ext.asyncio.AsyncSession.refresh),
    [reset()](#sqlalchemy.ext.asyncio.AsyncSession.reset), [rollback()](#sqlalchemy.ext.asyncio.AsyncSession.rollback),
    [run_sync()](#sqlalchemy.ext.asyncio.AsyncSession.run_sync), [scalar()](#sqlalchemy.ext.asyncio.AsyncSession.scalar),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncSession.scalars), [stream()](#sqlalchemy.ext.asyncio.AsyncSession.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars), [sync_session](#sqlalchemy.ext.asyncio.AsyncSession.sync_session)'
- en: '**Class signature**'
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`)
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.asyncio.AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")（`sqlalchemy.ext.asyncio.base.ReversibleProxy`）
- en: '[PRE493]'
  id: totrans-2465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: The class or callable that provides the underlying [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance for a particular [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")提供底层[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例的类或可调用对象。
- en: At the class level, this attribute is the default value for the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") parameter. Custom subclasses of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") can override this.
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
  zh: 在类级别，此属性是[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession")参数的默认值。[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")的自定义子类可以覆盖此值。
- en: At the instance level, this attribute indicates the current class or callable
    that was used to provide the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance for this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") instance.
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例级别，此属性指示当前类或可调用对象，用于为此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")实例提供[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例。
- en: New in version 1.4.24.
  id: totrans-2469
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.24中的新功能。
- en: '[PRE494]'
  id: totrans-2470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: Construct a new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")。
- en: All parameters other than `sync_session_class` are passed to the `sync_session_class`
    callable directly to instantiate a new [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Refer to [`Session.__init__()`](../session_api.html#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__") for parameter documentation.
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`sync_session_class`之外的所有参数都直接传递给`sync_session_class`可调用对象，以实例化一个新的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。请参考[`Session.__init__()`](../session_api.html#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__")获取参数文档。
- en: 'Parameters:'
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**sync_session_class** –'
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
  zh: '**sync_session_class** –'
- en: A [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    subclass or other callable which will be used to construct the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which will be proxied. This parameter may be used to
    provide custom [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    subclasses. Defaults to the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session_class") class-level attribute.
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")子类或其他可调用对象，用于构建将被代理的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。此参数可用于提供自定义的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")子类。默认为[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session_class")类级属性。
- en: New in version 1.4.24.
  id: totrans-2476
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.24中的新功能。
- en: '[PRE495]'
  id: totrans-2477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: A synonym for [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close").
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")的同义词。'
- en: The [`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")
    name is specifically to support the Python standard library `@contextlib.aclosing`
    context manager function.
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")名称专门支持Python标准库的`@contextlib.aclosing`上下文管理器函数。'
- en: New in version 2.0.20.
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.20中的新功能。
- en: '[PRE496]'
  id: totrans-2481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: Place an object into this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个对象放入此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Objects that are in the [transient](../../glossary.html#term-transient) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [pending](../../glossary.html#term-pending)
    state, until the next flush, at which point they will move to the [persistent](../../glossary.html#term-persistent)
    state.
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[瞬态](../../glossary.html#term-transient)状态的对象将移动到[挂起](../../glossary.html#term-pending)状态，直到下一次刷新，然后它们将移动到[持久](../../glossary.html#term-persistent)状态。
- en: Objects that are in the [detached](../../glossary.html#term-detached) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [persistent](../../glossary.html#term-persistent)
    state directly.
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[分离](../../glossary.html#term-detached)状态的对象将直接移动到[持久](../../glossary.html#term-persistent)状态。
- en: If the transaction used by the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务被回滚，则当它们被传递给[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")时处于瞬态的对象将被移回到[瞬态](../../glossary.html#term-transient)状态，并且将不再存在于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](../session_basics.html#session-adding) - 在[使用会话基础知识](../session_basics.html#id1)'
- en: '[PRE497]'
  id: totrans-2490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: Add the given collection of instances to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-2491
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的实例集合添加到这个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: See the documentation for [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
  zh: 有关一般行为描述，请参阅[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")的文档。
- en: See also
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  id: totrans-2495
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  id: totrans-2496
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](../session_basics.html#session-adding) - 在[使用会话基础知识](../session_basics.html#id1)'
- en: '[PRE498]'
  id: totrans-2497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的`Session.autoflush`属性。
- en: '[PRE499]'
  id: totrans-2499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object.
  id: totrans-2500
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象。
- en: 'The underlying [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will perform the “begin” action when the [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object is entered:'
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
  zh: 当进入[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象时，底层的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将执行“开始”操作：
- en: '[PRE500]'
  id: totrans-2502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: Note that database IO will not normally occur when the session-level transaction
    is begun, as database transactions begin on an on-demand basis. However, the begin
    block is async to accommodate for a [`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event hook that may perform
    IO.
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当会话级事务开始时，通常不会发生数据库IO，因为数据库事务在按需基础上开始。但是，开始块是异步的，以适应可能执行IO的[`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")事件钩子。
- en: For a general description of ORM begin, see [`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin").
  id: totrans-2504
  prefs: []
  type: TYPE_NORMAL
  zh: 有关ORM开始的一般描述，请参见[`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")。
- en: '[PRE501]'
  id: totrans-2505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object which will begin a “nested”
    transaction, e.g. SAVEPOINT.
  id: totrans-2506
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象，该对象将开始一个“嵌套”事务，例如SAVEPOINT。
- en: Behavior is the same as that of [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin").
  id: totrans-2507
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与[`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin "sqlalchemy.ext.asyncio.AsyncSession.begin")相同。
- en: For a general description of ORM begin nested, see [`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested").
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
  zh: 有关ORM开始嵌套的一般描述，请参见[`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。
- en: See also
  id: totrans-2509
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../../dialects/sqlite.html#aiosqlite-serializable)
    - special workarounds required with the SQLite asyncio driver in order for SAVEPOINT
    to work correctly.'
  id: totrans-2510
  prefs: []
  type: TYPE_NORMAL
  zh: '[可序列化隔离/保存点/事务性DDL（asyncio版本）](../../dialects/sqlite.html#aiosqlite-serializable)
    - 针对SQLite asyncio驱动程序，需要特殊的解决方法才能正确使用SAVEPOINT。'
- en: '[PRE502]'
  id: totrans-2511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: Close out the transactional resources and ORM objects used by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")使用的事务资源和ORM对象。
- en: See also
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - main documentation for “close”'
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - 关于“close”的主要文档'
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  id: totrans-2515
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](../session_basics.html#session-closing) - 关于[`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close")和[`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset
    "sqlalchemy.ext.asyncio.AsyncSession.reset")语义的详细信息。'
- en: '[PRE503]'
  id: totrans-2516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  id: totrans-2517
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭所有[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")会话。
- en: 'Deprecated since version 2.0: The [`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") method is deprecated and will
    be removed in a future release. Please refer to [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions").'
  id: totrans-2518
  prefs: []
  type: TYPE_NORMAL
  zh: 自2.0版本弃用：[`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all")方法已弃用，并将在以后的版本中删除。请参考[`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions")。
- en: '[PRE504]'
  id: totrans-2519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: Commit the current transaction in progress.
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
  zh: 提交当前进行中的事务。
- en: See also
  id: totrans-2521
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - main documentation for “commit”'
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - 关于“commit”的主要文档'
- en: '[PRE505]'
  id: totrans-2523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: Return a [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object corresponding to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  id: totrans-2524
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")对象，对应于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的事务状态。
- en: This method may also be used to establish execution options for the database
    connection used by the current transaction.
  id: totrans-2525
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法还可用于为当前事务使用的数据库连接建立执行选项。
- en: 'New in version 1.4.24: Added **kw arguments which are passed through to the
    underlying [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") method.'
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.24中的新内容：添加传递给底层[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")方法的**kw参数。
- en: See also
  id: totrans-2527
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - main documentation for “connection”'
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - “连接”主要文档'
- en: '[PRE506]'
  id: totrans-2529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: Mark an instance as deleted.
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为已删除。
- en: The database delete operation occurs upon `flush()`.
  id: totrans-2531
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库删除操作在`flush()`时发生。
- en: As this operation may need to cascade along unloaded relationships, it is awaitable
    to allow for those queries to take place.
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此操作可能需要沿着未加载的关系级联，因此它是可等待的，以允许执行这些查询。
- en: See also
  id: totrans-2533
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - main documentation for delete'
  id: totrans-2534
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - 删除的主要文档'
- en: '[PRE507]'
  id: totrans-2535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: The set of all instances marked as ‘deleted’ within this `Session`
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为“已删除”的所有实例集合
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: '[PRE508]'
  id: totrans-2538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: The set of all persistent instances considered dirty.
  id: totrans-2539
  prefs: []
  type: TYPE_NORMAL
  zh: 被视为脏的所有持久实例集合。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: 'E.g.:'
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE509]'
  id: totrans-2542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: Instances are considered dirty when they were modified but not deleted.
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例被修改但未删除时，被视为脏。
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此“脏”计算是“乐观”的；大多数属性设置或集合修改操作都会将实例标记为“脏”并将其放入此集合中，即使属性值没有净变化。在刷新时，将每个属性的值与其先前保存的值进行比较，如果没有净变化，则不会发生任何SQL操作（这是一种更昂贵的操作，因此仅在刷新时执行）。
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实例的属性是否具有可操作的净变化，请使用[`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")方法。
- en: '[PRE510]'
  id: totrans-2546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: Execute a statement and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  id: totrans-2547
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回缓冲的[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: See also
  id: totrans-2548
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - main documentation for execute'
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - 执行的主要文档'
- en: '[PRE511]'
  id: totrans-2550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: Expire the attributes on an instance.
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
  zh: 使实例的属性过期。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2552
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
  zh: 标记实例的属性为过时。下次访问过期的属性时，将在[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的当前事务上下文中发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与先前在同一事务中读取的相同值，而不考虑该事务之外的数据库状态的变化。
- en: To expire all objects in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use `Session.expire_all()`.
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时使[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的所有对象过期，请使用
    `Session.expire_all()`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire()` only makes sense
    for the specific case that a non-ORM SQL statement was emitted in the current
    transaction.
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的默认行为是在调用
    `Session.rollback()` 或 `Session.commit()` 方法时使所有状态过期，以便为新事务加载新状态。因此，仅在当前事务中发出了非
    ORM SQL 语句的特定情况下调用 `Session.expire()` 才有意义。'
- en: 'Parameters:'
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – The instance to be refreshed.'
  id: totrans-2557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要刷新的实例。'
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  id: totrans-2558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 表示要过期的属性子集的可选字符串属性名称列表。'
- en: See also
  id: totrans-2559
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新 / 过期](../session_state_management.html#session-expire) - 介绍性材料'
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-2561
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-2563
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE512]'
  id: totrans-2564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: Expires all persistent instances within this Session.
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
  zh: 使此会话中的所有持久化实例过期。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: 下次访问持久实例的任何属性时，将在[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的当前事务上下文中发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与先前在同一事务中读取的相同值，而不考虑该事务之外的数据库状态的变化。
- en: To expire individual objects and individual attributes on those objects, use
    `Session.expire()`.
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: 要使单个对象和这些对象上的单个属性过期，请使用 `Session.expire()`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire_all()` is not usually
    needed, assuming the transaction is isolated.
  id: totrans-2569
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象的默认行为是在调用 `Session.rollback()` 或 `Session.commit()` 方法时使所有状态过期，以便为新事务加载新状态。因此，通常情况下不需要调用
    `Session.expire_all()`，假设事务是隔离的。'
- en: See also
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/到期](../session_state_management.html#session-expire) - 介绍材料'
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE513]'
  id: totrans-2575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: Remove the instance from this `Session`.
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中删除实例。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
  zh: 代理给[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放对实例的所有内部引用。级联将根据*expunge*级联规则应用。
- en: '[PRE514]'
  id: totrans-2579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: Remove all object instances from this `Session`.
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中删除所有对象实例。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
  zh: 代理给[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在此`Session`中调用`expunge(obj)`来删除所有对象。
- en: '[PRE515]'
  id: totrans-2583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: Flush all the object changes to the database.
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有对象更改刷新到数据库。
- en: See also
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - main documentation for flush'
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - 刷新的主要文档'
- en: '[PRE516]'
  id: totrans-2587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果未找到则返回`None`。
- en: See also
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - main documentation for get'
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - 获取的主要文档'
- en: '[PRE517]'
  id: totrans-2591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: Return a “bind” to which the synchronous proxied [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
  zh: 返回同步代理的“bind”，该绑定绑定到的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: Unlike the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, this method is currently **not** used
    by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    in any way in order to resolve engines for requests.
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法不同，此方法目前**不**以任何方式由此[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")使用以解析请求的引擎。
- en: Note
  id: totrans-2594
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method proxies directly to the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, however is currently **not** useful
    as an override target, in contrast to that of the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method. The example below illustrates how to
    implement custom [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes that work with [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  id: totrans-2595
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法直接代理到[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法，但目前**不**像[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法那样有用作为一个覆盖目标。下面的示例说明了如何实现与[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")和[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")配合工作的自定义[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方案。
- en: 'The pattern introduced at [Custom Vertical Partitioning](../persistence_techniques.html#session-custom-partitioning)
    illustrates how to apply a custom bind-lookup scheme to a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") given a set of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. To apply a corresponding [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") implementation for use with a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") objects, continue to subclass [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and apply it to [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") using [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession"). The inner method must continue to return
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, which can be acquired from a [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") using the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute:'
  id: totrans-2596
  prefs: []
  type: TYPE_NORMAL
  zh: '[自定义垂直分区](../persistence_techniques.html#session-custom-partitioning)介绍的模式说明了如何对给定一组[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象应用自定义绑定查找方案到一个[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。要为[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")和[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")对象应用相应的[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")实现，继续对[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")进行子类化，并使用[`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession")将其应用于[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")。内部方法必须继续返回[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")实例，可以从[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")使用[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")属性获取：'
- en: '[PRE518]'
  id: totrans-2597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: The [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method is called in a non-asyncio, implicitly
    non-blocking context in the same manner as ORM event hooks and functions that
    are invoked via [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync"), so routines that wish to run
    SQL commands inside of [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") can continue to do so using blocking-style
    code, which will be translated to implicitly async calls at the point of invoking
    IO on the database drivers.
  id: totrans-2598
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法在非异步、隐式非阻塞的上下文中被调用，方式与 ORM 事件钩子和通过[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync")调用的函数相同，因此希望在[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")内运行 SQL 命令的例程可以继续使用阻塞式代码，这将在调用数据库驱动程序的 IO 点隐式转换为异步调用。'
- en: '[PRE519]'
  id: totrans-2599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: Return the current nested transaction in progress, if any.
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的嵌套事务，如果有的话。
- en: 'Returns:'
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object, or `None`.
  id: totrans-2602
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象，或`None`。
- en: New in version 1.4.18.
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.18 中的新功能。
- en: '[PRE520]'
  id: totrans-2604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: Return an instance based on the given primary key identifier, or raise an exception
    if not found.
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果未找到则引发异常。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发`sqlalchemy.orm.exc.NoResultFound`。
- en: '..versionadded: 2.0.22'
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
  zh: '..versionadded: 2.0.22'
- en: See also
  id: totrans-2608
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - main documentation for get_one'
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - get_one 的主要文档'
- en: '[PRE521]'
  id: totrans-2610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: Return the current root transaction in progress, if any.
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的根事务，如果有的话。
- en: 'Returns:'
  id: totrans-2612
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object, or `None`.
  id: totrans-2613
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction")对象，或`None`。
- en: New in version 1.4.18.
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.18中的新功能。
- en: '[PRE522]'
  id: totrans-2615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: Return an identity key.
  id: totrans-2616
  prefs: []
  type: TYPE_NORMAL
  zh: 返回标识键。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2617
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This is an alias of [`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
  zh: 这��[`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE523]'
  id: totrans-2619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: Proxy for the [`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")属性的代理。
- en: '[PRE524]'
  id: totrans-2621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: Return True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a nested transaction, e.g. SAVEPOINT.
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")已开始嵌套事务（例如SAVEPOINT），则返回True。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: New in version 1.4.
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE525]'
  id: totrans-2625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: Return True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a transaction.
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")已开始事务，则返回True。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: New in version 1.4.
  id: totrans-2628
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: See also
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")'
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")'
- en: '[PRE526]'
  id: totrans-2631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: A user-modifiable dictionary.
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
  zh: 可由用户修改的字典。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2633
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") constructor or factory methods. The dictionary
    here is always local to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`info`参数来填充此字典的初始值，该参数可用于[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")构造函数或[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")构造函数或工厂方法。此处的字典始终局限于此[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，并且可以独立于所有其他[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象进行修改。
- en: '[PRE527]'
  id: totrans-2635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: Close this Session, using connection invalidation.
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
  zh: 使用连接失效关闭此Session。
- en: For a complete description, see [`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate").
  id: totrans-2637
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整描述，请参阅[`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")。
- en: '[PRE528]'
  id: totrans-2638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不处于“部分回滚”状态，则返回True。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2640
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: 'Changed in version 1.4: The [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  id: totrans-2641
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不再立即开始新事务，因此当首次实例化[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，此属性将为False。
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  id: totrans-2642
  prefs: []
  type: TYPE_NORMAL
  zh: “部分回滚”状态通常表示[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的刷新过程失败，并且必须发出[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法以完全回滚事务。
- en: If this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")根本不在事务中，则在首次使用时，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将自动开始，因此在这种情况下，[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")将返回True。
- en: Otherwise, if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will also return True.
  id: totrans-2644
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")在事务中，并且该事务尚未在内部回滚，则[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")也将返回True。
- en: See also
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../../faq/sessions.html#faq-session-rollback)'
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
  zh: '[“由于刷新期间的先前异常，此会话的事务已回滚。”（或类似）](../../faq/sessions.html#faq-session-rollback)'
- en: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-2647
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
- en: '[PRE529]'
  id: totrans-2648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: Return `True` if the given instance has locally modified attributes.
  id: totrans-2649
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定实例具有本地修改的属性，则返回`True`。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")类的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检索实例上每个被检测属性的历史，并将当前值与先前提交的值进行比较（如果有的话）。
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  id: totrans-2652
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是检查给定实例是否在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")集合中的更昂贵和准确的版本；对每个属性的净“脏”状态进行了全面测试。
- en: 'E.g.:'
  id: totrans-2653
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE530]'
  id: totrans-2654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: 'A few caveats to this method apply:'
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有一些注意事项：
- en: Instances present in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  id: totrans-2656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")集合中存在的实例在使用此方法进行测试时可能会报告`False`。这是因为对象可能已通过属性突变接收到更改事件，从而将其放置在[`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")中，但最终状态与从数据库加载的状态相同，在这里没有净变化。
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  id: totrans-2657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新值被应用时，如果属性未加载或已过期，则标量属性可能没有记录先前设置的值 - 在这些情况下，即使最终没有对其数据库值进行净更改，也假定属性已更改。大多数情况下，当发生设置事件时，SQLAlchemy
    不需要“旧”值，因此如果旧值不存在，则会跳过发出 SQL 调用的开销，这是基于标量值通常需要进行更新的假设，并且在极少数情况下，与发出防御性 SELECT
    相比，平均成本更低。
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-2658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅当属性容器的 `active_history` 标志设置为 `True` 时，才会无条件地在设置时获取“旧”值。通常为主键属性和不是简单一对多的标量对象引用设置此标志。要为任意映射列设置此标志，请使用
    [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    中的 `active_history` 参数。
- en: 'Parameters:'
  id: totrans-2659
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – mapped instance to be tested for pending changes.'
  id: totrans-2660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要测试待处理更改的映射实例。'
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_collections` – 指示是否应在操作中包含多值集合。将其设置为 `False` 是一种检测仅基于本地列的属性（即标量列或一对多外键）的方法，这些属性在刷新时会导致此实例进行更新。'
- en: '[PRE531]'
  id: totrans-2662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: Copy the state of a given instance into a corresponding instance within this
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  id: totrans-2663
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定实例的状态复制到此 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    中的相应实例。
- en: See also
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - main documentation for merge'
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - merge 的主要文档'
- en: '[PRE532]'
  id: totrans-2666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: The set of all instances marked as ‘new’ within this `Session`.
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 `Session` 中标记为“新”的所有实例的集合。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2668
  prefs: []
  type: TYPE_NORMAL
  zh: 代理 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: '[PRE533]'
  id: totrans-2669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: Return a context manager that disables autoflush.
  id: totrans-2670
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个禁用自动刷新的上下文管理器。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
  zh: 代理 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: 'e.g.:'
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE534]'
  id: totrans-2673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  id: totrans-2674
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `with:` 块中进行的操作不会受到在查询访问时发生的刷新的影响。这在初始化涉及现有数据库查询的一系列对象时很有用，其中尚未完成的对象不应立即刷新。
- en: '[PRE535]'
  id: totrans-2675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: Return the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  id: totrans-2676
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象所属的 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  id: totrans-2677
  prefs: []
  type: TYPE_NORMAL
  zh: 代理 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    类的 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: This is an alias of [`object_session()`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  id: totrans-2678
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`object_session()`](../session_api.html#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")
    的别名。
- en: '[PRE536]'
  id: totrans-2679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: Expire and refresh the attributes on the given instance.
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
  zh: 使给定实例上的属性过期并刷新。
- en: A query will be issued to the database and all attributes will be refreshed
    with their current database value.
  id: totrans-2681
  prefs: []
  type: TYPE_NORMAL
  zh: 将向数据库发出查询，并刷新所有属性以获取其当前数据库值。
- en: This is the async version of the [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. See that method for a complete description
    of all options.
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法的异步版本。请参阅该方法以获取所有选项的完整描述。
- en: See also
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - main documentation for refresh'
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - ��新的主要文档'
- en: '[PRE537]'
  id: totrans-2685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    使用的事务资源和 ORM 对象，将会重置会话到其初始状态。
- en: New in version 2.0.22.
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.22 中新增。
- en: See also
  id: totrans-2688
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - main documentation for “reset”'
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - “reset” 的主要文档'
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  id: totrans-2690
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](../session_basics.html#session-closing) - 关于 [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") 和 [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset
    "sqlalchemy.ext.asyncio.AsyncSession.reset") 语义的详细信息。'
- en: '[PRE538]'
  id: totrans-2691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: Rollback the current transaction in progress.
  id: totrans-2692
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前进行中的事务。
- en: See also
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - main documentation for “rollback”'
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - “rollback”的主要文档'
- en: '[PRE539]'
  id: totrans-2695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: Invoke the given synchronous (i.e. not async) callable, passing a synchronous-style
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as the first argument.
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
  zh: 调用给定的同步（即非异步）可调用对象，将同步风格的 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 作为第一个参数传递。
- en: This method allows traditional synchronous SQLAlchemy functions to run within
    the context of an asyncio application.
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法允许传统同步的 SQLAlchemy 函数在 asyncio 应用程序的上下文中运行。
- en: 'E.g.:'
  id: totrans-2698
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE540]'
  id: totrans-2699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: This method maintains the asyncio event loop all the way through to the database
    connection by running the given callable in a specially instrumented greenlet.
  id: totrans-2700
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法通过在特别调试的 greenlet 中运行给定的可调用对象，一直将 asyncio 事件循环传递到数据库连接。
- en: Tip
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The provided callable is invoked inline within the asyncio event loop, and will
    block on traditional IO calls. IO within this callable should only call into SQLAlchemy’s
    asyncio database APIs which will be properly adapted to the greenlet context.
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的可调用对象在 asyncio 事件循环中内联调用，并将在传统 IO 调用上阻塞。此可调用对象内的 IO 应该仅调用 SQLAlchemy 的 asyncio
    数据库 API，这些 API 将被正确地适配到 greenlet 上下文。
- en: See also
  id: totrans-2703
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    - a mixin for ORM mapped classes that provides a similar feature more succinctly
    on a per-attribute basis'
  id: totrans-2704
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    - 为 ORM 映射类提供每个属性基础上更简洁的类似功能的混合类'
- en: '[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")'
  id: totrans-2705
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")'
- en: '[Running Synchronous Methods and Functions under asyncio](#session-run-sync)'
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 asyncio 下运行同步方法和函数](#session-run-sync)'
- en: '[PRE541]'
  id: totrans-2707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: Execute a statement and return a scalar result.
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: See also
  id: totrans-2709
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - main documentation for scalar'
  id: totrans-2710
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - 标量的主要文档'
- en: '[PRE542]'
  id: totrans-2711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: Execute a statement and return scalar results.
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: 'Returns:'
  id: totrans-2713
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object
  id: totrans-2714
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 对象
- en: 'New in version 1.4.24: Added [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")'
  id: totrans-2715
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中新增 [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")
- en: 'New in version 1.4.26: Added [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")'
  id: totrans-2716
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.26 中新增 [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")
- en: See also
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - 标量的主要文档'
- en: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - streaming version'
  id: totrans-2719
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - 流式版本'
- en: '[PRE543]'
  id: totrans-2720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: Execute a statement and return a streaming [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回流式 [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    对象。
- en: '[PRE544]'
  id: totrans-2722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: Execute a statement and return a stream of scalar results.
  id: totrans-2723
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果流。
- en: 'Returns:'
  id: totrans-2724
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    对象
- en: New in version 1.4.24.
  id: totrans-2726
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.24。
- en: See also
  id: totrans-2727
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - 标量的主要文档'
- en: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - non streaming version'
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - 非流式版本'
- en: '[PRE545]'
  id: totrans-2730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: Reference to the underlying [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") proxies requests towards.
  id: totrans-2731
  prefs: []
  type: TYPE_NORMAL
  zh: 指向此 [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    代理请求的基础 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的引用。
- en: This instance can be used as an event target.
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例可用作事件目标。
- en: See also
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using events with the asyncio extension](#asyncio-events)'
  id: totrans-2734
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 asyncio 扩展处理事件](#asyncio-events)'
- en: '[PRE546]'
  id: totrans-2735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: A wrapper for the ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object.
  id: totrans-2736
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") 对象的包装器。
- en: This object is provided so that a transaction-holding object for the [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") may be returned.
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
  zh: 提供此对象以便返回一个用于 [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") 的事务持有对象。
- en: The object supports both explicit calls to [`AsyncSessionTransaction.commit()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit") and [`AsyncSessionTransaction.rollback()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback"), as well as use as
    an async context manager.
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象支持对 [`AsyncSessionTransaction.commit()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit") 和 [`AsyncSessionTransaction.rollback()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback") 的显式调用，以及作为异步上下文管理器使用。
- en: New in version 1.4.
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4。
- en: '**Members**'
  id: totrans-2740
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[commit()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit), [rollback()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback)'
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: '[commit()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit), [rollback()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback)'
- en: '**Class signature**'
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.asyncio.AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.asyncio.AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
- en: '[PRE547]'
  id: totrans-2744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: Commit this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: 提交此[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
- en: '[PRE548]'
  id: totrans-2746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: Roll back this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction").
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚此[`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")。
