- en: 1.3 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 更新日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_13.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_13.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_13.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_13.html)
- en: 1.3.25
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.25
- en: no release date
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: orm
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue in [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") when used with persistent objects
    which would fail to track the primary key of mappings where the column name of
    the primary key were different than the attribute name.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与主键列名与属性名不同的映射的主键跟踪失败的情况下，使用持久对象时 [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") 中的问题。
- en: 'References: [#6392](https://www.sqlalchemy.org/trac/ticket/6392)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6392](https://www.sqlalchemy.org/trac/ticket/6392)
- en: schema
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: The [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object now raises an informative error message if it is instantiated without passing
    at least the [`Table.name`](../core/metadata.html#sqlalchemy.schema.Table.params.name
    "sqlalchemy.schema.Table") and [`Table.metadata`](../core/metadata.html#sqlalchemy.schema.Table.params.metadata
    "sqlalchemy.schema.Table") arguments positionally. Previously, if these were passed
    as keyword arguments, the object would silently fail to initialize correctly.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当未至少传递 [`Table.name`](../core/metadata.html#sqlalchemy.schema.Table.params.name
    "sqlalchemy.schema.Table") 和 [`Table.metadata`](../core/metadata.html#sqlalchemy.schema.Table.params.metadata
    "sqlalchemy.schema.Table") 参数位置时，[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象现在会引发一个信息性错误消息。 以前，如果这些作为关键字参数传递，对象将无声地无法正确初始化。
- en: 'References: [#6135](https://www.sqlalchemy.org/trac/ticket/6135)'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6135](https://www.sqlalchemy.org/trac/ticket/6135)
- en: postgresql
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误] [回归]**'
- en: Fixed regression caused by [#6023](https://www.sqlalchemy.org/trac/ticket/6023)
    where the PostgreSQL cast operator applied to elements within an [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") when using psycopg2 would fail to use the correct type
    in the case that the datatype were also embedded within an instance of the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") adapter.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#6023](https://www.sqlalchemy.org/trac/ticket/6023) 引起的回归，当使用 psycopg2
    时，应用于 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    中的元素的 PostgreSQL 强制转换运算符在数据类型也嵌入在 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 适配器的实例中时，将无法使用正确的类型。
- en: Additionally, repairs support for the correct CREATE TYPE to be emitted when
    using a `Variant(ARRAY(some_schema_type))`.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，修复了在使用 `Variant(ARRAY(some_schema_type))` 时发出正确的 CREATE TYPE 的支持。
- en: 'References: [#6182](https://www.sqlalchemy.org/trac/ticket/6182)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6182](https://www.sqlalchemy.org/trac/ticket/6182)
- en: mysql
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mariadb]**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误] [mariadb]**'
- en: Fixes to accommodate for the MariaDB 10.6 series, including backwards incompatible
    changes in both the mariadb-connector Python driver (supported on SQLAlchemy 1.4
    only) as well as the native 10.6 client libraries that are used automatically
    by the mysqlclient DBAPI (applies to both 1.3 and 1.4). The “utf8mb3” encoding
    symbol is now reported by these client libraries when the encoding is stated as
    “utf8”, leading to lookup and encoding errors within the MySQL dialect that does
    not expect this symbol. Updates to both the MySQL base library to accommodate
    for this utf8mb3 symbol being reported as well as to the test suite. Thanks to
    Georg Richter for support.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复以适应 MariaDB 10.6 系列的变化，包括 mariadb-connector Python 驱动程序（仅支持 SQLAlchemy 1.4）和
    mysqlclient DBAPI 自动使用的本机 10.6 客户端库中的不兼容更改（适用于 1.3 和 1.4）。 当编码状态为“utf8”时，这些客户端库现在报告“utf8mb3”编码符号，导致
    MySQL 方言中的查找和编码错误，该方言不期望此符号。 更新了 MySQL 基础库以适应报告此 utf8mb3 符号以及测试套件。 感谢 Georg Richter
    的支持。
- en: 'References: [#7115](https://www.sqlalchemy.org/trac/ticket/7115), [#7136](https://www.sqlalchemy.org/trac/ticket/7136)'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7115](https://www.sqlalchemy.org/trac/ticket/7115), [#7136](https://www.sqlalchemy.org/trac/ticket/7136)
- en: sqlite
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Add note regarding encryption-related pragmas for pysqlcipher passed in the
    url.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加有关通过 url 传递给 pysqlcipher 的与加密相关的 pragma 的说明。
- en: 'References: [#6589](https://www.sqlalchemy.org/trac/ticket/6589)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6589](https://www.sqlalchemy.org/trac/ticket/6589)
- en: 1.3.24
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.24
- en: 'Released: March 30, 2021'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2021年3月30日
- en: orm
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Removed very old warning that states that passive_deletes is not intended for
    many-to-one relationships. While it is likely that in many cases placing this
    parameter on a many-to-one relationship is not what was intended, there are use
    cases where delete cascade may want to be disallowed following from such a relationship.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了一个非常古老的警告，指出passive_deletes不适用于多对一关系。虽然在许多情况下，将此参数放在多对一关系上可能不是预期的操作，但在某些情况下，可能希望在此类关系之后禁止删除级联。
- en: 'References: [#5983](https://www.sqlalchemy.org/trac/ticket/5983)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5983](https://www.sqlalchemy.org/trac/ticket/5983)
- en: '**[orm] [bug]**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed issue where the process of joining two tables could fail if one of the
    tables had an unrelated, unresolvable foreign key constraint which would raise
    [`NoReferenceError`](../core/exceptions.html#sqlalchemy.exc.NoReferenceError "sqlalchemy.exc.NoReferenceError")
    within the join process, which nonetheless could be bypassed to allow the join
    to complete. The logic which tested the exception for significance within the
    process would make assumptions about the construct which would fail.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果其中一个表具有不相关的、无法解析的外键约束，那么连接两个表的过程可能会失败，这将在连接过程中引发[`NoReferenceError`](../core/exceptions.html#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError")，尽管可以绕过此异常以允许连接完成。在处理中测试异常重要性的逻辑会对构造做出可能失败的假设。
- en: 'References: [#5952](https://www.sqlalchemy.org/trac/ticket/5952)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5952](https://www.sqlalchemy.org/trac/ticket/5952)
- en: '**[orm] [bug]**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed issue where the [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") construct could be placed into an invalid
    state when the parent object was already loaded, and then covered by a subsequent
    query, due to the composite properties’ refresh handler replacing the object with
    a new one not handled by the mutable extension.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当父对象已加载并且随后被后续查询覆盖时，[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")构造可能处于无效状态，因为复合属性的刷新处理程序会用新对象替换对象，而这些对象未受可变扩展处理。
- en: 'References: [#6001](https://www.sqlalchemy.org/trac/ticket/6001)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6001](https://www.sqlalchemy.org/trac/ticket/6001)
- en: engine
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug where the “schema_translate_map” feature failed to be taken into account
    for the use case of direct execution of [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") objects such as sequences, which included
    the case where they were “pre-executed” in order to generate primary key values
    when implicit_returning was disabled.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“schema_translate_map”功能在直接执行[`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator")对象（如序列）的情况未被考虑的错误，包括在禁用implicit_returning时“预执行”它们以生成主键值的情况。
- en: 'References: [#5929](https://www.sqlalchemy.org/trac/ticket/5929)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5929](https://www.sqlalchemy.org/trac/ticket/5929)
- en: schema
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug first introduced in as some combination of [#2892](https://www.sqlalchemy.org/trac/ticket/2892),
    [#2919](https://www.sqlalchemy.org/trac/ticket/2919) nnd [#3832](https://www.sqlalchemy.org/trac/ticket/3832)
    where the attachment events for a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would be doubled up against the “impl” class,
    if the “impl” were also a [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType"). The real-world case is any [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") against [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") would get a doubled [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") when the `create_constraint=True` flag is
    set.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了首次引入的错误，可能是由[#2892](https://www.sqlalchemy.org/trac/ticket/2892)、[#2919](https://www.sqlalchemy.org/trac/ticket/2919)和[#3832](https://www.sqlalchemy.org/trac/ticket/3832)的某种组合引起的，其中[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的附加事件会对“impl”类重复，如果“impl”也是[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")。实际情况是，任何[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")与[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")或[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")相对时，当设置`create_constraint=True`标志时，将获得重复的[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。
- en: 'References: [#6152](https://www.sqlalchemy.org/trac/ticket/6152)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6152](https://www.sqlalchemy.org/trac/ticket/6152)
- en: '**[schema] [bug] [sqlite]**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误] [sqlite]**'
- en: 'Fixed issue where the CHECK constraint generated by [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") or [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") would fail to render the naming convention correctly
    after the first compilation, due to an unintended change of state within the name
    given to the constraint. This issue was first introduced in 0.9 in the fix for
    issue #3067, and the fix revises the approach taken at that time which appears
    to have been more involved than what was needed.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")或[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")生成的CHECK约束在第一次编译后无法正确呈现命名约定的问题，这是由于约束名称中的状态意外更改导致的。此问题首次出现在0.9版本中，修复了问题＃3067，修复了当时采取的方法，似乎比实际需要的更复杂。
- en: 'References: [#6007](https://www.sqlalchemy.org/trac/ticket/6007)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6007](https://www.sqlalchemy.org/trac/ticket/6007)
- en: '**[schema] [bug]**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Repaired / implemented support for primary key constraint naming conventions
    that use column names/keys/etc as part of the convention. In particular, this
    includes that the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object that’s automatically associated
    with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    will update its name as new primary key [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are added to the table and then to the constraint.
    Internal failure modes related to this constraint construction process including
    no columns present, no name present or blank name present are now accommodated.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复/实现了支持使用列名/键等作为约定的主键约束命名约定的功能。特别是，这包括[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")自动关联的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象将在向表添加新的主键[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象后更新其名称，然后更新约束。现在已经考虑了与此约束构造过程相关的内部故障模式，包括没有列存在、没有名称存在或存在空名称。
- en: 'References: [#5919](https://www.sqlalchemy.org/trac/ticket/5919)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5919](https://www.sqlalchemy.org/trac/ticket/5919)
- en: '**[schema] [bug]**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Adjusted the logic that emits DROP statements for [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") objects among the dropping of multiple tables, such
    that all [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    objects are dropped after all tables, even if the given [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is related only to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object and not directly to the overall [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object. The use case supports the same [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") being associated with more than one [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at a time.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了在删除多个表时发出 DROP 语句的逻辑，使得所有 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 对象在所有表之后被删除，即使给定的 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 只与一个 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象相关，而不直接与整体的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象相关。这种用例支持同一个 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 同时关联多个 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。
- en: 'References: [#6071](https://www.sqlalchemy.org/trac/ticket/6071)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6071](https://www.sqlalchemy.org/trac/ticket/6071)
- en: postgresql
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where using [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") would return ARRAY(NullType)
    under certain conditions, interfering with the ability of the result object to
    return data correctly.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些条件下使用 [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") 会返回 ARRAY(NullType) 的问题，干扰了结果对象正确返回数据的能力。
- en: 'References: [#5989](https://www.sqlalchemy.org/trac/ticket/5989)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5989](https://www.sqlalchemy.org/trac/ticket/5989)
- en: '**[postgresql] [bug] [reflection]**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [reflection]**'
- en: Fixed issue in PostgreSQL reflection where a column expressing “NOT NULL” will
    supersede the nullability of a corresponding domain.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 PostgreSQL 反射中出现的问题，其中表达“NOT NULL”的列将取代相应域的可空性。
- en: 'References: [#6161](https://www.sqlalchemy.org/trac/ticket/6161)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6161](https://www.sqlalchemy.org/trac/ticket/6161)
- en: '**[postgresql] [bug] [types]**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [types]**'
- en: Adjusted the psycopg2 dialect to emit an explicit PostgreSQL-style cast for
    bound parameters that contain ARRAY elements. This allows the full range of datatypes
    to function correctly within arrays. The asyncpg dialect already generated these
    internal casts in the final statement. This also includes support for array slice
    updates as well as the PostgreSQL-specific `ARRAY.contains()` method.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 psycopg2 方言以为包含 ARRAY 元素的绑定参数发出显式的 PostgreSQL 风格转换。这允许各种数据类型在数组中正确运行。asyncpg
    方言已在最终语句中生成了这些内部转换。这还包括对数组切片更新的支持以及 PostgreSQL 特定的 `ARRAY.contains()` 方法。
- en: 'References: [#6023](https://www.sqlalchemy.org/trac/ticket/6023)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6023](https://www.sqlalchemy.org/trac/ticket/6023)
- en: mssql
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: Fixed issue regarding SQL Server reflection for older SQL Server 2005 version,
    a call to sp_columns would not proceed correctly without being prefixed with the
    EXEC keyword. This method is not used in current 1.4 series.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于旧版 SQL Server 2005 版本的 SQL Server 反射问题，调用 sp_columns 时如果没有加上 EXEC 关键字，将无法正确进行。这种方法在当前的
    1.4 系列中不再使用。
- en: 'References: [#5921](https://www.sqlalchemy.org/trac/ticket/5921)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5921](https://www.sqlalchemy.org/trac/ticket/5921)
- en: 1.3.23
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.23
- en: 'Released: February 1, 2021'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2021年2月1日
- en: sql
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where making use of the [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method on a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") type would fail to take into account the dialect-specific
    mappings in use, due to a rule in [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that was instead attempting to check for chains
    of [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") instances.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类型上使用[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法时的错误，由于[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")中的规则尝试检查[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")实例链，未考虑到正在使用的特定方言映射。
- en: 'References: [#5816](https://www.sqlalchemy.org/trac/ticket/5816)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5816](https://www.sqlalchemy.org/trac/ticket/5816)
- en: postgresql
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: For SQLAlchemy 1.3 only, setup.py pins pg8000 to a version lower than 1.16.6\.
    Version 1.16.6 and above is supported by SQLAlchemy 1.4\. Pull request courtesy
    Giuseppe Lumia.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅适用于SQLAlchemy 1.3，setup.py将pg8000固定在低于1.16.6版本。版本1.16.6及以上受SQLAlchemy 1.4支持。感谢Giuseppe
    Lumia的拉取请求。
- en: 'References: [#5645](https://www.sqlalchemy.org/trac/ticket/5645)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5645](https://www.sqlalchemy.org/trac/ticket/5645)
- en: '**[postgresql] [bug]**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where using [`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") (called [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") in 1.3) in conjunction with a PostgreSQL
    [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") that made use of ad-hoc column
    expressions would fail to copy correctly.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与使用了临时列表达式的PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")一起使用[`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")（在1.3中称为[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")）时未能正确复制的问题。
- en: 'References: [#5850](https://www.sqlalchemy.org/trac/ticket/5850)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5850](https://www.sqlalchemy.org/trac/ticket/5850)
- en: mysql
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Casting to `FLOAT` is now supported in MySQL >= (8, 0, 17) and MariaDb >= (10,
    4, 5).
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在MySQL >= (8, 0, 17)和MariaDb >= (10, 4, 5)中支持转换为`FLOAT`。
- en: 'References: [#5808](https://www.sqlalchemy.org/trac/ticket/5808)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5808](https://www.sqlalchemy.org/trac/ticket/5808)
- en: '**[mysql] [bug] [reflection]**'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [reflection]**'
- en: Fixed bug where MySQL server default reflection would fail for numeric values
    with a negation symbol present.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL服务器默认反射对带有否定符号的数值失败的错误。
- en: 'References: [#5860](https://www.sqlalchemy.org/trac/ticket/5860)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5860](https://www.sqlalchemy.org/trac/ticket/5860)
- en: '**[mysql] [bug]**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed long-lived bug in MySQL dialect where the maximum identifier length of
    255 was too long for names of all types of constraints, not just indexes, all
    of which have a size limit of 64\. As metadata naming conventions can create too-long
    names in this area, apply the limit to the identifier generator within the DDL
    compiler.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL方言中长期存在的bug，其中255的最大标识符长度对于所有类型的约束名称都太长，不仅仅是索引，所有这些都有64的大小限制。由于元数据命名约定可能在此区域创建过长的名称，因此将限制应用于DDL编译器内的标识符生成器。
- en: 'References: [#5898](https://www.sqlalchemy.org/trac/ticket/5898)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5898](https://www.sqlalchemy.org/trac/ticket/5898)
- en: '**[mysql] [bug]**'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed deprecation warnings that arose as a result of the release of PyMySQL
    1.0, including deprecation warnings for the “db” and “passwd” parameters now replaced
    with “database” and “password”.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于PyMySQL 1.0发布而产生的弃用警告，包括“db”和“passwd”参数现已替换为“database”和“password”的弃用警告。
- en: 'References: [#5821](https://www.sqlalchemy.org/trac/ticket/5821)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5821](https://www.sqlalchemy.org/trac/ticket/5821)
- en: '**[mysql] [bug]**'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression from SQLAlchemy 1.3.20 caused by the fix for [#5462](https://www.sqlalchemy.org/trac/ticket/5462)
    which adds double-parenthesis for MySQL functional expressions in indexes, as
    is required by the backend, this inadvertently extended to include arbitrary [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expressions as well as Alembic’s internal textual
    component, which are required by Alembic for arbitrary index expressions which
    don’t imply double parenthesis. The check has been narrowed to include only binary/
    unary/functional expressions directly.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLAlchemy 1.3.20中由于[#5462](https://www.sqlalchemy.org/trac/ticket/5462)修复引起的回归问题，该修复为MySQL功能表达式在索引中添加了双括号，这是后端所需的，这无意中扩展到包括任意[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")表达式以及Alembic的内部文本组件，这些对于Alembic来说是必需的，用于不暗示双括号的任意索引表达式。检查已经缩小，只包括直接的二元/一元/功能表达式。
- en: 'References: [#5800](https://www.sqlalchemy.org/trac/ticket/5800)'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5800](https://www.sqlalchemy.org/trac/ticket/5800)
- en: oracle
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in Oracle dialect introduced by [#4894](https://www.sqlalchemy.org/trac/ticket/4894)
    in SQLAlchemy 1.3.11 where use of a SQL expression in RETURNING for an UPDATE
    would fail to compile, due to a check for “server_default” when an arbitrary SQL
    expression is not a column.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLAlchemy 1.3.11中由[#4894](https://www.sqlalchemy.org/trac/ticket/4894)引入的Oracle方言中的回归问题，其中在UPDATE的RETURNING中使用SQL表达式会导致编译失败，因为在任意SQL表达式不是列时会检查“server_default”。
- en: 'References: [#5813](https://www.sqlalchemy.org/trac/ticket/5813)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5813](https://www.sqlalchemy.org/trac/ticket/5813)
- en: '**[oracle] [bug]**'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in Oracle dialect where retrieving a CLOB/BLOB column via [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") would fail as the LOB value would
    need to be read when returned; additionally, repaired support for retrieval of
    Unicode values via RETURNING under Python 2.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的一个bug，即通过[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")检索CLOB/BLOB列时会失败，因为在返回时需要读取LOB值；此外，修复了在Python
    2下通过RETURNING检索Unicode值的支持。
- en: 'References: [#5812](https://www.sqlalchemy.org/trac/ticket/5812)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5812](https://www.sqlalchemy.org/trac/ticket/5812)
- en: misc
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue where the stringification that is sometimes called when attempting
    to generate the “key” for the `.c` collection on a selectable would fail if the
    column were an unlabeled custom SQL construct using the `sqlalchemy.ext.compiler`
    extension, and did not provide a default compilation form; while this seems like
    an unusual case, it can get invoked for some ORM scenarios such as when the expression
    is used in an “order by” in combination with joined eager loading. The issue is
    that the lack of a default compiler function was raising [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") and not [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError").
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在尝试为可选择的`.c`集合生成“key”时有时会调用字符串化，如果列是使用`sqlalchemy.ext.compiler`扩展创建的未标记的自定义SQL构造，并且没有提供默认编译形式，则会失败；虽然这似乎是一个不寻常的情况，但在一些ORM场景中可能会调用它，例如在与连接的急加载一起在“order
    by”中使用表达式时。问题在于缺乏默认编译器函数会引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")而不是[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")。
- en: 'References: [#5836](https://www.sqlalchemy.org/trac/ticket/5836)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5836](https://www.sqlalchemy.org/trac/ticket/5836)
- en: 1.3.22
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.22
- en: 'Released: December 18, 2020'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年12月18日
- en: oracle
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression which occurred due to [#5755](https://www.sqlalchemy.org/trac/ticket/5755)
    which implemented isolation level support for Oracle. It has been reported that
    many Oracle accounts don’t actually have permission to query the `v$transaction`
    view so this feature has been altered to gracefully fallback when it fails upon
    database connect, where the dialect will assume “READ COMMITTED” is the default
    isolation level as was the case prior to SQLAlchemy 1.3.21. However, explicit
    use of the [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") method must now necessarily
    raise an exception, as Oracle databases with this restriction explicitly disallow
    the user from reading the current isolation level.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#5755](https://www.sqlalchemy.org/trac/ticket/5755)引起的回归，该问题实现了Oracle的隔离级别支持。据报道，许多Oracle帐户实际上没有权限查询`v$transaction`视图，因此当在数据库连接时失败时，此功能已被更改为优雅地回退，其中方言将假定“READ
    COMMITTED”是默认的隔离级别，就像在SQLAlchemy 1.3.21之前的情况一样。然而，现在必须明确使用[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")方法引发异常，因为具有此限制的Oracle数据库明确禁止用户读取当前隔离级别。
- en: 'References: [#5784](https://www.sqlalchemy.org/trac/ticket/5784)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5784](https://www.sqlalchemy.org/trac/ticket/5784)
- en: 1.3.21
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.21
- en: 'Released: December 17, 2020'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年12月17日
- en: orm
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a comprehensive check and an informative error message for the case where
    a mapped class, or a string mapped class name, is passed to [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship"). This is an extremely common error which warrants
    a clear message.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为传递给[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")的映射类或字符串映射类名称的情况添加了全面检查和信息丰富的错误消息。这是一个极为常见的错误，值得提供清晰的消息。
- en: Additionally, added a new rule to the class registry resolution such that with
    regards to the [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") parameter, if a mapped class and its table are
    of the identical string name, the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will be favored when resolving this parameter. In all
    other cases, the class continues to be favored if a class and table share the
    identical name.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，添加了一个新规则到类注册解析中，关于[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")参数，如果映射类及其表的字符串名称相同，则在解析此参数时将优先考虑[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。在所有其他情况下，如果类和表共享相同的名称，则仍然优先考虑类。
- en: 'References: [#5774](https://www.sqlalchemy.org/trac/ticket/5774)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5774](https://www.sqlalchemy.org/trac/ticket/5774)
- en: '**[orm] [bug]**'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") where objects in the `_ormsession.Session` that
    were already expired would be unnecessarily SELECTed individually when they were
    refreshed by the “evaluate”synchronize strategy.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")中的错误，当`_ormsession.Session`中的对象已过期时，当它们被“evaluate”同步策略刷新时，会不必要地单独进行SELECT查询。
- en: 'References: [#5664](https://www.sqlalchemy.org/trac/ticket/5664)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5664](https://www.sqlalchemy.org/trac/ticket/5664)
- en: '**[orm] [bug]**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving the `restore_load_context` option of ORM events such as
    [`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") such that the flag would not be carried
    along to subclasses which were mapped after the event handler were first established.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及ORM事件的`restore_load_context`选项的错误，例如[`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")，使得标志不会传递到在首次建立事件处理程序之后映射的子类。
- en: 'References: [#5737](https://www.sqlalchemy.org/trac/ticket/5737)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5737](https://www.sqlalchemy.org/trac/ticket/5737)
- en: sql
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A warning is emitted if a returning() method such as [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") is called multiple times, as this
    does not yet support additive operation. Version 1.4 will support additive operation
    for this. Additionally, any combination of the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") and `ValuesBase.return_defaults()`
    methods now raises an error as these methods are mutually exclusive; previously
    the operation would fail silently.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果多次调用 [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 或类似的 `returning()` 方法，则会发出警告，因为目前不支持累加操作。版本
    1.4 将支持此操作。此外，[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 和 `ValuesBase.return_defaults()`
    方法的任何组合现在都会引发错误，因为这些方法是互斥的；之前的操作会静默失败。
- en: 'References: [#5691](https://www.sqlalchemy.org/trac/ticket/5691)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5691](https://www.sqlalchemy.org/trac/ticket/5691)
- en: '**[sql] [bug]**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed structural compiler issue where some constructs such as MySQL / PostgreSQL
    “on conflict / on duplicate key” would rely upon the state of the `Compiler` object
    being fixed against their statement as the top level statement, which would fail
    in cases where those statements are branched from a different context, such as
    a DDL construct linked to a SQL statement.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了结构性编译器问题，某些构造（如 MySQL / PostgreSQL 的“on conflict / on duplicate key”）依赖于
    `Compiler` 对象的状态被固定为其作为顶级语句的状态，这在这些语句从不同上下文中分支出来时会失败，例如与 SQL 语句链接的 DDL 构造。
- en: 'References: [#5656](https://www.sqlalchemy.org/trac/ticket/5656)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5656](https://www.sqlalchemy.org/trac/ticket/5656)
- en: postgresql
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added new parameter [`ExcludeConstraint.ops`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") to the [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") object, to support operator
    class specification with this constraint. Pull request courtesy Alon Menczer.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 对象添加了新参数 [`ExcludeConstraint.ops`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")，以支持此约束的运算符类规范。感谢 Alon Menczer
    的拉取请求。
- en: 'References: [#5604](https://www.sqlalchemy.org/trac/ticket/5604)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5604](https://www.sqlalchemy.org/trac/ticket/5604)
- en: '**[postgresql] [bug] [mysql]**'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [mysql]**'
- en: Fixed regression introduced in 1.3.2 for the PostgreSQL dialect, also copied
    out to the MySQL dialect’s feature in 1.3.18, where usage of a non [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct such as [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") as the argument to [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") would fail to be accommodated
    correctly within the PostgreSQL or MySQL compilers.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了在 PostgreSQL 方言中引入的 1.3.2 版本的回归，也在 1.3.18 版本中复制到了 MySQL 方言的特性中，当使用非 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 构造（如 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")）作为 [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") 的参数时，在 PostgreSQL 或 MySQL
    编译器中未能正确处理。 '
- en: 'References: [#5729](https://www.sqlalchemy.org/trac/ticket/5729)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5729](https://www.sqlalchemy.org/trac/ticket/5729)
- en: mysql
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [reflection]**'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [reflection]**'
- en: Fixed issue where reflecting a server default on MariaDB only that contained
    a decimal point in the value would fail to be reflected correctly, leading towards
    a reflected table that lacked any server default.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了仅包含值中有小数点的 MariaDB 上的服务器默认反射问题，导致反射表缺乏任何服务器默认值。
- en: 'References: [#5744](https://www.sqlalchemy.org/trac/ticket/5744)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5744](https://www.sqlalchemy.org/trac/ticket/5744)
- en: '**[mysql] [sql]**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [sql]**'
- en: 'Added missing keywords to the `RESERVED_WORDS` list for the MySQL dialect:
    `action`, `level`, `mode`, `status`, `text`, `time`. Pull request courtesy Oscar
    Batori.'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 MySQL 方言的 `RESERVED_WORDS` 列表中添加了缺失的关键字：`action`、`level`、`mode`、`status`、`text`、`time`。感谢
    Oscar Batori 的拉取请求。
- en: 'References: [#5696](https://www.sqlalchemy.org/trac/ticket/5696)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5696](https://www.sqlalchemy.org/trac/ticket/5696)
- en: sqlite
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Added `sqlite_with_rowid=False` dialect keyword to enable creating tables as
    `CREATE TABLE … WITHOUT ROWID`. Patch courtesy Sean Anderson.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`sqlite_with_rowid=False`方言关键字，以便创建`CREATE TABLE … WITHOUT ROWID`表。感谢Sean
    Anderson的补丁。
- en: 'References: [#5685](https://www.sqlalchemy.org/trac/ticket/5685)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5685](https://www.sqlalchemy.org/trac/ticket/5685)
- en: mssql
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where a CREATE INDEX statement was rendered incorrectly when both
    `mssql-include` and `mssql_where` were specified. Pull request courtesy @Adiorz.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当同时指定`mssql-include`和`mssql_where`时，CREATE INDEX语句渲染不正确的错误。感谢@Adiorz的拉取请求。
- en: 'References: [#5751](https://www.sqlalchemy.org/trac/ticket/5751)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5751](https://www.sqlalchemy.org/trac/ticket/5751)
- en: '**[mssql] [bug]**'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added SQL Server code “01000” to the list of disconnect codes.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将SQL Server代码“01000”添加到断开连接代码列表中。
- en: 'References: [#5646](https://www.sqlalchemy.org/trac/ticket/5646)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5646](https://www.sqlalchemy.org/trac/ticket/5646)
- en: '**[mssql] [reflection] [sqlite]**'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [reflection] [sqlite]**'
- en: Fixed issue with composite primary key columns not being reported in the correct
    order. Patch courtesy @fulpm.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合主键列未按正确顺序报告的问题。感谢@fulpm。
- en: 'References: [#5661](https://www.sqlalchemy.org/trac/ticket/5661)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5661](https://www.sqlalchemy.org/trac/ticket/5661)
- en: oracle
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Implemented support for the SERIALIZABLE isolation level for Oracle databases,
    as well as a real implementation for [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level").
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了对Oracle数据库的SERIALIZABLE隔离级别的支持，以及对[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")的真正实现。
- en: See also
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Transaction Isolation Level / Autocommit](../dialects/oracle.html#oracle-isolation-level)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[事务隔离级别 / 自动提交](../dialects/oracle.html#oracle-isolation-level)'
- en: 'References: [#5755](https://www.sqlalchemy.org/trac/ticket/5755)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5755](https://www.sqlalchemy.org/trac/ticket/5755)
- en: 1.3.20
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.20
- en: 'Released: October 12, 2020'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年10月12日
- en: orm
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    with more detail is now raised if the target parameter for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is set to an unmapped object. Prior to this change
    a less detailed `AttributeError` was raised. Pull request courtesy Ramon Williams.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的目标参数设置为未映射对象，则现在会引发带有更多详细信息的[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。在此更改之前，会引发一个较少详细的`AttributeError`。感谢Ramon Williams的拉取请求。
- en: 'References: [#4428](https://www.sqlalchemy.org/trac/ticket/4428)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4428](https://www.sqlalchemy.org/trac/ticket/4428)
- en: '**[orm] [bug]**'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using a loader option against a string attribute name that
    is not actually a mapped attribute, such as a plain Python descriptor, would raise
    an uninformative AttributeError; a descriptive error is now raised.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对实际上不是映射属性的字符串属性名称（例如普通Python描述符）使用加载器选项会引发一个不具信息性的AttributeError的问题；现在会引发一个描述性错误。
- en: 'References: [#4589](https://www.sqlalchemy.org/trac/ticket/4589)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4589](https://www.sqlalchemy.org/trac/ticket/4589)
- en: engine
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where a non-string object sent to [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") or a subclass, as occurs with some third party
    dialects, would fail to stringify correctly. Pull request courtesy Andrzej Bartosiński.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将非字符串对象发送给[`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")或其子类（在某些第三方方言中会发生）时无法正确字符串化的问题。感谢Andrzej Bartosiński的拉取请求。
- en: 'References: [#5599](https://www.sqlalchemy.org/trac/ticket/5599)'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5599](https://www.sqlalchemy.org/trac/ticket/5599)
- en: '**[engine] [bug]**'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Repaired a function-level import that was not using SQLAlchemy’s standard late-import
    system within the sqlalchemy.exc module.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未在sqlalchemy.exc模块内使用SQLAlchemy标准延迟导入系统的函数级别导入。
- en: 'References: [#5632](https://www.sqlalchemy.org/trac/ticket/5632)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5632](https://www.sqlalchemy.org/trac/ticket/5632)
- en: sql
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the `pickle.dumps()` operation against [`Over`](../core/sqlelement.html#sqlalchemy.sql.expression.Over
    "sqlalchemy.sql.expression.Over") construct would produce a recursion overflow.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对[`Over`](../core/sqlelement.html#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")构造执行`pickle.dumps()`操作会产生递归溢出的问题。
- en: 'References: [#5644](https://www.sqlalchemy.org/trac/ticket/5644)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5644](https://www.sqlalchemy.org/trac/ticket/5644)
- en: '**[sql] [bug]**'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where an error was not raised in the case where a [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") were added to more than one [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") at a time. This raised correctly for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects. An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") is now raised when this occurs.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在这种情况下，当一个 [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 被同时添加到多个 [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") 时，错误没有被引发。这对 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 和 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象正确引发。当发生这种情况时，现在会引发一个 [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。
- en: 'References: [#5618](https://www.sqlalchemy.org/trac/ticket/5618)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5618](https://www.sqlalchemy.org/trac/ticket/5618)
- en: postgresql
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: The psycopg2 dialect now support PostgreSQL multiple host connections, by passing
    host/port combinations to the query string. Pull request courtesy Ramon Williams.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 方言现在支持将主机/端口组合传递给查询字符串，以支持 PostgreSQL 多主机连接。感谢 Ramon Williams 的拉取请求。
- en: See also
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specifying multiple fallback hosts](../dialects/postgresql.html#psycopg2-multi-host)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[指定多个备用主机](../dialects/postgresql.html#psycopg2-multi-host)'
- en: 'References: [#4392](https://www.sqlalchemy.org/trac/ticket/4392)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4392](https://www.sqlalchemy.org/trac/ticket/4392)
- en: '**[postgresql] [bug]**'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Adjusted the [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") methods to implement a straight “NOT”
    operation for negation, rather than negating the comparison operator.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 和 [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法，实现了直接的“NOT”操作来进行否定，而不是否定比较运算符。
- en: 'References: [#5518](https://www.sqlalchemy.org/trac/ticket/5518)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5518](https://www.sqlalchemy.org/trac/ticket/5518)
- en: '**[postgresql] [bug]**'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type would not consult the schema translate
    map when emitting a CREATE TYPE or DROP TYPE during the test to see if the type
    exists or not. Additionally, repaired an issue where if the same enum were encountered
    multiple times in a single DDL sequence, the “check” query would run repeatedly
    rather than relying upon a cached value.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型在进行 CREATE TYPE 或 DROP TYPE 时不会查阅模式转换映射的问题。此外，修复了一个问题，即如果在单个
    DDL 序列中多次遇到相同的枚举，则“check”查询将重复运行，而不是依赖于缓存值。
- en: 'References: [#5520](https://www.sqlalchemy.org/trac/ticket/5520)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5520](https://www.sqlalchemy.org/trac/ticket/5520)
- en: mysql
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Adjusted the MySQL dialect to correctly parenthesize functional index expressions
    as accepted by MySQL 8\. Pull request courtesy Ramon Williams.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 MySQL 方言，以正确地将函数索引表达式括在括号中，这是 MySQL 8 所接受的。感谢 Ramon Williams 的拉取请求。
- en: 'References: [#5462](https://www.sqlalchemy.org/trac/ticket/5462)'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5462](https://www.sqlalchemy.org/trac/ticket/5462)
- en: '**[mysql] [change]**'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: 'Add new MySQL reserved words: `cube`, `lateral` added in MySQL 8.0.1 and 8.0.14,
    respectively; this indicates that these terms will be quoted if used as table
    or column identifier names.'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 MySQL 保留字：`cube`，`lateral` 分别在 MySQL 8.0.1 和 8.0.14 中添加；这表明如果作为表或列标识符名称使用，这些术语将被引用。
- en: 'References: [#5539](https://www.sqlalchemy.org/trac/ticket/5539)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5539](https://www.sqlalchemy.org/trac/ticket/5539)
- en: '**[mysql] [bug]**'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The “skip_locked” keyword used with `with_for_update()` will emit a warning
    when used on MariaDB backends, and will then be ignored. This is a deprecated
    behavior that will raise in SQLAlchemy 1.4, as an application that requests “skip
    locked” is looking for a non-blocking operation which is not available on those
    backends.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `with_for_update()` 时使用的 “skip_locked” 关键字在 MariaDB 后端上使用时会发出警告，然后将被忽略。这是一个已弃用的行为，在
    SQLAlchemy 1.4 中将引发异常，因为请求“skip locked”的应用程序正在寻找一个在这些后端上不可用的非阻塞操作。
- en: 'References: [#5568](https://www.sqlalchemy.org/trac/ticket/5568)'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5568](https://www.sqlalchemy.org/trac/ticket/5568)
- en: '**[mysql] [bug]**'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where an UPDATE statement against a JOIN using MySQL multi-table format
    would fail to include the table prefix for the target table if the statement had
    no WHERE clause, as only the WHERE clause were scanned to detect a “multi table
    update” at that particular point. The target is now also scanned if it’s a JOIN
    to get the leftmost table as the primary table and the additional entries as additional
    FROM entries.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对使用 MySQL 多表格式的 JOIN 的 UPDATE 语句的错误，如果语句没有 WHERE 子句，则会失败地包括目标表的表前缀，因为在这一特定点只有
    WHERE 子句被扫描以检测“多表更新”。现在，如果是 JOIN，则还会扫描目标，以获取最左边的表作为主表，以及其他条目作为其他 FROM 条目。
- en: 'References: [#5617](https://www.sqlalchemy.org/trac/ticket/5617)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5617](https://www.sqlalchemy.org/trac/ticket/5617)
- en: mssql
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where a SQLAlchemy connection URI for Azure DW with `authentication=ActiveDirectoryIntegrated`
    (and no username+password) was not constructing the ODBC connection string in
    a way that was acceptable to the Azure DW instance.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中对于 Azure DW 的 SQLAlchemy 连接 URI 使用 `authentication=ActiveDirectoryIntegrated`（而没有用户名+密码）时，构造的
    ODBC 连接字符串的方式不被 Azure DW 实例接受。
- en: 'References: [#5592](https://www.sqlalchemy.org/trac/ticket/5592)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5592](https://www.sqlalchemy.org/trac/ticket/5592)
- en: tests
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed incompatibilities in the test suite when running against Pytest 6.x.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 Pytest 6.x 运行时测试套件不兼容的问题。
- en: 'References: [#5635](https://www.sqlalchemy.org/trac/ticket/5635)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5635](https://www.sqlalchemy.org/trac/ticket/5635)
- en: misc
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: 'Fixed issue where the following pool parameters were not being propagated to
    the new pool created when [`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") were called: `pre_ping`, `use_lifo`. Additionally
    the `recycle` and `reset_on_return` parameter is now propagated for the `AssertionPool`
    class.'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当调用 [`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") 时，以下池参数未被传播到新创建的池的问题：`pre_ping`，`use_lifo`。此外，现在还将
    `recycle` 和 `reset_on_return` 参数传播给了 `AssertionPool` 类。
- en: 'References: [#5582](https://www.sqlalchemy.org/trac/ticket/5582)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5582](https://www.sqlalchemy.org/trac/ticket/5582)
- en: '**[bug] [associationproxy] [ext]**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [associationproxy] [ext]**'
- en: An informative error is now raised when attempting to use an association proxy
    element as a plain column expression to be SELECTed from or used in a SQL function;
    this use case is not currently supported.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在尝试将关联代理元素用作要从中选择或在 SQL 函数中使用的普通列表达式时，现在会引发一个信息性错误；目前不支持此用例。
- en: 'References: [#5541](https://www.sqlalchemy.org/trac/ticket/5541), [#5542](https://www.sqlalchemy.org/trac/ticket/5542)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5541](https://www.sqlalchemy.org/trac/ticket/5541), [#5542](https://www.sqlalchemy.org/trac/ticket/5542)
- en: 1.3.19
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.19
- en: 'Released: August 17, 2020'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020 年 8 月 17 日
- en: orm
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Adjusted the workings of the [`Mapper.all_orm_descriptors()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") accessor to represent the attributes
    in the order that they are located in a deterministic way, assuming the use of
    Python 3.6 or higher which maintains the sorting order of class attributes based
    on how they were declared. This sorting is not guaranteed to match the declared
    order of attributes in all cases however; see the method documentation for the
    exact scheme.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [`Mapper.all_orm_descriptors()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 访问器的工作方式，以一种确定性的方式表示属性，假定使用 Python
    3.6 或更高版本，该版本根据声明属性的方式维护类属性的排序顺序。然而，这种排序不能保证在所有情况下都与属性的声明顺序匹配；请参阅方法文档以获取确切的方案。
- en: 'References: [#5494](https://www.sqlalchemy.org/trac/ticket/5494)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5494](https://www.sqlalchemy.org/trac/ticket/5494)
- en: orm declarative
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明
- en: '**[orm] [declarative] [usecase]**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [usecase]**'
- en: The name of the virtual column used when using the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") and [`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase") classes can now be customized, to allow
    for models that have a column that is actually named `type`. Pull request courtesy
    Jesse-Bakker.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")和[`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase")类时，虚拟列的名称现在可以自定义，以允许具有实际命名为`type`的列的模型。拉请求由Jesse-Bakker提供。
- en: 'References: [#5513](https://www.sqlalchemy.org/trac/ticket/5513)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5513](https://www.sqlalchemy.org/trac/ticket/5513)
- en: sql
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired an issue where the “ORDER BY” clause rendering a label name rather
    than a complete expression, which is particularly important for SQL Server, would
    fail to occur if the expression were enclosed in a parenthesized grouping in some
    cases. This case has been added to test support. The change additionally adjusts
    the “automatically add ORDER BY columns when DISTINCT is present” behavior of
    ORM query, deprecated in 1.4, to more accurately detect column expressions that
    are already present.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“ORDER BY”子句呈现标签名称而不是完整表达式的问题，这对于SQL Server特别重要，在某些情况下，如果表达式被括在括号中，则不会发生。此案例已添加到测试支持。此更改还调整了ORM查询中“在存在DISTINCT时自动添加ORDER
    BY列”的行为，在1.4中已弃用，以更准确地检测已经存在的列表达式。
- en: 'References: [#5470](https://www.sqlalchemy.org/trac/ticket/5470)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5470](https://www.sqlalchemy.org/trac/ticket/5470)
- en: '**[sql] [bug] [datatypes]**'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [datatypes]**'
- en: The `LookupError` message will now provide the user with up to four possible
    values that a column is constrained to via the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"). Values longer than 11 characters will be truncated and
    replaced with ellipses. Pull request courtesy Ramon Williams.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LookupError` 消息现在将向用户提供通过[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")约束的列可能的四个可能值。超过11个字符的值将被截断并替换为省略号。拉请求由Ramon Williams提供。'
- en: 'References: [#4733](https://www.sqlalchemy.org/trac/ticket/4733)'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4733](https://www.sqlalchemy.org/trac/ticket/4733)
- en: '**[sql] [bug]**'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") feature would not take effect
    when the [`Sequence.next_value()`](../core/defaults.html#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") function function for a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") were used in the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter and the create table DDL were emitted.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")功能在使用[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数中使用[`Sequence.next_value()`](../core/defaults.html#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value")函数时不起作用，并且创建表DDL被发出时。
- en: 'References: [#5500](https://www.sqlalchemy.org/trac/ticket/5500)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5500](https://www.sqlalchemy.org/trac/ticket/5500)
- en: postgresql
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the return type for the various RANGE comparison operators
    would itself be the same RANGE type rather than BOOLEAN, which would cause an
    undesirable result in the case that a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that defined result-processing behavior were
    in use. Pull request courtesy Jim Bosch.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了各种RANGE比较运算符的返回类型本身将是相同的RANGE类型而不是BOOLEAN的问题，这将导致在使用定义了结果处理行为的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")时产生不良结果。拉请求由Jim Bosch提供。
- en: 'References: [#5476](https://www.sqlalchemy.org/trac/ticket/5476)'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5476](https://www.sqlalchemy.org/trac/ticket/5476)
- en: mysql
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: The MySQL dialect will render FROM DUAL for a SELECT statement that has no FROM
    clause but has a WHERE clause. This allows things like “SELECT 1 WHERE EXISTS
    (subquery)” kinds of queries to be used as well as other use cases.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言将为没有FROM子句但有WHERE子句的SELECT语句渲染FROM DUAL。 这允许像“SELECT 1 WHERE EXISTS (subquery)”这样的查询以及其他用例。
- en: 'References: [#5481](https://www.sqlalchemy.org/trac/ticket/5481)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5481](https://www.sqlalchemy.org/trac/ticket/5481)
- en: '**[mysql] [bug]**'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed an issue where CREATE TABLE statements were not specifying the COLLATE
    keyword correctly.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CREATE TABLE语句未正确指定COLLATE关键字的问题。
- en: 'References: [#5411](https://www.sqlalchemy.org/trac/ticket/5411)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5411](https://www.sqlalchemy.org/trac/ticket/5411)
- en: '**[mysql] [bug]**'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Added MariaDB code 1927 to the list of “disconnect” codes, as recent MariaDB
    versions apparently use this code when the database server was stopped.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将MariaDB代码1927添加到“断开连接”代码列表中，因为最近的MariaDB版本显然在停止数据库服务器时使用此代码。
- en: 'References: [#5493](https://www.sqlalchemy.org/trac/ticket/5493)'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5493](https://www.sqlalchemy.org/trac/ticket/5493)
- en: sqlite
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [mssql] [reflection]**'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误] [mssql] [反射]**'
- en: Applied a sweep through all included dialects to ensure names that contain single
    or double quotes are properly escaped when querying system tables, for all [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") methods that accept object names as
    an argument (e.g. table names, view names, etc). SQLite and MSSQL contained two
    quoting issues that were repaired.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有包含的方言进行了扫描，以确保在查询系统表时正确转义包含单引号或双引号的名称，对所有[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")方法接受对象名称作为参数（例如表名、视图名等）的方法进行修复（例如表名、视图名等）。
    SQLite和MSSQL存在两个修复的引号问题。
- en: 'References: [#5456](https://www.sqlalchemy.org/trac/ticket/5456)'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5456](https://www.sqlalchemy.org/trac/ticket/5456)
- en: mssql
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [sql]**'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [sql]**'
- en: Fixed bug where the mssql dialect incorrectly escaped object names that contained
    ‘]’ character(s).
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mssql方言错误地转义包含‘]’字符的对象名称的错误。
- en: 'References: [#5467](https://www.sqlalchemy.org/trac/ticket/5467)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5467](https://www.sqlalchemy.org/trac/ticket/5467)
- en: misc
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[usecase] [py3k]**'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [py3k]**'
- en: Added a `**kw` argument to the `DeclarativeMeta.__init__()` method. This allows
    a class to support the [**PEP 487**](https://peps.python.org/pep-0487/) metaclass
    hook `__init_subclass__`. Pull request courtesy Ewen Gillies.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`DeclarativeMeta.__init__()`方法中添加了一个`**kw`参数。这允许类支持[**PEP 487**](https://peps.python.org/pep-0487/)元类钩子`__init_subclass__`。合并请求由Ewen
    Gillies提供。
- en: 'References: [##5357](https://www.sqlalchemy.org/trac/ticket/#5357)'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[##5357](https://www.sqlalchemy.org/trac/ticket/#5357)
- en: 1.3.18
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.18
- en: 'Released: June 25, 2020'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年6月25日
- en: orm
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Improve error message when using [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") in a query where the first entity is not a mapped
    class.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在查询中使用[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")时，若第一个实体不是映射类，则改进错误消息。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: '**[orm] [usecase]**'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added a new parameter [`query_expression.default_expr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.default_expr
    "sqlalchemy.orm.query_expression") to the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") construct, which will be appled to queries
    automatically if the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") option is not used. Pull request courtesy Haoyu
    Sun.
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")构造中添加了一个新参数[`query_expression.default_expr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.default_expr
    "sqlalchemy.orm.query_expression")，如果未使用[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")选项，则该参数将自动应用于查询。合并请求由Haoyu Sun提供。
- en: 'References: [#5198](https://www.sqlalchemy.org/trac/ticket/5198)'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5198](https://www.sqlalchemy.org/trac/ticket/5198)
- en: examples
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [change]**'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [变更]**'
- en: Added new option `--raw` to the examples.performance suite which will dump the
    raw profile test for consumption by any number of profiling visualizer tools.
    Removed the “runsnake” option as runsnake is very hard to build at this point;
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为examples.performance套件添加了新选项`--raw`，该选项将原始性能测试转储给任意数量的性能分析可视化工具使用。由于在这一点上很难构建runsnake，因此删除了“runsnake”选项；
- en: engine
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Further refinements to the fixes to the “reset” agent fixed in [#5326](https://www.sqlalchemy.org/trac/ticket/5326),
    which now emits a warning when it is not being correctly invoked and corrects
    for the behavior. Additional scenarios have been identified and fixed where this
    warning was being emitted.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步细化了在 [#5326](https://www.sqlalchemy.org/trac/ticket/5326) 中修复的“reset”代理的修复，现在在未正确调用时发出警告并纠正其行为。已识别并修复了额外的情况，其中会发出此警告。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: '**[engine] [bug]**'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object where stringifying the object would not URL encode special characters,
    preventing the URL from being re-consumable as a real URL. Pull request courtesy
    Miguel Grinberg.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象中的问题，其中对对象进行字符串化不会对特殊字符进行 URL 编码，从而阻止 URL 重新被消费为真实 URL。感谢 Miguel Grinberg 提交的拉取请求。
- en: 'References: [#5341](https://www.sqlalchemy.org/trac/ticket/5341)'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5341](https://www.sqlalchemy.org/trac/ticket/5341)
- en: sql
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added a “.schema” parameter to the [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") construct, allowing ad-hoc table expressions
    to also include a schema name. Pull request courtesy Dylan Modesitt.
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    构造中添加了一个“.schema”参数，允许临时表达式也包含模式名称。感谢 Dylan Modesitt 提交的拉取请求。'
- en: 'References: [#5309](https://www.sqlalchemy.org/trac/ticket/5309)'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5309](https://www.sqlalchemy.org/trac/ticket/5309)
- en: '**[sql] [change] [sybase]**'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change] [sybase]**'
- en: Added `.offset` support to sybase dialect. Pull request courtesy Alan D. Snow.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 sybase 方言添加了 `.offset` 支持。感谢 Alan D. Snow 提交的拉取请求。
- en: 'References: [#5294](https://www.sqlalchemy.org/trac/ticket/5294)'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5294](https://www.sqlalchemy.org/trac/ticket/5294)
- en: '**[sql] [bug]**'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Correctly apply self_group in type_coerce element.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `type_coerce` 元素中正确应用 `self_group`。
- en: The type coerce element did not correctly apply grouping rules when using in
    an expression
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式中使用时，类型强制元素未正确应用分组规则。
- en: 'References: [#5344](https://www.sqlalchemy.org/trac/ticket/5344)'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5344](https://www.sqlalchemy.org/trac/ticket/5344)
- en: '**[sql] [bug]**'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") output to the generic SQL string
    that is produced when calling `str()` on a statement. Previously, this clause
    would be omitted under the assumption that it was dialect specific. The hint text
    is presented within brackets to indicate the rendering of such hints varies among
    backends.
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用语句的 `str()` 时，将 [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") 输出到生成的通用 SQL 字符串中。先前，此子句会被省略，假设其是方言特定的。提示文本在括号内呈现，以指示此类提示在后端之间的呈现方式有所不同。
- en: 'References: [#5353](https://www.sqlalchemy.org/trac/ticket/5353)'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5353](https://www.sqlalchemy.org/trac/ticket/5353)
- en: '**[sql] [schema]**'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [schema]**'
- en: Introduce `IdentityOptions` to store common parameters for sequences and identity
    columns.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入 `IdentityOptions` 来存储序列和身份列的常见参数。
- en: 'References: [#5324](https://www.sqlalchemy.org/trac/ticket/5324)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5324](https://www.sqlalchemy.org/trac/ticket/5324)
- en: schema
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed issue where `dialect_options` were omitted when a database object (e.g.,
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"))
    was copied using `tometadata()`.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 `tometadata()` 复制数据库对象（例如，[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）时省略了 `dialect_options` 的问题。
- en: 'References: [#5276](https://www.sqlalchemy.org/trac/ticket/5276)'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5276](https://www.sqlalchemy.org/trac/ticket/5276)
- en: mysql
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Implemented row-level locking support for mysql. Pull request courtesy Quentin
    Somerville.
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 mysql 实现了行级锁支持。感谢 Quentin Somerville 提交的拉取请求。
- en: 'References: [#4860](https://www.sqlalchemy.org/trac/ticket/4860)'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4860](https://www.sqlalchemy.org/trac/ticket/4860)
- en: sqlite
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: SQLite 3.31 added support for computed column. This change enables their support
    in SQLAlchemy when targeting SQLite.
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 3.31 添加了对计算列的支持。此更改在针对 SQLite 时启用了对其的支持。
- en: 'References: [#5297](https://www.sqlalchemy.org/trac/ticket/5297)'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5297](https://www.sqlalchemy.org/trac/ticket/5297)
- en: '**[sqlite] [bug]**'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added “exists” to the list of reserved words for SQLite so that this word will
    be quoted when used as a label or column name. Pull request courtesy Thodoris
    Sotiropoulos.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“exists”添加到SQLite的保留字列表中，以便在用作标签或列名时将此单词引用。感谢Thodoris Sotiropoulos的拉取请求。
- en: 'References: [#5395](https://www.sqlalchemy.org/trac/ticket/5395)'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5395](https://www.sqlalchemy.org/trac/ticket/5395)
- en: mssql
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [change]**'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [change]**'
- en: Moved the `supports_sane_rowcount_returning = False` requirement from the `PyODBCConnector`
    level to the `MSDialect_pyodbc` since pyodbc does work properly in some circumstances.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`supports_sane_rowcount_returning = False`的要求从`PyODBCConnector`级别移至`MSDialect_pyodbc`，因为在某些情况下pyodbc可以正常工作。
- en: 'References: [#5321](https://www.sqlalchemy.org/trac/ticket/5321)'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5321](https://www.sqlalchemy.org/trac/ticket/5321)
- en: '**[mssql] [bug]**'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Refined the logic used by the SQL Server dialect to interpret multi-part schema
    names that contain many dots, to not actually lose any dots if the name does not
    have bracking or quoting used, and additionally to support a “dbname” token that
    has many parts including that it may have multiple, independently-bracketed sections.
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了SQL Server方言用于解释包含许多点的多部分模式名称的逻辑，如果名称没有使用括号或引号，则实际上不会丢失任何点，并且还支持包含多个独立括号部分的“dbname”标记。
- en: 'References: [#5364](https://www.sqlalchemy.org/trac/ticket/5364), [#5366](https://www.sqlalchemy.org/trac/ticket/5366)'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5364](https://www.sqlalchemy.org/trac/ticket/5364)，[#5366](https://www.sqlalchemy.org/trac/ticket/5366)
- en: '**[mssql] [bug] [pyodbc]**'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [pyodbc]**'
- en: Fixed an issue in the pyodbc connector such that a warning about pyodbc “drivername”
    would be emitted when using a totally empty URL. Empty URLs are normal when producing
    a non-connected dialect object or when using the “creator” argument to create_engine().
    The warning now only emits if the driver name is missing but other parameters
    are still present.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc连接器中的问题，当使用完全空的URL时，会发出关于pyodbc“drivername”的警告。在生成非连接的方言对象或使用“creator”参数创建引擎时，空URL是正常的。现在只有在缺少驱动程序名称但其他参数仍然存在时才会发出警告。
- en: 'References: [#5346](https://www.sqlalchemy.org/trac/ticket/5346)'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5346](https://www.sqlalchemy.org/trac/ticket/5346)
- en: '**[mssql] [bug]**'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue with assembling the ODBC connection string for the pyodbc DBAPI.
    Tokens containing semicolons and/or braces “{}” were not being correctly escaped,
    causing the ODBC driver to misinterpret the connection string attributes.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在为pyodbc DBAPI组装ODBC连接字符串时的问题。包含分号和/或大括号“{}”的标记未被正确转义，导致ODBC驱动程序错误解释连接字符串属性。
- en: 'References: [#5373](https://www.sqlalchemy.org/trac/ticket/5373)'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5373](https://www.sqlalchemy.org/trac/ticket/5373)
- en: '**[mssql] [bug]**'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where `datetime.time` parameters were being converted to `datetime.datetime`,
    making them incompatible with comparisons like `>=` against an actual [`TIME`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIME
    "sqlalchemy.dialects.mssql.TIME") column.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中`datetime.time`参数被转换为`datetime.datetime`，导致与实际[`TIME`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIME
    "sqlalchemy.dialects.mssql.TIME")列进行`>=`比较时不兼容。
- en: 'References: [#5339](https://www.sqlalchemy.org/trac/ticket/5339)'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5339](https://www.sqlalchemy.org/trac/ticket/5339)
- en: '**[mssql] [bug]**'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed an issue where the `is_disconnect` function in the SQL Server pyodbc dialect
    was incorrectly reporting the disconnect state when the exception message had
    a substring that matched a SQL Server ODBC error code.
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server pyodbc方言中的`is_disconnect`函数在异常消息中包含与SQL Server ODBC错误代码匹配的子字符串时错误报告断开状态的问题。
- en: 'References: [#5359](https://www.sqlalchemy.org/trac/ticket/5359)'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5359](https://www.sqlalchemy.org/trac/ticket/5359)
- en: oracle
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [reflection]**'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [reflection]**'
- en: Fixed bug in Oracle dialect where indexes that contain the full set of primary
    key columns would be mistaken as the primary key index itself, which is omitted,
    even if there were multiples. The check has been refined to compare the name of
    the primary key constraint against the index name itself, rather than trying to
    guess based on the columns present in the index.
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的一个问题，其中包含完整主键列集的索引会被误认为是主键索引本身，即使存在多个也会被省略。检查已经被细化，以将主键约束的名称与索引名称本身进行比较，而不是根据索引中存在的列来猜测。
- en: 'References: [#5421](https://www.sqlalchemy.org/trac/ticket/5421)'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5421](https://www.sqlalchemy.org/trac/ticket/5421)
- en: 1.3.17
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.17
- en: 'Released: May 13, 2020'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年5月13日
- en: orm
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added an accessor [`Comparator.expressions`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.Comparator.expressions
    "sqlalchemy.orm.ColumnProperty.Comparator.expressions") which provides access
    to the group of columns mapped under a multi-column [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") attribute.
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个访问器[`Comparator.expressions`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.Comparator.expressions
    "sqlalchemy.orm.ColumnProperty.Comparator.expressions")，它提供对在多列[`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")属性下映射的列组的访问。
- en: 'References: [#5262](https://www.sqlalchemy.org/trac/ticket/5262)'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5262](https://www.sqlalchemy.org/trac/ticket/5262)
- en: '**[orm] [usecase]**'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Introduce [`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") flag in a relationship to control if the synchronization
    events that mutate the in-Python attributes are added. This supersedes the previous
    change [#5149](https://www.sqlalchemy.org/trac/ticket/5149), which warned that
    `viewonly=True` relationship target of a back_populates or backref configuration
    would be disallowed.
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了[`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship")标志，用于控制是否添加会改变Python属性的同步事件。这取代了先前的更改[#5149](https://www.sqlalchemy.org/trac/ticket/5149)，该更改警告说`viewonly=True`关系的back_populates或backref配置的目标将被禁止。
- en: 'References: [#5237](https://www.sqlalchemy.org/trac/ticket/5237)'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5237](https://www.sqlalchemy.org/trac/ticket/5237)
- en: '**[orm] [bug]**'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") as the target of a join via `RelationshipComparator.of_type()`
    on a mapper that already has a subquery-based with_polymorphic setting that’s
    equivalent to the one requested would not correctly alias the ON clause in the
    join.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当在一个已经具有与请求的相同的基于子查询的with_polymorphic设置的映射器上通过`RelationshipComparator.of_type()`使用[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")作为连接的目标时，ON子句在连接中不会正确别名化。
- en: 'References: [#5288](https://www.sqlalchemy.org/trac/ticket/5288)'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5288](https://www.sqlalchemy.org/trac/ticket/5288)
- en: '**[orm] [bug]**'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in the area of where loader options such as selectinload() interact
    with the baked query system, such that the caching of a query is not supposed
    to occur if the loader options themselves have elements such as with_polymorphic()
    objects in them that currently are not cache-compatible. The baked loader could
    sometimes not fully invalidate itself in these some of these scenarios leading
    to missed eager loads.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了加载器选项（如selectinload()）与烘焙查询系统交互的问题，使得如果加载器选项本身具有当前不兼容缓存的元素（如with_polymorphic()对象），则不应该发生查询的缓存。在这些情况下，烘焙加载器有时无法完全使自身失效，导致急切加载被忽略。
- en: 'References: [#5303](https://www.sqlalchemy.org/trac/ticket/5303)'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5303](https://www.sqlalchemy.org/trac/ticket/5303)
- en: '**[orm] [bug]**'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the internal “identity set” implementation, which is a set that hashes
    objects on their id() rather than their hash values, to not actually call the
    `__hash__()` method of the objects, which are typically user-mapped objects. Some
    methods were calling this method as a side effect of the implementation.
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了内部的“identity set”实现，这是一个根据它们的id()而不是它们的哈希值对对象进行哈希的集合，以便实际上不调用对象的`__hash__()`方法，这些对象通常是用户映射的对象。一些方法在实现的副作用中调用了这个方法。
- en: 'References: [#5304](https://www.sqlalchemy.org/trac/ticket/5304)'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5304](https://www.sqlalchemy.org/trac/ticket/5304)
- en: '**[orm] [bug]**'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An informative error message is raised when an ORM many-to-one comparison is
    attempted against an object that is not an actual mapped instance. Comparisons
    such as those to scalar subqueries aren’t supported; generalized comparison with
    subqueries is better achieved using [`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has").
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试对一个不是实际映射实例的ORM多对一比较时，会引发一个信息性错误消息。不支持诸如与标量子查询的比较；使用[`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has")更好地实现了与子查询的广义比较。
- en: 'References: [#5269](https://www.sqlalchemy.org/trac/ticket/5269)'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5269](https://www.sqlalchemy.org/trac/ticket/5269)
- en: engine
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed fairly critical issue where the DBAPI connection could be returned to
    the connection pool while still in an un-rolled-back state. The reset agent responsible
    for rolling back the connection could be corrupted in the case that the transaction
    was “closed” without being rolled back or committed, which can occur in some scenarios
    when using ORM sessions and emitting .close() in a certain pattern involving savepoints.
    The fix ensures that the reset agent is always active.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当关键的问题，即在仍处于未回滚状态时，DBAPI连接可能会被返回到连接池。负责回滚连接的重置代理可能会在事务“关闭”而未回滚或提交的情况下被损坏，在使用ORM会话并以涉及保存点的某种模式发出.close()时可能会发生这种情况。修复确保重置代理始终处于活动状态。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: schema
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed issue where an [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") that is deferred in being associated with a table,
    such as as when it contains a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is not associated with any [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") yet, would fail to attach correctly if it also contained
    a non table-oriented expression.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了一个问题，即一个被延迟与表关联的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")，例如当它包含一个尚未与任何[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时，如果还包含非表导向表达式，则无法正确附加。 '
- en: 'References: [#5298](https://www.sqlalchemy.org/trac/ticket/5298)'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5298](https://www.sqlalchemy.org/trac/ticket/5298)
- en: '**[schema] [bug]**'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: A warning is emitted when making use of the [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") attribute as well as the [`sort_tables()`](../core/ddl.html#sqlalchemy.schema.sort_tables
    "sqlalchemy.schema.sort_tables") function, and the given tables cannot be correctly
    sorted due to a cyclic dependency between foreign key constraints. In this case,
    the functions will no longer sort the involved tables by foreign key, and a warning
    will be emitted. Other tables that are not part of the cycle will still be returned
    in dependency order. Previously, the sorted_table routines would return a collection
    that would unconditionally omit all foreign keys when a cycle was detected, and
    no warning was emitted.
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")属性以及[`sort_tables()`](../core/ddl.html#sqlalchemy.schema.sort_tables
    "sqlalchemy.schema.sort_tables")函数时，如果给定的表由于外键约束之间存在循环依赖而无法正确排序时，会发出警告。在这种情况下，这些函数将不再按照外键对涉及的表进行排序，并将发出警告。不属于循环的其他表仍将按依赖顺序返回。以前，当检测到循环时，排序表例程会返回一个集合，该集合在检测到循环时会无条件省略所有外键，并且不会发出警告。
- en: 'References: [#5316](https://www.sqlalchemy.org/trac/ticket/5316)'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5316](https://www.sqlalchemy.org/trac/ticket/5316)
- en: '**[schema]**'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Add `comment` attribute to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") `__repr__` method.
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的`__repr__`方法中添加`comment`属性。
- en: 'References: [#4138](https://www.sqlalchemy.org/trac/ticket/4138)'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4138](https://www.sqlalchemy.org/trac/ticket/4138)
- en: postgresql
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for columns or type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") or [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") in PostgreSQL. Previously a workaround
    was required in these use cases.
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PostgreSQL中添加了对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的列或类型[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")、[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")或[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")的支持。在这些用例中以前需要使用一种解决方法。
- en: 'References: [#5265](https://www.sqlalchemy.org/trac/ticket/5265)'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5265](https://www.sqlalchemy.org/trac/ticket/5265)
- en: '**[postgresql] [usecase]**'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Raise an explicit [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") when adding a table with a column of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") configured with [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") set to `False` when [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") is not set to `False`
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当添加一个配置了[`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")为`False`的[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型的`ARRAY`列的表时，如果[`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum")未设置为`False`，则引发明确的[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")
- en: 'References: [#5266](https://www.sqlalchemy.org/trac/ticket/5266)'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5266](https://www.sqlalchemy.org/trac/ticket/5266)
- en: mssql
  id: totrans-393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [反射]**'
- en: Fix a regression introduced by the reflection of computed column in MSSQL when
    using the legacy TDS version 4.2\. The dialect will try to detect the protocol
    version of first connect and run in compatibility mode if it cannot detect it.
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用旧版 TDS 版本 4.2 时，在 MSSQL 中反射计算列引入的回归。方言将尝试检测首次连接的协议版本，并在无法检测到时运行在兼容模式下。
- en: 'References: [#5255](https://www.sqlalchemy.org/trac/ticket/5255)'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5255](https://www.sqlalchemy.org/trac/ticket/5255)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [反射]**'
- en: Fix a regression introduced by the reflection of computed column in MSSQL when
    using SQL server versions before 2012, which does not support the `concat` function.
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用不支持 `concat` 函数的 SQL Server 版本 2012 之前的版本时，在 MSSQL 中反射计算列引入的回归。
- en: 'References: [#5271](https://www.sqlalchemy.org/trac/ticket/5271)'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5271](https://www.sqlalchemy.org/trac/ticket/5271)
- en: oracle
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug]**'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [性能] [错误]**'
- en: Changed the implementation of fetching CLOB and BLOB objects to use cx_Oracle’s
    native implementation which fetches CLOB/BLOB objects inline with other result
    columns, rather than performing a separate fetch. As always, this can be disabled
    by setting auto_convert_lobs to False.
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了获取 CLOB 和 BLOB 对象的实现方式，使用了 cx_Oracle 的本机实现，该实现将 CLOB/BLOB 对象与其他结果列一起获取，而不是执行单独的获取操作。如往常一样，可以通过将
    auto_convert_lobs 设置为 False 来禁用此功能。
- en: As part of this change, the behavior of a CLOB that was given a blank string
    on INSERT now returns None on SELECT, which is now consistent with that of VARCHAR
    on Oracle.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，给定空字符串的 CLOB 现在在 INSERT 时返回 None，在 SELECT 时也返回 None，这与 Oracle 中 VARCHAR
    的行为现在保持一致。
- en: 'References: [#5314](https://www.sqlalchemy.org/trac/ticket/5314)'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5314](https://www.sqlalchemy.org/trac/ticket/5314)
- en: '**[oracle] [bug]**'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Some modifications to how the cx_oracle dialect sets up per-column outputtype
    handlers for LOB and numeric datatypes to adjust for potential changes coming
    in cx_Oracle 8.
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 LOB 和数字数据类型，对 cx_oracle 方言如何设置每列输出类型处理程序进行了一些修改，以适应即将到来的 cx_Oracle 8 中的潜在更改。
- en: 'References: [#5246](https://www.sqlalchemy.org/trac/ticket/5246)'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5246](https://www.sqlalchemy.org/trac/ticket/5246)
- en: misc
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[change] [firebird]**'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[变更] [firebird]**'
- en: Adjusted dialect loading for `firebird://` URIs so the external sqlalchemy-firebird
    dialect will be used if it has been installed, otherwise fall back to the (now
    deprecated) internal Firebird dialect.
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了对 `firebird://` URI 的方言加载，如果已安装外部的 sqlalchemy-firebird 方言，则使用该方言，否则回退到（现在已弃用的）内部
    Firebird 方言。
- en: 'References: [#5278](https://www.sqlalchemy.org/trac/ticket/5278)'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5278](https://www.sqlalchemy.org/trac/ticket/5278)
- en: 1.3.16
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.16
- en: 'Released: April 7, 2020'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年4月7日
- en: orm
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance]**'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [性能]**'
- en: Modified the queries used by subqueryload and selectinload to no longer ORDER
    BY the primary key of the parent entity; this ordering was there to allow the
    rows as they come in to be copied into lists directly with a minimal level of
    Python-side collation. However, these ORDER BY clauses can negatively impact the
    performance of the query as in many scenarios these columns are derived from a
    subquery or are otherwise not actual primary key columns such that SQL planners
    cannot make use of indexes. The Python-side collation uses the native itertools.group_by()
    to collate the incoming rows, and has been modified to allow multiple row-groups-per-parent
    to be assembled together using list.extend(), which should still allow for relatively
    fast Python-side performance. There will still be an ORDER BY present for a relationship
    that includes an explicit order_by parameter, however this is the only ORDER BY
    that will be added to the query for both kinds of loading.
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 subqueryload 和 selectinload 使用的查询，不再按照父实体的主键排序；这种排序是为了允许行按照它们进入的顺序直接复制到列表中，以便在
    Python 端进行最小级别的排序。然而，这些 ORDER BY 子句可能会对查询的性能产生负面影响，因为在许多情况下，这些列是从子查询派生的，或者以其他方式不是实际的主键列，以至于
    SQL 规划器无法使用索引。Python 端排序使用本机 itertools.group_by() 来整理传入的行，并已经修改为允许使用 list.extend()
    将多个行组合到一起，这仍然可以实现相对快速的 Python 端性能。对于包含显式 order_by 参数的关系，仍将存在一个 ORDER BY，但这是两种加载方式的查询中唯一添加的
    ORDER BY。
- en: 'References: [#5162](https://www.sqlalchemy.org/trac/ticket/5162)'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5162](https://www.sqlalchemy.org/trac/ticket/5162)
- en: '**[orm] [bug]**'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") loading option where two or more loaders that represent
    different relationships with the same string key name as referenced from a single
    [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") construct with multiple subclass mappers would
    fail to invoke each subqueryload separately, instead making use of a single string-based
    slot that would prevent the other loaders from being invoked.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")加载选项中的一个 bug，当两个或更多的加载器代表不同关系，并且具有相同的字符串键名称，从一个包含多个子类映射器的[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")构造中引用时，将无法单独调用每个 subqueryload，而是使用单个基于字符串的插槽，这将阻止其他加载器被调用。
- en: 'References: [#5228](https://www.sqlalchemy.org/trac/ticket/5228)'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5228](https://www.sqlalchemy.org/trac/ticket/5228)
- en: '**[orm] [bug]**'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where a lazyload that uses session-local “get” against a target
    many-to-one relationship where an object with the correct primary key is present,
    however it’s an instance of a sibling class, does not correctly return None as
    is the case when the lazy loader actually emits a load for that row.
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即 lazyload 使用会话本地的“get”针对目标多对一关系，当具有正确主键的对象存在时，但它是同级类的实例时，不会正确返回 None，就像懒加载器实际为该行发出加载时的情况一样。
- en: 'References: [#5210](https://www.sqlalchemy.org/trac/ticket/5210)'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5210](https://www.sqlalchemy.org/trac/ticket/5210)
- en: orm declarative
  id: totrans-424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: The string argument accepted as the first positional argument by the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function when using the Declarative API is no longer
    interpreted using the Python `eval()` function; instead, the name is dot separated
    and the names are looked up directly in the name resolution dictionary without
    treating the value as a Python expression. However, passing a string argument
    to the other [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") parameters that necessarily must accept Python
    expressions will still use `eval()`; the documentation has been clarified to ensure
    that there is no ambiguity that this is in use.
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用声明式 API 时，[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 函数接受的第一个位置参数作为字符串参数不再使用 Python 的 `eval()` 函数进行解释；相反，名称是点分隔的，并且名称直接在名称解析字典中查找，而不将值视为
    Python 表达式。然而，将字符串参数传递给其他必须接受 Python 表达式的 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 参数仍将使用 `eval()`；文档已经澄清以确保没有歧义。
- en: See also
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Evaluation of relationship arguments](../orm/extensions/declarative/relationships.html#declarative-relationship-eval)
    - details on string evaluation'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[评估关系参数](../orm/extensions/declarative/relationships.html#declarative-relationship-eval)
    - 字符串评估的详细信息'
- en: 'References: [#5238](https://www.sqlalchemy.org/trac/ticket/5238)'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5238](https://www.sqlalchemy.org/trac/ticket/5238)
- en: sql
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [types]**'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [类型]**'
- en: Add ability to literal compile a `DateTime`, `Date` or `Time` when using the
    string dialect for debugging purposes. This change does not impact real dialect
    implementation that retain their current behavior.
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了在使用字符串方言进行调试时，能够对`DateTime`、`Date`或`Time`进行文字编译的能力。此更改不会影响保留其当前行为的真实方言实现。
- en: 'References: [#5052](https://www.sqlalchemy.org/trac/ticket/5052)'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5052](https://www.sqlalchemy.org/trac/ticket/5052)
- en: schema
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [reflection]**'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [反射]**'
- en: Added support for reflection of “computed” columns, which are now returned as
    part of the structure returned by [`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"). When reflecting full [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, computed columns will be represented using
    the [`Computed`](../core/defaults.html#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct.
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“计算”列的反射支持，这些列现在作为[`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")返回的结构的一部分返回。在反映完整的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象时，计算列将使用[`Computed`](../core/defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed")构造表示。
- en: 'References: [#5063](https://www.sqlalchemy.org/trac/ticket/5063)'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5063](https://www.sqlalchemy.org/trac/ticket/5063)
- en: postgresql
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed issue where a “covering” index, e.g. those which have an INCLUDE clause,
    would be reflected including all the columns in INCLUDE clause as regular columns.
    A warning is now emitted if these additional columns are detected indicating that
    they are currently ignored. Note that full support for “covering” indexes is part
    of [#4458](https://www.sqlalchemy.org/trac/ticket/4458). Pull request courtesy
    Marat Sharafutdinov.
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“覆盖”索引的问题，例如具有INCLUDE子句的索引，将被反映为包含所有INCLUDE子句中的列的常规列。如果检测到这些额外列，现在会发出警告，指示它们当前被忽略。请注意，“覆盖”索引的全面支持是[#4458](https://www.sqlalchemy.org/trac/ticket/4458)的一部分。拉取请求由Marat
    Sharafutdinov提供。
- en: 'References: [#5205](https://www.sqlalchemy.org/trac/ticket/5205)'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5205](https://www.sqlalchemy.org/trac/ticket/5205)
- en: mysql
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed issue in MySQL dialect when connecting to a pseudo-MySQL database such
    as that provided by ProxySQL, the up front check for isolation level when it returns
    no row will not prevent the dialect from continuing to connect. A warning is emitted
    that the isolation level could not be detected.
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在连接到伪MySQL数据库（例如由ProxySQL提供的数据库）时MySQL方言中的问题，当它返回没有行时，对隔离级别的事先检查不会阻止方言继续连接。会发出警告，指出无法检测到隔离级别。
- en: 'References: [#5239](https://www.sqlalchemy.org/trac/ticket/5239)'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5239](https://www.sqlalchemy.org/trac/ticket/5239)
- en: sqlite
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Implemented AUTOCOMMIT isolation level for SQLite when using pysqlite.
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用pysqlite时，为SQLite实现了AUTOCOMMIT隔离级别。
- en: 'References: [#5164](https://www.sqlalchemy.org/trac/ticket/5164)'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5164](https://www.sqlalchemy.org/trac/ticket/5164)
- en: mssql
  id: totrans-450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase] [mysql] [oracle]**'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例] [mysql] [oracle]**'
- en: Added support for [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") and [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") to SQL Server,
    MySQL, and Oracle.
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server、MySQL和Oracle添加了对[`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from")和[`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from")的支持。
- en: 'References: [#5137](https://www.sqlalchemy.org/trac/ticket/5137)'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5137](https://www.sqlalchemy.org/trac/ticket/5137)
- en: oracle
  id: totrans-454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [用例]**'
- en: Implemented AUTOCOMMIT isolation level for Oracle when using cx_Oracle. Also
    added a fixed default isolation level of READ COMMITTED for Oracle.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用cx_Oracle时，为Oracle实现了AUTOCOMMIT隔离级别。还为Oracle添加了一个固定的默认隔离级别为READ COMMITTED。
- en: 'References: [#5200](https://www.sqlalchemy.org/trac/ticket/5200)'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5200](https://www.sqlalchemy.org/trac/ticket/5200)
- en: '**[oracle] [bug] [reflection]**'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误] [反射]**'
- en: Fixed regression / incorrect fix caused by fix for [#5146](https://www.sqlalchemy.org/trac/ticket/5146)
    where the Oracle dialect reads from the “all_tab_comments” view to get table comments
    but fails to accommodate for the current owner of the table being requested, causing
    it to read the wrong comment if multiple tables of the same name exist in multiple
    schemas.
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#5146](https://www.sqlalchemy.org/trac/ticket/5146)的修复导致的回归/不正确的修复，其中Oracle方言从“all_tab_comments”视图读取表注释，但未能适应请求的表的当前所有者，导致如果多个具有相同名称的表存在于多个模式中，则读取错误的注释。
- en: 'References: [#5146](https://www.sqlalchemy.org/trac/ticket/5146)'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5146](https://www.sqlalchemy.org/trac/ticket/5146)
- en: tests
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed an issue that prevented the test suite from running with the recently
    released py.test 5.4.0.
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止测试套件在最近发布的py.test 5.4.0上运行的问题。
- en: 'References: [#5201](https://www.sqlalchemy.org/trac/ticket/5201)'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5201](https://www.sqlalchemy.org/trac/ticket/5201)
- en: misc
  id: totrans-465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[enum] [types]**'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[枚举] [类型]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    type now supports the parameter [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") to specify the length of the VARCHAR column to create
    when using non native enums by setting [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") to `False`
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型现在支持参数[`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum")来指定创建VARCHAR列时的长度，当使用非本机枚举时，通过将[`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")设置为`False`。'
- en: 'References: [#5183](https://www.sqlalchemy.org/trac/ticket/5183)'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5183](https://www.sqlalchemy.org/trac/ticket/5183)
- en: '**[installer]**'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[安装程序]**'
- en: Ensured that the “pyproject.toml” file is not included in builds, as the presence
    of this file indicates to pip that a pep-517 installation process should be used.
    As this mode of operation appears to be not well supported by current tools /
    distros, these problems are avoided within the scope of SQLAlchemy installation
    by omitting the file.
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保“pyproject.toml”文件不包含在构建中，因为此文件的存在表示pip应使用pep-517安装过程。由于当前工具/发行版似乎不太支持这种操作模式，在SQLAlchemy安装范围内通过省略文件来避免这些问题。
- en: 'References: [#5207](https://www.sqlalchemy.org/trac/ticket/5207)'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5207](https://www.sqlalchemy.org/trac/ticket/5207)
- en: 1.3.15
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.15
- en: 'Released: March 11, 2020'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年3月11日
- en: orm
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Adjusted the error message emitted by [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") when a left hand side can’t be located that the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method is the best way to resolve the issue.
    Also, within the 1.3 series, used a deterministic ordering when determining the
    FROM clause from a given column entity passed to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") so that the same expression is determined each time.
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")无法定位左侧时，调整了错误消息，指出[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法是解决问题的最佳方式。此外，在1.3系列中，从传递给[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的给定列实体确定FROM子句时，使用确定性排序，以便每次确定相同的表达式。
- en: 'References: [#5194](https://www.sqlalchemy.org/trac/ticket/5194)'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5194](https://www.sqlalchemy.org/trac/ticket/5194)
- en: '**[orm] [bug]**'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression in 1.3.14 due to [#4849](https://www.sqlalchemy.org/trac/ticket/4849)
    where a sys.exc_info() call failed to be invoked correctly when a flush error
    would occur. Test coverage has been added for this exception case.
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#4849](https://www.sqlalchemy.org/trac/ticket/4849)导致的1.3.14中的回归错误已修复，当发生刷新错误时，sys.exc_info()调用未能正确调用。已为此异常情况添加了测试覆盖。
- en: 'References: [#5196](https://www.sqlalchemy.org/trac/ticket/5196)'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5196](https://www.sqlalchemy.org/trac/ticket/5196)
- en: 1.3.14
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.14
- en: 'Released: March 10, 2020'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年3月10日
- en: general
  id: totrans-483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [bug] [py3k]**'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误] [py3k]**'
- en: Applied an explicit “cause” to most if not all internally raised exceptions
    that are raised from within an internal exception catch, to avoid misleading stacktraces
    that suggest an error within the handling of an exception. While it would be preferable
    to suppress the internally caught exception in the way that the `__suppress_context__`
    attribute would, there does not as yet seem to be a way to do this without suppressing
    an enclosing user constructed context, so for now it exposes the internally caught
    exception as the cause so that full information about the context of the error
    is maintained.
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于大多数或全部在内部异常捕获中引发的内部异常，都明确添加了一个“cause”，以避免误导性的堆栈跟踪，这些堆栈跟踪表明在处理异常时出现了错误。虽然最好抑制内部捕获的异常，就像`__suppress_context__`属性所做的那样，但目前似乎还没有一种方法可以在不抑制包含的用户构造上下文的情况下做到这一点，因此目前它将内部捕获的异常暴露为原因，以便维护有关错误上下文的全部信息。
- en: 'References: [#4849](https://www.sqlalchemy.org/trac/ticket/4849)'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4849](https://www.sqlalchemy.org/trac/ticket/4849)
- en: orm
  id: totrans-487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added a new flag [`InstanceEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") and [`SessionEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") which apply to the [`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load"), [`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh"), and [`SessionEvents.loaded_as_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent") events, which when set will
    restore the “load context” of the object after the event hook has been called.
    This ensures that the object remains within the “loader context” of the load operation
    that is already ongoing, rather than the object being transferred to a new load
    context due to refresh operations which may have occurred in the event. A warning
    is now emitted when this condition occurs, which recommends use of the flag to
    resolve this case. The flag is “opt-in” so that there is no risk introduced to
    existing applications.
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新标志[`InstanceEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")和[`SessionEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents")，适用于[`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")、[`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")和[`SessionEvents.loaded_as_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")事件，当设置时，将在调用事件挂钩后恢复对象的“加载上下文”。这确保对象保持在已经进行的加载操作的“加载器上下文”中，而不是由于在事件中可能发生的刷新操作而将对象转移到新的加载上下文。当出现这种情况时，现在会发出警告，建议使用标志来解决这种情况。该标志是“选择加入”的，因此不会引入对现有应用程序的风险。
- en: The change additionally adds support for the `raw=True` flag to session lifecycle
    events.
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还为会话生命周期事件添加了对`raw=True`标志的支持。
- en: 'References: [#5129](https://www.sqlalchemy.org/trac/ticket/5129)'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5129](https://www.sqlalchemy.org/trac/ticket/5129)
- en: '**[orm] [bug]**'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused in 1.3.13 by [#5056](https://www.sqlalchemy.org/trac/ticket/5056)
    where a refactor of the ORM path registry system made it such that a path could
    no longer be compared to an empty tuple, which can occur in a particular kind
    of joined eager loading path. The “empty tuple” use case has been resolved so
    that the path registry is compared to a path registry in all cases; the `PathRegistry`
    object itself now implements `__eq__()` and `__ne__()` methods which will take
    place for all equality comparisons and continue to succeed in the not anticipated
    case that a non- `PathRegistry` object is compared, while emitting a warning that
    this object should not be the subject of the comparison.
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3.13中由[#5056](https://www.sqlalchemy.org/trac/ticket/5056)引起的固定回归，其中ORM路径注册表系统的重构使路径不再可以与空元组进行比较，这可能发生在一种特定类型的连接式及加载路径中。已解决“空元组”用例，以便在所有情况下将路径注册表与路径注册表进行比较；`PathRegistry`对象本身现在实现了`__eq__()`和`__ne__()`方法，这些方法将在所有等式比较中发生，并继续在预料之外的情况下成功进行，即比较非`PathRegistry`对象时，同时发出警告，指出不应将该对象作为比较的主题。
- en: 'References: [#5110](https://www.sqlalchemy.org/trac/ticket/5110)'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#5110](https://www.sqlalchemy.org/trac/ticket/5110)
- en: '**[orm] [bug]**'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Setting a relationship to viewonly=True which is also the target of a back_populates
    or backref configuration will now emit a warning and eventually be disallowed.
    back_populates refers specifically to mutation of an attribute or collection,
    which is disallowed when the attribute is subject to viewonly=True. The viewonly
    attribute is not subject to persistence behaviors which means it will not reflect
    correct results when it is locally mutated.
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个关系设置为viewonly=True，同时它也是back_populates或backref配置的目标，现在会发出警告，并最终被禁止。back_populates具体指的是对属性或集合的改变，当属性受到viewonly=True的影响时，这是不允许的。viewonly属性不受持久性行为的影响，这意味着当它在本地被改变时，它将不会反映出正确的结果。
- en: 'References: [#5149](https://www.sqlalchemy.org/trac/ticket/5149)'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5149](https://www.sqlalchemy.org/trac/ticket/5149)
- en: '**[orm] [bug]**'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an additional regression in the same area as that of [#5080](https://www.sqlalchemy.org/trac/ticket/5080)
    introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a joined option across a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") into a relationship against the base class
    of that with_polymorphic, and then further into regular mapped relationships would
    fail as the base class component would not add itself to the load path in a way
    that could be located by the loader strategy. The changes applied in [#5080](https://www.sqlalchemy.org/trac/ticket/5080)
    have been further refined to also accommodate this scenario.
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[#5080](https://www.sqlalchemy.org/trac/ticket/5080)相同区域的另一个回归，这是通过[#4468](https://www.sqlalchemy.org/trac/ticket/4468)在1.3.0b3中引入的，在[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")创建跨一个关系的选项时，该关系进入对该with_polymorphic的基类的关系，然后进一步进入常规映射关系将失败，因为基类组件不会以可被加载器策略定位的方式添加到加载路径中。在[#5080](https://www.sqlalchemy.org/trac/ticket/5080)中应用的更改已经进一步完善，以适应这种情况。
- en: 'References: [#5121](https://www.sqlalchemy.org/trac/ticket/5121)'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5121](https://www.sqlalchemy.org/trac/ticket/5121)
- en: engine
  id: totrans-501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Expanded the scope of cursor/connection cleanup when a statement is executed
    to include when the result object fails to be constructed, or an after_cursor_execute()
    event raises an error, or autocommit / autoclose fails. This allows the DBAPI
    cursor to be cleaned up on failure and for connectionless execution allows the
    connection to be closed out and returned to the connection pool, where previously
    it waiting until garbage collection would trigger a pool return.
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了执行语句时游标/连接清理的范围，包括当结果对象构造失败时，或者after_cursor_execute()事件引发错误时，或者autocommit/autoclose失败时。这允许在失败时清理DBAPI游标，并且对于无连接执行，允许关闭连接并将其返回到连接池，之前等待垃圾回收触发连接池返回。
- en: 'References: [#5182](https://www.sqlalchemy.org/trac/ticket/5182)'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5182](https://www.sqlalchemy.org/trac/ticket/5182)
- en: sql
  id: totrans-505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where a CTE of an INSERT/UPDATE/DELETE that also uses RETURNING could
    then not be SELECTed from directly, as the internal state of the compiler would
    try to treat the outer SELECT as a DELETE statement itself and access nonexistent
    state.
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE（Common Table Expression）的一个问题，该问题出现在INSERT/UPDATE/DELETE语句中同时使用RETURNING，并且随后无法直接从中进行SELECT，因为编译器的内部状态会尝试将外部SELECT当作一个DELETE语句来处理，并访问不存在的状态。
- en: 'References: [#5181](https://www.sqlalchemy.org/trac/ticket/5181)'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5181](https://www.sqlalchemy.org/trac/ticket/5181)
- en: postgresql
  id: totrans-509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the “schema_translate_map” feature would not work with a PostgreSQL
    native enumeration type (i.e. [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")) in that while the “CREATE TYPE” statement
    would be emitted with the correct schema, the schema would not be rendered in
    the CREATE TABLE statement at the point at which the enumeration was referenced.
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“schema_translate_map”功能无法与PostgreSQL原生枚举类型（即[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM"))一起使用的问题。虽然“CREATE TYPE”语句会被正确地生成带有正确模式的枚举，但在引用枚举的CREATE
    TABLE语句中，模式不会被呈现出来。
- en: 'References: [#5158](https://www.sqlalchemy.org/trac/ticket/5158)'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5158](https://www.sqlalchemy.org/trac/ticket/5158)
- en: '**[postgresql] [bug] [reflection]**'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [reflection]**'
- en: Fixed bug where PostgreSQL reflection of CHECK constraints would fail to parse
    the constraint if the SQL text contained newline characters. The regular expression
    has been adjusted to accommodate for this case. Pull request courtesy Eric Borczuk.
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在该 bug 中，PostgreSQL 反射 CHECK 约束将无法解析约束，如果 SQL 文本包含换行符，则正则表达式已调整以适应此情况。拉取请求由
    Eric Borczuk 提供。
- en: 'References: [#5170](https://www.sqlalchemy.org/trac/ticket/5170)'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5170](https://www.sqlalchemy.org/trac/ticket/5170)
- en: mysql
  id: totrans-516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed issue in MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") construct where using
    a SQL function or other composed expression for a column argument would not properly
    render the `VALUES` keyword surrounding the column itself.
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") 构造中使用 SQL 函数或其他组合表达式作为列参数时，不正确渲染列本身周围的
    `VALUES` 关键字的问题。
- en: 'References: [#5173](https://www.sqlalchemy.org/trac/ticket/5173)'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5173](https://www.sqlalchemy.org/trac/ticket/5173)
- en: mssql
  id: totrans-520
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed issue where the [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") type would not accommodate for the
    `None` value, introduced as part of the series of fixes for this type first introduced
    in [#4983](https://www.sqlalchemy.org/trac/ticket/4983), [#5045](https://www.sqlalchemy.org/trac/ticket/5045).
    Additionally, added support for passing a backend-specific date formatted string
    through this type, as is typically allowed for date/time types on most other DBAPIs.
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") 类型不适应 `None` 值的问题，这是为了解决此类型首次引入的一系列修复的一部分，首次引入于
    [#4983](https://www.sqlalchemy.org/trac/ticket/4983)、[#5045](https://www.sqlalchemy.org/trac/ticket/5045)。此外，添加了支持通过此类型传递后端特定的日期格式字符串的支持，这通常允许在大多数其他
    DBAPI 上的日期/时间类型上使用。
- en: 'References: [#5132](https://www.sqlalchemy.org/trac/ticket/5132)'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5132](https://www.sqlalchemy.org/trac/ticket/5132)
- en: oracle
  id: totrans-524
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed a reflection bug where table comments could only be retrieved for tables
    actually owned by the user but not for tables visible to the user but owned by
    someone else. Pull request courtesy Dave Hirschfeld.
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个反射错误，在该错误中，只能为实际由用户拥有但不是由用户拥有的表获取表注释，而不是对用户可见但由其他人拥有的表。由 Dave Hirschfeld
    提供的拉取请求。
- en: 'References: [#5146](https://www.sqlalchemy.org/trac/ticket/5146)'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5146](https://www.sqlalchemy.org/trac/ticket/5146)
- en: misc
  id: totrans-528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '**[usecase] [ext]**'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [扩展]**'
- en: Added keyword arguments to the [`MutableList.sort()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList.sort
    "sqlalchemy.ext.mutable.MutableList.sort") function so that a key function as
    well as the “reverse” keyword argument can be provided.
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`MutableList.sort()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList.sort
    "sqlalchemy.ext.mutable.MutableList.sort") 函数添加了关键字参数，以便可以提供键函数和“reverse”关键字参数。
- en: 'References: [#5114](https://www.sqlalchemy.org/trac/ticket/5114)'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5114](https://www.sqlalchemy.org/trac/ticket/5114)
- en: '**[performance] [bug]**'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[性能] [错误]**'
- en: Revised an internal change to the test system added as a result of [#5085](https://www.sqlalchemy.org/trac/ticket/5085)
    where a testing-related module per dialect would be loaded unconditionally upon
    making use of that dialect, pulling in SQLAlchemy’s testing framework as well
    as the ORM into the module import space. This would only impact initial startup
    time and memory to a modest extent, however it’s best that these additional modules
    aren’t reverse-dependent on straight Core usage.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对测试系统的内部更改进行了修订，该更改是由 [#5085](https://www.sqlalchemy.org/trac/ticket/5085) 导致的，该更改是无条件加载每个方言的与测试相关的模块，一旦使用了该方言，就会拉入
    SQLAlchemy 的测试框架以及 ORM 到模块导入空间。这只会对初始启动时间和内存产生适度的影响，但最好这些附加模块不要对纯 Core 使用产生反向依赖。
- en: 'References: [#5180](https://www.sqlalchemy.org/trac/ticket/5180)'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5180](https://www.sqlalchemy.org/trac/ticket/5180)
- en: '**[bug] [installation]**'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [安装]**'
- en: Vendored the `inspect.formatannotation` function inside of `sqlalchemy.util.compat`,
    which is needed for the vendored version of `inspect.formatargspec`. The function
    is not documented in cPython and is not guaranteed to be available in future Python
    versions.
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `inspect.formatannotation` 函数放置在 `sqlalchemy.util.compat` 内，该函数在 vendored
    版本的 `inspect.formatargspec` 中需要，该函数未在 cPython 中记录，并且不能保证在将来的 Python 版本中可用。
- en: 'References: [#5138](https://www.sqlalchemy.org/trac/ticket/5138)'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5138](https://www.sqlalchemy.org/trac/ticket/5138)
- en: 1.3.13
  id: totrans-538
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.13
- en: 'Released: January 22, 2020'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年1月22日
- en: orm
  id: totrans-540
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance]**'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [performance]**'
- en: Identified a performance issue in the system by which a join is constructed
    based on a mapped relationship. The clause adaption system would be used for the
    majority of join expressions including in the common case where no adaptation
    is needed. The conditions under which this adaptation occur have been refined
    so that average non-aliased joins along a simple relationship without a “secondary”
    table use about 70% less function calls.
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过基于映射关系构建连接的系统中发现了性能问题。子句适配系统将用于大多数连接表达式，包括在常见情况下不需要适配的情况。已经对发生适配的条件进行了细化，以便平均非别名连接沿着简单关系使用约
    70% 的函数调用。
- en: '**[orm] [bug] [engine]**'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Added test support and repaired a wide variety of unnecessary reference cycles
    created for short-lived objects, mostly in the area of ORM queries. Thanks much
    to Carson Ip for the help on this.
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了测试支持，并修复了在短暂对象中创建的大量不必要的引用循环，主要集中在 ORM 查询领域。非常感谢 Carson Ip 在此方面的帮助。
- en: 'References: [#5050](https://www.sqlalchemy.org/trac/ticket/5050), [#5056](https://www.sqlalchemy.org/trac/ticket/5056),
    [#5071](https://www.sqlalchemy.org/trac/ticket/5071)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5050](https://www.sqlalchemy.org/trac/ticket/5050), [#5056](https://www.sqlalchemy.org/trac/ticket/5056),
    [#5071](https://www.sqlalchemy.org/trac/ticket/5071)
- en: '**[orm] [bug]**'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in loader options introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a loader option using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") targeting an aliased entity that is an
    inheriting subclass of the entity which the preceding relationship refers to would
    fail to produce a matching path. See also [#5082](https://www.sqlalchemy.org/trac/ticket/5082)
    fixed in this same release which involves a similar kind of issue.
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.3.0b3 版本中引入的加载器选项中的回归问题，该问题通过 [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    引入，其中使用 [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") 创建一个针对前一个关系引用的实体的继承子类的别名实体的加载器选项将无法生成匹配路径。另请参见在此相同版本中修复的
    [#5082](https://www.sqlalchemy.org/trac/ticket/5082)，其中涉及类似类型的问题。
- en: 'References: [#5107](https://www.sqlalchemy.org/trac/ticket/5107)'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5107](https://www.sqlalchemy.org/trac/ticket/5107)
- en: '**[orm] [bug]**'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in joined eager loading introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a joined option across a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") into a polymorphic subclass using `RelationshipProperty.of_type()`
    and then further along regular mapped relationships would fail as the polymorphic
    subclass would not add itself to the load path in a way that could be located
    by the loader strategy. A tweak has been made to resolve this scenario.
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.3.0b3 版本中引入的连接式预加载中的回归问题，该问题通过 [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    引入，其中通过 `RelationshipProperty.of_type()` 创建跨越 [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 到多态子类的连接选项，然后沿着常规映射关系进一步失败，因为多态子类不会以可以被加载策略定位的方式将自身添加到加载路径中。已进行微调以解决此场景。
- en: 'References: [#5082](https://www.sqlalchemy.org/trac/ticket/5082)'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5082](https://www.sqlalchemy.org/trac/ticket/5082)
- en: '**[orm] [bug]**'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired a warning in the ORM flush process that was not covered by test coverage
    when deleting objects that use the “version_id” feature. This warning is generally
    unreachable unless using a dialect that sets the “supports_sane_rowcount” flag
    to False, which is not typically the case however is possible for some MySQL configurations
    as well as older Firebird drivers, and likely some third party dialects.
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在删除使用“version_id”功能的对象时，在 ORM 刷新过程中出现的一个警告，该警告未被测试覆盖。通常情况下，此警告是无法触及的，除非使用的方言将“supports_sane_rowcount”标志设置为
    False，这在大多数情况下并不是通常情况，但对于某些 MySQL 配置以及较旧的 Firebird 驱动程序以及可能的一些第三方方言可能是可能的。
- en: 'References: [#5068](https://www.sqlalchemy.org/trac/ticket/5068)'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5068](https://www.sqlalchemy.org/trac/ticket/5068)
- en: '**[orm] [bug]**'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where usage of joined eager loading would not properly wrap the query
    inside of a subquery when [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") were used against the query. When any kind of
    result-limiting approach is used, such as DISTINCT, LIMIT, OFFSET, joined eager
    loading embeds the row-limited query inside of a subquery so that the collection
    results are not impacted. For some reason, the presence of GROUP BY was never
    included in this criterion, even though it has a similar effect as using DISTINCT.
    Additionally, the bug would prevent using GROUP BY at all for a joined eager load
    query for most database platforms which forbid non-aggregated, non-grouped columns
    from being in the query, as the additional columns for the joined eager load would
    not be accepted by the database.
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在使用连接的急加载时，当针对查询使用[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")时，不会正确将查询包装在子查询中。当使用任何种类的结果限制方法时，例如 DISTINCT、LIMIT、OFFSET，连接的急加载会将行限制的查询嵌入到子查询中，以便不影响集合结果。出于某种原因，GROUP
    BY 的存在从未包含在此标准中，即使它具有与使用 DISTINCT 相同的效果。此外，该 bug 将阻止对大多数数据库平台的连接急加载查询使用 GROUP
    BY，这些数据库平台禁止在查询中存在非聚合、非分组的列，因为连接的急加载的附加列不会被数据库接受。
- en: 'References: [#5065](https://www.sqlalchemy.org/trac/ticket/5065)'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5065](https://www.sqlalchemy.org/trac/ticket/5065)
- en: engine
  id: totrans-558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed issue where the collection of value processors on a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object would be mutated when “expanding IN” parameters
    were used with a datatype that has bind value processors; in particular, this
    would mean that when using statement caching and/or baked queries, the same compiled._bind_processors
    collection would be mutated concurrently. Since these processors are the same
    function for a given bind parameter namespace every time, there was no actual
    negative effect of this issue, however, the execution of a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object should never be causing any changes in its
    state, especially given that they are intended to be thread-safe and reusable
    once fully constructed.
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在使用具有绑定值处理器的数据类型与“扩展IN”参数一起使用时，[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 对象上的值处理器集合会发生变异；特别是，这意味着在使用语句缓存和/或烘焙查询时，同一compiled._bind_processors集合会同时发生变异。由于这些处理器对于给定的绑定参数命名空间每次都是相同的函数，因此这个问题实际上没有任何负面影响，但是，[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 对象的执行绝不应该导致其状态发生任何更改，尤其是考虑到它们旨在在完全构造后是线程安全和可重复使用的。
- en: 'References: [#5048](https://www.sqlalchemy.org/trac/ticket/5048)'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5048](https://www.sqlalchemy.org/trac/ticket/5048)
- en: sql
  id: totrans-562
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: A function created using [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") can now specify that the name of the
    function should be rendered with or without quotes by assigning the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to the .name element of the
    object. Prior to 1.3.4, quoting was never applied to function names, and some
    quoting was introduced in [#4467](https://www.sqlalchemy.org/trac/ticket/4467)
    but no means to force quoting for a mixed case name was available. Additionally,
    the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct when used as the name will
    properly register its lowercase name in the function registry so that the name
    continues to be available via the `func.` registry.
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")创建的函数现在可以通过将[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造分配给对象的.name元素来指定函数的名称是否应该带引号或不带引号。在1.3.4之前，从不对函数名称应用引号，并且在[#4467](https://www.sqlalchemy.org/trac/ticket/4467)中引入了一些引号，但没有任何方法来强制对混合大小写名称进行引用。此外，当作为名称使用[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造时，将正确在函数注册表中注册其小写名称，以便名称继续通过`func.`注册表可用。
- en: See also
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")'
- en: 'References: [#5079](https://www.sqlalchemy.org/trac/ticket/5079)'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5079](https://www.sqlalchemy.org/trac/ticket/5079)
- en: postgresql
  id: totrans-568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for prefixes to the [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, to allow support for Postgresql 12
    “MATERIALIZED” and “NOT MATERIALIZED” phrases. Pull request courtesy Marat Sharafutdinov.
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造添加了前缀支持，以支持Postgresql
    12中的“MATERIALIZED”和“NOT MATERIALIZED”短语。感谢Marat Sharafutdinov的拉取请求。
- en: See also
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: 'References: [#5040](https://www.sqlalchemy.org/trac/ticket/5040)'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5040](https://www.sqlalchemy.org/trac/ticket/5040)
- en: '**[postgresql] [bug]**'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the PostgreSQL dialect would fail to parse a reflected CHECK
    constraint that was a boolean-valued function (as opposed to a boolean-valued
    expression).
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言无法解析反射的CHECK约束的问题，该约束是一个布尔值函数（而不是布尔值表达式）。
- en: 'References: [#5039](https://www.sqlalchemy.org/trac/ticket/5039)'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5039](https://www.sqlalchemy.org/trac/ticket/5039)
- en: mssql
  id: totrans-577
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where a timezone-aware `datetime` value being converted to string
    for use as a parameter value of a [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") column was omitting the fractional
    seconds.
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即将时区感知的`datetime`值转换为字符串以用作[`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET")列的参数值时，省略了小数秒。
- en: 'References: [#5045](https://www.sqlalchemy.org/trac/ticket/5045)'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5045](https://www.sqlalchemy.org/trac/ticket/5045)
- en: tests
  id: totrans-581
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed a few test failures which would occur on Windows due to SQLite file locking
    issues, as well as some timing issues in connection pool related tests; pull request
    courtesy Federico Caselli.
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些在Windows上由于SQLite文件锁定问题而导致的测试失败，以及连接池相关测试中的一些时间问题；感谢Federico Caselli的拉取请求。
- en: 'References: [#4946](https://www.sqlalchemy.org/trac/ticket/4946)'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4946](https://www.sqlalchemy.org/trac/ticket/4946)
- en: '**[tests] [postgresql]**'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [postgresql]**'
- en: Improved detection of two phase transactions requirement for the PostgreSQL
    database by testing that max_prepared_transactions is set to a value greater than
    0\. Pull request courtesy Federico Caselli.
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过测试max_prepared_transactions是否设置为大于0的值，改进了对PostgreSQL数据库的两阶段事务需求的检测。感谢Federico
    Caselli的拉取请求。
- en: 'References: [#5057](https://www.sqlalchemy.org/trac/ticket/5057)'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5057](https://www.sqlalchemy.org/trac/ticket/5057)
- en: misc
  id: totrans-588
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in sqlalchemy.ext.serializer where a unique [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object could conflict with itself if
    it were present in the mapping itself, as well as the filter condition of the
    query, as one side would be used against the non-deserialized version and the
    other side would use the deserialized version. Logic is added to [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") similar to its “clone” method which
    will uniquify the parameter name upon deserialize so that it doesn’t conflict
    with its original.
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sqlalchemy.ext.serializer中的一个bug，即如果一个唯一的[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象同时存在于映射本身和查询的过滤条件中，那么它可能会与自身冲突，因为一侧将用于非反序列化版本，另一侧将用于反序列化版本。在[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")中添加了类似于其“clone”方法的逻辑，该方法在反序列化时将参数名称唯一化，以避免与原始版本冲突。
- en: 'References: [#5086](https://www.sqlalchemy.org/trac/ticket/5086)'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5086](https://www.sqlalchemy.org/trac/ticket/5086)
- en: 1.3.12
  id: totrans-592
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.12
- en: 'Released: December 16, 2019'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年12月16日
- en: orm
  id: totrans-594
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue involving `lazy="raise"` strategy where an ORM delete of an object
    would raise for a simple “use-get” style many-to-one relationship that had lazy=”raise”
    configured. This is inconsistent vs. the change introduced in 1.3 as part of [#4353](https://www.sqlalchemy.org/trac/ticket/4353),
    where it was established that a history operation that does not expect emit SQL
    should bypass the `lazy="raise"` check, and instead effectively treat it as `lazy="raise_on_sql"`
    for this case. The fix adjusts the lazy loader strategy to not raise for the case
    where the lazy load was instructed that it should not emit SQL if the object were
    not present.
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及`lazy="raise"`策略的问题，其中ORM删除对象会对具有配置为`lazy="raise"`的简单“use-get”样式的多对一关系引发异常。这与1.3中引入的更改不一致，作为[#4353](https://www.sqlalchemy.org/trac/ticket/4353)的一部分，其中确定了不期望发出SQL的历史操作应绕过`lazy="raise"`检查，并且实际上将其视为此情况下的`lazy="raise_on_sql"`。修复调整了延迟加载器策略，以便在指示延迟加载器不应发出SQL的情况下，如果对象不存在，则不会引发异常。
- en: 'References: [#4997](https://www.sqlalchemy.org/trac/ticket/4997)'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4997](https://www.sqlalchemy.org/trac/ticket/4997)
- en: '**[orm] [bug]**'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression introduced in 1.3.0 related to the association proxy refactor
    in [#4351](https://www.sqlalchemy.org/trac/ticket/4351) that prevented [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") attributes from working in terms of an association
    proxy that references them.
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.3.0中与[#4351](https://www.sqlalchemy.org/trac/ticket/4351)中的关联代理重构相关的回归，该回归阻止了[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")属性在引用它们的关联代理方面的工作。
- en: 'References: [#5000](https://www.sqlalchemy.org/trac/ticket/5000)'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5000](https://www.sqlalchemy.org/trac/ticket/5000)
- en: '**[orm] [bug]**'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Setting persistence-related flags on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") while also setting viewonly=True will now emit
    a regular warning, as these flags do not make sense for a viewonly=True relationship.
    In particular, the “cascade” settings have their own warning that is generated
    based on the individual values, such as “delete, delete-orphan”, that should not
    apply to a viewonly relationship. Note however that in the case of “cascade”,
    these settings are still erroneously taking effect even though the relationship
    is set up as “viewonly”. In 1.4, all persistence-related cascade settings will
    be disallowed on a viewonly=True relationship in order to resolve this issue.
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在设置`viewonly=True`的同时在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上设置与持久性相关的标志现在会发出常规警告，因为这些标志对于`viewonly=True`关系没有意义。特别是，“cascade”设置有自己的警告，根据各个值生成，例如“delete,
    delete-orphan”，不应适用于`viewonly`关系。但请注意，在“cascade”情况下，这些设置仍然错误地生效，即使关系设置为“viewonly”。在1.4中，将禁止在`viewonly=True`关系上设置所有与持久性相关的级联设置，以解决此问题。
- en: 'References: [#4993](https://www.sqlalchemy.org/trac/ticket/4993)'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4993](https://www.sqlalchemy.org/trac/ticket/4993)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: Fixed issue where when assigning a collection to itself as a slice, the mutation
    operation would fail as it would first erase the assigned collection inadvertently.
    As an assignment that does not change the contents should not generate events,
    the operation is now a no-op. Note that the fix only applies to Python 3; in Python
    2, the `__setitem__` hook isn’t called in this case; `__setslice__` is used instead
    which recreates the list item-by-item in all cases.
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将集合分配给自身作为切片时出现的问题，导致变异操作失败，因为它首先会意外地擦除分配的集合。由于不改变内容的赋值不应生成事件，因此该操作现在是一个空操作。请注意，此修复仅适用于Python
    3；在Python 2中，此情况下不会调用`__setitem__`钩子；而是使用`__setslice__`，它会在所有情况下逐个重新创建列表项。
- en: 'References: [#4990](https://www.sqlalchemy.org/trac/ticket/4990)'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4990](https://www.sqlalchemy.org/trac/ticket/4990)
- en: '**[orm] [bug]**'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where by if the “begin” of a transaction failed at the Core engine/connection
    level, such as due to network error or database is locked for some transactional
    recipes, within the context of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") procuring that connection from the connection pool and
    then immediately returning it, the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would not close the connection despite this connection
    not being stored within the state of that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This would lead to the connection being cleaned out
    by the connection pool weakref handler within garbage collection which is an unpreferred
    codepath that in some special configurations can emit errors in standard error.
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果在 Core 引擎/连接级别失败了事务的“begin”，例如由于网络错误或某些事务配方导致数据库被锁定，那么在从连接池获取该连接并立即返回它的
    ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    上下文中，ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    将不会关闭连接，尽管该连接未存储在该 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 的状态中。这将导致连接被垃圾收集中的连接池弱引用处理程序清除，这是一种不理想的代码路径，在某些特殊配置中可能会在标准错误中发出错误。
- en: 'References: [#5034](https://www.sqlalchemy.org/trac/ticket/5034)'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5034](https://www.sqlalchemy.org/trac/ticket/5034)
- en: sql
  id: totrans-610
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where “distinct” keyword passed to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") would not treat a string value as a “label
    reference” in the same way that the `select.distinct()` does; it would instead
    raise unconditionally. This keyword argument and the others passed to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") will ultimately be deprecated for SQLAlchemy
    2.0.
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即传递给 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 “distinct” 关键字不会像 `select.distinct()` 那样将字符串值视为
    “标签引用”，而是无条件地引发异常。这个关键字参数和其他传递给 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的参数最终将在 SQLAlchemy 2.0 中被弃用。
- en: 'References: [#5028](https://www.sqlalchemy.org/trac/ticket/5028)'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5028](https://www.sqlalchemy.org/trac/ticket/5028)
- en: '**[sql] [bug]**'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Changed the text of the exception for “Can’t resolve label reference” to include
    other kinds of label coercions, namely that “DISTINCT” is also in this category
    under the PostgreSQL dialect.
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了“无法解析标签引用”异常的文本，以包括其他类型的标签强制转换，即在 PostgreSQL 方言下，“DISTINCT” 也属于此类别。
- en: sqlite
  id: totrans-616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed issue to workaround SQLite’s behavior of assigning “numeric” affinity
    to JSON datatypes, first described at [Support for SQLite JSON Added](migration_13.html#change-3850),
    which returns scalar numeric JSON values as a number and not as a string that
    can be JSON deserialized. The SQLite-specific JSON deserializer now gracefully
    degrades for this case as an exception and bypasses deserialization for single
    numeric values, as from a JSON perspective they are already deserialized.
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了解决 SQLite 将 “numeric” 亲和性分配给 JSON 数据类型的行为问题，首次描述于 [Support for SQLite JSON
    Added](migration_13.html#change-3850)，该行为将标量数值 JSON 值返回为数字而不是可以进行 JSON 反序列化的字符串。SQLite
    特定的 JSON 反序列化器现在对于这种情况会优雅地降级为异常，并且对于单个数值的情况绕过反序列化，因为从 JSON 视角来看，它们已经被反序列化了。
- en: 'References: [#5014](https://www.sqlalchemy.org/trac/ticket/5014)'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5014](https://www.sqlalchemy.org/trac/ticket/5014)
- en: mssql
  id: totrans-620
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Repaired support for the [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") datatype on PyODBC, by adding PyODBC-level
    result handlers as it does not include native support for this datatype. This
    includes usage of the Python 3 “timezone” tzinfo subclass in order to set up a
    timezone, which on Python 2 makes use of a minimal backport of “timezone” in sqlalchemy.util.
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过添加 PyODBC 级别的结果处理程序修复了对 PyODBC 上 [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") 数据类型的支持，因为它不包括对此数据类型的本机支持。这包括使用 Python
    3 中的“timezone” tzinfo 子类来设置时区，在 Python 2 中使用 sqlalchemy.util 中的“timezone”的最小回退。
- en: 'References: [#4983](https://www.sqlalchemy.org/trac/ticket/4983)'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4983](https://www.sqlalchemy.org/trac/ticket/4983)
- en: 1.3.11
  id: totrans-624
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.11
- en: 'Released: November 11, 2019'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年11月11日
- en: orm
  id: totrans-626
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added accessor [`Query.is_single_entity()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.is_single_entity
    "sqlalchemy.orm.Query.is_single_entity") to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), which will indicate if the results returned by this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will be a list of ORM entities, or a tuple of entities
    or column expressions. SQLAlchemy hopes to improve upon the behavior of single
    entity / tuples in future releases such that the behavior would be explicit up
    front, however this attribute should be helpful with the current behavior. Pull
    request courtesy Patrick Hayes.
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了访问器 [`Query.is_single_entity()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.is_single_entity
    "sqlalchemy.orm.Query.is_single_entity") 到 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")，该访问器将指示此 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 返回的结果是一个 ORM 实体列表，还是实体或列表达式的元组。SQLAlchemy 希望在未来的版本中改进单个实体/元组的行为，以便行为在前期就是明确的，但是当前行为下此属性应该有所帮助。感谢
    Patrick Hayes 提供的拉取请求。
- en: 'References: [#4934](https://www.sqlalchemy.org/trac/ticket/4934)'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4934](https://www.sqlalchemy.org/trac/ticket/4934)
- en: '**[orm] [bug]**'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") flag was not intended to be manually set to True,
    and will now emit a warning when this occurs. The omit_join optimization is detected
    automatically, and the `omit_join` flag was only intended to disable the optimization
    in the hypothetical case that the optimization may have interfered with correct
    results, which has not been observed with the modern version of this feature.
    Setting the flag to True when it is not automatically detected may cause the selectin
    load feature to not work correctly when a non-default primary join condition is
    in use.
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") 标志并非意在手动设置为 True，当发生此情况时将会发出警告。`omit_join` 优化会被自动检测到，`omit_join`
    标志仅用于在假设优化可能干扰正确结果的情况下禁用优化，但在现代版本中尚未观察到这种情况。在非默认主连接条件正在使用时，将标志设置为 True 可能会导致 selectin
    加载功能无法正确工作。'
- en: 'References: [#4954](https://www.sqlalchemy.org/trac/ticket/4954)'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4954](https://www.sqlalchemy.org/trac/ticket/4954)
- en: '**[orm] [bug]**'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted if a primary key value is passed to [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") that consists of None for all primary key column positions.
    Previously, passing a single None outside of a tuple would raise a `TypeError`
    and passing a composite None (tuple of None values) would silently pass through.
    The fix now coerces the single None into a tuple where it is handled consistently
    with the other None conditions. Thanks to Lev Izraelit for the help with this.
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将主键值传递给 [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")，并且所有主键列位置都为 None，则会发出警告。以前，传递单个 None 会在元组之外引发 `TypeError`，传递复合
    None（None 值的元组）会悄悄通过。现在的修复将单个 None 强制转换为元组，以便与其他 None 条件一致处理。感谢 Lev Izraelit 对此的帮助。
- en: 'References: [#4915](https://www.sqlalchemy.org/trac/ticket/4915)'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4915](https://www.sqlalchemy.org/trac/ticket/4915)
- en: '**[orm] [bug]**'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") will not cache a query that was modified by
    a [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, so that compilation hooks
    that may be applying ad-hoc modifications to queries will take effect on each
    run. In particular this is helpful for events that modify queries used in lazy
    loading as well as eager loading such as “select in” loading. In order to re-enable
    caching for a query modified by this event, a new flag `bake_ok` is added; see
    [Using the before_compile event](../orm/extensions/baked.html#baked-with-before-compile)
    for details.
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") 不会缓存通过 [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件修改的查询，因此可能会对每次运行生效的编译钩子应用临时修改。特别是对于修改延迟加载和急加载中使用的查询的事件非常有帮助，比如“select
    in”加载。为了重新启用通过此事件修改的查询的缓存，添加了一个新标志 `bake_ok`；详细信息请参见[使用 before_compile 事件](../orm/extensions/baked.html#baked-with-before-compile)。'
- en: A longer term plan to provide a new form of SQL caching should solve this kind
    of issue more comprehensively.
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供一种新形式的SQL缓存的长期计划应该更全面地解决这种问题。
- en: 'References: [#4947](https://www.sqlalchemy.org/trac/ticket/4947)'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4947](https://www.sqlalchemy.org/trac/ticket/4947)
- en: '**[orm] [bug]**'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where a “secondary” table that referred to a selectable which
    in some way would refer to the local primary table would apply aliasing to both
    sides of the join condition when a relationship-related join, either via [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or by [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), were generated. The “local” side is now excluded.
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的bug，其中引用某种方式引用本地主表的可选择的“secondary”表在生成关系相关的连接条件时，无论是通过[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")还是通过[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，都会对连接条件的两侧应用别名。现在排除了“本地”一侧。
- en: 'References: [#4974](https://www.sqlalchemy.org/trac/ticket/4974)'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4974](https://www.sqlalchemy.org/trac/ticket/4974)
- en: engine
  id: totrans-643
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where parameter repr as used in logging and error reporting needs
    additional context in order to distinguish between a list of parameters for a
    single statement and a list of parameter lists, as the “list of lists” structure
    could also indicate a single parameter list where the first parameter itself is
    a list, such as for an array parameter. The engine/connection now passes in an
    additional boolean indicating how the parameters should be considered. The only
    SQLAlchemy backend that expects arrays as parameters is that of psycopg2 which
    uses pyformat parameters, so this issue has not been too apparent, however as
    other drivers that use positional gain more features it is important that this
    be supported. It also eliminates the need for the parameter repr function to guess
    based on the parameter structure passed.
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在日志记录和错误报告中使用的参数repr需要额外的上下文以区分单个语句的参数列表和参数列表的列表，因为“列表的列表”结构也可能表示第一个参数本身是一个列表的单个参数列表，例如用于数组参数。引擎/连接现在传入一个额外的布尔值，指示参数应如何考虑。唯一期望数组作为参数的SQLAlchemy后端是使用pyformat参数的psycopg2，因此这个问题并不太明显，但随着其他使用位置参数的驱动程序获得更多功能，支持这一点变得重要。它还消除了参数repr函数根据传递的参数结构猜测的需要。
- en: 'References: [#4902](https://www.sqlalchemy.org/trac/ticket/4902)'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4902](https://www.sqlalchemy.org/trac/ticket/4902)
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [postgresql]**'
- en: Fixed bug in [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") where the cache key generation did not
    take into account arguments passed in the form of tuples, such as the tuple of
    view name styles to return for the PostgreSQL dialect. This would lead the inspector
    to cache too generally for a more specific set of criteria. The logic has been
    adjusted to include every keyword element in the cache, as every argument is expected
    to be appropriate for a cache else the caching decorator should be bypassed by
    the dialect.
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")中的bug，其中缓存键生成没有考虑以元组形式传递的参数，例如为了返回PostgreSQL方言的视图名称样式的元组。这将导致检查器对更具体的一组条件进行了过于一般化的缓存。逻辑已经调整为包含缓存中的每个关键字元素，因为每个参数都应适用于缓存，否则应该绕过方言的缓存装饰器。
- en: 'References: [#4955](https://www.sqlalchemy.org/trac/ticket/4955)'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4955](https://www.sqlalchemy.org/trac/ticket/4955)
- en: sql
  id: totrans-650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added new accessors to expressions of type [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") to allow for specific datatype access and comparison,
    covering strings, integers, numeric, boolean elements. This revises the documented
    approach of CASTing to string when comparing values, instead adding specific functionality
    into the PostgreSQL, SQlite, MySQL dialects to reliably deliver these basic types
    in all cases.
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型的表达式添加了新的访问器，以允许特定数据类型的访问和比较，包括字符串、整数、数字、布尔元素。这修订了在比较值时将其转换为字符串的文档化方法，而是在PostgreSQL、SQlite、MySQL方言中添加了特定功能，以可靠地在所有情况下提供这些基本类型。
- en: See also
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
- en: '[`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string")'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string")'
- en: '[`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean")'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean")'
- en: '[`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float")'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float")'
- en: '[`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer")'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer")'
- en: 'References: [#4276](https://www.sqlalchemy.org/trac/ticket/4276)'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4276](https://www.sqlalchemy.org/trac/ticket/4276)
- en: '**[sql] [usecase]**'
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: The [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct now supports “unique” bound parameters, which will dynamically uniquify
    themselves on compilation thus allowing multiple [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs with the same bound parameter names
    to be combined together.
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造现在支持“unique”绑定参数，这将在编译时动态使自己唯一，从而允许多个具有相同绑定参数名称的 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造组合在一起。'
- en: 'References: [#4933](https://www.sqlalchemy.org/trac/ticket/4933)'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4933](https://www.sqlalchemy.org/trac/ticket/4933)
- en: '**[sql] [bug] [py3k]**'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [py3k]**'
- en: Changed the `repr()` of the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to use regular string repr()
    under Python 3, rather than running it through “backslashreplace” escaping, which
    can be misleading.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 构造的 `repr()` 更改为在Python 3下使用常规字符串 repr()，而不是通过“backslashreplace”转义，这可能会误导。
- en: 'References: [#4931](https://www.sqlalchemy.org/trac/ticket/4931)'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4931](https://www.sqlalchemy.org/trac/ticket/4931)
- en: schema
  id: totrans-666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [usecase]**'
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [用例]**'
- en: Added DDL support for “computed columns”; these are DDL column specifications
    for columns that have a server-computed value, either upon SELECT (known as “virtual”)
    or at the point of which they are INSERTed or UPDATEd (known as “stored”). Support
    is established for Postgresql, MySQL, Oracle SQL Server and Firebird. Thanks to
    Federico Caselli for lots of work on this one.
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对“计算列”（computed columns）的DDL支持；这些是针对具有服务器计算值的列的DDL列规范，无论是在SELECT时（称为“虚拟”）还是在它们被INSERT或UPDATE时（称为“存储”）都有。支持已建立在Postgresql、MySQL、Oracle
    SQL Server和Firebird上。感谢Federico Caselli在这方面的大量工作。
- en: See also
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Computed Columns (GENERATED ALWAYS AS)](../core/defaults.html#computed-ddl)'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[计算列 (GENERATED ALWAYS AS)](../core/defaults.html#computed-ddl)'
- en: 'References: [#4894](https://www.sqlalchemy.org/trac/ticket/4894)'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4894](https://www.sqlalchemy.org/trac/ticket/4894)
- en: '**[schema] [bug]**'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [bug]**'
- en: Fixed bug where a table that would have a column label overlap with a plain
    column name, such as “foo.id AS foo_id” vs. “foo.foo_id”, would prematurely generate
    the `._label` attribute for a column before this overlap could be detected due
    to the use of the `index=True` or `unique=True` flag on the column in conjunction
    with the default naming convention of `"column_0_label"`. This would then lead
    to failures when `._label` were used later to generate a bound parameter name,
    in particular those used by the ORM when generating the WHERE clause for an UPDATE
    statement. The issue has been fixed by using an alternate `._label` accessor for
    DDL generation that does not affect the state of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). The accessor also bypasses the key-deduplication
    step as it is not necessary for DDL, the naming is now consistently `"<tablename>_<columnname>"`
    without any subsequent numeric symbols when used in DDL.
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即一个表的列标签与普通列名重叠，例如“foo.id AS foo_id”与“foo.foo_id”，会在此重叠被检测之前过早生成`._label`属性，因为在列上使用`index=True`或`unique=True`标志与默认命名约定“column_0_label”结合使用。然后，当稍后使用`._label`生成绑定参数名称时，特别是在
    ORM 生成 UPDATE 语句的 WHERE 子句时，会导致失败。通过使用用于 DDL 生成的替代`._label`访问器来修复此问题，该访问器不会影响[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的状态。该访问器还绕过了键去重步骤，因为对于 DDL 来说这是不必要的，命名现在在 DDL 中一致地是`"<tablename>_<columnname>"`，在用于
    DDL 时不会有任何后续的数字符号。
- en: 'References: [#4911](https://www.sqlalchemy.org/trac/ticket/4911)'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4911](https://www.sqlalchemy.org/trac/ticket/4911)
- en: mysql
  id: totrans-675
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added “Connection was killed” message interpreted from the base pymysql.Error
    class in order to detect closed connection, based on reports that this message
    is arriving via a pymysql.InternalError() object which indicates pymysql is not
    handling it correctly.
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了从基本 pymysql.Error 类中解释的“连接被终止”消息，以便检测到关闭的连接，根据报告，此消息通过 pymysql.InternalError()
    对象到达，这表明 pymysql 未正确处理它。
- en: 'References: [#4945](https://www.sqlalchemy.org/trac/ticket/4945)'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4945](https://www.sqlalchemy.org/trac/ticket/4945)
- en: mssql
  id: totrans-679
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in MSSQL dialect where an expression-based OFFSET value in a SELECT
    would be rejected, even though the dialect can render this expression inside of
    a ROW NUMBER-oriented LIMIT/OFFSET construct.
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MSSQL 方言中的问题，即在 SELECT 中基于表达式的 OFFSET 值会被拒绝，尽管方言可以在 ROW NUMBER 导向的 LIMIT/OFFSET
    结构中呈现此表达式。
- en: 'References: [#4973](https://www.sqlalchemy.org/trac/ticket/4973)'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4973](https://www.sqlalchemy.org/trac/ticket/4973)
- en: '**[mssql] [bug]**'
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed an issue in the `Engine.table_names()` method where it would feed the
    dialect’s default schema name back into the dialect level table function, which
    in the case of SQL Server would interpret it as a dot-tokenized schema name as
    viewed by the mssql dialect, which would cause the method to fail in the case
    where the database username actually had a dot inside of it. In 1.3, this method
    is still used by the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") function so is a prominent codepath. In
    1.4, which is the current master development branch, this issue doesn’t exist,
    both because [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") isn’t using this method nor does the method
    pass the default schema name explicitly. The fix nonetheless guards against the
    default server name value returned by the dialect from being interpreted as dot-tokenized
    name under any circumstances by wrapping it in quoted_name().
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Engine.table_names()`方法中的问题，该方法会将方言的默认模式名称反馈给方言级别的表函数，在 SQL Server 的情况下，会将其解释为
    mssql 方言视图中的点标记模式名称，这会导致在数据库用户名实际上包含点的情况下该方法失败。在 1.3 版本中，此方法仍然被[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")函数使用，因此是一个重要的代码路径。在当前主开发分支 1.4 中，这个问题不存在，因为[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")没有使用这个方法，也不会显式传递默认模式名称。尽管如此，修复仍然通过将方言返回的默认服务器名称值用
    quoted_name() 包装来防止在任何情况下被解释为点标记名称。
- en: 'References: [#4923](https://www.sqlalchemy.org/trac/ticket/4923)'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4923](https://www.sqlalchemy.org/trac/ticket/4923)
- en: oracle
  id: totrans-686
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Added dialect-level flag `encoding_errors` to the cx_Oracle dialect, which can
    be specified as part of [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). This is passed to SQLAlchemy’s unicode decoding converter
    under Python 2, and to cx_Oracle’s `cursor.var()` object as the `encodingErrors`
    parameter under Python 3, for the very unusual case that broken encodings are
    present in the target database which cannot be fetched unless error handling is
    relaxed. The value is ultimately one of the Python “encoding errors” parameters
    passed to `decode()`.
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 cx_Oracle 方言添加了方言级别标志 `encoding_errors`，可以作为 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的一部分指定。在 Python 2 下，这将传递给 SQLAlchemy 的 unicode 解码转换器，而在
    Python 3 下，这将传递给 cx_Oracle 的 `cursor.var()` 对象作为 `encodingErrors` 参数，用于目标数据库中存在无法获取的破损编码的非常罕见情况，除非放宽错误处理。该值最终是传递给
    `decode()` 的 Python “编码错误”参数之一。
- en: 'References: [#4799](https://www.sqlalchemy.org/trac/ticket/4799)'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4799](https://www.sqlalchemy.org/trac/ticket/4799)
- en: '**[oracle] [bug] [firebird]**'
  id: totrans-690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [firebird]**'
- en: Modified the approach of “name normalization” for the Oracle and Firebird dialects,
    which converts from the UPPERCASE-as-case-insensitive convention of these dialects
    into lowercase-as-case-insensitive for SQLAlchemy, to not automatically apply
    the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to a name that matches itself
    under upper or lower case conversion, as is the case for many non-european characters.
    All names used within metadata structures are converted to [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") objects in any case; the change here
    would only affect the output of some inspection functions.
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 Oracle 和 Firebird 方言的“名称规范化”方法，将这些方言的大写作为不区分大小写的约定转换为 SQLAlchemy 中的小写作为不区分大小写的约定，以便不自动将
    [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 构造应用于在大写或小写转换下匹配自身的名称，这对许多非欧洲字符来说是一种情况。在元数据结构中使用的所有名称都会转换为
    [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 对象；这里的更改只会影响一些检查函数的输出。
- en: 'References: [#4931](https://www.sqlalchemy.org/trac/ticket/4931)'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4931](https://www.sqlalchemy.org/trac/ticket/4931)
- en: '**[oracle] [bug]**'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    datatype will now bind to the `cx_Oracle.FIXED_NCHAR` DBAPI data bindings when
    used in a bound parameter, which supplies proper comparison behavior against a
    variable-length string. Previously, the [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") datatype would bind to `cx_oracle.NCHAR` which is not
    fixed length; the [`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")
    datatype already binds to `cx_Oracle.FIXED_CHAR` so it is now consistent that
    [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    binds to `cx_Oracle.FIXED_NCHAR`.
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用绑定参数时，[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    数据类型现在将绑定到 `cx_Oracle.FIXED_NCHAR` DBAPI 数据绑定，从而提供针对可变长度字符串的正确比较行为。以前，[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") 数据类型会绑定到 `cx_oracle.NCHAR`，这不是固定长度；[`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR") 数据类型已经绑定到 `cx_Oracle.FIXED_CHAR`，因此现在一致的是[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") 绑定到 `cx_Oracle.FIXED_NCHAR`。
- en: 'References: [#4913](https://www.sqlalchemy.org/trac/ticket/4913)'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ��考：[#4913](https://www.sqlalchemy.org/trac/ticket/4913)
- en: tests
  id: totrans-696
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed test failures which would occur with newer SQLite as of version 3.30 or
    greater, due to their addition of nulls ordering syntax as well as new restrictions
    on aggregate functions. Pull request courtesy Nils Philippsen.
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在新版本 SQLite（3.30或更高版本）中可能出现的测试失败，这是由于它们添加了空值排序语法以及对聚合函数的新限制。感谢 Nils Philippsen
    提交的拉取请求。
- en: 'References: [#4920](https://www.sqlalchemy.org/trac/ticket/4920)'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4920](https://www.sqlalchemy.org/trac/ticket/4920)
- en: misc
  id: totrans-700
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [installation] [windows]**'
  id: totrans-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [installation] [windows]**'
- en: Added a workaround for a setuptools-related failure that has been observed as
    occurring on Windows installations, where setuptools is not correctly reporting
    a build error when the MSVC build dependencies are not installed and therefore
    not allowing graceful degradation into non C extensions builds.
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个解决方案，用于解决在 Windows 安装中观察到的 setuptools 相关故障，当未安装 MSVC 构建依赖项时，setuptools
    没有正确报告构建错误，因此不允许优雅地降级为非 C 扩展构建。
- en: 'References: [#4967](https://www.sqlalchemy.org/trac/ticket/4967)'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4967](https://www.sqlalchemy.org/trac/ticket/4967)
- en: '**[bug] [firebird]**'
  id: totrans-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Added additional “disconnect” message “Error writing data to the connection”
    to Firebird disconnection detection. Pull request courtesy lukens.
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Firebird断开检测添加了额外的“断开”消息“写入数据到连接时出错”。拉取请求由lukens提供。
- en: 'References: [#4903](https://www.sqlalchemy.org/trac/ticket/4903)'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4903](https://www.sqlalchemy.org/trac/ticket/4903)
- en: 1.3.10
  id: totrans-707
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.10
- en: 'Released: October 9, 2019'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年10月9日
- en: mssql
  id: totrans-709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in SQL Server dialect with new “max_identifier_length” feature where
    the mssql dialect already featured this flag, and the implementation did not accommodate
    for the new initialization hook correctly.
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server方言中新“max_identifier_length”功能的错误，其中mssql方言已经具有此标志，但实现未正确适应新的初始化挂钩。
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: oracle
  id: totrans-713
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in Oracle dialect that was inadvertently using max identifier
    length of 128 characters on Oracle server 12.2 and greater even though the stated
    contract for the remainder of the 1.3 series is that this value stays at 30 until
    version SQLAlchemy 1.4\. Also repaired issues with the retrieval of the “compatibility”
    version, and removed the warning emitted when the “v$parameter” view was not accessible
    as this was causing user confusion.
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的回归，该方言在Oracle服务器12.2及更高版本上无意中使用了128个字符的最大标识符长度，尽管1.3系列的其余部分的规定是该值保持在30，直到SQLAlchemy
    1.4版本。还修复了检索“兼容性”版本的问题，并删除了当“v$parameter”视图不可访问时发出的警告，因为这导致用户困惑。
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857), [#4898](https://www.sqlalchemy.org/trac/ticket/4898)'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857), [#4898](https://www.sqlalchemy.org/trac/ticket/4898)
- en: 1.3.9
  id: totrans-717
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.9
- en: 'Released: October 4, 2019'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年10月4日
- en: orm
  id: totrans-719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in selectinload loader strategy caused by [#4775](https://www.sqlalchemy.org/trac/ticket/4775)
    (released in version 1.3.6) where a many-to-one attribute of None would no longer
    be populated by the loader. While this was usually not noticeable due to the lazyloader
    populating None upon get, it would lead to a detached instance error if the object
    were detached.
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4775](https://www.sqlalchemy.org/trac/ticket/4775)（在版本1.3.6中发布）引起的selectinload加载策略中的回归，其中None的多对一属性将不再被加载器填充。虽然由于延迟加载器在获取时填充None，通常不会注意到这一点，但如果对象被分离，将导致分离实例错误。
- en: 'References: [#4872](https://www.sqlalchemy.org/trac/ticket/4872)'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4872](https://www.sqlalchemy.org/trac/ticket/4872)
- en: '**[orm] [bug]**'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Passing a plain string expression to [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") is deprecated, as all string coercions were removed
    in [#4481](https://www.sqlalchemy.org/trac/ticket/4481) and this one should have
    been included. The [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") function may be used to produce a
    textual column expression.
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将普通字符串表达式传递给[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")已被弃用，因为所有字符串强制转换在[#4481](https://www.sqlalchemy.org/trac/ticket/4481)中已被移除，而这个应该已经包含在内。可以使用[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")函数生成文本列表达式。
- en: 'References: [#4873](https://www.sqlalchemy.org/trac/ticket/4873)'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4873](https://www.sqlalchemy.org/trac/ticket/4873)
- en: '**[orm] [bug]**'
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted for a condition in which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") may implicitly swap an object out of the identity map
    for another one with the same primary key, detaching the old one, which can be
    an observed result of load operations which occur within the [`SessionEvents.after_flush()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") hook. The warning is intended to notify
    the user that some special condition has caused this to happen and that the previous
    object may not be in the expected state.
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")可能会在[`SessionEvents.after_flush()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush")挂钩中发生的加载操作中，隐式地将一个对象与具有相同主键的另一个对象交换出标识映射，从而分离旧对象，这可能是发生的结果。警告旨在通知用户某些特殊条件导致此情况发生，并且先前的对象可能不处于预期状态。
- en: 'References: [#4890](https://www.sqlalchemy.org/trac/ticket/4890)'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4890](https://www.sqlalchemy.org/trac/ticket/4890)
- en: engine
  id: totrans-729
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [usecase]**'
  id: totrans-730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [用例]**'
- en: Added new [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") parameter [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine"). This overrides the dialect-coded “max identifier
    length” in order to accommodate for databases that have recently changed this
    length and the SQLAlchemy dialect has not yet been adjusted to detect for that
    version. This parameter interacts with the existing [`create_engine.label_length`](../core/engines.html#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine") parameter in that it establishes the maximum (and
    default) value for anonymously generated labels. Additionally, post-connection
    detection of max identifier lengths has been added to the dialect system. This
    feature is first being used by the Oracle dialect.
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")参数[`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")。这将覆盖方言编码的“最大标识符长度”，以适应最近更改了此长度的数据库，而SQLAlchemy方言尚未调整以检测该版本。此参数与现有的[`create_engine.label_length`](../core/engines.html#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine")参数交互，因为它为匿名生成的标签建立了最大（和默认）值。此外，方言系统中已添加了关于最大标识符长度的连接后检测。此功能首先由Oracle方言使用。
- en: See also
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Max Identifier Lengths](../dialects/oracle.html#oracle-max-identifier-lengths)
    - in the Oracle dialect documentation'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[最大标识符长度](../dialects/oracle.html#oracle-max-identifier-lengths) - 在Oracle方言文档中'
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: sql
  id: totrans-735
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added an explicit error message for the case when objects passed to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") are not [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects, rather than resolving to an attribute
    error.
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个明确的错误消息，用于当传递给[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的对象不是[`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")对象时，而不是解析为属性错误。
- en: 'References: [#4847](https://www.sqlalchemy.org/trac/ticket/4847)'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4847](https://www.sqlalchemy.org/trac/ticket/4847)
- en: '**[sql] [bug]**'
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Characters that interfere with “pyformat” or “named” formats in bound parameters,
    namely `%, (, )` and the space character, as well as a few other typically undesirable
    characters, are stripped early for a [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") that is using an anonymized name, which
    is typically generated automatically from a named column which itself includes
    these characters in its name and does not use a `.key`, so that they do not interfere
    either with the SQLAlchemy compiler’s use of string formatting or with the driver-level
    parsing of the parameter, both of which could be demonstrated before the fix.
    The change only applies to anonymized parameter names that are generated and consumed
    internally, not end-user defined names, so the change should have no impact on
    any existing code. Applies in particular to the psycopg2 driver which does not
    otherwise quote special parameter names, but also strips leading underscores to
    suit Oracle (but not yet leading numbers, as some anon parameters are currently
    entirely numeric/underscore based); Oracle in any case continues to quote parameter
    names that include special characters.
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在绑定参数中干扰“pyformat”或“named”格式的字符，即`%，（，）`和空格字符，以及一些通常不希望出现的字符，会在使用匿名名称的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")中被提前剥离。这些匿名名称通常是从一个包含这些字符的命名列自动生成的，不使用`.key`，以便它们既不干扰SQLAlchemy编译器对字符串格式化的使用，也不干扰参数的驱动程序级解析，这两者在修复之前可能会被演示。此更改仅适用于内部生成和使用的匿名参数名称，不适用于最终用户定义的名称，因此该更改不应对任何现有代码产生影响。特别适用于psycopg2驱动程序，它否则不会引用特殊参数名称，但也会剥离前导下划线以适应Oracle（但尚未剥离前导数字，因为某些匿名参数当前完全基于数字/下划线）；无论如何，Oracle继续引用包含特殊字符的参数名称。
- en: 'References: [#4837](https://www.sqlalchemy.org/trac/ticket/4837)'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4837](https://www.sqlalchemy.org/trac/ticket/4837)
- en: sqlite
  id: totrans-742
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added support for sqlite “URI” connections, which allow for sqlite-specific
    flags to be passed in the query string such as “read only” for Python sqlite3
    drivers that support this.
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对sqlite“URI”连接的支持，允许在查询字符串中传递特定于sqlite的标志，例如Python sqlite3驱动程序支持的“只读”。
- en: See also
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[URI Connections](../dialects/sqlite.html#pysqlite-uri-connections)'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[URI连接](../dialects/sqlite.html#pysqlite-uri-connections)'
- en: 'References: [#4863](https://www.sqlalchemy.org/trac/ticket/4863)'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4863](https://www.sqlalchemy.org/trac/ticket/4863)
- en: mssql
  id: totrans-748
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Added identifier quoting to the schema name applied to the “use” statement which
    is invoked when a SQL Server multipart schema name is used within a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that is being reflected, as well as for [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") methods such as [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names"); this accommodates for
    special characters or spaces in the database name. Additionally, the “use” statement
    is not emitted if the current database matches the target owner database name
    being passed.
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在用于反射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中使用SQL
    Server多部分模式名称时，对模式名称应用了标识符引用，同时对[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")方法（如[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")）也进行了处理；这适用于数据库名称中的特殊字符或空格。此外，如果当前数据库与传递的目标所有者数据库名称匹配，则不会发出“use”语句。
- en: 'References: [#4883](https://www.sqlalchemy.org/trac/ticket/4883)'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4883](https://www.sqlalchemy.org/trac/ticket/4883)
- en: oracle
  id: totrans-752
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [用例]**'
- en: The Oracle dialect now emits a warning if Oracle version 12.2 or greater is
    used, and the [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") parameter is not set. The version in this specific
    case defaults to that of the “compatibility” version set in the Oracle server
    configuration, not the actual server version. In version 1.4, the default max_identifier_length
    for 12.2 or greater will move to 128 characters. In order to maintain forwards
    compatibility, applications should set [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") to 30 in order to maintain the same length behavior,
    or to 128 in order to test the upcoming behavior. This length determines among
    other things how generated constraint names are truncated for statements like
    `CREATE CONSTRAINT` and `DROP CONSTRAINT`, which means a the new length may produce
    a name-mismatch against a name that was generated with the old length, impacting
    database migrations.
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在Oracle方言在使用Oracle版本12.2或更高版本时会发出警告，如果未设置[`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")参数。在这种特定情况下，默认版本为Oracle服务器配置中设置的“兼容性”版本，而不是实际服务器版本。在1.4版本中，12.2或更高版本的默认max_identifier_length将移至128个字符。为了保持向前兼容性，应用程序应将[`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")设置为30，以保持相同的长度行为，或者设置为128以测试即将到来的行为。这个长度决定了生成的约束名称如何被截断，例如`CREATE
    CONSTRAINT`和`DROP CONSTRAINT`语句，这意味着新长度可能会导致与使用旧长度生成的名称不匹配，影响数据库迁移。
- en: See also
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Max Identifier Lengths](../dialects/oracle.html#oracle-max-identifier-lengths)
    - in the Oracle dialect documentation'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[最大标识符长度](../dialects/oracle.html#oracle-max-identifier-lengths) - 在Oracle方言文档中'
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: '**[oracle] [bug]**'
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Restored adding cx_Oracle.DATETIME to the setinputsizes() call when a SQLAlchemy
    [`Date`](../core/type_basics.html#sqlalchemy.types.Date "sqlalchemy.types.Date"),
    [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    or [`Time`](../core/type_basics.html#sqlalchemy.types.Time "sqlalchemy.types.Time")
    datatype is used, as some complex queries require this to be present. This was
    removed in the 1.2 series for arbitrary reasons.
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 SQLAlchemy 的[`Date`](../core/type_basics.html#sqlalchemy.types.Date "sqlalchemy.types.Date")、[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")或[`Time`](../core/type_basics.html#sqlalchemy.types.Time
    "sqlalchemy.types.Time")数据类型时，恢复了将 cx_Oracle.DATETIME 添加到 setinputsizes() 调用中的功能，因为一些复杂查询需要它存在。这在
    1.2 系列中由于任意原因被移除。
- en: 'References: [#4886](https://www.sqlalchemy.org/trac/ticket/4886)'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4886](https://www.sqlalchemy.org/trac/ticket/4886)
- en: tests
  id: totrans-761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed unit test regression released in 1.3.8 that would cause failure for Oracle,
    SQL Server and other non-native ENUM platforms due to new enumeration tests added
    as part of [#4285](https://www.sqlalchemy.org/trac/ticket/4285) enum sortability
    in the unit of work; the enumerations created constraints that were duplicated
    on name.
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.3.8 中发布的单元测试回归，该回归会导致 Oracle、SQL Server 和其他非本地 ENUM 平台失败，原因是作为[#4285](https://www.sqlalchemy.org/trac/ticket/4285)的一部分添加了新的枚举测试，枚举在工作单元中创建了重复的名称约束。
- en: 'References: [#4285](https://www.sqlalchemy.org/trac/ticket/4285)'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4285](https://www.sqlalchemy.org/trac/ticket/4285)
- en: 1.3.8
  id: totrans-765
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.8
- en: 'Released: August 27, 2019'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年8月27日
- en: orm
  id: totrans-767
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [usecase]**'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [用例]**'
- en: Added support for the use of an [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype using Python pep-435 enumeration objects as
    values for use as a primary key column mapped by the ORM. As these values are
    not inherently sortable, as required by the ORM for primary keys, a new [`TypeEngine.sort_key_function`](../core/type_api.html#sqlalchemy.types.TypeEngine.sort_key_function
    "sqlalchemy.types.TypeEngine.sort_key_function") attribute is added to the typing
    system which allows any SQL type to implement a sorting for Python objects of
    its type which is consulted by the unit of work. The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type then defines this using the database value of a
    given enumeration. The sorting scheme can be also be redefined by passing a callable
    to the [`Enum.sort_key_function`](../core/type_basics.html#sqlalchemy.types.Enum.params.sort_key_function
    "sqlalchemy.types.Enum") parameter. Pull request courtesy Nicolas Caniart.
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对使用 Python pep-435 枚举对象作为 ORM 映射的主键列值的[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")数据类型的支持。由于这些值本身不可排序，而 ORM 对主键要求可排序，因此在类型系统中添加了一个新的[`TypeEngine.sort_key_function`](../core/type_api.html#sqlalchemy.types.TypeEngine.sort_key_function
    "sqlalchemy.types.TypeEngine.sort_key_function")属性，允许任何 SQL 类型为其类型的 Python 对象实现排序，工作单元会查询此排序。[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型然后使用给定枚举的数据库值定义这一点。通过将可调用对象传递给[`Enum.sort_key_function`](../core/type_basics.html#sqlalchemy.types.Enum.params.sort_key_function
    "sqlalchemy.types.Enum")参数，还可以重新定义排序方案。拉取请求由Nicolas Caniart提供。
- en: 'References: [#4285](https://www.sqlalchemy.org/trac/ticket/4285)'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4285](https://www.sqlalchemy.org/trac/ticket/4285)
- en: '**[orm] [bug]**'
  id: totrans-771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") objects were not pickleable due to mapper/relationship
    state in the internal context dictionary. These objects are now converted to picklable
    using similar techniques as that of other elements within the loader option system
    that have long been serializable.
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于内部上下文字典中的映射器/关系状态而导致[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load")对象不可 pickle 的 bug。现在，这些对象通过与加载器选项系统中其他元素类似的技术转换为可 pickle。
- en: 'References: [#4823](https://www.sqlalchemy.org/trac/ticket/4823)'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4823](https://www.sqlalchemy.org/trac/ticket/4823)
- en: engine
  id: totrans-774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new parameter [`create_engine.hide_parameters`](../core/engines.html#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine") which when set to True will cause SQL parameters to
    no longer be logged, nor rendered in the string representation of a [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") object.
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`create_engine.hide_parameters`](../core/engines.html#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine")，当设置为 True 时，将导致 SQL 参数不再被记录，也不会在[`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")对象的字符串表示中呈现。
- en: 'References: [#4815](https://www.sqlalchemy.org/trac/ticket/4815)'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4815](https://www.sqlalchemy.org/trac/ticket/4815)
- en: '**[engine] [bug]**'
  id: totrans-778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed an issue whereby if the dialect “initialize” process which occurs on first
    connect would encounter an unexpected exception, the initialize process would
    fail to complete and then no longer attempt on subsequent connection attempts,
    leaving the dialect in an un-initialized, or partially initialized state, within
    the scope of parameters that need to be established based on inspection of a live
    connection. The “invoke once” logic in the event system has been reworked to accommodate
    for this occurrence using new, private API features that establish an “exec once”
    hook that will continue to allow the initializer to fire off on subsequent connections,
    until it completes without raising an exception. This does not impact the behavior
    of the existing `once=True` flag within the event system.
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果dialect“initialize”过程在首次连接时遇到意外异常，初始化过程将无法完成，然后在后续连接尝试中不再尝试，使得dialect处于未初始化或部分初始化状态，需要根据对实时连接的检查来建立参数的范围。事件系统中的“invoke
    once”逻辑已经重新设计，以适应这种情况，使用新的私有API功能建立一个“exec once”钩子，该钩子将继续允许初始化程序在后续连接中触发，直到完成而不引发异常。这不会影响事件系统中现有的`once=True`标志的行为。
- en: 'References: [#4807](https://www.sqlalchemy.org/trac/ticket/4807)'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4807](https://www.sqlalchemy.org/trac/ticket/4807)
- en: postgresql
  id: totrans-781
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: 'Added support for reflection of CHECK constraints that include the special
    PostgreSQL qualifier “NOT VALID”, which can be present for CHECK constraints that
    were added to an existing table with the directive that they not be applied to
    existing data in the table. The PostgreSQL dictionary for CHECK constraints as
    returned by [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") may include an
    additional entry `dialect_options` which within will contain an entry `"not_valid":
    True` if this symbol is detected. Pull request courtesy Bill Finn.'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '增加了对包含特殊PostgreSQL限定词“NOT VALID”的CHECK约束的反射支持，这些限定词可能存在于已添加到现有表中的CHECK约束中，指示这些约束不适用于表中现有数据。由[`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")返回的CHECK约束的PostgreSQL字典可能包含一个额外的条目`dialect_options`，其中将包含一个条目`"not_valid":
    True`，如果检测到此符号。感谢Bill Finn的拉取请求。'
- en: 'References: [#4824](https://www.sqlalchemy.org/trac/ticket/4824)'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4824](https://www.sqlalchemy.org/trac/ticket/4824)
- en: '**[postgresql] [bug]**'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised the approach for the just added support for the psycopg2 “execute_values()”
    feature added in 1.3.7 for [#4623](https://www.sqlalchemy.org/trac/ticket/4623).
    The approach relied upon a regular expression that would fail to match for a more
    complex INSERT statement such as one which had subqueries involved. The new approach
    matches exactly the string that was rendered as the VALUES clause.
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了对于1.3.7版本中添加的对psycopg2“execute_values()”功能的支持的方法，该支持是为了[#4623](https://www.sqlalchemy.org/trac/ticket/4623)而添加的。该方法依赖于一个正则表达式，该表达式无法匹配更复杂的INSERT语句，例如涉及子查询的语句。新方法完全匹配作为VALUES子句呈现的字符串。
- en: 'References: [#4623](https://www.sqlalchemy.org/trac/ticket/4623)'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4623](https://www.sqlalchemy.org/trac/ticket/4623)
- en: '**[postgresql] [bug]**'
  id: totrans-788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where Postgresql operators such as [`Comparator.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains") and [`Comparator.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by") would fail to
    function correctly for non-integer values when used against a [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object, due to an erroneous assert statement.
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即当针对一个[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象使用Postgresql运算符（如[`Comparator.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains")和[`Comparator.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by")）时，对于非整数值，由于一个错误的断言语句，这些运算符无法正确运行。
- en: 'References: [#4822](https://www.sqlalchemy.org/trac/ticket/4822)'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4822](https://www.sqlalchemy.org/trac/ticket/4822)
- en: sqlite
  id: totrans-791
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [reflection]**'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [reflection]**'
- en: Fixed bug where a FOREIGN KEY that was set up to refer to the parent table by
    table name only without the column names would not correctly be reflected as far
    as setting up the “referred columns”, since SQLite’s PRAGMA does not report on
    these columns if they weren’t given explicitly. For some reason this was hardcoded
    to assume the name of the local column, which might work for some cases but is
    not correct. The new approach reflects the primary key of the referred table and
    uses the constraint columns list as the referred columns list, if the remote column(s)
    aren’t present in the reflected pragma directly.
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了设置为仅通过表名而不是列名引用父表的FOREIGN KEY不会正确反映“referred columns”的bug，因为如果没有显式给出，SQLite的PRAGMA不会报告这些列。出于某种原因，这是硬编码为假定本地列的名称，这对某些情况可能有效，但不正确。新方法反映了被引用表的主键，并使用约束列列表作为被引用列列表，如果远程列不直接在反映的pragma中存在。
- en: 'References: [#4810](https://www.sqlalchemy.org/trac/ticket/4810)'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4810](https://www.sqlalchemy.org/trac/ticket/4810)
- en: 1.3.7
  id: totrans-795
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.7
- en: 'Released: August 14, 2019'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年8月14日
- en: orm
  id: totrans-797
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by new selectinload for many-to-one logic where a primaryjoin
    condition not based on real foreign keys would cause KeyError if a related object
    did not exist for a given key value on the parent object.
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由新的多对一逻辑的selectinload引起的回归问题，其中一个基于主键连接条件而不是真实外键的条件会导致如果父对象上给定键值的相关对象不存在，则会导致KeyError。
- en: 'References: [#4777](https://www.sqlalchemy.org/trac/ticket/4777)'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4777](https://www.sqlalchemy.org/trac/ticket/4777)
- en: '**[orm] [bug]**'
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") or a slice expression in conjunction with a query
    that has an expression based “offset” applied would raise TypeError, due to an
    “or” conditional against “offset” that did not expect it to be a SQL expression
    as opposed to an integer or None.
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与应用了基于表达式的“offset”的查询一起使用[`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first")或切片表达式时会引发TypeError的bug，由于针对“offset”的“or”条件不希望它是SQL表达式而不是整数或None。
- en: 'References: [#4803](https://www.sqlalchemy.org/trac/ticket/4803)'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4803](https://www.sqlalchemy.org/trac/ticket/4803)
- en: sql
  id: totrans-804
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") object which contained a mixture of functional expressions
    which were not resolvable to a particular column, in combination with string-based
    column names, would fail to initialize its internal state correctly leading to
    failures during DDL compilation.
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")对象中包含一些无法解析为特定列的混合函数表达式，与基于字符串的列名结合使用时，会导致初始化内部状态失败，从而在DDL编译过程中失败的问题。
- en: 'References: [#4778](https://www.sqlalchemy.org/trac/ticket/4778)'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4778](https://www.sqlalchemy.org/trac/ticket/4778)
- en: '**[sql] [bug]**'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") method would not be applied to
    subsequent SELECT statements inside of a UNION or other `_selectable.CompoundSelect`,
    even though the SELECT statements are rendered at the topmost level of the statement.
    New logic now differentiates between rendering the column expression, which is
    needed for all SELECTs in the list, vs. gathering the returned data type for the
    result row, which is needed only for the first SELECT.
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression")方法不会应用于UNION或其他`_selectable.CompoundSelect`内部的后续SELECT语句的bug，即使SELECT语句在语句的最顶层呈现。新逻辑现在区分了呈现列表达式（对于列表中的所有SELECT都需要）与收集结果行的返回数据类型（仅对第一个SELECT需要）。
- en: 'References: [#4787](https://www.sqlalchemy.org/trac/ticket/4787)'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4787](https://www.sqlalchemy.org/trac/ticket/4787)
- en: '**[sql] [bug]**'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where internal cloning of SELECT constructs could lead to a key
    error if the copy of the SELECT changed its state such that its list of columns
    changed. This was observed to be occurring in some ORM scenarios which may be
    unique to 1.3 and above, so is partially a regression fix.
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了内部克隆SELECT结构可能导致关键错误的问题，如果SELECT的副本更改其状态，使其列列表发生更改。这在一些ORM场景中被观察到，可能是1.3及以上版本独有的问题，因此部分是回归修复。
- en: 'References: [#4780](https://www.sqlalchemy.org/trac/ticket/4780)'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4780](https://www.sqlalchemy.org/trac/ticket/4780)
- en: postgresql
  id: totrans-814
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added new dialect flag for the psycopg2 dialect, `executemany_mode` which supersedes
    the previous experimental `use_batch_mode` flag. `executemany_mode` supports both
    the “execute batch” and “execute values” functions provided by psycopg2, the latter
    which is used for compiled [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") constructs. Pull request courtesy Yuval Dinari.
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为psycopg2方言添加了新的方言标志，`executemany_mode`，它取代了之前的实验性`use_batch_mode`标志。`executemany_mode`支持psycopg2提供的“执行批处理”和“执行值”函数，后者用于编译的[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造。感谢Yuval Dinari提供的拉取请求。
- en: See also
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Psycopg2 Fast Execution Helpers](../dialects/postgresql.html#psycopg2-executemany-mode)'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2快速执行助手](../dialects/postgresql.html#psycopg2-executemany-mode)'
- en: 'References: [#4623](https://www.sqlalchemy.org/trac/ticket/4623)'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4623](https://www.sqlalchemy.org/trac/ticket/4623)
- en: mysql
  id: totrans-820
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [用例]**'
- en: Added reserved words ARRAY and MEMBER to the MySQL reserved words list, as MySQL
    8.0 has now made these reserved.
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ARRAY和MEMBER添加到MySQL保留字列表中，因为MySQL 8.0现在已将这些设为保留字。
- en: 'References: [#4783](https://www.sqlalchemy.org/trac/ticket/4783)'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4783](https://www.sqlalchemy.org/trac/ticket/4783)
- en: '**[mysql] [bug]**'
  id: totrans-824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: The MySQL dialects will emit “SET NAMES” at the start of a connection when charset
    is given to the MySQL driver, to appease an apparent behavior observed in MySQL
    8.0 that raises a collation error when a UNION includes string columns unioned
    against columns of the form CAST(NULL AS CHAR(..)), which is what SQLAlchemy’s
    polymorphic_union function does. The issue seems to have affected PyMySQL for
    at least a year, however has recently appeared as of mysqlclient 1.4.4 based on
    changes in how this DBAPI creates a connection. As the presence of this directive
    impacts three separate MySQL charset settings which each have intricate effects
    based on their presence, SQLAlchemy will now emit the directive on new connections
    to ensure correct behavior.
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当MySQL方言的charset给定给MySQL驱动程序时，连接开始时将发出“SET NAMES”以平息MySQL 8.0中观察到的一个明显行为，即在UNION包含与形式为CAST(NULL
    AS CHAR(..))的列联接的字符串列时引发排序规则错误，这正是SQLAlchemy的polymorphic_union函数所做的。该问题似乎至少影响了PyMySQL一年，但是最近出现了mysqlclient
    1.4.4，基于这个DBAPI创建连接的方式发生了变化。由于该指令的存在影响了三个不同的MySQL charset设置，每个设置根据其是否存在具有复杂的影响，因此SQLAlchemy现在将在新连接上发出该指令，以确保正确的行为。
- en: 'References: [#4804](https://www.sqlalchemy.org/trac/ticket/4804)'
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4804](https://www.sqlalchemy.org/trac/ticket/4804)
- en: '**[mysql] [bug]**'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Added another fix for an upstream MySQL 8 issue where a case sensitive table
    name is reported incorrectly in foreign key constraint reflection, this is an
    extension of the fix first added for [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    which affects a case sensitive column name. The new issue occurs through MySQL
    8.0.17, so the general logic of the 88718 fix remains in place.
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了另一个修复上游MySQL 8问题的方法，其中对于外键约束反射中的大小写敏感的表名错误地报告，这是首次添加到[#4344](https://www.sqlalchemy.org/trac/ticket/4344)的修复的扩展，它影响了大小写敏感的列名。新问题发生在MySQL
    8.0.17，因此88718修复的一般逻辑仍然存在。
- en: See also
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://bugs.mysql.com/bug.php?id=96365](https://bugs.mysql.com/bug.php?id=96365)
    - upstream bug'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://bugs.mysql.com/bug.php?id=96365](https://bugs.mysql.com/bug.php?id=96365)
    - 上游错误'
- en: 'References: [#4751](https://www.sqlalchemy.org/trac/ticket/4751)'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4751](https://www.sqlalchemy.org/trac/ticket/4751)
- en: sqlite
  id: totrans-832
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: The dialects that support json are supposed to take arguments `json_serializer`
    and `json_deserializer` at the create_engine() level, however the SQLite dialect
    calls them `_json_serializer` and `_json_deserilalizer`. The names have been corrected,
    the old names are accepted with a change warning, and these parameters are now
    documented as [`create_engine.json_serializer`](../core/engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine") and [`create_engine.json_deserializer`](../core/engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine").
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持json的方言应该在create_engine()级别接受参数`json_serializer`和`json_deserializer`，然而SQLite方言称它们为`_json_serializer`和`_json_deserilalizer`。已更正名称，旧名称在更改警告下被接受，并且这些参数现在被文档化为[`create_engine.json_serializer`](../core/engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine")和[`create_engine.json_deserializer`](../core/engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine")。
- en: 'References: [#4798](https://www.sqlalchemy.org/trac/ticket/4798)'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4798](https://www.sqlalchemy.org/trac/ticket/4798)
- en: '**[sqlite] [bug]**'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Fixed bug where usage of “PRAGMA table_info” in SQLite dialect meant that reflection
    features to detect for table existence, list of table columns, and list of foreign
    keys, would default to any table in any attached database, when no schema name
    was given and the table did not exist in the base schema. The fix explicitly runs
    PRAGMA for the ‘main’ schema and then the ‘temp’ schema if the ‘main’ returned
    no rows, to maintain the behavior of tables + temp tables in the “no schema” namespace,
    attached tables only in the “schema” namespace.
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在SQLite方言中使用“PRAGMA table_info”时的bug，这意味着反射功能用于检测表存在性、表列列表和外键列表时，默认会在任何附加数据库中的任何表上运行，当未给出模式名称且表在基本模式中不存在时。修复明确地对“main”模式运行PRAGMA，然后如果“main”返回没有行，则对“temp”模式运行，以保持“无模式”命名空间中的表和临时表的行为，附加表仅在“模式”命名空间中。
- en: 'References: [#4793](https://www.sqlalchemy.org/trac/ticket/4793)'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4793](https://www.sqlalchemy.org/trac/ticket/4793)
- en: mssql
  id: totrans-839
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [usecase]**'
- en: Added new [`try_cast()`](../dialects/mssql.html#sqlalchemy.dialects.mssql.try_cast
    "sqlalchemy.dialects.mssql.try_cast") construct for SQL Server which emits “TRY_CAST”
    syntax. Pull request courtesy Leonel Atencio.
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server新增了[`try_cast()`](../dialects/mssql.html#sqlalchemy.dialects.mssql.try_cast
    "sqlalchemy.dialects.mssql.try_cast")构造，发出“TRY_CAST”语法。感谢Leonel Atencio的Pull请求。
- en: 'References: [#4782](https://www.sqlalchemy.org/trac/ticket/4782)'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4782](https://www.sqlalchemy.org/trac/ticket/4782)
- en: misc
  id: totrans-843
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [events]**'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [events]**'
- en: Fixed issue in event system where using the `once=True` flag with dynamically
    generated listener functions would cause event registration of future events to
    fail if those listener functions were garbage collected after they were used,
    due to an assumption that a listened function is strongly referenced. The “once”
    wrapped is now modified to strongly reference the inner function persistently,
    and documentation is updated that using “once” does not imply automatic de-registration
    of listener functions.
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事件系统中的问题，其中使用`once=True`标志与动态生成的监听器函数会导致未来事件的事件注册失败，如果这些监听器函数在使用后被垃圾回收，因为假设监听函数是强引用的。现在“once”包装被修改为持久地强引用内部函数，并更新了文档，使用“once”不意味着自动注销监听器函数。
- en: 'References: [#4794](https://www.sqlalchemy.org/trac/ticket/4794)'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4794](https://www.sqlalchemy.org/trac/ticket/4794)
- en: 1.3.6
  id: totrans-847
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.6
- en: 'Released: July 21, 2019'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年7月21日
- en: orm
  id: totrans-849
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new loader option method [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") which allows loader options to be constructed hierarchically,
    so that many sub-options can be applied to a particular path without needing to
    call [`defaultload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.defaultload
    "sqlalchemy.orm.defaultload") many times. Thanks to Alessio Bogon for the idea.
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了新的加载器选项方法[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")，允许按层次结构构建加载器选项，这样就可以在不需要多次调用[`defaultload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.defaultload
    "sqlalchemy.orm.defaultload")的情况下，将许多子选项应用于特定路径。感谢Alessio Bogon提出的想法。
- en: 'References: [#4736](https://www.sqlalchemy.org/trac/ticket/4736)'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4736](https://www.sqlalchemy.org/trac/ticket/4736)
- en: '**[orm] [performance]**'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [performance]**'
- en: The optimization applied to selectin loading in [#4340](https://www.sqlalchemy.org/trac/ticket/4340)
    where a JOIN is not needed to eagerly load related items is now applied to many-to-one
    relationships as well, so that only the related table is queried for a simple
    join condition. In this case, the related items are queried based on the value
    of a foreign key column on the parent; if these columns are deferred or otherwise
    not loaded on any of the parent objects in the collection, the loader falls back
    to the JOIN method.
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用于选择加载中的优化[#4340](https://www.sqlalchemy.org/trac/ticket/4340)，其中不需要JOIN即可急切加载相关项目的优化现在也适用于多对一关系，因此只查询相关表以进行简单的连接条件。在这种情况下，基于父对象上的外键列的值查询相关项目；如果这些列被延迟加载或其他方式未加载到集合中的任何父对象上，则加载器将退回到JOIN方法。
- en: 'References: [#4775](https://www.sqlalchemy.org/trac/ticket/4775)'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4775](https://www.sqlalchemy.org/trac/ticket/4775)
- en: '**[orm] [bug]**'
  id: totrans-856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4365](https://www.sqlalchemy.org/trac/ticket/4365)
    where a join from an entity to itself without using aliases no longer raises an
    informative error message, instead failing on an assertion. The informative error
    condition has been restored.
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4365](https://www.sqlalchemy.org/trac/ticket/4365)引起的回归，其中从实体到自身的连接不使用别名时不再引发信息性错误消息，而是在断言失败时失败。已恢复信息性错误条件。
- en: 'References: [#4773](https://www.sqlalchemy.org/trac/ticket/4773)'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4773](https://www.sqlalchemy.org/trac/ticket/4773)
- en: '**[orm] [bug]**'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an issue where the `_ORMJoin.join()` method, which is a not-internally-used
    ORM-level method that exposes what is normally an internal process of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), did not propagate the `full` and `outerjoin` keyword
    arguments correctly. Pull request courtesy Denis Kataev.
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即`_ORMJoin.join()`方法，这是一个未内部使用的 ORM 级方法，它公开了通常是内部过程的 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 方法，未正确传播`full`和`outerjoin`关键字参数。拉取请求由Denis Kataev提供。
- en: 'References: [#4713](https://www.sqlalchemy.org/trac/ticket/4713)'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4713](https://www.sqlalchemy.org/trac/ticket/4713)
- en: '**[orm] [bug]**'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a many-to-one relationship that specified `uselist=True` would
    fail to update correctly during a primary key change where a related column needs
    to change.
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即指定了`uselist=True`的多对一关系在主键更改期间未能正确更新的问题，其中相关列需要更改。
- en: 'References: [#4772](https://www.sqlalchemy.org/trac/ticket/4772)'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4772](https://www.sqlalchemy.org/trac/ticket/4772)
- en: '**[orm] [bug]**'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the detection for many-to-one or one-to-one use with a “dynamic”
    relationship, which is an invalid configuration, would fail to raise if the relationship
    were configured with `uselist=True`. The current fix is that it warns, instead
    of raises, as this would otherwise be backwards incompatible, however in a future
    release it will be a raise.
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即检测与“动态”关系一对一或多对一使用的错误配置的错误，如果关系配置为`uselist=True`，则会失败。当前的修复方案是发出警告，而不是引发异常，因为这样做会导致向后不兼容，但在将来的版本中，它将引发异常。
- en: 'References: [#4772](https://www.sqlalchemy.org/trac/ticket/4772)'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4772](https://www.sqlalchemy.org/trac/ticket/4772)
- en: '**[orm] [bug]**'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a synonym created against a mapped attribute that does not exist
    yet, as is the case when it refers to backref before mappers are configured, would
    raise recursion errors when trying to test for attributes on it which ultimately
    don’t exist (as occurs when the classes are run through Sphinx autodoc), as the
    unconfigured state of the synonym would put it into an attribute not found loop.
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即对一个尚不存在的映射属性创建同义词时会引发递归错误，例如当它引用配置映射器之前的 backref 时会出现，当尝试在其上测试最终不存在的属性时会引发递归错误（例如当类通过
    Sphinx autodoc 运行时会发生），因为同义词的未配置状态会将其置于未找到属性的循环中。
- en: 'References: [#4767](https://www.sqlalchemy.org/trac/ticket/4767)'
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4767](https://www.sqlalchemy.org/trac/ticket/4767)
- en: engine
  id: totrans-871
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where using reflection function such as [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object that had execution options applied to it would
    fail, as the resulting `OptionEngine` proxy object failed to include a `.engine`
    attribute used within the reflection routines.
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即使用反射函数（例如[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")）与已应用执行选项的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象将失败，因为生成的`OptionEngine`代理对象未包括在反射例程中使用的`.engine`属性。
- en: 'References: [#4754](https://www.sqlalchemy.org/trac/ticket/4754)'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4754](https://www.sqlalchemy.org/trac/ticket/4754)
- en: sql
  id: totrans-875
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the initialization for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") to minimize how often it invokes the `.__members__` attribute
    of a given PEP-435 enumeration object, to suit the case where this attribute is
    expensive to invoke, as is the case for some popular third party enumeration libraries.
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    的初始化，以最小化调用给定 PEP-435 枚举对象的 `.__members__` 属性的频率，以适应这种属性的调用成本很高的情况，这是一些常用的第三方枚举库的情况。
- en: 'References: [#4758](https://www.sqlalchemy.org/trac/ticket/4758)'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4758](https://www.sqlalchemy.org/trac/ticket/4758)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed issue where the [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") construct in combination with [`FunctionElement.filter()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter") would not produce the correct
    operator precedence in combination with the array index operator.
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")构造与[`FunctionElement.filter()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")结合时，与数组索引操作符结合时无法产生正确的运算符优先级的问题。
- en: 'References: [#4760](https://www.sqlalchemy.org/trac/ticket/4760)'
  id: totrans-881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4760](https://www.sqlalchemy.org/trac/ticket/4760)
- en: '**[sql] [bug]**'
  id: totrans-882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed an unlikely issue where the “corresponding column” routine for unions
    and other `_selectable.CompoundSelect` objects could return the wrong column in
    some overlapping column situations, thus potentially impacting some ORM operations
    when set operations are in use, if the underlying [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs were used previously in other similar
    kinds of routines, due to a cached value not being cleared.
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个不太可能的问题，即对于联合和其他`_selectable.CompoundSelect`对象的“对应列”例程可能在某些重叠列情况下返回错误的列，从而在使用集合操作时可能影响一些ORM操作，如果底层的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造先前在其他类似类型的例程中使用过，则由于未清除缓存值而可能受��影响。
- en: 'References: [#4747](https://www.sqlalchemy.org/trac/ticket/4747)'
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4747](https://www.sqlalchemy.org/trac/ticket/4747)
- en: postgresql
  id: totrans-885
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added support for reflection of indexes on PostgreSQL partitioned tables, which
    was added to PostgreSQL as of version 11.
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对PostgreSQL分区表上索引的反射支持，这是从PostgreSQL 11版本开始添加的功能。
- en: 'References: [#4771](https://www.sqlalchemy.org/trac/ticket/4771)'
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4771](https://www.sqlalchemy.org/trac/ticket/4771)
- en: '**[postgresql] [usecase]**'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added support for multidimensional Postgresql array literals via nesting the
    [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    object within another one. The multidimensional array type is detected automatically.
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过将[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象嵌套在另一个对象中，为多维Postgresql数组文字提供支持。多维数组类型会被自动检测。
- en: See also
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")'
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")'
- en: 'References: [#4756](https://www.sqlalchemy.org/trac/ticket/4756)'
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4756](https://www.sqlalchemy.org/trac/ticket/4756)
- en: mysql
  id: totrans-894
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed bug where the special logic to render “NULL” for the [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype when `nullable=True` would not work if
    the column’s datatype were a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") or a [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"). The logic now ensures that it unwraps down to the
    original [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    so that this special case NULL keyword is correctly rendered when requested.
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当`nullable=True`时，为[`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP")数据类型渲染“NULL”特殊逻辑无法工作的错误，如果列的数据类型是[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")或[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")。现在的逻辑确保它向下展开到原始的[`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP")，以便在请求时正确呈现此特殊情况的NULL关键字。
- en: 'References: [#4743](https://www.sqlalchemy.org/trac/ticket/4743)'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4743](https://www.sqlalchemy.org/trac/ticket/4743)
- en: '**[mysql] [bug]**'
  id: totrans-898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Enhanced MySQL/MariaDB version string parsing to accommodate for exotic MariaDB
    version strings where the “MariaDB” word is embedded among other alphanumeric
    characters such as “MariaDBV1”. This detection is critical in order to correctly
    accommodate for API features that have split between MySQL and MariaDB such as
    the “transaction_isolation” system variable.
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了MySQL/MariaDB版本字符串解析，以适应奇异的MariaDB版本字符串，其中“MariaDB”一词嵌入在其他字母数字字符中，例如“MariaDBV1”。这种检测对于正确适应已分为MySQL和MariaDB的API功能至关重要，例如“transaction_isolation”系统变量。
- en: 'References: [#4624](https://www.sqlalchemy.org/trac/ticket/4624)'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4624](https://www.sqlalchemy.org/trac/ticket/4624)
- en: sqlite
  id: totrans-901
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Added support for composite (tuple) IN operators with SQLite, by rendering the
    VALUES keyword for this backend. As other backends such as DB2 are known to use
    the same syntax, the syntax is enabled in the base compiler using a dialect-level
    flag `tuple_in_values`. The change also includes support for “empty IN tuple”
    expressions for SQLite when using “in_()” between a tuple value and an empty set.
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLite添加了对复合（元组）IN运算符的支持，通过在此后端渲染VALUES关键字。由于其他后端（如DB2）已知使用相同的语法，因此在基本编译器中使用一个方言级标志`tuple_in_values`启用了该语法。该更改还包括对SQLite中使用“in_()”在元组值和空集之间时的“空IN元组”表达式的支持。
- en: 'References: [#4766](https://www.sqlalchemy.org/trac/ticket/4766)'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4766](https://www.sqlalchemy.org/trac/ticket/4766)
- en: mssql
  id: totrans-905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Ensured that the queries used to reflect indexes and view definitions will explicitly
    CAST string parameters into NVARCHAR, as many SQL Server drivers frequently treat
    string values, particularly those with non-ascii characters or larger string values,
    as TEXT which often don’t compare correctly against VARCHAR characters in SQL
    Server’s information schema tables for some reason. These CAST operations already
    take place for reflection queries against SQL Server `information_schema.` tables
    but were missing from three additional queries that are against `sys.` tables.
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保用于反映索引和视图定义的查询将字符串参数明确转换为NVARCHAR，因为许多SQL Server驱动程序经常将字符串值，特别是具有非ASCII字符或较大字符串值的值，视为TEXT，这通常与SQL
    Server的信息模式表中的VARCHAR字符不正确地进行比较。这些CAST操作已经在反射查询中对SQL Server `information_schema.`表进行了处理，但在针对`sys.`表的另外三个查询中缺失。
- en: 'References: [#4745](https://www.sqlalchemy.org/trac/ticket/4745)'
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4745](https://www.sqlalchemy.org/trac/ticket/4745)
- en: 1.3.5
  id: totrans-909
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.5
- en: 'Released: June 17, 2019'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年6月17日
- en: orm
  id: totrans-911
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a series of related bugs regarding joined table inheritance more than
    two levels deep, in conjunction with modification to primary key values, where
    those primary key columns are also linked together in a foreign key relationship
    as is typical for joined table inheritance. The intermediary table in a three-level
    inheritance hierarchy will now get its UPDATE if only the primary key value has
    changed and passive_updates=False (e.g. foreign key constraints not being enforced),
    whereas before it would be skipped; similarly, with passive_updates=True (e.g.
    ON UPDATE CASCADE in effect), the third-level table will not receive an UPDATE
    statement as was the case earlier which would fail since CASCADE already modified
    it. In a related issue, a relationship linked to a three-level inheritance hierarchy
    on the primary key of an intermediary table of a joined-inheritance hierarchy
    will also correctly have its foreign key column updated when the parent object’s
    primary key is modified, even if that parent object is a subclass of the linked
    parent class, whereas before these classes would not be counted.
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列关于超过两层深度的联合表继承的相关错误，以及对主键值的修改，其中这些主键列也以外键关系相互链接，这在联合表继承中是很典型的。在三级继承层次结构中的中间表现在只有在主键值发生变化且`passive_updates=False`（例如，外键约束不被执行）时才会进行更新；而在之前会被跳过；同样，在`passive_updates=True`（例如，ON
    UPDATE CASCADE 生效）的情况下，第三级表将不会收到更新语句，这与之前的情况不同，因为CASCADE已经修改了它。在一个相关问题中，与联合继承层次结构中的中间表的主键相关联的关系在父对象的主键被修改时也将正确地更新其外键列，即使该父对象是链接父类的子类，而在之前这些类不会被计算。
- en: 'References: [#4723](https://www.sqlalchemy.org/trac/ticket/4723)'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4723](https://www.sqlalchemy.org/trac/ticket/4723)
- en: '**[orm] [bug]**'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") accessor would return an entry for
    the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    itself under the declarative `__mapper__` key, when this is not a descriptor.
    The `.is_attribute` flag that’s present on all [`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") objects is now consulted, which has also been
    modified to be `True` for an association proxy, as it was erroneously set to False
    for this object.
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")访问器返回一个条目给[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")本身在声明式`__mapper__`键下的bug，当这不是一个描述符时。现在，所有[`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")对象上存在的`.is_attribute`标志现在被查询，这也已经被修改为对于关联代理为`True`，因为对于这个对象错误地设置为False。
- en: 'References: [#4729](https://www.sqlalchemy.org/trac/ticket/4729)'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4729](https://www.sqlalchemy.org/trac/ticket/4729)
- en: '**[orm] [bug]**'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") where the `aliased=True` flag would not properly
    apply clause adaptation to filter criteria, if a previous join were made to the
    same entity. This is because the adapters were placed in the wrong order. The
    order has been reversed so that the adapter for the most recent `aliased=True`
    call takes precedence as was the case in 1.2 and earlier. This broke the “elementtree”
    examples among other things.
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")中的回归，其中`aliased=True`标志不会正确应用到过滤条件的情况，如果之前对同一实体进行了连接。这是因为适配器的顺序放错了。顺序已经被颠倒，以便最近的`aliased=True`调用的适配器优先，就像在1.2版本和更早版本中一样。这破坏了“elementtree”示例等其他内容。
- en: 'References: [#4704](https://www.sqlalchemy.org/trac/ticket/4704)'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4704](https://www.sqlalchemy.org/trac/ticket/4704)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: Replaced the Python compatibility routines for `getfullargspec()` with a fully
    vendored version from Python 3.3\. Originally, Python was emitting deprecation
    warnings for this function in Python 3.8 alphas. While this change was reverted,
    it was observed that Python 3 implementations for `getfullargspec()` are an order
    of magnitude slower as of the 3.4 series where it was rewritten against `Signature`.
    While Python plans to improve upon this situation, SQLAlchemy projects for now
    are using a simple replacement to avoid any future issues.
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用完全从Python 3.3中供应的版本替换了`getfullargspec()`的Python兼容性例程。最初，Python在Python 3.8 alpha版本中对该函数发出了弃用警告。虽然这一变化被撤销了，但观察到Python
    3对`getfullargspec()`的实现在3.4系列中重写为`Signature`后慢了一个数量级。虽然Python计划改进这种情况，但目前SQLAlchemy项目使用了一个简单的替代方案以避免任何未来问题。
- en: 'References: [#4674](https://www.sqlalchemy.org/trac/ticket/4674)'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4674](https://www.sqlalchemy.org/trac/ticket/4674)
- en: '**[orm] [bug]**'
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Reworked the attribute mechanics used by [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") to no longer rely upon calling `__getattribute__`
    on the MRO of the wrapped class, and to instead resolve the attribute normally
    on the wrapped class using getattr(), and then unwrap/adapt that. This allows
    a greater range of attribute styles on the mapped class including special `__getattr__()`
    schemes; but it also makes the code simpler and more resilient in general.
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")使用的属性机制，不再依赖于在包装类的MRO上调用`__getattribute__`，而是在包装类上使用getattr()正常解析属性，然后解包/适应。这允许在映射类上使用更广泛的属性样式，包括特殊的`__getattr__()`方案；但这也使代码更简单、更具弹性。
- en: 'References: [#4694](https://www.sqlalchemy.org/trac/ticket/4694)'
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4694](https://www.sqlalchemy.org/trac/ticket/4694)
- en: sql
  id: totrans-927
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Addressed a range of quoting issues originating from the use of the `literal_column`()`
    construct. When this construct is “proxied” through a subquery and referred to
    by a label matching its text, the label does not have quoting rules applied to
    it, even if the string in the [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") was set up using a `quoted_name`` construct.
    Not applying quoting to the text of the [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") is a bug because this text is strictly a SQL
    identifier name and not a SQL expression, and the string should not have quotes
    embedded into it already unlike the [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") which it may be applied towards. The
    existing behavior of a non-labeled [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") being propagated as is on the outside
    of a subquery is maintained in order to help with manual quoting schemes, although
    it’s not clear if valid SQL can be generated for such a construct in any case.
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决了由于使用 `literal_column`()` 构造而导致的一系列引号问题。当这个构造通过子查询进行“代理”并通过与其文本匹配的标签引用时，即使使用
    `quoted_name` 构造设置了 [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") 的字符串，标签也不会应用引号规则。不对 [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") 的文本应用引号是一个 bug，因为这个文本严格来说是一个 SQL 标识符名称而不是一个
    SQL 表达式，而且字符串不应该已经嵌入引号，与 [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 不同，后者可能会被应用到。为了帮助手动引号方案，维护了一个非标记的
    [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 在子查询的外部传播的现有行为，尽管不清楚是否可以为这样的构造生成有效的
    SQL。
- en: 'References: [#4730](https://www.sqlalchemy.org/trac/ticket/4730)'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4730](https://www.sqlalchemy.org/trac/ticket/4730)
- en: postgresql
  id: totrans-931
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for column sorting flags when reflecting indexes for PostgreSQL,
    including ASC, DESC, NULLSFIRST, NULLSLAST. Also adds this facility to the reflection
    system in general which can be applied to other dialects in future releases. Pull
    request courtesy Eli Collins.
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在为 PostgreSQL 反射索引时，添加了对列排序标志的支持，包括 ASC、DESC、NULLSFIRST、NULLSLAST。同时也将这一功能添加到了通用的反射系统中，可以在未来的版本中应用于其他方言。感谢
    Eli Collins 的 Pull request。
- en: 'References: [#4717](https://www.sqlalchemy.org/trac/ticket/4717)'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4717](https://www.sqlalchemy.org/trac/ticket/4717)
- en: '**[postgresql] [bug]**'
  id: totrans-935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect could not correctly reflect an ENUM datatype
    that has no members, returning a list with `None` for the `get_enums()` call and
    raising a TypeError when reflecting a column which has such a datatype. The inspection
    now returns an empty list.
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 方言无法正确反映没有成员的 ENUM 数据类型的 bug，调用 `get_enums()` 返回一个带有 `None` 的列表，并在反射具有此类数据类型的列时引发
    TypeError。现在检查返回一个空列表。
- en: 'References: [#4701](https://www.sqlalchemy.org/trac/ticket/4701)'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4701](https://www.sqlalchemy.org/trac/ticket/4701)
- en: mysql
  id: totrans-938
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where MySQL ON DUPLICATE KEY UPDATE would not accommodate setting
    a column to the value NULL. Pull request courtesy Lukáš Banič.
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL ON DUPLICATE KEY UPDATE 无法将列设置为 NULL 值的 bug。感谢 Lukáš Banič 的 Pull
    request。
- en: 'References: [#4715](https://www.sqlalchemy.org/trac/ticket/4715)'
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4715](https://www.sqlalchemy.org/trac/ticket/4715)
- en: 1.3.4
  id: totrans-942
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.4
- en: 'Released: May 27, 2019'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019 年 5 月 27 日
- en: orm
  id: totrans-944
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`AttributeEvents.active_history`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.active_history
    "sqlalchemy.orm.AttributeEvents") flag would not be set for an event listener
    that propagated to a subclass via the [`AttributeEvents.propagate`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents") flag. This bug has been present for the full
    span of the [`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents") system.
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当事件监听器通过 [`AttributeEvents.propagate`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents") 标志向子类传播时，[`AttributeEvents.active_history`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.active_history
    "sqlalchemy.orm.AttributeEvents") 标志未设置的问题。这个 bug 在整个 [`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents") 系统的使用期间都存在。
- en: 'References: [#4695](https://www.sqlalchemy.org/trac/ticket/4695)'
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4695](https://www.sqlalchemy.org/trac/ticket/4695)
- en: '**[orm] [bug]**'
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where new association proxy system was still not proxying hybrid
    attributes when they made use of the `@hybrid_property.expression` decorator to
    return an alternate SQL expression, or when the hybrid returned an arbitrary [`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"), at the expression level. This involved further
    generalization of the heuristics used to detect the type of object being proxied
    at the level of [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), to better detect if the descriptor ultimately
    serves mapped classes or column expressions.
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新关联代理系统仍未代理混合属性的回归，当它们使用 `@hybrid_property.expression` 装饰器返回替代 SQL 表达式，或者当混合属性返回任意
    [`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    时，会在表达式级别进行代理。这涉及进一步泛化用于检测在 [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") 级别代理对象类型的启发式方法，以更好地检测描述符最终服务于映射类还是列表达式。
- en: 'References: [#4690](https://www.sqlalchemy.org/trac/ticket/4690)'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4690](https://www.sqlalchemy.org/trac/ticket/4690)
- en: '**[orm] [bug]**'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Applied the mapper “configure mutex” against the declarative class mapping process,
    to guard against the race which can occur if mappers are used while dynamic module
    import schemes are still in the process of configuring mappers for related classes.
    This does not guard against all possible race conditions, such as if the concurrent
    import has not yet encountered the dependent classes as of yet, however it guards
    against as much as possible within the SQLAlchemy declarative process.
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用了映射器“配置互斥锁”来防止在动态模块导入方案仍在为相关类配置映射器的过程中使用映射器时可能发生的竞争。这并不能防止所有可能的竞争条件，比如如果并发导入尚未遇到相关类，但它在
    SQLAlchemy 声明过程中尽可能多地防范了可能发生的情况。
- en: 'References: [#4686](https://www.sqlalchemy.org/trac/ticket/4686)'
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4686](https://www.sqlalchemy.org/trac/ticket/4686)
- en: '**[orm] [bug]**'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is now emitted for the case where a transient object is being merged
    into the session with [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") when that object is already transient in the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This warns for the case where the object would normally
    be double-inserted.
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对将瞬态对象与 [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") 合并到会话中时，如果该对象在 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中已经是瞬态的情况发出警告。这会对通常会导致对象被双重插入的情况发出警告。
- en: 'References: [#4647](https://www.sqlalchemy.org/trac/ticket/4647)'
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4647](https://www.sqlalchemy.org/trac/ticket/4647)
- en: '**[orm] [bug]**'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in new relationship m2o comparison logic first introduced at
    [Improvement to the behavior of many-to-one query expressions](migration_13.html#change-4359)
    when comparing to an attribute that is persisted as NULL and is in an un-fetched
    state in the mapped instance. Since the attribute has no explicit default, it
    needs to default to NULL when accessed in a persistent setting.
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了在与映射实例中处于未获取状态且持久化为 NULL 的属性进行比较时，新关系 m2o 比较逻辑首次引入的回归，当属性没有显式默认值时，在持久化设置中访问时需要默认为
    NULL。 '
- en: 'References: [#4676](https://www.sqlalchemy.org/trac/ticket/4676)'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4676](https://www.sqlalchemy.org/trac/ticket/4676)
- en: engine
  id: totrans-960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [postgresql]**'
- en: Moved the “rollback” which occurs during dialect initialization so that it occurs
    after additional dialect-specific initialize steps, in particular those of the
    psycopg2 dialect which would inadvertently leave transactional state on the first
    new connection, which could interfere with some psycopg2-specific APIs which require
    that no transaction is started. Pull request courtesy Matthew Wilkes.
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将在方言初始化期间发生的“回滚”移动到额外的方言特定初始化步骤之后，特别是 psycopg2 方言的初始化步骤，这些步骤会在第一个新连接上无意中保留事务状态，这可能会干扰一些需要确保没有启动事务的
    psycopg2 特定 API。感谢 Matthew Wilkes 的拉取请求。
- en: 'References: [#4663](https://www.sqlalchemy.org/trac/ticket/4663)'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4663](https://www.sqlalchemy.org/trac/ticket/4663)
- en: sql
  id: totrans-964
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed that the [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") class was inadvertently registering
    itself as one of the named functions. Pull request courtesy Adrien Berchet.
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")类意外注册自己为命名函数的问题。感谢Adrien Berchet提供的拉取请求。
- en: 'References: [#4653](https://www.sqlalchemy.org/trac/ticket/4653)'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4653](https://www.sqlalchemy.org/trac/ticket/4653)
- en: '**[sql] [bug]**'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where double negation of a boolean column wouldn’t reset the “NOT”
    operator.
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了布尔列的双重否定不会重置“NOT”运算符的问题。
- en: 'References: [#4618](https://www.sqlalchemy.org/trac/ticket/4618)'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4618](https://www.sqlalchemy.org/trac/ticket/4618)
- en: '**[sql] [bug]**'
  id: totrans-971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") namespace is being migrated so that
    function names are looked up in a case-insensitive manner, as SQL functions do
    not collide on case sensitive differences nor is this something which would occur
    with user-defined functions or stored procedures. Lookups for functions declared
    with [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") now use a case insensitive scheme,
    however a deprecation case is supported which allows two or more [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") objects with the same name of different
    cases to exist, which will cause case sensitive lookups to occur for that particular
    name, while emitting a warning at function registration time. Thanks to Adrien
    Berchet for a lot of work on this complicated feature.
  id: totrans-972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")命名空间正在迁移，以便函数名称以不区分大小写的方式查找，因为SQL函数不会因区分大小写的差异而发生冲突，用户定义的函数或存储过程也不会发生这种情况。现在使用[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")声明的函数查找使用不区分大小写的方案，但支持一个弃用案例，允许存在两个或更多具有不同大小写的相同名称的[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")对象，这将导致对该特定名称进行区分大小写的查找，同时在函数注��时发出警告。感谢Adrien
    Berchet在这个复杂功能上的大量工作。'
- en: 'References: [#4569](https://www.sqlalchemy.org/trac/ticket/4569)'
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4569](https://www.sqlalchemy.org/trac/ticket/4569)
- en: postgresql
  id: totrans-974
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [orm]**'
  id: totrans-975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [orm]**'
- en: Fixed an issue where the “number of rows matched” warning would emit even if
    the dialect reported “supports_sane_multi_rowcount=False”, as is the case for
    psycogp2 with `use_batch_mode=True` and others.
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“匹配行数”警告即使dialect报告“supports_sane_multi_rowcount=False”也会发出的问题，例如psycogp2使用`use_batch_mode=True`等情况。
- en: 'References: [#4661](https://www.sqlalchemy.org/trac/ticket/4661)'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4661](https://www.sqlalchemy.org/trac/ticket/4661)
- en: mysql
  id: totrans-978
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for DROP CHECK constraint which is required by MySQL 8.0.16 to
    drop a CHECK constraint; MariaDB supports plain DROP CONSTRAINT. The logic distinguishes
    between the two syntaxes by checking the server version string for MariaDB presence.
    Alembic migrations has already worked around this issue by implementing its own
    DROP for MySQL / MariaDB CHECK constraints, however this change implements it
    straight in Core so that its available for general use. Pull request courtesy
    Hannes Hansen.
  id: totrans-980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对DROP CHECK约束的支持，MySQL 8.0.16需要删除CHECK约束；MariaDB支持普通的DROP CONSTRAINT。该逻辑通过检查MariaDB版本字符串来区分这两种语法的区别。Alembic迁移已经解决了这个问题，通过在MySQL
    / MariaDB CHECK约束上实现自己的DROP，但这个改变直接在Core中实现，以便供一般使用。感谢Hannes Hansen提供的拉取请求。
- en: 'References: [#4650](https://www.sqlalchemy.org/trac/ticket/4650)'
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4650](https://www.sqlalchemy.org/trac/ticket/4650)
- en: mssql
  id: totrans-982
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added support for SQL Server filtered indexes, via the `mssql_where` parameter
    which works similarly to that of the `postgresql_where` index function in the
    PostgreSQL dialect.
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对SQL Server过滤索引的支持，通过`mssql_where`参数，其工作方式类似于PostgreSQL方言中的`postgresql_where`索引函数。
- en: See also
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Filtered Indexes](../dialects/mssql.html#mssql-index-where)'
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[过滤索引](../dialects/mssql.html#mssql-index-where)'
- en: 'References: [#4657](https://www.sqlalchemy.org/trac/ticket/4657)'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4657](https://www.sqlalchemy.org/trac/ticket/4657)
- en: '**[mssql] [bug]**'
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added error code 20047 to “is_disconnect” for pymssql. Pull request courtesy
    Jon Schuff.
  id: totrans-989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pymssql添加了错误代码20047到“is_disconnect”。感谢Jon Schuff提供的拉取请求。
- en: 'References: [#4680](https://www.sqlalchemy.org/trac/ticket/4680)'
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4680](https://www.sqlalchemy.org/trac/ticket/4680)
- en: misc
  id: totrans-991
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[misc] [bug]**'
  id: totrans-992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [bug]**'
- en: Removed errant “sqla_nose.py” symbol from MANIFEST.in which created an undesirable
    warning message.
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MANIFEST.in 中移除了多余的“sqla_nose.py”符号，该符号会创建一个不希望出现的警告消息。
- en: 'References: [#4625](https://www.sqlalchemy.org/trac/ticket/4625)'
  id: totrans-994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4625](https://www.sqlalchemy.org/trac/ticket/4625)
- en: 1.3.3
  id: totrans-995
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.3
- en: 'Released: April 15, 2019'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年4月15日
- en: orm
  id: totrans-997
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.3 regression in new “ambiguous FROMs” query logic introduced in [Query.join()
    handles ambiguity in deciding the “left” side more explicitly](migration_13.html#change-4365)
    where a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that explicitly places an entity in the FROM clause with [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") and also joins to it using [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") would later cause an “ambiguous FROM” error if that
    entity were used in additional joins, as the entity appears twice in the “from”
    list of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
    The fix resolves this ambiguity by folding the standalone entity into the join
    that it’s already a part of in the same way that ultimately happens when the SELECT
    statement is rendered.
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.3 版本中新的“模糊 FROMs”查询逻辑中的回归问题，该问题在 [Query.join() handles ambiguity in deciding
    the “left” side more explicitly](migration_13.html#change-4365) 中引入，当一个[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")显式地将一个实体放在 FROM 子句中，并且还使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")将其与之连接时，如果该实体在额外的连接中使用，稍后将会导致“模糊 FROM”错误，因为该实体在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的“from”列表中出现两次。修复此问题的方法是将独立实体合并到它已经是一部分的连接中，这与在渲染 SELECT
    语句时最终发生的方式相同。
- en: 'References: [#4584](https://www.sqlalchemy.org/trac/ticket/4584)'
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4584](https://www.sqlalchemy.org/trac/ticket/4584)
- en: '**[orm] [bug]**'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Adjusted the [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") method to not call `and()` internally against
    multiple criteria, instead passing it off to [`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter") as a series of criteria, instead of a single criteria.
    This allows [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") to defer to [`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")’s treatment of variable numbers of clauses, including
    the case where the list is empty. In this case, the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object will not have a `.whereclause`, which allows subsequent
    “no whereclause” methods like [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") to behave consistently.
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")方法，不再对多个条件内部调用`and()`，而是将其作为一系列条件传递给[`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")，而不是一个单一条件。这样做允许[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")推迟到[`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")处理可变数量的子句，包括列表为空的情况。在这种情况下，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象将不会有`.whereclause`，这使得后续的“无 whereclause”方法如[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")表现一致。
- en: 'References: [#4606](https://www.sqlalchemy.org/trac/ticket/4606)'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4606](https://www.sqlalchemy.org/trac/ticket/4606)
- en: postgresql
  id: totrans-1004
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression from release 1.3.2 caused by [#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    where a URL that contained only a query string and no hostname, such as for the
    purposes of specifying a service file with connection information, would no longer
    be propagated to psycopg2 properly. The change in [#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    has been adjusted to further suit psycopg2’s exact requirements, which is that
    if there are any connection parameters whatsoever, the “dsn” parameter is no longer
    required, so in this case the query string parameters are passed alone.
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从版本 1.3.2 发布以来由 [#4562](https://www.sqlalchemy.org/trac/ticket/4562) 引起的回归问题，其中一个仅包含查询字符串而没有主机名的
    URL，例如用于指定包含连接信息的服务文件，将不再正确传播到 psycopg2。[#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    中的更改已经调整以进一步适应 psycopg2 的确切要求，即如果存在任何连接参数，则不再需要“dsn”参数，因此在这种情况下，仅传递查询字符串参数。
- en: 'References: [#4601](https://www.sqlalchemy.org/trac/ticket/4601)'
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4601](https://www.sqlalchemy.org/trac/ticket/4601)
- en: mssql
  id: totrans-1008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in SQL Server dialect where if a bound parameter were present in
    an ORDER BY expression that would ultimately not be rendered in the SQL Server
    version of the statement, the parameters would still be part of the execution
    parameters, leading to DBAPI-level errors. Pull request courtesy Matt Lewellyn.
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言中的问题，如果 ORDER BY 表达式中存在一个绑定参数，最终在 SQL Server 版本的语句中不会被渲染，那么这些参数仍然会成为执行参数的一部分，导致
    DBAPI 级别的错误。感谢 Matt Lewellyn 提交的拉取请求。
- en: 'References: [#4587](https://www.sqlalchemy.org/trac/ticket/4587)'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4587](https://www.sqlalchemy.org/trac/ticket/4587)
- en: misc
  id: totrans-1012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-1013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed behavioral regression as a result of deprecating the “use_threadlocal”
    flag for [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    where the [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") no longer makes use of this option which
    causes the “rollback on return” logic to take place when the same [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is used multiple times in the context of a transaction
    to connect or implicitly execute, thereby cancelling the transaction. While this
    is not the recommended way to work with engines and connections, it is nonetheless
    a confusing behavioral change as when using [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool"), the transaction should stay open regardless
    of what else is done with the same engine in the same thread. The `use_threadlocal`
    flag remains deprecated however the [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") now implements its own version of the same
    logic.
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于弃用 [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    的 “use_threadlocal” 标志导致的行为回归，[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") 不再使用此选项，这会导致在事务的上下文中多次使用相同的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 连接或隐式执行时发生“回滚”逻辑，从而取消事务。虽然这不是推荐的引擎和连接工作方式，但当使用 [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") 时，事务应该保持打开状态，无论在同一线程中对相同引擎做了什么。`use_threadlocal`
    标志仍然被弃用，但 [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") 现在实现了自己版本的相同逻辑。
- en: 'References: [#4585](https://www.sqlalchemy.org/trac/ticket/4585)'
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4585](https://www.sqlalchemy.org/trac/ticket/4585)
- en: '**[bug] [ext]**'
  id: totrans-1016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where using `copy.copy()` or `copy.deepcopy()` on [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") would cause the items within the list to
    be duplicated, due to an inconsistency in how Python pickle and copy both make
    use of `__getstate__()` and `__setstate__()` regarding lists. In order to resolve,
    a `__reduce_ex__` method had to be added to [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList"). In order to maintain backwards compatibility
    with existing pickles based on `__getstate__()`, the `__setstate__()` method remains
    as well; the test suite asserts that pickles made against the old version of the
    class can still be deserialized by the pickle module.
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")上使用`copy.copy()`或`copy.deepcopy()`会导致列表中的项目重复，这是由于Python的pickle和copy在处理列表时使用`__getstate__()`和`__setstate__()`存在不一致性。为了解决这个问题，必须向[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")添加一个`__reduce_ex__`方法。为了与基于`__getstate__()`的现有pickle保持向后兼容性，`__setstate__()`方法也保留了；测试套件断言，对旧版本类进行的pickle仍然可以被pickle模块反序列化。
- en: 'References: [#4603](https://www.sqlalchemy.org/trac/ticket/4603)'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4603](https://www.sqlalchemy.org/trac/ticket/4603)
- en: 1.3.2
  id: totrans-1019
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.2
- en: 'Released: April 2, 2019'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：April 2, 2019
- en: orm
  id: totrans-1021
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Restored instance-level support for plain Python descriptors, e.g. `@property`
    objects, in conjunction with association proxies, in that if the proxied object
    is not within ORM scope at all, it gets classified as “ambiguous” but is proxed
    directly. For class level access, a basic class level``__get__()`` now returns
    the `AmbiguousAssociationProxyInstance` directly, rather than raising its exception,
    which is the closest approximation to the previous behavior that returned the
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") itself that’s possible. Also
    improved the stringification of these objects to be more descriptive of current
    state.
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了对纯Python描述符（例如`@property`对象）的实例级支持，与关联代理一起使用时，如果代理对象根本不在ORM范围内，则被归类为“模糊”，但直接被代理。对于类级别访问，基本的类级别`__get__()`现在直接返回`AmbiguousAssociationProxyInstance`，而不是引发异常，这是返回可能的最接近以前返回[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")本身的行为的近似。还改进了这些对象的字符串表示，以更具描述性地反映当前状态。
- en: 'References: [#4573](https://www.sqlalchemy.org/trac/ticket/4573), [#4574](https://www.sqlalchemy.org/trac/ticket/4574)'
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4573](https://www.sqlalchemy.org/trac/ticket/4573), [#4574](https://www.sqlalchemy.org/trac/ticket/4574)
- en: '**[orm] [bug]**'
  id: totrans-1025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") or other aliased construct would not properly
    adapt when the aliased target were used as the [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") target of a subquery used
    inside of a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This required a fix to the clause adaption
    mechanics to properly handle a selectable that shows up in the “correlate except”
    list, in a similar manner as which occurs for selectables that show up in the
    “correlate” list. This is ultimately a fairly fundamental bug that has lasted
    for a long time but it is hard to come across it.
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在使用[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")或其他别名构造时，当别名目标被用作在[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")内部的子查询的[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")目标时，适配不正确。这需要修复子句适配机制，以正确处理出现在“correlate
    except”列表中的可选择项，类似于出现在“correlate”列表中的可选择项的方式。这实际上是一个持续了很长时间的相当基本的bug，但很难遇到它。
- en: 'References: [#4537](https://www.sqlalchemy.org/trac/ticket/4537)'
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4537](https://www.sqlalchemy.org/trac/ticket/4537)
- en: '**[orm] [bug]**'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where a new error message that was supposed to raise when attempting
    to link a relationship option to an AliasedClass without using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") would instead raise an `AttributeError`.
    Note that in 1.3, it is no longer valid to create an option path from a plain
    mapper relationship to an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") without using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type").
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个新的错误消息，当尝试将关系选项链接到一个未使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")的AliasedClass时，应该引发错误消息，而不是引发`AttributeError`。请注意，在1.3中，不再允许从普通映射器关系创建选项路径到[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")而不使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")。
- en: 'References: [#4566](https://www.sqlalchemy.org/trac/ticket/4566)'
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4566](https://www.sqlalchemy.org/trac/ticket/4566)
- en: sql
  id: totrans-1031
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [documentation]**'
  id: totrans-1032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [documentation]**'
- en: Thanks to [TypeEngine methods bind_expression, column_expression work with Variant,
    type-specific types](migration_13.html#change-3981), we no longer need to rely
    on recipes that subclass dialect-specific types directly, [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") can now handle all cases. Additionally, the
    above change made it slightly less likely that a direct subclass of a base SQLAlchemy
    type would work as expected, which could be misleading. Documentation has been
    updated to use [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") for these examples including the PostgreSQL
    “ArrayOfEnum” example datatype and direct support for the “subclass a type directly”
    has been removed.
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多亏了[TypeEngine methods bind_expression, column_expression work with Variant,
    type-specific types](migration_13.html#change-3981)，我们不再需要依赖直接子类化特定方言类型的方法，[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")现在可以处理所有情况。此外，上述更改使得直接子类化基本SQLAlchemy类型的行为稍微不太可能按预期工作，这可能会产生误导。文档已更新，使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")来处理这些示例，包括PostgreSQL的“ArrayOfEnum”示例数据类型，并且直接支持“直接子类化类型”的功能已被移除。
- en: 'References: [#4580](https://www.sqlalchemy.org/trac/ticket/4580)'
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4580](https://www.sqlalchemy.org/trac/ticket/4580)
- en: postgresql
  id: totrans-1035
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for parameter-less connection URLs for the psycopg2 dialect, meaning,
    the URL can be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as `"postgresql+psycopg2://"` with no additional arguments
    to indicate an empty DSN passed to libpq, which indicates to connect to “localhost”
    with no username, password, or database given. Pull request courtesy Julian Mehnle.
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为psycopg2方言添加了支持无参数连接URL的功能，这意味着URL可以作为`"postgresql+psycopg2://"`传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，而不需要额外的参数来指示传递给libpq的空DSN，这表示连接到“localhost”而不提供用户名、密码或数据库。感谢Julian
    Mehnle提供的拉取请求。
- en: 'References: [#4562](https://www.sqlalchemy.org/trac/ticket/4562)'
  id: totrans-1038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4562](https://www.sqlalchemy.org/trac/ticket/4562)
- en: '**[postgresql] [bug]**'
  id: totrans-1039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Modified the [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") parameter so that if a join
    or other composed selectable is passed, the individual [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects will be filtered from it, allowing one to pass
    a join() object to the parameter, as occurs normally when using joined table inheritance
    with the ORM. Pull request courtesy Raymond Lu.
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")参数，如果传递了一个join或其他组合的可选择对象，则将从中过滤出各个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，允许将join()对象传递给参数，这在使用ORM时通常会发生。感谢Raymond Lu提供的拉取请求。
- en: 'References: [#4550](https://www.sqlalchemy.org/trac/ticket/4550)'
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4550](https://www.sqlalchemy.org/trac/ticket/4550)
- en: 1.3.1
  id: totrans-1042
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.1
- en: 'Released: March 9, 2019'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年3月9日
- en: orm
  id: totrans-1044
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-1045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed regression where an association proxy linked to a synonym would no longer
    work, both at instance level and at class level.
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即关联代理链接到同义词将不再起作用，无论是在实例级别还是在类级别。
- en: 'References: [#4522](https://www.sqlalchemy.org/trac/ticket/4522)'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4522](https://www.sqlalchemy.org/trac/ticket/4522)
- en: mssql
  id: totrans-1048
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: A commit() is emitted after an isolation level change to SNAPSHOT, as both pyodbc
    and pymssql open an implicit transaction which blocks subsequent SQL from being
    emitted in the current transaction.
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将隔离级别更改为 SNAPSHOT 后发出了 commit()，因为 pyodbc 和 pymssql 都会打开一个隐式事务，该事务会阻止后续 SQL
    在当前事务中发出。
- en: 'This change is also **backported** to: 1.2.19'
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.2.19
- en: 'References: [#4536](https://www.sqlalchemy.org/trac/ticket/4536)'
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4536](https://www.sqlalchemy.org/trac/ticket/4536)
- en: '**[mssql] [bug]**'
  id: totrans-1053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed regression in SQL Server reflection due to [#4393](https://www.sqlalchemy.org/trac/ticket/4393)
    where the removal of open-ended `**kw` from the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype caused reflection of this type to fail due
    to a “scale” argument being passed.
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 反射中的回归问题，原因是[#4393](https://www.sqlalchemy.org/trac/ticket/4393)中从[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型中删除了开放式`**kw`导致反射此类型失败，因为传递了“scale”参数。
- en: 'References: [#4525](https://www.sqlalchemy.org/trac/ticket/4525)'
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4525](https://www.sqlalchemy.org/trac/ticket/4525)
- en: 1.3.0
  id: totrans-1056
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.0
- en: 'Released: March 4, 2019'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年3月4日
- en: orm
  id: totrans-1058
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method can now accept a dictionary of attribute keys and values as a means of
    indicating the primary key value to load; is particularly useful for composite
    primary keys. Pull request courtesy Sanjana S.
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")方法现在可以接受一个属性键和值的字典作为指示要加载的主键值的手段；对于复合主键特别有用。拉取请求由
    Sanjana S. 提供。'
- en: 'References: [#4316](https://www.sqlalchemy.org/trac/ticket/4316)'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4316](https://www.sqlalchemy.org/trac/ticket/4316)
- en: '**[orm] [feature]**'
  id: totrans-1062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A SQL expression can now be assigned to a primary key attribute for an ORM flush
    in the same manner as ordinary attributes as described in [Embedding SQL Insert/Update
    Expressions into a Flush](../orm/persistence_techniques.html#flush-embedded-sql-expressions)
    where the expression will be evaluated and then returned to the ORM using RETURNING,
    or in the case of pysqlite, works using the cursor.lastrowid attribute.Requires
    either a database that supports RETURNING (e.g. Postgresql, Oracle, SQL Server)
    or pysqlite.
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将 SQL 表达式分配给 ORM 刷新的主键属性，方法与普通属性描述的方式相同，如[将 SQL 插入/更新表达式嵌入到刷新中](../orm/persistence_techniques.html#flush-embedded-sql-expressions)，其中表达式将被评估，然后使用
    RETURNING 返回给 ORM，或者在 pysqlite 的情况下，使用 cursor.lastrowid 属性工作。需要支持 RETURNING 的数据库（例如
    Postgresql、Oracle、SQL Server）或 pysqlite。
- en: 'References: [#3133](https://www.sqlalchemy.org/trac/ticket/3133)'
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3133](https://www.sqlalchemy.org/trac/ticket/3133)
- en: engine
  id: totrans-1065
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-1066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Revised the formatting for [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") when stringified. Each error detail is broken
    up over multiple newlines instead of spaced out on a single line. Additionally,
    the SQL representation now stringifies the SQL statement rather than using `repr()`,
    so that newlines are rendered as is. Pull request courtesy Nate Clark.
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了在[`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")字符串化时的格式。现在，每个错误细节都会被分成多个新行，而不是在单行上间隔开。此外，SQL
    表示现在会将 SQL 语句字符串化，而不是使用`repr()`，因此换行符会按原样呈现。拉取请求由 Nate Clark 提供。
- en: See also
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changed StatementError formatting (newlines and %s)](migration_13.html#change-4500)'
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[更改了 StatementError 的格式（换行和 %s）](migration_13.html#change-4500)'
- en: 'References: [#4500](https://www.sqlalchemy.org/trac/ticket/4500)'
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4500](https://www.sqlalchemy.org/trac/ticket/4500)
- en: sql
  id: totrans-1071
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    class and related subclasses [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE"), [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") and [`TableSample`](../core/selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") have been reworked so that it is not
    possible for a user to construct the objects directly. These constructs require
    that the standalone construction function or selectable-bound method be used to
    instantiate new objects.
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")类及其相关子类[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")、[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")和[`TableSample`](../core/selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample")已经重新设计，用户不再能直接构造这些对象。这些构造需要使用独立的构造函数或与可选择绑定的方法来实例化新对象。'
- en: 'References: [#4509](https://www.sqlalchemy.org/trac/ticket/4509)'
  id: totrans-1074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4509](https://www.sqlalchemy.org/trac/ticket/4509)
- en: schema
  id: totrans-1075
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-1076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: Added new parameters [`Table.resolve_fks`](../core/metadata.html#sqlalchemy.schema.Table.params.resolve_fks
    "sqlalchemy.schema.Table") and [`MetaData.reflect.resolve_fks`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect") which when set to False will disable the
    automatic reflection of related tables encountered in [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects, which can both reduce SQL overhead for
    omitted tables as well as avoid tables that can’t be reflected for database-specific
    reasons. Two [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects present in the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection can still refer to each other even if
    the reflection of the two tables occurred separately.
  id: totrans-1077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Table.resolve_fks`](../core/metadata.html#sqlalchemy.schema.Table.params.resolve_fks
    "sqlalchemy.schema.Table")和[`MetaData.reflect.resolve_fks`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")，当设置为False时，将禁用在[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象中遇到的相关表的自动反射，这既可以减少省略表的SQL开销，也可以避免由于数据库特定原因无法反射的表。即使两个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象存在于同一个[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中，这两个表的反射仍然可以相互引用，即使这两个表的反射是分开进行的。
- en: 'References: [#4517](https://www.sqlalchemy.org/trac/ticket/4517)'
  id: totrans-1078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4517](https://www.sqlalchemy.org/trac/ticket/4517)
- en: 1.3.0b3
  id: totrans-1079
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.0b3
- en: 'Released: February 8, 2019'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年2月8日
- en: orm
  id: totrans-1081
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Improved the behavior of [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") in conjunction with loader options, in particular
    wildcard operations as well as [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only"). The polymorphic object will be more accurately targeted
    so that column-level options on the entity will correctly take effect.The issue
    is a continuation of the same kinds of things fixed in [#4468](https://www.sqlalchemy.org/trac/ticket/4468).
  id: totrans-1083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")与加载器选项一起使用的行为，特别是通配符操作以及[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")。多态对象将更准确地定位，以便实体上的列级选项能够正确生效。这个问题是在[#4468](https://www.sqlalchemy.org/trac/ticket/4468)中修复的同类问题的延续。
- en: 'References: [#4469](https://www.sqlalchemy.org/trac/ticket/4469)'
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4469](https://www.sqlalchemy.org/trac/ticket/4469)
- en: orm declarative
  id: totrans-1085
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [错误]**'
- en: Added some helper exceptions that invoke when a mapping based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection"), or `AutoMap` is used before
    the mapping is ready to be used, which contain descriptive information on the
    class, rather than falling through into other failure modes that are less informative.
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一些帮助异常，当基于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")、[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")或`AutoMap`的映射在映射准备好使用之前使用时，将调用这些异常，这些异常包含关于类的描述性信息，而不是掉入其他信息较少的故障模式。
- en: 'References: [#4470](https://www.sqlalchemy.org/trac/ticket/4470)'
  id: totrans-1088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4470](https://www.sqlalchemy.org/trac/ticket/4470)
- en: sql
  id: totrans-1089
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fully removed the behavior of strings passed directly as components of a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") or [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object being coerced to [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs automatically; the warning that has
    been emitted is now an ArgumentError or in the case of order_by() / group_by()
    a CompileError. This has emitted a warning since version 1.0 however its presence
    continues to create concerns for the potential of mis-use of this behavior.
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完全删除了直接作为[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象组件传递的字符串的行为，自动强制将其转换为[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造；现在发出的警告是一个`ArgumentError`或在`order_by()` /
    `group_by()`的情况下是`CompileError`。自版本1.0以来一直发出警告，但其存在仍然引发了对此行为可能被误用的担忧。
- en: 'Note that public CVEs have been posted for order_by() / group_by() which are
    resolved by this commit: CVE-2019-7164 CVE-2019-7548'
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，order_by() / group_by()的公共 CVE 已发布，此提交已解决：CVE-2019-7164 CVE-2019-7548
- en: See also
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Coercion of string SQL fragments to text() fully removed](migration_13.html#change-4481)'
  id: totrans-1094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[删除字符串 SQL 片段强制转换为 text()](migration_13.html#change-4481)'
- en: 'References: [#4481](https://www.sqlalchemy.org/trac/ticket/4481)'
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4481](https://www.sqlalchemy.org/trac/ticket/4481)
- en: '**[sql] [bug]**'
  id: totrans-1096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Quoting is applied to [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") names, those which are usually but not necessarily
    generated from the [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct, at compile time if they contain illegal
    characters, such as spaces or punctuation. The names are as before treated as
    case insensitive however, meaning if the names contain uppercase or mixed case
    characters, that alone does not trigger quoting. The case insensitivity is currently
    maintained for backwards compatibility.
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在编译时将引用应用于[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function")名称，如果它们包含非法字符，例如空格或标点符号，则通常但不一定由[`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")构造生成的名称。但是，名称与以前一样是不区分大小写的，这意味着如果名称包含大写字母或混合大小写字符，仅此并不会触发引用。目前为了向后兼容性，不区分大小写仍然保持不变。
- en: 'References: [#4467](https://www.sqlalchemy.org/trac/ticket/4467)'
  id: totrans-1098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4467](https://www.sqlalchemy.org/trac/ticket/4467)
- en: '**[sql] [bug]**'
  id: totrans-1099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added “SQL phrase validation” to key DDL phrases that are accepted as plain
    strings, including [`ForeignKeyConstraint.on_delete`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_delete
    "sqlalchemy.schema.ForeignKeyConstraint"), [`ForeignKeyConstraint.on_update`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_update
    "sqlalchemy.schema.ForeignKeyConstraint"), [`ExcludeConstraint.using`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.using
    "sqlalchemy.dialects.postgresql.ExcludeConstraint"), [`ForeignKeyConstraint.initially`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.initially
    "sqlalchemy.schema.ForeignKeyConstraint"), for areas where a series of SQL keywords
    only are expected.Any non-space characters that suggest the phrase would need
    to be quoted will raise a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError"). This change is related to the series of changes
    committed as part of [#4481](https://www.sqlalchemy.org/trac/ticket/4481).
  id: totrans-1100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对接受为纯字符串的关键DDL短语的“SQL短语验证”，包括[`ForeignKeyConstraint.on_delete`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_delete
    "sqlalchemy.schema.ForeignKeyConstraint")、[`ForeignKeyConstraint.on_update`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_update
    "sqlalchemy.schema.ForeignKeyConstraint")、[`ExcludeConstraint.using`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.using
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")、[`ForeignKeyConstraint.initially`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.initially
    "sqlalchemy.schema.ForeignKeyConstraint")等，用于期望一系列SQL关键字的地方。任何非空格字符表明该短语需要引用的情况将引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。此更改与作为[#4481](https://www.sqlalchemy.org/trac/ticket/4481)一部分提交的一系列更改相关。
- en: 'References: [#4481](https://www.sqlalchemy.org/trac/ticket/4481)'
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4481](https://www.sqlalchemy.org/trac/ticket/4481)
- en: postgresql
  id: totrans-1102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed issue where using an uppercase name for an index type (e.g. GIST, BTREE,
    etc. ) or an EXCLUDE constraint would treat it as an identifier to be quoted,
    rather than rendering it as is. The new behavior converts these types to lowercase
    and ensures they contain only valid SQL characters.
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用大写名称作为索引类型（例如GIST、BTREE等）或EXCLUDE约束时将其视为需要引用的标识符，而不是按原样呈现的问题。新行为将这些类型转换为小写，并确保它们只包含有效的SQL字符。
- en: 'References: [#4473](https://www.sqlalchemy.org/trac/ticket/4473)'
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4473](https://www.sqlalchemy.org/trac/ticket/4473)
- en: tests
  id: totrans-1106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-1107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [更改]**'
- en: The test system has removed support for Nose, which is unmaintained for several
    years and is producing warnings under Python 3\. The test suite is currently standardized
    on Pytest. Pull request courtesy Parth Shandilya.
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试系统已删除对Nose的支持，Nose已多年未维护，并在Python 3下产生警告。测试套件目前标准化为Pytest。感谢Parth Shandilya的拉取请求。
- en: 'References: [#4460](https://www.sqlalchemy.org/trac/ticket/4460)'
  id: totrans-1109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4460](https://www.sqlalchemy.org/trac/ticket/4460)
- en: misc
  id: totrans-1110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Implemented a more comprehensive assignment operation (e.g. “bulk replace”)
    when using association proxy with sets or dictionaries. Fixes the problem of redundant
    proxy objects being created to replace the old ones, which leads to excessive
    events and SQL and in the case of unique constraints will cause the flush to fail.
  id: totrans-1112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用关联代理与集合或字典时，实现了更全面的赋值操作（例如“批量替换”）。修复了创建多余代理对象以替换旧对象的问题，这会导致过多的事件和SQL，并且在唯一约束的情况下会导致刷新失败。
- en: See also
  id: totrans-1113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Implemented bulk replace for sets, dicts with AssociationProxy](migration_13.html#change-2642)'
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为集合、字典实现了批量替换与AssociationProxy](migration_13.html#change-2642)'
- en: 'References: [#2642](https://www.sqlalchemy.org/trac/ticket/2642)'
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2642](https://www.sqlalchemy.org/trac/ticket/2642)
- en: 1.3.0b2
  id: totrans-1116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.0b2
- en: 'Released: January 25, 2019'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年1月25日
- en: general
  id: totrans-1118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [change]**'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [更改]**'
- en: A large change throughout the library has ensured that all objects, parameters,
    and behaviors which have been noted as deprecated or legacy now emit `DeprecationWarning`
    warnings when invoked.As the Python 3 interpreter now defaults to displaying deprecation
    warnings, as well as that modern test suites based on tools like tox and pytest
    tend to display deprecation warnings, this change should make it easier to note
    what API features are obsolete. A major rationale for this change is so that long-
    deprecated features that nonetheless still see continue to see real world use
    can finally be removed in the near future; the biggest example of this are the
    `SessionExtension` and `MapperExtension` classes as well as a handful of other
    pre-event extension hooks, which have been deprecated since version 0.7 but still
    remain in the library. Another is that several major longstanding behaviors are
    to be deprecated as well, including the threadlocal engine strategy, the convert_unicode
    flag, and non primary mappers.
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在整个库中进行了大规模的更改，确保所有已被标记为弃用或遗留的对象、参数和行为在调用时都会发出`DeprecationWarning`警告。由于Python
    3解释器现在默认显示弃用警告，以及基于tox和pytest等工具的现代测试套件通常会显示弃用警告，这一变化应该使得更容易注意到哪些API功能已经过时。这一变化的主要原因是，长期以来已被弃用但仍然在实际应用中使用的功能最终可以在不久的将来被移除；其中最大的例子是自版本0.7以来就已被弃用但仍然存在于库中的`SessionExtension`和`MapperExtension`类，以及一些其他的预事件扩展钩子。另一个是，还将弃用几个长期存在的重要行为，包括线程本地引擎策略、convert_unicode标志和非主要映射器。
- en: See also
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Deprecation warnings are emitted for all deprecated elements; new deprecations
    added](migration_13.html#change-4393-general)'
  id: totrans-1122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对所有已弃用元素发出弃用警告；添加新的弃用](migration_13.html#change-4393-general)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: orm
  id: totrans-1124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Implemented a new feature whereby the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") construct can now be used as the target of
    a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). This allows the concept of “non primary mappers”
    to no longer be necessary, as the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") is much easier to configure and automatically
    inherits all the relationships of the mapped class, as well as preserves the ability
    for loader options to work normally.
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了一个新功能，即[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")构造现在可以用作[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标。这样就不再需要“非主要映射器”的概念，因为[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")更容易配置，并自动继承映射类的所有关系，同时保留加载器选项正常工作的能力。
- en: See also
  id: totrans-1127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Relationship to AliasedClass replaces the need for non primary mappers](migration_13.html#change-4423)'
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与AliasedClass的关系取代了非主要映射器的需求](migration_13.html#change-4423)'
- en: 'References: [#4423](https://www.sqlalchemy.org/trac/ticket/4423)'
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4423](https://www.sqlalchemy.org/trac/ticket/4423)
- en: '**[orm] [feature]**'
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new [`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event. This event complements
    the other “configure” stage mapper events with a per mapper event that receives
    each [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    right before its configure step, and additionally may be used to prevent or delay
    the configuration of specific [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects using a new return value `interfaces.EXT_SKIP`.
    See the documentation link for an example.
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")事件。该事件与其他“配置”阶段的映射器事件相辅相成，提供了一个每个[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")在其配置步骤之前接收的事件，并且还可以用于阻止或延迟特定[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的配置，使用新的返回值`interfaces.EXT_SKIP`。请参阅文档链接以获取示例。
- en: See also
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: 'References: [#4397](https://www.sqlalchemy.org/trac/ticket/4397)'
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4397](https://www.sqlalchemy.org/trac/ticket/4397)
- en: '**[orm] [change]**'
  id: totrans-1135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Added a new function [`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions") which takes over the task of the [`Session.close_all()`](../orm/session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method, which is now deprecated as this is
    confusing as a classmethod. Pull request courtesy Augustin Trancart.
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新函数[`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions")，它接管了[`Session.close_all()`](../orm/session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all")方法的任务，后者现在已被弃用，因为这会让人误解为一个类方法。感谢Augustin Trancart的拉取请求。
- en: 'References: [#4412](https://www.sqlalchemy.org/trac/ticket/4412)'
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4412](https://www.sqlalchemy.org/trac/ticket/4412)
- en: '**[orm] [bug]**'
  id: totrans-1138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed long-standing issue where duplicate collection members would cause a backref
    to delete the association between the member and its parent object when one of
    the duplicates were removed, as occurs as a side effect of swapping two objects
    in one statement.
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长期存在的问题，即重复的集合成员会导致反向引用在删除其中一个重复项时删除成员与其父对象之间的关联，就像在一条语句中交换两个对象的副作用一样。
- en: See also
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Many-to-one backref checks for collection duplicates during remove operation](migration_13.html#change-1103)'
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在删除操作期间，对于集合重复项的多对一反向引用检查](migration_13.html#change-1103)'
- en: 'References: [#1103](https://www.sqlalchemy.org/trac/ticket/1103)'
  id: totrans-1142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1103](https://www.sqlalchemy.org/trac/ticket/1103)
- en: '**[orm] [bug]**'
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Extended the fix first made as part of [#3287](https://www.sqlalchemy.org/trac/ticket/3287),
    where a loader option made against a subclass using a wildcard would extend itself
    to include application of the wildcard to attributes on the super classes as well,
    to a “bound” loader option as well, e.g. in an expression like `Load(SomeSubClass).load_only('foo')`.
    Columns that are part of the parent class of `SomeSubClass` will also be excluded
    in the same way as if the unbound option `load_only('foo')` were used.
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了首次作为[#3287](https://www.sqlalchemy.org/trac/ticket/3287)的一部分进行的修复，其中针对使用通配符的子类的加载器选项将扩展自身以包括将通配符应用于超类属性的情况，例如在表达式中`Load(SomeSubClass).load_only('foo')`。`SomeSubClass`的父类的列也将被排除，就像使用未绑定选项`load_only('foo')`一样。
- en: 'References: [#4373](https://www.sqlalchemy.org/trac/ticket/4373)'
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4373](https://www.sqlalchemy.org/trac/ticket/4373)
- en: '**[orm] [bug]**'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved error messages emitted by the ORM in the area of loader option traversal.
    This includes early detection of mis-matched loader strategies along with a clearer
    explanation why these strategies don’t match.
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了ORM在加载器选项遍历领域发出的错误消息。这包括早期检测到不匹配的加载器策略以及更清晰地解释为什么这些策略不匹配。
- en: 'References: [#4433](https://www.sqlalchemy.org/trac/ticket/4433)'
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4433](https://www.sqlalchemy.org/trac/ticket/4433)
- en: '**[orm] [bug]**'
  id: totrans-1149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “remove” event for collections is now called before the item is removed
    in the case of the `collection.remove()` method, as is consistent with the behavior
    for most other forms of collection item removal (such as `__delitem__`, replacement
    under `__setitem__`). For `pop()` methods, the remove event still fires after
    the operation.
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`collection.remove()`方法中，现在在移除项目之前调用“remove”集合事件，这与大多数其他形式的集合项目移除行为一致（例如`__delitem__`、`__setitem__`下的替换）。对于`pop()`方法，删除事件仍然在操作之后触发。
- en: '**[orm] [bug] [engine]**'
  id: totrans-1151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Added accessors for execution options to Core and ORM, via [`Query.get_execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options"), [`Connection.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), [`Engine.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options"), and [`Executable.get_execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options"). PR courtesy Daniel
    Lister.
  id: totrans-1152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Core和ORM添加了执行选项的访问器，通过[`Query.get_execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")、[`Connection.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")、[`Engine.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options")和[`Executable.get_execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options")。PR由Daniel Lister提供。
- en: 'References: [#4464](https://www.sqlalchemy.org/trac/ticket/4464)'
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4464](https://www.sqlalchemy.org/trac/ticket/4464)
- en: '**[orm] [bug]**'
  id: totrans-1154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in association proxy due to [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    which caused the use of custom [`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") objects with hybrid attributes, such as the one
    demonstrated in the `dictlike-polymorphic` example to not function within an association
    proxy. The strictness that was added in [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    has been relaxed, and additional logic to accommodate for an association proxy
    that links to a custom hybrid have been added.
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[#3423](https://www.sqlalchemy.org/trac/ticket/3423)相关的关联代理问题，导致使用自定义[`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")对象与混合属性（例如在`dictlike-polymorphic`示例中演示的属性）在关联代理中无法正常工作。在[#3423](https://www.sqlalchemy.org/trac/ticket/3423)中添加的严格性已经放宽，并添加了额外的逻辑以适应关联代理链接到自定义混合的情况。
- en: 'References: [#4446](https://www.sqlalchemy.org/trac/ticket/4446)'
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4446](https://www.sqlalchemy.org/trac/ticket/4446)
- en: '**[orm] [bug]**'
  id: totrans-1157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Implemented the `.get_history()` method, which also implies availability of
    [`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history"), for [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") attributes. Previously, trying to access attribute history
    via a synonym would raise an `AttributeError`.
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了`.get_history()`方法，这也意味着对于[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")属性也有[`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")的可用性。以前，尝试通过同义词访问属性历史会引发`AttributeError`。
- en: 'References: [#3777](https://www.sqlalchemy.org/trac/ticket/3777)'
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3777](https://www.sqlalchemy.org/trac/ticket/3777)
- en: orm declarative
  id: totrans-1160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-1161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Added a `__clause_element__()` method to [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") which can allow the usage of a not-fully-declared
    column or deferred attribute in a declarative mapped class slightly more friendly
    when it’s used in a constraint or other column-oriented scenario within the class
    declaration, though this still can’t work in open-ended expressions; prefer to
    call the [`ColumnProperty.expression`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.expression
    "sqlalchemy.orm.ColumnProperty.expression") attribute if receiving `TypeError`.
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")中添加了一个`__clause_element__()`方法，可以使在声明映射类中使用未完全声明的列或延迟属性在约束或其他基于列的场景中稍微更友好，尽管这仍无法在开放式表达式中工作；如果收到`TypeError`，建议调用[`ColumnProperty.expression`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.expression
    "sqlalchemy.orm.ColumnProperty.expression")属性。
- en: 'References: [#4372](https://www.sqlalchemy.org/trac/ticket/4372)'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4372](https://www.sqlalchemy.org/trac/ticket/4372)
- en: engine
  id: totrans-1164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-1165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added public accessor `QueuePool.timeout()` that returns the configured timeout
    for a [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    object. Pull request courtesy Irina Delamare.
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了公共访问器`QueuePool.timeout()`，返回[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")对象的配置超时时间。感谢Irina Delamare的拉取请求。
- en: 'References: [#3689](https://www.sqlalchemy.org/trac/ticket/3689)'
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3689](https://www.sqlalchemy.org/trac/ticket/3689)
- en: '**[engine] [change]**'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [change]**'
- en: The “threadlocal” engine strategy which has been a legacy feature of SQLAlchemy
    since around version 0.2 is now deprecated, along with the [`Pool.threadlocal`](../core/pooling.html#sqlalchemy.pool.Pool.params.threadlocal
    "sqlalchemy.pool.Pool") parameter of [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") which has no effect in most modern use cases.
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自大约版本 0.2 以来一直是 SQLAlchemy 的传统特性的“threadlocal” 引擎策略现在已被弃用，以及 [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 的 [`Pool.threadlocal`](../core/pooling.html#sqlalchemy.pool.Pool.params.threadlocal
    "sqlalchemy.pool.Pool") 参数，在大多数现代用例中没有任何效果。
- en: See also
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“threadlocal” engine strategy deprecated](migration_13.html#change-4393-threadlocal)'
  id: totrans-1171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“threadlocal” 引擎策略已弃用](migration_13.html#change-4393-threadlocal)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: sql
  id: totrans-1173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Amended the [`AnsiFunction`](../core/functions.html#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") class, the base of common SQL functions
    like `CURRENT_TIMESTAMP`, to accept positional arguments like a regular ad-hoc
    function. This to suit the case that many of these functions on specific backends
    accept arguments such as “fractional seconds” precision and such. If the function
    is created with arguments, it renders the parenthesis and the arguments. If no
    arguments are present, the compiler generates the non-parenthesized form.
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 [`AnsiFunction`](../core/functions.html#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") 类，这是类似 `CURRENT_TIMESTAMP` 这样的常见 SQL
    函数的基类，以接受位置参数，就像常规的临时函数一样。这适用于许多特定后端上这些函数接受参数（如“分数秒”精度等）的情况���如果函数使用参数创建，它会呈现括号和参数。如果没有参数，则编译器生成非括号形式。
- en: 'References: [#4386](https://www.sqlalchemy.org/trac/ticket/4386)'
  id: totrans-1176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4386](https://www.sqlalchemy.org/trac/ticket/4386)
- en: '**[sql] [change]**'
  id: totrans-1177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change]**'
- en: The [`create_engine.convert_unicode`](../core/engines.html#sqlalchemy.create_engine.params.convert_unicode
    "sqlalchemy.create_engine") and [`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String") parameters have been deprecated. These parameters were
    built back when most Python DBAPIs had little to no support for Python Unicode
    objects, and SQLAlchemy needed to take on the very complex task of marshalling
    data and SQL strings between Unicode and bytestrings throughout the system in
    a performant way. Thanks to Python 3, DBAPIs were compelled to adapt to Unicode-aware
    APIs and today all DBAPIs supported by SQLAlchemy support Unicode natively, including
    on Python 2, allowing this long-lived and very complicated feature to finally
    be (mostly) removed. There are still of course a few Python 2 edge cases where
    SQLAlchemy has to deal with Unicode however these are handled automatically; in
    modern use, there should be no need for end-user interaction with these flags.
  id: totrans-1178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.convert_unicode`](../core/engines.html#sqlalchemy.create_engine.params.convert_unicode
    "sqlalchemy.create_engine") 和 [`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String") 参数已被弃用。这些参数是在大多数 Python DBAPIs 几乎不支持 Python Unicode
    对象时构建的，而 SQLAlchemy 需要以高效的方式在整个系统中在 Unicode 和字节字符串之间传递数据和 SQL 字符串的非常复杂的任务。由于 Python
    3，DBAPIs 被迫适应了 Unicode-aware APIs，今天所有由 SQLAlchemy 支持的 DBAPIs 都原生支持 Unicode，包括在
    Python 2 上，这使得这个长期存在且非常复杂的功能最终被（大部分）移除。当然，在一些 Python 2 的边缘情况下，SQLAlchemy 仍然需要处理
    Unicode，但这些都是自动处理的；在现代使用中，用户不应该需要与这些标志进行交互。'
- en: See also
  id: totrans-1179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[convert_unicode parameters deprecated](migration_13.html#change-4393-convertunicode)'
  id: totrans-1180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[已弃用 convert_unicode 参数](migration_13.html#change-4393-convertunicode)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: mssql
  id: totrans-1182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The `literal_processor` for the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") and [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes now render an `N` character in front
    of the literal string expression as required by SQL Server for Unicode string
    values rendered in SQL expressions.
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    和 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型的 `literal_processor` 现在在文本字符串表达式前面渲染一个 `N` 字符，这是 SQL Server 要求在 SQL 表达式中呈现
    Unicode 字符值时的必需操作。'
- en: 'References: [#4442](https://www.sqlalchemy.org/trac/ticket/4442)'
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4442](https://www.sqlalchemy.org/trac/ticket/4442)
- en: misc
  id: totrans-1186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a regression in 1.3.0b1 caused by [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    where association proxy objects that access an attribute that’s only present on
    a polymorphic subclass would raise an `AttributeError` even though the actual
    instance being accessed was an instance of that subclass.
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.3.0b1中由[#3423](https://www.sqlalchemy.org/trac/ticket/3423)引起的回归，其中访问仅存在于多态子类上的属性的关联代理对象会引发`AttributeError`，尽管实际被访问的实例是该子类的实例。
- en: 'References: [#4401](https://www.sqlalchemy.org/trac/ticket/4401)'
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4401](https://www.sqlalchemy.org/trac/ticket/4401)
- en: 1.3.0b1
  id: totrans-1190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.0b1
- en: 'Released: November 16, 2018'
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年11月16日
- en: orm
  id: totrans-1192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new feature [`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples"). Causes the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object to return keyed tuple objects unconditionally even
    if the query is against a single entity. Pull request courtesy Eric Atkin.
  id: totrans-1194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples")。导致[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象无条件返回键入的元组对象，即使查询针对单个实体。感谢Eric Atkin的贡献。
- en: 'This change is also **backported** to: 1.2.5'
  id: totrans-1195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.2.5
- en: '**[orm] [feature]**'
  id: totrans-1196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new flag [`Session.bulk_save_objects.preserve_order`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.preserve_order
    "sqlalchemy.orm.Session.bulk_save_objects") to the [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") method, which defaults to True. When
    set to False, the given mappings will be grouped into inserts and updates per
    each object type, to allow for greater opportunities to batch common operations
    together. Pull request courtesy Alessandro Cucci.
  id: totrans-1197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")方法中添加了新标志[`Session.bulk_save_objects.preserve_order`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.preserve_order
    "sqlalchemy.orm.Session.bulk_save_objects")，默认值为True。当设置为False时，给定的映射将按对象类型分组为插入和更新，以便更好地将常见操作批量处理在一起。感谢Alessandro
    Cucci的贡献。
- en: '**[orm] [feature]**'
  id: totrans-1198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “selectin” loader strategy now omits the JOIN in the case of a simple one-to-many
    load, where it instead relies loads only from the related table, relying upon
    the foreign key columns of the related table in order to match up to primary keys
    in the parent table. This optimization can be disabled by setting the [`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") flag to False. Many thanks to Jayson Reis for the
    efforts on this.
  id: totrans-1199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “selectin”加载策略现在在简单的一对多加载情况下省略了JOIN，而是仅从相关表中加载，依靠相关表的外键列来匹配父表中的主键。可以通过将[`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship")标志设置为False来禁用此优化。非常感谢Jayson Reis的努力。
- en: See also
  id: totrans-1200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[selectin loading no longer uses JOIN for simple one-to-many](migration_13.html#change-4340)'
  id: totrans-1201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[selectin loading no longer uses JOIN for simple one-to-many](migration_13.html#change-4340)'
- en: 'References: [#4340](https://www.sqlalchemy.org/trac/ticket/4340)'
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4340](https://www.sqlalchemy.org/trac/ticket/4340)
- en: '**[orm] [feature]**'
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added `.info` dictionary to the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") class, the object that comes from calling [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") on a mapped object.
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")类中添加了`.info`字典，该类是从调用映射对象的[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")方法返回的对象。
- en: See also
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[info dictionary added to InstanceState](migration_13.html#change-4257)'
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[info dictionary added to InstanceState](migration_13.html#change-4257)'
- en: 'References: [#4257](https://www.sqlalchemy.org/trac/ticket/4257)'
  id: totrans-1207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4257](https://www.sqlalchemy.org/trac/ticket/4257)
- en: '**[orm] [bug]**'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct in conjunction with [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as `Query.select_entity_from()` would not
    apply clause adaption to the right side of the join. “lateral” introduces the
    use case of the right side of a join being correlatable. Previously, adaptation
    of this clause wasn’t considered. Note that in 1.2 only, a selectable introduced
    by [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is still not adapted due to [#4304](https://www.sqlalchemy.org/trac/ticket/4304);
    the selectable needs to be produced by the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function to be the right side of the “lateral”
    join.
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")以及`Query.select_entity_from()`结合使用[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造时，不会将子句适应到连接的右侧的错误。 “lateral”引入了连接右侧可以相关的用例。以前，未考虑适应此子句。请注意，在1.2版本中，由于[#4304](https://www.sqlalchemy.org/trac/ticket/4304)，由[`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")引入的可选择性仍未适应；可选择性需要由[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")函数生成以成为“lateral”连接的右侧。
- en: 'This change is also **backported** to: 1.2.12'
  id: totrans-1210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.12
- en: 'References: [#4334](https://www.sqlalchemy.org/trac/ticket/4334)'
  id: totrans-1211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4334](https://www.sqlalchemy.org/trac/ticket/4334)
- en: '**[orm] [bug]**'
  id: totrans-1212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue regarding passive_deletes=”all”, where the foreign key attribute
    of an object is maintained with its value even after the object is removed from
    its parent collection. Previously, the unit of work would set this to NULL even
    though passive_deletes indicated it should not be modified.
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于`passive_deletes=”all”`的问题，即对象的外键属性在从其父集合中移除后仍保持其值。以前，工作单元会将其设置为`NULL`，即使`passive_deletes`指示不应修改它。
- en: See also
  id: totrans-1214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[passive_deletes=’all’ will leave FK unchanged for object removed from collection](migration_13.html#change-3844)'
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`passive_deletes=’all’`将保留从集合中移除的对象的FK不变](migration_13.html#change-3844)'
- en: 'References: [#3844](https://www.sqlalchemy.org/trac/ticket/3844)'
  id: totrans-1216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3844](https://www.sqlalchemy.org/trac/ticket/3844)
- en: '**[orm] [bug]**'
  id: totrans-1217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the behavior of a relationship-bound many-to-one object expression
    such that the retrieval of column values on the related object are now resilient
    against the object being detached from its parent [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), even if the attribute has been expired. New features
    within the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") are used to memoize the last known value of a
    particular column attribute before its expired, so that the expression can still
    evaluate when the object is detached and expired at the same time. Error conditions
    are also improved using modern attribute state features to produce more specific
    messages as needed.
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了与关系绑定的多对一对象表达式的行为，使得在相关对象上检索列值现在对于对象从其父[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中分离，即使属性已过期也是弹性的。在[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")中使用了新功能来记忆特定列属性在其过期之前的最后已知值，以便在对象被分离和过期时表达式仍然可以评估。使用现代属性状态功能改进了错误条件，以根据需要生成更具体的消息。
- en: See also
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvement to the behavior of many-to-one query expressions](migration_13.html#change-4359)'
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进了多对一查询表达式的行为](migration_13.html#change-4359)'
- en: 'References: [#4359](https://www.sqlalchemy.org/trac/ticket/4359)'
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4359](https://www.sqlalchemy.org/trac/ticket/4359)
- en: '**[orm] [bug] [mysql] [postgresql]**'
  id: totrans-1222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [mysql] [postgresql]**'
- en: The ORM now doubles the “FOR UPDATE” clause within the subquery that renders
    in conjunction with joined eager loading in some cases, as it has been observed
    that MySQL does not lock the rows from a subquery. This means the query renders
    with two FOR UPDATE clauses; note that on some backends such as Oracle, FOR UPDATE
    clauses on subqueries are silently ignored since they are unnecessary. Additionally,
    in the case of the “OF” clause used primarily with PostgreSQL, the FOR UPDATE
    is rendered only on the inner subquery when this is used so that the selectable
    can be targeted to the table within the SELECT statement.
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 ORM 在某些情况下会在子查询中加倍使用“FOR UPDATE”子句，与联接式急加载一起使用，因为观察到 MySQL 不会锁定子查询中的行。这意味着查询会带有两个
    FOR UPDATE 子句；请注意，在某些后端（如 Oracle）上，由于不必要，子查询中的 FOR UPDATE 子句会被静默忽略。此外，在主要与 PostgreSQL
    一起使用的“OF”子句的情况下，仅在使用时才在内部子查询中呈现 FOR UPDATE，以便可选择地将可选择的对象定位到 SELECT 语句中的表。
- en: See also
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[FOR UPDATE clause is rendered within the joined eager load subquery as well
    as outside](migration_13.html#change-4246)'
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[FOR UPDATE 子句在联接急加载子查询中以及外部呈现](migration_13.html#change-4246)'
- en: 'References: [#4246](https://www.sqlalchemy.org/trac/ticket/4246)'
  id: totrans-1226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4246](https://www.sqlalchemy.org/trac/ticket/4246)
- en: '**[orm] [bug]**'
  id: totrans-1227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Refactored [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to further clarify the individual components of structuring
    the join. This refactor adds the ability for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to determine the most appropriate “left” side of
    the join when there is more than one element in the FROM list or the query is
    against multiple entities. If more than one FROM/entity matches, an error is raised
    that asks for an ON clause to be specified to resolve the ambiguity. In particular
    this targets the regression we saw in [#4363](https://www.sqlalchemy.org/trac/ticket/4363)
    but is also of general use. The codepaths within [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") are now easier to follow and the error cases are
    decided more specifically at an earlier point in the operation.
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    以进一步澄清结构化联接的各个组件。此重构增加了 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 的能力，以确定在 FROM 列表中有多个元素或查询针对多个实体时，联接的最适当“左”侧。如果有多个
    FROM/entity 匹配，将引发错误，要求指定 ON 子句以解决模棱两可。特别是针对我们在 [#4363](https://www.sqlalchemy.org/trac/ticket/4363)
    中看到的回归，但也具有一般用途。现在 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 中的代码路径更易于遵循，并且在操作的较早阶段更具体地决定错误情况。
- en: See also
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Query.join() handles ambiguity in deciding the “left” side more explicitly](migration_13.html#change-4365)'
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Query.join() 更明确地处理决定“左”侧的模棱两可](migration_13.html#change-4365)'
- en: 'References: [#4365](https://www.sqlalchemy.org/trac/ticket/4365)'
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4365](https://www.sqlalchemy.org/trac/ticket/4365)
- en: '**[orm] [bug]**'
  id: totrans-1232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed long-standing issue in [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") where a scalar subquery such as produced by [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists"), [`Query.as_scalar()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") and other derivations from [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") would not correctly be adapted when used in
    a new [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that required entity adaptation, such as when the query were turned into a union,
    or a from_self(), etc. The change removes the “no adaptation” annotation from
    the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    object produced by the [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") accessor.
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")中的一个长期存在的问题，即标量子查询（例如由[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")、[`Query.as_scalar()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar")和其他从[`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement")派生的查询生成的子查询）在被用于需要实体适配的新[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")时，例如当查询被转换为联合查询或from_self()等时，将无法正确适配。此更改从由[`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement")访问器生成的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")对象中移除了“无适配”注释。
- en: 'References: [#4304](https://www.sqlalchemy.org/trac/ticket/4304)'
  id: totrans-1234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考���[#4304](https://www.sqlalchemy.org/trac/ticket/4304)
- en: '**[orm] [bug]**'
  id: totrans-1235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An informative exception is re-raised when a primary key value is not sortable
    in Python during an ORM flush under Python 3, such as an `Enum` that has no `__lt__()`
    method; normally Python 3 raises a `TypeError` in this case. The flush process
    sorts persistent objects by primary key in Python so the values must be sortable.
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Python 3下，在ORM刷新期间，当主键值在Python中不可排序时（例如没有`__lt__()`方法的`Enum`），会重新引发一个信息性异常；通常在这种情况下，Python
    3会引发`TypeError`。刷新过程在Python中按主键对持久对象进行排序，因此这些值必须是可排序的。
- en: 'References: [#4232](https://www.sqlalchemy.org/trac/ticket/4232)'
  id: totrans-1237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4232](https://www.sqlalchemy.org/trac/ticket/4232)
- en: '**[orm] [bug]**'
  id: totrans-1238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the collection converter used by the `MappedCollection` class. This
    converter was used only to assert that the incoming dictionary keys matched that
    of their corresponding objects, and only during a bulk set operation. The converter
    can interfere with a custom validator or [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") listener that wants to convert
    incoming values further. The `TypeError` which would be raised by this converter
    when an incoming key didn’t match the value is removed; incoming values during
    a bulk assignment will be keyed to their value-generated key, and not the key
    that’s explicitly present in the dictionary.
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了`MappedCollection`类使用的集合转换器。此转换器仅用于断言传入的字典键与其对应对象的键匹配，并且仅在批量设置操作期间使用。该转换器可能会干扰自定义验证器或想要进一步转换传入值的[`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")监听器。当传入的键与值不匹配时，此转换器将引发的`TypeError`已被移除；在批量赋值期间，传入值将被键入其生成的键，而不是显式存在于字典中的键。
- en: Overall, @converter is superseded by the [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") event handler added as part of
    [#3896](https://www.sqlalchemy.org/trac/ticket/3896).
  id: totrans-1240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总的来说，@converter已被作为[#3896](https://www.sqlalchemy.org/trac/ticket/3896)的一部分添加的[`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")事件处理程序所取代。
- en: 'References: [#3604](https://www.sqlalchemy.org/trac/ticket/3604)'
  id: totrans-1241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3604](https://www.sqlalchemy.org/trac/ticket/3604)
- en: '**[orm] [bug]**'
  id: totrans-1242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new behavior to the lazy load that takes place when the “old” value of
    a many-to-one is retrieved, such that exceptions which would be raised due to
    either `lazy="raise"` or a detached session error are skipped.
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新行为，当检索到多对一关系的“旧”值时，延迟加载时会跳过由于`lazy="raise"`或分离会话错误而引发的异常。
- en: See also
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Many-to-one replacement won’t raise for “raiseload” or detached for “old”
    object](migration_13.html#change-4353)'
  id: totrans-1245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多对一替换不会对“raiseload”或“old”对象引发异常](migration_13.html#change-4353)'
- en: 'References: [#4353](https://www.sqlalchemy.org/trac/ticket/4353)'
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4353](https://www.sqlalchemy.org/trac/ticket/4353)
- en: '**[orm] [bug]**'
  id: totrans-1247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A long-standing oversight in the ORM, the `__delete__` method for a many- to-one
    relationship was non-functional, e.g. for an operation such as `del a.b`. This
    is now implemented and is equivalent to setting the attribute to `None`.
  id: totrans-1248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 中长期存在的一个疏漏，即一个多对一关系的 `__delete__` 方法是非功能性的，例如对于 `del a.b` 这样的操作。现在已实现，并且等效于将属性设置为
    `None`。
- en: See also
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“del” implemented for ORM attributes](migration_13.html#change-4354)'
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[实现了“del”用于 ORM 属性](migration_13.html#change-4354)'
- en: 'References: [#4354](https://www.sqlalchemy.org/trac/ticket/4354)'
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4354](https://www.sqlalchemy.org/trac/ticket/4354)
- en: orm declarative
  id: totrans-1252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明性] [bug]**'
- en: Fixed bug where declarative would not update the state of the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") as far as what attributes were present, when additional
    attributes were added or removed after the mapper attribute collections had already
    been called and memoized. Additionally, a `NotImplementedError` is now raised
    if a fully mapped attribute (e.g. column, relationship, etc.) is deleted from
    a class that is currently mapped, since the mapper will not function correctly
    if the attribute has been removed.
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当声明性不会更新 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    的状态，例如在映射器属性集已经被调用并且被备忘录化后添加或删除其他属性时的 bug。另外，如果从当前已映射的类中删除了完全映射的属性（例如列、关系等），则现在会引发
    `NotImplementedError`，因为如果属性已被删除，则映射器将无法正确运行。
- en: 'References: [#4133](https://www.sqlalchemy.org/trac/ticket/4133)'
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4133](https://www.sqlalchemy.org/trac/ticket/4133)
- en: engine
  id: totrans-1256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-1257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [特性]**'
- en: Added new “lifo” mode to [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"), typically enabled by setting the flag [`create_engine.pool_use_lifo`](../core/engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine") to True. “lifo” mode means the same connection just
    checked in will be the first to be checked out again, allowing excess connections
    to be cleaned up from the server side during periods of the pool being only partially
    utilized. Pull request courtesy Taem Park.
  id: totrans-1258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    的新的“后进先出”模式，通常通过将标志 [`create_engine.pool_use_lifo`](../core/engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine") 设置为 True 来启用。“后进先出”模式意味着刚刚检入的连接将首先再次检出，允许在池仅部分利用时从服务器端清理多余的连接。拉请求由
    Taem Park 提供。
- en: See also
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New last-in-first-out strategy for QueuePool](migration_13.html#change-pr467)'
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[队列池的新的后进先出策略](migration_13.html#change-pr467)'
- en: sql
  id: totrans-1261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Refactored [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") to expose a [`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause") method similar to the [`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause") and `SQLCompiler.limit_clause()`
    methods, which can be overridden by dialects to customize how GROUP BY renders.
    Pull request courtesy Samuel Chou.
  id: totrans-1263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了 [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") 来公开一个类似于 [`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause") 和 `SQLCompiler.limit_clause()`
    方法的 [`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause") 方法，这些方法可以被方言覆盖以自定义 GROUP
    BY 如何呈现。拉请求由 Samuel Chou 提供。
- en: 'This change is also **backported** to: 1.2.13'
  id: totrans-1264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.2.13
- en: '**[sql] [feature]**'
  id: totrans-1265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: 'Added [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    to the “string SQL” system that will render a meaningful string expression (`"<next
    sequence value: my_sequence>"`) when stringifying without a dialect a statement
    that includes a “sequence nextvalue” expression, rather than raising a compilation
    error.'
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在“字符串 SQL”系统中添加了 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，当在没有方言的情况下字符串化包含“序列下一个值”表达式的语句时，将渲染一个有意义的字符串表达式（`"<next
    sequence value: my_sequence>"`），而不是引发编译错误。'
- en: 'References: [#4144](https://www.sqlalchemy.org/trac/ticket/4144)'
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4144](https://www.sqlalchemy.org/trac/ticket/4144)
- en: '**[sql] [feature]**'
  id: totrans-1268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added new naming convention tokens `column_0N_name`, `column_0_N_name`, etc.,
    which will render the names / keys / labels for all columns referenced by a particular
    constraint in a sequence. In order to accommodate for the length of such a naming
    convention, the SQL compiler’s auto-truncation feature now applies itself to constraint
    names as well, which creates a shortened, deterministically generated name for
    the constraint that will apply to a target backend without going over the character
    limit of that backend.
  id: totrans-1269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的命名约定标记`column_0N_name`，`column_0_N_name`等，这些标记将为序列中特定约束引用的所有列的名称/键/标签提供渲染。为了适应这种命名约定的长度，SQL编译器的自动截断功能现在也适用于约束名称，这将为约束创建一个缩短的、确定性生成的名称，该名称将适用于目标后端而不超过该后端的字符限制。
- en: The change also repairs two other issues. One is that the `column_0_key` token
    wasn’t available even though this token was documented, the other was that the
    `referred_column_0_name` token would inadvertently render the `.key` and not the
    `.name` of the column if these two values were different.
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还修复了另外两个问题。一个是`column_0_key`标记尽管已记录，但却不可用，另一个是如果这两个值不同，`referred_column_0_name`标记会无意中渲染`.key`而不是`.name`的列。
- en: See also
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New multi-column naming convention tokens, long name truncation](migration_13.html#change-3989)'
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的多列命名约定标记，长名称截断](migration_13.html#change-3989)'
- en: 'References: [#3989](https://www.sqlalchemy.org/trac/ticket/3989)'
  id: totrans-1273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3989](https://www.sqlalchemy.org/trac/ticket/3989)
- en: '**[sql] [feature]**'
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added new logic to the “expanding IN” bound parameter feature whereby if the
    given list is empty, a special “empty set” expression that is specific to different
    backends is generated, thus allowing IN expressions to be fully dynamic including
    empty IN expressions.
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为“expanding IN”绑定参数功能添加了新逻辑，如果给定的列表为空，将生成特定于不同后端的特殊“空集”表达式，从而允许IN表达式完全动态，包括空IN表达式。
- en: See also
  id: totrans-1276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Expanding IN feature now supports empty lists](migration_13.html#change-4271)'
  id: totrans-1277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[扩展IN功能现在支持空列表](migration_13.html#change-4271)'
- en: 'References: [#4271](https://www.sqlalchemy.org/trac/ticket/4271)'
  id: totrans-1278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4271](https://www.sqlalchemy.org/trac/ticket/4271)
- en: '**[sql] [feature]**'
  id: totrans-1279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: The Python builtin `dir()` is now supported for a SQLAlchemy “properties” object,
    such as that of a Core columns collection (e.g. `.c`), `mapper.attrs`, etc. Allows
    iPython autocompletion to work as well. Pull request courtesy Uwe Korn.
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持Python内置的`dir()`用于SQLAlchemy的“properties”对象，例如Core列集合（例如`.c`）、`mapper.attrs`等。也允许iPython自动完成工作。感谢Uwe
    Korn的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-1281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added new feature [`FunctionElement.as_comparison()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison") which allows a SQL function
    to act as a binary comparison operation that can work within the ORM.
  id: totrans-1282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`FunctionElement.as_comparison()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison")，允许SQL函数充当可以在ORM内部工作的二进制比较操作。
- en: See also
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Binary comparison interpretation for SQL functions](migration_13.html#change-3831)'
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQL函数的二进制比较解释](migration_13.html#change-3831)'
- en: 'References: [#3831](https://www.sqlalchemy.org/trac/ticket/3831)'
  id: totrans-1285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3831](https://www.sqlalchemy.org/trac/ticket/3831)
- en: '**[sql] [bug]**'
  id: totrans-1286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Added “like” based operators as “comparison” operators, including [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") among many others, so that
    all of these operators can be the basis for an ORM “primaryjoin” condition.
  id: totrans-1287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了基于“like”的运算符作为“比较”运算符，包括[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") 等等，以便所有这些运算符都可以成为ORM“primaryjoin”条件的基础。
- en: 'References: [#4302](https://www.sqlalchemy.org/trac/ticket/4302)'
  id: totrans-1288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4302](https://www.sqlalchemy.org/trac/ticket/4302)
- en: '**[sql] [bug]**'
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue with [`TypeEngine.bind_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") and [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") methods where these methods would
    not work if the target type were part of a [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"), or other target type of a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"). Additionally, the SQL compiler now calls upon
    the dialect-level implementation when it renders these methods so that dialects
    can now provide for SQL-level processing for built-in types.
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`TypeEngine.bind_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression")和[`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression")方法的问题，这些方法在目标类型是[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")或其他[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的一部分时无法正常工作。另外，SQL编译器现在在渲染这些方法时调用方言级别的实现，以便方言现在可以为内置类型提供SQL级别的处理。
- en: See also
  id: totrans-1291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[TypeEngine methods bind_expression, column_expression work with Variant, type-specific
    types](migration_13.html#change-3981)'
  id: totrans-1292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TypeEngine方法bind_expression, column_expression适用于Variant，类型特定类型](migration_13.html#change-3981)'
- en: 'References: [#3981](https://www.sqlalchemy.org/trac/ticket/3981)'
  id: totrans-1293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3981](https://www.sqlalchemy.org/trac/ticket/3981)
- en: postgresql
  id: totrans-1294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [特性]**'
- en: Added new PG type [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") which assists in casting table names
    to OID values. Pull request courtesy Sebastian Bank.
  id: totrans-1296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了新的PG类型[`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS")，用于将表名转换为OID值。感谢Sebastian Bank的拉取请求。
- en: 'This change is also **backported** to: 1.2.7'
  id: totrans-1297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到了：1.2.7
- en: 'References: [#4160](https://www.sqlalchemy.org/trac/ticket/4160)'
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4160](https://www.sqlalchemy.org/trac/ticket/4160)
- en: '**[postgresql] [feature]**'
  id: totrans-1299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [特性]**'
- en: Added rudimental support for reflection of PostgreSQL partitioned tables, e.g.
    that relkind=’p’ is added to reflection queries that return table information.
  id: totrans-1300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对PostgreSQL分区表的基本反射支持，例如，在返回表信息的反射查询中添加了relkind='p'。
- en: See also
  id: totrans-1301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Added basic reflection support for PostgreSQL partitioned tables](migration_13.html#change-4237)'
  id: totrans-1302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为PostgreSQL分区表添加了基本的反射支持](migration_13.html#change-4237)'
- en: 'References: [#4237](https://www.sqlalchemy.org/trac/ticket/4237)'
  id: totrans-1303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4237](https://www.sqlalchemy.org/trac/ticket/4237)
- en: mysql
  id: totrans-1304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [特性]**'
- en: Support added for the “WITH PARSER” syntax of CREATE FULLTEXT INDEX in MySQL,
    using the `mysql_with_parser` keyword argument. Reflection is also supported,
    which accommodates MySQL’s special comment format for reporting on this option
    as well. Additionally, the “FULLTEXT” and “SPATIAL” index prefixes are now reflected
    back into the `mysql_prefix` index option.
  id: totrans-1306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL中增加了对CREATE FULLTEXT INDEX的“WITH PARSER”语法的支持，使用`mysql_with_parser`关键字参数。还支持了反射，以适应MySQL的特殊注释格式，用于报告此选项。另外，“FULLTEXT”和“SPATIAL”索引前缀现在也反映到`mysql_prefix`索引选项中。
- en: 'References: [#4219](https://www.sqlalchemy.org/trac/ticket/4219)'
  id: totrans-1307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4219](https://www.sqlalchemy.org/trac/ticket/4219)
- en: '**[mysql] [feature]**'
  id: totrans-1308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [特性]**'
- en: Added support for the parameters in an ON DUPLICATE KEY UPDATE statement on
    MySQL to be ordered, since parameter order in a MySQL UPDATE clause is significant,
    in a similar manner as that described at [Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates).
    Pull request courtesy Maxim Bublis.
  id: totrans-1309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对MySQL中ON DUPLICATE KEY UPDATE语句中参数的排序支持，因为MySQL UPDATE子句中的参数顺序是有意义的，类似于[参数有序更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates)中描述的方式。感谢Maxim
    Bublis的拉取请求。
- en: See also
  id: totrans-1310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Control of parameter ordering within ON DUPLICATE KEY UPDATE](migration_13.html#change-mysql-ondupordering)'
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ON DUPLICATE KEY UPDATE中参数排序的控制](migration_13.html#change-mysql-ondupordering)'
- en: '**[mysql] [feature]**'
  id: totrans-1312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [特性]**'
- en: The “pre-ping” feature of the connection pool now uses the `ping()` method of
    the DBAPI connection in the case of mysqlclient, PyMySQL and mysql-connector-python.
    Pull request courtesy Maxim Bublis.
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池的“预连接”特性现在在mysqlclient、PyMySQL和mysql-connector-python的情况下使用DBAPI连接的`ping()`方法。感谢Maxim
    Bublis的拉取请求。
- en: See also
  id: totrans-1314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Protocol-level ping now used for pre-ping](migration_13.html#change-mysql-ping)'
  id: totrans-1315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[预先使用协议级 ping 进行预先 ping](migration_13.html#change-mysql-ping)'
- en: sqlite
  id: totrans-1316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-1317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for SQLite’s json functionality via the new SQLite implementation
    for [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON"),
    [`JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON "sqlalchemy.dialects.sqlite.JSON").
    The name used for the type is `JSON`, following an example found at SQLite’s own
    documentation. Pull request courtesy Ilja Everilä.
  id: totrans-1318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的 SQLite 实现支持 SQLite 的 JSON 功能，使用了[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")，[`JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON")。该类型的名称为 `JSON`，遵循了 SQLite 文档中的示例。感谢 Ilja Everilä
    提供的拉取请求。
- en: See also
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for SQLite JSON Added](migration_13.html#change-3850)'
  id: totrans-1320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加对 SQLite JSON 的支持](migration_13.html#change-3850)'
- en: 'References: [#3850](https://www.sqlalchemy.org/trac/ticket/3850)'
  id: totrans-1321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3850](https://www.sqlalchemy.org/trac/ticket/3850)
- en: '**[sqlite] [feature]**'
  id: totrans-1322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Implemented the SQLite `ON CONFLICT` clause as understood at the DDL level,
    e.g. for primary key, unique, and CHECK constraints as well as specified on a
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to satisfy inline primary key and NOT NULL. Pull request courtesy Denis Kataev.
  id: totrans-1323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了 SQLite 中 `ON CONFLICT` 语句在 DDL 级别的理解，例如用于主键、唯一键和 CHECK 约束以及在 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 上指定的用于满足内联主键和 NOT NULL。感谢 Denis Kataev 提供的拉取请求。
- en: See also
  id: totrans-1324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for SQLite ON CONFLICT in constraints added](migration_13.html#change-4360)'
  id: totrans-1325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加了对 SQLite 中 ON CONFLICT 的约束的支持](migration_13.html#change-4360)'
- en: 'References: [#4360](https://www.sqlalchemy.org/trac/ticket/4360)'
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4360](https://www.sqlalchemy.org/trac/ticket/4360)
- en: mssql
  id: totrans-1327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-1328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added `fast_executemany=True` parameter to the SQL Server pyodbc dialect, which
    enables use of pyodbc’s new performance feature of the same name when using Microsoft
    ODBC drivers.
  id: totrans-1329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQL Server pyodbc 方言中添加了 `fast_executemany=True` 参数，启用了 pyodbc 的新性能特性，当使用
    Microsoft ODBC 驱动程序时可以使用相同的名称。
- en: See also
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for pyodbc fast_executemany](migration_13.html#change-4158)'
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加对 pyodbc fast_executemany 的支持](migration_13.html#change-4158)'
- en: 'References: [#4158](https://www.sqlalchemy.org/trac/ticket/4158)'
  id: totrans-1332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4158](https://www.sqlalchemy.org/trac/ticket/4158)
- en: '**[mssql] [bug]**'
  id: totrans-1333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Deprecated the use of [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with SQL Server in order to affect the “start” and
    “increment” of the IDENTITY value, in favor of new parameters `mssql_identity_start`
    and `mssql_identity_increment` which set these parameters directly. [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") will be used to generate real `CREATE SEQUENCE`
    DDL with SQL Server in a future release.
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 废弃了在 SQL Server 中使用 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 来影响 IDENTITY 值的“开始”和“增量”的用法，而是使用新参数 `mssql_identity_start`
    和 `mssql_identity_increment` 直接设置这些参数。在未来的版本中，[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 将用于生成真正的 `CREATE SEQUENCE` DDL 与 SQL Server。
- en: See also
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New parameters to affect IDENTITY start and increment, use of Sequence deprecated](migration_13.html#change-4362)'
  id: totrans-1336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新参数以影响 IDENTITY 的开始和增量，使用 Sequence 废弃](migration_13.html#change-4362)'
- en: 'References: [#4362](https://www.sqlalchemy.org/trac/ticket/4362)'
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4362](https://www.sqlalchemy.org/trac/ticket/4362)
- en: oracle
  id: totrans-1338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-1339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new event currently used only by the cx_Oracle dialect, `DialectEvents.setiputsizes()`.
    The event passes a dictionary of [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects to DBAPI-specific type objects
    that will be passed, after conversion to parameter names, to the cx_Oracle `cursor.setinputsizes()`
    method. This allows both visibility into the setinputsizes process as well as
    the ability to alter the behavior of what datatypes are passed to this method.
  id: totrans-1340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的事件，目前仅由 cx_Oracle 方言使用，`DialectEvents.setiputsizes()`。该事件将一个 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象的字典传递给特定于 DBAPI 的类型对象，这些对象在转换为参数名称后将传递给
    cx_Oracle 的 `cursor.setinputsizes()` 方法。这允许查看 setinputsizes 过程以及修改传递给此方法的数据类型的行为。
- en: See also
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  id: totrans-1342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 setinputsizes 实现对 cx_Oracle 数据绑定性能的精细控制](../dialects/oracle.html#cx-oracle-setinputsizes)'
- en: 'This change is also **backported** to: 1.2.9'
  id: totrans-1343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯到**：1.2.9
- en: 'References: [#4290](https://www.sqlalchemy.org/trac/ticket/4290)'
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4290](https://www.sqlalchemy.org/trac/ticket/4290)
- en: '**[oracle] [bug]**'
  id: totrans-1345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Updated the parameters that can be sent to the cx_Oracle DBAPI to both allow
    for all current parameters as well as for future parameters not added yet. In
    addition, removed unused parameters that were deprecated in version 1.2, and additionally
    we are now defaulting “threaded” to False.
  id: totrans-1346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了可以发送到cx_Oracle DBAPI的参数，允许所有当前参数以及尚未添加的未来参数。此外，删除了在1.2版本中已弃用的未使用参数，并且现在我们将“threaded”默认设置为False。
- en: See also
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[cx_Oracle connect arguments modernized, deprecated parameters removed](migration_13.html#change-4369)'
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle连接参数现代化，已弃用的参数已移除](migration_13.html#change-4369)'
- en: 'References: [#4369](https://www.sqlalchemy.org/trac/ticket/4369)'
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4369](https://www.sqlalchemy.org/trac/ticket/4369)
- en: '**[oracle] [bug]**'
  id: totrans-1350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle dialect will no longer use the NCHAR/NCLOB datatypes represent generic
    unicode strings or clob fields in conjunction with [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") and [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") unless the flag `use_nchar_for_unicode=True` is
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    - this includes CREATE TABLE behavior as well as `setinputsizes()` for bound parameters.
    On the read side, automatic Unicode conversion under Python 2 has been added to
    CHAR/VARCHAR/CLOB result rows, to match the behavior of cx_Oracle under Python
    3\. In order to mitigate the performance hit under Python 2, SQLAlchemy’s very
    performant (when C extensions are built) native Unicode handlers are used under
    Python 2.
  id: totrans-1351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言将不再使用NCHAR/NCLOB数据类型来表示通用的Unicode字符串或clob字段，除非在[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")中传递了标志`use_nchar_for_unicode=True` - 这包括CREATE TABLE行为以及绑定参数的`setinputsizes()`。在读取方面，在Python
    2下已经添加了CHAR/VARCHAR/CLOB结果行的自动Unicode转换，以匹配Python 3下cx_Oracle的行为。为了减轻Python 2下的性能损失，SQLAlchemy在Python
    2下使用非常高效（当构建了C扩展时）的本地Unicode处理程序。
- en: See also
  id: totrans-1352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[National char datatypes de-emphasized for generic unicode, re-enabled with
    option](migration_13.html#change-4242)'
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通用Unicode取消强调的国家字符数据类型，通过选项重新启用](migration_13.html#change-4242)'
- en: 'References: [#4242](https://www.sqlalchemy.org/trac/ticket/4242)'
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4242](https://www.sqlalchemy.org/trac/ticket/4242)
- en: misc
  id: totrans-1355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-1356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added new attribute [`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from") which is populated with an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") that is using this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in order to lazy load a relationship. The rationale for
    this is that it serves as a hint for the horizontal sharding feature to use, such
    that the identity token of the state can be used as the default identity token
    to use for the query within id_chooser().
  id: totrans-1357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新属性[`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from")，其中填充了一个使用此[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")来延迟加载关系的[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。这样做的理由是它作为水平分片功能的提示，以便使用状态的标识令牌作为查询中要使用的默认标识令牌在id_chooser()中使用。
- en: 'This change is also **backported** to: 1.2.9'
  id: totrans-1358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.2.9
- en: 'References: [#4243](https://www.sqlalchemy.org/trac/ticket/4243)'
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4243](https://www.sqlalchemy.org/trac/ticket/4243)
- en: '**[feature] [ext]**'
  id: totrans-1360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added new feature [`BakedQuery.to_query()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query"), which allows for a clean way of using
    one [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") as a subquery inside of another [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") without needing to refer explicitly to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-1361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`BakedQuery.to_query()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query")，允许以干净的方式在另一个[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")内使用一个[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")作为子查询，而无需显式引用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: 'References: [#4318](https://www.sqlalchemy.org/trac/ticket/4318)'
  id: totrans-1362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4318](https://www.sqlalchemy.org/trac/ticket/4318)
- en: '**[feature] [ext]**'
  id: totrans-1363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: The [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") now has standard column comparison
    operations such as [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") and [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") available when the target
    attribute is a plain column - the EXISTS expression that joins to the target table
    is rendered as usual, but the column expression is then use within the WHERE criteria
    of the EXISTS. Note that this alters the behavior of the `.contains()` method
    on the association proxy to make use of [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") when used on a column-based
    attribute.
  id: totrans-1364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当目标属性是普通列时，[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")现在具有标准列比较操作，例如[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")和[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") - 与目标表连接的EXISTS表达式通常呈现，但列表达式然后在EXISTS的WHERE条件中使用。请注意，这会更改关联代理上的`.contains()`方法的行为，使其在基于列的属性上使用[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。
- en: See also
  id: totrans-1365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[AssociationProxy now provides standard column operators for a column-oriented
    target](migration_13.html#change-4351)'
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理现在为基于列的目标提供标准列操作符](migration_13.html#change-4351)'
- en: 'References: [#4351](https://www.sqlalchemy.org/trac/ticket/4351)'
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4351](https://www.sqlalchemy.org/trac/ticket/4351)
- en: '**[feature] [ext]**'
  id: totrans-1368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added support for bulk [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") to the [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") class within the horizontal sharding
    extension. This also adds an additional expansion hook to the bulk update/delete
    methods `Query._execute_crud()`.
  id: totrans-1369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在水平分片扩展中，对[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")类添加了对批量[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")的支持。这还为批量更新/删除方法`Query._execute_crud()`添加了额外的扩展钩子。
- en: See also
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Horizontal Sharding extension supports bulk update and delete methods](migration_13.html#change-4196)'
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[水平分片扩展支持批量更新和删除方法](migration_13.html#change-4196)'
- en: 'References: [#4196](https://www.sqlalchemy.org/trac/ticket/4196)'
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4196](https://www.sqlalchemy.org/trac/ticket/4196)
- en: '**[bug] [ext]**'
  id: totrans-1373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Reworked [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") to store state that’s specific
    to a parent class in a separate object, so that a single [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") can serve for multiple parent
    classes, as is intrinsic to inheritance, without any ambiguity in the state returned
    by it. A new method [`AssociationProxy.for_class()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class") is added to allow
    inspection of class-specific state.
  id: totrans-1374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")，以在单独的对象中存储特定于父类的状态，这样一个[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")可以为多个父类提供服务，这是继承所固有的，而且不会有任何模糊性。添加了一个新方法[`AssociationProxy.for_class()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class")，允许检查特定于类的状态。
- en: See also
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[AssociationProxy stores class-specific state on a per-class basis](migration_13.html#change-3423)'
  id: totrans-1376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理在每个类上存储特定于类的状态](migration_13.html#change-3423)'
- en: 'References: [#3423](https://www.sqlalchemy.org/trac/ticket/3423)'
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3423](https://www.sqlalchemy.org/trac/ticket/3423)
- en: '**[bug] [ext]**'
  id: totrans-1378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: The long-standing behavior of the association proxy collection maintaining only
    a weak reference to the parent object is reverted; the proxy will now maintain
    a strong reference to the parent for as long as the proxy collection itself is
    also in memory, eliminating the “stale association proxy” error. This change is
    being made on an experimental basis to see if any use cases arise where it causes
    side effects.
  id: totrans-1379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理集合的长期行为已经改变，现在代理将保持对父对象的强引用，只要代理集合本身也在内存中，就可以消除“陈旧的关联代理”错误。这一变更是基于实验性质进行的，以查看是否会出现任何导致副作用的用例。
- en: See also
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Features and Improvements - Core](migration_13.html#change-4268)'
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新功能和改进 - 核心](migration_13.html#change-4268)'
- en: 'References: [#4268](https://www.sqlalchemy.org/trac/ticket/4268)'
  id: totrans-1382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4268](https://www.sqlalchemy.org/trac/ticket/4268)
- en: '**[bug] [ext]**'
  id: totrans-1383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed multiple issues regarding de-association of scalar objects with the association
    proxy. `del` now works, and additionally a new flag [`AssociationProxy.cascade_scalar_deletes`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") is added, which when set to
    True indicates that setting a scalar attribute to `None` or deleting via `del`
    will also set the source association to `None`.
  id: totrans-1384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理与标量对象的解除关联的多个问题。现在`del`可以正常工作，另外还添加了一个新标志[`AssociationProxy.cascade_scalar_deletes`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy")，当设置为True时，表示将标量属性设置为`None`或通过`del`删除也会将源关联设置为`None`。
- en: See also
  id: totrans-1385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Association proxy has new cascade_scalar_deletes flag](migration_13.html#change-4308)'
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理有新的cascade_scalar_deletes标志](migration_13.html#change-4308)'
- en: 'References: [#4308](https://www.sqlalchemy.org/trac/ticket/4308)'
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4308](https://www.sqlalchemy.org/trac/ticket/4308)
- en: 1.3.25
  id: totrans-1388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.25
- en: no release date
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: orm
  id: totrans-1390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue in [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") when used with persistent objects
    which would fail to track the primary key of mappings where the column name of
    the primary key were different than the attribute name.
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")与持久对象一起使用时的问题，其中会无法跟踪主键映射的主键，其中主键列名与属性名不同。
- en: 'References: [#6392](https://www.sqlalchemy.org/trac/ticket/6392)'
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6392](https://www.sqlalchemy.org/trac/ticket/6392)
- en: schema
  id: totrans-1394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-1395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: The [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object now raises an informative error message if it is instantiated without passing
    at least the [`Table.name`](../core/metadata.html#sqlalchemy.schema.Table.params.name
    "sqlalchemy.schema.Table") and [`Table.metadata`](../core/metadata.html#sqlalchemy.schema.Table.params.metadata
    "sqlalchemy.schema.Table") arguments positionally. Previously, if these were passed
    as keyword arguments, the object would silently fail to initialize correctly.
  id: totrans-1396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未在至少通过参数传递[`Table.name`](../core/metadata.html#sqlalchemy.schema.Table.params.name
    "sqlalchemy.schema.Table")和[`Table.metadata`](../core/metadata.html#sqlalchemy.schema.Table.params.metadata
    "sqlalchemy.schema.Table")实例化[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，则会引发一个信息性错误消息。以前，如果这些是作为关键字参数传递的，则该对象将无声地初始化失败。
- en: 'References: [#6135](https://www.sqlalchemy.org/trac/ticket/6135)'
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6135](https://www.sqlalchemy.org/trac/ticket/6135)
- en: postgresql
  id: totrans-1398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-1399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误] [回归]**'
- en: Fixed regression caused by [#6023](https://www.sqlalchemy.org/trac/ticket/6023)
    where the PostgreSQL cast operator applied to elements within an [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") when using psycopg2 would fail to use the correct type
    in the case that the datatype were also embedded within an instance of the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") adapter.
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#6023](https://www.sqlalchemy.org/trac/ticket/6023)引起的回归，当使用psycopg2时，PostgreSQL
    cast运算符应用于[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")中的元素时，如果数据类型也嵌入到[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")适配器的实例中，则会失败使用正确的类型。
- en: Additionally, repairs support for the correct CREATE TYPE to be emitted when
    using a `Variant(ARRAY(some_schema_type))`.
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，修复了在使用`Variant(ARRAY(some_schema_type))`时发出正确的CREATE TYPE的支持。
- en: 'References: [#6182](https://www.sqlalchemy.org/trac/ticket/6182)'
  id: totrans-1402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6182](https://www.sqlalchemy.org/trac/ticket/6182)
- en: mysql
  id: totrans-1403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mariadb]**'
  id: totrans-1404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误] [mariadb]**'
- en: Fixes to accommodate for the MariaDB 10.6 series, including backwards incompatible
    changes in both the mariadb-connector Python driver (supported on SQLAlchemy 1.4
    only) as well as the native 10.6 client libraries that are used automatically
    by the mysqlclient DBAPI (applies to both 1.3 and 1.4). The “utf8mb3” encoding
    symbol is now reported by these client libraries when the encoding is stated as
    “utf8”, leading to lookup and encoding errors within the MySQL dialect that does
    not expect this symbol. Updates to both the MySQL base library to accommodate
    for this utf8mb3 symbol being reported as well as to the test suite. Thanks to
    Georg Richter for support.
  id: totrans-1405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MariaDB 10.6系列的问题，包括mariadb-connector Python驱动程序（仅在SQLAlchemy 1.4上受支持）以及自动使用的本地10.6客户端库中的向后不兼容更改，mysqlclient
    DBAPI（适用于1.3和1.4）。当编码状态为“utf8”时，这些客户端库现在会报告“utf8mb3”编码符号，导致MySQL方言中的查找和编码错误，该方言不期望此符号。更新了MySQL基础库以适应报告此utf8mb3符号以及测试套件的更改。感谢Georg
    Richter的支持。
- en: 'References: [#7115](https://www.sqlalchemy.org/trac/ticket/7115), [#7136](https://www.sqlalchemy.org/trac/ticket/7136)'
  id: totrans-1406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7115](https://www.sqlalchemy.org/trac/ticket/7115), [#7136](https://www.sqlalchemy.org/trac/ticket/7136)
- en: sqlite
  id: totrans-1407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Add note regarding encryption-related pragmas for pysqlcipher passed in the
    url.
  id: totrans-1409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加有关传递给pysqlcipher的url的与加密相关的pragma的注意事项。
- en: 'References: [#6589](https://www.sqlalchemy.org/trac/ticket/6589)'
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6589](https://www.sqlalchemy.org/trac/ticket/6589)
- en: orm
  id: totrans-1411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue in [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") when used with persistent objects
    which would fail to track the primary key of mappings where the column name of
    the primary key were different than the attribute name.
  id: totrans-1413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与持久化对象一起使用时的[`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")中的问题，这些对象将无法跟踪列名与属性名不同的映射的主键。
- en: 'References: [#6392](https://www.sqlalchemy.org/trac/ticket/6392)'
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6392](https://www.sqlalchemy.org/trac/ticket/6392)
- en: schema
  id: totrans-1415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-1416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: The [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object now raises an informative error message if it is instantiated without passing
    at least the [`Table.name`](../core/metadata.html#sqlalchemy.schema.Table.params.name
    "sqlalchemy.schema.Table") and [`Table.metadata`](../core/metadata.html#sqlalchemy.schema.Table.params.metadata
    "sqlalchemy.schema.Table") arguments positionally. Previously, if these were passed
    as keyword arguments, the object would silently fail to initialize correctly.
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象在实例化时没有传递至少[`Table.name`](../core/metadata.html#sqlalchemy.schema.Table.params.name
    "sqlalchemy.schema.Table")和[`Table.metadata`](../core/metadata.html#sqlalchemy.schema.Table.params.metadata
    "sqlalchemy.schema.Table")参数，则现在会引发一个信息性错误消息。以前，如果这些参数作为关键字参数传递，对象将悄悄地无法正确初始化。
- en: 'References: [#6135](https://www.sqlalchemy.org/trac/ticket/6135)'
  id: totrans-1418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6135](https://www.sqlalchemy.org/trac/ticket/6135)
- en: postgresql
  id: totrans-1419
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-1420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed regression caused by [#6023](https://www.sqlalchemy.org/trac/ticket/6023)
    where the PostgreSQL cast operator applied to elements within an [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") when using psycopg2 would fail to use the correct type
    in the case that the datatype were also embedded within an instance of the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") adapter.
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#6023](https://www.sqlalchemy.org/trac/ticket/6023)引起的回归，当使用psycopg2时，将PostgreSQL
    cast运算符应用于[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")中的元素时，如果数据类型也嵌入在[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")适配器的实例中，将无法使用正确的类型。
- en: Additionally, repairs support for the correct CREATE TYPE to be emitted when
    using a `Variant(ARRAY(some_schema_type))`.
  id: totrans-1422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，修复了在使用`Variant(ARRAY(some_schema_type))`时发出正确的CREATE TYPE的支持。
- en: 'References: [#6182](https://www.sqlalchemy.org/trac/ticket/6182)'
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6182](https://www.sqlalchemy.org/trac/ticket/6182)
- en: mysql
  id: totrans-1424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mariadb]**'
  id: totrans-1425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mariadb]**'
- en: Fixes to accommodate for the MariaDB 10.6 series, including backwards incompatible
    changes in both the mariadb-connector Python driver (supported on SQLAlchemy 1.4
    only) as well as the native 10.6 client libraries that are used automatically
    by the mysqlclient DBAPI (applies to both 1.3 and 1.4). The “utf8mb3” encoding
    symbol is now reported by these client libraries when the encoding is stated as
    “utf8”, leading to lookup and encoding errors within the MySQL dialect that does
    not expect this symbol. Updates to both the MySQL base library to accommodate
    for this utf8mb3 symbol being reported as well as to the test suite. Thanks to
    Georg Richter for support.
  id: totrans-1426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了适应MariaDB 10.6系列的问题，包括mariadb-connector Python驱动程序（仅支持SQLAlchemy 1.4）和自动使用的mysqlclient
    DBAPI中的本机10.6客户端库中的不兼容更改。当编码状态为“utf8”时，这些客户端库现在报告“utf8mb3”编码符号，导致MySQL方言中的查找和编码错误，该方言不期望此符号。更新了MySQL基本库以适应此utf8mb3符号的报告以及测试套件。感谢Georg
    Richter的支持。
- en: 'References: [#7115](https://www.sqlalchemy.org/trac/ticket/7115), [#7136](https://www.sqlalchemy.org/trac/ticket/7136)'
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7115](https://www.sqlalchemy.org/trac/ticket/7115), [#7136](https://www.sqlalchemy.org/trac/ticket/7136)
- en: sqlite
  id: totrans-1428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Add note regarding encryption-related pragmas for pysqlcipher passed in the
    url.
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在传递给pysqlcipher的url中添加有关加密相关的pragma的注释。
- en: 'References: [#6589](https://www.sqlalchemy.org/trac/ticket/6589)'
  id: totrans-1431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6589](https://www.sqlalchemy.org/trac/ticket/6589)
- en: 1.3.24
  id: totrans-1432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.24
- en: 'Released: March 30, 2021'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2021年3月30日
- en: orm
  id: totrans-1434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed very old warning that states that passive_deletes is not intended for
    many-to-one relationships. While it is likely that in many cases placing this
    parameter on a many-to-one relationship is not what was intended, there are use
    cases where delete cascade may want to be disallowed following from such a relationship.
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了非常古老的警告，指出passive_deletes不适用于多对一关系。虽然在许多情况下，在多对一关系上放置此参数可能不是预期的操作，但在某些情况下，可能希望在此类关系之后禁止删除级联。
- en: 'References: [#5983](https://www.sqlalchemy.org/trac/ticket/5983)'
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5983](https://www.sqlalchemy.org/trac/ticket/5983)
- en: '**[orm] [bug]**'
  id: totrans-1438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the process of joining two tables could fail if one of the
    tables had an unrelated, unresolvable foreign key constraint which would raise
    [`NoReferenceError`](../core/exceptions.html#sqlalchemy.exc.NoReferenceError "sqlalchemy.exc.NoReferenceError")
    within the join process, which nonetheless could be bypassed to allow the join
    to complete. The logic which tested the exception for significance within the
    process would make assumptions about the construct which would fail.
  id: totrans-1439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接两个表的过程可能失败的问题，如果其中一个表具有无关的、无法解决的外键约束，这将在连接过程中引发 [`NoReferenceError`](../core/exceptions.html#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError")，尽管可以绕过此异常以允许连接完成。在处理中测试异常重要性的逻辑会对构造做出可能失败的假设。
- en: 'References: [#5952](https://www.sqlalchemy.org/trac/ticket/5952)'
  id: totrans-1440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5952](https://www.sqlalchemy.org/trac/ticket/5952)
- en: '**[orm] [bug]**'
  id: totrans-1441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") construct could be placed into an invalid
    state when the parent object was already loaded, and then covered by a subsequent
    query, due to the composite properties’ refresh handler replacing the object with
    a new one not handled by the mutable extension.
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当父对象已经加载，并且后续查询覆盖时，[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 构造可能处于无效状态的问题，这是由于复合属性的刷新处理程序用新对象替换对象而不受可变扩展处理。
- en: 'References: [#6001](https://www.sqlalchemy.org/trac/ticket/6001)'
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6001](https://www.sqlalchemy.org/trac/ticket/6001)
- en: engine
  id: totrans-1444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where the “schema_translate_map” feature failed to be taken into account
    for the use case of direct execution of [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") objects such as sequences, which included
    the case where they were “pre-executed” in order to generate primary key values
    when implicit_returning was disabled.
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了“schema_translate_map”功能在直接执行 [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") 对象（例如序列）时未被考虑的问题，其中包括当禁用 implicit_returning
    时“预执行”它们以生成主键值的情况。 '
- en: 'References: [#5929](https://www.sqlalchemy.org/trac/ticket/5929)'
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5929](https://www.sqlalchemy.org/trac/ticket/5929)
- en: schema
  id: totrans-1448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-1449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed bug first introduced in as some combination of [#2892](https://www.sqlalchemy.org/trac/ticket/2892),
    [#2919](https://www.sqlalchemy.org/trac/ticket/2919) nnd [#3832](https://www.sqlalchemy.org/trac/ticket/3832)
    where the attachment events for a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would be doubled up against the “impl” class,
    if the “impl” were also a [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType"). The real-world case is any [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") against [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") would get a doubled [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") when the `create_constraint=True` flag is
    set.
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了首次引入的错误，即 [#2892](https://www.sqlalchemy.org/trac/ticket/2892)、[#2919](https://www.sqlalchemy.org/trac/ticket/2919)
    和 [#3832](https://www.sqlalchemy.org/trac/ticket/3832) 的某种组合，其中对于 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 的附加事件会与“impl”类重复，如果“impl”也是 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")。真实情况是，任何 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 与 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 或 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 相结合时，当设置 `create_constraint=True` 标志时，会获得重复的 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。
- en: 'References: [#6152](https://www.sqlalchemy.org/trac/ticket/6152)'
  id: totrans-1451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6152](https://www.sqlalchemy.org/trac/ticket/6152)
- en: '**[schema] [bug] [sqlite]**'
  id: totrans-1452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug] [sqlite]**'
- en: 'Fixed issue where the CHECK constraint generated by [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") or [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") would fail to render the naming convention correctly
    after the first compilation, due to an unintended change of state within the name
    given to the constraint. This issue was first introduced in 0.9 in the fix for
    issue #3067, and the fix revises the approach taken at that time which appears
    to have been more involved than what was needed.'
  id: totrans-1453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")或[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")生成的CHECK约束在第一次编译后无法正确呈现命名约定的问题，这是由于约束名称中的状态意外更改导致的。此问题首次出现在修复问题＃3067时引入的0.9版本中，修复了当时采取的方法，该方法似乎比实际需要的更复杂。
- en: 'References: [#6007](https://www.sqlalchemy.org/trac/ticket/6007)'
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6007](https://www.sqlalchemy.org/trac/ticket/6007)
- en: '**[schema] [bug]**'
  id: totrans-1455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Repaired / implemented support for primary key constraint naming conventions
    that use column names/keys/etc as part of the convention. In particular, this
    includes that the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object that’s automatically associated
    with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    will update its name as new primary key [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are added to the table and then to the constraint.
    Internal failure modes related to this constraint construction process including
    no columns present, no name present or blank name present are now accommodated.
  id: totrans-1456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复/实现了支持使用列名/键等作为约定一部分的主键约束命名约定。特别是，这包括[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")自动关联的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象将在向表添加新的主键[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象然后添加到约束时更新其名称。现在已经适应了与此约束构建过程相关的内部故障模式，包括没有列存在，没有名称存在或存在空名称。
- en: 'References: [#5919](https://www.sqlalchemy.org/trac/ticket/5919)'
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5919](https://www.sqlalchemy.org/trac/ticket/5919)
- en: '**[schema] [bug]**'
  id: totrans-1458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Adjusted the logic that emits DROP statements for [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") objects among the dropping of multiple tables, such
    that all [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    objects are dropped after all tables, even if the given [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is related only to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object and not directly to the overall [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object. The use case supports the same [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") being associated with more than one [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at a time.
  id: totrans-1459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了为[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")对象发出DROP语句的逻辑，使得所有[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象在所有表之后被删除，即使给定的[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")仅与[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象相关，而不直接与整体[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象相关。该用例支持同一[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")同时与多个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联。
- en: 'References: [#6071](https://www.sqlalchemy.org/trac/ticket/6071)'
  id: totrans-1460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6071](https://www.sqlalchemy.org/trac/ticket/6071)
- en: postgresql
  id: totrans-1461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where using [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") would return ARRAY(NullType)
    under certain conditions, interfering with the ability of the result object to
    return data correctly.
  id: totrans-1463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些条件下使用[`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by")会返回ARRAY(NullType)的问题，干扰了结果对象正确返回数据的能力。
- en: 'References: [#5989](https://www.sqlalchemy.org/trac/ticket/5989)'
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5989](https://www.sqlalchemy.org/trac/ticket/5989)
- en: '**[postgresql] [bug] [reflection]**'
  id: totrans-1465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [reflection]**'
- en: Fixed issue in PostgreSQL reflection where a column expressing “NOT NULL” will
    supersede the nullability of a corresponding domain.
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 反射中的问题，表达“NOT NULL”的列将取代对应域的可空性。
- en: 'References: [#6161](https://www.sqlalchemy.org/trac/ticket/6161)'
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6161](https://www.sqlalchemy.org/trac/ticket/6161)
- en: '**[postgresql] [bug] [types]**'
  id: totrans-1468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [types]**'
- en: Adjusted the psycopg2 dialect to emit an explicit PostgreSQL-style cast for
    bound parameters that contain ARRAY elements. This allows the full range of datatypes
    to function correctly within arrays. The asyncpg dialect already generated these
    internal casts in the final statement. This also includes support for array slice
    updates as well as the PostgreSQL-specific `ARRAY.contains()` method.
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 psycopg2 方言，使其对包含 ARRAY 元素的绑定参数发出明确的 PostgreSQL 样式转换。这允许在数组中正确使用全部范围的数据类型。asyncpg
    方言已在最终语句中生成了这些内部转换。这还包括对数组切片更新的支持以及 PostgreSQL 特有的 `ARRAY.contains()` 方法。
- en: 'References: [#6023](https://www.sqlalchemy.org/trac/ticket/6023)'
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6023](https://www.sqlalchemy.org/trac/ticket/6023)
- en: mssql
  id: totrans-1471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-1472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: Fixed issue regarding SQL Server reflection for older SQL Server 2005 version,
    a call to sp_columns would not proceed correctly without being prefixed with the
    EXEC keyword. This method is not used in current 1.4 series.
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了有关 SQL Server 反射的问题，针对较旧的 SQL Server 2005 版本，调用 sp_columns 如果不加 EXEC 关键字则无法正确执行。这种方法在当前的
    1.4 系列中不再使用。
- en: 'References: [#5921](https://www.sqlalchemy.org/trac/ticket/5921)'
  id: totrans-1474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5921](https://www.sqlalchemy.org/trac/ticket/5921)
- en: orm
  id: totrans-1475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed very old warning that states that passive_deletes is not intended for
    many-to-one relationships. While it is likely that in many cases placing this
    parameter on a many-to-one relationship is not what was intended, there are use
    cases where delete cascade may want to be disallowed following from such a relationship.
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了一个非常古老的警告，指出 passive_deletes 不适用于多对一关系。虽然在许多情况下在多对一关系上放置此参数可能不是预期的行为，但有一些用例希望在这样的关系之后不允许删除级联。
- en: 'References: [#5983](https://www.sqlalchemy.org/trac/ticket/5983)'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5983](https://www.sqlalchemy.org/trac/ticket/5983)
- en: '**[orm] [bug]**'
  id: totrans-1479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the process of joining two tables could fail if one of the
    tables had an unrelated, unresolvable foreign key constraint which would raise
    [`NoReferenceError`](../core/exceptions.html#sqlalchemy.exc.NoReferenceError "sqlalchemy.exc.NoReferenceError")
    within the join process, which nonetheless could be bypassed to allow the join
    to complete. The logic which tested the exception for significance within the
    process would make assumptions about the construct which would fail.
  id: totrans-1480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果两个表中的一个表具有无关、不可解析的外键约束，则连接两个表的过程可能会失败的问题。此外，如果在连接过程中引发了 [`NoReferenceError`](../core/exceptions.html#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError")，尽管可以绕过此错误完成连接，但测试过程中测试异常的逻辑将对结构进行假设，这些假设将失败。
- en: 'References: [#5952](https://www.sqlalchemy.org/trac/ticket/5952)'
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5952](https://www.sqlalchemy.org/trac/ticket/5952)
- en: '**[orm] [bug]**'
  id: totrans-1482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") construct could be placed into an invalid
    state when the parent object was already loaded, and then covered by a subsequent
    query, due to the composite properties’ refresh handler replacing the object with
    a new one not handled by the mutable extension.
  id: totrans-1483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当父对象已加载，然后被后续查询覆盖时，[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 结构可能处于无效状态的问题，因为复合属性的刷新处理程序会用不受可变扩展控制的新对象替换对象。
- en: 'References: [#6001](https://www.sqlalchemy.org/trac/ticket/6001)'
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6001](https://www.sqlalchemy.org/trac/ticket/6001)
- en: engine
  id: totrans-1485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where the “schema_translate_map” feature failed to be taken into account
    for the use case of direct execution of [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") objects such as sequences, which included
    the case where they were “pre-executed” in order to generate primary key values
    when implicit_returning was disabled.
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在直接执行 [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") 对象（比如序列）时，“schema_translate_map” 特性未被考虑进去，其中包括当隐式返回被禁用时“预执行”以生成主键值的情况。
- en: 'References: [#5929](https://www.sqlalchemy.org/trac/ticket/5929)'
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5929](https://www.sqlalchemy.org/trac/ticket/5929)
- en: schema
  id: totrans-1489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-1490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug first introduced in as some combination of [#2892](https://www.sqlalchemy.org/trac/ticket/2892),
    [#2919](https://www.sqlalchemy.org/trac/ticket/2919) nnd [#3832](https://www.sqlalchemy.org/trac/ticket/3832)
    where the attachment events for a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would be doubled up against the “impl” class,
    if the “impl” were also a [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType"). The real-world case is any [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") against [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") or [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") would get a doubled [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") when the `create_constraint=True` flag is
    set.
  id: totrans-1491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了首次引入的错误，可能是由[#2892](https://www.sqlalchemy.org/trac/ticket/2892)、[#2919](https://www.sqlalchemy.org/trac/ticket/2919)和[#3832](https://www.sqlalchemy.org/trac/ticket/3832)的某种组合引起的，其中[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的附加事件会对“impl”类重复，如果“impl”也是[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")。实际情况是，任何[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")与[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")或[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")相对时，当设置`create_constraint=True`标志时，将会获得一个重复的[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。
- en: 'References: [#6152](https://www.sqlalchemy.org/trac/ticket/6152)'
  id: totrans-1492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6152](https://www.sqlalchemy.org/trac/ticket/6152)
- en: '**[schema] [bug] [sqlite]**'
  id: totrans-1493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误] [sqlite]**'
- en: 'Fixed issue where the CHECK constraint generated by [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") or [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") would fail to render the naming convention correctly
    after the first compilation, due to an unintended change of state within the name
    given to the constraint. This issue was first introduced in 0.9 in the fix for
    issue #3067, and the fix revises the approach taken at that time which appears
    to have been more involved than what was needed.'
  id: totrans-1494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")或[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")生成的CHECK约束在第一次编译后无法正确呈现命名约定的问题，这是由于约束名称中的状态意外更改导致的。此问题首次在0.9中引入，修复了当时为解决问题＃3067而采取的方法，该方法似乎比实际需要的更复杂。
- en: 'References: [#6007](https://www.sqlalchemy.org/trac/ticket/6007)'
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6007](https://www.sqlalchemy.org/trac/ticket/6007)
- en: '**[schema] [bug]**'
  id: totrans-1496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Repaired / implemented support for primary key constraint naming conventions
    that use column names/keys/etc as part of the convention. In particular, this
    includes that the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object that’s automatically associated
    with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    will update its name as new primary key [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are added to the table and then to the constraint.
    Internal failure modes related to this constraint construction process including
    no columns present, no name present or blank name present are now accommodated.
  id: totrans-1497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复/实现了支持使用列名/键等作为约定的主键约束命名规范。特别是，这包括[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")自动关联的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象将在向表添加新的主键[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象后更新其名称，然后更新约束。现在已经适应了与此约束构建过程相关的内部故障模式，包括没有列存在、没有名称存在或空名称存在。
- en: 'References: [#5919](https://www.sqlalchemy.org/trac/ticket/5919)'
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5919](https://www.sqlalchemy.org/trac/ticket/5919)
- en: '**[schema] [bug]**'
  id: totrans-1499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Adjusted the logic that emits DROP statements for [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") objects among the dropping of multiple tables, such
    that all [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    objects are dropped after all tables, even if the given [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is related only to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object and not directly to the overall [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object. The use case supports the same [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") being associated with more than one [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at a time.
  id: totrans-1500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了发出[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")对象的DROP语句的逻辑，以便在删除多个表时，所有[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象都在所有表之后被删除，即使给定的[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")仅与一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象相关联，而不直接与整体[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象相关联。该用例支持同一[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")同时与多个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联。
- en: 'References: [#6071](https://www.sqlalchemy.org/trac/ticket/6071)'
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6071](https://www.sqlalchemy.org/trac/ticket/6071)
- en: postgresql
  id: totrans-1502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where using [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") would return ARRAY(NullType)
    under certain conditions, interfering with the ability of the result object to
    return data correctly.
  id: totrans-1504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些条件下使用[`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by")会返回ARRAY(NullType)的问题，干扰了结果对象正确返回数据的能力。
- en: 'References: [#5989](https://www.sqlalchemy.org/trac/ticket/5989)'
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5989](https://www.sqlalchemy.org/trac/ticket/5989)
- en: '**[postgresql] [bug] [reflection]**'
  id: totrans-1506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [reflection]**'
- en: Fixed issue in PostgreSQL reflection where a column expressing “NOT NULL” will
    supersede the nullability of a corresponding domain.
  id: totrans-1507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在PostgreSQL反射中，表达“NOT NULL”的列将取代相应域的可空性的问题。
- en: 'References: [#6161](https://www.sqlalchemy.org/trac/ticket/6161)'
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6161](https://www.sqlalchemy.org/trac/ticket/6161)
- en: '**[postgresql] [bug] [types]**'
  id: totrans-1509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [types]**'
- en: Adjusted the psycopg2 dialect to emit an explicit PostgreSQL-style cast for
    bound parameters that contain ARRAY elements. This allows the full range of datatypes
    to function correctly within arrays. The asyncpg dialect already generated these
    internal casts in the final statement. This also includes support for array slice
    updates as well as the PostgreSQL-specific `ARRAY.contains()` method.
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了psycopg2方言以发出包含ARRAY元素的绑定参数的显式PostgreSQL风格转换。这允许各种数据类型在数组中正确运行。asyncpg方言已在最终语句中生成了这些内部转换。这还包括对数组切片更新以及PostgreSQL特定的`ARRAY.contains()`方法的支持。
- en: 'References: [#6023](https://www.sqlalchemy.org/trac/ticket/6023)'
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6023](https://www.sqlalchemy.org/trac/ticket/6023)
- en: mssql
  id: totrans-1512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-1513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: Fixed issue regarding SQL Server reflection for older SQL Server 2005 version,
    a call to sp_columns would not proceed correctly without being prefixed with the
    EXEC keyword. This method is not used in current 1.4 series.
  id: totrans-1514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了有关旧版SQL Server 2005版本的SQL Server反射的问题，调用sp_columns时，如果没有使用EXEC关键字作为前缀，则无法正确进行。这种方法在当前的1.4系列中没有使用。
- en: 'References: [#5921](https://www.sqlalchemy.org/trac/ticket/5921)'
  id: totrans-1515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5921](https://www.sqlalchemy.org/trac/ticket/5921)
- en: 1.3.23
  id: totrans-1516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.23
- en: 'Released: February 1, 2021'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2021年2月1日
- en: sql
  id: totrans-1518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where making use of the [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method on a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") type would fail to take into account the dialect-specific
    mappings in use, due to a rule in [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that was instead attempting to check for chains
    of [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") instances.
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类型上使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 方法时未考虑到正在使用的特定方言映射的 bug，这是由于 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 中的规则尝试检查 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 实例链而导致的。
- en: 'References: [#5816](https://www.sqlalchemy.org/trac/ticket/5816)'
  id: totrans-1521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5816](https://www.sqlalchemy.org/trac/ticket/5816)
- en: postgresql
  id: totrans-1522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: For SQLAlchemy 1.3 only, setup.py pins pg8000 to a version lower than 1.16.6\.
    Version 1.16.6 and above is supported by SQLAlchemy 1.4\. Pull request courtesy
    Giuseppe Lumia.
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅适用于 SQLAlchemy 1.3，setup.py 将 pg8000 固定在低于 1.16.6 的版本。版本 1.16.6 及以上由 SQLAlchemy
    1.4 支持。感谢 Giuseppe Lumia 的拉取请求。
- en: 'References: [#5645](https://www.sqlalchemy.org/trac/ticket/5645)'
  id: totrans-1525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5645](https://www.sqlalchemy.org/trac/ticket/5645)
- en: '**[postgresql] [bug]**'
  id: totrans-1526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where using [`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") (called [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") in 1.3) in conjunction with a PostgreSQL
    [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") that made use of ad-hoc column
    expressions would fail to copy correctly.
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")（在1.3中称为[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")）与 PostgreSQL 的 [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 结合使用时，使用临时列表达式的情况下无法正确复制的问题。
- en: 'References: [#5850](https://www.sqlalchemy.org/trac/ticket/5850)'
  id: totrans-1528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5850](https://www.sqlalchemy.org/trac/ticket/5850)
- en: mysql
  id: totrans-1529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-1530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Casting to `FLOAT` is now supported in MySQL >= (8, 0, 17) and MariaDb >= (10,
    4, 5).
  id: totrans-1531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL >= (8, 0, 17) 和 MariaDb >= (10, 4, 5) 中现在支持转换为 `FLOAT`。
- en: 'References: [#5808](https://www.sqlalchemy.org/trac/ticket/5808)'
  id: totrans-1532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5808](https://www.sqlalchemy.org/trac/ticket/5808)
- en: '**[mysql] [bug] [reflection]**'
  id: totrans-1533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [reflection]**'
- en: Fixed bug where MySQL server default reflection would fail for numeric values
    with a negation symbol present.
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL 服务器默认反射对带有否定符号的数值失败的 bug。
- en: 'References: [#5860](https://www.sqlalchemy.org/trac/ticket/5860)'
  id: totrans-1535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5860](https://www.sqlalchemy.org/trac/ticket/5860)
- en: '**[mysql] [bug]**'
  id: totrans-1536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed long-lived bug in MySQL dialect where the maximum identifier length of
    255 was too long for names of all types of constraints, not just indexes, all
    of which have a size limit of 64\. As metadata naming conventions can create too-long
    names in this area, apply the limit to the identifier generator within the DDL
    compiler.
  id: totrans-1537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL 方言中长期存在的 bug，其中标识符长度的最大限制为 255 对于所有类型的约束名称都太长，不仅仅是索引，所有这些都有一个大小限制为
    64。由于元数据命名约定可能在此区域创建过长的名称，因此将限制应用于 DDL 编译器内的标识符生成器。
- en: 'References: [#5898](https://www.sqlalchemy.org/trac/ticket/5898)'
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5898](https://www.sqlalchemy.org/trac/ticket/5898)
- en: '**[mysql] [bug]**'
  id: totrans-1539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed deprecation warnings that arose as a result of the release of PyMySQL
    1.0, including deprecation warnings for the “db” and “passwd” parameters now replaced
    with “database” and “password”.
  id: totrans-1540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于 PyMySQL 1.0 发布而引起的弃用警告，包括“db”和“passwd”参数的弃用警告，现在替换为“database”和“password”。
- en: 'References: [#5821](https://www.sqlalchemy.org/trac/ticket/5821)'
  id: totrans-1541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5821](https://www.sqlalchemy.org/trac/ticket/5821)
- en: '**[mysql] [bug]**'
  id: totrans-1542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression from SQLAlchemy 1.3.20 caused by the fix for [#5462](https://www.sqlalchemy.org/trac/ticket/5462)
    which adds double-parenthesis for MySQL functional expressions in indexes, as
    is required by the backend, this inadvertently extended to include arbitrary [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expressions as well as Alembic’s internal textual
    component, which are required by Alembic for arbitrary index expressions which
    don’t imply double parenthesis. The check has been narrowed to include only binary/
    unary/functional expressions directly.
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLAlchemy 1.3.20中由于修复[#5462](https://www.sqlalchemy.org/trac/ticket/5462)而引起的Oracle方言中的回归，该修复为MySQL功能表达式在索引中添加双括号，后端所需，这无意中扩展到包括任意[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")表达式以及Alembic的内部文本组件，这些对于Alembic来说是需要的，用于不暗示双括号的任意索引表达式。检查已经缩小，仅包括直接的二元/一元/功能表达式。
- en: 'References: [#5800](https://www.sqlalchemy.org/trac/ticket/5800)'
  id: totrans-1544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5800](https://www.sqlalchemy.org/trac/ticket/5800)
- en: oracle
  id: totrans-1545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in Oracle dialect introduced by [#4894](https://www.sqlalchemy.org/trac/ticket/4894)
    in SQLAlchemy 1.3.11 where use of a SQL expression in RETURNING for an UPDATE
    would fail to compile, due to a check for “server_default” when an arbitrary SQL
    expression is not a column.
  id: totrans-1547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLAlchemy 1.3.11中由[#4894](https://www.sqlalchemy.org/trac/ticket/4894)引入的Oracle方言中的回归，其中在UPDATE的RETURNING中使用SQL表达式会因为在任意SQL表达式不是列时检查“server_default”而无法编译。
- en: 'References: [#5813](https://www.sqlalchemy.org/trac/ticket/5813)'
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5813](https://www.sqlalchemy.org/trac/ticket/5813)
- en: '**[oracle] [bug]**'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in Oracle dialect where retrieving a CLOB/BLOB column via [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") would fail as the LOB value would
    need to be read when returned; additionally, repaired support for retrieval of
    Unicode values via RETURNING under Python 2.
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的bug，通过[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")检索CLOB/BLOB列会失败，因为当返回时需要读取LOB值；此外，修复了在Python
    2下通过RETURNING检索Unicode值的支持。
- en: 'References: [#5812](https://www.sqlalchemy.org/trac/ticket/5812)'
  id: totrans-1551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5812](https://www.sqlalchemy.org/trac/ticket/5812)
- en: misc
  id: totrans-1552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-1553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue where the stringification that is sometimes called when attempting
    to generate the “key” for the `.c` collection on a selectable would fail if the
    column were an unlabeled custom SQL construct using the `sqlalchemy.ext.compiler`
    extension, and did not provide a default compilation form; while this seems like
    an unusual case, it can get invoked for some ORM scenarios such as when the expression
    is used in an “order by” in combination with joined eager loading. The issue is
    that the lack of a default compiler function was raising [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") and not [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError").
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在尝试为可选择的`.c`集合生成“key”时有时会调用的字符串化失败的问题，如果列是使用`sqlalchemy.ext.compiler`扩展的未标记的自定义SQL构造，并且没有提供默认编译形式；虽然这似乎是一个不寻常的情况，但在一些ORM场景中可能会调用它，比如当表达式与连接的急加载一起在“order
    by”中使用时。问题在于缺乏默认编译器函数会引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")而不是[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")。
- en: 'References: [#5836](https://www.sqlalchemy.org/trac/ticket/5836)'
  id: totrans-1555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5836](https://www.sqlalchemy.org/trac/ticket/5836)
- en: sql
  id: totrans-1556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where making use of the [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method on a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") type would fail to take into account the dialect-specific
    mappings in use, due to a rule in [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that was instead attempting to check for chains
    of [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") instances.
  id: totrans-1558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类型上使用[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法时存在的bug，由于[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")中的一条规则，它试图检查[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")实例链，而未考虑到正在使用的特定方言映射。
- en: 'References: [#5816](https://www.sqlalchemy.org/trac/ticket/5816)'
  id: totrans-1559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5816](https://www.sqlalchemy.org/trac/ticket/5816)
- en: postgresql
  id: totrans-1560
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: For SQLAlchemy 1.3 only, setup.py pins pg8000 to a version lower than 1.16.6\.
    Version 1.16.6 and above is supported by SQLAlchemy 1.4\. Pull request courtesy
    Giuseppe Lumia.
  id: totrans-1562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅适用于SQLAlchemy 1.3，setup.py将pg8000固定在低于1.16.6的版本。版本1.16.6及以上受SQLAlchemy 1.4支持。感谢Giuseppe
    Lumia的拉取请求。
- en: 'References: [#5645](https://www.sqlalchemy.org/trac/ticket/5645)'
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5645](https://www.sqlalchemy.org/trac/ticket/5645)
- en: '**[postgresql] [bug]**'
  id: totrans-1564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where using [`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") (called [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") in 1.3) in conjunction with a PostgreSQL
    [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") that made use of ad-hoc column
    expressions would fail to copy correctly.
  id: totrans-1565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与使用临时列表达式的PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")一起使用[`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")（在1.3中称为[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")）时无法正确复制的问题。
- en: 'References: [#5850](https://www.sqlalchemy.org/trac/ticket/5850)'
  id: totrans-1566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5850](https://www.sqlalchemy.org/trac/ticket/5850)
- en: mysql
  id: totrans-1567
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-1568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Casting to `FLOAT` is now supported in MySQL >= (8, 0, 17) and MariaDb >= (10,
    4, 5).
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在MySQL >= (8, 0, 17)和MariaDb >= (10, 4, 5)中支持转换为`FLOAT`。
- en: 'References: [#5808](https://www.sqlalchemy.org/trac/ticket/5808)'
  id: totrans-1570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5808](https://www.sqlalchemy.org/trac/ticket/5808)
- en: '**[mysql] [bug] [reflection]**'
  id: totrans-1571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [reflection]**'
- en: Fixed bug where MySQL server default reflection would fail for numeric values
    with a negation symbol present.
  id: totrans-1572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL服务器默认反射对带有否定符号的数值失败的bug。
- en: 'References: [#5860](https://www.sqlalchemy.org/trac/ticket/5860)'
  id: totrans-1573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5860](https://www.sqlalchemy.org/trac/ticket/5860)
- en: '**[mysql] [bug]**'
  id: totrans-1574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed long-lived bug in MySQL dialect where the maximum identifier length of
    255 was too long for names of all types of constraints, not just indexes, all
    of which have a size limit of 64\. As metadata naming conventions can create too-long
    names in this area, apply the limit to the identifier generator within the DDL
    compiler.
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL方言中存在已久的bug，其中255的最大标识符长度对于所有类型的约束名称都太长，而不仅仅是索引，所有这些都有64的大小限制。由于元数据命名约定可能在此区域创建过长的名称，因此将限制应用于DDL编译器内的标识符生成器。
- en: 'References: [#5898](https://www.sqlalchemy.org/trac/ticket/5898)'
  id: totrans-1576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5898](https://www.sqlalchemy.org/trac/ticket/5898)
- en: '**[mysql] [bug]**'
  id: totrans-1577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed deprecation warnings that arose as a result of the release of PyMySQL
    1.0, including deprecation warnings for the “db” and “passwd” parameters now replaced
    with “database” and “password”.
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于PyMySQL 1.0发布而引起的弃用警告，包括“db”和“passwd”参数的弃用警告，现已替换为“database”和“password”。
- en: 'References: [#5821](https://www.sqlalchemy.org/trac/ticket/5821)'
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5821](https://www.sqlalchemy.org/trac/ticket/5821)
- en: '**[mysql] [bug]**'
  id: totrans-1580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression from SQLAlchemy 1.3.20 caused by the fix for [#5462](https://www.sqlalchemy.org/trac/ticket/5462)
    which adds double-parenthesis for MySQL functional expressions in indexes, as
    is required by the backend, this inadvertently extended to include arbitrary [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expressions as well as Alembic’s internal textual
    component, which are required by Alembic for arbitrary index expressions which
    don’t imply double parenthesis. The check has been narrowed to include only binary/
    unary/functional expressions directly.
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复了[#5462](https://www.sqlalchemy.org/trac/ticket/5462)导致的SQLAlchemy 1.3.20中的回归问题，该修复为MySQL功能表达式在索引中添加了双括号，后端需要这样做，这无意中扩展到了包括任意[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")表达式以及Alembic的内部文本组件，这些对于Alembic来说是必需的，用于不暗示双括号的任意索引表达式。检查已经缩小，只包括直接的二元/一元/功能表达式。
- en: 'References: [#5800](https://www.sqlalchemy.org/trac/ticket/5800)'
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#5800](https://www.sqlalchemy.org/trac/ticket/5800)
- en: oracle
  id: totrans-1583
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in Oracle dialect introduced by [#4894](https://www.sqlalchemy.org/trac/ticket/4894)
    in SQLAlchemy 1.3.11 where use of a SQL expression in RETURNING for an UPDATE
    would fail to compile, due to a check for “server_default” when an arbitrary SQL
    expression is not a column.
  id: totrans-1585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在SQLAlchemy 1.3.11中由[#4894](https://www.sqlalchemy.org/trac/ticket/4894)引入的Oracle方言中的回归问题，其中在UPDATE的RETURNING中使用SQL表达式会因为在任意SQL表达式不是列时检查“server_default”而无法编译。
- en: 'References: [#5813](https://www.sqlalchemy.org/trac/ticket/5813)'
  id: totrans-1586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#5813](https://www.sqlalchemy.org/trac/ticket/5813)
- en: '**[oracle] [bug]**'
  id: totrans-1587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in Oracle dialect where retrieving a CLOB/BLOB column via [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") would fail as the LOB value would
    need to be read when returned; additionally, repaired support for retrieval of
    Unicode values via RETURNING under Python 2.
  id: totrans-1588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的一个错误，即通过[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")检索CLOB/BLOB列会失败，因为当返回时需要读取LOB值；此外，修复了在Python
    2下通过RETURNING检索Unicode值的支持。
- en: 'References: [#5812](https://www.sqlalchemy.org/trac/ticket/5812)'
  id: totrans-1589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#5812](https://www.sqlalchemy.org/trac/ticket/5812)
- en: misc
  id: totrans-1590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue where the stringification that is sometimes called when attempting
    to generate the “key” for the `.c` collection on a selectable would fail if the
    column were an unlabeled custom SQL construct using the `sqlalchemy.ext.compiler`
    extension, and did not provide a default compilation form; while this seems like
    an unusual case, it can get invoked for some ORM scenarios such as when the expression
    is used in an “order by” in combination with joined eager loading. The issue is
    that the lack of a default compiler function was raising [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") and not [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError").
  id: totrans-1592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在尝试为可选择的`.c`集合生成“key”时有时会调用字符串化的问题，如果列是使用`sqlalchemy.ext.compiler`扩展的未标记的自定义SQL构造，并且没有提供默认编译形式，则会失败；虽然这似乎是一个不寻常的情况，但在一些ORM场景中可能会调用它，比如在“order
    by”中与联接的急加载一起使用表达式时。问题在于缺少默认编译器函数会引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")而不是[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")。
- en: 'References: [#5836](https://www.sqlalchemy.org/trac/ticket/5836)'
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#5836](https://www.sqlalchemy.org/trac/ticket/5836)
- en: 1.3.22
  id: totrans-1594
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.22
- en: 'Released: December 18, 2020'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年12月18日
- en: oracle
  id: totrans-1596
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression which occurred due to [#5755](https://www.sqlalchemy.org/trac/ticket/5755)
    which implemented isolation level support for Oracle. It has been reported that
    many Oracle accounts don’t actually have permission to query the `v$transaction`
    view so this feature has been altered to gracefully fallback when it fails upon
    database connect, where the dialect will assume “READ COMMITTED” is the default
    isolation level as was the case prior to SQLAlchemy 1.3.21. However, explicit
    use of the [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") method must now necessarily
    raise an exception, as Oracle databases with this restriction explicitly disallow
    the user from reading the current isolation level.
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#5755](https://www.sqlalchemy.org/trac/ticket/5755)引起的回归，该回归实现了对Oracle的隔离级别支持。据报道，许多Oracle帐户实际上没有权限查询`v$transaction`视图，因此，当在数据库连接失败时，此功能已被修改为优雅地回退，其中方言将假定“READ
    COMMITTED”是默认的隔离级别，就像在SQLAlchemy 1.3.21之前的情况一样。但是，现在必须明确使用[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")方法引发异常，因为具有此限制的Oracle数据库明确禁止用户读取当前隔离级别。
- en: 'References: [#5784](https://www.sqlalchemy.org/trac/ticket/5784)'
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5784](https://www.sqlalchemy.org/trac/ticket/5784)
- en: oracle
  id: totrans-1600
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression which occurred due to [#5755](https://www.sqlalchemy.org/trac/ticket/5755)
    which implemented isolation level support for Oracle. It has been reported that
    many Oracle accounts don’t actually have permission to query the `v$transaction`
    view so this feature has been altered to gracefully fallback when it fails upon
    database connect, where the dialect will assume “READ COMMITTED” is the default
    isolation level as was the case prior to SQLAlchemy 1.3.21. However, explicit
    use of the [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") method must now necessarily
    raise an exception, as Oracle databases with this restriction explicitly disallow
    the user from reading the current isolation level.
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#5755](https://www.sqlalchemy.org/trac/ticket/5755)引起的回归，该回归实现了对Oracle的隔离级别支持。据报道，许多Oracle帐户实际上没有权限查询`v$transaction`视图，因此，当在数据库连接失败时，此功能已被修改为优雅地回退，其中方言将假定“READ
    COMMITTED”是默认的隔离级别，就像在SQLAlchemy 1.3.21之前的情况一样。但是，现在必须明确使用[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")方法引发异常，因为具有此限制的Oracle数据库明确禁止用户读取当前隔离级别。
- en: 'References: [#5784](https://www.sqlalchemy.org/trac/ticket/5784)'
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5784](https://www.sqlalchemy.org/trac/ticket/5784)
- en: 1.3.21
  id: totrans-1604
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.21
- en: 'Released: December 17, 2020'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年12月17日
- en: orm
  id: totrans-1606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a comprehensive check and an informative error message for the case where
    a mapped class, or a string mapped class name, is passed to [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship"). This is an extremely common error which warrants
    a clear message.
  id: totrans-1608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于传递给[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")的映射类或字符串映射类名的情况，添加了全面的检查和信息丰富的错误消息。这是一个极其常见的错误，需要清晰的消息。
- en: Additionally, added a new rule to the class registry resolution such that with
    regards to the [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") parameter, if a mapped class and its table are
    of the identical string name, the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will be favored when resolving this parameter. In all
    other cases, the class continues to be favored if a class and table share the
    identical name.
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，针对[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")参数，添加了一个新的规则到类注册表解析中，如果一个映射类及其表的字符串名称相同，则优先考虑[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")解析该参数。在所有其他情况下，如果类和表共享相同的名称，则仍然优先考虑类。
- en: 'References: [#5774](https://www.sqlalchemy.org/trac/ticket/5774)'
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5774](https://www.sqlalchemy.org/trac/ticket/5774)
- en: '**[orm] [bug]**'
  id: totrans-1611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") where objects in the `_ormsession.Session` that
    were already expired would be unnecessarily SELECTed individually when they were
    refreshed by the “evaluate”synchronize strategy.
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")中的一个 bug，即当`_ormsession.Session`中的对象已经过期时，通过“evaluate”同步策略刷新时会不必要地单独进行
    SELECT 操作。
- en: 'References: [#5664](https://www.sqlalchemy.org/trac/ticket/5664)'
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5664](https://www.sqlalchemy.org/trac/ticket/5664)
- en: '**[orm] [bug]**'
  id: totrans-1614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving the `restore_load_context` option of ORM events such as
    [`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") such that the flag would not be carried
    along to subclasses which were mapped after the event handler were first established.
  id: totrans-1615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及 ORM 事件的`restore_load_context`选项（例如[`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")）的 bug，使得标志不会传递给在首次建立事件处理程序之后映射的子类。
- en: 'References: [#5737](https://www.sqlalchemy.org/trac/ticket/5737)'
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5737](https://www.sqlalchemy.org/trac/ticket/5737)
- en: sql
  id: totrans-1617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A warning is emitted if a returning() method such as [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") is called multiple times, as this
    does not yet support additive operation. Version 1.4 will support additive operation
    for this. Additionally, any combination of the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") and `ValuesBase.return_defaults()`
    methods now raises an error as these methods are mutually exclusive; previously
    the operation would fail silently.
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果多次调用类似[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")的`returning()`方法，会发出警告，因为目前还不支持累加操作。版本
    1.4 将支持此功能。此外，任何组合[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")和`ValuesBase.return_defaults()`方法现在会引发错误，因为这些方法是互斥的；之前的操作会悄无声息地失败。
- en: 'References: [#5691](https://www.sqlalchemy.org/trac/ticket/5691)'
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5691](https://www.sqlalchemy.org/trac/ticket/5691)
- en: '**[sql] [bug]**'
  id: totrans-1621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed structural compiler issue where some constructs such as MySQL / PostgreSQL
    “on conflict / on duplicate key” would rely upon the state of the `Compiler` object
    being fixed against their statement as the top level statement, which would fail
    in cases where those statements are branched from a different context, such as
    a DDL construct linked to a SQL statement.
  id: totrans-1622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了结构编译器问题，其中一些构造（如 MySQL / PostgreSQL 的“on conflict / on duplicate key”）依赖于`Compiler`对象的状态固定为它们的语句作为顶层语句，这在这些语句从不同上下文分支出来的情况下会失败，比如与
    SQL 语句相关联的 DDL 构造。
- en: 'References: [#5656](https://www.sqlalchemy.org/trac/ticket/5656)'
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5656](https://www.sqlalchemy.org/trac/ticket/5656)
- en: postgresql
  id: totrans-1624
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-1625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added new parameter [`ExcludeConstraint.ops`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") to the [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") object, to support operator
    class specification with this constraint. Pull request courtesy Alon Menczer.
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")对象添加了新参数[`ExcludeConstraint.ops`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")，以支持此约束的操作符类规范。感谢 Alon Menczer
    的拉取请求。
- en: 'References: [#5604](https://www.sqlalchemy.org/trac/ticket/5604)'
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5604](https://www.sqlalchemy.org/trac/ticket/5604)
- en: '**[postgresql] [bug] [mysql]**'
  id: totrans-1628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [mysql]**'
- en: Fixed regression introduced in 1.3.2 for the PostgreSQL dialect, also copied
    out to the MySQL dialect’s feature in 1.3.18, where usage of a non [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct such as [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") as the argument to [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") would fail to be accommodated
    correctly within the PostgreSQL or MySQL compilers.
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.3.2中引入的PostgreSQL方言的回归，也复制到了1.3.18中MySQL方言的功能，其中使用非 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 构造（如[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")）作为[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")参数时，将无法在PostgreSQL或MySQL编译器中正确处理。
- en: 'References: [#5729](https://www.sqlalchemy.org/trac/ticket/5729)'
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5729](https://www.sqlalchemy.org/trac/ticket/5729)
- en: mysql
  id: totrans-1631
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [reflection]**'
  id: totrans-1632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [reflection]**'
- en: Fixed issue where reflecting a server default on MariaDB only that contained
    a decimal point in the value would fail to be reflected correctly, leading towards
    a reflected table that lacked any server default.
  id: totrans-1633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在仅包含值中包含小数点的MariaDB上反映服务器默认值时出现问题的问题，导致反映的表缺少任何服务器默认值。
- en: 'References: [#5744](https://www.sqlalchemy.org/trac/ticket/5744)'
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5744](https://www.sqlalchemy.org/trac/ticket/5744)
- en: '**[mysql] [sql]**'
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [sql]**'
- en: 'Added missing keywords to the `RESERVED_WORDS` list for the MySQL dialect:
    `action`, `level`, `mode`, `status`, `text`, `time`. Pull request courtesy Oscar
    Batori.'
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将缺失的关键字添加到MySQL方言的`RESERVED_WORDS`列表中：`action`，`level`，`mode`，`status`，`text`，`time`。感谢Oscar
    Batori的拉取请求。
- en: 'References: [#5696](https://www.sqlalchemy.org/trac/ticket/5696)'
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5696](https://www.sqlalchemy.org/trac/ticket/5696)
- en: sqlite
  id: totrans-1638
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Added `sqlite_with_rowid=False` dialect keyword to enable creating tables as
    `CREATE TABLE … WITHOUT ROWID`. Patch courtesy Sean Anderson.
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`sqlite_with_rowid=False`方言关键字，以启用创建`CREATE TABLE … WITHOUT ROWID`表。感谢Sean
    Anderson的补丁。
- en: 'References: [#5685](https://www.sqlalchemy.org/trac/ticket/5685)'
  id: totrans-1641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5685](https://www.sqlalchemy.org/trac/ticket/5685)
- en: mssql
  id: totrans-1642
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where a CREATE INDEX statement was rendered incorrectly when both
    `mssql-include` and `mssql_where` were specified. Pull request courtesy @Adiorz.
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当同时指定`mssql-include`和`mssql_where`时，CREATE INDEX语句呈现不正确的错误。感谢@Adiorz的拉取请求。
- en: 'References: [#5751](https://www.sqlalchemy.org/trac/ticket/5751)'
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5751](https://www.sqlalchemy.org/trac/ticket/5751)
- en: '**[mssql] [bug]**'
  id: totrans-1646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added SQL Server code “01000” to the list of disconnect codes.
  id: totrans-1647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将SQL Server代码“01000”添加到断开连接代码列表中。
- en: 'References: [#5646](https://www.sqlalchemy.org/trac/ticket/5646)'
  id: totrans-1648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5646](https://www.sqlalchemy.org/trac/ticket/5646)
- en: '**[mssql] [reflection] [sqlite]**'
  id: totrans-1649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [reflection] [sqlite]**'
- en: Fixed issue with composite primary key columns not being reported in the correct
    order. Patch courtesy @fulpm.
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合主键列未按正确顺序报告的问题。感谢@fulpm的补丁。
- en: 'References: [#5661](https://www.sqlalchemy.org/trac/ticket/5661)'
  id: totrans-1651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5661](https://www.sqlalchemy.org/trac/ticket/5661)
- en: oracle
  id: totrans-1652
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-1653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Implemented support for the SERIALIZABLE isolation level for Oracle databases,
    as well as a real implementation for [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level").
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了对Oracle数据库的SERIALIZABLE隔离级别的支持，以及对[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")的真实实现。
- en: See also
  id: totrans-1655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Transaction Isolation Level / Autocommit](../dialects/oracle.html#oracle-isolation-level)'
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[事务隔离级别 / 自动提交](../dialects/oracle.html#oracle-isolation-level)'
- en: 'References: [#5755](https://www.sqlalchemy.org/trac/ticket/5755)'
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5755](https://www.sqlalchemy.org/trac/ticket/5755)
- en: orm
  id: totrans-1658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a comprehensive check and an informative error message for the case where
    a mapped class, or a string mapped class name, is passed to [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship"). This is an extremely common error which warrants
    a clear message.
  id: totrans-1660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于将映射类或字符串映射类名称传递给[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")的情况，添加了全面的检查和信息丰富的错误消息。这是一个极其常见的错误，需要清晰的消息。
- en: Additionally, added a new rule to the class registry resolution such that with
    regards to the [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") parameter, if a mapped class and its table are
    of the identical string name, the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will be favored when resolving this parameter. In all
    other cases, the class continues to be favored if a class and table share the
    identical name.
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，增加了一个新规则到类注册解析中，关于 [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") 参数，如果映射类及其表的字符串名称相同，则在解析此参数时将优先选择 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。在所有其他情况下，如果类和表共享相同的名称，则继续优先选择类。
- en: 'References: [#5774](https://www.sqlalchemy.org/trac/ticket/5774)'
  id: totrans-1662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5774](https://www.sqlalchemy.org/trac/ticket/5774)
- en: '**[orm] [bug]**'
  id: totrans-1663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") where objects in the `_ormsession.Session` that
    were already expired would be unnecessarily SELECTed individually when they were
    refreshed by the “evaluate”synchronize strategy.
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 中的错误，当 `_ormsession.Session` 中的对象已过期时，会在刷新时不必要地单独进行
    SELECT 查询。
- en: 'References: [#5664](https://www.sqlalchemy.org/trac/ticket/5664)'
  id: totrans-1665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5664](https://www.sqlalchemy.org/trac/ticket/5664)
- en: '**[orm] [bug]**'
  id: totrans-1666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving the `restore_load_context` option of ORM events such as
    [`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") such that the flag would not be carried
    along to subclasses which were mapped after the event handler were first established.
  id: totrans-1667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于 ORM 事件的 `restore_load_context` 选项（如 [`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")）的错误，使得标志不会被传递给在事件处理程序首次建立之后映射的子类。
- en: 'References: [#5737](https://www.sqlalchemy.org/trac/ticket/5737)'
  id: totrans-1668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5737](https://www.sqlalchemy.org/trac/ticket/5737)
- en: sql
  id: totrans-1669
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A warning is emitted if a returning() method such as [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") is called multiple times, as this
    does not yet support additive operation. Version 1.4 will support additive operation
    for this. Additionally, any combination of the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") and `ValuesBase.return_defaults()`
    methods now raises an error as these methods are mutually exclusive; previously
    the operation would fail silently.
  id: totrans-1671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 等返回方法被多次调用时，会发出警告，因为目前不支持累加操作。版本
    1.4 将支持此功能。此外，任何 [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 和 `ValuesBase.return_defaults()`
    方法的组合现在都会引发错误，因为这些方法是互斥的；以前这个操作会悄悄失败。
- en: 'References: [#5691](https://www.sqlalchemy.org/trac/ticket/5691)'
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5691](https://www.sqlalchemy.org/trac/ticket/5691)
- en: '**[sql] [bug]**'
  id: totrans-1673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed structural compiler issue where some constructs such as MySQL / PostgreSQL
    “on conflict / on duplicate key” would rely upon the state of the `Compiler` object
    being fixed against their statement as the top level statement, which would fail
    in cases where those statements are branched from a different context, such as
    a DDL construct linked to a SQL statement.
  id: totrans-1674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些结构编译器问题，例如 MySQL / PostgreSQL 的 “on conflict / on duplicate key” 会依赖于 `Compiler`
    对象的状态被固定为其语句的顶级语句，这在这些语句从不同上下文分支出来时会失败，比如与 SQL 语句链接到 DDL 构造。
- en: 'References: [#5656](https://www.sqlalchemy.org/trac/ticket/5656)'
  id: totrans-1675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5656](https://www.sqlalchemy.org/trac/ticket/5656)
- en: postgresql
  id: totrans-1676
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-1677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added new parameter [`ExcludeConstraint.ops`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") to the [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") object, to support operator
    class specification with this constraint. Pull request courtesy Alon Menczer.
  id: totrans-1678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 对象添加了新参数 [`ExcludeConstraint.ops`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")，以支持此约束的操作符类规范。感谢 Alon Menczer
    的拉取请求。
- en: 'References: [#5604](https://www.sqlalchemy.org/trac/ticket/5604)'
  id: totrans-1679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5604](https://www.sqlalchemy.org/trac/ticket/5604)
- en: '**[postgresql] [bug] [mysql]**'
  id: totrans-1680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [mysql]**'
- en: Fixed regression introduced in 1.3.2 for the PostgreSQL dialect, also copied
    out to the MySQL dialect’s feature in 1.3.18, where usage of a non [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct such as [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") as the argument to [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") would fail to be accommodated
    correctly within the PostgreSQL or MySQL compilers.
  id: totrans-1681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.3.2 中引入的针对 PostgreSQL 方言的回归，也在 1.3.18 中复制到了 MySQL 方言的功能中，其中使用非 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 构造（如 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")）作为 [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") 参数将无法在 PostgreSQL 或 MySQL
    编译器中正确处理。
- en: 'References: [#5729](https://www.sqlalchemy.org/trac/ticket/5729)'
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5729](https://www.sqlalchemy.org/trac/ticket/5729)
- en: mysql
  id: totrans-1683
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [reflection]**'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [reflection]**'
- en: Fixed issue where reflecting a server default on MariaDB only that contained
    a decimal point in the value would fail to be reflected correctly, leading towards
    a reflected table that lacked any server default.
  id: totrans-1685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MariaDB 上反射仅包含值中的小数点的服务器默认值时无法正确反映的问题，导致反映的表缺乏任何服务器默认值。
- en: 'References: [#5744](https://www.sqlalchemy.org/trac/ticket/5744)'
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5744](https://www.sqlalchemy.org/trac/ticket/5744)
- en: '**[mysql] [sql]**'
  id: totrans-1687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [sql]**'
- en: 'Added missing keywords to the `RESERVED_WORDS` list for the MySQL dialect:
    `action`, `level`, `mode`, `status`, `text`, `time`. Pull request courtesy Oscar
    Batori.'
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将缺少的关键字添加到 MySQL 方言的 `RESERVED_WORDS` 列表中：`action`、`level`、`mode`、`status`、`text`、`time`。感谢
    Oscar Batori 的拉取请求。
- en: 'References: [#5696](https://www.sqlalchemy.org/trac/ticket/5696)'
  id: totrans-1689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5696](https://www.sqlalchemy.org/trac/ticket/5696)
- en: sqlite
  id: totrans-1690
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-1691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Added `sqlite_with_rowid=False` dialect keyword to enable creating tables as
    `CREATE TABLE … WITHOUT ROWID`. Patch courtesy Sean Anderson.
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 `sqlite_with_rowid=False` 方言关键字，以启用创建表为 `CREATE TABLE … WITHOUT ROWID`。感谢
    Sean Anderson 的补丁。
- en: 'References: [#5685](https://www.sqlalchemy.org/trac/ticket/5685)'
  id: totrans-1693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5685](https://www.sqlalchemy.org/trac/ticket/5685)
- en: mssql
  id: totrans-1694
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where a CREATE INDEX statement was rendered incorrectly when both
    `mssql-include` and `mssql_where` were specified. Pull request courtesy @Adiorz.
  id: totrans-1696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当同时指定 `mssql-include` 和 `mssql_where` 时，CREATE INDEX 语句呈现不正确的 bug。感谢 @Adiorz
    的拉取请求。
- en: 'References: [#5751](https://www.sqlalchemy.org/trac/ticket/5751)'
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5751](https://www.sqlalchemy.org/trac/ticket/5751)
- en: '**[mssql] [bug]**'
  id: totrans-1698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added SQL Server code “01000” to the list of disconnect codes.
  id: totrans-1699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 SQL Server 代码“01000”添加到断开连接代码列表中。
- en: 'References: [#5646](https://www.sqlalchemy.org/trac/ticket/5646)'
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5646](https://www.sqlalchemy.org/trac/ticket/5646)
- en: '**[mssql] [reflection] [sqlite]**'
  id: totrans-1701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [reflection] [sqlite]**'
- en: Fixed issue with composite primary key columns not being reported in the correct
    order. Patch courtesy @fulpm.
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合主键列未按正确顺序报告的问题。感谢 @fulpm 的补丁。
- en: 'References: [#5661](https://www.sqlalchemy.org/trac/ticket/5661)'
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5661](https://www.sqlalchemy.org/trac/ticket/5661)
- en: oracle
  id: totrans-1704
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-1705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Implemented support for the SERIALIZABLE isolation level for Oracle databases,
    as well as a real implementation for [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level").
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了对 Oracle 数据库的 SERIALIZABLE 隔离级别的支持，以及对 [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") 的真正实现。
- en: See also
  id: totrans-1707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Transaction Isolation Level / Autocommit](../dialects/oracle.html#oracle-isolation-level)'
  id: totrans-1708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[事务隔离级别 / 自动提交](../dialects/oracle.html#oracle-isolation-level)'
- en: 'References: [#5755](https://www.sqlalchemy.org/trac/ticket/5755)'
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5755](https://www.sqlalchemy.org/trac/ticket/5755)
- en: 1.3.20
  id: totrans-1710
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.20
- en: 'Released: October 12, 2020'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年10月12日
- en: orm
  id: totrans-1712
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    with more detail is now raised if the target parameter for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is set to an unmapped object. Prior to this change
    a less detailed `AttributeError` was raised. Pull request courtesy Ramon Williams.
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的目标参数设置为未映射对象，则现在会引发带有更多详细信息的[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。在此更改之前，会引发一个不太详细的`AttributeError`。感谢 Ramon Williams
    提交的拉取请求。
- en: 'References: [#4428](https://www.sqlalchemy.org/trac/ticket/4428)'
  id: totrans-1715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4428](https://www.sqlalchemy.org/trac/ticket/4428)
- en: '**[orm] [bug]**'
  id: totrans-1716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using a loader option against a string attribute name that
    is not actually a mapped attribute, such as a plain Python descriptor, would raise
    an uninformative AttributeError; a descriptive error is now raised.
  id: totrans-1717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对实际上不是映射属性的字符串属性名称（例如普通的Python描述符）使用加载器选项会引发一个不具信息性的AttributeError的问题；现在会引发一个描述性错误。
- en: 'References: [#4589](https://www.sqlalchemy.org/trac/ticket/4589)'
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4589](https://www.sqlalchemy.org/trac/ticket/4589)
- en: engine
  id: totrans-1719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where a non-string object sent to [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") or a subclass, as occurs with some third party
    dialects, would fail to stringify correctly. Pull request courtesy Andrzej Bartosiński.
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将非字符串对象发送到[`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")或其子类时（某些第三方方言会出现此情况），无法正确字符串化的问题。感谢 Andrzej Bartosiński
    提交的拉取请求。
- en: 'References: [#5599](https://www.sqlalchemy.org/trac/ticket/5599)'
  id: totrans-1722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5599](https://www.sqlalchemy.org/trac/ticket/5599)
- en: '**[engine] [bug]**'
  id: totrans-1723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Repaired a function-level import that was not using SQLAlchemy’s standard late-import
    system within the sqlalchemy.exc module.
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未在sqlalchemy.exc模块内使用SQLAlchemy的标准延迟导入系统的函数级别导入。
- en: 'References: [#5632](https://www.sqlalchemy.org/trac/ticket/5632)'
  id: totrans-1725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5632](https://www.sqlalchemy.org/trac/ticket/5632)
- en: sql
  id: totrans-1726
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the `pickle.dumps()` operation against [`Over`](../core/sqlelement.html#sqlalchemy.sql.expression.Over
    "sqlalchemy.sql.expression.Over") construct would produce a recursion overflow.
  id: totrans-1728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对[`Over`](../core/sqlelement.html#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")构造执行`pickle.dumps()`操作会产生递归溢出的问题。
- en: 'References: [#5644](https://www.sqlalchemy.org/trac/ticket/5644)'
  id: totrans-1729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5644](https://www.sqlalchemy.org/trac/ticket/5644)
- en: '**[sql] [bug]**'
  id: totrans-1730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where an error was not raised in the case where a [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") were added to more than one [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") at a time. This raised correctly for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects. An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") is now raised when this occurs.
  id: totrans-1731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")添加到多个[`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table")时未引发错误的错误。对于[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")和[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，现在正确引发错误。当发生这种情况时，现在会引发[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。
- en: 'References: [#5618](https://www.sqlalchemy.org/trac/ticket/5618)'
  id: totrans-1732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5618](https://www.sqlalchemy.org/trac/ticket/5618)
- en: postgresql
  id: totrans-1733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: The psycopg2 dialect now support PostgreSQL multiple host connections, by passing
    host/port combinations to the query string. Pull request courtesy Ramon Williams.
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2方言现在支持通过将主机/端口组合传递给查询字符串来支持PostgreSQL多主机连接。感谢 Ramon Williams 提交的拉取请求。
- en: See also
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specifying multiple fallback hosts](../dialects/postgresql.html#psycopg2-multi-host)'
  id: totrans-1737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[指定多个备用主机](../dialects/postgresql.html#psycopg2-multi-host)'
- en: 'References: [#4392](https://www.sqlalchemy.org/trac/ticket/4392)'
  id: totrans-1738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4392](https://www.sqlalchemy.org/trac/ticket/4392)
- en: '**[postgresql] [bug]**'
  id: totrans-1739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Adjusted the [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") methods to implement a straight “NOT”
    operation for negation, rather than negating the comparison operator.
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")和[`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法，以实现直接的“NOT”操作进行否定，而不是否定比较运算符。
- en: 'References: [#5518](https://www.sqlalchemy.org/trac/ticket/5518)'
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5518](https://www.sqlalchemy.org/trac/ticket/5518)
- en: '**[postgresql] [bug]**'
  id: totrans-1742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type would not consult the schema translate
    map when emitting a CREATE TYPE or DROP TYPE during the test to see if the type
    exists or not. Additionally, repaired an issue where if the same enum were encountered
    multiple times in a single DDL sequence, the “check” query would run repeatedly
    rather than relying upon a cached value.
  id: totrans-1743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")类型在测试期间在发出CREATE TYPE或DROP TYPE时不会查看模式转换映射是否存在该类型的问题。此外，修复了一个问题，即如果在单个DDL序列中多次遇到相同的枚举，则“check”查询将重复运行，而不是依赖于缓存值。
- en: 'References: [#5520](https://www.sqlalchemy.org/trac/ticket/5520)'
  id: totrans-1744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5520](https://www.sqlalchemy.org/trac/ticket/5520)
- en: mysql
  id: totrans-1745
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-1746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [用例]**'
- en: Adjusted the MySQL dialect to correctly parenthesize functional index expressions
    as accepted by MySQL 8\. Pull request courtesy Ramon Williams.
  id: totrans-1747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了MySQL方言，以正确地将函数索引表达式括在括号中，这是MySQL 8所接受的。感谢Ramon Williams的拉取请求。
- en: 'References: [#5462](https://www.sqlalchemy.org/trac/ticket/5462)'
  id: totrans-1748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5462](https://www.sqlalchemy.org/trac/ticket/5462)
- en: '**[mysql] [change]**'
  id: totrans-1749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [更改]**'
- en: 'Add new MySQL reserved words: `cube`, `lateral` added in MySQL 8.0.1 and 8.0.14,
    respectively; this indicates that these terms will be quoted if used as table
    or column identifier names.'
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的MySQL保留字：`cube`，`lateral`分别在MySQL 8.0.1和8.0.14中添加；这表示如果作为表或列标识符名称使用这些术语，它们将被引用。
- en: 'References: [#5539](https://www.sqlalchemy.org/trac/ticket/5539)'
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5539](https://www.sqlalchemy.org/trac/ticket/5539)
- en: '**[mysql] [bug]**'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The “skip_locked” keyword used with `with_for_update()` will emit a warning
    when used on MariaDB backends, and will then be ignored. This is a deprecated
    behavior that will raise in SQLAlchemy 1.4, as an application that requests “skip
    locked” is looking for a non-blocking operation which is not available on those
    backends.
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`with_for_update()`中的“skip_locked”关键字在MariaDB后端上使用时会发出警告，然后将被忽略。这是一种已弃用的行为，在SQLAlchemy
    1.4中将会引发错误，因为请求“skip locked”的应用程序正在寻找一个在这些后端上不可用的非阻塞操作。
- en: 'References: [#5568](https://www.sqlalchemy.org/trac/ticket/5568)'
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5568](https://www.sqlalchemy.org/trac/ticket/5568)
- en: '**[mysql] [bug]**'
  id: totrans-1755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where an UPDATE statement against a JOIN using MySQL multi-table format
    would fail to include the table prefix for the target table if the statement had
    no WHERE clause, as only the WHERE clause were scanned to detect a “multi table
    update” at that particular point. The target is now also scanned if it’s a JOIN
    to get the leftmost table as the primary table and the additional entries as additional
    FROM entries.
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对使用MySQL多表格式的JOIN的UPDATE语句的一个bug，如果语句没有WHERE子句，那么目标表的表前缀将不会被包括在内，因为在那个特定点只有WHERE子句被扫描以检测“多表更新”。现在，如果目标是JOIN，则也会被扫描，以获取最左边的表作为主表和其他条目作为额外的FROM条目。
- en: 'References: [#5617](https://www.sqlalchemy.org/trac/ticket/5617)'
  id: totrans-1757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5617](https://www.sqlalchemy.org/trac/ticket/5617)
- en: mssql
  id: totrans-1758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where a SQLAlchemy connection URI for Azure DW with `authentication=ActiveDirectoryIntegrated`
    (and no username+password) was not constructing the ODBC connection string in
    a way that was acceptable to the Azure DW instance.
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即使用`authentication=ActiveDirectoryIntegrated`的Azure DW的SQLAlchemy连接URI（没有用户名+密码）未以Azure
    DW实例可接受的方式构建ODBC连接字符串。
- en: 'References: [#5592](https://www.sqlalchemy.org/trac/ticket/5592)'
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5592](https://www.sqlalchemy.org/trac/ticket/5592)
- en: tests
  id: totrans-1762
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-1763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug]**'
- en: Fixed incompatibilities in the test suite when running against Pytest 6.x.
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对Pytest 6.x运行时测试套件中的不兼容性。
- en: 'References: [#5635](https://www.sqlalchemy.org/trac/ticket/5635)'
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5635](https://www.sqlalchemy.org/trac/ticket/5635)
- en: misc
  id: totrans-1766
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [pool]**'
  id: totrans-1767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [池]**'
- en: 'Fixed issue where the following pool parameters were not being propagated to
    the new pool created when [`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") were called: `pre_ping`, `use_lifo`. Additionally
    the `recycle` and `reset_on_return` parameter is now propagated for the `AssertionPool`
    class.'
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在调用[`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")时，以下池参数未传播到新创建的池的问题：`pre_ping`，`use_lifo`。此外，`recycle`和`reset_on_return`参数现在也传播到`AssertionPool`类。
- en: 'References: [#5582](https://www.sqlalchemy.org/trac/ticket/5582)'
  id: totrans-1769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5582](https://www.sqlalchemy.org/trac/ticket/5582)
- en: '**[bug] [associationproxy] [ext]**'
  id: totrans-1770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [associationproxy] [ext]**'
- en: An informative error is now raised when attempting to use an association proxy
    element as a plain column expression to be SELECTed from or used in a SQL function;
    this use case is not currently supported.
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试将一个关联代理元素用作要从中选择或在SQL函数中使用的普通列表达式时，现在会引发一个信息丰富的错误；目前不支持这种用例。
- en: 'References: [#5541](https://www.sqlalchemy.org/trac/ticket/5541), [#5542](https://www.sqlalchemy.org/trac/ticket/5542)'
  id: totrans-1772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5541](https://www.sqlalchemy.org/trac/ticket/5541), [#5542](https://www.sqlalchemy.org/trac/ticket/5542)
- en: orm
  id: totrans-1773
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    with more detail is now raised if the target parameter for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is set to an unmapped object. Prior to this change
    a less detailed `AttributeError` was raised. Pull request courtesy Ramon Williams.
  id: totrans-1775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的目标参数设置为未映射对象，则现在会引发带有更多详细信息的[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。在此更改之前，会引发一个不太详细的`AttributeError`。感谢Ramon Williams提供的拉取请求。
- en: 'References: [#4428](https://www.sqlalchemy.org/trac/ticket/4428)'
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4428](https://www.sqlalchemy.org/trac/ticket/4428)
- en: '**[orm] [bug]**'
  id: totrans-1777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using a loader option against a string attribute name that
    is not actually a mapped attribute, such as a plain Python descriptor, would raise
    an uninformative AttributeError; a descriptive error is now raised.
  id: totrans-1778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对实际上不是映射属性的字符串属性名称（例如普通的Python描述符）使用加载器选项会引发一个不具描述性的AttributeError的问题；现在会引发一个描述性错误。
- en: 'References: [#4589](https://www.sqlalchemy.org/trac/ticket/4589)'
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4589](https://www.sqlalchemy.org/trac/ticket/4589)
- en: engine
  id: totrans-1780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where a non-string object sent to [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") or a subclass, as occurs with some third party
    dialects, would fail to stringify correctly. Pull request courtesy Andrzej Bartosiński.
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将非字符串对象发送到[`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")或其子类时（某些第三方方言会发生这种情况），无法正确字符串化的问题。感谢Andrzej Bartosiński提供的拉取请求。
- en: 'References: [#5599](https://www.sqlalchemy.org/trac/ticket/5599)'
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5599](https://www.sqlalchemy.org/trac/ticket/5599)
- en: '**[engine] [bug]**'
  id: totrans-1784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Repaired a function-level import that was not using SQLAlchemy’s standard late-import
    system within the sqlalchemy.exc module.
  id: totrans-1785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未在sqlalchemy.exc模块内使用SQLAlchemy标准的延迟导入系统的函数级别导入。
- en: 'References: [#5632](https://www.sqlalchemy.org/trac/ticket/5632)'
  id: totrans-1786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5632](https://www.sqlalchemy.org/trac/ticket/5632)
- en: sql
  id: totrans-1787
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the `pickle.dumps()` operation against [`Over`](../core/sqlelement.html#sqlalchemy.sql.expression.Over
    "sqlalchemy.sql.expression.Over") construct would produce a recursion overflow.
  id: totrans-1789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对[`Over`](../core/sqlelement.html#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")构造的`pickle.dumps()`操作会导致递归溢出的问题。
- en: 'References: [#5644](https://www.sqlalchemy.org/trac/ticket/5644)'
  id: totrans-1790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5644](https://www.sqlalchemy.org/trac/ticket/5644)
- en: '**[sql] [bug]**'
  id: totrans-1791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where an error was not raised in the case where a [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") were added to more than one [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") at a time. This raised correctly for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects. An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") is now raised when this occurs.
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在此 bug 中，当一个 [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 被同时添加到多个 [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") 时，错误未被引发。现在对于 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 和 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象，此错误已正确引发。当这种情况发生时，现在会引发 [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。
- en: 'References: [#5618](https://www.sqlalchemy.org/trac/ticket/5618)'
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5618](https://www.sqlalchemy.org/trac/ticket/5618)
- en: postgresql
  id: totrans-1794
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-1795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: The psycopg2 dialect now support PostgreSQL multiple host connections, by passing
    host/port combinations to the query string. Pull request courtesy Ramon Williams.
  id: totrans-1796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: psycopg2 方言现在支持 PostgreSQL 多主机连接，通过将主机/端口组合传递给查询字符串。拉取请求由拉蒙·威廉姆斯提供。
- en: See also
  id: totrans-1797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specifying multiple fallback hosts](../dialects/postgresql.html#psycopg2-multi-host)'
  id: totrans-1798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[指定多个备用主机](../dialects/postgresql.html#psycopg2-multi-host)'
- en: 'References: [#4392](https://www.sqlalchemy.org/trac/ticket/4392)'
  id: totrans-1799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4392](https://www.sqlalchemy.org/trac/ticket/4392)
- en: '**[postgresql] [bug]**'
  id: totrans-1800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Adjusted the [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") methods to implement a straight “NOT”
    operation for negation, rather than negating the comparison operator.
  id: totrans-1801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 和 [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法，以实现直接的“NOT”操作来进行否定，而不是对比运算符的否定。
- en: 'References: [#5518](https://www.sqlalchemy.org/trac/ticket/5518)'
  id: totrans-1802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5518](https://www.sqlalchemy.org/trac/ticket/5518)
- en: '**[postgresql] [bug]**'
  id: totrans-1803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type would not consult the schema translate
    map when emitting a CREATE TYPE or DROP TYPE during the test to see if the type
    exists or not. Additionally, repaired an issue where if the same enum were encountered
    multiple times in a single DDL sequence, the “check” query would run repeatedly
    rather than relying upon a cached value.
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型在发出 CREATE TYPE 或 DROP TYPE 期间不会查看模式转换映射时，问题仍然存在。另外，修复了一个问题，即如果在单个
    DDL 序列中多次遇到相同的枚举，则“check”查询将重复运行，而不是依赖于缓存的值。
- en: 'References: [#5520](https://www.sqlalchemy.org/trac/ticket/5520)'
  id: totrans-1805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5520](https://www.sqlalchemy.org/trac/ticket/5520)
- en: mysql
  id: totrans-1806
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-1807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Adjusted the MySQL dialect to correctly parenthesize functional index expressions
    as accepted by MySQL 8\. Pull request courtesy Ramon Williams.
  id: totrans-1808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 MySQL 方言，以正确地将功能性索引表达式括在括号中，这符合 MySQL 8 的规范。拉取请求由拉蒙·威廉姆斯提供。
- en: 'References: [#5462](https://www.sqlalchemy.org/trac/ticket/5462)'
  id: totrans-1809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5462](https://www.sqlalchemy.org/trac/ticket/5462)
- en: '**[mysql] [change]**'
  id: totrans-1810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: 'Add new MySQL reserved words: `cube`, `lateral` added in MySQL 8.0.1 and 8.0.14,
    respectively; this indicates that these terms will be quoted if used as table
    or column identifier names.'
  id: totrans-1811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 MySQL 保留字：`cube`、`lateral` 分别在 MySQL 8.0.1 和 8.0.14 中添加；这表示如果作为表或列标识符名称使用这些术语，它们将被引用。
- en: 'References: [#5539](https://www.sqlalchemy.org/trac/ticket/5539)'
  id: totrans-1812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5539](https://www.sqlalchemy.org/trac/ticket/5539)
- en: '**[mysql] [bug]**'
  id: totrans-1813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The “skip_locked” keyword used with `with_for_update()` will emit a warning
    when used on MariaDB backends, and will then be ignored. This is a deprecated
    behavior that will raise in SQLAlchemy 1.4, as an application that requests “skip
    locked” is looking for a non-blocking operation which is not available on those
    backends.
  id: totrans-1814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 MariaDB 后端使用 `with_for_update()` 中的 “skip_locked” 关键字时，将发出警告，然后将被忽略。这是一种已弃用的行为，在
    SQLAlchemy 1.4 中将会引发错误，因为请求“跳过锁定”表示的是一种不可用于这些后端的非阻塞操作。
- en: 'References: [#5568](https://www.sqlalchemy.org/trac/ticket/5568)'
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5568](https://www.sqlalchemy.org/trac/ticket/5568)
- en: '**[mysql] [bug]**'
  id: totrans-1816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where an UPDATE statement against a JOIN using MySQL multi-table format
    would fail to include the table prefix for the target table if the statement had
    no WHERE clause, as only the WHERE clause were scanned to detect a “multi table
    update” at that particular point. The target is now also scanned if it’s a JOIN
    to get the leftmost table as the primary table and the additional entries as additional
    FROM entries.
  id: totrans-1817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即针对使用MySQL多表格式的JOIN进行UPDATE语句时，如果语句没有WHERE子句，则目标表的表前缀将不会被包括，因为只有WHERE子句被扫描以检测“多表更新”在那个特定点。现在，如果目标是JOIN，则也会被扫描，以获取最左边的表作为主表和其他条目作为额外的FROM条目。
- en: 'References: [#5617](https://www.sqlalchemy.org/trac/ticket/5617)'
  id: totrans-1818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5617](https://www.sqlalchemy.org/trac/ticket/5617)
- en: mssql
  id: totrans-1819
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where a SQLAlchemy connection URI for Azure DW with `authentication=ActiveDirectoryIntegrated`
    (and no username+password) was not constructing the ODBC connection string in
    a way that was acceptable to the Azure DW instance.
  id: totrans-1821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即使用`authentication=ActiveDirectoryIntegrated`（没有用户名+密码）的Azure DW的SQLAlchemy连接URI未构建出可接受的ODBC连接字符串，无法被Azure
    DW实例接受。
- en: 'References: [#5592](https://www.sqlalchemy.org/trac/ticket/5592)'
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5592](https://www.sqlalchemy.org/trac/ticket/5592)
- en: tests
  id: totrans-1823
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-1824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed incompatibilities in the test suite when running against Pytest 6.x.
  id: totrans-1825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在针对Pytest 6.x运行时测试套件中的不兼容性。
- en: 'References: [#5635](https://www.sqlalchemy.org/trac/ticket/5635)'
  id: totrans-1826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5635](https://www.sqlalchemy.org/trac/ticket/5635)
- en: misc
  id: totrans-1827
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-1828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: 'Fixed issue where the following pool parameters were not being propagated to
    the new pool created when [`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") were called: `pre_ping`, `use_lifo`. Additionally
    the `recycle` and `reset_on_return` parameter is now propagated for the `AssertionPool`
    class.'
  id: totrans-1829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当调用[`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")时，以下池参数未传播到新创建的池的问题：`pre_ping`，`use_lifo`。此外，`recycle`和`reset_on_return`参数现在也传播到`AssertionPool`类。
- en: 'References: [#5582](https://www.sqlalchemy.org/trac/ticket/5582)'
  id: totrans-1830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5582](https://www.sqlalchemy.org/trac/ticket/5582)
- en: '**[bug] [associationproxy] [ext]**'
  id: totrans-1831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [associationproxy] [ext]**'
- en: An informative error is now raised when attempting to use an association proxy
    element as a plain column expression to be SELECTed from or used in a SQL function;
    this use case is not currently supported.
  id: totrans-1832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试将关联代理元素用作要从中选择或在SQL函数中使用的普通列表达式时，现在会引发一个信息性错误；目前不支持这种用例。
- en: 'References: [#5541](https://www.sqlalchemy.org/trac/ticket/5541), [#5542](https://www.sqlalchemy.org/trac/ticket/5542)'
  id: totrans-1833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5541](https://www.sqlalchemy.org/trac/ticket/5541), [#5542](https://www.sqlalchemy.org/trac/ticket/5542)
- en: 1.3.19
  id: totrans-1834
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.19
- en: 'Released: August 17, 2020'
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年8月17日
- en: orm
  id: totrans-1836
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-1837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Adjusted the workings of the [`Mapper.all_orm_descriptors()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") accessor to represent the attributes
    in the order that they are located in a deterministic way, assuming the use of
    Python 3.6 or higher which maintains the sorting order of class attributes based
    on how they were declared. This sorting is not guaranteed to match the declared
    order of attributes in all cases however; see the method documentation for the
    exact scheme.
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Mapper.all_orm_descriptors()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")访问器的工作方式，以一种确定性的方式表示属性，假设使用Python
    3.6或更高版本，它根据属性声明的方式维护类属性的排序顺序。然而，这种排序并不保证在所有情况下都与属性的声明顺序匹配；请参考方法文档以获取确切的方案。
- en: 'References: [#5494](https://www.sqlalchemy.org/trac/ticket/5494)'
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5494](https://www.sqlalchemy.org/trac/ticket/5494)
- en: orm declarative
  id: totrans-1840
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [usecase]**'
  id: totrans-1841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [usecase]**'
- en: The name of the virtual column used when using the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") and [`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase") classes can now be customized, to allow
    for models that have a column that is actually named `type`. Pull request courtesy
    Jesse-Bakker.
  id: totrans-1842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")和[`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase")类时，现在可以自定义虚拟列的名称，以允许具有实际命名为`type`的列的模型。拉取请求由Jesse-Bakker提供。
- en: 'References: [#5513](https://www.sqlalchemy.org/trac/ticket/5513)'
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5513](https://www.sqlalchemy.org/trac/ticket/5513)
- en: sql
  id: totrans-1844
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired an issue where the “ORDER BY” clause rendering a label name rather
    than a complete expression, which is particularly important for SQL Server, would
    fail to occur if the expression were enclosed in a parenthesized grouping in some
    cases. This case has been added to test support. The change additionally adjusts
    the “automatically add ORDER BY columns when DISTINCT is present” behavior of
    ORM query, deprecated in 1.4, to more accurately detect column expressions that
    are already present.
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即“ORDER BY”子句渲染标签名称而不是完整表达式的问题，在某些情况下，如果表达式被括在括号分组中，将无法发生。此案例已添加到测试支持。此更改还调整了ORM查询中“在DISTINCT存在时自动添加ORDER
    BY列”的行为，1.4中已弃用，以更准确地检测已存在的列表达式。
- en: 'References: [#5470](https://www.sqlalchemy.org/trac/ticket/5470)'
  id: totrans-1847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5470](https://www.sqlalchemy.org/trac/ticket/5470)
- en: '**[sql] [bug] [datatypes]**'
  id: totrans-1848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [datatypes]**'
- en: The `LookupError` message will now provide the user with up to four possible
    values that a column is constrained to via the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"). Values longer than 11 characters will be truncated and
    replaced with ellipses. Pull request courtesy Ramon Williams.
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LookupError`消息现在将向用户提供通过[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")约束的列的最多四个可能值。超过11个字符的值将被截断并替换为省略号。拉取请求由Ramon Williams提供。'
- en: 'References: [#4733](https://www.sqlalchemy.org/trac/ticket/4733)'
  id: totrans-1850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4733](https://www.sqlalchemy.org/trac/ticket/4733)
- en: '**[sql] [bug]**'
  id: totrans-1851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") feature would not take effect
    when the [`Sequence.next_value()`](../core/defaults.html#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") function function for a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") were used in the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter and the create table DDL were emitted.
  id: totrans-1852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用[`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")功能时，当使用[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")的[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数中的[`Sequence.next_value()`](../core/defaults.html#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value")函数，并发出创建表DDL时，[`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")功能将不起作用的问题。
- en: 'References: [#5500](https://www.sqlalchemy.org/trac/ticket/5500)'
  id: totrans-1853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5500](https://www.sqlalchemy.org/trac/ticket/5500)
- en: postgresql
  id: totrans-1854
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the return type for the various RANGE comparison operators
    would itself be the same RANGE type rather than BOOLEAN, which would cause an
    undesirable result in the case that a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that defined result-processing behavior were
    in use. Pull request courtesy Jim Bosch.
  id: totrans-1856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了各种RANGE比较运算符的返回类型本身将是相同的RANGE类型而不是BOOLEAN的问题，这将导致在使用定义了结果处理行为的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的情况下产生不良结果。拉取请求由Jim Bosch提供。
- en: 'References: [#5476](https://www.sqlalchemy.org/trac/ticket/5476)'
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5476](https://www.sqlalchemy.org/trac/ticket/5476)
- en: mysql
  id: totrans-1858
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-1859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: The MySQL dialect will render FROM DUAL for a SELECT statement that has no FROM
    clause but has a WHERE clause. This allows things like “SELECT 1 WHERE EXISTS
    (subquery)” kinds of queries to be used as well as other use cases.
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言将为没有FROM子句但有WHERE子句的SELECT语句呈现FROM DUAL。这允许像“SELECT 1 WHERE EXISTS (subquery)”这样的查询以及其他用例。
- en: 'References: [#5481](https://www.sqlalchemy.org/trac/ticket/5481)'
  id: totrans-1861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5481](https://www.sqlalchemy.org/trac/ticket/5481)
- en: '**[mysql] [bug]**'
  id: totrans-1862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed an issue where CREATE TABLE statements were not specifying the COLLATE
    keyword correctly.
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即CREATE TABLE语句未正确指定COLLATE关键字。
- en: 'References: [#5411](https://www.sqlalchemy.org/trac/ticket/5411)'
  id: totrans-1864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5411](https://www.sqlalchemy.org/trac/ticket/5411)
- en: '**[mysql] [bug]**'
  id: totrans-1865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added MariaDB code 1927 to the list of “disconnect” codes, as recent MariaDB
    versions apparently use this code when the database server was stopped.
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将MariaDB代码1927添加到“断开连接”代码列表中，因为最近的MariaDB版本显然在数据库服务器停止时使用此代码。
- en: 'References: [#5493](https://www.sqlalchemy.org/trac/ticket/5493)'
  id: totrans-1867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5493](https://www.sqlalchemy.org/trac/ticket/5493)
- en: sqlite
  id: totrans-1868
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [mssql] [reflection]**'
  id: totrans-1869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [mssql] [reflection]**'
- en: Applied a sweep through all included dialects to ensure names that contain single
    or double quotes are properly escaped when querying system tables, for all [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") methods that accept object names as
    an argument (e.g. table names, view names, etc). SQLite and MSSQL contained two
    quoting issues that were repaired.
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有包含的方言进行了一次扫描，以确保包含单引号或双引号的名称在查询系统表时得到正确转义，对于所有接受对象名称作为参数的[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")方法（例如表名、视图名等）。修复了SQLite和MSSQL中存在的两个引号问题。
- en: 'References: [#5456](https://www.sqlalchemy.org/trac/ticket/5456)'
  id: totrans-1871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5456](https://www.sqlalchemy.org/trac/ticket/5456)
- en: mssql
  id: totrans-1872
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [sql]**'
  id: totrans-1873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [sql]**'
- en: Fixed bug where the mssql dialect incorrectly escaped object names that contained
    ‘]’ character(s).
  id: totrans-1874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即mssql方言错误地转义包含‘]’字符的对象名称。
- en: 'References: [#5467](https://www.sqlalchemy.org/trac/ticket/5467)'
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5467](https://www.sqlalchemy.org/trac/ticket/5467)
- en: misc
  id: totrans-1876
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[usecase] [py3k]**'
  id: totrans-1877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[usecase] [py3k]**'
- en: Added a `**kw` argument to the `DeclarativeMeta.__init__()` method. This allows
    a class to support the [**PEP 487**](https://peps.python.org/pep-0487/) metaclass
    hook `__init_subclass__`. Pull request courtesy Ewen Gillies.
  id: totrans-1878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向`DeclarativeMeta.__init__()`方法添加了一个`**kw`参数。这允许类支持[**PEP 487**](https://peps.python.org/pep-0487/)元类钩子`__init_subclass__`。感谢Ewen
    Gillies的拉取请求。
- en: 'References: [##5357](https://www.sqlalchemy.org/trac/ticket/#5357)'
  id: totrans-1879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[##5357](https://www.sqlalchemy.org/trac/ticket/#5357)
- en: orm
  id: totrans-1880
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-1881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Adjusted the workings of the [`Mapper.all_orm_descriptors()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") accessor to represent the attributes
    in the order that they are located in a deterministic way, assuming the use of
    Python 3.6 or higher which maintains the sorting order of class attributes based
    on how they were declared. This sorting is not guaranteed to match the declared
    order of attributes in all cases however; see the method documentation for the
    exact scheme.
  id: totrans-1882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Mapper.all_orm_descriptors()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")访问器的工作方式，以一种确定性的方式表示属性，假设使用Python
    3.6或更高版本，该版本基于声明的顺序维护类属性的排序顺序。但是，这种排序不能保证在所有情况下与属性的声明顺序匹配；请参阅方法文档以获取确切的方案。
- en: 'References: [#5494](https://www.sqlalchemy.org/trac/ticket/5494)'
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5494](https://www.sqlalchemy.org/trac/ticket/5494)
- en: orm declarative
  id: totrans-1884
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [usecase]**'
  id: totrans-1885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [usecase]**'
- en: The name of the virtual column used when using the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") and [`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase") classes can now be customized, to allow
    for models that have a column that is actually named `type`. Pull request courtesy
    Jesse-Bakker.
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")和[`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase")类时，现在可以自定义虚拟列的名称，以允许具有实际命名为`type`的列的模型。感谢Jesse-Bakker的拉取请求。
- en: 'References: [#5513](https://www.sqlalchemy.org/trac/ticket/5513)'
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5513](https://www.sqlalchemy.org/trac/ticket/5513)
- en: sql
  id: totrans-1888
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired an issue where the “ORDER BY” clause rendering a label name rather
    than a complete expression, which is particularly important for SQL Server, would
    fail to occur if the expression were enclosed in a parenthesized grouping in some
    cases. This case has been added to test support. The change additionally adjusts
    the “automatically add ORDER BY columns when DISTINCT is present” behavior of
    ORM query, deprecated in 1.4, to more accurately detect column expressions that
    are already present.
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即“ORDER BY”子句渲染标签名称而不是完整表达式，在某些情况下，如果表达式被括在括号分组中，将无法发生。此案例已添加到测试支持中。此更改还调整了ORM查询的“在DISTINCT存在时自动添加ORDER
    BY列”的行为，在1.4中已弃用，以更准确地检测已存在的列表达式。
- en: 'References: [#5470](https://www.sqlalchemy.org/trac/ticket/5470)'
  id: totrans-1891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5470](https://www.sqlalchemy.org/trac/ticket/5470)
- en: '**[sql] [bug] [datatypes]**'
  id: totrans-1892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [datatypes]**'
- en: The `LookupError` message will now provide the user with up to four possible
    values that a column is constrained to via the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"). Values longer than 11 characters will be truncated and
    replaced with ellipses. Pull request courtesy Ramon Williams.
  id: totrans-1893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LookupError`消息现在将向用户提供通过[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")约束的列的最多四个可能值。长度超过11个字符的值将被截断并替换为省略号。拉取请求由Ramon Williams提供。'
- en: 'References: [#4733](https://www.sqlalchemy.org/trac/ticket/4733)'
  id: totrans-1894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4733](https://www.sqlalchemy.org/trac/ticket/4733)
- en: '**[sql] [bug]**'
  id: totrans-1895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") feature would not take effect
    when the [`Sequence.next_value()`](../core/defaults.html#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") function function for a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") were used in the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter and the create table DDL were emitted.
  id: totrans-1896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")功能在使用[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")的[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数中的[`Sequence.next_value()`](../core/defaults.html#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value")函数时不起作用，并且创建表DDL被发出。
- en: 'References: [#5500](https://www.sqlalchemy.org/trac/ticket/5500)'
  id: totrans-1897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5500](https://www.sqlalchemy.org/trac/ticket/5500)
- en: postgresql
  id: totrans-1898
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the return type for the various RANGE comparison operators
    would itself be the same RANGE type rather than BOOLEAN, which would cause an
    undesirable result in the case that a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that defined result-processing behavior were
    in use. Pull request courtesy Jim Bosch.
  id: totrans-1900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了各种RANGE比较运算符的返回类型本身将是相同的RANGE类型而不是BOOLEAN的问题，这将导致在使用定义了结果处理行为的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")时产生不良��果。拉取请求由Jim Bosch提供。
- en: 'References: [#5476](https://www.sqlalchemy.org/trac/ticket/5476)'
  id: totrans-1901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5476](https://www.sqlalchemy.org/trac/ticket/5476)
- en: mysql
  id: totrans-1902
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-1903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: The MySQL dialect will render FROM DUAL for a SELECT statement that has no FROM
    clause but has a WHERE clause. This allows things like “SELECT 1 WHERE EXISTS
    (subquery)” kinds of queries to be used as well as other use cases.
  id: totrans-1904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言将为没有FROM子句但有WHERE子句的SELECT语句呈现FROM DUAL。这允许像“SELECT 1 WHERE EXISTS (subquery)”这样的查询以及其他用例。
- en: 'References: [#5481](https://www.sqlalchemy.org/trac/ticket/5481)'
  id: totrans-1905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5481](https://www.sqlalchemy.org/trac/ticket/5481)
- en: '**[mysql] [bug]**'
  id: totrans-1906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed an issue where CREATE TABLE statements were not specifying the COLLATE
    keyword correctly.
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CREATE TABLE语句未正确指定COLLATE关键字的问题。
- en: 'References: [#5411](https://www.sqlalchemy.org/trac/ticket/5411)'
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5411](https://www.sqlalchemy.org/trac/ticket/5411)
- en: '**[mysql] [bug]**'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added MariaDB code 1927 to the list of “disconnect” codes, as recent MariaDB
    versions apparently use this code when the database server was stopped.
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将MariaDB代码1927添加到“断开连接”代码列表中，因为最近的MariaDB版本显然在数据库服务器停止时使用此代码。
- en: 'References: [#5493](https://www.sqlalchemy.org/trac/ticket/5493)'
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5493](https://www.sqlalchemy.org/trac/ticket/5493)
- en: sqlite
  id: totrans-1912
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [mssql] [reflection]**'
  id: totrans-1913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误] [mssql] [反射]**'
- en: Applied a sweep through all included dialects to ensure names that contain single
    or double quotes are properly escaped when querying system tables, for all [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") methods that accept object names as
    an argument (e.g. table names, view names, etc). SQLite and MSSQL contained two
    quoting issues that were repaired.
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有包含的方言进行了一次扫描，以确保在查询系统表时，包含单引号或双引号的名称在所有接受对象名称作为参数的[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")方法中得到正确转义（例如表名、视图名等）。修复了SQLite和MSSQL中存在的两个引号问题。
- en: 'References: [#5456](https://www.sqlalchemy.org/trac/ticket/5456)'
  id: totrans-1915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5456](https://www.sqlalchemy.org/trac/ticket/5456)
- en: mssql
  id: totrans-1916
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [sql]**'
  id: totrans-1917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [sql]**'
- en: Fixed bug where the mssql dialect incorrectly escaped object names that contained
    ‘]’ character(s).
  id: totrans-1918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mssql方言错误地转义包含‘]’字符的对象名称的错误。
- en: 'References: [#5467](https://www.sqlalchemy.org/trac/ticket/5467)'
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5467](https://www.sqlalchemy.org/trac/ticket/5467)
- en: misc
  id: totrans-1920
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[usecase] [py3k]**'
  id: totrans-1921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [py3k]**'
- en: Added a `**kw` argument to the `DeclarativeMeta.__init__()` method. This allows
    a class to support the [**PEP 487**](https://peps.python.org/pep-0487/) metaclass
    hook `__init_subclass__`. Pull request courtesy Ewen Gillies.
  id: totrans-1922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向`DeclarativeMeta.__init__()`方法添加了一个`**kw`参数。这允许类支持[**PEP 487**](https://peps.python.org/pep-0487/)元类钩子`__init_subclass__`。感谢Ewen
    Gillies的拉取请求。
- en: 'References: [##5357](https://www.sqlalchemy.org/trac/ticket/#5357)'
  id: totrans-1923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[##5357](https://www.sqlalchemy.org/trac/ticket/#5357)
- en: 1.3.18
  id: totrans-1924
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.18
- en: 'Released: June 25, 2020'
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年6月25日
- en: orm
  id: totrans-1926
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-1927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Improve error message when using [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") in a query where the first entity is not a mapped
    class.
  id: totrans-1928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询中使用[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")时，如果第一个实体不是映射类，则改进错误消息。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-1929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: '**[orm] [usecase]**'
  id: totrans-1930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added a new parameter [`query_expression.default_expr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.default_expr
    "sqlalchemy.orm.query_expression") to the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") construct, which will be appled to queries
    automatically if the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") option is not used. Pull request courtesy Haoyu
    Sun.
  id: totrans-1931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")构造添加了一个新参数[`query_expression.default_expr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.default_expr
    "sqlalchemy.orm.query_expression")，如果未使用[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")选项，则将自动应用于查询。感谢Haoyu Sun的拉取请求。
- en: 'References: [#5198](https://www.sqlalchemy.org/trac/ticket/5198)'
  id: totrans-1932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5198](https://www.sqlalchemy.org/trac/ticket/5198)
- en: examples
  id: totrans-1933
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [change]**'
  id: totrans-1934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [更改]**'
- en: Added new option `--raw` to the examples.performance suite which will dump the
    raw profile test for consumption by any number of profiling visualizer tools.
    Removed the “runsnake” option as runsnake is very hard to build at this point;
  id: totrans-1935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在examples.performance套件中添加了新选项`--raw`，它将为任意数量的性能分析可视化工具提供原始配置文件测试。删除了“runsnake”选项，因为在这一点上很难构建runsnake；
- en: engine
  id: totrans-1936
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Further refinements to the fixes to the “reset” agent fixed in [#5326](https://www.sqlalchemy.org/trac/ticket/5326),
    which now emits a warning when it is not being correctly invoked and corrects
    for the behavior. Additional scenarios have been identified and fixed where this
    warning was being emitted.
  id: totrans-1938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步完善了对[#5326](https://www.sqlalchemy.org/trac/ticket/5326)中修复的“reset”代理的修复，现在在未正确调用时会发出警告并纠正行为。已经确定并修复了发出此警告的其他情况。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: '**[engine] [bug]**'
  id: totrans-1940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed issue in [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object where stringifying the object would not URL encode special characters,
    preventing the URL from being re-consumable as a real URL. Pull request courtesy
    Miguel Grinberg.
  id: totrans-1941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象中的问题，其中对对象进行字符串化不会对特殊字符进行URL编码，导致URL无法重新使用为真实URL。感谢Miguel
    Grinberg的拉取请求。
- en: 'References: [#5341](https://www.sqlalchemy.org/trac/ticket/5341)'
  id: totrans-1942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5341](https://www.sqlalchemy.org/trac/ticket/5341)
- en: sql
  id: totrans-1943
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-1944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [使用案例]**'
- en: Added a “.schema” parameter to the [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") construct, allowing ad-hoc table expressions
    to also include a schema name. Pull request courtesy Dylan Modesitt.
  id: totrans-1945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    构造中添加了一个“.schema”参数，允许临时表达式也包括模式名称。拉取请求由 Dylan Modesitt 提供。
- en: 'References: [#5309](https://www.sqlalchemy.org/trac/ticket/5309)'
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5309](https://www.sqlalchemy.org/trac/ticket/5309)
- en: '**[sql] [change] [sybase]**'
  id: totrans-1947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [更改] [sybase]**'
- en: Added `.offset` support to sybase dialect. Pull request courtesy Alan D. Snow.
  id: totrans-1948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 sybase 方言添加了 `.offset` 支持。拉取请求由 Alan D. Snow 提供。
- en: 'References: [#5294](https://www.sqlalchemy.org/trac/ticket/5294)'
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5294](https://www.sqlalchemy.org/trac/ticket/5294)
- en: '**[sql] [bug]**'
  id: totrans-1950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Correctly apply self_group in type_coerce element.
  id: totrans-1951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正确应用 `self_group` 在 `type_coerce` 元素中。
- en: The type coerce element did not correctly apply grouping rules when using in
    an expression
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式中使用时，类型转换元素未正确应用分组规则。
- en: 'References: [#5344](https://www.sqlalchemy.org/trac/ticket/5344)'
  id: totrans-1953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5344](https://www.sqlalchemy.org/trac/ticket/5344)
- en: '**[sql] [bug]**'
  id: totrans-1954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Added [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") output to the generic SQL string
    that is produced when calling `str()` on a statement. Previously, this clause
    would be omitted under the assumption that it was dialect specific. The hint text
    is presented within brackets to indicate the rendering of such hints varies among
    backends.
  id: totrans-1955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") 输出添加到在语句上调用 `str()` 时生成的通用 SQL 字符串中。以前，此子句将被省略，假定它是方言特定的。提示文本以括号表示，以指示此类提示的渲染在后端之间有所不同。
- en: 'References: [#5353](https://www.sqlalchemy.org/trac/ticket/5353)'
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5353](https://www.sqlalchemy.org/trac/ticket/5353)
- en: '**[sql] [schema]**'
  id: totrans-1957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [模式]**'
- en: Introduce `IdentityOptions` to store common parameters for sequences and identity
    columns.
  id: totrans-1958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入 `IdentityOptions` 来存储序列和标识列的常见参数。
- en: 'References: [#5324](https://www.sqlalchemy.org/trac/ticket/5324)'
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5324](https://www.sqlalchemy.org/trac/ticket/5324)
- en: schema
  id: totrans-1960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-1961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed issue where `dialect_options` were omitted when a database object (e.g.,
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"))
    was copied using `tometadata()`.
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 `tometadata()` 复制数据库对象（例如 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）时省略 `dialect_options` 的问题。
- en: 'References: [#5276](https://www.sqlalchemy.org/trac/ticket/5276)'
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5276](https://www.sqlalchemy.org/trac/ticket/5276)
- en: mysql
  id: totrans-1964
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-1965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [使用案例]**'
- en: Implemented row-level locking support for mysql. Pull request courtesy Quentin
    Somerville.
  id: totrans-1966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 mysql 实现了行级锁定支持。拉取请求由 Quentin Somerville 提供。
- en: 'References: [#4860](https://www.sqlalchemy.org/trac/ticket/4860)'
  id: totrans-1967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4860](https://www.sqlalchemy.org/trac/ticket/4860)
- en: sqlite
  id: totrans-1968
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-1969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [使用案例]**'
- en: SQLite 3.31 added support for computed column. This change enables their support
    in SQLAlchemy when targeting SQLite.
  id: totrans-1970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 3.31 添加了对计算列的支持。此更改在针对 SQLite 时启用了它们在 SQLAlchemy 中的支持。
- en: 'References: [#5297](https://www.sqlalchemy.org/trac/ticket/5297)'
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5297](https://www.sqlalchemy.org/trac/ticket/5297)
- en: '**[sqlite] [bug]**'
  id: totrans-1972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Added “exists” to the list of reserved words for SQLite so that this word will
    be quoted when used as a label or column name. Pull request courtesy Thodoris
    Sotiropoulos.
  id: totrans-1973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“exists”添加到 SQLite 的保留字列表中，以便在将其用作标签或列名时将其引用。拉取请求由 Thodoris Sotiropoulos 提供。
- en: 'References: [#5395](https://www.sqlalchemy.org/trac/ticket/5395)'
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5395](https://www.sqlalchemy.org/trac/ticket/5395)
- en: mssql
  id: totrans-1975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [change]**'
  id: totrans-1976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [更改]**'
- en: Moved the `supports_sane_rowcount_returning = False` requirement from the `PyODBCConnector`
    level to the `MSDialect_pyodbc` since pyodbc does work properly in some circumstances.
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `supports_sane_rowcount_returning = False` 的要求从 `PyODBCConnector` 级别移到 `MSDialect_pyodbc`，因为在某些情况下
    pyodbc 不正确工作。
- en: 'References: [#5321](https://www.sqlalchemy.org/trac/ticket/5321)'
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5321](https://www.sqlalchemy.org/trac/ticket/5321)
- en: '**[mssql] [bug]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Refined the logic used by the SQL Server dialect to interpret multi-part schema
    names that contain many dots, to not actually lose any dots if the name does not
    have bracking or quoting used, and additionally to support a “dbname” token that
    has many parts including that it may have multiple, independently-bracketed sections.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了SQL Server方言用于解释包含许多点的多部分模式名称的逻辑，以便在名称不使用括号或引号时不会实际丢失任何点，并且还支持一个包含多个部分的“dbname”标记，包括它可能具有多个、独立括号的部分。
- en: 'References: [#5364](https://www.sqlalchemy.org/trac/ticket/5364), [#5366](https://www.sqlalchemy.org/trac/ticket/5366)'
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5364](https://www.sqlalchemy.org/trac/ticket/5364), [#5366](https://www.sqlalchemy.org/trac/ticket/5366)
- en: '**[mssql] [bug] [pyodbc]**'
  id: totrans-1982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [pyodbc]**'
- en: Fixed an issue in the pyodbc connector such that a warning about pyodbc “drivername”
    would be emitted when using a totally empty URL. Empty URLs are normal when producing
    a non-connected dialect object or when using the “creator” argument to create_engine().
    The warning now only emits if the driver name is missing but other parameters
    are still present.
  id: totrans-1983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc连接器中的一个问题，即在使用完全空的URL时会发出关于pyodbc“drivername”的警告。当生成非连接的方言对象或在使用“creator”参数创建引擎时，空URL是正常的。现在只有在缺少驱动程序名称但其他参数仍然存在时才会发出警告。
- en: 'References: [#5346](https://www.sqlalchemy.org/trac/ticket/5346)'
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5346](https://www.sqlalchemy.org/trac/ticket/5346)
- en: '**[mssql] [bug]**'
  id: totrans-1985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed issue with assembling the ODBC connection string for the pyodbc DBAPI.
    Tokens containing semicolons and/or braces “{}” were not being correctly escaped,
    causing the ODBC driver to misinterpret the connection string attributes.
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为pyodbc DBAPI组装ODBC连接字符串时的问题。包含分号和/或大括号“{}”的标记没有被正确转义，导致ODBC驱动程序错误解释连接字符串属性。
- en: 'References: [#5373](https://www.sqlalchemy.org/trac/ticket/5373)'
  id: totrans-1987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5373](https://www.sqlalchemy.org/trac/ticket/5373)
- en: '**[mssql] [bug]**'
  id: totrans-1988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed issue where `datetime.time` parameters were being converted to `datetime.datetime`,
    making them incompatible with comparisons like `>=` against an actual [`TIME`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIME
    "sqlalchemy.dialects.mssql.TIME") column.
  id: totrans-1989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中`datetime.time`参数被转换为`datetime.datetime`，导致它们与实际的[`TIME`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIME
    "sqlalchemy.dialects.mssql.TIME")列进行比较时不兼容。
- en: 'References: [#5339](https://www.sqlalchemy.org/trac/ticket/5339)'
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5339](https://www.sqlalchemy.org/trac/ticket/5339)
- en: '**[mssql] [bug]**'
  id: totrans-1991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed an issue where the `is_disconnect` function in the SQL Server pyodbc dialect
    was incorrectly reporting the disconnect state when the exception message had
    a substring that matched a SQL Server ODBC error code.
  id: totrans-1992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server pyodbc方言中`is_disconnect`函数在异常消息中包含与SQL Server ODBC错误代码匹配的子字符串时错误报告断开状态的问题。
- en: 'References: [#5359](https://www.sqlalchemy.org/trac/ticket/5359)'
  id: totrans-1993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5359](https://www.sqlalchemy.org/trac/ticket/5359)
- en: oracle
  id: totrans-1994
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [reflection]**'
  id: totrans-1995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误] [反射]**'
- en: Fixed bug in Oracle dialect where indexes that contain the full set of primary
    key columns would be mistaken as the primary key index itself, which is omitted,
    even if there were multiples. The check has been refined to compare the name of
    the primary key constraint against the index name itself, rather than trying to
    guess based on the columns present in the index.
  id: totrans-1996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的一个错误，其中包含完整主键列集的索引会被误认为是主键索引本身，即使存在多个也会被省略。检查已经被优化，以比较主键约束的名称与索引名称本身，而不是根据索引中存在的列来猜测。
- en: 'References: [#5421](https://www.sqlalchemy.org/trac/ticket/5421)'
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5421](https://www.sqlalchemy.org/trac/ticket/5421)
- en: orm
  id: totrans-1998
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-1999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Improve error message when using [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") in a query where the first entity is not a mapped
    class.
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询中使用[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")时，如果第一个实体不是映射类，则改进错误消息。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-2001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: '**[orm] [usecase]**'
  id: totrans-2002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added a new parameter [`query_expression.default_expr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.default_expr
    "sqlalchemy.orm.query_expression") to the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") construct, which will be appled to queries
    automatically if the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") option is not used. Pull request courtesy Haoyu
    Sun.
  id: totrans-2003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") 构造添加了一个新参数 [`query_expression.default_expr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.default_expr
    "sqlalchemy.orm.query_expression")，如果未使用 [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") 选项，则会自动应用于查询。感谢 Haoyu Sun 的拉取请求。
- en: 'References: [#5198](https://www.sqlalchemy.org/trac/ticket/5198)'
  id: totrans-2004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5198](https://www.sqlalchemy.org/trac/ticket/5198)
- en: examples
  id: totrans-2005
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [change]**'
  id: totrans-2006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [change]**'
- en: Added new option `--raw` to the examples.performance suite which will dump the
    raw profile test for consumption by any number of profiling visualizer tools.
    Removed the “runsnake” option as runsnake is very hard to build at this point;
  id: totrans-2007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 examples.performance 套件添加了新选项 `--raw`，该选项将原始配置文件测试转储以供任意数量的性能分析可视化工具使用。删除了“runsnake”选项，因为此时
    runsnake 非常难以构建；
- en: engine
  id: totrans-2008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Further refinements to the fixes to the “reset” agent fixed in [#5326](https://www.sqlalchemy.org/trac/ticket/5326),
    which now emits a warning when it is not being correctly invoked and corrects
    for the behavior. Additional scenarios have been identified and fixed where this
    warning was being emitted.
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步完善了在 [#5326](https://www.sqlalchemy.org/trac/ticket/5326) 中修复的“reset”代理的修复程序，现在在未正确调用时会发出警告并纠正其行为。已经确定并修复了额外的情景，在这些情况下会发出此警告。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: '**[engine] [bug]**'
  id: totrans-2012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object where stringifying the object would not URL encode special characters,
    preventing the URL from being re-consumable as a real URL. Pull request courtesy
    Miguel Grinberg.
  id: totrans-2013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象中的问题已经修复，该对象的字符串化不会对特殊字符进行 URL 编码，导致 URL 无法作为真实的 URL 重新使用。感谢 Miguel Grinberg
    的拉取请求。'
- en: 'References: [#5341](https://www.sqlalchemy.org/trac/ticket/5341)'
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5341](https://www.sqlalchemy.org/trac/ticket/5341)
- en: sql
  id: totrans-2015
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added a “.schema” parameter to the [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") construct, allowing ad-hoc table expressions
    to also include a schema name. Pull request courtesy Dylan Modesitt.
  id: totrans-2017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    构造添加了一个“.schema”参数，允许临时表达式也包括模式名称。感谢 Dylan Modesitt 的拉取请求。
- en: 'References: [#5309](https://www.sqlalchemy.org/trac/ticket/5309)'
  id: totrans-2018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5309](https://www.sqlalchemy.org/trac/ticket/5309)
- en: '**[sql] [change] [sybase]**'
  id: totrans-2019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change] [sybase]**'
- en: Added `.offset` support to sybase dialect. Pull request courtesy Alan D. Snow.
  id: totrans-2020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 sybase 方言添加了 `.offset` 支持。感谢 Alan D. Snow 的拉取请求。
- en: 'References: [#5294](https://www.sqlalchemy.org/trac/ticket/5294)'
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5294](https://www.sqlalchemy.org/trac/ticket/5294)
- en: '**[sql] [bug]**'
  id: totrans-2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Correctly apply self_group in type_coerce element.
  id: totrans-2023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正确应用 self_group 在 type_coerce 元素中。
- en: The type coerce element did not correctly apply grouping rules when using in
    an expression
  id: totrans-2024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在表达式中使用时，类型强制元素未正确应用分组规则
- en: 'References: [#5344](https://www.sqlalchemy.org/trac/ticket/5344)'
  id: totrans-2025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5344](https://www.sqlalchemy.org/trac/ticket/5344)
- en: '**[sql] [bug]**'
  id: totrans-2026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") output to the generic SQL string
    that is produced when calling `str()` on a statement. Previously, this clause
    would be omitted under the assumption that it was dialect specific. The hint text
    is presented within brackets to indicate the rendering of such hints varies among
    backends.
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用语句的`str()`时，现已将 [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") 的输出添加到产生的通用 SQL 字符串中。先前，该子句会被省略，因为假设它是方言特定的。提示文本显示在括号内，以指示此类提示的呈现在后端之间变化。
- en: 'References: [#5353](https://www.sqlalchemy.org/trac/ticket/5353)'
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5353](https://www.sqlalchemy.org/trac/ticket/5353)
- en: '**[sql] [schema]**'
  id: totrans-2029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [schema]**'
- en: Introduce `IdentityOptions` to store common parameters for sequences and identity
    columns.
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入 `IdentityOptions` 以存储序列和标识列的常见参数。
- en: 'References: [#5324](https://www.sqlalchemy.org/trac/ticket/5324)'
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5324](https://www.sqlalchemy.org/trac/ticket/5324)
- en: schema
  id: totrans-2032
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-2033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed issue where `dialect_options` were omitted when a database object (e.g.,
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"))
    was copied using `tometadata()`.
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 `tometadata()` 复制数据库对象（例如 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）时省略 `dialect_options` 的问题。
- en: 'References: [#5276](https://www.sqlalchemy.org/trac/ticket/5276)'
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5276](https://www.sqlalchemy.org/trac/ticket/5276)
- en: mysql
  id: totrans-2036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [用例]**'
- en: Implemented row-level locking support for mysql. Pull request courtesy Quentin
    Somerville.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 mysql 实现了行级锁定支持。感谢 Quentin Somerville 的拉取请求。
- en: 'References: [#4860](https://www.sqlalchemy.org/trac/ticket/4860)'
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4860](https://www.sqlalchemy.org/trac/ticket/4860)
- en: sqlite
  id: totrans-2040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-2041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: SQLite 3.31 added support for computed column. This change enables their support
    in SQLAlchemy when targeting SQLite.
  id: totrans-2042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 3.31 添加了对计算列的支持。此更改在针对 SQLite 时启用了 SQLAlchemy 对其的支持。
- en: 'References: [#5297](https://www.sqlalchemy.org/trac/ticket/5297)'
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5297](https://www.sqlalchemy.org/trac/ticket/5297)
- en: '**[sqlite] [bug]**'
  id: totrans-2044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Added “exists” to the list of reserved words for SQLite so that this word will
    be quoted when used as a label or column name. Pull request courtesy Thodoris
    Sotiropoulos.
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“exists”添加到 SQLite 的保留字列表中，以便在用作标签或列名时将此单词引用。感谢 Thodoris Sotiropoulos 的拉取请求。
- en: 'References: [#5395](https://www.sqlalchemy.org/trac/ticket/5395)'
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5395](https://www.sqlalchemy.org/trac/ticket/5395)
- en: mssql
  id: totrans-2047
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [change]**'
  id: totrans-2048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [更改]**'
- en: Moved the `supports_sane_rowcount_returning = False` requirement from the `PyODBCConnector`
    level to the `MSDialect_pyodbc` since pyodbc does work properly in some circumstances.
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `supports_sane_rowcount_returning = False` 的要求从 `PyODBCConnector` 级别移至 `MSDialect_pyodbc`，因为在某些情况下
    pyodbc 可以正常工作。
- en: 'References: [#5321](https://www.sqlalchemy.org/trac/ticket/5321)'
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5321](https://www.sqlalchemy.org/trac/ticket/5321)
- en: '**[mssql] [bug]**'
  id: totrans-2051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Refined the logic used by the SQL Server dialect to interpret multi-part schema
    names that contain many dots, to not actually lose any dots if the name does not
    have bracking or quoting used, and additionally to support a “dbname” token that
    has many parts including that it may have multiple, independently-bracketed sections.
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了 SQL Server 方言用于解释包含许多点的多部分模式名称的逻辑，以便在名称未使用括号或引号时实际上不会丢失任何点，并且还支持具有许多部分的“dbname”标记，包括可能具有多个、独立括号的部分。
- en: 'References: [#5364](https://www.sqlalchemy.org/trac/ticket/5364), [#5366](https://www.sqlalchemy.org/trac/ticket/5366)'
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5364](https://www.sqlalchemy.org/trac/ticket/5364), [#5366](https://www.sqlalchemy.org/trac/ticket/5366)
- en: '**[mssql] [bug] [pyodbc]**'
  id: totrans-2054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [pyodbc]**'
- en: Fixed an issue in the pyodbc connector such that a warning about pyodbc “drivername”
    would be emitted when using a totally empty URL. Empty URLs are normal when producing
    a non-connected dialect object or when using the “creator” argument to create_engine().
    The warning now only emits if the driver name is missing but other parameters
    are still present.
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pyodbc 连接器中的问题，当使用完全空的 URL 时会发出关于 pyodbc “drivername”的警告。在生成非连接的方言对象或在使用“creator”参数创建
    create_engine() 时，空 URL 是正常的。现在只有在缺少驱动程序名称但其他参数仍然存在时才会发出警告。
- en: 'References: [#5346](https://www.sqlalchemy.org/trac/ticket/5346)'
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5346](https://www.sqlalchemy.org/trac/ticket/5346)
- en: '**[mssql] [bug]**'
  id: totrans-2057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed issue with assembling the ODBC connection string for the pyodbc DBAPI.
    Tokens containing semicolons and/or braces “{}” were not being correctly escaped,
    causing the ODBC driver to misinterpret the connection string attributes.
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为 pyodbc DBAPI 组装 ODBC 连接字符串的问题。包含分号和/或大括号“{}”的标记未能正确转义，导致 ODBC 驱动程序错误解释连接字符串属性。
- en: 'References: [#5373](https://www.sqlalchemy.org/trac/ticket/5373)'
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5373](https://www.sqlalchemy.org/trac/ticket/5373)
- en: '**[mssql] [bug]**'
  id: totrans-2060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed issue where `datetime.time` parameters were being converted to `datetime.datetime`,
    making them incompatible with comparisons like `>=` against an actual [`TIME`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIME
    "sqlalchemy.dialects.mssql.TIME") column.
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将 `datetime.time` 参数转换为 `datetime.datetime` 的问题，使其与实际 [`TIME`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIME
    "sqlalchemy.dialects.mssql.TIME") 列进行 `>=` 等比较时不兼容。
- en: 'References: [#5339](https://www.sqlalchemy.org/trac/ticket/5339)'
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5339](https://www.sqlalchemy.org/trac/ticket/5339)
- en: '**[mssql] [bug]**'
  id: totrans-2063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed an issue where the `is_disconnect` function in the SQL Server pyodbc dialect
    was incorrectly reporting the disconnect state when the exception message had
    a substring that matched a SQL Server ODBC error code.
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server pyodbc方言中的一个问题，即当异常消息中包含与SQL Server ODBC错误代码匹配的子字符串时，`is_disconnect`函数会错误地报告断开状态。
- en: 'References: [#5359](https://www.sqlalchemy.org/trac/ticket/5359)'
  id: totrans-2065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5359](https://www.sqlalchemy.org/trac/ticket/5359)
- en: oracle
  id: totrans-2066
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [reflection]**'
  id: totrans-2067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [reflection]**'
- en: Fixed bug in Oracle dialect where indexes that contain the full set of primary
    key columns would be mistaken as the primary key index itself, which is omitted,
    even if there were multiples. The check has been refined to compare the name of
    the primary key constraint against the index name itself, rather than trying to
    guess based on the columns present in the index.
  id: totrans-2068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的一个bug，即包含完整主键列集的索引会被误认为是主键索引本身，即使存在多个索引也会被省略。检查已经被细化为根据主键约束的名称与索引名称本身进行比较，而不是基于索引中存在的列来猜测。
- en: 'References: [#5421](https://www.sqlalchemy.org/trac/ticket/5421)'
  id: totrans-2069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5421](https://www.sqlalchemy.org/trac/ticket/5421)
- en: 1.3.17
  id: totrans-2070
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.17
- en: 'Released: May 13, 2020'
  id: totrans-2071
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年5月13日
- en: orm
  id: totrans-2072
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added an accessor [`Comparator.expressions`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.Comparator.expressions
    "sqlalchemy.orm.ColumnProperty.Comparator.expressions") which provides access
    to the group of columns mapped under a multi-column [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") attribute.
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个访问器[`Comparator.expressions`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.Comparator.expressions
    "sqlalchemy.orm.ColumnProperty.Comparator.expressions")，它提供对在多列[`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")属性下映射的列组的访问。
- en: 'References: [#5262](https://www.sqlalchemy.org/trac/ticket/5262)'
  id: totrans-2075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5262](https://www.sqlalchemy.org/trac/ticket/5262)
- en: '**[orm] [usecase]**'
  id: totrans-2076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Introduce [`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") flag in a relationship to control if the synchronization
    events that mutate the in-Python attributes are added. This supersedes the previous
    change [#5149](https://www.sqlalchemy.org/trac/ticket/5149), which warned that
    `viewonly=True` relationship target of a back_populates or backref configuration
    would be disallowed.
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了[`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship")标志，用于控制在关系中添加用于同步修改Python属性的事件。这取代了先前的更改[#5149](https://www.sqlalchemy.org/trac/ticket/5149)，该更改警告称`viewonly=True`关系的back_populates或backref配置的目标将被禁止。
- en: 'References: [#5237](https://www.sqlalchemy.org/trac/ticket/5237)'
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5237](https://www.sqlalchemy.org/trac/ticket/5237)
- en: '**[orm] [bug]**'
  id: totrans-2079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") as the target of a join via `RelationshipComparator.of_type()`
    on a mapper that already has a subquery-based with_polymorphic setting that’s
    equivalent to the one requested would not correctly alias the ON clause in the
    join.
  id: totrans-2080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在已经具有与请求的相同的基于子查询的with_polymorphic设置的映射器上，将[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")用作通过`RelationshipComparator.of_type()`进行连接的目标时，ON子句在连接中不会正确别名化的问题。
- en: 'References: [#5288](https://www.sqlalchemy.org/trac/ticket/5288)'
  id: totrans-2081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5288](https://www.sqlalchemy.org/trac/ticket/5288)
- en: '**[orm] [bug]**'
  id: totrans-2082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in the area of where loader options such as selectinload() interact
    with the baked query system, such that the caching of a query is not supposed
    to occur if the loader options themselves have elements such as with_polymorphic()
    objects in them that currently are not cache-compatible. The baked loader could
    sometimes not fully invalidate itself in these some of these scenarios leading
    to missed eager loads.
  id: totrans-2083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个在加载器选项（如selectinload()）与烘焙查询系统交互的领域中的问题，即如果加载器选项本身具有当前不兼容缓存的元素（如with_polymorphic()对象），则不应发生查询的缓存。在这些一些情况下，烘焙加载器有时无法完全使自身失效，导致错过了急切加载。
- en: 'References: [#5303](https://www.sqlalchemy.org/trac/ticket/5303)'
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5303](https://www.sqlalchemy.org/trac/ticket/5303)
- en: '**[orm] [bug]**'
  id: totrans-2085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the internal “identity set” implementation, which is a set that hashes
    objects on their id() rather than their hash values, to not actually call the
    `__hash__()` method of the objects, which are typically user-mapped objects. Some
    methods were calling this method as a side effect of the implementation.
  id: totrans-2086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了内部的“identity set”实现，该集合根据其id()而不是其哈希值对对象进行哈希处理，以避免实际调用对象的`__hash__()`方法，这些对象通常是用户映射的对象。一些方法调用了这个方法作为实现的副作用。
- en: 'References: [#5304](https://www.sqlalchemy.org/trac/ticket/5304)'
  id: totrans-2087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5304](https://www.sqlalchemy.org/trac/ticket/5304)
- en: '**[orm] [bug]**'
  id: totrans-2088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An informative error message is raised when an ORM many-to-one comparison is
    attempted against an object that is not an actual mapped instance. Comparisons
    such as those to scalar subqueries aren’t supported; generalized comparison with
    subqueries is better achieved using [`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has").
  id: totrans-2089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试对不是实际映射实例的对象进行ORM多对一比较时，会引发一个信息性错误消息。不支持与标量子查询等比较；使用[`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has")更好地实现了与子查询的广义比较。
- en: 'References: [#5269](https://www.sqlalchemy.org/trac/ticket/5269)'
  id: totrans-2090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5269](https://www.sqlalchemy.org/trac/ticket/5269)
- en: engine
  id: totrans-2091
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed fairly critical issue where the DBAPI connection could be returned to
    the connection pool while still in an un-rolled-back state. The reset agent responsible
    for rolling back the connection could be corrupted in the case that the transaction
    was “closed” without being rolled back or committed, which can occur in some scenarios
    when using ORM sessions and emitting .close() in a certain pattern involving savepoints.
    The fix ensures that the reset agent is always active.
  id: totrans-2093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当关键的问题，即在DBAPI连接仍处于未回滚状态时可能将其返回到连接池。负责回滚连接的重置代理可能在事务“关闭”而未回滚或提交的情况下出现损坏，在使用ORM会话并以涉及保存点的特定模式发出
    .close() 时可能发生这种情况。修复确保重置代理始终处于活动状态。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-2094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: schema
  id: totrans-2095
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-2096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed issue where an [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") that is deferred in being associated with a table,
    such as as when it contains a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is not associated with any [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") yet, would fail to attach correctly if it also contained
    a non table-oriented expression.
  id: totrans-2097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即延迟与表关联的[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")，例如当它包含一个尚未与任何[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时，如果还包含非表导向表达式，则无法正确附加。
- en: 'References: [#5298](https://www.sqlalchemy.org/trac/ticket/5298)'
  id: totrans-2098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5298](https://www.sqlalchemy.org/trac/ticket/5298)
- en: '**[schema] [bug]**'
  id: totrans-2099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: A warning is emitted when making use of the [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") attribute as well as the [`sort_tables()`](../core/ddl.html#sqlalchemy.schema.sort_tables
    "sqlalchemy.schema.sort_tables") function, and the given tables cannot be correctly
    sorted due to a cyclic dependency between foreign key constraints. In this case,
    the functions will no longer sort the involved tables by foreign key, and a warning
    will be emitted. Other tables that are not part of the cycle will still be returned
    in dependency order. Previously, the sorted_table routines would return a collection
    that would unconditionally omit all foreign keys when a cycle was detected, and
    no warning was emitted.
  id: totrans-2100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")属性以及[`sort_tables()`](../core/ddl.html#sqlalchemy.schema.sort_tables
    "sqlalchemy.schema.sort_tables")函数时，如果由于外键约束之间存在循环依赖关系而无法正确排序给定的表，则会发出警告。在这种情况下，这些函数将不再按照外键对涉及的表进行排序，并将发出警告。不属于循环的其他表仍将按依赖顺序返回。以前，当检测到循环时，排序表例程将返回一个集合，该集合在检测到循环时将无条件省略所有外键，并且不会发出警告。
- en: 'References: [#5316](https://www.sqlalchemy.org/trac/ticket/5316)'
  id: totrans-2101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5316](https://www.sqlalchemy.org/trac/ticket/5316)
- en: '**[schema]**'
  id: totrans-2102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Add `comment` attribute to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") `__repr__` method.
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `__repr__` 方法中添加了 `comment` 属性。
- en: 'References: [#4138](https://www.sqlalchemy.org/trac/ticket/4138)'
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4138](https://www.sqlalchemy.org/trac/ticket/4138)
- en: postgresql
  id: totrans-2105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added support for columns or type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") or [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") in PostgreSQL. Previously a workaround
    was required in these use cases.
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 中添加了对 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")、[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")、[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 或 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 类型的列的支持。以前在这些情况下需要使用一种解决方法。
- en: 'References: [#5265](https://www.sqlalchemy.org/trac/ticket/5265)'
  id: totrans-2108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5265](https://www.sqlalchemy.org/trac/ticket/5265)
- en: '**[postgresql] [usecase]**'
  id: totrans-2109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Raise an explicit [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") when adding a table with a column of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") configured with [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") set to `False` when [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") is not set to `False`
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将配置为 [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") 设置为 `False` 且 [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") 未设置为 `False` 时，向表添加具有 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 类型的列时引发明确的 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")
- en: 'References: [#5266](https://www.sqlalchemy.org/trac/ticket/5266)'
  id: totrans-2111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5266](https://www.sqlalchemy.org/trac/ticket/5266)
- en: mssql
  id: totrans-2112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-2113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: Fix a regression introduced by the reflection of computed column in MSSQL when
    using the legacy TDS version 4.2\. The dialect will try to detect the protocol
    version of first connect and run in compatibility mode if it cannot detect it.
  id: totrans-2114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用旧版 TDS 版本 4.2 时，在 MSSQL 中反射计算列引入的回归。如果无法检测到协议版本，方言将尝试检测首次连接的协议版本并在兼容模式下运行。
- en: 'References: [#5255](https://www.sqlalchemy.org/trac/ticket/5255)'
  id: totrans-2115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5255](https://www.sqlalchemy.org/trac/ticket/5255)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-2116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: Fix a regression introduced by the reflection of computed column in MSSQL when
    using SQL server versions before 2012, which does not support the `concat` function.
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用不支持 `concat` 函数的 SQL Server 版本 2012 之前的 MSSQL 中反射计算列引入的回归。
- en: 'References: [#5271](https://www.sqlalchemy.org/trac/ticket/5271)'
  id: totrans-2118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5271](https://www.sqlalchemy.org/trac/ticket/5271)
- en: oracle
  id: totrans-2119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug]**'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [性能] [bug]**'
- en: Changed the implementation of fetching CLOB and BLOB objects to use cx_Oracle’s
    native implementation which fetches CLOB/BLOB objects inline with other result
    columns, rather than performing a separate fetch. As always, this can be disabled
    by setting auto_convert_lobs to False.
  id: totrans-2121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了获取 CLOB 和 BLOB 对象的实现方式，使用了 cx_Oracle 的原生实现，将 CLOB/BLOB 对象与其他结果列一起获取，而不是执行单独的获取操作。如往常一样，可以通过将
    auto_convert_lobs 设置为 False 来禁用此功能。
- en: As part of this change, the behavior of a CLOB that was given a blank string
    on INSERT now returns None on SELECT, which is now consistent with that of VARCHAR
    on Oracle.
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，给定空字符串的 CLOB 现在在 INSERT 时返回 None，在 SELECT 时与 Oracle 上的 VARCHAR 一致。
- en: 'References: [#5314](https://www.sqlalchemy.org/trac/ticket/5314)'
  id: totrans-2123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5314](https://www.sqlalchemy.org/trac/ticket/5314)
- en: '**[oracle] [bug]**'
  id: totrans-2124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Some modifications to how the cx_oracle dialect sets up per-column outputtype
    handlers for LOB and numeric datatypes to adjust for potential changes coming
    in cx_Oracle 8.
  id: totrans-2125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 cx_oracle 方言如何为 LOB 和数字数据类型设置每列输出类型处理程序进行了一些修改，以适应可能在 cx_Oracle 8 中出现的潜在更改。
- en: 'References: [#5246](https://www.sqlalchemy.org/trac/ticket/5246)'
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5246](https://www.sqlalchemy.org/trac/ticket/5246)
- en: misc
  id: totrans-2127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[change] [firebird]**'
  id: totrans-2128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[change] [firebird]**'
- en: Adjusted dialect loading for `firebird://` URIs so the external sqlalchemy-firebird
    dialect will be used if it has been installed, otherwise fall back to the (now
    deprecated) internal Firebird dialect.
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了`firebird://` URI的方言加载，如果已安装外部的sqlalchemy-firebird方言，则使用它，否则回退到（现在已弃用的）内部Firebird方言。
- en: 'References: [#5278](https://www.sqlalchemy.org/trac/ticket/5278)'
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5278](https://www.sqlalchemy.org/trac/ticket/5278)
- en: orm
  id: totrans-2131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added an accessor [`Comparator.expressions`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.Comparator.expressions
    "sqlalchemy.orm.ColumnProperty.Comparator.expressions") which provides access
    to the group of columns mapped under a multi-column [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") attribute.
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个访问器[`Comparator.expressions`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.Comparator.expressions
    "sqlalchemy.orm.ColumnProperty.Comparator.expressions")，它提供了对多列[`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")属性下映射的列组的访问。
- en: 'References: [#5262](https://www.sqlalchemy.org/trac/ticket/5262)'
  id: totrans-2134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5262](https://www.sqlalchemy.org/trac/ticket/5262)
- en: '**[orm] [usecase]**'
  id: totrans-2135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Introduce [`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") flag in a relationship to control if the synchronization
    events that mutate the in-Python attributes are added. This supersedes the previous
    change [#5149](https://www.sqlalchemy.org/trac/ticket/5149), which warned that
    `viewonly=True` relationship target of a back_populates or backref configuration
    would be disallowed.
  id: totrans-2136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了[`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship")标志，用于控制是否添加会改变Python属性的同步事件。这取代了先前的更改[#5149](https://www.sqlalchemy.org/trac/ticket/5149)，该更改警告说`viewonly=True`关系的目标back_populates或backref配置将被禁止。
- en: 'References: [#5237](https://www.sqlalchemy.org/trac/ticket/5237)'
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5237](https://www.sqlalchemy.org/trac/ticket/5237)
- en: '**[orm] [bug]**'
  id: totrans-2138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where using [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") as the target of a join via `RelationshipComparator.of_type()`
    on a mapper that already has a subquery-based with_polymorphic setting that’s
    equivalent to the one requested would not correctly alias the ON clause in the
    join.
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在已经具有与请求的等效的基于子查询的with_polymorphic设置的映射器上，通过`RelationshipComparator.of_type()`将[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")用作连接的目标时，不会正确别名连接中的ON子句。
- en: 'References: [#5288](https://www.sqlalchemy.org/trac/ticket/5288)'
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5288](https://www.sqlalchemy.org/trac/ticket/5288)
- en: '**[orm] [bug]**'
  id: totrans-2141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue in the area of where loader options such as selectinload() interact
    with the baked query system, such that the caching of a query is not supposed
    to occur if the loader options themselves have elements such as with_polymorphic()
    objects in them that currently are not cache-compatible. The baked loader could
    sometimes not fully invalidate itself in these some of these scenarios leading
    to missed eager loads.
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了加载器选项（如selectinload()）与烘焙查询系统交互的问题，即如果加载器选项本身包含当前不兼容缓存的元素（如with_polymorphic()对象），则不应该发生查询的缓存。在这些情况下，烘焙加载器有时无法完全使自身失效，导致错过了急切加载。
- en: 'References: [#5303](https://www.sqlalchemy.org/trac/ticket/5303)'
  id: totrans-2143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5303](https://www.sqlalchemy.org/trac/ticket/5303)
- en: '**[orm] [bug]**'
  id: totrans-2144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Modified the internal “identity set” implementation, which is a set that hashes
    objects on their id() rather than their hash values, to not actually call the
    `__hash__()` method of the objects, which are typically user-mapped objects. Some
    methods were calling this method as a side effect of the implementation.
  id: totrans-2145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了内部的“identity set”实现，它是一个根据对象的id()而不是它们的哈希值进行哈希的集合，不再实际调用对象的`__hash__()`方法，这些对象通常是用户映射的对象。一些方法在实现的副作用中调用了这个方法。
- en: 'References: [#5304](https://www.sqlalchemy.org/trac/ticket/5304)'
  id: totrans-2146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5304](https://www.sqlalchemy.org/trac/ticket/5304)
- en: '**[orm] [bug]**'
  id: totrans-2147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: An informative error message is raised when an ORM many-to-one comparison is
    attempted against an object that is not an actual mapped instance. Comparisons
    such as those to scalar subqueries aren’t supported; generalized comparison with
    subqueries is better achieved using [`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has").
  id: totrans-2148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试对一个不是实际映射实例的对象进行ORM多对一比较时，会引发一个信息丰富的错误消息。不支持与标量子查询之类的比较；使用子查询进行广义比较更好地通过[`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has")实现。
- en: 'References: [#5269](https://www.sqlalchemy.org/trac/ticket/5269)'
  id: totrans-2149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5269](https://www.sqlalchemy.org/trac/ticket/5269)
- en: engine
  id: totrans-2150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed fairly critical issue where the DBAPI connection could be returned to
    the connection pool while still in an un-rolled-back state. The reset agent responsible
    for rolling back the connection could be corrupted in the case that the transaction
    was “closed” without being rolled back or committed, which can occur in some scenarios
    when using ORM sessions and emitting .close() in a certain pattern involving savepoints.
    The fix ensures that the reset agent is always active.
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当关键的问题，即在仍处于未回滚状态时将DBAPI连接返回到连接池的情况。负责回滚连接的重置代理可能在事务“关闭”而没有被回滚或提交时被破坏，这在使用ORM会话并以某种模式发出.close()时可能发生。修复确保重置代理始终处于活动状态。
- en: 'References: [#5326](https://www.sqlalchemy.org/trac/ticket/5326)'
  id: totrans-2153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5326](https://www.sqlalchemy.org/trac/ticket/5326)
- en: schema
  id: totrans-2154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-2155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed issue where an [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") that is deferred in being associated with a table,
    such as as when it contains a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is not associated with any [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") yet, would fail to attach correctly if it also contained
    a non table-oriented expression.
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当一个被延迟关联到表的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")，例如当它包含一个尚未与任何[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时，如果它还包含一个非表导向的表达式，则无法正确附加。
- en: 'References: [#5298](https://www.sqlalchemy.org/trac/ticket/5298)'
  id: totrans-2157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5298](https://www.sqlalchemy.org/trac/ticket/5298)
- en: '**[schema] [bug]**'
  id: totrans-2158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: A warning is emitted when making use of the [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") attribute as well as the [`sort_tables()`](../core/ddl.html#sqlalchemy.schema.sort_tables
    "sqlalchemy.schema.sort_tables") function, and the given tables cannot be correctly
    sorted due to a cyclic dependency between foreign key constraints. In this case,
    the functions will no longer sort the involved tables by foreign key, and a warning
    will be emitted. Other tables that are not part of the cycle will still be returned
    in dependency order. Previously, the sorted_table routines would return a collection
    that would unconditionally omit all foreign keys when a cycle was detected, and
    no warning was emitted.
  id: totrans-2159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")属性以及[`sort_tables()`](../core/ddl.html#sqlalchemy.schema.sort_tables
    "sqlalchemy.schema.sort_tables")函数时，如果由于外键约束之间存在循环依赖而无法正确排序给定的表，则会发出警告。在这种情况下，函数将不再按外键对涉及的表进行排序，并将发出警告。其他不属于循环的表仍将按依赖顺序返回。以前，当检测到循环时，排序表例程将返回一个集合，该集合在检测到循环时将无条件省略所有外键，并且不会发出警告。
- en: 'References: [#5316](https://www.sqlalchemy.org/trac/ticket/5316)'
  id: totrans-2160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5316](https://www.sqlalchemy.org/trac/ticket/5316)
- en: '**[schema]**'
  id: totrans-2161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Add `comment` attribute to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") `__repr__` method.
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的`__repr__`方法中添加`comment`属性。
- en: 'References: [#4138](https://www.sqlalchemy.org/trac/ticket/4138)'
  id: totrans-2163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4138](https://www.sqlalchemy.org/trac/ticket/4138)
- en: postgresql
  id: totrans-2164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added support for columns or type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") or [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") in PostgreSQL. Previously a workaround
    was required in these use cases.
  id: totrans-2166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 中添加了对 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")、[`JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 或 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 类型的列��类型 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 的支持。在这些用例中以前需要使用一种解决方法。
- en: 'References: [#5265](https://www.sqlalchemy.org/trac/ticket/5265)'
  id: totrans-2167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5265](https://www.sqlalchemy.org/trac/ticket/5265)
- en: '**[postgresql] [usecase]**'
  id: totrans-2168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Raise an explicit [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") when adding a table with a column of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") configured with [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") set to `False` when [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") is not set to `False`
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在添加具有配置为 [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") 设置为 `False` 的 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 类型的列的表时，引发明确的 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")，当 [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") 未设置为 `False` 时
- en: 'References: [#5266](https://www.sqlalchemy.org/trac/ticket/5266)'
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5266](https://www.sqlalchemy.org/trac/ticket/5266)
- en: mssql
  id: totrans-2171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-2172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [反射]**'
- en: Fix a regression introduced by the reflection of computed column in MSSQL when
    using the legacy TDS version 4.2\. The dialect will try to detect the protocol
    version of first connect and run in compatibility mode if it cannot detect it.
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用传统 TDS 版本 4.2 时，通过 MSSQL 计算列的反射引入的回归。方言将尝试检测首次连接的协议版本，如果无法检测到，则运行在兼容模式下。
- en: 'References: [#5255](https://www.sqlalchemy.org/trac/ticket/5255)'
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5255](https://www.sqlalchemy.org/trac/ticket/5255)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-2175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [反射]**'
- en: Fix a regression introduced by the reflection of computed column in MSSQL when
    using SQL server versions before 2012, which does not support the `concat` function.
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用不支持 `concat` 函数的 SQL Server 版本（2012 年之前）时，通过 MSSQL 计算列的反射引入的回归。
- en: 'References: [#5271](https://www.sqlalchemy.org/trac/ticket/5271)'
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5271](https://www.sqlalchemy.org/trac/ticket/5271)
- en: oracle
  id: totrans-2178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug]**'
  id: totrans-2179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [性能] [错误]**'
- en: Changed the implementation of fetching CLOB and BLOB objects to use cx_Oracle’s
    native implementation which fetches CLOB/BLOB objects inline with other result
    columns, rather than performing a separate fetch. As always, this can be disabled
    by setting auto_convert_lobs to False.
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了获取 CLOB 和 BLOB 对象的实现，以使用 cx_Oracle 的本机实现，该实现将 CLOB/BLOB 对象与其他结果列一起获取，而不是执行单独的获取。一如既往，可以通过将
    auto_convert_lobs 设置为 False 来禁用此功能。
- en: As part of this change, the behavior of a CLOB that was given a blank string
    on INSERT now returns None on SELECT, which is now consistent with that of VARCHAR
    on Oracle.
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，给定空字符串的 CLOB 现在在 INSERT 时返回 None 在 SELECT 时，这与 Oracle 上的 VARCHAR 的行为现在保持一致。
- en: 'References: [#5314](https://www.sqlalchemy.org/trac/ticket/5314)'
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5314](https://www.sqlalchemy.org/trac/ticket/5314)
- en: '**[oracle] [bug]**'
  id: totrans-2183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Some modifications to how the cx_oracle dialect sets up per-column outputtype
    handlers for LOB and numeric datatypes to adjust for potential changes coming
    in cx_Oracle 8.
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 cx_oracle 方言如何为 LOB 和数字数据类型设置每列输出类型处理程序进行了一些修改，以调整为 cx_Oracle 8 中可能出现的潜在更改。
- en: 'References: [#5246](https://www.sqlalchemy.org/trac/ticket/5246)'
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5246](https://www.sqlalchemy.org/trac/ticket/5246)
- en: misc
  id: totrans-2186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[change] [firebird]**'
  id: totrans-2187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[变更] [firebird]**'
- en: Adjusted dialect loading for `firebird://` URIs so the external sqlalchemy-firebird
    dialect will be used if it has been installed, otherwise fall back to the (now
    deprecated) internal Firebird dialect.
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 `firebird://` URI 的方言加载，以便在安装了外部 sqlalchemy-firebird 方言时使用它，否则退回到（现在已弃用的）内部
    Firebird 方言。
- en: 'References: [#5278](https://www.sqlalchemy.org/trac/ticket/5278)'
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5278](https://www.sqlalchemy.org/trac/ticket/5278)
- en: 1.3.16
  id: totrans-2190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.16
- en: 'Released: April 7, 2020'
  id: totrans-2191
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年4月7日
- en: orm
  id: totrans-2192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance]**'
  id: totrans-2193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [performance]**'
- en: Modified the queries used by subqueryload and selectinload to no longer ORDER
    BY the primary key of the parent entity; this ordering was there to allow the
    rows as they come in to be copied into lists directly with a minimal level of
    Python-side collation. However, these ORDER BY clauses can negatively impact the
    performance of the query as in many scenarios these columns are derived from a
    subquery or are otherwise not actual primary key columns such that SQL planners
    cannot make use of indexes. The Python-side collation uses the native itertools.group_by()
    to collate the incoming rows, and has been modified to allow multiple row-groups-per-parent
    to be assembled together using list.extend(), which should still allow for relatively
    fast Python-side performance. There will still be an ORDER BY present for a relationship
    that includes an explicit order_by parameter, however this is the only ORDER BY
    that will be added to the query for both kinds of loading.
  id: totrans-2194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了子查询加载和选择加载使用的查询，不再按父实体的主键排序；这种排序是为了允许行按照它们进入的顺序直接复制到列表中，最小程度地进行Python端排序。然而，这些ORDER
    BY子句可能会对查询的性能产生负面影响，因为在许多情况下，这些列是从子查询派生的，或者以其他方式不是实际的主键列，以至于SQL规划器无法使用索引。Python端排序使用本机itertools.group_by()来整理传入的行，并已修改为允许将多个行组合到一起使用list.extend()，这仍然可以实现相对快速的Python端性能。对于包含显式order_by参数的关系，仍将存在一个ORDER
    BY，但这是查询中唯一添加的ORDER BY，用于两种加载方式。
- en: 'References: [#5162](https://www.sqlalchemy.org/trac/ticket/5162)'
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5162](https://www.sqlalchemy.org/trac/ticket/5162)
- en: '**[orm] [bug]**'
  id: totrans-2196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") loading option where two or more loaders that represent
    different relationships with the same string key name as referenced from a single
    [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") construct with multiple subclass mappers would
    fail to invoke each subqueryload separately, instead making use of a single string-based
    slot that would prevent the other loaders from being invoked.
  id: totrans-2197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")加载选项中的错误，其中代表具有相同字符串键名称的不同关系的两个或更多加载器，从单个具有多个子类映射器的[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")构造中引用时，将无法单独调用每个子查询加载器，而是使用单个基于字符串的插槽，这将阻止其他加载器被调用。
- en: 'References: [#5228](https://www.sqlalchemy.org/trac/ticket/5228)'
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5228](https://www.sqlalchemy.org/trac/ticket/5228)
- en: '**[orm] [bug]**'
  id: totrans-2199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where a lazyload that uses session-local “get” against a target
    many-to-one relationship where an object with the correct primary key is present,
    however it’s an instance of a sibling class, does not correctly return None as
    is the case when the lazy loader actually emits a load for that row.
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即使用会话本地“get”对目标多对一关系进行惰性加载时，存在具有正确主键的对象，但它是同类的实例时，不会正确返回None，就像惰性加载器实际发出该行的加载时一样。
- en: 'References: [#5210](https://www.sqlalchemy.org/trac/ticket/5210)'
  id: totrans-2201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5210](https://www.sqlalchemy.org/trac/ticket/5210)
- en: orm declarative
  id: totrans-2202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: The string argument accepted as the first positional argument by the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function when using the Declarative API is no longer
    interpreted using the Python `eval()` function; instead, the name is dot separated
    and the names are looked up directly in the name resolution dictionary without
    treating the value as a Python expression. However, passing a string argument
    to the other [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") parameters that necessarily must accept Python
    expressions will still use `eval()`; the documentation has been clarified to ensure
    that there is no ambiguity that this is in use.
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用声明式API时，[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")函数接受的第一个位置参数作为字符串参数不再使用Python的`eval()`函数进行解释；相反，名称是点分隔的，并且名称直接在名称解析字典中查找，而不将值视为Python表达式。然而，将字符串参数传递给其他必须接受Python表达式的[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")参数仍将使用`eval()`；文档已经澄清，以确保没有任何歧义。
- en: See also
  id: totrans-2205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Evaluation of relationship arguments](../orm/extensions/declarative/relationships.html#declarative-relationship-eval)
    - details on string evaluation'
  id: totrans-2206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[评估关系参数](../orm/extensions/declarative/relationships.html#declarative-relationship-eval)
    - 字符串评估的详细信息'
- en: 'References: [#5238](https://www.sqlalchemy.org/trac/ticket/5238)'
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5238](https://www.sqlalchemy.org/trac/ticket/5238)
- en: sql
  id: totrans-2208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [types]**'
  id: totrans-2209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [类型]**'
- en: Add ability to literal compile a `DateTime`, `Date` or `Time` when using the
    string dialect for debugging purposes. This change does not impact real dialect
    implementation that retain their current behavior.
  id: totrans-2210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用字符串方言进行调试时，添加了将`DateTime`、`Date`或`Time`文字编译的能力。此更改不影响保留其当前行为的真实方言实现。
- en: 'References: [#5052](https://www.sqlalchemy.org/trac/ticket/5052)'
  id: totrans-2211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5052](https://www.sqlalchemy.org/trac/ticket/5052)
- en: schema
  id: totrans-2212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [reflection]**'
  id: totrans-2213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [反射]**'
- en: Added support for reflection of “computed” columns, which are now returned as
    part of the structure returned by [`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"). When reflecting full [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, computed columns will be represented using
    the [`Computed`](../core/defaults.html#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct.
  id: totrans-2214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“computed”列的反射支持，这些列现在作为[`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")返回的结构的一部分返回。在反射完整的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象时，计算列将使用[`Computed`](../core/defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed")构造表示。
- en: 'References: [#5063](https://www.sqlalchemy.org/trac/ticket/5063)'
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5063](https://www.sqlalchemy.org/trac/ticket/5063)
- en: postgresql
  id: totrans-2216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed issue where a “covering” index, e.g. those which have an INCLUDE clause,
    would be reflected including all the columns in INCLUDE clause as regular columns.
    A warning is now emitted if these additional columns are detected indicating that
    they are currently ignored. Note that full support for “covering” indexes is part
    of [#4458](https://www.sqlalchemy.org/trac/ticket/4458). Pull request courtesy
    Marat Sharafutdinov.
  id: totrans-2218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“covering”索引的问题，例如具有INCLUDE子句的索引，将被反映为包含所有INCLUDE子句中的列的常规列。如果检测到这些额外列，则现在会发出警告，指示它们当前被忽略。请注意，“covering”索引的全面支持是[#4458](https://www.sqlalchemy.org/trac/ticket/4458)的一部分。感谢Marat
    Sharafutdinov的拉取请求。
- en: 'References: [#5205](https://www.sqlalchemy.org/trac/ticket/5205)'
  id: totrans-2219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5205](https://www.sqlalchemy.org/trac/ticket/5205)
- en: mysql
  id: totrans-2220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed issue in MySQL dialect when connecting to a pseudo-MySQL database such
    as that provided by ProxySQL, the up front check for isolation level when it returns
    no row will not prevent the dialect from continuing to connect. A warning is emitted
    that the isolation level could not be detected.
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在连接到伪MySQL数据库（例如��ProxySQL提供的数据库）时MySQL方言中的问题，当它返回没有行时对隔离级别进行的事先检查不会阻止方言继续连接。会发出警告，指示无法检测到隔离级别。
- en: 'References: [#5239](https://www.sqlalchemy.org/trac/ticket/5239)'
  id: totrans-2223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5239](https://www.sqlalchemy.org/trac/ticket/5239)
- en: sqlite
  id: totrans-2224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-2225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Implemented AUTOCOMMIT isolation level for SQLite when using pysqlite.
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pysqlite时为SQLite实现了AUTOCOMMIT隔离级别。
- en: 'References: [#5164](https://www.sqlalchemy.org/trac/ticket/5164)'
  id: totrans-2227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5164](https://www.sqlalchemy.org/trac/ticket/5164)
- en: mssql
  id: totrans-2228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase] [mysql] [oracle]**'
  id: totrans-2229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例] [mysql] [oracle]**'
- en: Added support for [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") and [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") to SQL Server,
    MySQL, and Oracle.
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server、MySQL和Oracle添加了对[`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from")和[`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from")的支持。
- en: 'References: [#5137](https://www.sqlalchemy.org/trac/ticket/5137)'
  id: totrans-2231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5137](https://www.sqlalchemy.org/trac/ticket/5137)
- en: oracle
  id: totrans-2232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-2233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [用例]**'
- en: Implemented AUTOCOMMIT isolation level for Oracle when using cx_Oracle. Also
    added a fixed default isolation level of READ COMMITTED for Oracle.
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用cx_Oracle时为Oracle实现了AUTOCOMMIT隔离级别。此外，为Oracle添加了一个固定的默认隔离级别为READ COMMITTED。
- en: 'References: [#5200](https://www.sqlalchemy.org/trac/ticket/5200)'
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5200](https://www.sqlalchemy.org/trac/ticket/5200)
- en: '**[oracle] [bug] [reflection]**'
  id: totrans-2236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle] [错误] [反射]**'
- en: Fixed regression / incorrect fix caused by fix for [#5146](https://www.sqlalchemy.org/trac/ticket/5146)
    where the Oracle dialect reads from the “all_tab_comments” view to get table comments
    but fails to accommodate for the current owner of the table being requested, causing
    it to read the wrong comment if multiple tables of the same name exist in multiple
    schemas.
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复[#5146](https://www.sqlalchemy.org/trac/ticket/5146)引起的回归/不正确修复，其中Oracle方言从“all_tab_comments”视图读取表注释，但未考虑到请求的表的当前所有者，导致如果多个具有相同名称的表存在于多个模式中，则读取错误的注释。
- en: 'References: [#5146](https://www.sqlalchemy.org/trac/ticket/5146)'
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5146](https://www.sqlalchemy.org/trac/ticket/5146)
- en: tests
  id: totrans-2239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed an issue that prevented the test suite from running with the recently
    released py.test 5.4.0.
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，该问题导致测试套件无法在最近发布的py.test 5.4.0上运行。
- en: 'References: [#5201](https://www.sqlalchemy.org/trac/ticket/5201)'
  id: totrans-2242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5201](https://www.sqlalchemy.org/trac/ticket/5201)
- en: misc
  id: totrans-2243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[enum] [types]**'
  id: totrans-2244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[枚举] [类型]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    type now supports the parameter [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") to specify the length of the VARCHAR column to create
    when using non native enums by setting [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") to `False`
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型现在支持参数[`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum")，用于指定在使用非本机枚举时创建VARCHAR列的长度，方法是将[`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")设置为`False`'
- en: 'References: [#5183](https://www.sqlalchemy.org/trac/ticket/5183)'
  id: totrans-2246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5183](https://www.sqlalchemy.org/trac/ticket/5183)
- en: '**[installer]**'
  id: totrans-2247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[安装程序]**'
- en: Ensured that the “pyproject.toml” file is not included in builds, as the presence
    of this file indicates to pip that a pep-517 installation process should be used.
    As this mode of operation appears to be not well supported by current tools /
    distros, these problems are avoided within the scope of SQLAlchemy installation
    by omitting the file.
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保“pyproject.toml”文件不包含在构建中，因为此文件的存在会告诉pip应该使用pep-517安装过程。由于当前工具/发行版似乎不太支持这种操作模式，在SQLAlchemy安装范围内通过省略该文件来避免这些问题。
- en: 'References: [#5207](https://www.sqlalchemy.org/trac/ticket/5207)'
  id: totrans-2249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5207](https://www.sqlalchemy.org/trac/ticket/5207)
- en: orm
  id: totrans-2250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance]**'
  id: totrans-2251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [性能]**'
- en: Modified the queries used by subqueryload and selectinload to no longer ORDER
    BY the primary key of the parent entity; this ordering was there to allow the
    rows as they come in to be copied into lists directly with a minimal level of
    Python-side collation. However, these ORDER BY clauses can negatively impact the
    performance of the query as in many scenarios these columns are derived from a
    subquery or are otherwise not actual primary key columns such that SQL planners
    cannot make use of indexes. The Python-side collation uses the native itertools.group_by()
    to collate the incoming rows, and has been modified to allow multiple row-groups-per-parent
    to be assembled together using list.extend(), which should still allow for relatively
    fast Python-side performance. There will still be an ORDER BY present for a relationship
    that includes an explicit order_by parameter, however this is the only ORDER BY
    that will be added to the query for both kinds of loading.
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了子查询加载和选择加载使用的查询，不再按父实体的主键排序；这种排序是为了允许行按照它们进入的顺序直接复制到列表中，以最小的Python端排序级别。然而，这些ORDER
    BY子句可能会对查询的性能产生负面影响，因为在许多情况下，这些列是从子查询派生的或者以其他方式不是实际的主键列，以至于SQL规划器无法使用索引。Python端排序使用本机itertools.group_by()来整理传入的行，并已修改为允许使用list.extend()将多个行组合到一起，这仍然可以实现相对快速的Python端性能。对于包含显式order_by参数的关系，仍将存在一个ORDER
    BY，但这是唯一将添加到两种加载方式的查询中的ORDER BY。
- en: 'References: [#5162](https://www.sqlalchemy.org/trac/ticket/5162)'
  id: totrans-2253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5162](https://www.sqlalchemy.org/trac/ticket/5162)
- en: '**[orm] [bug]**'
  id: totrans-2254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug in [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") loading option where two or more loaders that represent
    different relationships with the same string key name as referenced from a single
    [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") construct with multiple subclass mappers would
    fail to invoke each subqueryload separately, instead making use of a single string-based
    slot that would prevent the other loaders from being invoked.
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 加载选项中的错误，其中代表同一字符串键名称的不同关系的两个或多个加载器，从单个具有多个子类映射器的
    [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 构造引用时，会失败地单独调用每个子查询加载，而是使用单个基于字符串的插槽，这会阻止其他加载器被调用。
- en: 'References: [#5228](https://www.sqlalchemy.org/trac/ticket/5228)'
  id: totrans-2256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5228](https://www.sqlalchemy.org/trac/ticket/5228)
- en: '**[orm] [bug]**'
  id: totrans-2257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where a lazyload that uses session-local “get” against a target
    many-to-one relationship where an object with the correct primary key is present,
    however it’s an instance of a sibling class, does not correctly return None as
    is the case when the lazy loader actually emits a load for that row.
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在对目标多对一关系使用会话本地“get”时，存在具有正确主键的对象，但它是同级类的实例时，懒加载不会像懒加载实际发出该行的加载时那样正确返回
    None。
- en: 'References: [#5210](https://www.sqlalchemy.org/trac/ticket/5210)'
  id: totrans-2259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5210](https://www.sqlalchemy.org/trac/ticket/5210)
- en: orm declarative
  id: totrans-2260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [错误]**'
- en: The string argument accepted as the first positional argument by the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function when using the Declarative API is no longer
    interpreted using the Python `eval()` function; instead, the name is dot separated
    and the names are looked up directly in the name resolution dictionary without
    treating the value as a Python expression. However, passing a string argument
    to the other [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") parameters that necessarily must accept Python
    expressions will still use `eval()`; the documentation has been clarified to ensure
    that there is no ambiguity that this is in use.
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用声明式 API 时，[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 函数的第一个位置参数接受的字符串参数不再使用 Python 的 `eval()` 函数进行解释；相反，名称是点分隔的，名称直接在名称解析字典中查找，而不将值视为
    Python 表达式。然而，将字符串参数传递给其他必须接受 Python 表达式的 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 参数仍然会使用 `eval()`；文档已经明确说明了这一点，以确保这一使用没有歧义。
- en: See also
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Evaluation of relationship arguments](../orm/extensions/declarative/relationships.html#declarative-relationship-eval)
    - details on string evaluation'
  id: totrans-2264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关系参数的评估](../orm/extensions/declarative/relationships.html#declarative-relationship-eval)
    - 字符串评估的详细信息'
- en: 'References: [#5238](https://www.sqlalchemy.org/trac/ticket/5238)'
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5238](https://www.sqlalchemy.org/trac/ticket/5238)
- en: sql
  id: totrans-2266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [types]**'
  id: totrans-2267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [类型]**'
- en: Add ability to literal compile a `DateTime`, `Date` or `Time` when using the
    string dialect for debugging purposes. This change does not impact real dialect
    implementation that retain their current behavior.
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对在使用字符串方言进行调试时字面编译 `DateTime`、`Date` 或 `Time` 的功能。此更改不影响保留其当前行为的实际方言实现。
- en: 'References: [#5052](https://www.sqlalchemy.org/trac/ticket/5052)'
  id: totrans-2269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5052](https://www.sqlalchemy.org/trac/ticket/5052)
- en: schema
  id: totrans-2270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [reflection]**'
  id: totrans-2271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [反射]**'
- en: Added support for reflection of “computed” columns, which are now returned as
    part of the structure returned by [`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"). When reflecting full [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, computed columns will be represented using
    the [`Computed`](../core/defaults.html#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct.
  id: totrans-2272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对“计算”列的反射支持，现在这些列作为[`Inspector.get_columns()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") 返回的结构的一部分返回。当反映完整的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象时，计算列将使用 [`Computed`](../core/defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed") 构造表示。
- en: 'References: [#5063](https://www.sqlalchemy.org/trac/ticket/5063)'
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5063](https://www.sqlalchemy.org/trac/ticket/5063)
- en: postgresql
  id: totrans-2274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where a “covering” index, e.g. those which have an INCLUDE clause,
    would be reflected including all the columns in INCLUDE clause as regular columns.
    A warning is now emitted if these additional columns are detected indicating that
    they are currently ignored. Note that full support for “covering” indexes is part
    of [#4458](https://www.sqlalchemy.org/trac/ticket/4458). Pull request courtesy
    Marat Sharafutdinov.
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“覆盖”索引的问题，例如具有INCLUDE子句的索引，将被反映为包括所有INCLUDE子句中的列作为常规列。如果检测到这些附加列，则现在会发出警告，指示当前被忽略。请注意，对“覆盖”索引的完全支持是[#4458](https://www.sqlalchemy.org/trac/ticket/4458)的一部分。拉请求由Marat
    Sharafutdinov提供。
- en: 'References: [#5205](https://www.sqlalchemy.org/trac/ticket/5205)'
  id: totrans-2277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5205](https://www.sqlalchemy.org/trac/ticket/5205)
- en: mysql
  id: totrans-2278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in MySQL dialect when connecting to a pseudo-MySQL database such
    as that provided by ProxySQL, the up front check for isolation level when it returns
    no row will not prevent the dialect from continuing to connect. A warning is emitted
    that the isolation level could not be detected.
  id: totrans-2280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接到伪MySQL数据库时MySQL方言中的问题，例如由ProxySQL提供的数据库，当它返回零行时，隔离级别的前置检查将不会阻止方言继续连接。发出警告，指示无法检测到隔离级别。
- en: 'References: [#5239](https://www.sqlalchemy.org/trac/ticket/5239)'
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5239](https://www.sqlalchemy.org/trac/ticket/5239)
- en: sqlite
  id: totrans-2282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-2283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Implemented AUTOCOMMIT isolation level for SQLite when using pysqlite.
  id: totrans-2284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pysqlite时，实现了SQLite的AUTOCOMMIT隔离级别。
- en: 'References: [#5164](https://www.sqlalchemy.org/trac/ticket/5164)'
  id: totrans-2285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5164](https://www.sqlalchemy.org/trac/ticket/5164)
- en: mssql
  id: totrans-2286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase] [mysql] [oracle]**'
  id: totrans-2287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [usecase] [mysql] [oracle]**'
- en: Added support for [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") and [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") to SQL Server,
    MySQL, and Oracle.
  id: totrans-2288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from")和[`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from")在SQL Server、MySQL和Oracle中的支持。
- en: 'References: [#5137](https://www.sqlalchemy.org/trac/ticket/5137)'
  id: totrans-2289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5137](https://www.sqlalchemy.org/trac/ticket/5137)
- en: oracle
  id: totrans-2290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-2291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Implemented AUTOCOMMIT isolation level for Oracle when using cx_Oracle. Also
    added a fixed default isolation level of READ COMMITTED for Oracle.
  id: totrans-2292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用cx_Oracle时，实现了Oracle的AUTOCOMMIT隔离级别。还为Oracle添加了固定的默认隔离级别为READ COMMITTED。
- en: 'References: [#5200](https://www.sqlalchemy.org/trac/ticket/5200)'
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5200](https://www.sqlalchemy.org/trac/ticket/5200)
- en: '**[oracle] [bug] [reflection]**'
  id: totrans-2294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [reflection]**'
- en: Fixed regression / incorrect fix caused by fix for [#5146](https://www.sqlalchemy.org/trac/ticket/5146)
    where the Oracle dialect reads from the “all_tab_comments” view to get table comments
    but fails to accommodate for the current owner of the table being requested, causing
    it to read the wrong comment if multiple tables of the same name exist in multiple
    schemas.
  id: totrans-2295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复[#5146](https://www.sqlalchemy.org/trac/ticket/5146)而导致的回归/不正确的修复问题，其中Oracle方言从“all_tab_comments”视图中读取表注释，但未能适应请求的当前表的所有者，导致如果多个模式中存在同名表，则会读取错误的注释。
- en: 'References: [#5146](https://www.sqlalchemy.org/trac/ticket/5146)'
  id: totrans-2296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5146](https://www.sqlalchemy.org/trac/ticket/5146)
- en: tests
  id: totrans-2297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed an issue that prevented the test suite from running with the recently
    released py.test 5.4.0.
  id: totrans-2299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，该问题阻止了最近发布的py.test 5.4.0运行测试套件。
- en: 'References: [#5201](https://www.sqlalchemy.org/trac/ticket/5201)'
  id: totrans-2300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5201](https://www.sqlalchemy.org/trac/ticket/5201)
- en: misc
  id: totrans-2301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[enum] [types]**'
  id: totrans-2302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[enum] [types]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    type now supports the parameter [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") to specify the length of the VARCHAR column to create
    when using non native enums by setting [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") to `False`
  id: totrans-2303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    类型现在支持参数[`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum")来指定创建 VARCHAR 列时的长度，当使用非本地枚举时，通过将[`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")设置为`False`。'
- en: 'References: [#5183](https://www.sqlalchemy.org/trac/ticket/5183)'
  id: totrans-2304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5183](https://www.sqlalchemy.org/trac/ticket/5183)
- en: '**[installer]**'
  id: totrans-2305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[installer]**'
- en: Ensured that the “pyproject.toml” file is not included in builds, as the presence
    of this file indicates to pip that a pep-517 installation process should be used.
    As this mode of operation appears to be not well supported by current tools /
    distros, these problems are avoided within the scope of SQLAlchemy installation
    by omitting the file.
  id: totrans-2306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保“pyproject.toml”文件不包含在构建中，因为此文件的存在指示 pip 应使用 pep-517 安装过程。由于当前工具/发行版似乎不太支持这种操作模式，因此通过在
    SQLAlchemy 安装范围内省略该文件来避免这些问题。
- en: 'References: [#5207](https://www.sqlalchemy.org/trac/ticket/5207)'
  id: totrans-2307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5207](https://www.sqlalchemy.org/trac/ticket/5207)
- en: 1.3.15
  id: totrans-2308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.15
- en: 'Released: March 11, 2020'
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年3月11日
- en: orm
  id: totrans-2310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Adjusted the error message emitted by [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") when a left hand side can’t be located that the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method is the best way to resolve the issue.
    Also, within the 1.3 series, used a deterministic ordering when determining the
    FROM clause from a given column entity passed to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") so that the same expression is determined each time.
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")发出的错误消息，当无法找到左侧时，[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法是解决问题的最佳方法。此外，在 1.3 系列中，使用确定性排序确定从传递给[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的给定列实体确定 FROM 子句时，以便每次确定相同的表达式。
- en: 'References: [#5194](https://www.sqlalchemy.org/trac/ticket/5194)'
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5194](https://www.sqlalchemy.org/trac/ticket/5194)
- en: '**[orm] [bug]**'
  id: totrans-2314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.3.14 due to [#4849](https://www.sqlalchemy.org/trac/ticket/4849)
    where a sys.exc_info() call failed to be invoked correctly when a flush error
    would occur. Test coverage has been added for this exception case.
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#4849](https://www.sqlalchemy.org/trac/ticket/4849)导致的 1.3.14 版本中的回归问题已修复，当发生刷新错误时，sys.exc_info()
    调用未能正确调用。已为此异常情况添加了测试覆盖。
- en: 'References: [#5196](https://www.sqlalchemy.org/trac/ticket/5196)'
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5196](https://www.sqlalchemy.org/trac/ticket/5196)
- en: orm
  id: totrans-2317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Adjusted the error message emitted by [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") when a left hand side can’t be located that the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method is the best way to resolve the issue.
    Also, within the 1.3 series, used a deterministic ordering when determining the
    FROM clause from a given column entity passed to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") so that the same expression is determined each time.
  id: totrans-2319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")发出的错误消息，当无法找到左侧时，[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法是解决问题的最佳方法。此外，在 1.3 系列中，使用确定性排序确定从传递给[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的给定列实体确定 FROM 子句时，以便每次确定相同的表达式。
- en: 'References: [#5194](https://www.sqlalchemy.org/trac/ticket/5194)'
  id: totrans-2320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5194](https://www.sqlalchemy.org/trac/ticket/5194)
- en: '**[orm] [bug]**'
  id: totrans-2321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.3.14 due to [#4849](https://www.sqlalchemy.org/trac/ticket/4849)
    where a sys.exc_info() call failed to be invoked correctly when a flush error
    would occur. Test coverage has been added for this exception case.
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#4849](https://www.sqlalchemy.org/trac/ticket/4849)导致的 1.3.14 版本中的回归问题已修复，当发生刷新错误时，sys.exc_info()
    调用未能正确调用。已为此异常情况添加了测试覆盖。
- en: 'References: [#5196](https://www.sqlalchemy.org/trac/ticket/5196)'
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5196](https://www.sqlalchemy.org/trac/ticket/5196)
- en: 1.3.14
  id: totrans-2324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.14
- en: 'Released: March 10, 2020'
  id: totrans-2325
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年3月10日
- en: general
  id: totrans-2326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [bug] [py3k]**'
  id: totrans-2327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误] [py3k]**'
- en: Applied an explicit “cause” to most if not all internally raised exceptions
    that are raised from within an internal exception catch, to avoid misleading stacktraces
    that suggest an error within the handling of an exception. While it would be preferable
    to suppress the internally caught exception in the way that the `__suppress_context__`
    attribute would, there does not as yet seem to be a way to do this without suppressing
    an enclosing user constructed context, so for now it exposes the internally caught
    exception as the cause so that full information about the context of the error
    is maintained.
  id: totrans-2328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对大多数或所有从内部异常捕获中引发的内部异常应用了明确的“原因”，以避免误导性的堆栈跟踪，表明异常处理中存在错误。虽然最好是通过`__suppress_context__`属性来抑制内部捕获的异常，但目前似乎还没有办法在不抑制包含的用户构造上下文的情况下做到这一点，因此暴露了内部捕获的异常作为原因，以便保持有关错误上下文的完整信息。
- en: 'References: [#4849](https://www.sqlalchemy.org/trac/ticket/4849)'
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4849](https://www.sqlalchemy.org/trac/ticket/4849)
- en: orm
  id: totrans-2330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added a new flag [`InstanceEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") and [`SessionEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") which apply to the [`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load"), [`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh"), and [`SessionEvents.loaded_as_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent") events, which when set will
    restore the “load context” of the object after the event hook has been called.
    This ensures that the object remains within the “loader context” of the load operation
    that is already ongoing, rather than the object being transferred to a new load
    context due to refresh operations which may have occurred in the event. A warning
    is now emitted when this condition occurs, which recommends use of the flag to
    resolve this case. The flag is “opt-in” so that there is no risk introduced to
    existing applications.
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新标志[`InstanceEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")和[`SessionEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents")，适用于[`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")、[`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")和[`SessionEvents.loaded_as_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")事件，设置后将在调用事件钩子后恢复对象的“加载上下文”。这确保对象仍然处于已经进行的加载操作的“加载上下文”中，而不是由于事件中可能发生的刷新操作而将对象转移到新的加载上下文。当出现这种情况时，现在会发出警告，建议使用该标志解决此情况。该标志是“选择加入”的，因此不会对现有应用程序引入风险。
- en: The change additionally adds support for the `raw=True` flag to session lifecycle
    events.
  id: totrans-2333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还为会话生命周期事件添加了对`raw=True`标志的支持。
- en: 'References: [#5129](https://www.sqlalchemy.org/trac/ticket/5129)'
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5129](https://www.sqlalchemy.org/trac/ticket/5129)
- en: '**[orm] [bug]**'
  id: totrans-2335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression caused in 1.3.13 by [#5056](https://www.sqlalchemy.org/trac/ticket/5056)
    where a refactor of the ORM path registry system made it such that a path could
    no longer be compared to an empty tuple, which can occur in a particular kind
    of joined eager loading path. The “empty tuple” use case has been resolved so
    that the path registry is compared to a path registry in all cases; the `PathRegistry`
    object itself now implements `__eq__()` and `__ne__()` methods which will take
    place for all equality comparisons and continue to succeed in the not anticipated
    case that a non- `PathRegistry` object is compared, while emitting a warning that
    this object should not be the subject of the comparison.
  id: totrans-2336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.3.13版本中由[#5056](https://www.sqlalchemy.org/trac/ticket/5056)引起的回归，其中ORM路径注册表系统的重构使得路径不再能与空元组进行比较，这可能发生在特定类型的连接式贪婪加载路径中。已解决“空元组”用例，使得路径注册表在所有情况下与路径注册表进行比较；`PathRegistry`对象本身现在实现了`__eq__()`和`__ne__()`方法，这些方法将用于所有相等比较，并继续在未预期的情况下成功比较非`PathRegistry`对象时发出警告，指出此对象不应是比较的主体。
- en: 'References: [#5110](https://www.sqlalchemy.org/trac/ticket/5110)'
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5110](https://www.sqlalchemy.org/trac/ticket/5110)
- en: '**[orm] [bug]**'
  id: totrans-2338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Setting a relationship to viewonly=True which is also the target of a back_populates
    or backref configuration will now emit a warning and eventually be disallowed.
    back_populates refers specifically to mutation of an attribute or collection,
    which is disallowed when the attribute is subject to viewonly=True. The viewonly
    attribute is not subject to persistence behaviors which means it will not reflect
    correct results when it is locally mutated.
  id: totrans-2339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个设定为viewonly=True的关系同时设置为back_populates或backref配置的目标现在会发出警告，并最终被禁止。back_populates特指对属性或集合的变异，当属性受到viewonly=True时是不允许的。viewonly属性不受持久性行为的影响，这意味着当它在本地变异时不会反映正确的结果。
- en: 'References: [#5149](https://www.sqlalchemy.org/trac/ticket/5149)'
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5149](https://www.sqlalchemy.org/trac/ticket/5149)
- en: '**[orm] [bug]**'
  id: totrans-2341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an additional regression in the same area as that of [#5080](https://www.sqlalchemy.org/trac/ticket/5080)
    introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a joined option across a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") into a relationship against the base class
    of that with_polymorphic, and then further into regular mapped relationships would
    fail as the base class component would not add itself to the load path in a way
    that could be located by the loader strategy. The changes applied in [#5080](https://www.sqlalchemy.org/trac/ticket/5080)
    have been further refined to also accommodate this scenario.
  id: totrans-2342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[#5080](https://www.sqlalchemy.org/trac/ticket/5080)中引入的1.3.0b3版本中相同区域的另一个回归问题，通过[#4468](https://www.sqlalchemy.org/trac/ticket/4468)。在这种情况下，通过[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")创建跨越到与该with_polymorphic的基类关系的连接选项，然后进一步到常规映射关系会失败，因为基类组件不会以可以被加载策略定位的方式添加到加载路径中。在[#5080](https://www.sqlalchemy.org/trac/ticket/5080)中应用的更改已经进一步完善，以适应这种情况。
- en: 'References: [#5121](https://www.sqlalchemy.org/trac/ticket/5121)'
  id: totrans-2343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5121](https://www.sqlalchemy.org/trac/ticket/5121)
- en: engine
  id: totrans-2344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Expanded the scope of cursor/connection cleanup when a statement is executed
    to include when the result object fails to be constructed, or an after_cursor_execute()
    event raises an error, or autocommit / autoclose fails. This allows the DBAPI
    cursor to be cleaned up on failure and for connectionless execution allows the
    connection to be closed out and returned to the connection pool, where previously
    it waiting until garbage collection would trigger a pool return.
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行语句时扩展了游标/连接清理的范围，包括当结果对象无法构建时，或者after_cursor_execute()事件引发错误，或者autocommit/autoclose失败。这允许在失败时清理DBAPI游标，并且对于无连接执行，允许关闭连接并将其返回到连接池，之前等待直到垃圾回收触发池返回。
- en: 'References: [#5182](https://www.sqlalchemy.org/trac/ticket/5182)'
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5182](https://www.sqlalchemy.org/trac/ticket/5182)
- en: sql
  id: totrans-2348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-2349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where a CTE of an INSERT/UPDATE/DELETE that also uses RETURNING could
    then not be SELECTed from directly, as the internal state of the compiler would
    try to treat the outer SELECT as a DELETE statement itself and access nonexistent
    state.
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即一个INSERT/UPDATE/DELETE的CTE也使用RETURNING，然后无法直接从中选择，因为编译器的内部状态会尝试将外部SELECT视为DELETE语句本身并访问不存在的状态。
- en: 'References: [#5181](https://www.sqlalchemy.org/trac/ticket/5181)'
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5181](https://www.sqlalchemy.org/trac/ticket/5181)
- en: postgresql
  id: totrans-2352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the “schema_translate_map” feature would not work with a PostgreSQL
    native enumeration type (i.e. [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")) in that while the “CREATE TYPE” statement
    would be emitted with the correct schema, the schema would not be rendered in
    the CREATE TABLE statement at the point at which the enumeration was referenced.
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“schema_translate_map”功能与PostgreSQL本机枚举类型（即[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM"))不起作用的问题，即在发出“CREATE TYPE”语句时，枚举被引用的地方的CREATE
    TABLE语句中不会呈现正确的模式。
- en: 'References: [#5158](https://www.sqlalchemy.org/trac/ticket/5158)'
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5158](https://www.sqlalchemy.org/trac/ticket/5158)
- en: '**[postgresql] [bug] [reflection]**'
  id: totrans-2356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [reflection]**'
- en: Fixed bug where PostgreSQL reflection of CHECK constraints would fail to parse
    the constraint if the SQL text contained newline characters. The regular expression
    has been adjusted to accommodate for this case. Pull request courtesy Eric Borczuk.
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL反射CHECK约束时无法解析约束的bug，如果SQL文本包含换行符，则会失败。正则表达式已经调整以适应这种情况。感谢Eric
    Borczuk提供的拉取请求。
- en: 'References: [#5170](https://www.sqlalchemy.org/trac/ticket/5170)'
  id: totrans-2358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5170](https://www.sqlalchemy.org/trac/ticket/5170)
- en: mysql
  id: totrans-2359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") construct where using
    a SQL function or other composed expression for a column argument would not properly
    render the `VALUES` keyword surrounding the column itself.
  id: totrans-2361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") 构造中的问题，其中对于列参数使用SQL函数或其他组合表达式将不正确地渲染围绕列本身的`VALUES`关键字。
- en: 'References: [#5173](https://www.sqlalchemy.org/trac/ticket/5173)'
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5173](https://www.sqlalchemy.org/trac/ticket/5173)
- en: mssql
  id: totrans-2363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where the [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") type would not accommodate for the
    `None` value, introduced as part of the series of fixes for this type first introduced
    in [#4983](https://www.sqlalchemy.org/trac/ticket/4983), [#5045](https://www.sqlalchemy.org/trac/ticket/5045).
    Additionally, added support for passing a backend-specific date formatted string
    through this type, as is typically allowed for date/time types on most other DBAPIs.
  id: totrans-2365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET")类型无法容纳`None`值的问题，该问题是为了修复此类型而首次引入的一系列修复之一，首次引入于[#4983](https://www.sqlalchemy.org/trac/ticket/4983)、[#5045](https://www.sqlalchemy.org/trac/ticket/5045)。此外，还增加了通过此类型传递后端特定日期格式字符串的支持，这通常允许在大多数其他DBAPI上的日期/时间类型上使用。
- en: 'References: [#5132](https://www.sqlalchemy.org/trac/ticket/5132)'
  id: totrans-2366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5132](https://www.sqlalchemy.org/trac/ticket/5132)
- en: oracle
  id: totrans-2367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed a reflection bug where table comments could only be retrieved for tables
    actually owned by the user but not for tables visible to the user but owned by
    someone else. Pull request courtesy Dave Hirschfeld.
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个反射bug，表注释只能检索由用户拥有的表，而不能检索对用户可见但由其他人拥有的表。感谢Dave Hirschfeld提供的拉取请求。
- en: 'References: [#5146](https://www.sqlalchemy.org/trac/ticket/5146)'
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5146](https://www.sqlalchemy.org/trac/ticket/5146)
- en: misc
  id: totrans-2371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[usecase] [ext]**'
  id: totrans-2372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [扩展]**'
- en: Added keyword arguments to the [`MutableList.sort()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList.sort
    "sqlalchemy.ext.mutable.MutableList.sort") function so that a key function as
    well as the “reverse” keyword argument can be provided.
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`MutableList.sort()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList.sort
    "sqlalchemy.ext.mutable.MutableList.sort")函数添加了关键字参数，以便提供键函数以及“reverse”关键字参数。
- en: 'References: [#5114](https://www.sqlalchemy.org/trac/ticket/5114)'
  id: totrans-2374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5114](https://www.sqlalchemy.org/trac/ticket/5114)
- en: '**[performance] [bug]**'
  id: totrans-2375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[性能] [bug]**'
- en: Revised an internal change to the test system added as a result of [#5085](https://www.sqlalchemy.org/trac/ticket/5085)
    where a testing-related module per dialect would be loaded unconditionally upon
    making use of that dialect, pulling in SQLAlchemy’s testing framework as well
    as the ORM into the module import space. This would only impact initial startup
    time and memory to a modest extent, however it’s best that these additional modules
    aren’t reverse-dependent on straight Core usage.
  id: totrans-2376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了作为[#5085](https://www.sqlalchemy.org/trac/ticket/5085)结果添加到测试系统的内部更改，即在使用该方言时会无条件加载每个方言的与测试相关的模块，将SQLAlchemy的测试框架以及ORM引入模块导入空间。这只会对初始启动时间和内存产生一定影响，但最好这些附加模块不会反向依赖于直接的Core使用。
- en: 'References: [#5180](https://www.sqlalchemy.org/trac/ticket/5180)'
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5180](https://www.sqlalchemy.org/trac/ticket/5180)
- en: '**[bug] [installation]**'
  id: totrans-2378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [安装]**'
- en: Vendored the `inspect.formatannotation` function inside of `sqlalchemy.util.compat`,
    which is needed for the vendored version of `inspect.formatargspec`. The function
    is not documented in cPython and is not guaranteed to be available in future Python
    versions.
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`inspect.formatannotation`函数放入`sqlalchemy.util.compat`中，这是`inspect.formatargspec`的版本化版本所需的。该函数在cPython中没有文档，并且不能保证在未来的Python版本中可用。
- en: 'References: [#5138](https://www.sqlalchemy.org/trac/ticket/5138)'
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5138](https://www.sqlalchemy.org/trac/ticket/5138)
- en: general
  id: totrans-2381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general] [bug] [py3k]**'
  id: totrans-2382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误] [py3k]**'
- en: Applied an explicit “cause” to most if not all internally raised exceptions
    that are raised from within an internal exception catch, to avoid misleading stacktraces
    that suggest an error within the handling of an exception. While it would be preferable
    to suppress the internally caught exception in the way that the `__suppress_context__`
    attribute would, there does not as yet seem to be a way to do this without suppressing
    an enclosing user constructed context, so for now it exposes the internally caught
    exception as the cause so that full information about the context of the error
    is maintained.
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对大多数，如果不是所有内部引发的异常应用了明确的“cause”，这些异常是从内部异常捕获中引发的，以避免误导性的堆栈跟踪，表明异常处理中存在错误。虽然最好是抑制内部捕获的异常，就像`__suppress_context__`属性那样，但目前似乎还没有一种方法可以在不抑制封闭的用户构造上下文的情况下做到这一点，因此它将内部捕获的异常公开为原因，以便保持有关错误上下文的完整信息。
- en: 'References: [#4849](https://www.sqlalchemy.org/trac/ticket/4849)'
  id: totrans-2384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4849](https://www.sqlalchemy.org/trac/ticket/4849)
- en: orm
  id: totrans-2385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [usecase]**'
  id: totrans-2386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [用例]**'
- en: Added a new flag [`InstanceEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") and [`SessionEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") which apply to the [`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load"), [`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh"), and [`SessionEvents.loaded_as_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent") events, which when set will
    restore the “load context” of the object after the event hook has been called.
    This ensures that the object remains within the “loader context” of the load operation
    that is already ongoing, rather than the object being transferred to a new load
    context due to refresh operations which may have occurred in the event. A warning
    is now emitted when this condition occurs, which recommends use of the flag to
    resolve this case. The flag is “opt-in” so that there is no risk introduced to
    existing applications.
  id: totrans-2387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新标志[`InstanceEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")和[`SessionEvents.restore_load_context`](../orm/events.html#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents")，适用于[`InstanceEvents.load()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")、[`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")和[`SessionEvents.loaded_as_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")事件，设置后将在事件钩子调用后恢复对象的“加载上下文”。这确保对象仍然保持在已经进行的加载操作的“加载上下文”中，而不是由于刷新操作可能发生在事件中而将对象转移到新的加载上下文。当出现这种情况时，现在会发出警告，建议使用该标志解决此情况。该标志是“选择加入”的，因此不会对现有应用程序引入风险。
- en: The change additionally adds support for the `raw=True` flag to session lifecycle
    events.
  id: totrans-2388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还为会话生命周期事件添加了对`raw=True`标志的支持。
- en: 'References: [#5129](https://www.sqlalchemy.org/trac/ticket/5129)'
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5129](https://www.sqlalchemy.org/trac/ticket/5129)
- en: '**[orm] [bug]**'
  id: totrans-2390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed regression caused in 1.3.13 by [#5056](https://www.sqlalchemy.org/trac/ticket/5056)
    where a refactor of the ORM path registry system made it such that a path could
    no longer be compared to an empty tuple, which can occur in a particular kind
    of joined eager loading path. The “empty tuple” use case has been resolved so
    that the path registry is compared to a path registry in all cases; the `PathRegistry`
    object itself now implements `__eq__()` and `__ne__()` methods which will take
    place for all equality comparisons and continue to succeed in the not anticipated
    case that a non- `PathRegistry` object is compared, while emitting a warning that
    this object should not be the subject of the comparison.
  id: totrans-2391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.3.13版本中由[#5056](https://www.sqlalchemy.org/trac/ticket/5056)引起的回归，其中对ORM路径注册系统进行的重构使得路径不再能与空元组进行比较，这可能发生在特定类型的连接式急加载路径中。已解决“空元组”使用情况，使得路径注册在所有情况下与路径注册进行比较；`PathRegistry`对象本身现在实现了`__eq__()`和`__ne__()`方法，这些方法将在所有相等比较中生效，并继续成功处理未预期的情况，即比较非`PathRegistry`对象时，同时发出警告，指出该对象不应是比较的主体。
- en: 'References: [#5110](https://www.sqlalchemy.org/trac/ticket/5110)'
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5110](https://www.sqlalchemy.org/trac/ticket/5110)
- en: '**[orm] [bug]**'
  id: totrans-2393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Setting a relationship to viewonly=True which is also the target of a back_populates
    or backref configuration will now emit a warning and eventually be disallowed.
    back_populates refers specifically to mutation of an attribute or collection,
    which is disallowed when the attribute is subject to viewonly=True. The viewonly
    attribute is not subject to persistence behaviors which means it will not reflect
    correct results when it is locally mutated.
  id: totrans-2394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将设置一个关系为 viewonly=True，而该关系也是 back_populates 或 backref 配置的目标时会发出警告，并最终不再支持。back_populates
    特指属性或集合的变化，当属性设为 viewonly=True 时不允许变化。viewonly 属性不受持久性行为的影响，这意味着当它在本地变化时不会反映出正确的结果。
- en: 'References: [#5149](https://www.sqlalchemy.org/trac/ticket/5149)'
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5149](https://www.sqlalchemy.org/trac/ticket/5149)
- en: '**[orm] [bug]**'
  id: totrans-2396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an additional regression in the same area as that of [#5080](https://www.sqlalchemy.org/trac/ticket/5080)
    introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a joined option across a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") into a relationship against the base class
    of that with_polymorphic, and then further into regular mapped relationships would
    fail as the base class component would not add itself to the load path in a way
    that could be located by the loader strategy. The changes applied in [#5080](https://www.sqlalchemy.org/trac/ticket/5080)
    have been further refined to also accommodate this scenario.
  id: totrans-2397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 [#5080](https://www.sqlalchemy.org/trac/ticket/5080) 相同区域的另一个回归问题，在 1.3.0b3
    中通过 [#4468](https://www.sqlalchemy.org/trac/ticket/4468) 引入，通过[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")创建跨越关系到基类的 joined option，然后进一步到常规映射关系会失败，因为基类组件不会以可以被加载策略定位的方式添加到加载路径中。在
    [#5080](https://www.sqlalchemy.org/trac/ticket/5080) 中应用的更改已进一步精细化，以适应此场景。
- en: 'References: [#5121](https://www.sqlalchemy.org/trac/ticket/5121)'
  id: totrans-2398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5121](https://www.sqlalchemy.org/trac/ticket/5121)
- en: engine
  id: totrans-2399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Expanded the scope of cursor/connection cleanup when a statement is executed
    to include when the result object fails to be constructed, or an after_cursor_execute()
    event raises an error, or autocommit / autoclose fails. This allows the DBAPI
    cursor to be cleaned up on failure and for connectionless execution allows the
    connection to be closed out and returned to the connection pool, where previously
    it waiting until garbage collection would trigger a pool return.
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了在执行语句时游标/连接清理的范围，包括当无法构造结果对象时，或者 after_cursor_execute() 事件引发错误，或者自动提交 / 自动关闭失败时。这允许在失败时清理
    DBAPI 游标，并且在无连接执行时允许连接关闭并返回到连接池，之前它等待垃圾回收触发连接池返回。
- en: 'References: [#5182](https://www.sqlalchemy.org/trac/ticket/5182)'
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5182](https://www.sqlalchemy.org/trac/ticket/5182)
- en: sql
  id: totrans-2403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-2404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where a CTE of an INSERT/UPDATE/DELETE that also uses RETURNING could
    then not be SELECTed from directly, as the internal state of the compiler would
    try to treat the outer SELECT as a DELETE statement itself and access nonexistent
    state.
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，在 INSERT/UPDATE/DELETE 的 CTE 中同时使用 RETURNING 时，无法直接从中 SELECT 的 bug。因为编译器的内部状态会尝试将外部
    SELECT 当作 DELETE 语句本身并访问不存在的状态。
- en: 'References: [#5181](https://www.sqlalchemy.org/trac/ticket/5181)'
  id: totrans-2406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5181](https://www.sqlalchemy.org/trac/ticket/5181)
- en: postgresql
  id: totrans-2407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the “schema_translate_map” feature would not work with a PostgreSQL
    native enumeration type (i.e. [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")) in that while the “CREATE TYPE” statement
    would be emitted with the correct schema, the schema would not be rendered in
    the CREATE TABLE statement at the point at which the enumeration was referenced.
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即“schema_translate_map”功能无法与 PostgreSQL 原生枚举类型（即 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")）一起工作，因为虽然“CREATE TYPE”语句会以正确的模式发出，但模式不会在引用枚举时在
    CREATE TABLE 语句中呈现。
- en: 'References: [#5158](https://www.sqlalchemy.org/trac/ticket/5158)'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5158](https://www.sqlalchemy.org/trac/ticket/5158)
- en: '**[postgresql] [bug] [reflection]**'
  id: totrans-2411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [reflection]**'
- en: Fixed bug where PostgreSQL reflection of CHECK constraints would fail to parse
    the constraint if the SQL text contained newline characters. The regular expression
    has been adjusted to accommodate for this case. Pull request courtesy Eric Borczuk.
  id: totrans-2412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 反射 CHECK 约束的 bug，如果 SQL 文本包含换行符，则解析约束会失败。正则表达式已经调整以适应这种情况。感谢
    Eric Borczuk 提交的拉取请求。
- en: 'References: [#5170](https://www.sqlalchemy.org/trac/ticket/5170)'
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5170](https://www.sqlalchemy.org/trac/ticket/5170)
- en: mysql
  id: totrans-2414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") construct where using
    a SQL function or other composed expression for a column argument would not properly
    render the `VALUES` keyword surrounding the column itself.
  id: totrans-2416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") 构造中的问题，其中对于列参数使用 SQL
    函数或其他组合表达式时，不会正确渲染围绕列本身的 `VALUES` 关键字。
- en: 'References: [#5173](https://www.sqlalchemy.org/trac/ticket/5173)'
  id: totrans-2417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5173](https://www.sqlalchemy.org/trac/ticket/5173)
- en: mssql
  id: totrans-2418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where the [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") type would not accommodate for the
    `None` value, introduced as part of the series of fixes for this type first introduced
    in [#4983](https://www.sqlalchemy.org/trac/ticket/4983), [#5045](https://www.sqlalchemy.org/trac/ticket/5045).
    Additionally, added support for passing a backend-specific date formatted string
    through this type, as is typically allowed for date/time types on most other DBAPIs.
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") 类型无法容纳 `None` 值的问题，这是为了修复此类型的一系列问题而引入的，首次在
    [#4983](https://www.sqlalchemy.org/trac/ticket/4983) 中引入，[#5045](https://www.sqlalchemy.org/trac/ticket/5045)。此外，还增加了通过此类型传递后端特定日期格式字符串的支持，这通常允许在大多数其他
    DBAPI 上的日期/时间类型上使用。
- en: 'References: [#5132](https://www.sqlalchemy.org/trac/ticket/5132)'
  id: totrans-2421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5132](https://www.sqlalchemy.org/trac/ticket/5132)
- en: oracle
  id: totrans-2422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed a reflection bug where table comments could only be retrieved for tables
    actually owned by the user but not for tables visible to the user but owned by
    someone else. Pull request courtesy Dave Hirschfeld.
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个反射 bug，表注释只能检索由用户拥有的表，而不能检索对用户可见但由其他人拥有的表。感谢 Dave Hirschfeld 提交的拉取请求。
- en: 'References: [#5146](https://www.sqlalchemy.org/trac/ticket/5146)'
  id: totrans-2425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5146](https://www.sqlalchemy.org/trac/ticket/5146)
- en: misc
  id: totrans-2426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[usecase] [ext]**'
  id: totrans-2427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[usecase] [ext]**'
- en: Added keyword arguments to the [`MutableList.sort()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList.sort
    "sqlalchemy.ext.mutable.MutableList.sort") function so that a key function as
    well as the “reverse” keyword argument can be provided.
  id: totrans-2428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`MutableList.sort()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList.sort
    "sqlalchemy.ext.mutable.MutableList.sort") 函数添加了关键字参数，以便提供键函数以及“reverse”关键字参数。
- en: 'References: [#5114](https://www.sqlalchemy.org/trac/ticket/5114)'
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5114](https://www.sqlalchemy.org/trac/ticket/5114)
- en: '**[performance] [bug]**'
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[performance] [bug]**'
- en: Revised an internal change to the test system added as a result of [#5085](https://www.sqlalchemy.org/trac/ticket/5085)
    where a testing-related module per dialect would be loaded unconditionally upon
    making use of that dialect, pulling in SQLAlchemy’s testing framework as well
    as the ORM into the module import space. This would only impact initial startup
    time and memory to a modest extent, however it’s best that these additional modules
    aren’t reverse-dependent on straight Core usage.
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了由于 [#5085](https://www.sqlalchemy.org/trac/ticket/5085) 导致的测试系统的内部更改，其中对于每个方言的测试相关模块将在使用该方言时无条件加载，将
    SQLAlchemy 的测试框架���及 ORM 引入模块导入空间。这只会对初始启动时间和内存产生一定影响，但最好这些额外模块不会反向依赖于直接的 Core
    使用。
- en: 'References: [#5180](https://www.sqlalchemy.org/trac/ticket/5180)'
  id: totrans-2432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5180](https://www.sqlalchemy.org/trac/ticket/5180)
- en: '**[bug] [installation]**'
  id: totrans-2433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [installation]**'
- en: Vendored the `inspect.formatannotation` function inside of `sqlalchemy.util.compat`,
    which is needed for the vendored version of `inspect.formatargspec`. The function
    is not documented in cPython and is not guaranteed to be available in future Python
    versions.
  id: totrans-2434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `sqlalchemy.util.compat` 中添加了 `inspect.formatannotation` 函数的供应版本，这是 `inspect.formatargspec`
    的供应版本所需的。该函数在 cPython 中没有文档，并且不能保证在未来的 Python 版本中可用。
- en: 'References: [#5138](https://www.sqlalchemy.org/trac/ticket/5138)'
  id: totrans-2435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5138](https://www.sqlalchemy.org/trac/ticket/5138)
- en: 1.3.13
  id: totrans-2436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.13
- en: 'Released: January 22, 2020'
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2020年1月22日
- en: orm
  id: totrans-2438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance]**'
  id: totrans-2439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [performance]**'
- en: Identified a performance issue in the system by which a join is constructed
    based on a mapped relationship. The clause adaption system would be used for the
    majority of join expressions including in the common case where no adaptation
    is needed. The conditions under which this adaptation occur have been refined
    so that average non-aliased joins along a simple relationship without a “secondary”
    table use about 70% less function calls.
  id: totrans-2440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发现了一个性能问题，即基于映射关系构建连接的系统。子句适配系统将用于大多数连接表达式，包括在常见情况下不需要适配的情况。已经对发生适配的条件进行了优化，以便在简单关系中的平均非别名连接中，没有“secondary”表使用约70%的函数调用。
- en: '**[orm] [bug] [engine]**'
  id: totrans-2441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Added test support and repaired a wide variety of unnecessary reference cycles
    created for short-lived objects, mostly in the area of ORM queries. Thanks much
    to Carson Ip for the help on this.
  id: totrans-2442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了测试支持，并修复了在ORM查询领域中为短暂对象创建的大量不必要的引用循环，这主要是在ORM查询领域。非常感谢 Carson Ip 的帮助。
- en: 'References: [#5050](https://www.sqlalchemy.org/trac/ticket/5050), [#5056](https://www.sqlalchemy.org/trac/ticket/5056),
    [#5071](https://www.sqlalchemy.org/trac/ticket/5071)'
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5050](https://www.sqlalchemy.org/trac/ticket/5050)，[#5056](https://www.sqlalchemy.org/trac/ticket/5056)，[#5071](https://www.sqlalchemy.org/trac/ticket/5071)
- en: '**[orm] [bug]**'
  id: totrans-2444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in loader options introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a loader option using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") targeting an aliased entity that is an
    inheriting subclass of the entity which the preceding relationship refers to would
    fail to produce a matching path. See also [#5082](https://www.sqlalchemy.org/trac/ticket/5082)
    fixed in this same release which involves a similar kind of issue.
  id: totrans-2445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.3.0b3版本中引入的加载器选项中的回归问题，通过 [#4468](https://www.sqlalchemy.org/trac/ticket/4468)，其中使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")创建加载器选项，针对的是一个继承自前一个关系引用的实体的别名实体，将无法生成匹配路径。另请参见在此相同版本中修复的
    [#5082](https://www.sqlalchemy.org/trac/ticket/5082)，涉及类似类型的问题。
- en: 'References: [#5107](https://www.sqlalchemy.org/trac/ticket/5107)'
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5107](https://www.sqlalchemy.org/trac/ticket/5107)
- en: '**[orm] [bug]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in joined eager loading introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a joined option across a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") into a polymorphic subclass using `RelationshipProperty.of_type()`
    and then further along regular mapped relationships would fail as the polymorphic
    subclass would not add itself to the load path in a way that could be located
    by the loader strategy. A tweak has been made to resolve this scenario.
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.3.0b3版本中引入的连接式贪婪加载中的回归问题，通过 [#4468](https://www.sqlalchemy.org/trac/ticket/4468)，在使用`RelationshipProperty.of_type()`创建跨越[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")到一个多态子类的连接选项，然后沿着常规映射关系进一步失败的情况，因为多态子类不会以可以被加载策略定位的方式将自身添加到加载路径中。已进行调整以解决此场景。
- en: 'References: [#5082](https://www.sqlalchemy.org/trac/ticket/5082)'
  id: totrans-2449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5082](https://www.sqlalchemy.org/trac/ticket/5082)
- en: '**[orm] [bug]**'
  id: totrans-2450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired a warning in the ORM flush process that was not covered by test coverage
    when deleting objects that use the “version_id” feature. This warning is generally
    unreachable unless using a dialect that sets the “supports_sane_rowcount” flag
    to False, which is not typically the case however is possible for some MySQL configurations
    as well as older Firebird drivers, and likely some third party dialects.
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM刷新过程中的警告，当删除使用“version_id”功能的对象时，该警告未被测试覆盖。通常情况下，此警告是无法触及的，除非使用的方言将“supports_sane_rowcount”标志设置为False，这在一些MySQL配置以及较旧的Firebird驱动程序以及可能一些第三方方言中可能发生。
- en: 'References: [#5068](https://www.sqlalchemy.org/trac/ticket/5068)'
  id: totrans-2452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5068](https://www.sqlalchemy.org/trac/ticket/5068)
- en: '**[orm] [bug]**'
  id: totrans-2453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where usage of joined eager loading would not properly wrap the query
    inside of a subquery when [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") were used against the query. When any kind of
    result-limiting approach is used, such as DISTINCT, LIMIT, OFFSET, joined eager
    loading embeds the row-limited query inside of a subquery so that the collection
    results are not impacted. For some reason, the presence of GROUP BY was never
    included in this criterion, even though it has a similar effect as using DISTINCT.
    Additionally, the bug would prevent using GROUP BY at all for a joined eager load
    query for most database platforms which forbid non-aggregated, non-grouped columns
    from being in the query, as the additional columns for the joined eager load would
    not be accepted by the database.
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用连接式懒加载时，当针对查询使用[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")时，查询未正确包装在子查询中的错误。当使用任何形式的结果限制方法时，例如DISTINCT、LIMIT、OFFSET，连接式懒加载将行限制查询嵌入到子查询中，以便不影响集合结果。由于某种原因，GROUP
    BY 的存在从未包含在这个标准中，即使它具有与使用DISTINCT 相似的效果。此外，该 bug 将阻止在大多数数据库平台上使用 GROUP BY 作为连接式懒加载查询的所有部分，因为这些平台禁止在查询中存在非聚合、非分组的列，而连接式懒加载的附加列将不被数据库接受。
- en: 'References: [#5065](https://www.sqlalchemy.org/trac/ticket/5065)'
  id: totrans-2455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5065](https://www.sqlalchemy.org/trac/ticket/5065)
- en: engine
  id: totrans-2456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where the collection of value processors on a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object would be mutated when “expanding IN” parameters
    were used with a datatype that has bind value processors; in particular, this
    would mean that when using statement caching and/or baked queries, the same compiled._bind_processors
    collection would be mutated concurrently. Since these processors are the same
    function for a given bind parameter namespace every time, there was no actual
    negative effect of this issue, however, the execution of a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object should never be causing any changes in its
    state, especially given that they are intended to be thread-safe and reusable
    once fully constructed.
  id: totrans-2458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用具有绑定值处理器的数据类型（例如“扩展IN”参数）时，修复了在[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象上收集的值处理器集合会发生变异的问题；特别地，这意味着当使用语句缓存和/或烘焙查询时，同一compiled._bind_processors集合将同时发生变异。由于这些处理器对于给定的绑定参数命名空间每次都是相同的函数，因此这个问题实际上没有负面影响，然而，[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象的执行绝不能导致其状态发生任何更改，特别是考虑到它们被设计为一旦完全构建就是线程安全和可重复使用的。
- en: 'References: [#5048](https://www.sqlalchemy.org/trac/ticket/5048)'
  id: totrans-2459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5048](https://www.sqlalchemy.org/trac/ticket/5048)
- en: sql
  id: totrans-2460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: A function created using [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") can now specify that the name of the
    function should be rendered with or without quotes by assigning the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to the .name element of the
    object. Prior to 1.3.4, quoting was never applied to function names, and some
    quoting was introduced in [#4467](https://www.sqlalchemy.org/trac/ticket/4467)
    but no means to force quoting for a mixed case name was available. Additionally,
    the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct when used as the name will
    properly register its lowercase name in the function registry so that the name
    continues to be available via the `func.` registry.
  id: totrans-2462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")创建的函数现在可以通过将[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")结构分配给对象的.name元素来指定函数名称是否应该用引号括起来。在1.3.4之前，从不将引号应用于函数名称，并且在[#4467](https://www.sqlalchemy.org/trac/ticket/4467)中引入了一些引号，但没有一种方法来强制对一个混合大小写名称进行引用。此外，当用作名称时，[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")结构将正确地在函数注册表中注册其小写名称，以便该名称继续通过`func.`注册表可用。
- en: See also
  id: totrans-2463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")'
  id: totrans-2464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")'
- en: 'References: [#5079](https://www.sqlalchemy.org/trac/ticket/5079)'
  id: totrans-2465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5079](https://www.sqlalchemy.org/trac/ticket/5079)
- en: postgresql
  id: totrans-2466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for prefixes to the [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, to allow support for Postgresql 12
    “MATERIALIZED” and “NOT MATERIALIZED” phrases. Pull request courtesy Marat Sharafutdinov.
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造的前缀支持，以支持Postgresql
    12的“MATERIALIZED”和“NOT MATERIALIZED”短语。感谢Marat Sharafutdinov的拉取请求。
- en: See also
  id: totrans-2469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-2470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: 'References: [#5040](https://www.sqlalchemy.org/trac/ticket/5040)'
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5040](https://www.sqlalchemy.org/trac/ticket/5040)
- en: '**[postgresql] [bug]**'
  id: totrans-2472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the PostgreSQL dialect would fail to parse a reflected CHECK
    constraint that was a boolean-valued function (as opposed to a boolean-valued
    expression).
  id: totrans-2473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言无法解析反射的CHECK约束的问题，该约束是一个布尔值函数（而不是布尔值表达式）。
- en: 'References: [#5039](https://www.sqlalchemy.org/trac/ticket/5039)'
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5039](https://www.sqlalchemy.org/trac/ticket/5039)
- en: mssql
  id: totrans-2475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where a timezone-aware `datetime` value being converted to string
    for use as a parameter value of a [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") column was omitting the fractional
    seconds.
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将时区感知的`datetime`值转换为字符串以用作[`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET")列的参数值时，省略了小数秒的问题。
- en: 'References: [#5045](https://www.sqlalchemy.org/trac/ticket/5045)'
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5045](https://www.sqlalchemy.org/trac/ticket/5045)
- en: tests
  id: totrans-2479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-2480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed a few test failures which would occur on Windows due to SQLite file locking
    issues, as well as some timing issues in connection pool related tests; pull request
    courtesy Federico Caselli.
  id: totrans-2481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些测试失败的问题，这些问题可能是由于SQLite文件锁定问题在Windows上发生，以及连接池相关测试中的一些时间问题；感谢Federico Caselli的拉取请求。
- en: 'References: [#4946](https://www.sqlalchemy.org/trac/ticket/4946)'
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4946](https://www.sqlalchemy.org/trac/ticket/4946)
- en: '**[tests] [postgresql]**'
  id: totrans-2483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [postgresql]**'
- en: Improved detection of two phase transactions requirement for the PostgreSQL
    database by testing that max_prepared_transactions is set to a value greater than
    0\. Pull request courtesy Federico Caselli.
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过测试确保了PostgreSQL数据库对两阶段事务需求的改进，测试max_prepared_transactions是否设置为大于0的值。感谢Federico
    Caselli的拉取请求。
- en: 'References: [#5057](https://www.sqlalchemy.org/trac/ticket/5057)'
  id: totrans-2485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5057](https://www.sqlalchemy.org/trac/ticket/5057)
- en: misc
  id: totrans-2486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-2487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in sqlalchemy.ext.serializer where a unique [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object could conflict with itself if
    it were present in the mapping itself, as well as the filter condition of the
    query, as one side would be used against the non-deserialized version and the
    other side would use the deserialized version. Logic is added to [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") similar to its “clone” method which
    will uniquify the parameter name upon deserialize so that it doesn’t conflict
    with its original.
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sqlalchemy.ext.serializer中的错误，其中一个唯一的[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象可能会与自身冲突，如果它同时存在于映射本身和查询的过滤条件中，其中一侧将用于与未反序列化版本对比，另一侧将使用反序列化版本。在[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")中添加了类似于其“clone”方法的逻辑，该方法在反序列化时将参数名称唯一化，以避免与原始名称冲突。
- en: 'References: [#5086](https://www.sqlalchemy.org/trac/ticket/5086)'
  id: totrans-2489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5086](https://www.sqlalchemy.org/trac/ticket/5086)
- en: orm
  id: totrans-2490
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance]**'
  id: totrans-2491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [performance]**'
- en: Identified a performance issue in the system by which a join is constructed
    based on a mapped relationship. The clause adaption system would be used for the
    majority of join expressions including in the common case where no adaptation
    is needed. The conditions under which this adaptation occur have been refined
    so that average non-aliased joins along a simple relationship without a “secondary”
    table use about 70% less function calls.
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过系统发现了一个性能问题，即基于映射关系构建连接的问题。子句适配系统将用于大多数连接表达式，包括在常见情况下不需要适配的情况。已经对发生适配的条件进行了优化，以便平均非别名连接沿着简单关系使用约70%的函数调用。
- en: '**[orm] [bug] [engine]**'
  id: totrans-2493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Added test support and repaired a wide variety of unnecessary reference cycles
    created for short-lived objects, mostly in the area of ORM queries. Thanks much
    to Carson Ip for the help on this.
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了测试支持，并修复了在ORM查询中为短暂对象创建的大量不必要的引用循环。非常感谢Carson Ip在此方面的帮助。
- en: 'References: [#5050](https://www.sqlalchemy.org/trac/ticket/5050), [#5056](https://www.sqlalchemy.org/trac/ticket/5056),
    [#5071](https://www.sqlalchemy.org/trac/ticket/5071)'
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5050](https://www.sqlalchemy.org/trac/ticket/5050)，[#5056](https://www.sqlalchemy.org/trac/ticket/5056)，[#5071](https://www.sqlalchemy.org/trac/ticket/5071)
- en: '**[orm] [bug]**'
  id: totrans-2496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in loader options introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a loader option using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") targeting an aliased entity that is an
    inheriting subclass of the entity which the preceding relationship refers to would
    fail to produce a matching path. See also [#5082](https://www.sqlalchemy.org/trac/ticket/5082)
    fixed in this same release which involves a similar kind of issue.
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.3.0b3中引入的加载器选项回归，通过[#4468](https://www.sqlalchemy.org/trac/ticket/4468)，使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")创建一个针对前一个关系引用的实体的继承子类的别名实体的加载器选项将无法生成匹配路径。另请参见[#5082](https://www.sqlalchemy.org/trac/ticket/5082)，在此相同版本中修复了类似类型的问题。
- en: 'References: [#5107](https://www.sqlalchemy.org/trac/ticket/5107)'
  id: totrans-2498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5107](https://www.sqlalchemy.org/trac/ticket/5107)
- en: '**[orm] [bug]**'
  id: totrans-2499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in joined eager loading introduced in 1.3.0b3 via [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    where the ability to create a joined option across a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") into a polymorphic subclass using `RelationshipProperty.of_type()`
    and then further along regular mapped relationships would fail as the polymorphic
    subclass would not add itself to the load path in a way that could be located
    by the loader strategy. A tweak has been made to resolve this scenario.
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.3.0b3中引入的连接急加载中的回归，通过[#4468](https://www.sqlalchemy.org/trac/ticket/4468)，使用`RelationshipProperty.of_type()`创建跨[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")到多态子类的连接选项，然后沿着常规映射关系进一步失败，因为多态子类不会以可以被加载策略定位的方式将自身添加到加载路径中。已进行微调以解决此场景。
- en: 'References: [#5082](https://www.sqlalchemy.org/trac/ticket/5082)'
  id: totrans-2501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5082](https://www.sqlalchemy.org/trac/ticket/5082)
- en: '**[orm] [bug]**'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired a warning in the ORM flush process that was not covered by test coverage
    when deleting objects that use the “version_id” feature. This warning is generally
    unreachable unless using a dialect that sets the “supports_sane_rowcount” flag
    to False, which is not typically the case however is possible for some MySQL configurations
    as well as older Firebird drivers, and likely some third party dialects.
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM刷新过程中的警告，当删除使用“version_id”功能的对象时，该警告未被测试覆盖。通常情况下，除非使用的方言将“supports_sane_rowcount”标志设置为False，否则无法到达此警告，尽管对于一些MySQL配置以及较旧的Firebird驱动程序以及可能的一些第三方方言来说，这是可能的。
- en: 'References: [#5068](https://www.sqlalchemy.org/trac/ticket/5068)'
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5068](https://www.sqlalchemy.org/trac/ticket/5068)
- en: '**[orm] [bug]**'
  id: totrans-2505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where usage of joined eager loading would not properly wrap the query
    inside of a subquery when [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") were used against the query. When any kind of
    result-limiting approach is used, such as DISTINCT, LIMIT, OFFSET, joined eager
    loading embeds the row-limited query inside of a subquery so that the collection
    results are not impacted. For some reason, the presence of GROUP BY was never
    included in this criterion, even though it has a similar effect as using DISTINCT.
    Additionally, the bug would prevent using GROUP BY at all for a joined eager load
    query for most database platforms which forbid non-aggregated, non-grouped columns
    from being in the query, as the additional columns for the joined eager load would
    not be accepted by the database.
  id: totrans-2506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即使用连接的急加载时，当针对查询使用[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")时，查询不会正确地包装在子查询中。当使用任何种类的结果限制方法时，例如DISTINCT、LIMIT、OFFSET，连接的急加载将行限制的查询嵌入到子查询中，以便不影响集合结果。出于某种原因，GROUP
    BY的存在从未包含在此标准中，即使它具有与使用DISTINCT相同的效果。此外，该错误将阻止对大多数数据库平台的连接急加载查询使用GROUP BY，这些平台禁止在查询中存在非聚合、非分组的列，因为连接的急加载的附加列不会被数据库接受。
- en: 'References: [#5065](https://www.sqlalchemy.org/trac/ticket/5065)'
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5065](https://www.sqlalchemy.org/trac/ticket/5065)
- en: engine
  id: totrans-2508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where the collection of value processors on a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object would be mutated when “expanding IN” parameters
    were used with a datatype that has bind value processors; in particular, this
    would mean that when using statement caching and/or baked queries, the same compiled._bind_processors
    collection would be mutated concurrently. Since these processors are the same
    function for a given bind parameter namespace every time, there was no actual
    negative effect of this issue, however, the execution of a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object should never be causing any changes in its
    state, especially given that they are intended to be thread-safe and reusable
    once fully constructed.
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，当使用具有绑定值处理器的数据类型与“展开IN”参数一起使用时，[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象上的值处理器集合会发生变异；特别是，这意味着当使用语句缓存和/或烘焙查询时，同一compiled._bind_processors集合会同时发生变异。由于这些处理器对于给定的绑定参数命名空间每次都是相同的函数，因此这个问题实际上没有任何负面影响，但是，[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象的执行绝不应该导致其状态发生任何更改，特别是考虑到它们旨在在完全构造后是线程安全和可重复使用的。
- en: 'References: [#5048](https://www.sqlalchemy.org/trac/ticket/5048)'
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5048](https://www.sqlalchemy.org/trac/ticket/5048)
- en: sql
  id: totrans-2512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: A function created using [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") can now specify that the name of the
    function should be rendered with or without quotes by assigning the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to the .name element of the
    object. Prior to 1.3.4, quoting was never applied to function names, and some
    quoting was introduced in [#4467](https://www.sqlalchemy.org/trac/ticket/4467)
    but no means to force quoting for a mixed case name was available. Additionally,
    the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct when used as the name will
    properly register its lowercase name in the function registry so that the name
    continues to be available via the `func.` registry.
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")创建的函数现在可以通过将[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造分配给对象的.name元素来指定函数的名称是否应该带引号或不带引号。在1.3.4之前，函数名称从不应用引号，[#4467](https://www.sqlalchemy.org/trac/ticket/4467)中引入了一些引号，但没有一种方法可以强制对混合大小写名称进行引号。此外，当作为名称使用[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造时，将正确在函数注册表中注册其小写名称，以便名称继续通过`func.`注册表可用。
- en: See also
  id: totrans-2515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")'
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")'
- en: 'References: [#5079](https://www.sqlalchemy.org/trac/ticket/5079)'
  id: totrans-2517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5079](https://www.sqlalchemy.org/trac/ticket/5079)
- en: postgresql
  id: totrans-2518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for prefixes to the [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, to allow support for Postgresql 12
    “MATERIALIZED” and “NOT MATERIALIZED” phrases. Pull request courtesy Marat Sharafutdinov.
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造添加了前缀支持，以支持 Postgresql 12 的“MATERIALIZED”和“NOT MATERIALIZED”短语。感谢 Marat Sharafutdinov
    提供的拉取请求。
- en: See also
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`HasCTE.cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-2522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: 'References: [#5040](https://www.sqlalchemy.org/trac/ticket/5040)'
  id: totrans-2523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5040](https://www.sqlalchemy.org/trac/ticket/5040)
- en: '**[postgresql] [bug]**'
  id: totrans-2524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the PostgreSQL dialect would fail to parse a reflected CHECK
    constraint that was a boolean-valued function (as opposed to a boolean-valued
    expression).
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了 PostgreSQL 方言无法解析反射的 CHECK 约束的问题，该约束是布尔值函数（而不是布尔值表达式）。  '
- en: 'References: [#5039](https://www.sqlalchemy.org/trac/ticket/5039)'
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5039](https://www.sqlalchemy.org/trac/ticket/5039)
- en: mssql
  id: totrans-2527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where a timezone-aware `datetime` value being converted to string
    for use as a parameter value of a [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") column was omitting the fractional
    seconds.
  id: totrans-2529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将时区感知的 `datetime` 值转换为字符串以用作 [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") 列的参数值时，省略了小数秒的问题。
- en: 'References: [#5045](https://www.sqlalchemy.org/trac/ticket/5045)'
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5045](https://www.sqlalchemy.org/trac/ticket/5045)
- en: tests
  id: totrans-2531
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed a few test failures which would occur on Windows due to SQLite file locking
    issues, as well as some timing issues in connection pool related tests; pull request
    courtesy Federico Caselli.
  id: totrans-2533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些在 Windows 上由于 SQLite 文件锁定问题导致的测试失败，以及连接池相关测试中的一些时间问题；感谢 Federico Caselli
    提供的拉取请求。
- en: 'References: [#4946](https://www.sqlalchemy.org/trac/ticket/4946)'
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4946](https://www.sqlalchemy.org/trac/ticket/4946)
- en: '**[tests] [postgresql]**'
  id: totrans-2535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [postgresql]**'
- en: Improved detection of two phase transactions requirement for the PostgreSQL
    database by testing that max_prepared_transactions is set to a value greater than
    0\. Pull request courtesy Federico Caselli.
  id: totrans-2536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过测试检测到 PostgreSQL 数据库的两阶段事务要求的改进，测试 max_prepared_transactions 设置为大于 0 的值。感谢
    Federico Caselli 提供的拉取请求。
- en: 'References: [#5057](https://www.sqlalchemy.org/trac/ticket/5057)'
  id: totrans-2537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5057](https://www.sqlalchemy.org/trac/ticket/5057)
- en: misc
  id: totrans-2538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in sqlalchemy.ext.serializer where a unique [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object could conflict with itself if
    it were present in the mapping itself, as well as the filter condition of the
    query, as one side would be used against the non-deserialized version and the
    other side would use the deserialized version. Logic is added to [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") similar to its “clone” method which
    will uniquify the parameter name upon deserialize so that it doesn’t conflict
    with its original.
  id: totrans-2540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 sqlalchemy.ext.serializer 中的错误，其中唯一的 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象可能会与自身冲突，如果它存在于映射本身以及查询的筛选条件中，则一侧将用于与非反序列化版本一起使用，另一侧将使用序列化版本。类似于其
    “clone” 方法的逻辑被添加到 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 中，该方法将在反序列化时使参数名称唯一化，以避免与其原始名称冲突。
- en: 'References: [#5086](https://www.sqlalchemy.org/trac/ticket/5086)'
  id: totrans-2541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5086](https://www.sqlalchemy.org/trac/ticket/5086)
- en: 1.3.12
  id: totrans-2542
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.12
- en: 'Released: December 16, 2019'
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年12月16日
- en: orm
  id: totrans-2544
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue involving `lazy="raise"` strategy where an ORM delete of an object
    would raise for a simple “use-get” style many-to-one relationship that had lazy=”raise”
    configured. This is inconsistent vs. the change introduced in 1.3 as part of [#4353](https://www.sqlalchemy.org/trac/ticket/4353),
    where it was established that a history operation that does not expect emit SQL
    should bypass the `lazy="raise"` check, and instead effectively treat it as `lazy="raise_on_sql"`
    for this case. The fix adjusts the lazy loader strategy to not raise for the case
    where the lazy load was instructed that it should not emit SQL if the object were
    not present.
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及`lazy="raise"`策略的问题，其中ORM删除对象会为一个简单的“use-get”样式的多对一关系引发异常，该关系配置了lazy=”raise”。这与1.3版本中作为[#4353](https://www.sqlalchemy.org/trac/ticket/4353)的一部分引入的更改不一致，其中已经确定了一个不期望发出SQL的历史操作应绕过`lazy="raise"`检查，并且对于这种情况实际上将其视为`lazy="raise_on_sql"`。修复调整了懒加载器策略，以便在懒加载指示不应在对象不存在时发出SQL时不引发异常。
- en: 'References: [#4997](https://www.sqlalchemy.org/trac/ticket/4997)'
  id: totrans-2547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4997](https://www.sqlalchemy.org/trac/ticket/4997)
- en: '**[orm] [bug]**'
  id: totrans-2548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression introduced in 1.3.0 related to the association proxy refactor
    in [#4351](https://www.sqlalchemy.org/trac/ticket/4351) that prevented [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") attributes from working in terms of an association
    proxy that references them.
  id: totrans-2549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.3.0中引入的与关联代理重构相关的回归问题，该问题阻止了[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")属性在引用它们的关联代理方面的工作。
- en: 'References: [#5000](https://www.sqlalchemy.org/trac/ticket/5000)'
  id: totrans-2550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5000](https://www.sqlalchemy.org/trac/ticket/5000)
- en: '**[orm] [bug]**'
  id: totrans-2551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Setting persistence-related flags on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") while also setting viewonly=True will now emit
    a regular warning, as these flags do not make sense for a viewonly=True relationship.
    In particular, the “cascade” settings have their own warning that is generated
    based on the individual values, such as “delete, delete-orphan”, that should not
    apply to a viewonly relationship. Note however that in the case of “cascade”,
    these settings are still erroneously taking effect even though the relationship
    is set up as “viewonly”. In 1.4, all persistence-related cascade settings will
    be disallowed on a viewonly=True relationship in order to resolve this issue.
  id: totrans-2552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在设置[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的持久性相关标志时，同时设置viewonly=True将会发出常规警告，因为这些标志对于viewonly=True关系没有意义。特别是，“cascade”设置有自己的警告，根据各个值生成，例如“delete,
    delete-orphan”，这些值不应适用于viewonly关系。然而需要注意的是，在“cascade”情况下，这些设置仍然错误地生效，即使关系设置为“viewonly”。在1.4版本中，将禁止在viewonly=True关系上设置所有与持久性相关的级联设置，以解决此问题。
- en: 'References: [#4993](https://www.sqlalchemy.org/trac/ticket/4993)'
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4993](https://www.sqlalchemy.org/trac/ticket/4993)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-2554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: Fixed issue where when assigning a collection to itself as a slice, the mutation
    operation would fail as it would first erase the assigned collection inadvertently.
    As an assignment that does not change the contents should not generate events,
    the operation is now a no-op. Note that the fix only applies to Python 3; in Python
    2, the `__setitem__` hook isn’t called in this case; `__setslice__` is used instead
    which recreates the list item-by-item in all cases.
  id: totrans-2555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将集合分配给自身作为切片时出现的问题，变异操作会失败，因为它首先无意中擦除了分配的集合。由于不改变内容的赋值不应生成事件，因此该操作现在是一个无操作。需要注意的是，修复仅适用于Python
    3；在Python 2中，在这种情况下不会调用`__setitem__`钩子；而是使用`__setslice__`，它会逐个项目地重新创建列表项。
- en: 'References: [#4990](https://www.sqlalchemy.org/trac/ticket/4990)'
  id: totrans-2556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4990](https://www.sqlalchemy.org/trac/ticket/4990)
- en: '**[orm] [bug]**'
  id: totrans-2557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where by if the “begin” of a transaction failed at the Core engine/connection
    level, such as due to network error or database is locked for some transactional
    recipes, within the context of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") procuring that connection from the connection pool and
    then immediately returning it, the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would not close the connection despite this connection
    not being stored within the state of that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This would lead to the connection being cleaned out
    by the connection pool weakref handler within garbage collection which is an unpreferred
    codepath that in some special configurations can emit errors in standard error.
  id: totrans-2558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果Core引擎/连接级别的“begin”失败，例如由于网络错误或数据库由于某些事务配方而被锁定，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在从连接池获取该连接并立即返回它的上下文中，ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")尽管该连接未存储在该[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的状态中，但不会关闭连接。这将导致连接被连接池弱引用处理程序在垃圾回收中清除，这是一个不受欢迎的代码路径，在某些特殊配置中可能会在标准错误中发出错误。
- en: 'References: [#5034](https://www.sqlalchemy.org/trac/ticket/5034)'
  id: totrans-2559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5034](https://www.sqlalchemy.org/trac/ticket/5034)
- en: sql
  id: totrans-2560
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where “distinct” keyword passed to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") would not treat a string value as a “label
    reference” in the same way that the `select.distinct()` does; it would instead
    raise unconditionally. This keyword argument and the others passed to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") will ultimately be deprecated for SQLAlchemy
    2.0.
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将“distinct”关键字传递给[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")时不会像`select.distinct()`一样将字符串值视为“标签引用”的错误，而是会无条件引发异常。这些关键字参数和传递给[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的其他参数最终将在SQLAlchemy 2.0中被弃用。
- en: 'References: [#5028](https://www.sqlalchemy.org/trac/ticket/5028)'
  id: totrans-2563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5028](https://www.sqlalchemy.org/trac/ticket/5028)
- en: '**[sql] [bug]**'
  id: totrans-2564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Changed the text of the exception for “Can’t resolve label reference” to include
    other kinds of label coercions, namely that “DISTINCT” is also in this category
    under the PostgreSQL dialect.
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“无法解析标签引用”异常的文本更改为包括其他类型的标签强制转换，即“DISTINCT”也属于PostgreSQL方言下的此类别。
- en: sqlite
  id: totrans-2566
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed issue to workaround SQLite’s behavior of assigning “numeric” affinity
    to JSON datatypes, first described at [Support for SQLite JSON Added](migration_13.html#change-3850),
    which returns scalar numeric JSON values as a number and not as a string that
    can be JSON deserialized. The SQLite-specific JSON deserializer now gracefully
    degrades for this case as an exception and bypasses deserialization for single
    numeric values, as from a JSON perspective they are already deserialized.
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了解决SQLite将“numeric”亲和性分配给JSON数据类型的行为问题，首次描述在[添加对SQLite JSON的支持](migration_13.html#change-3850)中，该行为将标量数值JSON值返回为数字而不是可以进行JSON反序列化的字符串。SQLite特定的JSON反序列化器现在对这种情况进行了优雅降级处理，作为异常并且对于单个数值值绕过反序列化，因为从JSON的角度来看，它们已经被反序列化。
- en: 'References: [#5014](https://www.sqlalchemy.org/trac/ticket/5014)'
  id: totrans-2569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5014](https://www.sqlalchemy.org/trac/ticket/5014)
- en: mssql
  id: totrans-2570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Repaired support for the [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") datatype on PyODBC, by adding PyODBC-level
    result handlers as it does not include native support for this datatype. This
    includes usage of the Python 3 “timezone” tzinfo subclass in order to set up a
    timezone, which on Python 2 makes use of a minimal backport of “timezone” in sqlalchemy.util.
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过在PyODBC中添加PyODBC级别的结果处理程序修复了对[`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET")数据类型的支持，因为它不包含对此数据类型的原生支持。这包括使用Python
    3的“timezone” tzinfo子类来设置时区，在Python 2中使用了SQLAlchemy.util中“timezone”的最小回退。
- en: 'References: [#4983](https://www.sqlalchemy.org/trac/ticket/4983)'
  id: totrans-2573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4983](https://www.sqlalchemy.org/trac/ticket/4983)
- en: orm
  id: totrans-2574
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue involving `lazy="raise"` strategy where an ORM delete of an object
    would raise for a simple “use-get” style many-to-one relationship that had lazy=”raise”
    configured. This is inconsistent vs. the change introduced in 1.3 as part of [#4353](https://www.sqlalchemy.org/trac/ticket/4353),
    where it was established that a history operation that does not expect emit SQL
    should bypass the `lazy="raise"` check, and instead effectively treat it as `lazy="raise_on_sql"`
    for this case. The fix adjusts the lazy loader strategy to not raise for the case
    where the lazy load was instructed that it should not emit SQL if the object were
    not present.
  id: totrans-2576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及`lazy="raise"`策略的问题，其中对一个对象进行 ORM 删除操作会在一个简单的“使用获取”风格的多对一关系上引发异常，而该关系配置了`lazy="raise"`。这与在1.3版本中引入的更改不一致，作为[#4353](https://www.sqlalchemy.org/trac/ticket/4353)的一部分，已经确定不希望发出
    SQL 的历史操作应绕过`lazy="raise"`检查，而是在这种情况下有效地将其视为`lazy="raise_on_sql"`。修复调整了懒加载器策略，以便在懒加载指示不应在对象不存在时发出
    SQL 的情况下不引发异常。
- en: 'References: [#4997](https://www.sqlalchemy.org/trac/ticket/4997)'
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4997](https://www.sqlalchemy.org/trac/ticket/4997)
- en: '**[orm] [bug]**'
  id: totrans-2578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression introduced in 1.3.0 related to the association proxy refactor
    in [#4351](https://www.sqlalchemy.org/trac/ticket/4351) that prevented [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") attributes from working in terms of an association
    proxy that references them.
  id: totrans-2579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.3.0中与[#4351](https://www.sqlalchemy.org/trac/ticket/4351)中的关联代理重构相关的回归，该回归阻止了[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")属性在引用它们的关联代理方面的工作。
- en: 'References: [#5000](https://www.sqlalchemy.org/trac/ticket/5000)'
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5000](https://www.sqlalchemy.org/trac/ticket/5000)
- en: '**[orm] [bug]**'
  id: totrans-2581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Setting persistence-related flags on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") while also setting viewonly=True will now emit
    a regular warning, as these flags do not make sense for a viewonly=True relationship.
    In particular, the “cascade” settings have their own warning that is generated
    based on the individual values, such as “delete, delete-orphan”, that should not
    apply to a viewonly relationship. Note however that in the case of “cascade”,
    these settings are still erroneously taking effect even though the relationship
    is set up as “viewonly”. In 1.4, all persistence-related cascade settings will
    be disallowed on a viewonly=True relationship in order to resolve this issue.
  id: totrans-2582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在设置[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的与持久性相关的标志的同时设置`viewonly=True`现在会发出常规警告，因为这些标志对于`viewonly=True`关系没有意义。特别是，“cascade”设置有自己的警告，根据各个值生成，例如“delete,
    delete-orphan”，不应适用于`viewonly`关系。但请注意，在“cascade”情况下，这些设置仍然错误地生效，即使关系设置为“viewonly”。在1.4版本中，将禁止在`viewonly=True`关系上设置所有与持久性相关的级联设置，以解决此问题。
- en: 'References: [#4993](https://www.sqlalchemy.org/trac/ticket/4993)'
  id: totrans-2583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4993](https://www.sqlalchemy.org/trac/ticket/4993)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-2584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: Fixed issue where when assigning a collection to itself as a slice, the mutation
    operation would fail as it would first erase the assigned collection inadvertently.
    As an assignment that does not change the contents should not generate events,
    the operation is now a no-op. Note that the fix only applies to Python 3; in Python
    2, the `__setitem__` hook isn’t called in this case; `__setslice__` is used instead
    which recreates the list item-by-item in all cases.
  id: totrans-2585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将集合分配给自身作为切片时出现的问题，由于首先无意中擦除了分配的集合，因此变异操作将失败。由于不改变内容的赋值不应生成事件，因此该操作现在是一个无操作。请注意，修复仅适用于
    Python 3；在 Python 2 中，这种情况下不会调用`__setitem__`钩子；而是使用`__setslice__`，它会逐个项目地重新创建列表项。
- en: 'References: [#4990](https://www.sqlalchemy.org/trac/ticket/4990)'
  id: totrans-2586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4990](https://www.sqlalchemy.org/trac/ticket/4990)
- en: '**[orm] [bug]**'
  id: totrans-2587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where by if the “begin” of a transaction failed at the Core engine/connection
    level, such as due to network error or database is locked for some transactional
    recipes, within the context of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") procuring that connection from the connection pool and
    then immediately returning it, the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would not close the connection despite this connection
    not being stored within the state of that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This would lead to the connection being cleaned out
    by the connection pool weakref handler within garbage collection which is an unpreferred
    codepath that in some special configurations can emit errors in standard error.
  id: totrans-2588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果事务的“begin”在Core引擎/连接级别失败，比如由于网络错误或数据库被锁定导致某些事务配方失败，在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的上下文中从连接池获取该连接然后立即返回它，ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")尽管该连接未存储在该[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的状态中，但不会关闭该连接。这将导致连接被连接池中的弱引用处理程序在垃圾回收中清除，这是一个不受欢迎的代码路径，在某些特殊配置中可能会在标准错误中发出错误。
- en: 'References: [#5034](https://www.sqlalchemy.org/trac/ticket/5034)'
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5034](https://www.sqlalchemy.org/trac/ticket/5034)
- en: sql
  id: totrans-2590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where “distinct” keyword passed to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") would not treat a string value as a “label
    reference” in the same way that the `select.distinct()` does; it would instead
    raise unconditionally. This keyword argument and the others passed to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") will ultimately be deprecated for SQLAlchemy
    2.0.
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将“distinct”关键字传递给[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")时不会像`select.distinct()`那样将字符串值视为“标签引用”的错误，而是会无条件引发异常。这个关键字参数和其他传递给[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的参数最终将在SQLAlchemy 2.0中被弃用。
- en: 'References: [#5028](https://www.sqlalchemy.org/trac/ticket/5028)'
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5028](https://www.sqlalchemy.org/trac/ticket/5028)
- en: '**[sql] [bug]**'
  id: totrans-2594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Changed the text of the exception for “Can’t resolve label reference” to include
    other kinds of label coercions, namely that “DISTINCT” is also in this category
    under the PostgreSQL dialect.
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了“无法解析标签引用”异常的文本，包括其他类型的标签强制转换，即“DISTINCT”也属于PostgreSQL方言下的这一类别。
- en: sqlite
  id: totrans-2596
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed issue to workaround SQLite’s behavior of assigning “numeric” affinity
    to JSON datatypes, first described at [Support for SQLite JSON Added](migration_13.html#change-3850),
    which returns scalar numeric JSON values as a number and not as a string that
    can be JSON deserialized. The SQLite-specific JSON deserializer now gracefully
    degrades for this case as an exception and bypasses deserialization for single
    numeric values, as from a JSON perspective they are already deserialized.
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了解决SQLite将“numeric”亲和性分配给JSON数据类型的行为的问题，首次描述在[添加对SQLite JSON的支持](migration_13.html#change-3850)中，它将标量数值JSON值作为数字返回，而不是作为可以进行JSON反序列化的字符串。现在，SQLite特定的JSON反序列化器对于这种情况会优雅地降级为异常，并且对于单个数值值，从JSON的角度来看，它们已经被反序列化。
- en: 'References: [#5014](https://www.sqlalchemy.org/trac/ticket/5014)'
  id: totrans-2599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5014](https://www.sqlalchemy.org/trac/ticket/5014)
- en: mssql
  id: totrans-2600
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Repaired support for the [`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET") datatype on PyODBC, by adding PyODBC-level
    result handlers as it does not include native support for this datatype. This
    includes usage of the Python 3 “timezone” tzinfo subclass in order to set up a
    timezone, which on Python 2 makes use of a minimal backport of “timezone” in sqlalchemy.util.
  id: totrans-2602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对PyODBC上的[`DATETIMEOFFSET`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DATETIMEOFFSET
    "sqlalchemy.dialects.mssql.DATETIMEOFFSET")数据类型的支持，通过添加PyODBC级别的结果处理程序，因为它不包含对这种数据类型的原生支持。这包括在Python
    3中使用“timezone” tzinfo子类来设置时区，而在Python 2中则利用了SQLAlchemy.util中“timezone”的最小回退。
- en: 'References: [#4983](https://www.sqlalchemy.org/trac/ticket/4983)'
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4983](https://www.sqlalchemy.org/trac/ticket/4983)
- en: 1.3.11
  id: totrans-2604
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.11
- en: 'Released: November 11, 2019'
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年11月11日
- en: orm
  id: totrans-2606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added accessor [`Query.is_single_entity()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.is_single_entity
    "sqlalchemy.orm.Query.is_single_entity") to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), which will indicate if the results returned by this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will be a list of ORM entities, or a tuple of entities
    or column expressions. SQLAlchemy hopes to improve upon the behavior of single
    entity / tuples in future releases such that the behavior would be explicit up
    front, however this attribute should be helpful with the current behavior. Pull
    request courtesy Patrick Hayes.
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了访问器 [`Query.is_single_entity()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.is_single_entity
    "sqlalchemy.orm.Query.is_single_entity") 到 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")，该访问器将指示此 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 返回的结果是 ORM 实体列表，还是实体或列表达式的元组。SQLAlchemy 希望在未来的版本中改进单个实体/元组的行为，以便行为在前期就是明确的，但此属性应有助于当前行为。感谢
    Patrick Hayes 提供的拉取请求。
- en: 'References: [#4934](https://www.sqlalchemy.org/trac/ticket/4934)'
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4934](https://www.sqlalchemy.org/trac/ticket/4934)
- en: '**[orm] [bug]**'
  id: totrans-2610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") flag was not intended to be manually set to True,
    and will now emit a warning when this occurs. The omit_join optimization is detected
    automatically, and the `omit_join` flag was only intended to disable the optimization
    in the hypothetical case that the optimization may have interfered with correct
    results, which has not been observed with the modern version of this feature.
    Setting the flag to True when it is not automatically detected may cause the selectin
    load feature to not work correctly when a non-default primary join condition is
    in use.
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") 标志并非意在手动设置为 True，当发生此情况时将会发出警告。`omit_join` 优化会被自动检测到，`omit_join`
    标志仅用于在假设优化可能干扰正确结果的情况下禁用优化，但在现代版本的此功能中尚未观察到这种情况。当未自动检测到该标志时将其设置为 True 可能导致在使用非默认主连接条件时
    `selectin` 加载功能无法正常工作。'
- en: 'References: [#4954](https://www.sqlalchemy.org/trac/ticket/4954)'
  id: totrans-2612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4954](https://www.sqlalchemy.org/trac/ticket/4954)
- en: '**[orm] [bug]**'
  id: totrans-2613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted if a primary key value is passed to [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") that consists of None for all primary key column positions.
    Previously, passing a single None outside of a tuple would raise a `TypeError`
    and passing a composite None (tuple of None values) would silently pass through.
    The fix now coerces the single None into a tuple where it is handled consistently
    with the other None conditions. Thanks to Lev Izraelit for the help with this.
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将主键值传递给 [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")，并且所有主键列位置都为 None，则会发出警告。以前，传递单个 None 会在元组之外引发 `TypeError`，传递复合
    None（包含 None 值的元组）会静默通过。现在的修复将单个 None 强制转换为元组，以便与其他 None 条件一致处理。感谢 Lev Izraelit
    对此的帮助。
- en: 'References: [#4915](https://www.sqlalchemy.org/trac/ticket/4915)'
  id: totrans-2615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4915](https://www.sqlalchemy.org/trac/ticket/4915)
- en: '**[orm] [bug]**'
  id: totrans-2616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") will not cache a query that was modified by
    a [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, so that compilation hooks
    that may be applying ad-hoc modifications to queries will take effect on each
    run. In particular this is helpful for events that modify queries used in lazy
    loading as well as eager loading such as “select in” loading. In order to re-enable
    caching for a query modified by this event, a new flag `bake_ok` is added; see
    [Using the before_compile event](../orm/extensions/baked.html#baked-with-before-compile)
    for details.
  id: totrans-2617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") 不会缓存通过 [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件修改的查询，因此可能对查询应用临时修改的编译钩子将在每次运行时生效。特别是对于修改在惰性加载和急切加载中使用的查询的事件非常有帮助，比如“select
    in” 加载。为了重新启用通过此事件修改的查询的缓存，添加了一个新标志 `bake_ok`；请参阅[使用 before_compile 事件](../orm/extensions/baked.html#baked-with-before-compile)了解详情。'
- en: A longer term plan to provide a new form of SQL caching should solve this kind
    of issue more comprehensively.
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供一种新形式的SQL缓存的长期计划应更全��地解决这种问题。
- en: 'References: [#4947](https://www.sqlalchemy.org/trac/ticket/4947)'
  id: totrans-2619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4947](https://www.sqlalchemy.org/trac/ticket/4947)
- en: '**[orm] [bug]**'
  id: totrans-2620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where a “secondary” table that referred to a selectable which
    in some way would refer to the local primary table would apply aliasing to both
    sides of the join condition when a relationship-related join, either via [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or by [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), were generated. The “local” side is now excluded.
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个bug，其中一个“secondary”表引用了一个可选择的表，该表在某种程度上会引用本地主表，当通过关系相关的连接生成关系相关的连接时，无论是通过[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")还是通过[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，都会将连接条件的两侧都应用别名。现在“local”一侧被排除在外。
- en: 'References: [#4974](https://www.sqlalchemy.org/trac/ticket/4974)'
  id: totrans-2622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4974](https://www.sqlalchemy.org/trac/ticket/4974)
- en: engine
  id: totrans-2623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where parameter repr as used in logging and error reporting needs
    additional context in order to distinguish between a list of parameters for a
    single statement and a list of parameter lists, as the “list of lists” structure
    could also indicate a single parameter list where the first parameter itself is
    a list, such as for an array parameter. The engine/connection now passes in an
    additional boolean indicating how the parameters should be considered. The only
    SQLAlchemy backend that expects arrays as parameters is that of psycopg2 which
    uses pyformat parameters, so this issue has not been too apparent, however as
    other drivers that use positional gain more features it is important that this
    be supported. It also eliminates the need for the parameter repr function to guess
    based on the parameter structure passed.
  id: totrans-2625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中在日志记录和错误报告中使用的参数repr需要额外的上下文以区分单个语句的参数列表和参数列表的列表，因为“列表的列表”结构也可能表示第一个参数本身是一个列表，比如对于数组参数。引擎/连接现在传入一个额外的布尔值，指示参数应如何考虑。唯一期望数组作为参数的SQLAlchemy后端是使用pyformat参数的psycopg2，因此这个问题并不太明显，但随着其他使用位置参数的驱动程序获得更多功能，支持这一点变得重要。它还消除了参数repr函数根据传递的参数结构猜测的需要。
- en: 'References: [#4902](https://www.sqlalchemy.org/trac/ticket/4902)'
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4902](https://www.sqlalchemy.org/trac/ticket/4902)
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-2627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [postgresql]**'
- en: Fixed bug in [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") where the cache key generation did not
    take into account arguments passed in the form of tuples, such as the tuple of
    view name styles to return for the PostgreSQL dialect. This would lead the inspector
    to cache too generally for a more specific set of criteria. The logic has been
    adjusted to include every keyword element in the cache, as every argument is expected
    to be appropriate for a cache else the caching decorator should be bypassed by
    the dialect.
  id: totrans-2628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")中的bug，其中缓存键生成没有考虑以元组形式传递的参数，比如要返回给PostgreSQL方言的视图名称样式元组。这会导致检查器对更具体的一组条件进行了过于普遍的缓存。逻辑已经调整，以包含缓存中的每个关键字元素，因为每个参数都应适用于缓存，否则方言应该绕过缓存装饰器。
- en: 'References: [#4955](https://www.sqlalchemy.org/trac/ticket/4955)'
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4955](https://www.sqlalchemy.org/trac/ticket/4955)
- en: sql
  id: totrans-2630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added new accessors to expressions of type [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") to allow for specific datatype access and comparison,
    covering strings, integers, numeric, boolean elements. This revises the documented
    approach of CASTing to string when comparing values, instead adding specific functionality
    into the PostgreSQL, SQlite, MySQL dialects to reliably deliver these basic types
    in all cases.
  id: totrans-2632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型的表达式添加了新的访问器，以允许特定数据类型的访问和比较，包括字符串、整数、数字、布尔元素。这修改了将值转换为字符串进行比较的文档化方法，而是在PostgreSQL、SQlite、MySQL方言中添加了特定功能，以可靠地在所有情况下提供这些基本类型。
- en: See also
  id: totrans-2633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
- en: '[`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string")'
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string")'
- en: '[`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean")'
  id: totrans-2636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean")'
- en: '[`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float")'
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float")'
- en: '[`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer")'
  id: totrans-2638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer")'
- en: 'References: [#4276](https://www.sqlalchemy.org/trac/ticket/4276)'
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4276](https://www.sqlalchemy.org/trac/ticket/4276)
- en: '**[sql] [usecase]**'
  id: totrans-2640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: The [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct now supports “unique” bound parameters, which will dynamically uniquify
    themselves on compilation thus allowing multiple [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs with the same bound parameter names
    to be combined together.
  id: totrans-2641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造现在支持“unique”绑定参数，这将在编译时动态地使自己唯一，从而允许多个具有相同绑定参数名称的[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造组合在一起。'
- en: 'References: [#4933](https://www.sqlalchemy.org/trac/ticket/4933)'
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4933](https://www.sqlalchemy.org/trac/ticket/4933)
- en: '**[sql] [bug] [py3k]**'
  id: totrans-2643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [py3k]**'
- en: Changed the `repr()` of the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to use regular string repr()
    under Python 3, rather than running it through “backslashreplace” escaping, which
    can be misleading.
  id: totrans-2644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造的`repr()`，在Python 3下使用常规字符串repr()，而不是通过“backslashreplace”转义，这可能会产生误导。
- en: 'References: [#4931](https://www.sqlalchemy.org/trac/ticket/4931)'
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4931](https://www.sqlalchemy.org/trac/ticket/4931)
- en: schema
  id: totrans-2646
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [usecase]**'
  id: totrans-2647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [usecase]**'
- en: Added DDL support for “computed columns”; these are DDL column specifications
    for columns that have a server-computed value, either upon SELECT (known as “virtual”)
    or at the point of which they are INSERTed or UPDATEd (known as “stored”). Support
    is established for Postgresql, MySQL, Oracle SQL Server and Firebird. Thanks to
    Federico Caselli for lots of work on this one.
  id: totrans-2648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对“计算列”DDL的支持；这些是DDL列规范，用于具有服务器计算值的列，无论是在SELECT时（称为“虚拟”）还是在它们被INSERT或UPDATE时（称为“存储”）。支持已建立在Postgresql、MySQL、Oracle
    SQL Server和Firebird上。感谢Federico Caselli在这方面的大量工作。
- en: See also
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Computed Columns (GENERATED ALWAYS AS)](../core/defaults.html#computed-ddl)'
  id: totrans-2650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[计算列（GENERATED ALWAYS AS）](../core/defaults.html#computed-ddl)'
- en: 'References: [#4894](https://www.sqlalchemy.org/trac/ticket/4894)'
  id: totrans-2651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4894](https://www.sqlalchemy.org/trac/ticket/4894)
- en: '**[schema] [bug]**'
  id: totrans-2652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed bug where a table that would have a column label overlap with a plain
    column name, such as “foo.id AS foo_id” vs. “foo.foo_id”, would prematurely generate
    the `._label` attribute for a column before this overlap could be detected due
    to the use of the `index=True` or `unique=True` flag on the column in conjunction
    with the default naming convention of `"column_0_label"`. This would then lead
    to failures when `._label` were used later to generate a bound parameter name,
    in particular those used by the ORM when generating the WHERE clause for an UPDATE
    statement. The issue has been fixed by using an alternate `._label` accessor for
    DDL generation that does not affect the state of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). The accessor also bypasses the key-deduplication
    step as it is not necessary for DDL, the naming is now consistently `"<tablename>_<columnname>"`
    without any subsequent numeric symbols when used in DDL.
  id: totrans-2653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即一个表的列标签与普通列名重叠，例如“foo.id AS foo_id”与“foo.foo_id”，将在检测到此重叠之前生成`._label`属性，因为在列上使用`index=True`或`unique=True`标志与默认命名约定“column_0_label”一起。然后，当稍后使用`._label`生成绑定参数名称时，特别是ORM在为UPDATE语句生成WHERE子句时使用的那些参数时，将导致失败。通过使用一个不影响[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")状态的DDL生成的替代`._label`访问器来修复此问题。该访问器还绕过了关键去重步骤，因为对于DDL是不必要的，命名现在在DDL中一致地是`"<tablename>_<columnname>"`，在DDL中使用时没有任何后续的数字符号。
- en: 'References: [#4911](https://www.sqlalchemy.org/trac/ticket/4911)'
  id: totrans-2654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4911](https://www.sqlalchemy.org/trac/ticket/4911)
- en: mysql
  id: totrans-2655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added “Connection was killed” message interpreted from the base pymysql.Error
    class in order to detect closed connection, based on reports that this message
    is arriving via a pymysql.InternalError() object which indicates pymysql is not
    handling it correctly.
  id: totrans-2657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了从基本pymysql.Error类解释的“连接被终止”消息，以便检测关闭的连接，根据报告，此消息通过一个指示pymysql未正确处理的pymysql.InternalError()对象到达。
- en: 'References: [#4945](https://www.sqlalchemy.org/trac/ticket/4945)'
  id: totrans-2658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4945](https://www.sqlalchemy.org/trac/ticket/4945)
- en: mssql
  id: totrans-2659
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in MSSQL dialect where an expression-based OFFSET value in a SELECT
    would be rejected, even though the dialect can render this expression inside of
    a ROW NUMBER-oriented LIMIT/OFFSET construct.
  id: totrans-2661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MSSQL方言中的问题，其中SELECT中的基于表达式的OFFSET值将被拒绝，尽管方言可以在ROW NUMBER定向的LIMIT/OFFSET结构内呈现此表达式。
- en: 'References: [#4973](https://www.sqlalchemy.org/trac/ticket/4973)'
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4973](https://www.sqlalchemy.org/trac/ticket/4973)
- en: '**[mssql] [bug]**'
  id: totrans-2663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed an issue in the `Engine.table_names()` method where it would feed the
    dialect’s default schema name back into the dialect level table function, which
    in the case of SQL Server would interpret it as a dot-tokenized schema name as
    viewed by the mssql dialect, which would cause the method to fail in the case
    where the database username actually had a dot inside of it. In 1.3, this method
    is still used by the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") function so is a prominent codepath. In
    1.4, which is the current master development branch, this issue doesn’t exist,
    both because [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") isn’t using this method nor does the method
    pass the default schema name explicitly. The fix nonetheless guards against the
    default server name value returned by the dialect from being interpreted as dot-tokenized
    name under any circumstances by wrapping it in quoted_name().
  id: totrans-2664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Engine.table_names()`方法中的问题，该方法会将方言的默认模式名称反馈到方言级别的表函数中，在SQL Server的情况下，它会将其解释为由mssql方言查看的点令牌化模式名称，这将导致在数据库用户名实际上包含点的情况下该方法失败。在1.3中，此方法仍然被[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")函数使用，因此是一个重要的代码路径。在1.4中，这是当前主开发分支，这个问题不存在，因为[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")既不使用这个方法，也不显式传递默认模式名称。尽管如此，修复仍然通过将其包装在quoted_name()中防止方言返回的默认服务器名称值在任何情况下被解释为点令牌化名称。
- en: 'References: [#4923](https://www.sqlalchemy.org/trac/ticket/4923)'
  id: totrans-2665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4923](https://www.sqlalchemy.org/trac/ticket/4923)
- en: oracle
  id: totrans-2666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-2667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Added dialect-level flag `encoding_errors` to the cx_Oracle dialect, which can
    be specified as part of [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). This is passed to SQLAlchemy’s unicode decoding converter
    under Python 2, and to cx_Oracle’s `cursor.var()` object as the `encodingErrors`
    parameter under Python 3, for the very unusual case that broken encodings are
    present in the target database which cannot be fetched unless error handling is
    relaxed. The value is ultimately one of the Python “encoding errors” parameters
    passed to `decode()`.
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 cx_Oracle 方言中添加了方言级别的标志 `encoding_errors`，可以作为 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的一部分指定。在 Python 2 下，将其传递给 SQLAlchemy 的 Unicode 解码转换器，在
    Python 3 下，将其传递给 cx_Oracle 的 `cursor.var()` 对象作为 `encodingErrors` 参数，以处理目标数据库中存在破损编码的非常罕见情况，除非放宽错误处理，否则无法获取。该值最终是传递给
    `decode()` 的 Python “编码错误”参数之一。
- en: 'References: [#4799](https://www.sqlalchemy.org/trac/ticket/4799)'
  id: totrans-2669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4799](https://www.sqlalchemy.org/trac/ticket/4799)
- en: '**[oracle] [bug] [firebird]**'
  id: totrans-2670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [firebird]**'
- en: Modified the approach of “name normalization” for the Oracle and Firebird dialects,
    which converts from the UPPERCASE-as-case-insensitive convention of these dialects
    into lowercase-as-case-insensitive for SQLAlchemy, to not automatically apply
    the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to a name that matches itself
    under upper or lower case conversion, as is the case for many non-european characters.
    All names used within metadata structures are converted to [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") objects in any case; the change here
    would only affect the output of some inspection functions.
  id: totrans-2671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 Oracle 和 Firebird 方言的 “名称规范化” 方法，将这些方言的大写作为不区分大小写的约定转换为 SQLAlchemy 中的小写作为不区分大小写的约定，以不自动将符合大写或小写转换的名称应用于
    [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 构造，正如许多非欧洲字符所示。在元数据结构中使用的所有名称都转换为 [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 对象；此处的更改只会影响一些检查函数的输出。
- en: 'References: [#4931](https://www.sqlalchemy.org/trac/ticket/4931)'
  id: totrans-2672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4931](https://www.sqlalchemy.org/trac/ticket/4931)
- en: '**[oracle] [bug]**'
  id: totrans-2673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    datatype will now bind to the `cx_Oracle.FIXED_NCHAR` DBAPI data bindings when
    used in a bound parameter, which supplies proper comparison behavior against a
    variable-length string. Previously, the [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") datatype would bind to `cx_oracle.NCHAR` which is not
    fixed length; the [`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")
    datatype already binds to `cx_Oracle.FIXED_CHAR` so it is now consistent that
    [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    binds to `cx_Oracle.FIXED_NCHAR`.
  id: totrans-2674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在绑定参数中使用时，[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    数据类型现在将绑定到 `cx_Oracle.FIXED_NCHAR` 的 DBAPI 数据绑定，这为变长字符串提供了正确的比较行为。以前，[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") 数据类型将绑定到非固定长度的 `cx_oracle.NCHAR`，而 [`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR") 数据类型已经绑定到 `cx_Oracle.FIXED_CHAR`，因此现在一致性是 [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") 绑定到 `cx_Oracle.FIXED_NCHAR`。
- en: 'References: [#4913](https://www.sqlalchemy.org/trac/ticket/4913)'
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4913](https://www.sqlalchemy.org/trac/ticket/4913)
- en: tests
  id: totrans-2676
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed test failures which would occur with newer SQLite as of version 3.30 or
    greater, due to their addition of nulls ordering syntax as well as new restrictions
    on aggregate functions. Pull request courtesy Nils Philippsen.
  id: totrans-2678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在新版本 SQLite（3.30 或更高版本）中会出现的测试失败，因为它们增加了空值排序语法以及对聚合函数的新限制。感谢 Nils Philippsen
    的拉取请求。
- en: 'References: [#4920](https://www.sqlalchemy.org/trac/ticket/4920)'
  id: totrans-2679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4920](https://www.sqlalchemy.org/trac/ticket/4920)
- en: misc
  id: totrans-2680
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [installation] [windows]**'
  id: totrans-2681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [installation] [windows]**'
- en: Added a workaround for a setuptools-related failure that has been observed as
    occurring on Windows installations, where setuptools is not correctly reporting
    a build error when the MSVC build dependencies are not installed and therefore
    not allowing graceful degradation into non C extensions builds.
  id: totrans-2682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个解决方案，用于解决在 Windows 安装中观察到的 setuptools 相关失败，其中 setuptools 在未正确安装 MSVC 构建依赖项时未正确报告构建错误，因此不允许优雅地降级为非
    C 扩展构建。
- en: 'References: [#4967](https://www.sqlalchemy.org/trac/ticket/4967)'
  id: totrans-2683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4967](https://www.sqlalchemy.org/trac/ticket/4967)
- en: '**[bug] [firebird]**'
  id: totrans-2684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Added additional “disconnect” message “Error writing data to the connection”
    to Firebird disconnection detection. Pull request courtesy lukens.
  id: totrans-2685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Firebird断开连接检测添加了额外的“断开连接”消息“写入数据到连接时出错”。感谢lukens提供的拉取请求。
- en: 'References: [#4903](https://www.sqlalchemy.org/trac/ticket/4903)'
  id: totrans-2686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4903](https://www.sqlalchemy.org/trac/ticket/4903)
- en: orm
  id: totrans-2687
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added accessor [`Query.is_single_entity()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.is_single_entity
    "sqlalchemy.orm.Query.is_single_entity") to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), which will indicate if the results returned by this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will be a list of ORM entities, or a tuple of entities
    or column expressions. SQLAlchemy hopes to improve upon the behavior of single
    entity / tuples in future releases such that the behavior would be explicit up
    front, however this attribute should be helpful with the current behavior. Pull
    request courtesy Patrick Hayes.
  id: totrans-2689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")中添加了访问器[`Query.is_single_entity()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.is_single_entity
    "sqlalchemy.orm.Query.is_single_entity")，该访问器将指示此[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")返回的结果是ORM实体列表还是实体或列表达式的元组。SQLAlchemy希望在未来的版本中改进单个实体/元组的行为，以便行为在一开始就是明确的，但是这个属性应该有助于当前的行为。感谢Patrick
    Hayes提供的拉取请求。
- en: 'References: [#4934](https://www.sqlalchemy.org/trac/ticket/4934)'
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4934](https://www.sqlalchemy.org/trac/ticket/4934)
- en: '**[orm] [bug]**'
  id: totrans-2691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") flag was not intended to be manually set to True,
    and will now emit a warning when this occurs. The omit_join optimization is detected
    automatically, and the `omit_join` flag was only intended to disable the optimization
    in the hypothetical case that the optimization may have interfered with correct
    results, which has not been observed with the modern version of this feature.
    Setting the flag to True when it is not automatically detected may cause the selectin
    load feature to not work correctly when a non-default primary join condition is
    in use.
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship")标志并不打算手动设置为True，当发生这种情况时将会发出警告。`omit_join`优化会被自动检测到，`omit_join`标志只打算在假设优化可能干扰正确结果的情况下禁用优化，但在这个特性的现代版本中并没有观察到这种情况。当非默认主要连接条件在使用时，将`omit_join`标志设置为True可能会导致selectin加载特性无法正确工作。'
- en: 'References: [#4954](https://www.sqlalchemy.org/trac/ticket/4954)'
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4954](https://www.sqlalchemy.org/trac/ticket/4954)
- en: '**[orm] [bug]**'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted if a primary key value is passed to [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") that consists of None for all primary key column positions.
    Previously, passing a single None outside of a tuple would raise a `TypeError`
    and passing a composite None (tuple of None values) would silently pass through.
    The fix now coerces the single None into a tuple where it is handled consistently
    with the other None conditions. Thanks to Lev Izraelit for the help with this.
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果向[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")传递的主键值在所有主键列位置上都是None，则会发出警告。以前，传递单个None会引发`TypeError`，传递复合None（None值的元组）会静默通过。现在的修复方法是将单个None强制转换为元组，以便与其他None条件一致处理。感谢Lev
    Izraelit的帮助。
- en: 'References: [#4915](https://www.sqlalchemy.org/trac/ticket/4915)'
  id: totrans-2696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4915](https://www.sqlalchemy.org/trac/ticket/4915)
- en: '**[orm] [bug]**'
  id: totrans-2697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") will not cache a query that was modified by
    a [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, so that compilation hooks
    that may be applying ad-hoc modifications to queries will take effect on each
    run. In particular this is helpful for events that modify queries used in lazy
    loading as well as eager loading such as “select in” loading. In order to re-enable
    caching for a query modified by this event, a new flag `bake_ok` is added; see
    [Using the before_compile event](../orm/extensions/baked.html#baked-with-before-compile)
    for details.
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")不会缓存通过[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件修改的查询，因此可能会对查询应用临时修改的编译钩子将在每次运行时生效。特别是对于修改用于延迟加载和急加载的查询的事件非常有帮助，比如“select
    in”加载。为了重新启用通过此事件修改的查询的缓存，添加了一个新标志`bake_ok`；详细信息请参见[使用before_compile事件](../orm/extensions/baked.html#baked-with-before-compile)。'
- en: A longer term plan to provide a new form of SQL caching should solve this kind
    of issue more comprehensively.
  id: totrans-2699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供一种新形式的SQL缓存的长期计划应该更全面地解决这种问题。
- en: 'References: [#4947](https://www.sqlalchemy.org/trac/ticket/4947)'
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4947](https://www.sqlalchemy.org/trac/ticket/4947)
- en: '**[orm] [bug]**'
  id: totrans-2701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where a “secondary” table that referred to a selectable which
    in some way would refer to the local primary table would apply aliasing to both
    sides of the join condition when a relationship-related join, either via [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or by [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), were generated. The “local” side is now excluded.
  id: totrans-2702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个ORM bug，其中引用了一个与本地主表在某种方式上引用的可选择的“secondary”表，在生成关系相关的连接条件时，无论是通过[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")还是通过[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，都会对连接条件的两侧应用别名。现在排除了“本地”一侧。
- en: 'References: [#4974](https://www.sqlalchemy.org/trac/ticket/4974)'
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4974](https://www.sqlalchemy.org/trac/ticket/4974)
- en: engine
  id: totrans-2704
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where parameter repr as used in logging and error reporting needs
    additional context in order to distinguish between a list of parameters for a
    single statement and a list of parameter lists, as the “list of lists” structure
    could also indicate a single parameter list where the first parameter itself is
    a list, such as for an array parameter. The engine/connection now passes in an
    additional boolean indicating how the parameters should be considered. The only
    SQLAlchemy backend that expects arrays as parameters is that of psycopg2 which
    uses pyformat parameters, so this issue has not been too apparent, however as
    other drivers that use positional gain more features it is important that this
    be supported. It also eliminates the need for the parameter repr function to guess
    based on the parameter structure passed.
  id: totrans-2706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在日志记录和错误报告中使用的参数repr需要额外的上下文来区分单个语句的参数列表和参数列表的列表，因为“列表的列表”结构也可能表示第一个参数本身是一个列表的单个参数列表，比如数组参数。引擎/连接现在传入一个额外的布尔值，指示参数应如何考虑。唯一期望数组作为参数的SQLAlchemy后端是使用pyformat参数的psycopg2，因此这个问题并不太明显，但随着其他使用位置的驱动程序获得更多功能，支持这一点很重要。它还消除了参数repr函数根据传递的参数结构猜测的需要。
- en: 'References: [#4902](https://www.sqlalchemy.org/trac/ticket/4902)'
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4902](https://www.sqlalchemy.org/trac/ticket/4902)
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-2708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [postgresql]**'
- en: Fixed bug in [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") where the cache key generation did not
    take into account arguments passed in the form of tuples, such as the tuple of
    view name styles to return for the PostgreSQL dialect. This would lead the inspector
    to cache too generally for a more specific set of criteria. The logic has been
    adjusted to include every keyword element in the cache, as every argument is expected
    to be appropriate for a cache else the caching decorator should be bypassed by
    the dialect.
  id: totrans-2709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")中的错误，其中缓存键生成未考虑以元组形式传递的参数，例如要为 PostgreSQL
    方言返回的视图名称样式元组。这将导致检查器对更具体的条件进行缓存过于普遍。逻辑已调整为在缓存中包含每个关键字元素，因为每个参数都应适用于缓存，否则应通过方言绕过缓存装饰器。
- en: 'References: [#4955](https://www.sqlalchemy.org/trac/ticket/4955)'
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4955](https://www.sqlalchemy.org/trac/ticket/4955)
- en: sql
  id: totrans-2711
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added new accessors to expressions of type [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") to allow for specific datatype access and comparison,
    covering strings, integers, numeric, boolean elements. This revises the documented
    approach of CASTing to string when comparing values, instead adding specific functionality
    into the PostgreSQL, SQlite, MySQL dialects to reliably deliver these basic types
    in all cases.
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型的表达式添加了新的访问器，以允许特定数据类型的访问和比较，包括字符串、整数、数字、布尔元素。这修改了将值转换为字符串进行比较的文档方法，而是在
    PostgreSQL、SQlite、MySQL 方言中添加了特定功能，以可靠地在所有情况下提供这些基本类型。
- en: See also
  id: totrans-2714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
- en: '[`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string")'
  id: totrans-2716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_string()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string")'
- en: '[`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean")'
  id: totrans-2717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_boolean()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_boolean
    "sqlalchemy.types.JSON.Comparator.as_boolean")'
- en: '[`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float")'
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_float()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_float
    "sqlalchemy.types.JSON.Comparator.as_float")'
- en: '[`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer")'
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Comparator.as_integer()`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer")'
- en: 'References: [#4276](https://www.sqlalchemy.org/trac/ticket/4276)'
  id: totrans-2720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4276](https://www.sqlalchemy.org/trac/ticket/4276)
- en: '**[sql] [usecase]**'
  id: totrans-2721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: The [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct now supports “unique” bound parameters, which will dynamically uniquify
    themselves on compilation thus allowing multiple [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs with the same bound parameter names
    to be combined together.
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")构造现在支持“unique”绑定参数，这将在编译时动态使它们唯一，从而允许多个具有相同绑定参数名称的[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造组合在一起。'
- en: 'References: [#4933](https://www.sqlalchemy.org/trac/ticket/4933)'
  id: totrans-2723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4933](https://www.sqlalchemy.org/trac/ticket/4933)
- en: '**[sql] [bug] [py3k]**'
  id: totrans-2724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [py3k]**'
- en: Changed the `repr()` of the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to use regular string repr()
    under Python 3, rather than running it through “backslashreplace” escaping, which
    can be misleading.
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造的`repr()`，在 Python 3 下使用常规字符串`repr()`，而不是通过“backslashreplace”转义，这可能会产生误导。
- en: 'References: [#4931](https://www.sqlalchemy.org/trac/ticket/4931)'
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4931](https://www.sqlalchemy.org/trac/ticket/4931)
- en: schema
  id: totrans-2727
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [usecase]**'
  id: totrans-2728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [用例]**'
- en: Added DDL support for “computed columns”; these are DDL column specifications
    for columns that have a server-computed value, either upon SELECT (known as “virtual”)
    or at the point of which they are INSERTed or UPDATEd (known as “stored”). Support
    is established for Postgresql, MySQL, Oracle SQL Server and Firebird. Thanks to
    Federico Caselli for lots of work on this one.
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为“计算列”添加了DDL支持；这些是用于具有服务器计算值的列的DDL列规范，无论是在SELECT时（称为“虚拟”）还是在它们被INSERT或UPDATE时（称为“存储”）。已为Postgresql、MySQL、Oracle
    SQL Server和Firebird建立了支持。感谢Federico Caselli在这方面的大量工作。
- en: See also
  id: totrans-2730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Computed Columns (GENERATED ALWAYS AS)](../core/defaults.html#computed-ddl)'
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[计算列（GENERATED ALWAYS AS）](../core/defaults.html#computed-ddl)'
- en: 'References: [#4894](https://www.sqlalchemy.org/trac/ticket/4894)'
  id: totrans-2732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4894](https://www.sqlalchemy.org/trac/ticket/4894)
- en: '**[schema] [bug]**'
  id: totrans-2733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed bug where a table that would have a column label overlap with a plain
    column name, such as “foo.id AS foo_id” vs. “foo.foo_id”, would prematurely generate
    the `._label` attribute for a column before this overlap could be detected due
    to the use of the `index=True` or `unique=True` flag on the column in conjunction
    with the default naming convention of `"column_0_label"`. This would then lead
    to failures when `._label` were used later to generate a bound parameter name,
    in particular those used by the ORM when generating the WHERE clause for an UPDATE
    statement. The issue has been fixed by using an alternate `._label` accessor for
    DDL generation that does not affect the state of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). The accessor also bypasses the key-deduplication
    step as it is not necessary for DDL, the naming is now consistently `"<tablename>_<columnname>"`
    without any subsequent numeric symbols when used in DDL.
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即表中的列标签与普通列名重叠，例如“foo.id AS foo_id”与“foo.foo_id”，将在能够检测到此重叠之前为列生成`._label`属性，因为在列上使用`index=True`或`unique=True`标志与默认命名约定“column_0_label”相结合。然后，当稍后使用`._label`生成绑定参数名称时，特别是在ORM生成UPDATE语句的WHERE子句时使用的那些参数时，将导致失败。通过使用一个不影响[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")状态的DDL生成的替代`._label`访问器来修复此问题。该访问器还绕过了键去重步骤，因为对于DDL是不必要的，当在DDL中使用时，命名现在始终是`"<tablename>_<columnname>"`，没有任何后续的数字符号。
- en: 'References: [#4911](https://www.sqlalchemy.org/trac/ticket/4911)'
  id: totrans-2735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4911](https://www.sqlalchemy.org/trac/ticket/4911)
- en: mysql
  id: totrans-2736
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added “Connection was killed” message interpreted from the base pymysql.Error
    class in order to detect closed connection, based on reports that this message
    is arriving via a pymysql.InternalError() object which indicates pymysql is not
    handling it correctly.
  id: totrans-2738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了从基本pymysql.Error类解释的“连接已关闭”消息，以便检测到关闭的连接，根据报告，此消息通过一个指示pymysql未正确处理的pymysql.InternalError()对象到达。
- en: 'References: [#4945](https://www.sqlalchemy.org/trac/ticket/4945)'
  id: totrans-2739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4945](https://www.sqlalchemy.org/trac/ticket/4945)
- en: mssql
  id: totrans-2740
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in MSSQL dialect where an expression-based OFFSET value in a SELECT
    would be rejected, even though the dialect can render this expression inside of
    a ROW NUMBER-oriented LIMIT/OFFSET construct.
  id: totrans-2742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MSSQL方言中的问题，在SELECT中基于表达式的OFFSET值将被拒绝，即使方言可以在ROW NUMBER定向的LIMIT/OFFSET结构内呈现此表达式。
- en: 'References: [#4973](https://www.sqlalchemy.org/trac/ticket/4973)'
  id: totrans-2743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4973](https://www.sqlalchemy.org/trac/ticket/4973)
- en: '**[mssql] [bug]**'
  id: totrans-2744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed an issue in the `Engine.table_names()` method where it would feed the
    dialect’s default schema name back into the dialect level table function, which
    in the case of SQL Server would interpret it as a dot-tokenized schema name as
    viewed by the mssql dialect, which would cause the method to fail in the case
    where the database username actually had a dot inside of it. In 1.3, this method
    is still used by the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") function so is a prominent codepath. In
    1.4, which is the current master development branch, this issue doesn’t exist,
    both because [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") isn’t using this method nor does the method
    pass the default schema name explicitly. The fix nonetheless guards against the
    default server name value returned by the dialect from being interpreted as dot-tokenized
    name under any circumstances by wrapping it in quoted_name().
  id: totrans-2745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `Engine.table_names()` 方法中的问题，该方法会将方言的默认模式名称反馈给方言级别的表函数，在 SQL Server 的情况下，它会将其解释为
    mssql 方言视图中的点标记模式名称，这将导致在数据库用户名实际上包含点的情况下该方法失败。在 1.3 版本中，此方法仍然被 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 函数使用，因此是一个重要的代码路径。在当前主开发分支 1.4 中，这个问题不存在，因为
    [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 没有使用这个方法，也不会显式传递默认模式名称。尽管如此，修复仍然防止方言返回的默认服务器名称值在任何情况下被解释为点标记名称，通过将其包装在
    quoted_name() 中。
- en: 'References: [#4923](https://www.sqlalchemy.org/trac/ticket/4923)'
  id: totrans-2746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4923](https://www.sqlalchemy.org/trac/ticket/4923)
- en: oracle
  id: totrans-2747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-2748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Added dialect-level flag `encoding_errors` to the cx_Oracle dialect, which can
    be specified as part of [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). This is passed to SQLAlchemy’s unicode decoding converter
    under Python 2, and to cx_Oracle’s `cursor.var()` object as the `encodingErrors`
    parameter under Python 3, for the very unusual case that broken encodings are
    present in the target database which cannot be fetched unless error handling is
    relaxed. The value is ultimately one of the Python “encoding errors” parameters
    passed to `decode()`.
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 cx_Oracle 方言中添加了方言级别标志 `encoding_errors`，可以作为 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的一部分指定。在 Python 2 下，这将传递给 SQLAlchemy 的 unicode 解码转换器，而在
    Python 3 下，这将传递给 cx_Oracle 的 `cursor.var()` 对象作为 `encodingErrors` 参数，用于处理目标数据库中存在破损编码的非常罕见情况，除非放宽错误处理，否则无法获取。该值最终是传递给
    `decode()` 的 Python “编码错误” 参数之一。
- en: 'References: [#4799](https://www.sqlalchemy.org/trac/ticket/4799)'
  id: totrans-2750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4799](https://www.sqlalchemy.org/trac/ticket/4799)
- en: '**[oracle] [bug] [firebird]**'
  id: totrans-2751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [firebird]**'
- en: Modified the approach of “name normalization” for the Oracle and Firebird dialects,
    which converts from the UPPERCASE-as-case-insensitive convention of these dialects
    into lowercase-as-case-insensitive for SQLAlchemy, to not automatically apply
    the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to a name that matches itself
    under upper or lower case conversion, as is the case for many non-european characters.
    All names used within metadata structures are converted to [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") objects in any case; the change here
    would only affect the output of some inspection functions.
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 Oracle 和 Firebird 方言的“名称规范化”方法，将这些方言的大写作为不区分大小写的约定转换为 SQLAlchemy 的小写作为不区分大小写的约定，以避免自动将
    [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 构造应用于在大写或小写转换下匹配自身的名称，就像许多非欧洲字符一样。在元数据结构中使用的所有名称都会在任何情况下转换为
    [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 对象；这里的更改只会影响一些检查函数的输出。
- en: 'References: [#4931](https://www.sqlalchemy.org/trac/ticket/4931)'
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4931](https://www.sqlalchemy.org/trac/ticket/4931)
- en: '**[oracle] [bug]**'
  id: totrans-2754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    datatype will now bind to the `cx_Oracle.FIXED_NCHAR` DBAPI data bindings when
    used in a bound parameter, which supplies proper comparison behavior against a
    variable-length string. Previously, the [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") datatype would bind to `cx_oracle.NCHAR` which is not
    fixed length; the [`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")
    datatype already binds to `cx_Oracle.FIXED_CHAR` so it is now consistent that
    [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    binds to `cx_Oracle.FIXED_NCHAR`.
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在绑定参数中使用时，[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")数据类型现在将绑定到`cx_Oracle.FIXED_NCHAR`
    DBAPI数据绑定，从而提供与可变长度字符串的正确比较行为。以前，[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR")数据类型会绑定到`cx_oracle.NCHAR`，这不是固定长度；[`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR")数据类型已经绑定到`cx_Oracle.FIXED_CHAR`，因此现在一致的是[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR")绑定到`cx_Oracle.FIXED_NCHAR`。
- en: 'References: [#4913](https://www.sqlalchemy.org/trac/ticket/4913)'
  id: totrans-2756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4913](https://www.sqlalchemy.org/trac/ticket/4913)
- en: tests
  id: totrans-2757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed test failures which would occur with newer SQLite as of version 3.30 or
    greater, due to their addition of nulls ordering syntax as well as new restrictions
    on aggregate functions. Pull request courtesy Nils Philippsen.
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在新的SQLite版本（3.30或更高版本）中会发生的测试失败，这是由于它们添加了空值排序语法以及对聚合函数的新限制。感谢Nils Philippsen的拉取请求。
- en: 'References: [#4920](https://www.sqlalchemy.org/trac/ticket/4920)'
  id: totrans-2760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4920](https://www.sqlalchemy.org/trac/ticket/4920)
- en: misc
  id: totrans-2761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [installation] [windows]**'
  id: totrans-2762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [installation] [windows]**'
- en: Added a workaround for a setuptools-related failure that has been observed as
    occurring on Windows installations, where setuptools is not correctly reporting
    a build error when the MSVC build dependencies are not installed and therefore
    not allowing graceful degradation into non C extensions builds.
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个解决方案，用于解决在Windows安装中观察到的与setuptools相关的故障，其中setuptools在未安装MSVC构建依赖项时未正确报告构建错误，因此不允许优雅地降级为非C扩展构建。
- en: 'References: [#4967](https://www.sqlalchemy.org/trac/ticket/4967)'
  id: totrans-2764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4967](https://www.sqlalchemy.org/trac/ticket/4967)
- en: '**[bug] [firebird]**'
  id: totrans-2765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Added additional “disconnect” message “Error writing data to the connection”
    to Firebird disconnection detection. Pull request courtesy lukens.
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了额外的“disconnect”消息“Error writing data to the connection”以用于Firebird断开检测。感谢lukens的拉取请求。
- en: 'References: [#4903](https://www.sqlalchemy.org/trac/ticket/4903)'
  id: totrans-2767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4903](https://www.sqlalchemy.org/trac/ticket/4903)
- en: 1.3.10
  id: totrans-2768
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.10
- en: 'Released: October 9, 2019'
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年10月9日
- en: mssql
  id: totrans-2770
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in SQL Server dialect with new “max_identifier_length” feature where
    the mssql dialect already featured this flag, and the implementation did not accommodate
    for the new initialization hook correctly.
  id: totrans-2772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server方言中的一个bug，该bug涉及新的“max_identifier_length”功能，其中mssql方言已经具有此标志，但实现未正确适应新的初始化挂钩。
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-2773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: oracle
  id: totrans-2774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in Oracle dialect that was inadvertently using max identifier
    length of 128 characters on Oracle server 12.2 and greater even though the stated
    contract for the remainder of the 1.3 series is that this value stays at 30 until
    version SQLAlchemy 1.4\. Also repaired issues with the retrieval of the “compatibility”
    version, and removed the warning emitted when the “v$parameter” view was not accessible
    as this was causing user confusion.
  id: totrans-2776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的一个回归问题，该问题在Oracle服务器12.2及更高版本上无意中使用了128个字符的最大标识符长度，尽管1.3系列的其余部分的规定是此值保持在30，直到SQLAlchemy
    1.4版本。还修复了关于“compatibility”版本检索的问题，并删除了当“v$parameter”视图不可访问时发出的警告，因为这导致用户困惑。
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857), [#4898](https://www.sqlalchemy.org/trac/ticket/4898)'
  id: totrans-2777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)，[#4898](https://www.sqlalchemy.org/trac/ticket/4898)
- en: mssql
  id: totrans-2778
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in SQL Server dialect with new “max_identifier_length” feature where
    the mssql dialect already featured this flag, and the implementation did not accommodate
    for the new initialization hook correctly.
  id: totrans-2780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server方言中的一个bug，该bug涉及新的“max_identifier_length”功能，其中mssql方言已经具有此标志，但实现未正确适应新的初始化挂钩。
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: oracle
  id: totrans-2782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in Oracle dialect that was inadvertently using max identifier
    length of 128 characters on Oracle server 12.2 and greater even though the stated
    contract for the remainder of the 1.3 series is that this value stays at 30 until
    version SQLAlchemy 1.4\. Also repaired issues with the retrieval of the “compatibility”
    version, and removed the warning emitted when the “v$parameter” view was not accessible
    as this was causing user confusion.
  id: totrans-2784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的回归问题，该问题在Oracle服务器12.2及更高版本中无意中使用了128个字符的最大标识符长度，尽管1.3系列的其余部分的规定是该值保持在30，直到SQLAlchemy
    1.4版本。还修复了检索“兼容性”版本的问题，并删除了当“v$parameter”视图不可访问时发出的警告，因为这导致用户混淆。
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857), [#4898](https://www.sqlalchemy.org/trac/ticket/4898)'
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857), [#4898](https://www.sqlalchemy.org/trac/ticket/4898)
- en: 1.3.9
  id: totrans-2786
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.9
- en: 'Released: October 4, 2019'
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年10月4日
- en: orm
  id: totrans-2788
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in selectinload loader strategy caused by [#4775](https://www.sqlalchemy.org/trac/ticket/4775)
    (released in version 1.3.6) where a many-to-one attribute of None would no longer
    be populated by the loader. While this was usually not noticeable due to the lazyloader
    populating None upon get, it would lead to a detached instance error if the object
    were detached.
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4775](https://www.sqlalchemy.org/trac/ticket/4775)引起的selectinload加载策略中的回归问题（在版本1.3.6中发布），其中None的多对一属性将不再由加载器填充。虽然这通常不会被注意到，因为懒加载器在获取时会填充None，但如果对象被分离，这将导致分离实例错误。
- en: 'References: [#4872](https://www.sqlalchemy.org/trac/ticket/4872)'
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4872](https://www.sqlalchemy.org/trac/ticket/4872)
- en: '**[orm] [bug]**'
  id: totrans-2792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Passing a plain string expression to [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") is deprecated, as all string coercions were removed
    in [#4481](https://www.sqlalchemy.org/trac/ticket/4481) and this one should have
    been included. The [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") function may be used to produce a
    textual column expression.
  id: totrans-2793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将纯字符串表达式传递给[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")已被弃用，因为所有字符串强制转换在[#4481](https://www.sqlalchemy.org/trac/ticket/4481)中已被移除，而这个应该已经包含在内。可以使用[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")函数生成文本列表达式。
- en: 'References: [#4873](https://www.sqlalchemy.org/trac/ticket/4873)'
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4873](https://www.sqlalchemy.org/trac/ticket/4873)
- en: '**[orm] [bug]**'
  id: totrans-2795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted for a condition in which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") may implicitly swap an object out of the identity map
    for another one with the same primary key, detaching the old one, which can be
    an observed result of load operations which occur within the [`SessionEvents.after_flush()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") hook. The warning is intended to notify
    the user that some special condition has caused this to happen and that the previous
    object may not be in the expected state.
  id: totrans-2796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")可能会在`SessionEvents.after_flush()`钩子中发生的加载操作中，隐式地将一个对象与具有相同主键的另一个对象交换出标识映射，从而分离旧对象，这可能是一个观察到的结果。警告旨在通知用户，某些特殊条件导致此情况发生，并且先前的对象可能不处于预期状态。
- en: 'References: [#4890](https://www.sqlalchemy.org/trac/ticket/4890)'
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4890](https://www.sqlalchemy.org/trac/ticket/4890)
- en: engine
  id: totrans-2798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [usecase]**'
  id: totrans-2799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [usecase]**'
- en: Added new [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") parameter [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine"). This overrides the dialect-coded “max identifier
    length” in order to accommodate for databases that have recently changed this
    length and the SQLAlchemy dialect has not yet been adjusted to detect for that
    version. This parameter interacts with the existing [`create_engine.label_length`](../core/engines.html#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine") parameter in that it establishes the maximum (and
    default) value for anonymously generated labels. Additionally, post-connection
    detection of max identifier lengths has been added to the dialect system. This
    feature is first being used by the Oracle dialect.
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    参数 [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")。这将覆盖方言编码的“最大标识符长度”，以适应最近更改了此长度的数据库，而 SQLAlchemy 方言尚未调整以检测该版本。该参数与现有的
    [`create_engine.label_length`](../core/engines.html#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine") 参数交互，它建立了匿名生成标签的最大（和默认）值。此外，已将最大标识符长度的后连接检测添加到方言系统中。此功能首先由
    Oracle 方言使用。
- en: See also
  id: totrans-2801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Max Identifier Lengths](../dialects/oracle.html#oracle-max-identifier-lengths)
    - in the Oracle dialect documentation'
  id: totrans-2802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[最大标识符长度](../dialects/oracle.html#oracle-max-identifier-lengths) - Oracle 方言文档中'
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: sql
  id: totrans-2804
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added an explicit error message for the case when objects passed to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") are not [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects, rather than resolving to an attribute
    error.
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递给 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的对象不是 [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    对象时，为此情况添加了显式错误消息，而不是解析为属性错误。
- en: 'References: [#4847](https://www.sqlalchemy.org/trac/ticket/4847)'
  id: totrans-2807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4847](https://www.sqlalchemy.org/trac/ticket/4847)
- en: '**[sql] [bug]**'
  id: totrans-2808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Characters that interfere with “pyformat” or “named” formats in bound parameters,
    namely `%, (, )` and the space character, as well as a few other typically undesirable
    characters, are stripped early for a [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") that is using an anonymized name, which
    is typically generated automatically from a named column which itself includes
    these characters in its name and does not use a `.key`, so that they do not interfere
    either with the SQLAlchemy compiler’s use of string formatting or with the driver-level
    parsing of the parameter, both of which could be demonstrated before the fix.
    The change only applies to anonymized parameter names that are generated and consumed
    internally, not end-user defined names, so the change should have no impact on
    any existing code. Applies in particular to the psycopg2 driver which does not
    otherwise quote special parameter names, but also strips leading underscores to
    suit Oracle (but not yet leading numbers, as some anon parameters are currently
    entirely numeric/underscore based); Oracle in any case continues to quote parameter
    names that include special characters.
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用匿名化名称的 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，这些字符会在早期被剥离，匿名化名称通常是从一个使用这些字符的命名列自动生成的，它不使用
    `.key`，这样它们既不会干扰 SQLAlchemy 编译器对字符串格式化的使用，也不会干扰参数的驱动级解析，这两者在修复之前都可能被演示出来。该更改仅适用于内部生成和消耗的匿名化参数名称，并不适用于终端用户定义的名称，因此该更改不应影响任何现有代码。特别适用于不以引号引用特殊参数名称的
    psycopg2 驱动程序，但也会剥离前导下划线以适应 Oracle（但尚未剥离前导数字，因为一些匿名参数当前完全基于数字/下划线）；在任何情况下，Oracle
    继续引用包含特殊字符的参数名称。
- en: 'References: [#4837](https://www.sqlalchemy.org/trac/ticket/4837)'
  id: totrans-2810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4837](https://www.sqlalchemy.org/trac/ticket/4837)
- en: sqlite
  id: totrans-2811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-2812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added support for sqlite “URI” connections, which allow for sqlite-specific
    flags to be passed in the query string such as “read only” for Python sqlite3
    drivers that support this.
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 sqlite “URI” 连接的支持，允许在查询字符串中传递 sqlite 特定标志，例如对于支持此功能的 Python sqlite3 驱动程序，“只读”。
- en: See also
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[URI Connections](../dialects/sqlite.html#pysqlite-uri-connections)'
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[URI 连接](../dialects/sqlite.html#pysqlite-uri-connections)'
- en: 'References: [#4863](https://www.sqlalchemy.org/trac/ticket/4863)'
  id: totrans-2816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4863](https://www.sqlalchemy.org/trac/ticket/4863)
- en: mssql
  id: totrans-2817
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added identifier quoting to the schema name applied to the “use” statement which
    is invoked when a SQL Server multipart schema name is used within a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that is being reflected, as well as for [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") methods such as [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names"); this accommodates for
    special characters or spaces in the database name. Additionally, the “use” statement
    is not emitted if the current database matches the target owner database name
    being passed.
  id: totrans-2819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将标识符引用添加到了模式名称上，在反映时使用了 “use” 语句，当使用 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中使用了 SQL Server 的多部分模式名称时，以及对 [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 方法（如 [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")）；这适用于数据库名称中的特殊字符或空格。此外，如果当前数据库与传递的目标所有者数据库名称匹配，则不会发出
    “use” 语句。
- en: 'References: [#4883](https://www.sqlalchemy.org/trac/ticket/4883)'
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4883](https://www.sqlalchemy.org/trac/ticket/4883)
- en: oracle
  id: totrans-2821
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-2822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [用例]**'
- en: The Oracle dialect now emits a warning if Oracle version 12.2 or greater is
    used, and the [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") parameter is not set. The version in this specific
    case defaults to that of the “compatibility” version set in the Oracle server
    configuration, not the actual server version. In version 1.4, the default max_identifier_length
    for 12.2 or greater will move to 128 characters. In order to maintain forwards
    compatibility, applications should set [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") to 30 in order to maintain the same length behavior,
    or to 128 in order to test the upcoming behavior. This length determines among
    other things how generated constraint names are truncated for statements like
    `CREATE CONSTRAINT` and `DROP CONSTRAINT`, which means a the new length may produce
    a name-mismatch against a name that was generated with the old length, impacting
    database migrations.
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 方言现在在使用 Oracle 版本 12.2 或更高版本时会发出警告，且未设置 [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") 参数。在这种特定情况下，默认版本为 Oracle 服务器配置中设置的“兼容性”版本，而不是实际服务器版本。在版本
    1.4 中，对于 12.2 或更高版本，默认的 max_identifier_length 将移动到 128 个字符。为了保持向前兼容性，应用程序应将 [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") 设置为 30 以保持相同的长度行为，或者设置为 128 以测试即将到来的行为。此长度决定了诸如 `CREATE
    CONSTRAINT` 和 `DROP CONSTRAINT` 之类的语句中生成的约束名称的截断方式，这意味着新长度可能会导致与使用旧长度生成的名称不匹配，影响数据库迁移。
- en: See also
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Max Identifier Lengths](../dialects/oracle.html#oracle-max-identifier-lengths)
    - in the Oracle dialect documentation'
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[最大标识符长度](../dialects/oracle.html#oracle-max-identifier-lengths) - 在 Oracle
    方言文档中'
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-2826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: '**[oracle] [bug]**'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Restored adding cx_Oracle.DATETIME to the setinputsizes() call when a SQLAlchemy
    [`Date`](../core/type_basics.html#sqlalchemy.types.Date "sqlalchemy.types.Date"),
    [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    or [`Time`](../core/type_basics.html#sqlalchemy.types.Time "sqlalchemy.types.Time")
    datatype is used, as some complex queries require this to be present. This was
    removed in the 1.2 series for arbitrary reasons.
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用SQLAlchemy的[`Date`](../core/type_basics.html#sqlalchemy.types.Date "sqlalchemy.types.Date")、[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")或[`Time`](../core/type_basics.html#sqlalchemy.types.Time
    "sqlalchemy.types.Time")数据类型时，恢复了将cx_Oracle.DATETIME添加到setinputsizes()调用中的操作，因为一些复杂查询需要它存在。这在1.2系列中由于任意原因被移除。
- en: 'References: [#4886](https://www.sqlalchemy.org/trac/ticket/4886)'
  id: totrans-2829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4886](https://www.sqlalchemy.org/trac/ticket/4886)
- en: tests
  id: totrans-2830
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-2831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed unit test regression released in 1.3.8 that would cause failure for Oracle,
    SQL Server and other non-native ENUM platforms due to new enumeration tests added
    as part of [#4285](https://www.sqlalchemy.org/trac/ticket/4285) enum sortability
    in the unit of work; the enumerations created constraints that were duplicated
    on name.
  id: totrans-2832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.3.8版本中发布的单元测试回归，该回归会导致Oracle、SQL Server和其他非本地ENUM平台失败，因为作为[#4285](https://www.sqlalchemy.org/trac/ticket/4285)枚举可排序性的一部分添加了新的枚举测试；创建的枚举会在名称上重复约束。
- en: 'References: [#4285](https://www.sqlalchemy.org/trac/ticket/4285)'
  id: totrans-2833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4285](https://www.sqlalchemy.org/trac/ticket/4285)
- en: orm
  id: totrans-2834
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in selectinload loader strategy caused by [#4775](https://www.sqlalchemy.org/trac/ticket/4775)
    (released in version 1.3.6) where a many-to-one attribute of None would no longer
    be populated by the loader. While this was usually not noticeable due to the lazyloader
    populating None upon get, it would lead to a detached instance error if the object
    were detached.
  id: totrans-2836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4775](https://www.sqlalchemy.org/trac/ticket/4775)（在1.3.6版本中发布）引起的selectinload加载策略中的回归，其中None的多对一属性将不再被加载器填充。虽然这通常不会被注意到，因为懒加载器在获取时会填充None，但如果对象被分离，它将导致一个分离的实例错误。
- en: 'References: [#4872](https://www.sqlalchemy.org/trac/ticket/4872)'
  id: totrans-2837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4872](https://www.sqlalchemy.org/trac/ticket/4872)
- en: '**[orm] [bug]**'
  id: totrans-2838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Passing a plain string expression to [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") is deprecated, as all string coercions were removed
    in [#4481](https://www.sqlalchemy.org/trac/ticket/4481) and this one should have
    been included. The [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") function may be used to produce a
    textual column expression.
  id: totrans-2839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将纯字符串表达式传递给[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")已被弃用，因为所有字符串强制转换在[#4481](https://www.sqlalchemy.org/trac/ticket/4481)中被移除，而这个应该被包含在内。可以使用[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")函数生成文本列表达式。
- en: 'References: [#4873](https://www.sqlalchemy.org/trac/ticket/4873)'
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4873](https://www.sqlalchemy.org/trac/ticket/4873)
- en: '**[orm] [bug]**'
  id: totrans-2841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted for a condition in which the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") may implicitly swap an object out of the identity map
    for another one with the same primary key, detaching the old one, which can be
    an observed result of load operations which occur within the [`SessionEvents.after_flush()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") hook. The warning is intended to notify
    the user that some special condition has caused this to happen and that the previous
    object may not be in the expected state.
  id: totrans-2842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")可能会在[`SessionEvents.after_flush()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush")钩子中发生的加载操作中，隐式地将一个对象与另一个具有相同主键的对象交换出标识映射，从而分离旧对象时，会发出警告。该警告旨在通知用户某些特殊条件导致此情况发生，并且先前的对象可能不处于预期状态。
- en: 'References: [#4890](https://www.sqlalchemy.org/trac/ticket/4890)'
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4890](https://www.sqlalchemy.org/trac/ticket/4890)
- en: engine
  id: totrans-2844
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [usecase]**'
  id: totrans-2845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [usecase]**'
- en: Added new [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") parameter [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine"). This overrides the dialect-coded “max identifier
    length” in order to accommodate for databases that have recently changed this
    length and the SQLAlchemy dialect has not yet been adjusted to detect for that
    version. This parameter interacts with the existing [`create_engine.label_length`](../core/engines.html#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine") parameter in that it establishes the maximum (and
    default) value for anonymously generated labels. Additionally, post-connection
    detection of max identifier lengths has been added to the dialect system. This
    feature is first being used by the Oracle dialect.
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")参数[`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine")。这将覆盖方言编码的“最大标识符长度”，以适应最近更改了此长度但 SQLAlchemy 方言尚未调整以检测该版本的数据库。此参数与现有的[`create_engine.label_length`](../core/engines.html#sqlalchemy.create_engine.params.label_length
    "sqlalchemy.create_engine")参数交互，它建立了匿名生成标签的最大（和默认）值。此外，方言系统中已添加了关于最大标识符长度的连接后检测。此功能首次由
    Oracle 方言使用。
- en: See also
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Max Identifier Lengths](../dialects/oracle.html#oracle-max-identifier-lengths)
    - in the Oracle dialect documentation'
  id: totrans-2848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[最大标识符长度](../dialects/oracle.html#oracle-max-identifier-lengths) - 在 Oracle
    方言文档中'
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: sql
  id: totrans-2850
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added an explicit error message for the case when objects passed to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") are not [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects, rather than resolving to an attribute
    error.
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个明确的错误消息，用于处理传递给[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的对象不是[`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")对象的情况，而不是解析为属性错误。
- en: 'References: [#4847](https://www.sqlalchemy.org/trac/ticket/4847)'
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4847](https://www.sqlalchemy.org/trac/ticket/4847)
- en: '**[sql] [bug]**'
  id: totrans-2854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Characters that interfere with “pyformat” or “named” formats in bound parameters,
    namely `%, (, )` and the space character, as well as a few other typically undesirable
    characters, are stripped early for a [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") that is using an anonymized name, which
    is typically generated automatically from a named column which itself includes
    these characters in its name and does not use a `.key`, so that they do not interfere
    either with the SQLAlchemy compiler’s use of string formatting or with the driver-level
    parsing of the parameter, both of which could be demonstrated before the fix.
    The change only applies to anonymized parameter names that are generated and consumed
    internally, not end-user defined names, so the change should have no impact on
    any existing code. Applies in particular to the psycopg2 driver which does not
    otherwise quote special parameter names, but also strips leading underscores to
    suit Oracle (but not yet leading numbers, as some anon parameters are currently
    entirely numeric/underscore based); Oracle in any case continues to quote parameter
    names that include special characters.
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在绑定参数中干扰“pyformat”或“named”格式的字符，即`%， (, )`和空格字符，以及一些其他通常不希望的字符，会在使用匿名化名称的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")时提前剥离，这通常是从一个包含这些字符的命名列自动生成的，该列本身不包含`.key`，以便它们既不干扰
    SQLAlchemy 编译器对字符串格式化的使用，也不干扰参数的驱动程序级解析，这两者在修复之前可能会被演示。此更改仅适用于内部生成和使用的匿名化参数名称，而不适用于最终用户定义的名称，因此该更改不应对任何现有代码产生影响。特别适用于不引用特殊参数名称的
    psycopg2 驱动程序，但也会剥离前导下划线以适应 Oracle（但尚未剥离前导数字，因为某些匿名参数当前完全基于数字/下划线）；无论如何，Oracle
    继续引用包含特殊字符的参数名称。
- en: 'References: [#4837](https://www.sqlalchemy.org/trac/ticket/4837)'
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4837](https://www.sqlalchemy.org/trac/ticket/4837)
- en: sqlite
  id: totrans-2857
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-2858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added support for sqlite “URI” connections, which allow for sqlite-specific
    flags to be passed in the query string such as “read only” for Python sqlite3
    drivers that support this.
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 sqlite “URI” 连接的支持，允许在查询字符串中传递特定于 sqlite 的标志，例如对于支持此功能的 Python sqlite3
    驱动程序，“只读”。
- en: See also
  id: totrans-2860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[URI Connections](../dialects/sqlite.html#pysqlite-uri-connections)'
  id: totrans-2861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[URI 连接](../dialects/sqlite.html#pysqlite-uri-connections)'
- en: 'References: [#4863](https://www.sqlalchemy.org/trac/ticket/4863)'
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4863](https://www.sqlalchemy.org/trac/ticket/4863)
- en: mssql
  id: totrans-2863
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Added identifier quoting to the schema name applied to the “use” statement which
    is invoked when a SQL Server multipart schema name is used within a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that is being reflected, as well as for [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") methods such as [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names"); this accommodates for
    special characters or spaces in the database name. Additionally, the “use” statement
    is not emitted if the current database matches the target owner database name
    being passed.
  id: totrans-2865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在被反射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    中使用 SQL Server 多部分模式名称时，将标识符引用添加到“use”语句中，以及用于 [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 方法，例如 [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")；这样可以容纳数据库名称中的特殊字符或空格。此外，如果当前数据库与传递的目标所有者数据库名称匹配，则不会发出“use”语句。
- en: 'References: [#4883](https://www.sqlalchemy.org/trac/ticket/4883)'
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4883](https://www.sqlalchemy.org/trac/ticket/4883)
- en: oracle
  id: totrans-2867
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-2868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [用例]**'
- en: The Oracle dialect now emits a warning if Oracle version 12.2 or greater is
    used, and the [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") parameter is not set. The version in this specific
    case defaults to that of the “compatibility” version set in the Oracle server
    configuration, not the actual server version. In version 1.4, the default max_identifier_length
    for 12.2 or greater will move to 128 characters. In order to maintain forwards
    compatibility, applications should set [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") to 30 in order to maintain the same length behavior,
    or to 128 in order to test the upcoming behavior. This length determines among
    other things how generated constraint names are truncated for statements like
    `CREATE CONSTRAINT` and `DROP CONSTRAINT`, which means a the new length may produce
    a name-mismatch against a name that was generated with the old length, impacting
    database migrations.
  id: totrans-2869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 方言现在在使用 Oracle 版本 12.2 或更高版本时会发出警告，并且未设置 [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") 参数。在这种特定情况下，默认版本为 Oracle 服务器配置中设置的“兼容性”版本，而不是实际服务器版本。在版本
    1.4 中，12.2 或更高版本的默认 max_identifier_length 将移至 128 个字符。为了保持向前兼容性，应用程序应将 [`create_engine.max_identifier_length`](../core/engines.html#sqlalchemy.create_engine.params.max_identifier_length
    "sqlalchemy.create_engine") 设置为 30，以保持相同的长度行为，或者设置为 128 以测试即将到来的行为。此长度决定了生成的约束名称在诸如
    `CREATE CONSTRAINT` 和 `DROP CONSTRAINT` 等语句中被截断的方式，这意味着新长度可能会导致与使用旧长度生成的名称不匹配，影响数据库迁移。
- en: See also
  id: totrans-2870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Max Identifier Lengths](../dialects/oracle.html#oracle-max-identifier-lengths)
    - in the Oracle dialect documentation'
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[最大标识符长度](../dialects/oracle.html#oracle-max-identifier-lengths) - 在 Oracle
    方言文档中'
- en: 'References: [#4857](https://www.sqlalchemy.org/trac/ticket/4857)'
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4857](https://www.sqlalchemy.org/trac/ticket/4857)
- en: '**[oracle] [bug]**'
  id: totrans-2873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Restored adding cx_Oracle.DATETIME to the setinputsizes() call when a SQLAlchemy
    [`Date`](../core/type_basics.html#sqlalchemy.types.Date "sqlalchemy.types.Date"),
    [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    or [`Time`](../core/type_basics.html#sqlalchemy.types.Time "sqlalchemy.types.Time")
    datatype is used, as some complex queries require this to be present. This was
    removed in the 1.2 series for arbitrary reasons.
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在使用SQLAlchemy的[`Date`](../core/type_basics.html#sqlalchemy.types.Date "sqlalchemy.types.Date")、[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")或[`Time`](../core/type_basics.html#sqlalchemy.types.Time
    "sqlalchemy.types.Time")数据类型时将cx_Oracle.DATETIME添加到setinputsizes()调用中的功能，因为一些复杂查询需要这个功能。这在1.2系列中由于任意原因被移除。
- en: 'References: [#4886](https://www.sqlalchemy.org/trac/ticket/4886)'
  id: totrans-2875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4886](https://www.sqlalchemy.org/trac/ticket/4886)
- en: tests
  id: totrans-2876
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug]**'
- en: Fixed unit test regression released in 1.3.8 that would cause failure for Oracle,
    SQL Server and other non-native ENUM platforms due to new enumeration tests added
    as part of [#4285](https://www.sqlalchemy.org/trac/ticket/4285) enum sortability
    in the unit of work; the enumerations created constraints that were duplicated
    on name.
  id: totrans-2878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.3.8版本中发布的单元测试回归，该回归会导致Oracle、SQL Server和其他非本地ENUM平台失败，因为作为[#4285](https://www.sqlalchemy.org/trac/ticket/4285)枚举可排序性的一部分添加了新的枚举测试；这些枚举创建了重复的名称约束。
- en: 'References: [#4285](https://www.sqlalchemy.org/trac/ticket/4285)'
  id: totrans-2879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4285](https://www.sqlalchemy.org/trac/ticket/4285)
- en: 1.3.8
  id: totrans-2880
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.8
- en: 'Released: August 27, 2019'
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年8月27日
- en: orm
  id: totrans-2882
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [usecase]**'
  id: totrans-2883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [用例]**'
- en: Added support for the use of an [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype using Python pep-435 enumeration objects as
    values for use as a primary key column mapped by the ORM. As these values are
    not inherently sortable, as required by the ORM for primary keys, a new [`TypeEngine.sort_key_function`](../core/type_api.html#sqlalchemy.types.TypeEngine.sort_key_function
    "sqlalchemy.types.TypeEngine.sort_key_function") attribute is added to the typing
    system which allows any SQL type to implement a sorting for Python objects of
    its type which is consulted by the unit of work. The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type then defines this using the database value of a
    given enumeration. The sorting scheme can be also be redefined by passing a callable
    to the [`Enum.sort_key_function`](../core/type_basics.html#sqlalchemy.types.Enum.params.sort_key_function
    "sqlalchemy.types.Enum") parameter. Pull request courtesy Nicolas Caniart.
  id: totrans-2884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对使用Python pep-435枚举对象作为ORM映射的主键列值的[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")数据类型的支持。由于这些值本身并不可排序，而ORM对主键要求可排序，因此在类型系统中添加了一个新的[`TypeEngine.sort_key_function`](../core/type_api.html#sqlalchemy.types.TypeEngine.sort_key_function
    "sqlalchemy.types.TypeEngine.sort_key_function")属性，允许任何SQL类型实现其类型的Python对象排序，这将被工作单元所使用。[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型通过使用给定枚举的数据库值来定义这一点。排序方案也可以通过将可调用对象传递给[`Enum.sort_key_function`](../core/type_basics.html#sqlalchemy.types.Enum.params.sort_key_function
    "sqlalchemy.types.Enum")参数来重新定义。感谢Nicolas Caniart的拉取请求。
- en: 'References: [#4285](https://www.sqlalchemy.org/trac/ticket/4285)'
  id: totrans-2885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4285](https://www.sqlalchemy.org/trac/ticket/4285)
- en: '**[orm] [bug]**'
  id: totrans-2886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [bug]**'
- en: Fixed bug where [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") objects were not pickleable due to mapper/relationship
    state in the internal context dictionary. These objects are now converted to picklable
    using similar techniques as that of other elements within the loader option system
    that have long been serializable.
  id: totrans-2887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load "sqlalchemy.orm.Load")对象由于内部上下文字典中的映射器/关系状态而无法被pickle化。现在，这些对象已经通过与加载器选项系统中其他元素类似的技术转换为可pickle化。
- en: 'References: [#4823](https://www.sqlalchemy.org/trac/ticket/4823)'
  id: totrans-2888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4823](https://www.sqlalchemy.org/trac/ticket/4823)
- en: engine
  id: totrans-2889
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new parameter [`create_engine.hide_parameters`](../core/engines.html#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine") which when set to True will cause SQL parameters to
    no longer be logged, nor rendered in the string representation of a [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") object.
  id: totrans-2891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`create_engine.hide_parameters`](../core/engines.html#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine")，当设置为True时，将导致不再记录SQL参数，也不会在[`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")对象的字符串表示中呈现。
- en: 'References: [#4815](https://www.sqlalchemy.org/trac/ticket/4815)'
  id: totrans-2892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4815](https://www.sqlalchemy.org/trac/ticket/4815)
- en: '**[engine] [bug]**'
  id: totrans-2893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed an issue whereby if the dialect “initialize” process which occurs on first
    connect would encounter an unexpected exception, the initialize process would
    fail to complete and then no longer attempt on subsequent connection attempts,
    leaving the dialect in an un-initialized, or partially initialized state, within
    the scope of parameters that need to be established based on inspection of a live
    connection. The “invoke once” logic in the event system has been reworked to accommodate
    for this occurrence using new, private API features that establish an “exec once”
    hook that will continue to allow the initializer to fire off on subsequent connections,
    until it completes without raising an exception. This does not impact the behavior
    of the existing `once=True` flag within the event system.
  id: totrans-2894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果在首次连接时发生的“初始化”过程遇到意外异常，初始化过程将无法完成，然后在后续连接尝试中不再尝试，导致方言处于未初始化或部分初始化状态，在需要根据对现有连接的检查来建立参数的范围内。事件系统中的“仅调用一次”逻辑已经重新设计，以适应这种情况，使用新的私有API功能建立了一个“仅执行一次”钩子，将继续允许初始化程序在后续连接中触发，直到完成而不引发异常。这不会影响事件系统中现有`once=True`标志的行为。
- en: 'References: [#4807](https://www.sqlalchemy.org/trac/ticket/4807)'
  id: totrans-2895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4807](https://www.sqlalchemy.org/trac/ticket/4807)
- en: postgresql
  id: totrans-2896
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: 'Added support for reflection of CHECK constraints that include the special
    PostgreSQL qualifier “NOT VALID”, which can be present for CHECK constraints that
    were added to an existing table with the directive that they not be applied to
    existing data in the table. The PostgreSQL dictionary for CHECK constraints as
    returned by [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") may include an
    additional entry `dialect_options` which within will contain an entry `"not_valid":
    True` if this symbol is detected. Pull request courtesy Bill Finn.'
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '增加了对包含特殊PostgreSQL修饰符“NOT VALID”的CHECK约束的反射支持，该修饰符可能存在于已添加到现有表中的CHECK约束中，指示它们不应用于表中的现有数据。由[`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")返回的CHECK约束的PostgreSQL字典可能包含一个额外的条目`dialect_options`，其中将包含一个条目`"not_valid":
    True`，如果检测到此符号。拉取请求由Bill Finn提供。'
- en: 'References: [#4824](https://www.sqlalchemy.org/trac/ticket/4824)'
  id: totrans-2899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4824](https://www.sqlalchemy.org/trac/ticket/4824)
- en: '**[postgresql] [bug]**'
  id: totrans-2900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised the approach for the just added support for the psycopg2 “execute_values()”
    feature added in 1.3.7 for [#4623](https://www.sqlalchemy.org/trac/ticket/4623).
    The approach relied upon a regular expression that would fail to match for a more
    complex INSERT statement such as one which had subqueries involved. The new approach
    matches exactly the string that was rendered as the VALUES clause.
  id: totrans-2901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了刚刚添加的对psycopg2“execute_values()”功能的支持的方法，该功能在1.3.7中添加了对[#4623](https://www.sqlalchemy.org/trac/ticket/4623)的支持。该方法依赖于一个正则表达式，该正则表达式无法匹配更复杂的INSERT语句，例如涉及子查询的语句。新方法完全匹配作为VALUES子句呈现的字符串。
- en: 'References: [#4623](https://www.sqlalchemy.org/trac/ticket/4623)'
  id: totrans-2902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4623](https://www.sqlalchemy.org/trac/ticket/4623)
- en: '**[postgresql] [bug]**'
  id: totrans-2903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where Postgresql operators such as [`Comparator.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains") and [`Comparator.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by") would fail to
    function correctly for non-integer values when used against a [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object, due to an erroneous assert statement.
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即Postgresql运算符（例如[`Comparator.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains")和[`Comparator.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by")）在针对[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象使用非整数值时无法正确运行，这是由于错误的断言语句。
- en: 'References: [#4822](https://www.sqlalchemy.org/trac/ticket/4822)'
  id: totrans-2905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4822](https://www.sqlalchemy.org/trac/ticket/4822)
- en: sqlite
  id: totrans-2906
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [reflection]**'
  id: totrans-2907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [reflection]**'
- en: Fixed bug where a FOREIGN KEY that was set up to refer to the parent table by
    table name only without the column names would not correctly be reflected as far
    as setting up the “referred columns”, since SQLite’s PRAGMA does not report on
    these columns if they weren’t given explicitly. For some reason this was hardcoded
    to assume the name of the local column, which might work for some cases but is
    not correct. The new approach reflects the primary key of the referred table and
    uses the constraint columns list as the referred columns list, if the remote column(s)
    aren’t present in the reflected pragma directly.
  id: totrans-2908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中一个外键被设置为仅通过表名而不是列名引用父表时，由于SQLite的PRAGMA没有报告这些列（如果它们没有被明确给出），因此“引用列”不会正确反映。由于某种原因，这是硬编码为假定本地列的名称，这对某些情况可能有效，但是不正确。新方法反映了被引用表的主键，并将约束列列表用作被引用列列表，如果远程列在反映的PRAGMA中不存在。
- en: 'References: [#4810](https://www.sqlalchemy.org/trac/ticket/4810)'
  id: totrans-2909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4810](https://www.sqlalchemy.org/trac/ticket/4810)
- en: orm
  id: totrans-2910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added support for the use of an [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype using Python pep-435 enumeration objects as
    values for use as a primary key column mapped by the ORM. As these values are
    not inherently sortable, as required by the ORM for primary keys, a new [`TypeEngine.sort_key_function`](../core/type_api.html#sqlalchemy.types.TypeEngine.sort_key_function
    "sqlalchemy.types.TypeEngine.sort_key_function") attribute is added to the typing
    system which allows any SQL type to implement a sorting for Python objects of
    its type which is consulted by the unit of work. The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type then defines this using the database value of a
    given enumeration. The sorting scheme can be also be redefined by passing a callable
    to the [`Enum.sort_key_function`](../core/type_basics.html#sqlalchemy.types.Enum.params.sort_key_function
    "sqlalchemy.types.Enum") parameter. Pull request courtesy Nicolas Caniart.
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对使用Python pep-435枚举对象作为ORM映射的主键列值的[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")数据类型的支持。由于这些值本身不可排序，这是ORM对主键所需的，因此在类型系统中添加了一个新的[`TypeEngine.sort_key_function`](../core/type_api.html#sqlalchemy.types.TypeEngine.sort_key_function
    "sqlalchemy.types.TypeEngine.sort_key_function")属性，允许任何SQL类型实现其类型的Python对象的排序，该排序由工作单元查询。然后，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型使用给定枚举的数据库值定义这一点。通过将可调用对象传递给[`Enum.sort_key_function`](../core/type_basics.html#sqlalchemy.types.Enum.params.sort_key_function
    "sqlalchemy.types.Enum")参数，还可以重新定义排序方案。感谢Nicolas Caniart的拉取请求。
- en: 'References: [#4285](https://www.sqlalchemy.org/trac/ticket/4285)'
  id: totrans-2913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4285](https://www.sqlalchemy.org/trac/ticket/4285)
- en: '**[orm] [bug]**'
  id: totrans-2914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") objects were not pickleable due to mapper/relationship
    state in the internal context dictionary. These objects are now converted to picklable
    using similar techniques as that of other elements within the loader option system
    that have long been serializable.
  id: totrans-2915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load")对象由于内部上下文字典中的映射器/关系状态而无法被pickle化。现在，这些对象通过类似于加载器选项系统中其他元素长期以来可序列化的技术进行转换为可pickle化。
- en: 'References: [#4823](https://www.sqlalchemy.org/trac/ticket/4823)'
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4823](https://www.sqlalchemy.org/trac/ticket/4823)
- en: engine
  id: totrans-2917
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new parameter [`create_engine.hide_parameters`](../core/engines.html#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine") which when set to True will cause SQL parameters to
    no longer be logged, nor rendered in the string representation of a [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") object.
  id: totrans-2919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了新参数[`create_engine.hide_parameters`](../core/engines.html#sqlalchemy.create_engine.params.hide_parameters
    "sqlalchemy.create_engine")，当设置为True时，将导致不再记录SQL参数，也不会在[`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")对象的字符串表示中呈现。
- en: 'References: [#4815](https://www.sqlalchemy.org/trac/ticket/4815)'
  id: totrans-2920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4815](https://www.sqlalchemy.org/trac/ticket/4815)
- en: '**[engine] [bug]**'
  id: totrans-2921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed an issue whereby if the dialect “initialize” process which occurs on first
    connect would encounter an unexpected exception, the initialize process would
    fail to complete and then no longer attempt on subsequent connection attempts,
    leaving the dialect in an un-initialized, or partially initialized state, within
    the scope of parameters that need to be established based on inspection of a live
    connection. The “invoke once” logic in the event system has been reworked to accommodate
    for this occurrence using new, private API features that establish an “exec once”
    hook that will continue to allow the initializer to fire off on subsequent connections,
    until it completes without raising an exception. This does not impact the behavior
    of the existing `once=True` flag within the event system.
  id: totrans-2922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果在首次连接时发生“初始化”过程的方言遇到意外异常，初始化过程将无法完成，然后在后续连接尝试中不再尝试，导致方言处于未初始化或部分初始化状态，在需要根据实时连接检查来建立参数的范围内。事件系统中的“仅调用一次”逻辑已经重新设计，以适应这种情况，使用新的私有API功能建立了一个“仅执行一次”钩子，将继续允许初始化程序在后续连接中触发，直到完成而不引发异常。这不会影响事件系统中现有的`once=True`标志的行为。
- en: 'References: [#4807](https://www.sqlalchemy.org/trac/ticket/4807)'
  id: totrans-2923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4807](https://www.sqlalchemy.org/trac/ticket/4807)
- en: postgresql
  id: totrans-2924
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: 'Added support for reflection of CHECK constraints that include the special
    PostgreSQL qualifier “NOT VALID”, which can be present for CHECK constraints that
    were added to an existing table with the directive that they not be applied to
    existing data in the table. The PostgreSQL dictionary for CHECK constraints as
    returned by [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") may include an
    additional entry `dialect_options` which within will contain an entry `"not_valid":
    True` if this symbol is detected. Pull request courtesy Bill Finn.'
  id: totrans-2926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '增加了对包含特殊的PostgreSQL限定词“NOT VALID”的CHECK约束的反射支持，该限定词可能存在于已向现有表添加的CHECK约束中，指示不将其应用于表中现有数据。由[`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")返回的CHECK约束的PostgreSQL字典可能包含一个额外的条目`dialect_options`，其中将包含一个条目`"not_valid":
    True`，如果检测到此符号。拉取请求由Bill Finn提供。'
- en: 'References: [#4824](https://www.sqlalchemy.org/trac/ticket/4824)'
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4824](https://www.sqlalchemy.org/trac/ticket/4824)
- en: '**[postgresql] [bug]**'
  id: totrans-2928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised the approach for the just added support for the psycopg2 “execute_values()”
    feature added in 1.3.7 for [#4623](https://www.sqlalchemy.org/trac/ticket/4623).
    The approach relied upon a regular expression that would fail to match for a more
    complex INSERT statement such as one which had subqueries involved. The new approach
    matches exactly the string that was rendered as the VALUES clause.
  id: totrans-2929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了对于在1.3.7中添加的对psycopg2“execute_values()”功能的支持的方法，该功能添加在[#4623](https://www.sqlalchemy.org/trac/ticket/4623)中。该方法依赖于一个正则表达式，该正则表达式无法匹配更复杂的INSERT语句，例如涉及子查询的语句。新方法完全匹配作为VALUES子句呈现的字符串。
- en: 'References: [#4623](https://www.sqlalchemy.org/trac/ticket/4623)'
  id: totrans-2930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4623](https://www.sqlalchemy.org/trac/ticket/4623)
- en: '**[postgresql] [bug]**'
  id: totrans-2931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where Postgresql operators such as [`Comparator.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains") and [`Comparator.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by") would fail to
    function correctly for non-integer values when used against a [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object, due to an erroneous assert statement.
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即Postgresql运算符（例如[`Comparator.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains")和[`Comparator.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by")）在针对[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象使用时，对非整数值的功能无法正确运行，这是由于错误的断言语句。
- en: 'References: [#4822](https://www.sqlalchemy.org/trac/ticket/4822)'
  id: totrans-2933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4822](https://www.sqlalchemy.org/trac/ticket/4822)
- en: sqlite
  id: totrans-2934
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [reflection]**'
  id: totrans-2935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [reflection]**'
- en: Fixed bug where a FOREIGN KEY that was set up to refer to the parent table by
    table name only without the column names would not correctly be reflected as far
    as setting up the “referred columns”, since SQLite’s PRAGMA does not report on
    these columns if they weren’t given explicitly. For some reason this was hardcoded
    to assume the name of the local column, which might work for some cases but is
    not correct. The new approach reflects the primary key of the referred table and
    uses the constraint columns list as the referred columns list, if the remote column(s)
    aren’t present in the reflected pragma directly.
  id: totrans-2936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即设置为仅通过表名而不是列名引用父表的FOREIGN KEY不会正确地反映为设置“referred columns”，因为如果没有显式给出，SQLite的PRAGMA不会报告这些列。出于某种原因，这被硬编码为假设本地列的名称，这对某些情况可能有效，但不正确。新方法反映了被引用表的主键，并使用约束列列表作为被引用列列表，如果远程列不直接在反映的PRAGMA中存在。
- en: 'References: [#4810](https://www.sqlalchemy.org/trac/ticket/4810)'
  id: totrans-2937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4810](https://www.sqlalchemy.org/trac/ticket/4810)
- en: 1.3.7
  id: totrans-2938
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.7
- en: 'Released: August 14, 2019'
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年8月14日
- en: orm
  id: totrans-2940
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by new selectinload for many-to-one logic where a primaryjoin
    condition not based on real foreign keys would cause KeyError if a related object
    did not exist for a given key value on the parent object.
  id: totrans-2942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由新的many-to-one逻辑的selectinload引起的回归，其中一个基于非真实外键的primaryjoin条件会导致如果父对象上给定键值的相关对象不存在，则会引发KeyError。
- en: 'References: [#4777](https://www.sqlalchemy.org/trac/ticket/4777)'
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4777](https://www.sqlalchemy.org/trac/ticket/4777)
- en: '**[orm] [bug]**'
  id: totrans-2944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") or a slice expression in conjunction with a query
    that has an expression based “offset” applied would raise TypeError, due to an
    “or” conditional against “offset” that did not expect it to be a SQL expression
    as opposed to an integer or None.
  id: totrans-2945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在与应用了基于表达式的“offset”的查询一起使用[`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first")或切片表达式时，会引发TypeError，因为“offset”的“or”条件不希望它是SQL表达式而不是整数或None。
- en: 'References: [#4803](https://www.sqlalchemy.org/trac/ticket/4803)'
  id: totrans-2946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4803](https://www.sqlalchemy.org/trac/ticket/4803)
- en: sql
  id: totrans-2947
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") object which contained a mixture of functional expressions
    which were not resolvable to a particular column, in combination with string-based
    column names, would fail to initialize its internal state correctly leading to
    failures during DDL compilation.
  id: totrans-2949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即包含一些无法解析为特定列的函数表达式的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象，与基于字符串的列名混合，将无法正确初始化其内部状态，导致DDL编译期间失败。
- en: 'References: [#4778](https://www.sqlalchemy.org/trac/ticket/4778)'
  id: totrans-2950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4778](https://www.sqlalchemy.org/trac/ticket/4778)
- en: '**[sql] [bug]**'
  id: totrans-2951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") method would not be applied to
    subsequent SELECT statements inside of a UNION or other `_selectable.CompoundSelect`,
    even though the SELECT statements are rendered at the topmost level of the statement.
    New logic now differentiates between rendering the column expression, which is
    needed for all SELECTs in the list, vs. gathering the returned data type for the
    result row, which is needed only for the first SELECT.
  id: totrans-2952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即[`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression")方法在UNION或其他`_selectable.CompoundSelect`内的后续SELECT语句中不会被应用，尽管SELECT语句在语句的最顶层被渲染。新逻辑现在区分了渲染列表达式（对于列表中的所有SELECT都需要）与收集结果行的返回数据类型，后者仅对第一个SELECT需要。
- en: 'References: [#4787](https://www.sqlalchemy.org/trac/ticket/4787)'
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4787](https://www.sqlalchemy.org/trac/ticket/4787)
- en: '**[sql] [bug]**'
  id: totrans-2954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where internal cloning of SELECT constructs could lead to a key
    error if the copy of the SELECT changed its state such that its list of columns
    changed. This was observed to be occurring in some ORM scenarios which may be
    unique to 1.3 and above, so is partially a regression fix.
  id: totrans-2955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了内部克隆SELECT结构可能导致键错误的问题，如果SELECT的副本更改其状态，使其列列表发生变化。这在一些ORM场景中观察到，可能是1.3及以上版本独有的问题，因此部分是一个回归修复。
- en: 'References: [#4780](https://www.sqlalchemy.org/trac/ticket/4780)'
  id: totrans-2956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4780](https://www.sqlalchemy.org/trac/ticket/4780)
- en: postgresql
  id: totrans-2957
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added new dialect flag for the psycopg2 dialect, `executemany_mode` which supersedes
    the previous experimental `use_batch_mode` flag. `executemany_mode` supports both
    the “execute batch” and “execute values” functions provided by psycopg2, the latter
    which is used for compiled [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") constructs. Pull request courtesy Yuval Dinari.
  id: totrans-2959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 psycopg2 方言添加了新的方言标志 `executemany_mode`，它取代了之前的实验性 `use_batch_mode` 标志。`executemany_mode`
    支持 psycopg2 提供的“execute batch”和“execute values”函数，后者用于编译的 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 构造。感谢 Yuval Dinari 的拉取请求。
- en: See also
  id: totrans-2960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Psycopg2 Fast Execution Helpers](../dialects/postgresql.html#psycopg2-executemany-mode)'
  id: totrans-2961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2 快速执行助手](../dialects/postgresql.html#psycopg2-executemany-mode)'
- en: 'References: [#4623](https://www.sqlalchemy.org/trac/ticket/4623)'
  id: totrans-2962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4623](https://www.sqlalchemy.org/trac/ticket/4623)
- en: mysql
  id: totrans-2963
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-2964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Added reserved words ARRAY and MEMBER to the MySQL reserved words list, as MySQL
    8.0 has now made these reserved.
  id: totrans-2965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ARRAY 和 MEMBER 添加到 MySQL 保留字列表中，因为 MySQL 8.0 现在将它们视为保留字。
- en: 'References: [#4783](https://www.sqlalchemy.org/trac/ticket/4783)'
  id: totrans-2966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4783](https://www.sqlalchemy.org/trac/ticket/4783)
- en: '**[mysql] [bug]**'
  id: totrans-2967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialects will emit “SET NAMES” at the start of a connection when charset
    is given to the MySQL driver, to appease an apparent behavior observed in MySQL
    8.0 that raises a collation error when a UNION includes string columns unioned
    against columns of the form CAST(NULL AS CHAR(..)), which is what SQLAlchemy’s
    polymorphic_union function does. The issue seems to have affected PyMySQL for
    at least a year, however has recently appeared as of mysqlclient 1.4.4 based on
    changes in how this DBAPI creates a connection. As the presence of this directive
    impacts three separate MySQL charset settings which each have intricate effects
    based on their presence, SQLAlchemy will now emit the directive on new connections
    to ensure correct behavior.
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 MySQL 方言给出字符集时，MySQL 方言将在连接开始时发出“SET NAMES”以满足 MySQL 8.0 中观察到的一个明显行为，当 UNION
    包含字符串列与形式为 CAST(NULL AS CHAR(..)) 的列联合时会引发一个排序错误，这是 SQLAlchemy 的 polymorphic_union
    函数所做的。这个问题似乎至少影响了 PyMySQL 一年，然而最近在基于 mysqlclient 1.4.4 的更改中出现。由于这个指令的存在影响了三个不同的
    MySQL 字符集设置，每个设置根据其存在的情况有复杂的影响，因此 SQLAlchemy 现在会在新连接上发出该指令以确保正确的行为。
- en: 'References: [#4804](https://www.sqlalchemy.org/trac/ticket/4804)'
  id: totrans-2969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4804](https://www.sqlalchemy.org/trac/ticket/4804)
- en: '**[mysql] [bug]**'
  id: totrans-2970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added another fix for an upstream MySQL 8 issue where a case sensitive table
    name is reported incorrectly in foreign key constraint reflection, this is an
    extension of the fix first added for [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    which affects a case sensitive column name. The new issue occurs through MySQL
    8.0.17, so the general logic of the 88718 fix remains in place.
  id: totrans-2971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为上游 MySQL 8 问题添加了另一个修复，其中一个区分大小写的表名在外键约束反射中被错误报告，这是对首次为 [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    添加的修复的扩展，影响一个区分大小写的列名。新问题发生在 MySQL 8.0.17 中，因此 88718 修复的一般逻辑仍然有效。
- en: See also
  id: totrans-2972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://bugs.mysql.com/bug.php?id=96365](https://bugs.mysql.com/bug.php?id=96365)
    - upstream bug'
  id: totrans-2973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://bugs.mysql.com/bug.php?id=96365](https://bugs.mysql.com/bug.php?id=96365)
    - 上游 bug'
- en: 'References: [#4751](https://www.sqlalchemy.org/trac/ticket/4751)'
  id: totrans-2974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4751](https://www.sqlalchemy.org/trac/ticket/4751)
- en: sqlite
  id: totrans-2975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The dialects that support json are supposed to take arguments `json_serializer`
    and `json_deserializer` at the create_engine() level, however the SQLite dialect
    calls them `_json_serializer` and `_json_deserilalizer`. The names have been corrected,
    the old names are accepted with a change warning, and these parameters are now
    documented as [`create_engine.json_serializer`](../core/engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine") and [`create_engine.json_deserializer`](../core/engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine").
  id: totrans-2977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持 json 的方言应该在 create_engine() 级别接受参数 `json_serializer` 和 `json_deserializer`，然而
    SQLite 方言将它们称为 `_json_serializer` 和 `_json_deserilalizer`。这些名称已经被更正，旧名称会有更改警告，这些参数现在被记录为
    [`create_engine.json_serializer`](../core/engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine") 和 [`create_engine.json_deserializer`](../core/engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine")。
- en: 'References: [#4798](https://www.sqlalchemy.org/trac/ticket/4798)'
  id: totrans-2978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4798](https://www.sqlalchemy.org/trac/ticket/4798)
- en: '**[sqlite] [bug]**'
  id: totrans-2979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug where usage of “PRAGMA table_info” in SQLite dialect meant that reflection
    features to detect for table existence, list of table columns, and list of foreign
    keys, would default to any table in any attached database, when no schema name
    was given and the table did not exist in the base schema. The fix explicitly runs
    PRAGMA for the ‘main’ schema and then the ‘temp’ schema if the ‘main’ returned
    no rows, to maintain the behavior of tables + temp tables in the “no schema” namespace,
    attached tables only in the “schema” namespace.
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 SQLite 方言中使用“PRAGMA table_info”时引发的 bug，这意味着检测表存在性、列出表列和表外键列表的反射功能会默认为任何附加数据库中的任何表，当未给出模式名称并且表不存在于基本模式中时。修复显式地对“main”模式运行
    PRAGMA，然后如果“main”返回零行，则对“temp”模式运行 PRAGMA，以维护“无模式”命名空间中的表和临时表的行为，仅在“模式”命名空间中附加表。
- en: 'References: [#4793](https://www.sqlalchemy.org/trac/ticket/4793)'
  id: totrans-2981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4793](https://www.sqlalchemy.org/trac/ticket/4793)
- en: mssql
  id: totrans-2982
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-2983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [usecase]**'
- en: Added new [`try_cast()`](../dialects/mssql.html#sqlalchemy.dialects.mssql.try_cast
    "sqlalchemy.dialects.mssql.try_cast") construct for SQL Server which emits “TRY_CAST”
    syntax. Pull request courtesy Leonel Atencio.
  id: totrans-2984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了适用于 SQL Server 的新 [`try_cast()`](../dialects/mssql.html#sqlalchemy.dialects.mssql.try_cast
    "sqlalchemy.dialects.mssql.try_cast") 构造，使用“TRY_CAST” 语法。感谢 Leonel Atencio 的 Pull
    请求。
- en: 'References: [#4782](https://www.sqlalchemy.org/trac/ticket/4782)'
  id: totrans-2985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4782](https://www.sqlalchemy.org/trac/ticket/4782)
- en: misc
  id: totrans-2986
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [events]**'
  id: totrans-2987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [events]**'
- en: Fixed issue in event system where using the `once=True` flag with dynamically
    generated listener functions would cause event registration of future events to
    fail if those listener functions were garbage collected after they were used,
    due to an assumption that a listened function is strongly referenced. The “once”
    wrapped is now modified to strongly reference the inner function persistently,
    and documentation is updated that using “once” does not imply automatic de-registration
    of listener functions.
  id: totrans-2988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事件系统中的问题，即在使用 `once=True` 标志与动态生成的监听器函数时，如果这些监听器函数在使用后被垃圾收集，未来事件的事件注册将失败，因为假设监听函数被强引用。现在，“once”包装已修改为持久性地强引用内部函数，并且文档已更新，使用“once”不意味着自动取消注册监听器函数。
- en: 'References: [#4794](https://www.sqlalchemy.org/trac/ticket/4794)'
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4794](https://www.sqlalchemy.org/trac/ticket/4794)
- en: orm
  id: totrans-2990
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by new selectinload for many-to-one logic where a primaryjoin
    condition not based on real foreign keys would cause KeyError if a related object
    did not exist for a given key value on the parent object.
  id: totrans-2992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于新的一对多逻辑的 selectinload 导致的回归，其中基于真实外键的主要联接条件会导致 KeyError，如果父对象的给定键值上不存在相关对象，则会出现此问题。
- en: 'References: [#4777](https://www.sqlalchemy.org/trac/ticket/4777)'
  id: totrans-2993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4777](https://www.sqlalchemy.org/trac/ticket/4777)
- en: '**[orm] [bug]**'
  id: totrans-2994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") or a slice expression in conjunction with a query
    that has an expression based “offset” applied would raise TypeError, due to an
    “or” conditional against “offset” that did not expect it to be a SQL expression
    as opposed to an integer or None.
  id: totrans-2995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在与应用了基于表达式的“偏移量”的查询结合使用时，使用 [`Query.first()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") 或切片表达式将引发 TypeError，因为“偏移量”被视为 SQL 表达式而不是整数或 None。
- en: 'References: [#4803](https://www.sqlalchemy.org/trac/ticket/4803)'
  id: totrans-2996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4803](https://www.sqlalchemy.org/trac/ticket/4803)
- en: sql
  id: totrans-2997
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") object which contained a mixture of functional expressions
    which were not resolvable to a particular column, in combination with string-based
    column names, would fail to initialize its internal state correctly leading to
    failures during DDL compilation.
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即包含一组功能表达式且无法解析为特定列的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 对象，与基于字符串的列名组合使用时，将无法正确初始化其内部状态，导致在 DDL 编译过程中失败。
- en: 'References: [#4778](https://www.sqlalchemy.org/trac/ticket/4778)'
  id: totrans-3000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4778](https://www.sqlalchemy.org/trac/ticket/4778)
- en: '**[sql] [bug]**'
  id: totrans-3001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") method would not be applied to
    subsequent SELECT statements inside of a UNION or other `_selectable.CompoundSelect`,
    even though the SELECT statements are rendered at the topmost level of the statement.
    New logic now differentiates between rendering the column expression, which is
    needed for all SELECTs in the list, vs. gathering the returned data type for the
    result row, which is needed only for the first SELECT.
  id: totrans-3002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即 [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") 方法不会应用于 UNION 或其他 `_selectable.CompoundSelect`
    中的后续 SELECT 语句，即使 SELECT 语句在语句的最顶层渲染。现在的新逻辑区分了渲染列表达式（对列表中的所有 SELECT 都需要）与收集结果行的返回数据类型（仅对第一个
    SELECT 需要）。
- en: 'References: [#4787](https://www.sqlalchemy.org/trac/ticket/4787)'
  id: totrans-3003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4787](https://www.sqlalchemy.org/trac/ticket/4787)
- en: '**[sql] [bug]**'
  id: totrans-3004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where internal cloning of SELECT constructs could lead to a key
    error if the copy of the SELECT changed its state such that its list of columns
    changed. This was observed to be occurring in some ORM scenarios which may be
    unique to 1.3 and above, so is partially a regression fix.
  id: totrans-3005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了内部克隆 SELECT 结构可能导致键错误的问题，如果 SELECT 的副本改变了其状态，使得其列列表发生了变化。这在一些 ORM 场景中被观察到，可能是独特于
    1.3 及以上版本的，因此部分是一个回归修复。
- en: 'References: [#4780](https://www.sqlalchemy.org/trac/ticket/4780)'
  id: totrans-3006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4780](https://www.sqlalchemy.org/trac/ticket/4780)
- en: postgresql
  id: totrans-3007
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added new dialect flag for the psycopg2 dialect, `executemany_mode` which supersedes
    the previous experimental `use_batch_mode` flag. `executemany_mode` supports both
    the “execute batch” and “execute values” functions provided by psycopg2, the latter
    which is used for compiled [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") constructs. Pull request courtesy Yuval Dinari.
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 psycopg2 方言添加了新的方言标志 `executemany_mode`，它取代了先前的实验性 `use_batch_mode` 标志。`executemany_mode`
    支持 psycopg2 提供的“execute batch”和“execute values”函数，后者用于编译的 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 构造。感谢 Yuval Dinari 提交的拉取请求。
- en: See also
  id: totrans-3010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Psycopg2 Fast Execution Helpers](../dialects/postgresql.html#psycopg2-executemany-mode)'
  id: totrans-3011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2 快速执行助手](../dialects/postgresql.html#psycopg2-executemany-mode)'
- en: 'References: [#4623](https://www.sqlalchemy.org/trac/ticket/4623)'
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4623](https://www.sqlalchemy.org/trac/ticket/4623)
- en: mysql
  id: totrans-3013
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-3014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Added reserved words ARRAY and MEMBER to the MySQL reserved words list, as MySQL
    8.0 has now made these reserved.
  id: totrans-3015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ARRAY 和 MEMBER 添加到 MySQL 保留字列表中，因为 MySQL 8.0 现在已将这些保留字。
- en: 'References: [#4783](https://www.sqlalchemy.org/trac/ticket/4783)'
  id: totrans-3016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4783](https://www.sqlalchemy.org/trac/ticket/4783)
- en: '**[mysql] [bug]**'
  id: totrans-3017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialects will emit “SET NAMES” at the start of a connection when charset
    is given to the MySQL driver, to appease an apparent behavior observed in MySQL
    8.0 that raises a collation error when a UNION includes string columns unioned
    against columns of the form CAST(NULL AS CHAR(..)), which is what SQLAlchemy’s
    polymorphic_union function does. The issue seems to have affected PyMySQL for
    at least a year, however has recently appeared as of mysqlclient 1.4.4 based on
    changes in how this DBAPI creates a connection. As the presence of this directive
    impacts three separate MySQL charset settings which each have intricate effects
    based on their presence, SQLAlchemy will now emit the directive on new connections
    to ensure correct behavior.
  id: totrans-3018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 MySQL 方言给出字符集时，MySQL 方言将在连接开始时发出“SET NAMES”，以满足 MySQL 8.0 中观察到的明显行为，当一个 UNION
    包含字符串列与形式为 CAST(NULL AS CHAR(..)) 的列时，会引发排序错误，这是 SQLAlchemy 的 polymorphic_union
    函数所做的。该问题似乎已经影响了 PyMySQL 至少一年，然而最近出现了 mysqlclient 1.4.4，基于这个 DBAPI 如何创建连接的变化。由于该指令的存在影响了三个不同的
    MySQL 字符集设置，每个设置都根据其存在的方式产生复杂的影响，因此 SQLAlchemy 现在将在新连接上发出该指令以确保正确的行为。
- en: 'References: [#4804](https://www.sqlalchemy.org/trac/ticket/4804)'
  id: totrans-3019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4804](https://www.sqlalchemy.org/trac/ticket/4804)
- en: '**[mysql] [bug]**'
  id: totrans-3020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added another fix for an upstream MySQL 8 issue where a case sensitive table
    name is reported incorrectly in foreign key constraint reflection, this is an
    extension of the fix first added for [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    which affects a case sensitive column name. The new issue occurs through MySQL
    8.0.17, so the general logic of the 88718 fix remains in place.
  id: totrans-3021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为上游 MySQL 8 问题添加了另一个修复，其中对于大小写敏感的表名在外键约束反射中报告不正确，这是首次为 [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    添加的修复的扩展，影响到大小写敏感的列名。新问题发生在 MySQL 8.0.17 中，因此 88718 修复的一般逻辑仍然有效。
- en: See also
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://bugs.mysql.com/bug.php?id=96365](https://bugs.mysql.com/bug.php?id=96365)
    - upstream bug'
  id: totrans-3023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://bugs.mysql.com/bug.php?id=96365](https://bugs.mysql.com/bug.php?id=96365)
    - 上游 bug'
- en: 'References: [#4751](https://www.sqlalchemy.org/trac/ticket/4751)'
  id: totrans-3024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4751](https://www.sqlalchemy.org/trac/ticket/4751)
- en: sqlite
  id: totrans-3025
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-3026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The dialects that support json are supposed to take arguments `json_serializer`
    and `json_deserializer` at the create_engine() level, however the SQLite dialect
    calls them `_json_serializer` and `_json_deserilalizer`. The names have been corrected,
    the old names are accepted with a change warning, and these parameters are now
    documented as [`create_engine.json_serializer`](../core/engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine") and [`create_engine.json_deserializer`](../core/engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine").
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持 json 的方言应在 create_engine() 级别接受参数 `json_serializer` 和 `json_deserializer`，然而
    SQLite 方言将它们称为 `_json_serializer` 和 `_json_deserilalizer`。这些名称已经更正，旧名称将带有更改警告接受，并且这些参数现在被记录为
    [`create_engine.json_serializer`](../core/engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine") 和 [`create_engine.json_deserializer`](../core/engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine")。
- en: 'References: [#4798](https://www.sqlalchemy.org/trac/ticket/4798)'
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4798](https://www.sqlalchemy.org/trac/ticket/4798)
- en: '**[sqlite] [bug]**'
  id: totrans-3029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug where usage of “PRAGMA table_info” in SQLite dialect meant that reflection
    features to detect for table existence, list of table columns, and list of foreign
    keys, would default to any table in any attached database, when no schema name
    was given and the table did not exist in the base schema. The fix explicitly runs
    PRAGMA for the ‘main’ schema and then the ‘temp’ schema if the ‘main’ returned
    no rows, to maintain the behavior of tables + temp tables in the “no schema” namespace,
    attached tables only in the “schema” namespace.
  id: totrans-3030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 SQLite 方言中使用 “PRAGMA table_info” 导致反射功能默认为任何附加数据库中的任何表，当未给出模式名称且表在基本模式中不存在时，用于检测表存在性、表列列表和外键列表的反射功能。修复明确地为
    ‘main’ 模式运行 PRAGMA，然后如果 ‘main’ 返回没有行，则运行 ‘temp’ 模式，以保持“无模式”命名空间中的表 + 临时表的行为，仅在“模式”命名空间中附加表。
- en: 'References: [#4793](https://www.sqlalchemy.org/trac/ticket/4793)'
  id: totrans-3031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4793](https://www.sqlalchemy.org/trac/ticket/4793)
- en: mssql
  id: totrans-3032
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-3033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [usecase]**'
- en: Added new [`try_cast()`](../dialects/mssql.html#sqlalchemy.dialects.mssql.try_cast
    "sqlalchemy.dialects.mssql.try_cast") construct for SQL Server which emits “TRY_CAST”
    syntax. Pull request courtesy Leonel Atencio.
  id: totrans-3034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 添加了新的 [`try_cast()`](../dialects/mssql.html#sqlalchemy.dialects.mssql.try_cast
    "sqlalchemy.dialects.mssql.try_cast") 构造，它发出“TRY_CAST”语法。感谢 Leonel Atencio 的拉取请求。
- en: 'References: [#4782](https://www.sqlalchemy.org/trac/ticket/4782)'
  id: totrans-3035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4782](https://www.sqlalchemy.org/trac/ticket/4782)
- en: misc
  id: totrans-3036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [events]**'
  id: totrans-3037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [events]**'
- en: Fixed issue in event system where using the `once=True` flag with dynamically
    generated listener functions would cause event registration of future events to
    fail if those listener functions were garbage collected after they were used,
    due to an assumption that a listened function is strongly referenced. The “once”
    wrapped is now modified to strongly reference the inner function persistently,
    and documentation is updated that using “once” does not imply automatic de-registration
    of listener functions.
  id: totrans-3038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事件系统中的问题，其中使用 `once=True` 标志与动态生成的监听器函数会导致未来事件的事件注册失败，如果这些监听器函数在使用后被垃圾回收，因为假设监听函数被强引用。现在，“once”
    包装已被修改为持久性地强引用内部函数，并且更新了文档，使用 “once” 不意味着自动注销监听器函数。
- en: 'References: [#4794](https://www.sqlalchemy.org/trac/ticket/4794)'
  id: totrans-3039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4794](https://www.sqlalchemy.org/trac/ticket/4794)
- en: 1.3.6
  id: totrans-3040
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.6
- en: 'Released: July 21, 2019'
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019 年 7 月 21 日
- en: orm
  id: totrans-3042
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new loader option method [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") which allows loader options to be constructed hierarchically,
    so that many sub-options can be applied to a particular path without needing to
    call [`defaultload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.defaultload
    "sqlalchemy.orm.defaultload") many times. Thanks to Alessio Bogon for the idea.
  id: totrans-3044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的加载器选项方法[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")，允许按层次结构构建加载器选项，因此可以在不需要多次调用[`defaultload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.defaultload
    "sqlalchemy.orm.defaultload")的情况下，将许多子选项应用于特定路径。感谢Alessio Bogon提出的想法。
- en: 'References: [#4736](https://www.sqlalchemy.org/trac/ticket/4736)'
  id: totrans-3045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4736](https://www.sqlalchemy.org/trac/ticket/4736)
- en: '**[orm] [performance]**'
  id: totrans-3046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [performance]**'
- en: The optimization applied to selectin loading in [#4340](https://www.sqlalchemy.org/trac/ticket/4340)
    where a JOIN is not needed to eagerly load related items is now applied to many-to-one
    relationships as well, so that only the related table is queried for a simple
    join condition. In this case, the related items are queried based on the value
    of a foreign key column on the parent; if these columns are deferred or otherwise
    not loaded on any of the parent objects in the collection, the loader falls back
    to the JOIN method.
  id: totrans-3047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用于选择加载中的优化，在[#4340](https://www.sqlalchemy.org/trac/ticket/4340)中，不需要JOIN即可急切加载相关项目，现在也应用于多对一关系，因此仅查询相关表以进行简单的连接条件。在这种情况下，相关项目基于父级的外键列的值进行查询；如果这些列被延迟加载或其他方式未加载到集合中的任何父对象上，则加载器将退回到JOIN方法。
- en: 'References: [#4775](https://www.sqlalchemy.org/trac/ticket/4775)'
  id: totrans-3048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4775](https://www.sqlalchemy.org/trac/ticket/4775)
- en: '**[orm] [bug]**'
  id: totrans-3049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4365](https://www.sqlalchemy.org/trac/ticket/4365)
    where a join from an entity to itself without using aliases no longer raises an
    informative error message, instead failing on an assertion. The informative error
    condition has been restored.
  id: totrans-3050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由[#4365](https://www.sqlalchemy.org/trac/ticket/4365)引起的回归错误已修复，即从一个实体到自身的连接没有使用别名时不再引发信息性错误消息，而是在断言失败时失败。已恢复信息性错误条件。
- en: 'References: [#4773](https://www.sqlalchemy.org/trac/ticket/4773)'
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4773](https://www.sqlalchemy.org/trac/ticket/4773)
- en: '**[orm] [bug]**'
  id: totrans-3052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an issue where the `_ORMJoin.join()` method, which is a not-internally-used
    ORM-level method that exposes what is normally an internal process of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), did not propagate the `full` and `outerjoin` keyword
    arguments correctly. Pull request courtesy Denis Kataev.
  id: totrans-3053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即`_ORMJoin.join()`方法，这是一个未内部使用的ORM级方法，公开了通常是内部过程的[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")，未正确传播`full`和`outerjoin`关键字参数。感谢Denis Kataev提供的拉取请求。
- en: 'References: [#4713](https://www.sqlalchemy.org/trac/ticket/4713)'
  id: totrans-3054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4713](https://www.sqlalchemy.org/trac/ticket/4713)
- en: '**[orm] [bug]**'
  id: totrans-3055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a many-to-one relationship that specified `uselist=True` would
    fail to update correctly during a primary key change where a related column needs
    to change.
  id: totrans-3056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即指定`uselist=True`的多对一关系在主键更改时无法正确更新的问题，其中相关列需要更改。
- en: 'References: [#4772](https://www.sqlalchemy.org/trac/ticket/4772)'
  id: totrans-3057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4772](https://www.sqlalchemy.org/trac/ticket/4772)
- en: '**[orm] [bug]**'
  id: totrans-3058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the detection for many-to-one or one-to-one use with a “dynamic”
    relationship, which is an invalid configuration, would fail to raise if the relationship
    were configured with `uselist=True`. The current fix is that it warns, instead
    of raises, as this would otherwise be backwards incompatible, however in a future
    release it will be a raise.
  id: totrans-3059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即检测到与“动态”关系一起使用的多对一或一对一关系的用法，这是一个无效的配置，如果关系配置为`uselist=True`，则不会引发错误。当前修复是发出警告，而不是引发错误，因为否则将是向后不兼容的，但在将来的版本中将引发错误。
- en: 'References: [#4772](https://www.sqlalchemy.org/trac/ticket/4772)'
  id: totrans-3060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4772](https://www.sqlalchemy.org/trac/ticket/4772)
- en: '**[orm] [bug]**'
  id: totrans-3061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a synonym created against a mapped attribute that does not exist
    yet, as is the case when it refers to backref before mappers are configured, would
    raise recursion errors when trying to test for attributes on it which ultimately
    don’t exist (as occurs when the classes are run through Sphinx autodoc), as the
    unconfigured state of the synonym would put it into an attribute not found loop.
  id: totrans-3062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即针对尚不存在的映射属性创建的同义词（例如在映射器配置之前引用 backref 时）在尝试测试最终不存在的属性时会引发递归错误（例如当类通过
    Sphinx autodoc 运行时），因为同义词的未配置状态会将其置于找不到属性的循环中。
- en: 'References: [#4767](https://www.sqlalchemy.org/trac/ticket/4767)'
  id: totrans-3063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4767](https://www.sqlalchemy.org/trac/ticket/4767)
- en: engine
  id: totrans-3064
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-3065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where using reflection function such as [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object that had execution options applied to it would
    fail, as the resulting `OptionEngine` proxy object failed to include a `.engine`
    attribute used within the reflection routines.
  id: totrans-3066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即使用反射函数（如[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")）与应用了执行选项的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象会失败的情况，因为生成的`OptionEngine`代理对象未包含在反射例程中使用的`.engine`属性。
- en: 'References: [#4754](https://www.sqlalchemy.org/trac/ticket/4754)'
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4754](https://www.sqlalchemy.org/trac/ticket/4754)
- en: sql
  id: totrans-3068
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the initialization for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") to minimize how often it invokes the `.__members__` attribute
    of a given PEP-435 enumeration object, to suit the case where this attribute is
    expensive to invoke, as is the case for some popular third party enumeration libraries.
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的初始化，以减少调用给定
    PEP-435 枚举对象的`.__members__`属性的频率，以适应某些流行的第三方枚举库中这一属性调用昂贵的情况。
- en: 'References: [#4758](https://www.sqlalchemy.org/trac/ticket/4758)'
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4758](https://www.sqlalchemy.org/trac/ticket/4758)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-3072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed issue where the [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") construct in combination with [`FunctionElement.filter()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter") would not produce the correct
    operator precedence in combination with the array index operator.
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")构造与[`FunctionElement.filter()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")结合使用时，与数组索引操作符结合时未能产生正确的运算符优先级。
- en: 'References: [#4760](https://www.sqlalchemy.org/trac/ticket/4760)'
  id: totrans-3074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4760](https://www.sqlalchemy.org/trac/ticket/4760)
- en: '**[sql] [bug]**'
  id: totrans-3075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed an unlikely issue where the “corresponding column” routine for unions
    and other `_selectable.CompoundSelect` objects could return the wrong column in
    some overlapping column situations, thus potentially impacting some ORM operations
    when set operations are in use, if the underlying [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs were used previously in other similar
    kinds of routines, due to a cached value not being cleared.
  id: totrans-3076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个不太可能的问题，即对于联合和其他`_selectable.CompoundSelect`对象的“对应列”例程在某些重叠列情况下可能返回错误的列，从而在使用集合操作时可能影响一些
    ORM 操作，如果底层的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造之前在其他类似例程中使用过，则由于未清除缓存值而可能出现问题。
- en: 'References: [#4747](https://www.sqlalchemy.org/trac/ticket/4747)'
  id: totrans-3077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4747](https://www.sqlalchemy.org/trac/ticket/4747)
- en: postgresql
  id: totrans-3078
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for reflection of indexes on PostgreSQL partitioned tables, which
    was added to PostgreSQL as of version 11.
  id: totrans-3080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL 分区表上索引的反射支持，这在 PostgreSQL 11 版本中添加。
- en: 'References: [#4771](https://www.sqlalchemy.org/trac/ticket/4771)'
  id: totrans-3081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4771](https://www.sqlalchemy.org/trac/ticket/4771)
- en: '**[postgresql] [usecase]**'
  id: totrans-3082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for multidimensional Postgresql array literals via nesting the
    [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    object within another one. The multidimensional array type is detected automatically.
  id: totrans-3083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对多维 Postgresql 数组文字的支持，通过将 [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 对象嵌套在另一个对象中。多维数组类型会被自动检测。
- en: See also
  id: totrans-3084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")'
  id: totrans-3085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")'
- en: 'References: [#4756](https://www.sqlalchemy.org/trac/ticket/4756)'
  id: totrans-3086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4756](https://www.sqlalchemy.org/trac/ticket/4756)
- en: mysql
  id: totrans-3087
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where the special logic to render “NULL” for the [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype when `nullable=True` would not work if
    the column’s datatype were a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") or a [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"). The logic now ensures that it unwraps down to the
    original [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    so that this special case NULL keyword is correctly rendered when requested.
  id: totrans-3089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在 `nullable=True` 时渲染 [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") 数据类型时，特殊逻辑将无法工作，如果列的数据类型是 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 或 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")。现在的逻辑确保将其解包到原始的 [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP")，以便在请求时正确渲染此特殊情况的 NULL 关键字。
- en: 'References: [#4743](https://www.sqlalchemy.org/trac/ticket/4743)'
  id: totrans-3090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4743](https://www.sqlalchemy.org/trac/ticket/4743)
- en: '**[mysql] [bug]**'
  id: totrans-3091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Enhanced MySQL/MariaDB version string parsing to accommodate for exotic MariaDB
    version strings where the “MariaDB” word is embedded among other alphanumeric
    characters such as “MariaDBV1”. This detection is critical in order to correctly
    accommodate for API features that have split between MySQL and MariaDB such as
    the “transaction_isolation” system variable.
  id: totrans-3092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了对 MySQL/MariaDB 版本字符串的解析，以适应复杂的 MariaDB 版本字符串，其中 “MariaDB” 一词嵌入在其他字母数字字符中，例如
    “MariaDBV1”。这种检测对于正确适应在 MySQL 和 MariaDB 之间拆分的 API 功能至关重要，例如 “transaction_isolation”
    系统变量。
- en: 'References: [#4624](https://www.sqlalchemy.org/trac/ticket/4624)'
  id: totrans-3093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4624](https://www.sqlalchemy.org/trac/ticket/4624)
- en: sqlite
  id: totrans-3094
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-3095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Added support for composite (tuple) IN operators with SQLite, by rendering the
    VALUES keyword for this backend. As other backends such as DB2 are known to use
    the same syntax, the syntax is enabled in the base compiler using a dialect-level
    flag `tuple_in_values`. The change also includes support for “empty IN tuple”
    expressions for SQLite when using “in_()” between a tuple value and an empty set.
  id: totrans-3096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 SQLite 的复合（元组）IN 操作符的支持，通过为此后端渲染 VALUES 关键字。由于其他后端（如 DB2）已知使用相同的语法，因此使用方言级别的标志
    `tuple_in_values` 在基础编译器中启用了此语法。此更改还包括对 SQLite 的 “empty IN tuple” 表达式的支持，当使用 “in_()`”
    在元组值和空集之间时。
- en: 'References: [#4766](https://www.sqlalchemy.org/trac/ticket/4766)'
  id: totrans-3097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4766](https://www.sqlalchemy.org/trac/ticket/4766)
- en: mssql
  id: totrans-3098
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Ensured that the queries used to reflect indexes and view definitions will explicitly
    CAST string parameters into NVARCHAR, as many SQL Server drivers frequently treat
    string values, particularly those with non-ascii characters or larger string values,
    as TEXT which often don’t compare correctly against VARCHAR characters in SQL
    Server’s information schema tables for some reason. These CAST operations already
    take place for reflection queries against SQL Server `information_schema.` tables
    but were missing from three additional queries that are against `sys.` tables.
  id: totrans-3100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保用于反映索引和视图定义的查询将字符串参数明确转换为 NVARCHAR，因为许多 SQL Server 驱动程序经常将字符串值，特别是具有非 ASCII
    字符或较大字符串值的值，视为 TEXT，这通常不会与 SQL Server 的信息模式表中的 VARCHAR 字符正确比较。原因之一。这些 CAST 操作已经在反射查询针对
    SQL Server 的 `information_schema.` 表时发生，但缺少了另外三个针对 `sys.` 表的查询。
- en: 'References: [#4745](https://www.sqlalchemy.org/trac/ticket/4745)'
  id: totrans-3101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4745](https://www.sqlalchemy.org/trac/ticket/4745)
- en: orm
  id: totrans-3102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new loader option method [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") which allows loader options to be constructed hierarchically,
    so that many sub-options can be applied to a particular path without needing to
    call [`defaultload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.defaultload
    "sqlalchemy.orm.defaultload") many times. Thanks to Alessio Bogon for the idea.
  id: totrans-3104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的加载器选项方法[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")，允许按层次结构构建加载器选项，因此可以在不需要多次调用[`defaultload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.defaultload
    "sqlalchemy.orm.defaultload")的情况下，将许多子选项应用于特定路径。感谢Alessio Bogon提出的想法。
- en: 'References: [#4736](https://www.sqlalchemy.org/trac/ticket/4736)'
  id: totrans-3105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4736](https://www.sqlalchemy.org/trac/ticket/4736)
- en: '**[orm] [performance]**'
  id: totrans-3106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [performance]**'
- en: The optimization applied to selectin loading in [#4340](https://www.sqlalchemy.org/trac/ticket/4340)
    where a JOIN is not needed to eagerly load related items is now applied to many-to-one
    relationships as well, so that only the related table is queried for a simple
    join condition. In this case, the related items are queried based on the value
    of a foreign key column on the parent; if these columns are deferred or otherwise
    not loaded on any of the parent objects in the collection, the loader falls back
    to the JOIN method.
  id: totrans-3107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[#4340](https://www.sqlalchemy.org/trac/ticket/4340)中应用的选择加载优化，即在不需要JOIN即可急切加载相关项目时，现在也应用于多对一关系，因此只查询相关表以进行简单的连接条件。在这种情况下，相关项目是基于父对象上的外键列的值进行查询；如果这些列被延迟加载或其他方式未加载到集合中的任何父对象上，则加载器将退回到JOIN方法。
- en: 'References: [#4775](https://www.sqlalchemy.org/trac/ticket/4775)'
  id: totrans-3108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4775](https://www.sqlalchemy.org/trac/ticket/4775)
- en: '**[orm] [bug]**'
  id: totrans-3109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4365](https://www.sqlalchemy.org/trac/ticket/4365)
    where a join from an entity to itself without using aliases no longer raises an
    informative error message, instead failing on an assertion. The informative error
    condition has been restored.
  id: totrans-3110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4365](https://www.sqlalchemy.org/trac/ticket/4365)引起的回归，即从一个实体到自身的连接没有使用别名时不再引发信息性错误消息，而是在断言失败。已恢复信息性错误条件。
- en: 'References: [#4773](https://www.sqlalchemy.org/trac/ticket/4773)'
  id: totrans-3111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4773](https://www.sqlalchemy.org/trac/ticket/4773)
- en: '**[orm] [bug]**'
  id: totrans-3112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an issue where the `_ORMJoin.join()` method, which is a not-internally-used
    ORM-level method that exposes what is normally an internal process of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), did not propagate the `full` and `outerjoin` keyword
    arguments correctly. Pull request courtesy Denis Kataev.
  id: totrans-3113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即`_ORMJoin.join()`方法，这是一个未在内部使用的ORM级方法，公开了通常是内部过程的[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")，未正确传播`full`和`outerjoin`关键字参数。感谢Denis Kataev提供的拉取请求。
- en: 'References: [#4713](https://www.sqlalchemy.org/trac/ticket/4713)'
  id: totrans-3114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4713](https://www.sqlalchemy.org/trac/ticket/4713)
- en: '**[orm] [bug]**'
  id: totrans-3115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a many-to-one relationship that specified `uselist=True` would
    fail to update correctly during a primary key change where a related column needs
    to change.
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即指定了`uselist=True`的多对一关系在主键更改时无法正确更新，需要更改相关列。
- en: 'References: [#4772](https://www.sqlalchemy.org/trac/ticket/4772)'
  id: totrans-3117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4772](https://www.sqlalchemy.org/trac/ticket/4772)
- en: '**[orm] [bug]**'
  id: totrans-3118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the detection for many-to-one or one-to-one use with a “dynamic”
    relationship, which is an invalid configuration, would fail to raise if the relationship
    were configured with `uselist=True`. The current fix is that it warns, instead
    of raises, as this would otherwise be backwards incompatible, however in a future
    release it will be a raise.
  id: totrans-3119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即检测到“动态”关系与“uselist=True”配置的多对一或一对一使用是无效配置时，如果关系配置为`uselist=True`，则不会引发错误。当前的修复是发出警告，而不是引发错误，因为否则将是向后不兼容的，但在将来的版本中将引发错误。
- en: 'References: [#4772](https://www.sqlalchemy.org/trac/ticket/4772)'
  id: totrans-3120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4772](https://www.sqlalchemy.org/trac/ticket/4772)
- en: '**[orm] [bug]**'
  id: totrans-3121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a synonym created against a mapped attribute that does not exist
    yet, as is the case when it refers to backref before mappers are configured, would
    raise recursion errors when trying to test for attributes on it which ultimately
    don’t exist (as occurs when the classes are run through Sphinx autodoc), as the
    unconfigured state of the synonym would put it into an attribute not found loop.
  id: totrans-3122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即针对尚不存在的映射属性创建的同义词，例如在它引用 backref 之前，当尝试测试其上的属性时会引发递归错误，最终这些属性不存在（当类通过
    Sphinx autodoc 运行时会发生），因为同义词的未配置状态会将其置于找不到属性的循环中。
- en: 'References: [#4767](https://www.sqlalchemy.org/trac/ticket/4767)'
  id: totrans-3123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4767](https://www.sqlalchemy.org/trac/ticket/4767)
- en: engine
  id: totrans-3124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-3125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where using reflection function such as [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object that had execution options applied to it would
    fail, as the resulting `OptionEngine` proxy object failed to include a `.engine`
    attribute used within the reflection routines.
  id: totrans-3126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即使用反射函数（如 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")）与应用了执行选项的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象一起使用时会失败，因为生成的 `OptionEngine` 代理对象未包含在反射例程中使用的 `.engine`
    属性。
- en: 'References: [#4754](https://www.sqlalchemy.org/trac/ticket/4754)'
  id: totrans-3127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4754](https://www.sqlalchemy.org/trac/ticket/4754)
- en: sql
  id: totrans-3128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the initialization for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") to minimize how often it invokes the `.__members__` attribute
    of a given PEP-435 enumeration object, to suit the case where this attribute is
    expensive to invoke, as is the case for some popular third party enumeration libraries.
  id: totrans-3130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    的初始化，以最大程度地减少调用给定 PEP-435 枚举对象的 `.__members__` 属性的频率，以适应某些流行的第三方枚举库中调用此属性的昂贵情况。
- en: 'References: [#4758](https://www.sqlalchemy.org/trac/ticket/4758)'
  id: totrans-3131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4758](https://www.sqlalchemy.org/trac/ticket/4758)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-3132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed issue where the [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") construct in combination with [`FunctionElement.filter()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter") would not produce the correct
    operator precedence in combination with the array index operator.
  id: totrans-3133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即 [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") 结构与 [`FunctionElement.filter()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter") 结合使用时，与数组索引运算符结合时不会产生正确的运算符优先级。
- en: 'References: [#4760](https://www.sqlalchemy.org/trac/ticket/4760)'
  id: totrans-3134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4760](https://www.sqlalchemy.org/trac/ticket/4760)
- en: '**[sql] [bug]**'
  id: totrans-3135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed an unlikely issue where the “corresponding column” routine for unions
    and other `_selectable.CompoundSelect` objects could return the wrong column in
    some overlapping column situations, thus potentially impacting some ORM operations
    when set operations are in use, if the underlying [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs were used previously in other similar
    kinds of routines, due to a cached value not being cleared.
  id: totrans-3136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个不太可能的问题，即对于联合和其他 `_selectable.CompoundSelect` 对象的“对应列”例程在某些重叠列情况下可能返回错误的列，从而在使用集合操作时可能影响一些
    ORM 操作，如果之前在其他类似的例程中使用了底层的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，由于缓存值未被清除。
- en: 'References: [#4747](https://www.sqlalchemy.org/trac/ticket/4747)'
  id: totrans-3137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4747](https://www.sqlalchemy.org/trac/ticket/4747)
- en: postgresql
  id: totrans-3138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for reflection of indexes on PostgreSQL partitioned tables, which
    was added to PostgreSQL as of version 11.
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL 分区表上索引的反射支持，这在 PostgreSQL 11 版本中添加。
- en: 'References: [#4771](https://www.sqlalchemy.org/trac/ticket/4771)'
  id: totrans-3141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4771](https://www.sqlalchemy.org/trac/ticket/4771)
- en: '**[postgresql] [usecase]**'
  id: totrans-3142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for multidimensional Postgresql array literals via nesting the
    [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    object within another one. The multidimensional array type is detected automatically.
  id: totrans-3143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过将 [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 对象嵌套在另一个对象中，增加了对多维 Postgresql 数组文字的支持。多维数组类型会自动检测���
- en: See also
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")'
  id: totrans-3145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")'
- en: 'References: [#4756](https://www.sqlalchemy.org/trac/ticket/4756)'
  id: totrans-3146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4756](https://www.sqlalchemy.org/trac/ticket/4756)
- en: mysql
  id: totrans-3147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where the special logic to render “NULL” for the [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype when `nullable=True` would not work if
    the column’s datatype were a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") or a [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"). The logic now ensures that it unwraps down to the
    original [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    so that this special case NULL keyword is correctly rendered when requested.
  id: totrans-3149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即当列的数据类型为 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 或 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 时，为 `nullable=True` 渲染“NULL”特殊逻辑不起作用。现在的逻辑确保将其解包到原始的
    [`TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")，以便在请求时正确呈现此特殊情况的
    NULL 关键字。
- en: 'References: [#4743](https://www.sqlalchemy.org/trac/ticket/4743)'
  id: totrans-3150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4743](https://www.sqlalchemy.org/trac/ticket/4743)
- en: '**[mysql] [bug]**'
  id: totrans-3151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Enhanced MySQL/MariaDB version string parsing to accommodate for exotic MariaDB
    version strings where the “MariaDB” word is embedded among other alphanumeric
    characters such as “MariaDBV1”. This detection is critical in order to correctly
    accommodate for API features that have split between MySQL and MariaDB such as
    the “transaction_isolation” system variable.
  id: totrans-3152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了对 MySQL/MariaDB 版本字符串的解析，以适应奇异的 MariaDB 版本字符串，其中“MariaDB” 一词嵌入在其他字母数字字符中，如“MariaDBV1”。这种检测对于正确适应已在
    MySQL 和 MariaDB 之间拆分的 API 功能至关重要，例如“transaction_isolation” 系统变量。
- en: 'References: [#4624](https://www.sqlalchemy.org/trac/ticket/4624)'
  id: totrans-3153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4624](https://www.sqlalchemy.org/trac/ticket/4624)
- en: sqlite
  id: totrans-3154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-3155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Added support for composite (tuple) IN operators with SQLite, by rendering the
    VALUES keyword for this backend. As other backends such as DB2 are known to use
    the same syntax, the syntax is enabled in the base compiler using a dialect-level
    flag `tuple_in_values`. The change also includes support for “empty IN tuple”
    expressions for SQLite when using “in_()” between a tuple value and an empty set.
  id: totrans-3156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 SQLite 的复合（元组）IN 操作符的支持，通过在此后端渲染 VALUES 关键字来实现。由于其他后端（如 DB2）已知使用相同的语法，因此在基本编译器中使用方言级标志
    `tuple_in_values` 启用了该语法。该更改还包括在使用“in_()”时支持 SQLite 的“空 IN 元组”表达式，介于元组值和空集之间。
- en: 'References: [#4766](https://www.sqlalchemy.org/trac/ticket/4766)'
  id: totrans-3157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4766](https://www.sqlalchemy.org/trac/ticket/4766)
- en: mssql
  id: totrans-3158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Ensured that the queries used to reflect indexes and view definitions will explicitly
    CAST string parameters into NVARCHAR, as many SQL Server drivers frequently treat
    string values, particularly those with non-ascii characters or larger string values,
    as TEXT which often don’t compare correctly against VARCHAR characters in SQL
    Server’s information schema tables for some reason. These CAST operations already
    take place for reflection queries against SQL Server `information_schema.` tables
    but were missing from three additional queries that are against `sys.` tables.
  id: totrans-3160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保用于反射索引和视图定义的查询将字符串参数明确转换为 NVARCHAR，因为许多 SQL Server 驱动程序经常将字符串值（特别是具有非 ASCII
    字符或较大字符串值的值）视为 TEXT，这些值通常无法与 SQL Server 的信息模式表中的 VARCHAR 字符正确比较。这些 CAST 操作已经在反射查询针对
    SQL Server `information_schema.` 表时发生，但缺少了针对针对 `sys.` 表的另外三个查询。
- en: 'References: [#4745](https://www.sqlalchemy.org/trac/ticket/4745)'
  id: totrans-3161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4745](https://www.sqlalchemy.org/trac/ticket/4745)
- en: 1.3.5
  id: totrans-3162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.5
- en: 'Released: June 17, 2019'
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年6月17日
- en: orm
  id: totrans-3164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a series of related bugs regarding joined table inheritance more than
    two levels deep, in conjunction with modification to primary key values, where
    those primary key columns are also linked together in a foreign key relationship
    as is typical for joined table inheritance. The intermediary table in a three-level
    inheritance hierarchy will now get its UPDATE if only the primary key value has
    changed and passive_updates=False (e.g. foreign key constraints not being enforced),
    whereas before it would be skipped; similarly, with passive_updates=True (e.g.
    ON UPDATE CASCADE in effect), the third-level table will not receive an UPDATE
    statement as was the case earlier which would fail since CASCADE already modified
    it. In a related issue, a relationship linked to a three-level inheritance hierarchy
    on the primary key of an intermediary table of a joined-inheritance hierarchy
    will also correctly have its foreign key column updated when the parent object’s
    primary key is modified, even if that parent object is a subclass of the linked
    parent class, whereas before these classes would not be counted.
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列关于连接表继承超过两级深度的相关错误，与修改主键值结合使用，其中这些主键列也以外键关系链接在一起，这是连接表继承的典型情况。在三级继承层次结构中，中间表现在将获得其UPDATE，仅在主键值更改且passive_updates=False（例如，不执行外键约束）时，而以前会被跳过；类似地，如果passive_updates=True（例如，ON
    UPDATE CASCADE生效），则第三级表将不会收到UPDATE语句，这与早期的情况相同，因为CASCADE已经修改了它。在相关问题中，与连接继承层次结构中间表的主键相关联的关系，在父对象的主键被修改时也将正确地更新其外键列，即使该父对象是链接父类的子类，而在此之前，这些类将不会被计算。
- en: 'References: [#4723](https://www.sqlalchemy.org/trac/ticket/4723)'
  id: totrans-3167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4723](https://www.sqlalchemy.org/trac/ticket/4723)
- en: '**[orm] [bug]**'
  id: totrans-3168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") accessor would return an entry for
    the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    itself under the declarative `__mapper__` key, when this is not a descriptor.
    The `.is_attribute` flag that’s present on all [`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") objects is now consulted, which has also been
    modified to be `True` for an association proxy, as it was erroneously set to False
    for this object.
  id: totrans-3169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")访问器的错误，当此项不是描述符时，它会在声明性`__mapper__`键下返回一个条目。现在将考虑到所有[`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")对象上存在的`.is_attribute`标志，这也已被修改为对于关联代理是`True`，因为对于此对象错误地设置为False。
- en: 'References: [#4729](https://www.sqlalchemy.org/trac/ticket/4729)'
  id: totrans-3170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4729](https://www.sqlalchemy.org/trac/ticket/4729)
- en: '**[orm] [bug]**'
  id: totrans-3171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") where the `aliased=True` flag would not properly
    apply clause adaptation to filter criteria, if a previous join were made to the
    same entity. This is because the adapters were placed in the wrong order. The
    order has been reversed so that the adapter for the most recent `aliased=True`
    call takes precedence as was the case in 1.2 and earlier. This broke the “elementtree”
    examples among other things.
  id: totrans-3172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")中的回归问题，其中`aliased=True`标志未能正确地应用于过滤条件的子句适配，如果之前对同一实体进行了连接。这是因为适配器放置顺序错误。已经将顺序反转，以使最近的`aliased=True`调用的适配器优先，就像1.2及更早版本一样。这破坏了“elementtree”示例等内容。
- en: 'References: [#4704](https://www.sqlalchemy.org/trac/ticket/4704)'
  id: totrans-3173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4704](https://www.sqlalchemy.org/trac/ticket/4704)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-3174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: Replaced the Python compatibility routines for `getfullargspec()` with a fully
    vendored version from Python 3.3\. Originally, Python was emitting deprecation
    warnings for this function in Python 3.8 alphas. While this change was reverted,
    it was observed that Python 3 implementations for `getfullargspec()` are an order
    of magnitude slower as of the 3.4 series where it was rewritten against `Signature`.
    While Python plans to improve upon this situation, SQLAlchemy projects for now
    are using a simple replacement to avoid any future issues.
  id: totrans-3175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用 Python 3.3 中的完全供应版本替换了 `getfullargspec()` 的 Python 兼容性例程。最初，Python 在 Python
    3.8 alpha 版本中为此函数发出了弃用警告。尽管已回滚此更改，但观察到 Python 3 实现的 `getfullargspec()` 在 3.4 系列中被重写为
    `Signature` 后变得慢了一个数量级。虽然 Python 打算改进这种情况，但 SQLAlchemy 项目目前使用简单的替代方案来避免任何未来问题。
- en: 'References: [#4674](https://www.sqlalchemy.org/trac/ticket/4674)'
  id: totrans-3176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4674](https://www.sqlalchemy.org/trac/ticket/4674)
- en: '**[orm] [bug]**'
  id: totrans-3177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Reworked the attribute mechanics used by [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") to no longer rely upon calling `__getattribute__`
    on the MRO of the wrapped class, and to instead resolve the attribute normally
    on the wrapped class using getattr(), and then unwrap/adapt that. This allows
    a greater range of attribute styles on the mapped class including special `__getattr__()`
    schemes; but it also makes the code simpler and more resilient in general.
  id: totrans-3178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了 [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 使用的属性机制，不再依赖于在包装类的 MRO 上调用 `__getattribute__`，而是在包装类上正常解析属性使用
    getattr()，然后解包/适应它。这允许在映射类上使用更广泛的属性样式，包括特殊的 `__getattr__()` 方案；但它也使代码更简单、更具弹性。
- en: 'References: [#4694](https://www.sqlalchemy.org/trac/ticket/4694)'
  id: totrans-3179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4694](https://www.sqlalchemy.org/trac/ticket/4694)
- en: sql
  id: totrans-3180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Addressed a range of quoting issues originating from the use of the `literal_column`()`
    construct. When this construct is “proxied” through a subquery and referred to
    by a label matching its text, the label does not have quoting rules applied to
    it, even if the string in the [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") was set up using a `quoted_name`` construct.
    Not applying quoting to the text of the [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") is a bug because this text is strictly a SQL
    identifier name and not a SQL expression, and the string should not have quotes
    embedded into it already unlike the [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") which it may be applied towards. The
    existing behavior of a non-labeled [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") being propagated as is on the outside
    of a subquery is maintained in order to help with manual quoting schemes, although
    it’s not clear if valid SQL can be generated for such a construct in any case.
  id: totrans-3182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决了因使用 `literal_column`()` 构造而导致的一系列引号问题。当这个构造通过子查询“代理”并由其文本匹配的标签引用时，即使字符串在
    [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    中是使用 `quoted_name`` 构造设置的，该标签也不会应用引号规则。不将引号应用于 [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") 的文本是一个错误，因为该文本严格地说是 SQL 标识符名称，而不是 SQL 表达式，该字符串不应该已经嵌入引号，不像
    [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 可能会应用于。维护了一个未标记的 [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 在子查询外部传播的现有行为，以帮助手动引号方案，尽管目前尚不清楚是否可以为这种情况生成有效的
    SQL。
- en: 'References: [#4730](https://www.sqlalchemy.org/trac/ticket/4730)'
  id: totrans-3183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4730](https://www.sqlalchemy.org/trac/ticket/4730)
- en: postgresql
  id: totrans-3184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for column sorting flags when reflecting indexes for PostgreSQL,
    including ASC, DESC, NULLSFIRST, NULLSLAST. Also adds this facility to the reflection
    system in general which can be applied to other dialects in future releases. Pull
    request courtesy Eli Collins.
  id: totrans-3186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在为 PostgreSQL 反射索引时添加了列排序标志的支持，包括 ASC、DESC、NULLSFIRST、NULLSLAST。还将此功能添加到了通用的反射系统中，在未来的发布中可以应用于其他方言。拉取请求由
    Eli Collins 提供。
- en: 'References: [#4717](https://www.sqlalchemy.org/trac/ticket/4717)'
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4717](https://www.sqlalchemy.org/trac/ticket/4717)
- en: '**[postgresql] [bug]**'
  id: totrans-3188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect could not correctly reflect an ENUM datatype
    that has no members, returning a list with `None` for the `get_enums()` call and
    raising a TypeError when reflecting a column which has such a datatype. The inspection
    now returns an empty list.
  id: totrans-3189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言无法正确反映没有成员的ENUM数据类型的错误，对于`get_enums()`调用返回一个带有`None`的列表，并在反映具有此类数据类型的列时引发TypeError。现在检查返回一个空列表。
- en: 'References: [#4701](https://www.sqlalchemy.org/trac/ticket/4701)'
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4701](https://www.sqlalchemy.org/trac/ticket/4701)
- en: mysql
  id: totrans-3191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where MySQL ON DUPLICATE KEY UPDATE would not accommodate setting
    a column to the value NULL. Pull request courtesy Lukáš Banič.
  id: totrans-3193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL ON DUPLICATE KEY UPDATE无法将列设置为值NULL的错误。感谢Lukáš Banič的拉取请求。
- en: 'References: [#4715](https://www.sqlalchemy.org/trac/ticket/4715)'
  id: totrans-3194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4715](https://www.sqlalchemy.org/trac/ticket/4715)
- en: orm
  id: totrans-3195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a series of related bugs regarding joined table inheritance more than
    two levels deep, in conjunction with modification to primary key values, where
    those primary key columns are also linked together in a foreign key relationship
    as is typical for joined table inheritance. The intermediary table in a three-level
    inheritance hierarchy will now get its UPDATE if only the primary key value has
    changed and passive_updates=False (e.g. foreign key constraints not being enforced),
    whereas before it would be skipped; similarly, with passive_updates=True (e.g.
    ON UPDATE CASCADE in effect), the third-level table will not receive an UPDATE
    statement as was the case earlier which would fail since CASCADE already modified
    it. In a related issue, a relationship linked to a three-level inheritance hierarchy
    on the primary key of an intermediary table of a joined-inheritance hierarchy
    will also correctly have its foreign key column updated when the parent object’s
    primary key is modified, even if that parent object is a subclass of the linked
    parent class, whereas before these classes would not be counted.
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于联接表继承超过两层深度的一系列相关错误，与修改主键值相结合，其中这些主键列也以外键关系相互链接，这在联接表继承中是典型的。在三级继承层次结构中的中间表现在将获得其UPDATE，仅当主键值发生变化且passive_updates=False（例如，外键约束未被执行）时；而以前会被跳过；类似地，当passive_updates=True（例如，ON
    UPDATE CASCADE生效）时，第三级表将不会收到UPDATE语句，这与以前的情况相同，因为CASCADE已经修改了它。在一个相关问题中，与联接继承层次结构的中间表的主键相关联的关系也将在父对象的主键被修改时正确地更新其外键列，即使该父对象是链接父类的子类，而以前这些类不会被计算。
- en: 'References: [#4723](https://www.sqlalchemy.org/trac/ticket/4723)'
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4723](https://www.sqlalchemy.org/trac/ticket/4723)
- en: '**[orm] [bug]**'
  id: totrans-3199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") accessor would return an entry for
    the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    itself under the declarative `__mapper__` key, when this is not a descriptor.
    The `.is_attribute` flag that’s present on all [`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") objects is now consulted, which has also been
    modified to be `True` for an association proxy, as it was erroneously set to False
    for this object.
  id: totrans-3200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")访问器会在声明性`__mapper__`键下返回一个关于[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")本身的条目的错误，当这不是一个描述符时。现在将查询所有[`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")对象上存在的`.is_attribute`标志，这也已被修改为对于关联代理为`True`，因为对于此对象错误地设置为False。
- en: 'References: [#4729](https://www.sqlalchemy.org/trac/ticket/4729)'
  id: totrans-3201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4729](https://www.sqlalchemy.org/trac/ticket/4729)
- en: '**[orm] [bug]**'
  id: totrans-3202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") where the `aliased=True` flag would not properly
    apply clause adaptation to filter criteria, if a previous join were made to the
    same entity. This is because the adapters were placed in the wrong order. The
    order has been reversed so that the adapter for the most recent `aliased=True`
    call takes precedence as was the case in 1.2 and earlier. This broke the “elementtree”
    examples among other things.
  id: totrans-3203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")中的回归问题，其中`aliased=True`标志未能正确应用于过滤条件的子句适配，如果之前对相同实体进行了联接。这是因为适配器的顺序放置错误。现已将顺序反转，以便最近的`aliased=True`调用的适配器优先级较高，就像在1.2及之前的情况一样。这破坏了“elementtree”示例等其他内容。
- en: 'References: [#4704](https://www.sqlalchemy.org/trac/ticket/4704)'
  id: totrans-3204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4704](https://www.sqlalchemy.org/trac/ticket/4704)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-3205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: Replaced the Python compatibility routines for `getfullargspec()` with a fully
    vendored version from Python 3.3\. Originally, Python was emitting deprecation
    warnings for this function in Python 3.8 alphas. While this change was reverted,
    it was observed that Python 3 implementations for `getfullargspec()` are an order
    of magnitude slower as of the 3.4 series where it was rewritten against `Signature`.
    While Python plans to improve upon this situation, SQLAlchemy projects for now
    are using a simple replacement to avoid any future issues.
  id: totrans-3206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用Python 3.3完全供应的版本替换了`getfullargspec()`的Python兼容性例程。最初，Python在Python 3.8 alpha版本中对此函数发出了弃用警告。尽管此更改已被撤销，但观察到自Python
    3.4系列以来，用于`getfullargspec()`的Python 3实现慢了一个数量级，因为它是针对`Signature`重写的。虽然Python计划改进这种情况，但SQLAlchemy项目目前正在使用简单的替换来避免任何未来的问题。
- en: 'References: [#4674](https://www.sqlalchemy.org/trac/ticket/4674)'
  id: totrans-3207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4674](https://www.sqlalchemy.org/trac/ticket/4674)
- en: '**[orm] [bug]**'
  id: totrans-3208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Reworked the attribute mechanics used by [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") to no longer rely upon calling `__getattribute__`
    on the MRO of the wrapped class, and to instead resolve the attribute normally
    on the wrapped class using getattr(), and then unwrap/adapt that. This allows
    a greater range of attribute styles on the mapped class including special `__getattr__()`
    schemes; but it also makes the code simpler and more resilient in general.
  id: totrans-3209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")使用的属性机制，不再依赖于在包装类的MRO上调用`__getattribute__`，而是在包装类上使用getattr()正常解析属性，然后解包/适配。这允许映射类上的更广泛的属性样式，包括特殊的`__getattr__()`方案；但它也使代码在一般情况下更简单和更具弹性。
- en: 'References: [#4694](https://www.sqlalchemy.org/trac/ticket/4694)'
  id: totrans-3210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4694](https://www.sqlalchemy.org/trac/ticket/4694)
- en: sql
  id: totrans-3211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Addressed a range of quoting issues originating from the use of the `literal_column`()`
    construct. When this construct is “proxied” through a subquery and referred to
    by a label matching its text, the label does not have quoting rules applied to
    it, even if the string in the [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") was set up using a `quoted_name`` construct.
    Not applying quoting to the text of the [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") is a bug because this text is strictly a SQL
    identifier name and not a SQL expression, and the string should not have quotes
    embedded into it already unlike the [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") which it may be applied towards. The
    existing behavior of a non-labeled [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") being propagated as is on the outside
    of a subquery is maintained in order to help with manual quoting schemes, although
    it’s not clear if valid SQL can be generated for such a construct in any case.
  id: totrans-3213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决了由于使用`literal_column`()`构造引起的一系列引号问题。当此构造通过子查询“代理”并由与其文本匹配的标签引用时，即使在使用`quoted_name``构造设置[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")的字符串时，标签也不会应用引号规则。不对[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")的文本应用引号是一个bug，因为此文本严格来说是SQL标识符名称，而不是SQL表达式，该字符串不应该已经包含引号，不像可能应用于的[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")。保留了非标记的[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")在子查询外部传播的现有行为，以帮助手动引号方案，尽管目前尚不清楚是否可以为这种构造生成有效的SQL。
- en: 'References: [#4730](https://www.sqlalchemy.org/trac/ticket/4730)'
  id: totrans-3214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4730](https://www.sqlalchemy.org/trac/ticket/4730)
- en: postgresql
  id: totrans-3215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for column sorting flags when reflecting indexes for PostgreSQL,
    including ASC, DESC, NULLSFIRST, NULLSLAST. Also adds this facility to the reflection
    system in general which can be applied to other dialects in future releases. Pull
    request courtesy Eli Collins.
  id: totrans-3217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反映PostgreSQL索引时，添加了对列排序标志的支持，包括ASC、DESC、NULLSFIRST、NULLSLAST。还将此功能添加到反射系统中，以便在将来的版本中应用于其他方言。感谢Eli
    Collins提供的拉取请求。
- en: 'References: [#4717](https://www.sqlalchemy.org/trac/ticket/4717)'
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4717](https://www.sqlalchemy.org/trac/ticket/4717)
- en: '**[postgresql] [bug]**'
  id: totrans-3219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect could not correctly reflect an ENUM datatype
    that has no members, returning a list with `None` for the `get_enums()` call and
    raising a TypeError when reflecting a column which has such a datatype. The inspection
    now returns an empty list.
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即PostgreSQL方言无法正确反映没有成员的ENUM数据类型，对于`get_enums()`调用返回一个带有`None`的列表，并在反映具有此数据类型的列时引发TypeError。现在检查返回一个空列表。
- en: 'References: [#4701](https://www.sqlalchemy.org/trac/ticket/4701)'
  id: totrans-3221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4701](https://www.sqlalchemy.org/trac/ticket/4701)
- en: mysql
  id: totrans-3222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where MySQL ON DUPLICATE KEY UPDATE would not accommodate setting
    a column to the value NULL. Pull request courtesy Lukáš Banič.
  id: totrans-3224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即MySQL的ON DUPLICATE KEY UPDATE无法将列设置为NULL值。感谢Lukáš Banič提供的拉取请求。
- en: 'References: [#4715](https://www.sqlalchemy.org/trac/ticket/4715)'
  id: totrans-3225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4715](https://www.sqlalchemy.org/trac/ticket/4715)
- en: 1.3.4
  id: totrans-3226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.4
- en: 'Released: May 27, 2019'
  id: totrans-3227
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年5月27日
- en: orm
  id: totrans-3228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`AttributeEvents.active_history`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.active_history
    "sqlalchemy.orm.AttributeEvents") flag would not be set for an event listener
    that propagated to a subclass via the [`AttributeEvents.propagate`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents") flag. This bug has been present for the full
    span of the [`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents") system.
  id: totrans-3230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`AttributeEvents.active_history`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.active_history
    "sqlalchemy.orm.AttributeEvents")标志未设置为通过[`AttributeEvents.propagate`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents")标志传播到子类的事件侦听器的问题。这个bug存在于整个[`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents")系统的整个时间段。
- en: 'References: [#4695](https://www.sqlalchemy.org/trac/ticket/4695)'
  id: totrans-3231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4695](https://www.sqlalchemy.org/trac/ticket/4695)
- en: '**[orm] [bug]**'
  id: totrans-3232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where new association proxy system was still not proxying hybrid
    attributes when they made use of the `@hybrid_property.expression` decorator to
    return an alternate SQL expression, or when the hybrid returned an arbitrary [`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"), at the expression level. This involved further
    generalization of the heuristics used to detect the type of object being proxied
    at the level of [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), to better detect if the descriptor ultimately
    serves mapped classes or column expressions.
  id: totrans-3233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的关联代理系统仍然不代理混合属性的回归，当它们使用`@hybrid_property.expression`装饰器返回另一个 SQL 表达式，或者当混合返回一个任意的[`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")时，涉及到进一步通用化的启发式，用于检测在[`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")级别检测被代理对象的类型，以更好地检测描述符最终是否服务于映射类或列表达式。
- en: 'References: [#4690](https://www.sqlalchemy.org/trac/ticket/4690)'
  id: totrans-3234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4690](https://www.sqlalchemy.org/trac/ticket/4690)
- en: '**[orm] [bug]**'
  id: totrans-3235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Applied the mapper “configure mutex” against the declarative class mapping process,
    to guard against the race which can occur if mappers are used while dynamic module
    import schemes are still in the process of configuring mappers for related classes.
    This does not guard against all possible race conditions, such as if the concurrent
    import has not yet encountered the dependent classes as of yet, however it guards
    against as much as possible within the SQLAlchemy declarative process.
  id: totrans-3236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对声明性类映射过程应用了“配置互斥体”映射器，以防止在动态模块导入方案仍在为相关类配置映射器的过程中使用映射器时可能发生的竞态。这并不能防止所有可能的竞态条件，比如并发导入尚未遇到相关类的情况，但它可以在
    SQLAlchemy 声明性过程中尽可能地防范。
- en: 'References: [#4686](https://www.sqlalchemy.org/trac/ticket/4686)'
  id: totrans-3237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4686](https://www.sqlalchemy.org/trac/ticket/4686)
- en: '**[orm] [bug]**'
  id: totrans-3238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is now emitted for the case where a transient object is being merged
    into the session with [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") when that object is already transient in the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This warns for the case where the object would normally
    be double-inserted.
  id: totrans-3239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将一个瞬态对象与[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")一起合并到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，现在会发出警告，当对象在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中已经是瞬态时。这种情况下会发出警告，表示对象通常会被双重插入。
- en: 'References: [#4647](https://www.sqlalchemy.org/trac/ticket/4647)'
  id: totrans-3240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4647](https://www.sqlalchemy.org/trac/ticket/4647)
- en: '**[orm] [bug]**'
  id: totrans-3241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in new relationship m2o comparison logic first introduced at
    [Improvement to the behavior of many-to-one query expressions](migration_13.html#change-4359)
    when comparing to an attribute that is persisted as NULL and is in an un-fetched
    state in the mapped instance. Since the attribute has no explicit default, it
    needs to default to NULL when accessed in a persistent setting.
  id: totrans-3242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在新的关系 m2o 比较逻辑中的回归，该逻辑最初在 [Improvement to the behavior of many-to-one query
    expressions](migration_13.html#change-4359) 中引入，当与持久化为 NULL 并且在映射实例中处于未获取状态的属性进行比较时。由于该属性没有显式默认值，在持久化设置中访问时需要默认为
    NULL。
- en: 'References: [#4676](https://www.sqlalchemy.org/trac/ticket/4676)'
  id: totrans-3243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4676](https://www.sqlalchemy.org/trac/ticket/4676)
- en: engine
  id: totrans-3244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-3245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [postgresql]**'
- en: Moved the “rollback” which occurs during dialect initialization so that it occurs
    after additional dialect-specific initialize steps, in particular those of the
    psycopg2 dialect which would inadvertently leave transactional state on the first
    new connection, which could interfere with some psycopg2-specific APIs which require
    that no transaction is started. Pull request courtesy Matthew Wilkes.
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将在方言初始化期间发生的“回滚”移动到在执行其他方言特定初始化步骤之后发生，特别是 psycopg2 方言的步骤，该步骤无意中会在第一个新连接上留下事务状态，这可能会干扰某些需要确保没有启动事务的
    psycopg2 特定 API。感谢 Matthew Wilkes 提供的拉取请求。
- en: 'References: [#4663](https://www.sqlalchemy.org/trac/ticket/4663)'
  id: totrans-3247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4663](https://www.sqlalchemy.org/trac/ticket/4663)
- en: sql
  id: totrans-3248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed that the [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") class was inadvertently registering
    itself as one of the named functions. Pull request courtesy Adrien Berchet.
  id: totrans-3250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")类意外地注册自身为命名函数的问题。感谢Adrien Berchet提供的拉取请求。
- en: 'References: [#4653](https://www.sqlalchemy.org/trac/ticket/4653)'
  id: totrans-3251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4653](https://www.sqlalchemy.org/trac/ticket/4653)
- en: '**[sql] [bug]**'
  id: totrans-3252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where double negation of a boolean column wouldn’t reset the “NOT”
    operator.
  id: totrans-3253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了布尔列的双重否定不会重置“NOT”运算符的问题。
- en: 'References: [#4618](https://www.sqlalchemy.org/trac/ticket/4618)'
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4618](https://www.sqlalchemy.org/trac/ticket/4618)
- en: '**[sql] [bug]**'
  id: totrans-3255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") namespace is being migrated so that
    function names are looked up in a case-insensitive manner, as SQL functions do
    not collide on case sensitive differences nor is this something which would occur
    with user-defined functions or stored procedures. Lookups for functions declared
    with [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") now use a case insensitive scheme,
    however a deprecation case is supported which allows two or more [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") objects with the same name of different
    cases to exist, which will cause case sensitive lookups to occur for that particular
    name, while emitting a warning at function registration time. Thanks to Adrien
    Berchet for a lot of work on this complicated feature.
  id: totrans-3256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")命名空间正在迁移，以便以不区分大小写的方式查找函数名称，因为SQL函数在区分大小写的差异上不会发生冲突，用户定义的函数或存储过程也不会发生这种情况。现在使用[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")声明的函数查找采用不区分大小写的方案，但支持一个弃用案例，允许存在两个或更多具有不同大小写的相同名称的[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")对象，这将导致对该特定名称进行区分大小写查找，同时在函数注册时发出警告。感谢Adrien
    Berchet在这个复杂功能上的大量工作。'
- en: 'References: [#4569](https://www.sqlalchemy.org/trac/ticket/4569)'
  id: totrans-3257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4569](https://www.sqlalchemy.org/trac/ticket/4569)
- en: postgresql
  id: totrans-3258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [orm]**'
  id: totrans-3259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [orm]**'
- en: Fixed an issue where the “number of rows matched” warning would emit even if
    the dialect reported “supports_sane_multi_rowcount=False”, as is the case for
    psycogp2 with `use_batch_mode=True` and others.
  id: totrans-3260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即“匹配的行数”警告即使方言报告“supports_sane_multi_rowcount=False”也会发出，例如对于psycogp2使用`use_batch_mode=True`等情况。
- en: 'References: [#4661](https://www.sqlalchemy.org/trac/ticket/4661)'
  id: totrans-3261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4661](https://www.sqlalchemy.org/trac/ticket/4661)
- en: mysql
  id: totrans-3262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for DROP CHECK constraint which is required by MySQL 8.0.16 to
    drop a CHECK constraint; MariaDB supports plain DROP CONSTRAINT. The logic distinguishes
    between the two syntaxes by checking the server version string for MariaDB presence.
    Alembic migrations has already worked around this issue by implementing its own
    DROP for MySQL / MariaDB CHECK constraints, however this change implements it
    straight in Core so that its available for general use. Pull request courtesy
    Hannes Hansen.
  id: totrans-3264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对DROP CHECK约束的支持，MySQL 8.0.16需要此约束才能删除CHECK约束；MariaDB支持普通的DROP CONSTRAINT。该逻辑通过检查服务器版本字符串是否存在MariaDB来区分这两种语法。Alembic迁移已经解决了这个问题，通过在MySQL
    / MariaDB CHECK约束上实现自己的DROP，但这个改变直接在Core中实现，以便普遍使用。感谢Hannes Hansen提供的拉取请求。
- en: 'References: [#4650](https://www.sqlalchemy.org/trac/ticket/4650)'
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4650](https://www.sqlalchemy.org/trac/ticket/4650)
- en: mssql
  id: totrans-3266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-3267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added support for SQL Server filtered indexes, via the `mssql_where` parameter
    which works similarly to that of the `postgresql_where` index function in the
    PostgreSQL dialect.
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对SQL Server过滤索引的支持，通过`mssql_where`参数实现，其工作方式类似于PostgreSQL方言中的`postgresql_where`索引函数。
- en: See also
  id: totrans-3269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Filtered Indexes](../dialects/mssql.html#mssql-index-where)'
  id: totrans-3270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[过滤索引](../dialects/mssql.html#mssql-index-where)'
- en: 'References: [#4657](https://www.sqlalchemy.org/trac/ticket/4657)'
  id: totrans-3271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4657](https://www.sqlalchemy.org/trac/ticket/4657)
- en: '**[mssql] [bug]**'
  id: totrans-3272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added error code 20047 to “is_disconnect” for pymssql. Pull request courtesy
    Jon Schuff.
  id: totrans-3273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pymssql添加了错误代码20047到“is_disconnect”。感谢Jon Schuff提供的拉取请求。
- en: 'References: [#4680](https://www.sqlalchemy.org/trac/ticket/4680)'
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4680](https://www.sqlalchemy.org/trac/ticket/4680)
- en: misc
  id: totrans-3275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[misc] [bug]**'
  id: totrans-3276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项] [bug]**'
- en: Removed errant “sqla_nose.py” symbol from MANIFEST.in which created an undesirable
    warning message.
  id: totrans-3277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MANIFEST.in中删除了错误的“sqla_nose.py”符号，这会创建一个不希望的警告消息。
- en: 'References: [#4625](https://www.sqlalchemy.org/trac/ticket/4625)'
  id: totrans-3278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4625](https://www.sqlalchemy.org/trac/ticket/4625)
- en: orm
  id: totrans-3279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`AttributeEvents.active_history`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.active_history
    "sqlalchemy.orm.AttributeEvents") flag would not be set for an event listener
    that propagated to a subclass via the [`AttributeEvents.propagate`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents") flag. This bug has been present for the full
    span of the [`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents") system.
  id: totrans-3281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`AttributeEvents.active_history`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.active_history
    "sqlalchemy.orm.AttributeEvents")标志未设置为通过[`AttributeEvents.propagate`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents")标志传播到子类的事件侦听器的问题。这个错误存在于整个[`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents")系统的整个时间段。
- en: 'References: [#4695](https://www.sqlalchemy.org/trac/ticket/4695)'
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4695](https://www.sqlalchemy.org/trac/ticket/4695)
- en: '**[orm] [bug]**'
  id: totrans-3283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where new association proxy system was still not proxying hybrid
    attributes when they made use of the `@hybrid_property.expression` decorator to
    return an alternate SQL expression, or when the hybrid returned an arbitrary [`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"), at the expression level. This involved further
    generalization of the heuristics used to detect the type of object being proxied
    at the level of [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), to better detect if the descriptor ultimately
    serves mapped classes or column expressions.
  id: totrans-3284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的关联代理系统仍未代理混合属性的回归，当它们使用`@hybrid_property.expression`装饰器返回替代的SQL表达式，或者当混合属性在表达式级别返回任意的[`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")时。这涉及进一步泛化用于检测在[`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")级别代理的对象类型的启发式方法，以更好地检测描述符最终是为映射类还是列表达式服务。
- en: 'References: [#4690](https://www.sqlalchemy.org/trac/ticket/4690)'
  id: totrans-3285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4690](https://www.sqlalchemy.org/trac/ticket/4690)
- en: '**[orm] [bug]**'
  id: totrans-3286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Applied the mapper “configure mutex” against the declarative class mapping process,
    to guard against the race which can occur if mappers are used while dynamic module
    import schemes are still in the process of configuring mappers for related classes.
    This does not guard against all possible race conditions, such as if the concurrent
    import has not yet encountered the dependent classes as of yet, however it guards
    against as much as possible within the SQLAlchemy declarative process.
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对声明类映射过程应用了映射器“配置互斥锁”，以防止在动态模块导入方案仍在为相关类配置映射器的过程中发生的竞争。这并不防范所有可能的竞争条件，比如如果并发导入尚未遇到相关类，但它在SQLAlchemy声明过程中尽可能地防范了尽可能多的情况。
- en: 'References: [#4686](https://www.sqlalchemy.org/trac/ticket/4686)'
  id: totrans-3288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4686](https://www.sqlalchemy.org/trac/ticket/4686)
- en: '**[orm] [bug]**'
  id: totrans-3289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is now emitted for the case where a transient object is being merged
    into the session with [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") when that object is already transient in the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This warns for the case where the object would normally
    be double-inserted.
  id: totrans-3290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对将瞬态对象与[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")合并到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中已经是瞬态的对象的情况发出警告。这为通常会导致对象被双重插入的情况发出警告。
- en: 'References: [#4647](https://www.sqlalchemy.org/trac/ticket/4647)'
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4647](https://www.sqlalchemy.org/trac/ticket/4647)
- en: '**[orm] [bug]**'
  id: totrans-3292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in new relationship m2o comparison logic first introduced at
    [Improvement to the behavior of many-to-one query expressions](migration_13.html#change-4359)
    when comparing to an attribute that is persisted as NULL and is in an un-fetched
    state in the mapped instance. Since the attribute has no explicit default, it
    needs to default to NULL when accessed in a persistent setting.
  id: totrans-3293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在新关系m2o比较逻辑中引入的回归问题，该逻辑首次出现在[改进了一对多查询表达式的行为](migration_13.html#change-4359)时，当与在映射实例中处于未获取状态的持久化为NULL的属性进行比较时。由于属性没有明确的默认值，在持久化设置中访问时需要默认为NULL。
- en: 'References: [#4676](https://www.sqlalchemy.org/trac/ticket/4676)'
  id: totrans-3294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4676](https://www.sqlalchemy.org/trac/ticket/4676)
- en: engine
  id: totrans-3295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-3296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [postgresql]**'
- en: Moved the “rollback” which occurs during dialect initialization so that it occurs
    after additional dialect-specific initialize steps, in particular those of the
    psycopg2 dialect which would inadvertently leave transactional state on the first
    new connection, which could interfere with some psycopg2-specific APIs which require
    that no transaction is started. Pull request courtesy Matthew Wilkes.
  id: totrans-3297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将在方言初始化期间发生的“回滚”移动到额外的方言特定初始化步骤之后，特别是psycopg2方言的初始化步骤，该步骤会在第一个新连接上无意中保留事务状态，这可能会干扰一些需要不启动事务的psycopg2特定API。感谢Matthew
    Wilkes提供的拉取请求。
- en: 'References: [#4663](https://www.sqlalchemy.org/trac/ticket/4663)'
  id: totrans-3298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4663](https://www.sqlalchemy.org/trac/ticket/4663)
- en: sql
  id: totrans-3299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed that the [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") class was inadvertently registering
    itself as one of the named functions. Pull request courtesy Adrien Berchet.
  id: totrans-3301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")类无意中注册自身为命名函数的问题。感谢Adrien Berchet提供的拉取请求。
- en: 'References: [#4653](https://www.sqlalchemy.org/trac/ticket/4653)'
  id: totrans-3302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4653](https://www.sqlalchemy.org/trac/ticket/4653)
- en: '**[sql] [bug]**'
  id: totrans-3303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where double negation of a boolean column wouldn’t reset the “NOT”
    operator.
  id: totrans-3304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了布尔列的双重否定不会重置“NOT”运算符的问题。
- en: 'References: [#4618](https://www.sqlalchemy.org/trac/ticket/4618)'
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4618](https://www.sqlalchemy.org/trac/ticket/4618)
- en: '**[sql] [bug]**'
  id: totrans-3306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") namespace is being migrated so that
    function names are looked up in a case-insensitive manner, as SQL functions do
    not collide on case sensitive differences nor is this something which would occur
    with user-defined functions or stored procedures. Lookups for functions declared
    with [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") now use a case insensitive scheme,
    however a deprecation case is supported which allows two or more [`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") objects with the same name of different
    cases to exist, which will cause case sensitive lookups to occur for that particular
    name, while emitting a warning at function registration time. Thanks to Adrien
    Berchet for a lot of work on this complicated feature.
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")命名空间正在迁移，以便以不区分大小写的方式查找函数名称，因为SQL函数不会因区分大小写而发生冲突，用户定义的函数或存储过程也不会发生这种情况。现在使用不区分大小写的方案查找使用[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")声明的函数，但支持一个弃用案例，允许存在两个或更多具有不同大小写的相同名称的[`GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")对象，这将导致对该特定名称进行区分大小写查找，同时在函数注册时发出警告。感谢Adrien
    Berchet在这个复杂功能上的大量工作。'
- en: 'References: [#4569](https://www.sqlalchemy.org/trac/ticket/4569)'
  id: totrans-3308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4569](https://www.sqlalchemy.org/trac/ticket/4569)
- en: postgresql
  id: totrans-3309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [orm]**'
  id: totrans-3310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [orm]**'
- en: Fixed an issue where the “number of rows matched” warning would emit even if
    the dialect reported “supports_sane_multi_rowcount=False”, as is the case for
    psycogp2 with `use_batch_mode=True` and others.
  id: totrans-3311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即“匹配的行数”警告即使方言报告“supports_sane_multi_rowcount=False”也会发出，例如对于psycogp2与`use_batch_mode=True`和其他情况。
- en: 'References: [#4661](https://www.sqlalchemy.org/trac/ticket/4661)'
  id: totrans-3312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4661](https://www.sqlalchemy.org/trac/ticket/4661)
- en: mysql
  id: totrans-3313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for DROP CHECK constraint which is required by MySQL 8.0.16 to
    drop a CHECK constraint; MariaDB supports plain DROP CONSTRAINT. The logic distinguishes
    between the two syntaxes by checking the server version string for MariaDB presence.
    Alembic migrations has already worked around this issue by implementing its own
    DROP for MySQL / MariaDB CHECK constraints, however this change implements it
    straight in Core so that its available for general use. Pull request courtesy
    Hannes Hansen.
  id: totrans-3315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 DROP CHECK 约束的支持，MySQL 8.0.16 要求删除 CHECK 约束；MariaDB 支持普通的 DROP CONSTRAINT。该逻辑通过检查服务器版本字符串是否存在
    MariaDB 来区分这两种语法。Alembic 迁移已经通过实现自己的 MySQL / MariaDB CHECK 约束删除来解决了这个问题，但是这个改变直接在
    Core 中实现了这一功能，以便供一般使用。感谢 Hannes Hansen 的拉取请求。
- en: 'References: [#4650](https://www.sqlalchemy.org/trac/ticket/4650)'
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4650](https://www.sqlalchemy.org/trac/ticket/4650)
- en: mssql
  id: totrans-3317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-3318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Added support for SQL Server filtered indexes, via the `mssql_where` parameter
    which works similarly to that of the `postgresql_where` index function in the
    PostgreSQL dialect.
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 SQL Server 过滤索引的支持，通过 `mssql_where` 参数实现，其工作方式类似于 PostgreSQL 方言中的 `postgresql_where`
    索引函数。
- en: See also
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Filtered Indexes](../dialects/mssql.html#mssql-index-where)'
  id: totrans-3321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[过滤索引](../dialects/mssql.html#mssql-index-where)'
- en: 'References: [#4657](https://www.sqlalchemy.org/trac/ticket/4657)'
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4657](https://www.sqlalchemy.org/trac/ticket/4657)
- en: '**[mssql] [bug]**'
  id: totrans-3323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Added error code 20047 to “is_disconnect” for pymssql. Pull request courtesy
    Jon Schuff.
  id: totrans-3324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 pymssql 添加了错误代码 20047 到“is_disconnect”。感谢 Jon Schuff 的拉取请求。
- en: 'References: [#4680](https://www.sqlalchemy.org/trac/ticket/4680)'
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4680](https://www.sqlalchemy.org/trac/ticket/4680)
- en: misc
  id: totrans-3326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[misc] [bug]**'
  id: totrans-3327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项] [错误]**'
- en: Removed errant “sqla_nose.py” symbol from MANIFEST.in which created an undesirable
    warning message.
  id: totrans-3328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MANIFEST.in 中删除了错误的“sqla_nose.py”符号，这会导致不必要的警告消息。
- en: 'References: [#4625](https://www.sqlalchemy.org/trac/ticket/4625)'
  id: totrans-3329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4625](https://www.sqlalchemy.org/trac/ticket/4625)
- en: 1.3.3
  id: totrans-3330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.3
- en: 'Released: April 15, 2019'
  id: totrans-3331
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年4月15日
- en: orm
  id: totrans-3332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed 1.3 regression in new “ambiguous FROMs” query logic introduced in [Query.join()
    handles ambiguity in deciding the “left” side more explicitly](migration_13.html#change-4365)
    where a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that explicitly places an entity in the FROM clause with [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") and also joins to it using [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") would later cause an “ambiguous FROM” error if that
    entity were used in additional joins, as the entity appears twice in the “from”
    list of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
    The fix resolves this ambiguity by folding the standalone entity into the join
    that it’s already a part of in the same way that ultimately happens when the SELECT
    statement is rendered.
  id: totrans-3334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.3 版本中新的“模糊 FROMs”查询逻辑中的回归问题，该问题是在 [Query.join() 处理在决定“左”侧时的模糊性更加明确](migration_13.html#change-4365)
    中引入的，其中一个 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    明确将一个实体放在 FROM 子句中，并使用 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 进行连接，如果该实体在额外的连接中使用，那么稍后将会导致“模糊 FROM”错误，因为该实体在 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 的“from”列表中出现两次。修复此模糊性的方法是将独立实体合并到已经存在的连接中，就像在渲染 SELECT
    语句时最终发生的那样。
- en: 'References: [#4584](https://www.sqlalchemy.org/trac/ticket/4584)'
  id: totrans-3335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4584](https://www.sqlalchemy.org/trac/ticket/4584)
- en: '**[orm] [bug]**'
  id: totrans-3336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Adjusted the [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") method to not call `and()` internally against
    multiple criteria, instead passing it off to [`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter") as a series of criteria, instead of a single criteria.
    This allows [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") to defer to [`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")’s treatment of variable numbers of clauses, including
    the case where the list is empty. In this case, the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object will not have a `.whereclause`, which allows subsequent
    “no whereclause” methods like [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") to behave consistently.
  id: totrans-3337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") 方法，不再在多个条件内部调用 `and()`，而是将其作为一系列条件传递给 [`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")，而不是单个条件。这允许 [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") 推迟到 [`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter") 处理可变数量的子句，包括列表为空的情况。在这种情况下，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象将不会有 `.whereclause`，这允许后续的“无 whereclause”方法如 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 保持一致的行为。
- en: 'References: [#4606](https://www.sqlalchemy.org/trac/ticket/4606)'
  id: totrans-3338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4606](https://www.sqlalchemy.org/trac/ticket/4606)
- en: postgresql
  id: totrans-3339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression from release 1.3.2 caused by [#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    where a URL that contained only a query string and no hostname, such as for the
    purposes of specifying a service file with connection information, would no longer
    be propagated to psycopg2 properly. The change in [#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    has been adjusted to further suit psycopg2’s exact requirements, which is that
    if there are any connection parameters whatsoever, the “dsn” parameter is no longer
    required, so in this case the query string parameters are passed alone.
  id: totrans-3341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 1.3.2 版本中的回归修复引起的问题，该问题是由 [#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    引起的，其中包含了仅包含查询字符串而不包含主机名的 URL，例如用于指定包含连接信息的服务文件时，将不再正确地传播到 psycopg2。对 [#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    中的更改已经调整以进一步适应 psycopg2 的确切要求，即如果存在任何连接参数，那么“dsn”参数不再是必需的，因此在这种情况下，只传递查询字符串参数。
- en: 'References: [#4601](https://www.sqlalchemy.org/trac/ticket/4601)'
  id: totrans-3342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4601](https://www.sqlalchemy.org/trac/ticket/4601)
- en: mssql
  id: totrans-3343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in SQL Server dialect where if a bound parameter were present in
    an ORDER BY expression that would ultimately not be rendered in the SQL Server
    version of the statement, the parameters would still be part of the execution
    parameters, leading to DBAPI-level errors. Pull request courtesy Matt Lewellyn.
  id: totrans-3345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言中的问题，即如果 ORDER BY 表达式中存在一个绑定参数，最终在 SQL Server 版本的语句中不会呈现，那么这些参数仍然会成为执行参数的一部分，导致
    DBAPI 级别的错误。感谢 Matt Lewellyn 的拉取请求。
- en: 'References: [#4587](https://www.sqlalchemy.org/trac/ticket/4587)'
  id: totrans-3346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4587](https://www.sqlalchemy.org/trac/ticket/4587)
- en: misc
  id: totrans-3347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-3348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed behavioral regression as a result of deprecating the “use_threadlocal”
    flag for [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    where the [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") no longer makes use of this option which
    causes the “rollback on return” logic to take place when the same [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is used multiple times in the context of a transaction
    to connect or implicitly execute, thereby cancelling the transaction. While this
    is not the recommended way to work with engines and connections, it is nonetheless
    a confusing behavioral change as when using [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool"), the transaction should stay open regardless
    of what else is done with the same engine in the same thread. The `use_threadlocal`
    flag remains deprecated however the [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") now implements its own version of the same
    logic.
  id: totrans-3349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于弃用了[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")的“use_threadlocal”标志，导致行为回归修复，[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")不再使用此选项，这会导致在事务的上下文中多次使用相同的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")连接或隐式执行时发生“返回时回滚”逻辑，从而取消事务。虽然这不是与引擎和连接一起工作的推荐方式，但这仍然是一个令人困惑的行为变化，因为当使用[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")时，无论在同一线程中对相同引擎做了什么，事务都应该保持打开状态。`use_threadlocal`标志仍然被弃用，但[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")现在实现了自己版本的相同逻辑。
- en: 'References: [#4585](https://www.sqlalchemy.org/trac/ticket/4585)'
  id: totrans-3350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4585](https://www.sqlalchemy.org/trac/ticket/4585)
- en: '**[bug] [ext]**'
  id: totrans-3351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where using `copy.copy()` or `copy.deepcopy()` on [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") would cause the items within the list to
    be duplicated, due to an inconsistency in how Python pickle and copy both make
    use of `__getstate__()` and `__setstate__()` regarding lists. In order to resolve,
    a `__reduce_ex__` method had to be added to [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList"). In order to maintain backwards compatibility
    with existing pickles based on `__getstate__()`, the `__setstate__()` method remains
    as well; the test suite asserts that pickles made against the old version of the
    class can still be deserialized by the pickle module.
  id: totrans-3352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")上使用`copy.copy()`或`copy.deepcopy()`会导致列表内的项目被复制的错误，这是由于Python
    pickle和copy在处理列表时如何使用`__getstate__()`和`__setstate__()`存在不一致性。为了解决这个问题，必须向[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")添加一个`__reduce_ex__`方法。为了与基于`__getstate__()`的现有pickle保持向后兼容性，`__setstate__()`方法也保留；测试套件断言，对旧版本类进行的pickle仍然可以被pickle模块反序列化。
- en: 'References: [#4603](https://www.sqlalchemy.org/trac/ticket/4603)'
  id: totrans-3353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4603](https://www.sqlalchemy.org/trac/ticket/4603)
- en: orm
  id: totrans-3354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.3 regression in new “ambiguous FROMs” query logic introduced in [Query.join()
    handles ambiguity in deciding the “left” side more explicitly](migration_13.html#change-4365)
    where a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that explicitly places an entity in the FROM clause with [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") and also joins to it using [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") would later cause an “ambiguous FROM” error if that
    entity were used in additional joins, as the entity appears twice in the “from”
    list of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
    The fix resolves this ambiguity by folding the standalone entity into the join
    that it’s already a part of in the same way that ultimately happens when the SELECT
    statement is rendered.
  id: totrans-3356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“模糊FROMs”查询逻辑中的1.3回归，该逻辑是在[Query.join()更明确地处理决定“左”侧的模糊性](migration_13.html#change-4365)中引入的，其中一个[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")在FROM子句中明确放置一个实体，并使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query")进行连接，如果该实体在额外的连接中使用，那么稍后将导致“模糊FROM”错误，因为该实体在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的“from”列表中出现两次。 该修复通过将独立实体折叠到已经是一部分的连接中来解决这种模糊性，就像在渲染SELECT语句时最终发生的那样。
- en: 'References: [#4584](https://www.sqlalchemy.org/trac/ticket/4584)'
  id: totrans-3357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4584](https://www.sqlalchemy.org/trac/ticket/4584)
- en: '**[orm] [bug]**'
  id: totrans-3358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Adjusted the [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") method to not call `and()` internally against
    multiple criteria, instead passing it off to [`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter") as a series of criteria, instead of a single criteria.
    This allows [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") to defer to [`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")’s treatment of variable numbers of clauses, including
    the case where the list is empty. In this case, the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object will not have a `.whereclause`, which allows subsequent
    “no whereclause” methods like [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") to behave consistently.
  id: totrans-3359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")方法，不再在多个条件内部调用`and()`，而是将其作为一系列条件传递给[`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")，而不是单个条件。 这允许[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")推迟到[`Query.filter()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")对变量数量的子句的处理，包括列表为空的情况。 在这种情况下，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象将不具有`.whereclause`，这允许随后的“无whereclause”方法（如[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")）保持一致的行为。
- en: 'References: [#4606](https://www.sqlalchemy.org/trac/ticket/4606)'
  id: totrans-3360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4606](https://www.sqlalchemy.org/trac/ticket/4606)
- en: postgresql
  id: totrans-3361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression from release 1.3.2 caused by [#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    where a URL that contained only a query string and no hostname, such as for the
    purposes of specifying a service file with connection information, would no longer
    be propagated to psycopg2 properly. The change in [#4562](https://www.sqlalchemy.org/trac/ticket/4562)
    has been adjusted to further suit psycopg2’s exact requirements, which is that
    if there are any connection parameters whatsoever, the “dsn” parameter is no longer
    required, so in this case the query string parameters are passed alone.
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从版本1.3.2发布引起的回归，原因是[#4562](https://www.sqlalchemy.org/trac/ticket/4562)，其中包含仅查询字符串而没有主机名的URL，例如用于指定包含连接信息的服务文件，将不再正确传播到psycopg2。
    [#4562](https://www.sqlalchemy.org/trac/ticket/4562)中的更改已经调整以进一步适应psycopg2的确切要求，即如果有任何连接参数，那么“dsn”参数将不再是必需的，因此在这种情况下，仅传递查询字符串参数。
- en: 'References: [#4601](https://www.sqlalchemy.org/trac/ticket/4601)'
  id: totrans-3364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4601](https://www.sqlalchemy.org/trac/ticket/4601)
- en: mssql
  id: totrans-3365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in SQL Server dialect where if a bound parameter were present in
    an ORDER BY expression that would ultimately not be rendered in the SQL Server
    version of the statement, the parameters would still be part of the execution
    parameters, leading to DBAPI-level errors. Pull request courtesy Matt Lewellyn.
  id: totrans-3367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言中的问题，如果 ORDER BY 表达式中存在一个绑定参数，最终在 SQL Server 版本的语句中不会呈现，那么这些参数仍然会成为执行参数的一部分，导致
    DBAPI 级别的错误。感谢 Matt Lewellyn 的拉取请求。
- en: 'References: [#4587](https://www.sqlalchemy.org/trac/ticket/4587)'
  id: totrans-3368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4587](https://www.sqlalchemy.org/trac/ticket/4587)
- en: misc
  id: totrans-3369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [pool]**'
  id: totrans-3370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed behavioral regression as a result of deprecating the “use_threadlocal”
    flag for [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    where the [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") no longer makes use of this option which
    causes the “rollback on return” logic to take place when the same [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is used multiple times in the context of a transaction
    to connect or implicitly execute, thereby cancelling the transaction. While this
    is not the recommended way to work with engines and connections, it is nonetheless
    a confusing behavioral change as when using [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool"), the transaction should stay open regardless
    of what else is done with the same engine in the same thread. The `use_threadlocal`
    flag remains deprecated however the [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") now implements its own version of the same
    logic.
  id: totrans-3371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了行为回归问题，因为取消了对[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")的“use_threadlocal”标志，[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")不再使用此选项，导致在事务的上下文中多次使用相同的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")连接或隐式执行时发生“回滚返回”逻辑，从而取消事务。虽然这不是推荐的引擎和连接工作方式，但当使用[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")时，事务应该保持打开状态，无论在同一线程中对相同引擎做了什么。`use_threadlocal`标志仍然被弃用，但[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")现在实现了自己版本的相同逻辑。
- en: 'References: [#4585](https://www.sqlalchemy.org/trac/ticket/4585)'
  id: totrans-3372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4585](https://www.sqlalchemy.org/trac/ticket/4585)
- en: '**[bug] [ext]**'
  id: totrans-3373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where using `copy.copy()` or `copy.deepcopy()` on [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") would cause the items within the list to
    be duplicated, due to an inconsistency in how Python pickle and copy both make
    use of `__getstate__()` and `__setstate__()` regarding lists. In order to resolve,
    a `__reduce_ex__` method had to be added to [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList"). In order to maintain backwards compatibility
    with existing pickles based on `__getstate__()`, the `__setstate__()` method remains
    as well; the test suite asserts that pickles made against the old version of the
    class can still be deserialized by the pickle module.
  id: totrans-3374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在对[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")使用`copy.copy()`或`copy.deepcopy()`时出现的 bug，由于
    Python 的 pickle 和 copy 在处理列表时使用`__getstate__()`和`__setstate__()`存在不一致性，导致列表内的项目被复制。为了解决这个问题，必须向[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")添加一个`__reduce_ex__`方法。为了与基于`__getstate__()`的现有
    pickle 兼容，`__setstate__()`方法也保留了；测试套件断言，对旧版本类进行的 pickle 仍然可以被 pickle 模块反序列化。
- en: 'References: [#4603](https://www.sqlalchemy.org/trac/ticket/4603)'
  id: totrans-3375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4603](https://www.sqlalchemy.org/trac/ticket/4603)
- en: 1.3.2
  id: totrans-3376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.2
- en: 'Released: April 2, 2019'
  id: totrans-3377
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年4月2日
- en: orm
  id: totrans-3378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-3379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Restored instance-level support for plain Python descriptors, e.g. `@property`
    objects, in conjunction with association proxies, in that if the proxied object
    is not within ORM scope at all, it gets classified as “ambiguous” but is proxed
    directly. For class level access, a basic class level``__get__()`` now returns
    the `AmbiguousAssociationProxyInstance` directly, rather than raising its exception,
    which is the closest approximation to the previous behavior that returned the
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") itself that’s possible. Also
    improved the stringification of these objects to be more descriptive of current
    state.
  id: totrans-3380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了对纯Python描述符（例如`@property`对象）的实例级支持，与关联代理一起使用时，如果代理对象根本不在ORM范围内，则被归类为“模糊”，但直接被代理。对于类级别访问，基本类级别``__get__()``现在直接返回`AmbiguousAssociationProxyInstance`，而不是引发其异常，这是返回可能的最接近以前返回[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")本身的行为的近似值。还改进了这些对象的字符串表示，以更具描述性地反映当前状态。
- en: 'References: [#4573](https://www.sqlalchemy.org/trac/ticket/4573), [#4574](https://www.sqlalchemy.org/trac/ticket/4574)'
  id: totrans-3381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4573](https://www.sqlalchemy.org/trac/ticket/4573), [#4574](https://www.sqlalchemy.org/trac/ticket/4574)
- en: '**[orm] [bug]**'
  id: totrans-3382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") or other aliased construct would not properly
    adapt when the aliased target were used as the [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") target of a subquery used
    inside of a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This required a fix to the clause adaption
    mechanics to properly handle a selectable that shows up in the “correlate except”
    list, in a similar manner as which occurs for selectables that show up in the
    “correlate” list. This is ultimately a fairly fundamental bug that has lasted
    for a long time but it is hard to come across it.
  id: totrans-3383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")或其他别名构造时，当别名目标被用作子查询中的[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")目标时，适配不正确。这需要修复子句适配机制，以正确处理出现在“除了关联”列表中的可选择项，类似于出现在“关联”列表中的可选择项的方式。这实际上是一个相当基本的bug，已经存在很长时间，但很难遇到。
- en: 'References: [#4537](https://www.sqlalchemy.org/trac/ticket/4537)'
  id: totrans-3384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4537](https://www.sqlalchemy.org/trac/ticket/4537)
- en: '**[orm] [bug]**'
  id: totrans-3385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where a new error message that was supposed to raise when attempting
    to link a relationship option to an AliasedClass without using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") would instead raise an `AttributeError`.
    Note that in 1.3, it is no longer valid to create an option path from a plain
    mapper relationship to an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") without using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type").
  id: totrans-3386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，当尝试将关系选项链接到一个未使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")的AliasedClass时，本应引发一个新的错误消息，而实际上会引发`AttributeError`。请注意，在1.3版本中，从普通映射关系到[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")创建选项路径而不使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")已不再有效。
- en: 'References: [#4566](https://www.sqlalchemy.org/trac/ticket/4566)'
  id: totrans-3387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4566](https://www.sqlalchemy.org/trac/ticket/4566)
- en: sql
  id: totrans-3388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [documentation]**'
  id: totrans-3389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [documentation]**'
- en: Thanks to [TypeEngine methods bind_expression, column_expression work with Variant,
    type-specific types](migration_13.html#change-3981), we no longer need to rely
    on recipes that subclass dialect-specific types directly, [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") can now handle all cases. Additionally, the
    above change made it slightly less likely that a direct subclass of a base SQLAlchemy
    type would work as expected, which could be misleading. Documentation has been
    updated to use [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") for these examples including the PostgreSQL
    “ArrayOfEnum” example datatype and direct support for the “subclass a type directly”
    has been removed.
  id: totrans-3390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多亏了[TypeEngine methods bind_expression, column_expression work with Variant,
    type-specific types](migration_13.html#change-3981)，我们不再需要依赖直接子类化特定方言类型的配方，[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")现在可以处理所有情况。此外，上述更改使得直接子类化基本SQLAlchemy类型的直接子类工作的可能性稍微降低，这可能会产生误导。文档已更新，以在这些示例中使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")，包括PostgreSQL的“ArrayOfEnum”示例数据类型，并且已删除了对“直接子类化类型”的直接支持。
- en: 'References: [#4580](https://www.sqlalchemy.org/trac/ticket/4580)'
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4580](https://www.sqlalchemy.org/trac/ticket/4580)
- en: postgresql
  id: totrans-3392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for parameter-less connection URLs for the psycopg2 dialect, meaning,
    the URL can be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as `"postgresql+psycopg2://"` with no additional arguments
    to indicate an empty DSN passed to libpq, which indicates to connect to “localhost”
    with no username, password, or database given. Pull request courtesy Julian Mehnle.
  id: totrans-3394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 psycopg2 方言添加了对无参数连接URL的支持，这意味着可以将URL作为`"postgresql+psycopg2://"`传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，而不需要额外的参数来指示传递给 libpq 的空DSN，这表示连接到“localhost”而不提供用户名、密码或数据库。感谢
    Julian Mehnle 提交的拉取请求。
- en: 'References: [#4562](https://www.sqlalchemy.org/trac/ticket/4562)'
  id: totrans-3395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4562](https://www.sqlalchemy.org/trac/ticket/4562)
- en: '**[postgresql] [bug]**'
  id: totrans-3396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Modified the [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") parameter so that if a join
    or other composed selectable is passed, the individual [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects will be filtered from it, allowing one to pass
    a join() object to the parameter, as occurs normally when using joined table inheritance
    with the ORM. Pull request courtesy Raymond Lu.
  id: totrans-3397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")参数，如果传递了联接或其他组合可选择的对象，则将从中过滤出各个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，允许将join()对象传递给参数，就像在使用ORM时正常情况下使用联接表继承一样。感谢 Raymond
    Lu 提交的拉取请求。
- en: 'References: [#4550](https://www.sqlalchemy.org/trac/ticket/4550)'
  id: totrans-3398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4550](https://www.sqlalchemy.org/trac/ticket/4550)
- en: orm
  id: totrans-3399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-3400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [扩展]**'
- en: Restored instance-level support for plain Python descriptors, e.g. `@property`
    objects, in conjunction with association proxies, in that if the proxied object
    is not within ORM scope at all, it gets classified as “ambiguous” but is proxed
    directly. For class level access, a basic class level``__get__()`` now returns
    the `AmbiguousAssociationProxyInstance` directly, rather than raising its exception,
    which is the closest approximation to the previous behavior that returned the
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") itself that’s possible. Also
    improved the stringification of these objects to be more descriptive of current
    state.
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了对纯Python描述符（例如`@property`对象）的实例级支持，与关联代理一起使用，如果代理对象根本不在ORM范围内，则被归类为“模糊”，但直接进行代理。对于类级别访问，基本类级别``__get__()``现在直接返回`AmbiguousAssociationProxyInstance`，而不是引发其异常，这是返回可能的最接近以前返回[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")本身的行为的近似值。还改进了这些对象的字符串表��，以更具描述性地反映当前状态。
- en: 'References: [#4573](https://www.sqlalchemy.org/trac/ticket/4573), [#4574](https://www.sqlalchemy.org/trac/ticket/4574)'
  id: totrans-3402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4573](https://www.sqlalchemy.org/trac/ticket/4573)，[#4574](https://www.sqlalchemy.org/trac/ticket/4574)
- en: '**[orm] [bug]**'
  id: totrans-3403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where use of [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") or other aliased construct would not properly
    adapt when the aliased target were used as the [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") target of a subquery used
    inside of a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This required a fix to the clause adaption
    mechanics to properly handle a selectable that shows up in the “correlate except”
    list, in a similar manner as which occurs for selectables that show up in the
    “correlate” list. This is ultimately a fairly fundamental bug that has lasted
    for a long time but it is hard to come across it.
  id: totrans-3404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，当使用[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")或其他别名构造时，当别名目标被用作子查询中的[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")目标时，适配不会正确进行。这需要修复子句适配机制，以正确处理出现在“除外关联”列表中的可选择项，类似于出现在“关联”列表中的可选择项的方式。这实际上是一个相当基本的长期存在的bug，但很难遇到它。
- en: 'References: [#4537](https://www.sqlalchemy.org/trac/ticket/4537)'
  id: totrans-3405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4537](https://www.sqlalchemy.org/trac/ticket/4537)
- en: '**[orm] [bug]**'
  id: totrans-3406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where a new error message that was supposed to raise when attempting
    to link a relationship option to an AliasedClass without using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") would instead raise an `AttributeError`.
    Note that in 1.3, it is no longer valid to create an option path from a plain
    mapper relationship to an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") without using [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type").
  id: totrans-3407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，当尝试将一个关系选项链接到一个未使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")的别名类（AliasedClass）时，本应该引发一个新的错误消息，而实际上会引发一个`AttributeError`。请注意，在1.3版本中，不再允许从普通的映射关系到一个[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")创建选项路径，而不使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")。
- en: 'References: [#4566](https://www.sqlalchemy.org/trac/ticket/4566)'
  id: totrans-3408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4566](https://www.sqlalchemy.org/trac/ticket/4566)
- en: sql
  id: totrans-3409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [documentation]**'
  id: totrans-3410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [documentation]**'
- en: Thanks to [TypeEngine methods bind_expression, column_expression work with Variant,
    type-specific types](migration_13.html#change-3981), we no longer need to rely
    on recipes that subclass dialect-specific types directly, [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") can now handle all cases. Additionally, the
    above change made it slightly less likely that a direct subclass of a base SQLAlchemy
    type would work as expected, which could be misleading. Documentation has been
    updated to use [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") for these examples including the PostgreSQL
    “ArrayOfEnum” example datatype and direct support for the “subclass a type directly”
    has been removed.
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[TypeEngine methods bind_expression, column_expression work with Variant,
    type-specific types](migration_13.html#change-3981)的改动，我们不再需要依赖直接子类化特定于方言的类型的食谱，[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")现在可以处理所有情况。此外，上述更改使得直接基于SQLAlchemy类型的子类的预期工作几率略微降低，这可能会误导。文档已更新为在这些示例中使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")，包括PostgreSQL的“ArrayOfEnum”示例数据类型，并且直接支持“直接子类化类型”的已被移除。
- en: 'References: [#4580](https://www.sqlalchemy.org/trac/ticket/4580)'
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4580](https://www.sqlalchemy.org/trac/ticket/4580)
- en: postgresql
  id: totrans-3413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for parameter-less connection URLs for the psycopg2 dialect, meaning,
    the URL can be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as `"postgresql+psycopg2://"` with no additional arguments
    to indicate an empty DSN passed to libpq, which indicates to connect to “localhost”
    with no username, password, or database given. Pull request courtesy Julian Mehnle.
  id: totrans-3415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为psycopg2方言添加了无参数连接URL的支持，这意味着可以将URL作为`"postgresql+psycopg2://"`传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine)，而不需要额外的参数来指示传递给libpq的空DSN，这表示连接到“localhost”而不提供用户名、密码或数据库。感谢
    Julian Mehnle 的拉取请求。
- en: 'References: [#4562](https://www.sqlalchemy.org/trac/ticket/4562)'
  id: totrans-3416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4562](https://www.sqlalchemy.org/trac/ticket/4562)
- en: '**[postgresql] [bug]**'
  id: totrans-3417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Modified the [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") parameter so that if a join
    or other composed selectable is passed, the individual [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects will be filtered from it, allowing one to pass
    a join() object to the parameter, as occurs normally when using joined table inheritance
    with the ORM. Pull request courtesy Raymond Lu.
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update)参数，以便如果传递了连接或其他组合可选择项，则将从中过滤出各个[`Table`](../core/metadata.html#sqlalchemy.schema.Table)对象，允许将join()对象传递给参数，就像在使用ORM时通常发生的那样。感谢
    Raymond Lu 的拉取请求。
- en: 'References: [#4550](https://www.sqlalchemy.org/trac/ticket/4550)'
  id: totrans-3419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4550](https://www.sqlalchemy.org/trac/ticket/4550)
- en: 1.3.1
  id: totrans-3420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.1
- en: 'Released: March 9, 2019'
  id: totrans-3421
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年3月9日
- en: orm
  id: totrans-3422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-3423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed regression where an association proxy linked to a synonym would no longer
    work, both at instance level and at class level.
  id: totrans-3424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理链接到同义词时不再工作的回归，无论是在实例级别还是在类级别。
- en: 'References: [#4522](https://www.sqlalchemy.org/trac/ticket/4522)'
  id: totrans-3425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4522](https://www.sqlalchemy.org/trac/ticket/4522)
- en: mssql
  id: totrans-3426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: A commit() is emitted after an isolation level change to SNAPSHOT, as both pyodbc
    and pymssql open an implicit transaction which blocks subsequent SQL from being
    emitted in the current transaction.
  id: totrans-3428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将隔离级别更改为SNAPSHOT后会发出一个commit()，因为pyodbc和pymssql都会打开一个隐式事务，这会阻止当前事务中发出后续的SQL。
- en: 'This change is also **backported** to: 1.2.19'
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.19
- en: 'References: [#4536](https://www.sqlalchemy.org/trac/ticket/4536)'
  id: totrans-3430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4536](https://www.sqlalchemy.org/trac/ticket/4536)
- en: '**[mssql] [bug]**'
  id: totrans-3431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression in SQL Server reflection due to [#4393](https://www.sqlalchemy.org/trac/ticket/4393)
    where the removal of open-ended `**kw` from the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype caused reflection of this type to fail due
    to a “scale” argument being passed.
  id: totrans-3432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server反射中的回归，原因是[#4393](https://www.sqlalchemy.org/trac/ticket/4393)中从[`Float`](../core/type_basics.html#sqlalchemy.types.Float)数据类型中删除了开放式`**kw`，导致此类型的反射失败，因为传递了一个“scale”参数。
- en: 'References: [#4525](https://www.sqlalchemy.org/trac/ticket/4525)'
  id: totrans-3433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4525](https://www.sqlalchemy.org/trac/ticket/4525)
- en: orm
  id: totrans-3434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [ext]**'
  id: totrans-3435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed regression where an association proxy linked to a synonym would no longer
    work, both at instance level and at class level.
  id: totrans-3436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理链接到同义词时不再工作的回归，无论是在实例级别还是在类级别。
- en: 'References: [#4522](https://www.sqlalchemy.org/trac/ticket/4522)'
  id: totrans-3437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4522](https://www.sqlalchemy.org/trac/ticket/4522)
- en: mssql
  id: totrans-3438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: A commit() is emitted after an isolation level change to SNAPSHOT, as both pyodbc
    and pymssql open an implicit transaction which blocks subsequent SQL from being
    emitted in the current transaction.
  id: totrans-3440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将隔离级别更改为SNAPSHOT后会发出一个commit()，因为pyodbc和pymssql都会打开一个隐式事务，这会阻止当前事务中发出后续的SQL。
- en: 'This change is also **backported** to: 1.2.19'
  id: totrans-3441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.19
- en: 'References: [#4536](https://www.sqlalchemy.org/trac/ticket/4536)'
  id: totrans-3442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4536](https://www.sqlalchemy.org/trac/ticket/4536)
- en: '**[mssql] [bug]**'
  id: totrans-3443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression in SQL Server reflection due to [#4393](https://www.sqlalchemy.org/trac/ticket/4393)
    where the removal of open-ended `**kw` from the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype caused reflection of this type to fail due
    to a “scale” argument being passed.
  id: totrans-3444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server反射中的回归，原因是[#4393](https://www.sqlalchemy.org/trac/ticket/4393)中从[`Float`](../core/type_basics.html#sqlalchemy.types.Float)数据类型中删除了开放式`**kw`，导致此类型的反射失败，因为传递了一个“scale”参数。
- en: 'References: [#4525](https://www.sqlalchemy.org/trac/ticket/4525)'
  id: totrans-3445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4525](https://www.sqlalchemy.org/trac/ticket/4525)
- en: 1.3.0
  id: totrans-3446
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.0
- en: 'Released: March 4, 2019'
  id: totrans-3447
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年3月4日
- en: orm
  id: totrans-3448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: The [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method can now accept a dictionary of attribute keys and values as a means of
    indicating the primary key value to load; is particularly useful for composite
    primary keys. Pull request courtesy Sanjana S.
  id: totrans-3450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    方法现在可以接受一个属性键和值的字典，作为指示要加载的主键值的手段；特别适用于复合主键。感谢 Sanjana S 提交的拉取请求。'
- en: 'References: [#4316](https://www.sqlalchemy.org/trac/ticket/4316)'
  id: totrans-3451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4316](https://www.sqlalchemy.org/trac/ticket/4316)
- en: '**[orm] [feature]**'
  id: totrans-3452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: A SQL expression can now be assigned to a primary key attribute for an ORM flush
    in the same manner as ordinary attributes as described in [Embedding SQL Insert/Update
    Expressions into a Flush](../orm/persistence_techniques.html#flush-embedded-sql-expressions)
    where the expression will be evaluated and then returned to the ORM using RETURNING,
    or in the case of pysqlite, works using the cursor.lastrowid attribute.Requires
    either a database that supports RETURNING (e.g. Postgresql, Oracle, SQL Server)
    or pysqlite.
  id: totrans-3453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将 SQL 表达式分配给 ORM 刷新中的主键属性，方式与普通属性描述的方式相同，如[将 SQL 插入/更新表达式嵌入到刷新中](../orm/persistence_techniques.html#flush-embedded-sql-expressions)，其中表达式将被评估，然后使用
    RETURNING 返回给 ORM，或者在 pysqlite 的情况下，使用 cursor.lastrowid 属性工作。需要支持 RETURNING 的数据库（例如
    Postgresql、Oracle、SQL Server）或 pysqlite。
- en: 'References: [#3133](https://www.sqlalchemy.org/trac/ticket/3133)'
  id: totrans-3454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3133](https://www.sqlalchemy.org/trac/ticket/3133)
- en: engine
  id: totrans-3455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-3456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [特性]**'
- en: Revised the formatting for [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") when stringified. Each error detail is broken
    up over multiple newlines instead of spaced out on a single line. Additionally,
    the SQL representation now stringifies the SQL statement rather than using `repr()`,
    so that newlines are rendered as is. Pull request courtesy Nate Clark.
  id: totrans-3457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了当字符串化时 [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") 的格式。每个错误细节都分布在多个新行上，而不是在单行上间隔开。此外，SQL 表示现在将 SQL
    语句字符串化，而不是使用 `repr()`，因此换行符会按原样呈现。感谢 Nate Clark 提交的拉取请求。
- en: See also
  id: totrans-3458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changed StatementError formatting (newlines and %s)](migration_13.html#change-4500)'
  id: totrans-3459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[更改 StatementError 格式（换行和 %s）](migration_13.html#change-4500)'
- en: 'References: [#4500](https://www.sqlalchemy.org/trac/ticket/4500)'
  id: totrans-3460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4500](https://www.sqlalchemy.org/trac/ticket/4500)
- en: sql
  id: totrans-3461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    class and related subclasses [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE"), [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") and [`TableSample`](../core/selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") have been reworked so that it is not
    possible for a user to construct the objects directly. These constructs require
    that the standalone construction function or selectable-bound method be used to
    instantiate new objects.
  id: totrans-3463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    类及相关子类 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")、[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") 和 [`TableSample`](../core/selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") 已经重新设计，用户不再能直接构造这些对象。这些构造需要使用独立的构造函数或可选择绑定的方法来实例化新对象。'
- en: 'References: [#4509](https://www.sqlalchemy.org/trac/ticket/4509)'
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4509](https://www.sqlalchemy.org/trac/ticket/4509)
- en: schema
  id: totrans-3465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [feature]**'
  id: totrans-3466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [特性]**'
- en: Added new parameters [`Table.resolve_fks`](../core/metadata.html#sqlalchemy.schema.Table.params.resolve_fks
    "sqlalchemy.schema.Table") and [`MetaData.reflect.resolve_fks`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect") which when set to False will disable the
    automatic reflection of related tables encountered in [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects, which can both reduce SQL overhead for
    omitted tables as well as avoid tables that can’t be reflected for database-specific
    reasons. Two [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects present in the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection can still refer to each other even if
    the reflection of the two tables occurred separately.
  id: totrans-3467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Table.resolve_fks`](../core/metadata.html#sqlalchemy.schema.Table.params.resolve_fks
    "sqlalchemy.schema.Table")和[`MetaData.reflect.resolve_fks`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")，当设置为False时，将禁用遇到的[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象的自动反射，这既可以减少省略表的SQL开销，也可以避免由于数据库特定原因无法反射的表。同一[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中存在的两个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象仍然可以相互引用，即使两个表的反射是分开进行的。
- en: 'References: [#4517](https://www.sqlalchemy.org/trac/ticket/4517)'
  id: totrans-3468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4517](https://www.sqlalchemy.org/trac/ticket/4517)
- en: orm
  id: totrans-3469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-3470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: The [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method can now accept a dictionary of attribute keys and values as a means of
    indicating the primary key value to load; is particularly useful for composite
    primary keys. Pull request courtesy Sanjana S.
  id: totrans-3471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")方法现在可以接受一个属性键和值的字典作为指示要加载的主键值的手段；对于复合主键特别有用。感谢Sanjana
    S.的拉取请求。'
- en: 'References: [#4316](https://www.sqlalchemy.org/trac/ticket/4316)'
  id: totrans-3472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4316](https://www.sqlalchemy.org/trac/ticket/4316)
- en: '**[orm] [feature]**'
  id: totrans-3473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: A SQL expression can now be assigned to a primary key attribute for an ORM flush
    in the same manner as ordinary attributes as described in [Embedding SQL Insert/Update
    Expressions into a Flush](../orm/persistence_techniques.html#flush-embedded-sql-expressions)
    where the expression will be evaluated and then returned to the ORM using RETURNING,
    or in the case of pysqlite, works using the cursor.lastrowid attribute.Requires
    either a database that supports RETURNING (e.g. Postgresql, Oracle, SQL Server)
    or pysqlite.
  id: totrans-3474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将SQL表达式分配给ORM刷新中的主键属性，方式与普通属性描述的方式相同，如[将SQL插入/更新表达式嵌入到刷新中](../orm/persistence_techniques.html#flush-embedded-sql-expressions)，其中表达式将被评估，然后使用RETURNING返回给ORM，或者在pysqlite的情况下，使用cursor.lastrowid属性工作。需要支持RETURNING的数据库（例如Postgresql、Oracle、SQL
    Server）或pysqlite。
- en: 'References: [#3133](https://www.sqlalchemy.org/trac/ticket/3133)'
  id: totrans-3475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3133](https://www.sqlalchemy.org/trac/ticket/3133)
- en: engine
  id: totrans-3476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-3477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Revised the formatting for [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") when stringified. Each error detail is broken
    up over multiple newlines instead of spaced out on a single line. Additionally,
    the SQL representation now stringifies the SQL statement rather than using `repr()`,
    so that newlines are rendered as is. Pull request courtesy Nate Clark.
  id: totrans-3478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了在字符串化时的[`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")格式。每个错误细节现在分布在多个新行上，而不是在单行上间隔开。此外，SQL表示现在将SQL语句字符串化，而不是使用`repr()`，因此换行符将按原样呈现。感谢Nate
    Clark的拉取请求。
- en: See also
  id: totrans-3479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changed StatementError formatting (newlines and %s)](migration_13.html#change-4500)'
  id: totrans-3480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[更改了StatementError的格式（换行和%s）](migration_13.html#change-4500)'
- en: 'References: [#4500](https://www.sqlalchemy.org/trac/ticket/4500)'
  id: totrans-3481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4500](https://www.sqlalchemy.org/trac/ticket/4500)
- en: sql
  id: totrans-3482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-3483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: The [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    class and related subclasses [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE"), [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") and [`TableSample`](../core/selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") have been reworked so that it is not
    possible for a user to construct the objects directly. These constructs require
    that the standalone construction function or selectable-bound method be used to
    instantiate new objects.
  id: totrans-3484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")类及其相关子类[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")、[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")和[`TableSample`](../core/selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample")已经重新设计，用户不再可以直接构造这些对象。这些构造要求使用独立的构造函数或可选择绑定方法来实例化新对象。'
- en: 'References: [#4509](https://www.sqlalchemy.org/trac/ticket/4509)'
  id: totrans-3485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4509](https://www.sqlalchemy.org/trac/ticket/4509)
- en: schema
  id: totrans-3486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-3487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: Added new parameters [`Table.resolve_fks`](../core/metadata.html#sqlalchemy.schema.Table.params.resolve_fks
    "sqlalchemy.schema.Table") and [`MetaData.reflect.resolve_fks`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect") which when set to False will disable the
    automatic reflection of related tables encountered in [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects, which can both reduce SQL overhead for
    omitted tables as well as avoid tables that can’t be reflected for database-specific
    reasons. Two [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects present in the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection can still refer to each other even if
    the reflection of the two tables occurred separately.
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Table.resolve_fks`](../core/metadata.html#sqlalchemy.schema.Table.params.resolve_fks
    "sqlalchemy.schema.Table")和[`MetaData.reflect.resolve_fks`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")，当设置为False时，将禁用在[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象中遇到的相关表的自动反射，这既可以减少省略表的SQL开销，也可以避免由于数据库特定原因无法反射的表。同一[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中存在的两个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象仍然可以相互引用，即使两个表的反射是分开进行的。
- en: 'References: [#4517](https://www.sqlalchemy.org/trac/ticket/4517)'
  id: totrans-3489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4517](https://www.sqlalchemy.org/trac/ticket/4517)
- en: 1.3.0b3
  id: totrans-3490
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.0b3
- en: 'Released: February 8, 2019'
  id: totrans-3491
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年2月8日
- en: orm
  id: totrans-3492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the behavior of [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") in conjunction with loader options, in particular
    wildcard operations as well as [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only"). The polymorphic object will be more accurately targeted
    so that column-level options on the entity will correctly take effect.The issue
    is a continuation of the same kinds of things fixed in [#4468](https://www.sqlalchemy.org/trac/ticket/4468).
  id: totrans-3494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")与加载器选项一起使用的行为，特别是通配符操作以及[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")。多态对象将更准确地被定位，以便实体上的列级选项能够正确生效。该问题是在[#4468](https://www.sqlalchemy.org/trac/ticket/4468)中修复的相同类型问题的延续。
- en: 'References: [#4469](https://www.sqlalchemy.org/trac/ticket/4469)'
  id: totrans-3495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4469](https://www.sqlalchemy.org/trac/ticket/4469)
- en: orm declarative
  id: totrans-3496
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Added some helper exceptions that invoke when a mapping based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection"), or `AutoMap` is used before
    the mapping is ready to be used, which contain descriptive information on the
    class, rather than falling through into other failure modes that are less informative.
  id: totrans-3498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一些辅助异常，当基于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")、[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")或`AutoMap`的映射在映射准备好使用之前被使用时，这些异常包含有关类的描述性信息，而不是陷入其他信息较少的故障模式中。
- en: 'References: [#4470](https://www.sqlalchemy.org/trac/ticket/4470)'
  id: totrans-3499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4470](https://www.sqlalchemy.org/trac/ticket/4470)
- en: sql
  id: totrans-3500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fully removed the behavior of strings passed directly as components of a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") or [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object being coerced to [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs automatically; the warning that has
    been emitted is now an ArgumentError or in the case of order_by() / group_by()
    a CompileError. This has emitted a warning since version 1.0 however its presence
    continues to create concerns for the potential of mis-use of this behavior.
  id: totrans-3502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完全删除了直接作为[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象组件传递的字符串被自动强制转换为[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造的行为；现在发出的警告现在是一个ArgumentError或在order_by() /
    group_by()的情况下是CompileError。自1.0版本以来一直发出警告，但其存在继续引起对此行为潜在误用的担忧。
- en: 'Note that public CVEs have been posted for order_by() / group_by() which are
    resolved by this commit: CVE-2019-7164 CVE-2019-7548'
  id: totrans-3503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，已发布了关于order_by() / group_by()的公共CVE，这些CVE由此提交解决：CVE-2019-7164 CVE-2019-7548
- en: See also
  id: totrans-3504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Coercion of string SQL fragments to text() fully removed](migration_13.html#change-4481)'
  id: totrans-3505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[完全删除将字符串SQL片段强制转换为text()](migration_13.html#change-4481)'
- en: 'References: [#4481](https://www.sqlalchemy.org/trac/ticket/4481)'
  id: totrans-3506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4481](https://www.sqlalchemy.org/trac/ticket/4481)
- en: '**[sql] [bug]**'
  id: totrans-3507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Quoting is applied to [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") names, those which are usually but not necessarily
    generated from the [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct, at compile time if they contain illegal
    characters, such as spaces or punctuation. The names are as before treated as
    case insensitive however, meaning if the names contain uppercase or mixed case
    characters, that alone does not trigger quoting. The case insensitivity is currently
    maintained for backwards compatibility.
  id: totrans-3508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用应用于[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")名称，这些名称通常但不一定是从[`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")构造生成的，在编译时如果它们包含非法字符，比如空格或标点符号。这些名称仍然被视为不区分大小写，这意味着如果名称包含大写字母或混合大小写字符，仅此并不会触发引用。目前为了向后兼容性而保持不区分大小写。
- en: 'References: [#4467](https://www.sqlalchemy.org/trac/ticket/4467)'
  id: totrans-3509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4467](https://www.sqlalchemy.org/trac/ticket/4467)
- en: '**[sql] [bug]**'
  id: totrans-3510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added “SQL phrase validation” to key DDL phrases that are accepted as plain
    strings, including [`ForeignKeyConstraint.on_delete`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_delete
    "sqlalchemy.schema.ForeignKeyConstraint"), [`ForeignKeyConstraint.on_update`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_update
    "sqlalchemy.schema.ForeignKeyConstraint"), [`ExcludeConstraint.using`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.using
    "sqlalchemy.dialects.postgresql.ExcludeConstraint"), [`ForeignKeyConstraint.initially`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.initially
    "sqlalchemy.schema.ForeignKeyConstraint"), for areas where a series of SQL keywords
    only are expected.Any non-space characters that suggest the phrase would need
    to be quoted will raise a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError"). This change is related to the series of changes
    committed as part of [#4481](https://www.sqlalchemy.org/trac/ticket/4481).
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对被接受为纯字符串的关键 DDL 短语的“SQL 短语验证”，包括 [`ForeignKeyConstraint.on_delete`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_delete
    "sqlalchemy.schema.ForeignKeyConstraint")、[`ForeignKeyConstraint.on_update`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_update
    "sqlalchemy.schema.ForeignKeyConstraint")、[`ExcludeConstraint.using`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.using
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")、[`ForeignKeyConstraint.initially`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.initially
    "sqlalchemy.schema.ForeignKeyConstraint") 等，用于预期仅有一系列 SQL 关键字的区域。任何非空格字符都暗示该短语需要引用，则会引发
    [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")。此更改与作为
    [#4481](https://www.sqlalchemy.org/trac/ticket/4481) 一部分提交的一系列更改相关。
- en: 'References: [#4481](https://www.sqlalchemy.org/trac/ticket/4481)'
  id: totrans-3512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4481](https://www.sqlalchemy.org/trac/ticket/4481)
- en: postgresql
  id: totrans-3513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where using an uppercase name for an index type (e.g. GIST, BTREE,
    etc. ) or an EXCLUDE constraint would treat it as an identifier to be quoted,
    rather than rendering it as is. The new behavior converts these types to lowercase
    and ensures they contain only valid SQL characters.
  id: totrans-3515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用大写名称作为索引类型（例如 GIST、BTREE 等）或 EXCLUDE 约束时将其视为要引用的标识符的问题，而不是直接呈现。新行为将这些类型转换为小写，并确保它们只包含有效的
    SQL 字符。
- en: 'References: [#4473](https://www.sqlalchemy.org/trac/ticket/4473)'
  id: totrans-3516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4473](https://www.sqlalchemy.org/trac/ticket/4473)
- en: tests
  id: totrans-3517
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-3518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [change]**'
- en: The test system has removed support for Nose, which is unmaintained for several
    years and is producing warnings under Python 3\. The test suite is currently standardized
    on Pytest. Pull request courtesy Parth Shandilya.
  id: totrans-3519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试系统已移除对多年未维护且在 Python 3 下产生警告的 Nose 的支持。测试套件目前标准化为 Pytest。感谢 Parth Shandilya
    提交的拉取请求。
- en: 'References: [#4460](https://www.sqlalchemy.org/trac/ticket/4460)'
  id: totrans-3520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4460](https://www.sqlalchemy.org/trac/ticket/4460)
- en: misc
  id: totrans-3521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '**[bug] [ext]**'
  id: totrans-3522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Implemented a more comprehensive assignment operation (e.g. “bulk replace”)
    when using association proxy with sets or dictionaries. Fixes the problem of redundant
    proxy objects being created to replace the old ones, which leads to excessive
    events and SQL and in the case of unique constraints will cause the flush to fail.
  id: totrans-3523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用关联代理与集合或字典时，实现了更全面的赋值操作（例如“批量替换”）。修复了创建冗余代理对象以替换旧对象的问题，这导致了过多的事件和 SQL，在唯一约束的情况下将导致刷新失败。
- en: See also
  id: totrans-3524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Implemented bulk replace for sets, dicts with AssociationProxy](migration_13.html#change-2642)'
  id: totrans-3525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用关联代理对集合、字典实现批量替换](migration_13.html#change-2642)'
- en: 'References: [#2642](https://www.sqlalchemy.org/trac/ticket/2642)'
  id: totrans-3526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2642](https://www.sqlalchemy.org/trac/ticket/2642)
- en: orm
  id: totrans-3527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the behavior of [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") in conjunction with loader options, in particular
    wildcard operations as well as [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only"). The polymorphic object will be more accurately targeted
    so that column-level options on the entity will correctly take effect.The issue
    is a continuation of the same kinds of things fixed in [#4468](https://www.sqlalchemy.org/trac/ticket/4468).
  id: totrans-3529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 与加载器选项一起的行为，特别是通配符操作以及 [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")。多态对象将更准确地被定位，以便实体的列级选项能够正确生效。该问题是在 [#4468](https://www.sqlalchemy.org/trac/ticket/4468)
    中修复的相同类型的问题的延续。
- en: 'References: [#4469](https://www.sqlalchemy.org/trac/ticket/4469)'
  id: totrans-3530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4469](https://www.sqlalchemy.org/trac/ticket/4469)
- en: orm declarative
  id: totrans-3531
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Added some helper exceptions that invoke when a mapping based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection"), or `AutoMap` is used before
    the mapping is ready to be used, which contain descriptive information on the
    class, rather than falling through into other failure modes that are less informative.
  id: totrans-3533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一些辅助异常，当基于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")、[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")或`AutoMap`的映射在映射准备好使用之前被使用时，这些异常会被触发，其中包含有关类的描述性信息，而不是陷入其他不够信息丰富的失败模式中。
- en: 'References: [#4470](https://www.sqlalchemy.org/trac/ticket/4470)'
  id: totrans-3534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4470](https://www.sqlalchemy.org/trac/ticket/4470)
- en: sql
  id: totrans-3535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fully removed the behavior of strings passed directly as components of a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") or [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object being coerced to [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs automatically; the warning that has
    been emitted is now an ArgumentError or in the case of order_by() / group_by()
    a CompileError. This has emitted a warning since version 1.0 however its presence
    continues to create concerns for the potential of mis-use of this behavior.
  id: totrans-3537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完全移除了直接作为[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的组件传递的字符串被自动强制转换为[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造的行为；自版本1.0以来已发出警告，但其存在继续引发对此行为潜在误用的担忧。
- en: 'Note that public CVEs have been posted for order_by() / group_by() which are
    resolved by this commit: CVE-2019-7164 CVE-2019-7548'
  id: totrans-3538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，已发布了关于order_by() / group_by()的公共CVE，这些CVE已通过此提交解决：CVE-2019-7164 CVE-2019-7548
- en: See also
  id: totrans-3539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Coercion of string SQL fragments to text() fully removed](migration_13.html#change-4481)'
  id: totrans-3540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将字符串SQL片段强制转换为text()已完全移除](migration_13.html#change-4481)'
- en: 'References: [#4481](https://www.sqlalchemy.org/trac/ticket/4481)'
  id: totrans-3541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4481](https://www.sqlalchemy.org/trac/ticket/4481)
- en: '**[sql] [bug]**'
  id: totrans-3542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Quoting is applied to [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") names, those which are usually but not necessarily
    generated from the [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct, at compile time if they contain illegal
    characters, such as spaces or punctuation. The names are as before treated as
    case insensitive however, meaning if the names contain uppercase or mixed case
    characters, that alone does not trigger quoting. The case insensitivity is currently
    maintained for backwards compatibility.
  id: totrans-3543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用被应用于[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function")名称，这些名称通常但不一定是从[`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")构造生成的，在编译时如果它们包含非法字符，比如空格或标点符号。这些名称仍然被视为不区分大小写，这意味着如果名称包含大写字母或混合大小写字符，仅此并不会触发引用。目前为了向后兼容性，大小写不敏感性仍然被保留。
- en: 'References: [#4467](https://www.sqlalchemy.org/trac/ticket/4467)'
  id: totrans-3544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4467](https://www.sqlalchemy.org/trac/ticket/4467)
- en: '**[sql] [bug]**'
  id: totrans-3545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added “SQL phrase validation” to key DDL phrases that are accepted as plain
    strings, including [`ForeignKeyConstraint.on_delete`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_delete
    "sqlalchemy.schema.ForeignKeyConstraint"), [`ForeignKeyConstraint.on_update`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_update
    "sqlalchemy.schema.ForeignKeyConstraint"), [`ExcludeConstraint.using`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.using
    "sqlalchemy.dialects.postgresql.ExcludeConstraint"), [`ForeignKeyConstraint.initially`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.initially
    "sqlalchemy.schema.ForeignKeyConstraint"), for areas where a series of SQL keywords
    only are expected.Any non-space characters that suggest the phrase would need
    to be quoted will raise a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError"). This change is related to the series of changes
    committed as part of [#4481](https://www.sqlalchemy.org/trac/ticket/4481).
  id: totrans-3546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对被接受为纯字符串的关键DDL短语“SQL短语验证”的支持，包括[`ForeignKeyConstraint.on_delete`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_delete
    "sqlalchemy.schema.ForeignKeyConstraint")，[`ForeignKeyConstraint.on_update`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.on_update
    "sqlalchemy.schema.ForeignKeyConstraint")，[`ExcludeConstraint.using`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.using
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")，[`ForeignKeyConstraint.initially`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.initially
    "sqlalchemy.schema.ForeignKeyConstraint")等，用于期望一系列SQL关键字的地方。任何非空格字符表明该短语需要引号的情况将引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。此更改与提交的一系列更改相关，作为[#4481](https://www.sqlalchemy.org/trac/ticket/4481)的一部分。
- en: 'References: [#4481](https://www.sqlalchemy.org/trac/ticket/4481)'
  id: totrans-3547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4481](https://www.sqlalchemy.org/trac/ticket/4481)
- en: postgresql
  id: totrans-3548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where using an uppercase name for an index type (e.g. GIST, BTREE,
    etc. ) or an EXCLUDE constraint would treat it as an identifier to be quoted,
    rather than rendering it as is. The new behavior converts these types to lowercase
    and ensures they contain only valid SQL characters.
  id: totrans-3550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用大写名称作为索引类型（例如GIST、BTREE等）或EXCLUDE约束时将其视为需要引用的标识符的问题，而不是按原样呈现。新行为将这些类型转换为小写，并确保它们只包含有效的SQL字符。
- en: 'References: [#4473](https://www.sqlalchemy.org/trac/ticket/4473)'
  id: totrans-3551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4473](https://www.sqlalchemy.org/trac/ticket/4473)
- en: tests
  id: totrans-3552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-3553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [change]**'
- en: The test system has removed support for Nose, which is unmaintained for several
    years and is producing warnings under Python 3\. The test suite is currently standardized
    on Pytest. Pull request courtesy Parth Shandilya.
  id: totrans-3554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试系统已移除对Nose的支持，Nose已多年未维护，并在Python 3下产生警告。测试套件目前标准化为Pytest。感谢Parth Shandilya的拉取请求。
- en: 'References: [#4460](https://www.sqlalchemy.org/trac/ticket/4460)'
  id: totrans-3555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4460](https://www.sqlalchemy.org/trac/ticket/4460)
- en: misc
  id: totrans-3556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-3557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Implemented a more comprehensive assignment operation (e.g. “bulk replace”)
    when using association proxy with sets or dictionaries. Fixes the problem of redundant
    proxy objects being created to replace the old ones, which leads to excessive
    events and SQL and in the case of unique constraints will cause the flush to fail.
  id: totrans-3558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用关联代理与集合或字典时，实现了更全面的赋值操作（例如“批量替换”）。修复了创建多余代理对象以替换旧对象的问题，这会导致事件和SQL过多，并且在唯一约束的情况下会导致刷新失败。
- en: See also
  id: totrans-3559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Implemented bulk replace for sets, dicts with AssociationProxy](migration_13.html#change-2642)'
  id: totrans-3560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为AssociationProxy实现了集合、字典的批量替换](migration_13.html#change-2642)'
- en: 'References: [#2642](https://www.sqlalchemy.org/trac/ticket/2642)'
  id: totrans-3561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2642](https://www.sqlalchemy.org/trac/ticket/2642)
- en: 1.3.0b2
  id: totrans-3562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.0b2
- en: 'Released: January 25, 2019'
  id: totrans-3563
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年1月25日
- en: general
  id: totrans-3564
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general] [change]**'
  id: totrans-3565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [change]**'
- en: A large change throughout the library has ensured that all objects, parameters,
    and behaviors which have been noted as deprecated or legacy now emit `DeprecationWarning`
    warnings when invoked.As the Python 3 interpreter now defaults to displaying deprecation
    warnings, as well as that modern test suites based on tools like tox and pytest
    tend to display deprecation warnings, this change should make it easier to note
    what API features are obsolete. A major rationale for this change is so that long-
    deprecated features that nonetheless still see continue to see real world use
    can finally be removed in the near future; the biggest example of this are the
    `SessionExtension` and `MapperExtension` classes as well as a handful of other
    pre-event extension hooks, which have been deprecated since version 0.7 but still
    remain in the library. Another is that several major longstanding behaviors are
    to be deprecated as well, including the threadlocal engine strategy, the convert_unicode
    flag, and non primary mappers.
  id: totrans-3566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在整个库中进行了大规模的更改，确保所有被标记为已弃用或遗留的对象、参数和行为在调用时都会发出`DeprecationWarning`警告。由于Python
    3解释器现在默认显示弃用警告，以及基于像tox和pytest这样的现代测试套件 tend to 显示弃用警告，这个更改应该使得更容易注意到哪些API功能已经过时。这个更改的一个主要原因是，长期被弃用的功能，尽管仍然在实际应用中使用，但最终将在不久的将来被移除；其中最大的例子是自版本0.7以来就已被弃用但仍然存在于库中的`SessionExtension`和`MapperExtension`类，以及少数其他的预事件扩展钩子。另一个是，还将弃用几个长期存在的行为，包括线程本地引擎策略、convert_unicode标志和非主映射器。
- en: See also
  id: totrans-3567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Deprecation warnings are emitted for all deprecated elements; new deprecations
    added](migration_13.html#change-4393-general)'
  id: totrans-3568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对所有已弃用元素发出弃用警告；添加新的弃用](migration_13.html#change-4393-general)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-3569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: orm
  id: totrans-3570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Implemented a new feature whereby the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") construct can now be used as the target of
    a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). This allows the concept of “non primary mappers”
    to no longer be necessary, as the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") is much easier to configure and automatically
    inherits all the relationships of the mapped class, as well as preserves the ability
    for loader options to work normally.
  id: totrans-3572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了一个新功能，可以将[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")构造用作[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标。这样就不再需要“非主映射器”的概念，因为[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")更容易配置，并自动继承了映射类的所有关系，同时保留了加载器选项正常工作的能力。
- en: See also
  id: totrans-3573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Relationship to AliasedClass replaces the need for non primary mappers](migration_13.html#change-4423)'
  id: totrans-3574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关系到AliasedClass取代了非主映射器的需要](migration_13.html#change-4423)'
- en: 'References: [#4423](https://www.sqlalchemy.org/trac/ticket/4423)'
  id: totrans-3575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4423](https://www.sqlalchemy.org/trac/ticket/4423)
- en: '**[orm] [feature]**'
  id: totrans-3576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new [`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event. This event complements
    the other “configure” stage mapper events with a per mapper event that receives
    each [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    right before its configure step, and additionally may be used to prevent or delay
    the configuration of specific [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects using a new return value `interfaces.EXT_SKIP`.
    See the documentation link for an example.
  id: totrans-3577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")事件。这个事件与其他“配置”阶段的映射器事件相辅相成，接收每个[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")在其配置步骤之前的事件，并且可以用于阻止或延迟特定[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的配置，使用新的返回值`interfaces.EXT_SKIP`。请参考文档链接获取示例。
- en: See also
  id: totrans-3578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-3579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: 'References: [#4397](https://www.sqlalchemy.org/trac/ticket/4397)'
  id: totrans-3580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4397](https://www.sqlalchemy.org/trac/ticket/4397)
- en: '**[orm] [change]**'
  id: totrans-3581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Added a new function [`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions") which takes over the task of the [`Session.close_all()`](../orm/session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method, which is now deprecated as this is
    confusing as a classmethod. Pull request courtesy Augustin Trancart.
  id: totrans-3582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新函数[`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions")，它接管了[`Session.close_all()`](../orm/session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all")方法的任务，后者现已被弃用，因为这会让人误解为类方法。感谢Augustin Trancart提供的拉取请求。
- en: 'References: [#4412](https://www.sqlalchemy.org/trac/ticket/4412)'
  id: totrans-3583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4412](https://www.sqlalchemy.org/trac/ticket/4412)
- en: '**[orm] [bug]**'
  id: totrans-3584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed long-standing issue where duplicate collection members would cause a backref
    to delete the association between the member and its parent object when one of
    the duplicates were removed, as occurs as a side effect of swapping two objects
    in one statement.
  id: totrans-3585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长期存在的问题，即重复的集合成员会导致反向引用在删除其中一个重复项时删除成员与其父对象之间的关联，就像在一条语句中交换两个对象的副作用一样。
- en: See also
  id: totrans-3586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Many-to-one backref checks for collection duplicates during remove operation](migration_13.html#change-1103)'
  id: totrans-3587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在删除操作期间检查多对一反向引用的集合重复项](migration_13.html#change-1103)'
- en: 'References: [#1103](https://www.sqlalchemy.org/trac/ticket/1103)'
  id: totrans-3588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1103](https://www.sqlalchemy.org/trac/ticket/1103)
- en: '**[orm] [bug]**'
  id: totrans-3589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Extended the fix first made as part of [#3287](https://www.sqlalchemy.org/trac/ticket/3287),
    where a loader option made against a subclass using a wildcard would extend itself
    to include application of the wildcard to attributes on the super classes as well,
    to a “bound” loader option as well, e.g. in an expression like `Load(SomeSubClass).load_only('foo')`.
    Columns that are part of the parent class of `SomeSubClass` will also be excluded
    in the same way as if the unbound option `load_only('foo')` were used.
  id: totrans-3590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将首次作为[#3287](https://www.sqlalchemy.org/trac/ticket/3287)的一部分进行的修复扩展，其中针对使用通配符的子类的加载器选项将扩展自身以包括将通配符应用于超类属性的“绑定”加载器选项，例如在表达式中`Load(SomeSubClass).load_only('foo')`。`SomeSubClass`的父类的列也将被排除，就像使用未绑定选项`load_only('foo')`一样。
- en: 'References: [#4373](https://www.sqlalchemy.org/trac/ticket/4373)'
  id: totrans-3591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4373](https://www.sqlalchemy.org/trac/ticket/4373)
- en: '**[orm] [bug]**'
  id: totrans-3592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved error messages emitted by the ORM in the area of loader option traversal.
    This includes early detection of mis-matched loader strategies along with a clearer
    explanation why these strategies don’t match.
  id: totrans-3593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM领域改进了由加载器选项遍历引发的错误消息。这包括早期检测到不匹配的加载器策略，以及更清晰地解释为什么这些策略不匹配。
- en: 'References: [#4433](https://www.sqlalchemy.org/trac/ticket/4433)'
  id: totrans-3594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4433](https://www.sqlalchemy.org/trac/ticket/4433)
- en: '**[orm] [bug]**'
  id: totrans-3595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “remove” event for collections is now called before the item is removed
    in the case of the `collection.remove()` method, as is consistent with the behavior
    for most other forms of collection item removal (such as `__delitem__`, replacement
    under `__setitem__`). For `pop()` methods, the remove event still fires after
    the operation.
  id: totrans-3596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`collection.remove()`方法中，现在在删除项目之前调用“remove”集合事件，这与大多数其他形式的集合项目删除行为一致（例如`__delitem__`、`__setitem__`下的替换）。对于`pop()`方法，删除事件仍然在操作之后触发。
- en: '**[orm] [bug] [engine]**'
  id: totrans-3597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Added accessors for execution options to Core and ORM, via [`Query.get_execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options"), [`Connection.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), [`Engine.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options"), and [`Executable.get_execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options"). PR courtesy Daniel
    Lister.
  id: totrans-3598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Core 和 ORM 添加了执行选项的访问器，通过 [`Query.get_execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")、[`Connection.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")、[`Engine.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options") 和 [`Executable.get_execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options")。感谢 Daniel Lister
    提交的 PR。
- en: 'References: [#4464](https://www.sqlalchemy.org/trac/ticket/4464)'
  id: totrans-3599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4464](https://www.sqlalchemy.org/trac/ticket/4464)
- en: '**[orm] [bug]**'
  id: totrans-3600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in association proxy due to [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    which caused the use of custom [`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") objects with hybrid attributes, such as the one
    demonstrated in the `dictlike-polymorphic` example to not function within an association
    proxy. The strictness that was added in [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    has been relaxed, and additional logic to accommodate for an association proxy
    that links to a custom hybrid have been added.
  id: totrans-3601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#3423](https://www.sqlalchemy.org/trac/ticket/3423) 导致关联代理中存在问题，该问题导致自定义
    [`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    对象与混合属性（例如在 `dictlike-polymorphic` 示例中演示的对象）在关联代理中无法正常工作。在 [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    中添加的严格性已经放宽，并添加了额外的逻辑以适应关联代理链接到自定义混合的情况。
- en: 'References: [#4446](https://www.sqlalchemy.org/trac/ticket/4446)'
  id: totrans-3602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4446](https://www.sqlalchemy.org/trac/ticket/4446)
- en: '**[orm] [bug]**'
  id: totrans-3603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Implemented the `.get_history()` method, which also implies availability of
    [`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history"), for [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") attributes. Previously, trying to access attribute history
    via a synonym would raise an `AttributeError`.
  id: totrans-3604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了 `.get_history()` 方法，这也意味着 [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") 属性的可用性，以前，尝试通过同义词访问属性历史会引发 `AttributeError`。
- en: 'References: [#3777](https://www.sqlalchemy.org/trac/ticket/3777)'
  id: totrans-3605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3777](https://www.sqlalchemy.org/trac/ticket/3777)
- en: orm declarative
  id: totrans-3606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-3607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Added a `__clause_element__()` method to [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") which can allow the usage of a not-fully-declared
    column or deferred attribute in a declarative mapped class slightly more friendly
    when it’s used in a constraint or other column-oriented scenario within the class
    declaration, though this still can’t work in open-ended expressions; prefer to
    call the [`ColumnProperty.expression`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.expression
    "sqlalchemy.orm.ColumnProperty.expression") attribute if receiving `TypeError`.
  id: totrans-3608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    添加了 `__clause_element__()` 方法，该方法可以在声明式映射类中更友好地使用未完全声明的列或延迟属性，当它在类声明中用于约束或其他基于列的场景时，虽然这仍无法在开放式表达式中工作；如果收到
    `TypeError`，建议调用 [`ColumnProperty.expression`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.expression
    "sqlalchemy.orm.ColumnProperty.expression") 属性。
- en: 'References: [#4372](https://www.sqlalchemy.org/trac/ticket/4372)'
  id: totrans-3609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4372](https://www.sqlalchemy.org/trac/ticket/4372)
- en: engine
  id: totrans-3610
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-3611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added public accessor `QueuePool.timeout()` that returns the configured timeout
    for a [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    object. Pull request courtesy Irina Delamare.
  id: totrans-3612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了公共访问器 `QueuePool.timeout()`，用于返回 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 对象的配置超时时间。感谢 Irina Delamare 提交的拉取请求。
- en: 'References: [#3689](https://www.sqlalchemy.org/trac/ticket/3689)'
  id: totrans-3613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3689](https://www.sqlalchemy.org/trac/ticket/3689)
- en: '**[engine] [change]**'
  id: totrans-3614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [change]**'
- en: The “threadlocal” engine strategy which has been a legacy feature of SQLAlchemy
    since around version 0.2 is now deprecated, along with the [`Pool.threadlocal`](../core/pooling.html#sqlalchemy.pool.Pool.params.threadlocal
    "sqlalchemy.pool.Pool") parameter of [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") which has no effect in most modern use cases.
  id: totrans-3615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 SQLAlchemy 大约版本 0.2 起就是遗留功能的“threadlocal”引擎策略现已弃用，以及 [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 的 [`Pool.threadlocal`](../core/pooling.html#sqlalchemy.pool.Pool.params.threadlocal
    "sqlalchemy.pool.Pool") 参数，在大多数现代用例中没有效果。
- en: See also
  id: totrans-3616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[“threadlocal” engine strategy deprecated](migration_13.html#change-4393-threadlocal)'
  id: totrans-3617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“threadlocal” 引擎策略已弃用](migration_13.html#change-4393-threadlocal)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-3618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: sql
  id: totrans-3619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Amended the [`AnsiFunction`](../core/functions.html#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") class, the base of common SQL functions
    like `CURRENT_TIMESTAMP`, to accept positional arguments like a regular ad-hoc
    function. This to suit the case that many of these functions on specific backends
    accept arguments such as “fractional seconds” precision and such. If the function
    is created with arguments, it renders the parenthesis and the arguments. If no
    arguments are present, the compiler generates the non-parenthesized form.
  id: totrans-3621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 [`AnsiFunction`](../core/functions.html#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") 类，这是像 `CURRENT_TIMESTAMP` 这样的常见 SQL 函数的基类，以接受像常规即席函数一样的位置参数。这适用于特定后端上许多这些函数接受“分数秒”精度等参数的情况。如果函数是带参数创建的，则呈现括号和参数。如果没有参数，则编译器生成非括号形式。
- en: 'References: [#4386](https://www.sqlalchemy.org/trac/ticket/4386)'
  id: totrans-3622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4386](https://www.sqlalchemy.org/trac/ticket/4386)
- en: '**[sql] [change]**'
  id: totrans-3623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change]**'
- en: The [`create_engine.convert_unicode`](../core/engines.html#sqlalchemy.create_engine.params.convert_unicode
    "sqlalchemy.create_engine") and [`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String") parameters have been deprecated. These parameters were
    built back when most Python DBAPIs had little to no support for Python Unicode
    objects, and SQLAlchemy needed to take on the very complex task of marshalling
    data and SQL strings between Unicode and bytestrings throughout the system in
    a performant way. Thanks to Python 3, DBAPIs were compelled to adapt to Unicode-aware
    APIs and today all DBAPIs supported by SQLAlchemy support Unicode natively, including
    on Python 2, allowing this long-lived and very complicated feature to finally
    be (mostly) removed. There are still of course a few Python 2 edge cases where
    SQLAlchemy has to deal with Unicode however these are handled automatically; in
    modern use, there should be no need for end-user interaction with these flags.
  id: totrans-3624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.convert_unicode`](../core/engines.html#sqlalchemy.create_engine.params.convert_unicode
    "sqlalchemy.create_engine") 和 [`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String") 参数已经弃用。这些参数是在大多数 Python DBAPI 几乎不支持 Python Unicode
    对象时构建的，而 SQLAlchemy 需要以高性能的方式在整个系统中处理 Unicode 和字节串之间的数据和 SQL 字符串的复杂任务。多亏了 Python
    3，DBAPI 被迫适应了 Unicode 感知的 API，今天由 SQLAlchemy 支持的所有 DBAPI 都原生支持 Unicode，包括在 Python
    2 上，这样就可以最终（大部分）删除这个长期存在且非常复杂的功能。当然，在一些 Python 2 的边缘情况下，SQLAlchemy 仍然需要处理 Unicode，但这些情况都是自动处理的；在现代使用中，用户不应该与这些标志进行交互。'
- en: See also
  id: totrans-3625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[convert_unicode parameters deprecated](migration_13.html#change-4393-convertunicode)'
  id: totrans-3626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[弃用 convert_unicode 参数](migration_13.html#change-4393-convertunicode)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-3627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: mssql
  id: totrans-3628
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The `literal_processor` for the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") and [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes now render an `N` character in front
    of the literal string expression as required by SQL Server for Unicode string
    values rendered in SQL expressions.
  id: totrans-3630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    和 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型的 `literal_processor` 现在在 SQL 表达式中呈现一个 `N` 字符，这是 SQL Server 要求的用于呈现 SQL 表达式中的
    Unicode 字符串值的方式。'
- en: 'References: [#4442](https://www.sqlalchemy.org/trac/ticket/4442)'
  id: totrans-3631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4442](https://www.sqlalchemy.org/trac/ticket/4442)
- en: misc
  id: totrans-3632
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-3633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a regression in 1.3.0b1 caused by [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    where association proxy objects that access an attribute that’s only present on
    a polymorphic subclass would raise an `AttributeError` even though the actual
    instance being accessed was an instance of that subclass.
  id: totrans-3634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.3.0b1中由[#3423](https://www.sqlalchemy.org/trac/ticket/3423)引起的回归，其中访问仅存在于多态子类上的属性的关联代理对象会引发`AttributeError`，尽管实际被访问的实例是该子类的实例。
- en: 'References: [#4401](https://www.sqlalchemy.org/trac/ticket/4401)'
  id: totrans-3635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4401](https://www.sqlalchemy.org/trac/ticket/4401)
- en: general
  id: totrans-3636
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [change]**'
  id: totrans-3637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [change]**'
- en: A large change throughout the library has ensured that all objects, parameters,
    and behaviors which have been noted as deprecated or legacy now emit `DeprecationWarning`
    warnings when invoked.As the Python 3 interpreter now defaults to displaying deprecation
    warnings, as well as that modern test suites based on tools like tox and pytest
    tend to display deprecation warnings, this change should make it easier to note
    what API features are obsolete. A major rationale for this change is so that long-
    deprecated features that nonetheless still see continue to see real world use
    can finally be removed in the near future; the biggest example of this are the
    `SessionExtension` and `MapperExtension` classes as well as a handful of other
    pre-event extension hooks, which have been deprecated since version 0.7 but still
    remain in the library. Another is that several major longstanding behaviors are
    to be deprecated as well, including the threadlocal engine strategy, the convert_unicode
    flag, and non primary mappers.
  id: totrans-3638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在整个库中进行了大规模的更改，确保所有被标记为弃用或遗留的对象、参数和行为在调用时现在会发出`DeprecationWarning`警告。由于Python
    3解释器现在默认显示弃用警告，以及基于像tox和pytest这样的现代测试套件 tend to 显示弃用警告，这个更改应该使得更容易注意到哪些API功能已经过时。这个更改的一个主要原因是，长期弃用的功能，尽管仍然在实际应用中使用，但最终还是会在不久的将来被移除；其中最大的例子是`SessionExtension`和`MapperExtension`类以及一些其他自版本0.7以来就已被弃用但仍然存在于库中的预事件扩展钩子。另一个是，还将弃用几个长期存在的行为，包括线程本地引擎策略、convert_unicode标志和非主映射器。
- en: See also
  id: totrans-3639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Deprecation warnings are emitted for all deprecated elements; new deprecations
    added](migration_13.html#change-4393-general)'
  id: totrans-3640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对所有弃用元素发出弃用警告；添加新的弃用](migration_13.html#change-4393-general)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-3641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: orm
  id: totrans-3642
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Implemented a new feature whereby the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") construct can now be used as the target of
    a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). This allows the concept of “non primary mappers”
    to no longer be necessary, as the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") is much easier to configure and automatically
    inherits all the relationships of the mapped class, as well as preserves the ability
    for loader options to work normally.
  id: totrans-3644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了一个新功能，使得[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")构造现在可以作为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标使用。这样就不再需要“非主映射器”的概念，因为[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")更容易配置，并且自动继承了映射类的所有关系，同时保留了加载器选项正常工作的能力。
- en: See also
  id: totrans-3645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Relationship to AliasedClass replaces the need for non primary mappers](migration_13.html#change-4423)'
  id: totrans-3646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[AliasedClass替代非主映射器的关系](migration_13.html#change-4423)'
- en: 'References: [#4423](https://www.sqlalchemy.org/trac/ticket/4423)'
  id: totrans-3647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4423](https://www.sqlalchemy.org/trac/ticket/4423)
- en: '**[orm] [feature]**'
  id: totrans-3648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new [`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event. This event complements
    the other “configure” stage mapper events with a per mapper event that receives
    each [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    right before its configure step, and additionally may be used to prevent or delay
    the configuration of specific [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects using a new return value `interfaces.EXT_SKIP`.
    See the documentation link for an example.
  id: totrans-3649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")事件。该事件与其他“配置”阶段的映射器事件相辅相成，接收每个[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")在其配置步骤之前的事件，并且还可以用于阻止或延迟特定[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的配置，使用新的返回值`interfaces.EXT_SKIP`。请参阅文档链接以获取示例。
- en: See also
  id: totrans-3650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-3651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: 'References: [#4397](https://www.sqlalchemy.org/trac/ticket/4397)'
  id: totrans-3652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4397](https://www.sqlalchemy.org/trac/ticket/4397)
- en: '**[orm] [change]**'
  id: totrans-3653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Added a new function [`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions") which takes over the task of the [`Session.close_all()`](../orm/session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method, which is now deprecated as this is
    confusing as a classmethod. Pull request courtesy Augustin Trancart.
  id: totrans-3654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新函数[`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions")，它接管了[`Session.close_all()`](../orm/session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all")方法的任务，该方法现已被弃用，因为这会让人误解为一个类方法。感谢Augustin Trancart的拉取请求。
- en: 'References: [#4412](https://www.sqlalchemy.org/trac/ticket/4412)'
  id: totrans-3655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4412](https://www.sqlalchemy.org/trac/ticket/4412)
- en: '**[orm] [bug]**'
  id: totrans-3656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed long-standing issue where duplicate collection members would cause a backref
    to delete the association between the member and its parent object when one of
    the duplicates were removed, as occurs as a side effect of swapping two objects
    in one statement.
  id: totrans-3657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长期存在的问题，即重复集合成员会导致反向引用在删除其中一个重复项时删除成员与其父对象之间的关联，这是在一条语句中交换两个对象的副作用。
- en: See also
  id: totrans-3658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Many-to-one backref checks for collection duplicates during remove operation](migration_13.html#change-1103)'
  id: totrans-3659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[删除操作期间的一对多反向引用检查集合重复项](migration_13.html#change-1103)'
- en: 'References: [#1103](https://www.sqlalchemy.org/trac/ticket/1103)'
  id: totrans-3660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1103](https://www.sqlalchemy.org/trac/ticket/1103)
- en: '**[orm] [bug]**'
  id: totrans-3661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Extended the fix first made as part of [#3287](https://www.sqlalchemy.org/trac/ticket/3287),
    where a loader option made against a subclass using a wildcard would extend itself
    to include application of the wildcard to attributes on the super classes as well,
    to a “bound” loader option as well, e.g. in an expression like `Load(SomeSubClass).load_only('foo')`.
    Columns that are part of the parent class of `SomeSubClass` will also be excluded
    in the same way as if the unbound option `load_only('foo')` were used.
  id: totrans-3662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了首次作为[#3287](https://www.sqlalchemy.org/trac/ticket/3287)的一部分进行的修复，其中针对使用通配符的子类进行的加载器选项将扩展到包括对超类属性应用通配符的情况，以及“绑定”加载器选项，例如在表达式中`Load(SomeSubClass).load_only('foo')`。`SomeSubClass`的父类的列也将被排除，就像使用未绑定选项`load_only('foo')`一样。
- en: 'References: [#4373](https://www.sqlalchemy.org/trac/ticket/4373)'
  id: totrans-3663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4373](https://www.sqlalchemy.org/trac/ticket/4373)
- en: '**[orm] [bug]**'
  id: totrans-3664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved error messages emitted by the ORM in the area of loader option traversal.
    This includes early detection of mis-matched loader strategies along with a clearer
    explanation why these strategies don’t match.
  id: totrans-3665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了ORM在加载器选项遍历领域发出的错误消息。这包括对不匹配的加载器策略的早期检测，以及更清晰地解释为什么这些策略不匹配。
- en: 'References: [#4433](https://www.sqlalchemy.org/trac/ticket/4433)'
  id: totrans-3666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4433](https://www.sqlalchemy.org/trac/ticket/4433)
- en: '**[orm] [bug]**'
  id: totrans-3667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “remove” event for collections is now called before the item is removed
    in the case of the `collection.remove()` method, as is consistent with the behavior
    for most other forms of collection item removal (such as `__delitem__`, replacement
    under `__setitem__`). For `pop()` methods, the remove event still fires after
    the operation.
  id: totrans-3668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`collection.remove()`方法中，现在在删除项目之前调用集合的“remove”事件，这与大多数其他形式的集合项目删除行为一致（例如`__delitem__`、`__setitem__`下的替换）。对于`pop()`方法，删除事件仍然在操作之后触发。
- en: '**[orm] [bug] [engine]**'
  id: totrans-3669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Added accessors for execution options to Core and ORM, via [`Query.get_execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options"), [`Connection.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), [`Engine.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options"), and [`Executable.get_execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options"). PR courtesy Daniel
    Lister.
  id: totrans-3670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`Query.get_execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")、[`Connection.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")、[`Engine.get_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.get_execution_options
    "sqlalchemy.engine.Engine.get_execution_options")和[`Executable.get_execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options")为Core和ORM添加了执行选项的访问器。PR由Daniel
    Lister提供。
- en: 'References: [#4464](https://www.sqlalchemy.org/trac/ticket/4464)'
  id: totrans-3671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4464](https://www.sqlalchemy.org/trac/ticket/4464)
- en: '**[orm] [bug]**'
  id: totrans-3672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in association proxy due to [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    which caused the use of custom [`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") objects with hybrid attributes, such as the one
    demonstrated in the `dictlike-polymorphic` example to not function within an association
    proxy. The strictness that was added in [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    has been relaxed, and additional logic to accommodate for an association proxy
    that links to a custom hybrid have been added.
  id: totrans-3673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[#3423](https://www.sqlalchemy.org/trac/ticket/3423)相关的关联代理中的问题，该问题导致使用自定义[`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")对象与混合属性（例如在`dictlike-polymorphic`示例中演示的属性）在关联代理中无法正常工作。在[#3423](https://www.sqlalchemy.org/trac/ticket/3423)中添加的严格性已经放宽，并且添加了额外的逻辑以适应关联到自定义混合的关联代理。
- en: 'References: [#4446](https://www.sqlalchemy.org/trac/ticket/4446)'
  id: totrans-3674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4446](https://www.sqlalchemy.org/trac/ticket/4446)
- en: '**[orm] [bug]**'
  id: totrans-3675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Implemented the `.get_history()` method, which also implies availability of
    [`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history"), for [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") attributes. Previously, trying to access attribute history
    via a synonym would raise an `AttributeError`.
  id: totrans-3676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了`.get_history()`方法，这也意味着对于[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")属性的[`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")的可用性。以前，尝试通过同义词访问属性历史会引发`AttributeError`。
- en: 'References: [#3777](https://www.sqlalchemy.org/trac/ticket/3777)'
  id: totrans-3677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3777](https://www.sqlalchemy.org/trac/ticket/3777)
- en: orm declarative
  id: totrans-3678
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-3679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm声明式]**'
- en: Added a `__clause_element__()` method to [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") which can allow the usage of a not-fully-declared
    column or deferred attribute in a declarative mapped class slightly more friendly
    when it’s used in a constraint or other column-oriented scenario within the class
    declaration, though this still can’t work in open-ended expressions; prefer to
    call the [`ColumnProperty.expression`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.expression
    "sqlalchemy.orm.ColumnProperty.expression") attribute if receiving `TypeError`.
  id: totrans-3680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")添加了一个`__clause_element__()`方法，当在声明映射类中的约束或其他基于列的场景中使用未完全声明的列或延迟属性时，这可以使其在类声明中稍微更友好，尽管这仍然无法在开放式表达式中工作；如果收到`TypeError`，请优先调用[`ColumnProperty.expression`](../orm/internals.html#sqlalchemy.orm.ColumnProperty.expression
    "sqlalchemy.orm.ColumnProperty.expression")属性。
- en: 'References: [#4372](https://www.sqlalchemy.org/trac/ticket/4372)'
  id: totrans-3681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4372](https://www.sqlalchemy.org/trac/ticket/4372)
- en: engine
  id: totrans-3682
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-3683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [功能]**'
- en: Added public accessor `QueuePool.timeout()` that returns the configured timeout
    for a [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    object. Pull request courtesy Irina Delamare.
  id: totrans-3684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了公共访问器`QueuePool.timeout()`，返回[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")对象的配置超时时间。感谢Irina Delamare的拉取请求。
- en: 'References: [#3689](https://www.sqlalchemy.org/trac/ticket/3689)'
  id: totrans-3685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3689](https://www.sqlalchemy.org/trac/ticket/3689)
- en: '**[engine] [change]**'
  id: totrans-3686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [更改]**'
- en: The “threadlocal” engine strategy which has been a legacy feature of SQLAlchemy
    since around version 0.2 is now deprecated, along with the [`Pool.threadlocal`](../core/pooling.html#sqlalchemy.pool.Pool.params.threadlocal
    "sqlalchemy.pool.Pool") parameter of [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") which has no effect in most modern use cases.
  id: totrans-3687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “threadlocal”引擎策略自SQLAlchemy大约0.2版本以来一直是一个传统功能，现已被弃用，以及[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")的[`Pool.threadlocal`](../core/pooling.html#sqlalchemy.pool.Pool.params.threadlocal
    "sqlalchemy.pool.Pool")参数在大多数现代用例中没有效果。
- en: See also
  id: totrans-3688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“threadlocal” engine strategy deprecated](migration_13.html#change-4393-threadlocal)'
  id: totrans-3689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“threadlocal”引擎策略已弃用](migration_13.html#change-4393-threadlocal)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-3690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: sql
  id: totrans-3691
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Amended the [`AnsiFunction`](../core/functions.html#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") class, the base of common SQL functions
    like `CURRENT_TIMESTAMP`, to accept positional arguments like a regular ad-hoc
    function. This to suit the case that many of these functions on specific backends
    accept arguments such as “fractional seconds” precision and such. If the function
    is created with arguments, it renders the parenthesis and the arguments. If no
    arguments are present, the compiler generates the non-parenthesized form.
  id: totrans-3693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`AnsiFunction`](../core/functions.html#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")类，这是常见SQL函数的基础，如`CURRENT_TIMESTAMP`，以接受位置参数，就像常规的临时函数一样。这样可以适应许多特定后端的这些函数接受参数，例如“分数秒”精度等情况。如果函数带有参数创建，它会呈现括号和参数。如果没有参数，则编译器生成非括号形式。
- en: 'References: [#4386](https://www.sqlalchemy.org/trac/ticket/4386)'
  id: totrans-3694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4386](https://www.sqlalchemy.org/trac/ticket/4386)
- en: '**[sql] [change]**'
  id: totrans-3695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [更改]**'
- en: The [`create_engine.convert_unicode`](../core/engines.html#sqlalchemy.create_engine.params.convert_unicode
    "sqlalchemy.create_engine") and [`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String") parameters have been deprecated. These parameters were
    built back when most Python DBAPIs had little to no support for Python Unicode
    objects, and SQLAlchemy needed to take on the very complex task of marshalling
    data and SQL strings between Unicode and bytestrings throughout the system in
    a performant way. Thanks to Python 3, DBAPIs were compelled to adapt to Unicode-aware
    APIs and today all DBAPIs supported by SQLAlchemy support Unicode natively, including
    on Python 2, allowing this long-lived and very complicated feature to finally
    be (mostly) removed. There are still of course a few Python 2 edge cases where
    SQLAlchemy has to deal with Unicode however these are handled automatically; in
    modern use, there should be no need for end-user interaction with these flags.
  id: totrans-3696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.convert_unicode`](../core/engines.html#sqlalchemy.create_engine.params.convert_unicode
    "sqlalchemy.create_engine")和[`String.convert_unicode`](../core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
    "sqlalchemy.types.String")参数已被弃用。这些参数是在大多数Python DBAPI几乎不支持Python Unicode对象时构建的，而SQLAlchemy需要以高效的方式在Unicode和字节字符串之间传递数据和SQL字符串。由于Python
    3，DBAPI被迫适应了支持Unicode的API，今天SQLAlchemy支持的所有DBAPI都原生支持Unicode，包括在Python 2上，允许这个长期存在且非常复杂的功能最终被（大部分）移除。当然，在一些Python
    2的边缘情况下，SQLAlchemy仍然需要处理Unicode，但这些都是自动处理的；在现代用法中，用户不应该需要与这些标志进行交互。'
- en: See also
  id: totrans-3697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[convert_unicode parameters deprecated](migration_13.html#change-4393-convertunicode)'
  id: totrans-3698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[convert_unicode参数已弃用](migration_13.html#change-4393-convertunicode)'
- en: 'References: [#4393](https://www.sqlalchemy.org/trac/ticket/4393)'
  id: totrans-3699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4393](https://www.sqlalchemy.org/trac/ticket/4393)
- en: mssql
  id: totrans-3700
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: The `literal_processor` for the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") and [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes now render an `N` character in front
    of the literal string expression as required by SQL Server for Unicode string
    values rendered in SQL expressions.
  id: totrans-3702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: The `literal_processor` for the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") and [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes now render an `N` character in front
    of the literal string expression as required by SQL Server for Unicode string
    values rendered in SQL expressions.
- en: 'References: [#4442](https://www.sqlalchemy.org/trac/ticket/4442)'
  id: totrans-3703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#4442](https://www.sqlalchemy.org/trac/ticket/4442)'
- en: misc
  id: totrans-3704
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-3705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a regression in 1.3.0b1 caused by [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    where association proxy objects that access an attribute that’s only present on
    a polymorphic subclass would raise an `AttributeError` even though the actual
    instance being accessed was an instance of that subclass.
  id: totrans-3706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Fixed a regression in 1.3.0b1 caused by [#3423](https://www.sqlalchemy.org/trac/ticket/3423)
    where association proxy objects that access an attribute that’s only present on
    a polymorphic subclass would raise an `AttributeError` even though the actual
    instance being accessed was an instance of that subclass.
- en: 'References: [#4401](https://www.sqlalchemy.org/trac/ticket/4401)'
  id: totrans-3707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#4401](https://www.sqlalchemy.org/trac/ticket/4401)'
- en: 1.3.0b1
  id: totrans-3708
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.0b1
- en: 'Released: November 16, 2018'
  id: totrans-3709
  prefs: []
  type: TYPE_NORMAL
  zh: 'Released: November 16, 2018'
- en: orm
  id: totrans-3710
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new feature [`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples"). Causes the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object to return keyed tuple objects unconditionally even
    if the query is against a single entity. Pull request courtesy Eric Atkin.
  id: totrans-3712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Added new feature [`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples"). Causes the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object to return keyed tuple objects unconditionally even
    if the query is against a single entity. Pull request courtesy Eric Atkin.
- en: 'This change is also **backported** to: 1.2.5'
  id: totrans-3713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'This change is also **backported** to: 1.2.5'
- en: '**[orm] [feature]**'
  id: totrans-3714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new flag [`Session.bulk_save_objects.preserve_order`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.preserve_order
    "sqlalchemy.orm.Session.bulk_save_objects") to the [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") method, which defaults to True. When
    set to False, the given mappings will be grouped into inserts and updates per
    each object type, to allow for greater opportunities to batch common operations
    together. Pull request courtesy Alessandro Cucci.
  id: totrans-3715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Added new flag [`Session.bulk_save_objects.preserve_order`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.preserve_order
    "sqlalchemy.orm.Session.bulk_save_objects") to the [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") method, which defaults to True. When
    set to False, the given mappings will be grouped into inserts and updates per
    each object type, to allow for greater opportunities to batch common operations
    together. Pull request courtesy Alessandro Cucci.
- en: '**[orm] [feature]**'
  id: totrans-3716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “selectin” loader strategy now omits the JOIN in the case of a simple one-to-many
    load, where it instead relies loads only from the related table, relying upon
    the foreign key columns of the related table in order to match up to primary keys
    in the parent table. This optimization can be disabled by setting the [`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") flag to False. Many thanks to Jayson Reis for the
    efforts on this.
  id: totrans-3717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: The “selectin” loader strategy now omits the JOIN in the case of a simple one-to-many
    load, where it instead relies loads only from the related table, relying upon
    the foreign key columns of the related table in order to match up to primary keys
    in the parent table. This optimization can be disabled by setting the [`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") flag to False. Many thanks to Jayson Reis for the
    efforts on this.
- en: See also
  id: totrans-3718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: See also
- en: '[selectin loading no longer uses JOIN for simple one-to-many](migration_13.html#change-4340)'
  id: totrans-3719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[selectin loading no longer uses JOIN for simple one-to-many](migration_13.html#change-4340)'
- en: 'References: [#4340](https://www.sqlalchemy.org/trac/ticket/4340)'
  id: totrans-3720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#4340](https://www.sqlalchemy.org/trac/ticket/4340)'
- en: '**[orm] [feature]**'
  id: totrans-3721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added `.info` dictionary to the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") class, the object that comes from calling [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") on a mapped object.
  id: totrans-3722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Added `.info` dictionary to the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") class, the object that comes from calling [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") on a mapped object.
- en: See also
  id: totrans-3723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: See also
- en: '[info dictionary added to InstanceState](migration_13.html#change-4257)'
  id: totrans-3724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[info dictionary added to InstanceState](migration_13.html#change-4257)'
- en: 'References: [#4257](https://www.sqlalchemy.org/trac/ticket/4257)'
  id: totrans-3725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4257](https://www.sqlalchemy.org/trac/ticket/4257)
- en: '**[orm] [bug]**'
  id: totrans-3726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct in conjunction with [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as `Query.select_entity_from()` would not
    apply clause adaption to the right side of the join. “lateral” introduces the
    use case of the right side of a join being correlatable. Previously, adaptation
    of this clause wasn’t considered. Note that in 1.2 only, a selectable introduced
    by [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is still not adapted due to [#4304](https://www.sqlalchemy.org/trac/ticket/4304);
    the selectable needs to be produced by the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function to be the right side of the “lateral”
    join.
  id: totrans-3727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")以及`Query.select_entity_from()`结合使用[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造时，右侧的join不会应用子句适应的bug。 “lateral”引入了join右侧可关联的用例。以前，未考虑适应此子句。请注意，在1.2版本中，由[`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")引入的可选择项仍未适应，因为[#4304](https://www.sqlalchemy.org/trac/ticket/4304)；可选择项需要由[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")函数生成，以成为“lateral” join的右侧。
- en: 'This change is also **backported** to: 1.2.12'
  id: totrans-3728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.12
- en: 'References: [#4334](https://www.sqlalchemy.org/trac/ticket/4334)'
  id: totrans-3729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4334](https://www.sqlalchemy.org/trac/ticket/4334)
- en: '**[orm] [bug]**'
  id: totrans-3730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue regarding passive_deletes=”all”, where the foreign key attribute
    of an object is maintained with its value even after the object is removed from
    its parent collection. Previously, the unit of work would set this to NULL even
    though passive_deletes indicated it should not be modified.
  id: totrans-3731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于`passive_deletes=”all”`的问题，即对象的外键属性在从其父集合中移除后仍保持其值。以前，工作单元会将其设置为NULL，尽管`passive_deletes`指示不应修改它。
- en: See also
  id: totrans-3732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[passive_deletes=’all’ will leave FK unchanged for object removed from collection](migration_13.html#change-3844)'
  id: totrans-3733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`passive_deletes=’all’`将使从集合中移除的对象的FK保持不变](migration_13.html#change-3844)'
- en: 'References: [#3844](https://www.sqlalchemy.org/trac/ticket/3844)'
  id: totrans-3734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3844](https://www.sqlalchemy.org/trac/ticket/3844)
- en: '**[orm] [bug]**'
  id: totrans-3735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the behavior of a relationship-bound many-to-one object expression
    such that the retrieval of column values on the related object are now resilient
    against the object being detached from its parent [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), even if the attribute has been expired. New features
    within the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") are used to memoize the last known value of a
    particular column attribute before its expired, so that the expression can still
    evaluate when the object is detached and expired at the same time. Error conditions
    are also improved using modern attribute state features to produce more specific
    messages as needed.
  id: totrans-3736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了与关系绑定的多对一对象表达式的行为，使得在相关对象上检索列值现在对于对象从其父[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")分离后仍具有弹性，即使属性已过期。在[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")内部使用了新功能来记忆特定列属性在其过期之前的最后已知值，以便在对象分离和过期同时发生时表达式仍然可以评估。使用现代属性状态功能改进了错误条件，以根据需要生成更具体的消息。
- en: See also
  id: totrans-3737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Improvement to the behavior of many-to-one query expressions](migration_13.html#change-4359)'
  id: totrans-3738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进了多对一查询表达式的行为](migration_13.html#change-4359)'
- en: 'References: [#4359](https://www.sqlalchemy.org/trac/ticket/4359)'
  id: totrans-3739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4359](https://www.sqlalchemy.org/trac/ticket/4359)
- en: '**[orm] [bug] [mysql] [postgresql]**'
  id: totrans-3740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [mysql] [postgresql]**'
- en: The ORM now doubles the “FOR UPDATE” clause within the subquery that renders
    in conjunction with joined eager loading in some cases, as it has been observed
    that MySQL does not lock the rows from a subquery. This means the query renders
    with two FOR UPDATE clauses; note that on some backends such as Oracle, FOR UPDATE
    clauses on subqueries are silently ignored since they are unnecessary. Additionally,
    in the case of the “OF” clause used primarily with PostgreSQL, the FOR UPDATE
    is rendered only on the inner subquery when this is used so that the selectable
    can be targeted to the table within the SELECT statement.
  id: totrans-3741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，ORM 现在会在子查询中对“FOR UPDATE”子句进行加倍渲染，因为观察到 MySQL 不会锁定子查询的行。这意味着查询将呈现两个 FOR
    UPDATE 子句；请注意，在某些后端（例如 Oracle）上，由于不必要，子查询上的 FOR UPDATE 子句会被静默忽略。此外，在主要与 PostgreSQL
    一起使用的“OF”子句的情况下，仅在使用此子句时，才会在内部子查询中呈现 FOR UPDATE，以便可选择地将可选择的目标定位到 SELECT 语句中的表。
- en: See also
  id: totrans-3742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[FOR UPDATE clause is rendered within the joined eager load subquery as well
    as outside](migration_13.html#change-4246)'
  id: totrans-3743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[FOR UPDATE 子句在连接的预加载子查询中以及外部进行渲染](migration_13.html#change-4246)'
- en: 'References: [#4246](https://www.sqlalchemy.org/trac/ticket/4246)'
  id: totrans-3744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4246](https://www.sqlalchemy.org/trac/ticket/4246)
- en: '**[orm] [bug]**'
  id: totrans-3745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Refactored [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to further clarify the individual components of structuring
    the join. This refactor adds the ability for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to determine the most appropriate “left” side of
    the join when there is more than one element in the FROM list or the query is
    against multiple entities. If more than one FROM/entity matches, an error is raised
    that asks for an ON clause to be specified to resolve the ambiguity. In particular
    this targets the regression we saw in [#4363](https://www.sqlalchemy.org/trac/ticket/4363)
    but is also of general use. The codepaths within [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") are now easier to follow and the error cases are
    decided more specifically at an earlier point in the operation.
  id: totrans-3746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    进行了重构，进一步澄清了结构化连接的各个组成部分。此重构增加了对于 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 的功能，当 FROM 列表中存在多个元素或查询涉及多个实体时，它可以确定连接的最适当的“左”侧。如果有多个
    FROM/实体匹配，将引发错误，要求指定 ON 子句以解决歧义。特别是针对我们在 [#4363](https://www.sqlalchemy.org/trac/ticket/4363)
    中看到的回归，但也具有一般用途。 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 中的代码路径现在更容易理解，并且错误情况更具体地在操作的较早阶段决定。
- en: See also
  id: totrans-3747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Query.join() handles ambiguity in deciding the “left” side more explicitly](migration_13.html#change-4365)'
  id: totrans-3748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Query.join() 在更明确地决定“左”侧的歧义方面进行了处理](migration_13.html#change-4365)'
- en: 'References: [#4365](https://www.sqlalchemy.org/trac/ticket/4365)'
  id: totrans-3749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4365](https://www.sqlalchemy.org/trac/ticket/4365)
- en: '**[orm] [bug]**'
  id: totrans-3750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed long-standing issue in [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") where a scalar subquery such as produced by [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists"), [`Query.as_scalar()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") and other derivations from [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") would not correctly be adapted when used in
    a new [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that required entity adaptation, such as when the query were turned into a union,
    or a from_self(), etc. The change removes the “no adaptation” annotation from
    the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    object produced by the [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") accessor.
  id: totrans-3751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    中的一个长期存在的问题，即标量子查询（例如由 [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")、[`Query.as_scalar()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") 以及其他从 [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") 派生的查询生成的）在被用于需要实体适配的新 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 中（例如当查询被转换为 union 或 from_self() 等时）不会被正确适配。此更改从由 [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") 访问器生成的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 对象中移除了“无适配”注释。
- en: 'References: [#4304](https://www.sqlalchemy.org/trac/ticket/4304)'
  id: totrans-3752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4304](https://www.sqlalchemy.org/trac/ticket/4304)
- en: '**[orm] [bug]**'
  id: totrans-3753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An informative exception is re-raised when a primary key value is not sortable
    in Python during an ORM flush under Python 3, such as an `Enum` that has no `__lt__()`
    method; normally Python 3 raises a `TypeError` in this case. The flush process
    sorts persistent objects by primary key in Python so the values must be sortable.
  id: totrans-3754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Python 中，在 ORM 刷新期间，当主键值不可排序时，会引发一个信息性异常，比如一个没有`__lt__()`方法的`Enum`；通常情况下，Python
    3 会在这种情况下引发一个`TypeError`。在 Python 中，刷新过程按照主键对持久化对象进行排序，因此这些值必须是可排序的。
- en: 'References: [#4232](https://www.sqlalchemy.org/trac/ticket/4232)'
  id: totrans-3755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4232](https://www.sqlalchemy.org/trac/ticket/4232)
- en: '**[orm] [bug]**'
  id: totrans-3756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the collection converter used by the `MappedCollection` class. This
    converter was used only to assert that the incoming dictionary keys matched that
    of their corresponding objects, and only during a bulk set operation. The converter
    can interfere with a custom validator or [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") listener that wants to convert
    incoming values further. The `TypeError` which would be raised by this converter
    when an incoming key didn’t match the value is removed; incoming values during
    a bulk assignment will be keyed to their value-generated key, and not the key
    that’s explicitly present in the dictionary.
  id: totrans-3757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了`MappedCollection`类使用的集合转换器。此转换器仅用于断言传入的字典键与其对应对象的键匹配，并且仅在批量设置操作期间使用。该转换器可能会干扰自定义验证器或想要进一步转换传入值的
    [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") 监听器。当传入的键与值不匹配时，此转换器将引发的`TypeError`被移除；在批量赋值期间，传入的值将被键入其生成的键，而不是显式存在于字典中的键。
- en: Overall, @converter is superseded by the [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") event handler added as part of
    [#3896](https://www.sqlalchemy.org/trac/ticket/3896).
  id: totrans-3758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总的来说，@converter 被 [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") 事件处理程序所取代，这是作为 [#3896](https://www.sqlalchemy.org/trac/ticket/3896)
    的一部分添加的。
- en: 'References: [#3604](https://www.sqlalchemy.org/trac/ticket/3604)'
  id: totrans-3759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3604](https://www.sqlalchemy.org/trac/ticket/3604)
- en: '**[orm] [bug]**'
  id: totrans-3760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new behavior to the lazy load that takes place when the “old” value of
    a many-to-one is retrieved, such that exceptions which would be raised due to
    either `lazy="raise"` or a detached session error are skipped.
  id: totrans-3761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的行为，当检索到多对一的“old”值时，会触发延迟加载，这样就可以跳过由于`lazy="raise"`或分离会话错误而引发的异常。
- en: See also
  id: totrans-3762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Many-to-one replacement won’t raise for “raiseload” or detached for “old”
    object](migration_13.html#change-4353)'
  id: totrans-3763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多对一替换不会对“raiseload”或“old”对象引发异常](migration_13.html#change-4353)'
- en: 'References: [#4353](https://www.sqlalchemy.org/trac/ticket/4353)'
  id: totrans-3764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4353](https://www.sqlalchemy.org/trac/ticket/4353)
- en: '**[orm] [bug]**'
  id: totrans-3765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A long-standing oversight in the ORM, the `__delete__` method for a many- to-one
    relationship was non-functional, e.g. for an operation such as `del a.b`. This
    is now implemented and is equivalent to setting the attribute to `None`.
  id: totrans-3766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 中长期存在的一个疏忽是，对于一对多关系的`__delete__`方法是无效的，例如对于`del a.b`这样的操作。现在已经实现了这一功能，并且等同于将属性设置为`None`。
- en: See also
  id: totrans-3767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“del” implemented for ORM attributes](migration_13.html#change-4354)'
  id: totrans-3768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为 ORM 属性实现了“del”操作](migration_13.html#change-4354)'
- en: 'References: [#4354](https://www.sqlalchemy.org/trac/ticket/4354)'
  id: totrans-3769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4354](https://www.sqlalchemy.org/trac/ticket/4354)
- en: orm declarative
  id: totrans-3770
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where declarative would not update the state of the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") as far as what attributes were present, when additional
    attributes were added or removed after the mapper attribute collections had already
    been called and memoized. Additionally, a `NotImplementedError` is now raised
    if a fully mapped attribute (e.g. column, relationship, etc.) is deleted from
    a class that is currently mapped, since the mapper will not function correctly
    if the attribute has been removed.
  id: totrans-3772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明式在调用并记忆化映射属性集合后，当添加或删除其他属性后不会更新[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")状态的 bug。此外，如果从当前已映射的类中删除了完全映射的属性（例如列、关系等），则现在会引发`NotImplementedError`，因为如果删除了属性，则映射器将无法正确运行。
- en: 'References: [#4133](https://www.sqlalchemy.org/trac/ticket/4133)'
  id: totrans-3773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4133](https://www.sqlalchemy.org/trac/ticket/4133)
- en: engine
  id: totrans-3774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-3775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new “lifo” mode to [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"), typically enabled by setting the flag [`create_engine.pool_use_lifo`](../core/engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine") to True. “lifo” mode means the same connection just
    checked in will be the first to be checked out again, allowing excess connections
    to be cleaned up from the server side during periods of the pool being only partially
    utilized. Pull request courtesy Taem Park.
  id: totrans-3776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")中添加了新的“lifo”模式，通常通过将标志[`create_engine.pool_use_lifo`](../core/engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine")设置为 True 来启用。 “lifo”模式意味着刚刚检入的相同连接将首先被再次检出，允许在池仅部分利用时从服务器端清理多余的连接。感谢
    Taem Park 提交的拉取请求。
- en: See also
  id: totrans-3777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New last-in-first-out strategy for QueuePool](migration_13.html#change-pr467)'
  id: totrans-3778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[队列池的新后进先出策略](migration_13.html#change-pr467)'
- en: sql
  id: totrans-3779
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Refactored [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") to expose a [`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause") method similar to the [`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause") and `SQLCompiler.limit_clause()`
    methods, which can be overridden by dialects to customize how GROUP BY renders.
    Pull request courtesy Samuel Chou.
  id: totrans-3781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了[`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")以公开类似于[`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause")和`SQLCompiler.limit_clause()`方法的[`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause")方法，可以被方言重写以自定义 GROUP BY
    的渲染方式。感谢 Samuel Chou 提交的拉取请求。
- en: 'This change is also **backported** to: 1.2.13'
  id: totrans-3782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.13
- en: '**[sql] [feature]**'
  id: totrans-3783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'Added [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    to the “string SQL” system that will render a meaningful string expression (`"<next
    sequence value: my_sequence>"`) when stringifying without a dialect a statement
    that includes a “sequence nextvalue” expression, rather than raising a compilation
    error.'
  id: totrans-3784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在“字符串 SQL”系统中添加了[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，当在没有方言的情况下将包含“序列下一个值”表达式的语句字符串化时，会生成一个有意义的字符串表达式（`"<next
    sequence value: my_sequence>"`），而不是引发编译错误。'
- en: 'References: [#4144](https://www.sqlalchemy.org/trac/ticket/4144)'
  id: totrans-3785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4144](https://www.sqlalchemy.org/trac/ticket/4144)
- en: '**[sql] [feature]**'
  id: totrans-3786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new naming convention tokens `column_0N_name`, `column_0_N_name`, etc.,
    which will render the names / keys / labels for all columns referenced by a particular
    constraint in a sequence. In order to accommodate for the length of such a naming
    convention, the SQL compiler’s auto-truncation feature now applies itself to constraint
    names as well, which creates a shortened, deterministically generated name for
    the constraint that will apply to a target backend without going over the character
    limit of that backend.
  id: totrans-3787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的命名约定标记`column_0N_name`、`column_0_N_name`等，将为特定约束中引用的所有列的名称/键/标签生成名称。为了适应这种命名约定的长度，SQL编译器的自动截断功能现在也适用于约束名称，这将为约束创建一个缩短的、确定性生成的名称，该名称将适用于目标后端而不会超过该后端的字符限制。
- en: The change also repairs two other issues. One is that the `column_0_key` token
    wasn’t available even though this token was documented, the other was that the
    `referred_column_0_name` token would inadvertently render the `.key` and not the
    `.name` of the column if these two values were different.
  id: totrans-3788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还修复了另外两个问题。一个是`column_0_key`标记尽管已经记录在案，但却无法使用，另一个是如果这两个值不同，`referred_column_0_name`标记会错误地呈现`.key`而不是`.name`。
- en: See also
  id: totrans-3789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New multi-column naming convention tokens, long name truncation](migration_13.html#change-3989)'
  id: totrans-3790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的多列命名约定标记，长名称截断](migration_13.html#change-3989)'
- en: 'References: [#3989](https://www.sqlalchemy.org/trac/ticket/3989)'
  id: totrans-3791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3989](https://www.sqlalchemy.org/trac/ticket/3989)
- en: '**[sql] [feature]**'
  id: totrans-3792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new logic to the “expanding IN” bound parameter feature whereby if the
    given list is empty, a special “empty set” expression that is specific to different
    backends is generated, thus allowing IN expressions to be fully dynamic including
    empty IN expressions.
  id: totrans-3793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“expanding IN”绑定参数功能添加了新逻辑，如果给定的列表为空，将生成一个特殊的“空集”表达式，该表达式针对不同的后端是特定的，从而允许IN表达式完全动态化，包括空的IN表达式。
- en: See also
  id: totrans-3794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Expanding IN feature now supports empty lists](migration_13.html#change-4271)'
  id: totrans-3795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[扩展IN功能现在支持空列表](migration_13.html#change-4271)'
- en: 'References: [#4271](https://www.sqlalchemy.org/trac/ticket/4271)'
  id: totrans-3796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4271](https://www.sqlalchemy.org/trac/ticket/4271)
- en: '**[sql] [feature]**'
  id: totrans-3797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The Python builtin `dir()` is now supported for a SQLAlchemy “properties” object,
    such as that of a Core columns collection (e.g. `.c`), `mapper.attrs`, etc. Allows
    iPython autocompletion to work as well. Pull request courtesy Uwe Korn.
  id: totrans-3798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python内置函数`dir()`现在支持SQLAlchemy的“properties”对象，比如核心列集合（例如`.c`）、`mapper.attrs`等。这样可以使iPython的自动补全功能正常工作。感谢Uwe
    Korn提供的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-3799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new feature [`FunctionElement.as_comparison()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison") which allows a SQL function
    to act as a binary comparison operation that can work within the ORM.
  id: totrans-3800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`FunctionElement.as_comparison()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison")，允许SQL函数充当可以在ORM中使用的二进制比较操作。
- en: See also
  id: totrans-3801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Binary comparison interpretation for SQL functions](migration_13.html#change-3831)'
  id: totrans-3802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQL函数的二进制比较解释](migration_13.html#change-3831)'
- en: 'References: [#3831](https://www.sqlalchemy.org/trac/ticket/3831)'
  id: totrans-3803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3831](https://www.sqlalchemy.org/trac/ticket/3831)
- en: '**[sql] [bug]**'
  id: totrans-3804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added “like” based operators as “comparison” operators, including [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") among many others, so that
    all of these operators can be the basis for an ORM “primaryjoin” condition.
  id: totrans-3805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了基于“like”操作符的“比较”操作符，包括[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") 等，以便所有这些操作符都可以成为ORM“primaryjoin”条件的基础。
- en: 'References: [#4302](https://www.sqlalchemy.org/trac/ticket/4302)'
  id: totrans-3806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4302](https://www.sqlalchemy.org/trac/ticket/4302)
- en: '**[sql] [bug]**'
  id: totrans-3807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue with [`TypeEngine.bind_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") and [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") methods where these methods would
    not work if the target type were part of a [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"), or other target type of a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"). Additionally, the SQL compiler now calls upon
    the dialect-level implementation when it renders these methods so that dialects
    can now provide for SQL-level processing for built-in types.
  id: totrans-3808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`TypeEngine.bind_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") 和 [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") 方法的问题，这些方法如果目标类型是 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 或其他 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 的目标类型，则不起作用。此外，当渲染这些方法时，SQL 编译器现在调用方言级别的实现，以便方言现在可以为内置类型提供
    SQL 级别的处理。
- en: See also
  id: totrans-3809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[TypeEngine methods bind_expression, column_expression work with Variant, type-specific
    types](migration_13.html#change-3981)'
  id: totrans-3810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TypeEngine 方法 bind_expression、column_expression 与 Variant、类型特定类型一起工作](migration_13.html#change-3981)'
- en: 'References: [#3981](https://www.sqlalchemy.org/trac/ticket/3981)'
  id: totrans-3811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3981](https://www.sqlalchemy.org/trac/ticket/3981)
- en: postgresql
  id: totrans-3812
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new PG type [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") which assists in casting table names
    to OID values. Pull request courtesy Sebastian Bank.
  id: totrans-3814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 PG 类型 [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS")，可帮助将表名转换为 OID 值。感谢 Sebastian Bank 的拉取请求。
- en: 'This change is also **backported** to: 1.2.7'
  id: totrans-3815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 至：1.2.7
- en: 'References: [#4160](https://www.sqlalchemy.org/trac/ticket/4160)'
  id: totrans-3816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4160](https://www.sqlalchemy.org/trac/ticket/4160)
- en: '**[postgresql] [feature]**'
  id: totrans-3817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added rudimental support for reflection of PostgreSQL partitioned tables, e.g.
    that relkind=’p’ is added to reflection queries that return table information.
  id: totrans-3818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 分区表的基本支持，例如，在返回表信息的反射查询中添加了 relkind=’p’。
- en: See also
  id: totrans-3819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added basic reflection support for PostgreSQL partitioned tables](migration_13.html#change-4237)'
  id: totrans-3820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为 PostgreSQL 分区表添加了基本的反射支持](migration_13.html#change-4237)'
- en: 'References: [#4237](https://www.sqlalchemy.org/trac/ticket/4237)'
  id: totrans-3821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4237](https://www.sqlalchemy.org/trac/ticket/4237)
- en: mysql
  id: totrans-3822
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-3823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Support added for the “WITH PARSER” syntax of CREATE FULLTEXT INDEX in MySQL,
    using the `mysql_with_parser` keyword argument. Reflection is also supported,
    which accommodates MySQL’s special comment format for reporting on this option
    as well. Additionally, the “FULLTEXT” and “SPATIAL” index prefixes are now reflected
    back into the `mysql_prefix` index option.
  id: totrans-3824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持在 MySQL 中使用“WITH PARSER”语法的 CREATE FULLTEXT INDEX，使用 `mysql_with_parser` 关键字参数。同时还支持反射，以适应
    MySQL 的特殊注释格式，用于报告此选项。此外，“FULLTEXT”和“SPATIAL”索引前缀现在也反映到 `mysql_prefix` 索引选项中。
- en: 'References: [#4219](https://www.sqlalchemy.org/trac/ticket/4219)'
  id: totrans-3825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4219](https://www.sqlalchemy.org/trac/ticket/4219)
- en: '**[mysql] [feature]**'
  id: totrans-3826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for the parameters in an ON DUPLICATE KEY UPDATE statement on
    MySQL to be ordered, since parameter order in a MySQL UPDATE clause is significant,
    in a similar manner as that described at [Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates).
    Pull request courtesy Maxim Bublis.
  id: totrans-3827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MySQL 中 ON DUPLICATE KEY UPDATE 语句中参数的支持，以使参数在 MySQL UPDATE 子句中的顺序有意义，类似于
    [Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    中描述的方式。感谢 Maxim Bublis 的拉取请求。
- en: See also
  id: totrans-3828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Control of parameter ordering within ON DUPLICATE KEY UPDATE](migration_13.html#change-mysql-ondupordering)'
  id: totrans-3829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在 ON DUPLICATE KEY UPDATE 中控制参数的顺序](migration_13.html#change-mysql-ondupordering)'
- en: '**[mysql] [feature]**'
  id: totrans-3830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The “pre-ping” feature of the connection pool now uses the `ping()` method of
    the DBAPI connection in the case of mysqlclient, PyMySQL and mysql-connector-python.
    Pull request courtesy Maxim Bublis.
  id: totrans-3831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池的“pre-ping”功能现在在 mysqlclient、PyMySQL 和 mysql-connector-python 中使用 DBAPI 连接的
    `ping()` 方法。感谢 Maxim Bublis 的拉取请求。
- en: See also
  id: totrans-3832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Protocol-level ping now used for pre-ping](migration_13.html#change-mysql-ping)'
  id: totrans-3833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用协议级 ping 现在用于预先 ping](migration_13.html#change-mysql-ping)'
- en: sqlite
  id: totrans-3834
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-3835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for SQLite’s json functionality via the new SQLite implementation
    for [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON"),
    [`JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON "sqlalchemy.dialects.sqlite.JSON").
    The name used for the type is `JSON`, following an example found at SQLite’s own
    documentation. Pull request courtesy Ilja Everilä.
  id: totrans-3836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的 SQLite 实现为 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")、[`JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON") 增加对 SQLite 的 json 功能的支持。类型的名称是 `JSON`，遵循 SQLite
    自己文档中找到的示例。感谢 Ilja Everilä 提交的拉取请求。
- en: See also
  id: totrans-3837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[Support for SQLite JSON Added](migration_13.html#change-3850)'
  id: totrans-3838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[增加对 SQLite JSON 的支持](migration_13.html#change-3850)'
- en: 'References: [#3850](https://www.sqlalchemy.org/trac/ticket/3850)'
  id: totrans-3839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3850](https://www.sqlalchemy.org/trac/ticket/3850)
- en: '**[sqlite] [feature]**'
  id: totrans-3840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Implemented the SQLite `ON CONFLICT` clause as understood at the DDL level,
    e.g. for primary key, unique, and CHECK constraints as well as specified on a
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to satisfy inline primary key and NOT NULL. Pull request courtesy Denis Kataev.
  id: totrans-3841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 SQLite 的 `ON CONFLICT` 子句实现为 DDL 理解的方式，例如用于主键、唯一约束和 CHECK 约束以及在 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 上指定以满足内联主键和 NOT NULL。感谢 Denis Kataev 提交的拉取请求。
- en: See also
  id: totrans-3842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[Support for SQLite ON CONFLICT in constraints added](migration_13.html#change-4360)'
  id: totrans-3843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[增加对约束中的 SQLite ON CONFLICT 的支持](migration_13.html#change-4360)'
- en: 'References: [#4360](https://www.sqlalchemy.org/trac/ticket/4360)'
  id: totrans-3844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4360](https://www.sqlalchemy.org/trac/ticket/4360)
- en: mssql
  id: totrans-3845
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-3846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added `fast_executemany=True` parameter to the SQL Server pyodbc dialect, which
    enables use of pyodbc’s new performance feature of the same name when using Microsoft
    ODBC drivers.
  id: totrans-3847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server pyodbc 方言添加了 `fast_executemany=True` 参数，当使用 Microsoft ODBC 驱动程序时，这使得可以使用
    pyodbc 的同名新性能特性。
- en: See also
  id: totrans-3848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[Support for pyodbc fast_executemany](migration_13.html#change-4158)'
  id: totrans-3849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[增加对 pyodbc fast_executemany 的支持](migration_13.html#change-4158)'
- en: 'References: [#4158](https://www.sqlalchemy.org/trac/ticket/4158)'
  id: totrans-3850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4158](https://www.sqlalchemy.org/trac/ticket/4158)
- en: '**[mssql] [bug]**'
  id: totrans-3851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Deprecated the use of [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with SQL Server in order to affect the “start” and
    “increment” of the IDENTITY value, in favor of new parameters `mssql_identity_start`
    and `mssql_identity_increment` which set these parameters directly. [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") will be used to generate real `CREATE SEQUENCE`
    DDL with SQL Server in a future release.
  id: totrans-3852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用与 SQL Server 中的 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 以影响“start”和“increment”值的使用，而更倾向于使用新参数 `mssql_identity_start`
    和 `mssql_identity_increment` 直接设置这些参数。[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 将在未来的版本中用于生成真实的 `CREATE SEQUENCE` DDL 与 SQL Server。
- en: See also
  id: totrans-3853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[New parameters to affect IDENTITY start and increment, use of Sequence deprecated](migration_13.html#change-4362)'
  id: totrans-3854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新增参数以影响 IDENTITY 的起始和增量，已弃用 Sequence 的使用](migration_13.html#change-4362)'
- en: 'References: [#4362](https://www.sqlalchemy.org/trac/ticket/4362)'
  id: totrans-3855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4362](https://www.sqlalchemy.org/trac/ticket/4362)
- en: oracle
  id: totrans-3856
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-3857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new event currently used only by the cx_Oracle dialect, `DialectEvents.setiputsizes()`.
    The event passes a dictionary of [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects to DBAPI-specific type objects
    that will be passed, after conversion to parameter names, to the cx_Oracle `cursor.setinputsizes()`
    method. This allows both visibility into the setinputsizes process as well as
    the ability to alter the behavior of what datatypes are passed to this method.
  id: totrans-3858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新事件，目前仅由 cx_Oracle 方言使用，即 `DialectEvents.setiputsizes()`。该事件将一组 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象传递给 DBAPI 特定类型的对象，这些对象在转换为参数名称后将传递给
    cx_Oracle `cursor.setinputsizes()` 方法。这允许查看 setinputsizes 过程，并能够修改传递给该方法的数据类型的行为。
- en: See also
  id: totrans-3859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  id: totrans-3860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 `setinputsizes` 实现对 cx_Oracle 数据绑定性能的精细控制](../dialects/oracle.html#cx-oracle-setinputsizes)'
- en: 'This change is also **backported** to: 1.2.9'
  id: totrans-3861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯到**：1.2.9
- en: 'References: [#4290](https://www.sqlalchemy.org/trac/ticket/4290)'
  id: totrans-3862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4290](https://www.sqlalchemy.org/trac/ticket/4290)
- en: '**[oracle] [bug]**'
  id: totrans-3863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Updated the parameters that can be sent to the cx_Oracle DBAPI to both allow
    for all current parameters as well as for future parameters not added yet. In
    addition, removed unused parameters that were deprecated in version 1.2, and additionally
    we are now defaulting “threaded” to False.
  id: totrans-3864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了可以发送到cx_Oracle DBAPI的参数，既允许所有当前参数，也允许未来尚未添加的参数。此外，删除了在版本1.2中已弃用的未使用参数，并且我们现在将“threaded”默认为False。
- en: See also
  id: totrans-3865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[cx_Oracle connect arguments modernized, deprecated parameters removed](migration_13.html#change-4369)'
  id: totrans-3866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle连接参数现代化，已弃用的参数已移除](migration_13.html#change-4369)'
- en: 'References: [#4369](https://www.sqlalchemy.org/trac/ticket/4369)'
  id: totrans-3867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4369](https://www.sqlalchemy.org/trac/ticket/4369)
- en: '**[oracle] [bug]**'
  id: totrans-3868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The Oracle dialect will no longer use the NCHAR/NCLOB datatypes represent generic
    unicode strings or clob fields in conjunction with [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") and [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") unless the flag `use_nchar_for_unicode=True` is
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    - this includes CREATE TABLE behavior as well as `setinputsizes()` for bound parameters.
    On the read side, automatic Unicode conversion under Python 2 has been added to
    CHAR/VARCHAR/CLOB result rows, to match the behavior of cx_Oracle under Python
    3\. In order to mitigate the performance hit under Python 2, SQLAlchemy’s very
    performant (when C extensions are built) native Unicode handlers are used under
    Python 2.
  id: totrans-3869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言将不再使用NCHAR/NCLOB数据类型来表示通用的Unicode字符串或clob字段，除非传递了标志`use_nchar_for_unicode=True`给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") - 这包括CREATE TABLE行为以及绑定参数的`setinputsizes()`。在读取方面，在Python
    2下已添加了CHAR/VARCHAR/CLOB结果行的自动Unicode转换，以匹配Python 3下cx_Oracle的行为。为了减轻Python 2下的性能损失，SQLAlchemy在Python
    2下使用非常高效（当构建了C扩展时）的本机Unicode处理程序。
- en: See also
  id: totrans-3870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[National char datatypes de-emphasized for generic unicode, re-enabled with
    option](migration_13.html#change-4242)'
  id: totrans-3871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通用Unicode取消强调，通过选项重新启用国家字符数据类型](migration_13.html#change-4242)'
- en: 'References: [#4242](https://www.sqlalchemy.org/trac/ticket/4242)'
  id: totrans-3872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4242](https://www.sqlalchemy.org/trac/ticket/4242)
- en: misc
  id: totrans-3873
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-3874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added new attribute [`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from") which is populated with an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") that is using this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in order to lazy load a relationship. The rationale for
    this is that it serves as a hint for the horizontal sharding feature to use, such
    that the identity token of the state can be used as the default identity token
    to use for the query within id_chooser().
  id: totrans-3875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新属性[`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from")，其中填充了使用此[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")来延迟加载关系的[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。这样做的原因是它作为水平分片功能的提示，以便使用状态的标识令牌作为查询中用于id_chooser()的默认标识令牌。
- en: 'This change is also **backported** to: 1.2.9'
  id: totrans-3876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.9
- en: 'References: [#4243](https://www.sqlalchemy.org/trac/ticket/4243)'
  id: totrans-3877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4243](https://www.sqlalchemy.org/trac/ticket/4243)
- en: '**[feature] [ext]**'
  id: totrans-3878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added new feature [`BakedQuery.to_query()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query"), which allows for a clean way of using
    one [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") as a subquery inside of another [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") without needing to refer explicitly to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-3879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`BakedQuery.to_query()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query")，允许在另一个[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")内部清晰地使用一个[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")作为子查询，而无需显式地引用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: 'References: [#4318](https://www.sqlalchemy.org/trac/ticket/4318)'
  id: totrans-3880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4318](https://www.sqlalchemy.org/trac/ticket/4318)
- en: '**[feature] [ext]**'
  id: totrans-3881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: The [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") now has standard column comparison
    operations such as [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") and [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") available when the target
    attribute is a plain column - the EXISTS expression that joins to the target table
    is rendered as usual, but the column expression is then use within the WHERE criteria
    of the EXISTS. Note that this alters the behavior of the `.contains()` method
    on the association proxy to make use of [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") when used on a column-based
    attribute.
  id: totrans-3882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当目标属性是一个普通列时，[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")现在具有标准的列比较操作，例如[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")和[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") - 连接到目标表的EXISTS表达式通常会呈现，但列表达式然后在EXISTS的WHERE条件中使用。请注意，当在基于列的属性上使用时，这改变了关联代理的`.contains()`方法的行为，使其使用[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。
- en: See also
  id: totrans-3883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[AssociationProxy now provides standard column operators for a column-oriented
    target](migration_13.html#change-4351)'
  id: totrans-3884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[AssociationProxy现在为基于列的目标提供标准的列操作符](migration_13.html#change-4351)'
- en: 'References: [#4351](https://www.sqlalchemy.org/trac/ticket/4351)'
  id: totrans-3885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4351](https://www.sqlalchemy.org/trac/ticket/4351)
- en: '**[feature] [ext]**'
  id: totrans-3886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added support for bulk [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") to the [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") class within the horizontal sharding
    extension. This also adds an additional expansion hook to the bulk update/delete
    methods `Query._execute_crud()`.
  id: totrans-3887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对水平分片扩展内的[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")类的批量[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")的支持。这还为批量更新/删除方法`Query._execute_crud()`添加了一个额外的扩展钩子。
- en: See also
  id: totrans-3888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Horizontal Sharding extension supports bulk update and delete methods](migration_13.html#change-4196)'
  id: totrans-3889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[水平分片扩展支持批量更新和删除方法](migration_13.html#change-4196)'
- en: 'References: [#4196](https://www.sqlalchemy.org/trac/ticket/4196)'
  id: totrans-3890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4196](https://www.sqlalchemy.org/trac/ticket/4196)
- en: '**[bug] [ext]**'
  id: totrans-3891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Reworked [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") to store state that’s specific
    to a parent class in a separate object, so that a single [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") can serve for multiple parent
    classes, as is intrinsic to inheritance, without any ambiguity in the state returned
    by it. A new method [`AssociationProxy.for_class()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class") is added to allow
    inspection of class-specific state.
  id: totrans-3892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")以存储特定于父类的状态在一个单独的对象中，这样一个[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")可以为多个父类提供服务，就像继承一样，而不会在其返回的状态中产生任何歧义。添加了一个新方法[`AssociationProxy.for_class()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class")，允许检查特定于类的状态。
- en: See also
  id: totrans-3893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[AssociationProxy stores class-specific state on a per-class basis](migration_13.html#change-3423)'
  id: totrans-3894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理](migration_13.html#change-3423)在每个类的基础上存储特定于类的状态。'
- en: 'References: [#3423](https://www.sqlalchemy.org/trac/ticket/3423)'
  id: totrans-3895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3423](https://www.sqlalchemy.org/trac/ticket/3423)
- en: '**[bug] [ext]**'
  id: totrans-3896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: The long-standing behavior of the association proxy collection maintaining only
    a weak reference to the parent object is reverted; the proxy will now maintain
    a strong reference to the parent for as long as the proxy collection itself is
    also in memory, eliminating the “stale association proxy” error. This change is
    being made on an experimental basis to see if any use cases arise where it causes
    side effects.
  id: totrans-3897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理集合长期维持对父对象的弱引用的行为已被恢复；现在，只要代理集合本身也在内存中，代理将始终对父对象保持强引用，消除了“过时的关联代理”错误。此更改正在试验性地进行，以查看是否会出现任何导致副作用的用例。
- en: See also
  id: totrans-3898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Features and Improvements - Core](migration_13.html#change-4268)'
  id: totrans-3899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新功能和改进 - 核心](migration_13.html#change-4268)'
- en: 'References: [#4268](https://www.sqlalchemy.org/trac/ticket/4268)'
  id: totrans-3900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4268](https://www.sqlalchemy.org/trac/ticket/4268)
- en: '**[bug] [ext]**'
  id: totrans-3901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed multiple issues regarding de-association of scalar objects with the association
    proxy. `del` now works, and additionally a new flag [`AssociationProxy.cascade_scalar_deletes`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") is added, which when set to
    True indicates that setting a scalar attribute to `None` or deleting via `del`
    will also set the source association to `None`.
  id: totrans-3902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理与标量对象解除关联的多个问题。现在`del`可以正常工作，并且还添加了一个新标志[`AssociationProxy.cascade_scalar_deletes`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy")，当设置为True时，表示将标量属性设置为`None`或通过`del`删除也会将源关联设置为`None`。
- en: See also
  id: totrans-3903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Association proxy has new cascade_scalar_deletes flag](migration_13.html#change-4308)'
  id: totrans-3904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理新增cascade_scalar_deletes标志](migration_13.html#change-4308)'
- en: 'References: [#4308](https://www.sqlalchemy.org/trac/ticket/4308)'
  id: totrans-3905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4308](https://www.sqlalchemy.org/trac/ticket/4308)
- en: orm
  id: totrans-3906
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new feature [`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples"). Causes the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object to return keyed tuple objects unconditionally even
    if the query is against a single entity. Pull request courtesy Eric Atkin.
  id: totrans-3908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples")。导致[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象无条件返回键控元组对象，即使查询针对单个实体也是如此。感谢Eric Atkin提供的拉取请求。
- en: 'This change is also **backported** to: 1.2.5'
  id: totrans-3909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.2.5
- en: '**[orm] [feature]**'
  id: totrans-3910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new flag [`Session.bulk_save_objects.preserve_order`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.preserve_order
    "sqlalchemy.orm.Session.bulk_save_objects") to the [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") method, which defaults to True. When
    set to False, the given mappings will be grouped into inserts and updates per
    each object type, to allow for greater opportunities to batch common operations
    together. Pull request courtesy Alessandro Cucci.
  id: totrans-3911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")方法添加了新标志[`Session.bulk_save_objects.preserve_order`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.preserve_order
    "sqlalchemy.orm.Session.bulk_save_objects")，默认值为True。当设置为False时，给定的映射将按对象类型分组为插入和更新，以便更好地将常见操作批量处理在一起。感谢Alessandro
    Cucci的贡献。
- en: '**[orm] [feature]**'
  id: totrans-3912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “selectin” loader strategy now omits the JOIN in the case of a simple one-to-many
    load, where it instead relies loads only from the related table, relying upon
    the foreign key columns of the related table in order to match up to primary keys
    in the parent table. This optimization can be disabled by setting the [`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship") flag to False. Many thanks to Jayson Reis for the
    efforts on this.
  id: totrans-3913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “selectin”加载策略现在在简单的一对多加载情况下省略了JOIN，而是仅从相关表中加载，依靠相关表的外键列来匹配父表中的主键。通过将[`relationship.omit_join`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.omit_join
    "sqlalchemy.orm.relationship")标志设置为False，可以禁用此优化。非常感谢Jayson Reis的努力。
- en: See also
  id: totrans-3914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[selectin loading no longer uses JOIN for simple one-to-many](migration_13.html#change-4340)'
  id: totrans-3915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[selectin loading no longer uses JOIN for simple one-to-many](migration_13.html#change-4340)'
- en: 'References: [#4340](https://www.sqlalchemy.org/trac/ticket/4340)'
  id: totrans-3916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4340](https://www.sqlalchemy.org/trac/ticket/4340)
- en: '**[orm] [feature]**'
  id: totrans-3917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added `.info` dictionary to the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") class, the object that comes from calling [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") on a mapped object.
  id: totrans-3918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")类添加了`.info`字典，该对象是从调用映射对象的[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")方法返回的对象。
- en: See also
  id: totrans-3919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[info dictionary added to InstanceState](migration_13.html#change-4257)'
  id: totrans-3920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[info dictionary added to InstanceState](migration_13.html#change-4257)'
- en: 'References: [#4257](https://www.sqlalchemy.org/trac/ticket/4257)'
  id: totrans-3921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4257](https://www.sqlalchemy.org/trac/ticket/4257)
- en: '**[orm] [bug]**'
  id: totrans-3922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct in conjunction with [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as `Query.select_entity_from()` would not
    apply clause adaption to the right side of the join. “lateral” introduces the
    use case of the right side of a join being correlatable. Previously, adaptation
    of this clause wasn’t considered. Note that in 1.2 only, a selectable introduced
    by [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is still not adapted due to [#4304](https://www.sqlalchemy.org/trac/ticket/4304);
    the selectable needs to be produced by the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function to be the right side of the “lateral”
    join.
  id: totrans-3923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在使用[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造与[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")以及`Query.select_entity_from()`结合使用时，不会将子句适配应用到连接的右侧。
    “lateral”引入了连接右侧可关联的用例。先前，未考虑适配此子句。请注意，在1.2版本中，由[`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")引入的可选择项仍未适配，原因是[#4304](https://www.sqlalchemy.org/trac/ticket/4304)；可选择项需要由[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")函数生成，以成为“lateral”连接的右侧。
- en: 'This change is also **backported** to: 1.2.12'
  id: totrans-3924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.2.12
- en: 'References: [#4334](https://www.sqlalchemy.org/trac/ticket/4334)'
  id: totrans-3925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4334](https://www.sqlalchemy.org/trac/ticket/4334)
- en: '**[orm] [bug]**'
  id: totrans-3926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue regarding passive_deletes=”all”, where the foreign key attribute
    of an object is maintained with its value even after the object is removed from
    its parent collection. Previously, the unit of work would set this to NULL even
    though passive_deletes indicated it should not be modified.
  id: totrans-3927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于 `passive_deletes="all"` 的问题，在此情况下，对象的外键属性在从其父集合中移除后仍保持其值。此前，工作单元会将其设置为
    NULL，尽管 `passive_deletes` 指示不应修改它。
- en: See also
  id: totrans-3928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[passive_deletes=’all’ will leave FK unchanged for object removed from collection](migration_13.html#change-3844)'
  id: totrans-3929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`passive_deletes=''all''` 将使从集合中删除的对象的 FK 保持不变](migration_13.html#change-3844)'
- en: 'References: [#3844](https://www.sqlalchemy.org/trac/ticket/3844)'
  id: totrans-3930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3844](https://www.sqlalchemy.org/trac/ticket/3844)
- en: '**[orm] [bug]**'
  id: totrans-3931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the behavior of a relationship-bound many-to-one object expression
    such that the retrieval of column values on the related object are now resilient
    against the object being detached from its parent [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), even if the attribute has been expired. New features
    within the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") are used to memoize the last known value of a
    particular column attribute before its expired, so that the expression can still
    evaluate when the object is detached and expired at the same time. Error conditions
    are also improved using modern attribute state features to produce more specific
    messages as needed.
  id: totrans-3932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了与关系绑定的多对一对象表达式的行为，以使对相关对象的列值的检索现在对对象被从其父 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中分离后也是弹性的，即使属性已过期。在对象过期之前，新功能在 [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 中用于备忘特定列属性的最后已知值，以便在对象同时被分离和过期时表达式仍然可以评估。错误条件也通过使用现代属性状态功能改进，以根据需要生成更具体的消息。
- en: See also
  id: totrans-3933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvement to the behavior of many-to-one query expressions](migration_13.html#change-4359)'
  id: totrans-3934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进了多对一查询表达式的行为](migration_13.html#change-4359)'
- en: 'References: [#4359](https://www.sqlalchemy.org/trac/ticket/4359)'
  id: totrans-3935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4359](https://www.sqlalchemy.org/trac/ticket/4359)
- en: '**[orm] [bug] [mysql] [postgresql]**'
  id: totrans-3936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [mysql] [postgresql]**'
- en: The ORM now doubles the “FOR UPDATE” clause within the subquery that renders
    in conjunction with joined eager loading in some cases, as it has been observed
    that MySQL does not lock the rows from a subquery. This means the query renders
    with two FOR UPDATE clauses; note that on some backends such as Oracle, FOR UPDATE
    clauses on subqueries are silently ignored since they are unnecessary. Additionally,
    in the case of the “OF” clause used primarily with PostgreSQL, the FOR UPDATE
    is rendered only on the inner subquery when this is used so that the selectable
    can be targeted to the table within the SELECT statement.
  id: totrans-3937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 现在在某些情况下在与连接式急加载同时呈现的子查询中将“FOR UPDATE”子句加倍，因为观察到 MySQL 不会锁定子查询中的行。这意味着查询呈现了两个
    FOR UPDATE 子句；请注意，在某些后端，如 Oracle，在子查询上使用 FOR UPDATE 子句时会被静默忽略，因为它们是不必要的。此外，在主要与
    PostgreSQL 一起使用的 “OF” 子句的情况下，仅当使用此子句时，在内部子查询上才呈现 FOR UPDATE，以便可选择的可针对 SELECT 语句中的表。
- en: See also
  id: totrans-3938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[FOR UPDATE clause is rendered within the joined eager load subquery as well
    as outside](migration_13.html#change-4246)'
  id: totrans-3939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[FOR UPDATE 子句在连接式急加载子查询中被呈现以及外部](migration_13.html#change-4246)'
- en: 'References: [#4246](https://www.sqlalchemy.org/trac/ticket/4246)'
  id: totrans-3940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4246](https://www.sqlalchemy.org/trac/ticket/4246)
- en: '**[orm] [bug]**'
  id: totrans-3941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Refactored [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to further clarify the individual components of structuring
    the join. This refactor adds the ability for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to determine the most appropriate “left” side of
    the join when there is more than one element in the FROM list or the query is
    against multiple entities. If more than one FROM/entity matches, an error is raised
    that asks for an ON clause to be specified to resolve the ambiguity. In particular
    this targets the regression we saw in [#4363](https://www.sqlalchemy.org/trac/ticket/4363)
    but is also of general use. The codepaths within [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") are now easier to follow and the error cases are
    decided more specifically at an earlier point in the operation.
  id: totrans-3942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 以进一步澄清连接结构的各个组件。此重构添加了当 FROM 列表中有多个元素或查询针对多个实体时，[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 确定最合适的“左”连接端的能力。如果有多个 FROM/entity 匹配，则会引发错误，要求指定
    ON 子句以解决歧义。特别是针对我们在 [#4363](https://www.sqlalchemy.org/trac/ticket/4363) 中看到的回归，但也具有一般用途。现在
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    中的代码路径更易于跟踪，并且在操作的较早阶段更具体地决定了错误情况。
- en: See also
  id: totrans-3943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Query.join() handles ambiguity in deciding the “left” side more explicitly](migration_13.html#change-4365)'
  id: totrans-3944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Query.join() 更明确地处理在决定“左”侧时的模棱两可性](migration_13.html#change-4365)'
- en: 'References: [#4365](https://www.sqlalchemy.org/trac/ticket/4365)'
  id: totrans-3945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4365](https://www.sqlalchemy.org/trac/ticket/4365)
- en: '**[orm] [bug]**'
  id: totrans-3946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed long-standing issue in [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") where a scalar subquery such as produced by [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists"), [`Query.as_scalar()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") and other derivations from [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") would not correctly be adapted when used in
    a new [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that required entity adaptation, such as when the query were turned into a union,
    or a from_self(), etc. The change removes the “no adaptation” annotation from
    the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    object produced by the [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") accessor.
  id: totrans-3947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    中长期存在的问题，其中标量子查询（例如由 [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")、[`Query.as_scalar()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") 和其他从 [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") 派生的查询生成的）在新的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 中需要实体适配时不会被正确适配，例如当查询转换为联合查询或 from_self() 时。该更改从 [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") 访问器生成的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 对象中删除了“无适配”注释。
- en: 'References: [#4304](https://www.sqlalchemy.org/trac/ticket/4304)'
  id: totrans-3948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4304](https://www.sqlalchemy.org/trac/ticket/4304)
- en: '**[orm] [bug]**'
  id: totrans-3949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An informative exception is re-raised when a primary key value is not sortable
    in Python during an ORM flush under Python 3, such as an `Enum` that has no `__lt__()`
    method; normally Python 3 raises a `TypeError` in this case. The flush process
    sorts persistent objects by primary key in Python so the values must be sortable.
  id: totrans-3950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Python 下进行 ORM 刷新时，如果主键值在 Python 中不可排序，例如 `Enum` 没有 `__lt__()` 方法，则会重新引发一个具有信息性的异常；通常情况下，在这种情况下
    Python 3 会引发一个 `TypeError`。在 Python 中，刷新过程按主键对持久化对象进行排序，因此值必须可排序。
- en: 'References: [#4232](https://www.sqlalchemy.org/trac/ticket/4232)'
  id: totrans-3951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4232](https://www.sqlalchemy.org/trac/ticket/4232)
- en: '**[orm] [bug]**'
  id: totrans-3952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the collection converter used by the `MappedCollection` class. This
    converter was used only to assert that the incoming dictionary keys matched that
    of their corresponding objects, and only during a bulk set operation. The converter
    can interfere with a custom validator or [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") listener that wants to convert
    incoming values further. The `TypeError` which would be raised by this converter
    when an incoming key didn’t match the value is removed; incoming values during
    a bulk assignment will be keyed to their value-generated key, and not the key
    that’s explicitly present in the dictionary.
  id: totrans-3953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了`MappedCollection`类使用的集合转换器。该转换器仅用于断言传入的字典键与其对应对象的键匹配，并且仅在批量设置操作期间使用。该转换器可能会干扰自定义验证器或[`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")监听器，后者希望进一步转换传入值。当传入的键与值不匹配时，该转换器引发的`TypeError`已被移除；在批量赋值期间，传入值将被键入其生成的键，而不是显式存在于字典中的键。
- en: Overall, @converter is superseded by the [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") event handler added as part of
    [#3896](https://www.sqlalchemy.org/trac/ticket/3896).
  id: totrans-3954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总体而言，@converter已被作为[#3896](https://www.sqlalchemy.org/trac/ticket/3896)的一部分添加的[`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")事件处理程序所取代。
- en: 'References: [#3604](https://www.sqlalchemy.org/trac/ticket/3604)'
  id: totrans-3955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3604](https://www.sqlalchemy.org/trac/ticket/3604)
- en: '**[orm] [bug]**'
  id: totrans-3956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Added new behavior to the lazy load that takes place when the “old” value of
    a many-to-one is retrieved, such that exceptions which would be raised due to
    either `lazy="raise"` or a detached session error are skipped.
  id: totrans-3957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的行为，当检索一对多关系的“旧”值时进行延迟加载，以便跳过由于`lazy="raise"`或分离会话错误而引发的异常。
- en: See also
  id: totrans-3958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Many-to-one replacement won’t raise for “raiseload” or detached for “old”
    object](migration_13.html#change-4353)'
  id: totrans-3959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“一对多”替换不会为“raiseload”或“old”对象引发异常](migration_13.html#change-4353)'
- en: 'References: [#4353](https://www.sqlalchemy.org/trac/ticket/4353)'
  id: totrans-3960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4353](https://www.sqlalchemy.org/trac/ticket/4353)
- en: '**[orm] [bug]**'
  id: totrans-3961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: A long-standing oversight in the ORM, the `__delete__` method for a many- to-one
    relationship was non-functional, e.g. for an operation such as `del a.b`. This
    is now implemented and is equivalent to setting the attribute to `None`.
  id: totrans-3962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM中存在已久的疏忽，对于一对多关系的`__delete__`方法是无效的，例如对于`del a.b`这样的操作。现在已实现此功能，并且等效于将属性设置为`None`。
- en: See also
  id: totrans-3963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[“del” implemented for ORM attributes](migration_13.html#change-4354)'
  id: totrans-3964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为ORM属性实现“del”](migration_13.html#change-4354)'
- en: 'References: [#4354](https://www.sqlalchemy.org/trac/ticket/4354)'
  id: totrans-3965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4354](https://www.sqlalchemy.org/trac/ticket/4354)
- en: orm declarative
  id: totrans-3966
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [声明式] [错误]**'
- en: Fixed bug where declarative would not update the state of the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") as far as what attributes were present, when additional
    attributes were added or removed after the mapper attribute collections had already
    been called and memoized. Additionally, a `NotImplementedError` is now raised
    if a fully mapped attribute (e.g. column, relationship, etc.) is deleted from
    a class that is currently mapped, since the mapper will not function correctly
    if the attribute has been removed.
  id: totrans-3968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明式在添加或删除额外属性后未更新[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")状态的错误，当映射器属性集已被调用和记忆化后。此外，如果当前映射的类从完全映射的属性（例如列、关系等）中删除了属性，则现在会引发`NotImplementedError`，因为如果删除了属性，则映射器将无法正确运行。
- en: 'References: [#4133](https://www.sqlalchemy.org/trac/ticket/4133)'
  id: totrans-3969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4133](https://www.sqlalchemy.org/trac/ticket/4133)
- en: engine
  id: totrans-3970
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-3971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new “lifo” mode to [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool"), typically enabled by setting the flag [`create_engine.pool_use_lifo`](../core/engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine") to True. “lifo” mode means the same connection just
    checked in will be the first to be checked out again, allowing excess connections
    to be cleaned up from the server side during periods of the pool being only partially
    utilized. Pull request courtesy Taem Park.
  id: totrans-3972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将新的“lifo”模式添加到[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")中，通常通过将标志[`create_engine.pool_use_lifo`](../core/engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine")设置为True来启用。 “lifo”模式意味着刚刚检查的相同连接将首先再次检出，允许在池仅部分利用时从服务器端清理多余的连接。拉取请求由Taem
    Park提供。
- en: See also
  id: totrans-3973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New last-in-first-out strategy for QueuePool](migration_13.html#change-pr467)'
  id: totrans-3974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[QueuePool的新后进先出策略](migration_13.html#change-pr467)'
- en: sql
  id: totrans-3975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Refactored [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") to expose a [`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause") method similar to the [`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause") and `SQLCompiler.limit_clause()`
    methods, which can be overridden by dialects to customize how GROUP BY renders.
    Pull request courtesy Samuel Chou.
  id: totrans-3977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构[`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")以公开类似于[`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause")和`SQLCompiler.limit_clause()`方法的[`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause")方法，可以被方言重写以自定义GROUP BY的渲染方式。拉取请求由Samuel
    Chou提供。
- en: 'This change is also **backported** to: 1.2.13'
  id: totrans-3978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.13
- en: '**[sql] [feature]**'
  id: totrans-3979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'Added [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    to the “string SQL” system that will render a meaningful string expression (`"<next
    sequence value: my_sequence>"`) when stringifying without a dialect a statement
    that includes a “sequence nextvalue” expression, rather than raising a compilation
    error.'
  id: totrans-3980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")添加到“字符串SQL”系统中，当在没有方言的情况下将包含“序列下一个值”表达式的语句字符串化时，它将生成一个有意义的字符串表达式(`"<next
    sequence value: my_sequence>"`)，而不是引发编译错误。'
- en: 'References: [#4144](https://www.sqlalchemy.org/trac/ticket/4144)'
  id: totrans-3981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4144](https://www.sqlalchemy.org/trac/ticket/4144)
- en: '**[sql] [feature]**'
  id: totrans-3982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new naming convention tokens `column_0N_name`, `column_0_N_name`, etc.,
    which will render the names / keys / labels for all columns referenced by a particular
    constraint in a sequence. In order to accommodate for the length of such a naming
    convention, the SQL compiler’s auto-truncation feature now applies itself to constraint
    names as well, which creates a shortened, deterministically generated name for
    the constraint that will apply to a target backend without going over the character
    limit of that backend.
  id: totrans-3983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的命名约定标记`column_0N_name`，`column_0_N_name`等，这将为序列中特定约束引用的所有列的名称/键/标签生成名称。为了适应这种命名约定的长度，SQL编译器的自动截断功能现在也适用于约束名称，这将为约束创建一个缩短的、确定性生成的名称，该名称将适用于目标后端而不超过该后端的字符限制。
- en: The change also repairs two other issues. One is that the `column_0_key` token
    wasn’t available even though this token was documented, the other was that the
    `referred_column_0_name` token would inadvertently render the `.key` and not the
    `.name` of the column if these two values were different.
  id: totrans-3984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还修复了另外两个问题。一个是`column_0_key`标记尽管已记录，但却不可用，另一个是如果这两个值不同，则`referred_column_0_name`标记会无意中渲染`.key`而不是`.name`的列。
- en: See also
  id: totrans-3985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New multi-column naming convention tokens, long name truncation](migration_13.html#change-3989)'
  id: totrans-3986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的多列命名约定标记，长名称截断](migration_13.html#change-3989)'
- en: 'References: [#3989](https://www.sqlalchemy.org/trac/ticket/3989)'
  id: totrans-3987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3989](https://www.sqlalchemy.org/trac/ticket/3989)
- en: '**[sql] [feature]**'
  id: totrans-3988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new logic to the “expanding IN” bound parameter feature whereby if the
    given list is empty, a special “empty set” expression that is specific to different
    backends is generated, thus allowing IN expressions to be fully dynamic including
    empty IN expressions.
  id: totrans-3989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“扩展 IN”绑定参数特性中添加了新逻辑，如果给定列表为空，则生成特定于不同后端的特殊“空集合”表达式，从而允许 IN 表达式完全动态化，包括空 IN
    表达式。
- en: See also
  id: totrans-3990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Expanding IN feature now supports empty lists](migration_13.html#change-4271)'
  id: totrans-3991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[扩展 IN 特性现在支持空列表](migration_13.html#change-4271)'
- en: 'References: [#4271](https://www.sqlalchemy.org/trac/ticket/4271)'
  id: totrans-3992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4271](https://www.sqlalchemy.org/trac/ticket/4271)
- en: '**[sql] [feature]**'
  id: totrans-3993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The Python builtin `dir()` is now supported for a SQLAlchemy “properties” object,
    such as that of a Core columns collection (e.g. `.c`), `mapper.attrs`, etc. Allows
    iPython autocompletion to work as well. Pull request courtesy Uwe Korn.
  id: totrans-3994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持 Python 内置函数 `dir()` 用于 SQLAlchemy “properties” 对象，比如 Core 列集合（例如 `.c`）、`mapper.attrs`
    等。还允许 iPython 自动补全正常工作。感谢 Uwe Korn 提交的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-3995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new feature [`FunctionElement.as_comparison()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison") which allows a SQL function
    to act as a binary comparison operation that can work within the ORM.
  id: totrans-3996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新特性 [`FunctionElement.as_comparison()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison")，它允许 SQL 函数作为二进制比较操作，在
    ORM 中起作用。
- en: See also
  id: totrans-3997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Binary comparison interpretation for SQL functions](migration_13.html#change-3831)'
  id: totrans-3998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQL 函数的二进制比较解释](migration_13.html#change-3831)'
- en: 'References: [#3831](https://www.sqlalchemy.org/trac/ticket/3831)'
  id: totrans-3999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3831](https://www.sqlalchemy.org/trac/ticket/3831)
- en: '**[sql] [bug]**'
  id: totrans-4000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added “like” based operators as “comparison” operators, including [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") among many others, so that
    all of these operators can be the basis for an ORM “primaryjoin” condition.
  id: totrans-4001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了基于“like”的操作符作为“比较”操作符，包括 [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")、[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")、[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")、[`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") 等，因此所有这些操作符都可以成为 ORM “primaryjoin”
    条件的基础。
- en: 'References: [#4302](https://www.sqlalchemy.org/trac/ticket/4302)'
  id: totrans-4002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4302](https://www.sqlalchemy.org/trac/ticket/4302)
- en: '**[sql] [bug]**'
  id: totrans-4003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue with [`TypeEngine.bind_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") and [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") methods where these methods would
    not work if the target type were part of a [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant"), or other target type of a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"). Additionally, the SQL compiler now calls upon
    the dialect-level implementation when it renders these methods so that dialects
    can now provide for SQL-level processing for built-in types.
  id: totrans-4004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`TypeEngine.bind_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") 和 [`TypeEngine.column_expression()`](../core/type_api.html#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") 方法的问题，如果目标类型是 [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 或其他 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 的一部分，则这些方法将无法工作。另外，SQL 编译器现在在呈现这些方法时调用方言级别的实现，因此方言现在可以为内置类型提供
    SQL 级别的处理。
- en: See also
  id: totrans-4005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[TypeEngine methods bind_expression, column_expression work with Variant, type-specific
    types](migration_13.html#change-3981)'
  id: totrans-4006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TypeEngine 方法 bind_expression、column_expression 可与 Variant、类型特定类型一起使用](migration_13.html#change-3981)'
- en: 'References: [#3981](https://www.sqlalchemy.org/trac/ticket/3981)'
  id: totrans-4007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3981](https://www.sqlalchemy.org/trac/ticket/3981)
- en: postgresql
  id: totrans-4008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-4009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new PG type [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") which assists in casting table names
    to OID values. Pull request courtesy Sebastian Bank.
  id: totrans-4010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的PG类型[`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS")，它帮助将表名转换为OID值。感谢Sebastian Bank的拉取请求。
- en: 'This change is also **backported** to: 1.2.7'
  id: totrans-4011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**被回溯到**：1.2.7
- en: 'References: [#4160](https://www.sqlalchemy.org/trac/ticket/4160)'
  id: totrans-4012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4160](https://www.sqlalchemy.org/trac/ticket/4160)
- en: '**[postgresql] [feature]**'
  id: totrans-4013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added rudimental support for reflection of PostgreSQL partitioned tables, e.g.
    that relkind=’p’ is added to reflection queries that return table information.
  id: totrans-4014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PostgreSQL分区表的反射基础支持，例如，将relkind=’p’添加到返回表信息的反射查询中。
- en: See also
  id: totrans-4015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added basic reflection support for PostgreSQL partitioned tables](migration_13.html#change-4237)'
  id: totrans-4016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为PostgreSQL分区表添加了基本反射支持](migration_13.html#change-4237)'
- en: 'References: [#4237](https://www.sqlalchemy.org/trac/ticket/4237)'
  id: totrans-4017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4237](https://www.sqlalchemy.org/trac/ticket/4237)
- en: mysql
  id: totrans-4018
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-4019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Support added for the “WITH PARSER” syntax of CREATE FULLTEXT INDEX in MySQL,
    using the `mysql_with_parser` keyword argument. Reflection is also supported,
    which accommodates MySQL’s special comment format for reporting on this option
    as well. Additionally, the “FULLTEXT” and “SPATIAL” index prefixes are now reflected
    back into the `mysql_prefix` index option.
  id: totrans-4020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL中添加了对CREATE FULLTEXT INDEX的“WITH PARSER”语法的支持，使用`mysql_with_parser`关键字参数。还支持反射，以适应MySQL关于此选项报告的特殊注释格式。此外，“FULLTEXT”和“SPATIAL”索引前缀现在被反射回`mysql_prefix`索引选项中。
- en: 'References: [#4219](https://www.sqlalchemy.org/trac/ticket/4219)'
  id: totrans-4021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4219](https://www.sqlalchemy.org/trac/ticket/4219)
- en: '**[mysql] [feature]**'
  id: totrans-4022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for the parameters in an ON DUPLICATE KEY UPDATE statement on
    MySQL to be ordered, since parameter order in a MySQL UPDATE clause is significant,
    in a similar manner as that described at [Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates).
    Pull request courtesy Maxim Bublis.
  id: totrans-4023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对MySQL上ON DUPLICATE KEY UPDATE语句中参数的排序支持，因为MySQL UPDATE子句中的参数顺序是重要的，类似于[Parameter
    Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)中描述的方式。感谢Maxim
    Bublis的拉取请求。
- en: See also
  id: totrans-4024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Control of parameter ordering within ON DUPLICATE KEY UPDATE](migration_13.html#change-mysql-ondupordering)'
  id: totrans-4025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[控制ON DUPLICATE KEY UPDATE中的参数顺序](migration_13.html#change-mysql-ondupordering)'
- en: '**[mysql] [feature]**'
  id: totrans-4026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The “pre-ping” feature of the connection pool now uses the `ping()` method of
    the DBAPI connection in the case of mysqlclient, PyMySQL and mysql-connector-python.
    Pull request courtesy Maxim Bublis.
  id: totrans-4027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mysqlclient、PyMySQL和mysql-connector-python的情况下，连接池的“pre-ping”功能现在使用DBAPI连接的`ping()`方法。感谢Maxim
    Bublis的拉取请求。
- en: See also
  id: totrans-4028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Protocol-level ping now used for pre-ping](migration_13.html#change-mysql-ping)'
  id: totrans-4029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[现在使用协议级别的ping进行预先ping](migration_13.html#change-mysql-ping)'
- en: sqlite
  id: totrans-4030
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-4031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for SQLite’s json functionality via the new SQLite implementation
    for [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON"),
    [`JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON "sqlalchemy.dialects.sqlite.JSON").
    The name used for the type is `JSON`, following an example found at SQLite’s own
    documentation. Pull request courtesy Ilja Everilä.
  id: totrans-4032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的SQLite实现为[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")添加了对SQLite的json功能的支持，[`JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON")。类型使用的名称是`JSON`，遵循SQLite自己文档中找到的示例。感谢Ilja Everilä的拉取请求。
- en: See also
  id: totrans-4033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for SQLite JSON Added](migration_13.html#change-3850)'
  id: totrans-4034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加了对SQLite JSON的支持](migration_13.html#change-3850)'
- en: 'References: [#3850](https://www.sqlalchemy.org/trac/ticket/3850)'
  id: totrans-4035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3850](https://www.sqlalchemy.org/trac/ticket/3850)
- en: '**[sqlite] [feature]**'
  id: totrans-4036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Implemented the SQLite `ON CONFLICT` clause as understood at the DDL level,
    e.g. for primary key, unique, and CHECK constraints as well as specified on a
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to satisfy inline primary key and NOT NULL. Pull request courtesy Denis Kataev.
  id: totrans-4037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将SQLite的`ON CONFLICT`子句实现为在DDL级别理解，例如，对于主键、唯一性和CHECK约束，以及在[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")上指定以满足内联主键和NOT NULL。感谢Denis Kataev的拉取请求。
- en: See also
  id: totrans-4038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for SQLite ON CONFLICT in constraints added](migration_13.html#change-4360)'
  id: totrans-4039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持在约束中使用SQLite ON CONFLICT](migration_13.html#change-4360)'
- en: 'References: [#4360](https://www.sqlalchemy.org/trac/ticket/4360)'
  id: totrans-4040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4360](https://www.sqlalchemy.org/trac/ticket/4360)
- en: mssql
  id: totrans-4041
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-4042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added `fast_executemany=True` parameter to the SQL Server pyodbc dialect, which
    enables use of pyodbc’s new performance feature of the same name when using Microsoft
    ODBC drivers.
  id: totrans-4043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向SQL Server pyodbc方言添加了`fast_executemany=True`参数，该参数启用了使用Microsoft ODBC驱动程序时使用pyodbc的同名新性能功能。
- en: See also
  id: totrans-4044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for pyodbc fast_executemany](migration_13.html#change-4158)'
  id: totrans-4045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持pyodbc fast_executemany](migration_13.html#change-4158)'
- en: 'References: [#4158](https://www.sqlalchemy.org/trac/ticket/4158)'
  id: totrans-4046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4158](https://www.sqlalchemy.org/trac/ticket/4158)
- en: '**[mssql] [bug]**'
  id: totrans-4047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Deprecated the use of [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with SQL Server in order to affect the “start” and
    “increment” of the IDENTITY value, in favor of new parameters `mssql_identity_start`
    and `mssql_identity_increment` which set these parameters directly. [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") will be used to generate real `CREATE SEQUENCE`
    DDL with SQL Server in a future release.
  id: totrans-4048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用了在SQL Server中使用[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")来影响“start”和“increment”值的做法，而是使用新参数`mssql_identity_start`和`mssql_identity_increment`直接设置这些参数。在未来的版本中，[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")将用于生成真正的`CREATE SEQUENCE`DDL与SQL Server。
- en: See also
  id: totrans-4049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New parameters to affect IDENTITY start and increment, use of Sequence deprecated](migration_13.html#change-4362)'
  id: totrans-4050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[影响IDENTITY起始和增量的新参数，已弃用Sequence的使用](migration_13.html#change-4362)'
- en: 'References: [#4362](https://www.sqlalchemy.org/trac/ticket/4362)'
  id: totrans-4051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4362](https://www.sqlalchemy.org/trac/ticket/4362)
- en: oracle
  id: totrans-4052
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-4053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new event currently used only by the cx_Oracle dialect, `DialectEvents.setiputsizes()`.
    The event passes a dictionary of [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects to DBAPI-specific type objects
    that will be passed, after conversion to parameter names, to the cx_Oracle `cursor.setinputsizes()`
    method. This allows both visibility into the setinputsizes process as well as
    the ability to alter the behavior of what datatypes are passed to this method.
  id: totrans-4054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新事件，目前仅由cx_Oracle方言使用，`DialectEvents.setiputsizes()`。该事件传递了一个[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象的字典，这些对象将被传递给DBAPI特定类型的对象，然后转换为参数名称，传递给cx_Oracle
    `cursor.setinputsizes()`方法。这既允许查看setinputsizes过程，也允许更改传递给此方法的数据类型的行为。
- en: See also
  id: totrans-4055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  id: totrans-4056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通过setinputsizes对cx_Oracle数据绑定性能进行细粒度控制](../dialects/oracle.html#cx-oracle-setinputsizes)'
- en: 'This change is also **backported** to: 1.2.9'
  id: totrans-4057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.9
- en: 'References: [#4290](https://www.sqlalchemy.org/trac/ticket/4290)'
  id: totrans-4058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4290](https://www.sqlalchemy.org/trac/ticket/4290)
- en: '**[oracle] [bug]**'
  id: totrans-4059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Updated the parameters that can be sent to the cx_Oracle DBAPI to both allow
    for all current parameters as well as for future parameters not added yet. In
    addition, removed unused parameters that were deprecated in version 1.2, and additionally
    we are now defaulting “threaded” to False.
  id: totrans-4060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了可以发送到cx_Oracle DBAPI的参数，既允许所有当前参数，也允许尚未添加的未来参数。此外，删除了在1.2版本中已弃用的未使用参数，并且我们现在将“threaded”默认为False。
- en: See also
  id: totrans-4061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[cx_Oracle connect arguments modernized, deprecated parameters removed](migration_13.html#change-4369)'
  id: totrans-4062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle连接参数现代化，已弃用的参数已移除](migration_13.html#change-4369)'
- en: 'References: [#4369](https://www.sqlalchemy.org/trac/ticket/4369)'
  id: totrans-4063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4369](https://www.sqlalchemy.org/trac/ticket/4369)
- en: '**[oracle] [bug]**'
  id: totrans-4064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle dialect will no longer use the NCHAR/NCLOB datatypes represent generic
    unicode strings or clob fields in conjunction with [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") and [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") unless the flag `use_nchar_for_unicode=True` is
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    - this includes CREATE TABLE behavior as well as `setinputsizes()` for bound parameters.
    On the read side, automatic Unicode conversion under Python 2 has been added to
    CHAR/VARCHAR/CLOB result rows, to match the behavior of cx_Oracle under Python
    3\. In order to mitigate the performance hit under Python 2, SQLAlchemy’s very
    performant (when C extensions are built) native Unicode handlers are used under
    Python 2.
  id: totrans-4065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言将不再使用NCHAR/NCLOB数据类型来表示通用的Unicode字符串或与[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")和[`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")一起使用的clob字段，除非传递了标志`use_nchar_for_unicode=True`给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") - 这包括CREATE TABLE行为以及绑定参数的`setinputsizes()`。在读取方面，在Python
    2下已经添加了对CHAR/VARCHAR/CLOB结果行的自动Unicode转换，以匹配Python 3下cx_Oracle的行为。为了减轻Python 2下的性能损失，SQLAlchemy在Python
    2下使用非常高效（当构建了C扩展时）的本机Unicode处理程序。
- en: See also
  id: totrans-4066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[National char datatypes de-emphasized for generic unicode, re-enabled with
    option](migration_13.html#change-4242)'
  id: totrans-4067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通用Unicode取消强调的国家字符数据类型，通过选项重新启用](migration_13.html#change-4242)'
- en: 'References: [#4242](https://www.sqlalchemy.org/trac/ticket/4242)'
  id: totrans-4068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4242](https://www.sqlalchemy.org/trac/ticket/4242)
- en: misc
  id: totrans-4069
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-4070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added new attribute [`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from") which is populated with an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") that is using this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in order to lazy load a relationship. The rationale for
    this is that it serves as a hint for the horizontal sharding feature to use, such
    that the identity token of the state can be used as the default identity token
    to use for the query within id_chooser().
  id: totrans-4071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新属性[`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from")，其中填充了正在使用此[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")来延迟加载关系的[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。这样做的原因是它作为水平分片功能的提示，以便可以使用状态的标识令牌作为查询中用于id_chooser()的默认标识令牌。
- en: 'This change is also **backported** to: 1.2.9'
  id: totrans-4072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.2.9
- en: 'References: [#4243](https://www.sqlalchemy.org/trac/ticket/4243)'
  id: totrans-4073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4243](https://www.sqlalchemy.org/trac/ticket/4243)
- en: '**[feature] [ext]**'
  id: totrans-4074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added new feature [`BakedQuery.to_query()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query"), which allows for a clean way of using
    one [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") as a subquery inside of another [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") without needing to refer explicitly to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-4075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`BakedQuery.to_query()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query")，允许在另一个[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")内部以子查询的干净方式使用一个[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")，而无需明确引用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: 'References: [#4318](https://www.sqlalchemy.org/trac/ticket/4318)'
  id: totrans-4076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4318](https://www.sqlalchemy.org/trac/ticket/4318)
- en: '**[feature] [ext]**'
  id: totrans-4077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: The [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") now has standard column comparison
    operations such as [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") and [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") available when the target
    attribute is a plain column - the EXISTS expression that joins to the target table
    is rendered as usual, but the column expression is then use within the WHERE criteria
    of the EXISTS. Note that this alters the behavior of the `.contains()` method
    on the association proxy to make use of [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") when used on a column-based
    attribute.
  id: totrans-4078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 现在具有标准的列比较操作，例如 [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 和 [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")，当目标属性是普通列时 - 与目标表连接的 EXISTS
    表达式通常呈现，但列表达式然后在 EXISTS 的 WHERE 条件中使用。请注意，这会改变关联代理上的 `.contains()` 方法的行为，使其在基于列的属性上使用
    [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。'
- en: See also
  id: totrans-4079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[AssociationProxy now provides standard column operators for a column-oriented
    target](migration_13.html#change-4351)'
  id: totrans-4080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理现在为基于列的目标提供标准列操作符](migration_13.html#change-4351)'
- en: 'References: [#4351](https://www.sqlalchemy.org/trac/ticket/4351)'
  id: totrans-4081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4351](https://www.sqlalchemy.org/trac/ticket/4351)
- en: '**[feature] [ext]**'
  id: totrans-4082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [扩展]**'
- en: Added support for bulk [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") to the [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") class within the horizontal sharding
    extension. This also adds an additional expansion hook to the bulk update/delete
    methods `Query._execute_crud()`.
  id: totrans-4083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为水平分片扩展中的 [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") 类添加了对批量 [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 和 [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") 的支持。这还为批量更新/删除方法 `Query._execute_crud()` 添加了一个额外的扩展挂钩。
- en: See also
  id: totrans-4084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Horizontal Sharding extension supports bulk update and delete methods](migration_13.html#change-4196)'
  id: totrans-4085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[水平分片扩展支持批量更新和删除方法](migration_13.html#change-4196)'
- en: 'References: [#4196](https://www.sqlalchemy.org/trac/ticket/4196)'
  id: totrans-4086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4196](https://www.sqlalchemy.org/trac/ticket/4196)
- en: '**[bug] [ext]**'
  id: totrans-4087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Reworked [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") to store state that’s specific
    to a parent class in a separate object, so that a single [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") can serve for multiple parent
    classes, as is intrinsic to inheritance, without any ambiguity in the state returned
    by it. A new method [`AssociationProxy.for_class()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class") is added to allow
    inspection of class-specific state.
  id: totrans-4088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计 [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")，以将特定于父类的状态存储在单独的对象中，以便单个 [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 可以为多个父类提供服务，这是继承固有的，而不会有任何模糊性。添加了一个新方法
    [`AssociationProxy.for_class()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class") 以允许检查特定于类的状态。
- en: See also
  id: totrans-4089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[AssociationProxy stores class-specific state on a per-class basis](migration_13.html#change-3423)'
  id: totrans-4090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理在每个类的基础上存储特定于类的状态](migration_13.html#change-3423)'
- en: 'References: [#3423](https://www.sqlalchemy.org/trac/ticket/3423)'
  id: totrans-4091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3423](https://www.sqlalchemy.org/trac/ticket/3423)
- en: '**[bug] [ext]**'
  id: totrans-4092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: The long-standing behavior of the association proxy collection maintaining only
    a weak reference to the parent object is reverted; the proxy will now maintain
    a strong reference to the parent for as long as the proxy collection itself is
    also in memory, eliminating the “stale association proxy” error. This change is
    being made on an experimental basis to see if any use cases arise where it causes
    side effects.
  id: totrans-4093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于关联代理集合仅保持对父对象的弱引用的长期行为已恢复；现在，只要代理集合本身也在内存中，代理将始终对父对象保持强引用，从而消除了“过期的关联代理”错误。此更改正在试验性地进行，以查看是否会出现任何引起副作用的用例。
- en: See also
  id: totrans-4094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Features and Improvements - Core](migration_13.html#change-4268)'
  id: totrans-4095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[核心新特性和改进](migration_13.html#change-4268)'
- en: 'References: [#4268](https://www.sqlalchemy.org/trac/ticket/4268)'
  id: totrans-4096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4268](https://www.sqlalchemy.org/trac/ticket/4268)
- en: '**[bug] [ext]**'
  id: totrans-4097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed multiple issues regarding de-association of scalar objects with the association
    proxy. `del` now works, and additionally a new flag [`AssociationProxy.cascade_scalar_deletes`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") is added, which when set to
    True indicates that setting a scalar attribute to `None` or deleting via `del`
    will also set the source association to `None`.
  id: totrans-4098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于解除标量对象与关联代理的多个问题。现在`del`能正常工作，并且还添加了一个新标志[`AssociationProxy.cascade_scalar_deletes`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy")，当设置为True时，表示将标量属性设置为`None`或通过`del`删除时也会将源关联设置为`None`。
- en: See also
  id: totrans-4099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Association proxy has new cascade_scalar_deletes flag](migration_13.html#change-4308)'
  id: totrans-4100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理有新的cascade_scalar_deletes标志](migration_13.html#change-4308)'
- en: 'References: [#4308](https://www.sqlalchemy.org/trac/ticket/4308)'
  id: totrans-4101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4308](https://www.sqlalchemy.org/trac/ticket/4308)
