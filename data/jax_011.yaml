- en: Introduction to debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试介绍
- en: 原文：[`jax.readthedocs.io/en/latest/debugging.html`](https://jax.readthedocs.io/en/latest/debugging.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/debugging.html`](https://jax.readthedocs.io/en/latest/debugging.html)
- en: This section introduces you to a set of built-in JAX debugging methods — `jax.debug.print()`,
    `jax.debug.breakpoint()`, and `jax.debug.callback()` — that you can use with various
    JAX transformations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了一组内置的 JAX 调试方法 — `jax.debug.print()`、`jax.debug.breakpoint()` 和 `jax.debug.callback()`
    — 您可以将其与各种 JAX 转换一起使用。
- en: Let’s begin with `jax.debug.print()`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `jax.debug.print()` 开始。
- en: JAX `debug.print` for high-level
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX 的 `debug.print` 用于高级别
- en: '**TL;DR** Here is a rule of thumb:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**TL;DR** 这是一个经验法则：'
- en: Use `jax.debug.print()` for traced (dynamic) array values with `jax.jit()`,
    `jax.vmap()` and others.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用 `jax.jit()`、`jax.vmap()` 和其他动态数组值的跟踪，使用 `jax.debug.print()`。
- en: Use Python [`print()`](https://docs.python.org/3/library/functions.html#print
    "(in Python v3.12)") for static values, such as dtypes and array shapes.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于静态值（例如 dtypes 和数组形状），使用 Python [`print()`](https://docs.python.org/3/library/functions.html#print
    "(在 Python v3.12 中)")。
- en: 'Recall from Just-in-time compilation that when transforming a function with
    `jax.jit()`, the Python code is executed with abstract tracers in place of your
    arrays. Because of this, the Python [`print()`](https://docs.python.org/3/library/functions.html#print
    "(in Python v3.12)") function will only print this tracer value:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾即时编译时，使用 `jax.jit()` 转换函数时，Python 代码在数组的抽象跟踪器的位置执行。因此，Python [`print()`](https://docs.python.org/3/library/functions.html#print
    "(在 Python v3.12 中)") 函数只会打印此跟踪器值：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Python’s `print` executes at trace-time, before the runtime values exist. If
    you want to print the actual runtime values, you can use `jax.debug.print()`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 `print` 在跟踪时间执行，即在运行时值存在之前。如果要打印实际的运行时值，可以使用 `jax.debug.print()`：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Similarly, within `jax.vmap()`, using Python’s `print` will only print the
    tracer; to print the values being mapped over, use `jax.debug.print()`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在 `jax.vmap()` 内部，使用 Python 的 `print` 只会打印跟踪器；要打印正在映射的值，请使用 `jax.debug.print()`：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here’s the result with `jax.lax.map()`, which is a sequential map rather than
    a vectorization:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用 `jax.lax.map()` 的结果，它是一个顺序映射而不是向量化：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice the order is different, as `jax.vmap()` and `jax.lax.map()` compute the
    same results in different ways. When debugging, the evaluation order details are
    exactly what you may need to inspect.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意顺序不同，如 `jax.vmap()` 和 `jax.lax.map()` 以不同方式计算相同结果。在调试时，评估顺序的细节正是您可能需要检查的。
- en: Below is an example with `jax.grad()`, where `jax.debug.print()` only prints
    the forward pass. In this case, the behavior is similar to Python’s [`print()`](https://docs.python.org/3/library/functions.html#print
    "(in Python v3.12)"), but it’s consistent if you apply `jax.jit()` during the
    call.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个关于 `jax.grad()` 的示例，其中 `jax.debug.print()` 仅打印前向传递。在这种情况下，行为类似于 Python
    的 [`print()`](https://docs.python.org/3/library/functions.html#print "(在 Python
    v3.12 中)")，但如果在调用期间应用 `jax.jit()`，它是一致的。
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Sometimes, when the arguments don’t depend on one another, calls to `jax.debug.print()`
    may print them in a different order when staged out with a JAX transformation.
    If you need the original order, such as `x: ...` first and then `y: ...` second,
    add the `ordered=True` parameter.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '有时，当参数彼此不依赖时，调用 `jax.debug.print()` 可能会以不同的顺序打印它们，当使用 JAX 转换进行分阶段时。如果需要原始顺序，例如首先是
    `x: ...` 然后是 `y: ...`，请添加 `ordered=True` 参数。'
- en: 'For example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE10]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To learn more about `jax.debug.print()` and its Sharp Bits, refer to Advanced
    debugging.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `jax.debug.print()` 及其详细信息，请参阅高级调试。
- en: JAX `debug.breakpoint` for `pdb`-like debugging
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX 的 `debug.breakpoint` 用于类似 `pdb` 的调试
- en: '**TL;DR** Use `jax.debug.breakpoint()` to pause the execution of your JAX program
    to inspect values.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**TL;DR** 使用 `jax.debug.breakpoint()` 暂停您的 JAX 程序执行以检查值。'
- en: To pause your compiled JAX program during certain points during debugging, you
    can use `jax.debug.breakpoint()`. The prompt is similar to Python `pdb`, and it
    allows you to inspect the values in the call stack. In fact, `jax.debug.breakpoint()`
    is an application of `jax.debug.callback()` that captures information about the
    call stack.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要在调试期间暂停编译的 JAX 程序的某些点，您可以使用 `jax.debug.breakpoint()`。提示类似于 Python 的 `pdb`，允许您检查调用堆栈中的值。实际上，`jax.debug.breakpoint()`
    是 `jax.debug.callback()` 的应用，用于捕获有关调用堆栈的信息。
- en: To print all available commands during a `breakpoint` debugging session, use
    the `help` command. (Full debugger commands, the Sharp Bits, its strengths and
    limitations are covered in Advanced debugging.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 `breakpoint` 调试会话期间打印所有可用命令，请使用 `help` 命令。（完整的调试器命令、其强大之处及限制在高级调试中有详细介绍。）
- en: 'Here is an example of what a debugger session might look like:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是调试器会话可能看起来的示例：
- en: '[PRE13]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![JAX debugger](img/fee2c7fc0abba538525eb7922811ec87.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![JAX调试器](img/fee2c7fc0abba538525eb7922811ec87.png)'
- en: 'For value-dependent breakpointing, you can use runtime conditionals like `jax.lax.cond()`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于依赖值的断点，您可以使用像`jax.lax.cond()`这样的运行时条件：
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: JAX `debug.callback` for more control during debugging
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX调试回调以增强调试期间的控制
- en: Both `jax.debug.print()` and `jax.debug.breakpoint()` are implemented using
    the more flexible `jax.debug.callback()`, which gives greater control over the
    host-side logic executed via a Python callback. It is compatible with `jax.jit()`,
    `jax.vmap()`, `jax.grad()` and other transformations (refer to the Flavors of
    callback table in External callbacks for more information).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.debug.print()`和`jax.debug.breakpoint()`都使用更灵活的`jax.debug.callback()`实现，它通过Python回调执行主机端逻辑，提供更大的控制。它与`jax.jit()`、`jax.vmap()`、`jax.grad()`和其他转换兼容（有关更多信息，请参阅外部回调的回调类型表）。'
- en: 'For example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE17]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This callback is compatible with other transformations, including `jax.vmap()`
    and `jax.grad()`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此回调与其他转换兼容，包括`jax.vmap()`和`jax.grad()`：
- en: '[PRE19]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This can make `jax.debug.callback()` useful for general-purpose debugging.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得`jax.debug.callback()`在通用调试中非常有用。
- en: You can learn more about `jax.debug.callback()` and other kinds of JAX callbacks
    in External callbacks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在外部回调中了解更多关于`jax.debug.callback()`和其他类型JAX回调的信息。
- en: Next steps
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一步
- en: Check out the Advanced debugging to learn more about debugging in JAX.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 查看高级调试以了解更多关于在JAX中调试的信息。
