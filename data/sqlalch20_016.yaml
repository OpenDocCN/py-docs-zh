- en: ORM Mapped Class Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM 映射类概述
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/mapping_styles.html](https://docs.sqlalchemy.org/en/20/orm/mapping_styles.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/mapping_styles.html](https://docs.sqlalchemy.org/en/20/orm/mapping_styles.html)
- en: Overview of ORM class mapping configuration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 类映射配置概述。
- en: For readers new to the SQLAlchemy ORM and/or new to Python in general, it’s
    recommended to browse through the [ORM Quick Start](quickstart.html#orm-quickstart)
    and preferably to work through the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial),
    where ORM configuration is first introduced at [Using ORM Declarative Forms to
    Define Table Metadata](../tutorial/metadata.html#tutorial-orm-table-metadata).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对 SQLAlchemy ORM 和/或对 Python 比较新的读者来说，建议浏览[ORM 快速入门](quickstart.html#orm-quickstart)，最好是通过[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)进行学习，其中首次介绍了 ORM 配置，即[使用 ORM 声明形式定义表元数据](../tutorial/metadata.html#tutorial-orm-table-metadata)。
- en: '## ORM Mapping Styles'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '## ORM 映射风格'
- en: SQLAlchemy features two distinct styles of mapper configuration, which then
    feature further sub-options for how they are set up. The variability in mapper
    styles is present to suit a varied list of developer preferences, including the
    degree of abstraction of a user-defined class from how it is to be mapped to relational
    schema tables and columns, what kinds of class hierarchies are in use, including
    whether or not custom metaclass schemes are present, and finally if there are
    other class-instrumentation approaches present such as if Python [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    are in use simultaneously.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 具有两种不同的映射器配置风格，然后具有更多的子选项来设置它们。映射器风格的可变性存在是为了适应各种开发人员偏好的列表，包括用户定义的类与如何映射到关系模式表和列之间的抽象程度，正在使用的类层次结构的种类，包括是否存在自定义元类方案，最后，是否同时存在其他类实例化方法，例如是否同时使用
    Python [dataclasses](https://docs.python.org/3/library/dataclasses.html)。
- en: In modern SQLAlchemy, the difference between these styles is mostly superficial;
    when a particular SQLAlchemy configurational style is used to express the intent
    to map a class, the internal process of mapping the class proceeds in mostly the
    same way for each, where the end result is always a user-defined class that has
    a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") configured
    against a selectable unit, typically represented by a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and the class itself has been [instrumented](../glossary.html#term-instrumented)
    to include behaviors linked to relational operations both at the level of the
    class as well as on instances of that class. As the process is basically the same
    in all cases, classes mapped from different styles are always fully interoperable
    with each other. The protocol [`MappedClassProtocol`](mapping_api.html#sqlalchemy.orm.MappedClassProtocol
    "sqlalchemy.orm.MappedClassProtocol") can be used to indicate a mapped class when
    using type checkers such as mypy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 SQLAlchemy 中，这些风格之间的差异基本上是表面的；当使用特定的 SQLAlchemy 配置风格来表达映射类的意图时，映射类的内部映射过程大部分都是相同的，最终的结果始终是一个用户定义的类，其配置了针对可选择单元的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")，通常由[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象表示，并且该类本身已经被[instrumented](../glossary.html#term-instrumented)以包括与关系操作相关的行为，无论是在类的级别还是在该类的实例上。由于过程在所有情况下基本上都是相同的，因此从不同风格映射的类始终是完全可互操作的。协议[`MappedClassProtocol`](mapping_api.html#sqlalchemy.orm.MappedClassProtocol
    "sqlalchemy.orm.MappedClassProtocol")可用于在使用诸如 mypy 等类型检查器时指示映射类。
- en: The original mapping API is commonly referred to as “classical” style, whereas
    the more automated style of mapping is known as “declarative” style. SQLAlchemy
    now refers to these two mapping styles as **imperative mapping** and **declarative
    mapping**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的映射 API 通常被称为“经典”风格，而更自动化的映射风格称为“声明”风格。SQLAlchemy 现在将这两种映射风格称为**命令式映射**和**声明式映射**。
- en: Regardless of what style of mapping used, all ORM mappings as of SQLAlchemy
    1.4 originate from a single object known as [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry"), which is a registry of mapped classes. Using this
    registry, a set of mapper configurations can be finalized as a group, and classes
    within a particular registry may refer to each other by name within the configurational
    process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用何种映射样式，截至 SQLAlchemy 1.4 版本，所有 ORM 映射都源自一个名为[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")的单个对象，它是映射类的注册表。使用此注册表，一组映射器配置可以作为一个组进行最终确定，并且在特定注册表内的类可以在配置过程中相互通过名称引用。
- en: 'Changed in version 1.4: Declarative and classical mapping are now referred
    to as “declarative” and “imperative” mapping, and are unified internally, all
    originating from the [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    construct that represents a collection of related mappings.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本更改：声明式和经典映射现在被称为“声明式”和“命令式”映射，并在内部统一，都源自代表一组相关映射的[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 构造。
- en: '### Declarative Mapping'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '### 声明式映射'
- en: 'The **Declarative Mapping** is the typical way that mappings are constructed
    in modern SQLAlchemy. The most common pattern is to first construct a base class
    using the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass. The resulting base class, when subclassed
    will apply the declarative mapping process to all subclasses that derive from
    it, relative to a particular [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") that is local to the new base by default. The example
    below illustrates the use of a declarative base which is then used in a declarative
    table mapping:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明式映射**是现代 SQLAlchemy 中构建映射的典型方式。最常见的模式是首先使用[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 超类构建一个基类。生成的基类，当被子类化时，将对从它派生的所有子类应用声明式映射过程，相对于默认情况下新基类的本地[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")。下面的示例演示了使用声明基类，然后在声明表映射中使用它：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Above, the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class is used to generate a new base class (within
    SQLAlchemy’s documentation it’s typically referred to as `Base`, however can have
    any desired name) from which new classes to be mapped may inherit from, as above
    a new mapped class `User` is constructed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 类用于生成一个新的基类（在 SQLAlchemy 文档中通常被称为 `Base`，但可以有任何所需名称），从中新类可以继承映射，如上所示，构建了一个新的映射类
    `User`。
- en: 'Changed in version 2.0: The [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass supersedes the use of the [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") methods; the superclass approach integrates
    with [**PEP 484**](https://peps.python.org/pep-0484/) tools without the use of
    plugins. See [ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    for migration notes.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版本更改：[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 超类取代了[`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 函数和[`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") 方法的使用；超类方法与[**PEP 484**](https://peps.python.org/pep-0484/)
    工具集成，无需使用插件。有关迁移说明，请参阅[ORM 声明模型](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)。
- en: The base class refers to a [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object that maintains a collection of related mapped
    classes. as well as to a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that retains a collection of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects to which the classes are mapped.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基类指的是维护一组相关映射类的[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")对象，以及保留映射到类的一组[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象。
- en: 'The major Declarative mapping styles are further detailed in the following
    sections:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的声明式映射样式在以下各节中进一步详细说明：
- en: '[Using a Declarative Base Class](declarative_styles.html#orm-declarative-generated-base-class)
    - declarative mapping using a base class.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用声明基类](declarative_styles.html#orm-declarative-generated-base-class) - 使用基类进行声明式映射。'
- en: '[Declarative Mapping using a Decorator (no declarative base)](declarative_styles.html#orm-declarative-decorator)
    - declarative mapping using a decorator, rather than a base class.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用装饰器的声明式映射（无声明基类）](declarative_styles.html#orm-declarative-decorator) - 使用装饰器进行声明式映射，而不是使用基类。'
- en: 'Within the scope of a Declarative mapped class, there are also two varieties
    of how the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata may be declared. These include:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明式映射类的范围内，[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    元数据的声明方式也有两种变体。包括：
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)
    - table columns are declared inline within the mapped class using the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") directive (or in legacy form, using the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object directly). The [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") directive may also be optionally combined with
    type annotations using the [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    class which can provide some details about the mapped columns directly. The column
    directives, in combination with the `__tablename__` and optional `__table_args__`
    class level directives will allow the Declarative mapping process to construct
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object to be mapped.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 mapped_column() 的声明式表](declarative_tables.html#orm-declarative-table) -
    在映射类内联声明表列，使用 [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 指令（或在传统形式中，直接使用 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象）。[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 指令也可以选择性地与使用 [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 类的类型注解结合，该类可以直接提供有关映射列的一些详细信息。列指令，结合 `__tablename__`
    和可选的 `__table_args__` 类级指令，将允许声明式映射过程构建要映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。'
- en: '[Declarative with Imperative Table (a.k.a. Hybrid Declarative)](declarative_tables.html#orm-imperative-table-configuration)
    - Instead of specifying table name and attributes separately, an explicitly constructed
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object is associated with a class that is otherwise mapped declaratively. This
    style of mapping is a hybrid of “declarative” and “imperative” mapping, and applies
    to techniques such as mapping classes to [reflected](../glossary.html#term-reflected)
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, as well as mapping classes to existing Core constructs such as joins
    and subqueries.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[具有命令式表的声明式（又名混合声明式）](declarative_tables.html#orm-imperative-table-configuration)
    - 不是单独指定表名和属性，而是将显式构建的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象与以其他方式进行声明式映射的类关联。这种映射风格是“声明式”和“命令式”映射的混合，并适用于将类映射到[反射](../glossary.html#term-reflected)的
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，以及将类映射到现有的 Core 构造，如连接和子查询。'
- en: 'Documentation for Declarative mapping continues at [Mapping Classes with Declarative](declarative_mapping.html).  ###
    Imperative Mapping'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式映射的文档继续在 [使用声明式映射映射类](declarative_mapping.html) 中。### 命令式映射
- en: An **imperative** or **classical** mapping refers to the configuration of a
    mapped class using the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, where the target class does
    not include any declarative class attributes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令式**或**经典**映射是指使用 [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") 方法配置映射类的情况，其中目标类不包含任何声明类属性。'
- en: Tip
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The imperative mapping form is a lesser-used form of mapping that originates
    from the very first releases of SQLAlchemy in 2006\. It’s essentially a means
    of bypassing the Declarative system to provide a more “barebones” system of mapping,
    and does not offer modern features such as [**PEP 484**](https://peps.python.org/pep-0484/)
    support. As such, most documentation examples use Declarative forms, and it’s
    recommended that new users start with [Declarative Table](declarative_tables.html)
    configuration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 命令式映射形式是SQLAlchemy最早发布的版本中源自的较少使用的一种映射形式。它本质上是一种绕过声明式系统提供更“基础”的映射系统的方法，并且不提供像[**PEP
    484**](https://peps.python.org/pep-0484/)支持这样的现代特性。因此，大多数文档示例都使用声明式形式，并建议新用户从[声明式表](declarative_tables.html)配置开始。
- en: 'Changed in version 2.0: The [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method is now used to create classical
    mappings. The `sqlalchemy.orm.mapper()` standalone function is effectively removed.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0版本中更改：现在使用[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法来创建经典映射。`sqlalchemy.orm.mapper()`独立函数已被有效移除。
- en: 'In “classical” form, the table metadata is created separately with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct, then associated with the `User` class via
    the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, after establishing a [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") instance. Normally, a single instance of [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") shared for all mapped classes that are related to each
    other:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在“经典”形式中，表的元数据是分别用[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造创建的，然后通过[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法与`User`类关联，在建立[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")实例后。通常，一个[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")的单个实例被共享给所有彼此相关的映射类：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Information about mapped attributes, such as relationships to other classes,
    are provided via the `properties` dictionary. The example below illustrates a
    second [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, mapped to a class called `Address`, then linked to `User` via [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 提供关于映射属性的信息，比如与其他类的关系，通过`properties`字典提供。下面的示例说明了第二个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，映射到一个名为`Address`的类，然后通过[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")与`User`关联：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that classes which are mapped with the Imperative approach are **fully
    interchangeable** with those mapped with the Declarative approach. Both systems
    ultimately create the same configuration, consisting of a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), user-defined class, linked together with a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object. When we talk about “the behavior of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")”, this includes when using the Declarative system as
    well - it’s still used, just behind the scenes.  ## Mapped Class Essential Components'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用命令式方法映射的类与使用声明式方法映射的类**完全可以互换**。这两种系统最终都会创建相同的配置，包括一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、用户定义的类，以及一个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象。当我们谈论“[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的行为”时，这也包括了使用声明式系统时——它仍然被使用，只是在幕后进行。
- en: With all mapping forms, the mapping of the class can be configured in many ways
    by passing construction arguments that ultimately become part of the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object via its constructor. The parameters that are delivered
    to [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    originate from the given mapping form, including parameters passed to [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") for an Imperative mapping, or when
    using the Declarative system, from a combination of the table columns, SQL expressions
    and relationships being mapped along with that of attributes such as [__mapper_args__](declarative_config.html#orm-declarative-mapper-options).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有的映射形式，可以通过传递构造参数来配置类的映射，这些构造参数最终成为[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的一部分，通过它的构造函数传递。传递给[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的参数来自给定的映射形式，包括传递给Imperative映射的[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")的参数，或者在使用声明式系统时，来自被映射的表列、SQL表达式和关系以及[__mapper_args__](declarative_config.html#orm-declarative-mapper-options)等属性的组合。
- en: 'There are four general classes of configuration information that the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class looks for:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类寻找的配置信息大致可以分为四类：'
- en: The class to be mapped
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要映射的类
- en: This is a class that we construct in our application. There are generally no
    restrictions on the structure of this class. [[1]](#id4) When a Python class is
    mapped, there can only be **one** [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object for the class. [[2]](#id5)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们应用程序中构建的类。通常情况下，这个类的结构没有限制。[[1]](#id4) 当映射一个Python类时，对于这个类只能有**一个**[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象。[[2]](#id5)
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the class to be mapped is either a subclass of the declarative base class, or
    is handled by a decorator or function such as [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped").
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射样式进行映射时，要映射的类要么是声明基类的子类，要么由装饰器或函数（如[`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")）处理。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the class
    is passed directly as the [`map_imperatively.class_`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.class_
    "sqlalchemy.orm.registry.map_imperatively") argument.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)映射样式进行映射时，类直接作为[`map_imperatively.class_`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.class_
    "sqlalchemy.orm.registry.map_imperatively")参数传递。
- en: The table, or other from clause object
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表或其他来自子句对象
- en: In the vast majority of common cases this is an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). For more advanced use cases, it may also refer to
    any kind of [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object, the most common alternative objects
    being the [`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") and [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在绝大多数常见情况下，这是[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的实例。对于更高级的用例，它也可以指任何一种[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象，最常见的替代对象是[`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")和[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象。
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the subject table is either generated by the declarative system based on the `__tablename__`
    attribute and the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects presented, or it is established via the `__table__` attribute. These two
    styles of configuration are presented at [Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)
    and [Declarative with Imperative Table (a.k.a. Hybrid Declarative)](declarative_tables.html#orm-imperative-table-configuration).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射样式时，主题表格是根据`__tablename__`属性和所提供的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，由声明式系统生成的，或者是通过`__table__`属性建立的。这两种配置样式分别在[使用mapped_column()定义声明式表格](declarative_tables.html#orm-declarative-table)和[命令式表格与声明式（又名混合声明式）](declarative_tables.html#orm-imperative-table-configuration)中介绍。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the subject
    table is passed positionally as the [`map_imperatively.local_table`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively") argument.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)样式进行映射时，主题表格作为[`map_imperatively.local_table`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively")参数位置传递。
- en: In contrast to the “one mapper per class” requirement of a mapped class, the
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object that is the subject of the mapping
    may be associated with any number of mappings. The [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") applies modifications directly to the user-defined class,
    but does not modify the given [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in any way.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与映射类“每个类一个映射器”的要求相反，用于映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象可以与任意数量的映射关联。[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")直接对用户定义的类应用修改，但不以任何方式修改给定的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: '### The properties dictionary'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '### 属性字典'
- en: This is a dictionary of all of the attributes that will be associated with the
    mapped class. By default, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") generates entries for this dictionary derived from the
    given [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    in the form of [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") objects which each refer to an individual [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") of the mapped table. The properties dictionary will
    also contain all the other kinds of [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects to be configured, most commonly instances
    generated by the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与映射类关联的所有属性的字典。默认情况下，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")根据给定的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")从中派生出这个字典的条目，以[`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")对象的形式表示，每个对象引用映射表的单个[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。属性字典还将包含所有其他类型的要配置的[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象，最常见的是由[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造生成的实例。
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the properties dictionary is generated by the declarative system by scanning the
    class to be mapped for appropriate attributes. See the section [Defining Mapped
    Properties with Declarative](declarative_config.html#orm-declarative-properties)
    for notes on this process.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射样式进行映射时，属性字典由声明式系统通过扫描要映射的类生成。有关此过程的说明，请参阅[使用声明式定义映射属性](declarative_config.html#orm-declarative-properties)部分。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the properties
    dictionary is passed directly as the `properties` parameter to [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively"), which will pass it along to the [`Mapper.properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") parameter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)风格进行映射时，属性字典直接作为`properties`参数传递给[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")，该方法将将其传递给[`Mapper.properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper")参数。
- en: Other mapper configuration parameters
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他映射器配置参数
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    additional mapper configuration arguments are configured via the `__mapper_args__`
    class attribute. Examples of use are available at [Mapper Configuration Options
    with Declarative](declarative_config.html#orm-declarative-mapper-options).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射风格进行映射时，额外的映射器配置参数通过`__mapper_args__`类属性进行配置。使用示例可在[声明式映射器配置选项](declarative_config.html#orm-declarative-mapper-options)处找到。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, keyword arguments
    are passed to the to [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method which passes them along to
    the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)风格进行映射时，关键字参数传递给[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法，该方法将其传递给[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")类。
- en: 'The full range of parameters accepted are documented at [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").  ## Mapped Class Behavior'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可接受的所有参数范围在[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")中有文档记录。##
    映射类行为
- en: 'Across all styles of mapping using the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object, the following behaviors are common:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")对象进行所有映射风格时，以下行为是共同的：
- en: '### Default Constructor'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '### 默认构造函数'
- en: 'The [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    applies a default constructor, i.e. `__init__` method, to all mapped classes that
    don’t explicitly have their own `__init__` method. The behavior of this method
    is such that it provides a convenient keyword constructor that will accept as
    optional keyword arguments all the attributes that are named. E.g.:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")将默认构造函数，即`__init__`方法，应用于所有未明确具有自己`__init__`方法的映射类。该方法的行为是提供一个方便的关键字构造函数，将接受所有命名属性作为可选关键字参数。例如：'
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An object of type `User` above will have a constructor which allows `User`
    objects to be created as:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`User`类型的对象将具有一个构造函数，允许像这样创建`User`对象：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses)
    feature provides an alternate means of generating a default `__init__()` method
    by using Python dataclasses, and allows for a highly configurable constructor
    form.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式数据类映射](dataclasses.html#orm-declarative-native-dataclasses)功能提供了一种通过使用Python数据类生成默认`__init__()`方法的替代方法，并允许高度可配置的构造函数形式。'
- en: Warning
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `__init__()` method of the class is called only when the object is constructed
    in Python code, and **not when an object is loaded or refreshed from the database**.
    See the next section [Maintaining Non-Mapped State Across Loads](#mapped-class-load-events)
    for a primer on how to invoke special logic when objects are loaded.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象在Python代码中构造时，仅在调用类的`__init__()`方法时才会调用`__init__()`方法，**而不是在从数据库加载或刷新对象时**。请参阅下一节[在加载时保持非映射状态](#mapped-class-load-events)了解如何在加载对象时调用特殊逻辑的基础知识。
- en: A class that includes an explicit `__init__()` method will maintain that method,
    and no default constructor will be applied.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 包含显式`__init__()`方法的类将保留该方法，并且不会应用默认构造函数。
- en: To change the default constructor used, a user-defined Python callable may be
    provided to the [`registry.constructor`](mapping_api.html#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") parameter which will be used as the default constructor.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改使用的默认构造函数，可以向[`registry.constructor`](mapping_api.html#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry")参数提供用户定义的Python可调用对象，该对象将用作默认构造函数。
- en: 'The constructor also applies to imperative mappings:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数也适用于命令式映射：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The above class, mapped imperatively as described at [Imperative Mapping](#orm-imperative-mapping),
    will also feature the default constructor associated with the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类，如 [命令式映射](#orm-imperative-mapping) 中所述的那样被命令式映射，还将具有与 [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 关联的默认构造函数。
- en: 'New in version 1.4: classical mappings now support a standard configuration-level
    constructor when they are mapped via the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method.  ### Maintaining Non-Mapped
    State Across Loads'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：经典映射现在支持通过 [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") 方法进行映射时的标准配置级构造函数。### 在加载过程中保持非映射状态
- en: 'The `__init__()` method of the mapped class is invoked when the object is constructed
    directly in Python code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象直接在 Python 代码中构造时，会调用映射类的 `__init__()` 方法：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, when an object is loaded using the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `__init__()` method is **not** called:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当使用 ORM [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    加载对象时，**不**会调用 `__init__()` 方法：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The reason for this is that when loaded from the database, the operation used
    to construct the object, in the above example the `User`, is more analogous to
    **deserialization**, such as unpickling, rather than initial construction. The
    majority of the object’s important state is not being assembled for the first
    time, it’s being re-loaded from database rows.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是，从数据库加载时，用于构造对象的操作，如上例中的 `User`，更类似于**反序列化**，比如反序列化，而不是初始构造。对象的大部分重要状态不是首次组装，而是重新从数据库行加载。
- en: Therefore to maintain state within the object that is not part of the data that’s
    stored to the database, such that this state is present when objects are loaded
    as well as constructed, there are two general approaches detailed below.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了在对象内部维护不属于存储到数据库的数据的状态，使得当对象加载和构造时都存在这些状态，有两种通用方法如下所述。
- en: Use Python descriptors like `@property`, rather than state, to dynamically compute
    attributes as needed.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Python 描述符，比如 `@property`，而不是状态，根据需要动态计算属性。
- en: 'For simple attributes, this is the simplest approach and the least error prone.
    For example if an object `Point` with `Point.x` and `Point.y` wanted an attribute
    with the sum of these attributes:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于简单的属性，这是最简单的方法，也是最不容易出错的方法。例如，如果一个对象 `Point` 有 `Point.x` 和 `Point.y`，想要一个这些属性的和的属性：
- en: '[PRE8]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An advantage of using dynamic descriptors is that the value is computed every
    time, meaning it maintains the correct value as the underlying attributes (`x`
    and `y` in this case) might change.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用动态描述符的优点是值每次都会计算，这意味着它会根据底层属性（在本例中为 `x` 和 `y`）的更改来维护正确的值。
- en: Other forms of the above pattern include Python standard library [cached_property](https://docs.python.org/3/library/functools.html#functools.cached_property)
    decorator (which is cached, and not re-computed each time), as well as SQLAlchemy’s
    [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") decorator which allows for attributes
    that can work for SQL querying as well.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他形式的上述模式包括 Python 标准库[cached_property](https://docs.python.org/3/library/functools.html#functools.cached_property)
    装饰器（它是缓存的，并且不会每次重新计算），以及 SQLAlchemy 的[`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 装饰器，允许属性在 SQL 查询中使用。
- en: Establish state on-load using [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load"), and optionally supplemental methods [`InstanceEvents.refresh()`](events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") and [`InstanceEvents.refresh_flush()`](events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush").
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") 来在加载时建立状态，并可选地使用补充方法 [`InstanceEvents.refresh()`](events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") 和 [`InstanceEvents.refresh_flush()`](events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")。
- en: 'These are event hooks that are invoked whenever the object is loaded from the
    database, or when it is refreshed after being expired. Typically only the [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") is needed, since non-mapped local object
    state is not affected by expiration operations. To revise the `Point` example
    above looks like:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是在对象从数据库加载或在过期后刷新时调用的事件钩子。通常只需要[`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")，因为非映射的本地对象状态不受过期操作的影响。修改上面的`Point`示例如下所示：
- en: '[PRE9]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If using the refresh events as well, the event hooks can be stacked on top
    of one callable if needed, as:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果还要使用刷新事件，可以根据需要将事件钩子叠加在一个可调用对象上，如下所示：
- en: '[PRE10]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Above, the `attrs` attribute will be present for the `refresh` and `refresh_flush`
    events and indicate a list of attribute names that are being refreshed.  ### Runtime
    Introspection of Mapped classes, Instances and Mappers'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面，`attrs`属性将出现在`refresh`和`refresh_flush`事件中，并指示正在刷新的属性名称列表。### 映射类、实例和映射器的运行时内省
- en: 'A class that is mapped using [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") will also feature a few attributes that are common
    to all mappings:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")映射的类也将包含一些对所有映射共通的属性：
- en: 'The `__mapper__` attribute will refer to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") that is associated with the class:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__mapper__`属性将引用与该类相关联的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")：'
- en: '[PRE11]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is also what’s returned when using the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function against the mapped class:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")也是使用[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数对映射类进行检查时返回的对象：
- en: '[PRE12]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `__table__` attribute will refer to the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), or more generically to the [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object, to which the class is mapped:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__table__`属性将引用与该类映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，或更一般地，将引用[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象：'
- en: '[PRE13]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is also what’s returned when using the
    [`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table")
    attribute of the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"):'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")也是在使用[`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table")属性时返回的对象[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")：
- en: '[PRE14]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For a single-table inheritance mapping, where the class is a subclass that
    does not have a table of its own, the [`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") attribute as well as the `.__table__` attribute
    will be `None`. To retrieve the “selectable” that is actually selected from during
    a query for this class, this is available via the [`Mapper.selectable`](mapping_api.html#sqlalchemy.orm.Mapper.selectable
    "sqlalchemy.orm.Mapper.selectable") attribute:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于单表继承映射，其中类是没有自己的表的子类，[`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table")属性以及`.__table__`属性将为`None`。要检索在查询此类时实际选择的“可选择”对象，可以通过[`Mapper.selectable`](mapping_api.html#sqlalchemy.orm.Mapper.selectable
    "sqlalchemy.orm.Mapper.selectable")属性获取：
- en: '[PRE15]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '#### Inspection of Mapper objects'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 映射器对象的检查'
- en: 'As illustrated in the previous section, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object is available from any mapped class, regardless
    of method, using the [Runtime Inspection API](../core/inspection.html) system.
    Using the [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function, one can acquire the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") from a mapped class:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，无论使用何种方法，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象都可以从任何映射类中获取，使用[运行时检查
    API](../core/inspection.html)系统。使用[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数，可以从映射类获取[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Detailed information is available including [`Mapper.columns`](mapping_api.html#sqlalchemy.orm.Mapper.columns
    "sqlalchemy.orm.Mapper.columns"):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的详细信息包括[`Mapper.columns`](mapping_api.html#sqlalchemy.orm.Mapper.columns "sqlalchemy.orm.Mapper.columns")：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is a namespace that can be viewed in a list format or via individual names:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可以以列表格式或单个名称查看的命名空间：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Other namespaces include [`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors"), which includes all mapped attributes
    as well as hybrids, association proxies:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其他命名空间包括[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")，其中包括所有映射属性以及混合属性，关联代理：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As well as [`Mapper.column_attrs`](mapping_api.html#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs"):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以及[`Mapper.column_attrs`](mapping_api.html#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs")：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See also
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")  ####
    Inspection of Mapped Instances'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")  ####
    Inspection of Mapped Instances'
- en: The [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function also provides information about instances of a mapped class. When applied
    to an instance of a mapped class, rather than the class itself, the object returned
    is known as [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState"),
    which will provide links to not only the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") in use by the class, but also a detailed interface that
    provides information on the state of individual attributes within the instance
    including their current value and how this relates to what their database-loaded
    value is.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数还提供有关映射类的实例的信息。当应用于映射类的实例时，而不是类本身时，返回的对象被称为[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")，它将提供链接到不仅是类使用的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的详细接口，还提供有关实例内个别属性状态的信息，包括它们当前的值以及这如何与它们的数据库加载值相关联。'
- en: 'Given an instance of the `User` class loaded from the database:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 给定从数据库加载的`User`类的实例：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function will return to us an [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数会返回一个[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象给我们：'
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With this object we can see elements such as the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个对象，我们可以看到诸如[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")等元素：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which the object is [attached](../glossary.html#term-attached), if any:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对象所附加到的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（如果有的话）：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Information about the current [persistence state](session_state_management.html#session-object-states)
    for the object:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 关于对象的当前[persistence state](session_state_management.html#session-object-states)的信息：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Attribute state information such as attributes that have not been loaded or
    [lazy loaded](../glossary.html#term-lazy-loaded) (assume `addresses` refers to
    a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the mapped class to a related class):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 属性状态信息，如尚未加载或[延迟加载](../glossary.html#term-lazy-loaded)的属性（假设`addresses`指的是映射类上到相关类的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")）：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Information regarding the current in-Python status of attributes, such as attributes
    that have not been modified since the last flush:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有关属性的当前Python状态的信息，例如自上次刷新以来未经修改的属性：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'as well as specific history on modifications to attributes since the last flush:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以及自上次刷新以来对属性进行的修改的特定历史记录：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")'
- en: '[`InstanceState.attrs`](internals.html#sqlalchemy.orm.InstanceState.attrs "sqlalchemy.orm.InstanceState.attrs")'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.attrs`](internals.html#sqlalchemy.orm.InstanceState.attrs "sqlalchemy.orm.InstanceState.attrs")'
- en: '[`AttributeState`](internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")  ##
    ORM Mapping Styles'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState`](internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")  ##
    ORM Mapping Styles'
- en: SQLAlchemy features two distinct styles of mapper configuration, which then
    feature further sub-options for how they are set up. The variability in mapper
    styles is present to suit a varied list of developer preferences, including the
    degree of abstraction of a user-defined class from how it is to be mapped to relational
    schema tables and columns, what kinds of class hierarchies are in use, including
    whether or not custom metaclass schemes are present, and finally if there are
    other class-instrumentation approaches present such as if Python [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    are in use simultaneously.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 提供了两种不同风格的映射配置，然后进一步提供了设置它们的子选项。映射样式的可变性存在是为了适应开发者偏好的多样性，包括用户定义类与如何映射到关系模式表和列之间的抽象程度，使用的类层次结构种类，包括是否存在自定义元类方案，以及是否同时使用了其他类内部操作方法，例如是否同时使用了
    Python [dataclasses](https://docs.python.org/3/library/dataclasses.html)。
- en: In modern SQLAlchemy, the difference between these styles is mostly superficial;
    when a particular SQLAlchemy configurational style is used to express the intent
    to map a class, the internal process of mapping the class proceeds in mostly the
    same way for each, where the end result is always a user-defined class that has
    a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") configured
    against a selectable unit, typically represented by a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and the class itself has been [instrumented](../glossary.html#term-instrumented)
    to include behaviors linked to relational operations both at the level of the
    class as well as on instances of that class. As the process is basically the same
    in all cases, classes mapped from different styles are always fully interoperable
    with each other. The protocol [`MappedClassProtocol`](mapping_api.html#sqlalchemy.orm.MappedClassProtocol
    "sqlalchemy.orm.MappedClassProtocol") can be used to indicate a mapped class when
    using type checkers such as mypy.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 SQLAlchemy 中，这些风格之间的区别主要是表面的；当使用特定的 SQLAlchemy 配置风格来表达映射类的意图时，映射类的内部映射过程在大多数情况下是相同的，最终的结果总是一个用户定义的类，该类已经针对可选择的单元（通常由一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象表示）配置了一个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")，并且该类本身已经被[instrumented](../glossary.html#term-instrumented)以包括与关系操作相关的行为，既在类的级别，也在该类的实例上。由于在所有情况下该过程基本相同，从不同风格映射的类始终是完全可互操作的。当使用诸如
    mypy 等类型检查器时，可以使用协议[`MappedClassProtocol`](mapping_api.html#sqlalchemy.orm.MappedClassProtocol
    "sqlalchemy.orm.MappedClassProtocol")来指示已映射的类。
- en: The original mapping API is commonly referred to as “classical” style, whereas
    the more automated style of mapping is known as “declarative” style. SQLAlchemy
    now refers to these two mapping styles as **imperative mapping** and **declarative
    mapping**.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的映射 API 通常被称为“古典”风格，而更自动化的映射风格则被称为“声明式”风格。SQLAlchemy 现在将这两种映射风格称为**命令式映射**和**声明式映射**。
- en: Regardless of what style of mapping used, all ORM mappings as of SQLAlchemy
    1.4 originate from a single object known as [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry"), which is a registry of mapped classes. Using this
    registry, a set of mapper configurations can be finalized as a group, and classes
    within a particular registry may refer to each other by name within the configurational
    process.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用何种映射样式，自 SQLAlchemy 1.4 起，所有 ORM 映射都源自一个名为[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")的单个对象，它是一组映射类的注册表。使用此注册表，一组映射配置可以作为一个组完成，并且在配置过程中，特定注册表中的类可以通过名称相互引用。
- en: 'Changed in version 1.4: Declarative and classical mapping are now referred
    to as “declarative” and “imperative” mapping, and are unified internally, all
    originating from the [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    construct that represents a collection of related mappings.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：声明式和古典映射现在被称为“声明式”和“命令式”映射，并在内部统一，所有这些都源自代表相关映射的[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 构造。
- en: '### Declarative Mapping'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '### 声明式映射'
- en: 'The **Declarative Mapping** is the typical way that mappings are constructed
    in modern SQLAlchemy. The most common pattern is to first construct a base class
    using the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass. The resulting base class, when subclassed
    will apply the declarative mapping process to all subclasses that derive from
    it, relative to a particular [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") that is local to the new base by default. The example
    below illustrates the use of a declarative base which is then used in a declarative
    table mapping:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**Declarative Mapping** 是在现代 SQLAlchemy 中构建映射的典型方式。最常见的模式是首先使用 [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 超类构造一个基类。结果基类，当被子类继承时，将对所有从它继承的子类应用声明式映射过程，相对于默认情况下新基类的本地
    [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")。下面的示例说明了使用声明基类然后在声明式表映射中使用它的方法：'
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Above, the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class is used to generate a new base class (within
    SQLAlchemy’s documentation it’s typically referred to as `Base`, however can have
    any desired name) from which new classes to be mapped may inherit from, as above
    a new mapped class `User` is constructed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 上文中，[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    类用于生成一个新的基类（在SQLAlchemy的文档中通常称为 `Base`，但可以使用任何想要的名称），新的映射类可以从中继承，就像上面构造了一个新的映射类
    `User` 一样。
- en: 'Changed in version 2.0: The [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass supersedes the use of the [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") methods; the superclass approach integrates
    with [**PEP 484**](https://peps.python.org/pep-0484/) tools without the use of
    plugins. See [ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    for migration notes.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始更改：[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 超类取代了 [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 函数和 [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") 方法的使用；超类方法与 [**PEP 484**](https://peps.python.org/pep-0484/)
    工具集成，无需使用插件。有关迁移说明，请参阅 [ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)。
- en: The base class refers to a [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object that maintains a collection of related mapped
    classes. as well as to a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that retains a collection of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects to which the classes are mapped.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 基类指的是一个维护一组相关映射类的 [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    对象，以及一个保留了一组将类映射到其中的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象。
- en: 'The major Declarative mapping styles are further detailed in the following
    sections:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的 Declarative 映射风格在以下各节中进一步详细说明：
- en: '[Using a Declarative Base Class](declarative_styles.html#orm-declarative-generated-base-class)
    - declarative mapping using a base class.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用声明基类](declarative_styles.html#orm-declarative-generated-base-class) - 使用基类进行声明式映射。'
- en: '[Declarative Mapping using a Decorator (no declarative base)](declarative_styles.html#orm-declarative-decorator)
    - declarative mapping using a decorator, rather than a base class.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用装饰器进行声明式映射（无声明基类）](declarative_styles.html#orm-declarative-decorator) -
    使用装饰器进行声明式映射，而不是使用基类。'
- en: 'Within the scope of a Declarative mapped class, there are also two varieties
    of how the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata may be declared. These include:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Declarative 映射类的范围内，还有两种声明 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 元数据的方式。它们包括：
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)
    - table columns are declared inline within the mapped class using the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") directive (or in legacy form, using the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object directly). The [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") directive may also be optionally combined with
    type annotations using the [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    class which can provide some details about the mapped columns directly. The column
    directives, in combination with the `__tablename__` and optional `__table_args__`
    class level directives will allow the Declarative mapping process to construct
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object to be mapped.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[带`mapped_column()`的声明式表](declarative_tables.html#orm-declarative-table) -
    在映射类内联声明表列，使用[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")指令（或者在遗留形式中，直接使用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象）。[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")指令也可以选择性地与类型注解结合使用，使用[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类可以直接提供有关映射列的一些细节。列指令与`__tablename__`和可选的`__table_args__`类级指令的组合将允许声明式映射过程构造一个要映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。'
- en: '[Declarative with Imperative Table (a.k.a. Hybrid Declarative)](declarative_tables.html#orm-imperative-table-configuration)
    - Instead of specifying table name and attributes separately, an explicitly constructed
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object is associated with a class that is otherwise mapped declaratively. This
    style of mapping is a hybrid of “declarative” and “imperative” mapping, and applies
    to techniques such as mapping classes to [reflected](../glossary.html#term-reflected)
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, as well as mapping classes to existing Core constructs such as joins
    and subqueries.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[声明式与命令式表（也称为混合声明式）](declarative_tables.html#orm-imperative-table-configuration)
    - 不是分别指定表名和属性，而是将明确构造的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象与否则以声明方式映射的类相关联。这种映射风格是“声明式”和“命令式”映射的混合体，并适用于将类映射到[反射的](../glossary.html#term-reflected)[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，以及将类映射到现有 Core 构造，如连接和子查询。'
- en: 'Documentation for Declarative mapping continues at [Mapping Classes with Declarative](declarative_mapping.html).  ###
    Imperative Mapping'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '声明式映射的文档继续在[使用声明性映射类](declarative_mapping.html) ### 命令式映射'
- en: An **imperative** or **classical** mapping refers to the configuration of a
    mapped class using the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, where the target class does
    not include any declarative class attributes.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令式**或**经典**映射是指使用[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法配置映射类的配置，其中目标类不包含任何声明式类属性。'
- en: Tip
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The imperative mapping form is a lesser-used form of mapping that originates
    from the very first releases of SQLAlchemy in 2006\. It’s essentially a means
    of bypassing the Declarative system to provide a more “barebones” system of mapping,
    and does not offer modern features such as [**PEP 484**](https://peps.python.org/pep-0484/)
    support. As such, most documentation examples use Declarative forms, and it’s
    recommended that new users start with [Declarative Table](declarative_tables.html)
    configuration.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 命令式映射形式是 SQLAlchemy 在 2006 年的最初版本中少用的一种映射形式。它本质上是绕过声明式系统提供一种更“精简”的映射系统，不提供现代特性，如[**PEP
    484**](https://peps.python.org/pep-0484/)支持。因此，大多数文档示例使用声明式形式，并建议新用户从[声明式表](declarative_tables.html)配置开始。
- en: 'Changed in version 2.0: The [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method is now used to create classical
    mappings. The `sqlalchemy.orm.mapper()` standalone function is effectively removed.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版中更改：现在使用[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法创建经典映射。`sqlalchemy.orm.mapper()`独立函数被有效删除。
- en: 'In “classical” form, the table metadata is created separately with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct, then associated with the `User` class via
    the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, after establishing a [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") instance. Normally, a single instance of [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") shared for all mapped classes that are related to each
    other:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '在“经典”形式中，表元数据是分别使用[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造创建的，然后通过[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法与`User`类关联，在建立[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")实例之后。通常，一个[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")的单个实例共享所有彼此相关的映射类:'
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Information about mapped attributes, such as relationships to other classes,
    are provided via the `properties` dictionary. The example below illustrates a
    second [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, mapped to a class called `Address`, then linked to `User` via [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"):'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '关于映射属性的信息，例如与其他类的关系，通过`properties`字典提供。下面的示例说明了第二个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，映射到名为`Address`的类，然后通过[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")链接到`User`:'
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Note that classes which are mapped with the Imperative approach are **fully
    interchangeable** with those mapped with the Declarative approach. Both systems
    ultimately create the same configuration, consisting of a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), user-defined class, linked together with a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object. When we talk about “the behavior of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")”, this includes when using the Declarative system as
    well - it’s still used, just behind the scenes.  ### Declarative Mapping'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，使用命令式方法映射的类与使用声明式方法映射的类**完全可互换**。两个系统最终创建相同的配置，由一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、用户定义类和一个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象组成。当我们谈论“[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的行为”时，这也包括在使用声明式系统时 - 它仍然被使用，只是在幕后。 ### 声明式映射'
- en: 'The **Declarative Mapping** is the typical way that mappings are constructed
    in modern SQLAlchemy. The most common pattern is to first construct a base class
    using the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass. The resulting base class, when subclassed
    will apply the declarative mapping process to all subclasses that derive from
    it, relative to a particular [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") that is local to the new base by default. The example
    below illustrates the use of a declarative base which is then used in a declarative
    table mapping:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明式映射**是在现代SQLAlchemy中构建映射的典型方式。最常见的模式是首先使用[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")超类构造基类。生成的基类，在其派生的所有子类中应用声明式映射过程，相对于一个默认情况下局部于新基类的[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")。下面的示例说明了使用声明基类的情况，然后在声明表映射中使用它:'
- en: '[PRE32]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Above, the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class is used to generate a new base class (within
    SQLAlchemy’s documentation it’s typically referred to as `Base`, however can have
    any desired name) from which new classes to be mapped may inherit from, as above
    a new mapped class `User` is constructed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")类用于生成一个新的基类（在SQLAlchemy的文档中通常称为`Base`，但可以有任何所需的名称），从中新映射类`User`构造。
- en: 'Changed in version 2.0: The [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass supersedes the use of the [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") methods; the superclass approach integrates
    with [**PEP 484**](https://peps.python.org/pep-0484/) tools without the use of
    plugins. See [ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    for migration notes.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：[`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")超类取代了[`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")函数和[`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base")方法的使用；超类方法集成了[**PEP 484**](https://peps.python.org/pep-0484/)工具，无需使用插件。有关迁移说明，请参阅[ORM声明性模型](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)。
- en: The base class refers to a [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object that maintains a collection of related mapped
    classes. as well as to a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that retains a collection of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects to which the classes are mapped.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 基类指的是维护一组相关映射类的[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")对象，以及维护一组映射到这些类的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象。
- en: 'The major Declarative mapping styles are further detailed in the following
    sections:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的声明性映射样式在以下各节中进一步详细说明：
- en: '[Using a Declarative Base Class](declarative_styles.html#orm-declarative-generated-base-class)
    - declarative mapping using a base class.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用声明性基类](declarative_styles.html#orm-declarative-generated-base-class) - 使用基类的声明性映射。'
- en: '[Declarative Mapping using a Decorator (no declarative base)](declarative_styles.html#orm-declarative-decorator)
    - declarative mapping using a decorator, rather than a base class.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用装饰器进行声明性映射（无声明性基类）](declarative_styles.html#orm-declarative-decorator) -
    使用装饰器而不是基类的声明性映射。'
- en: 'Within the scope of a Declarative mapped class, there are also two varieties
    of how the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata may be declared. These include:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明性映射类的范围内，还有两种[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")元数据声明的方式。这些包括：
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)
    - table columns are declared inline within the mapped class using the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") directive (or in legacy form, using the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object directly). The [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") directive may also be optionally combined with
    type annotations using the [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    class which can provide some details about the mapped columns directly. The column
    directives, in combination with the `__tablename__` and optional `__table_args__`
    class level directives will allow the Declarative mapping process to construct
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object to be mapped.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用`mapped_column()`声明的声明性表格](declarative_tables.html#orm-declarative-table)
    - 表格列在映射类中使用[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")指令内联声明（或者在传统形式中，直接使用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象）。[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")指令还可以选择性地与使用[`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类进行类型注释，该类可以直接提供有关映射列的一些详细信息相结合。列指令与`__tablename__`以及可选的`__table_args__`类级别指令的组合将允许声明性映射过程构造一个要映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。'
- en: '[Declarative with Imperative Table (a.k.a. Hybrid Declarative)](declarative_tables.html#orm-imperative-table-configuration)
    - Instead of specifying table name and attributes separately, an explicitly constructed
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object is associated with a class that is otherwise mapped declaratively. This
    style of mapping is a hybrid of “declarative” and “imperative” mapping, and applies
    to techniques such as mapping classes to [reflected](../glossary.html#term-reflected)
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, as well as mapping classes to existing Core constructs such as joins
    and subqueries.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[声明式与命令式表格（即混合声明式）](declarative_tables.html#orm-imperative-table-configuration)
    - 不是单独指定表名和属性，而是将显式构建的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象与在其他情况下以声明方式映射的类关联起来。这种映射方式是“声明式”和“命令式”映射的混合体，适用于诸如将类映射到[反射](../glossary.html#term-reflected)的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，以及将类映射到现有的 Core 构造，如联接和子查询的技术。'
- en: Documentation for Declarative mapping continues at [Mapping Classes with Declarative](declarative_mapping.html).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式映射的文档继续在[用声明式映射类](declarative_mapping.html)中。
- en: '### Imperative Mapping'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '### 命令式映射'
- en: An **imperative** or **classical** mapping refers to the configuration of a
    mapped class using the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, where the target class does
    not include any declarative class attributes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令式**或**经典**映射是指使用[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法配置映射类的一种方法，其中目标类不包含任何声明式类属性。'
- en: Tip
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The imperative mapping form is a lesser-used form of mapping that originates
    from the very first releases of SQLAlchemy in 2006\. It’s essentially a means
    of bypassing the Declarative system to provide a more “barebones” system of mapping,
    and does not offer modern features such as [**PEP 484**](https://peps.python.org/pep-0484/)
    support. As such, most documentation examples use Declarative forms, and it’s
    recommended that new users start with [Declarative Table](declarative_tables.html)
    configuration.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 命令式映射形式是 SQLAlchemy 最早期发布的较少使用的映射形式。它基本上是绕过声明式系统提供更“简化”的映射系统，并且不提供现代特性，例如[**PEP
    484**](https://peps.python.org/pep-0484/)支持。因此，大多数文档示例使用声明式形式，建议新用户从[声明式表格](declarative_tables.html)配置开始。
- en: 'Changed in version 2.0: The [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method is now used to create classical
    mappings. The `sqlalchemy.orm.mapper()` standalone function is effectively removed.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版更改：[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") 方法现在用于创建经典映射。`sqlalchemy.orm.mapper()`
    独立函数已被有效移除。
- en: 'In “classical” form, the table metadata is created separately with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct, then associated with the `User` class via
    the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, after establishing a [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") instance. Normally, a single instance of [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") shared for all mapped classes that are related to each
    other:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在“经典”形式中，表元数据是使用[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造单独创建的，然后通过[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法与`User`类关联，在建立 [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 实例后。通常，一个[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")实例共享给所有彼此相关的映射类：
- en: '[PRE33]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Information about mapped attributes, such as relationships to other classes,
    are provided via the `properties` dictionary. The example below illustrates a
    second [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, mapped to a class called `Address`, then linked to `User` via [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"):'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 映射属性的信息，如与其他类的关系，通过`properties`字典提供。下面的示例说明了第二个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，映射到名为`Address`的类，然后通过[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")与`User`关联：
- en: '[PRE34]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note that classes which are mapped with the Imperative approach are **fully
    interchangeable** with those mapped with the Declarative approach. Both systems
    ultimately create the same configuration, consisting of a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), user-defined class, linked together with a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object. When we talk about “the behavior of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")”, this includes when using the Declarative system as
    well - it’s still used, just behind the scenes.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用命令式方法映射的类与使用声明式方法映射的类**完全可互换**。这两种系统最终都创建相同的配置，包括一个由[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、用户定义类和一个与之关联的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象组成的配置。当我们谈论“[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的行为”时，这也包括使用声明式系统 - 它仍然在幕后使用。
- en: '## Mapped Class Essential Components'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '## 映射类的基本组件'
- en: With all mapping forms, the mapping of the class can be configured in many ways
    by passing construction arguments that ultimately become part of the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object via its constructor. The parameters that are delivered
    to [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    originate from the given mapping form, including parameters passed to [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") for an Imperative mapping, or when
    using the Declarative system, from a combination of the table columns, SQL expressions
    and relationships being mapped along with that of attributes such as [__mapper_args__](declarative_config.html#orm-declarative-mapper-options).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通过所有映射形式，通过传递最终成为[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象的构造参数，可以通过多种方式配置类的映射。传递给[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的参数来自给定的映射形式，包括传递给[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")的参数，用于命令式映射，或者使用声明式系统时，来自与被映射的表列、SQL表达式和关系相关联的参数以及属性的参数，如[__mapper_args__](declarative_config.html#orm-declarative-mapper-options)。
- en: 'There are four general classes of configuration information that the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class looks for:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类寻找的四类常规配置信息如下：'
- en: The class to be mapped
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 待映射的类
- en: This is a class that we construct in our application. There are generally no
    restrictions on the structure of this class. [[1]](#id4) When a Python class is
    mapped, there can only be **one** [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object for the class. [[2]](#id5)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在应用程序中构造的类。通常情况下，这个类的结构没有限制。[[1]](#id4)当一个Python类被映射时，该类只能有**一个**[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象。[[2]](#id5)
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the class to be mapped is either a subclass of the declarative base class, or
    is handled by a decorator or function such as [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped").
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射风格时，要映射的类要么是声明基类的子类，要么由装饰器或函数处理，如[`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the class
    is passed directly as the [`map_imperatively.class_`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.class_
    "sqlalchemy.orm.registry.map_imperatively") argument.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)映射风格时，类直接作为[`map_imperatively.class_`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.class_
    "sqlalchemy.orm.registry.map_imperatively")参数传递。
- en: The table, or other from clause object
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表格或其他来源子句对象
- en: In the vast majority of common cases this is an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). For more advanced use cases, it may also refer to
    any kind of [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object, the most common alternative objects
    being the [`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") and [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在绝大多数常见情况下，这是[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的实例。对于更高级的用例，它还可以指代任何一种[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象，最常见的替代对象是[`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")和[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象。
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the subject table is either generated by the declarative system based on the `__tablename__`
    attribute and the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects presented, or it is established via the `__table__` attribute. These two
    styles of configuration are presented at [Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)
    and [Declarative with Imperative Table (a.k.a. Hybrid Declarative)](declarative_tables.html#orm-imperative-table-configuration).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明性](#orm-declarative-mapping)映射样式进行映射时，主题表格要么是由声明性系统基于`__tablename__`属性和所呈现的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象生成的，要么是通过`__table__`属性建立的。这两种配置样式分别在[具有映射列的声明性表格](declarative_tables.html#orm-declarative-table)和[具有命令式表格的声明性（又名混合声明性）](declarative_tables.html#orm-imperative-table-configuration)中呈现。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the subject
    table is passed positionally as the [`map_imperatively.local_table`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively") argument.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)样式进行映射时，主题表格作为[`map_imperatively.local_table`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively")参数按位置传递。
- en: In contrast to the “one mapper per class” requirement of a mapped class, the
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object that is the subject of the mapping
    may be associated with any number of mappings. The [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") applies modifications directly to the user-defined class,
    but does not modify the given [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in any way.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 与映射类的“每个类一个映射器”的要求相反，作为映射主题的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象可以与任意数量的映射关联。[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")直接对用户定义的类进行修改，但不以任何方式修改给定的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: '### The properties dictionary'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '### 属性字典'
- en: This is a dictionary of all of the attributes that will be associated with the
    mapped class. By default, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") generates entries for this dictionary derived from the
    given [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    in the form of [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") objects which each refer to an individual [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") of the mapped table. The properties dictionary will
    also contain all the other kinds of [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects to be configured, most commonly instances
    generated by the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将与映射类关联的所有属性关联起来的字典。默认情况下，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 从给定的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")生成此字典的条目，形式为每个都引用映射表的单个[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的[`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")对象。属性字典还将包含所有其他需要配置的[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象，最常见的是通过[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造函数生成的实例。
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the properties dictionary is generated by the declarative system by scanning the
    class to be mapped for appropriate attributes. See the section [Defining Mapped
    Properties with Declarative](declarative_config.html#orm-declarative-properties)
    for notes on this process.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射样式进行映射时，属性字典是由声明式系统通过扫描要映射的类以获取适当属性而生成的。请参阅[使用声明式定义映射属性](declarative_config.html#orm-declarative-properties)部分以获取有关此过程的说明。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the properties
    dictionary is passed directly as the `properties` parameter to [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively"), which will pass it along to the [`Mapper.properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") parameter.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)映射样式进行映射时，属性字典直接作为`properties`参数传递给[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")，该参数将其传递给[`Mapper.properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper")参数。
- en: Other mapper configuration parameters
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他映射器配置参数
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    additional mapper configuration arguments are configured via the `__mapper_args__`
    class attribute. Examples of use are available at [Mapper Configuration Options
    with Declarative](declarative_config.html#orm-declarative-mapper-options).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射样式进行映射时，附加的映射器配置参数通过`__mapper_args__`类属性进行配置。使用示例请参见[使用声明式定义的映射器配置选项](declarative_config.html#orm-declarative-mapper-options)。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, keyword arguments
    are passed to the to [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method which passes them along to
    the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)映射样式进行映射时，关键字参数传递给[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法，该方法将其传递给[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")类。
- en: The full range of parameters accepted are documented at [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 接受的全部参数范围在[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")中有文档记录。
- en: The class to be mapped
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要映射的类
- en: This is a class that we construct in our application. There are generally no
    restrictions on the structure of this class. [[1]](#id4) When a Python class is
    mapped, there can only be **one** [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object for the class. [[2]](#id5)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们应用程序中构建的一个类。通常情况下，此类的结构没有任何限制。[[1]](#id4) 当映射Python类时，该类只能有**一个**[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象。[[2]](#id5)
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the class to be mapped is either a subclass of the declarative base class, or
    is handled by a decorator or function such as [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped").
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射风格进行映射时，要映射的类是声明基类的子类，或者由装饰器或函数（如[`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")）处理。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the class
    is passed directly as the [`map_imperatively.class_`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.class_
    "sqlalchemy.orm.registry.map_imperatively") argument.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)风格进行映射时，类直接作为[`map_imperatively.class_`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.class_
    "sqlalchemy.orm.registry.map_imperatively")参数传递。
- en: The table, or other from clause object
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表或其他来自子句对象
- en: In the vast majority of common cases this is an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). For more advanced use cases, it may also refer to
    any kind of [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object, the most common alternative objects
    being the [`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") and [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在绝大多数常见情况下，这是一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的实例。对于更高级的用例，它也可能指的是任何类型的[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象，最常见的替代对象是[`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")和[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象。
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the subject table is either generated by the declarative system based on the `__tablename__`
    attribute and the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects presented, or it is established via the `__table__` attribute. These two
    styles of configuration are presented at [Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)
    and [Declarative with Imperative Table (a.k.a. Hybrid Declarative)](declarative_tables.html#orm-imperative-table-configuration).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明式](#orm-declarative-mapping)映射风格进行映射时，主题表通过声明系统基于`__tablename__`属性和提供的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象生成，或者通过`__table__`属性建立。这两种配置样式在[使用 mapped_column()
    进行声明性表配置](declarative_tables.html#orm-declarative-table)和[具有命令式表的声明式（也称为混合声明式）](declarative_tables.html#orm-imperative-table-configuration)中介绍。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the subject
    table is passed positionally as the [`map_imperatively.local_table`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively") argument.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)风格进行映射时，主题表作为[`map_imperatively.local_table`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively")参数按位置传递。
- en: In contrast to the “one mapper per class” requirement of a mapped class, the
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object that is the subject of the mapping
    may be associated with any number of mappings. The [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") applies modifications directly to the user-defined class,
    but does not modify the given [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in any way.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 与映射类“每个类一个映射器”的要求相反，映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象可以与任意数量的映射相关联。[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")直接将修改应用于用户定义的类，但不以任何方式修改给定的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: '### The properties dictionary'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '### 属性字典'
- en: This is a dictionary of all of the attributes that will be associated with the
    mapped class. By default, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") generates entries for this dictionary derived from the
    given [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    in the form of [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") objects which each refer to an individual [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") of the mapped table. The properties dictionary will
    also contain all the other kinds of [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects to be configured, most commonly instances
    generated by the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与映射类相关联的所有属性的字典。默认情况下，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")从给定的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中派生此字典的条目，形成每个映射表的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的[`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")对象。属性字典还将包含要配置的所有其他种类的[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象，最常见的是由[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造生成的实例。
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    the properties dictionary is generated by the declarative system by scanning the
    class to be mapped for appropriate attributes. See the section [Defining Mapped
    Properties with Declarative](declarative_config.html#orm-declarative-properties)
    for notes on this process.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明性](#orm-declarative-mapping)映射风格进行映射时，属性字典由声明性系统通过扫描要映射的类以找到合适的属性而生成。有关此过程的说明，请参见[使用声明性定义映射属性](declarative_config.html#orm-declarative-properties)部分。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, the properties
    dictionary is passed directly as the `properties` parameter to [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively"), which will pass it along to the [`Mapper.properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") parameter.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)映射风格进行映射时，属性字典直接作为`properties`参数传递给[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")，它将把它传递给[`Mapper.properties`](mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper")参数。
- en: Other mapper configuration parameters
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他映射器配置参数
- en: When mapping with the [declarative](#orm-declarative-mapping) mapping style,
    additional mapper configuration arguments are configured via the `__mapper_args__`
    class attribute. Examples of use are available at [Mapper Configuration Options
    with Declarative](declarative_config.html#orm-declarative-mapper-options).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[声明性](#orm-declarative-mapping)映射风格进行映射时，额外的映射器配置参数通过`__mapper_args__`类属性配置。有关用法示例，请参阅[使用声明性配置选项的映射器](declarative_config.html#orm-declarative-mapper-options)。
- en: When mapping with the [imperative](#orm-imperative-mapping) style, keyword arguments
    are passed to the to [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method which passes them along to
    the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[命令式](#orm-imperative-mapping)映射风格进行映射时，关键字参数传递给[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法，该方法将它们传递给[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")类。
- en: The full range of parameters accepted are documented at [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 接受的参数的完整范围在[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")中有文档记录。
- en: '## Mapped Class Behavior'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '## 映射类行为'
- en: 'Across all styles of mapping using the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object, the following behaviors are common:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")对象进行所有映射样式时，以下行为是共同的：
- en: '### Default Constructor'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '### 默认构造函数'
- en: 'The [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    applies a default constructor, i.e. `__init__` method, to all mapped classes that
    don’t explicitly have their own `__init__` method. The behavior of this method
    is such that it provides a convenient keyword constructor that will accept as
    optional keyword arguments all the attributes that are named. E.g.:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")将默认构造函数，即`__init__`方法，应用于所有没有明确自己的`__init__`方法的映射类。此方法的行为是提供一个方便的关键字构造函数，将接受所有命名属性作为可选关键字参数。例如：'
- en: '[PRE35]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'An object of type `User` above will have a constructor which allows `User`
    objects to be created as:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的`User`类型对象将具有允许创建`User`对象的构造函数，如下所示：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Tip
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses)
    feature provides an alternate means of generating a default `__init__()` method
    by using Python dataclasses, and allows for a highly configurable constructor
    form.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式数据类映射](dataclasses.html#orm-declarative-native-dataclasses)功能通过使用Python数据类提供了一种生成默认`__init__()`方法的替代方法，并且允许高度可配置的构造函数形式。'
- en: Warning
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `__init__()` method of the class is called only when the object is constructed
    in Python code, and **not when an object is loaded or refreshed from the database**.
    See the next section [Maintaining Non-Mapped State Across Loads](#mapped-class-load-events)
    for a primer on how to invoke special logic when objects are loaded.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 类的`__init__()`方法仅在Python代码中构造对象时调用，**而不是在从数据库加载或刷新对象时调用**。请参阅下一节[在加载过程中保持非映射状态](#mapped-class-load-events)，了解如何在加载对象时调用特殊逻辑的入门知识。
- en: A class that includes an explicit `__init__()` method will maintain that method,
    and no default constructor will be applied.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 包含显式`__init__()`方法的类将保留该方法，并且不会应用默认构造函数。
- en: To change the default constructor used, a user-defined Python callable may be
    provided to the [`registry.constructor`](mapping_api.html#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") parameter which will be used as the default constructor.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改所使用的默认构造函数，可以向[`registry.constructor`](mapping_api.html#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry")参数提供用户定义的Python可调用对象，该对象将用作默认构造函数。
- en: 'The constructor also applies to imperative mappings:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数也适用于命令式映射：
- en: '[PRE37]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The above class, mapped imperatively as described at [Imperative Mapping](#orm-imperative-mapping),
    will also feature the default constructor associated with the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，通过[命令式映射](#orm-imperative-mapping)描述的类也将具有与[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")相关联的默认构造函数。
- en: 'New in version 1.4: classical mappings now support a standard configuration-level
    constructor when they are mapped via the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method.  ### Maintaining Non-Mapped
    State Across Loads'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 新版1.4中：经典映射现在在通过[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法进行映射时支持标准配置级别的构造函数。### 在加载过程中保持非映射状态
- en: 'The `__init__()` method of the mapped class is invoked when the object is constructed
    directly in Python code:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 映射类的`__init__()`方法在Python代码中直接构造对象时被调用：
- en: '[PRE38]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'However, when an object is loaded using the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `__init__()` method is **not** called:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当使用ORM [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")加载对象时，**不会**调用`__init__()`方法：
- en: '[PRE39]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The reason for this is that when loaded from the database, the operation used
    to construct the object, in the above example the `User`, is more analogous to
    **deserialization**, such as unpickling, rather than initial construction. The
    majority of the object’s important state is not being assembled for the first
    time, it’s being re-loaded from database rows.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为从数据库加载时，用于构造对象的操作（在上面的示例中为`User`）更类似于**反序列化**，如取消持久性，而不是初始构造。大多数对象的重要状态不是首次组装，而是从数据库行重新加载。
- en: Therefore to maintain state within the object that is not part of the data that’s
    stored to the database, such that this state is present when objects are loaded
    as well as constructed, there are two general approaches detailed below.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了在对象中维护不是数据库中存储的数据的状态，使得当对象被加载和构造时此状态存在，下面详细介绍了两种一般方法。
- en: Use Python descriptors like `@property`, rather than state, to dynamically compute
    attributes as needed.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Python 描述符（如 `@property`），而不是状态，根据需要动态计算属性。
- en: 'For simple attributes, this is the simplest approach and the least error prone.
    For example if an object `Point` with `Point.x` and `Point.y` wanted an attribute
    with the sum of these attributes:'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于简单的属性，这是最简单且最不容易出错的方法。例如，如果一个名为 `Point` 的对象希望具有这些属性的总和： '
- en: '[PRE40]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: An advantage of using dynamic descriptors is that the value is computed every
    time, meaning it maintains the correct value as the underlying attributes (`x`
    and `y` in this case) might change.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用动态描述符的优势在于，值每次都会重新计算，这意味着它会随着基础属性（在本例中为 `x` 和 `y`）可能会发生变化而保持正确的值。
- en: Other forms of the above pattern include Python standard library [cached_property](https://docs.python.org/3/library/functools.html#functools.cached_property)
    decorator (which is cached, and not re-computed each time), as well as SQLAlchemy’s
    [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") decorator which allows for attributes
    that can work for SQL querying as well.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述模式的其他形式包括 Python 标准库的 [cached_property](https://docs.python.org/3/library/functools.html#functools.cached_property)
    装饰器（它被缓存，而不是每次重新计算），以及 SQLAlchemy 的 [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 装饰器，它允许属性既可用于 SQL 查询，也可用于 Python 属性。
- en: Establish state on-load using [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load"), and optionally supplemental methods [`InstanceEvents.refresh()`](events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") and [`InstanceEvents.refresh_flush()`](events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush").
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") 建立加载时的状态，并且可选地使用补充方法 [`InstanceEvents.refresh()`](events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") 和 [`InstanceEvents.refresh_flush()`](events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")。
- en: 'These are event hooks that are invoked whenever the object is loaded from the
    database, or when it is refreshed after being expired. Typically only the [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") is needed, since non-mapped local object
    state is not affected by expiration operations. To revise the `Point` example
    above looks like:'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是在从数据库加载对象或在对象过期后刷新时调用的事件钩子。通常只需要 [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")，因为非映射的本地对象状态不受过期操作的影响。要修改上面的 `Point` 示例，如下所示：
- en: '[PRE41]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If using the refresh events as well, the event hooks can be stacked on top
    of one callable if needed, as:'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果还使用刷新事件，事件钩子可以根据需要堆叠在一个可调用对象上，如下所示：
- en: '[PRE42]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Above, the `attrs` attribute will be present for the `refresh` and `refresh_flush`
    events and indicate a list of attribute names that are being refreshed.  ### Runtime
    Introspection of Mapped classes, Instances and Mappers'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，`attrs` 属性将出现在 `refresh` 和 `refresh_flush` 事件中，并指示正在刷新的属性名称列表。### 映射类、实例和映射器的运行时内省
- en: 'A class that is mapped using [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") will also feature a few attributes that are common
    to all mappings:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    映射的类还将包含一些对所有映射通用的属性：
- en: 'The `__mapper__` attribute will refer to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") that is associated with the class:'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__mapper__` 属性将引用与类相关联的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")：'
- en: '[PRE43]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is also what’s returned when using the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function against the mapped class:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对映射类使用 [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数时，返回的也是此 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")：
- en: '[PRE44]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `__table__` attribute will refer to the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), or more generically to the [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object, to which the class is mapped:'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__table__` 属性将引用类被映射到的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，或者更通用地引用类被映射到的 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象：'
- en: '[PRE45]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is also what’s returned when using the
    [`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table")
    attribute of the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"):'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") 属性时，返回的也是这个 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")：
- en: '[PRE46]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'For a single-table inheritance mapping, where the class is a subclass that
    does not have a table of its own, the [`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") attribute as well as the `.__table__` attribute
    will be `None`. To retrieve the “selectable” that is actually selected from during
    a query for this class, this is available via the [`Mapper.selectable`](mapping_api.html#sqlalchemy.orm.Mapper.selectable
    "sqlalchemy.orm.Mapper.selectable") attribute:'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于单表继承映射，其中类是没有自己的表的子类，[`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") 属性以及 `.__table__` 属性将为 `None`。要检索在查询此类时实际选择的“可选择项”，可通过
    [`Mapper.selectable`](mapping_api.html#sqlalchemy.orm.Mapper.selectable "sqlalchemy.orm.Mapper.selectable")
    属性获得：
- en: '[PRE47]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '#### Inspection of Mapper objects'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '#### Mapper 对象的检查'
- en: 'As illustrated in the previous section, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object is available from any mapped class, regardless
    of method, using the [Runtime Inspection API](../core/inspection.html) system.
    Using the [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function, one can acquire the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") from a mapped class:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象可从任何映射类获得，而不管方法如何，使用 [Runtime Inspection API](../core/inspection.html) 系统。使用
    [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数，可以从映射类获取 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")：
- en: '[PRE48]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Detailed information is available including [`Mapper.columns`](mapping_api.html#sqlalchemy.orm.Mapper.columns
    "sqlalchemy.orm.Mapper.columns"):'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的详细信息包括 [`Mapper.columns`](mapping_api.html#sqlalchemy.orm.Mapper.columns
    "sqlalchemy.orm.Mapper.columns")：
- en: '[PRE49]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This is a namespace that can be viewed in a list format or via individual names:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可以以列表格式或通过单个名称查看的命名空间：
- en: '[PRE50]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Other namespaces include [`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors"), which includes all mapped attributes
    as well as hybrids, association proxies:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 其他命名空间包括 [`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")，其中包括所有映射属性以及混合属性、关联代理：
- en: '[PRE51]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'As well as [`Mapper.column_attrs`](mapping_api.html#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs"):'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以及 [`Mapper.column_attrs`](mapping_api.html#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs")：
- en: '[PRE52]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: See also
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")  ####
    Inspection of Mapped Instances'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")  ####
    映射实例的检查'
- en: The [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function also provides information about instances of a mapped class. When applied
    to an instance of a mapped class, rather than the class itself, the object returned
    is known as [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState"),
    which will provide links to not only the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") in use by the class, but also a detailed interface that
    provides information on the state of individual attributes within the instance
    including their current value and how this relates to what their database-loaded
    value is.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数还提供关于映射类的实例的信息。当应用于映射类的实例时，而不是类本身时，返回的对象被称为 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")，它将提供链接，不仅链接到类使用的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")，还提供了一个详细的界面，提供了关于实例内部属性状态的信息，包括它们当前的值以及这与它们的数据库加载值有何关系。'
- en: 'Given an instance of the `User` class loaded from the database:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 给定从数据库加载的 `User` 类的实例：
- en: '[PRE53]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function will return to us an [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数将返回给我们一个 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    对象：'
- en: '[PRE54]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'With this object we can see elements such as the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"):'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 通过该对象，我们可以查看诸如 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    等元素：
- en: '[PRE55]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which the object is [attached](../glossary.html#term-attached), if any:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 对象所附属的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（如果有）：
- en: '[PRE56]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Information about the current [persistence state](session_state_management.html#session-object-states)
    for the object:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的当前[持久状态](session_state_management.html#session-object-states)的信息：
- en: '[PRE57]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Attribute state information such as attributes that have not been loaded or
    [lazy loaded](../glossary.html#term-lazy-loaded) (assume `addresses` refers to
    a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the mapped class to a related class):'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 属性状态信息，例如未加载或[延迟加载](../glossary.html#term-lazy-loaded)的属性（假设 `addresses` 是映射类到相关类的
    [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")）：
- en: '[PRE58]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Information regarding the current in-Python status of attributes, such as attributes
    that have not been modified since the last flush:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 关于当前 Python 中属性的状态信息，例如自上次刷新以来未修改的属性：
- en: '[PRE59]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'as well as specific history on modifications to attributes since the last flush:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 以及自上次刷新以来对属性进行修改的具体历史：
- en: '[PRE60]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: See also
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")'
- en: '[`InstanceState.attrs`](internals.html#sqlalchemy.orm.InstanceState.attrs "sqlalchemy.orm.InstanceState.attrs")'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.attrs`](internals.html#sqlalchemy.orm.InstanceState.attrs "sqlalchemy.orm.InstanceState.attrs")'
- en: '[`AttributeState`](internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")  ###
    Default Constructor'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState`](internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")  ###
    默认构造函数'
- en: 'The [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    applies a default constructor, i.e. `__init__` method, to all mapped classes that
    don’t explicitly have their own `__init__` method. The behavior of this method
    is such that it provides a convenient keyword constructor that will accept as
    optional keyword arguments all the attributes that are named. E.g.:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    对所有未显式拥有自己 `__init__` 方法的映射类应用默认构造函数，即 `__init__` 方法。该方法的行为是提供一个方便的关键字构造函数，将接受所有命名属性作为可选关键字参数。例如：'
- en: '[PRE61]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'An object of type `User` above will have a constructor which allows `User`
    objects to be created as:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 `User` 类的对象将具有一个允许创建 `User` 对象的构造函数：
- en: '[PRE62]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Tip
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses)
    feature provides an alternate means of generating a default `__init__()` method
    by using Python dataclasses, and allows for a highly configurable constructor
    form.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式数据类映射](dataclasses.html#orm-declarative-native-dataclasses) 功能通过使用 Python
    数据类提供了一种生成默认 `__init__()` 方法的替代方式，并允许高度可配置的构造函数形式。'
- en: Warning
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `__init__()` method of the class is called only when the object is constructed
    in Python code, and **not when an object is loaded or refreshed from the database**.
    See the next section [Maintaining Non-Mapped State Across Loads](#mapped-class-load-events)
    for a primer on how to invoke special logic when objects are loaded.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象在 Python 代码中构造时才调用类的 `__init__()` 方法，而**不是在从数据库加载或刷新对象时**。请参阅下一节[在加载时保持非映射状态](#mapped-class-load-events)，了解如何在加载对象时调用特殊逻辑的基本知识。
- en: A class that includes an explicit `__init__()` method will maintain that method,
    and no default constructor will be applied.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 包含显式 `__init__()` 方法的类将保持该方法，不会应用默认构造函数。
- en: To change the default constructor used, a user-defined Python callable may be
    provided to the [`registry.constructor`](mapping_api.html#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") parameter which will be used as the default constructor.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 若要更改使用的默认构造函数，可以提供用户定义的 Python 可调用对象给 [`registry.constructor`](mapping_api.html#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") 参数，该对象将用作默认构造函数。
- en: 'The constructor also applies to imperative mappings:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数也适用于命令式映射：
- en: '[PRE63]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The above class, mapped imperatively as described at [Imperative Mapping](#orm-imperative-mapping),
    will also feature the default constructor associated with the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[命令式映射](#orm-imperative-mapping)中所述，上述类将还具有与[`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")相关联的默认构造函数。
- en: 'New in version 1.4: classical mappings now support a standard configuration-level
    constructor when they are mapped via the [`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中：经典映射现在支持通过[`registry.map_imperatively()`](mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法映射时的标准配置级构造函数。
- en: '### Maintaining Non-Mapped State Across Loads'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '### 在加载期间保持非映射状态'
- en: 'The `__init__()` method of the mapped class is invoked when the object is constructed
    directly in Python code:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接在Python代码中构造对象时，会调用映射类的`__init__()`方法：
- en: '[PRE64]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'However, when an object is loaded using the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `__init__()` method is **not** called:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当使用ORM [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")加载对象时，**不会**调用`__init__()`方法：
- en: '[PRE65]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The reason for this is that when loaded from the database, the operation used
    to construct the object, in the above example the `User`, is more analogous to
    **deserialization**, such as unpickling, rather than initial construction. The
    majority of the object’s important state is not being assembled for the first
    time, it’s being re-loaded from database rows.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 原因在于，当从数据库加载时，用于构造对象的操作，例如上面的`User`，更类似于**反序列化**，例如取消选中，而不是初始构造。对象的大部分重要状态不是首次组装的，而是重新从数据库行加载的。
- en: Therefore to maintain state within the object that is not part of the data that’s
    stored to the database, such that this state is present when objects are loaded
    as well as constructed, there are two general approaches detailed below.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了在对象加载以及构造时保持对象中不是存储到数据库的数据的状态，以下详细介绍了两种一般方法。
- en: Use Python descriptors like `@property`, rather than state, to dynamically compute
    attributes as needed.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Python描述符，如`@property`，而不是状态，根据需要动态计算属性。
- en: 'For simple attributes, this is the simplest approach and the least error prone.
    For example if an object `Point` with `Point.x` and `Point.y` wanted an attribute
    with the sum of these attributes:'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于简单属性，这是最简单且最少错误的方法。例如，如果具有`Point.x`和`Point.y`的对象`Point`希望具有这些属性的和：
- en: '[PRE66]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: An advantage of using dynamic descriptors is that the value is computed every
    time, meaning it maintains the correct value as the underlying attributes (`x`
    and `y` in this case) might change.
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用动态描述符的优点是值每次计算，这意味着它保持正确的值，因为底层属性（在本例中为`x`和`y`）可能会更改。
- en: Other forms of the above pattern include Python standard library [cached_property](https://docs.python.org/3/library/functools.html#functools.cached_property)
    decorator (which is cached, and not re-computed each time), as well as SQLAlchemy’s
    [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") decorator which allows for attributes
    that can work for SQL querying as well.
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述模式的其他形式包括Python标准库[cached_property](https://docs.python.org/3/library/functools.html#functools.cached_property)装饰器（它是缓存的，不会每次重新计算），以及SQLAlchemy的[`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")装饰器，允许属性同时适用于SQL查询。
- en: Establish state on-load using [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load"), and optionally supplemental methods [`InstanceEvents.refresh()`](events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") and [`InstanceEvents.refresh_flush()`](events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush").
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")来在加载时建立状态，可选地使用补充方法[`InstanceEvents.refresh()`](events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")和[`InstanceEvents.refresh_flush()`](events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")。
- en: 'These are event hooks that are invoked whenever the object is loaded from the
    database, or when it is refreshed after being expired. Typically only the [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") is needed, since non-mapped local object
    state is not affected by expiration operations. To revise the `Point` example
    above looks like:'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是在对象从数据库加载时或在过期后刷新时调用的事件钩子。通常只需要 [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")，因为非映射的本地对象状态不受到过期操作的影响。要修改上面的 `Point` 示例，看起来像这样：
- en: '[PRE67]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'If using the refresh events as well, the event hooks can be stacked on top
    of one callable if needed, as:'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要同时使用刷新事件，事件钩子可以叠加在一个可调用对象上，如下所示：
- en: '[PRE68]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Above, the `attrs` attribute will be present for the `refresh` and `refresh_flush`
    events and indicate a list of attribute names that are being refreshed.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的示例中，`attrs` 属性将出现在 `refresh` 和 `refresh_flush` 事件中，并指示正在刷新的属性名称列表。
- en: '### Runtime Introspection of Mapped classes, Instances and Mappers'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '### 映射类、实例和映射器的运行时内省'
- en: 'A class that is mapped using [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") will also feature a few attributes that are common
    to all mappings:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`registry`](mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    进行映射的类还将具有一些所有映射的共同属性：
- en: 'The `__mapper__` attribute will refer to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") that is associated with the class:'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__mapper__` 属性将引用与该类关联的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")：'
- en: '[PRE69]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'This [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is also what’s returned when using the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function against the mapped class:'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数对映射类进行检查时，也将返回此 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")：
- en: '[PRE70]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The `__table__` attribute will refer to the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), or more generically to the [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object, to which the class is mapped:'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__table__` 属性将引用将类映射到的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，或更一般地，引用 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象：'
- en: '[PRE71]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'This [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is also what’s returned when using the
    [`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table")
    attribute of the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"):'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") 属性时，此 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 也将返回：
- en: '[PRE72]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'For a single-table inheritance mapping, where the class is a subclass that
    does not have a table of its own, the [`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") attribute as well as the `.__table__` attribute
    will be `None`. To retrieve the “selectable” that is actually selected from during
    a query for this class, this is available via the [`Mapper.selectable`](mapping_api.html#sqlalchemy.orm.Mapper.selectable
    "sqlalchemy.orm.Mapper.selectable") attribute:'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于单表继承映射，其中类是没有自己的表的子类，[`Mapper.local_table`](mapping_api.html#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") 属性以及 `.__table__` 属性都将为 `None`。要检索在查询此类时实际选择的“可选项”，可以通过
    [`Mapper.selectable`](mapping_api.html#sqlalchemy.orm.Mapper.selectable "sqlalchemy.orm.Mapper.selectable")
    属性获取：
- en: '[PRE73]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '#### Inspection of Mapper objects'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 映射器对象的检查'
- en: 'As illustrated in the previous section, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object is available from any mapped class, regardless
    of method, using the [Runtime Inspection API](../core/inspection.html) system.
    Using the [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function, one can acquire the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") from a mapped class:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象可从任何映射类中使用 [运行时内省 API](../core/inspection.html) 系统获取。使用 [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") 函数，可以从映射类中获取 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")：
- en: '[PRE74]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Detailed information is available including [`Mapper.columns`](mapping_api.html#sqlalchemy.orm.Mapper.columns
    "sqlalchemy.orm.Mapper.columns"):'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '可用的详细信息包括 [`Mapper.columns`](mapping_api.html#sqlalchemy.orm.Mapper.columns
    "sqlalchemy.orm.Mapper.columns"):'
- en: '[PRE75]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'This is a namespace that can be viewed in a list format or via individual names:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可以以列表格式或通过单个名称查看的命名空间：
- en: '[PRE76]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Other namespaces include [`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors"), which includes all mapped attributes
    as well as hybrids, association proxies:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 其他命名空间包括 [`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")，其中包括所有映射属性以及混合体，关联代理：
- en: '[PRE77]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'As well as [`Mapper.column_attrs`](mapping_api.html#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs"):'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '以及 [`Mapper.column_attrs`](mapping_api.html#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs"):'
- en: '[PRE78]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: See also
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")  ####
    Inspection of Mapped Instances'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")  ####
    映射实例的检查'
- en: The [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function also provides information about instances of a mapped class. When applied
    to an instance of a mapped class, rather than the class itself, the object returned
    is known as [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState"),
    which will provide links to not only the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") in use by the class, but also a detailed interface that
    provides information on the state of individual attributes within the instance
    including their current value and how this relates to what their database-loaded
    value is.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数还提供了关于映射类的实例的信息。当应用于映射类的实例而不是类本身时，返回的对象被称为 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")，它将提供链接到不仅由该类使用的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")，还提供了有关实例内部属性状态的详细接口的信息，包括它们的当前值以及这与它们的数据库加载值的关系。'
- en: 'Given an instance of the `User` class loaded from the database:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 给定从数据库加载的 `User` 类的实例：
- en: '[PRE79]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function will return to us an [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数将返回一个 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    对象：'
- en: '[PRE80]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'With this object we can see elements such as the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"):'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此对象，我们可以查看诸如 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    之类的元素：
- en: '[PRE81]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which the object is [attached](../glossary.html#term-attached), if any:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 对象所附加到的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（如果有）：
- en: '[PRE82]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Information about the current [persistence state](session_state_management.html#session-object-states)
    for the object:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 关于对象当前的[持久性状态](session_state_management.html#session-object-states)的信息：
- en: '[PRE83]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Attribute state information such as attributes that have not been loaded or
    [lazy loaded](../glossary.html#term-lazy-loaded) (assume `addresses` refers to
    a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the mapped class to a related class):'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 属性状态信息，例如尚未加载或[延迟加载](../glossary.html#term-lazy-loaded)的属性（假设 `addresses` 指的是映射类上的
    [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    到相关类）：
- en: '[PRE84]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Information regarding the current in-Python status of attributes, such as attributes
    that have not been modified since the last flush:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 有关属性的当前Python内部状态的信息，例如自上次刷新以来未被修改的属性：
- en: '[PRE85]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'as well as specific history on modifications to attributes since the last flush:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 以及自上次刷新以来对属性进行的修改的特定历史记录：
- en: '[PRE86]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: See also
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")'
- en: '[`InstanceState.attrs`](internals.html#sqlalchemy.orm.InstanceState.attrs "sqlalchemy.orm.InstanceState.attrs")'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.attrs`](internals.html#sqlalchemy.orm.InstanceState.attrs "sqlalchemy.orm.InstanceState.attrs")'
- en: '[`AttributeState`](internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")  ####
    Inspection of Mapper objects'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState`](internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")  ####
    映射对象的检查'
- en: 'As illustrated in the previous section, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object is available from any mapped class, regardless
    of method, using the [Runtime Inspection API](../core/inspection.html) system.
    Using the [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function, one can acquire the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") from a mapped class:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象可以从任何映射类中使用，无论方法如何，都可以使用[Runtime
    Inspection API](../core/inspection.html)系统。使用[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数，可以从映射类获取[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")：
- en: '[PRE87]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Detailed information is available including [`Mapper.columns`](mapping_api.html#sqlalchemy.orm.Mapper.columns
    "sqlalchemy.orm.Mapper.columns"):'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的详细信息包括[`Mapper.columns`](mapping_api.html#sqlalchemy.orm.Mapper.columns "sqlalchemy.orm.Mapper.columns")：
- en: '[PRE88]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'This is a namespace that can be viewed in a list format or via individual names:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可以以列表格式或通过单个名称查看的命名空间：
- en: '[PRE89]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Other namespaces include [`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors"), which includes all mapped attributes
    as well as hybrids, association proxies:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 其他命名空间包括[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")，其中包括所有映射属性以及混合属性，关联代理：
- en: '[PRE90]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'As well as [`Mapper.column_attrs`](mapping_api.html#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs"):'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 以及[`Mapper.column_attrs`](mapping_api.html#sqlalchemy.orm.Mapper.column_attrs
    "sqlalchemy.orm.Mapper.column_attrs")：
- en: '[PRE91]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: See also
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")'
- en: '#### Inspection of Mapped Instances'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 映射实例的检查'
- en: The [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function also provides information about instances of a mapped class. When applied
    to an instance of a mapped class, rather than the class itself, the object returned
    is known as [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState"),
    which will provide links to not only the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") in use by the class, but also a detailed interface that
    provides information on the state of individual attributes within the instance
    including their current value and how this relates to what their database-loaded
    value is.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数还提供关于映射类的实例的信息。当应用于映射类的实例而不是类本身时，返回的对象称为[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")，它将提供指向类使用的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的链接，以及提供有关实例内部属性状态的详细接口，包括它们当前的值以及这与它们的数据库加载值的关系。'
- en: 'Given an instance of the `User` class loaded from the database:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 给定从数据库加载的`User`类的实例：
- en: '[PRE92]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function will return to us an [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数将向我们返回一个[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象：'
- en: '[PRE93]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'With this object we can see elements such as the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"):'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此对象，我们可以查看诸如[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")之类的元素：
- en: '[PRE94]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which the object is [attached](../glossary.html#term-attached), if any:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 对象附加到的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（如果有）：
- en: '[PRE95]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Information about the current [persistence state](session_state_management.html#session-object-states)
    for the object:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的当前[persistence state](session_state_management.html#session-object-states)的信息：
- en: '[PRE96]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Attribute state information such as attributes that have not been loaded or
    [lazy loaded](../glossary.html#term-lazy-loaded) (assume `addresses` refers to
    a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the mapped class to a related class):'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '属性状态信息，如未加载或[延迟加载](../glossary.html#term-lazy-loaded)的属性（假设`addresses`指的是映射类上与相关类的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")）:'
- en: '[PRE97]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Information regarding the current in-Python status of attributes, such as attributes
    that have not been modified since the last flush:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 关于属性的当前Python状态的信息，例如自上次刷新以来未被修改的属性：
- en: '[PRE98]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'as well as specific history on modifications to attributes since the last flush:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 以及自上次刷新以来属性修改的具体历史：
- en: '[PRE99]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: See also
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 同样参见
- en: '[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")'
- en: '[`InstanceState.attrs`](internals.html#sqlalchemy.orm.InstanceState.attrs "sqlalchemy.orm.InstanceState.attrs")'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.attrs`](internals.html#sqlalchemy.orm.InstanceState.attrs "sqlalchemy.orm.InstanceState.attrs")'
- en: '[`AttributeState`](internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState`](internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")'
