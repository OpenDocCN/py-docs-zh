- en: Tutorial
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 教程
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/tutorial.html](https://pymupdf.readthedocs.io/en/latest/tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pymupdf.readthedocs.io/en/latest/tutorial.html](https://pymupdf.readthedocs.io/en/latest/tutorial.html)
- en: This tutorial will show you the use of PyMuPDF, MuPDF in Python, step by step.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将逐步展示您如何在Python中使用PyMuPDF和MuPDF。
- en: Because MuPDF supports not only PDF, but also XPS, OpenXPS, CBZ, CBR, FB2 and
    EPUB formats, so does PyMuPDF [[1]](#f1). Nevertheless, for the sake of brevity
    we will only talk about PDF files. At places where indeed only PDF files are supported,
    this will be mentioned explicitly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因为MuPDF不仅支持PDF，还支持XPS、OpenXPS、CBZ、CBR、FB2和EPUB格式，所以PyMuPDF也支持[[1]](#f1)。然而，为简洁起见，我们只讨论PDF文件。确实只支持PDF文件的地方会明确说明。
- en: Importing the Bindings
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入绑定
- en: 'The Python bindings to MuPDF are made available by this import statement. We
    also show here how your version can be checked:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: MuPDF的Python绑定通过此导入语句提供。我们还展示了如何检查您的版本：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note on the Name *fitz*
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于名称*fitz*的说明
- en: Old versions of PyMuPDF had their **Python** import name as `fitz`. Newer versions
    use `pymupdf` instead, and offer `fitz` as a fallback so that old code will still
    work.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版本的PyMuPDF将其**Python**导入名称设置为`fitz`。更新版本改用`pymupdf`，并提供`fitz`作为备用选项，以便旧代码仍可使用。
- en: 'The reason for the name `fitz` is a historical curiosity:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 名称`fitz`的原因是一个历史的奇特现象：
- en: The original rendering library for MuPDF was called *Libart*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MuPDF的原始渲染库称为*Libart*。
- en: '*“After Artifex Software acquired the MuPDF project, the development focus
    shifted on writing a new modern graphics library called “Fitz”. Fitz was originally
    intended as an R&D project to replace the aging Ghostscript graphics library,
    but has instead become the rendering engine powering MuPDF.”* (Quoted from [Wikipedia](https://en.wikipedia.org/wiki/MuPDF)).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*“在Artifex Software收购MuPDF项目后，开发重点转向编写名为‘Fitz’的新现代图形库。Fitz最初是一个旨在取代老旧Ghostscript图形库的研发项目，但最终成为MuPDF的渲染引擎。”*（摘自[Wikipedia](https://en.wikipedia.org/wiki/MuPDF)）'
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Importing PyMuPDF as `fitz` still works however PyMuPDF **cannot coexist** with
    other packages named “fitz” in the same Python environment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以将PyMuPDF导入为`fitz`，但是PyMuPDF **不能与** 同一Python环境中命名为“fitz”的其他软件包共存。
- en: '## Opening a Document'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '## 打开文档'
- en: 'To access a [supported document](how-to-open-a-file.html#supported-file-types),
    it must be opened with the following statement:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问[支持的文档](how-to-open-a-file.html#supported-file-types)，必须使用以下语句打开：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This creates the [Document](document.html#document) object *doc*. *filename*
    must be a Python string (or a `pathlib.Path`) specifying the name of an existing
    file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了[文档](document.html#document)对象*doc*。*filename*必须是指定现有文件名称的Python字符串（或`pathlib.Path`）。
- en: It is also possible to open a document from memory data, or to create a new,
    empty PDF. See [Document](document.html#document) for details. You can also use
    [Document](document.html#document) as a *context manager*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以从内存数据打开文档，或创建一个新的空PDF。详见[文档](document.html#document)。还可以将[文档](document.html#document)用作*上下文管理器*。
- en: A document contains many attributes and functions. Among them are meta information
    (like “author” or “subject”), number of total pages, outline and encryption information.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 文档包含许多属性和函数。其中包括元信息（如“作者”或“主题”）、总页数、大纲和加密信息。
- en: Some [Document](document.html#document) Methods and Attributes
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些[文档](document.html#document)的方法和属性
- en: '| **Method / Attribute** | **Description** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **方法 / 属性** | **描述** |'
- en: '| --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`Document.page_count`](document.html#Document.page_count "Document.page_count")
    | the number of pages (*int*) |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`Document.page_count`](document.html#Document.page_count "Document.page_count")
    | 页数 (*int*) |'
- en: '| [`Document.metadata`](document.html#Document.metadata "Document.metadata")
    | the metadata (*dict*) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`Document.metadata`](document.html#Document.metadata "Document.metadata")
    | 元数据 (*dict*) |'
- en: '| [`Document.get_toc()`](document.html#Document.get_toc "Document.get_toc")
    | get the table of contents (*list*) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`Document.get_toc()`](document.html#Document.get_toc "Document.get_toc")
    | 获取目录 (*list*) |'
- en: '| [`Document.load_page()`](document.html#Document.load_page "Document.load_page")
    | read a [Page](page.html#page) |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`Document.load_page()`](document.html#Document.load_page "Document.load_page")
    | 读取一个[页面](page.html#page) |'
- en: Accessing Meta Data
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问元数据
- en: PyMuPDF fully supports standard metadata. [`Document.metadata`](document.html#Document.metadata
    "Document.metadata") is a Python dictionary with the following keys. It is available
    for **all document types**, though not all entries may always contain data. For
    details of their meanings and formats consult the respective manuals, e.g. [Adobe
    PDF References](app3.html#adobemanual) for PDF. Further information can also be
    found in chapter [Document](document.html#document). The meta data fields are
    strings or *None* if not otherwise indicated. Also be aware that not all of them
    always contain meaningful data – even if they are not *None*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF完全支持标准元数据。[`Document.metadata`](document.html#Document.metadata "Document.metadata")
    是一个Python字典，包含以下键。虽然并非所有条目始终包含数据，但它适用于**所有文档类型**。有关其含义和格式的详细信息，请参阅相应的手册，例如[Adobe
    PDF参考手册](app3.html#adobemanual)。还可以在[文档](document.html#document)章节中找到更多信息。元数据字段是字符串，如果未另行指定，则为*None*。还要注意，即使它们不是*None*，并非所有字段始终包含有意义的数据。
- en: '| Key | Value |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Key | Value |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| producer | producer (producing software) |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| producer | 生产者（制作软件） |'
- en: '| format | format: ‘PDF-1.4’, ‘EPUB’, etc. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| format | 格式: ‘PDF-1.4’, ‘EPUB’等 |'
- en: '| encryption | encryption method used if any |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| encryption | 加密使用的加密方法 |'
- en: '| author | author |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| author | 作者 |'
- en: '| modDate | date of last modification |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| modDate | 上次修改日期 |'
- en: '| keywords | keywords |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| keywords | 关键词 |'
- en: '| title | title |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| title | 标题 |'
- en: '| creationDate | date of creation |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| creationDate | 创建日期 |'
- en: '| creator | creating application |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| creator | 创建应用程序 |'
- en: '| subject | subject |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| subject | 主题 |'
- en: Note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Apart from these standard metadata, **PDF documents** starting from PDF version
    1.4 may also contain so-called *“metadata streams”* (see also [`stream`](glossary.html#stream
    "stream")). Information in such streams is coded in XML. PyMuPDF deliberately
    contains no XML components for this purpose (the [PyMuPDF Xml class](xml-class.html#xml)
    is a helper class intended to access the DOM content of a [Story](story-class.html#story)
    object), so we do not directly support access to information contained therein.
    But you can extract the stream as a whole, inspect or modify it using a package
    like [lxml](https://pypi.org/project/lxml/) and then store the result back into
    the PDF. If you want, you can also delete this data altogether.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些标准元数据外，**PDF文档**从PDF版本1.4开始可能还包含所谓的*“元数据流”*（参见[`stream`](glossary.html#stream
    "stream")）。这些流中的信息以XML编码。PyMuPDF故意不包含XML组件用于此目的（[PyMuPDF Xml类](xml-class.html#xml)是一个帮助类，旨在访问[Story](story-class.html#story)对象的DOM内容），因此我们不直接支持访问其中包含的信息。但是，您可以将整个流提取出来，使用像[lxml](https://pypi.org/project/lxml/)这样的包进行检查或修改，然后将结果存回PDF中。如果您希望，您也可以完全删除这些数据。
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are two utility scripts in the repository that [metadata import (PDF only)](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-metadata/import.py)
    resp. [metadata export](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-metadata/export.py)
    metadata from resp. to CSV files.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库中有两个实用脚本，用于从PDF导入（仅限PDF）[元数据](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-metadata/import.py)
    和导出元数据，以及从CSV文件中导入（仅限PDF）[大纲](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-metadata/export.py)
    和导出大纲。
- en: Working with Outlines
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用大纲
- en: 'The easiest way to get all outlines (also called “bookmarks”) of a document,
    is by loading its *table of contents*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 获取文档所有大纲（也称为“书签”）的最简单方法是加载其*目录*：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will return a Python list of lists *[[lvl, title, page, …], …]* which looks
    much like a conventional table of contents found in books.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个Python列表的列表 *[[lvl, title, page, …], …]*，其看起来非常像书籍中常见的传统目录。
- en: '*lvl* is the hierarchy level of the entry (starting from 1), *title* is the
    entry’s title, and *page* the page number (1-based!). Other parameters describe
    details of the bookmark target.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*lvl*是条目的层次级别（从1开始），*title*是条目的标题，*page*是页面编号（从1开始）。其他参数描述书签目标的详细信息。'
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are two utility scripts in the repository that [toc import (PDF only)](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-toc/import.py)
    resp. [toc export](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-toc/export.py)
    table of contents from resp. to CSV files.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库中有两个实用脚本，用于从PDF导入（仅限PDF）[目录](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-toc/import.py)
    和导出目录，以及从CSV文件中导入（仅限PDF）[目录](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-toc/export.py)
    和导出目录。
- en: Working with Pages
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用页面
- en: '[Page](page.html#page) handling is at the core of MuPDF’s functionality.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[页面](page.html#page)处理是MuPDF功能的核心。'
- en: You can render a page into a raster or vector (SVG) image, optionally zooming,
    rotating, shifting or shearing it.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以将页面渲染成位图或矢量（SVG）图像，可选择缩放、旋转、移位或剪切它。
- en: You can extract a page’s text and images in many formats and search for text
    strings.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以以多种格式提取页面的文本和图像，并搜索文本字符串。
- en: For PDF documents many more methods are available to add text or images to pages.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于PDF文档，还有许多其他方法可用于向页面添加文本或图像。
- en: 'First, a [Page](page.html#page) must be created. This is a method of [Document](document.html#document):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，必须创建一个[页面](page.html#page)。这是[文档](document.html#document)的一个方法：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Any integer `-∞ < pno < page_count` is possible here. Negative numbers count
    backwards from the end, so *doc[-1]* is the last page, like with Python sequences.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此处可以是任意整数 `-∞ < pno < page_count`。负数从末尾开始计数，因此*doc[-1]*就像Python序列中的最后一页。
- en: 'Some more advanced way would be using the document as an **iterator** over
    its pages:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更高级的方法是使用文档作为其页的**迭代器**：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you have your page, here is what you would typically do with it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有了页面，这是您通常会对其执行的操作：
- en: Inspecting the Links, Annotations or Form Fields of a Page
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查页面的链接、注释或表单字段
- en: 'Links are shown as “hot areas” when a document is displayed with some viewer
    software. If you click while your cursor shows a hand symbol, you will usually
    be taken to the target that is encoded in that hot area. Here is how to get all
    links:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用某些查看器软件显示文档时，链接显示为“热区”。如果光标显示手符号，点击时通常会转到编码在该热区中的目标。以下是获取所有链接的方法：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*links* is a Python list of dictionaries. For details see [`Page.get_links()`](page.html#Page.get_links
    "Page.get_links").'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*links*是一个Python字典列表。详情请参见[`Page.get_links()`](page.html#Page.get_links "Page.get_links")。'
- en: 'You can also use an iterator which emits one link at a time:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用一个迭代器，每次发出一个链接：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If dealing with a PDF document page, there may also exist annotations ([Annot](annot.html#annot))
    or form fields ([Widget](widget.html#widget)), each of which have their own iterators:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果处理PDF文档页面，可能还存在注释([Annot](annot.html#annot))或表单字段([Widget](widget.html#widget))，它们各自有自己的迭代器：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Rendering a Page
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渲染页面
- en: 'This example creates a **raster** image of a page’s content:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例创建了页面内容的**位图**图像：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*pix* is a [Pixmap](pixmap.html#pixmap) object which (in this case) contains
    an **RGB** image of the page, ready to be used for many purposes. Method [`Page.get_pixmap()`](page.html#Page.get_pixmap
    "Page.get_pixmap") offers lots of variations for controlling the image: resolution
    / DPI, colorspace (e.g. to produce a grayscale image or an image with a subtractive
    color scheme), transparency, rotation, mirroring, shifting, shearing, etc. For
    example: to create an **RGBA** image (i.e. containing an alpha channel), specify
    *pix = page.get_pixmap(alpha=True)*.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*pix*是一个[Pixmap](pixmap.html#pixmap)对象，它（在本例中）包含页面的**RGB**图像，可用于多种目的。方法[`Page.get_pixmap()`](page.html#Page.get_pixmap
    "Page.get_pixmap")提供了许多控制图像的变体：分辨率/DPI、色彩空间（例如生成灰度图像或带有减色方案的图像）、透明度、旋转、镜像、移位、剪切等。例如：要创建**RGBA**图像（即包含alpha通道的图像），请指定*pix
    = page.get_pixmap(alpha=True)*。'
- en: A [Pixmap](pixmap.html#pixmap) contains a number of methods and attributes which
    are referenced below. Among them are the integers *width*, *height* (each in pixels)
    and *stride* (number of bytes of one horizontal image line). Attribute *samples*
    represents a rectangular area of bytes representing the image data (a Python *bytes*
    object).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[Pixmap](pixmap.html#pixmap)包含许多以下引用的方法和属性。其中包括像素的整数*宽度*、*高度*（每个像素）和*stride*（一行水平图像的字节数）。属性*samples*表示表示图像数据的字节的矩形区域（Python的*bytes*对象）。
- en: Note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also create a **vector** image of a page by using [`Page.get_svg_image()`](page.html#Page.get_svg_image
    "Page.get_svg_image"). Refer to this [Vector Image Support page](https://github.com/pymupdf/PyMuPDF/wiki/Vector-Image-Support)
    for details.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过使用[`Page.get_svg_image()`](page.html#Page.get_svg_image "Page.get_svg_image")创建页面的**矢量**图像。有关详细信息，请参阅此[矢量图像支持页面](https://github.com/pymupdf/PyMuPDF/wiki/Vector-Image-Support)。
- en: Saving the Page Image in a File
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将页面图像保存到文件中
- en: 'We can simply store the image in a PNG file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地将图像存储在PNG文件中：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Displaying the Image in GUIs
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在GUI中显示图像
- en: We can also use it in GUI dialog managers. [`Pixmap.samples`](pixmap.html#Pixmap.samples
    "Pixmap.samples") represents an area of bytes of all the pixels as a Python bytes
    object. Here are some examples, find more in the [examples](https://github.com/pymupdf/PyMuPDF/tree/master/examples)
    directory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将其用于GUI对话管理器。[`Pixmap.samples`](pixmap.html#Pixmap.samples "Pixmap.samples")表示所有像素的字节区域，作为Python字节对象。以下是一些示例，在[examples](https://github.com/pymupdf/PyMuPDF/tree/master/examples)目录中可以找到更多。
- en: wxPython
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: wxPython
- en: 'Consult their documentation for adjustments to RGB(A) pixmaps and, potentially,
    specifics for your wxPython release:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅他们的文档以调整RGB(A)像素图像，并且可能适用于您的wxPython版本的具体细节：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tkinter
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Tkinter
- en: 'Please also see section 3.19 of the [Pillow documentation](https://Pillow.readthedocs.io):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请还要参阅[Pillow文档](https://Pillow.readthedocs.io)的第3.19节：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following **avoids using Pillow**:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下**避免使用Pillow**：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you are looking for a complete Tkinter script paging through **any supported**
    document, [here it is!](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/browse-document/browse.py).
    It can also zoom into pages, and it runs under Python 2 or 3\. It requires the
    extremely handy [PySimpleGUI](https://pypi.org/project/PySimpleGUI/) pure Python
    package.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在寻找一个完整的Tkinter脚本来浏览**任何支持的**文档，[这里就是！](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/browse-document/browse.py)它还可以放大页面，并且可以在Python
    2或3下运行。它需要非常方便的[PySimpleGUI](https://pypi.org/project/PySimpleGUI/)纯Python包。
- en: PyQt4, PyQt5, PySide
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PyQt4, PyQt5, PySide
- en: 'Please also see section 3.16 of the [Pillow documentation](https://Pillow.readthedocs.io):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请还要参阅[Pillow文档](https://Pillow.readthedocs.io)的第3.16节：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Again, you also can get along **without using Pillow.** Qt’s `QImage` luckily
    supports native Python pointers, so the following is the recommended way to create
    Qt images:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，您也可以在不使用Pillow的情况下搞定。Qt的`QImage`幸运地支持本机Python指针，因此以下是创建Qt图像的推荐方法：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Extracting Text and Images
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取文本和图片
- en: 'We can also extract all text, images and other information of a page in many
    different forms, and levels of detail:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以以多种不同的形式和详细级别提取页面的所有文本、图片和其他信息：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use one of the following strings for *opt* to obtain different formats [[2]](#f2):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下字符串之一作为*opt*以获取不同格式 [[2]](#f2)：
- en: '**“text”**: (default) plain text with line breaks. No formatting, no text position
    details, no images.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“text”**: （默认）带有换行符的纯文本。无格式化，无文本位置细节，无图片。'
- en: '**“blocks”**: generate a list of text blocks (= paragraphs).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“blocks”**: 生成文本块的列表（=段落）。'
- en: '**“words”**: generate a list of words (strings not containing spaces).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“words”**: 生成单词列表（不包含空格的字符串）。'
- en: '**“html”**: creates a full visual version of the page including any images.
    This can be displayed with your internet browser.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“html”**: 创建页面的完整视觉版本，包括所有图片。这可以在您的互联网浏览器中显示。'
- en: '**“dict”** / **“json”**: same information level as HTML, but provided as a
    Python dictionary or resp. JSON string. See [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT
    "TextPage.extractDICT") for details of its structure.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“dict”** / **“json”**: 与HTML相同的信息级别，但提供为Python字典或JSON字符串。详见[`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT
    "TextPage.extractDICT")以了解其结构的详细信息。'
- en: '**“rawdict”** / **“rawjson”**: a super-set of **“dict”** / **“json”**. It additionally
    provides character detail information like XML. See [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT") for details of its structure.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“rawdict”** / **“rawjson”**: 是**“dict”** / **“json”**的超集。此外，它还提供像XML一样的字符详细信息。详见[`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT")以了解其结构的详细信息。'
- en: '**“xhtml”**: text information level as the TEXT version but includes images.
    Can also be displayed by internet browsers.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“xhtml”**: 文本信息级别与TEXT版本相同，但包含图片。也可以在互联网浏览器中显示。'
- en: '**“xml”**: contains no images, but full position and font information down
    to each single text character. Use an XML module to interpret.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“xml”**: 不包含图片，但包含完整的位置和字体信息，直到每个单独的文本字符。使用XML模块进行解释。'
- en: 'To give you an idea about the output of these alternatives, we did text example
    extracts. See [Appendix 2: Considerations on Embedded Files](app2.html#appendix2).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您对这些替代方案的输出有所了解，我们进行了文本示例提取。请参见[附录2：嵌入文件考虑事项](app2.html#appendix2)。
- en: Searching for Text
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索文本
- en: 'You can find out, exactly where on a page a certain text string appears:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 可以准确找出某个文本串在页面上的位置：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This delivers a list of rectangles (see [Rect](rect.html#rect)), each of which
    surrounds one occurrence of the string “mupdf” (case insensitive). You could use
    this information to e.g. highlight those areas (PDF only) or create a cross reference
    of the document.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这会提供一个矩形列表（参见 [Rect](rect.html#rect)），每个矩形围绕一个字符串“mupdf”的出现（不区分大小写）。您可以使用此信息来突出显示这些区域（仅限
    PDF）或创建文档的交叉引用。
- en: 'Please also do have a look at chapter [Working together: DisplayList and TextPage](coop_low.html#cooperation)
    and at demo programs [demo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo.py)
    and [demo-lowlevel.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo-lowlevel.py).
    Among other things they contain details on how the [TextPage](textpage.html#textpage),
    [Device](device.html#device) and [DisplayList](displaylist.html#displaylist) classes
    can be used for a more direct control, e.g. when performance considerations suggest
    it.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '请同时查看章节 [Working together: DisplayList and TextPage](coop_low.html#cooperation)
    和演示程序 [demo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo.py)
    以及 [demo-lowlevel.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo-lowlevel.py)。它们包含有关如何更直接控制
    [TextPage](textpage.html#textpage)、[Device](device.html#device) 和 [DisplayList](displaylist.html#displaylist)
    类的详细信息，例如在性能考虑建议时。'
- en: '## Stories: Generating PDF from HTML Source'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '## Stories: 从 HTML 源生成 PDF'
- en: The [Story](story-class.html#story) class is a new feature of PyMuPDF version
    1.21.0\. It represents support for MuPDF’s **“story”** interface.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[Story](story-class.html#story) 类是 PyMuPDF 版本 1.21.0 的新功能。它表示对 MuPDF 的 **“story”**
    接口的支持。'
- en: 'The following is a quote from the book [“MuPDF Explored”](https://mupdf.com/docs/mupdf-explored.html)
    by Robin Watts from [Artifex](https://www.artifex.com):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自 [“MuPDF Explored”](https://mupdf.com/docs/mupdf-explored.html) 一书的引用，作者是来自
    [Artifex](https://www.artifex.com) 的 Robin Watts：
- en: '* * *'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Stories provide a way to easily layout styled content for use with devices,
    such as those offered by Document Writers (…). The concept of a story comes from
    desktop publishing, which in turn (…) gets it from newspapers. If you consider
    a traditional newspaper layout, it will consist of various news articles (stories)
    that are laid out into multiple columns, possibly across multiple pages.*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*Stories 提供了一种为文档写入设备等设备易于布局的样式内容的方式。"Story" 的概念来自桌面发布，而桌面发布则是从报纸中得到的。如果您考虑传统报纸的布局，它将包含多个新闻文章（故事），这些文章可能跨多列，可能跨多页。*'
- en: '*Accordingly, MuPDF uses a story to represent a flow of text with styling information.
    The user of the story can then supply a sequence of rectangles into which the
    story will be laid out, and the positioned text can then be drawn to an output
    device. This keeps the concept of the text itself (the story) to be separated
    from the areas into which the text should be flowed (the layout).*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*因此，MuPDF 使用 story 表示带有样式信息的文本流。story 的使用者可以提供一系列矩形，用来布置 story，并且可以将定位文本绘制到输出设备上。这保持了文本本身（story）与应该流入文本的区域（布局）的概念分离。*'
- en: '* * *'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A Story works somewhat similar to an internet browser: It faithfully parses
    and renders HTML hypertext and also optional stylesheets (CSS). But its **output
    is a PDF** – not web pages.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Story 与互联网浏览器类似：它忠实地解析和呈现 HTML 超文本，还可以使用样式表（CSS）。但它的 **输出是 PDF** 而不是网页。
- en: When creating a [Story](story-class.html#story), the input from up to three
    different information sources is taken into account. All these items are optional.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 [Story](story-class.html#story) 时，将考虑来自最多三种不同信息源的输入。所有这些项目都是可选的。
- en: HTML source code, either a Python string or **created by the script** using
    methods of [Xml](xml-class.html#xml).
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML 源代码，可以是 Python 字符串，也可以由脚本使用 [Xml](xml-class.html#xml) 类的方法创建。
- en: CSS (Cascaded Style Sheet) source code, provided as a Python string. CSS can
    be used to provide styling information (text font size, color, etc.) like it would
    happen for web pages. Obviously, this string may also be read from a file.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS（层叠样式表）源代码，提供为 Python 字符串。CSS 可用于提供样式信息（文本字体大小、颜色等），类似于为网页提供样式。显然，这个字符串也可以从文件中读取。
- en: An [Archive](archive-class.html#archive) **must be used** whenever the DOM references
    images, or uses text fonts except the standard [PDF Base 14 Fonts](app3.html#base-14-fonts),
    CJK fonts and the NOTO fonts generated into the PyMuPDF binary.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 DOM 引用图像或使用文本字体（除了标准的 [PDF Base 14 Fonts](app3.html#base-14-fonts)、CJK 字体和
    PyMuPDF 二进制中生成的 NOTO 字体）时，必须使用 [Archive](archive-class.html#archive)。
- en: 'The [API](xml-class.html#xml) allows creating DOMs completely from scratch,
    including desired styling information. It can also be used to modify or extend
    **provided** HTML: text can be deleted or replaced, or its styling can be changed.
    Text – for example extracted from databases – can also be added and fill template-like
    HTML documents.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[API](xml-class.html#xml)允许完全从头创建 DOM，包括所需的样式信息。它还可以用于修改或扩展**提供的** HTML：文本可以被删除或替换，或者其样式可以更改。文本（例如从数据库提取的文本）也可以添加并填充类似模板的
    HTML 文档。'
- en: 'It is **not required** to provide syntactically complete HTML documents: snippets
    like `<b>Hello` are fully accepted, and many / most syntax errors are automatically
    corrected.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**不需要**提供语法完整的 HTML 文档：像`<b>Hello`这样的片段是完全被接受的，而且许多/大多数语法错误都会被自动纠正。'
- en: After the HTML is considered complete, it can be used to create a PDF document.
    This happens via the new [DocumentWriter](document-writer-class.html#documentwriter)
    class. The programmer calls its methods to create a new empty page, and passes
    rectangles to the Story to fill them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 被视为完整后，可以用于创建 PDF 文档。这通过新的[DocumentWriter](document-writer-class.html#documentwriter)类完成。程序员调用其方法创建一个新的空白页，并传递矩形到
    Story 来填充它们。
- en: The story in turn will return completion codes indicating whether or not more
    content is waiting to be written. Which part of the content will land in which
    rectangle or on which page is automatically determined by the story itself – it
    cannot be influenced other than by providing the rectangles.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Story 反过来会返回完成代码，指示是否还有更多内容等待写入。内容的哪部分将会在哪个矩形或哪个页面上被自动确定由 Story 自身决定 - 除了提供矩形以外，它不能被影响。
- en: Please see the [Stories recipes](recipes-stories.html#recipesstories) for a
    number of typical use cases.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[Stories recipes](recipes-stories.html#recipesstories)以获取一些典型用例。
- en: PDF Maintenance
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PDF 维护
- en: PDFs are the only document type that can be **modified** using PyMuPDF. Other
    file types are read-only.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 是唯一可以使用 PyMuPDF 进行**修改**的文档类型。其他文件类型是只读的。
- en: However, you can convert **any document** (including images) to a PDF and then
    apply all PyMuPDF features to the conversion result. Find out more here [`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf
    "Document.convert_to_pdf"), and also look at the demo script [pdf-converter.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/convert-document/convert.py)
    which can convert any [supported document](how-to-open-a-file.html#supported-file-types)
    to PDF.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可以将**任何文档**（包括图像）转换为 PDF，然后应用所有 PyMuPDF 功能到转换结果。在这里了解更多[`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf
    "Document.convert_to_pdf")，也可以查看演示脚本[pdf-converter.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/convert-document/convert.py)，它可以将任何[受支持的文档](how-to-open-a-file.html#supported-file-types)转换为
    PDF。
- en: '[`Document.save()`](document.html#Document.save "Document.save") always stores
    a PDF in its current (potentially modified) state on disk.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.save()`](document.html#Document.save "Document.save")总是将 PDF 以其当前（可能已修改）状态存储到磁盘上。'
- en: You normally can choose whether to save to a new file, or just append your modifications
    to the existing one (“incremental save”), which often is very much faster.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可以选择是保存到新文件，还是将修改附加到现有文件上（“增量保存”），这通常会快得多。
- en: 'The following describes ways how you can manipulate PDF documents. This description
    is by no means complete: much more can be found in the following chapters.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下描述了您可以操纵 PDF 文档的方法。这个描述并不完整：更多内容可以在后续章节中找到。
- en: Modifying, Creating, Re-arranging and Deleting Pages
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改、创建、重新排列和删除页面
- en: 'There are several ways to manipulate the so-called **page tree** (a structure
    describing all the pages) of a PDF:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以操纵所谓的**页面树**（描述所有页面的结构）：
- en: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")
    and [`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")
    delete pages.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")和[`Document.delete_pages()`](document.html#Document.delete_pages
    "Document.delete_pages")删除页面。'
- en: '[`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page"),
    [`Document.fullcopy_page()`](document.html#Document.fullcopy_page "Document.fullcopy_page")
    and [`Document.move_page()`](document.html#Document.move_page "Document.move_page")
    copy or move a page to other locations within the same document.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page")、[`Document.fullcopy_page()`](document.html#Document.fullcopy_page
    "Document.fullcopy_page")和[`Document.move_page()`](document.html#Document.move_page
    "Document.move_page")复制或移动页面到同一文档中的其他位置。'
- en: '[`Document.select()`](document.html#Document.select "Document.select") shrinks
    a PDF down to selected pages. Parameter is a sequence [[3]](#f3) of the page numbers
    that you want to keep. These integers must all be in range *0 <= i < page_count*.
    When executed, all pages **missing** in this list will be deleted. Remaining pages
    will occur **in the sequence and as many times (!) as you specify them**.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.select()`](document.html#Document.select "Document.select")将PDF缩小到所选页面。参数是要保留的页面编号序列[[3]](#f3)。这些整数必须都在*0
    <= i < page_count*范围内。执行时，不在列表中的所有页面将被删除。剩余页面将按照您指定的顺序出现，并且出现**多次**。'
- en: So you can easily create new PDFs with
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以轻松地创建新的PDF文件。
- en: the first or last 10 pages,
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一页或最后十页，
- en: only the odd or only the even pages (for doing double-sided printing),
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅奇数页或偶数页（用于双面打印），
- en: pages that **do** or **don’t** contain a given text,
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含或不包含给定文本的页面，
- en: reverse the page sequence, …
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反转页面顺序，…
- en: … whatever you can think of.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: …您可以想到的任何内容。
- en: The saved new document will contain links, annotations and bookmarks that are
    still valid (i.a.w. either pointing to a selected page or to some external resource).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的新文档将包含仍然有效的链接、注释和书签（即所选页面或某些外部资源）。
- en: '[`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")
    and [`Document.new_page()`](document.html#Document.new_page "Document.new_page")
    insert new pages.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")和[`Document.new_page()`](document.html#Document.new_page
    "Document.new_page")插入新页面。'
- en: Pages themselves can moreover be modified by a range of methods (e.g. page rotation,
    annotation and link maintenance, text and image insertion).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 页面本身还可以通过一系列方法进行修改（例如页面旋转、注释和链接维护、文本和图像插入）。
- en: Joining and Splitting PDF Documents
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并和拆分PDF文档
- en: 'Method [`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")
    copies pages **between different** PDF documents. Here is a simple **joiner**
    example (*doc1* and *doc2* being opened PDFs):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")在不同的PDF文档之间复制页面。这里是一个简单的**连接器**示例（*doc1*和*doc2*是打开的PDF）：
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is a snippet that **splits** *doc1*. It creates a new document of its
    first and its last 10 pages:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个**分割** *doc1* 的片段。它创建一个包含其前10页和最后10页的新文档：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: More can be found in the [Document](document.html#document) chapter. Also have
    a look at [PDFjoiner.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在[文档](document.html#document)章节中找到。还可以查看[PDFjoiner.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)。
- en: Embedding Data
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌入数据
- en: PDFs can be used as containers for arbitrary data (executables, other PDFs,
    text or binary files, etc.) much like ZIP archives.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: PDF可以用作任意数据（可执行文件、其他PDF、文本或二进制文件等）的容器，类似于ZIP档案。
- en: PyMuPDF fully supports this feature via [Document](document.html#document) *embfile_**
    methods and attributes. For some detail read Appendix 3, consult the Wiki on [dealing
    with embedding files](https://github.com/pymupdf/PyMuPDF/wiki/Dealing-with-Embedded-Files),
    or the example scripts [embedded-copy.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/copy-embedded/copy.py),
    [embedded-export.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-embedded/export.py),
    [embedded-import.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-embedded/import.py),
    and [embedded-list.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/list-embedded/list.py).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF完全支持此功能，通过[文档](document.html#document) *embfile_** 方法和属性。有关详细信息，请参阅附录3，查阅有关处理嵌入文件的Wiki（链接：<https://github.com/pymupdf/PyMuPDF/wiki/Dealing-with-Embedded-Files>），或查看示例脚本[embedded-copy.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/copy-embedded/copy.py)，[embedded-export.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-embedded/export.py)，[embedded-import.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-embedded/import.py)，以及[embedded-list.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/list-embedded/list.py)。
- en: Saving
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存
- en: As mentioned above, [`Document.save()`](document.html#Document.save "Document.save")
    will **always** save the document in its current state.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，[`Document.save()`](document.html#Document.save "Document.save")将始终以其当前状态保存文档。
- en: You can write changes back to the **original PDF** by specifying option *incremental=True*.
    This process is (usually) **extremely fast**, since changes are **appended to
    the original file** without completely rewriting it.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定选项*incremental=True*将更改写回到**原始PDF**。这个过程（通常）**非常快**，因为更改会**附加到原始文件**而不是完全重写它。
- en: '[`Document.save()`](document.html#Document.save "Document.save") options correspond
    to options of MuPDF’s command line utility *mutool clean*, see the following table.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.save()`](document.html#Document.save "Document.save")选项对应于MuPDF命令行实用程序*mutool
    clean*的选项，详见以下表格。'
- en: '| **Save Option** | **mutool** | **Effect** |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| **保存选项** | **mutool** | **效果** |'
- en: '| --- | --- | --- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| garbage=1 | g | garbage collect unused objects |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| garbage=1 | g | 垃圾回收未使用的对象 |'
- en: '| garbage=2 | gg | in addition to 1, compact [`xref`](glossary.html#xref "xref")
    tables |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| garbage=2 | gg | 除了1之外，压缩[`xref`](glossary.html#xref "xref")表格 |'
- en: '| garbage=3 | ggg | in addition to 2, merge duplicate objects |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| garbage=3 | ggg | 除了2之外，合并重复对象 |'
- en: '| garbage=4 | gggg | in addition to 3, merge duplicate stream content |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| garbage=4 | gggg | 除了3之外，合并重复的流内容 |'
- en: '| clean=True | cs | clean and sanitize content streams |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| clean=True | cs | 清理和消毒内容流 |'
- en: '| deflate=True | z | deflate uncompressed streams |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| deflate=True | z | 压缩未压缩的流 |'
- en: '| deflate_images=True | i | deflate image streams |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| deflate_images=True | i | 压缩图像流 |'
- en: '| deflate_fonts=True | f | deflate fontfile streams |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| deflate_fonts=True | f | 压缩字体文件流 |'
- en: '| ascii=True | a | convert binary data to ASCII format |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| ascii=True | a | 将二进制数据转换为ASCII格式 |'
- en: '| linear=True | l | create a linearized version |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| linear=True | l | 创建线性化版本 |'
- en: '| expand=True | d | decompress all streams |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| expand=True | d | 解压所有流 |'
- en: Note
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For an explanation of terms like *object, stream, xref* consult the [Glossary](glossary.html#glossary)
    chapter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解*对象、流、xref*等术语的解释，请参阅[术语表](glossary.html#glossary)章节。
- en: For example, *mutool clean -ggggz file.pdf* yields excellent compression results.
    It corresponds to *doc.save(filename, garbage=4, deflate=True)*.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*mutool clean -ggggz file.pdf* 可以获得出色的压缩结果。它对应于 *doc.save(filename, garbage=4,
    deflate=True)*。
- en: Closing
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结尾
- en: It is often desirable to “close” a document to relinquish control of the underlying
    file to the OS, while your program continues.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的程序继续运行的同时，通常希望“关闭”文档以放弃对底层文件的控制。
- en: This can be achieved by the [`Document.close()`](document.html#Document.close
    "Document.close") method. Apart from closing the underlying file, buffer areas
    associated with the document will be freed.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过[`Document.close()`](document.html#Document.close "Document.close")方法实现。除了关闭底层文件外，还将释放与文档相关的缓冲区域。
- en: Further Reading
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Also have a look at PyMuPDF’s [Wiki](https://github.com/pymupdf/PyMuPDF/wiki)
    pages. Especially those named in the sidebar under title **“Recipes”** cover over
    15 topics written in “How-To” style.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 还请查看PyMuPDF的[Wiki](https://github.com/pymupdf/PyMuPDF/wiki)页面。特别是侧边栏下标题为“Recipes”的页面，覆盖了超过15个以“How-To”风格编写的主题。
- en: This document also contains a [FAQ](faq.html#faq). This chapter has close connection
    to the aforementioned recipes, and it will be extended with more content over
    time.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档还包含一个[常见问题解答](faq.html#faq)。此章节与上述配方密切相关，将随时间推移增加更多内容。
- en: '* * *'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Footnotes
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 脚注
- en: Do you have any feedback on this page?
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对本页面有任何反馈吗？
- en: '* * *'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按原样提供，不附带任何明示或暗示的担保。此软件根据许可证分发，未经明确授权不得复制、修改或分发。有关详细信息，请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)，或联系Artifex
    Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA 94129, United States。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档涵盖所有版本直至1.24.4。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
- en: Importing the Bindings
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入绑定
- en: 'The Python bindings to MuPDF are made available by this import statement. We
    also show here how your version can be checked:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此导入语句提供了MuPDF的Python绑定。我们还展示了如何检查您的版本：
- en: '[PRE19]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note on the Name *fitz*
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称*fitz*的说明
- en: Old versions of PyMuPDF had their **Python** import name as `fitz`. Newer versions
    use `pymupdf` instead, and offer `fitz` as a fallback so that old code will still
    work.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版的PyMuPDF将其**Python**导入名称设为`fitz`。更新版本使用`pymupdf`，并提供`fitz`作为后备，以确保旧代码仍然可以运行。
- en: 'The reason for the name `fitz` is a historical curiosity:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 名称`fitz`的由来是一个历史的奇闻：
- en: The original rendering library for MuPDF was called *Libart*.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: MuPDF 的原始渲染库称为 *Libart*。
- en: '*“After Artifex Software acquired the MuPDF project, the development focus
    shifted on writing a new modern graphics library called “Fitz”. Fitz was originally
    intended as an R&D project to replace the aging Ghostscript graphics library,
    but has instead become the rendering engine powering MuPDF.”* (Quoted from [Wikipedia](https://en.wikipedia.org/wiki/MuPDF)).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*“在 Artifex 软件收购 MuPDF 项目后，开发重点转向编写一个名为“Fitz”的新型现代图形库。Fitz 最初旨在成为取代陈旧的 Ghostscript
    图形库的研发项目，但最终成为了 MuPDF 的渲染引擎。”*（摘自 [Wikipedia](https://en.wikipedia.org/wiki/MuPDF)）。'
- en: Note
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Importing PyMuPDF as `fitz` still works however PyMuPDF **cannot coexist** with
    other packages named “fitz” in the same Python environment.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管将 PyMuPDF 导入为 `fitz` 仍然有效，但 PyMuPDF **不能与** 相同 Python 环境中的其他名为“fitz”的包共存。
- en: Note on the Name *fitz*
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于名称 *fitz* 的说明
- en: Old versions of PyMuPDF had their **Python** import name as `fitz`. Newer versions
    use `pymupdf` instead, and offer `fitz` as a fallback so that old code will still
    work.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版本的 PyMuPDF 将其 **Python** 导入名称设为 `fitz`。更新版本改用 `pymupdf`，并提供 `fitz` 作为后备，以便旧代码仍然有效。
- en: 'The reason for the name `fitz` is a historical curiosity:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 名称 `fitz` 的原因是一个历史奇观：
- en: The original rendering library for MuPDF was called *Libart*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: MuPDF 的原始渲染库称为 *Libart*。
- en: '*“After Artifex Software acquired the MuPDF project, the development focus
    shifted on writing a new modern graphics library called “Fitz”. Fitz was originally
    intended as an R&D project to replace the aging Ghostscript graphics library,
    but has instead become the rendering engine powering MuPDF.”* (Quoted from [Wikipedia](https://en.wikipedia.org/wiki/MuPDF)).'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '*“在 Artifex 软件收购 MuPDF 项目后，开发重点转向编写一个名为“Fitz”的新型现代图形库。Fitz 最初旨在成为取代陈旧的 Ghostscript
    图形库的研发项目，但最终成为了 MuPDF 的渲染引擎。”*（摘自 [Wikipedia](https://en.wikipedia.org/wiki/MuPDF)）。'
- en: Note
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Importing PyMuPDF as `fitz` still works however PyMuPDF **cannot coexist** with
    other packages named “fitz” in the same Python environment.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管将 PyMuPDF 导入为 `fitz` 仍然有效，但 PyMuPDF **不能与** 相同 Python 环境中的其他名为“fitz”的包共存。
- en: '## Opening a Document'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '## 打开文档'
- en: 'To access a [supported document](how-to-open-a-file.html#supported-file-types),
    it must be opened with the following statement:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 [支持的文档](how-to-open-a-file.html#supported-file-types)，必须使用以下语句打开它：
- en: '[PRE20]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This creates the [Document](document.html#document) object *doc*. *filename*
    must be a Python string (or a `pathlib.Path`) specifying the name of an existing
    file.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建 [Document](document.html#document) 对象 *doc*。*filename* 必须是指定现有文件名的 Python
    字符串（或 `pathlib.Path`）。
- en: It is also possible to open a document from memory data, or to create a new,
    empty PDF. See [Document](document.html#document) for details. You can also use
    [Document](document.html#document) as a *context manager*.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以从内存数据打开文档，或创建一个新的空 PDF。详见 [Document](document.html#document)。您还可以将 [Document](document.html#document)
    用作 *上下文管理器*。
- en: A document contains many attributes and functions. Among them are meta information
    (like “author” or “subject”), number of total pages, outline and encryption information.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 文档包含许多属性和函数。其中包括元信息（如“作者”或“主题”）、总页数、大纲和加密信息。
- en: Some [Document](document.html#document) Methods and Attributes
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些 [Document](document.html#document) 方法和属性
- en: '| **Method / Attribute** | **Description** |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| **方法 / 属性** | **描述** |'
- en: '| --- | --- |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`Document.page_count`](document.html#Document.page_count "Document.page_count")
    | the number of pages (*int*) |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`Document.page_count`](document.html#Document.page_count "Document.page_count")
    | 页数（*整数*） |'
- en: '| [`Document.metadata`](document.html#Document.metadata "Document.metadata")
    | the metadata (*dict*) |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`Document.metadata`](document.html#Document.metadata "Document.metadata")
    | 元数据（*字典*） |'
- en: '| [`Document.get_toc()`](document.html#Document.get_toc "Document.get_toc")
    | get the table of contents (*list*) |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`Document.get_toc()`](document.html#Document.get_toc "Document.get_toc")
    | 获取目录（*列表*） |'
- en: '| [`Document.load_page()`](document.html#Document.load_page "Document.load_page")
    | read a [Page](page.html#page) |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [`Document.load_page()`](document.html#Document.load_page "Document.load_page")
    | 读取 [Page](page.html#page) |'
- en: Accessing Meta Data
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问元数据
- en: PyMuPDF fully supports standard metadata. [`Document.metadata`](document.html#Document.metadata
    "Document.metadata") is a Python dictionary with the following keys. It is available
    for **all document types**, though not all entries may always contain data. For
    details of their meanings and formats consult the respective manuals, e.g. [Adobe
    PDF References](app3.html#adobemanual) for PDF. Further information can also be
    found in chapter [Document](document.html#document). The meta data fields are
    strings or *None* if not otherwise indicated. Also be aware that not all of them
    always contain meaningful data – even if they are not *None*.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF完全支持标准元数据。[`Document.metadata`](document.html#Document.metadata "Document.metadata")是一个Python字典，具有以下键。它适用于**所有文档类型**，尽管不是所有条目始终包含数据。有关它们的含义和格式的详细信息，请参阅相应的手册，例如PDF的[Adobe
    PDF参考](app3.html#adobemanual)。更多信息也可以在章节[文档](document.html#document)中找到。元数据字段是字符串，如果没有其他指示，则为*None*。还要注意，即使它们不是*None*，并非所有字段始终包含有意义的数据。
- en: '| Key | Value |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 值 |'
- en: '| --- | --- |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| producer | producer (producing software) |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 生成者 | 生成软件 |'
- en: '| format | format: ‘PDF-1.4’, ‘EPUB’, etc. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 格式 | 格式：“PDF-1.4”，“EPUB”等 |'
- en: '| encryption | encryption method used if any |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 加密 | 如果有，则使用的加密方法 |'
- en: '| author | author |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 作者 | 作者 |'
- en: '| modDate | date of last modification |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 修改日期 | 上次修改日期 |'
- en: '| keywords | keywords |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 关键词 | 关键词 |'
- en: '| title | title |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 标题 | 标题 |'
- en: '| creationDate | date of creation |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 创建日期 | 创建日期 |'
- en: '| creator | creating application |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| 创建者 | 创建应用程序 |'
- en: '| subject | subject |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 主题 | 主题 |'
- en: Note
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Apart from these standard metadata, **PDF documents** starting from PDF version
    1.4 may also contain so-called *“metadata streams”* (see also [`stream`](glossary.html#stream
    "stream")). Information in such streams is coded in XML. PyMuPDF deliberately
    contains no XML components for this purpose (the [PyMuPDF Xml class](xml-class.html#xml)
    is a helper class intended to access the DOM content of a [Story](story-class.html#story)
    object), so we do not directly support access to information contained therein.
    But you can extract the stream as a whole, inspect or modify it using a package
    like [lxml](https://pypi.org/project/lxml/) and then store the result back into
    the PDF. If you want, you can also delete this data altogether.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些标准元数据外，从PDF版本1.4开始的**PDF文档**还可能包含所谓的*“元数据流”*（另请参见[`stream`](glossary.html#stream
    "stream")）。此类流中的信息以XML编码。PyMuPDF故意不包含用于此目的的XML组件（[PyMuPDF Xml类](xml-class.html#xml)是一个辅助类，用于访问[Story](story-class.html#story)对象的DOM内容），因此我们不直接支持访问其中包含的信息。但您可以将整个流提取出来，使用类似[lxml](https://pypi.org/project/lxml/)的软件包检查或修改它，然后将结果存回PDF。如果您愿意，还可以完全删除这些数据。
- en: Note
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are two utility scripts in the repository that [metadata import (PDF only)](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-metadata/import.py)
    resp. [metadata export](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-metadata/export.py)
    metadata from resp. to CSV files.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库中有两个实用程序脚本，用于从[元数据导入（仅限PDF）](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-metadata/import.py)或从CSV文件中导出[元数据](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-metadata/export.py)。
- en: Working with Outlines
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理大纲
- en: 'The easiest way to get all outlines (also called “bookmarks”) of a document,
    is by loading its *table of contents*:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 获取文档的所有大纲（也称为“书签”）的最简单方法是加载其*目录*：
- en: '[PRE21]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will return a Python list of lists *[[lvl, title, page, …], …]* which looks
    much like a conventional table of contents found in books.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个Python列表的列表*[[lvl, title, page, …], …]*，看起来很像书籍中的传统目录。
- en: '*lvl* is the hierarchy level of the entry (starting from 1), *title* is the
    entry’s title, and *page* the page number (1-based!). Other parameters describe
    details of the bookmark target.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '*lvl*是条目的层次级别（从1开始），*title*是条目的标题，*page*是页码（从1开始！）。其他参数描述了书签目标的详细信息。'
- en: Note
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are two utility scripts in the repository that [toc import (PDF only)](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-toc/import.py)
    resp. [toc export](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-toc/export.py)
    table of contents from resp. to CSV files.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库中有两个实用程序脚本，用于从[目录导入（仅限PDF）](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-toc/import.py)或从CSV文件中导出[目录](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-toc/export.py)。
- en: Working with Pages
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理页面
- en: '[Page](page.html#page) handling is at the core of MuPDF’s functionality.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[页面](page.html#page)处理是MuPDF功能的核心。'
- en: You can render a page into a raster or vector (SVG) image, optionally zooming,
    rotating, shifting or shearing it.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将页面呈现为光栅或矢量（SVG）图像，可选择缩放、旋转、移位或剪切它。
- en: You can extract a page’s text and images in many formats and search for text
    strings.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以以许多格式提取页面的文本和图像并搜索文本字符串。
- en: For PDF documents many more methods are available to add text or images to pages.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 PDF 文档，有更多的方法可用于向页面添加文本或图像。
- en: 'First, a [Page](page.html#page) must be created. This is a method of [Document](document.html#document):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，必须创建一个[页面](page.html#page)。这是[文档](document.html#document)的一种方法：
- en: '[PRE22]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Any integer `-∞ < pno < page_count` is possible here. Negative numbers count
    backwards from the end, so *doc[-1]* is the last page, like with Python sequences.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处可能存在任何整数`-∞ < pno < page_count`。负数从末尾开始计数，因此*doc[-1]*是最后一页，就像 Python 序列一样。
- en: 'Some more advanced way would be using the document as an **iterator** over
    its pages:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 更高级的方式之一是使用文档作为其页面的**迭代器**：
- en: '[PRE23]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once you have your page, here is what you would typically do with it:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了页面，以下是您通常会执行的操作：
- en: Inspecting the Links, Annotations or Form Fields of a Page
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查页面的链接、注释或表单字段
- en: 'Links are shown as “hot areas” when a document is displayed with some viewer
    software. If you click while your cursor shows a hand symbol, you will usually
    be taken to the target that is encoded in that hot area. Here is how to get all
    links:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用某些查看器软件显示文档时，链接显示为“热区”。如果光标显示手型符号时单击，通常会跳转到该热区编码的目标。以下是获取所有链接的方法：
- en: '[PRE24]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '*links* is a Python list of dictionaries. For details see [`Page.get_links()`](page.html#Page.get_links
    "Page.get_links").'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '*links*是一个字典的 Python 列表。有关详细信息，请参阅[`Page.get_links()`](page.html#Page.get_links
    "Page.get_links")。'
- en: 'You can also use an iterator which emits one link at a time:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用逐个链接发出一个链接的迭代器：
- en: '[PRE25]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If dealing with a PDF document page, there may also exist annotations ([Annot](annot.html#annot))
    or form fields ([Widget](widget.html#widget)), each of which have their own iterators:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果处理 PDF 文档页面，还可能存在注释([Annot](annot.html#annot))或表单字段([Widget](widget.html#widget))，它们各自有自己的迭代器：
- en: '[PRE26]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Rendering a Page
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渲染页面
- en: 'This example creates a **raster** image of a page’s content:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例创建了一个页面内容的**光栅**图像：
- en: '[PRE27]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '*pix* is a [Pixmap](pixmap.html#pixmap) object which (in this case) contains
    an **RGB** image of the page, ready to be used for many purposes. Method [`Page.get_pixmap()`](page.html#Page.get_pixmap
    "Page.get_pixmap") offers lots of variations for controlling the image: resolution
    / DPI, colorspace (e.g. to produce a grayscale image or an image with a subtractive
    color scheme), transparency, rotation, mirroring, shifting, shearing, etc. For
    example: to create an **RGBA** image (i.e. containing an alpha channel), specify
    *pix = page.get_pixmap(alpha=True)*.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '*pix*是一个[PixMap](pixmap.html#pixmap)对象，其中（在本例中）包含页面的**RGB**图像，可用于许多目的。方法[`Page.get_pixmap()`](page.html#Page.get_pixmap
    "Page.get_pixmap")提供了许多变体来控制图像：分辨率 / DPI、颜色空间（例如生成灰度图像或带有减法色彩方案的图像）、透明度、旋转、镜像、移位、剪切等。例如：要创建一个**RGBA**图像（即包含
    alpha 通道的图像），请指定*pix = page.get_pixmap(alpha=True)*。'
- en: A [Pixmap](pixmap.html#pixmap) contains a number of methods and attributes which
    are referenced below. Among them are the integers *width*, *height* (each in pixels)
    and *stride* (number of bytes of one horizontal image line). Attribute *samples*
    represents a rectangular area of bytes representing the image data (a Python *bytes*
    object).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[位图](pixmap.html#pixmap)包含下面引用的许多方法和属性。其中包括整数*宽度*、*高度*（每个像素）和*步幅*（一行的字节数）。属性*样本*表示表示图像数据的字节的矩形区域（Python
    *bytes*对象）。'
- en: Note
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also create a **vector** image of a page by using [`Page.get_svg_image()`](page.html#Page.get_svg_image
    "Page.get_svg_image"). Refer to this [Vector Image Support page](https://github.com/pymupdf/PyMuPDF/wiki/Vector-Image-Support)
    for details.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用[`Page.get_svg_image()`](page.html#Page.get_svg_image "Page.get_svg_image")创建一个页面的**矢量**图像。有关详细信息，请参阅此[矢量图像支持页面](https://github.com/pymupdf/PyMuPDF/wiki/Vector-Image-Support)。
- en: Saving the Page Image in a File
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存页面图像到文件
- en: 'We can simply store the image in a PNG file:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地将图像存储在 PNG 文件中：
- en: '[PRE28]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Displaying the Image in GUIs
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 GUI 中显示图像
- en: We can also use it in GUI dialog managers. [`Pixmap.samples`](pixmap.html#Pixmap.samples
    "Pixmap.samples") represents an area of bytes of all the pixels as a Python bytes
    object. Here are some examples, find more in the [examples](https://github.com/pymupdf/PyMuPDF/tree/master/examples)
    directory.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在 GUI 对话管理器中使用它。[`Pixmap.samples`](pixmap.html#Pixmap.samples "Pixmap.samples")
    表示所有像素的字节区域，作为 Python 字节对象。这里有一些例子，在 [examples](https://github.com/pymupdf/PyMuPDF/tree/master/examples)
    目录中找到更多。
- en: wxPython
  id: totrans-281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: wxPython
- en: 'Consult their documentation for adjustments to RGB(A) pixmaps and, potentially,
    specifics for your wxPython release:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅他们的文档，以调整 RGB(A) 图像和，可能，适用于你的 wxPython 版本的特定事项：
- en: '[PRE29]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tkinter
  id: totrans-284
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Tkinter
- en: 'Please also see section 3.19 of the [Pillow documentation](https://Pillow.readthedocs.io):'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 也请查看 [Pillow 文档](https://Pillow.readthedocs.io) 的第 3.19 节：
- en: '[PRE30]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following **avoids using Pillow**:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '以下**避免使用 Pillow**： '
- en: '[PRE31]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If you are looking for a complete Tkinter script paging through **any supported**
    document, [here it is!](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/browse-document/browse.py).
    It can also zoom into pages, and it runs under Python 2 or 3\. It requires the
    extremely handy [PySimpleGUI](https://pypi.org/project/PySimpleGUI/) pure Python
    package.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找一个完整的 Tkinter 脚本来翻页浏览**任何支持的**文档，[这里有！](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/browse-document/browse.py)它还可以缩放页面，并且在
    Python 2 或 3 下运行。它需要极其方便的 [PySimpleGUI](https://pypi.org/project/PySimpleGUI/)
    纯 Python 包。
- en: PyQt4, PyQt5, PySide
  id: totrans-290
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PyQt4、PyQt5、PySide
- en: 'Please also see section 3.16 of the [Pillow documentation](https://Pillow.readthedocs.io):'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 也请查看 [Pillow 文档](https://Pillow.readthedocs.io) 的第 3.16 节：
- en: '[PRE32]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Again, you also can get along **without using Pillow.** Qt’s `QImage` luckily
    supports native Python pointers, so the following is the recommended way to create
    Qt images:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你也可以**不使用 Pillow**。Qt 的 `QImage` 幸运地支持本机 Python 指针，因此以下是创建 Qt 图像的推荐方式：
- en: '[PRE33]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Extracting Text and Images
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取文本和图像
- en: 'We can also extract all text, images and other information of a page in many
    different forms, and levels of detail:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以以多种不同形式和详细程度提取页面的所有文本、图像和其他信息：
- en: '[PRE34]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Use one of the following strings for *opt* to obtain different formats [[2]](#f2):'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下字符串之一作为 *opt* 可以获取不同的格式 [[2]](#f2)：
- en: '**“text”**: (default) plain text with line breaks. No formatting, no text position
    details, no images.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“text”**：（默认）带有换行符的纯文本。无格式，无文本位置细节，无图像。'
- en: '**“blocks”**: generate a list of text blocks (= paragraphs).'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“blocks”**：生成文本块列表（= 段落）。'
- en: '**“words”**: generate a list of words (strings not containing spaces).'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“words”**：生成一个单词列表（不包含空格的字符串）。'
- en: '**“html”**: creates a full visual version of the page including any images.
    This can be displayed with your internet browser.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“html”**：创建包括任何图像在内的页面的完整视觉版本。这可以在你的互联网浏览器中显示。'
- en: '**“dict”** / **“json”**: same information level as HTML, but provided as a
    Python dictionary or resp. JSON string. See [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT
    "TextPage.extractDICT") for details of its structure.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“dict”** / **“json”**：与 HTML 相同的信息级别，但提供为 Python 字典或 JSON 字符串。请查看 [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT
    "TextPage.extractDICT") 以了解其结构的详细信息。'
- en: '**“rawdict”** / **“rawjson”**: a super-set of **“dict”** / **“json”**. It additionally
    provides character detail information like XML. See [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT") for details of its structure.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“rawdict”** / **“rawjson”**：**“dict”** / **“json”** 的超集。它还提供了像 XML 那样的字符详细信息。请查看
    [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT "TextPage.extractRAWDICT")
    以了解其结构的详细信息。'
- en: '**“xhtml”**: text information level as the TEXT version but includes images.
    Can also be displayed by internet browsers.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“xhtml”**：文本信息级别与 TEXT 版本相同，但包括图像。也可以通过互联网浏览器显示。'
- en: '**“xml”**: contains no images, but full position and font information down
    to each single text character. Use an XML module to interpret.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“xml”**：不包含图像，但包含完整的位置和字体信息，直到每个单个文本字符。使用 XML 模块进行解释。'
- en: 'To give you an idea about the output of these alternatives, we did text example
    extracts. See [Appendix 2: Considerations on Embedded Files](app2.html#appendix2).'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '为了让你对这些替代方案的输出有所了解，我们进行了文本示例提取。请查看 [Appendix 2: 嵌入式文件的注意事项](app2.html#appendix2)。'
- en: Searching for Text
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索文本
- en: 'You can find out, exactly where on a page a certain text string appears:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以精确地知道页面上某个文本字符串出现的位置：
- en: '[PRE35]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This delivers a list of rectangles (see [Rect](rect.html#rect)), each of which
    surrounds one occurrence of the string “mupdf” (case insensitive). You could use
    this information to e.g. highlight those areas (PDF only) or create a cross reference
    of the document.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供一个矩形列表（参见[Rect](rect.html#rect)），每个矩形围绕字符串“mupdf”的一个出现（不区分大小写）。您可以使用此信息来高亮显示这些区域（仅适用于PDF）或创建文档的交叉引用。
- en: 'Please also do have a look at chapter [Working together: DisplayList and TextPage](coop_low.html#cooperation)
    and at demo programs [demo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo.py)
    and [demo-lowlevel.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo-lowlevel.py).
    Among other things they contain details on how the [TextPage](textpage.html#textpage),
    [Device](device.html#device) and [DisplayList](displaylist.html#displaylist) classes
    can be used for a more direct control, e.g. when performance considerations suggest
    it.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '请查看第[Working together: DisplayList and TextPage](coop_low.html#cooperation)章节和演示程序[demo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo.py)和[demo-lowlevel.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo-lowlevel.py)。它们包含有关[TextPage](textpage.html#textpage)、[Device](device.html#device)和[DisplayList](displaylist.html#displaylist)类如何用于更直接的控制，例如在性能考虑建议时。'
- en: Inspecting the Links, Annotations or Form Fields of a Page
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查页面的链接、注释或表单字段
- en: 'Links are shown as “hot areas” when a document is displayed with some viewer
    software. If you click while your cursor shows a hand symbol, you will usually
    be taken to the target that is encoded in that hot area. Here is how to get all
    links:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 当文档使用某些查看器软件显示时，链接显示为“热区”。如果光标显示手形符号，单击时通常会跳转到编码在该热区中的目标。以下是如何获取所有链接的方法：
- en: '[PRE36]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '*links* is a Python list of dictionaries. For details see [`Page.get_links()`](page.html#Page.get_links
    "Page.get_links").'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '*links* 是一个Python字典列表。详情请参阅[`Page.get_links()`](page.html#Page.get_links "Page.get_links")。'
- en: 'You can also use an iterator which emits one link at a time:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用一个迭代器逐个发出一个链接：
- en: '[PRE37]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If dealing with a PDF document page, there may also exist annotations ([Annot](annot.html#annot))
    or form fields ([Widget](widget.html#widget)), each of which have their own iterators:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果处理PDF文档页面，则可能还存在注释（[Annot](annot.html#annot)）或表单字段（[Widget](widget.html#widget)），每个都有自己的迭代器：
- en: '[PRE38]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Rendering a Page
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渲染页面
- en: 'This example creates a **raster** image of a page’s content:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例创建页面内容的**光栅**图像：
- en: '[PRE39]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*pix* is a [Pixmap](pixmap.html#pixmap) object which (in this case) contains
    an **RGB** image of the page, ready to be used for many purposes. Method [`Page.get_pixmap()`](page.html#Page.get_pixmap
    "Page.get_pixmap") offers lots of variations for controlling the image: resolution
    / DPI, colorspace (e.g. to produce a grayscale image or an image with a subtractive
    color scheme), transparency, rotation, mirroring, shifting, shearing, etc. For
    example: to create an **RGBA** image (i.e. containing an alpha channel), specify
    *pix = page.get_pixmap(alpha=True)*.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '*pix* 是一个[Pixmap](pixmap.html#pixmap)对象，这里包含了**RGB**格式的页面图像，可用于多种用途。方法[`Page.get_pixmap()`](page.html#Page.get_pixmap
    "Page.get_pixmap")提供了许多变体，用于控制图像：分辨率/DPI、色彩空间（例如生成灰度图像或使用减法色彩方案的图像）、透明度、旋转、镜像、平移、剪切等等。例如：要创建**RGBA**图像（即包含alpha通道），请指定*pix
    = page.get_pixmap(alpha=True)*。'
- en: A [Pixmap](pixmap.html#pixmap) contains a number of methods and attributes which
    are referenced below. Among them are the integers *width*, *height* (each in pixels)
    and *stride* (number of bytes of one horizontal image line). Attribute *samples*
    represents a rectangular area of bytes representing the image data (a Python *bytes*
    object).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[Pixmap](pixmap.html#pixmap)包含许多下面引用的方法和属性。其中包括整数*width*、*height*（每个像素）和*stride*（一条水平图像线的字节数）。属性*samples*表示代表图像数据的字节的矩形区域（Python的*bytes*对象）。
- en: Note
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also create a **vector** image of a page by using [`Page.get_svg_image()`](page.html#Page.get_svg_image
    "Page.get_svg_image"). Refer to this [Vector Image Support page](https://github.com/pymupdf/PyMuPDF/wiki/Vector-Image-Support)
    for details.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用[`Page.get_svg_image()`](page.html#Page.get_svg_image "Page.get_svg_image")创建页面的**矢量**图像。请参阅此[Vector
    Image Support page](https://github.com/pymupdf/PyMuPDF/wiki/Vector-Image-Support)获取详情。
- en: Saving the Page Image in a File
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将页面图像保存在文件中
- en: 'We can simply store the image in a PNG file:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地将图像存储在PNG文件中：
- en: '[PRE40]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Displaying the Image in GUIs
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在GUI中显示图像
- en: We can also use it in GUI dialog managers. [`Pixmap.samples`](pixmap.html#Pixmap.samples
    "Pixmap.samples") represents an area of bytes of all the pixels as a Python bytes
    object. Here are some examples, find more in the [examples](https://github.com/pymupdf/PyMuPDF/tree/master/examples)
    directory.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在GUI对话框管理器中使用它。[`Pixmap.samples`](pixmap.html#Pixmap.samples "Pixmap.samples")表示所有像素的字节区域作为Python字节对象。这里有一些例子，在[examples](https://github.com/pymupdf/PyMuPDF/tree/master/examples)目录中找到更多。
- en: wxPython
  id: totrans-333
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: wxPython
- en: 'Consult their documentation for adjustments to RGB(A) pixmaps and, potentially,
    specifics for your wxPython release:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅他们的文档，调整RGB(A)像素图和可能的wxPython版本的特定内容：
- en: '[PRE41]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Tkinter
  id: totrans-336
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Tkinter
- en: 'Please also see section 3.19 of the [Pillow documentation](https://Pillow.readthedocs.io):'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Pillow文档](https://Pillow.readthedocs.io)的第3.19节：
- en: '[PRE42]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following **avoids using Pillow**:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容**避免使用Pillow**：
- en: '[PRE43]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If you are looking for a complete Tkinter script paging through **any supported**
    document, [here it is!](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/browse-document/browse.py).
    It can also zoom into pages, and it runs under Python 2 or 3\. It requires the
    extremely handy [PySimpleGUI](https://pypi.org/project/PySimpleGUI/) pure Python
    package.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个完整的Tkinter脚本来浏览**任何支持的**文档，[这里有！](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/browse-document/browse.py)它还可以缩放页面，并且可以在Python
    2或3下运行。它需要非常方便的[PySimpleGUI](https://pypi.org/project/PySimpleGUI/)纯Python包。
- en: PyQt4, PyQt5, PySide
  id: totrans-342
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PyQt4, PyQt5, PySide
- en: 'Please also see section 3.16 of the [Pillow documentation](https://Pillow.readthedocs.io):'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Pillow文档](https://Pillow.readthedocs.io)的第3.16节：
- en: '[PRE44]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Again, you also can get along **without using Pillow.** Qt’s `QImage` luckily
    supports native Python pointers, so the following is the recommended way to create
    Qt images:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你也可以**不使用Pillow**。Qt的`QImage`幸运地支持本地Python指针，因此以下是创建Qt图像的推荐方式：
- en: '[PRE45]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: wxPython
  id: totrans-347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: wxPython
- en: 'Consult their documentation for adjustments to RGB(A) pixmaps and, potentially,
    specifics for your wxPython release:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅他们的文档，调整RGB(A)像素图和可能的wxPython版本的特定内容：
- en: '[PRE46]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Tkinter
  id: totrans-350
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Tkinter
- en: 'Please also see section 3.19 of the [Pillow documentation](https://Pillow.readthedocs.io):'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Pillow文档](https://Pillow.readthedocs.io)的第3.19节：
- en: '[PRE47]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The following **avoids using Pillow**:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容**避免使用Pillow**：
- en: '[PRE48]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: If you are looking for a complete Tkinter script paging through **any supported**
    document, [here it is!](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/browse-document/browse.py).
    It can also zoom into pages, and it runs under Python 2 or 3\. It requires the
    extremely handy [PySimpleGUI](https://pypi.org/project/PySimpleGUI/) pure Python
    package.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个完整的Tkinter脚本来浏览**任何支持的**文档，[这里有！](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/browse-document/browse.py)它还可以缩放页面，并且可以在Python
    2或3下运行。它需要非常方便的[PySimpleGUI](https://pypi.org/project/PySimpleGUI/)纯Python包。
- en: PyQt4, PyQt5, PySide
  id: totrans-356
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PyQt4, PyQt5, PySide
- en: 'Please also see section 3.16 of the [Pillow documentation](https://Pillow.readthedocs.io):'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Pillow文档](https://Pillow.readthedocs.io)的第3.16节：
- en: '[PRE49]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Again, you also can get along **without using Pillow.** Qt’s `QImage` luckily
    supports native Python pointers, so the following is the recommended way to create
    Qt images:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你也可以**不使用Pillow**。Qt的`QImage`幸运地支持本地Python指针，因此以下是创建Qt图像的推荐方式：
- en: '[PRE50]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Extracting Text and Images
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取文本和图像
- en: 'We can also extract all text, images and other information of a page in many
    different forms, and levels of detail:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以以多种不同形式和详细级别提取一页中的所有文本、图像和其他信息：
- en: '[PRE51]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Use one of the following strings for *opt* to obtain different formats [[2]](#f2):'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下字符串之一作为*opt*以获取不同的格式[[2]](#f2)：
- en: '**“text”**: (default) plain text with line breaks. No formatting, no text position
    details, no images.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“text”**: （默认）带有换行符的纯文本。无格式，无文本位置详细信息，无图像。'
- en: '**“blocks”**: generate a list of text blocks (= paragraphs).'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“blocks”**: 生成文本块（=段落）列表。'
- en: '**“words”**: generate a list of words (strings not containing spaces).'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“words”**: 生成一个单词列表（不包含空格的字符串）。'
- en: '**“html”**: creates a full visual version of the page including any images.
    This can be displayed with your internet browser.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“html”**: 创建包含任何图像的完整视觉页面版本。这可以在您的互联网浏览器中显示。'
- en: '**“dict”** / **“json”**: same information level as HTML, but provided as a
    Python dictionary or resp. JSON string. See [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT
    "TextPage.extractDICT") for details of its structure.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“dict”** / **“json”**: 与HTML相同的信息级别，但作为Python字典或相应的JSON字符串提供。详细了解其结构，请参阅[`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT
    "TextPage.extractDICT")。'
- en: '**“rawdict”** / **“rawjson”**: a super-set of **“dict”** / **“json”**. It additionally
    provides character detail information like XML. See [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT") for details of its structure.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“rawdict”** / **“rawjson”**：是 **“dict”** / **“json”** 的超集。它还提供了像 XML 一样的字符详细信息。有关其结构的详细信息，请参阅
    [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT "TextPage.extractRAWDICT")。'
- en: '**“xhtml”**: text information level as the TEXT version but includes images.
    Can also be displayed by internet browsers.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“xhtml”**：文本信息级别与 TEXT 版本相同，但包括图像。也可以被互联网浏览器显示。'
- en: '**“xml”**: contains no images, but full position and font information down
    to each single text character. Use an XML module to interpret.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“xml”**：不包含图像，但包含每个单个文本字符的完整位置和字体信息。使用 XML 模块进行解释。'
- en: 'To give you an idea about the output of these alternatives, we did text example
    extracts. See [Appendix 2: Considerations on Embedded Files](app2.html#appendix2).'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你了解这些替代方案的输出，我们进行了文本示例提取。请参阅[附录 2：嵌入文件的考虑事项](app2.html#appendix2)。
- en: Searching for Text
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索文本
- en: 'You can find out, exactly where on a page a certain text string appears:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以准确地找出某个文本字符串在页面上的位置：
- en: '[PRE52]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This delivers a list of rectangles (see [Rect](rect.html#rect)), each of which
    surrounds one occurrence of the string “mupdf” (case insensitive). You could use
    this information to e.g. highlight those areas (PDF only) or create a cross reference
    of the document.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一个矩形列表（参见 [Rect](rect.html#rect)），每个矩形围绕一个字符串“mupdf”的出现（不区分大小写）。您可以使用此信息来突出显示这些区域（仅限
    PDF）或创建文档的交叉引用。
- en: 'Please also do have a look at chapter [Working together: DisplayList and TextPage](coop_low.html#cooperation)
    and at demo programs [demo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo.py)
    and [demo-lowlevel.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo-lowlevel.py).
    Among other things they contain details on how the [TextPage](textpage.html#textpage),
    [Device](device.html#device) and [DisplayList](displaylist.html#displaylist) classes
    can be used for a more direct control, e.g. when performance considerations suggest
    it.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 请还参阅章节 [共同工作：DisplayList 和 TextPage](coop_low.html#cooperation)，以及演示程序 [demo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo.py)
    和 [demo-lowlevel.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo/demo-lowlevel.py)。除其他外，它们还包含了有关如何使用
    [TextPage](textpage.html#textpage)、[Device](device.html#device) 和 [DisplayList](displaylist.html#displaylist)
    类进行更直接控制的详细信息，例如在性能考虑建议时。
- en: '## Stories: Generating PDF from HTML Source'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '## 故事：从 HTML 源生成 PDF'
- en: The [Story](story-class.html#story) class is a new feature of PyMuPDF version
    1.21.0\. It represents support for MuPDF’s **“story”** interface.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '[Story](story-class.html#story) 类是 PyMuPDF 版本 1.21.0 的新功能。它代表了对 MuPDF **“story”**
    接口的支持。'
- en: 'The following is a quote from the book [“MuPDF Explored”](https://mupdf.com/docs/mupdf-explored.html)
    by Robin Watts from [Artifex](https://www.artifex.com):'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是书籍 [“MuPDF 探索”](https://mupdf.com/docs/mupdf-explored.html) 中罗宾·沃茨（Robin
    Watts）的引言，来自 [Artifex](https://www.artifex.com)：
- en: '* * *'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Stories provide a way to easily layout styled content for use with devices,
    such as those offered by Document Writers (…). The concept of a story comes from
    desktop publishing, which in turn (…) gets it from newspapers. If you consider
    a traditional newspaper layout, it will consist of various news articles (stories)
    that are laid out into multiple columns, possibly across multiple pages.*'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '*故事为与文档编写器（...）等设备一起使用的样式内容提供了一种轻松布局的方式。故事的概念源自桌面出版，而桌面出版则（...）是从报纸那里得到的。如果你考虑一个传统的报纸版面布局，它将由各种新闻文章（故事）组成，这些文章将布局到多列中，可能跨越多页。*'
- en: '*Accordingly, MuPDF uses a story to represent a flow of text with styling information.
    The user of the story can then supply a sequence of rectangles into which the
    story will be laid out, and the positioned text can then be drawn to an output
    device. This keeps the concept of the text itself (the story) to be separated
    from the areas into which the text should be flowed (the layout).*'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '*因此，MuPDF 使用故事来表示带有样式信息的文本流。故事的使用者可以提供一系列矩形，其中故事将被布局，然后定位的文本可以绘制到输出设备上。这使得文本本身（故事）的概念与应流入文本的区域（布局）相分离。*'
- en: '* * *'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Note
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A Story works somewhat similar to an internet browser: It faithfully parses
    and renders HTML hypertext and also optional stylesheets (CSS). But its **output
    is a PDF** – not web pages.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 故事与互联网浏览器有些类似：它忠实地解析和渲染 HTML 超文本，还包括可选样式表（CSS）。但它的 **输出是 PDF** —— 而不是网页。
- en: When creating a [Story](story-class.html#story), the input from up to three
    different information sources is taken into account. All these items are optional.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 创建[Story](story-class.html#story)时，会考虑来自最多三个不同信息源的输入。所有这些项目都是可选的。
- en: HTML source code, either a Python string or **created by the script** using
    methods of [Xml](xml-class.html#xml).
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML源代码，可以是Python字符串，也可以是由脚本使用[Xml](xml-class.html#xml)的方法创建的。
- en: CSS (Cascaded Style Sheet) source code, provided as a Python string. CSS can
    be used to provide styling information (text font size, color, etc.) like it would
    happen for web pages. Obviously, this string may also be read from a file.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS（层叠样式表）源代码，作为Python字符串提供。CSS可用于提供样式信息（文本字体大小、颜色等），就像为网页发生的那样。显然，这个字符串也可以从文件中读取。
- en: An [Archive](archive-class.html#archive) **must be used** whenever the DOM references
    images, or uses text fonts except the standard [PDF Base 14 Fonts](app3.html#base-14-fonts),
    CJK fonts and the NOTO fonts generated into the PyMuPDF binary.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当DOM引用图像或使用文本字体（除标准的[PDF Base 14 Fonts](app3.html#base-14-fonts)，CJK字体和生成到PyMuPDF二进制中的NOTO字体之外），必须使用[Archive](archive-class.html#archive)。
- en: 'The [API](xml-class.html#xml) allows creating DOMs completely from scratch,
    including desired styling information. It can also be used to modify or extend
    **provided** HTML: text can be deleted or replaced, or its styling can be changed.
    Text – for example extracted from databases – can also be added and fill template-like
    HTML documents.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[API](xml-class.html#xml)允许完全从头创建DOM，包括所需的样式信息。它还可用于修改或扩展提供的HTML：文本可以删除或替换，或者其样式可以更改。例如从数据库提取的文本也可以添加并填充类似模板的HTML文档。'
- en: 'It is **not required** to provide syntactically complete HTML documents: snippets
    like `<b>Hello` are fully accepted, and many / most syntax errors are automatically
    corrected.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 并不需要提供语法完整的HTML文档：像`<b>Hello`这样的片段完全被接受，并且许多/大多数语法错误会自动更正。
- en: After the HTML is considered complete, it can be used to create a PDF document.
    This happens via the new [DocumentWriter](document-writer-class.html#documentwriter)
    class. The programmer calls its methods to create a new empty page, and passes
    rectangles to the Story to fill them.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: HTML完成后，可以用来创建PDF文档。这通过新的[DocumentWriter](document-writer-class.html#documentwriter)类完成。程序员调用其方法创建一个新的空白页，并将矩形传递给Story来填充它们。
- en: The story in turn will return completion codes indicating whether or not more
    content is waiting to be written. Which part of the content will land in which
    rectangle or on which page is automatically determined by the story itself – it
    cannot be influenced other than by providing the rectangles.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 故事将返回完成代码，指示是否有更多内容等待编写。内容的哪部分会落入哪个矩形或哪一页，由故事自动确定 - 除了提供矩形外，不能受其他影响。
- en: Please see the [Stories recipes](recipes-stories.html#recipesstories) for a
    number of typical use cases.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Stories recipes](recipes-stories.html#recipesstories)，了解许多典型用例。
- en: PDF Maintenance
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PDF维护
- en: PDFs are the only document type that can be **modified** using PyMuPDF. Other
    file types are read-only.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: PDF是唯一可以使用PyMuPDF修改的文档类型。其他文件类型是只读的。
- en: However, you can convert **any document** (including images) to a PDF and then
    apply all PyMuPDF features to the conversion result. Find out more here [`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf
    "Document.convert_to_pdf"), and also look at the demo script [pdf-converter.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/convert-document/convert.py)
    which can convert any [supported document](how-to-open-a-file.html#supported-file-types)
    to PDF.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可以将**任何文档**（包括图像）转换为PDF，然后对转换结果应用所有PyMuPDF功能。在这里了解更多信息[`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf
    "Document.convert_to_pdf")，同时查看演示脚本[pdf-converter.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/convert-document/convert.py)，该脚本可以将任何[支持的文档](how-to-open-a-file.html#supported-file-types)转换为PDF。
- en: '[`Document.save()`](document.html#Document.save "Document.save") always stores
    a PDF in its current (potentially modified) state on disk.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.save()`](document.html#Document.save "Document.save")始终将PDF以其当前（可能修改的）状态存储到磁盘上。'
- en: You normally can choose whether to save to a new file, or just append your modifications
    to the existing one (“incremental save”), which often is very much faster.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 通常您可以选择是保存到新文件，还是仅将修改附加到现有文件（“增量保存”），这通常速度要快得多。
- en: 'The following describes ways how you can manipulate PDF documents. This description
    is by no means complete: much more can be found in the following chapters.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 以下描述了如何操作PDF文档的方式。这个描述并不完整：更多内容可以在接下来的章节中找到。
- en: Modifying, Creating, Re-arranging and Deleting Pages
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改，创建，重新排列和删除页面
- en: 'There are several ways to manipulate the so-called **page tree** (a structure
    describing all the pages) of a PDF:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种操作PDF的方法，所谓的**页面树**（描述所有页面的结构）：
- en: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")
    and [`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")
    delete pages.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")
    和 [`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")
    删除页面。'
- en: '[`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page"),
    [`Document.fullcopy_page()`](document.html#Document.fullcopy_page "Document.fullcopy_page")
    and [`Document.move_page()`](document.html#Document.move_page "Document.move_page")
    copy or move a page to other locations within the same document.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page"),
    [`Document.fullcopy_page()`](document.html#Document.fullcopy_page "Document.fullcopy_page")
    和 [`Document.move_page()`](document.html#Document.move_page "Document.move_page")
    将页面复制或移动到同一文档中的其他位置。'
- en: '[`Document.select()`](document.html#Document.select "Document.select") shrinks
    a PDF down to selected pages. Parameter is a sequence [[3]](#f3) of the page numbers
    that you want to keep. These integers must all be in range *0 <= i < page_count*.
    When executed, all pages **missing** in this list will be deleted. Remaining pages
    will occur **in the sequence and as many times (!) as you specify them**.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.select()`](document.html#Document.select "Document.select") 缩小PDF文件到选定页面。参数是一个包含你想要保留的页面编号的序列
    [[3]](#f3)。这些整数必须在 *0 <= i < page_count* 范围内。执行时，不在此列表中的所有页面将被删除。剩余页面将按照**你指定的顺序和次数**出现。'
- en: So you can easily create new PDFs with
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以轻松创建新的PDF文件，带有
- en: the first or last 10 pages,
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一或最后10页，
- en: only the odd or only the even pages (for doing double-sided printing),
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有奇数或只有偶数页（用于双面打印），
- en: pages that **do** or **don’t** contain a given text,
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含或不包含给定文本的页面，
- en: reverse the page sequence, …
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反转页面顺序，…
- en: … whatever you can think of.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: … 你能想到的任何内容。
- en: The saved new document will contain links, annotations and bookmarks that are
    still valid (i.a.w. either pointing to a selected page or to some external resource).
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的新文档将包含仍然有效的链接，注释和书签（即指向选定页面或某些外部资源）。
- en: '[`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")
    and [`Document.new_page()`](document.html#Document.new_page "Document.new_page")
    insert new pages.'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")
    和 [`Document.new_page()`](document.html#Document.new_page "Document.new_page")
    插入新页面。'
- en: Pages themselves can moreover be modified by a range of methods (e.g. page rotation,
    annotation and link maintenance, text and image insertion).
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 页面本身还可以通过一系列方法进行修改（例如页面旋转，注释和链接维护，文本和图像插入）。
- en: Joining and Splitting PDF Documents
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并和拆分PDF文档
- en: 'Method [`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")
    copies pages **between different** PDF documents. Here is a simple **joiner**
    example (*doc1* and *doc2* being opened PDFs):'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 [`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")
    在不同的PDF文档之间复制页面。这里是一个简单的**连接器**示例（*doc1* 和 *doc2* 是打开的PDF）：
- en: '[PRE53]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Here is a snippet that **splits** *doc1*. It creates a new document of its
    first and its last 10 pages:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个**拆分** *doc1* 的代码片段。它创建了一个包含其第一页和最后10页的新文档：
- en: '[PRE54]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: More can be found in the [Document](document.html#document) chapter. Also have
    a look at [PDFjoiner.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py).
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 更多内容请参阅 [Document](document.html#document) 章节。还可以查看 [PDFjoiner.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)。
- en: Embedding Data
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌入数据
- en: PDFs can be used as containers for arbitrary data (executables, other PDFs,
    text or binary files, etc.) much like ZIP archives.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: PDF可以像ZIP存档一样用作任意数据（可执行文件，其他PDF文件，文本或二进制文件等）的容器。
- en: PyMuPDF fully supports this feature via [Document](document.html#document) *embfile_**
    methods and attributes. For some detail read Appendix 3, consult the Wiki on [dealing
    with embedding files](https://github.com/pymupdf/PyMuPDF/wiki/Dealing-with-Embedded-Files),
    or the example scripts [embedded-copy.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/copy-embedded/copy.py),
    [embedded-export.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-embedded/export.py),
    [embedded-import.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-embedded/import.py),
    and [embedded-list.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/list-embedded/list.py).
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF通过[Document](document.html#document)的*embfile_*方法和属性完全支持此功能。有关详细信息，请阅读附录3，查阅关于处理嵌入文件的Wiki页面（[https://github.com/pymupdf/PyMuPDF/wiki/Dealing-with-Embedded-Files](https://github.com/pymupdf/PyMuPDF/wiki/Dealing-with-Embedded-Files)），或查看示例脚本[embedded-copy.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/copy-embedded/copy.py)，[embedded-export.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-embedded/export.py)，[embedded-import.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-embedded/import.py)和[embedded-list.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/list-embedded/list.py)。
- en: Saving
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存
- en: As mentioned above, [`Document.save()`](document.html#Document.save "Document.save")
    will **always** save the document in its current state.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，[`Document.save()`](document.html#Document.save "Document.save")将**始终**保存文档的当前状态。
- en: You can write changes back to the **original PDF** by specifying option *incremental=True*.
    This process is (usually) **extremely fast**, since changes are **appended to
    the original file** without completely rewriting it.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定选项*incremental=True*，可以将更改写回到**原始PDF**。此过程（通常）**非常快速**，因为更改会**附加到原始文件**而不完全重写它。
- en: '[`Document.save()`](document.html#Document.save "Document.save") options correspond
    to options of MuPDF’s command line utility *mutool clean*, see the following table.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.save()`](document.html#Document.save "Document.save")选项对应于MuPDF命令行实用程序*mutool
    clean*的选项，请参阅以下表格。'
- en: '| **Save Option** | **mutool** | **Effect** |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| **保存选项** | **mutool** | **效果** |'
- en: '| --- | --- | --- |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| garbage=1 | g | garbage collect unused objects |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| garbage=1 | g | 垃圾收集未使用的对象。'
- en: '| garbage=2 | gg | in addition to 1, compact [`xref`](glossary.html#xref "xref")
    tables |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| garbage=2 | gg | 除了1之外，还要紧凑[`xref`](glossary.html#xref "xref")表。'
- en: '| garbage=3 | ggg | in addition to 2, merge duplicate objects |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| garbage=3 | ggg | 除了2之外，还要合并重复的对象。'
- en: '| garbage=4 | gggg | in addition to 3, merge duplicate stream content |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| garbage=4 | gggg | 除了3之外，还要合并重复的流内容。'
- en: '| clean=True | cs | clean and sanitize content streams |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| clean=True | cs | 清理和消毒内容流。'
- en: '| deflate=True | z | deflate uncompressed streams |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| deflate=True | z | 压缩未压缩的流。'
- en: '| deflate_images=True | i | deflate image streams |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| deflate_images=True | i | 压缩图像流。'
- en: '| deflate_fonts=True | f | deflate fontfile streams |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| deflate_fonts=True | f | 压缩字体文件流。'
- en: '| ascii=True | a | convert binary data to ASCII format |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| ascii=True | a | 将二进制数据转换为ASCII格式。'
- en: '| linear=True | l | create a linearized version |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| linear=True | l | 创建线性化版本。'
- en: '| expand=True | d | decompress all streams |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| expand=True | d | 解压所有流。'
- en: Note
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For an explanation of terms like *object, stream, xref* consult the [Glossary](glossary.html#glossary)
    chapter.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解诸如*对象、流、xref*之类的术语，请参阅[Glossary](glossary.html#glossary)章节。
- en: For example, *mutool clean -ggggz file.pdf* yields excellent compression results.
    It corresponds to *doc.save(filename, garbage=4, deflate=True)*.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*mutool clean -ggggz file.pdf* 可以获得出色的压缩结果。它对应于 *doc.save(filename, garbage=4,
    deflate=True)*。
- en: Modifying, Creating, Re-arranging and Deleting Pages
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改、创建、重新排列和删除页面。
- en: 'There are several ways to manipulate the so-called **page tree** (a structure
    describing all the pages) of a PDF:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种操作PDF的方式来操作所谓的**页面树**（描述所有页面的结构）：
- en: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")
    and [`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")
    delete pages.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")
    和 [`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")
    删除页面。'
- en: '[`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page"),
    [`Document.fullcopy_page()`](document.html#Document.fullcopy_page "Document.fullcopy_page")
    and [`Document.move_page()`](document.html#Document.move_page "Document.move_page")
    copy or move a page to other locations within the same document.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page")、[`Document.fullcopy_page()`](document.html#Document.fullcopy_page
    "Document.fullcopy_page") 和 [`Document.move_page()`](document.html#Document.move_page
    "Document.move_page") 可以复制或移动页面到同一文档内的其他位置。'
- en: '[`Document.select()`](document.html#Document.select "Document.select") shrinks
    a PDF down to selected pages. Parameter is a sequence [[3]](#f3) of the page numbers
    that you want to keep. These integers must all be in range *0 <= i < page_count*.
    When executed, all pages **missing** in this list will be deleted. Remaining pages
    will occur **in the sequence and as many times (!) as you specify them**.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.select()`](document.html#Document.select "Document.select") 缩小 PDF
    至所选页面。参数是要保留的页面编号的序列 [[3]](#f3)。这些整数必须在 *0 <= i < page_count* 范围内。执行时，所有在此列表中缺失的页面将被删除。剩余的页面将按照您指定的顺序出现，次数可能是多次。'
- en: So you can easily create new PDFs with
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以轻松地创建新的 PDF 文件。
- en: the first or last 10 pages,
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一或最后 10 页，
- en: only the odd or only the even pages (for doing double-sided printing),
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅奇数页或仅偶数页（用于双面打印），
- en: pages that **do** or **don’t** contain a given text,
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含或不包含给定文本的页面。
- en: reverse the page sequence, …
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反转页面顺序，…
- en: … whatever you can think of.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: … 无论您能想到什么。
- en: The saved new document will contain links, annotations and bookmarks that are
    still valid (i.a.w. either pointing to a selected page or to some external resource).
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 已保存的新文档将包含仍然有效的链接、注释和书签（例如，指向选定页面或某些外部资源）。
- en: '[`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")
    and [`Document.new_page()`](document.html#Document.new_page "Document.new_page")
    insert new pages.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")
    和 [`Document.new_page()`](document.html#Document.new_page "Document.new_page")
    插入新页面。'
- en: Pages themselves can moreover be modified by a range of methods (e.g. page rotation,
    annotation and link maintenance, text and image insertion).
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 页面本身还可以通过一系列方法进行修改（例如页面旋转、注释和链接维护、文本和图像插入）。
- en: Joining and Splitting PDF Documents
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并和拆分 PDF 文档
- en: 'Method [`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")
    copies pages **between different** PDF documents. Here is a simple **joiner**
    example (*doc1* and *doc2* being opened PDFs):'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 [`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")
    可在不同的 PDF 文档之间复制页面。这里是一个简单的 **合并器** 示例（*doc1* 和 *doc2* 是已打开的 PDF）：
- en: '[PRE55]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Here is a snippet that **splits** *doc1*. It creates a new document of its
    first and its last 10 pages:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个将 *doc1* **拆分** 的片段。它创建了一个新文档，包含其前 10 页和最后 10 页：
- en: '[PRE56]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: More can be found in the [Document](document.html#document) chapter. Also have
    a look at [PDFjoiner.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py).
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅 [Document](document.html#document) 章节。还请查看 [PDFjoiner.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)。
- en: Embedding Data
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌入数据
- en: PDFs can be used as containers for arbitrary data (executables, other PDFs,
    text or binary files, etc.) much like ZIP archives.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 可用作任意数据（可执行文件、其他 PDF、文本或二进制文件等）的容器，类似于 ZIP 存档。
- en: PyMuPDF fully supports this feature via [Document](document.html#document) *embfile_**
    methods and attributes. For some detail read Appendix 3, consult the Wiki on [dealing
    with embedding files](https://github.com/pymupdf/PyMuPDF/wiki/Dealing-with-Embedded-Files),
    or the example scripts [embedded-copy.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/copy-embedded/copy.py),
    [embedded-export.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-embedded/export.py),
    [embedded-import.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-embedded/import.py),
    and [embedded-list.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/list-embedded/list.py).
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF 通过 [Document](document.html#document) 的 *embfile_** 方法和属性完全支持此功能。有关详细信息，请参阅附录
    3，查阅处理嵌入文件的 [Wiki](https://github.com/pymupdf/PyMuPDF/wiki/Dealing-with-Embedded-Files)，或查看示例脚本
    [embedded-copy.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/copy-embedded/copy.py)、[embedded-export.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/export-embedded/export.py)、[embedded-import.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-embedded/import.py)
    和 [embedded-list.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/list-embedded/list.py)。
- en: Saving
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存
- en: As mentioned above, [`Document.save()`](document.html#Document.save "Document.save")
    will **always** save the document in its current state.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，[`Document.save()`](document.html#Document.save "Document.save") 将始终以当前状态保存文档。
- en: You can write changes back to the **original PDF** by specifying option *incremental=True*.
    This process is (usually) **extremely fast**, since changes are **appended to
    the original file** without completely rewriting it.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定 *incremental=True* 将更改写回到**原始 PDF**。此过程（通常）非常快速，因为更改将**追加到原始文件**而不完全重写它。
- en: '[`Document.save()`](document.html#Document.save "Document.save") options correspond
    to options of MuPDF’s command line utility *mutool clean*, see the following table.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.save()`](document.html#Document.save "Document.save") 选项对应于MuPDF命令行实用程序*mutool
    clean*的选项，请参阅以下表格。'
- en: '| **Save Option** | **mutool** | **Effect** |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
  zh: '| **Save Option** | **mutool** | **Effect** |'
- en: '| --- | --- | --- |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| garbage=1 | g | garbage collect unused objects |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| garbage=1 | g | 垃圾收集未使用的对象 |'
- en: '| garbage=2 | gg | in addition to 1, compact [`xref`](glossary.html#xref "xref")
    tables |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| garbage=2 | gg | 除了1之外，紧缩 [`xref`](glossary.html#xref "xref") 表 |'
- en: '| garbage=3 | ggg | in addition to 2, merge duplicate objects |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| garbage=3 | ggg | 除了2之外，合并重复的对象 |'
- en: '| garbage=4 | gggg | in addition to 3, merge duplicate stream content |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| garbage=4 | gggg | 除了3之外，合并重复的流内容 |'
- en: '| clean=True | cs | clean and sanitize content streams |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| clean=True | cs | 清理并清除内容流 |'
- en: '| deflate=True | z | deflate uncompressed streams |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| deflate=True | z | 压缩未压缩的流 |'
- en: '| deflate_images=True | i | deflate image streams |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| deflate_images=True | i | 压缩图像流 |'
- en: '| deflate_fonts=True | f | deflate fontfile streams |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| deflate_fonts=True | f | 压缩字体文件流 |'
- en: '| ascii=True | a | convert binary data to ASCII format |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| ascii=True | a | 将二进制数据转换为ASCII格式 |'
- en: '| linear=True | l | create a linearized version |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| linear=True | l | 创建线性化版本 |'
- en: '| expand=True | d | decompress all streams |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| expand=True | d | 解压所有流 |'
- en: Note
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: For an explanation of terms like *object, stream, xref* consult the [Glossary](glossary.html#glossary)
    chapter.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解诸如 *object, stream, xref* 等术语的解释，请参阅[Glossary](glossary.html#glossary)章节。
- en: For example, *mutool clean -ggggz file.pdf* yields excellent compression results.
    It corresponds to *doc.save(filename, garbage=4, deflate=True)*.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*mutool clean -ggggz file.pdf* 可以获得优秀的压缩结果。它对应于 *doc.save(filename, garbage=4,
    deflate=True)*。
- en: Closing
  id: totrans-489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束
- en: It is often desirable to “close” a document to relinquish control of the underlying
    file to the OS, while your program continues.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序继续运行时，通常希望“关闭”文档以释放对底层文件的控制。
- en: This can be achieved by the [`Document.close()`](document.html#Document.close
    "Document.close") method. Apart from closing the underlying file, buffer areas
    associated with the document will be freed.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过[`Document.close()`](document.html#Document.close "Document.close") 方法实现。除了关闭底层文件外，还将释放与文档相关的缓冲区域。
- en: Further Reading
  id: totrans-492
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Also have a look at PyMuPDF’s [Wiki](https://github.com/pymupdf/PyMuPDF/wiki)
    pages. Especially those named in the sidebar under title **“Recipes”** cover over
    15 topics written in “How-To” style.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 还要查看PyMuPDF的[Wiki](https://github.com/pymupdf/PyMuPDF/wiki)页面。特别是侧边栏下标题为**“Recipes”**的页面，涵盖了15个主题的“How-To”风格文章。
- en: This document also contains a [FAQ](faq.html#faq). This chapter has close connection
    to the aforementioned recipes, and it will be extended with more content over
    time.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档还包含一个[FAQ](faq.html#faq)。此章节与前述的食谱有密切联系，并将随着时间的推移扩展更多内容。
- en: '* * *'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Footnotes
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 脚注
- en: Do you have any feedback on this page?
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个页面有任何反馈吗？
- en: '* * *'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按原样提供，没有任何明示或暗示的保证。此软件根据许可协议分发，并且未经授权的情况下不得复制、修改或分发。有关更多信息，请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)，或联系位于美国加利福尼亚州旧金山94129号Mesa
    Street 39号108A套房的Artifex Software Inc。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档覆盖了所有版本直至1.24.4。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
