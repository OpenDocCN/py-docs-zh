- en: Font
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/font.html](https://pymupdf.readthedocs.io/en/latest/font.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pymupdf.readthedocs.io/en/latest/font.html](https://pymupdf.readthedocs.io/en/latest/font.html)
- en: '*   New in v1.16.18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*   v1.16.18 中新增'
- en: This class represents a font as defined in MuPDF (*fz_font_s* structure). It
    is required for the new class [TextWriter](textwriter.html#textwriter) and the
    new [`Page.write_text()`](page.html#Page.write_text "Page.write_text"). Currently,
    it has no connection to how fonts are used in methods [`Page.insert_text()`](page.html#Page.insert_text
    "Page.insert_text") or [`Page.insert_textbox()`](page.html#Page.insert_textbox
    "Page.insert_textbox"), respectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此类表示 MuPDF 中定义的字体（*fz_font_s* 结构）。它对于新类 [TextWriter](textwriter.html#textwriter)
    和新的 [`Page.write_text()`](page.html#Page.write_text "Page.write_text") 是必需的。目前，它与方法
    [`Page.insert_text()`](page.html#Page.insert_text "Page.insert_text") 或 [`Page.insert_textbox()`](page.html#Page.insert_textbox
    "Page.insert_textbox") 中使用字体的方式无关。
- en: A Font object also contains useful general information, like the font bbox,
    the number of defined glyphs, glyph names or the bbox of a single glyph.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 字体对象还包含有用的一般信息，如字体 bbox、定义的字形数、字形名称或单个字形的 bbox。
- en: '| **Method / Attribute** | **Short Description** |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| **方法 / 属性** | **简要描述** |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`glyph_advance()`](#Font.glyph_advance "Font.glyph_advance") | Width of
    a character |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`glyph_advance()`](#Font.glyph_advance "Font.glyph_advance") | 字符宽度 |'
- en: '| [`glyph_bbox()`](#Font.glyph_bbox "Font.glyph_bbox") | Glyph rectangle |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`glyph_bbox()`](#Font.glyph_bbox "Font.glyph_bbox") | 字形矩形 |'
- en: '| [`glyph_name_to_unicode()`](#Font.glyph_name_to_unicode "Font.glyph_name_to_unicode")
    | Get unicode from glyph name |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`glyph_name_to_unicode()`](#Font.glyph_name_to_unicode "Font.glyph_name_to_unicode")
    | 从字形名称获取 Unicode |'
- en: '| [`has_glyph()`](#Font.has_glyph "Font.has_glyph") | Return glyph id of unicode
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`has_glyph()`](#Font.has_glyph "Font.has_glyph") | 返回 Unicode 的字形 id |'
- en: '| [`text_length()`](#Font.text_length "Font.text_length") | Compute string
    length |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`text_length()`](#Font.text_length "Font.text_length") | 计算字符串长度 |'
- en: '| [`char_lengths()`](#Font.char_lengths "Font.char_lengths") | Tuple of char
    widths of a string |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`char_lengths()`](#Font.char_lengths "Font.char_lengths") | 字符串的字符宽度元组 |'
- en: '| [`unicode_to_glyph_name()`](#Font.unicode_to_glyph_name "Font.unicode_to_glyph_name")
    | Get glyph name of a unicode |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`unicode_to_glyph_name()`](#Font.unicode_to_glyph_name "Font.unicode_to_glyph_name")
    | 获取 Unicode 的字形名称 |'
- en: '| [`valid_codepoints()`](#Font.valid_codepoints "Font.valid_codepoints") |
    Array of supported unicodes |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`valid_codepoints()`](#Font.valid_codepoints "Font.valid_codepoints") |
    支持的 Unicode 数组 |'
- en: '| [`ascender`](#Font.ascender "Font.ascender") | Font ascender |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`ascender`](#Font.ascender "Font.ascender") | 字体上升 |'
- en: '| [`descender`](#Font.descender "Font.descender") | Font descender |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`descender`](#Font.descender "Font.descender") | 字体下沉 |'
- en: '| [`bbox`](#Font.bbox "Font.bbox") | Font rectangle |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`bbox`](#Font.bbox "Font.bbox") | 字体矩形 |'
- en: '| [`buffer`](#Font.buffer "Font.buffer") | Copy of the font’s binary image
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`buffer`](#Font.buffer "Font.buffer") | 字体二进制图像的副本 |'
- en: '| [`flags`](#Font.flags "Font.flags") | Collection of font properties |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`flags`](#Font.flags "Font.flags") | 字体属性集合 |'
- en: '| [`glyph_count`](#Font.glyph_count "Font.glyph_count") | Number of supported
    glyphs |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`glyph_count`](#Font.glyph_count "Font.glyph_count") | 支持的字形数 |'
- en: '| [`name`](#Font.name "Font.name") | Name of font |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`name`](#Font.name "Font.name") | 字体名称 |'
- en: '| [`is_writable`](#Font.is_writable "Font.is_writable") | Font usable with
    [TextWriter](textwriter.html#textwriter) |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`is_writable`](#Font.is_writable "Font.is_writable") | 可用于 [TextWriter](textwriter.html#textwriter)
    的字体 |'
- en: '**Class API**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**类 API**'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Font constructor. The large number of parameters are used to locate font, which
    most closely resembles the requirements. Not all parameters are ever required
    – see the below pseudo code explaining the logic how the parameters are evaluated.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 字体构造函数。大量参数用于定位最接近要求的字体。并非所有参数都是必需的 - 请参见下面的伪代码，解释了参数的评估逻辑。
- en: 'Parameters:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**fontname** (*str*) –'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fontname** (*str*) –'
- en: 'one of the [PDF Base 14 Fonts](app3.html#base-14-fonts) or CJK fontnames. Also
    possible are a select few other names like (watch the correct spelling): “Arial”,
    “Times”, “Times Roman”.'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是 [PDF Base 14 Fonts](app3.html#base-14-fonts) 之一或 CJK 字体名称。还可能是一些其他名称，如（注意正确拼写）：“Arial”，“Times”，“Times
    Roman”。
- en: '*(Changed in v1.17.5)*'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*(在 v1.17.5 中更改)*'
- en: If you have installed [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/),
    there are also new “reserved” fontnames available, which are listed in `fitz_fonts`
    and in the table further down.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你安装了 [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/)，还有新的“保留”字体名称可用，这些名称在
    `fitz_fonts` 和后面的表中列出。
- en: '**fontfile** (*str*) – the filename of a fontfile somewhere on your system
    [[1]](#f1).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fontfile** (*str*) – 你系统中某处字体文件的文件名 [[1]](#f1)。'
- en: '**fontbuffer** (*bytes**,**bytearray**,**io.BytesIO*) – a fontfile loaded in
    memory [[1]](#f1).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fontbuffer** (*bytes**,**bytearray**,**io.BytesIO*) – 内存中加载的字体文件 [[1]](#f1)。'
- en: '**script** (*in*) – the number of a UCDN script. Currently supported in PyMuPDF
    are numbers 24, and 32 through 35.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**script** (*in*) – UCDN脚本编号。目前在PyMuPDF中支持的数字为24，以及32至35。'
- en: '**language** (*str*) – one of the values “zh-Hant” (traditional Chinese), “zh-Hans”
    (simplified Chinese), “ja” (Japanese) and “ko” (Korean). Otherwise, all ISO 639
    codes from the subsets 1, 2, 3 and 5 are also possible, but are currently documentary
    only.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**language** (*str*) – 其中一个值为“zh-Hant”（繁体中文）、“zh-Hans”（简体中文）、“ja”（日语）和“ko”（韩语）。否则，所有来自子集1、2、3和5的ISO
    639代码也可能是文档的唯一来源。'
- en: '**ordering** (*int*) – an alternative selector for one of the CJK fonts.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ordering** (*int*) – 用于选择CJK字体的备选选择器。'
- en: '**is_bold** (*bool*) – look for a bold font.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**is_bold** (*bool*) – 寻找粗体字体。'
- en: '**is_italic** (*bool*) – look for an italic font.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**is_italic** (*bool*) – 寻找斜体字体。'
- en: '**is_serif** (*bool*) – look for a serifed font.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**is_serif** (*bool*) – 寻找衬线字体。'
- en: 'Returns:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'a MuPDF font if successful. This is the overall sequence of checks to determine
    an appropriate font:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时是MuPDF字体。这是确定适当字体的整体检查顺序：
- en: '| Argument | Action |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 动作 |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| fontfile? | Create font from file, exception if failure. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| fontfile? | 从文件创建字体，如果失败则异常。 |'
- en: '| fontbuffer? | Create font from buffer, exception if failure. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| fontbuffer? | 从缓冲区创建字体，如果失败则异常。 |'
- en: '| ordering>=0 | Create universal font, always succeeds. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| ordering>=0 | 创建通用字体，始终成功。 |'
- en: '| fontname? | Create a Base-14 font, universal font, or font provided by [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/).
    See table below. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| fontname? | 创建基本14号字体、通用字体或由[pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/)提供的字体。参见下表。
    |'
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: With the usual reserved names “helv”, “tiro”, etc., you will create fonts with
    the expected names “Helvetica”, “Times-Roman” and so on. **However**, and in contrast
    to [`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font") and friends,
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通常的保留名称“helv”、“tiro”等，您将创建具有预期名称“Helvetica”、“Times-Roman”等的字体。 **然而**，与[`Page.insert_font()`](page.html#Page.insert_font
    "Page.insert_font")及其相关方法相比，
- en: a font file will **always** be embedded in your PDF,
  id: totrans-52
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体文件将**始终**嵌入到您的PDF中，
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Greek and Cyrillic characters are supported without needing the *encoding* parameter.
  id: totrans-55
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 希腊文和西里尔文字符无需*encoding*参数即可支持。
- en: Using *ordering >= 0*, or fontnames “cjk”, “china-t”, “china-s”, “japan” or
    “korea” will **always create the same “universal”** font **“Droid Sans Fallback
    Regular”**. This font supports **all Chinese, Japanese, Korean and Latin characters**,
    including Greek and Cyrillic. This is a sans-serif font.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *ordering >= 0* 或字体名称“cjk”、“china-t”、“china-s”、“japan”或“korea”将**始终创建相同的“通用”**字体**“Droid
    Sans Fallback Regular”**。该字体支持**所有中文、日文、韩文和拉丁文字符**，包括希腊文和西里尔文。这是一种无衬线字体。
- en: Actually, you would rarely ever need another sans-serif font than **“Droid Sans
    Fallback Regular”**. **Except** that this font file is relatively large and adds
    about 1.65 MB (compressed) to your PDF file size. If you do not need CJK support,
    stick with specifying “helv”, “tiro” etc., and you will get away with about 35
    KB compressed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您几乎永远不需要另一种非衬线字体，除非是**“Droid Sans Fallback Regular”**。 **但是**，该字体文件相对较大，会增加约1.65
    MB（压缩后）到您的PDF文件大小。如果不需要CJK支持，请继续指定“helv”、“tiro”等，您将仅需大约35 KB的压缩空间。
- en: 'If you **know** you have a mixture of CJK and Latin text, consider just using
    `Font("cjk")` because this supports everything and also significantly (by a factor
    of up to three) speeds up execution: MuPDF will always find any character in this
    single font and never needs to check fallbacks.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您**确定**有混合的CJK和拉丁文本，请考虑只使用`Font("cjk")`，因为它支持所有内容，同时显著提高执行速度（最多三倍）：MuPDF总是能够在这种单一字体中找到任何字符，从不需要检查回退。
- en: 'But if you do use some other font, you will still automatically be able to
    also write CJK characters: MuPDF detects this situation and silently falls back
    to the universal font (which will then of course also be embedded in your PDF).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您使用其他字体，您仍将自动能够编写CJK字符：MuPDF检测到此情况，并自动回退到通用字体（当然这也将被嵌入到您的PDF中）。
- en: '*(New in v1.17.5)* Optionally, some new “reserved” fontname codes become available
    if you install [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/), `pip
    install pymupdf-fonts`. **“Fira Mono”** is a mono-spaced sans font set and **FiraGO**
    is another non-serifed “universal” font set which supports all Latin (including
    Cyrillic and Greek) plus Thai, Arabian, Hewbrew and Devanagari – but none of the
    CJK languages. The size of a FiraGO font is only a quarter of the “Droid Sans
    Fallback” size (compressed 400 KB vs. 1.65 MB) – **and** it provides the weights
    bold, italic, bold-italic – which the universal font doesn’t.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*(v1.17.5中新增)* 可选地，如果安装了[pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/)，则会提供一些新的“保留”字体名称代码。**“Fira
    Mono”** 是一种等宽无衬线字体集，**FiraGO** 是另一种不带衬线的“通用”字体集，支持所有拉丁文（包括西里尔文和希腊文），以及泰文、阿拉伯文、希伯来文和天城文，但不支持任何CJK语言。FiraGO字体的大小仅为“Droid
    Sans Fallback”大小的四分之一（压缩为400 KB vs. 1.65 MB） – **并且** 提供粗体、斜体、粗斜体权重 – 这是通用字体所不具备的。'
- en: '**“Space Mono”** is another nice and small mono-spaced font from Google Fonts,
    which supports Latin Extended characters and comes with all 4 important weights.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**“Space Mono”** 是来自Google Fonts的另一款精致小巧的等宽字体，支持扩展拉丁字符并提供全部4种重要权重。'
- en: 'The following table maps a fontname code to the corresponding font. For the
    current content of the package please see its documentation:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下表将字体名称代码映射到相应的字体。有关软件包的当前内容，请参阅其文档：
- en: '| Code | Fontname | New in | Comment |'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| Code | 字体名称 | 新增 | 注释 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| figo | FiraGO Regular | v1.0.0 | narrower than Helvetica |'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| figo | FiraGO Regular | v1.0.0 | 比Helvetica更窄 |'
- en: '| figbo | FiraGO Bold | v1.0.0 |  |'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| figbo | FiraGO 粗体 | v1.0.0 |  |'
- en: '| figit | FiraGO Italic | v1.0.0 |  |'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| figit | FiraGO 斜体 | v1.0.0 |  |'
- en: '| figbi | FiraGO Bold Italic | v1.0.0 |  |'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| figbi | FiraGO 粗斜体 | v1.0.0 |  |'
- en: '| fimo | Fira Mono Regular | v1.0.0 |  |'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| fimo | Fira Mono Regular | v1.0.0 |  |'
- en: '| fimbo | Fira Mono Bold | v1.0.0 |  |'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| fimbo | Fira Mono 粗体 | v1.0.0 |  |'
- en: '| spacemo | Space Mono Regular | v1.0.1 |  |'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| spacemo | Space Mono Regular | v1.0.1 |  |'
- en: '| spacembo | Space Mono Bold | v1.0.1 |  |'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| spacembo | Space Mono 粗体 | v1.0.1 |  |'
- en: '| spacemit | Space Mono Italic | v1.0.1 |  |'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| spacemit | Space Mono 斜体 | v1.0.1 |  |'
- en: '| spacembi | Space Mono Bold-Italic | v1.0.1 |  |'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| spacembi | Space Mono 粗斜体 | v1.0.1 |  |'
- en: '| math | Noto Sans Math Regular | v1.0.2 | math symbols |'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| math | Noto Sans 数学 Regular | v1.0.2 | 数学符号 |'
- en: '| music | Noto Music Regular | v1.0.2 | musical symbols |'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| music | Noto 音乐 Regular | v1.0.2 | 音乐符号 |'
- en: '| symbol1 | Noto Sans Symbols Regular | v1.0.2 | replacement for “symb” |'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| symbol1 | Noto Sans 符号 Regular | v1.0.2 | 用于替换“symb”的字体 |'
- en: '| symbol2 | Noto Sans Symbols2 Regular | v1.0.2 | extended symbol set |'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| symbol2 | Noto Sans 符号2 Regular | v1.0.2 | 扩展符号集 |'
- en: '| notos | Noto Sans Regular | v1.0.3 | alternative to Helvetica |'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| notos | Noto Sans Regular | v1.0.3 | Helvetica的替代 |'
- en: '| notosit | Noto Sans Italic | v1.0.3 |  |'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| notosit | Noto Sans 斜体 | v1.0.3 |  |'
- en: '| notosbo | Noto Sans Bold | v1.0.3 |  |'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| notosbo | Noto Sans 粗体 | v1.0.3 |  |'
- en: '| notosbi | Noto Sans BoldItalic | v1.0.3 |  |'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| notosbi | Noto Sans 粗斜体 | v1.0.3 |  |'
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Check whether the unicode *chr* exists in the font or (option) some fallback
    font. May be used to check whether any “TOFU” symbols will appear on output.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 检查Unicode *chr* 是否存在于字体中或（选项）某些回退字体中。可用于检查输出中是否会出现任何“TOFU”符号。
- en: 'Parameters:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**chr** (*int*) – the unicode of the character (i.e. *ord()*).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**chr** (*int*) – 字符的Unicode（即*ord()*）。'
- en: '**language** (*str*) – the language – currently unused.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言** (*str*) – 语言 – 目前未使用。'
- en: '**script** (*int*) – the UCDN script number.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本** (*int*) – UCDN脚本编号。'
- en: '**fallback** (*bool*) – *(new in v1.17.5)* perform an extended search in fallback
    fonts or restrict to current font (default).'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回退** (*bool*) – *(v1.17.5中新增)* 在回退字体中执行扩展搜索或限制于当前字体（默认）。'
- en: 'Returns:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '*(changed in 1.17.7)* the glyph number. Zero indicates no glyph found.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*(1.17.7中更改)* 字形编号。零表示未找到字形。'
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: New in v1.17.5
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增于v1.17.5
- en: Return an array of unicodes supported by this font.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由该字体支持的Unicode数组。
- en: 'Returns:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'an *array.array* [[2]](#f2) of length at most [`Font.glyph_count`](#Font.glyph_count
    "Font.glyph_count"). I.e. *chr()* of every item in this array has a glyph in the
    font without using fallbacks. This is an example display of the supported glyphs:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一个长度最多为[`Font.glyph_count`](#Font.glyph_count "Font.glyph_count")的*array.array*
    [[2]](#f2)。即此数组中每个项目的*chr()*在字体中都有一个字形，而不使用回退字体。这是支持的字形的示例显示：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method only returns meaningful data for fonts having a CMAP (character
    map, charmap, the `/ToUnicode` PDF key). Otherwise, this array will have length
    1 and contain zero only.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅对具有CMAP（字符映射、字符映射、`/ToUnicode` PDF键）的字体返回有意义的数据。否则，此数组长度为1，并且仅包含零。
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Calculate the “width” of the character’s glyph (visual representation).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 计算字符字形的“宽度”（视觉表示）。
- en: 'Parameters:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**chr** (*int*) – the unicode number of the character. Use *ord()*, not the
    character itself. Again, this should normally work even if a character is not
    supported by that font, because fallback fonts will be checked where necessary.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**chr** (*int*) – 字符的Unicode编号。使用*ord()*而不是字符本身。即使某个字体不支持字符，这通常也应该工作，因为在必要时会检查备用字体。'
- en: '**wmode** (*int*) – write mode, 0 = horizontal, 1 = vertical.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**wmode** (*int*) – 写入模式，0 = 水平，1 = 垂直。'
- en: The other parameters are not in use currently.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 其他参数目前未使用。
- en: 'Returns:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a float representing the glyph’s width relative to **fontsize 1**.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 表示字形宽度相对于**fontsize 1**的浮点数。
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return the unicode value for a given glyph name. Use it in conjunction with
    `chr()` if you want to output e.g. a certain symbol.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定字形名称的Unicode值。如果要输出特定符号，可以与`chr()`结合使用。
- en: 'Parameters:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**name** (*str*) – The name of the glyph.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**name** (*str*) – 字形的名称。'
- en: 'Returns:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'The unicode integer, or 65533 = 0xFFFD if the name is unknown. Examples: `font.glyph_name_to_unicode("Sigma")
    = 931`, `font.glyph_name_to_unicode("sigma") = 963`. Refer to the [Adobe Glyph
    List](https://github.com/adobe-type-tools/agl-aglfn/blob/master/glyphlist.txt)
    publication for a list of glyph names and their unicode numbers. Example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果名称未知，则返回Unicode整数，或65533 = 0xFFFD。例如：`font.glyph_name_to_unicode("Sigma")
    = 931`，`font.glyph_name_to_unicode("sigma") = 963`。请参阅[Adobe Glyph List](https://github.com/adobe-type-tools/agl-aglfn/blob/master/glyphlist.txt)发布的字形名称及其Unicode编号列表。例如：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The glyph rectangle relative to [`fontsize`](glossary.html#fontsize "fontsize")
    1.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 字形相对于[`fontsize`](glossary.html#fontsize "fontsize") 1的矩形。
- en: 'Parameters:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**chr** (*int*) – *ord()* of the character.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**chr** (*int*) – 字符的*ord()*值。'
- en: 'Returns:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [Rect](rect.html#rect).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[矩形](rect.html#rect)。
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Show the name of the character’s glyph.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 显示字符字形的名称。
- en: 'Parameters:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**ch** (*int*) – the unicode number of the character. Use *ord()*, not the
    character itself.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch** (*int*) – 字符的Unicode编号。使用*ord()*而不是字符本身。'
- en: 'Returns:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a string representing the glyph’s name. E.g. `font.glyph_name(ord("#")) = "numbersign"`.
    For an invalid code “.notfound” is returned.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 表示字形名称的字符串。例如，`font.glyph_name(ord("#")) = "numbersign"`。对于无效的代码，“.notfound”将返回。
- en: Note
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*(Changed in v1.18.0)* This method and [`Font.glyph_name_to_unicode()`](#Font.glyph_name_to_unicode
    "Font.glyph_name_to_unicode") no longer depend on a font and instead retrieve
    information from the **Adobe Glyph List**. Also available as `pymupdf.unicode_to_glyph_name()`
    and resp. `pymupdf.glyph_name_to_unicode()`.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*(自v1.18.0起更改)* 此方法及[`Font.glyph_name_to_unicode()`](#Font.glyph_name_to_unicode
    "Font.glyph_name_to_unicode")不再依赖于字体，而是从**Adobe Glyph List**中获取信息。也可作为`pymupdf.unicode_to_glyph_name()`和相应的`pymupdf.glyph_name_to_unicode()`使用。'
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Calculate the length in points of a unicode string.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 计算Unicode字符串的长度（以点为单位）。
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There is a functional overlap with [`get_text_length()`](functions.html#get_text_length
    "get_text_length") for Base-14 fonts only.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅限Base-14字体的功能与[`get_text_length()`](functions.html#get_text_length "get_text_length")存在功能上的重叠。
- en: 'Parameters:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**text** (*str*) – a text string, UTF-8 encoded.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**text** (*str*) – 文本字符串，UTF-8编码。'
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize").'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fontsize** (*float*) – [`fontsize`](glossary.html#fontsize "fontsize")。'
- en: 'Return type:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: float
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数
- en: 'Returns:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the length of the string in points when stored in the PDF. If a character is
    not contained in the font, it will automatically be looked up in a fallback font.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在PDF中时以点为单位的字符串长度。如果字体中不包含某个字符，则会自动在备用字体中查找。
- en: Note
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This method was originally implemented in Python, based on calling [`Font.glyph_advance()`](#Font.glyph_advance
    "Font.glyph_advance"). For performance reasons, it has been rewritten in C for
    v1.18.14\. To compute the width of a single character, you can now use either
    of the following without performance penalty:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法最初是基于调用[`Font.glyph_advance()`](#Font.glyph_advance "Font.glyph_advance")在Python中实现的。出于性能原因，它在v1.18.14中已重写为C。现在，为了计算单个字符的宽度，您可以选择使用以下任一方法而无需性能惩罚：
- en: '`font.glyph_advance(ord("Ä")) * fontsize`'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`font.glyph_advance(ord("Ä")) * fontsize`'
- en: '`font.text_length("Ä", fontsize=fontsize)`'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`font.text_length("Ä", fontsize=fontsize)`'
- en: 'For multi-character strings, the method offers a huge performance advantage
    compared to the previous implementation: instead of about 0.5 microseconds for
    each character, only 12.5 nanoseconds are required for the second and subsequent
    ones.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多字符字符串，该方法与之前的实现相比具有巨大的性能优势：每个字符约为0.5微秒，而第二个及后续字符仅需12.5纳秒。
- en: '[PRE13]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*New in v1.18.14*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*v1.18.14中的新功能*'
- en: Sequence of character lengths in points of a unicode string.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 字符串中字符长度的点序列。
- en: 'Parameters:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**text** (*str*) – a text string, UTF-8 encoded.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**（*str*） – 一个文本字符串，UTF-8 编码。'
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize").'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字号**（*float*） – [`字号`](glossary.html#fontsize "字号").'
- en: 'Return type:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: tuple
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 元组（tuple）
- en: 'Returns:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'the lengths in points of the characters of a string when stored in the PDF.
    It works like [`Font.text_length()`](#Font.text_length "Font.text_length") broken
    down to single characters. This is a high speed method, used e.g. in [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox
    "TextWriter.fill_textbox"). The following is true (allowing rounding errors):
    `font.text_length(text) == sum(font.char_lengths(text))`.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在 PDF 中时字符串的字符长度点。它的工作方式类似于[`Font.text_length()`](#Font.text_length "Font.text_length")，分解为单个字符。以下是正确的（允许舍入误差）：`font.text_length(text)
    == sum(font.char_lengths(text))`。
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: New in v1.17.6
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增于版本 v1.17.6
- en: Copy of the binary font file content.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制字体文件内容的副本。
- en: 'Return type:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: bytes
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 字节（bytes）
- en: '[PRE16]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'A dictionary with various font properties, each represented as bools. Example
    for Helvetica:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 包含各种字体属性的字典，每个属性都表示为布尔值。以 Helvetica 为例：
- en: '[PRE17]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Return type:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: dict
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 字典（dict）
- en: '[PRE18]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Return type:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: str
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串（str）
- en: Name of the font. May be “” or “(null)”.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 字体名称。可能是“”或“(null)”。
- en: '[PRE19]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The font bbox. This is the maximum of its glyph bboxes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 字体边界框。这是其字形边界框的最大值。
- en: 'Return type:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[Rect](rect.html#rect)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[矩形](rect.html#rect)'
- en: '[PRE20]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Return type:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: int
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 整数（int）
- en: The number of glyphs defined in the font.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 字体中定义的字形数。
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: New in v1.18.0
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增于版本 v1.18.0
- en: 'The ascender value of the font, see [here](https://en.wikipedia.org/wiki/Ascender_(typography))
    for details. Please note that there is a difference to the strict definition:
    our value includes everything above the baseline – not just the height difference
    between upper case “A” and and lower case “a”.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 字体的上升值，详见[此处](https://en.wikipedia.org/wiki/Ascender_(typography))。请注意，这与严格的定义有所不同：我们的值包括基线以上的所有内容
    - 而不仅仅是大写字母“A”和小写字母“a”之间的高度差异。
- en: 'Return type:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: float
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数（float）
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: New in v1.18.0
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增于版本 v1.18.0
- en: The descender value of the font, see [here](https://en.wikipedia.org/wiki/Descender)
    for details. This value always is negative and is the portion that some glyphs
    descend below the base line, for example “g” or “y”. As a consequence, the value
    `ascender - descender` is the total height, that every glyph of the font fits
    into. This is true at least for most fonts – as always, there are exceptions,
    especially for calligraphic fonts, etc.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 字体的下降值，详见[此处](https://en.wikipedia.org/wiki/Descender)。此值始终为负，并且是某些字形在基线以下延伸的部分，例如“g”或“y”。因此，值`上升值
    - 下降值`是每个字体字形适合的总高度。这至少对大多数字体是正确的 - 如常规字体等等，总会有例外。
- en: 'Return type:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: float
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动（float）
- en: '[PRE23]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: New in v1.18.0
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增于版本 v1.18.0
- en: Indicates whether this font can be used with [TextWriter](textwriter.html#textwriter).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此字体是否可以与[TextWriter](textwriter.html#textwriter)一起使用。
- en: 'Return type:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: bool
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值（bool）
- en: Footnotes
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 脚注
- en: Do you have any feedback on this page?
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对本页有何反馈？
- en: '* * *'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按原样提供，不提供任何明示或暗示的保证。本软件根据许可证分发，并且未经许可明确授权，不得复制、修改或分发。有关许可信息，请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)，或联系位于美国加利福尼亚州旧金山94129
    Mesa Street，Suite 108A的Artifex Software Inc.以获取更多信息。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档涵盖了所有版本直至 1.24.4。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
