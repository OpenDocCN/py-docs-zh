- en: Using UPDATE and DELETE Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 UPDATE 和 DELETE 语句
- en: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/data_update.html](https://docs.sqlalchemy.org/en/20/tutorial/data_update.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/data_update.html](https://docs.sqlalchemy.org/en/20/tutorial/data_update.html)
- en: So far we’ve covered [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), so that we can get some data into our database,
    and then spent a lot of time on [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") which handles the broad range of usage patterns
    used for retrieving data from the database. In this section we will cover the
    [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    constructs, which are used to modify existing rows as well as delete existing
    rows. This section will cover these constructs from a Core-centric perspective.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经覆盖了 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")，这样我们可以将一些数据放入我们的数据库中，并且花了很多时间在
    [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    上，该语句处理了从数据库检索数据所使用的各种广泛的使用模式。 在本节中，我们将涵盖 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") 构造，用于修改现有行以及删除现有行。 本节将从核心的角度讨论这些构造。
- en: '**ORM Readers** - As was the case mentioned at [Using INSERT Statements](data_insert.html#tutorial-core-insert),
    the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    operations when used with the ORM are usually invoked internally from the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object as part of the [unit of work](../glossary.html#term-unit-of-work)
    process.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**ORM 读者** - 正如在 [使用 INSERT 语句](data_insert.html#tutorial-core-insert) 中提到的情况一样，当与
    ORM 一起使用时，[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    操作通常从 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象内部作为 [工作单元](../glossary.html#term-unit-of-work) 进程的一部分调用。'
- en: However, unlike [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") constructs can also be used directly with
    the ORM, using a pattern known as “ORM-enabled update and delete”; for this reason,
    familiarity with these constructs is useful for ORM use. Both styles of use are
    discussed in the sections [Updating ORM Objects using the Unit of Work pattern](orm_data_manipulation.html#tutorial-orm-updating)
    and [Deleting ORM Objects using the Unit of Work pattern](orm_data_manipulation.html#tutorial-orm-deleting).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    不同，[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    构造也可以直接与 ORM 一起使用，使用一种称为“ORM-enabled update and delete”的模式；因此，熟悉这些构造对于 ORM 的使用很有用。
    这两种使用方式在以下章节中讨论：[使用工作单元模式更新 ORM 对象](orm_data_manipulation.html#tutorial-orm-updating)
    和 [使用工作单元模式删除 ORM 对象](orm_data_manipulation.html#tutorial-orm-deleting)。
- en: '## The update() SQL Expression Construct'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '## update() SQL 表达式构造'
- en: The [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    function generates a new instance of [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") which represents an UPDATE statement in SQL,
    that will update existing data in a table.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    函数生成一个 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    的新实例，表示 SQL 中的 UPDATE 语句，该语句将更新表中的现有数据。'
- en: Like the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct, there is a “traditional” form of [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update"), which emits UPDATE against a single table
    at a time and does not return any rows. However some backends support an UPDATE
    statement that may modify multiple tables at once, and the UPDATE statement also
    supports RETURNING such that columns contained in matched rows may be returned
    in the result set.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")构造类似，还有一种“传统”的[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")形式，它一次只针对一个表发出UPDATE，不返回任何行。然而，一些后端支持可以一次修改多个表的UPDATE语句，并且UPDATE语句也支持RETURNING，使得匹配行中包含的列可以在结果集中返回。
- en: 'A basic UPDATE looks like:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的UPDATE看起来像：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") method controls the contents of the
    SET elements of the UPDATE statement. This is the same method shared by the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct. Parameters can normally be passed
    using the column names as keyword arguments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values")方法控制UPDATE语句的SET元素的内容。这是由[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造共享的相同方法。参数通常可以使用列名称作为关键字参数传递。'
- en: 'UPDATE supports all the major SQL forms of UPDATE, including updates against
    expressions, where we can make use of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") expressions:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: UPDATE支持所有主要的SQL UPDATE形式，包括针对表达式的更新，在其中我们可以利用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")表达式：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To support UPDATE in an “executemany” context, where many parameter sets will
    be invoked against the same statement, the [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct may be used to set up bound parameters;
    these replace the places that literal values would normally go:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在“executemany”上下文中支持UPDATE，其中将对同一语句调用许多参数集，可以使用[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造来设置绑定参数；这些参数取代了通常放置文本值的位置：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Other techniques which may be applied to UPDATE include:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可应用于UPDATE的其他技术包括：
- en: '### Correlated Updates'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '### 相关更新'
- en: 'An UPDATE statement can make use of rows in other tables by using a [correlated
    subquery](data_select.html#tutorial-scalar-subquery). A subquery may be used anywhere
    a column expression might be placed:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: UPDATE语句可以通过使用[相关子查询](data_select.html#tutorial-scalar-subquery)中的其他表中的行来使用。子查询可以用于任何可以放置列表达式的地方：
- en: '[PRE3]  ### UPDATE..FROM'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3]  ### UPDATE..FROM'
- en: 'Some databases such as PostgreSQL and MySQL support a syntax “UPDATE FROM”
    where additional tables may be stated directly in a special FROM clause. This
    syntax will be generated implicitly when additional tables are located in the
    WHERE clause of the statement:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库，如PostgreSQL和MySQL，支持一种称为“UPDATE FROM”的语法，在特殊的FROM子句中可以直接声明附加表。当其他表位于语句的WHERE子句中时，此语法将隐式生成：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There is also a MySQL specific syntax that can UPDATE multiple tables. This
    requires we refer to [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects in the VALUES clause in order to refer to additional tables:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种MySQL特定的语法，可以更新多个表。这要求我们在VALUES子句中引用[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，以便引用其他表：
- en: '[PRE5]  ### Parameter Ordered Updates'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5]  ### 参数有序更新'
- en: 'Another MySQL-only behavior is that the order of parameters in the SET clause
    of an UPDATE actually impacts the evaluation of each expression. For this use
    case, the [`Update.ordered_values()`](../core/dml.html#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method accepts a sequence of
    tuples so that this order may be controlled [[2]](#id2):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个仅适用于MySQL的行为是，UPDATE的SET子句中参数的顺序实际上影响每个表达式的评估。对于这种用例，[`Update.ordered_values()`](../core/dml.html#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")方法接受一个元组序列，以便可以控制此顺序 [[2]](#id2)：
- en: '[PRE6]  ## The delete() SQL Expression Construct'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]  ## delete() SQL表达式构造'
- en: The [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    function generates a new instance of [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") which represents a DELETE statement in SQL,
    that will delete rows from a table.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    函数生成一个表示 SQL 中 DELETE 语句的新实例 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")，该语句将从表中删除行。'
- en: The [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    statement from an API perspective is very similar to that of the [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") construct, traditionally returning no rows
    but allowing for a RETURNING variant on some database backends.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从 API 视角来看，[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    语句与 [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    构造非常相似，传统上不返回行，但在一些数据库后端上允许有 RETURNING 变体。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '### Multiple Table Deletes'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '### 多表删除'
- en: 'Like [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    supports the use of correlated subqueries in the WHERE clause as well as backend-specific
    multiple table syntaxes, such as `DELETE FROM..USING` on MySQL:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    类似，[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    支持在 WHERE 子句中使用相关子查询以及后端特定的多表语法，例如 MySQL 上的 `DELETE FROM..USING`：
- en: '[PRE8]  ## Getting Affected Row Count from UPDATE, DELETE'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE8]  ## 从 UPDATE、DELETE 中获取受影响的行数'
- en: 'Both [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    support the ability to return the number of rows matched after the statement proceeds,
    for statements that are invoked using Core [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), i.e. [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). Per the caveats mentioned below, this
    value is available from the [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    都支持在语句执行后返回匹配行数的功能，对于使用 Core [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 调用的语句，即 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")。根据下面提到的注意事项，这个值可以从 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") 属性中获取：'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") class is a subclass of [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") which contains additional attributes that are specific
    to the DBAPI `cursor` object. An instance of this subclass is returned when a
    statement is invoked via the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. When using the ORM, the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method returns an object of this type for all
    INSERT, UPDATE, and DELETE statements.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    类是 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    的子类，其中包含特定于 DBAPI `cursor` 对象的附加属性。当通过 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法调用语句时，将返回此子类的实例。在使用 ORM 时，对所有 INSERT、UPDATE
    和 DELETE 语句使用 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法会返回此类型的对象。'
- en: 'Facts about [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount"):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") 的事实：
- en: The value returned is the number of rows **matched** by the WHERE clause of
    the statement. It does not matter if the row were actually modified or not.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回的值是由语句的 WHERE 子句匹配的行数。无论实际上是否修改了行都无关紧要。
- en: '[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") is not necessarily available for an
    UPDATE or DELETE statement that uses RETURNING, or for one that uses an [executemany](dbapi_transactions.html#tutorial-multiple-parameters)
    execution. The availability depends on the DBAPI module in use.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用 RETURNING 的 UPDATE 或 DELETE 语句，或者使用 [executemany](dbapi_transactions.html#tutorial-multiple-parameters)
    执行的 UPDATE 或 DELETE 语句，不一定可以使用 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。其可用性取决于正在使用的 DBAPI 模块。
- en: In any case where the DBAPI does not determine the rowcount for some type of
    statement, the returned value will be `-1`.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何 DBAPI 不能确定某种类型语句的行数的情况下，返回值将为 `-1`。
- en: SQLAlchemy pre-memoizes the DBAPIs `cursor.rowcount` value before the cursor
    is closed, as some DBAPIs don’t support accessing this attribute after the fact.
    In order to pre-memoize `cursor.rowcount` for a statement that is not UPDATE or
    DELETE, such as INSERT or SELECT, the [`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") execution option may be used.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLAlchemy 在关闭游标之前预先缓存 DBAPI 的 `cursor.rowcount` 值，因为某些 DBAPI 不支持事后访问此属性。为了为不是
    UPDATE 或 DELETE 的语句（如 INSERT 或 SELECT）预先缓存 `cursor.rowcount`，可以使用 [`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") 执行选项。
- en: Some drivers, particularly third party dialects for non-relational databases,
    may not support [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") at all. The [`CursorResult.supports_sane_rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.supports_sane_rowcount
    "sqlalchemy.engine.CursorResult.supports_sane_rowcount") cursor attribute will
    indicate this.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些驱动程序，特别是用于非关系型数据库的第三方方言，可能根本不支持 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。[`CursorResult.supports_sane_rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.supports_sane_rowcount
    "sqlalchemy.engine.CursorResult.supports_sane_rowcount") 游标属性会指示此情况。
- en: “rowcount” is used by the ORM [unit of work](../glossary.html#term-unit-of-work)
    process to validate that an UPDATE or DELETE statement matched the expected number
    of rows, and is also essential for the ORM versioning feature documented at [Configuring
    a Version Counter](../orm/versioning.html#mapper-version-counter).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “rowcount” 被 ORM [工作单元](../glossary.html#term-unit-of-work) 过程用于验证 UPDATE 或
    DELETE 语句是否匹配了预期数量的行，并且也是 ORM 版本控制功能的重要组成部分，该功能在 [配置版本计数器](../orm/versioning.html#mapper-version-counter)
    中有文档说明。
- en: Using RETURNING with UPDATE, DELETE
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 UPDATE、DELETE 与 RETURNING
- en: 'Like the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct, [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    also support the RETURNING clause which is added by using the [`Update.returning()`](../core/dml.html#sqlalchemy.sql.expression.Update.returning
    "sqlalchemy.sql.expression.Update.returning") and [`Delete.returning()`](../core/dml.html#sqlalchemy.sql.expression.Delete.returning
    "sqlalchemy.sql.expression.Delete.returning") methods. When these methods are
    used on a backend that supports RETURNING, selected columns from all rows that
    match the WHERE criteria of the statement will be returned in the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object as rows that can be iterated:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造类似，[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    也支持 RETURNING 子句，通过使用 [`Update.returning()`](../core/dml.html#sqlalchemy.sql.expression.Update.returning
    "sqlalchemy.sql.expression.Update.returning") 和 [`Delete.returning()`](../core/dml.html#sqlalchemy.sql.expression.Delete.returning
    "sqlalchemy.sql.expression.Delete.returning") 方法添加。当这些方法在支持 RETURNING 的后端上使用时，与语句的
    WHERE 条件匹配的所有行的选定列将作为可以迭代的行返回到 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象中：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Further Reading for UPDATE, DELETE
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新、删除的进一步阅读
- en: See also
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'API documentation for UPDATE / DELETE:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更新/删除的 API 文档：
- en: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`更新`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")'
- en: '[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
- en: 'ORM-enabled UPDATE and DELETE:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 启用的 UPDATE 和 DELETE：
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](../orm/queryguide/dml.html#orm-expression-update-delete)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-启用的 INSERT、UPDATE 和 DELETE 语句](../orm/queryguide/dml.html#orm-expression-update-delete)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
- en: '## The update() SQL Expression Construct'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '## update() SQL 表达式构造'
- en: The [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    function generates a new instance of [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") which represents an UPDATE statement in SQL,
    that will update existing data in a table.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    函数生成一个新的 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    实例，表示 SQL 中的 UPDATE 语句，将更新表中的现有数据。'
- en: Like the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct, there is a “traditional” form of [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update"), which emits UPDATE against a single table
    at a time and does not return any rows. However some backends support an UPDATE
    statement that may modify multiple tables at once, and the UPDATE statement also
    supports RETURNING such that columns contained in matched rows may be returned
    in the result set.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 像 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    构造一样，还有一个“传统”形式的 [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")，它一次针对单个表发出 UPDATE，并且不返回任何行。然而，一些后端支持一种可以一次修改多个表的
    UPDATE 语句，并且 UPDATE 语句还支持 RETURNING，以便匹配行中包含的列可以在结果集中返回。
- en: 'A basic UPDATE looks like:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 UPDATE 如下所示：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") method controls the contents of the
    SET elements of the UPDATE statement. This is the same method shared by the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct. Parameters can normally be passed
    using the column names as keyword arguments.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") 方法控制 UPDATE 语句的 SET 元素的内容。这是由 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造共享的相同方法。通常可以使用列名作为关键字参数传递参数。'
- en: 'UPDATE supports all the major SQL forms of UPDATE, including updates against
    expressions, where we can make use of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") expressions:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: UPDATE 支持所有主要的 SQL UPDATE 形式，包括针对表达式的更新，我们可以利用 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 表达式：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To support UPDATE in an “executemany” context, where many parameter sets will
    be invoked against the same statement, the [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct may be used to set up bound parameters;
    these replace the places that literal values would normally go:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持在“executemany”上下文中的 UPDATE，其中将针对同一语句调用许多参数集，可以使用 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造来设置绑定参数；这些参数替换了通常放置字面值的位置：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Other techniques which may be applied to UPDATE include:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可应用于 UPDATE 的其他技术包括：
- en: '### Correlated Updates'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '### 相关更新'
- en: 'An UPDATE statement can make use of rows in other tables by using a [correlated
    subquery](data_select.html#tutorial-scalar-subquery). A subquery may be used anywhere
    a column expression might be placed:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: UPDATE 语句可以通过使用 [相关子查询](data_select.html#tutorial-scalar-subquery) 来使用其他表中的行。子查询可以在任何可以放置列表达式的地方使用：
- en: '[PRE14]  ### UPDATE..FROM'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE14]  ### UPDATE..FROM'
- en: 'Some databases such as PostgreSQL and MySQL support a syntax “UPDATE FROM”
    where additional tables may be stated directly in a special FROM clause. This
    syntax will be generated implicitly when additional tables are located in the
    WHERE clause of the statement:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库，如 PostgreSQL 和 MySQL，支持“UPDATE FROM”语法，其中额外的表可以直接在特殊的 FROM 子句中声明。当额外的表位于语句的
    WHERE 子句中时，将隐式生成此语法：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There is also a MySQL specific syntax that can UPDATE multiple tables. This
    requires we refer to [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects in the VALUES clause in order to refer to additional tables:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种MySQL特定的语法可以更新多个表。这需要在VALUES子句中引用[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，以便引用其他表：
- en: '[PRE16]  ### Parameter Ordered Updates'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE16]  ### 参数排序更新'
- en: 'Another MySQL-only behavior is that the order of parameters in the SET clause
    of an UPDATE actually impacts the evaluation of each expression. For this use
    case, the [`Update.ordered_values()`](../core/dml.html#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method accepts a sequence of
    tuples so that this order may be controlled [[2]](#id2):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个仅适用于MySQL的行为是，UPDATE的SET子句中参数的顺序实际上影响每个表达式的评估。对于这种用例，[`Update.ordered_values()`](../core/dml.html#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")方法接受一个元组序列，以便可以控制此顺序 [[2]](#id2)：
- en: '[PRE17]  ### Correlated Updates'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE17]  ### 相关更新'
- en: 'An UPDATE statement can make use of rows in other tables by using a [correlated
    subquery](data_select.html#tutorial-scalar-subquery). A subquery may be used anywhere
    a column expression might be placed:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: UPDATE语句可以通过使用[相关子查询](data_select.html#tutorial-scalar-subquery)中的行来使用其他表中的行。子查询可以在任何可以放置列表达式的地方使用：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '### UPDATE..FROM'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '### UPDATE..FROM'
- en: 'Some databases such as PostgreSQL and MySQL support a syntax “UPDATE FROM”
    where additional tables may be stated directly in a special FROM clause. This
    syntax will be generated implicitly when additional tables are located in the
    WHERE clause of the statement:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库，如PostgreSQL和MySQL，支持“UPDATE FROM”语法，其中额外的表可以直接在特殊的FROM子句中声明。当额外的表位于语句的WHERE子句中时，此语法将隐式生成：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'There is also a MySQL specific syntax that can UPDATE multiple tables. This
    requires we refer to [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects in the VALUES clause in order to refer to additional tables:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种MySQL特定的语法可以更新多个表。这需要在VALUES子句中引用[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，以便引用其他表：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '### Parameter Ordered Updates'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '### 参数排序更新'
- en: 'Another MySQL-only behavior is that the order of parameters in the SET clause
    of an UPDATE actually impacts the evaluation of each expression. For this use
    case, the [`Update.ordered_values()`](../core/dml.html#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method accepts a sequence of
    tuples so that this order may be controlled [[2]](#id2):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个仅适用于MySQL的行为是，UPDATE的SET子句中参数的顺序实际上影响每个表达式的评估。对于这种用例，[`Update.ordered_values()`](../core/dml.html#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")方法接受一个元组序列，以便可以控制此顺序 [[2]](#id2)：
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '## The delete() SQL Expression Construct'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '## delete() SQL表达式构造'
- en: The [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    function generates a new instance of [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") which represents a DELETE statement in SQL,
    that will delete rows from a table.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")函数生成一个新的[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")实例，表示SQL中的DELETE语句，它将从表中删除行。'
- en: The [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    statement from an API perspective is very similar to that of the [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") construct, traditionally returning no rows
    but allowing for a RETURNING variant on some database backends.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")语句从API的角度来看与[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")构造非常相似，传统上不返回任何行，但在一些数据库后端上允许使用RETURNING变体。'
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '### Multiple Table Deletes'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '### 多表删除'
- en: 'Like [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    supports the use of correlated subqueries in the WHERE clause as well as backend-specific
    multiple table syntaxes, such as `DELETE FROM..USING` on MySQL:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 像[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")一样，[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")支持在WHERE子句中使用相关子查询，以及后端特定的多表语法，例如MySQL上的`DELETE
    FROM..USING`：
- en: '[PRE23]  ### Multiple Table Deletes'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE23]  ### 多表删除'
- en: 'Like [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    supports the use of correlated subqueries in the WHERE clause as well as backend-specific
    multiple table syntaxes, such as `DELETE FROM..USING` on MySQL:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")类似，[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")也支持在 WHERE 子句中使用相关子查询，以及后端特定的多表语法，例如在 MySQL
    上的 `DELETE FROM..USING`：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '## Getting Affected Row Count from UPDATE, DELETE'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '## 从 UPDATE、DELETE 获取受影响的行数'
- en: 'Both [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    support the ability to return the number of rows matched after the statement proceeds,
    for statements that are invoked using Core [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), i.e. [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). Per the caveats mentioned below, this
    value is available from the [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    都支持在语句执行后返回匹配的行数的功能，对于使用 Core [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 调用的语句，即 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")。根据下面提到的注意事项，此值可从 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") 属性中获取：'
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") class is a subclass of [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") which contains additional attributes that are specific
    to the DBAPI `cursor` object. An instance of this subclass is returned when a
    statement is invoked via the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. When using the ORM, the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method returns an object of this type for all
    INSERT, UPDATE, and DELETE statements.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    类是 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    的子类，它包含特定于 DBAPI `cursor` 对象的其他属性。当通过 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法调用语句时，将返回此子类的实例。在使用 ORM 时，[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法为所有 INSERT、UPDATE 和 DELETE 语句返回此类型的对象。'
- en: 'Facts about [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount"):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") 的事实：
- en: The value returned is the number of rows **matched** by the WHERE clause of
    the statement. It does not matter if the row were actually modified or not.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回的值是由语句的 WHERE 子句**匹配**的行数。无论实际上是否修改了行都无关紧要。
- en: '[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") is not necessarily available for an
    UPDATE or DELETE statement that uses RETURNING, or for one that uses an [executemany](dbapi_transactions.html#tutorial-multiple-parameters)
    execution. The availability depends on the DBAPI module in use.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") 对于使用 RETURNING 的 UPDATE 或 DELETE 语句，或者使用
    [executemany](dbapi_transactions.html#tutorial-multiple-parameters) 执行的语句未必可用。可用性取决于所使用的
    DBAPI 模块。'
- en: In any case where the DBAPI does not determine the rowcount for some type of
    statement, the returned value will be `-1`.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 DBAPI 未确定某种类型语句的行数的任何情况下，返回值都将是 `-1`。
- en: SQLAlchemy pre-memoizes the DBAPIs `cursor.rowcount` value before the cursor
    is closed, as some DBAPIs don’t support accessing this attribute after the fact.
    In order to pre-memoize `cursor.rowcount` for a statement that is not UPDATE or
    DELETE, such as INSERT or SELECT, the [`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") execution option may be used.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLAlchemy 在游标关闭之前预先缓存 DBAPIs `cursor.rowcount` 的值，因为某些 DBAPIs 不支持在事后访问此属性。为了为非
    UPDATE 或 DELETE 的语句（例如 INSERT 或 SELECT）预先缓存 `cursor.rowcount`，可以使用 [`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options") 执行选项。
- en: Some drivers, particularly third party dialects for non-relational databases,
    may not support [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") at all. The [`CursorResult.supports_sane_rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.supports_sane_rowcount
    "sqlalchemy.engine.CursorResult.supports_sane_rowcount") cursor attribute will
    indicate this.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些驱动程序，特别是非关系数据库的第三方方言，可能根本不支持 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。[`CursorResult.supports_sane_rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.supports_sane_rowcount
    "sqlalchemy.engine.CursorResult.supports_sane_rowcount") 游标属性将指示这一点。
- en: “rowcount” is used by the ORM [unit of work](../glossary.html#term-unit-of-work)
    process to validate that an UPDATE or DELETE statement matched the expected number
    of rows, and is also essential for the ORM versioning feature documented at [Configuring
    a Version Counter](../orm/versioning.html#mapper-version-counter).
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “rowcount” 被 ORM [工作单元](../glossary.html#term-unit-of-work) 过程用于验证 UPDATE 或
    DELETE 语句是否匹配预期的行数，并且还是 ORM 版本控制功能的关键，该功能在 [配置版本计数器](../orm/versioning.html#mapper-version-counter)
    中有文档记录。
- en: Using RETURNING with UPDATE, DELETE
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 RETURNING 与 UPDATE、DELETE
- en: 'Like the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct, [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    also support the RETURNING clause which is added by using the [`Update.returning()`](../core/dml.html#sqlalchemy.sql.expression.Update.returning
    "sqlalchemy.sql.expression.Update.returning") and [`Delete.returning()`](../core/dml.html#sqlalchemy.sql.expression.Delete.returning
    "sqlalchemy.sql.expression.Delete.returning") methods. When these methods are
    used on a backend that supports RETURNING, selected columns from all rows that
    match the WHERE criteria of the statement will be returned in the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object as rows that can be iterated:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造相似，[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    也支持通过使用 [`Update.returning()`](../core/dml.html#sqlalchemy.sql.expression.Update.returning
    "sqlalchemy.sql.expression.Update.returning") 和 [`Delete.returning()`](../core/dml.html#sqlalchemy.sql.expression.Delete.returning
    "sqlalchemy.sql.expression.Delete.returning") 方法添加的 RETURNING 子句。当这些方法在支持 RETURNING
    的后端上使用时，匹配 WHERE 条件的所有行的选定列将作为可迭代的行返回到 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象中：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Further Reading for UPDATE, DELETE
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 UPDATE、DELETE 的进一步阅读
- en: See also
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: 'API documentation for UPDATE / DELETE:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: UPDATE / DELETE 的 API 文档：
- en: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")'
- en: '[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
- en: 'ORM-enabled UPDATE and DELETE:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 ORM 的 UPDATE 和 DELETE：
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](../orm/queryguide/dml.html#orm-expression-update-delete)
    - in the [ORM Querying Guide](../orm/queryguide/index.html)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 支持的 INSERT、UPDATE 和 DELETE 语句](../orm/queryguide/dml.html#orm-expression-update-delete)
    - 在 [ORM 查询指南](../orm/queryguide/index.html) 中'
