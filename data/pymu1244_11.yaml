- en: Text
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/recipes-text.html](https://pymupdf.readthedocs.io/en/latest/recipes-text.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pymupdf.readthedocs.io/en/latest/recipes-text.html](https://pymupdf.readthedocs.io/en/latest/recipes-text.html)
- en: '## How to Extract all Document Text'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何提取所有文档文本'
- en: This script will take a document filename and generate a text file from all
    of its text.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将接受文档文件名并生成其所有文本的文本文件。
- en: The document can be any [supported type](how-to-open-a-file.html#supported-file-types).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 文档可以是任何 [支持的类型](how-to-open-a-file.html#supported-file-types)。
- en: 'The script works as a command line tool which expects the document filename
    supplied as a parameter. It generates one text file named “filename.txt” in the
    script directory. Text of pages is separated by a form feed character:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本作为一个命令行工具运行，期望以文档文件名作为参数提供。它在脚本目录中生成一个名为“filename.txt”的文本文件。页面的文本由一个表单馈送字符分隔：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output will be plain text as it is coded in the document. No effort is made
    to prettify in any way. Specifically for PDF, this may mean output not in usual
    reading order, unexpected line breaks and so forth.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是文档中编码的纯文本。没有任何美化的努力。特别是对于PDF，这可能意味着输出不按照通常的阅读顺序，出现意外的换行等。
- en: 'You have many options to rectify this – see chapter [Appendix 2: Considerations
    on Embedded Files](app2.html#appendix2). Among them are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你有很多选项来纠正这一点 - 参见[附录2：关于嵌入文件的考虑](app2.html#appendix2)章节。其中包括：
- en: Extract text in HTML format and store it as a HTML document, so it can be viewed
    in any browser.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以HTML格式提取文本并将其存储为HTML文档，以便在任何浏览器中查看。
- en: Extract text as a list of text blocks via *Page.get_text(“blocks”)*. Each item
    of this list contains position information for its text, which can be used to
    establish a convenient reading order.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 *Page.get_text(“blocks”)* 提取文本作为文本块列表。列表中的每个条目包含其文本的位置信息，可用于建立方便的阅读顺序。
- en: Extract a list of single words via *Page.get_text(“words”)*. Its items are words
    with position information. Use it to determine text contained in a given rectangle
    – see next section.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 *Page.get_text(“words”)* 提取单词列表。其条目是带有位置信息的单词。用它来确定给定矩形中包含的文本 - 请参见下一节。
- en: 'See the following two sections for examples and further explanations.  ## How
    to Extract Text as Markdown'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '请参见以下两个部分的示例和进一步解释。  ## 如何将文本提取为Markdown'
- en: 'This is especially useful for RAG/LLM environments - please see [Outputting
    as Markdown](rag.html#rag-outputting-as-md).  ## How to Extract Key-Value Pairs
    from a Page'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '这对于RAG/LLM环境特别有用 - 请参见[输出为Markdown](rag.html#rag-outputting-as-md)。  ## 如何从页面中提取键-值对'
- en: If the layout of a page is *“predictable”* in some sense, then there is a simple
    way to find the values for a given set of keywords fast and easily – without using
    regular expressions. Please see [this example script](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/text-extraction/lookup-keywords.py).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面的布局在某种意义上是 *“可预测的”*，那么有一种简单的方法可以快速轻松地找到给定关键字集的值 - 而不使用正则表达式。请参见[此示例脚本](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/text-extraction/lookup-keywords.py)。
- en: '“Predictable” in this context means:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在此上下文中，“可预测的”意味着：
- en: Every keyword is followed by its value – no other text is present in between
    them.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个关键字后跟其值 - 没有其他文本出现在它们之间。
- en: The bottom of the value’s boundary box is **not above** the one of the keyword.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值的边界框底部 **不在** 关键字的底部上方。
- en: 'There are **no other restrictions**: the page layout may or may not be fixed,
    and the text may also have been stored as one string. Key and value may have any
    distance from each other.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有 **其他限制**：页面布局可以固定也可以不固定，文本也可能已存储为一个字符串。键和值之间可能具有任何距离。
- en: 'For example, the following five key-value pairs will be correctly identified:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下五个键-值对将被正确识别：
- en: '[PRE1]  ## How to Extract Text from within a Rectangle'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]  ## 如何从矩形中提取文本'
- en: There is now (v1.18.0) more than one way to achieve this. We therefore have
    created a [folder](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/textbox-extraction)
    in the PyMuPDF-Utilities repository specifically dealing with this topic.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在（v1.18.0）有超过一种方法可以实现这一点。因此，我们在PyMuPDF-Utilities仓库中创建了一个专门处理此主题的 [文件夹](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/textbox-extraction)。
- en: '* * *  ## How to Extract Text in Natural Reading Order'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ## 如何提取自然阅读顺序中的文本'
- en: One of the common issues with PDF text extraction is, that text may not appear
    in any particular reading order.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文本提取的一个常见问题是，文本可能不会按照任何特定的阅读顺序出现。
- en: 'This is the responsibility of the PDF creator (software or a human). For example,
    page headers may have been inserted in a separate step – after the document had
    been produced. In such a case, the header text will appear at the end of a page
    text extraction (although it will be correctly shown by PDF viewer software).
    For example, the following snippet will add some header and footer lines to an
    existing PDF:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PDF创建者（软件或人类）的责任。例如，页面标题可能是在文档生成之后的单独步骤中插入的。在这种情况下，页眉文本将出现在页面文本提取的末尾（尽管它将由PDF查看器软件正确显示）。例如，以下代码段将向现有的PDF添加一些页眉和页脚行：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The text sequence extracted from a page modified in this way will look like
    this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式修改的页面提取的文本序列如下所示：
- en: original text
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始文本
- en: header line
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标题行
- en: footer line
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页脚行
- en: 'PyMuPDF has several means to re-establish some reading sequence or even to
    re-generate a layout close to the original:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF有几种方法来重新建立一些阅读顺序，甚至重新生成接近原始的布局：
- en: Use `sort` parameter of [`Page.get_text()`](page.html#Page.get_text "Page.get_text").
    It will sort the output from top-left to bottom-right (ignored for XHTML, HTML
    and XML output).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[`Page.get_text()`](page.html#Page.get_text "Page.get_text")的`sort`参数。它将输出从左上到右下排序的输出（对XHTML、HTML和XML输出不起作用）。
- en: 'Use the `pymupdf` module in CLI: `python -m pymupdf gettext ...`, which produces
    a text file where text has been re-arranged in layout-preserving mode. Many options
    are available to control the output.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CLI中使用`pymupdf`模块：`python -m pymupdf gettext ...`，它会产生一个文本文件，其中的文本已经重新排列成保留布局的模式。有许多选项可用于控制输出。
- en: You can also use the above mentioned [script](https://github.com/pymupdf/PyMuPDF/wiki/How-to-extract-text-from-a-rectangle)
    with your modifications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用上述提到的[脚本](https://github.com/pymupdf/PyMuPDF/wiki/How-to-extract-text-from-a-rectangle)进行修改。
- en: '* * *  ## How to Extract Table Content from Documents'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ## 如何从文档中提取表格内容'
- en: If you see a table in a document, you are normally not looking at something
    like an embedded Excel or other identifiable object. It usually is just normal,
    standard text, formatted to appear as tabular data.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在文档中看到一个表格，通常不会看到像嵌入式Excel或其他可识别对象一样的东西。它通常只是普通的标准文本，格式化为看起来像表格数据。
- en: Extracting tabular data from such a page area therefore means that you must
    find a way to **identify** the table area (i.e. its boundary box), then **(1)**
    graphically indicate table and column borders, and **(2)** then extract text based
    on this information.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从这样一个页面区域提取表格数据意味着你必须找到一种方法来**识别**表格区域（即其边界框），然后**（1）**图形地指示表格和列边界，然后**（2）**根据此信息提取文本。
- en: This can be a very complex task, depending on details like the presence or absence
    of lines, rectangles or other supporting vector graphics.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个非常复杂的任务，具体取决于细节，如线条的存在或不存在，矩形或其他支持矢量图形的存在。
- en: Method [`Page.find_tables()`](page.html#Page.find_tables "Page.find_tables")
    does all that for you, with a high table detection precision. Its great advantage
    is that there are no external library dependencies, nor the need to employ artificial
    intelligence or machine learning technologies. It also provides an integrated
    interface to the well-known Python package for data analysis [pandas](https://pypi.org/project/pandas/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Page.find_tables()`](page.html#Page.find_tables "Page.find_tables")会为您完成所有这些工作，并具有高精度的表检测。它的巨大优势是没有外部库依赖，也不需要使用人工智能或机器学习技术。它还提供了与著名的Python数据分析包[pandas](https://pypi.org/project/pandas/)的集成接口。
- en: Please have a look at example [Jupyter notebooks](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/table-analysis),
    which cover standard situations like multiple tables on one page or joining table
    fragments across multiple pages.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看示例[Jupyter notebooks](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/table-analysis)，其中涵盖了标准情况，比如一页上有多个表格或跨多个页面连接表格片段。
- en: '* * *  ## How to Mark Extracted Text'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ## 如何标记提取的文本'
- en: 'There is a standard search function to search for arbitrary text on a page:
    [`Page.search_for()`](page.html#Page.search_for "Page.search_for"). It returns
    a list of [Rect](rect.html#rect) objects which surround a found occurrence. These
    rectangles can for example be used to automatically insert annotations which visibly
    mark the found text.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个标准搜索功能，可以在页面上搜索任意文本：[`Page.search_for()`](page.html#Page.search_for "Page.search_for")。它返回一个围绕找到的出现的[Rect](rect.html#rect)对象列表。这些矩形可以用来自动插入可见标记找到的文本的注释。
- en: 'This method has advantages and drawbacks. Pros are:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有利有弊。优点是：
- en: The search string can contain blanks and wrap across lines
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索字符串可以包含空格，并且可以跨行换行
- en: Upper or lower case characters are treated equal
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大写或小写字符都被视为相等
- en: Word hyphenation at line ends is detected and resolved
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行末的单词连字符会被检测和解决
- en: Return may also be a list of [Quad](quad.html#quad) objects to precisely locate
    text that is **not parallel** to either axis – using [Quad](quad.html#quad) output
    is also recommended, when page rotation is not zero.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回也可能是 [Quad](quad.html#quad) 对象的列表，以精确定位**不与任何轴平行**的文本-当页面旋转不为零时，也建议使用 [Quad](quad.html#quad)
    输出。
- en: 'But you also have other options:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但您也有其他选择：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This script uses `Page.get_text("words")` to look for a string, handed in via
    cli parameter. This method separates a page’s text into “words” using white spaces
    as delimiters. Further remarks:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本使用 `Page.get_text("words")` 来查找通过cli参数传递的字符串。该方法使用空格作为分隔符将页面文本分割为“单词”。进一步说明：
- en: If found, the **complete word containing the string** is marked (underlined)
    – not only the search string.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找到，则**包含字符串的完整单词**将被标记（下划线）-不仅仅是搜索字符串。
- en: The search string may **not contain word delimiters**. By default, word delimiters
    are white spaces and the non-breaking space `chr(0xA0)`. If you use extra delimiting
    characters like `page.get_text("words", delimiters="./,")` then none of these
    characters should be included in your search string either.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索字符串可能**不包含单词分隔符**。默认情况下，单词分隔符是空格和不间断空格 `chr(0xA0)`。如果您使用额外的分隔字符（例如 `page.get_text("words",
    delimiters="./,")`）则搜索字符串中也不应包含其中任何字符。
- en: As shown here, upper / lower cases are **respected**. But this can be changed
    by using the string method *lower()* (or even regular expressions) in function
    *mark_word*.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如图所示，大小写是**保留的**。但是这可以通过使用字符串方法*lower()*（甚至正则表达式）在函数*mark_word*中进行更改。
- en: 'There is **no upper limit**: all occurrences will be detected.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有**上限**：所有出现都将被检测到。
- en: 'You can use **anything** to mark the word: ‘Underline’, ‘Highlight’, ‘StrikeThrough’
    or ‘Square’ annotations, etc.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用**任何东西**来标记单词：‘下划线’、‘高亮’、‘删除线’或‘方框’注释等。
- en: Here is an example snippet of a page of this manual, where “MuPDF” has been
    used as the search string. Note that all strings **containing “MuPDF”** have been
    completely underlined (not just the search string).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是本手册页面的示例片段，其中“MuPDF”已用作搜索字符串。请注意，所有包含“MuPDF”的字符串**都已完全下划线标记**（不仅仅是搜索字符串）。
- en: '[![_images/img-markedpdf.jpg](../Images/0448b9e0acc8a3e3d876ad65a6a528d8.png)](_images/img-markedpdf.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-markedpdf.jpg](../Images/0448b9e0acc8a3e3d876ad65a6a528d8.png)](_images/img-markedpdf.jpg)'
- en: '* * *  ## How to Mark Searched Text'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ## 如何标记搜索到的文本'
- en: 'This script searches for text and marks it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本搜索文本并标记它：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[![_images/img-textmarker.jpg](../Images/95f5e2d18ebc68755eca6121258dbcd4.png)](_images/img-textmarker.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-textmarker.jpg](../Images/95f5e2d18ebc68755eca6121258dbcd4.png)](_images/img-textmarker.jpg)'
- en: '* * *  ## How to Mark Non-horizontal Text'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ## 如何标记非水平文本'
- en: The previous section already shows an example for marking non-horizontal text,
    that was detected by text **searching**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节已经展示了一个示例，用于标记非水平文本，该文本是通过文本**搜索**检测到的。
- en: 'But text **extraction** with the “dict” / “rawdict” options of [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") may also return text with a non-zero angle to the x-axis. This
    is indicated by the value of the line dictionary’s `"dir"` key: it is the tuple
    `(cosine, sine)` for that angle. If `line["dir"] != (1, 0)`, then the text of
    all its spans is rotated by (the same) angle != 0.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但使用[`Page.get_text()`](page.html#Page.get_text "Page.get_text")的“dict”/“rawdict”选项进行文本**提取**也可能返回具有非零角度到x轴的文本。这由线字典的“dir”键的值指示：它是该角度的元组
    `(cosine, sine)`。如果 `line["dir"] != (1, 0)`，则所有跨度的文本都将被（相同的）非零角度旋转。
- en: 'The “bboxes” returned by the method however are rectangles only – not quads.
    So, to mark span text correctly, its quad must be recovered from the data contained
    in the line and span dictionary. Do this with the following utility function (new
    in v1.18.9):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，该方法返回的“bboxes”仅为矩形-不是四边形。因此，为了正确标记跨度文本，必须从包含在线和跨度字典中的数据中恢复其四边形。使用以下实用程序函数执行此操作（v1.18.9中的新功能）：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you want to **mark the complete line** or a subset of its spans in one go,
    use the following snippet (works for v1.18.10 or later):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要**一次性标记完整行**或其子集的跨度，请使用以下片段（适用于v1.18.10或更高版本）：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![_images/img-linequad.jpg](../Images/0e11012d738da2691155d336685c97f1.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-linequad.jpg](../Images/0e11012d738da2691155d336685c97f1.png)'
- en: The `spans` argument above may specify any sub-list of `line["spans"]`. In the
    example above, the second to second-to-last span are marked. If omitted, the complete
    line is taken.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的`spans`参数可以指定`line["spans"]`的任何子列表。在上面的示例中，从第二个到倒数第二个span被标记了。如果省略，将取整个行。
- en: '* * *  ## How to Analyze Font Characteristics'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ## 如何分析字体特性'
- en: 'To analyze the characteristics of text in a PDF use this elementary script
    as a starting point:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要分析PDF中文本的特性，请使用这个基本脚本作为起点：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the PDF page and the script output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PDF页面和脚本输出：
- en: '[![_images/img-pdftext.jpg](../Images/ea9fe46f4058406ffd5d30e00fc4a158.png)](_images/img-pdftext.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-pdftext.jpg](../Images/ea9fe46f4058406ffd5d30e00fc4a158.png)](_images/img-pdftext.jpg)'
- en: '* * *  ## How to Insert Text'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ## 如何插入文本'
- en: 'PyMuPDF provides ways to insert text on new or existing PDF pages with the
    following features:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF提供了在新的或现有PDF页面上插入文本的方法，具有以下特性：
- en: choose the font, including built-in fonts and fonts that are available as files
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择字体，包括内置字体和作为文件可用的字体
- en: choose text characteristics like bold, italic, font size, font color, etc.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择文本特性，如粗体、斜体、字体大小、字体颜色等。
- en: 'position the text in multiple ways:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本以多种方式定位：
- en: either as simple line-oriented output starting at a certain point,
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为从特定点开始的简单线路定向输出，
- en: ''
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: or fitting text in a box provided as a rectangle, in which case text alignment
    choices are also available,
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或将文本适应于作为矩形提供的框中，在这种情况下，还可以选择文本对齐方式，
- en: ''
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: choose whether text should be put in foreground (overlay existing content),
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择文本是否应放在前景（覆盖现有内容）中，
- en: ''
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: all text can be arbitrarily “morphed”, i.e. its appearance can be changed via
    a [Matrix](matrix.html#matrix), to achieve effects like scaling, shearing or mirroring,
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有文本可以任意“变形”，即其外观可以通过[矩阵](matrix.html#matrix)改变，以实现缩放、倾斜或镜像等效果，
- en: ''
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: independently from morphing and in addition to that, text can be rotated by
    integer multiples of 90 degrees.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立于变形以及此外，文本可以被整数倍数的90度旋转。
- en: 'All of the above is provided by three basic [Page](page.html#page), resp. [Shape](shape.html#shape)
    methods:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述内容由三种基本的[页面](page.html#page)，分别是[形状](shape.html#shape)方法提供：
- en: '[`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font") – install
    a font for the page for later reference. The result is reflected in the output
    of [`Document.get_page_fonts()`](document.html#Document.get_page_fonts "Document.get_page_fonts").
    The font can be:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font") – 为页面安装字体以供以后参考。结果反映在[`Document.get_page_fonts()`](document.html#Document.get_page_fonts
    "Document.get_page_fonts")的输出中。该字体可以是：'
- en: provided as a file,
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为文件提供，
- en: ''
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: via [Font](font.html#font) (then use [`Font.buffer`](font.html#Font.buffer "Font.buffer"))
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[字体](font.html#font)（然后使用[`Font.buffer`](font.html#Font.buffer "Font.buffer")）
- en: ''
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: already present somewhere in **this or another** PDF, or
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已经在**这个或另一个**PDF中某处存在，或者
- en: ''
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: be a **built-in** font.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是一个**内置**字体。
- en: '[`Page.insert_text()`](page.html#Page.insert_text "Page.insert_text") – write
    some lines of text. Internally, this uses [`Shape.insert_text()`](shape.html#Shape.insert_text
    "Shape.insert_text").'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Page.insert_text()`](page.html#Page.insert_text "Page.insert_text") – 写入一些文本行。在内部，这使用了[`Shape.insert_text()`](shape.html#Shape.insert_text
    "Shape.insert_text")。'
- en: '[`Page.insert_textbox()`](page.html#Page.insert_textbox "Page.insert_textbox")
    – fit text in a given rectangle. Here you can choose text alignment features (left,
    right, centered, justified) and you keep control as to whether text actually fits.
    Internally, this uses [`Shape.insert_textbox()`](shape.html#Shape.insert_textbox
    "Shape.insert_textbox").'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Page.insert_textbox()`](page.html#Page.insert_textbox "Page.insert_textbox")
    – 将文本适应于给定矩形。在这里，您可以选择文本对齐特性（左对齐、右对齐、居中、两端对齐），并且您可以控制文本是否实际适合。在内部，这使用了[`Shape.insert_textbox()`](shape.html#Shape.insert_textbox
    "Shape.insert_textbox")。'
- en: Note
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Both text insertion methods automatically install the font as necessary.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 两种文本插入方法会根据需要自动安装字体。
- en: '### How to Write Text Lines'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '### 如何写文本行'
- en: 'Output some text lines on a page:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上输出一些文本行：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With this method, only the **number of lines** will be controlled to not go
    beyond page height. Surplus lines will not be written and the number of actual
    lines will be returned. The calculation uses a line height calculated from the
    [`fontsize`](glossary.html#fontsize "fontsize") and 36 points (0.5 inches) as
    bottom margin.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，仅控制**行数**以确保不超过页面高度。多余的行将不会被写入，并返回实际行数。计算使用从[`fontsize`](glossary.html#fontsize
    "fontsize")和36点（0.5英寸）底部边距计算的行高。
- en: Line **width is ignored**. The surplus part of a line will simply be invisible.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略线**宽度**。线的多余部分将简单地不可见。
- en: However, for built-in fonts there are ways to calculate the line width beforehand
    - see [`get_text_length()`](functions.html#get_text_length "get_text_length").
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于内置字体，有方法可以预先计算行宽度 - 请参阅[`get_text_length()`](functions.html#get_text_length
    "get_text_length")。
- en: 'Here is another example. It inserts 4 text strings using the four different
    rotation options, and thereby explains, how the text insertion point must be chosen
    to achieve the desired result:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个例子。它使用四种不同的旋转选项插入了4个文本字符串，并因此解释了必须选择的文本插入点，以实现所需的结果：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the result:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '[![_images/img-inserttext.jpg](../Images/d9072bb6d96d3c7d885c9abbc01b8215.png)](_images/img-inserttext.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-inserttext.jpg](../Images/d9072bb6d96d3c7d885c9abbc01b8215.png)](_images/img-inserttext.jpg)'
- en: '* * *  ### How to Fill a Text Box'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ### 如何填充文本框'
- en: 'This script fills 4 different rectangles with text, each time choosing a different
    rotation value:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本用文本填充了4个不同的矩形，每次选择一个不同的旋转值：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Some default values were used above: font size 11 and text alignment “left”.
    The result will look like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以上使用了一些默认值：字体大小11和文本对齐“left”。结果将会如下所示：
- en: '[![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)](_images/img-rotate.png)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)](_images/img-rotate.png)'
- en: '* * *  ### How to Fill a Box with HTML Text'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ### 如何用 HTML 文本填充方框'
- en: Method [`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox "Page.insert_htmlbox")
    offers a **much more powerful** way to insert text in a rectangle.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox "Page.insert_htmlbox")提供了一种**更加强大**的方式来在矩形中插入文本。
- en: Instead of simple, plain text, this method accepts HTML source, which may not
    only contain HTML tags but also styling instructions to influence things like
    font, font weight (bold) and style (italic), color and much more.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 与简单的纯文本不同，此方法接受 HTML 源码，该源码不仅可以包含 HTML 标签，还可以包含样式指令，以影响诸如字体、字重（加粗）和样式（斜体）、颜色等。
- en: It is also possible to mix multiple fonts and languages, to output HTML tables
    and to insert images and URI links.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以混合多种字体和语言，输出 HTML 表格，并插入图片和 URI 链接。
- en: For even more styling flexibility, an additional CSS source may also be given.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更灵活地进行样式设置，还可以提供额外的 CSS 源码。
- en: The method is based on the [Story](story-class.html#story) class. Therefore,
    complex script systems like Devanagari, Nepali, Tamil and many are supported and
    written correctly thanks to using the HarfBuzz library - which provides this so-called
    **“text shaping”** feature.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法基于[Story](story-class.html#story)类。因此，复杂的脚本系统，如天城文、尼泊尔文、泰米尔文等，得以支持并由于使用了
    HarfBuzz 库（提供了所谓的**“文本整形”**功能），而被正确书写。
- en: Any required fonts to output characters are automatically pulled in from the
    Google NOTO font library - as a fallback (when the – optionally supplied – user
    font(s) do not contain some glyphs).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Google NOTO 字体库自动获取所需的字体以输出字符 - 作为备用（当可选择提供的用户字体不包含某些字形时）。
- en: 'As a small glimpse into the features offered here, we will output the following
    HTML-enriched text:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对此处提供的功能的小瞥见，我们将输出以下 HTML 富文本：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Please note how the “css” parameter is used to globally select the default “sans-serif”
    font and a font size of 14.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意“css”参数是如何被用来全局选择默认的“无衬线”字体和字体大小14的。
- en: 'The result will look like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将会如下所示：
- en: '![_images/img-htmlbox1.png](../Images/bcef64ba7d5e99097a0f6a33f9761d15.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox1.png](../Images/bcef64ba7d5e99097a0f6a33f9761d15.png)'
- en: How to output HTML tables and images
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何输出 HTML 表格和图片
- en: 'Here is another example that outputs a table with this method. This time, we
    are including all the styling in the HTML source itself. Please also note, how
    it works to include an image - even within a table cell:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个例子，演示了使用此方法输出表格。这次，我们在 HTML 源代码中包含了所有的样式。还请注意，如何在表格单元格中包含图片：
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result will look like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将会如下所示：
- en: '![_images/img-htmlbox2.png](../Images/9b0a83fc8dc8d1d74e653eb50bd1c77c.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox2.png](../Images/9b0a83fc8dc8d1d74e653eb50bd1c77c.png)'
- en: How to Output Languages of the World
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何输出世界各国的语言
- en: 'Our third example will demonstrate the automatic multi-language support. It
    includes automatic **text shaping** for complex scripting systems like Devanagari
    and right-to-left languages:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第三个示例将演示自动多语言支持。它包括用于复杂脚本系统（如天城文和从右到左的语言）的自动**文本整形**：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And this is the output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![_images/img-htmlbox3.png](../Images/c791fadfc6af4734847fac7b1a1eaa89.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox3.png](../Images/c791fadfc6af4734847fac7b1a1eaa89.png)'
- en: How to Specify your Own Fonts
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何指定自己的字体
- en: Define your font files in CSS syntax using the `@font-face` statement. You need
    a separate `@font-face` for every combination of font weight and font style (e.g.
    bold or italic) you want to be supported. The following example uses the famous
    MS Comic Sans font in its four variants regular, bold, italic and bold-italic.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@font-face`语句以CSS语法定义您的字体文件。您需要为希望支持的每种字体粗细和字体样式（例如粗体或斜体）单独使用一个`@font-face`。以下示例使用了著名的MS
    Comic Sans字体及其四个变体：常规、粗体、斜体和粗斜体。
- en: 'As these four font files are located in the system’s folder `C:/Windows/Fonts`
    the method needs an [Archive](archive-class.html#archive) definition that points
    to that folder:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这四个字体文件位于系统文件夹`C:/Windows/Fonts`中，该方法需要一个[存档](archive-class.html#archive)定义，指向该文件夹：
- en: '[PRE14]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![_images/img-htmlbox4.png](../Images/b9d7da6fbd0fc897ce70e3eae0f7bd0c.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox4.png](../Images/b9d7da6fbd0fc897ce70e3eae0f7bd0c.png)'
- en: How to Request Text Alignment
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何请求文本对齐
- en: 'This example combines multiple requirements:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例结合了多个要求：
- en: Rotate the text by 90 degrees anti-clockwise.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本逆时针旋转90度。
- en: Use a font from package [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/).
    You will see that the respective CSS definitions are a lot easier in this case.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/)软件包中的字体。在这种情况下，您会发现相应的CSS定义更加简单。
- en: Align the text with the “justify” option.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“justify”选项对齐文本。
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![_images/img-htmlbox5.png](../Images/f9acc6e6e085886a6aa315bc922e711c.png)
    ## How to Extract Text with Color'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![_images/img-htmlbox5.png](../Images/f9acc6e6e085886a6aa315bc922e711c.png)
    ## 如何提取带颜色的文本'
- en: Iterate through your text blocks and find the spans of text you need for this
    information.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代您的文本块并找到所需信息的文本跨度。
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Do you have any feedback on this page?
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您对本页有任何反馈吗？
- en: '* * *'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此软件按原样提供，没有任何明示或暗示的保证。此软件在许可下分发，除非在许可条款明确授权的情况下，否则不得复制、修改或分发。有关更多信息，请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)的许可信息或联系Artifex
    Software Inc.，美国加利福尼亚州旧金山Mesa街39号108A套房。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此文档涵盖了所有版本直至1.24.4。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ## How to Extract all Document Text'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ## 如何提取所有文档文本'
- en: This script will take a document filename and generate a text file from all
    of its text.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将使用文档文件名生成一个包含其所有文本的文本文件。
- en: The document can be any [supported type](how-to-open-a-file.html#supported-file-types).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 文档可以是任何[支持的类型](how-to-open-a-file.html#supported-file-types)。
- en: 'The script works as a command line tool which expects the document filename
    supplied as a parameter. It generates one text file named “filename.txt” in the
    script directory. Text of pages is separated by a form feed character:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本作为一个命令行工具运行，需要将文档文件名作为参数提供。它将在脚本目录中生成一个名为“filename.txt”的文本文件。页面文本由分页符分隔：
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The output will be plain text as it is coded in the document. No effort is made
    to prettify in any way. Specifically for PDF, this may mean output not in usual
    reading order, unexpected line breaks and so forth.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文档中的编码，输出将是纯文本。不会进行任何美化。具体来说，对于PDF文件，这可能意味着输出不符合通常的阅读顺序，出现意外的换行等。
- en: 'You have many options to rectify this – see chapter [Appendix 2: Considerations
    on Embedded Files](app2.html#appendix2). Among them are:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您有多种选项来纠正此问题 - 请参阅附录2：关于嵌入文件的考虑（app2.html#appendix2）章节。其中包括：
- en: Extract text in HTML format and store it as a HTML document, so it can be viewed
    in any browser.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取以HTML格式存储的文本，并将其存储为HTML文档，以便在任何浏览器中查看。
- en: Extract text as a list of text blocks via *Page.get_text(“blocks”)*. Each item
    of this list contains position information for its text, which can be used to
    establish a convenient reading order.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过*Page.get_text(“blocks”)*将文本提取为文本块列表。此列表的每个项目包含其文本的位置信息，可以用于建立方便的阅读顺序。
- en: Extract a list of single words via *Page.get_text(“words”)*. Its items are words
    with position information. Use it to determine text contained in a given rectangle
    – see next section.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过*Page.get_text(“words”)*提取一个单词列表。它的项是带有位置信息的单词。用它来确定包含在给定矩形内的文本 - 请参见下一节。
- en: See the following two sections for examples and further explanations.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下两个部分以获取示例和进一步的解释。
- en: '## How to Extract Text as Markdown'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何将文本提取为Markdown'
- en: This is especially useful for RAG/LLM environments - please see [Outputting
    as Markdown](rag.html#rag-outputting-as-md).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于RAG/LLM环境特别有用 - 请参见[以Markdown格式输出](rag.html#rag-outputting-as-md)。
- en: '## How to Extract Key-Value Pairs from a Page'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何从页面中提取键值对'
- en: If the layout of a page is *“predictable”* in some sense, then there is a simple
    way to find the values for a given set of keywords fast and easily – without using
    regular expressions. Please see [this example script](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/text-extraction/lookup-keywords.py).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面的布局在某种意义上是*“可预测的”*，那么有一种简单的方法可以快速且轻松地查找给定关键字的值 - 而无需使用正则表达式。请参见[此示例脚本](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/text-extraction/lookup-keywords.py)。
- en: '“Predictable” in this context means:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，“可预测”意味着：
- en: Every keyword is followed by its value – no other text is present in between
    them.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个关键词后面都跟着它的值 - 中间没有其他文本。
- en: The bottom of the value’s boundary box is **not above** the one of the keyword.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值的边界框底部**不在**关键字的上方。
- en: 'There are **no other restrictions**: the page layout may or may not be fixed,
    and the text may also have been stored as one string. Key and value may have any
    distance from each other.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有其他限制**：页面布局可以是固定的，也可以不固定，文本也可能被存储为一个字符串。关键字和值可以相隔任意距离。'
- en: 'For example, the following five key-value pairs will be correctly identified:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下五对键值将被正确识别：
- en: '[PRE18]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '## How to Extract Text from within a Rectangle'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何从矩形内提取文本'
- en: There is now (v1.18.0) more than one way to achieve this. We therefore have
    created a [folder](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/textbox-extraction)
    in the PyMuPDF-Utilities repository specifically dealing with this topic.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在（v1.18.0）有多种方法可以实现这一点。因此，我们在PyMuPDF-Utilities存储库中专门创建了一个[文件夹](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/textbox-extraction)，专门处理这个主题。
- en: '* * *'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '## How to Extract Text in Natural Reading Order'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何按自然阅读顺序提取文本'
- en: One of the common issues with PDF text extraction is, that text may not appear
    in any particular reading order.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文本提取的常见问题之一是，文本可能不按任何特定的阅读顺序出现。
- en: 'This is the responsibility of the PDF creator (software or a human). For example,
    page headers may have been inserted in a separate step – after the document had
    been produced. In such a case, the header text will appear at the end of a page
    text extraction (although it will be correctly shown by PDF viewer software).
    For example, the following snippet will add some header and footer lines to an
    existing PDF:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PDF创建者（软件或人）的责任。例如，页眉可能在文档生成后另外插入 - 在这种情况下，页眉文本将会出现在页面文本提取的末尾（尽管PDF查看器软件会正确显示它）。例如，以下代码片段将向现有PDF添加一些页眉和页脚行：
- en: '[PRE19]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The text sequence extracted from a page modified in this way will look like
    this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式修改的页面提取的文本序列将如下所示：
- en: original text
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始文本
- en: header line
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 头部行
- en: footer line
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 底部行
- en: 'PyMuPDF has several means to re-establish some reading sequence or even to
    re-generate a layout close to the original:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF具有多种方法可以重新建立某种阅读顺序，甚至重新生成接近原始布局：
- en: Use `sort` parameter of [`Page.get_text()`](page.html#Page.get_text "Page.get_text").
    It will sort the output from top-left to bottom-right (ignored for XHTML, HTML
    and XML output).
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[`Page.get_text()`的`sort`参数](page.html#Page.get_text "Page.get_text")。它将从左上到右下排序输出（对于XHTML、HTML和XML输出不起作用）。
- en: 'Use the `pymupdf` module in CLI: `python -m pymupdf gettext ...`, which produces
    a text file where text has been re-arranged in layout-preserving mode. Many options
    are available to control the output.'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CLI中使用`pymupdf`模块：`python -m pymupdf gettext ...`，它会产生一个重新排列布局的文本文件。有许多选项可用于控制输出。
- en: You can also use the above mentioned [script](https://github.com/pymupdf/PyMuPDF/wiki/How-to-extract-text-from-a-rectangle)
    with your modifications.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用上述提到的[脚本](https://github.com/pymupdf/PyMuPDF/wiki/How-to-extract-text-from-a-rectangle)进行修改。
- en: '* * *'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '## How to Extract Table Content from Documents'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何从文档中提取表格内容'
- en: If you see a table in a document, you are normally not looking at something
    like an embedded Excel or other identifiable object. It usually is just normal,
    standard text, formatted to appear as tabular data.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在文档中看到一个表格，通常不会看到类似嵌入式Excel或其他可识别对象。它通常只是正常的标准文本，格式化为看起来像表格数据。
- en: Extracting tabular data from such a page area therefore means that you must
    find a way to **identify** the table area (i.e. its boundary box), then **(1)**
    graphically indicate table and column borders, and **(2)** then extract text based
    on this information.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从这样一个页面区域中提取表格数据意味着您必须找到一种方法来**识别**表格区域（即其边界框），然后**（1）**图形化地指示表格和列边界，并**（2）**基于此信息提取文本。
- en: This can be a very complex task, depending on details like the presence or absence
    of lines, rectangles or other supporting vector graphics.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个非常复杂的任务，具体取决于线条、矩形或其他支持向量图形的存在与否。
- en: Method [`Page.find_tables()`](page.html#Page.find_tables "Page.find_tables")
    does all that for you, with a high table detection precision. Its great advantage
    is that there are no external library dependencies, nor the need to employ artificial
    intelligence or machine learning technologies. It also provides an integrated
    interface to the well-known Python package for data analysis [pandas](https://pypi.org/project/pandas/).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Page.find_tables()`](page.html#Page.find_tables "Page.find_tables")会为您完成所有这些工作，并具有高表检测精度。它的巨大优势在于没有外部库依赖，也不需要使用人工智能或机器学习技术。它还为数据分析的著名Python包[pandas](https://pypi.org/project/pandas/)提供了集成接口。
- en: Please have a look at example [Jupyter notebooks](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/table-analysis),
    which cover standard situations like multiple tables on one page or joining table
    fragments across multiple pages.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看示例[Jupyter笔记本](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/table-analysis)，这些示例涵盖了标准情况，如一页上的多个表格或跨多个页面的表格片段的连接。
- en: '* * *'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '## How to Mark Extracted Text'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何标记提取的文本'
- en: 'There is a standard search function to search for arbitrary text on a page:
    [`Page.search_for()`](page.html#Page.search_for "Page.search_for"). It returns
    a list of [Rect](rect.html#rect) objects which surround a found occurrence. These
    rectangles can for example be used to automatically insert annotations which visibly
    mark the found text.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上有一个标准的搜索功能来搜索任意文本：[`Page.search_for()`](page.html#Page.search_for "Page.search_for")。它返回一个围绕找到的出现的[Rect](rect.html#rect)对象列表。例如，这些矩形可以用于自动插入可视化标记找到的文本。
- en: 'This method has advantages and drawbacks. Pros are:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有优缺点。优点是：
- en: The search string can contain blanks and wrap across lines
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索字符串可以包含空格并跨行换行
- en: Upper or lower case characters are treated equal
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小写字符被视为相同。
- en: Word hyphenation at line ends is detected and resolved
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测并解决了单词在行尾的连字符化
- en: Return may also be a list of [Quad](quad.html#quad) objects to precisely locate
    text that is **not parallel** to either axis – using [Quad](quad.html#quad) output
    is also recommended, when page rotation is not zero.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值也可以是一组[Quad](quad.html#quad)对象，以精确定位**不与任一轴平行**的文本 - 当页面旋转不为零时，建议也使用[Quad](quad.html#quad)输出。
- en: 'But you also have other options:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 但您也有其他选择：
- en: '[PRE20]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This script uses `Page.get_text("words")` to look for a string, handed in via
    cli parameter. This method separates a page’s text into “words” using white spaces
    as delimiters. Further remarks:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本使用`Page.get_text("words")`来查找通过cli参数传递的字符串。该方法使用空格作为分隔符将页面的文本分隔为“单词”。进一步的说明：
- en: If found, the **complete word containing the string** is marked (underlined)
    – not only the search string.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找到，将会标记（下划线）**包含该字符串的完整单词** - 而不仅仅是搜索字符串。
- en: The search string may **not contain word delimiters**. By default, word delimiters
    are white spaces and the non-breaking space `chr(0xA0)`. If you use extra delimiting
    characters like `page.get_text("words", delimiters="./,")` then none of these
    characters should be included in your search string either.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索字符串**不能包含单词分隔符**。默认情况下，单词分隔符是空格和不间断空格 `chr(0xA0)`。如果您使用额外的分隔符字符，比如 `page.get_text("words",
    delimiters="./,")`，那么搜索字符串中也不应包含这些字符。
- en: As shown here, upper / lower cases are **respected**. But this can be changed
    by using the string method *lower()* (or even regular expressions) in function
    *mark_word*.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如此所示，大写/小写是**被尊重**的。但可以通过使用字符串方法*lower()*（或甚至正则表达式）在*mark_word*函数中进行更改。
- en: 'There is **no upper limit**: all occurrences will be detected.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有上限**：所有出现都将被检测到。'
- en: 'You can use **anything** to mark the word: ‘Underline’, ‘Highlight’, ‘StrikeThrough’
    or ‘Square’ annotations, etc.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用**任何方式**标记单词：“下划线”、“突出显示”、“删除线”或“方形”注释等。
- en: Here is an example snippet of a page of this manual, where “MuPDF” has been
    used as the search string. Note that all strings **containing “MuPDF”** have been
    completely underlined (not just the search string).
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是本手册一页的一个示例片段，其中“MuPDF”已用作搜索字符串。请注意，所有包含“MuPDF”的字符串均已完全下划线标记（不仅仅是搜索字符串）。
- en: '[![_images/img-markedpdf.jpg](../Images/0448b9e0acc8a3e3d876ad65a6a528d8.png)](_images/img-markedpdf.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-markedpdf.jpg](../Images/0448b9e0acc8a3e3d876ad65a6a528d8.png)](_images/img-markedpdf.jpg)'
- en: '* * *'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '## How to Mark Searched Text'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何标记搜索到的文本'
- en: 'This script searches for text and marks it:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本搜索文本并标记它：
- en: '[PRE21]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result looks like this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 结果看起来像这样：
- en: '[![_images/img-textmarker.jpg](../Images/95f5e2d18ebc68755eca6121258dbcd4.png)](_images/img-textmarker.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-textmarker.jpg](../Images/95f5e2d18ebc68755eca6121258dbcd4.png)](_images/img-textmarker.jpg)'
- en: '* * *'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '## How to Mark Non-horizontal Text'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何标记非水平文本'
- en: The previous section already shows an example for marking non-horizontal text,
    that was detected by text **searching**.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分已经展示了一个搜索到非水平文本并进行标记的示例。
- en: 'But text **extraction** with the “dict” / “rawdict” options of [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") may also return text with a non-zero angle to the x-axis. This
    is indicated by the value of the line dictionary’s `"dir"` key: it is the tuple
    `(cosine, sine)` for that angle. If `line["dir"] != (1, 0)`, then the text of
    all its spans is rotated by (the same) angle != 0.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用[`Page.get_text()`](page.html#Page.get_text "Page.get_text")的“dict”/“rawdict”选项提取文本时，也可能返回带有非零x轴角度的文本。这通过行字典的“dir”键的值来指示：它是该角度的余弦、正弦元组。“如果`line["dir"]
    != (1, 0)`，则其所有跨度的文本均被（相同的）非零角度旋转。
- en: 'The “bboxes” returned by the method however are rectangles only – not quads.
    So, to mark span text correctly, its quad must be recovered from the data contained
    in the line and span dictionary. Do this with the following utility function (new
    in v1.18.9):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 方法返回的“bboxes”只是矩形 - 不是四边形。因此，为了正确标记跨度文本，必须从包含在行和跨度字典中的数据中恢复其四边形。使用以下实用函数执行此操作（在v1.18.9中新增）：
- en: '[PRE22]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you want to **mark the complete line** or a subset of its spans in one go,
    use the following snippet (works for v1.18.10 or later):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想一次性标记完整行或其子集的跨度，请使用以下代码片段（适用于v1.18.10或更高版本）：
- en: '[PRE23]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![_images/img-linequad.jpg](../Images/0e11012d738da2691155d336685c97f1.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-linequad.jpg](../Images/0e11012d738da2691155d336685c97f1.png)'
- en: The `spans` argument above may specify any sub-list of `line["spans"]`. In the
    example above, the second to second-to-last span are marked. If omitted, the complete
    line is taken.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`spans`参数可以指定`line["spans"]`的任何子列表。在上面的例子中，从第二个到倒数第二个跨度都被标记了。如果省略，则取整行。
- en: '* * *'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '## How to Analyze Font Characteristics'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何分析字体特性'
- en: 'To analyze the characteristics of text in a PDF use this elementary script
    as a starting point:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要分析PDF中文本的特征，请使用这个基本脚本作为起点：
- en: '[PRE24]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is the PDF page and the script output:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PDF页面和脚本输出的示例：
- en: '[![_images/img-pdftext.jpg](../Images/ea9fe46f4058406ffd5d30e00fc4a158.png)](_images/img-pdftext.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-pdftext.jpg](../Images/ea9fe46f4058406ffd5d30e00fc4a158.png)](_images/img-pdftext.jpg)'
- en: '* * *'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '## How to Insert Text'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何插入文本'
- en: 'PyMuPDF provides ways to insert text on new or existing PDF pages with the
    following features:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF提供了以下功能，可在新的或现有的PDF页面上插入文本：
- en: choose the font, including built-in fonts and fonts that are available as files
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择字体，包括内置字体和作为文件可用的字体
- en: choose text characteristics like bold, italic, font size, font color, etc.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择文本的特征，如粗体、斜体、字体大小、字体颜色等。
- en: 'position the text in multiple ways:'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以多种方式定位文本：
- en: either as simple line-oriented output starting at a certain point,
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论是作为从某一点开始的简单的行定向输出，
- en: ''
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: or fitting text in a box provided as a rectangle, in which case text alignment
    choices are also available,
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还是适应提供的作为矩形的框中的文本，此时也可选择文本对齐方式，
- en: ''
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: choose whether text should be put in foreground (overlay existing content),
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择文本是放在前景（覆盖现有内容）还是背景的。
- en: ''
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: all text can be arbitrarily “morphed”, i.e. its appearance can be changed via
    a [Matrix](matrix.html#matrix), to achieve effects like scaling, shearing or mirroring,
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有文本都可以任意“变形”，即其外观可以通过[Matrix](matrix.html#matrix)进行更改，以实现缩放、倾斜或镜像等效果，
- en: ''
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: independently from morphing and in addition to that, text can be rotated by
    integer multiples of 90 degrees.
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立于变形并额外增加的，文本可以以90度的整数倍旋转。
- en: 'All of the above is provided by three basic [Page](page.html#page), resp. [Shape](shape.html#shape)
    methods:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述内容由三个基本的 [Page](page.html#page) 或 [Shape](shape.html#shape) 方法提供：
- en: '[`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font") – install
    a font for the page for later reference. The result is reflected in the output
    of [`Document.get_page_fonts()`](document.html#Document.get_page_fonts "Document.get_page_fonts").
    The font can be:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font") – 为页面安装字体以便以后引用。结果反映在
    [`Document.get_page_fonts()`](document.html#Document.get_page_fonts "Document.get_page_fonts")
    的输出中。字体可以是：'
- en: provided as a file,
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由文件提供，
- en: ''
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: via [Font](font.html#font) (then use [`Font.buffer`](font.html#Font.buffer "Font.buffer"))
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 [字体](font.html#font)（然后使用 [`Font.buffer`](font.html#Font.buffer "Font.buffer")）
- en: ''
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: already present somewhere in **this or another** PDF, or
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已经在**此或其他** PDF 中某处存在，或者
- en: ''
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: be a **built-in** font.
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是一个**内置**字体。
- en: '[`Page.insert_text()`](page.html#Page.insert_text "Page.insert_text") – write
    some lines of text. Internally, this uses [`Shape.insert_text()`](shape.html#Shape.insert_text
    "Shape.insert_text").'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Page.insert_text()`](page.html#Page.insert_text "Page.insert_text") – 编写几行文本。在内部，这使用了
    [`Shape.insert_text()`](shape.html#Shape.insert_text "Shape.insert_text")。'
- en: '[`Page.insert_textbox()`](page.html#Page.insert_textbox "Page.insert_textbox")
    – fit text in a given rectangle. Here you can choose text alignment features (left,
    right, centered, justified) and you keep control as to whether text actually fits.
    Internally, this uses [`Shape.insert_textbox()`](shape.html#Shape.insert_textbox
    "Shape.insert_textbox").'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Page.insert_textbox()`](page.html#Page.insert_textbox "Page.insert_textbox")
    – 将文本适配到给定的矩形中。在这里，您可以选择文本对齐特性（左、右、居中、两端对齐），并且您可以控制文本实际适配情况。在内部，这使用了 [`Shape.insert_textbox()`](shape.html#Shape.insert_textbox
    "Shape.insert_textbox")。'
- en: Note
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: Both text insertion methods automatically install the font as necessary.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 两种文本插入方法会根据需要自动安装字体。
- en: '### How to Write Text Lines'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '### 如何写文本行'
- en: 'Output some text lines on a page:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上输出一些文本行：
- en: '[PRE25]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With this method, only the **number of lines** will be controlled to not go
    beyond page height. Surplus lines will not be written and the number of actual
    lines will be returned. The calculation uses a line height calculated from the
    [`fontsize`](glossary.html#fontsize "fontsize") and 36 points (0.5 inches) as
    bottom margin.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法，仅控制**行数**以确保不超出页面高度。多余的行将不会被写入，并且会返回实际行数。计算使用从 [`fontsize`](glossary.html#fontsize
    "fontsize") 和 36 点（0.5 英寸）作为底部边距计算得出的行高。
- en: Line **width is ignored**. The surplus part of a line will simply be invisible.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**线宽被忽略**。行的多余部分将会被简单地隐藏。'
- en: However, for built-in fonts there are ways to calculate the line width beforehand
    - see [`get_text_length()`](functions.html#get_text_length "get_text_length").
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于内置字体，有一些方法可以预先计算线宽 - 见 [`get_text_length()`](functions.html#get_text_length
    "get_text_length")。
- en: 'Here is another example. It inserts 4 text strings using the four different
    rotation options, and thereby explains, how the text insertion point must be chosen
    to achieve the desired result:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个例子。它使用四种不同的旋转选项插入 4 个文本字符串，从而解释了必须选择文本插入点以实现所需结果的方式：
- en: '[PRE26]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is the result:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '[![_images/img-inserttext.jpg](../Images/d9072bb6d96d3c7d885c9abbc01b8215.png)](_images/img-inserttext.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-inserttext.jpg](../Images/d9072bb6d96d3c7d885c9abbc01b8215.png)](_images/img-inserttext.jpg)'
- en: '* * *  ### How to Fill a Text Box'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ### 如何填充文本框'
- en: 'This script fills 4 different rectangles with text, each time choosing a different
    rotation value:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本使用不同的旋转值填充了 4 个不同的矩形文本，每次选择一个不同的旋转值：
- en: '[PRE27]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Some default values were used above: font size 11 and text alignment “left”.
    The result will look like this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 上面使用了一些默认值：字体大小 11 和文本对齐“左”。结果如下所示：
- en: '[![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)](_images/img-rotate.png)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)](_images/img-rotate.png)'
- en: '* * *  ### How to Fill a Box with HTML Text'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *  ### 如何用 HTML 文本填充框'
- en: Method [`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox "Page.insert_htmlbox")
    offers a **much more powerful** way to insert text in a rectangle.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 [`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox "Page.insert_htmlbox")
    提供了一种**更强大**的在矩形中插入文本的方法。
- en: Instead of simple, plain text, this method accepts HTML source, which may not
    only contain HTML tags but also styling instructions to influence things like
    font, font weight (bold) and style (italic), color and much more.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是简单的纯文本，此方法接受 HTML 源，其中不仅可以包含 HTML 标签，还可以包含样式指令以影响诸如字体、字体粗细（粗体）和风格（斜体）、颜色等的事物。
- en: It is also possible to mix multiple fonts and languages, to output HTML tables
    and to insert images and URI links.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以混合多种字体和语言，输出 HTML 表格以及插入图像和 URI 链接。
- en: For even more styling flexibility, an additional CSS source may also be given.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更加灵活地进行样式设置，还可以提供额外的 CSS 源。
- en: The method is based on the [Story](story-class.html#story) class. Therefore,
    complex script systems like Devanagari, Nepali, Tamil and many are supported and
    written correctly thanks to using the HarfBuzz library - which provides this so-called
    **“text shaping”** feature.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法基于[Story](story-class.html#story)类。因此，它支持复杂脚本系统（如天城文、尼泊尔文、泰米尔文等）并且由于使用 HarfBuzz
    库而能够正确编写 - 该库提供了这种所谓的**“文本整形”**功能。
- en: Any required fonts to output characters are automatically pulled in from the
    Google NOTO font library - as a fallback (when the – optionally supplied – user
    font(s) do not contain some glyphs).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 自动从谷歌 NOTO 字体库中提取所需字体以输出字符 - 作为备选（当选择性提供的用户字体不包含某些字符时）。
- en: 'As a small glimpse into the features offered here, we will output the following
    HTML-enriched text:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此处提供的功能的一小部分，我们将输出以下 HTML 富文本：
- en: '[PRE28]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Please note how the “css” parameter is used to globally select the default “sans-serif”
    font and a font size of 14.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意“css”参数的使用方式，全局选择默认的“sans-serif”字体和字号为14。
- en: 'The result will look like this:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '![_images/img-htmlbox1.png](../Images/bcef64ba7d5e99097a0f6a33f9761d15.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox1.png](../Images/bcef64ba7d5e99097a0f6a33f9761d15.png)'
- en: How to output HTML tables and images
  id: totrans-310
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何输出 HTML 表格和图像
- en: 'Here is another example that outputs a table with this method. This time, we
    are including all the styling in the HTML source itself. Please also note, how
    it works to include an image - even within a table cell:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个使用此方法输出表格的示例。这次，我们将所有样式包含在 HTML 源码中。请注意，如何在表格单元格中包含图像也是可行的：
- en: '[PRE29]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The result will look like this:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '![_images/img-htmlbox2.png](../Images/9b0a83fc8dc8d1d74e653eb50bd1c77c.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox2.png](../Images/9b0a83fc8dc8d1d74e653eb50bd1c77c.png)'
- en: How to Output Languages of the World
  id: totrans-315
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何输出世界各国的语言
- en: 'Our third example will demonstrate the automatic multi-language support. It
    includes automatic **text shaping** for complex scripting systems like Devanagari
    and right-to-left languages:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第三个示例将演示自动多语言支持。它包括了复杂脚本系统（如天城文和从右到左的语言）的自动**文本整形**：
- en: '[PRE30]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And this is the output:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![_images/img-htmlbox3.png](../Images/c791fadfc6af4734847fac7b1a1eaa89.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox3.png](../Images/c791fadfc6af4734847fac7b1a1eaa89.png)'
- en: How to Specify your Own Fonts
  id: totrans-320
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何指定自己的字体
- en: Define your font files in CSS syntax using the `@font-face` statement. You need
    a separate `@font-face` for every combination of font weight and font style (e.g.
    bold or italic) you want to be supported. The following example uses the famous
    MS Comic Sans font in its four variants regular, bold, italic and bold-italic.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@font-face`语句在 CSS 语法中定义字体文件。对于希望支持的每种字体粗细和字体风格组合（例如粗体或斜体），都需要一个单独的`@font-face`。以下示例使用著名的
    MS Comic Sans 字体及其四个变体：正常、粗体、斜体和粗斜体。
- en: 'As these four font files are located in the system’s folder `C:/Windows/Fonts`
    the method needs an [Archive](archive-class.html#archive) definition that points
    to that folder:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这四个字体文件位于系统文件夹`C:/Windows/Fonts`中，因此该方法需要一个指向该文件夹的[Archive](archive-class.html#archive)定义：
- en: '[PRE31]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![_images/img-htmlbox4.png](../Images/b9d7da6fbd0fc897ce70e3eae0f7bd0c.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox4.png](../Images/b9d7da6fbd0fc897ce70e3eae0f7bd0c.png)'
- en: How to Request Text Alignment
  id: totrans-325
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何请求文本对齐
- en: 'This example combines multiple requirements:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例结合了多个需求：
- en: Rotate the text by 90 degrees anti-clockwise.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆时针旋转文本90度。
- en: Use a font from package [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/).
    You will see that the respective CSS definitions are a lot easier in this case.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/)包中的字体。您会发现在这种情况下，相应的
    CSS 定义要简单得多。
- en: Align the text with the “justify” option.
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“justify”选项使文本对齐。
- en: '[PRE32]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![_images/img-htmlbox5.png](../Images/f9acc6e6e085886a6aa315bc922e711c.png)
    ### How to Write Text Lines'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '![_images/img-htmlbox5.png](../Images/f9acc6e6e085886a6aa315bc922e711c.png)
    ### 如何编写文本行'
- en: 'Output some text lines on a page:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上输出一些文本行：
- en: '[PRE33]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: With this method, only the **number of lines** will be controlled to not go
    beyond page height. Surplus lines will not be written and the number of actual
    lines will be returned. The calculation uses a line height calculated from the
    [`fontsize`](glossary.html#fontsize "fontsize") and 36 points (0.5 inches) as
    bottom margin.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法，只控制**行数**以确保不超过页面高度。多余的行将不会被写入，并返回实际行数。计算使用从[`fontsize`](glossary.html#fontsize
    "fontsize")和36点（0.5英寸）底部边距计算的行高。
- en: Line **width is ignored**. The surplus part of a line will simply be invisible.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略**宽度**。一行的多余部分将简单地不可见。
- en: However, for built-in fonts there are ways to calculate the line width beforehand
    - see [`get_text_length()`](functions.html#get_text_length "get_text_length").
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于内置字体，有办法预先计算行宽 - 参见[`get_text_length()`](functions.html#get_text_length
    "get_text_length")。
- en: 'Here is another example. It inserts 4 text strings using the four different
    rotation options, and thereby explains, how the text insertion point must be chosen
    to achieve the desired result:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个例子。它使用四种不同的旋转选项插入了4个文本字符串，并因此解释了如何选择文本插入点以实现所需的结果：
- en: '[PRE34]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This is the result:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '[![_images/img-inserttext.jpg](../Images/d9072bb6d96d3c7d885c9abbc01b8215.png)](_images/img-inserttext.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-inserttext.jpg](../Images/d9072bb6d96d3c7d885c9abbc01b8215.png)](_images/img-inserttext.jpg)'
- en: '* * *'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '### How to Fill a Text Box'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '### 如何填充文本框'
- en: 'This script fills 4 different rectangles with text, each time choosing a different
    rotation value:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本使用4种不同的旋转值填充4个不同的矩形框内的文本：
- en: '[PRE35]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Some default values were used above: font size 11 and text alignment “left”.
    The result will look like this:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 上面使用了一些默认值：字体大小11和文本对齐“左”。结果如下所示：
- en: '[![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)](_images/img-rotate.png)'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)](_images/img-rotate.png)'
- en: '* * *'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '### How to Fill a Box with HTML Text'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '### 如何使用HTML文本填充框'
- en: Method [`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox "Page.insert_htmlbox")
    offers a **much more powerful** way to insert text in a rectangle.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox "Page.insert_htmlbox")提供了一种**更强大**的方式来在矩形框中插入文本。
- en: Instead of simple, plain text, this method accepts HTML source, which may not
    only contain HTML tags but also styling instructions to influence things like
    font, font weight (bold) and style (italic), color and much more.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不仅接受HTML标签，还可以包含样式指令来影响字体、字体粗细（加粗）和样式（斜体）、颜色等等。
- en: It is also possible to mix multiple fonts and languages, to output HTML tables
    and to insert images and URI links.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以混合多种字体和语言，输出HTML表格并插入图像和URI链接。
- en: For even more styling flexibility, an additional CSS source may also be given.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更大的样式灵活性，还可以提供额外的CSS源。
- en: The method is based on the [Story](story-class.html#story) class. Therefore,
    complex script systems like Devanagari, Nepali, Tamil and many are supported and
    written correctly thanks to using the HarfBuzz library - which provides this so-called
    **“text shaping”** feature.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法基于[Story](story-class.html#story)类。因此，支持复杂的脚本系统如Devanagari，Nepali，Tamil等，且使用HarfBuzz库正确地编写
    - 提供这种所谓的**“文本整形”**功能。
- en: Any required fonts to output characters are automatically pulled in from the
    Google NOTO font library - as a fallback (when the – optionally supplied – user
    font(s) do not contain some glyphs).
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 自动从Google NOTO字体库中获取输出字符所需的字体作为后备（当选择性提供的用户字体不包含某些字形时）。
- en: 'As a small glimpse into the features offered here, we will output the following
    HTML-enriched text:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这里提供功能的小窥视，我们将输出以下HTML丰富的文本：
- en: '[PRE36]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Please note how the “css” parameter is used to globally select the default “sans-serif”
    font and a font size of 14.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意“css”参数如何用于全局选择默认的“sans-serif”字体和字体大小为14。
- en: 'The result will look like this:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![_images/img-htmlbox1.png](../Images/bcef64ba7d5e99097a0f6a33f9761d15.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox1.png](../Images/bcef64ba7d5e99097a0f6a33f9761d15.png)'
- en: How to output HTML tables and images
  id: totrans-360
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何输出HTML表格和图像
- en: 'Here is another example that outputs a table with this method. This time, we
    are including all the styling in the HTML source itself. Please also note, how
    it works to include an image - even within a table cell:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个例子，使用此方法输出一个包含表格的文本。这次，我们将所有样式都包含在HTML源码中。还请注意，如何在表格单元格内包含图像的工作方式：
- en: '[PRE37]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The result will look like this:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![_images/img-htmlbox2.png](../Images/9b0a83fc8dc8d1d74e653eb50bd1c77c.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox2.png](../Images/9b0a83fc8dc8d1d74e653eb50bd1c77c.png)'
- en: How to Output Languages of the World
  id: totrans-365
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何输出世界各地的语言
- en: 'Our third example will demonstrate the automatic multi-language support. It
    includes automatic **text shaping** for complex scripting systems like Devanagari
    and right-to-left languages:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第三个示例将演示自动多语言支持。它包括对复杂脚本系统（如天城文）和从右到左语言的自动**文本成形**：
- en: '[PRE38]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'And this is the output:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是输出结果：
- en: '![_images/img-htmlbox3.png](../Images/c791fadfc6af4734847fac7b1a1eaa89.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox3.png](../Images/c791fadfc6af4734847fac7b1a1eaa89.png)'
- en: How to Specify your Own Fonts
  id: totrans-370
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何指定自己的字体
- en: Define your font files in CSS syntax using the `@font-face` statement. You need
    a separate `@font-face` for every combination of font weight and font style (e.g.
    bold or italic) you want to be supported. The following example uses the famous
    MS Comic Sans font in its four variants regular, bold, italic and bold-italic.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@font-face` 语句在 CSS 语法中定义您的字体文件。您需要为每种字体重量和字体样式的组合（例如粗体或斜体）创建一个单独的 `@font-face`。以下示例使用著名的
    MS Comic Sans 字体的四个变体：正常、粗体、斜体和粗斜体。
- en: 'As these four font files are located in the system’s folder `C:/Windows/Fonts`
    the method needs an [Archive](archive-class.html#archive) definition that points
    to that folder:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这四个字体文件位于系统文件夹 `C:/Windows/Fonts` 中，该方法需要一个指向该文件夹的 [Archive](archive-class.html#archive)
    定义：
- en: '[PRE39]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '![_images/img-htmlbox4.png](../Images/b9d7da6fbd0fc897ce70e3eae0f7bd0c.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox4.png](../Images/b9d7da6fbd0fc897ce70e3eae0f7bd0c.png)'
- en: How to Request Text Alignment
  id: totrans-375
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何请求文本对齐
- en: 'This example combines multiple requirements:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例结合了多个要求：
- en: Rotate the text by 90 degrees anti-clockwise.
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本逆时针旋转 90 度。
- en: Use a font from package [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/).
    You will see that the respective CSS definitions are a lot easier in this case.
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自 [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/) 包的字体。你会发现在这种情况下，相关的
    CSS 定义要简单得多。
- en: Align the text with the “justify” option.
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“对齐”选项对齐文本。
- en: '[PRE40]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![_images/img-htmlbox5.png](../Images/f9acc6e6e085886a6aa315bc922e711c.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox5.png](../Images/f9acc6e6e085886a6aa315bc922e711c.png)'
- en: How to output HTML tables and images
  id: totrans-382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何输出 HTML 表格和图片
- en: 'Here is another example that outputs a table with this method. This time, we
    are including all the styling in the HTML source itself. Please also note, how
    it works to include an image - even within a table cell:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个示例，使用此方法输出表格。这次，我们在 HTML 源码中包含了所有的样式。请注意，如何在表格单元格中包含图片的工作原理：
- en: '[PRE41]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The result will look like this:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '![_images/img-htmlbox2.png](../Images/9b0a83fc8dc8d1d74e653eb50bd1c77c.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox2.png](../Images/9b0a83fc8dc8d1d74e653eb50bd1c77c.png)'
- en: How to Output Languages of the World
  id: totrans-387
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何输出世界各地的语言
- en: 'Our third example will demonstrate the automatic multi-language support. It
    includes automatic **text shaping** for complex scripting systems like Devanagari
    and right-to-left languages:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第三个示例将演示自动多语言支持。它包括对复杂脚本系统（如天城文）和从右到左语言的自动**文本成形**：
- en: '[PRE42]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And this is the output:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是输出结果：
- en: '![_images/img-htmlbox3.png](../Images/c791fadfc6af4734847fac7b1a1eaa89.png)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox3.png](../Images/c791fadfc6af4734847fac7b1a1eaa89.png)'
- en: How to Specify your Own Fonts
  id: totrans-392
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何指定自己的字体
- en: Define your font files in CSS syntax using the `@font-face` statement. You need
    a separate `@font-face` for every combination of font weight and font style (e.g.
    bold or italic) you want to be supported. The following example uses the famous
    MS Comic Sans font in its four variants regular, bold, italic and bold-italic.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@font-face` 语句在 CSS 语法中定义您的字体文件。您需要为每种字体重量和字体样式的组合（例如粗体或斜体）创建一个单独的 `@font-face`。以下示例使用著名的
    MS Comic Sans 字体的四个变体：正常、粗体、斜体和粗斜体。
- en: 'As these four font files are located in the system’s folder `C:/Windows/Fonts`
    the method needs an [Archive](archive-class.html#archive) definition that points
    to that folder:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这四个字体文件位于系统文件夹 `C:/Windows/Fonts` 中，该方法需要一个指向该文件夹的 [Archive](archive-class.html#archive)
    定义：
- en: '[PRE43]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![_images/img-htmlbox4.png](../Images/b9d7da6fbd0fc897ce70e3eae0f7bd0c.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-htmlbox4.png](../Images/b9d7da6fbd0fc897ce70e3eae0f7bd0c.png)'
- en: How to Request Text Alignment
  id: totrans-397
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何请求文本对齐
- en: 'This example combines multiple requirements:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例结合了多个要求：
- en: Rotate the text by 90 degrees anti-clockwise.
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本逆时针旋转 90 度。
- en: Use a font from package [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/).
    You will see that the respective CSS definitions are a lot easier in this case.
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自 [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/) 包的字体。你会发现在这种情况下，相关的
    CSS 定义要简单得多。
- en: Align the text with the “justify” option.
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“对齐”选项对齐文本。
- en: '[PRE44]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![_images/img-htmlbox5.png](../Images/f9acc6e6e085886a6aa315bc922e711c.png)
    ## How to Extract Text with Color'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '![_images/img-htmlbox5.png](../Images/f9acc6e6e085886a6aa315bc922e711c.png)
    ## 如何提取带颜色的文本'
- en: Iterate through your text blocks and find the spans of text you need for this
    information.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 通过迭代你的文本块，找到你需要的信息的文本范围。
- en: '[PRE45]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Do you have any feedback on this page?
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个页面有任何反馈吗？
- en: '* * *'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按原样提供，没有明示或暗示的任何保证。本软件根据许可协议分发，除非在该许可协议的条款下明确授权，否则不得复制、修改或分发本软件。请参阅 [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    上的许可信息或联系 Artifex Software Inc.，39 Mesa Street, Suite 108A, San Francisco CA 94129,
    United States 以获取更多信息。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档覆盖了所有版本直到 1.24.4。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
