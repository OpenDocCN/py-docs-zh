- en: Schema Definition Language
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式定义语言
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/schema.html](https://docs.sqlalchemy.org/en/20/core/schema.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/schema.html](https://docs.sqlalchemy.org/en/20/core/schema.html)
- en: This section references SQLAlchemy **schema metadata**, a comprehensive system
    of describing and inspecting database schemas.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涉及 SQLAlchemy **模式元数据**，这是一种全面描述和检查数据库模式的系统。
- en: The core of SQLAlchemy’s query and object mapping operations are supported by
    *database metadata*, which is comprised of Python objects that describe tables
    and other schema-level objects. These objects are at the core of three major types
    of operations - issuing CREATE and DROP statements (known as *DDL*), constructing
    SQL queries, and expressing information about structures that already exist within
    the database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 查询和对象映射操作的核心由 *数据库元数据* 支持，它由描述表和其他模式级对象的 Python 对象组成。这些对象是三种主要类型操作的核心
    - 发出 CREATE 和 DROP 语句（称为 *DDL*）、构造 SQL 查询以及表达有关已存在于数据库中的结构的信息。
- en: Database metadata can be expressed by explicitly naming the various components
    and their properties, using constructs such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), all of which are imported from the `sqlalchemy.schema`
    package. It can also be generated by SQLAlchemy using a process called *reflection*,
    which means you start with a single object such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), assign it a name, and then instruct SQLAlchemy to
    load all the additional information related to that name from a particular engine
    source.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库元数据可以通过显式命名各种组件及其属性来表示，使用诸如 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")、[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 和 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 等构造，所有这些都从 `sqlalchemy.schema` 包中导入。它也可以由 SQLAlchemy
    使用称为 *反射* 的过程生成，这意味着您从一个单一对象（例如 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）开始，为其指定一个名称，然后指示 SQLAlchemy 从特定的引擎源加载与该名称相关的所有附加信息。
- en: A key feature of SQLAlchemy’s database metadata constructs is that they are
    designed to be used in a *declarative* style which closely resembles that of real
    DDL. They are therefore most intuitive to those who have some background in creating
    real schema generation scripts.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 数据库元数据构造的一个关键特性是它们设计成以 *声明式* 风格使用，这与真实的 DDL 非常相似。因此，对于那些有一定创建真实模式生成脚本背景的人来说，它们是最直观的。
- en: '[Describing Databases with MetaData](metadata.html)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 MetaData 描述数据库](metadata.html)'
- en: '[Accessing Tables and Columns](metadata.html#accessing-tables-and-columns)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[访问表和列](metadata.html#accessing-tables-and-columns)'
- en: '[Creating and Dropping Database Tables](metadata.html#creating-and-dropping-database-tables)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建和删除数据库表](metadata.html#creating-and-dropping-database-tables)'
- en: '[Altering Database Objects through Migrations](metadata.html#altering-database-objects-through-migrations)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过迁移修改数据库对象](metadata.html#altering-database-objects-through-migrations)'
- en: '[Specifying the Schema Name](metadata.html#specifying-the-schema-name)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[指定模式名称](metadata.html#specifying-the-schema-name)'
- en: '[Specifying a Default Schema Name with MetaData](metadata.html#specifying-a-default-schema-name-with-metadata)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 MetaData 指定默认模式名称](metadata.html#specifying-a-default-schema-name-with-metadata)'
- en: '[Applying Dynamic Schema Naming Conventions](metadata.html#applying-dynamic-schema-naming-conventions)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[应用动态模式命名约定](metadata.html#applying-dynamic-schema-naming-conventions)'
- en: '[Setting a Default Schema for New Connections](metadata.html#setting-a-default-schema-for-new-connections)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为新连接设置默认模式](metadata.html#setting-a-default-schema-for-new-connections)'
- en: '[Schemas and Reflection](metadata.html#schemas-and-reflection)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模式和反射](metadata.html#schemas-and-reflection)'
- en: '[Backend-Specific Options](metadata.html#backend-specific-options)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特定于后端的选项](metadata.html#backend-specific-options)'
- en: '[Column, Table, MetaData API](metadata.html#column-table-metadata-api)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列、表、MetaData API](metadata.html#column-table-metadata-api)'
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column)'
- en: '[`MetaData`](metadata.html#sqlalchemy.schema.MetaData)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MetaData`](metadata.html#sqlalchemy.schema.MetaData)'
- en: '[`SchemaConst`](metadata.html#sqlalchemy.schema.SchemaConst)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SchemaConst`](metadata.html#sqlalchemy.schema.SchemaConst)'
- en: '[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem)'
- en: '[`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel)'
- en: '[`Table`](metadata.html#sqlalchemy.schema.Table)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Table`](metadata.html#sqlalchemy.schema.Table)'
- en: '[Reflecting Database Objects](reflection.html)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[反射数据库对象](reflection.html)'
- en: '[Overriding Reflected Columns](reflection.html#overriding-reflected-columns)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[覆盖反射列](reflection.html#overriding-reflected-columns)'
- en: '[Reflecting Views](reflection.html#reflecting-views)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[反射视图](reflection.html#reflecting-views)'
- en: '[Reflecting All Tables at Once](reflection.html#reflecting-all-tables-at-once)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一次性反射所有表](reflection.html#reflecting-all-tables-at-once)'
- en: '[Reflecting Tables from Other Schemas](reflection.html#reflecting-tables-from-other-schemas)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从其他模式反射表](reflection.html#reflecting-tables-from-other-schemas)'
- en: '[Interaction of Schema-qualified Reflection with the Default Schema](reflection.html#interaction-of-schema-qualified-reflection-with-the-default-schema)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模式限定的反射与默认模式的交互](reflection.html#interaction-of-schema-qualified-reflection-with-the-default-schema)'
- en: '[Fine Grained Reflection with Inspector](reflection.html#fine-grained-reflection-with-inspector)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用检查器进行精细反射](reflection.html#fine-grained-reflection-with-inspector)'
- en: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector)'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector)'
- en: '[`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn)'
- en: '[`ReflectedComputed`](reflection.html#sqlalchemy.engine.interfaces.ReflectedComputed)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedComputed`](reflection.html#sqlalchemy.engine.interfaces.ReflectedComputed)'
- en: '[`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint)'
- en: '[`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint)'
- en: '[`ReflectedIdentity`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIdentity)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedIdentity`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIdentity)'
- en: '[`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex)'
- en: '[`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint)'
- en: '[`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint)'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint)'
- en: '[`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment)'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment)'
- en: '[Reflecting with Database-Agnostic Types](reflection.html#reflecting-with-database-agnostic-types)'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用数据库无关类型进行反射](reflection.html#reflecting-with-database-agnostic-types)'
- en: '[Limitations of Reflection](reflection.html#limitations-of-reflection)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[反射的限制](reflection.html#limitations-of-reflection)'
- en: '[Column INSERT/UPDATE Defaults](defaults.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列的插入/更新默认值](defaults.html)'
- en: '[Scalar Defaults](defaults.html#scalar-defaults)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[标量默认值](defaults.html#scalar-defaults)'
- en: '[Python-Executed Functions](defaults.html#python-executed-functions)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 执行函数](defaults.html#python-executed-functions)'
- en: '[Context-Sensitive Default Functions](defaults.html#context-sensitive-default-functions)'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[上下文敏感的默认函数](defaults.html#context-sensitive-default-functions)'
- en: '[Client-Invoked SQL Expressions](defaults.html#client-invoked-sql-expressions)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[客户端调用的 SQL 表达式](defaults.html#client-invoked-sql-expressions)'
- en: '[Server-invoked DDL-Explicit Default Expressions](defaults.html#server-invoked-ddl-explicit-default-expressions)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[服务器调用的 DDL 显式默认表达式](defaults.html#server-invoked-ddl-explicit-default-expressions)'
- en: '[Marking Implicitly Generated Values, timestamps, and Triggered Columns](defaults.html#marking-implicitly-generated-values-timestamps-and-triggered-columns)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[标记隐式生成的值、时间戳和触发列](defaults.html#marking-implicitly-generated-values-timestamps-and-triggered-columns)'
- en: '[Defining Sequences](defaults.html#defining-sequences)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[定义序列](defaults.html#defining-sequences)'
- en: '[Associating a Sequence on a SERIAL column](defaults.html#associating-a-sequence-on-a-serial-column)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将序列关联到 SERIAL 列](defaults.html#associating-a-sequence-on-a-serial-column)'
- en: '[Executing a Sequence Standalone](defaults.html#executing-a-sequence-standalone)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[独立执行序列](defaults.html#executing-a-sequence-standalone)'
- en: '[Associating a Sequence with the MetaData](defaults.html#associating-a-sequence-with-the-metadata)'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将序列与 MetaData 关联](defaults.html#associating-a-sequence-with-the-metadata)'
- en: '[Associating a Sequence as the Server Side Default](defaults.html#associating-a-sequence-as-the-server-side-default)'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将序列关联为服务器端默认值](defaults.html#associating-a-sequence-as-the-server-side-default)'
- en: '[Computed Columns (GENERATED ALWAYS AS)](defaults.html#computed-columns-generated-always-as)'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[计算列（GENERATED ALWAYS AS）](defaults.html#computed-columns-generated-always-as)'
- en: '[Identity Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)](defaults.html#identity-ddl)'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[标识列（GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY）](defaults.html#identity-ddl)'
- en: '[Default Objects API](defaults.html#default-objects-api)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[默认对象 API](defaults.html#default-objects-api)'
- en: '[`Computed`](defaults.html#sqlalchemy.schema.Computed)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Computed`](defaults.html#sqlalchemy.schema.Computed)'
- en: '[`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault)'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault)'
- en: '[`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause)'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause)'
- en: '[`DefaultGenerator`](defaults.html#sqlalchemy.schema.DefaultGenerator)'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DefaultGenerator`](defaults.html#sqlalchemy.schema.DefaultGenerator)'
- en: '[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue)'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue)'
- en: '[`Sequence`](defaults.html#sqlalchemy.schema.Sequence)'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Sequence`](defaults.html#sqlalchemy.schema.Sequence)'
- en: '[`Identity`](defaults.html#sqlalchemy.schema.Identity)'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Identity`](defaults.html#sqlalchemy.schema.Identity)'
- en: '[Defining Constraints and Indexes](constraints.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[定义约束和索引](constraints.html)'
- en: '[Defining Foreign Keys](constraints.html#defining-foreign-keys)'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[定义外键](constraints.html#defining-foreign-keys)'
- en: '[Creating/Dropping Foreign Key Constraints via ALTER](constraints.html#creating-dropping-foreign-key-constraints-via-alter)'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过 ALTER 创建/删除外键约束](constraints.html#creating-dropping-foreign-key-constraints-via-alter)'
- en: '[ON UPDATE and ON DELETE](constraints.html#on-update-and-on-delete)'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ON UPDATE 和 ON DELETE](constraints.html#on-update-and-on-delete)'
- en: '[UNIQUE Constraint](constraints.html#unique-constraint)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[唯一约束](constraints.html#unique-constraint)'
- en: '[CHECK Constraint](constraints.html#check-constraint)'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CHECK 约束](constraints.html#check-constraint)'
- en: '[PRIMARY KEY Constraint](constraints.html#primary-key-constraint)'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[主键约束](constraints.html#primary-key-constraint)'
- en: '[Setting up Constraints when using the Declarative ORM Extension](constraints.html#setting-up-constraints-when-using-the-declarative-orm-extension)'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在使用声明性 ORM 扩展时设置约束](constraints.html#setting-up-constraints-when-using-the-declarative-orm-extension)'
- en: '[Configuring Constraint Naming Conventions](constraints.html#configuring-constraint-naming-conventions)'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](constraints.html#configuring-constraint-naming-conventions)'
- en: '[Configuring a Naming Convention for a MetaData Collection](constraints.html#configuring-a-naming-convention-for-a-metadata-collection)'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为 MetaData 集合配置���名约定](constraints.html#configuring-a-naming-convention-for-a-metadata-collection)'
- en: '[The Default Naming Convention](constraints.html#the-default-naming-convention)'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[默认命名约定](constraints.html#the-default-naming-convention)'
- en: '[Truncation of Long Names](constraints.html#truncation-of-long-names)'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[截断长名称](constraints.html#truncation-of-long-names)'
- en: '[Creating Custom Tokens for Naming Conventions](constraints.html#creating-custom-tokens-for-naming-conventions)'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为命名约定创建自定义标记](constraints.html#creating-custom-tokens-for-naming-conventions)'
- en: '[Naming CHECK Constraints](constraints.html#naming-check-constraints)'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命名 CHECK 约束](constraints.html#naming-check-constraints)'
- en: '[Configuring Naming for Boolean, Enum, and other schema types](constraints.html#configuring-naming-for-boolean-enum-and-other-schema-types)'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为布尔值、枚举和其他模式类型配置命名](constraints.html#configuring-naming-for-boolean-enum-and-other-schema-types)'
- en: '[Using Naming Conventions with ORM Declarative Mixins](constraints.html#using-naming-conventions-with-orm-declarative-mixins)'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 ORM 声明性混合中使用命名约定](constraints.html#using-naming-conventions-with-orm-declarative-mixins)'
- en: '[Constraints API](constraints.html#constraints-api)'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[约束 API](constraints.html#constraints-api)'
- en: '[`Constraint`](constraints.html#sqlalchemy.schema.Constraint)'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Constraint`](constraints.html#sqlalchemy.schema.Constraint)'
- en: '[`ColumnCollectionMixin`](constraints.html#sqlalchemy.schema.ColumnCollectionMixin)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnCollectionMixin`](constraints.html#sqlalchemy.schema.ColumnCollectionMixin)'
- en: '[`ColumnCollectionConstraint`](constraints.html#sqlalchemy.schema.ColumnCollectionConstraint)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnCollectionConstraint`](constraints.html#sqlalchemy.schema.ColumnCollectionConstraint)'
- en: '[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint)'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint)'
- en: '[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey)'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey)'
- en: '[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint)'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint)'
- en: '[`HasConditionalDDL`](constraints.html#sqlalchemy.schema.HasConditionalDDL)'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`HasConditionalDDL`](constraints.html#sqlalchemy.schema.HasConditionalDDL)'
- en: '[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint)'
- en: '[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint)'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint)'
- en: '[`conv()`](constraints.html#sqlalchemy.schema.conv)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`conv()`](constraints.html#sqlalchemy.schema.conv)'
- en: '[Indexes](constraints.html#indexes)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引](constraints.html#indexes)'
- en: '[Functional Indexes](constraints.html#functional-indexes)'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[函数索引](constraints.html#functional-indexes)'
- en: '[Index API](constraints.html#index-api)'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引 API](constraints.html#index-api)'
- en: '[`Index`](constraints.html#sqlalchemy.schema.Index)'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Index`](constraints.html#sqlalchemy.schema.Index)'
- en: '[Customizing DDL](ddl.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义DDL](ddl.html)'
- en: '[Custom DDL](ddl.html#custom-ddl)'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义DDL](ddl.html#custom-ddl)'
- en: '[Controlling DDL Sequences](ddl.html#controlling-ddl-sequences)'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[控制DDL序列](ddl.html#controlling-ddl-sequences)'
- en: '[Using the built-in DDLElement Classes](ddl.html#using-the-built-in-ddlelement-classes)'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用内置的DDLElement类](ddl.html#using-the-built-in-ddlelement-classes)'
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#controlling-ddl-generation-of-constraints-and-indexes)'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#controlling-ddl-generation-of-constraints-and-indexes)'
- en: '[DDL Expression Constructs API](ddl.html#ddl-expression-constructs-api)'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DDL表达式构造API](ddl.html#ddl-expression-constructs-api)'
- en: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables)'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables)'
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints)'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints)'
- en: '[`BaseDDLElement`](ddl.html#sqlalchemy.schema.BaseDDLElement)'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BaseDDLElement`](ddl.html#sqlalchemy.schema.BaseDDLElement)'
- en: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement)'
- en: '[`DDL`](ddl.html#sqlalchemy.schema.DDL)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DDL`](ddl.html#sqlalchemy.schema.DDL)'
- en: '[`_CreateDropBase`](ddl.html#sqlalchemy.schema._CreateDropBase)'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`_CreateDropBase`](ddl.html#sqlalchemy.schema._CreateDropBase)'
- en: '[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable)'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable)'
- en: '[`DropTable`](ddl.html#sqlalchemy.schema.DropTable)'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DropTable`](ddl.html#sqlalchemy.schema.DropTable)'
- en: '[`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn)'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn)'
- en: '[`CreateSequence`](ddl.html#sqlalchemy.schema.CreateSequence)'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CreateSequence`](ddl.html#sqlalchemy.schema.CreateSequence)'
- en: '[`DropSequence`](ddl.html#sqlalchemy.schema.DropSequence)'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DropSequence`](ddl.html#sqlalchemy.schema.DropSequence)'
- en: '[`CreateIndex`](ddl.html#sqlalchemy.schema.CreateIndex)'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CreateIndex`](ddl.html#sqlalchemy.schema.CreateIndex)'
- en: '[`DropIndex`](ddl.html#sqlalchemy.schema.DropIndex)'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DropIndex`](ddl.html#sqlalchemy.schema.DropIndex)'
- en: '[`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint)'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint)'
- en: '[`DropConstraint`](ddl.html#sqlalchemy.schema.DropConstraint)'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DropConstraint`](ddl.html#sqlalchemy.schema.DropConstraint)'
- en: '[`CreateSchema`](ddl.html#sqlalchemy.schema.CreateSchema)'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CreateSchema`](ddl.html#sqlalchemy.schema.CreateSchema)'
- en: '[`DropSchema`](ddl.html#sqlalchemy.schema.DropSchema)'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DropSchema`](ddl.html#sqlalchemy.schema.DropSchema)'
