- en: Asynchronous dispatch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步调度
- en: 原文：[`jax.readthedocs.io/en/latest/async_dispatch.html`](https://jax.readthedocs.io/en/latest/async_dispatch.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/async_dispatch.html`](https://jax.readthedocs.io/en/latest/async_dispatch.html)
- en: 'JAX uses asynchronous dispatch to hide Python overheads. Consider the following
    program:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 使用异步调度来隐藏 Python 的开销。考虑以下程序：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When an operation such as `jnp.dot(x, x)` is executed, JAX does not wait for
    the operation to complete before returning control to the Python program. Instead,
    JAX returns a `jax.Array` value, which is a future, i.e., a value that will be
    produced in the future on an accelerator device but isn’t necessarily available
    immediately. We can inspect the shape or type of a `jax.Array` without waiting
    for the computation that produced it to complete, and we can even pass it to another
    JAX computation, as we do with the addition operation here. Only if we actually
    inspect the value of the array from the host, for example by printing it or by
    converting it into a plain old [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)") will JAX force the Python code to wait for the computation
    to complete.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行诸如 `jnp.dot(x, x)` 这样的操作时，JAX 不会等待操作完成再将控制返回给 Python 程序。相反，JAX 返回一个 `jax.Array`
    值，它是一个未来的值，即将来在加速设备上生成但不一定立即可用的值。我们可以检查 `jax.Array` 的形状或类型，而无需等待生成它的计算完成，并且甚至可以将其传递给另一个
    JAX 计算，正如我们在此处执行加法操作一样。只有当我们实际从主机检查数组的值时，例如通过打印它或将其转换为普通的 [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)")，JAX 才会强制 Python 代码等待计算完成。
- en: Asynchronous dispatch is useful since it allows Python code to “run ahead” of
    an accelerator device, keeping Python code out of the critical path. Provided
    the Python code enqueues work on the device faster than it can be executed, and
    provided that the Python code does not actually need to inspect the output of
    a computation on the host, then a Python program can enqueue arbitrary amounts
    of work and avoid having the accelerator wait.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 异步调度非常有用，因为它允许 Python 代码在加速设备之前“超前运行”，从而避免 Python 代码进入关键路径。只要 Python 代码将工作快速地加入设备的队列，比它执行得更快，并且只要
    Python 代码实际上不需要检查主机上的计算输出，那么 Python 程序就可以加入任意量的工作并避免让加速器等待。
- en: Asynchronous dispatch has a slightly surprising consequence for microbenchmarks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 异步调度对微基准测试有一个稍显意外的影响。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 269µs is a surprisingly small time for a 1000x1000 matrix multiplication on
    CPU! However it turns out that asynchronous dispatch is misleading us and we are
    not timing the execution of the matrix multiplication, only the time to dispatch
    the work. To measure the true cost of the operation we must either read the value
    on the host (e.g., convert it to a plain old host-side numpy array), or use the
    `block_until_ready()` method on a `jax.Array` value to wait for the computation
    that produced it to complete.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 CPU 上进行的 1000x1000 矩阵乘法来说，269µs 的时间是一个令人惊讶地小的时间！然而，事实证明异步调度在误导我们，我们并没有计时矩阵乘法的执行，而是调度工作的时间。要测量操作的真正成本，我们必须要么在主机上读取值（例如，将其转换为普通的主机端
    numpy 数组），要么在 `jax.Array` 值上使用 `block_until_ready()` 方法，等待生成它的计算完成。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Blocking without transferring the result back to Python is usually faster, and
    is often the best choice when writing microbenchmarks of computation times.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在不将结果转移到 Python 的情况下进行阻塞通常更快，通常是编写计算时间微基准测试时的最佳选择。
