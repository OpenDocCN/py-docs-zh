- en: Establishing Connectivity - the Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立连接 - Engine
- en: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/engine.html](https://docs.sqlalchemy.org/en/20/tutorial/engine.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/engine.html](https://docs.sqlalchemy.org/en/20/tutorial/engine.html)
- en: '**Welcome ORM and Core readers alike!**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**欢迎 ORM 和 Core 读者！**'
- en: Every SQLAlchemy application that connects to a database needs to use an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This short section is for everyone.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个连接到数据库的 SQLAlchemy 应用程序都需要使用一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。这个简短的部分适用于所有人。
- en: The start of any SQLAlchemy application is an object called the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This object acts as a central source of connections
    to a particular database, providing both a factory as well as a holding space
    called a [connection pool](../core/pooling.html) for these database connections.
    The engine is typically a global object created just once for a particular database
    server, and is configured using a URL string which will describe how it should
    connect to the database host or backend.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 SQLAlchemy 应用程序的起点是一个称为[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的对象。这个对象充当连接到特定数据库的连接的中心来源，提供了一个工厂以及一个称为[连接池](../core/pooling.html)的保持空间，用于这些数据库连接。该引擎通常是一个全局对象，仅为特定数据库服务器创建一次，并且使用
    URL 字符串进行配置，该字符串将描述它应该如何连接到数据库主机或后端。
- en: 'For this tutorial we will use an in-memory-only SQLite database. This is an
    easy way to test things without needing to have an actual pre-existing database
    set up. The [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is created by using the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本教程，我们将使用内存中的 SQLite 数据库。这是一个方便的测试方法，无需设置实际的预先存在的数据库。通过使用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 函数创建 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The main argument to [`create_engine`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") is a string URL, above passed as the string `"sqlite+pysqlite:///:memory:"`.
    This string indicates to the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") three important facts:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的主要参数是一个字符串 URL，上面传递的字符串是 `"sqlite+pysqlite:///:memory:"`。这个字符串向 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 指示了三个重要的事实：'
- en: What kind of database are we communicating with? This is the `sqlite` portion
    above, which links in SQLAlchemy to an object known as the [dialect](../glossary.html#term-dialect).
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在与什么样的数据库通信？上面的 `sqlite` 部分连接了 SQLAlchemy 到一个称为[方言](../glossary.html#term-dialect)的对象。
- en: What [DBAPI](../glossary.html#term-DBAPI) are we using? The Python [DBAPI](../glossary.html#term-DBAPI)
    is a third party driver that SQLAlchemy uses to interact with a particular database.
    In this case, we’re using the name `pysqlite`, which in modern Python use is the
    [sqlite3](https://docs.python.org/library/sqlite3.html) standard library interface
    for SQLite. If omitted, SQLAlchemy will use a default [DBAPI](../glossary.html#term-DBAPI)
    for the particular database selected.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在使用什么[DBAPI](../glossary.html#term-DBAPI)？Python [DBAPI](../glossary.html#term-DBAPI)
    是 SQLAlchemy 用来与特定数据库交互的第三方驱动程序。在这种情况下，我们使用的是 `pysqlite`，在现代 Python 中，它是 SQLite
    的[sqlite3](https://docs.python.org/library/sqlite3.html) 标准库接口。如果省略，则 SQLAlchemy
    将使用特定数据库的默认[DBAPI](../glossary.html#term-DBAPI)。
- en: How do we locate the database? In this case, our URL includes the phrase `/:memory:`,
    which is an indicator to the `sqlite3` module that we will be using an **in-memory-only**
    database. This kind of database is perfect for experimenting as it does not require
    any server nor does it need to create new files.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何定位数据库？在这种情况下，我们的 URL 包含短语 `/:memory:`，这是对 `sqlite3` 模块的一个指示，表明我们将使用一个**仅存在于内存中**的数据库。这种类型的数据库非常适合用于实验，因为它不需要任何服务器，也不需要创建新文件。
- en: We have also specified a parameter [`create_engine.echo`](../core/engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine"), which will instruct the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to log all of the SQL it emits to a Python logger
    that will write to standard out. This flag is a shorthand way of setting up [Python
    logging more formally](../core/engines.html#dbengine-logging) and is useful for
    experimentation in scripts. Many of the SQL examples will include this SQL logging
    output beneath a `[SQL]` link that when clicked, will reveal the full SQL interaction.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还指定了一个参数[`create_engine.echo`](../core/engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine")，它将指示[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")将其发出的所有 SQL 记录到一个 Python 日志记录器，该记录器将写入标准输出。此标志是一种更正式设置[Python
    日志记录](../core/engines.html#dbengine-logging)的简便方式，并且对于脚本中的实验很有用。许多 SQL 示例将包括此
    SQL 日志输出，在点击 `[SQL]` 链接后，将显示完整的 SQL 交互。
