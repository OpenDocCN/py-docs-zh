- en: SQL and Generic Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 和通用函数
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/functions.html](https://docs.sqlalchemy.org/en/20/core/functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/functions.html](https://docs.sqlalchemy.org/en/20/core/functions.html)
- en: SQL functions are invoked by using the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace. See the tutorial at [Working with
    SQL Functions](../tutorial/data_select.html#tutorial-functions) for background
    on how to use the [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    object to render SQL functions in statements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    命名空间来调用 SQL 函数。请参阅 [使用 SQL 函数](../tutorial/data_select.html#tutorial-functions)
    教程，了解如何使用 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    对象在语句中渲染 SQL 函数的背景知识。
- en: See also
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SQL 函数](../tutorial/data_select.html#tutorial-functions) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: Function API
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数 API
- en: The base API for SQL functions, which provides for the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace as well as classes that may be used
    for extensibility.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 函数的基本 API，提供了 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    命名空间以及可用于可扩展性的类。
- en: '| Object Name | Description |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AnsiFunction](#sqlalchemy.sql.functions.AnsiFunction) | Define a function
    in “ansi” format, which doesn’t render parenthesis. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [AnsiFunction](#sqlalchemy.sql.functions.AnsiFunction) | 以“ansi”格式定义函数，不会渲染括号。
    |'
- en: '| [Function](#sqlalchemy.sql.functions.Function) | Describe a named SQL function.
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [Function](#sqlalchemy.sql.functions.Function) | 描述一个命名的 SQL 函数。 |'
- en: '| [FunctionElement](#sqlalchemy.sql.functions.FunctionElement) | Base for SQL
    function-oriented constructs. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [FunctionElement](#sqlalchemy.sql.functions.FunctionElement) | SQL 函数导向构造的基类。
    |'
- en: '| [GenericFunction](#sqlalchemy.sql.functions.GenericFunction) | Define a ‘generic’
    function. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [GenericFunction](#sqlalchemy.sql.functions.GenericFunction) | 定义一个‘通用’函数。
    |'
- en: '| [register_function](#sqlalchemy.sql.functions.register_function)(identifier,
    fn[, package]) | Associate a callable with a particular func. name. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [register_function](#sqlalchemy.sql.functions.register_function)(identifier,
    fn[, package]) | 将可调用对象与特定函数名关联。 |'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Define a function in “ansi” format, which doesn’t render parenthesis.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以“ansi”格式定义函数，不会渲染括号。
- en: '**Class signature**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Describe a named SQL function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 描述一个命名的 SQL 函数。
- en: The [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    object is typically generated from the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generation object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    对象通常由 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    生成对象生成。'
- en: 'Parameters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*clauses` – list of column expressions that form the arguments of the SQL
    function call.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*clauses` – 形成 SQL 函数调用参数的列表达式列表。'
- en: '`type_` – optional [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") datatype object that will be used as the return
    value of the column expression generated by this function call.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 可选的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    数据类型对象，将用作由此函数调用生成的列表达式的返回值。'
- en: '`packagenames` –'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packagenames` –'
- en: 'a string which indicates package prefix names to be prepended to the function
    name when the SQL is generated. The [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generator creates these when it is called using
    dotted format, e.g.:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符串，指示在生成 SQL 时要在函数名前添加的包前缀名称。当使用点格式调用 [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 生成器时会创建这些，例如：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See also
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SQL 函数](../tutorial/data_select.html#tutorial-functions) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - namespace which produces registered or ad-hoc [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - 产生注册或特设的 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    实例的命名空间。'
- en: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - allows creation of registered function types.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - 允许创建注册的函数类型。'
- en: '**Members**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.functions.Function.__init__)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.functions.Function.__init__)'
- en: '**Class signature**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") ([`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"))
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    ([`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"))
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Construct a [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function").
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")。
- en: The [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    construct is normally used to construct new [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    构造函数来构造新的 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    实例。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Base for SQL function-oriented constructs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 SQL 函数导向构造的基础。
- en: This is a [generic type](https://peps.python.org/pep-0484/#generics), meaning
    that type checkers and IDEs can be instructed on the types to expect in a [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") for this function. See [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") for an example of how this is done.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 [通用类型](https://peps.python.org/pep-0484/#generics)，意味着类型检查器和 IDE 可以指示在此函数的
    [`Result`](connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    中期望的类型。参见 [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    以了解如何执行此操作的示例。
- en: See also
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SQL 函数](../tutorial/data_select.html#tutorial-functions) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    - named SQL function.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    - SQL 函数的命名。'
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - namespace which produces registered or ad-hoc [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - 产生注册或特设的 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    实例的命名空间。'
- en: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - allows creation of registered function types.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - 允许创建注册的函数类型。'
- en: '**Members**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.functions.FunctionElement.__init__), [alias()](#sqlalchemy.sql.functions.FunctionElement.alias),
    [as_comparison()](#sqlalchemy.sql.functions.FunctionElement.as_comparison), [c](#sqlalchemy.sql.functions.FunctionElement.c),
    [clauses](#sqlalchemy.sql.functions.FunctionElement.clauses), [column_valued()](#sqlalchemy.sql.functions.FunctionElement.column_valued),
    [columns](#sqlalchemy.sql.functions.FunctionElement.columns), [entity_namespace](#sqlalchemy.sql.functions.FunctionElement.entity_namespace),
    [exported_columns](#sqlalchemy.sql.functions.FunctionElement.exported_columns),
    [filter()](#sqlalchemy.sql.functions.FunctionElement.filter), [over()](#sqlalchemy.sql.functions.FunctionElement.over),
    [scalar_table_valued()](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued),
    [select()](#sqlalchemy.sql.functions.FunctionElement.select), [self_group()](#sqlalchemy.sql.functions.FunctionElement.self_group),
    [table_valued()](#sqlalchemy.sql.functions.FunctionElement.table_valued), [within_group()](#sqlalchemy.sql.functions.FunctionElement.within_group),
    [within_group_type()](#sqlalchemy.sql.functions.FunctionElement.within_group_type)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.functions.FunctionElement.__init__), [alias()](#sqlalchemy.sql.functions.FunctionElement.alias),
    [as_comparison()](#sqlalchemy.sql.functions.FunctionElement.as_comparison), [c](#sqlalchemy.sql.functions.FunctionElement.c),
    [clauses](#sqlalchemy.sql.functions.FunctionElement.clauses), [column_valued()](#sqlalchemy.sql.functions.FunctionElement.column_valued),
    [columns](#sqlalchemy.sql.functions.FunctionElement.columns), [entity_namespace](#sqlalchemy.sql.functions.FunctionElement.entity_namespace),
    [exported_columns](#sqlalchemy.sql.functions.FunctionElement.exported_columns),
    [filter()](#sqlalchemy.sql.functions.FunctionElement.filter), [over()](#sqlalchemy.sql.functions.FunctionElement.over),
    [scalar_table_valued()](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued),
    [select()](#sqlalchemy.sql.functions.FunctionElement.select), [self_group()](#sqlalchemy.sql.functions.FunctionElement.self_group),
    [table_valued()](#sqlalchemy.sql.functions.FunctionElement.table_valued), [within_group()](#sqlalchemy.sql.functions.FunctionElement.within_group),
    [within_group_type()](#sqlalchemy.sql.functions.FunctionElement.within_group_type)'
- en: '**Class signature**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") ([`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), [`sqlalchemy.sql.expression.FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), `sqlalchemy.sql.expression.Generative`)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")（[`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")，[`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，[`sqlalchemy.sql.expression.FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，`sqlalchemy.sql.expression.Generative`）
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Construct a [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")。
- en: 'Parameters:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*clauses` – list of column expressions that form the arguments of the SQL
    function call.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*clauses` – 列表，包含形成 SQL 函数调用参数的列表达式。'
- en: '`**kwargs` – additional kwargs are typically consumed by subclasses.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 通常由子类消耗的额外 kwargs。'
- en: See also
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
- en: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Produce a [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    construct against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`FunctionElement`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")构建一个别名。
- en: Tip
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method is part of the mechanism
    by which “table valued” SQL functions are created. However, most use cases are
    covered by higher level methods on [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") including [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued"), and [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued").
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") 方法是创建“表值”SQL函数的机制的一部分。但是，大多数用例都通过[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")上的更高级方法来处理，包括[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")和[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")。'
- en: This construct wraps the function in a named alias which is suitable for the
    FROM clause, in the style accepted for example by PostgreSQL. A column expression
    is also provided using the special `.column` attribute, which may be used to refer
    to the output of the function as a scalar value in the columns or where clause,
    for a backend such as PostgreSQL.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此结构将函数包装在适合 FROM 子句的命名别名中，例如 PostgreSQL 所接受的风格。 还提供了使用特殊的 `.column` 属性的列表达式，该属性可用于在列或
    where 子句中引用函数的输出，例如 PostgreSQL 等后端的标量值。
- en: For a full table-valued expression, use the [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method first to establish
    named columns.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完整的表值表达式，请先使用 [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法来建立命名列。
- en: 'e.g.:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method provides a shortcut
    for the above pattern:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 方法为上述模式提供了一种快捷方式：'
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'New in version 1.4.0b2: Added the `.column` accessor'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中添加了 `.column` 访问器
- en: 'Parameters:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – alias name, will be rendered as `AS <name>` in the FROM clause'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 别名，将在 FROM 子句中渲染为 `AS <name>`'
- en: '`joins_implicitly` –'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joins_implicitly` –'
- en: when True, the table valued function may be used in the FROM clause without
    any explicit JOIN to other tables in the SQL query, and no “cartesian product”
    warning will be generated. May be useful for SQL functions such as `func.json_each()`.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，可以在 SQL 查询的 FROM 子句中使用表值函数，而无需显式连接到其他表，并且不会生成“笛卡尔积”警告。 对于 `func.json_each()`
    等 SQL 函数可能很有用。
- en: New in version 1.4.33.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.33 中添加。
- en: See also
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在 [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial) 中'
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
- en: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued")'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued")'
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Interpret this expression as a boolean comparison between two values.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将此表达式解释为两个值之间的布尔比较。
- en: This method is used for an ORM use case described at [Custom operators based
    on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于描述 [Custom operators based on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function)
    中的 ORM 用例。
- en: 'A hypothetical SQL function “is_equal()” which compares to values for equality
    would be written in the Core expression language as:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 假设的 SQL 函数“is_equal()”，用于比较两个值是否相等，可以用 Core 表达式语言编写为：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If “is_equal()” above is comparing “a” and “b” for equality, the [`FunctionElement.as_comparison()`](#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison") method would be invoked
    as:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上面的“is_equal()”是在比较“a”和“b”是否相等，那么[`FunctionElement.as_comparison()`](#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison")方法将被调用为：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Where above, the integer value “1” refers to the first argument of the “is_equal()”
    function and the integer value “2” refers to the second.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，“1”这个整数值是指“is_equal()”函数的第一个参数，“2”这个整数值是指第二个参数。
- en: 'This would create a [`BinaryExpression`](sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") that is equivalent to:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个等效于[`BinaryExpression`](sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")的表达式：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: However, at the SQL level it would still render as “is_equal(‘a’, ‘b’)”.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在SQL级别上，它仍然会呈现为“is_equal('a'，'b')”。
- en: The ORM, when it loads a related object or collection, needs to be able to manipulate
    the “left” and “right” sides of the ON clause of a JOIN expression. The purpose
    of this method is to provide a SQL function construct that can also supply this
    information to the ORM, when used with the [`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") parameter. The return value is a containment object
    called `FunctionAsBinary`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当ORM加载相关对象或集合时，需要能够操作JOIN表达式的ON子句的“left”和“right”两边。此方法的目的是在与[`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")参数一起使用时，为ORM提供也可以向其提供此信息的SQL函数构造。返回值是一个名为`FunctionAsBinary`的包含对象。
- en: 'An ORM example is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ORM示例如下：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Above, the “Venue” class can load descendant “Venue” objects by determining
    if the name of the parent Venue is contained within the start of the hypothetical
    descendant value’s name, e.g. “parent1” would match up to “parent1/child1”, but
    not to “parent2/child1”.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，“Venue”类可以通过确定父Venue的名称是否包含在假设的后代值的名称的开头来加载后代“Venue”对象，例如“parent1”将匹配到“parent1/child1”，但不会匹配到“parent2/child1”。
- en: Possible use cases include the “materialized path” example given above, as well
    as making use of special SQL functions such as geometric functions to create join
    conditions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的用例包括上面给出的“材料化路径”示例，以及利用特殊的SQL函数（例如几何函数）创建连接条件。
- en: 'Parameters:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`left_index` – the integer 1-based index of the function argument that serves
    as the “left” side of the expression.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`left_index` - 作为表达式“left”侧的函数参数的整数基于1的索引。'
- en: '`right_index` – the integer 1-based index of the function argument that serves
    as the “right” side of the expression.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right_index` - 作为表达式“right”侧的函数参数的整数基于1的索引。'
- en: New in version 1.3.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新内容。
- en: See also
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Custom operators based on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function)
    - example use within the ORM'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[基于SQL函数的自定义运算符](../orm/join_conditions.html#relationship-custom-operator-sql-function)
    - ORM中的示例用法'
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: synonym for [`FunctionElement.columns`](#sqlalchemy.sql.functions.FunctionElement.columns
    "sqlalchemy.sql.functions.FunctionElement.columns").
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`joins_implicitly` - [`FunctionElement.columns`](#sqlalchemy.sql.functions.FunctionElement.columns
    "sqlalchemy.sql.functions.FunctionElement.columns")的同义词。'
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Return the underlying [`ClauseList`](sqlelement.html#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList") which contains the arguments for this
    [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含此[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")参数的基础[`ClauseList`](sqlelement.html#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList")。
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Return this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")
    as a column expression that selects from itself as a FROM clause.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")作为选择自身的FROM子句的列表达式返回。
- en: 'E.g.:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is shorthand for:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是的简写形式：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Parameters:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – optional name to assign to the alias name that’s generated. If omitted,
    a unique anonymizing name is used.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 分配给生成的别名的可选名称。如果省略，将使用唯一的匿名名称。'
- en: '`joins_implicitly` –'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joins_implicitly` –'
- en: when True, the “table” portion of the column valued function may be a member
    of the FROM clause without any explicit JOIN to other tables in the SQL query,
    and no “cartesian product” warning will be generated. May be useful for SQL functions
    such as `func.json_array_elements()`.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，列值函数的“表”部分可以成为 SQL 查询中 FROM 子句的成员，而无需对其他表进行显式 JOIN，并且不会生成“笛卡尔积”警告。可能对诸如
    `func.json_array_elements()` 等 SQL 函数有用。
- en: New in version 1.4.46.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4.46版本中的新功能。
- en: See also
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Column Valued Functions - Table Valued Function as a Scalar Column](../tutorial/data_select.html#tutorial-functions-column-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[列值函数 - 表值函数作为标量列](../tutorial/data_select.html#tutorial-functions-column-valued)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Column Valued Functions](../dialects/postgresql.html#postgresql-column-valued)
    - in the [PostgreSQL](../dialects/postgresql.html) documentation'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[列值函数](../dialects/postgresql.html#postgresql-column-valued) - 在[PostgreSQL](../dialects/postgresql.html)文档中'
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The set of columns exported by this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")导出的一组列。
- en: 'This is a placeholder collection that allows the function to be placed in the
    FROM clause of a statement:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个占位符集合，允许将函数放置在语句的FROM子句中：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The above form is a legacy feature that is now superseded by the fully capable
    [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method; see that method
    for details.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 上述形式是一个已过时的功能，现在已被完全功能的[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")方法取代；请参阅该方法以获取详情。
- en: See also
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") - generates table-valued
    SQL function expressions.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") - 生成表值 SQL 函数表达式。'
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: overrides FromClause.entity_namespace as functions are generally column expressions
    and not FromClauses.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖 FromClause.entity_namespace，因为函数通常是列表达式而不是 FromClauses。
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Produce a FILTER clause against this function.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此函数生成一个 FILTER 子句。
- en: Used against aggregate and window functions, for database backends that support
    the “FILTER” clause.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 用于针对支持“FILTER”子句的聚合和窗口函数的数据库后端。
- en: 'The expression:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'is shorthand for:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 是的缩写：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: See also
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[组内特殊修饰符，过滤器](../tutorial/data_select.html#tutorial-functions-within-group)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`FunctionFilter`](sqlelement.html#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter")'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionFilter`](sqlelement.html#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter")'
- en: '[`funcfilter()`](sqlelement.html#sqlalchemy.sql.expression.funcfilter "sqlalchemy.sql.expression.funcfilter")'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[`funcfilter()`](sqlelement.html#sqlalchemy.sql.expression.funcfilter "sqlalchemy.sql.expression.funcfilter")'
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Produce an OVER clause against this function.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此函数生成一个 OVER 子句。
- en: Used against aggregate or so-called “window” functions, for database backends
    that support window functions.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 用于针对聚合或所谓的“窗口”函数，适用于支持窗口函数的数据库后端。
- en: 'The expression:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式：
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'is shorthand for:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 是的缩写：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See [`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")
    for a full description.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整描述，请参阅[`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")。
- en: See also
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
- en: '[Using Window Functions](../tutorial/data_select.html#tutorial-window-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用窗口函数](../tutorial/data_select.html#tutorial-window-functions) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Return a column expression that’s against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") as a scalar table-valued expression.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个列表达式，作为标量表值表达式针对这个[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")。
- en: The returned expression is similar to that returned by a single column accessed
    off of a [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") construct, except no
    FROM clause is generated; the function is rendered in the similar way as a scalar
    subquery.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的表达式类似于从[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")结构中访问的单个列返回的表达式，只是不生成FROM子句；该函数以类似于标量子查询的方式呈现。
- en: 'E.g.:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: New in version 1.4.0b2.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.0b2中的新功能。
- en: See also
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
- en: '[`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")'
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Produce a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 产生针对这个[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")的[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造。
- en: 'This is shorthand for:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是的缩写：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写为返回“分组”构造，即括号。特别是，它被“二元”表达式使用，当将它们放入较大的表达式中时，提供对自身的分组，以及当将它们放入另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造的FROM子句中时，被[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造使用。（请注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式组合在一起，[`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group")的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造考虑了运算符优先级
    - 因此可能不需要括号，例如，在表达式`x OR (y AND z)`中可能不需要括号 - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本方法[`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group "sqlalchemy.sql.functions.FunctionElement.self_group")只是返回自身。'
- en: '[PRE34]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Return a [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") representation of this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") with table-valued expressions added.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")
    的 [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") 表示形式，其中添加了表值表达式。
- en: 'e.g.:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'A WITH ORDINALITY expression may be generated by passing the keyword argument
    “with_ordinality”:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递关键字参数“with_ordinality”可以生成一个 WITH ORDINALITY 表达式：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Parameters:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*expr` – A series of string column names that will be added to the `.c` collection
    of the resulting [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") construct as columns. [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") objects with or without datatypes may also
    be used.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*expr` - 将添加到结果 [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") 构造的 `.c` 集合中的一系列字符串列名。也可以使用具有或不具有数据类型的
    [`column()`](sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    对象。'
- en: '`name` – optional name to assign to the alias name that’s generated. If omitted,
    a unique anonymizing name is used.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 分配给生成的别名的可选名称。如果省略，将使用唯一的匿名化名称。'
- en: '`with_ordinality` – string name that when present results in the `WITH ORDINALITY`
    clause being added to the alias, and the given string name will be added as a
    column to the .c collection of the resulting [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_ordinality` - 存在时，将 WITH ORDINALITY 子句添加到别名，并将给定的字符串名称添加为结果 [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") 的 `.c` 集合中的列。'
- en: '`joins_implicitly` –'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joins_implicitly` -'
- en: when True, the table valued function may be used in the FROM clause without
    any explicit JOIN to other tables in the SQL query, and no “cartesian product”
    warning will be generated. May be useful for SQL functions such as `func.json_each()`.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，可以在 SQL 查询的 FROM 子句中使用表值函数，而无需对其他表进行显式的 JOIN，并且不会生成“笛卡尔积”警告。对于 SQL
    函数（例如 `func.json_each()`）可能很有用。
- en: New in version 1.4.33.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.33 中的新增功能。
- en: New in version 1.4.0b2.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中的新增功能。
- en: See also
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[Table-Valued Functions](../dialects/postgresql.html#postgresql-table-valued)
    - in the [PostgreSQL](../dialects/postgresql.html) documentation'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../dialects/postgresql.html#postgresql-table-valued) - 在 [PostgreSQL](../dialects/postgresql.html)
    文档中'
- en: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued") - variant of [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") which delivers the complete
    table valued expression as a scalar column expression'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued") - [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 的变体，将完整的表值表达式作为标量列表达式传递'
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
- en: '[`TableValuedAlias.render_derived()`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") - renders the alias
    using a derived column clause, e.g. `AS name(col1, col2, ...)`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableValuedAlias.render_derived()`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") - 使用派生列子句渲染别名，例如
    `AS name(col1, col2, ...)`'
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Produce a WITHIN GROUP (ORDER BY expr) clause against this function.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对此函数的 WITHIN GROUP (ORDER BY expr) 子句。
- en: Used against so-called “ordered set aggregate” and “hypothetical set aggregate”
    functions, including [`percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`rank`](#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank"), [`dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank"), etc.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 用于所谓的“有序集合聚合”和“假设集合聚合”函数，包括 [`percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")、[`rank`](#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank")、[`dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") 等。
- en: See [`within_group()`](sqlelement.html#sqlalchemy.sql.expression.within_group
    "sqlalchemy.sql.expression.within_group") for a full description.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整描述，请参阅 [`within_group()`](sqlelement.html#sqlalchemy.sql.expression.within_group
    "sqlalchemy.sql.expression.within_group")。
- en: See also
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[WITHIN GROUP、FILTER 特殊修饰符](../tutorial/data_select.html#tutorial-functions-within-group)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE38]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: For types that define their return type as based on the criteria within a WITHIN
    GROUP (ORDER BY) expression, called by the [`WithinGroup`](sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于将其返回类型定义为基于 WITHIN GROUP (ORDER BY) 表达式中的条件的类型，由 [`WithinGroup`](sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") 构造调用。
- en: Returns None by default, in which case the function’s normal `.type` is used.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下返回 None，在这种情况下，函数的正常`.type`被使用。
- en: '[PRE39]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Define a ‘generic’ function.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个‘通用’函数。
- en: A generic function is a pre-established [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") class that is instantiated automatically
    when called by name from the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") attribute. Note that calling any name from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") has the effect that a new [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instance is created automatically, given
    that name. The primary use case for defining a [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") class is so that a function of a particular
    name may be given a fixed return type. It can also include custom argument parsing
    schemes as well as additional methods.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型函数是预先定义的 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    类，在从 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    属性按名称调用时会自动实例化。请注意，从 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    调用任何名称的效果是自动创建一个新的 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    实例，给定该名称。定义 [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    类的主要用例是为特定名称的函数指定固定的返回类型。它还可以包括自定义参数解析方案以及其他方法。
- en: 'Subclasses of [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") are automatically registered under
    the name of the class. For example, a user-defined function `as_utc()` would be
    available immediately:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    的子类会自动注册到类的名称下。例如，用户定义的函数 `as_utc()` 将立即可用：'
- en: '[PRE40]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'User-defined generic functions can be organized into packages by specifying
    the “package” attribute when defining [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"). Third party libraries containing
    many functions may want to use this in order to avoid name conflicts with other
    systems. For example, if our `as_utc()` function were part of a package “time”:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的通用函数可以通过在定义 [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") 时指定“package”属性来组织成包。包含许多函数的第三方库可能希望这样做，以避免与其他系统的名称冲突。例如，如果我们的
    `as_utc()` 函数是包 “time” 的一部分：
- en: '[PRE41]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The above function would be available from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") using the package name `time`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数可以通过使用包名 `time` 从 [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 中获得：
- en: '[PRE42]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'A final option is to allow the function to be accessed from one name in [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") but to render as a different name. The `identifier`
    attribute will override the name used to access the function as loaded from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func"), but will retain the usage of `name` as the
    rendered name:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种选择是允许从[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")中的一个名称访问函数，但呈现为不同的名称。`identifier`属性将覆盖从[`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")加载的函数名称，但将保留`name`作为呈现名称的用法：
- en: '[PRE43]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The above function will render as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以上函数将呈现如下：
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The name will be rendered as is, however without quoting unless the name contains
    special characters that require quoting. To force quoting on or off for the name,
    use the `quoted_name` construct:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 名称将原样显示，但不会加引号，除非名称包含需要加引号的特殊字符。要在名称上强制加引号或取消引号，请使用`quoted_name`结构：
- en: '[PRE45]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The above function will render as:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以上函数将呈现为：
- en: '[PRE46]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Type parameters for this class as a [generic type](https://peps.python.org/pep-0484/#generics)
    can be passed and should match the type seen in a [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"). For example:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递此类作为[泛型类型](https://peps.python.org/pep-0484/#generics)的类的类型参数，并应与[`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")中看到的类型相匹配。例如：
- en: '[PRE47]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The above indicates that the following expression returns a `datetime` object:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以上表明以下表达式返回一个`datetime`对象：
- en: '[PRE48]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'New in version 1.3.13: The [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now recognized for quoting
    when used with the “name” attribute of the object, so that quoting can be forced
    on or off for the function name.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3.13开始：在对象的“name”属性中使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")结构现在被识别为引用，因此可以强制对函数名称进行引用或取消引用。
- en: '**Class signature**'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") ([`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"))
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")（[`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function")）
- en: '[PRE49]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Associate a callable with a particular func. name.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 将可调用对象与特定的函数名关联起来。
- en: This is normally called by GenericFunction, but is also available by itself
    so that a non-Function construct can be associated with the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") accessor (i.e. CAST, EXTRACT).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 通常由GenericFunction调用，但也可单独使用，以便将非Function构造与[`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")访问器关联起来（即CAST，EXTRACT）。
- en: Selected “Known” Functions
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选定的“已知”函数
- en: 'These are [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    implementations for a selected set of common SQL functions that set up the expected
    return type for each function automatically. The are invoked in the same way as
    any other member of the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一组常见SQL函数的[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")实现，为每个函数自动设置了预期的返回类型。它们以与[`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")命名空间的任何其他成员相同的方式调用：
- en: '[PRE50]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note that any name not known to [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generates the function name as is - there is
    no restriction on what SQL functions can be called, known or unknown to SQLAlchemy,
    built-in or user defined. The section here only describes those functions where
    SQLAlchemy already knows what argument and return types are in use.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，任何[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")未知的名称都会按原样生成函数名称
    - SQLAlchemy对可以调用的SQL函数没有限制，不管对SQLAlchemy已知还是未知，内置还是用户定义。本节仅描述SQLAlchemy已知参数和返回类型的函数。
- en: '| Object Name | Description |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [aggregate_strings](#sqlalchemy.sql.functions.aggregate_strings) | Implement
    a generic string aggregation function. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [aggregate_strings](#sqlalchemy.sql.functions.aggregate_strings) | 实现一个通用的字符串聚合函数。
    |'
- en: '| [array_agg](#sqlalchemy.sql.functions.array_agg) | Support for the ARRAY_AGG
    function. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [array_agg](#sqlalchemy.sql.functions.array_agg) | 对ARRAY_AGG函数的支持。 |'
- en: '| [char_length](#sqlalchemy.sql.functions.char_length) | The CHAR_LENGTH()
    SQL function. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [char_length](#sqlalchemy.sql.functions.char_length) | CHAR_LENGTH() SQL函数。
    |'
- en: '| [coalesce](#sqlalchemy.sql.functions.coalesce) |  |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [coalesce](#sqlalchemy.sql.functions.coalesce) |  |'
- en: '| [concat](#sqlalchemy.sql.functions.concat) | The SQL CONCAT() function, which
    concatenates strings. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [concat](#sqlalchemy.sql.functions.concat) | SQL CONCAT()函数，用于连接字符串。 |'
- en: '| [count](#sqlalchemy.sql.functions.count) | The ANSI COUNT aggregate function.
    With no arguments, emits COUNT *. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [count](#sqlalchemy.sql.functions.count) | ANSI COUNT聚合函数。没有参数时，发出COUNT *。
    |'
- en: '| [cube](#sqlalchemy.sql.functions.cube) | Implement the `CUBE` grouping operation.
    |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| [cube](#sqlalchemy.sql.functions.cube) | 实现`CUBE`分组操作。 |'
- en: '| [cume_dist](#sqlalchemy.sql.functions.cume_dist) | Implement the `cume_dist`
    hypothetical-set aggregate function. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [cume_dist](#sqlalchemy.sql.functions.cume_dist) | 实现`cume_dist`假设集合聚合函数。
    |'
- en: '| [current_date](#sqlalchemy.sql.functions.current_date) | The CURRENT_DATE()
    SQL function. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [current_date](#sqlalchemy.sql.functions.current_date) | CURRENT_DATE() SQL函数。
    |'
- en: '| [current_time](#sqlalchemy.sql.functions.current_time) | The CURRENT_TIME()
    SQL function. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [current_time](#sqlalchemy.sql.functions.current_time) | CURRENT_TIME() SQL函数。
    |'
- en: '| [current_timestamp](#sqlalchemy.sql.functions.current_timestamp) | The CURRENT_TIMESTAMP()
    SQL function. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [current_timestamp](#sqlalchemy.sql.functions.current_timestamp) | CURRENT_TIMESTAMP()
    SQL函数。 |'
- en: '| [current_user](#sqlalchemy.sql.functions.current_user) | The CURRENT_USER()
    SQL function. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| [current_user](#sqlalchemy.sql.functions.current_user) | CURRENT_USER() SQL函数。
    |'
- en: '| [dense_rank](#sqlalchemy.sql.functions.dense_rank) | Implement the `dense_rank`
    hypothetical-set aggregate function. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| [dense_rank](#sqlalchemy.sql.functions.dense_rank) | 实现`dense_rank`假设集合聚合函数。
    |'
- en: '| [grouping_sets](#sqlalchemy.sql.functions.grouping_sets) | Implement the
    `GROUPING SETS` grouping operation. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [grouping_sets](#sqlalchemy.sql.functions.grouping_sets) | 实现`GROUPING SETS`分组操作。
    |'
- en: '| [localtime](#sqlalchemy.sql.functions.localtime) | The localtime() SQL function.
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [localtime](#sqlalchemy.sql.functions.localtime) | localtime() SQL函数。 |'
- en: '| [localtimestamp](#sqlalchemy.sql.functions.localtimestamp) | The localtimestamp()
    SQL function. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [localtimestamp](#sqlalchemy.sql.functions.localtimestamp) | localtimestamp()
    SQL函数。 |'
- en: '| [max](#sqlalchemy.sql.functions.max) | The SQL MAX() aggregate function.
    |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| [max](#sqlalchemy.sql.functions.max) | SQL MAX()聚合函数。 |'
- en: '| [min](#sqlalchemy.sql.functions.min) | The SQL MIN() aggregate function.
    |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| [min](#sqlalchemy.sql.functions.min) | SQL MIN()聚合函数。 |'
- en: '| [mode](#sqlalchemy.sql.functions.mode) | Implement the `mode` ordered-set
    aggregate function. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| [mode](#sqlalchemy.sql.functions.mode) | 实现`mode`有序集合聚合函数。 |'
- en: '| [next_value](#sqlalchemy.sql.functions.next_value) | Represent the ‘next
    value’, given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    as its single argument. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| [next_value](#sqlalchemy.sql.functions.next_value) | 代表“下一个值”，给定一个[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")作为其唯一参数。 |'
- en: '| [now](#sqlalchemy.sql.functions.now) | The SQL now() datetime function. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| [now](#sqlalchemy.sql.functions.now) | SQL now()日期时间函数。 |'
- en: '| [percent_rank](#sqlalchemy.sql.functions.percent_rank) | Implement the `percent_rank`
    hypothetical-set aggregate function. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| [percent_rank](#sqlalchemy.sql.functions.percent_rank) | 实现`percent_rank`假设集合聚合函数。
    |'
- en: '| [percentile_cont](#sqlalchemy.sql.functions.percentile_cont) | Implement
    the `percentile_cont` ordered-set aggregate function. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| [percentile_cont](#sqlalchemy.sql.functions.percentile_cont) | 实现`percentile_cont`有序集合聚合函数。
    |'
- en: '| [percentile_disc](#sqlalchemy.sql.functions.percentile_disc) | Implement
    the `percentile_disc` ordered-set aggregate function. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| [percentile_disc](#sqlalchemy.sql.functions.percentile_disc) | 实现`percentile_disc`有序集合聚合函数。
    |'
- en: '| [random](#sqlalchemy.sql.functions.random) | The RANDOM() SQL function. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| [random](#sqlalchemy.sql.functions.random) | RANDOM() SQL函数。 |'
- en: '| [rank](#sqlalchemy.sql.functions.rank) | Implement the `rank` hypothetical-set
    aggregate function. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| [rank](#sqlalchemy.sql.functions.rank) | 实现`rank`假设集合聚合函数。 |'
- en: '| [rollup](#sqlalchemy.sql.functions.rollup) | Implement the `ROLLUP` grouping
    operation. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| [rollup](#sqlalchemy.sql.functions.rollup) | 实现`ROLLUP`分组操作。 |'
- en: '| [session_user](#sqlalchemy.sql.functions.session_user) | The SESSION_USER()
    SQL function. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| [session_user](#sqlalchemy.sql.functions.session_user) | SESSION_USER() SQL函数。
    |'
- en: '| [sum](#sqlalchemy.sql.functions.sum) | The SQL SUM() aggregate function.
    |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| [sum](#sqlalchemy.sql.functions.sum) | SQL SUM()聚合函数。 |'
- en: '| [sysdate](#sqlalchemy.sql.functions.sysdate) | The SYSDATE() SQL function.
    |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| [sysdate](#sqlalchemy.sql.functions.sysdate) | SYSDATE() SQL函数。 |'
- en: '| [user](#sqlalchemy.sql.functions.user) | The USER() SQL function. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| [user](#sqlalchemy.sql.functions.user) | USER() SQL函数。 |'
- en: '[PRE51]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Implement a generic string aggregation function.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个通用的字符串聚合函数。
- en: This function will concatenate non-null values into a string and separate the
    values by a delimiter.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将非空值连接成字符串，并用分隔符分隔值。
- en: This function is compiled on a per-backend basis, into functions such as `group_concat()`,
    `string_agg()`, or `LISTAGG()`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数根据每个后端编译为`group_concat()`、`string_agg()`或`LISTAGG()`等函数。
- en: 'e.g. Example usage with delimiter ‘.’:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用分隔符‘.’的示例用法：
- en: '[PRE52]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The return type of this function is [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String").
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型是[`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")。
- en: '**Class signature**'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.aggregate_strings`](#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.aggregate_strings`](#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE53]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Support for the ARRAY_AGG function.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 支持ARRAY_AGG函数。
- en: The `func.array_agg(expr)` construct returns an expression of type [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY").
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`func.array_agg(expr)`构造返回类型为[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的表达式。'
- en: 'e.g.:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE54]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: See also
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") - PostgreSQL-specific version that
    returns [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY"), which has PG-specific operators added.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") - 返回[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")的PostgreSQL特定版本，其中添加了PG特定的运算符。'
- en: '**Class signature**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.array_agg`](#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.array_agg`](#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE55]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The CHAR_LENGTH() SQL function.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: CHAR_LENGTH() SQL函数。
- en: '**Class signature**'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.char_length`](#sqlalchemy.sql.functions.char_length
    "sqlalchemy.sql.functions.char_length") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.char_length`](#sqlalchemy.sql.functions.char_length
    "sqlalchemy.sql.functions.char_length")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE56]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '**Class signature**'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.coalesce`](#sqlalchemy.sql.functions.coalesce
    "sqlalchemy.sql.functions.coalesce") (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.coalesce`](#sqlalchemy.sql.functions.coalesce "sqlalchemy.sql.functions.coalesce")（`sqlalchemy.sql.functions.ReturnTypeFromArgs`）
- en: '[PRE57]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The SQL CONCAT() function, which concatenates strings.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: SQL CONCAT()函数，用于连接字符串。
- en: 'E.g.:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE58]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'String concatenation in SQLAlchemy is more commonly available using the Python
    `+` operator with string datatypes, which will render a backend-specific concatenation
    operator, such as :'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy中，字符串连接更常见地使用Python的`+`运算符与字符串数据类型一起使用，这将呈现特定于后端的连接运算符，例如：
- en: '[PRE59]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '**Class signature**'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.concat`](#sqlalchemy.sql.functions.concat "sqlalchemy.sql.functions.concat")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.concat`](#sqlalchemy.sql.functions.concat "sqlalchemy.sql.functions.concat")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE60]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The ANSI COUNT aggregate function. With no arguments, emits COUNT *.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: ANSI COUNT聚合函数。没有参数时，发出COUNT *。
- en: 'E.g.:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE61]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Executing `stmt` would emit:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`stmt`将发出：
- en: '[PRE62]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '**Class signature**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.count`](#sqlalchemy.sql.functions.count "sqlalchemy.sql.functions.count")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.count`](#sqlalchemy.sql.functions.count "sqlalchemy.sql.functions.count")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE63]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Implement the `CUBE` grouping operation.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`CUBE`分组操作。
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '此函数用作语句的GROUP BY 的一部分，例如[`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by")： '
- en: '[PRE64]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: New in version 1.2.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 新增于版本 1.2。
- en: '**Class signature**'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.cube`](#sqlalchemy.sql.functions.cube "sqlalchemy.sql.functions.cube")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.cube`](#sqlalchemy.sql.functions.cube "sqlalchemy.sql.functions.cube")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE65]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Implement the `cume_dist` hypothetical-set aggregate function.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`cume_dist`假设集聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数必须与[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符一起使用，以提供要操作的排序表达式。
- en: The return type of this function is [`Numeric`](type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric").
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型为[`Numeric`](type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")。
- en: '**Class signature**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.cume_dist`](#sqlalchemy.sql.functions.cume_dist
    "sqlalchemy.sql.functions.cume_dist") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.cume_dist`](#sqlalchemy.sql.functions.cume_dist
    "sqlalchemy.sql.functions.cume_dist")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE66]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The CURRENT_DATE() SQL function.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CURRENT_DATE()`](#sqlalchemy.sql.functions.current_date "sqlalchemy.sql.functions.current_date")
    SQL 函数。'
- en: '**Class signature**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.current_date`](#sqlalchemy.sql.functions.current_date
    "sqlalchemy.sql.functions.current_date") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.current_date`](#sqlalchemy.sql.functions.current_date
    "sqlalchemy.sql.functions.current_date")（[`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")）
- en: '[PRE67]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The CURRENT_TIME() SQL function.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CURRENT_TIME()`](#sqlalchemy.sql.functions.current_time "sqlalchemy.sql.functions.current_time")
    SQL 函数。'
- en: '**Class signature**'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.current_time`](#sqlalchemy.sql.functions.current_time
    "sqlalchemy.sql.functions.current_time") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.current_time`](#sqlalchemy.sql.functions.current_time
    "sqlalchemy.sql.functions.current_time")（[`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")）
- en: '[PRE68]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The CURRENT_TIMESTAMP() SQL function.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CURRENT_TIMESTAMP()`](#sqlalchemy.sql.functions.current_timestamp "sqlalchemy.sql.functions.current_timestamp")
    SQL 函数。'
- en: '**Class signature**'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.current_timestamp`](#sqlalchemy.sql.functions.current_timestamp
    "sqlalchemy.sql.functions.current_timestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.current_timestamp`](#sqlalchemy.sql.functions.current_timestamp
    "sqlalchemy.sql.functions.current_timestamp")（[`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")）
- en: '[PRE69]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The CURRENT_USER() SQL function.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CURRENT_USER()`](#sqlalchemy.sql.functions.current_user "sqlalchemy.sql.functions.current_user")
    SQL 函数。'
- en: '**Class signature**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.current_user`](#sqlalchemy.sql.functions.current_user
    "sqlalchemy.sql.functions.current_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.current_user`](#sqlalchemy.sql.functions.current_user
    "sqlalchemy.sql.functions.current_user")（[`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")）
- en: '[PRE70]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Implement the `dense_rank` hypothetical-set aggregate function.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`dense_rank`假设集聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数必须与[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符一起使用，以提供要操作的排序表达式。
- en: The return type of this function is [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer").
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型为[`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")。
- en: '**Class signature**'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE71]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Implement the `GROUPING SETS` grouping operation.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `GROUPING SETS` 分组操作。
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '此函数用作语句的 GROUP BY 的一部分，例如 [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
- en: '[PRE72]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In order to group by multiple sets, use the [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按多个集合进行分组，请使用 [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") 构造：
- en: '[PRE73]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: New in version 1.2.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新增内容。
- en: '**Class signature**'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.grouping_sets`](#sqlalchemy.sql.functions.grouping_sets
    "sqlalchemy.sql.functions.grouping_sets") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.grouping_sets`](#sqlalchemy.sql.functions.grouping_sets
    "sqlalchemy.sql.functions.grouping_sets")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE74]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The localtime() SQL function.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: localtime() SQL 函数。
- en: '**Class signature**'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.localtime`](#sqlalchemy.sql.functions.localtime
    "sqlalchemy.sql.functions.localtime") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.localtime`](#sqlalchemy.sql.functions.localtime
    "sqlalchemy.sql.functions.localtime")（[`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")）
- en: '[PRE75]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The localtimestamp() SQL function.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: localtimestamp() SQL 函数。
- en: '**Class signature**'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.localtimestamp`](#sqlalchemy.sql.functions.localtimestamp
    "sqlalchemy.sql.functions.localtimestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.localtimestamp`](#sqlalchemy.sql.functions.localtimestamp
    "sqlalchemy.sql.functions.localtimestamp")（[`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")）
- en: '[PRE76]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The SQL MAX() aggregate function.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: SQL MAX() 聚合函数。
- en: '**Class signature**'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.max`](#sqlalchemy.sql.functions.max "sqlalchemy.sql.functions.max")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.max`](#sqlalchemy.sql.functions.max "sqlalchemy.sql.functions.max")（`sqlalchemy.sql.functions.ReturnTypeFromArgs`）
- en: '[PRE77]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The SQL MIN() aggregate function.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: SQL MIN() 聚合函数。
- en: '**Class signature**'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.min`](#sqlalchemy.sql.functions.min "sqlalchemy.sql.functions.min")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.min`](#sqlalchemy.sql.functions.min "sqlalchemy.sql.functions.min")（`sqlalchemy.sql.functions.ReturnTypeFromArgs`）
- en: '[PRE78]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Implement the `mode` ordered-set aggregate function.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `mode` 排序集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 必须与 [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") 修改器一起使用，以提供要操作的排序表达式。
- en: The return type of this function is the same as the sort expression.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型与排序表达式相同。
- en: '**Class signature**'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.mode`](#sqlalchemy.sql.functions.mode "sqlalchemy.sql.functions.mode")
    (`sqlalchemy.sql.functions.OrderedSetAgg`)
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.mode`](#sqlalchemy.sql.functions.mode "sqlalchemy.sql.functions.mode")（`sqlalchemy.sql.functions.OrderedSetAgg`）
- en: '[PRE79]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Represent the ‘next value’, given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") as its single argument.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 表示“下一个值”，给定 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    作为其唯一参数。
- en: Compiles into the appropriate function on each backend, or will raise NotImplementedError
    if used on a backend that does not provide support for sequences.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 编译为每个后端的适当函数，或者如果在不提供序列支持的后端上使用，则会引发 NotImplementedError。
- en: '**Class signature**'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.next_value`](#sqlalchemy.sql.functions.next_value
    "sqlalchemy.sql.functions.next_value") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.next_value`](#sqlalchemy.sql.functions.next_value
    "sqlalchemy.sql.functions.next_value")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE80]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The SQL now() datetime function.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: SQL的now()日期时间函数。
- en: SQLAlchemy dialects will usually render this particular function in a backend-specific
    way, such as rendering it as `CURRENT_TIMESTAMP`.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy方言通常会以特定于后端的方式呈现此特定函数，例如将其呈现为`CURRENT_TIMESTAMP`。
- en: '**Class signature**'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.now`](#sqlalchemy.sql.functions.now "sqlalchemy.sql.functions.now")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.now`](#sqlalchemy.sql.functions.now "sqlalchemy.sql.functions.now")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE81]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Implement the `percent_rank` hypothetical-set aggregate function.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`percent_rank`假设集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符来提供要操作的排序表达式。
- en: The return type of this function is [`Numeric`](type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric").
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的返回类型是[`Numeric`](type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")。
- en: '**Class signature**'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.percent_rank`](#sqlalchemy.sql.functions.percent_rank
    "sqlalchemy.sql.functions.percent_rank") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.percent_rank`](#sqlalchemy.sql.functions.percent_rank
    "sqlalchemy.sql.functions.percent_rank")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE82]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Implement the `percentile_cont` ordered-set aggregate function.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`percentile_cont`有序集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符来提供要操作的排序表达式。
- en: The return type of this function is the same as the sort expression, or if the
    arguments are an array, an [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    of the sort expression’s type.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的返回类型与排序表达式相同，或者如果参数是一个数组，则返回排序表达式类型的[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")。
- en: '**Class signature**'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont") (`sqlalchemy.sql.functions.OrderedSetAgg`)
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")（`sqlalchemy.sql.functions.OrderedSetAgg`）
- en: '[PRE83]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Implement the `percentile_disc` ordered-set aggregate function.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`percentile_disc`有序集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符来提供要操作的排序表达式。
- en: The return type of this function is the same as the sort expression, or if the
    arguments are an array, an [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    of the sort expression’s type.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的返回类型与排序表达式相同，或者如果参数是一个数组，则返回排序表达式类型的[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")。
- en: '**Class signature**'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.percentile_disc`](#sqlalchemy.sql.functions.percentile_disc
    "sqlalchemy.sql.functions.percentile_disc") (`sqlalchemy.sql.functions.OrderedSetAgg`)
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.percentile_disc`](#sqlalchemy.sql.functions.percentile_disc
    "sqlalchemy.sql.functions.percentile_disc")（`sqlalchemy.sql.functions.OrderedSetAgg`）
- en: '[PRE84]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The RANDOM() SQL function.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: RANDOM() SQL函数。
- en: '**Class signature**'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.random`](#sqlalchemy.sql.functions.random "sqlalchemy.sql.functions.random")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.random`](#sqlalchemy.sql.functions.random "sqlalchemy.sql.functions.random")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE85]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Implement the `rank` hypothetical-set aggregate function.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`rank`虚拟集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数必须与[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符一起使用，以提供要操作的排序表达式。
- en: The return type of this function is [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer").
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型为[`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")。
- en: '**Class signature**'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.rank`](#sqlalchemy.sql.functions.rank "sqlalchemy.sql.functions.rank")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.rank`](#sqlalchemy.sql.functions.rank "sqlalchemy.sql.functions.rank")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE86]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Implement the `ROLLUP` grouping operation.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ROLLUP`分组操作。
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '此函数用作语句的GROUP BY的一部分，例如[`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
- en: '[PRE87]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: New in version 1.2.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.2中添加。
- en: '**Class signature**'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.rollup`](#sqlalchemy.sql.functions.rollup "sqlalchemy.sql.functions.rollup")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.rollup`](#sqlalchemy.sql.functions.rollup "sqlalchemy.sql.functions.rollup")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE88]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The SESSION_USER() SQL function.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: SESSION_USER() SQL函数。
- en: '**Class signature**'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.session_user`](#sqlalchemy.sql.functions.session_user
    "sqlalchemy.sql.functions.session_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.session_user`](#sqlalchemy.sql.functions.session_user
    "sqlalchemy.sql.functions.session_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: '[PRE89]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The SQL SUM() aggregate function.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: SQL的SUM()聚合函数。
- en: '**Class signature**'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.sum`](#sqlalchemy.sql.functions.sum "sqlalchemy.sql.functions.sum")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.sum`](#sqlalchemy.sql.functions.sum "sqlalchemy.sql.functions.sum")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
- en: '[PRE90]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The SYSDATE() SQL function.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: SYSDATE() SQL函数。
- en: '**Class signature**'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.sysdate`](#sqlalchemy.sql.functions.sysdate
    "sqlalchemy.sql.functions.sysdate") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.sysdate`](#sqlalchemy.sql.functions.sysdate "sqlalchemy.sql.functions.sysdate")
    ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: '[PRE91]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The USER() SQL function.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: USER() SQL函数。
- en: '**Class signature**'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.user`](#sqlalchemy.sql.functions.user "sqlalchemy.sql.functions.user")
    ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.user`](#sqlalchemy.sql.functions.user "sqlalchemy.sql.functions.user")
    ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: Function API
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数API
- en: The base API for SQL functions, which provides for the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace as well as classes that may be used
    for extensibility.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: SQL函数的基本API，提供了[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")命名空间以及可用于可扩展性的类。
- en: '| Object Name | Description |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AnsiFunction](#sqlalchemy.sql.functions.AnsiFunction) | Define a function
    in “ansi” format, which doesn’t render parenthesis. |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| [AnsiFunction](#sqlalchemy.sql.functions.AnsiFunction) | 定义以“ansi”格式编写的函数，不渲染括号。
    |'
- en: '| [Function](#sqlalchemy.sql.functions.Function) | Describe a named SQL function.
    |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| [Function](#sqlalchemy.sql.functions.Function) | 描述一个命名的SQL函数。 |'
- en: '| [FunctionElement](#sqlalchemy.sql.functions.FunctionElement) | Base for SQL
    function-oriented constructs. |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| [FunctionElement](#sqlalchemy.sql.functions.FunctionElement) | 面向 SQL 函数构建的基类。
    |'
- en: '| [GenericFunction](#sqlalchemy.sql.functions.GenericFunction) | Define a ‘generic’
    function. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| [GenericFunction](#sqlalchemy.sql.functions.GenericFunction) | 定义一个“通用”函数。
    |'
- en: '| [register_function](#sqlalchemy.sql.functions.register_function)(identifier,
    fn[, package]) | Associate a callable with a particular func. name. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| [register_function](#sqlalchemy.sql.functions.register_function)(identifier,
    fn[, package]) | 将可调用对象与特定的 func. 名称关联起来。 |'
- en: '[PRE92]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Define a function in “ansi” format, which doesn’t render parenthesis.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 在“ansi”格式中定义一个不渲染括号的函数。
- en: '**Class signature**'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE93]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Describe a named SQL function.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 描述一个命名的 SQL 函数。
- en: The [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    object is typically generated from the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generation object.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    对象通常是从 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    生成对象生成的。'
- en: 'Parameters:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*clauses` – list of column expressions that form the arguments of the SQL
    function call.'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*clauses` – 形成 SQL 函数调用参数的列表达式列表。'
- en: '`type_` – optional [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") datatype object that will be used as the return
    value of the column expression generated by this function call.'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 可选的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    数据类型对象，将用作由此函数调用生成的列表达式的返回值。'
- en: '`packagenames` –'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packagenames` –'
- en: 'a string which indicates package prefix names to be prepended to the function
    name when the SQL is generated. The [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generator creates these when it is called using
    dotted format, e.g.:'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符串，指示在生成 SQL 时要在函数名称之前添加的包前缀名称。当以点格式调用 [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 生成器时，会创建这些内容，例如：
- en: '[PRE94]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: See also
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '[处理 SQL 函数](../tutorial/data_select.html#tutorial-functions) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - namespace which produces registered or ad-hoc [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - 产生注册或临时 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    实例的命名空间。'
- en: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - allows creation of registered function types.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - 允许创建已注册的函数类型。'
- en: '**Members**'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.functions.Function.__init__)'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.functions.Function.__init__)'
- en: '**Class signature**'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") ([`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"))
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    ([`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"))
- en: '[PRE95]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Construct a [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function").
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")。
- en: The [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    construct is normally used to construct new [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    结构通常用于构建新的 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    实例。'
- en: '[PRE96]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Base for SQL function-oriented constructs.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 面向 SQL 函数构建的基类。
- en: This is a [generic type](https://peps.python.org/pep-0484/#generics), meaning
    that type checkers and IDEs can be instructed on the types to expect in a [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") for this function. See [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") for an example of how this is done.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个[通用类型](https://peps.python.org/pep-0484/#generics)，意味着类型检查器和集成开发环境可以指示在此函数的
    [`Result`](connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    中期望的类型。查看 [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    以了解如何执行此操作的示例。
- en: See also
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SQL 函数](../tutorial/data_select.html#tutorial-functions) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    - named SQL function.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    - 命名的 SQL 函数。'
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - namespace which produces registered or ad-hoc [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - 生成注册或临时的 [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    实例的命名空间。'
- en: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - allows creation of registered function types.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - 允许创建注册的函数类型。'
- en: '**Members**'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.functions.FunctionElement.__init__), [alias()](#sqlalchemy.sql.functions.FunctionElement.alias),
    [as_comparison()](#sqlalchemy.sql.functions.FunctionElement.as_comparison), [c](#sqlalchemy.sql.functions.FunctionElement.c),
    [clauses](#sqlalchemy.sql.functions.FunctionElement.clauses), [column_valued()](#sqlalchemy.sql.functions.FunctionElement.column_valued),
    [columns](#sqlalchemy.sql.functions.FunctionElement.columns), [entity_namespace](#sqlalchemy.sql.functions.FunctionElement.entity_namespace),
    [exported_columns](#sqlalchemy.sql.functions.FunctionElement.exported_columns),
    [filter()](#sqlalchemy.sql.functions.FunctionElement.filter), [over()](#sqlalchemy.sql.functions.FunctionElement.over),
    [scalar_table_valued()](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued),
    [select()](#sqlalchemy.sql.functions.FunctionElement.select), [self_group()](#sqlalchemy.sql.functions.FunctionElement.self_group),
    [table_valued()](#sqlalchemy.sql.functions.FunctionElement.table_valued), [within_group()](#sqlalchemy.sql.functions.FunctionElement.within_group),
    [within_group_type()](#sqlalchemy.sql.functions.FunctionElement.within_group_type)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.functions.FunctionElement.__init__), [alias()](#sqlalchemy.sql.functions.FunctionElement.alias),
    [as_comparison()](#sqlalchemy.sql.functions.FunctionElement.as_comparison), [c](#sqlalchemy.sql.functions.FunctionElement.c),
    [clauses](#sqlalchemy.sql.functions.FunctionElement.clauses), [column_valued()](#sqlalchemy.sql.functions.FunctionElement.column_valued),
    [columns](#sqlalchemy.sql.functions.FunctionElement.columns), [entity_namespace](#sqlalchemy.sql.functions.FunctionElement.entity_namespace),
    [exported_columns](#sqlalchemy.sql.functions.FunctionElement.exported_columns),
    [filter()](#sqlalchemy.sql.functions.FunctionElement.filter), [over()](#sqlalchemy.sql.functions.FunctionElement.over),
    [scalar_table_valued()](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued),
    [select()](#sqlalchemy.sql.functions.FunctionElement.select), [self_group()](#sqlalchemy.sql.functions.FunctionElement.self_group),
    [table_valued()](#sqlalchemy.sql.functions.FunctionElement.table_valued), [within_group()](#sqlalchemy.sql.functions.FunctionElement.within_group),
    [within_group_type()](#sqlalchemy.sql.functions.FunctionElement.within_group_type)'
- en: '**Class signature**'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") ([`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), [`sqlalchemy.sql.expression.FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), `sqlalchemy.sql.expression.Generative`)
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") ([`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), [`sqlalchemy.sql.expression.FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), `sqlalchemy.sql.expression.Generative`)
- en: '[PRE97]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Construct a [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")。
- en: 'Parameters:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*clauses` – list of column expressions that form the arguments of the SQL
    function call.'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*clauses` – 构成 SQL 函数调用参数的列表达式列表。'
- en: '`**kwargs` – additional kwargs are typically consumed by subclasses.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 通常由子类使用的额外 kwargs。'
- en: See also
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
- en: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
- en: '[PRE98]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Produce a [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    construct against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此 [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")
    创建一个 [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    结构。
- en: Tip
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method is part of the mechanism
    by which “table valued” SQL functions are created. However, most use cases are
    covered by higher level methods on [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") including [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued"), and [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued").
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") 方法是创建“表值”SQL函数的机制的一部分。 但是，大多数用例都由
    [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")
    上的更高级方法覆盖，包括 [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 和 [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")。'
- en: This construct wraps the function in a named alias which is suitable for the
    FROM clause, in the style accepted for example by PostgreSQL. A column expression
    is also provided using the special `.column` attribute, which may be used to refer
    to the output of the function as a scalar value in the columns or where clause,
    for a backend such as PostgreSQL.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 此结构将函数包装在一个适合 FROM 子句的命名别名中，其样式符合 PostgreSQL 示例。 还提供了一个列表达式，使用特殊的 `.column`
    属性，该属性可用于在列或 WHERE 子句中引用函数的输出，例如 PostgreSQL 这样的后端中的标量值。
- en: For a full table-valued expression, use the [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method first to establish
    named columns.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完整的表值表达式，首先使用 [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法来建立具名列。
- en: 'e.g.:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE99]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method provides a shortcut
    for the above pattern:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 方法提供了上述模式的快捷方式：'
- en: '[PRE100]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'New in version 1.4.0b2: Added the `.column` accessor'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 新于版本 1.4.0b2：添加了 `.column` 访问器
- en: 'Parameters:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – alias name, will be rendered as `AS <name>` in the FROM clause'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 别名，将在 FROM 子句中呈现为 `AS <name>`'
- en: '`joins_implicitly` –'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joins_implicitly` –'
- en: when True, the table valued function may be used in the FROM clause without
    any explicit JOIN to other tables in the SQL query, and no “cartesian product”
    warning will be generated. May be useful for SQL functions such as `func.json_each()`.
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，可以在 SQL 查询的 FROM 子句中使用表值函数，而无需对其他表进行显式 JOIN，并且不会生成“笛卡尔积”警告。 对于诸如 `func.json_each()`
    之类的 SQL 函数可能很有用。
- en: New in version 1.4.33.
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新于版本 1.4.33。
- en: See also
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
- en: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued")'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued")'
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
- en: '[PRE101]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Interpret this expression as a boolean comparison between two values.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 将此表达式解释为两个值之间的布尔比较。
- en: This method is used for an ORM use case described at [Custom operators based
    on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function).
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于描述ORM用例的[基于SQL函数的自定义运算符](../orm/join_conditions.html#relationship-custom-operator-sql-function)。
- en: 'A hypothetical SQL function “is_equal()” which compares to values for equality
    would be written in the Core expression language as:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 一个假设的比较两个值是否相等的SQL函数“is_equal()”将在Core表达式语言中编写为：
- en: '[PRE102]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'If “is_equal()” above is comparing “a” and “b” for equality, the [`FunctionElement.as_comparison()`](#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison") method would be invoked
    as:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上述的“is_equal()”比较的是“a”和“b”的相等性，那么[`FunctionElement.as_comparison()`](#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison")方法将被调用如下：
- en: '[PRE103]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Where above, the integer value “1” refers to the first argument of the “is_equal()”
    function and the integer value “2” refers to the second.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，整数值“1”指的是“is_equal()”函数的第一个参数，整数值“2”指的是第二个参数。
- en: 'This would create a [`BinaryExpression`](sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") that is equivalent to:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个等同于的[`BinaryExpression`](sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")：
- en: '[PRE104]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: However, at the SQL level it would still render as “is_equal(‘a’, ‘b’)”.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在SQL级别上，它仍然呈现为“is_equal('a', 'b')”。
- en: The ORM, when it loads a related object or collection, needs to be able to manipulate
    the “left” and “right” sides of the ON clause of a JOIN expression. The purpose
    of this method is to provide a SQL function construct that can also supply this
    information to the ORM, when used with the [`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") parameter. The return value is a containment object
    called `FunctionAsBinary`.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 当ORM加载相关对象或集合时，需要能够操作JOIN表达式的ON子句的“左”和“右”侧。此方法的目的是在使用[`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")参数时，为ORM提供一个也可以向其提供此信息的SQL函数构造，返回值是一个名为`FunctionAsBinary`的包含对象。
- en: 'An ORM example is as follows:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ORM示例如下：
- en: '[PRE105]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Above, the “Venue” class can load descendant “Venue” objects by determining
    if the name of the parent Venue is contained within the start of the hypothetical
    descendant value’s name, e.g. “parent1” would match up to “parent1/child1”, but
    not to “parent2/child1”.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，“Venue”类可以通过确定父级Venue的名称是否包含在假想后代值的名称的开头来加载后代“Venue”对象，例如，“parent1”将匹配到“parent1/child1”，但不会匹配到“parent2/child1”。
- en: Possible use cases include the “materialized path” example given above, as well
    as making use of special SQL functions such as geometric functions to create join
    conditions.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的用例包括上面给出的“materialized path”示例，以及利用特殊的SQL函数来创建连接条件，如几何函数。
- en: 'Parameters:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`left_index` – the integer 1-based index of the function argument that serves
    as the “left” side of the expression.'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`left_index` – 函数参数中作为“左侧”表达式的整数索引（从1开始）。'
- en: '`right_index` – the integer 1-based index of the function argument that serves
    as the “right” side of the expression.'
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right_index` – 函数参数中作为“右侧”表达式的整数索引（从1开始）。'
- en: New in version 1.3.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: See also
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Custom operators based on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function)
    - example use within the ORM'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '[基于SQL函数的自定义运算符](../orm/join_conditions.html#relationship-custom-operator-sql-function)
    - 在ORM中的示例用法'
- en: '[PRE106]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: synonym for [`FunctionElement.columns`](#sqlalchemy.sql.functions.FunctionElement.columns
    "sqlalchemy.sql.functions.FunctionElement.columns").
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.columns`](#sqlalchemy.sql.functions.FunctionElement.columns
    "sqlalchemy.sql.functions.FunctionElement.columns")的同义词。'
- en: '[PRE107]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Return the underlying [`ClauseList`](sqlelement.html#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList") which contains the arguments for this
    [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含此[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")参数的[`ClauseList`](sqlelement.html#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList")的基础对象。
- en: '[PRE108]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Return this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")
    as a column expression that selects from itself as a FROM clause.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")作为从自身选择的列表达式返回。
- en: 'E.g.:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE109]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'This is shorthand for:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 这是的简写形式：
- en: '[PRE110]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Parameters:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – optional name to assign to the alias name that’s generated. If omitted,
    a unique anonymizing name is used.'
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 可选的名称，用于分配生成的别名名称。如果省略，将使用唯一的匿名名称。'
- en: '`joins_implicitly` –'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joins_implicitly` -'
- en: when True, the “table” portion of the column valued function may be a member
    of the FROM clause without any explicit JOIN to other tables in the SQL query,
    and no “cartesian product” warning will be generated. May be useful for SQL functions
    such as `func.json_array_elements()`.
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，列值函数的“table”部分可以作为SQL查询中FROM子句的成员，而不需要对其他表进行显式JOIN，并且不会生成“笛卡尔积”警告。 对于诸如`func.json_array_elements()`之类的SQL函数可能有用。
- en: New in version 1.4.46.
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4.46版中的新功能。
- en: See also
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Column Valued Functions - Table Valued Function as a Scalar Column](../tutorial/data_select.html#tutorial-functions-column-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '[列值函数 - 表值函数作为标量列](../tutorial/data_select.html#tutorial-functions-column-valued)
    - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Column Valued Functions](../dialects/postgresql.html#postgresql-column-valued)
    - in the [PostgreSQL](../dialects/postgresql.html) documentation'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '[列值函数](../dialects/postgresql.html#postgresql-column-valued) - 在[PostgreSQL](../dialects/postgresql.html)文档中'
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
- en: '[PRE111]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The set of columns exported by this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")导出的列的集合。
- en: 'This is a placeholder collection that allows the function to be placed in the
    FROM clause of a statement:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个占位符集合，允许将函数放置在语句的FROM子句中：
- en: '[PRE112]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: The above form is a legacy feature that is now superseded by the fully capable
    [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method; see that method
    for details.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 上述形式是一个现在已被完全功能的[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")方法所取代的遗留特性；有关详细信息，请参阅该方法。
- en: See also
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") - generates table-valued
    SQL function expressions.'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") - 生成表值SQL函数表达式。'
- en: '[PRE113]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: overrides FromClause.entity_namespace as functions are generally column expressions
    and not FromClauses.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖FromClause.entity_namespace，因为函数通常是列表达式，而不是FromClauses。
- en: '[PRE114]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Produce a FILTER clause against this function.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 产生针对此函数的 FILTER 子句。
- en: Used against aggregate and window functions, for database backends that support
    the “FILTER” clause.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持“FILTER”子句的数据库后端中的聚合和窗口函数。
- en: 'The expression:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式：
- en: '[PRE116]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'is shorthand for:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 是的简写形式：
- en: '[PRE117]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: See also
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[特殊修饰符WITHIN GROUP，FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`FunctionFilter`](sqlelement.html#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter")'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionFilter`](sqlelement.html#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter")'
- en: '[`funcfilter()`](sqlelement.html#sqlalchemy.sql.expression.funcfilter "sqlalchemy.sql.expression.funcfilter")'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '[`funcfilter()`](sqlelement.html#sqlalchemy.sql.expression.funcfilter "sqlalchemy.sql.expression.funcfilter")'
- en: '[PRE118]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Produce an OVER clause against this function.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 产生针对此函数的 OVER 子句。
- en: Used against aggregate or so-called “window” functions, for database backends
    that support window functions.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持窗口函数的聚合或所谓的“窗口”函数的数据库后端。
- en: 'The expression:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式：
- en: '[PRE119]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'is shorthand for:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 是的简写形式：
- en: '[PRE120]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: See [`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")
    for a full description.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")以获取完整描述。
- en: See also
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '[`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
- en: '[Using Window Functions](../tutorial/data_select.html#tutorial-window-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用窗口函数](../tutorial/data_select.html#tutorial-window-functions) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE121]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Return a column expression that’s against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") as a scalar table-valued expression.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个针对这个[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")的列表达式作为标量表值表达式。
- en: The returned expression is similar to that returned by a single column accessed
    off of a [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") construct, except no
    FROM clause is generated; the function is rendered in the similar way as a scalar
    subquery.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的表达式类似于从[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")构造中访问的单个列返回的表达式，除了不生成FROM子句；该函数以标量子查询的方式呈现。
- en: 'E.g.:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE122]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: New in version 1.4.0b2.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新功能。
- en: See also
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
- en: '[`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")'
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
- en: '[PRE123]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Produce a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对这个[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")的[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造。
- en: 'This is shorthand for:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简写：
- en: '[PRE124]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 子类重写此方法以返回一个“分组”构造，即括号。特别是它被“二元”表达式使用，当它们被放置到更大的表达式中时提供一个围绕自身的分组，以及当它们被放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时，由[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造使用。（请注意，子查询通常应该使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须被命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") 的应用是自动的 - 最终用户代码不应该直接使用这个方法。请注意，SQLAlchemy
    的子句构造考虑了运算符优先级 - 因此在表达式中可能不需要括号，例如，`x OR (y AND z)` - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group")方法只返回自身。'
- en: '[PRE126]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Return a [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") representation of this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") with table-valued expressions added.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")的[`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias")表示，其中添加了表值表达式。
- en: 'e.g.:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE127]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'A WITH ORDINALITY expression may be generated by passing the keyword argument
    “with_ordinality”:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递关键字参数“with_ordinality”可以生成一个WITH ORDINALITY表达式：
- en: '[PRE128]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Parameters:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*expr` – A series of string column names that will be added to the `.c` collection
    of the resulting [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") construct as columns. [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") objects with or without datatypes may also
    be used.'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*expr` – 一系列将作为列添加到结果的[`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias")构造中的字符串列名。也可以使用具有或不具有数据类型的[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")对象。'
- en: '`name` – optional name to assign to the alias name that’s generated. If omitted,
    a unique anonymizing name is used.'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 分配给生成的别名名称的可选名称。如果省略，将使用唯一的匿名化名称。'
- en: '`with_ordinality` – string name that when present results in the `WITH ORDINALITY`
    clause being added to the alias, and the given string name will be added as a
    column to the .c collection of the resulting [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_ordinality` – 当存在时，会将`WITH ORDINALITY`子句添加到别名中，并且给定的字符串名称将作为列添加到结果的[`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias")的`.c`集合中。'
- en: '`joins_implicitly` –'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joins_implicitly` –'
- en: when True, the table valued function may be used in the FROM clause without
    any explicit JOIN to other tables in the SQL query, and no “cartesian product”
    warning will be generated. May be useful for SQL functions such as `func.json_each()`.
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，可以在SQL查询的FROM子句中使用表值函数，而无需对其他表进行显式JOIN，并且不会生成“笛卡尔积”警告。对于诸如`func.json_each()`之类的SQL函数可能很有用。
- en: New in version 1.4.33.
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能在版本1.4.33中引入。
- en: New in version 1.4.0b2.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本1.4.0b2中引入。
- en: See also
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Table-Valued Functions](../dialects/postgresql.html#postgresql-table-valued)
    - in the [PostgreSQL](../dialects/postgresql.html) documentation'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../dialects/postgresql.html#postgresql-table-valued) - 在[PostgreSQL](../dialects/postgresql.html)文档中'
- en: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued") - variant of [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") which delivers the complete
    table valued expression as a scalar column expression'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued") - [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")的变体，将完整的表值表达式作为标量列表达式传递'
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
- en: '[`TableValuedAlias.render_derived()`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") - renders the alias
    using a derived column clause, e.g. `AS name(col1, col2, ...)`'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableValuedAlias.render_derived()`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") - 使用派生列子句呈现别名，例如`AS
    name(col1, col2, ...)`'
- en: '[PRE129]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Produce a WITHIN GROUP (ORDER BY expr) clause against this function.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对此函数的 WITHIN GROUP (ORDER BY expr) 子句。
- en: Used against so-called “ordered set aggregate” and “hypothetical set aggregate”
    functions, including [`percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`rank`](#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank"), [`dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank"), etc.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 用于所谓的“有序集合聚合”和“假设集合聚合”函数，包括[`percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")、[`rank`](#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank")、[`dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank")等。
- en: See [`within_group()`](sqlelement.html#sqlalchemy.sql.expression.within_group
    "sqlalchemy.sql.expression.within_group") for a full description.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 详细描述请参见[`within_group()`](sqlelement.html#sqlalchemy.sql.expression.within_group
    "sqlalchemy.sql.expression.within_group")。
- en: See also
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '[WITHIN GROUP、FILTER特殊修饰符](../tutorial/data_select.html#tutorial-functions-within-group)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE130]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: For types that define their return type as based on the criteria within a WITHIN
    GROUP (ORDER BY) expression, called by the [`WithinGroup`](sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 对于将其返回类型定义为基于 WITHIN GROUP (ORDER BY) 表达式中的条件的类型，通过 [`WithinGroup`](sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") 构造调用。
- en: Returns None by default, in which case the function’s normal `.type` is used.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下返回 None，此时使用函数的普通`.type`。
- en: '[PRE131]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Define a ‘generic’ function.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个“通用”函数。
- en: A generic function is a pre-established [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") class that is instantiated automatically
    when called by name from the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") attribute. Note that calling any name from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") has the effect that a new [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instance is created automatically, given
    that name. The primary use case for defining a [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") class is so that a function of a particular
    name may be given a fixed return type. It can also include custom argument parsing
    schemes as well as additional methods.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数是预先建立的[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")类，在从[`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")属性中按名称调用时自动实例化。请注意，从[`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")调用任何名称都会自动创建一个新的[`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function")实例，给定该名称。定义[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")类的主要用例是为特定名称的函数指定固定的返回类型。它还可以包括自定义参数解析方案以及其他方法。
- en: 'Subclasses of [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") are automatically registered under
    the name of the class. For example, a user-defined function `as_utc()` would be
    available immediately:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")的子类会自动注册在类的名称下。例如，用户定义的函数`as_utc()`将立即可用：'
- en: '[PRE132]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'User-defined generic functions can be organized into packages by specifying
    the “package” attribute when defining [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"). Third party libraries containing
    many functions may want to use this in order to avoid name conflicts with other
    systems. For example, if our `as_utc()` function were part of a package “time”:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的通用函数可以通过在定义[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")时指定“package”属性来组织到包中。许多函数的第三方库可能想要使用此功能，以避免与其他系统的名称冲突。例如，如果我们的
    `as_utc()` 函数是“time”包的一部分：
- en: '[PRE133]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The above function would be available from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") using the package name `time`:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数可以通过[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")来使用，使用包名`time`：
- en: '[PRE134]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'A final option is to allow the function to be accessed from one name in [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") but to render as a different name. The `identifier`
    attribute will override the name used to access the function as loaded from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func"), but will retain the usage of `name` as the
    rendered name:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项是允许从[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")中的一个名称访问该函数，但呈现为不同的名称。
    `identifier` 属性将覆盖从[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")加载时用于访问函数的名称，但将保留使用
    `name` 作为呈现名称的用法：
- en: '[PRE135]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The above function will render as follows:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数将呈现如下：
- en: '[PRE136]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'The name will be rendered as is, however without quoting unless the name contains
    special characters that require quoting. To force quoting on or off for the name,
    use the `quoted_name` construct:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 名称将按原样呈现，但如果名称包含需要引用的特殊字符，则不会引用。要强制对名称进行引用或取消引用，请使用 `quoted_name` 结构：
- en: '[PRE137]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The above function will render as:'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数将呈现为：
- en: '[PRE138]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Type parameters for this class as a [generic type](https://peps.python.org/pep-0484/#generics)
    can be passed and should match the type seen in a [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"). For example:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 此类的类型参数作为 [通用类型](https://peps.python.org/pep-0484/#generics) 可以传递，并且应该与 [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 中看到的类型匹配。例如：
- en: '[PRE139]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The above indicates that the following expression returns a `datetime` object:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 以上表明以下表达式返回一个 `datetime` 对象：
- en: '[PRE140]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'New in version 1.3.13: The [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now recognized for quoting
    when used with the “name” attribute of the object, so that quoting can be forced
    on or off for the function name.'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.3.13 开始：当与对象的“name”属性一起使用时，[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 结构现在被识别为引用，因此可以强制对函数名称进行引用。
- en: '**Class signature**'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") ([`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"))
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") ([`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"))
- en: '[PRE141]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Associate a callable with a particular func. name.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 将可调用对象与特定的函数名称关联起来。
- en: This is normally called by GenericFunction, but is also available by itself
    so that a non-Function construct can be associated with the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") accessor (i.e. CAST, EXTRACT).
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 通常由 GenericFunction 调用，但也可以单独使用，以便将非 Function 结构与[`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")访问器关联起来（例如 CAST、EXTRACT）。
- en: Selected “Known” Functions
  id: totrans-654
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选定的“已知”函数
- en: 'These are [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    implementations for a selected set of common SQL functions that set up the expected
    return type for each function automatically. The are invoked in the same way as
    any other member of the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一组选定的常见 SQL 函数的[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")实现，为每个函数自动设置了预期的返回类型。它们以与[`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")命名空间的任何其他成员相同的方式调用：
- en: '[PRE142]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Note that any name not known to [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generates the function name as is - there is
    no restriction on what SQL functions can be called, known or unknown to SQLAlchemy,
    built-in or user defined. The section here only describes those functions where
    SQLAlchemy already knows what argument and return types are in use.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，任何未知于[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")的名称都会按原样生成函数名称
    - 对于可以调用的 SQL 函数，对 SQLAlchemy 有无所谓是否知道它们，内置或用户定义的没有限制。这里的部分仅描述了 SQLAlchemy 已经知道正在使用什么参数和返回类型的函数。
- en: '| Object Name | Description |'
  id: totrans-658
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [aggregate_strings](#sqlalchemy.sql.functions.aggregate_strings) | Implement
    a generic string aggregation function. |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
  zh: '| [aggregate_strings](#sqlalchemy.sql.functions.aggregate_strings) | 实现一个通用的字符串聚合函数。
    |'
- en: '| [array_agg](#sqlalchemy.sql.functions.array_agg) | Support for the ARRAY_AGG
    function. |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
  zh: '| [array_agg](#sqlalchemy.sql.functions.array_agg) | 支持 ARRAY_AGG 函数。 |'
- en: '| [char_length](#sqlalchemy.sql.functions.char_length) | The CHAR_LENGTH()
    SQL function. |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| [char_length](#sqlalchemy.sql.functions.char_length) | CHAR_LENGTH() SQL
    函数。 |'
- en: '| [coalesce](#sqlalchemy.sql.functions.coalesce) |  |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
  zh: '| [coalesce](#sqlalchemy.sql.functions.coalesce) |  |'
- en: '| [concat](#sqlalchemy.sql.functions.concat) | The SQL CONCAT() function, which
    concatenates strings. |'
  id: totrans-664
  prefs: []
  type: TYPE_TB
  zh: '| [concat](#sqlalchemy.sql.functions.concat) | SQL CONCAT() 函数，用于连接字符串。 |'
- en: '| [count](#sqlalchemy.sql.functions.count) | The ANSI COUNT aggregate function.
    With no arguments, emits COUNT *. |'
  id: totrans-665
  prefs: []
  type: TYPE_TB
  zh: '| [count](#sqlalchemy.sql.functions.count) | ANSI COUNT 聚合函数。没有参数时，发出 COUNT
    *。 |'
- en: '| [cube](#sqlalchemy.sql.functions.cube) | Implement the `CUBE` grouping operation.
    |'
  id: totrans-666
  prefs: []
  type: TYPE_TB
  zh: '| [cube](#sqlalchemy.sql.functions.cube) | 实现`CUBE`分组操作。 |'
- en: '| [cume_dist](#sqlalchemy.sql.functions.cume_dist) | Implement the `cume_dist`
    hypothetical-set aggregate function. |'
  id: totrans-667
  prefs: []
  type: TYPE_TB
  zh: '| [cume_dist](#sqlalchemy.sql.functions.cume_dist) | 实现`cume_dist`假设集聚合函数。
    |'
- en: '| [current_date](#sqlalchemy.sql.functions.current_date) | The CURRENT_DATE()
    SQL function. |'
  id: totrans-668
  prefs: []
  type: TYPE_TB
  zh: '| [current_date](#sqlalchemy.sql.functions.current_date) | CURRENT_DATE() SQL
    函数。 |'
- en: '| [current_time](#sqlalchemy.sql.functions.current_time) | The CURRENT_TIME()
    SQL function. |'
  id: totrans-669
  prefs: []
  type: TYPE_TB
  zh: '| [current_time](#sqlalchemy.sql.functions.current_time) | CURRENT_TIME() SQL
    函数。 |'
- en: '| [current_timestamp](#sqlalchemy.sql.functions.current_timestamp) | The CURRENT_TIMESTAMP()
    SQL function. |'
  id: totrans-670
  prefs: []
  type: TYPE_TB
  zh: '| [current_timestamp](#sqlalchemy.sql.functions.current_timestamp) | CURRENT_TIMESTAMP()
    SQL 函数。 |'
- en: '| [current_user](#sqlalchemy.sql.functions.current_user) | The CURRENT_USER()
    SQL function. |'
  id: totrans-671
  prefs: []
  type: TYPE_TB
  zh: '| [current_user](#sqlalchemy.sql.functions.current_user) | CURRENT_USER() SQL
    函数。 |'
- en: '| [dense_rank](#sqlalchemy.sql.functions.dense_rank) | Implement the `dense_rank`
    hypothetical-set aggregate function. |'
  id: totrans-672
  prefs: []
  type: TYPE_TB
  zh: '| [dense_rank](#sqlalchemy.sql.functions.dense_rank) | 实现`dense_rank`假设集聚合函数。
    |'
- en: '| [grouping_sets](#sqlalchemy.sql.functions.grouping_sets) | Implement the
    `GROUPING SETS` grouping operation. |'
  id: totrans-673
  prefs: []
  type: TYPE_TB
  zh: '| [grouping_sets](#sqlalchemy.sql.functions.grouping_sets) | 实现`GROUPING SETS`分组操作。
    |'
- en: '| [localtime](#sqlalchemy.sql.functions.localtime) | The localtime() SQL function.
    |'
  id: totrans-674
  prefs: []
  type: TYPE_TB
  zh: '| [localtime](#sqlalchemy.sql.functions.localtime) | localtime() SQL 函数。 |'
- en: '| [localtimestamp](#sqlalchemy.sql.functions.localtimestamp) | The localtimestamp()
    SQL function. |'
  id: totrans-675
  prefs: []
  type: TYPE_TB
  zh: '| [localtimestamp](#sqlalchemy.sql.functions.localtimestamp) | localtimestamp()
    SQL 函数。 |'
- en: '| [max](#sqlalchemy.sql.functions.max) | The SQL MAX() aggregate function.
    |'
  id: totrans-676
  prefs: []
  type: TYPE_TB
  zh: '| [max](#sqlalchemy.sql.functions.max) | SQL MAX() 聚合函数。 |'
- en: '| [min](#sqlalchemy.sql.functions.min) | The SQL MIN() aggregate function.
    |'
  id: totrans-677
  prefs: []
  type: TYPE_TB
  zh: '| [min](#sqlalchemy.sql.functions.min) | SQL MIN() 聚合函数。 |'
- en: '| [mode](#sqlalchemy.sql.functions.mode) | Implement the `mode` ordered-set
    aggregate function. |'
  id: totrans-678
  prefs: []
  type: TYPE_TB
  zh: '| [mode](#sqlalchemy.sql.functions.mode) | 实现`mode`有序集聚合函数。 |'
- en: '| [next_value](#sqlalchemy.sql.functions.next_value) | Represent the ‘next
    value’, given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    as its single argument. |'
  id: totrans-679
  prefs: []
  type: TYPE_TB
  zh: '| [next_value](#sqlalchemy.sql.functions.next_value) | 代表“下一个值”，以[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")作为其唯一参数。 |'
- en: '| [now](#sqlalchemy.sql.functions.now) | The SQL now() datetime function. |'
  id: totrans-680
  prefs: []
  type: TYPE_TB
  zh: '| [now](#sqlalchemy.sql.functions.now) | SQL now() 日期时间函数。 |'
- en: '| [percent_rank](#sqlalchemy.sql.functions.percent_rank) | Implement the `percent_rank`
    hypothetical-set aggregate function. |'
  id: totrans-681
  prefs: []
  type: TYPE_TB
  zh: '| [percent_rank](#sqlalchemy.sql.functions.percent_rank) | 实现`percent_rank`假设集聚合函数。
    |'
- en: '| [percentile_cont](#sqlalchemy.sql.functions.percentile_cont) | Implement
    the `percentile_cont` ordered-set aggregate function. |'
  id: totrans-682
  prefs: []
  type: TYPE_TB
  zh: '| [percentile_cont](#sqlalchemy.sql.functions.percentile_cont) | 实现`percentile_cont`有序集聚合函数。
    |'
- en: '| [percentile_disc](#sqlalchemy.sql.functions.percentile_disc) | Implement
    the `percentile_disc` ordered-set aggregate function. |'
  id: totrans-683
  prefs: []
  type: TYPE_TB
  zh: '| [percentile_disc](#sqlalchemy.sql.functions.percentile_disc) | 实现`percentile_disc`有序集聚合函数。
    |'
- en: '| [random](#sqlalchemy.sql.functions.random) | The RANDOM() SQL function. |'
  id: totrans-684
  prefs: []
  type: TYPE_TB
  zh: '| [random](#sqlalchemy.sql.functions.random) | RANDOM() SQL 函数。 |'
- en: '| [rank](#sqlalchemy.sql.functions.rank) | Implement the `rank` hypothetical-set
    aggregate function. |'
  id: totrans-685
  prefs: []
  type: TYPE_TB
  zh: '| [rank](#sqlalchemy.sql.functions.rank) | 实现`rank`假设集聚合函数。 |'
- en: '| [rollup](#sqlalchemy.sql.functions.rollup) | Implement the `ROLLUP` grouping
    operation. |'
  id: totrans-686
  prefs: []
  type: TYPE_TB
  zh: '| [rollup](#sqlalchemy.sql.functions.rollup) | 实现`ROLLUP`分组操作。 |'
- en: '| [session_user](#sqlalchemy.sql.functions.session_user) | The SESSION_USER()
    SQL function. |'
  id: totrans-687
  prefs: []
  type: TYPE_TB
  zh: '| [session_user](#sqlalchemy.sql.functions.session_user) | SESSION_USER() SQL
    函数。 |'
- en: '| [sum](#sqlalchemy.sql.functions.sum) | The SQL SUM() aggregate function.
    |'
  id: totrans-688
  prefs: []
  type: TYPE_TB
  zh: '| [sum](#sqlalchemy.sql.functions.sum) | SQL SUM() 聚合函数。 |'
- en: '| [sysdate](#sqlalchemy.sql.functions.sysdate) | The SYSDATE() SQL function.
    |'
  id: totrans-689
  prefs: []
  type: TYPE_TB
  zh: '| [sysdate](#sqlalchemy.sql.functions.sysdate) | SYSDATE() SQL 函数。 |'
- en: '| [user](#sqlalchemy.sql.functions.user) | The USER() SQL function. |'
  id: totrans-690
  prefs: []
  type: TYPE_TB
  zh: '| [user](#sqlalchemy.sql.functions.user) | USER() SQL 函数。 |'
- en: '[PRE143]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Implement a generic string aggregation function.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个通用的字符串聚合函数。
- en: This function will concatenate non-null values into a string and separate the
    values by a delimiter.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将非空值连接为一个字符串，并用分隔符分隔值。
- en: This function is compiled on a per-backend basis, into functions such as `group_concat()`,
    `string_agg()`, or `LISTAGG()`.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数根据每个后端编译为`group_concat()`、`string_agg()`或`LISTAGG()`等函数。
- en: 'e.g. Example usage with delimiter ‘.’:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用分隔符‘.’的示例用法：
- en: '[PRE144]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: The return type of this function is [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String").
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型为[`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")。
- en: '**Class signature**'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.aggregate_strings`](#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.aggregate_strings`](#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）。
- en: '[PRE145]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Support for the ARRAY_AGG function.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 支持ARRAY_AGG函数。
- en: The `func.array_agg(expr)` construct returns an expression of type [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY").
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '`func.array_agg(expr)`构造返回类型为[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的表达式。'
- en: 'e.g.:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE146]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: See also
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") - PostgreSQL-specific version that
    returns [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY"), which has PG-specific operators added.'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") - 返回[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")的PostgreSQL特定版本，其中添加了PG特定运算符。'
- en: '**Class signature**'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.array_agg`](#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.array_agg`](#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）。
- en: '[PRE147]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: The CHAR_LENGTH() SQL function.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: SQL函数`CHAR_LENGTH()`.
- en: '**Class signature**'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.char_length`](#sqlalchemy.sql.functions.char_length
    "sqlalchemy.sql.functions.char_length") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.char_length`](#sqlalchemy.sql.functions.char_length
    "sqlalchemy.sql.functions.char_length")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）。
- en: '[PRE148]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '**Class signature**'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.coalesce`](#sqlalchemy.sql.functions.coalesce
    "sqlalchemy.sql.functions.coalesce") (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.coalesce`](#sqlalchemy.sql.functions.coalesce "sqlalchemy.sql.functions.coalesce")（`sqlalchemy.sql.functions.ReturnTypeFromArgs`）。
- en: '[PRE149]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: The SQL CONCAT() function, which concatenates strings.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: SQL CONCAT()函数，用于连接字符串。
- en: 'E.g.:'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE150]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'String concatenation in SQLAlchemy is more commonly available using the Python
    `+` operator with string datatypes, which will render a backend-specific concatenation
    operator, such as :'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy中，使用Python的`+`运算符与字符串数据类型更常见，这将呈现特定于后端的连接运算符，例如：
- en: '[PRE151]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '**Class signature**'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.concat`](#sqlalchemy.sql.functions.concat "sqlalchemy.sql.functions.concat")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.concat`](#sqlalchemy.sql.functions.concat "sqlalchemy.sql.functions.concat")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）。
- en: '[PRE152]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: The ANSI COUNT aggregate function. With no arguments, emits COUNT *.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: ANSI COUNT聚合函数。没有参数时，发出COUNT *。
- en: 'E.g.:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE153]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Executing `stmt` would emit:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`stmt`将发出：
- en: '[PRE154]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '**Class signature**'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.count`](#sqlalchemy.sql.functions.count "sqlalchemy.sql.functions.count")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.count`](#sqlalchemy.sql.functions.count "sqlalchemy.sql.functions.count")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）。
- en: '[PRE155]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Implement the `CUBE` grouping operation.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`CUBE`分组操作。
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用作语句的 GROUP BY 的一部分，例如 [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by")：
- en: '[PRE156]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: New in version 1.2.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中新增。
- en: '**Class signature**'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.cube`](#sqlalchemy.sql.functions.cube "sqlalchemy.sql.functions.cube")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.functions.cube`](#sqlalchemy.sql.functions.cube "sqlalchemy.sql.functions.cube")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE157]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Implement the `cume_dist` hypothetical-set aggregate function.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `cume_dist` 假设集聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用 [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") 修饰符来提供一个排序表达式以进行操作。
- en: The return type of this function is [`Numeric`](type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric").
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的返回类型是 [`Numeric`](type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")。
- en: '**Class signature**'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.cume_dist`](#sqlalchemy.sql.functions.cume_dist
    "sqlalchemy.sql.functions.cume_dist") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.functions.cume_dist`](#sqlalchemy.sql.functions.cume_dist
    "sqlalchemy.sql.functions.cume_dist") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE158]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: The CURRENT_DATE() SQL function.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: CURRENT_DATE() SQL 函数。
- en: '**Class signature**'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.current_date`](#sqlalchemy.sql.functions.current_date
    "sqlalchemy.sql.functions.current_date") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.functions.current_date`](#sqlalchemy.sql.functions.current_date
    "sqlalchemy.sql.functions.current_date") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: '[PRE159]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: The CURRENT_TIME() SQL function.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: CURRENT_TIME() SQL 函数。
- en: '**Class signature**'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.current_time`](#sqlalchemy.sql.functions.current_time
    "sqlalchemy.sql.functions.current_time") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.functions.current_time`](#sqlalchemy.sql.functions.current_time
    "sqlalchemy.sql.functions.current_time") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: '[PRE160]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: The CURRENT_TIMESTAMP() SQL function.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: CURRENT_TIMESTAMP() SQL 函数。
- en: '**Class signature**'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.current_timestamp`](#sqlalchemy.sql.functions.current_timestamp
    "sqlalchemy.sql.functions.current_timestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.functions.current_timestamp`](#sqlalchemy.sql.functions.current_timestamp
    "sqlalchemy.sql.functions.current_timestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: '[PRE161]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: The CURRENT_USER() SQL function.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: CURRENT_USER() SQL 函数。
- en: '**Class signature**'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.current_user`](#sqlalchemy.sql.functions.current_user
    "sqlalchemy.sql.functions.current_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.functions.current_user`](#sqlalchemy.sql.functions.current_user
    "sqlalchemy.sql.functions.current_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: '[PRE162]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Implement the `dense_rank` hypothetical-set aggregate function.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `dense_rank` 假设集聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用 [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") 修饰符来提供一个排序表达式以进行操作。
- en: The return type of this function is [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer").
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的返回类型是 [`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")。
- en: '**Class signature**'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE163]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Implement the `GROUPING SETS` grouping operation.
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `GROUPING SETS` 分组操作。
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用作语句的 GROUP BY 的一部分，例如 [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by")：
- en: '[PRE164]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'In order to group by multiple sets, use the [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 要按多个集合分组，请使用[`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")结构：
- en: '[PRE165]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: New in version 1.2.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: '**Class signature**'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.grouping_sets`](#sqlalchemy.sql.functions.grouping_sets
    "sqlalchemy.sql.functions.grouping_sets") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.grouping_sets`](#sqlalchemy.sql.functions.grouping_sets
    "sqlalchemy.sql.functions.grouping_sets")（[`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction")）
- en: '[PRE166]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: The localtime() SQL function.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: localtime() SQL 函数。
- en: '**Class signature**'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.localtime`](#sqlalchemy.sql.functions.localtime
    "sqlalchemy.sql.functions.localtime") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.localtime`](#sqlalchemy.sql.functions.localtime
    "sqlalchemy.sql.functions.localtime")（[`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")）
- en: '[PRE167]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: The localtimestamp() SQL function.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: localtimestamp() SQL 函数。
- en: '**Class signature**'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.localtimestamp`](#sqlalchemy.sql.functions.localtimestamp
    "sqlalchemy.sql.functions.localtimestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.localtimestamp`](#sqlalchemy.sql.functions.localtimestamp
    "sqlalchemy.sql.functions.localtimestamp")（[`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction")）
- en: '[PRE168]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: The SQL MAX() aggregate function.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: SQL MAX() 聚合函数。
- en: '**Class signature**'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.max`](#sqlalchemy.sql.functions.max "sqlalchemy.sql.functions.max")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.max`](#sqlalchemy.sql.functions.max "sqlalchemy.sql.functions.max")（`sqlalchemy.sql.functions.ReturnTypeFromArgs`）
- en: '[PRE169]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: The SQL MIN() aggregate function.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: SQL MIN() 聚合函数。
- en: '**Class signature**'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.min`](#sqlalchemy.sql.functions.min "sqlalchemy.sql.functions.min")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.min`](#sqlalchemy.sql.functions.min "sqlalchemy.sql.functions.min")（`sqlalchemy.sql.functions.ReturnTypeFromArgs`）
- en: '[PRE170]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Implement the `mode` ordered-set aggregate function.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `mode` 有序集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数必须与[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符一起使用，以提供要操作的排序表达式。
- en: The return type of this function is the same as the sort expression.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型与排序表达式相同。
- en: '**Class signature**'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.mode`](#sqlalchemy.sql.functions.mode "sqlalchemy.sql.functions.mode")
    (`sqlalchemy.sql.functions.OrderedSetAgg`)
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.mode`](#sqlalchemy.sql.functions.mode "sqlalchemy.sql.functions.mode")（`sqlalchemy.sql.functions.OrderedSetAgg`）
- en: '[PRE171]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Represent the ‘next value’, given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") as its single argument.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 代表给定[`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")作为其唯一参数的‘下一个值’。
- en: Compiles into the appropriate function on each backend, or will raise NotImplementedError
    if used on a backend that does not provide support for sequences.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个后端编译成适当的函数，或者如果在不提供序列支持的后端上使用则会引发 NotImplementedError。
- en: '**Class signature**'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.next_value`](#sqlalchemy.sql.functions.next_value
    "sqlalchemy.sql.functions.next_value") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.next_value`](#sqlalchemy.sql.functions.next_value
    "sqlalchemy.sql.functions.next_value")([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE172]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: The SQL now() datetime function.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: SQL现在()日期时间函数。
- en: SQLAlchemy dialects will usually render this particular function in a backend-specific
    way, such as rendering it as `CURRENT_TIMESTAMP`.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy方言通常以特定于后端的方式呈现此特定函数，例如将其呈现为`CURRENT_TIMESTAMP`。
- en: '**Class signature**'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.now`](#sqlalchemy.sql.functions.now "sqlalchemy.sql.functions.now")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.now`](#sqlalchemy.sql.functions.now "sqlalchemy.sql.functions.now")([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE173]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Implement the `percent_rank` hypothetical-set aggregate function.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`percent_rank`假设集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符来提供要操作的排序表达式。
- en: The return type of this function is [`Numeric`](type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric").
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型是[`Numeric`](type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")。
- en: '**Class signature**'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.percent_rank`](#sqlalchemy.sql.functions.percent_rank
    "sqlalchemy.sql.functions.percent_rank") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.percent_rank`](#sqlalchemy.sql.functions.percent_rank
    "sqlalchemy.sql.functions.percent_rank")([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE174]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Implement the `percentile_cont` ordered-set aggregate function.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`percentile_cont`有序集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符来提供要操作的排序表达式。
- en: The return type of this function is the same as the sort expression, or if the
    arguments are an array, an [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    of the sort expression’s type.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型与排序表达式相同，或者如果参数是数组，则为排序表达式类型的[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")。
- en: '**Class signature**'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont") (`sqlalchemy.sql.functions.OrderedSetAgg`)
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")(`sqlalchemy.sql.functions.OrderedSetAgg`)
- en: '[PRE175]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Implement the `percentile_disc` ordered-set aggregate function.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`percentile_disc`有序集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用[`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")修饰符来提供要操作的排序表达式。
- en: The return type of this function is the same as the sort expression, or if the
    arguments are an array, an [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    of the sort expression’s type.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型与排序表达式相同，或者如果参数是数组，则为排序表达式类型的[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")。
- en: '**Class signature**'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.percentile_disc`](#sqlalchemy.sql.functions.percentile_disc
    "sqlalchemy.sql.functions.percentile_disc") (`sqlalchemy.sql.functions.OrderedSetAgg`)
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.functions.percentile_disc`](#sqlalchemy.sql.functions.percentile_disc
    "sqlalchemy.sql.functions.percentile_disc")(`sqlalchemy.sql.functions.OrderedSetAgg`)
- en: '[PRE176]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: The RANDOM() SQL function.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: RANDOM() SQL函数。
- en: '**Class signature**'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.random`](#sqlalchemy.sql.functions.random "sqlalchemy.sql.functions.random")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.random`](#sqlalchemy.sql.functions.random "sqlalchemy.sql.functions.random")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE177]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Implement the `rank` hypothetical-set aggregate function.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `rank` 虚拟集合聚合函数。
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数必须与 [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") 修改器一起使用，以提供要操作的排序表达式。
- en: The return type of this function is [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer").
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型是 [`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")。
- en: '**Class signature**'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.rank`](#sqlalchemy.sql.functions.rank "sqlalchemy.sql.functions.rank")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.rank`](#sqlalchemy.sql.functions.rank "sqlalchemy.sql.functions.rank")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE178]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Implement the `ROLLUP` grouping operation.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `ROLLUP` 分组操作。
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '此函数用作语句的 GROUP BY 的一部分，例如 [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
- en: '[PRE179]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: New in version 1.2.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中添加。
- en: '**Class signature**'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.rollup`](#sqlalchemy.sql.functions.rollup "sqlalchemy.sql.functions.rollup")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.rollup`](#sqlalchemy.sql.functions.rollup "sqlalchemy.sql.functions.rollup")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE180]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: The SESSION_USER() SQL function.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: SESSION_USER() SQL 函数。
- en: '**Class signature**'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.session_user`](#sqlalchemy.sql.functions.session_user
    "sqlalchemy.sql.functions.session_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.session_user`](#sqlalchemy.sql.functions.session_user
    "sqlalchemy.sql.functions.session_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: '[PRE181]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: The SQL SUM() aggregate function.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: SQL SUM() 聚合函数。
- en: '**Class signature**'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.sum`](#sqlalchemy.sql.functions.sum "sqlalchemy.sql.functions.sum")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.sum`](#sqlalchemy.sql.functions.sum "sqlalchemy.sql.functions.sum")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
- en: '[PRE182]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: The SYSDATE() SQL function.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: SYSDATE() SQL 函数。
- en: '**Class signature**'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.sysdate`](#sqlalchemy.sql.functions.sysdate
    "sqlalchemy.sql.functions.sysdate") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.sysdate`](#sqlalchemy.sql.functions.sysdate "sqlalchemy.sql.functions.sysdate")
    ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
- en: '[PRE183]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: The USER() SQL function.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: USER() SQL 函数。
- en: '**Class signature**'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.functions.user`](#sqlalchemy.sql.functions.user "sqlalchemy.sql.functions.user")
    ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.functions.user`](#sqlalchemy.sql.functions.user "sqlalchemy.sql.functions.user")
    ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
