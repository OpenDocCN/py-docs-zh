- en: Just-in-time compilation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即时编译
- en: 原文：[`jax.readthedocs.io/en/latest/jit-compilation.html`](https://jax.readthedocs.io/en/latest/jit-compilation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jit-compilation.html`](https://jax.readthedocs.io/en/latest/jit-compilation.html)
- en: In this section, we will further explore how JAX works, and how we can make
    it performant. We will discuss the `jax.jit()` transformation, which will perform
    *Just In Time* (JIT) compilation of a JAX Python function so it can be executed
    efficiently in XLA.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将进一步探讨 JAX 的工作原理，以及如何使其性能卓越。我们将讨论 `jax.jit()` 变换，它将 JAX Python 函数进行即时编译，以便在
    XLA 中高效执行。
- en: How JAX transformations work
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作 JAX 变换
- en: In the previous section, we discussed that JAX allows us to transform Python
    functions. JAX accomplishes this by reducing each function into a sequence of
    primitive operations, each representing one fundamental unit of computation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们讨论了 JAX 允许我们转换 Python 函数的能力。JAX 通过将每个函数减少为一系列原始操作来实现这一点，每个原始操作代表一种基本的计算单位。
- en: 'One way to see the sequence of primitives behind a function is using `jax.make_jaxpr()`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 查看函数背后原始操作序列的一种方法是使用 `jax.make_jaxpr()`：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Understanding Jaxprs section of the documentation provides more information
    on the meaning of the above output.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的理解 Jaxprs 部分提供了有关上述输出含义的更多信息。
- en: 'Importantly, notice that the jaxpr does not capture the side-effect present
    in the function: there is nothing in it corresponding to `global_list.append(x)`.
    This is a feature, not a bug: JAX transformations are designed to understand side-effect-free
    (a.k.a. functionally pure) code. If *pure function* and *side-effect* are unfamiliar
    terms, this is explained in a little more detail in [🔪 JAX - The Sharp Bits 🔪:
    Pure Functions](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#pure-functions).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '重要的是要注意，jaxpr 不捕获函数中存在的副作用：其中没有对 `global_list.append(x)` 的任何内容。这是一个特性，而不是一个错误：JAX
    变换旨在理解无副作用（也称为函数纯粹）的代码。如果 *纯函数* 和 *副作用* 是陌生的术语，这在 [🔪 JAX - The Sharp Bits 🔪: Pure
    Functions](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#pure-functions)
    中有稍微详细的解释。'
- en: Impure functions are dangerous because under JAX transformations they are likely
    not to behave as intended; they might fail silently, or produce surprising downstream
    errors like leaked Tracers. Moreover, JAX often can’t detect when side effects
    are present. (If you want debug printing, use `jax.debug.print()`. To express
    general side-effects at the cost of performance, see `jax.experimental.io_callback()`.
    To check for tracer leaks at the cost of performance, use with `jax.check_tracer_leaks()`).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 非纯函数很危险，因为在 JAX 变换下它们可能无法按预期运行；它们可能会悄无声息地失败，或者产生意外的下游错误，如泄漏的跟踪器。此外，JAX 通常无法检测到是否存在副作用。（如果需要调试打印，请使用
    `jax.debug.print()`。要表达一般性副作用而牺牲性能，请参阅 `jax.experimental.io_callback()`。要检查跟踪器泄漏而牺牲性能，请使用
    `jax.check_tracer_leaks()`）。
- en: When tracing, JAX wraps each argument by a *tracer* object. These tracers then
    record all JAX operations performed on them during the function call (which happens
    in regular Python). Then, JAX uses the tracer records to reconstruct the entire
    function. The output of that reconstruction is the jaxpr. Since the tracers do
    not record the Python side-effects, they do not appear in the jaxpr. However,
    the side-effects still happen during the trace itself.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在跟踪时，JAX 通过 *跟踪器* 对象包装每个参数。这些跟踪器记录了在函数调用期间（即在常规 Python 中发生）对它们执行的所有 JAX 操作。然后，JAX
    使用跟踪器记录重构整个函数。重构的输出是 jaxpr。由于跟踪器不记录 Python 的副作用，它们不会出现在 jaxpr 中。但是，副作用仍会在跟踪过程中发生。
- en: 'Note: the Python `print()` function is not pure: the text output is a side-effect
    of the function. Therefore, any `print()` calls will only happen during tracing,
    and will not appear in the jaxpr:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：Python 的 `print()` 函数不是纯函数：文本输出是函数的副作用。因此，在跟踪期间，任何 `print()` 调用都将只发生一次，并且不会出现在
    jaxpr 中：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See how the printed `x` is a `Traced` object? That’s the JAX internals at work.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 看看打印出来的 `x` 是一个 `Traced` 对象？这就是 JAX 内部的工作原理。
- en: The fact that the Python code runs at least once is strictly an implementation
    detail, and so shouldn’t be relied upon. However, it’s useful to understand as
    you can use it when debugging to print out intermediate values of a computation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python 代码至少运行一次的事实严格来说是一个实现细节，因此不应依赖它。然而，在调试时理解它是有用的，因为您可以在计算的中间值打印出来。
- en: 'A key thing to understand is that a jaxpr captures the function as executed
    on the parameters given to it. For example, if we have a Python conditional, the
    jaxpr will only know about the branch we take:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键的理解点是，jaxpr捕捉函数在给定参数上执行的方式。例如，如果我们有一个Python条件语句，jaxpr只会了解我们选择的分支：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: JIT compiling a function
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JIT编译函数
- en: 'As explained before, JAX enables operations to execute on CPU/GPU/TPU using
    the same code. Let’s look at an example of computing a *Scaled Exponential Linear
    Unit* ([SELU](https://proceedings.neurips.cc/paper/6698-self-normalizing-neural-networks.pdf)),
    an operation commonly used in deep learning:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前所解释的，JAX使得操作能够使用相同的代码在CPU/GPU/TPU上执行。让我们看一个计算*缩放指数线性单元*（[SELU](https://proceedings.neurips.cc/paper/6698-self-normalizing-neural-networks.pdf)）的例子，这是深度学习中常用的操作：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The code above is sending one operation at a time to the accelerator. This limits
    the ability of the XLA compiler to optimize our functions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码一次只发送一个操作到加速器。这限制了XLA编译器优化我们函数的能力。
- en: Naturally, what we want to do is give the XLA compiler as much code as possible,
    so it can fully optimize it. For this purpose, JAX provides the `jax.jit()` transformation,
    which will JIT compile a JAX-compatible function. The example below shows how
    to use JIT to speed up the previous function.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，我们希望尽可能多地向XLA编译器提供代码，以便它能够完全优化它。为此，JAX提供了`jax.jit()`转换，它将即时编译一个与JAX兼容的函数。下面的示例展示了如何使用JIT加速前述函数。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here’s what just happened:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚发生了什么事：
- en: We defined `selu_jit` as the compiled version of `selu`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了`selu_jit`作为`selu`的编译版本。
- en: We called `selu_jit` once on `x`. This is where JAX does its tracing – it needs
    to have some inputs to wrap in tracers, after all. The jaxpr is then compiled
    using XLA into very efficient code optimized for your GPU or TPU. Finally, the
    compiled code is executed to satisfy the call. Subsequent calls to `selu_jit`
    will use the compiled code directly, skipping the python implementation entirely.
    (If we didn’t include the warm-up call separately, everything would still work,
    but then the compilation time would be included in the benchmark. It would still
    be faster, because we run many loops in the benchmark, but it wouldn’t be a fair
    comparison.)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`x`上调用了`selu_jit`一次。这是JAX进行其追踪的地方 - 它需要一些输入来包装成追踪器。然后，jaxpr使用XLA编译成非常高效的代码，针对您的GPU或TPU进行优化。最后，编译的代码被执行以满足调用。后续对`selu_jit`的调用将直接使用编译后的代码，跳过Python实现。（如果我们没有单独包括预热调用，一切仍将正常运行，但编译时间将包含在基准测试中。因为我们在基准测试中运行多个循环，所以仍会更快，但这不是公平的比较。）
- en: We timed the execution speed of the compiled version. (Note the use of `block_until_ready()`,
    which is required due to JAX’s Asynchronous dispatch).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们计时了编译版本的执行速度。（注意使用`block_until_ready()`，这是由于JAX的异步调度所需。）
- en: Why can’t we just JIT everything?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们不能把所有东西都即时编译（JIT）呢？
- en: After going through the example above, you might be wondering whether we should
    simply apply `jax.jit()` to every function. To understand why this is not the
    case, and when we should/shouldn’t apply `jit`, let’s first check some cases where
    JIT doesn’t work.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，你可能会想知道我们是否应该简单地对每个函数应用`jax.jit()`。要理解为什么不是这样，并且何时需要/不需要应用`jit`，让我们首先检查一些`jit`不适用的情况。
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The problem in both cases is that we tried to condition the trace-time flow
    of the program using runtime values. Traced values within JIT, like `x` and `n`
    here, can only affect control flow via their static attributes: such as `shape`
    or `dtype`, and not via their values. For more detail on the interaction between
    Python control flow and JAX, see [🔪 JAX - The Sharp Bits 🔪: Control Flow](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#control-flow).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '在这两种情况下的问题是，我们尝试使用运行时值来条件追踪时间流程。在JIT中追踪的值，例如这里的`x`和`n`，只能通过它们的静态属性（如`shape`或`dtype`）影响控制流，而不能通过它们的值。有关Python控制流与JAX交互的更多详细信息，请参见[🔪
    JAX - The Sharp Bits 🔪: Control Flow](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#control-flow)。'
- en: 'One way to deal with this problem is to rewrite the code to avoid conditionals
    on value. Another is to use special Control flow operators like `jax.lax.cond()`.
    However, sometimes that is not possible or practical. In that case, you can consider
    JIT-compiling only part of the function. For example, if the most computationally
    expensive part of the function is inside the loop, we can JIT-compile just that
    inner part (though make sure to check the next section on caching to avoid shooting
    yourself in the foot):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这个问题的一种方法是重写代码，避免在值条件上使用条件语句。另一种方法是使用特殊的控制流操作符，例如`jax.lax.cond()`。然而，有时这并不可行或实际。在这种情况下，可以考虑只对函数的部分进行JIT编译。例如，如果函数中最消耗计算资源的部分在循环内部，我们可以只对内部的那部分进行JIT编译（但务必查看关于缓存的下一节，以避免出现问题）：
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Marking arguments as static
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将参数标记为静态的
- en: If we really need to JIT-compile a function that has a condition on the value
    of an input, we can tell JAX to help itself to a less abstract tracer for a particular
    input by specifying `static_argnums` or `static_argnames`. The cost of this is
    that the resulting jaxpr and compiled artifact depends on the particular value
    passed, and so JAX will have to re-compile the function for every new value of
    the specified static input. It is only a good strategy if the function is guaranteed
    to see a limited set of static values.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们确实需要对具有输入值条件的函数进行JIT编译，我们可以告诉JAX通过指定`static_argnums`或`static_argnames`来帮助自己获取特定输入的较少抽象的追踪器。这样做的成本是生成的jaxpr和编译的工件依赖于传递的特定值，因此JAX将不得不针对指定静态输入的每个新值重新编译函数。只有在函数保证看到有限的静态值集时，这才是一个好策略。
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To specify such arguments when using `jit` as a decorator, a common pattern
    is to use python’s [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial
    "(in Python v3.12)"):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`jit`作为装饰器时，要指定这些参数的一种常见模式是使用Python的[`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial
    "(在Python v3.12中)")：
- en: '[PRE20]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: JIT and caching
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JIT和缓存
- en: With the compilation overhead of the first JIT call, understanding how and when
    `jax.jit()` caches previous compilations is key to using it effectively.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过第一次JIT调用的编译开销，了解`jax.jit()`如何以及何时缓存先前的编译是有效使用它的关键。
- en: Suppose we define `f = jax.jit(g)`. When we first invoke `f`, it will get compiled,
    and the resulting XLA code will get cached. Subsequent calls of `f` will reuse
    the cached code. This is how `jax.jit` makes up for the up-front cost of compilation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们定义`f = jax.jit(g)`。当我们首次调用`f`时，它会被编译，并且生成的XLA代码将被缓存。后续调用`f`将重用缓存的代码。这就是`jax.jit`如何弥补编译的前期成本。
- en: If we specify `static_argnums`, then the cached code will be used only for the
    same values of arguments labelled as static. If any of them change, recompilation
    occurs. If there are many values, then your program might spend more time compiling
    than it would have executing ops one-by-one.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定了`static_argnums`，那么缓存的代码将仅在标记为静态的参数值相同时使用。如果它们中任何一个发生更改，将重新编译。如果存在许多值，则您的程序可能会花费更多时间进行编译，而不是逐个执行操作。
- en: 'Avoid calling `jax.jit()` on temporary functions defined inside loops or other
    Python scopes. For most cases, JAX will be able to use the compiled, cached function
    in subsequent calls to `jax.jit()`. However, because the cache relies on the hash
    of the function, it becomes problematic when equivalent functions are redefined.
    This will cause unnecessary compilation each time in the loop:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在循环或其他Python作用域内定义的临时函数上调用`jax.jit()`。对于大多数情况，JAX能够在后续调用`jax.jit()`时使用编译和缓存的函数。然而，由于缓存依赖于函数的哈希值，在重新定义等价函数时会引发问题。这将导致每次在循环中不必要地重新编译：
- en: '[PRE22]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
