- en: ORM Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM事件
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/events.html](https://docs.sqlalchemy.org/en/20/orm/events.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/events.html](https://docs.sqlalchemy.org/en/20/orm/events.html)
- en: The ORM includes a wide variety of hooks available for subscription.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: ORM包括各种可供订阅的钩子。
- en: For an introduction to the most commonly used ORM events, see the section [Tracking
    queries, object and Session Changes with Events](session_events.html). The event
    system in general is discussed at [Events](../core/event.html). Non-ORM events
    such as those regarding connections and low-level statement execution are described
    in [Core Events](../core/events.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解最常用的ORM事件的介绍，请参阅[使用事件跟踪查询、对象和会话更改](session_events.html)部分。一般讨论事件系统，请参阅[事件](../core/event.html)。关于连接和低级语句执行等非ORM事件的描述，请参阅[核心事件](../core/events.html)。
- en: Session Events
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话事件
- en: 'The most basic event hooks are available at the level of the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object. The types of things that are intercepted here
    include:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的事件钩子可在ORM [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象级别使用。这里拦截的内容包括：
- en: '**Persistence Operations** - the ORM flush process that sends changes to the
    database can be extended using events that fire off at different parts of the
    flush, to augment or modify the data being sent to the database or to allow other
    things to happen when persistence occurs. Read more about persistence events at
    [Persistence Events](session_events.html#session-persistence-events).'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久化操作** - 将更改发送到数据库的ORM刷新过程可以使用在刷新的不同部分触发的事件进行扩展，以增强或修改发送到数据库的数据，或者在持久化发生时允许其他事情发生。在[持久化事件](session_events.html#session-persistence-events)中了解更多信息。'
- en: '**Object lifecycle events** - hooks when objects are added, persisted, deleted
    from sessions. Read more about these at [Object Lifecycle Events](session_events.html#session-lifecycle-events).'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象生命周期事件** - 当对象被添加、持久化、从会话中删除时触发的钩子。在[对象生命周期事件](session_events.html#session-lifecycle-events)中了解更多信息。'
- en: '**Execution Events** - Part of the [2.0 style](../glossary.html#term-2.0-style)
    execution model, all SELECT statements against ORM entities emitted, as well as
    bulk UPDATE and DELETE statements outside of the flush process, are intercepted
    from the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method using the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") method. Read more about this event
    at [Execute Events](session_events.html#session-execute-events).'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行事件** - [2.0风格](../glossary.html#term-2.0-style)执行模型的一部分，拦截所有针对ORM实体的SELECT语句，以及在刷新过程之外的批量UPDATE和DELETE语句，使用[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法通过[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")方法。在[执行事件](session_events.html#session-execute-events)中了解更多关于此事件的信息。'
- en: Be sure to read the [Tracking queries, object and Session Changes with Events](session_events.html)
    chapter for context on these events.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必阅读[使用事件跟踪查询、对象和会话更改](session_events.html)章节，以了解这些事件的背景。
- en: '| Object Name | Description |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [SessionEvents](#sqlalchemy.orm.SessionEvents) | Define events specific to
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    lifecycle. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [SessionEvents](#sqlalchemy.orm.SessionEvents) | 定义特定于[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")生命周期的事件。 |'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Define events specific to [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") lifecycle.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 定义特定于[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")生命周期的事件。
- en: 'e.g.:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The [`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    function will accept [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects as well as the return result of [`sessionmaker()`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`scoped_session()`](contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")函数将接受[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象，以及[`sessionmaker()`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")和[`scoped_session()`](contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")的返回结果。'
- en: Additionally, it accepts the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class which will apply listeners to all [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances globally.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它接受[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，该类将全局应用监听器到所有[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例。
- en: 'Parameters:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`raw=False` –'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw=False` –'
- en: When True, the “target” argument passed to applicable event listener functions
    that work on individual objects will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，传递给适用于单个对象的事件侦听器函数的“target”参数将是实例的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")管理对象，而不是映射的实例本身。
- en: New in version 1.3.14.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.3.14 中的新功能。
- en: '`restore_load_context=False` –'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restore_load_context=False` –'
- en: Applies to the [`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent") event. Restores the loader
    context of the object when the event hook is complete, so that ongoing eager load
    operations continue to target the object appropriately. A warning is emitted if
    the object is moved to a new loader context from within this event if this flag
    is not set.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 适用于[`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")事件。在事件钩子完成时恢复对象的加载器上下文，以便正在进行的急切加载操作继续正确地针对对象。如果在此事件中将对象移动到新的加载器上下文而未设置此标志，则会发出警告。
- en: New in version 1.3.14.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.3.14 中的新功能。
- en: '**Members**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[after_attach()](#sqlalchemy.orm.SessionEvents.after_attach), [after_begin()](#sqlalchemy.orm.SessionEvents.after_begin),
    [after_bulk_delete()](#sqlalchemy.orm.SessionEvents.after_bulk_delete), [after_bulk_update()](#sqlalchemy.orm.SessionEvents.after_bulk_update),
    [after_commit()](#sqlalchemy.orm.SessionEvents.after_commit), [after_flush()](#sqlalchemy.orm.SessionEvents.after_flush),
    [after_flush_postexec()](#sqlalchemy.orm.SessionEvents.after_flush_postexec),
    [after_rollback()](#sqlalchemy.orm.SessionEvents.after_rollback), [after_soft_rollback()](#sqlalchemy.orm.SessionEvents.after_soft_rollback),
    [after_transaction_create()](#sqlalchemy.orm.SessionEvents.after_transaction_create),
    [after_transaction_end()](#sqlalchemy.orm.SessionEvents.after_transaction_end),
    [before_attach()](#sqlalchemy.orm.SessionEvents.before_attach), [before_commit()](#sqlalchemy.orm.SessionEvents.before_commit),
    [before_flush()](#sqlalchemy.orm.SessionEvents.before_flush), [deleted_to_detached()](#sqlalchemy.orm.SessionEvents.deleted_to_detached),
    [deleted_to_persistent()](#sqlalchemy.orm.SessionEvents.deleted_to_persistent),
    [detached_to_persistent()](#sqlalchemy.orm.SessionEvents.detached_to_persistent),
    [dispatch](#sqlalchemy.orm.SessionEvents.dispatch), [do_orm_execute()](#sqlalchemy.orm.SessionEvents.do_orm_execute),
    [loaded_as_persistent()](#sqlalchemy.orm.SessionEvents.loaded_as_persistent),
    [pending_to_persistent()](#sqlalchemy.orm.SessionEvents.pending_to_persistent),
    [pending_to_transient()](#sqlalchemy.orm.SessionEvents.pending_to_transient),
    [persistent_to_deleted()](#sqlalchemy.orm.SessionEvents.persistent_to_deleted),
    [persistent_to_detached()](#sqlalchemy.orm.SessionEvents.persistent_to_detached),
    [persistent_to_transient()](#sqlalchemy.orm.SessionEvents.persistent_to_transient),
    [transient_to_pending()](#sqlalchemy.orm.SessionEvents.transient_to_pending)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[after_attach()](#sqlalchemy.orm.SessionEvents.after_attach), [after_begin()](#sqlalchemy.orm.SessionEvents.after_begin),
    [after_bulk_delete()](#sqlalchemy.orm.SessionEvents.after_bulk_delete), [after_bulk_update()](#sqlalchemy.orm.SessionEvents.after_bulk_update),
    [after_commit()](#sqlalchemy.orm.SessionEvents.after_commit), [after_flush()](#sqlalchemy.orm.SessionEvents.after_flush),
    [after_flush_postexec()](#sqlalchemy.orm.SessionEvents.after_flush_postexec),
    [after_rollback()](#sqlalchemy.orm.SessionEvents.after_rollback), [after_soft_rollback()](#sqlalchemy.orm.SessionEvents.after_soft_rollback),
    [after_transaction_create()](#sqlalchemy.orm.SessionEvents.after_transaction_create),
    [after_transaction_end()](#sqlalchemy.orm.SessionEvents.after_transaction_end),
    [before_attach()](#sqlalchemy.orm.SessionEvents.before_attach), [before_commit()](#sqlalchemy.orm.SessionEvents.before_commit),
    [before_flush()](#sqlalchemy.orm.SessionEvents.before_flush), [deleted_to_detached()](#sqlalchemy.orm.SessionEvents.deleted_to_detached),
    [deleted_to_persistent()](#sqlalchemy.orm.SessionEvents.deleted_to_persistent),
    [detached_to_persistent()](#sqlalchemy.orm.SessionEvents.detached_to_persistent),
    [dispatch](#sqlalchemy.orm.SessionEvents.dispatch), [do_orm_execute()](#sqlalchemy.orm.SessionEvents.do_orm_execute),
    [loaded_as_persistent()](#sqlalchemy.orm.SessionEvents.loaded_as_persistent),
    [pending_to_persistent()](#sqlalchemy.orm.SessionEvents.pending_to_persistent),
    [pending_to_transient()](#sqlalchemy.orm.SessionEvents.pending_to_transient),
    [persistent_to_deleted()](#sqlalchemy.orm.SessionEvents.persistent_to_deleted),
    [persistent_to_detached()](#sqlalchemy.orm.SessionEvents.persistent_to_detached),
    [persistent_to_transient()](#sqlalchemy.orm.SessionEvents.persistent_to_transient),
    [transient_to_pending()](#sqlalchemy.orm.SessionEvents.transient_to_pending)'
- en: '**Class signature**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.SessionEvents`](#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.SessionEvents`](#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")（`sqlalchemy.event.Events`）
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute after an instance is attached to a session.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例附加到会话后执行。
- en: 'Example argument forms:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is called after an add, delete or merge.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这在添加、删除或合并后调用。
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As of 0.8, this event fires off *after* the item has been fully associated with
    the session, which is different than previous releases. For event handlers that
    require the object not yet be part of session state (such as handlers which may
    autoflush while the target object is not yet complete) consider the new [`before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach") event.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从0.8开始，此事件在项目完全与会话关联之后触发，这与以前的版本不同。对于需要对象尚未成为会话状态的事件处理程序（例如，在目标对象尚未完成时可能自动刷新的处理程序），请考虑新的[`before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach")事件。
- en: See also
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach")'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach")'
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute after a transaction is begun on a connection.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接上开始事务后执行。
- en: 'Example argument forms:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This event is called within the process of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") modifying its own internal state. To invoke SQL operations
    within this hook, use the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") provided to the event; do not run SQL operations
    using the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    directly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")修改其自身内部状态的过程中调用。要在此挂钩内调用SQL操作，请使用事件提供的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")；请勿直接使用[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")运行SQL操作。
- en: 'Parameters:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`transaction` – The [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transaction` – [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。'
- en: '`connection` – The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object which will be used for SQL statements.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 将用于SQL语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。'
- en: See also
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
- en: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Event for after the legacy [`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") method has been called.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用传统的[`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete "sqlalchemy.orm.Query.delete")方法之后的事件。
- en: 'Example argument forms:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Changed in version 0.9: The [`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete") event now accepts the arguments
    [`SessionEvents.after_bulk_delete.delete_context`](#sqlalchemy.orm.SessionEvents.after_bulk_delete.params.delete_context
    "sqlalchemy.orm.SessionEvents.after_bulk_delete"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本0.9开始更改：[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")事件现在接受参数[`SessionEvents.after_bulk_delete.delete_context`](#sqlalchemy.orm.SessionEvents.after_bulk_delete.params.delete_context
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")。将来的版本中将删除接受上述“已弃用”参数签名的监听器函数的支持。
- en: Legacy Feature
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留特性
- en: The [`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete") method is a legacy event hook
    as of SQLAlchemy 2.0\. The event **does not participate** in [2.0 style](../glossary.html#term-2.0-style)
    invocations using [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") documented at [ORM UPDATE and DELETE with
    Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where).
    For 2.0 style use, the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook will intercept these calls.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")方法是SQLAlchemy 2.0的传统事件钩子。该事件**不参与**使用[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")在[ORM UPDATE and DELETE with Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where)中记录的[2.0风格](../glossary.html#term-2.0-style)调用。对于2.0风格的使用，[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子将拦截这些调用。'
- en: 'Parameters:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**delete_context** –'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**delete_context** -'
- en: 'a “delete context” object which contains details about the update, including
    these attributes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含有关更新的“删除上下文”对象，包括这些属性：
- en: '`session` - the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    involved'
  id: totrans-65
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` - 涉及的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: ''
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query` -the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object that this update operation was called upon.'
  id: totrans-68
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` - 调用此更新操作的[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象。'
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-70
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned as a result of the bulk DELETE operation.'
  id: totrans-71
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result` 作为批量DELETE操作的结果返回的[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。'
- en: 'Changed in version 1.4: the update_context no longer has a `QueryContext` object
    associated with it.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：update_context不再与`QueryContext`对象相关联。
- en: See also
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
- en: '[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")'
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Event for after the legacy [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method has been called.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用传统[`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update "sqlalchemy.orm.Query.update")方法之后的事件。
- en: 'Example argument forms:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Changed in version 0.9: The [`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") event now accepts the arguments
    [`SessionEvents.after_bulk_update.update_context`](#sqlalchemy.orm.SessionEvents.after_bulk_update.params.update_context
    "sqlalchemy.orm.SessionEvents.after_bulk_update"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本0.9开始更改：[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")事件现在接受参数[`SessionEvents.after_bulk_update.update_context`](#sqlalchemy.orm.SessionEvents.after_bulk_update.params.update_context
    "sqlalchemy.orm.SessionEvents.after_bulk_update")。将来的版本中将删除接受上述“已弃用”参数签名的监听器函数的支持。
- en: Legacy Feature
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留特性
- en: The [`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") method is a legacy event hook
    as of SQLAlchemy 2.0\. The event **does not participate** in [2.0 style](../glossary.html#term-2.0-style)
    invocations using [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") documented at [ORM UPDATE and DELETE with
    Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where).
    For 2.0 style use, the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook will intercept these calls.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")方法是SQLAlchemy 2.0版本之后的传统事件钩子。该事件**不参与**使用[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")进行的[2.0风格](../glossary.html#term-2.0-style)调用，该调用在[ORM
    UPDATE and DELETE with Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where)中有记录。对于2.0风格的使用，[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子将拦截这些调用。'
- en: 'Parameters:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**update_context** –'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**update_context** –'
- en: 'an “update context” object which contains details about the update, including
    these attributes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 包含有关更新的“更新上下文”对象，包括这些属性：
- en: '`session` - the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    involved'
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` - 涉及的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: ''
  id: totrans-87
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-88
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query` -the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object that this update operation was called upon.'
  id: totrans-89
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` -调用此更新操作的[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象。'
- en: ''
  id: totrans-90
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-91
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`values` The “values” dictionary that was passed to [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update").'
  id: totrans-92
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values` 传递给[`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")的“值”字典。'
- en: ''
  id: totrans-93
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-94
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned as a result of the bulk UPDATE operation.'
  id: totrans-95
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result` 作为批量更新操作的结果返回的[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。'
- en: 'Changed in version 1.4: the update_context no longer has a `QueryContext` object
    associated with it.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：update_context不再与`QueryContext`对象关联。
- en: See also
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
- en: '[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")'
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Execute after a commit has occurred.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交后执行。
- en: 'Example argument forms:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") hook is *not* per-flush, that is,
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can emit SQL to the database many times within the scope of a transaction. For
    interception of these events, use the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"), [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush"), or [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") events.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")钩子不是每次刷新一次，也就是说，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")可以在事务范围内多次向数据库发出SQL。要拦截这些事件，请使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")、[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush")或[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")事件。'
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in an active transaction when the [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") event is invoked, and therefore can
    not emit SQL. To emit SQL corresponding to every transaction, use the [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") event.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")事件时，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")处于非活动事务状态，因此无法发出SQL。若要发出与每个事务对应的SQL，请使用[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")事件。
- en: 'Parameters:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**session** – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: See also
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
- en: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Execute after flush has completed, but before commit has been called.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在刷新完成后执行，但在调用提交之前执行。
- en: 'Example argument forms:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that the session’s state is still in pre-flush, i.e. ‘new’, ‘dirty’, and
    ‘deleted’ lists still show pre-flush state as well as the history settings on
    instance attributes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，会话的状态仍处于预刷新状态，即‘new’、‘dirty’和‘deleted’列表仍然显示预刷新状态，以及实例属性的历史设置。
- en: Warning
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This event runs after the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has emitted SQL to modify the database, but **before**
    it has altered its internal state to reflect those changes, including that newly
    inserted objects are placed into the identity map. ORM operations emitted within
    this event such as loads of related items may produce new identity map entries
    that will immediately be replaced, sometimes causing confusing results. SQLAlchemy
    will emit a warning for this condition as of version 1.3.9.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")发出SQL以修改数据库后，但在修改其内部状态以反映这些更改之前运行，包括将新插入的对象放入标识映射中。在此事件中发出的ORM操作（如加载相关项目）可能会产生新的标识映射条目，这些条目将立即被替换，有时会导致令人困惑的结果。从版本1.3.9开始，SQLAlchemy将为此条件发出警告。
- en: 'Parameters:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush_context` – 处理刷新详细信息的内部[`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction")对象。'
- en: See also
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
- en: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Execute after flush has completed, and after the post-exec state occurs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在刷新完成后执行，并在后执行状态发生后执行。
- en: 'Example argument forms:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will be when the ‘new’, ‘dirty’, and ‘deleted’ lists are in their final
    state. An actual commit() may or may not have occurred, depending on whether or
    not the flush started its own transaction or participated in a larger transaction.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是‘new’、‘dirty’和‘deleted’列表处于最终状态的时刻。实际是否提交()取决于刷新是否启动了自己的事务或参与了较大事务。
- en: 'Parameters:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush_context` – 处理刷新细节的内部[`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") 对象。'
- en: See also
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
- en: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Execute after a real DBAPI rollback has occurred.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在真正的 DBAPI 回滚发生后执行。
- en: 'Example argument forms:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that this event only fires when the *actual* rollback against the database
    occurs - it does *not* fire each time the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method is called, if the underlying DBAPI transaction
    has already been rolled back. In many cases, the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will not be in an “active” state during this event,
    as the current transaction is not valid. To acquire a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which is active after the outermost rollback has proceeded,
    use the [`SessionEvents.after_soft_rollback()`](#sqlalchemy.orm.SessionEvents.after_soft_rollback
    "sqlalchemy.orm.SessionEvents.after_soft_rollback") event, checking the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") flag.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此事件仅在实际数据库回滚发生时触发 - 当底层 DBAPI 事务已经回滚时，并不会在每次调用 [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 方法时触发。在许多情况下，在此事件期间，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 不会处于“活动”状态，因为当前事务无效。要获取在最外层回滚已经执行后处于活动状态的 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，请使用 [`SessionEvents.after_soft_rollback()`](#sqlalchemy.orm.SessionEvents.after_soft_rollback
    "sqlalchemy.orm.SessionEvents.after_soft_rollback") 事件，并检查 [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") 标志。
- en: 'Parameters:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**session** – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Execute after any rollback has occurred, including “soft” rollbacks that don’t
    actually emit at the DBAPI level.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在发生任何回滚之后执行，包括“软”回滚，这些回滚实际上不会在 DBAPI 级别发出。
- en: 'Example argument forms:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This corresponds to both nested and outer rollbacks, i.e. the innermost rollback
    that calls the DBAPI’s rollback() method, as well as the enclosing rollback calls
    that only pop themselves from the transaction stack.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这对应于嵌套和外部回滚，即调用 DBAPI 的 rollback() 方法的最内层回滚，以及仅弹出事务堆栈的封闭回滚调用。
- en: 'The given [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can be used to invoke SQL and [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") operations after an outermost rollback by first
    checking the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") flag:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    可以在外部回滚后通过首先检查 [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") 标志来调用 SQL 和 [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") 操作。
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Parameters:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`previous_transaction` – The [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") transactional marker object which was just
    closed. The current [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") for the given [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is available via the `Session.transaction` attribute.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`previous_transaction` – 刚关闭的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")事务标记对象。给定[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的当前[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")可通过`Session.transaction`属性获得。'
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Execute when a new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")时执行。
- en: 'Example argument forms:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This event differs from [`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin
    "sqlalchemy.orm.SessionEvents.after_begin") in that it occurs for each [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") overall, as opposed to when transactions
    are begun on individual database connections. It is also invoked for nested transactions
    and subtransactions, and is always matched by a corresponding [`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end") event (assuming normal operation
    of the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin
    "sqlalchemy.orm.SessionEvents.after_begin")不同，因为它针对每个[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")整体而发生，而不是在单个数据库连接上开始事务时发生。它还针对嵌套事务和子事务进行调用，并且始终与相应的[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")事件匹配（假设[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的正常操作）。
- en: 'Parameters:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – the target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`transaction` –'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transaction` –'
- en: the target [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: 'To detect if this is the outermost [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction"), as opposed to a “subtransaction” or a SAVEPOINT,
    test that the [`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") attribute is `None`:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检测是否为最外层的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")，而不是“子事务”或SAVEPOINT，请测试[`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent")属性是否为`None`：
- en: '[PRE23]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To detect if the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is a SAVEPOINT, use the [`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检测[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")是否为SAVEPOINT，请使用[`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested")属性：
- en: '[PRE24]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Execute when the span of a [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") ends.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")的跨度结束时执行。
- en: 'Example argument forms:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This event differs from [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") in that it corresponds to all [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") objects in use, including those for nested
    transactions and subtransactions, and is always matched by a corresponding [`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")不同，因为它对所有正在使用的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")对象进行对应，包括嵌套事务和子事务，并且始终与相应的[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")事件匹配。
- en: 'Parameters:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – the target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`transaction` –'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transaction` –'
- en: the target [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: 'To detect if this is the outermost [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction"), as opposed to a “subtransaction” or a SAVEPOINT,
    test that the [`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") attribute is `None`:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检测这是否是最外层的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")，而不是“子事务”或SAVEPOINT，请测试[`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent")属性是否为`None`：
- en: '[PRE27]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To detect if the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is a SAVEPOINT, use the [`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检测[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")是否为SAVEPOINT，请使用[`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested")属性：
- en: '[PRE28]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
- en: '[PRE29]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Execute before an instance is attached to a session.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在将实例附加到会话之前执行。
- en: 'Example argument forms:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE30]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This is called before an add, delete or merge causes the object to be part of
    the session.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这在添加、删除或合并导致对象成为会话的一部分之前被调用。
- en: See also
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach")'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach")'
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE31]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Execute before commit is called.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交之前执行。
- en: 'Example argument forms:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE32]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") hook is *not* per-flush, that is,
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can emit SQL to the database many times within the scope of a transaction. For
    interception of these events, use the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"), [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush"), or [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") events.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")挂钩*不*是每次刷新一次，也就是说，在事务范围内，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")可以多次向数据库发出SQL。要拦截这些事件，请使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")、[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush")或[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")事件。'
- en: 'Parameters:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**session** – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: See also
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
- en: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
- en: '[PRE33]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Execute before flush process has started.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在刷新过程开始之前执行。
- en: 'Example argument forms:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE34]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Parameters:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush_context` – 处理刷新细节的内部[`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction")对象。'
- en: '`instances` – Usually `None`, this is the collection of objects which can be
    passed to the [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") method (note this usage is deprecated).'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instances` – 通常为`None`，这是可以传递给[`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")方法的对象集合（请注意，此用法已被弃用）。'
- en: See also
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
- en: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE35]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Intercept the “deleted to detached” transition for a specific object.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“删除到分离”转换。
- en: 'Example argument forms:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE36]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This event is invoked when a deleted object is evicted from the session. The
    typical case when this occurs is when the transaction for a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in which the object was deleted is committed; the object
    moves from the deleted state to the detached state.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个被删除的对象从会话中被驱逐时，触发此事件。典型情况是当包含被删除对象的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的事务被提交时；对象从被删除状态转移到分离状态。
- en: It is also invoked for objects that were deleted in a flush when the [`Session.expunge_all()`](session_api.html#sqlalchemy.orm.Session.expunge_all
    "sqlalchemy.orm.Session.expunge_all") or [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") events are called, as well as if the object is
    individually expunged from its deleted state via [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge").
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当在调用[`Session.expunge_all()`](session_api.html#sqlalchemy.orm.Session.expunge_all
    "sqlalchemy.orm.Session.expunge_all")或[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")事件时，以及如果对象通过[`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge")从其删除状态单独清除时，也会为在刷新时被删除的对象调用。
- en: See also
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE37]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Intercept the “deleted to persistent” transition for a specific object.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“删除到持久化”转换。
- en: 'Example argument forms:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE38]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This transition occurs only when an object that’s been deleted successfully
    in a flush is restored due to a call to [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"). The event is not called under any other circumstances.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此转换仅在成功刷新后被删除的对象由于调用[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")而��恢复时发生。在任何其他情况下不会调用此事件。
- en: See also
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE39]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Intercept the “detached to persistent” transition for a specific object.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“分离到持久”转换。
- en: 'Example argument forms:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE40]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This event is a specialization of the [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") event which is only invoked for this
    specific transition. It is invoked typically during the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") call, as well as during the [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") call if the object was not previously associated
    with the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (note that an object marked as “deleted” remains in the “persistent” state until
    the flush proceeds).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件是 [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") 事件的一种特化，仅在此特定转换时调用。通常在 [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") 调用期间以及在对象之前与 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 不相关联的情况下调用 [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") 调用（请注意，将对象标记为“已删除”在刷新进行之前仍保持“持久”状态）。
- en: Note
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the object becomes persistent as part of a call to [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete"), the object is **not** yet marked as deleted
    when this event is called. To detect deleted objects, check the `deleted` flag
    sent to the [`SessionEvents.persistent_to_detached()`](#sqlalchemy.orm.SessionEvents.persistent_to_detached
    "sqlalchemy.orm.SessionEvents.persistent_to_detached") to event after the flush
    proceeds, or check the [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted") collection within the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") event if deleted objects need to
    be intercepted before the flush.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象在调用 [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") 的过程中变为持久对象，则在调用此事件时对象尚未标记为已删除。要检测已删除的对象，请在刷新进行后检查发送到
    [`SessionEvents.persistent_to_detached()`](#sqlalchemy.orm.SessionEvents.persistent_to_detached
    "sqlalchemy.orm.SessionEvents.persistent_to_detached") 事件的 `deleted` 标志，或者如果需要在刷新之前拦截已删除的对象，则在
    [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush "sqlalchemy.orm.SessionEvents.before_flush")
    事件中检查 [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted "sqlalchemy.orm.Session.deleted")
    集合。
- en: 'Parameters:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的 ORM 映射实例。'
- en: See also
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE41]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: reference back to the _Dispatch class.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 参考_Dispatch 类。
- en: Bidirectional against _Dispatch._events
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 双向与_Dispatch._events
- en: '[PRE42]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Intercept statement executions that occur on behalf of an ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截代表 ORM [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象执行的语句执行。
- en: 'Example argument forms:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE43]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This event is invoked for all top-level SQL statements invoked from the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, as well as related methods such as [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") and [`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar"). As of SQLAlchemy 1.4, all ORM queries that run
    through the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method as well as related methods [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"), [`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar") etc. will participate in this event. This event
    hook does **not** apply to the queries that are emitted internally within the
    ORM flush process, i.e. the process described at [Flushing](session_basics.html#session-flushing).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件适用于从[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法以及相关方法如[`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")和[`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar")调用的所有顶级SQL语句。从SQLAlchemy 1.4开始，通过[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法以及相关方法[`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")、[`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar")等运行的所有ORM查询都将参与此事件。此事件钩子**不**适用于在ORM刷新过程内部发出的查询，即在[刷新](session_basics.html#session-flushing)中描述的过程。
- en: Note
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook is triggered **for ORM
    statement executions only**, meaning those invoked via the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and similar methods on the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object. It does **not** trigger for statements that
    are invoked by SQLAlchemy Core only, i.e. statements invoked directly using [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or otherwise originating from an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object without any [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") involved. To intercept **all** SQL executions regardless
    of whether the Core or ORM APIs are in use, see the event hooks at [`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents"), such as [`ConnectionEvents.before_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute").
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件钩子仅在**ORM语句执行**时触发，意味着仅对通过[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")等方法在[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象上调用的语句触发。它**不**适用于仅由SQLAlchemy Core调用的语句，即通过[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")直接调用或由[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象发起而不涉及任何[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的语句。要拦截**所有**SQL执行，无论是否使用Core或ORM API，请参阅[`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")中的事件钩子，例如[`ConnectionEvents.before_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")和[`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")。'
- en: Also, this event hook does **not** apply to queries that are emitted internally
    within the ORM flush process, i.e. the process described at [Flushing](session_basics.html#session-flushing);
    to intercept steps within the flush process, see the event hooks described at
    [Persistence Events](session_events.html#session-persistence-events) as well as
    [Mapper-level Flush Events](session_events.html#session-persistence-mapper).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件钩子也**不**适用于在ORM刷新过程内部发出的查询，即在[刷新](session_basics.html#session-flushing)中描述的过程；要拦截刷新过程中的步骤，请参阅[Persistence
    Events](session_events.html#session-persistence-events)以及[Mapper-level Flush Events](session_events.html#session-persistence-mapper)中描述的事件钩子。
- en: This event is a `do_` event, meaning it has the capability to replace the operation
    that the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method normally performs. The intended use for
    this includes sharding and result-caching schemes which may seek to invoke the
    same statement across multiple database connections, returning a result that is
    merged from each of them, or which don’t invoke the statement at all, instead
    returning data from a cache.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件是一个`do_`事件，意味着它具有替换[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法通常执行的操作的能力。这包括分片和结果缓存方案，这些方案可能希望在多个数据库连接上调用相同的语句，返回从每个连接合并的结果，或者根本不调用该语句，而是从缓存返回数据。
- en: The hook intends to replace the use of the `Query._execute_and_instances` method
    that could be subclassed prior to SQLAlchemy 1.4.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 该钩子旨在替换在SQLAlchemy 1.4之前可以被子类化的`Query._execute_and_instances`方法的使用。
- en: 'Parameters:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**orm_execute_state** – an instance of [`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState") which contains all information about the current
    execution, as well as helper functions used to derive other commonly required
    information. See that object for details.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**orm_execute_state** – 一个[`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState")的实例，其中包含有关当前执行的所有信息，以及用于推导其他常见所需信息的辅助函数。有关详细信息，请参阅该对象。'
- en: See also
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Execute Events](session_events.html#session-execute-events) - top level documentation
    on how to use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[执行事件](session_events.html#session-execute-events) - 如何使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")的顶级文档'
- en: '[`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    - the object passed to the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event which contains all information
    about the statement to be invoked. It also provides an interface to extend the
    current statement, options, and parameters as well as an option that allows programmatic
    invocation of the statement at any point.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    - 传递给[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件的对象，其中包含有关要调用的语句的所有信息。它还提供了一个接口来扩展当前语句、选项和参数，以及一个选项，允许在任何时候以编程方式调用该语句。'
- en: '[ORM Query Events](examples.html#examples-session-orm-events) - includes examples
    of using [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM查询事件](examples.html#examples-session-orm-events) - 包括使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")的示例'
- en: '[Dogpile Caching](examples.html#examples-caching) - an example of how to integrate
    Dogpile caching with the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") making use of the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dogpile缓存](examples.html#examples-caching) - 一个示例，演示如何将Dogpile缓存与ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")集成，利用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子。'
- en: '[Horizontal Sharding](examples.html#examples-sharding) - the Horizontal Sharding
    example / extension relies upon the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook to invoke a SQL statement
    on multiple backends and return a merged result.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '[水平分片](examples.html#examples-sharding) - 水平分片示例/扩展依赖于[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子，在多个后端上调用SQL语句并返回合并结果。'
- en: New in version 1.4.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版中的新功能。
- en: '[PRE44]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Intercept the “loaded as persistent” transition for a specific object.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“加载为持久性”转换。
- en: 'Example argument forms:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE45]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This event is invoked within the ORM loading process, and is invoked very similarly
    to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    event. However, the event here is linkable to a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class or instance, rather than to a mapper or class
    hierarchy, and integrates with the other session lifecycle events smoothly. The
    object is guaranteed to be present in the session’s identity map when this event
    is called.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在ORM加载过程中调用，与[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")事件非常类似。但是，在这里，事件可链接到[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类或实例，而不是到映射器或类层次结构，并且与其他会话生命周期事件平滑集成。在调用此事件时，保证对象存在于会话的标识映射中。
- en: Note
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This event is invoked within the loader process before eager loaders may have
    been completed, and the object’s state may not be complete. Additionally, invoking
    row-level refresh operations on the object will place the object into a new loader
    context, interfering with the existing load context. See the note on [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") for background on making use of the [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") parameter, which works in the same manner as that
    of [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents"), in order to resolve this scenario.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在加载程序过程中调用，此时可能尚未完成渴望的加载器，并且对象的状态可能不完整。此外，在对象上调用行级刷新操作将使对象进入新的加载器上下文，从而干扰现有的加载上下文。请参阅[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")中有关使用[`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents")参数的说明，该参数的工作方式与[`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")相同，以解决此场景。
- en: 'Parameters:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的ORM映射实例。'
- en: See also
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE46]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Intercept the “pending to persistent”” transition for a specific object.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“待定到持久”的转换。
- en: 'Example argument forms:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE47]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This event is invoked within the flush process, and is similar to scanning the
    [`Session.new`](session_api.html#sqlalchemy.orm.Session.new "sqlalchemy.orm.Session.new")
    collection within the [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") event. However, in this case the object
    has already been moved to the persistent state when the event is called.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在刷新过程中调用，类似于扫描[`Session.new`](session_api.html#sqlalchemy.orm.Session.new
    "sqlalchemy.orm.Session.new")集合在[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush")事件中。但是，在这种情况下，当调用事件时，对象已经被移动到持久状态。
- en: 'Parameters:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的ORM映射实例。'
- en: See also
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE48]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Intercept the “pending to transient” transition for a specific object.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“待定到瞬态”的转换。
- en: 'Example argument forms:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE49]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This less common transition occurs when an pending object that has not been
    flushed is evicted from the session; this can occur when the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method rolls back the transaction, or when
    the [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge "sqlalchemy.orm.Session.expunge")
    method is used.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当尚未刷新的待定对象从会话中移除时，会发生这种较少见的转换；这可能发生在[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法回滚事务时，或者当使用[`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge")方法时。
- en: 'Parameters:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的 ORM 映射实例。'
- en: See also
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE50]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Intercept the “persistent to deleted” transition for a specific object.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“持久到已删除”转换。
- en: 'Example argument forms:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE51]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This event is invoked when a persistent object’s identity is deleted from the
    database within a flush, however the object still remains associated with the
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    until the transaction completes.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 flush 过程中从数据库中删除持久化对象的标识时，会触发此事件，但是对象仍然与[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关联，直到事务完成。
- en: If the transaction is rolled back, the object moves again to the persistent
    state, and the [`SessionEvents.deleted_to_persistent()`](#sqlalchemy.orm.SessionEvents.deleted_to_persistent
    "sqlalchemy.orm.SessionEvents.deleted_to_persistent") event is called. If the
    transaction is committed, the object becomes detached, which will emit the [`SessionEvents.deleted_to_detached()`](#sqlalchemy.orm.SessionEvents.deleted_to_detached
    "sqlalchemy.orm.SessionEvents.deleted_to_detached") event.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务回滚，则对象再次转移到持久状态，并调用 [`SessionEvents.deleted_to_persistent()`](#sqlalchemy.orm.SessionEvents.deleted_to_persistent
    "sqlalchemy.orm.SessionEvents.deleted_to_persistent") 事件。如果事务提交，则对象变为分离状态，这将触发
    [`SessionEvents.deleted_to_detached()`](#sqlalchemy.orm.SessionEvents.deleted_to_detached
    "sqlalchemy.orm.SessionEvents.deleted_to_detached") 事件。
- en: Note that while the [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") method is the primary public interface to mark
    an object as deleted, many objects get deleted due to cascade rules, which are
    not always determined until flush time. Therefore, there’s no way to catch every
    object that will be deleted until the flush has proceeded. the [`SessionEvents.persistent_to_deleted()`](#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") event is therefore invoked
    at the end of a flush.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然 [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    方法是将对象标记为已删除的主要公共接口，但由于级联规则的存在，许多对象会因级联规则而被删除，这些规则直到 flush 时才确定。因此，在 flush 进行之前，没有办法捕获每个将要删除的对象。因此，在
    flush 结束时会调用 [`SessionEvents.persistent_to_deleted()`](#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") 事件。
- en: See also
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE52]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Intercept the “persistent to detached” transition for a specific object.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“持久到分离”转换。
- en: 'Example argument forms:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE53]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This event is invoked when a persistent object is evicted from the session.
    There are many conditions that cause this to happen, including:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当持久化对象从会话中驱逐时，将会触发此事件。导致此情况发生的条件有很多，包括：
- en: using a method such as [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge") or [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge "sqlalchemy.orm.Session.expunge")
    或 [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    等方法
- en: Calling the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method, when the object was part of an INSERT
    statement for that session’s transaction
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对象属于该会话事务的 INSERT 语句的一部分时，调用 [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 方法
- en: 'Parameters:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的 ORM 映射实例。'
- en: '`deleted` – boolean. If True, indicates this object moved to the detached state
    because it was marked as deleted and flushed.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleted` – 布尔值。如果为 True，则表示此对象因标记为已删除并被 flush 而转移到分离状态。'
- en: See also
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE54]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Intercept the “persistent to transient” transition for a specific object.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“持久到瞬时”转换。
- en: 'Example argument forms:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE55]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This less common transition occurs when an pending object that has has been
    flushed is evicted from the session; this can occur when the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method rolls back the transaction.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 当已刷新的挂起对象从会话中被逐出时，发生了这种不太常见的转换；这可能发生在 [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 方法回滚事务时。
- en: 'Parameters:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的 ORM 映射实例。'
- en: See also
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE56]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Intercept the “transient to pending” transition for a specific object.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获特定对象的“瞬态到挂起”转换。
- en: 'Example argument forms:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE57]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This event is a specialization of the [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") event which is only invoked for this
    specific transition. It is invoked typically during the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") call.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件是 [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") 事件的一种特化，仅在此特定转换时调用。它通常在 [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") 调用期间被调用。
- en: 'Parameters:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的 ORM 映射实例。'
- en: See also
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: Mapper Events
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射器事件
- en: 'Mapper event hooks encompass things that happen as related to individual or
    multiple [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects, which are the central configurational object that maps a user-defined
    class to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. Types of things which occur at the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") level include:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器事件挂钩涵盖与单个或多个 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象相关的事情，这些对象是将用户定义的类映射到 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的中心配置对象。在 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 级别发生的类型包括：
- en: '**Per-object persistence operations** - the most popular mapper hooks are the
    unit-of-work hooks such as [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert"), [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update
    "sqlalchemy.orm.MapperEvents.after_update"), etc. These events are contrasted
    to the more coarse grained session-level events such as [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") in that they occur within the flush
    process on a per-object basis; while finer grained activity on an object is more
    straightforward, availability of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") features is limited.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个对象的持久性操作** - 最常见的映射器钩子是工作单元钩子，例如 [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert")、[`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update
    "sqlalchemy.orm.MapperEvents.after_update") 等。这些事件与更粗粒度的会话级事件（例如 [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")）形成对比，因为它们在刷新过程中以每个对象为基础发生；虽然对象上的更细粒度的活动更为直接，但
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    功能的可用性有限。'
- en: '**Mapper configuration events** - the other major class of mapper hooks are
    those which occur as a class is mapped, as a mapper is finalized, and when sets
    of mappers are configured to refer to each other. These events include [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class"), [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") at the individual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") level, and [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") and [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") at the level of collections of
    [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mapper 配置事件** - 另一个主要的映射器钩子类别是在类被映射时发生的事件，当映射器被完成时以及当映射器集合被配置为相互引用时。这些事件包括
    [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class")、[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") 和 [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") 在单个 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 级别，以及 [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") 和 [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 在一组 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象的级别。'
- en: '| Object Name | Description |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [MapperEvents](#sqlalchemy.orm.MapperEvents) | Define events specific to
    mappings. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| [MapperEvents](#sqlalchemy.orm.MapperEvents) | 定义特定于映射的事件。 |'
- en: '[PRE58]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Define events specific to mappings.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 定义特定于映射的事件。
- en: 'e.g.:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 例如（e.g.）：
- en: '[PRE59]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Available targets include:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的目标包括：
- en: mapped classes
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射的类（mapped classes）
- en: unmapped superclasses of mapped or to-be-mapped classes (using the `propagate=True`
    flag)
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已映射或待映射类的未映射超类（使用 `propagate=True` 标志）
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象'
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class itself indicates listening for all mappers.
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    类本身指示监听所有映射器。'
- en: Mapper events provide hooks into critical sections of the mapper, including
    those related to object instrumentation, object loading, and object persistence.
    In particular, the persistence methods [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert"), and [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") are popular places to augment the
    state being persisted - however, these methods operate with several significant
    restrictions. The user is encouraged to evaluate the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") and [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") methods as more flexible and user-friendly
    hooks in which to apply additional database state during a flush.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器事件提供了对映射器的关键部分的钩子，包括与对象工具、对象加载和对象持久性相关的部分。特别是，持久性方法 [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert") 和 [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") 是增强正在持久化状态的流行位置 - 但是，这些方法在几个重要限制下运行。鼓励用户评估
    [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush "sqlalchemy.orm.SessionEvents.before_flush")
    和 [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")
    方法，作为更灵活和用户友好的挂钩，在刷新期间应用额外的数据库状态。
- en: When using [`MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents"),
    several modifiers are available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 [`MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    时，[`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    函数提供了几个修饰符。
- en: 'Parameters:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 参数（Parameters）：
- en: '`propagate=False` – When True, the event listener should be applied to all
    inheriting mappers and/or the mappers of inheriting classes, as well as any mapper
    which is the target of this listener.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate=False` – 当为True时，事件监听器应应用于所有继承映射器和/或继承类的映射器，以及任何作为此监听器目标的映射器。'
- en: '`raw=False` – When True, the “target” argument passed to applicable event listener
    functions will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw=False` – 当为True时，传递给适用事件监听器函数的“target”参数将是实例的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")管理对象，而不是映射实例本身。'
- en: '`retval=False` –'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retval=False` –'
- en: 'when True, the user-defined event function must have a return value, the purpose
    of which is either to control subsequent event propagation, or to otherwise alter
    the operation in progress by the mapper. Possible return values are:'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，用户定义的事件函数必须具有返回值，其目的是控制后续事件传播，或以其他方式通过映射器改变正在进行的操作。可能的返回值包括：
- en: '`sqlalchemy.orm.interfaces.EXT_CONTINUE` - continue event processing normally.'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.interfaces.EXT_CONTINUE` - 正常继续事件处理。'
- en: '`sqlalchemy.orm.interfaces.EXT_STOP` - cancel all subsequent event handlers
    in the chain.'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.interfaces.EXT_STOP` - 取消链中所有后续事件处理程序。'
- en: other values - the return value specified by specific listeners.
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他值 - 特定监听器指定的返回值。
- en: '**Members**'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[after_configured()](#sqlalchemy.orm.MapperEvents.after_configured), [after_delete()](#sqlalchemy.orm.MapperEvents.after_delete),
    [after_insert()](#sqlalchemy.orm.MapperEvents.after_insert), [after_mapper_constructed()](#sqlalchemy.orm.MapperEvents.after_mapper_constructed),
    [after_update()](#sqlalchemy.orm.MapperEvents.after_update), [before_configured()](#sqlalchemy.orm.MapperEvents.before_configured),
    [before_delete()](#sqlalchemy.orm.MapperEvents.before_delete), [before_insert()](#sqlalchemy.orm.MapperEvents.before_insert),
    [before_mapper_configured()](#sqlalchemy.orm.MapperEvents.before_mapper_configured),
    [before_update()](#sqlalchemy.orm.MapperEvents.before_update), [dispatch](#sqlalchemy.orm.MapperEvents.dispatch),
    [instrument_class()](#sqlalchemy.orm.MapperEvents.instrument_class), [mapper_configured()](#sqlalchemy.orm.MapperEvents.mapper_configured)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '[after_configured()](#sqlalchemy.orm.MapperEvents.after_configured), [after_delete()](#sqlalchemy.orm.MapperEvents.after_delete),
    [after_insert()](#sqlalchemy.orm.MapperEvents.after_insert), [after_mapper_constructed()](#sqlalchemy.orm.MapperEvents.after_mapper_constructed),
    [after_update()](#sqlalchemy.orm.MapperEvents.after_update), [before_configured()](#sqlalchemy.orm.MapperEvents.before_configured),
    [before_delete()](#sqlalchemy.orm.MapperEvents.before_delete), [before_insert()](#sqlalchemy.orm.MapperEvents.before_insert),
    [before_mapper_configured()](#sqlalchemy.orm.MapperEvents.before_mapper_configured),
    [before_update()](#sqlalchemy.orm.MapperEvents.before_update), [dispatch](#sqlalchemy.orm.MapperEvents.dispatch),
    [instrument_class()](#sqlalchemy.orm.MapperEvents.instrument_class), [mapper_configured()](#sqlalchemy.orm.MapperEvents.mapper_configured)'
- en: '**Class signature**'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE60]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Called after a series of mappers have been configured.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为一系列映射器已配置完成后。
- en: 'Example argument forms:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE61]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event is invoked each time the
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function is invoked, after the function has completed its work. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")事件时，都会在[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")函数完成其工作后调用该事件。通常情况下，当映射首次被使用时，以及每当新的映射器可用并检测到新的映射器使用时，会自动调用[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")。
- en: Contrast this event to the [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event, which is called on a per-mapper
    basis while the configuration operation proceeds; unlike that event, when this
    event is invoked, all cross-configurations (e.g. backrefs) will also have been
    made available for any mappers that were pending. Also contrast to [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured"), which is invoked before the
    series of mappers has been configured.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")事件相比，该事件在配置操作进行时基于每个映射器调用；与该事件不同，当调用此事件时，所有交叉配置（例如反向引用）也将为任何待定的映射器提供。还与[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")进行对比，该事件在系列映射器配置之前被调用。
- en: 'This event can **only** be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class, and not to individual mappings or mapped classes.
    It is only invoked for all mappings as a whole:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类，而不适用于单个映射或映射类。它仅对所有映射作为一个整体调用：
- en: '[PRE62]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Theoretically this event is called once per application, but is actually called
    any time new mappers have been affected by a [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call. If new mappings are constructed after
    existing ones have already been used, this event will likely be called again.
    To ensure that a particular event is only called once and no further, the `once=True`
    argument (new in 0.9.4) can be applied:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，此事件每个应用程序调用一次，但实际上每当新映射器受到[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")调用的影响时都会调用。如果在已经使用现有映射之后构建新映射，则可能会再次调用此事件。为确保特定事件仅被调用一次且不再调用，可以应用`once=True`参数（自0.9.4版起新增）：
- en: '[PRE63]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: See also
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
- en: '[PRE64]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Receive an object instance after a DELETE statement has been emitted corresponding
    to that instance.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出与该实例对应的DELETE语句后接收一个对象实例。
- en: 'Example argument forms:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE65]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Note
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，**不**适用于[ORM-启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html#orm-expression-update-delete)中描述的ORM
    DML操作。要拦截ORM DML事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to emit additional SQL statements on the given connection
    as well as to perform application specific bookkeeping related to a deletion event.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于在给定连接上发出额外的SQL语句，以及执行与删除事件相关的应用程序特定的簿记。
- en: The event is often called for a batch of objects of the same class after their
    DELETE statements have been emitted at once in a previous step.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 该事件通常在一批相同类的对象的DELETE语句在先前步骤中一次性发出后被调用。
- en: Warning
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 映射级刷新事件仅允许对仅限于操作的行本地属性进行**非常有限的操作**，同时允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何SQL。**请完整阅读**[映射级刷新事件](session_events.html#session-persistence-mapper)中关于使用这些方法的指南；通常，应优先使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行一般性的刷新更改。
- en: 'Parameters:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit DELETE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出DELETE语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这为特定于此实例的目标数据库上的当前事务提供了一个句柄。'
- en: '`target` – the mapped instance being deleted. If the event is configured with
    `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 被删除的映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE66]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Receive an object instance after an INSERT statement is emitted corresponding
    to that instance.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出对应实例的INSERT语句后，会收到一个对象实例。
- en: 'Example argument forms:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE67]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Note
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，**不**适用于描述在[ORM-启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html#orm-expression-update-delete)中的ORM
    DML操作。要拦截ORM DML事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to modify in-Python-only state on the instance after an INSERT
    occurs, as well as to emit additional SQL statements on the given connection.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于修改实例发生INSERT后的仅Python状态，并在给定连接上发出附加的SQL语句。
- en: The event is often called for a batch of objects of the same class after their
    INSERT statements have been emitted at once in a previous step. In the extremely
    rare case that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object can be configured with `batch=False`, which will
    cause batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前步骤中一次性发出它们的INSERT语句后，通常会为同一类的一批对象调用此事件。在极为罕见的情况下，如果这不是理想的情况，可以使用`batch=False`配置[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象，这将导致实例批次被拆分为单个（性能较差）事件->持久化->事件步骤。
- en: Warning
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 仅允许在映射器级别刷新事件上执行**非常有限的操作**，仅限于对正在操作的行本地属性的操作，并允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何SQL。**请完全阅读**[映射器级刷新事件](session_events.html#session-persistence-mapper)中的注意事项，以获取有关使用这些方法的指南；通常，应优先使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行一般刷新更改。
- en: 'Parameters:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit INSERT statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出INSERT语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这提供了一个句柄到目标数据库上的当前事务，该事务特定于此实例。'
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在持久化的映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE68]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Receive a class and mapper when the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") has been fully constructed.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")完全构建完成时，接收一个类和映射器。
- en: 'Example argument forms:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE69]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This event is called after the initial constructor for [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") completes. This occurs after the [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class") event and after the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") has done an initial pass of its arguments to generate
    its collection of [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects, which are accessible via the [`Mapper.get_property()`](mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property") method and the [`Mapper.iterate_properties`](mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties") attribute.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的初始构造函数完成后调用。这发生在[`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class")事件之后，以及在[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对其参数进行初始遍历以生成其[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象集合之后，这些对象可通过[`Mapper.get_property()`](mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property")方法和[`Mapper.iterate_properties`](mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties")属性访问。
- en: This event differs from the [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event in that it is invoked
    within the constructor for [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"),
    rather than within the [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") process. Currently, this event is the only
    one which is appropriate for handlers that wish to create additional mapped classes
    in response to the construction of this [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), which will be part of the same configure step when [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") next runs.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与 [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") 事件不同之处在于，它在 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 的构造函数内部调用，而不是在 [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 进程内调用。目前，此事件是唯一适用于希望在构造此 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 时创建其他映射类的处理程序的事件，这些映射类将在下次运行 [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 时成为同一配置步骤的一部分。
- en: New in version 2.0.2.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Versioning Objects](examples.html#examples-versioning) - an example which
    illustrates the use of the [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event to create new mappers
    to record change-audit histories on objects.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象版本控制](examples.html#examples-versioning) - 一个示例，说明使用 [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") 事件创建新的映射器以记录对象的更改审计历史。'
- en: '[PRE70]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Receive an object instance after an UPDATE statement is emitted corresponding
    to that instance.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出对应于该实例的 UPDATE 语句后接收对象实例。
- en: 'Example argument forms:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE71]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Note
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于 [会话刷新操作](session_basics.html#session-flushing)，并且**不**适用于在 [ORM-Enabled
    INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html#orm-expression-update-delete) 中描述的
    ORM DML 操作。要拦截 ORM DML 事件，请使用 [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to modify in-Python-only state on the instance after an UPDATE
    occurs, as well as to emit additional SQL statements on the given connection.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于在发生 UPDATE 后修改仅在 Python 中的实例状态，以及在给定连接上发出额外的 SQL 语句。
- en: This method is called for all instances that are marked as “dirty”, *even those
    which have no net changes to their column-based attributes*, and for which no
    UPDATE statement has proceeded. An object is marked as dirty when any of its column-based
    attributes have a “set attribute” operation called or when any of its collections
    are modified. If, at update time, no column-based attributes have any net changes,
    no UPDATE statement will be issued. This means that an instance being sent to
    [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update "sqlalchemy.orm.MapperEvents.after_update")
    is *not* a guarantee that an UPDATE statement has been issued.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法对所有标记为“脏”的实例进行调用，*甚至对其列基属性没有净变化* 的实例，并且没有进行 UPDATE 语句。当任何列基属性的“设置属性”操作被调用或任何集合被修改时，对象被标记为脏。如果在更新时，没有列基属性有任何净变化，将不会发出
    UPDATE 语句。这意味着发送到 [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update
    "sqlalchemy.orm.MapperEvents.after_update") 的实例*不*保证已发出 UPDATE 语句。
- en: To detect if the column-based attributes on the object have net changes, and
    therefore resulted in an UPDATE statement, use `object_session(instance).is_modified(instance,
    include_collections=False)`.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测对象上基于列的属性是否有净变化，并因此导致 UPDATE 语句，请使用 `object_session(instance).is_modified(instance,
    include_collections=False)`。
- en: The event is often called for a batch of objects of the same class after their
    UPDATE statements have been emitted at once in a previous step. In the extremely
    rare case that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") can be configured with `batch=False`, which will cause
    batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 该事件通常在一系列相同类的对象的 UPDATE 语句一次性发出之后被调用。在极少数情况下，如果这不是期望的情况，那么可以将 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 配置为 `batch=False`，这将导致实例批次被拆分为单个（性能较差）的事件->持久化->事件步骤。
- en: Warning
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器级别的刷新事件仅允许对仅限于正在操作的行的属性执行**非常有限的操作**，以及允许在给定的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上发出任何 SQL。**请完全阅读** [映射器级刷新事件](session_events.html#session-persistence-mapper)
    备注中关于使用这些方法的指导原则；通常，应优先考虑使用 [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") 方法进行通用刷新更改。
- en: 'Parameters:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit UPDATE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出 UPDATE 语句的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这提供了一个句柄到当前事务的目标数据库，特定于这个实例。'
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在持久化的映射实例。如果事件配置为 `raw=True`，那么这将是与实例相关联的 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 状态管理对象。'
- en: 'Returns:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: No return value is supported by this event.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久化事件](session_events.html#session-persistence-events)'
- en: '[PRE72]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Called before a series of mappers have been configured.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在一系列映射器被配置之前调用。
- en: 'Example argument forms:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE73]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event is invoked each time the
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function is invoked, before the function has done any of its work. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") 事件在每次调用 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 函数时被调用，在该函数执行任何工作之前。'
- en: 'This event can **only** be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class, and not to individual mappings or mapped classes.
    It is only invoked for all mappings as a whole:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**可应用于 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    类，而不是单个映射或映射类。它仅对所有映射作为整体调用：
- en: '[PRE74]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Contrast this event to [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), which is invoked after the series
    of mappers has been configured, as well as [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured"), which are both invoked on a
    per-mapper basis.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 将此事件与 [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 进行对比，后者在一系列映射器配置完成后调用，以及 [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") 和 [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")，这两者都在每个映射器基础上调用。
- en: 'Theoretically this event is called once per application, but is actually called
    any time new mappers are to be affected by a [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call. If new mappings are constructed after
    existing ones have already been used, this event will likely be called again.
    To ensure that a particular event is only called once and no further, the `once=True`
    argument (new in 0.9.4) can be applied:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，此事件每个应用程序调用一次，但实际上，任何时候新的映射器要受 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 调用影响时都会调用此事件。如果在使用现有映射器之后构造新映射，则可能会再次调用此事件。要确保特定事件仅被调用一次且不再调用，可以应用
    `once=True` 参数（0.9.4 中新增）：
- en: '[PRE75]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: See also
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
- en: '[PRE76]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Receive an object instance before a DELETE statement is emitted corresponding
    to that instance.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出与该实例对应的 DELETE 语句之前接收一个对象实例。
- en: 'Example argument forms:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE77]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Note
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，**不适用于**描述在[ORM 启用的
    INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html#orm-expression-update-delete)中的
    ORM DML 操作。要拦截 ORM DML 事件，请使用 [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to emit additional SQL statements on the given connection
    as well as to perform application specific bookkeeping related to a deletion event.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于在给定连接上发出附加的 SQL 语句，以及执行与删除事件相关的应用程序特定簿记。
- en: The event is often called for a batch of objects of the same class before their
    DELETE statements are emitted at once in a later step.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续步骤中一次性发出一批相同类别对象的 DELETE 语句之前，通常会为这个事件调用一次。
- en: Warning
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器级刷新事件仅允许对仅针对正在操作的行的属性进行**非常有限的操作**，以及允许在给定的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上发出任何 SQL。**请务必完整阅读** [映射器级刷新事件](session_events.html#session-persistence-mapper)
    中的注释，以获取有关使用这些方法的指导；通常情况下，应首选 [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") 方法进行一般性的刷新更改。
- en: 'Parameters:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit DELETE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出DELETE语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这提供了一个句柄到当前事务的目标数据库，特定于此实例。'
- en: '`target` – the mapped instance being deleted. If the event is configured with
    `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在删除的映射实例。如果事件配置为`raw=True`，则这将是与实例相关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE78]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Receive an object instance before an INSERT statement is emitted corresponding
    to that instance.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出与该实例对应的INSERT语句之前接收对象实例。
- en: 'Example argument forms:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE79]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Note
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅适用于**[会话刷新操作](session_basics.html#session-flushing)，并**不适用于**描述在[ORM启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html#orm-expression-update-delete)中的ORM
    DML操作。要拦截ORM DML事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to modify local, non-object related attributes on the instance
    before an INSERT occurs, as well as to emit additional SQL statements on the given
    connection.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于修改实例之前的本地、非对象相关属性，并在给定的连接上发出附加SQL语句。
- en: The event is often called for a batch of objects of the same class before their
    INSERT statements are emitted at once in a later step. In the extremely rare case
    that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object can be configured with `batch=False`, which will
    cause batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在稍后的步骤中，通常会为同一类对象的一批对象调用此事件，然后在一次性发出它们的INSERT语句之前。在极少数情况下，如果这不是所需的，可以使用[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象配置`batch=False`，这将导致实例的批处理被分解为单个（性能较差的）事件->持久性->事件步骤。
- en: Warning
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: Mapper级别的刷新事件仅允许**非常有限的操作**，仅限于操作中的行本地属性，并允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何SQL。**请完全阅读**[Mapper级别的刷新事件](session_events.html#session-persistence-mapper)中的注意事项，以获取使用这些方法的指南；通常，应优先考虑[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行刷新时的一般更改。
- en: 'Parameters:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit INSERT statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出INSERT语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这提供了一个句柄进入目标数据库上的当前事务，特定于此实例。'
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在持久化的映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE80]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Called right before a specific mapper is to be configured.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定映射器配置之前调用。
- en: 'Example argument forms:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE81]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: This event is intended to allow a specific mapper to be skipped during the configure
    step, by returning the `interfaces.EXT_SKIP` symbol which indicates to the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call that this particular mapper (or hierarchy
    of mappers, if `propagate=True` is used) should be skipped in the current configuration
    run. When one or more mappers are skipped, the he “new mappers” flag will remain
    set, meaning the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function will continue to be called when mappers
    are used, to continue to try to configure all available mappers.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件旨在允许在配置步骤中跳过特定的映射器，通过返回`interfaces.EXT_SKIP`符号，该符号指示给[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")调用，表明应跳过当前配置运行中的此特定映射器（或使用`propagate=True`时的映射器层次结构）。当跳过一个或多个映射器时，"new
    mappers"标志将保持设置，这意味着在使用映射器时将继续调用[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")函数，以继续尝试配置所有可用的映射器。
- en: In comparison to the other configure-level events, [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured"), [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured"), the :meth;`.MapperEvents.before_mapper_configured`
    event provides for a meaningful return value when it is registered with the `retval=True`
    parameter.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他配置级别事件相比，[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")、[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")和[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")，:meth;`.MapperEvents.before_mapper_configured`事件在注册时提供有意义的返回值，当使用`retval=True`参数注册时。
- en: New in version 1.3.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新内容。
- en: 'e.g.:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE82]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: See also
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
- en: '[PRE83]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Receive an object instance before an UPDATE statement is emitted corresponding
    to that instance.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出与该实例对应的UPDATE语句之前接收对象实例。
- en: 'Example argument forms:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE84]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Note
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，**不**适用于在[ORM-启用的
    INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html#orm-expression-update-delete)中描述的
    ORM DML 操作。要拦截 ORM DML 事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to modify local, non-object related attributes on the instance
    before an UPDATE occurs, as well as to emit additional SQL statements on the given
    connection.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于在更新发生之前修改实例上的本地、与对象无关的属性，以及在给定连接上发出附加的 SQL 语句。
- en: This method is called for all instances that are marked as “dirty”, *even those
    which have no net changes to their column-based attributes*. An object is marked
    as dirty when any of its column-based attributes have a “set attribute” operation
    called or when any of its collections are modified. If, at update time, no column-based
    attributes have any net changes, no UPDATE statement will be issued. This means
    that an instance being sent to [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") is *not* a guarantee that an UPDATE
    statement will be issued, although you can affect the outcome here by modifying
    attributes so that a net change in value does exist.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将为所有标记为“脏”的实例调用，*即使它们的基于列的属性没有净变化*。当对其基于列的属性之一调用“设置属性”操作或修改其任何集合时，对象将被标记为脏。如果在更新时，没有基于列的属性有任何净变化，将不会发出
    UPDATE 语句。这意味着将发送到[`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update")的实例*不*保证会发出 UPDATE 语句，尽管您可以通过修改属性以存在值的净变化来影响结果。
- en: To detect if the column-based attributes on the object have net changes, and
    will therefore generate an UPDATE statement, use `object_session(instance).is_modified(instance,
    include_collections=False)`.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测对象上的基于列的属性是否有净变化，并因此生成 UPDATE 语句，请使用 `object_session(instance).is_modified(instance,
    include_collections=False)`。
- en: The event is often called for a batch of objects of the same class before their
    UPDATE statements are emitted at once in a later step. In the extremely rare case
    that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") can be configured with `batch=False`, which will cause
    batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 在稍后的步骤中，通常会一次调用相同类的一批对象的此事件，然后发出它们的 UPDATE 语句。在极其罕见的情况下，如果这不是理想的情况，可以将[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")配置为 `batch=False`，这将导致将实例批处理为单个（并且性能更差）事件->持久化->事件步骤。
- en: Warning
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器级刷新事件仅允许对仅限于正在操作的行的属性进行**非常有限的操作**，同时允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何 SQL。 **请务必阅读**[映射器级刷新事件](session_events.html#session-persistence-mapper)中的注意事项，以获取有关使用这些方法的指导；一般来说，应优先考虑[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行通用刷新更改。
- en: 'Parameters:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit UPDATE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出UPDATE语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这为当前事务提供了一个句柄，该事务针对与此实例特定相关的目标数据库。'
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在持久化的映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅：
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久化事件](session_events.html#session-persistence-events)'
- en: '[PRE85]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: reference back to the _Dispatch class.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯到_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 双向关联到_Dispatch._events
- en: '[PRE86]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Receive a class when the mapper is first constructed, before instrumentation
    is applied to the mapped class.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次构建映射器时，尚未应用到映射类的仪器。
- en: 'Example argument forms:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE87]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: This event is the earliest phase of mapper construction. Most attributes of
    the mapper are not yet initialized. To receive an event within initial mapper
    construction where basic state is available such as the [`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") collection, the [`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") event may be a better
    choice.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件是映射器构造的最早阶段。大多数映射器属性尚未初始化。要在初始映射器构造中接收事件，其中提供了基本状态，例如[`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")集合，可能更好地选择[`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")事件。
- en: 'This listener can either be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class overall, or to any un-mapped class which serves
    as a base for classes that will be mapped (using the `propagate=True` flag):'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 此侦听器可以应用于整个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类，也可以应用于任何用作将要映射的类的基类（使用`propagate=True`标志）：
- en: '[PRE88]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Parameters:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标是[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`class_` – the mapped class.'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 映射类。'
- en: See also
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅：
- en: '[`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")'
- en: '[PRE89]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Called when a specific mapper has completed its own configuration within the
    scope of the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")调用范围内，特定映射器完成其自身配置时调用。
- en: 'Example argument forms:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE90]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event is invoked for each mapper
    that is encountered when the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function proceeds through the current list
    of not-yet-configured mappers. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")事件在[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")函数通过当前未配置的映射器列表时遇到每个映射器时，将被调用。[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")通常在映射首次使用时自动调用，以及每当新映射器可用并检测到新的映射器使用时。
- en: When the event is called, the mapper should be in its final state, but **not
    including backrefs** that may be invoked from other mappers; they might still
    be pending within the configuration operation. Bidirectional relationships that
    are instead configured via the [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") argument *will* be fully available, since this
    style of relationship does not rely upon other possibly-not-configured mappers
    to know that they exist.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 当事件被调用时，映射器应该处于其最终状态，但**不包括**可能从其他映射器调用的反向引用；它们可能仍在配置操作中待处理。而通过 [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") 参数配置的双向关系*将*完全可用，因为这种关系样式不依赖于其他可能尚未配置的映射器来知道它们的存在。
- en: For an event that is guaranteed to have **all** mappers ready to go including
    backrefs that are defined only on other mappings, use the [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event; this event invokes only
    after all known mappings have been fully configured.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个确保**所有**映射器都准备就绪的事件，包括仅在其他映射上定义的反向引用，使用 [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 事件；该事件仅在所有已知映射完全配置后才调用。
- en: The [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event, unlike [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") or [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), is called for each mapper/class
    individually, and the mapper is passed to the event itself. It also is called
    exactly once for a particular mapper. The event is therefore useful for configurational
    steps that benefit from being invoked just once on a specific mapper basis, which
    don’t require that “backref” configurations are necessarily ready yet.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") 事件，与 [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") 或 [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 不同，对于每个映射器/类分别调用，且映射器本身被传递给事件。它也只对特定的映射器调用一次。因此，该事件对于一次仅在特定映射器基础上受益的配置步骤非常有用，不要求“backref”配置必须已准备好。'
- en: 'Parameters:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    是此事件的目标。'
- en: '`class_` – the mapped class.'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 映射类。'
- en: See also
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: Instance Events
  id: totrans-568
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例事件
- en: Instance events are focused on the construction of ORM mapped instances, including
    when they are instantiated as [transient](../glossary.html#term-transient) objects,
    when they are loaded from the database and become [persistent](../glossary.html#term-persistent)
    objects, as well as when database refresh or expiration operations occur on the
    object.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 实例事件专注于 ORM 映射实例的构造，包括当它们被实例化为[瞬态](../glossary.html#term-transient)对象时，当它们从数据库加载并成为[持久化](../glossary.html#term-persistent)对象时，以及当数据库刷新或对象上的过期操作发生时。
- en: '| Object Name | Description |'
  id: totrans-570
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-571
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [InstanceEvents](#sqlalchemy.orm.InstanceEvents) | Define events specific
    to object lifecycle. |'
  id: totrans-572
  prefs: []
  type: TYPE_TB
  zh: '[InstanceEvents](#sqlalchemy.orm.InstanceEvents) | 定义了与对象生命周期特定的事件。'
- en: '[PRE91]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Define events specific to object lifecycle.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了与对象生命周期特定的事件。
- en: 'e.g.:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE92]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Available targets include:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的目标包括：
- en: mapped classes
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射类
- en: unmapped superclasses of mapped or to-be-mapped classes (using the `propagate=True`
    flag)
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射或将要映射的类的未映射超类（使用 `propagate=True` 标志）
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象'
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class itself indicates listening for all mappers.
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类本身指示监听所有映射器。'
- en: Instance events are closely related to mapper events, but are more specific
    to the instance and its instrumentation, rather than its system of persistence.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 实例事件与映射器事件密切相关，但更具体于实例及其仪器，而不是其持久性系统。
- en: When using [`InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents"),
    several modifiers are available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[`InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents")时，[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")函数提供了几个修饰符。
- en: 'Parameters:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`propagate=False` – When True, the event listener should be applied to all
    inheriting classes as well as the class which is the target of this listener.'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate=False` – 当为True时，事件监听器应该应用于所有继承类��以及作为此监听器目标的类。'
- en: '`raw=False` – When True, the “target” argument passed to applicable event listener
    functions will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw=False` – 当为True时，传递给适用事件监听器函数的“target”参数将是实例的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")管理对象，而不是映射实例本身。'
- en: '`restore_load_context=False` –'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restore_load_context=False` –'
- en: Applies to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") and [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") events. Restores the loader context of
    the object when the event hook is complete, so that ongoing eager load operations
    continue to target the object appropriately. A warning is emitted if the object
    is moved to a new loader context from within one of these events if this flag
    is not set.
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 适用于[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")和[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")事件。在事件挂钩完成时恢复对象的加载器上下文，以便持续的急切加载操作继续适当地针对对象。如果未设置此标志，并且在这些事件之一中将对象移动到新的加载器上下文，则会发出警告。
- en: New in version 1.3.14.
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.3.14起新增。
- en: '**Members**'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispatch](#sqlalchemy.orm.InstanceEvents.dispatch), [expire()](#sqlalchemy.orm.InstanceEvents.expire),
    [first_init()](#sqlalchemy.orm.InstanceEvents.first_init), [init()](#sqlalchemy.orm.InstanceEvents.init),
    [init_failure()](#sqlalchemy.orm.InstanceEvents.init_failure), [load()](#sqlalchemy.orm.InstanceEvents.load),
    [pickle()](#sqlalchemy.orm.InstanceEvents.pickle), [refresh()](#sqlalchemy.orm.InstanceEvents.refresh),
    [refresh_flush()](#sqlalchemy.orm.InstanceEvents.refresh_flush), [unpickle()](#sqlalchemy.orm.InstanceEvents.unpickle)'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispatch](#sqlalchemy.orm.InstanceEvents.dispatch), [expire()](#sqlalchemy.orm.InstanceEvents.expire),
    [first_init()](#sqlalchemy.orm.InstanceEvents.first_init), [init()](#sqlalchemy.orm.InstanceEvents.init),
    [init_failure()](#sqlalchemy.orm.InstanceEvents.init_failure), [load()](#sqlalchemy.orm.InstanceEvents.load),
    [pickle()](#sqlalchemy.orm.InstanceEvents.pickle), [refresh()](#sqlalchemy.orm.InstanceEvents.refresh),
    [refresh_flush()](#sqlalchemy.orm.InstanceEvents.refresh_flush), [unpickle()](#sqlalchemy.orm.InstanceEvents.unpickle)'
- en: '**Class signature**'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE93]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: reference back to the _Dispatch class.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯到_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 双向反对_Dispatch._events
- en: '[PRE94]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Receive an object instance after its attributes or some subset have been expired.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些属性或其子集已过期后接收对象实例。
- en: 'Example argument forms:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE95]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: ‘keys’ is a list of attribute names. If None, the entire state was expired.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: ‘keys’是属性名称列表。如果为None，则整个状态已过期。
- en: 'Parameters:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`attrs` – sequence of attribute names which were expired, or None if all attributes
    were expired.'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attrs` – 已过期的属性名称序列，如果所有属性都已过期，则为None。'
- en: '[PRE96]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Called when the first instance of a particular mapping is called.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用特定映射的第一个实例时调用。
- en: 'Example argument forms:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE97]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: This event is called when the `__init__` method of a class is called the first
    time for that particular class. The event invokes before `__init__` actually proceeds
    as well as before the [`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init
    "sqlalchemy.orm.InstanceEvents.init") event is invoked.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 当为该特定类第一次调用`__init__`方法时，调用此事件。事件在`__init__`实际进行之前以及在调用[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init
    "sqlalchemy.orm.InstanceEvents.init")事件之前被调用。
- en: '[PRE98]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Receive an instance when its constructor is called.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数被调用时接收一个实例。
- en: 'Example argument forms:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE99]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: This method is only called during a userland construction of an object, in conjunction
    with the object’s constructor, e.g. its `__init__` method. It is not called when
    an object is loaded from the database; see the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") event in order to intercept a database load.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法只在对象的用户空间构造期间调用，与对象的构造函数一起，例如它的`__init__`方法。当对象从数据库加载时不会调用它；请参见[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")事件以拦截数据库加载。
- en: The event is called before the actual `__init__` constructor of the object is
    called. The `kwargs` dictionary may be modified in-place in order to affect what
    is passed to `__init__`.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 事件在实际调用对象的`__init__`构造函数之前被调用。`kwargs`字典可以被就地修改，以影响传递给`__init__`的内容。
- en: 'Parameters:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射的实例。如果事件配置为`raw=True`，那么这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`args` – positional arguments passed to the `__init__` method. This is passed
    as a tuple and is currently immutable.'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args` – 传递给`__init__`方法的位置参数。这被传递为一个元组，目前是不可变的。'
- en: '`kwargs` – keyword arguments passed to the `__init__` method. This structure
    *can* be altered in place.'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – 传递给`__init__`方法的关键字参数。这个结构*可以*被就地修改。'
- en: See also
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`InstanceEvents.init_failure()`](#sqlalchemy.orm.InstanceEvents.init_failure
    "sqlalchemy.orm.InstanceEvents.init_failure")'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.init_failure()`](#sqlalchemy.orm.InstanceEvents.init_failure
    "sqlalchemy.orm.InstanceEvents.init_failure")'
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
- en: '[PRE100]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Receive an instance when its constructor has been called, and raised an exception.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例构造函数被调用并引发异常时接收一个实例。
- en: 'Example argument forms:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE101]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: This method is only called during a userland construction of an object, in conjunction
    with the object’s constructor, e.g. its `__init__` method. It is not called when
    an object is loaded from the database.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法只在对象的用户空间构造期间调用，与对象的构造函数一起，例如它的`__init__`方法。当对象从数据库加载时不会调用它。
- en: The event is invoked after an exception raised by the `__init__` method is caught.
    After the event is invoked, the original exception is re-raised outwards, so that
    the construction of the object still raises an exception. The actual exception
    and stack trace raised should be present in `sys.exc_info()`.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 事件在`__init__`方法引发异常后被调用。事件被调用后，原始异常被重新引发，以便对象的构造仍然引发异常。引发的实际异常和堆栈跟踪应该存在于`sys.exc_info()`中。
- en: 'Parameters:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射的实例。如果事件配置为`raw=True`，那么这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`args` – positional arguments that were passed to the `__init__` method.'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args` – 传递给`__init__`方法的位置参数。'
- en: '`kwargs` – keyword arguments that were passed to the `__init__` method.'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – 传递给`__init__`方法的关键字参数。'
- en: See also
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
- en: '[PRE102]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Receive an object instance after it has been created via `__new__`, and after
    initial attribute population has occurred.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过`__new__`创建对象实例并进行初始属性填充后接收对象实例。
- en: 'Example argument forms:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE103]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: This typically occurs when the instance is created based on incoming result
    rows, and is only called once for that instance’s lifetime.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常发生在基于传入结果行创建实例时，并且仅在该实例的生命周期中调用一次。
- en: Warning
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: During a result-row load, this event is invoked when the first row received
    for this instance is processed. When using eager loading with collection-oriented
    attributes, the additional rows that are to be loaded / processed in order to
    load subsequent collection items have not occurred yet. This has the effect both
    that collections will not be fully loaded, as well as that if an operation occurs
    within this event handler that emits another database load operation for the object,
    the “loading context” for the object can change and interfere with the existing
    eager loaders still in progress.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果行加载期间，当处理此实例接收到的第一行时，将调用此事件。当使用集合导向属性进行急加载时，尚未发生要加载/处理的附加行，以便加载后续集合项。这既导致集合不会完全加载，也导致如果在此事件处理程序中发生操作，该操作会为对象发出另一个数据库加载操作，则对象的“加载上下文”可能会发生变化并干扰现有的急加载器仍在进行中。
- en: 'Examples of what can cause the “loading context” to change within the event
    handler include, but are not necessarily limited to:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 可能导致事件处理程序内“加载上下文”更改的示例包括但不限于：
- en: accessing deferred attributes that weren’t part of the row, will trigger an
    “undefer” operation and refresh the object
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问未包含在行中的延迟属性将触发“取消延迟”操作并刷新对象
- en: accessing attributes on a joined-inheritance subclass that weren’t part of the
    row, will trigger a refresh operation.
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问联合继承子类上不属于行的属性将触发刷新操作。
- en: 'As of SQLAlchemy 1.3.14, a warning is emitted when this occurs. The [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") option may be used on the event to prevent this
    warning; this will ensure that the existing loading context is maintained for
    the object after the event is called:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 1.3.14开始，当发生此情况时会发出警告。可以在事件上使用[`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")选项来防止此警告；这将确保在调用事件后保持对象的现有加载上下文：
- en: '[PRE104]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Changed in version 1.3.14: Added [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") and [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") flags which apply to “on load” events, which will
    ensure that the loading context for an object is restored when the event hook
    is complete; a warning is emitted if the load context of the object changes without
    this flag being set.'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3.14开始更改：添加了[`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")和[`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents")标志，适用于“加载”事件，确保在事件钩子完成时恢复对象的加载上下文；如果对象的加载上下文在未设置此标志的情况下发生更改，则会发出警告。
- en: The [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    event is also available in a class-method decorator format called [`reconstructor()`](mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor").
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    事件也可以以类方法装饰器的形式使用，称为[`reconstructor()`](mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor")。'
- en: 'Parameters:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`context` – the [`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") corresponding to the current [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in progress. This argument may be `None` if the load does
    not correspond to a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query"),
    such as during [`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 与当前进行中的[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对应的[`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext")。如果加载不对应于[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")，例如在[`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")期间，此参数可能为`None`���'
- en: See also
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '[在加载过程中保持非映射状态](mapping_styles.html#mapped-class-load-events)'
- en: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
- en: '[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh "sqlalchemy.orm.InstanceEvents.refresh")'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh "sqlalchemy.orm.InstanceEvents.refresh")'
- en: '[`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")'
- en: '[PRE105]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Receive an object instance when its associated state is being pickled.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 在关联状态被pickle时接收一个对象实例。
- en: 'Example argument forms:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE106]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Parameters:'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`state_dict` – the dictionary returned by `__getstate__`, containing the state
    to be pickled.'
  id: totrans-664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state_dict` – 由`__getstate__`返回的包含要pickle的状态的字典。'
- en: '[PRE107]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Receive an object instance after one or more attributes have been refreshed
    from a query.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 在从查询中刷新一个或多个属性后接收一个对象实例。
- en: 'Example argument forms:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE108]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Contrast this to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") method, which is invoked when the object
    is first loaded from a query.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")方法形成对比，该方法在对象首次从查询中加载时被调用。
- en: Note
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This event is invoked within the loader process before eager loaders may have
    been completed, and the object’s state may not be complete. Additionally, invoking
    row-level refresh operations on the object will place the object into a new loader
    context, interfering with the existing load context. See the note on [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") for background on making use of the [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") parameter, in order to resolve this scenario.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载程序完成之前，此事件在加载程序进程中被调用，对象的状态可能不完整。此外，在对象上调用行级刷新操作将使对象进入新的加载程序上下文，干扰现有的加载上下文。有关如何使用[`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")参数解决此情况的背景，请参阅有关[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")的注释。
- en: 'Parameters:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`context` – the [`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") corresponding to the current [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in progress.'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 与当前进行中的[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对应的[`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext")。'
- en: '`attrs` – sequence of attribute names which were populated, or None if all
    column-mapped, non-deferred attributes were populated.'
  id: totrans-675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attrs` – 已填充的属性名称序列，如果所有列映射的非延迟属性都已填充，则为None。'
- en: See also
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '[在加载时保持未映射状态](mapping_styles.html#mapped-class-load-events)'
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
- en: '[PRE109]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Receive an object instance after one or more attributes that contain a column-level
    default or onupdate handler have been refreshed during persistence of the object’s
    state.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象状态持久化期间，接收一个包含一个或多个包含列级默认值或更新处理程序的属性已被刷新的对象实例。
- en: 'Example argument forms:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE110]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: This event is the same as [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") except it is invoked within the unit
    of work flush process, and includes only non-primary-key columns that have column
    level default or onupdate handlers, including Python callables as well as server
    side defaults and triggers which may be fetched via the RETURNING clause.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件与 [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh "sqlalchemy.orm.InstanceEvents.refresh")
    相同，只是在工作单元刷新过程中调用，并且仅包括具有列级默认值或更新处理程序的非主键列，包括 Python 可调用对象以及可能通过 RETURNING 子句获取的服务器端默认值和触发器。
- en: Note
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While the [`InstanceEvents.refresh_flush()`](#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") event is triggered for an object
    that was INSERTed as well as for an object that was UPDATEd, the event is geared
    primarily towards the UPDATE process; it is mostly an internal artifact that INSERT
    actions can also trigger this event, and note that **primary key columns for an
    INSERTed row are explicitly omitted** from this event. In order to intercept the
    newly INSERTed state of an object, the [`SessionEvents.pending_to_persistent()`](#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent") and [`MapperEvents.after_insert()`](#sqlalchemy.orm.MapperEvents.after_insert
    "sqlalchemy.orm.MapperEvents.after_insert") are better choices.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`InstanceEvents.refresh_flush()`](#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") 事件触发时，对于一个被插入的对象以及一个被更新的对象，该事件主要针对更新过程；这主要是一个内部工件，指出插入动作也可以触发此事件，注意**插入行的主键列在此事件中被明确省略**。为了拦截对象的新插入状态，[`SessionEvents.pending_to_persistent()`](#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent") 和 [`MapperEvents.after_insert()`](#sqlalchemy.orm.MapperEvents.after_insert
    "sqlalchemy.orm.MapperEvents.after_insert") 是更好的选择。
- en: 'Parameters:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为 `raw=True`，则此处将是与实例关联的 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 状态管理对象。'
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush_context` – 处理刷新细节的内部 [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") 对象。'
- en: '`attrs` – sequence of attribute names which were populated.'
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attrs` – 已填充的属性名称序列。'
- en: See also
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '[在加载时保持未映射状态](mapping_styles.html#mapped-class-load-events)'
- en: '[Fetching Server-Generated Defaults](persistence_techniques.html#orm-server-defaults)'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '[获取服务器生成的默认值](persistence_techniques.html#orm-server-defaults)'
- en: '[Column INSERT/UPDATE Defaults](../core/defaults.html)'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '[列插入/更新默认值](../core/defaults.html)'
- en: '[PRE111]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Receive an object instance after its associated state has been unpickled.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 在相关联的状态被反序列化后，接收一个对象实例。
- en: 'Example argument forms:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE112]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Parameters:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为 `raw=True`，则此处将是与实例关联的 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 状态管理对象。'
- en: '`state_dict` – the dictionary sent to `__setstate__`, containing the state
    dictionary which was pickled.'
  id: totrans-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state_dict` – 发送到 `__setstate__` 的字典，包含被序列化的状态字典。'
- en: '## Attribute Events'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '## 属性事件'
- en: Attribute events are triggered as things occur on individual attributes of ORM
    mapped objects. These events form the basis for things like [custom validation
    functions](mapped_attributes.html#simple-validators) as well as [backref handlers](backref.html#relationships-backref).
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 属性事件在ORM映射对象的各个属性发生时触发。这些事件为诸如[自定义验证函数](mapped_attributes.html#simple-validators)和[反向引用处理程序](backref.html#relationships-backref)等功能奠定了基础。
- en: See also
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changing Attribute Behavior](mapped_attributes.html)'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '[更改属性行为](mapped_attributes.html)'
- en: '| Object Name | Description |'
  id: totrans-705
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-706
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AttributeEvents](#sqlalchemy.orm.AttributeEvents) | Define events for object
    attributes. |'
  id: totrans-707
  prefs: []
  type: TYPE_TB
  zh: '| [属性事件](#sqlalchemy.orm.AttributeEvents) | 定义对象属性的事件。 |'
- en: '[PRE113]'
  id: totrans-708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Define events for object attributes.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 定义对象属性的事件。
- en: These are typically defined on the class-bound descriptor for the target class.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 这些通常在目标类的类绑定描述符上定义。
- en: 'For example, to register a listener that will receive the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要注册一个将接收[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件的监听器：
- en: '[PRE114]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Listeners have the option to return a possibly modified version of the value,
    when the [`AttributeEvents.retval`](#sqlalchemy.orm.AttributeEvents.params.retval
    "sqlalchemy.orm.AttributeEvents") flag is passed to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") or [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"), such as below, illustrated using the [`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set") event:'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`AttributeEvents.retval`](#sqlalchemy.orm.AttributeEvents.params.retval "sqlalchemy.orm.AttributeEvents")标志传递给[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")或[`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for")时，监听器可以选择返回可能修改的值，如下所示，使用[`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set")事件进行说明：
- en: '[PRE115]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: A validation function like the above can also raise an exception such as `ValueError`
    to halt the operation.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 像上面的验证函数也可以引发异常，如`ValueError`以停止操作。
- en: 'The [`AttributeEvents.propagate`](#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents") flag is also important when applying listeners
    to mapped classes that also have mapped subclasses, as when using mapper inheritance
    patterns:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用监听器到具有映射子类的映射类时，[`AttributeEvents.propagate`](#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents")标志也很重要，例如在使用映射器继承模式时：
- en: '[PRE116]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The full list of modifiers available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") and [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for") functions are below.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是可用于[`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")和[`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for")函数的修饰符的完整列表。
- en: 'Parameters:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`active_history=False` – When True, indicates that the “set” event would like
    to receive the “old” value being replaced unconditionally, even if this requires
    firing off database loads. Note that `active_history` can also be set directly
    via [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    and [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship").'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_history=False` – 当为True时，表示“set”事件希望无条件地接收被替换的“旧”值，即使这需要触发数据库加载。请注意，`active_history`也可以通过[`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")和[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")直接设置。'
- en: '`propagate=False` – When True, the listener function will be established not
    just for the class attribute given, but for attributes of the same name on all
    current subclasses of that class, as well as all future subclasses of that class,
    using an additional listener that listens for instrumentation events.'
  id: totrans-721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate=False` – 当为True时，监听器函数将不仅为给定的类属性建立，还将为该类的所有当前子类以及该类的所有未来子类上具有相同名称的属性建立，使用一个额外的监听器来监听仪器事件。'
- en: '`raw=False` – When True, the “target” argument to the event will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw=False` – 当为True时，事件的“target”参数将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")管理对象，而不是映射实例本身。'
- en: '`retval=False` – when True, the user-defined event listening must return the
    “value” argument from the function. This gives the listening function the opportunity
    to change the value that is ultimately used for a “set” or “append” event.'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retval=False` – 当为 True 时，用户定义的事件监听必须从函数中返回“value”参数。这使得监听函数有机会更改最终用于“set”或“append”事件的值。'
- en: '**Members**'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[append()](#sqlalchemy.orm.AttributeEvents.append), [append_wo_mutation()](#sqlalchemy.orm.AttributeEvents.append_wo_mutation),
    [bulk_replace()](#sqlalchemy.orm.AttributeEvents.bulk_replace), [dispatch](#sqlalchemy.orm.AttributeEvents.dispatch),
    [dispose_collection()](#sqlalchemy.orm.AttributeEvents.dispose_collection), [init_collection()](#sqlalchemy.orm.AttributeEvents.init_collection),
    [init_scalar()](#sqlalchemy.orm.AttributeEvents.init_scalar), [modified()](#sqlalchemy.orm.AttributeEvents.modified),
    [remove()](#sqlalchemy.orm.AttributeEvents.remove), [set()](#sqlalchemy.orm.AttributeEvents.set)'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '[append()](#sqlalchemy.orm.AttributeEvents.append), [append_wo_mutation()](#sqlalchemy.orm.AttributeEvents.append_wo_mutation),
    [bulk_replace()](#sqlalchemy.orm.AttributeEvents.bulk_replace), [dispatch](#sqlalchemy.orm.AttributeEvents.dispatch),
    [dispose_collection()](#sqlalchemy.orm.AttributeEvents.dispose_collection), [init_collection()](#sqlalchemy.orm.AttributeEvents.init_collection),
    [init_scalar()](#sqlalchemy.orm.AttributeEvents.init_scalar), [modified()](#sqlalchemy.orm.AttributeEvents.modified),
    [remove()](#sqlalchemy.orm.AttributeEvents.remove), [set()](#sqlalchemy.orm.AttributeEvents.set)'
- en: '**Class signature**'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE117]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Receive a collection append event.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 接收集合附加事件。
- en: 'Example argument forms:'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE118]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: The append event is invoked for each element as it is appended to the collection.
    This occurs for single-item appends as well as for a “bulk replace” operation.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个元素被附加到集合时，都会调用附加事件。这适用于单个项的附加以及“批量替换”操作。
- en: 'Parameters:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器以 `raw=True` 注册，这将是 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象。'
- en: '`value` – the value being appended. If this listener is registered with `retval=True`,
    the listener function must return this value, or a new value which replaces it.'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 被附加的值。如果此监听器以 `retval=True` 注册，则监听函数必须返回此值，或者替换它的新值。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation, as well as be inspected for information about the source
    of the event.'
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 表示事件启动的 `Event` 实例。可能会被后向引用处理程序修改以控制链接的事件传播，以及被检查以获取有关事件源的信息。'
- en: '`key` –'
  id: totrans-737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` –'
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `collection[some_key_or_index] = value`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") 参数设置为 True 来建立事件时，这将是操作中使用的键，例如 `collection[some_key_or_index]
    = value`。如果未使用 [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") 设置事件，将根本不传递此参数给事件；这是为了允许与不包括 `key` 参数的现有事件处理程序向后兼容。
- en: New in version 2.0.
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: 'Returns:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: if the event was registered with `retval=True`, the given value, or a new effective
    value, should be returned.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事件以 `retval=True` 注册，则应返回给定值或新的有效值。
- en: See also
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景信息，例如传播到子类。'
- en: '[`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")'
- en: '[PRE119]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Receive a collection append event where the collection was not actually mutated.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 接收集合附加事件，其中集合实际上未被改变。
- en: 'Example argument forms:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE120]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: This event differs from [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") in that it is fired off for de-duplicating
    collections such as sets and dictionaries, when the object already exists in the
    target collection. The event does not have a return value and the identity of
    the given object cannot be changed.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与 [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append "sqlalchemy.orm.AttributeEvents.append")
    不同，因为它是为去重集合（如集合和字典）触发的，当对象已存在于目标集合中时。该事件没有返回值，并且给定对象的标识不能更改。
- en: The event is used for cascading objects into a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when the collection has already been mutated via a backref
    event.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 当集合已通过后向引用事件发生变异时，该事件用于将对象级联到[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: 'Parameters:'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果侦听器以 `raw=True` 注册，这将是 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象。'
- en: '`value` – the value that would be appended if the object did not already exist
    in the collection.'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 如果对象在集合中尚不存在，则将追加的值。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation, as well as be inspected for information about the source
    of the event.'
  id: totrans-754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 一个表示事件启动的`Event`实例。可以通过后向引用处理程序修改其原始值，以控制链接的事件传播，也可以检查有关事件源的信息。'
- en: '`key` –'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` –'
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `collection[some_key_or_index] = value`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") 参数设置为 True 建立事件时，这将是操作中使用的键，例如 `collection[some_key_or_index]
    = value`。如果未使用 [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") 设置事件，根本不会将参数传递给事件；这是为了与不包含 `key` 参数的现有事件处理程序向后兼容。
- en: New in version 2.0.
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 2.0 中新增。
- en: 'Returns:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is defined for this event.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 没有为此事件定义返回值。
- en: New in version 1.4.15.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.15 中新增。
- en: '[PRE121]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Receive a collection ‘bulk replace’ event.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个集合“批量替换”事件。
- en: 'Example argument forms:'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE122]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: This event is invoked for a sequence of values as they are incoming to a bulk
    collection set operation, which can be modified in place before the values are
    treated as ORM objects. This is an “early hook” that runs before the bulk replace
    routine attempts to reconcile which objects are already present in the collection
    and which are being removed by the net replace operation.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在作为 ORM 对象处理之前的批量集合设置操作的传入值序列上被调用，可以在值被视为 ORM 对象之前就地修改。这是一个“早期挂钩”，在批量替换例程尝试协调哪些对象已经存在于集合中，哪些对象正在被净替换操作移除之前运行。
- en: 'It is typical that this method be combined with use of the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event. When using both of these events,
    note that a bulk replace operation will invoke the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event for all new items, even after [`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") has been invoked for the collection
    as a whole. In order to determine if an [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event is part of a bulk replace, use
    the symbol `attributes.OP_BULK_REPLACE` to test the incoming initiator:'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，此方法与[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件的使用结合。当同时使用这两个事件时，请注意，批量替换操作将为所有新项目调用[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件，即使在为整个集合调用[`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")之后，也会调用[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件。为了确定[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件是否属于批量替换，请使用符号`attributes.OP_BULK_REPLACE`来测试传入的initiator：
- en: '[PRE123]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: New in version 1.2.
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的新内容。
- en: 'Parameters:'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器注册为`raw=True`，这将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象。'
- en: '`value` – a sequence (e.g. a list) of the values being set. The handler can
    modify this list in place.'
  id: totrans-771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 正在设置的值的序列（例如列表）。处理程序可以直接修改此列表。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.'
  id: totrans-772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 代表事件启动的`Event`实例。'
- en: '`keys` –'
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys` –'
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the sequence
    of keys used in the operation, typically only for a dictionary update. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")参数设置为True来建立事件时，这将是操作中使用的键序列，通常仅用于字典更新。如果未使用[`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")来设置事件，则根本不会将参数传递给事件；这是为了允许与不包括`key`参数的现有事件处理程序保持向后兼容性。
- en: New in version 2.0.
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本2.0中的新内容。
- en: See also
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，例如传播到子类。'
- en: '[PRE124]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: reference back to the _Dispatch class.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 参考回_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 双向反对_Dispatch._events
- en: '[PRE125]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Receive a ‘collection dispose’ event.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 收到一个“collection dispose”事件。
- en: 'Example argument forms:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE126]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'This event is triggered for a collection-based attribute when a collection
    is replaced, that is:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 当集合被替换时，此事件将触发基于集合的属性，即：
- en: '[PRE127]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: The old collection received will contain its previous contents.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 旧集合将包含其先前的内容。
- en: 'Changed in version 1.2: The collection passed to [`AttributeEvents.dispose_collection()`](#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection") will now have its contents
    before the dispose intact; previously, the collection would be empty.'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的更改：传递给[`AttributeEvents.dispose_collection()`](#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection")的集合现在将在处理之前保持其内容；以前，集合将为空。
- en: See also
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，例如传播到子类。'
- en: '[PRE128]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Receive a ‘collection init’ event.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 收到一个“collection init”事件。
- en: 'Example argument forms:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE129]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: This event is triggered for a collection-based attribute, when the initial “empty
    collection” is first generated for a blank attribute, as well as for when the
    collection is replaced with a new one, such as via a set event.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 当为空属性首次生成初始“空集合”时，以及当集合被替换为新集合时（例如通过设置事件），将触发此事件。
- en: 'E.g., given that `User.addresses` is a relationship-based collection, the event
    is triggered here:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设`User.addresses`是基于关系的集合，事件在此处触发：
- en: '[PRE130]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'and also during replace operations:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 在替换操作期间也会发生：
- en: '[PRE131]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Parameters:'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器以`raw=True`注册，这将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象。'
- en: '`collection` – the new collection. This will always be generated from what
    was specified as [`relationship.collection_class`](relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship"), and will always be empty.'
  id: totrans-802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collection` – 新集合。这将始终从[`relationship.collection_class`](relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship")指定的内容生成，并且始终为空。'
- en: '`collection_adapter` – the [`CollectionAdapter`](collection_api.html#sqlalchemy.orm.collections.CollectionAdapter
    "sqlalchemy.orm.collections.CollectionAdapter") that will mediate internal access
    to the collection.'
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collection_adapter` – 将调解对集合的内部访问的[`CollectionAdapter`](collection_api.html#sqlalchemy.orm.collections.CollectionAdapter
    "sqlalchemy.orm.collections.CollectionAdapter")。'
- en: See also
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，例如传播到子类。'
- en: '[`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") - “scalar” version of this event.'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") - 此事件的“标量”版本。'
- en: '[PRE132]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Receive a scalar “init” event.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个标量“init”事件。
- en: 'Example argument forms:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE133]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'This event is invoked when an uninitialized, unpersisted scalar attribute is
    accessed, e.g. read:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问未初始化的、未持久化的标量属性时，例如读取时，将调用此事件：
- en: '[PRE134]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: The ORM’s default behavior when this occurs for an un-initialized attribute
    is to return the value `None`; note this differs from Python’s usual behavior
    of raising `AttributeError`. The event here can be used to customize what value
    is actually returned, with the assumption that the event listener would be mirroring
    a default generator that is configured on the Core [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object as well.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 当未初始化属性发生此事件时，ORM的默认行为是返回值`None`；请注意，这与Python通常引发`AttributeError`的行为不同。此处的事件可用于自定义实际返回的值，假设事件监听器将镜像配置在Core
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象上的默认生成器。
- en: Since a default generator on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") might also produce a changing value such as a timestamp,
    the [`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event handler can also be used to
    **set** the newly returned value, so that a Core-level default generation function
    effectively fires off only once, but at the moment the attribute is accessed on
    the non-persisted object. Normally, no change to the object’s state is made when
    an uninitialized attribute is accessed (much older SQLAlchemy versions did in
    fact change the object’s state).
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")上的默认生成器也可能产生像时间戳这样的变化值，因此[`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar")事件处理程序也可用于**设置**新返回的值，以便Core级别的默认生成函数实际上只触发一次，但在访问非持久化对象上的属性时。通常，当访问未初始化属性时，不会对对象的状态进行任何更改（在较旧的SQLAlchemy版本中实际上会更改对象的状态）。
- en: 'If a default generator on a column returned a particular constant, a handler
    might be used as follows:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列上的默认生成器返回特定常量，则可以使用处理程序如下：
- en: '[PRE135]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Above, we initialize the attribute `MyClass.some_attribute` to the value of
    `SOME_CONSTANT`. The above code includes the following features:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们将属性`MyClass.some_attribute`初始化为`SOME_CONSTANT`的值。上述代码包括以下特性：
- en: By setting the value `SOME_CONSTANT` in the given `dict_`, we indicate that
    this value is to be persisted to the database. This supersedes the use of `SOME_CONSTANT`
    in the default generator for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). The `active_column_defaults.py` example given at
    [Attribute Instrumentation](examples.html#examples-instrumentation) illustrates
    using the same approach for a changing default, e.g. a timestamp generator. In
    this particular example, it is not strictly necessary to do this since `SOME_CONSTANT`
    would be part of the INSERT statement in either case.
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在给定的`dict_`中设置值`SOME_CONSTANT`，我们表明这个值将被持久化到数据库中。这取代了在[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的默认生成器中使用`SOME_CONSTANT`的方法。在[属性仪器化](examples.html#examples-instrumentation)中给出的`active_column_defaults.py`示例演示了对于变化的默认值使用相同方法的情况，例如时间戳生成器。在这个特定的例子中，这样做并不是严格必要的，因为无论如何`SOME_CONSTANT`都会成为INSERT语句的一部分。
- en: By establishing the `retval=True` flag, the value we return from the function
    will be returned by the attribute getter. Without this flag, the event is assumed
    to be a passive observer and the return value of our function is ignored.
  id: totrans-819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过建立`retval=True`标志，我们从函数返回的值将被属性获取器返回。如果没有这个标志，事件被认为是被动观察者，我们函数的返回值将被忽略。
- en: The `propagate=True` flag is significant if the mapped class includes inheriting
    subclasses, which would also make use of this event listener. Without this flag,
    an inheriting subclass will not use our event handler.
  id: totrans-820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果映射类包括继承的子类，则`propagate=True`标志是重要的，这些子类也将使用此事件监听器。如果没有这个标志，继承的子类将不使用我们的事件处理程序。
- en: 'In the above example, the attribute set event [`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set") as well as the related validation feature
    provided by [`validates`](mapped_attributes.html#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    is **not** invoked when we apply our value to the given `dict_`. To have these
    events to invoke in response to our newly generated value, apply the value to
    the given object as a normal attribute set operation:'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，当我们将我们的值应用到给定的`dict_`时，属性设置事件[`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set")以及由[`validates`](mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates")提供的相关验证功能都**不会**被调用。要使这些事件响应我们新生成的值，将该值应用到给定对象作为正常的属性设置操作：
- en: '[PRE136]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: When multiple listeners are set up, the generation of the value is “chained”
    from one listener to the next by passing the value returned by the previous listener
    that specifies `retval=True` as the `value` argument of the next listener.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置了多个监听器时，值的生成会从一个监听器“链式”传递到下一个监听器，通过将前一个指定`retval=True`的监听器返回的值作为下一个监听器的`value`参数传递。
- en: 'Parameters:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器注册为`raw=True`，这将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象。'
- en: '`value` – the value that is to be returned before this event listener were
    invoked. This value begins as the value `None`, however will be the return value
    of the previous event handler function if multiple listeners are present.'
  id: totrans-826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 在此事件监听器被调用之前要返回的值。这个值最初为`None`，但是如果存在多个监听器，则将是上一个事件处理程序函数的返回值。'
- en: '`dict_` – the attribute dictionary of this mapped object. This is normally
    the `__dict__` of the object, but in all cases represents the destination that
    the attribute system uses to get at the actual value of this attribute. Placing
    the value in this dictionary has the effect that the value will be used in the
    INSERT statement generated by the unit of work.'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dict_` – 此映射对象的属性字典。这通常是对象的`__dict__`，但在所有情况下都表示属性系统用于访问此属性的实际值的目标。将值放入该字典中的效果是该值将在工作单元生成的INSERT语句中使用。'
- en: See also
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents.init_collection()`](#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") - collection version of this
    event'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents.init_collection()`](#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") - 此事件的集合版本'
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景信息，如传播到子类。'
- en: '[Attribute Instrumentation](examples.html#examples-instrumentation) - see the
    `active_column_defaults.py` example.'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '[属性仪表化](examples.html#examples-instrumentation) - 参见 `active_column_defaults.py`
    示例。'
- en: '[PRE137]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Receive a ‘modified’ event.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个‘修改’事件。
- en: 'Example argument forms:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE138]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: This event is triggered when the [`flag_modified()`](session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") function is used to trigger a modify
    event on an attribute without any specific value being set.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`flag_modified()`](session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") 函数在未设置任何特定值的情况下触发修改事件时，将触发此事件。
- en: New in version 1.2.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 版中的新内容。
- en: 'Parameters:'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器使用 `raw=True` 注册，这将是 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 一个代表事件启动的 `Event` 实例。'
- en: See also
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，例如传播到子类。'
- en: '[PRE139]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Receive a collection remove event.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个集合移除事件。
- en: 'Example argument forms:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE140]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Parameters:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器使用 `raw=True` 注册，这将是 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象。'
- en: '`value` – the value being removed.'
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 被移除的值。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation.'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 一个代表事件启动的 `Event` 实例。可以通过 backref 处理程序修改其原始值，以控制链式事件传播。'
- en: '`key` –'
  id: totrans-851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` –'
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `del collection[some_key_or_index]`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") 参数设置为 True 建立事件时，这将是操作中使用的键，例如 `del collection[some_key_or_index]`。如果未使用
    [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") 设置事件，参数根本不会传递给事件；这是为了允许现有事件处理程序与不包含 `key` 参数的事件处理程序向后兼容。
- en: New in version 2.0.
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版中的新内容。
- en: 'Returns:'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is defined for this event.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 未为此事件定义返回值。
- en: See also
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，例如传播到子类。'
- en: '[PRE141]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Receive a scalar set event.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个标量集合事件。
- en: 'Example argument forms:'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE142]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Parameters:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器使用 `raw=True` 注册，这将是 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象。'
- en: '`value` – the value being set. If this listener is registered with `retval=True`,
    the listener function must return this value, or a new value which replaces it.'
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 被设置的值。如果此监听器使用 `retval=True` 注册，监听器函数必须返回此值，或替换它的新值。'
- en: '`oldvalue` – the previous value being replaced. This may also be the symbol
    `NEVER_SET` or `NO_VALUE`. If the listener is registered with `active_history=True`,
    the previous value of the attribute will be loaded from the database if the existing
    value is currently unloaded or expired.'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`oldvalue` – 被替换的先前值。这也可以是符号 `NEVER_SET` 或 `NO_VALUE`。如果监听器使用 `active_history=True`
    注册，当现有值当前未加载或过期时，将从数据库加载属性的先前值。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation.'
  id: totrans-866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 代表事件启动的`Event`实例。可能会被backref处理程序从其原始值修改，以控制链式事件传播。'
- en: 'Returns:'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: if the event was registered with `retval=True`, the given value, or a new effective
    value, should be returned.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事件是以`retval=True`注册的，则应返回给定值或新的有效值。
- en: See also
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于侦听器选项的背景，例如传播到子类。'
- en: Query Events
  id: totrans-871
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询事件
- en: '| Object Name | Description |'
  id: totrans-872
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-873
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [QueryEvents](#sqlalchemy.orm.QueryEvents) | Represent events within the
    construction of a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. |'
  id: totrans-874
  prefs: []
  type: TYPE_TB
  zh: '| [QueryEvents](#sqlalchemy.orm.QueryEvents) | 代表在构建[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象时的事件。 |'
- en: '[PRE143]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Represent events within the construction of a [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 代表在构建[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象时的事件。
- en: Legacy Feature
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 传统特性
- en: The [`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    event methods are legacy as of SQLAlchemy 2.0, and only apply to direct use of
    the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. They are not used for [2.0 style](../glossary.html#term-2.0-style) statements.
    For events to intercept and modify 2.0 style ORM use, use the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")事件方法在SQLAlchemy
    2.0中已过时，仅适用于直接使用[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象。它们不适用于[2.0风格](../glossary.html#term-2.0-style)语句。要拦截和修改2.0风格ORM使用的事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子。'
- en: The [`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    hooks are now superseded by the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")钩子现在已被[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子取代。'
- en: '**Members**'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[before_compile()](#sqlalchemy.orm.QueryEvents.before_compile), [before_compile_delete()](#sqlalchemy.orm.QueryEvents.before_compile_delete),
    [before_compile_update()](#sqlalchemy.orm.QueryEvents.before_compile_update),
    [dispatch](#sqlalchemy.orm.QueryEvents.dispatch)'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '[before_compile()](#sqlalchemy.orm.QueryEvents.before_compile), [before_compile_delete()](#sqlalchemy.orm.QueryEvents.before_compile_delete),
    [before_compile_update()](#sqlalchemy.orm.QueryEvents.before_compile_update),
    [dispatch](#sqlalchemy.orm.QueryEvents.dispatch)'
- en: '**Class signature**'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE144]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Receive the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object before it is composed into a core [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 在核心[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象之前将[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象接收到。
- en: 'Example argument forms:'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE145]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event is superseded by the much more
    capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook. In version 1.4, the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event is **no longer used** for ORM-level
    attribute loads, such as loads of deferred or expired attributes as well as relationship
    loaders. See the new examples in [ORM Query Events](examples.html#examples-session-orm-events)
    which illustrate new ways of intercepting and modifying ORM queries for the most
    common purpose of adding arbitrary filter criteria.'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件被更强大的[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 钩子所取代。在版本1.4中，[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件**不再用于**ORM级别的属性加载，例如延迟加载或过期属性以及关系加载器的加载。请参阅[ORM查询事件](examples.html#examples-session-orm-events)中的新示例，展示了拦截和修改ORM查询的新方法，最常见的目的是添加任意的过滤条件。
- en: 'This event is intended to allow changes to the query given:'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件旨在允许对查询进行更改：
- en: '[PRE146]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: The event should normally be listened with the `retval=True` parameter set,
    so that the modified query may be returned.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应该使用`retval=True`参数监听事件，以便修改后的查询可以返回。
- en: 'The [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event by default will disallow “baked”
    queries from caching a query, if the event hook returns a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. This affects both direct use of the baked query
    extension as well as its operation within lazy loaders and eager loaders for relationships.
    In order to re-establish the query being cached, apply the event adding the `bake_ok`
    flag:'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件将禁止“烘焙”查询缓存查询，如果事件钩子返回一个新的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。这影响了烘焙查询扩展的直接使用以及它在关系的惰性加载器和急切加载器中的操作。为了重新建立被缓存的查询，请应用添加`bake_ok`标志的事件：
- en: '[PRE147]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: When `bake_ok` is set to True, the event hook will only be invoked once, and
    not called for subsequent invocations of a particular query that is being cached.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 当`bake_ok`设置为True时，事件钩子只会被调用一次，并且不会为正在被缓存的特定查询的后续调用而调用。
- en: 'New in version 1.3.11: - added the “bake_ok” flag to the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event and disallowed caching via
    the “baked” extension from occurring for event handlers that return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object if this flag is not set.'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3.11起新增：- 在[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件中添加了“bake_ok”标志，并且如果未设置此标志，则不允许通过“烘焙”扩展进行缓存的事件处理程序返回一个新的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。
- en: See also
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
- en: '[Using the before_compile event](extensions/baked.html#baked-with-before-compile)'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用before_compile事件](extensions/baked.html#baked-with-before-compile)'
- en: '[PRE148]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Allow modifications to the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object within [`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete").
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 允许对[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象进行修改，[`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete "sqlalchemy.orm.Query.delete")
    内部。
- en: 'Example argument forms:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE149]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete") event is superseded by the
    much more capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")事件已被功能更强大的[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩取代。
- en: Like the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, this event should be configured
    with `retval=True`, and the modified [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object returned, as in
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件，此事件应配置为`retval=True`，并返回修改后的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，如下所示
- en: '[PRE150]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Parameters:'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`query` – a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    instance; this is also the `.query` attribute of the given “delete context” object.'
  id: totrans-908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` – 一个[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")实例；这也是给定“删除上下文”对象的`.query`属性。'
- en: '`delete_context` – a “delete context” object which is the same kind of object
    as described in `QueryEvents.after_bulk_delete.delete_context`.'
  id: totrans-909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete_context` – 一个“删除上下文”对象，与`QueryEvents.after_bulk_delete.delete_context`中描述的对象类型相同。'
- en: New in version 1.2.17.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2.17 中新增。
- en: See also
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
- en: '[PRE151]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Allow modifications to the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object within [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update").
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 允许在[`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update "sqlalchemy.orm.Query.update")内修改[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。
- en: 'Example argument forms:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE152]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update") event is superseded by the
    much more capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")事件已被功能更强大的[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩取代。
- en: Like the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, if the event is to be used
    to alter the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, it should be configured with `retval=True`, and the modified [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object returned, as in
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件，如果要用该事件来修改[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，则应配置为`retval=True`，并返回修改后的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，如下所示
- en: '[PRE153]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: The `.values` dictionary of the “update context” object can also be modified
    in place as illustrated above.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: “更新上下文”对象的`.values`字典也可以像上面示例的那样就地修改。
- en: 'Parameters:'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`query` – a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    instance; this is also the `.query` attribute of the given “update context” object.'
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` – 一个[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")实例；这也是给定“更新上下文”对象的`.query`属性。'
- en: '`update_context` – an “update context” object which is the same kind of object
    as described in `QueryEvents.after_bulk_update.update_context`. The object has
    a `.values` attribute in an UPDATE context which is the dictionary of parameters
    passed to [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update"). This dictionary can be modified to alter the VALUES
    clause of the resulting UPDATE statement.'
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update_context` – 一个“更新上下文”对象，它与`QueryEvents.after_bulk_update.update_context`中描述的对象相同。对象具有在
    UPDATE 上下文中的`.values`属性，该属性是传递给[`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")的参数字典。可以修改此字典以更改生成的 UPDATE 语句的 VALUES 子句。'
- en: New in version 1.2.17.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2.17版中的新内容。
- en: See also
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
- en: '[PRE154]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: reference back to the _Dispatch class.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 参考回到 _Dispatch 类。
- en: Bidirectional against _Dispatch._events
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 双向针对 _Dispatch._events
- en: '## Instrumentation Events'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '## 仪器化事件'
- en: Defines SQLAlchemy’s system of class instrumentation.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了 SQLAlchemy 的类仪器化系统。
- en: This module is usually not directly visible to user applications, but defines
    a large part of the ORM’s interactivity.
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块通常对用户应用程序不直接可见，但定义了 ORM 交互的大部分内容。
- en: instrumentation.py deals with registration of end-user classes for state tracking.
    It interacts closely with state.py and attributes.py which establish per-instance
    and per-class-attribute instrumentation, respectively.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: instrumentation.py 处理了终端用户类的注册以进行状态跟踪。它与分别建立了每个实例和每个类属性仪器化的 state.py 和 attributes.py
    密切交互。
- en: The class instrumentation system can be customized on a per-class or global
    basis using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") module, which provides the means to build and
    specify alternate instrumentation forms.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 类的仪器化系统可以使用[`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation")模块进行每个类或全局基础上的定制化，该模块提供了构建和指定替代仪器化形式的方法。
- en: '| Object Name | Description |'
  id: totrans-937
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-938
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [InstrumentationEvents](#sqlalchemy.orm.InstrumentationEvents) | Events related
    to class instrumentation events. |'
  id: totrans-939
  prefs: []
  type: TYPE_TB
  zh: '| [InstrumentationEvents](#sqlalchemy.orm.InstrumentationEvents) | 与类仪器化事件相关的事件。
    |'
- en: '[PRE155]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Events related to class instrumentation events.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 与类仪器化事件相关的事件。
- en: The listeners here support being established against any new style class, that
    is any object that is a subclass of ‘type’. Events will then be fired off for
    events against that class. If the “propagate=True” flag is passed to event.listen(),
    the event will fire off for subclasses of that class as well.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的监听器支持对任何新风格类进行建立，即任何‘type’的子类对象。然后将为针对该类的事件触发事件。如果传递了“propagate=True”标志给event.listen()，则该事件也将为该类的子类触发。
- en: The Python `type` builtin is also accepted as a target, which when used has
    the effect of events being emitted for all classes.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 `type` 内建函数也被接受为目标，当使用时，将对所有类发出事件。
- en: Note the “propagate” flag here is defaulted to `True`, unlike the other class
    level events where it defaults to `False`. This means that new subclasses will
    also be the subject of these events, when a listener is established on a superclass.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此处的“propagate”标志默认为 `True`，与其他类级别事件不同，后者的默认值为 `False`。这意味着当在超类上建立侦听器时，新的子类也将成为这些事件的主题。
- en: '**Members**'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[attribute_instrument()](#sqlalchemy.orm.InstrumentationEvents.attribute_instrument),
    [class_instrument()](#sqlalchemy.orm.InstrumentationEvents.class_instrument),
    [class_uninstrument()](#sqlalchemy.orm.InstrumentationEvents.class_uninstrument),
    [dispatch](#sqlalchemy.orm.InstrumentationEvents.dispatch)'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '[attribute_instrument()](#sqlalchemy.orm.InstrumentationEvents.attribute_instrument),
    [class_instrument()](#sqlalchemy.orm.InstrumentationEvents.class_instrument),
    [class_uninstrument()](#sqlalchemy.orm.InstrumentationEvents.class_uninstrument),
    [dispatch](#sqlalchemy.orm.InstrumentationEvents.dispatch)'
- en: '**Class signature**'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.InstrumentationEvents`](#sqlalchemy.orm.InstrumentationEvents
    "sqlalchemy.orm.InstrumentationEvents") (`sqlalchemy.event.Events`)
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.InstrumentationEvents`](#sqlalchemy.orm.InstrumentationEvents
    "sqlalchemy.orm.InstrumentationEvents") (`sqlalchemy.event.Events`)
- en: '[PRE156]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Called when an attribute is instrumented.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 当属性被仪器化时调用。
- en: 'Example argument forms:'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE157]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Called after the given class is instrumented.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定类被仪器化之后调用。
- en: 'Example argument forms:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE159]'
  id: totrans-956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: To get at the [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager"),
    use `manager_of_class()`.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取[`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")，请使用`manager_of_class()`。
- en: '[PRE160]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Called before the given class is uninstrumented.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定类被取消仪器化之前调用。
- en: 'Example argument forms:'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE161]'
  id: totrans-961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: To get at the [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager"),
    use `manager_of_class()`.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取[`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")，请使用`manager_of_class()`。
- en: '[PRE162]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: reference back to the _Dispatch class.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 参考_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 双向对_Dispatch._events
- en: Session Events
  id: totrans-966
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话事件
- en: 'The most basic event hooks are available at the level of the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object. The types of things that are intercepted here
    include:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的事件钩子可在ORM [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象级别使用。在此拦截的内容包括：
- en: '**Persistence Operations** - the ORM flush process that sends changes to the
    database can be extended using events that fire off at different parts of the
    flush, to augment or modify the data being sent to the database or to allow other
    things to happen when persistence occurs. Read more about persistence events at
    [Persistence Events](session_events.html#session-persistence-events).'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久化操作** - 将更改发送到数据库的ORM刷新过程可以使用在刷新的不同部分触发的事件进行扩展，以增强或修改发送到数据库的数据，或者在持久化发生时允许其他事情发生。在[持久化事件](session_events.html#session-persistence-events)中了解更多信息。'
- en: '**Object lifecycle events** - hooks when objects are added, persisted, deleted
    from sessions. Read more about these at [Object Lifecycle Events](session_events.html#session-lifecycle-events).'
  id: totrans-969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象生命周期事件** - 当对象从会话中添加、持久化、删除时触发的钩子。在[对象生命周期事件](session_events.html#session-lifecycle-events)中了解更多信息。'
- en: '**Execution Events** - Part of the [2.0 style](../glossary.html#term-2.0-style)
    execution model, all SELECT statements against ORM entities emitted, as well as
    bulk UPDATE and DELETE statements outside of the flush process, are intercepted
    from the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method using the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") method. Read more about this event
    at [Execute Events](session_events.html#session-execute-events).'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行事件** - 作为[2.0风格](../glossary.html#term-2.0-style)执行模型的一部分，针对ORM实体的所有SELECT语句以及刷新过程之外的批量UPDATE和DELETE语句都会被拦截，使用[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法，并通过[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")方法。在[执行事件](session_events.html#session-execute-events)中了解更多信息。'
- en: Be sure to read the [Tracking queries, object and Session Changes with Events](session_events.html)
    chapter for context on these events.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必阅读[使用事件跟踪查询、对象和会话更改](session_events.html)章节，以了解这些事件的背景。
- en: '| Object Name | Description |'
  id: totrans-972
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-973
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [SessionEvents](#sqlalchemy.orm.SessionEvents) | Define events specific to
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    lifecycle. |'
  id: totrans-974
  prefs: []
  type: TYPE_TB
  zh: '| [SessionEvents](#sqlalchemy.orm.SessionEvents) | 定义特定于[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")生命周期的事件。 |'
- en: '[PRE163]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Define events specific to [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") lifecycle.
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 定义特定于[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")生命周期的事件。
- en: 'e.g.:'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE164]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: The [`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    function will accept [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects as well as the return result of [`sessionmaker()`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`scoped_session()`](contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")函数将接受[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象，以及[`sessionmaker()`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")和[`scoped_session()`](contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")的返回结果。'
- en: Additionally, it accepts the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class which will apply listeners to all [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances globally.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它接受[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，将全局应用监听器到所有[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例。
- en: 'Parameters:'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`raw=False` –'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw=False` –'
- en: When True, the “target” argument passed to applicable event listener functions
    that work on individual objects will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，传递给适用于单个对象的事件监听器函数的“target”参数将是实例的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")管理对象，而不是映射实例本身。
- en: New in version 1.3.14.
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.3.14 中新增。
- en: '`restore_load_context=False` –'
  id: totrans-985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restore_load_context=False` –'
- en: Applies to the [`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent") event. Restores the loader
    context of the object when the event hook is complete, so that ongoing eager load
    operations continue to target the object appropriately. A warning is emitted if
    the object is moved to a new loader context from within this event if this flag
    is not set.
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 适用于[`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")事件。在事件钩子完成时恢复对象的加载器上下文，以便持续的急切加载操作继续适当地针对对象。如果在此事件中将对象移动到新的加载器上下文而未设置此标志，则会发出警告。
- en: New in version 1.3.14.
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.3.14 中新增。
- en: '**Members**'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[after_attach()](#sqlalchemy.orm.SessionEvents.after_attach), [after_begin()](#sqlalchemy.orm.SessionEvents.after_begin),
    [after_bulk_delete()](#sqlalchemy.orm.SessionEvents.after_bulk_delete), [after_bulk_update()](#sqlalchemy.orm.SessionEvents.after_bulk_update),
    [after_commit()](#sqlalchemy.orm.SessionEvents.after_commit), [after_flush()](#sqlalchemy.orm.SessionEvents.after_flush),
    [after_flush_postexec()](#sqlalchemy.orm.SessionEvents.after_flush_postexec),
    [after_rollback()](#sqlalchemy.orm.SessionEvents.after_rollback), [after_soft_rollback()](#sqlalchemy.orm.SessionEvents.after_soft_rollback),
    [after_transaction_create()](#sqlalchemy.orm.SessionEvents.after_transaction_create),
    [after_transaction_end()](#sqlalchemy.orm.SessionEvents.after_transaction_end),
    [before_attach()](#sqlalchemy.orm.SessionEvents.before_attach), [before_commit()](#sqlalchemy.orm.SessionEvents.before_commit),
    [before_flush()](#sqlalchemy.orm.SessionEvents.before_flush), [deleted_to_detached()](#sqlalchemy.orm.SessionEvents.deleted_to_detached),
    [deleted_to_persistent()](#sqlalchemy.orm.SessionEvents.deleted_to_persistent),
    [detached_to_persistent()](#sqlalchemy.orm.SessionEvents.detached_to_persistent),
    [dispatch](#sqlalchemy.orm.SessionEvents.dispatch), [do_orm_execute()](#sqlalchemy.orm.SessionEvents.do_orm_execute),
    [loaded_as_persistent()](#sqlalchemy.orm.SessionEvents.loaded_as_persistent),
    [pending_to_persistent()](#sqlalchemy.orm.SessionEvents.pending_to_persistent),
    [pending_to_transient()](#sqlalchemy.orm.SessionEvents.pending_to_transient),
    [persistent_to_deleted()](#sqlalchemy.orm.SessionEvents.persistent_to_deleted),
    [persistent_to_detached()](#sqlalchemy.orm.SessionEvents.persistent_to_detached),
    [persistent_to_transient()](#sqlalchemy.orm.SessionEvents.persistent_to_transient),
    [transient_to_pending()](#sqlalchemy.orm.SessionEvents.transient_to_pending)'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: '[after_attach()](#sqlalchemy.orm.SessionEvents.after_attach), [after_begin()](#sqlalchemy.orm.SessionEvents.after_begin),
    [after_bulk_delete()](#sqlalchemy.orm.SessionEvents.after_bulk_delete), [after_bulk_update()](#sqlalchemy.orm.SessionEvents.after_bulk_update),
    [after_commit()](#sqlalchemy.orm.SessionEvents.after_commit), [after_flush()](#sqlalchemy.orm.SessionEvents.after_flush),
    [after_flush_postexec()](#sqlalchemy.orm.SessionEvents.after_flush_postexec),
    [after_rollback()](#sqlalchemy.orm.SessionEvents.after_rollback), [after_soft_rollback()](#sqlalchemy.orm.SessionEvents.after_soft_rollback),
    [after_transaction_create()](#sqlalchemy.orm.SessionEvents.after_transaction_create),
    [after_transaction_end()](#sqlalchemy.orm.SessionEvents.after_transaction_end),
    [before_attach()](#sqlalchemy.orm.SessionEvents.before_attach), [before_commit()](#sqlalchemy.orm.SessionEvents.before_commit),
    [before_flush()](#sqlalchemy.orm.SessionEvents.before_flush), [deleted_to_detached()](#sqlalchemy.orm.SessionEvents.deleted_to_detached),
    [deleted_to_persistent()](#sqlalchemy.orm.SessionEvents.deleted_to_persistent),
    [detached_to_persistent()](#sqlalchemy.orm.SessionEvents.detached_to_persistent),
    [dispatch](#sqlalchemy.orm.SessionEvents.dispatch), [do_orm_execute()](#sqlalchemy.orm.SessionEvents.do_orm_execute),
    [loaded_as_persistent()](#sqlalchemy.orm.SessionEvents.loaded_as_persistent),
    [pending_to_persistent()](#sqlalchemy.orm.SessionEvents.pending_to_persistent),
    [pending_to_transient()](#sqlalchemy.orm.SessionEvents.pending_to_transient),
    [persistent_to_deleted()](#sqlalchemy.orm.SessionEvents.persistent_to_deleted),
    [persistent_to_detached()](#sqlalchemy.orm.SessionEvents.persistent_to_detached),
    [persistent_to_transient()](#sqlalchemy.orm.SessionEvents.persistent_to_transient),
    [transient_to_pending()](#sqlalchemy.orm.SessionEvents.transient_to_pending)'
- en: '**Class signature**'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.SessionEvents`](#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.SessionEvents`](#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")（`sqlalchemy.event.Events`）
- en: '[PRE165]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Execute after an instance is attached to a session.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例被附加到会话之后执行。
- en: 'Example argument forms:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE166]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: This is called after an add, delete or merge.
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加、删除或合并后调用。
- en: Note
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As of 0.8, this event fires off *after* the item has been fully associated with
    the session, which is different than previous releases. For event handlers that
    require the object not yet be part of session state (such as handlers which may
    autoflush while the target object is not yet complete) consider the new [`before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach") event.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 自0.8版开始，此事件在项目完全与会话相关联之后触发，这与之前的版本不同。对于需要对象尚未成为会话状态的事件处理程序（例如，当目标对象尚未完全完成时可能自动刷新的处理程序），请考虑使用新的[`before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach")事件。
- en: See also
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`SessionEvents.before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach")'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach")'
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE167]'
  id: totrans-1002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Execute after a transaction is begun on a connection.
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接上启动事务后执行。
- en: 'Example argument forms:'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE168]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Note
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This event is called within the process of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") modifying its own internal state. To invoke SQL operations
    within this hook, use the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") provided to the event; do not run SQL operations
    using the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    directly.
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")修改其自身内部状态的过程中调用。在此挂钩内调用SQL操作，请使用事件提供的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")；不要直接使用[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")运行SQL操作。
- en: 'Parameters:'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`transaction` – The [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").'
  id: totrans-1010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transaction` – [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。'
- en: '`connection` – The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object which will be used for SQL statements.'
  id: totrans-1011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 将用于SQL语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。'
- en: See also
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
- en: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
- en: '[PRE169]'
  id: totrans-1017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Event for after the legacy [`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") method has been called.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 当传统的[`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete "sqlalchemy.orm.Query.delete")方法被调用后的事件。
- en: 'Example argument forms:'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE170]'
  id: totrans-1020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Changed in version 0.9: The [`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete") event now accepts the arguments
    [`SessionEvents.after_bulk_delete.delete_context`](#sqlalchemy.orm.SessionEvents.after_bulk_delete.params.delete_context
    "sqlalchemy.orm.SessionEvents.after_bulk_delete"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本0.9开始更改：[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")事件现在接受参数[`SessionEvents.after_bulk_delete.delete_context`](#sqlalchemy.orm.SessionEvents.after_bulk_delete.params.delete_context
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")。将来版本中将删除接受上述“已弃用”的先前参数签名的侦听器函数的支持。
- en: Legacy Feature
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 旧特性
- en: The [`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete") method is a legacy event hook
    as of SQLAlchemy 2.0\. The event **does not participate** in [2.0 style](../glossary.html#term-2.0-style)
    invocations using [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") documented at [ORM UPDATE and DELETE with
    Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where).
    For 2.0 style use, the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook will intercept these calls.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 2.0开始，[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")方法是一个旧的事件钩子。该事件**不参与**使用[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")在[ORM UPDATE and DELETE with Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where)中记录的[2.0风格](../glossary.html#term-2.0-style)调用。对于2.0风格的使用，[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子将拦截这些调用。
- en: 'Parameters:'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**delete_context** –'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: '**delete_context** -'
- en: 'a “delete context” object which contains details about the update, including
    these attributes:'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含有关更新的“删除上下文”对象，包括以下属性：
- en: '`session` - the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    involved'
  id: totrans-1027
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` - 参与的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: ''
  id: totrans-1028
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1029
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query` -the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object that this update operation was called upon.'
  id: totrans-1030
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` - 调用此更新操作的[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象。'
- en: ''
  id: totrans-1031
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1032
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned as a result of the bulk DELETE operation.'
  id: totrans-1033
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result` - 作为批量删除操作的结果返回的[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。'
- en: 'Changed in version 1.4: the update_context no longer has a `QueryContext` object
    associated with it.'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：update_context不再与`QueryContext`对象相关联。
- en: See also
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
- en: '[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")'
- en: '[PRE171]'
  id: totrans-1038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Event for after the legacy [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method has been called.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在调用旧的[`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")方法之后触发事件。
- en: 'Example argument forms:'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE172]'
  id: totrans-1041
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Changed in version 0.9: The [`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") event now accepts the arguments
    [`SessionEvents.after_bulk_update.update_context`](#sqlalchemy.orm.SessionEvents.after_bulk_update.params.update_context
    "sqlalchemy.orm.SessionEvents.after_bulk_update"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本0.9开始更改：[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")事件现在接受参数[`SessionEvents.after_bulk_update.update_context`](#sqlalchemy.orm.SessionEvents.after_bulk_update.params.update_context
    "sqlalchemy.orm.SessionEvents.after_bulk_update")。将来版本中将删除接受上述“已弃用”的先前参数签名的侦听器函数的支持。
- en: Legacy Feature
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 旧特性
- en: The [`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") method is a legacy event hook
    as of SQLAlchemy 2.0\. The event **does not participate** in [2.0 style](../glossary.html#term-2.0-style)
    invocations using [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") documented at [ORM UPDATE and DELETE with
    Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where).
    For 2.0 style use, the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook will intercept these calls.
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") 方法是SQLAlchemy 2.0中的一个旧式事件钩子。此事件**不参与**使用
    [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    进行[2.0风格](../glossary.html#term-2.0-style)调用的文档化操作。要使用2.0风格，[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 钩子将拦截这些调用。'
- en: 'Parameters:'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**update_context** –'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: '**update_context** -'
- en: 'an “update context” object which contains details about the update, including
    these attributes:'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 包含关于更新的“更新上下文”对象，包括这些属性：
- en: '`session` - the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    involved'
  id: totrans-1048
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` - 涉及的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: ''
  id: totrans-1049
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1050
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query` -the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object that this update operation was called upon.'
  id: totrans-1051
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` - 调用此更新操作的[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象。'
- en: ''
  id: totrans-1052
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1053
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`values` The “values” dictionary that was passed to [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update").'
  id: totrans-1054
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values` - 传递给[`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 的“values”字典。'
- en: ''
  id: totrans-1055
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1056
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned as a result of the bulk UPDATE operation.'
  id: totrans-1057
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result` - 作为批量更新操作的结果返回的[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。'
- en: 'Changed in version 1.4: the update_context no longer has a `QueryContext` object
    associated with it.'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4起更改：update_context不再与`QueryContext`对象关联。
- en: See also
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
- en: '[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")'
- en: '[PRE173]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Execute after a commit has occurred.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交之后执行。
- en: 'Example argument forms:'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE174]'
  id: totrans-1065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Note
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: The [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") hook is *not* per-flush, that is,
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can emit SQL to the database many times within the scope of a transaction. For
    interception of these events, use the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"), [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush"), or [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") events.
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")钩子不是每次刷新都执行的，也就是说，在事务的范围内，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 可以多次向数据库发出SQL。要拦截这些事件，可以使用 [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")、[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") 或 [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") 事件。'
- en: Note
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in an active transaction when the [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") event is invoked, and therefore can
    not emit SQL. To emit SQL corresponding to every transaction, use the [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") event.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") 事件被调用时，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 处于非活动事务状态，因此无法发出 SQL。要发出与每个事务对应的 SQL，请使用 [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") 事件。
- en: 'Parameters:'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '**session** – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: See also
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
- en: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
- en: '[PRE175]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Execute after flush has completed, but before commit has been called.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 在 flush 完成后执行，但在提交之前调用。
- en: 'Example argument forms:'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE176]'
  id: totrans-1080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Note that the session’s state is still in pre-flush, i.e. ‘new’, ‘dirty’, and
    ‘deleted’ lists still show pre-flush state as well as the history settings on
    instance attributes.
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，会话的状态仍然处于 pre-flush 状态，即'new'、'dirty'和'deleted'列表仍然显示 pre-flush 状态以及实例属性上的历史设置。
- en: Warning
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This event runs after the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has emitted SQL to modify the database, but **before**
    it has altered its internal state to reflect those changes, including that newly
    inserted objects are placed into the identity map. ORM operations emitted within
    this event such as loads of related items may produce new identity map entries
    that will immediately be replaced, sometimes causing confusing results. SQLAlchemy
    will emit a warning for this condition as of version 1.3.9.
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    发出 SQL 修改数据库之后运行，但在它修改内部状态以反映这些更改之前运行，包括将新插入的对象放入标识映射中。在此事件内发出的 ORM 操作（如加载相关项目）可能会产生新的标识映射条目，这些条目将立即被替换，有时会导致混淆的结果。从版本
    1.3.9 起，SQLAlchemy 会对此条件发出警告。
- en: 'Parameters:'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush_context` – 处理 flush 细节的内部 [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") 对象。'
- en: See also
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
- en: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE177]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Execute after flush has completed, and after the post-exec state occurs.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 在 flush 完成后执行，并在 post-exec 状态发生后执行。
- en: 'Example argument forms:'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE178]'
  id: totrans-1094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: This will be when the ‘new’, ‘dirty’, and ‘deleted’ lists are in their final
    state. An actual commit() may or may not have occurred, depending on whether or
    not the flush started its own transaction or participated in a larger transaction.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是'new'、'dirty'和'deleted'列表处于最终状态的时候。实际的 commit() 可能已经发生，也可能没有发生，这取决于 flush
    是否启动了自己的事务或者参与了更大的事务。
- en: 'Parameters:'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush_context` – 处理刷新细节的内部[`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction")对象。'
- en: See also
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
- en: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE179]'
  id: totrans-1103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Execute after a real DBAPI rollback has occurred.
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际发生DBAPI回滚后执行。
- en: 'Example argument forms:'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE180]'
  id: totrans-1106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Note that this event only fires when the *actual* rollback against the database
    occurs - it does *not* fire each time the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method is called, if the underlying DBAPI transaction
    has already been rolled back. In many cases, the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will not be in an “active” state during this event,
    as the current transaction is not valid. To acquire a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which is active after the outermost rollback has proceeded,
    use the [`SessionEvents.after_soft_rollback()`](#sqlalchemy.orm.SessionEvents.after_soft_rollback
    "sqlalchemy.orm.SessionEvents.after_soft_rollback") event, checking the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") flag.
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此事件仅在实际对数据库执行回滚时触发 - 如果底层DBAPI事务已经被回滚，则不会每次调用[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法时都触发。在许多情况下，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在此事件期间将不处于“活动”状态，因为当前事务无效。要在最外层回滚进行后获取一个活动的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，请使用[`SessionEvents.after_soft_rollback()`](#sqlalchemy.orm.SessionEvents.after_soft_rollback
    "sqlalchemy.orm.SessionEvents.after_soft_rollback")事件，并检查[`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")标志。
- en: 'Parameters:'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '**session** – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '[PRE181]'
  id: totrans-1110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Execute after any rollback has occurred, including “soft” rollbacks that don’t
    actually emit at the DBAPI level.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 在发生任何回滚后执行，包括“软”回滚，这种回滚在DBAPI级别实际上不会发出。
- en: 'Example argument forms:'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE182]'
  id: totrans-1113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: This corresponds to both nested and outer rollbacks, i.e. the innermost rollback
    that calls the DBAPI’s rollback() method, as well as the enclosing rollback calls
    that only pop themselves from the transaction stack.
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 这对应于嵌套和外部回滚，即调用DBAPI的rollback()方法的最内部回滚，以及仅从事务堆栈中弹出自身的封闭回滚调用。
- en: 'The given [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can be used to invoke SQL and [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") operations after an outermost rollback by first
    checking the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") flag:'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")可以用于在外部回滚后通过首先检查[`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")标志来调用SQL和[`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")操作：
- en: '[PRE183]'
  id: totrans-1116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Parameters:'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`previous_transaction` – The [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") transactional marker object which was just
    closed. The current [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") for the given [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is available via the `Session.transaction` attribute.'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`previous_transaction` – 刚刚关闭的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")事务标记对象。给定[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的当前[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")可以通过`Session.transaction`属性获得。'
- en: '[PRE184]'
  id: totrans-1120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Execute when a new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建新的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")时执行。
- en: 'Example argument forms:'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE185]'
  id: totrans-1123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: This event differs from [`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin
    "sqlalchemy.orm.SessionEvents.after_begin") in that it occurs for each [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") overall, as opposed to when transactions
    are begun on individual database connections. It is also invoked for nested transactions
    and subtransactions, and is always matched by a corresponding [`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end") event (assuming normal operation
    of the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")).
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin
    "sqlalchemy.orm.SessionEvents.after_begin")不同，因为它针对每个[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")总体发生，而不是在个别数据库连接上开始事务时发生。它还用于嵌套事务和子事务，并始终与相应的[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")事件匹配（假设[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")正常运行）。
- en: 'Parameters:'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – the target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`transaction` –'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transaction` –'
- en: the target [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: 'To detect if this is the outermost [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction"), as opposed to a “subtransaction” or a SAVEPOINT,
    test that the [`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") attribute is `None`:'
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检测此是否为最外层[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")，而不是“子事务”或SAVEPOINT，请测试[`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent")属性是否为`None`：
- en: '[PRE186]'
  id: totrans-1130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'To detect if the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is a SAVEPOINT, use the [`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute:'
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检测[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")是否为SAVEPOINT，请使用[`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested")属性：
- en: '[PRE187]'
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: See also
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
- en: '[PRE188]'
  id: totrans-1136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Execute when the span of a [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") ends.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")的跨度结束时执行。
- en: 'Example argument forms:'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE189]'
  id: totrans-1139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: This event differs from [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") in that it corresponds to all [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") objects in use, including those for nested
    transactions and subtransactions, and is always matched by a corresponding [`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")不同，它对应于所有正在使用的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")对象，包括嵌套事务和子事务，并且始终与相应的[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")事件匹配。
- en: 'Parameters:'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – the target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`transaction` –'
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transaction` –'
- en: the target [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: 'To detect if this is the outermost [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction"), as opposed to a “subtransaction” or a SAVEPOINT,
    test that the [`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") attribute is `None`:'
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检测是否为最外层的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")，而不是“子事务”或SAVEPOINT，请测试[`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent")属性是否为`None`：
- en: '[PRE190]'
  id: totrans-1146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'To detect if the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is a SAVEPOINT, use the [`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute:'
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检测[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")是否为SAVEPOINT，请使用[`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested")属性：
- en: '[PRE191]'
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: See also
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
- en: '[PRE192]'
  id: totrans-1152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Execute before an instance is attached to a session.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例附加到会话之前执行。
- en: 'Example argument forms:'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE193]'
  id: totrans-1155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: This is called before an add, delete or merge causes the object to be part of
    the session.
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加、删除或合并导致对象成为会话的一部分之前调用此方法。
- en: See also
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach")'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach")'
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE194]'
  id: totrans-1160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Execute before commit is called.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用提交之前执行。
- en: 'Example argument forms:'
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE195]'
  id: totrans-1163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Note
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") hook is *not* per-flush, that is,
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can emit SQL to the database many times within the scope of a transaction. For
    interception of these events, use the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"), [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush"), or [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") events.
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")挂钩*不*是每次刷新的，也就是说，在事务范围内，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")可以多次向数据库发出SQL。要拦截这些事件，请使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")、[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush")或[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")事件。'
- en: 'Parameters:'
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: '**session** – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: See also
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
- en: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
- en: '[PRE196]'
  id: totrans-1173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Execute before flush process has started.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 在刷新过程开始之前执��。
- en: 'Example argument forms:'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE197]'
  id: totrans-1176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Parameters:'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  id: totrans-1179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush_context` – 处理刷新细节的内部[`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction")对象。'
- en: '`instances` – Usually `None`, this is the collection of objects which can be
    passed to the [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") method (note this usage is deprecated).'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instances` – 通常为`None`，这是可以传递给[`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")方法的对象集合（请注意，此用法已被弃用）。'
- en: See also
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
- en: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE198]'
  id: totrans-1185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Intercept the “deleted to detached” transition for a specific object.
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“删除到分离”转换。
- en: 'Example argument forms:'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE199]'
  id: totrans-1188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: This event is invoked when a deleted object is evicted from the session. The
    typical case when this occurs is when the transaction for a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in which the object was deleted is committed; the object
    moves from the deleted state to the detached state.
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 当从会话中删除的对象被驱逐时，将调用此事件。典型情况是当删除对象的会话的事务被提交时发生；对象从删除状态移动到分离状态。
- en: It is also invoked for objects that were deleted in a flush when the [`Session.expunge_all()`](session_api.html#sqlalchemy.orm.Session.expunge_all
    "sqlalchemy.orm.Session.expunge_all") or [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") events are called, as well as if the object is
    individually expunged from its deleted state via [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge").
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 还会为在调用[`Session.expunge_all()`](session_api.html#sqlalchemy.orm.Session.expunge_all
    "sqlalchemy.orm.Session.expunge_all")或[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")事件时被删除的对象调用，以及如果对象通过[`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge")从其删除状态单独驱逐。
- en: See also
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE200]'
  id: totrans-1193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Intercept the “deleted to persistent” transition for a specific object.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“删除到持久”转换。
- en: 'Example argument forms:'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE201]'
  id: totrans-1196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: This transition occurs only when an object that’s been deleted successfully
    in a flush is restored due to a call to [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"). The event is not called under any other circumstances.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 仅当在刷新中成功删除的对象由于调用[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")而被恢复时，才会发生此转换。在任何其他情况下不会调用该事件。
- en: See also
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE202]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Intercept the “detached to persistent” transition for a specific object.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“分离到持久化”转换。
- en: 'Example argument forms:'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE203]'
  id: totrans-1203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: This event is a specialization of the [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") event which is only invoked for this
    specific transition. It is invoked typically during the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") call, as well as during the [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") call if the object was not previously associated
    with the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (note that an object marked as “deleted” remains in the “persistent” state until
    the flush proceeds).
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件是 [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") 事件的一个特化，仅针对此特定转换调用。它通常在 [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") 调用期间调用，以及在对象之前未与 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 关联的情况下，在 [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") 调用期间调用（请注意，标记为“已删除”的对象在刷新之前仍处于“持久化”状态）。
- en: Note
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the object becomes persistent as part of a call to [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete"), the object is **not** yet marked as deleted
    when this event is called. To detect deleted objects, check the `deleted` flag
    sent to the [`SessionEvents.persistent_to_detached()`](#sqlalchemy.orm.SessionEvents.persistent_to_detached
    "sqlalchemy.orm.SessionEvents.persistent_to_detached") to event after the flush
    proceeds, or check the [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted") collection within the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") event if deleted objects need to
    be intercepted before the flush.
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象在调用 [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") 时变为持久化对象，则在调用此事件时对象尚未标记为已删除。要检测已删除的对象，请在刷新后检查发送到
    [`SessionEvents.persistent_to_detached()`](#sqlalchemy.orm.SessionEvents.persistent_to_detached
    "sqlalchemy.orm.SessionEvents.persistent_to_detached") 事件的 `deleted` 标志，或者在刷新之前需要拦截已删除对象时，在
    [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush "sqlalchemy.orm.SessionEvents.before_flush")
    事件中检查 [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted "sqlalchemy.orm.Session.deleted")
    集合。
- en: 'Parameters:'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-1209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的 ORM 映射实例。'
- en: See also
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE204]'
  id: totrans-1212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: reference back to the _Dispatch class.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 参考回到 _Dispatch 类。
- en: Bidirectional against _Dispatch._events
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 双向对抗 _Dispatch._events
- en: '[PRE205]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Intercept statement executions that occur on behalf of an ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截代表 ORM [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象执行的语句。
- en: 'Example argument forms:'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE206]'
  id: totrans-1218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: This event is invoked for all top-level SQL statements invoked from the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, as well as related methods such as [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") and [`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar"). As of SQLAlchemy 1.4, all ORM queries that run
    through the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method as well as related methods [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"), [`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar") etc. will participate in this event. This event
    hook does **not** apply to the queries that are emitted internally within the
    ORM flush process, i.e. the process described at [Flushing](session_basics.html#session-flushing).
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件被调用用于从[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法调用的所有顶级SQL语句，以及相关方法，如[`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")和[`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar")。从SQLAlchemy 1.4开始，所有通过[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法运行的ORM查询以及相关方法[`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")、[`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar")等都将参与此事件。此事件挂钩**不适用于**在ORM刷新过程内部发出的查询，即在[刷新](session_basics.html#session-flushing)中描述的过程。
- en: Note
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook is triggered **for ORM
    statement executions only**, meaning those invoked via the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and similar methods on the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object. It does **not** trigger for statements that
    are invoked by SQLAlchemy Core only, i.e. statements invoked directly using [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or otherwise originating from an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object without any [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") involved. To intercept **all** SQL executions regardless
    of whether the Core or ORM APIs are in use, see the event hooks at [`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents"), such as [`ConnectionEvents.before_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute").
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件挂钩仅**针对ORM语句执行**触发，即通过[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")和类似方法在[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象上调用的语句。它**不**会触发仅由SQLAlchemy Core调用的语句，即仅通过[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")直接调用的语句或从不涉及任何[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象发出的语句。要拦截**所有**SQL执行，无论是否使用Core或ORM API，请参见[`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")中的事件挂钩，如[`ConnectionEvents.before_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")和[`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")。'
- en: Also, this event hook does **not** apply to queries that are emitted internally
    within the ORM flush process, i.e. the process described at [Flushing](session_basics.html#session-flushing);
    to intercept steps within the flush process, see the event hooks described at
    [Persistence Events](session_events.html#session-persistence-events) as well as
    [Mapper-level Flush Events](session_events.html#session-persistence-mapper).
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件挂钩**不适用于**在ORM刷新过程内部发出的查询，即在[刷新](session_basics.html#session-flushing)中描述的过程；要拦截刷新过程中的步骤，请参见[持久性事件](session_events.html#session-persistence-events)以及[映射器级刷新事件](session_events.html#session-persistence-mapper)中描述的事件挂钩。
- en: This event is a `do_` event, meaning it has the capability to replace the operation
    that the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method normally performs. The intended use for
    this includes sharding and result-caching schemes which may seek to invoke the
    same statement across multiple database connections, returning a result that is
    merged from each of them, or which don’t invoke the statement at all, instead
    returning data from a cache.
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件是一个`do_`事件，意味着它具有替换[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法通常执行的操作的能力。其预期用途包括分片和结果缓存方案，这些方案可能希望在多个数据库连接上调用相同的语句，返回从每个连接合并的结果，或者根本不调用语句，而是从缓存返回数据。
- en: The hook intends to replace the use of the `Query._execute_and_instances` method
    that could be subclassed prior to SQLAlchemy 1.4.
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 该钩子旨在取代在 SQLAlchemy 1.4 之前可以被子类化的`Query._execute_and_instances`方法。
- en: 'Parameters:'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**orm_execute_state** – an instance of [`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState") which contains all information about the current
    execution, as well as helper functions used to derive other commonly required
    information. See that object for details.'
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: '**orm_execute_state** - 一个[`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState")的实例，其中包含有关当前执行的所有信息，以及用于推导其他常用信息的辅助函数。有关详细信息，请参阅该对象。'
- en: See also
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Execute Events](session_events.html#session-execute-events) - top level documentation
    on how to use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: '[执行事件](session_events.html#session-execute-events) - 关于如何使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")的顶级文档'
- en: '[`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    - the object passed to the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event which contains all information
    about the statement to be invoked. It also provides an interface to extend the
    current statement, options, and parameters as well as an option that allows programmatic
    invocation of the statement at any point.'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    - 传递给[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件的对象，其中包含有关要调用的语句的所有信息。它还提供了一个接口来扩展当前语句、选项和参数，以及一个选项，允许在任何时候以编程方式调用语句。'
- en: '[ORM Query Events](examples.html#examples-session-orm-events) - includes examples
    of using [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询事件](examples.html#examples-session-orm-events) - 包括使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")的示例'
- en: '[Dogpile Caching](examples.html#examples-caching) - an example of how to integrate
    Dogpile caching with the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") making use of the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dogpile 缓存](examples.html#examples-caching) - 一个示例，演示如何将 Dogpile 缓存与 ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")集成，利用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子。'
- en: '[Horizontal Sharding](examples.html#examples-sharding) - the Horizontal Sharding
    example / extension relies upon the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook to invoke a SQL statement
    on multiple backends and return a merged result.'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: '[水平分片](examples.html#examples-sharding) - 水平分片示例/扩展依赖于[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子，在多个后端上调用 SQL 语句并返回合并结果。'
- en: New in version 1.4.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: '[PRE207]'
  id: totrans-1234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Intercept the “loaded as persistent” transition for a specific object.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“加载为持久性”转换。
- en: 'Example argument forms:'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE208]'
  id: totrans-1237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: This event is invoked within the ORM loading process, and is invoked very similarly
    to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    event. However, the event here is linkable to a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class or instance, rather than to a mapper or class
    hierarchy, and integrates with the other session lifecycle events smoothly. The
    object is guaranteed to be present in the session’s identity map when this event
    is called.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在ORM加载过程中被调用，与[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")事件非常相似。然而，这里的事件可以链接到[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类或实例，而不是映射器或类层次结构，并且与其他会话生命周期事件平滑集成。在调用此事件时，对象保证存在于会话的标识映射中。
- en: Note
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This event is invoked within the loader process before eager loaders may have
    been completed, and the object’s state may not be complete. Additionally, invoking
    row-level refresh operations on the object will place the object into a new loader
    context, interfering with the existing load context. See the note on [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") for background on making use of the [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") parameter, which works in the same manner as that
    of [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents"), in order to resolve this scenario.
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在加载器过程中被调用，可能在急加载器完成之前，对象的状态可能不完整。此外，在对象上调用行级刷新操作将使对象进入新的加载器上下文，干扰现有的加载上下文。有关如何使用[`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents")参数的背景，请参阅有关使用[`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")的说明，以解决此场景。
- en: 'Parameters:'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-1242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-1243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的ORM映射实例。'
- en: See also
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE209]'
  id: totrans-1246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Intercept the “pending to persistent”” transition for a specific object.
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“挂起到持久”转换。
- en: 'Example argument forms:'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE210]'
  id: totrans-1249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: This event is invoked within the flush process, and is similar to scanning the
    [`Session.new`](session_api.html#sqlalchemy.orm.Session.new "sqlalchemy.orm.Session.new")
    collection within the [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") event. However, in this case the object
    has already been moved to the persistent state when the event is called.
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: '此事件在刷新过程中被调用，类似于在[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush")事件中扫描[`Session.new`](session_api.html#sqlalchemy.orm.Session.new
    "sqlalchemy.orm.Session.new")集合。然而，在这种情况下，当调用事件时，对象已经被移动到持久状态。 '
- en: 'Parameters:'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-1252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的ORM映射实例。'
- en: See also
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE211]'
  id: totrans-1256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Intercept the “pending to transient” transition for a specific object.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“挂起到瞬态”转换。
- en: 'Example argument forms:'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE212]'
  id: totrans-1259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: This less common transition occurs when an pending object that has not been
    flushed is evicted from the session; this can occur when the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method rolls back the transaction, or when
    the [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge "sqlalchemy.orm.Session.expunge")
    method is used.
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 当未刷新的挂起对象从会话中驱逐时，会发生这种较少见的转换；这可能发生在[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法回滚事务时，或者在使用[`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge")方法时。
- en: 'Parameters:'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-1262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-1263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的ORM映射实例。'
- en: See also
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE213]'
  id: totrans-1266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Intercept the “persistent to deleted” transition for a specific object.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“持久到已删除”转换。
- en: 'Example argument forms:'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE214]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: This event is invoked when a persistent object’s identity is deleted from the
    database within a flush, however the object still remains associated with the
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    until the transaction completes.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 当持久对象的标识在刷新中从数据库中删除时，将调用此事件，但是对象仍然与[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联，直到事务完成。
- en: If the transaction is rolled back, the object moves again to the persistent
    state, and the [`SessionEvents.deleted_to_persistent()`](#sqlalchemy.orm.SessionEvents.deleted_to_persistent
    "sqlalchemy.orm.SessionEvents.deleted_to_persistent") event is called. If the
    transaction is committed, the object becomes detached, which will emit the [`SessionEvents.deleted_to_detached()`](#sqlalchemy.orm.SessionEvents.deleted_to_detached
    "sqlalchemy.orm.SessionEvents.deleted_to_detached") event.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务被回滚，则对象再次移动到持久状态，并调用[`SessionEvents.deleted_to_persistent()`](#sqlalchemy.orm.SessionEvents.deleted_to_persistent
    "sqlalchemy.orm.SessionEvents.deleted_to_persistent")事件。如果事务被提交，则对象变为分离状态，这将触发[`SessionEvents.deleted_to_detached()`](#sqlalchemy.orm.SessionEvents.deleted_to_detached
    "sqlalchemy.orm.SessionEvents.deleted_to_detached")事件。
- en: Note that while the [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") method is the primary public interface to mark
    an object as deleted, many objects get deleted due to cascade rules, which are
    not always determined until flush time. Therefore, there’s no way to catch every
    object that will be deleted until the flush has proceeded. the [`SessionEvents.persistent_to_deleted()`](#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") event is therefore invoked
    at the end of a flush.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，虽然[`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")方法是标记对象为已删除的主要公共接口，但许多对象由于级联规则而被删除，这些规则直到刷新时才确定。因此，在刷新进行之前，没有办法捕获每个将被删除的对象。因此，在刷新结束时调用[`SessionEvents.persistent_to_deleted()`](#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted")事件。 '
- en: See also
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE215]'
  id: totrans-1275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Intercept the “persistent to detached” transition for a specific object.
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“持久到分离”转换。
- en: 'Example argument forms:'
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE216]'
  id: totrans-1278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'This event is invoked when a persistent object is evicted from the session.
    There are many conditions that cause this to happen, including:'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 当持久对象从会话中驱逐时，将调用此事件。导致此事件发生的许多条件，包括：
- en: using a method such as [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge") or [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")
  id: totrans-1280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge "sqlalchemy.orm.Session.expunge")或[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")等方法
- en: Calling the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method, when the object was part of an INSERT
    statement for that session’s transaction
  id: totrans-1281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当对象是该会话事务的INSERT语句的一部分时，调用[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法
- en: 'Parameters:'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-1283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-1284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的ORM映射实例。'
- en: '`deleted` – boolean. If True, indicates this object moved to the detached state
    because it was marked as deleted and flushed.'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleted` – 布尔值。如果为True，则表示此对象因被标记为已删除并刷新而移动到分离状态。'
- en: See also
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE217]'
  id: totrans-1288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: Intercept the “persistent to transient” transition for a specific object.
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“持久到瞬时”转换。
- en: 'Example argument forms:'
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE218]'
  id: totrans-1291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: This less common transition occurs when an pending object that has has been
    flushed is evicted from the session; this can occur when the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method rolls back the transaction.
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 这种较不常见的转换发生在已刷新的挂起对象从会话中被驱逐时；当[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法回滚事务时，这种情况可能发生。
- en: 'Parameters:'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-1294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的ORM映射实例。'
- en: See also
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: '[PRE219]'
  id: totrans-1298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Intercept the “transient to pending” transition for a specific object.
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截特定对象的“瞬态到挂起”转换。
- en: 'Example argument forms:'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE220]'
  id: totrans-1301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: This event is a specialization of the [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") event which is only invoked for this
    specific transition. It is invoked typically during the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") call.
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件是[`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach")事件的一个特例，仅在这个特定的转换中调用。通常在[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")调用期间调用。
- en: 'Parameters:'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-1304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 目标[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
- en: '`instance` – the ORM-mapped instance being operated upon.'
  id: totrans-1305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 正在操作的ORM映射实例。'
- en: See also
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象生命周期事件](session_events.html#session-lifecycle-events)'
- en: Mapper Events
  id: totrans-1308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射器事件
- en: 'Mapper event hooks encompass things that happen as related to individual or
    multiple [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects, which are the central configurational object that maps a user-defined
    class to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. Types of things which occur at the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") level include:'
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 映射器事件钩子涵盖了与单个或多个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象相关的事情，这些对象是将用户定义的类映射到[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的中心配置对象。在[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")级别发生的事情包括：
- en: '**Per-object persistence operations** - the most popular mapper hooks are the
    unit-of-work hooks such as [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert"), [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update
    "sqlalchemy.orm.MapperEvents.after_update"), etc. These events are contrasted
    to the more coarse grained session-level events such as [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") in that they occur within the flush
    process on a per-object basis; while finer grained activity on an object is more
    straightforward, availability of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") features is limited.'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个对象的持久化操作** - 最常见的映射器钩子是工作单元钩子，如[`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert")、[`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update
    "sqlalchemy.orm.MapperEvents.after_update")等。这些事件与更粗粒度的会话级事件形成对比，如[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")，因为它们在每个对象的刷新过程中发生；虽然对象上的更细粒度活动更直接，但[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")功能的可用性有限。'
- en: '**Mapper configuration events** - the other major class of mapper hooks are
    those which occur as a class is mapped, as a mapper is finalized, and when sets
    of mappers are configured to refer to each other. These events include [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class"), [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") at the individual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") level, and [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") and [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") at the level of collections of
    [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects.'
  id: totrans-1311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**映射器配置事件** - 另一类重要的映射器钩子是在类被映射时、映射器被最终化时以及当映射器集合被配置为相互引用时发生的事件。这些事件包括 [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class")、[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") 和 [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") 在单个 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 级别，以及 [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") 和 [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 在集合的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象级别。'
- en: '| Object Name | Description |'
  id: totrans-1312
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1313
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [MapperEvents](#sqlalchemy.orm.MapperEvents) | Define events specific to
    mappings. |'
  id: totrans-1314
  prefs: []
  type: TYPE_TB
  zh: '| [MapperEvents](#sqlalchemy.orm.MapperEvents) | 定义特定于映射的事件。 |'
- en: '[PRE221]'
  id: totrans-1315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: Define events specific to mappings.
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 定义特定于映射的事件。
- en: 'e.g.:'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE222]'
  id: totrans-1318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Available targets include:'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的目标包括：
- en: mapped classes
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射的类
- en: unmapped superclasses of mapped or to-be-mapped classes (using the `propagate=True`
    flag)
  id: totrans-1321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射或待映射类的未映射超类（使用 `propagate=True` 标志）
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects'
  id: totrans-1322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象'
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class itself indicates listening for all mappers.
  id: totrans-1323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    类本身表示监听所有映射器。'
- en: Mapper events provide hooks into critical sections of the mapper, including
    those related to object instrumentation, object loading, and object persistence.
    In particular, the persistence methods [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert"), and [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") are popular places to augment the
    state being persisted - however, these methods operate with several significant
    restrictions. The user is encouraged to evaluate the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") and [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") methods as more flexible and user-friendly
    hooks in which to apply additional database state during a flush.
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: Mapper 事件提供对映射器关键部分的钩子，包括与对象工具化、对象加载和对象持久化相关的部分。特别是，持久化方法 [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert") 和 [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") 是增强正在持久化的状态的流行位置 - 但是，这些方法在几个重要限制下运作。鼓励用户评估
    [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush "sqlalchemy.orm.SessionEvents.before_flush")
    和 [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")
    方法，作为在刷新期间应用额外数据库状态的更灵活和用户友好的钩子。
- en: When using [`MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents"),
    several modifiers are available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    时，[`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    函数提供了几个修饰符。
- en: 'Parameters:'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`propagate=False` – When True, the event listener should be applied to all
    inheriting mappers and/or the mappers of inheriting classes, as well as any mapper
    which is the target of this listener.'
  id: totrans-1327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate=False` – 当为 True 时，事件监听器应用于所有继承映射器和/或继承类的映射器，以及任何作为此监听器目标的映射器。'
- en: '`raw=False` – When True, the “target” argument passed to applicable event listener
    functions will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  id: totrans-1328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw=False` – 当为 True 时，传递给适用的事件监听器函数的“target”参数将是实例的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")管理对象，而不是映射的实例本身。'
- en: '`retval=False` –'
  id: totrans-1329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retval=False` –'
- en: 'when True, the user-defined event function must have a return value, the purpose
    of which is either to control subsequent event propagation, or to otherwise alter
    the operation in progress by the mapper. Possible return values are:'
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，用户定义的事件函数必须有一个返回值，其目的是要么控制后续事件的传播，要么通过映射器以其他方式修改正在进行的操作。可能的返回值包括：
- en: '`sqlalchemy.orm.interfaces.EXT_CONTINUE` - continue event processing normally.'
  id: totrans-1331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.interfaces.EXT_CONTINUE` - 继续正常事件处理。'
- en: '`sqlalchemy.orm.interfaces.EXT_STOP` - cancel all subsequent event handlers
    in the chain.'
  id: totrans-1332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.interfaces.EXT_STOP` - 取消链中所有后续事件处理程序。'
- en: other values - the return value specified by specific listeners.
  id: totrans-1333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他值 - 特定监听器指定的返回值。
- en: '**Members**'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[after_configured()](#sqlalchemy.orm.MapperEvents.after_configured), [after_delete()](#sqlalchemy.orm.MapperEvents.after_delete),
    [after_insert()](#sqlalchemy.orm.MapperEvents.after_insert), [after_mapper_constructed()](#sqlalchemy.orm.MapperEvents.after_mapper_constructed),
    [after_update()](#sqlalchemy.orm.MapperEvents.after_update), [before_configured()](#sqlalchemy.orm.MapperEvents.before_configured),
    [before_delete()](#sqlalchemy.orm.MapperEvents.before_delete), [before_insert()](#sqlalchemy.orm.MapperEvents.before_insert),
    [before_mapper_configured()](#sqlalchemy.orm.MapperEvents.before_mapper_configured),
    [before_update()](#sqlalchemy.orm.MapperEvents.before_update), [dispatch](#sqlalchemy.orm.MapperEvents.dispatch),
    [instrument_class()](#sqlalchemy.orm.MapperEvents.instrument_class), [mapper_configured()](#sqlalchemy.orm.MapperEvents.mapper_configured)'
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: '[after_configured()](#sqlalchemy.orm.MapperEvents.after_configured), [after_delete()](#sqlalchemy.orm.MapperEvents.after_delete),
    [after_insert()](#sqlalchemy.orm.MapperEvents.after_insert), [after_mapper_constructed()](#sqlalchemy.orm.MapperEvents.after_mapper_constructed),
    [after_update()](#sqlalchemy.orm.MapperEvents.after_update), [before_configured()](#sqlalchemy.orm.MapperEvents.before_configured),
    [before_delete()](#sqlalchemy.orm.MapperEvents.before_delete), [before_insert()](#sqlalchemy.orm.MapperEvents.before_insert),
    [before_mapper_configured()](#sqlalchemy.orm.MapperEvents.before_mapper_configured),
    [before_update()](#sqlalchemy.orm.MapperEvents.before_update), [dispatch](#sqlalchemy.orm.MapperEvents.dispatch),
    [instrument_class()](#sqlalchemy.orm.MapperEvents.instrument_class), [mapper_configured()](#sqlalchemy.orm.MapperEvents.mapper_configured)'
- en: '**Class signature**'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE223]'
  id: totrans-1338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Called after a series of mappers have been configured.
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 在一系列映射器被配置后调用。
- en: 'Example argument forms:'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE224]'
  id: totrans-1341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: The [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event is invoked each time the
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function is invoked, after the function has completed its work. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 函数完成其工作后，都会调用 [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 事件。通常在首次使用映射时自动调用 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")，以及每当新映射器可用并检测到新的映射器使用时。
- en: Contrast this event to the [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event, which is called on a per-mapper
    basis while the configuration operation proceeds; unlike that event, when this
    event is invoked, all cross-configurations (e.g. backrefs) will also have been
    made available for any mappers that were pending. Also contrast to [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured"), which is invoked before the
    series of mappers has been configured.
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 将此事件与[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")事件进行对比，该事件在配置操作进行时基于每个映射器调用；与该事件不同，当调用此事件时，所有交叉配置（例如反向引用）也将对任何待定映射器可用。还与[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")进行对比，该事件在系列映射器配置之前调用。
- en: 'This event can **only** be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class, and not to individual mappings or mapped classes.
    It is only invoked for all mappings as a whole:'
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**只能**应用于[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类，而不能应用于单个映射或映射类。它仅对所有映射作为一个整体调用：
- en: '[PRE225]'
  id: totrans-1345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'Theoretically this event is called once per application, but is actually called
    any time new mappers have been affected by a [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call. If new mappings are constructed after
    existing ones have already been used, this event will likely be called again.
    To ensure that a particular event is only called once and no further, the `once=True`
    argument (new in 0.9.4) can be applied:'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，这个事件在每个应用程序中只调用一次，但实际上在任何新映射器受到[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")调用时都会被调用。如果在已经使用现有映射后构造了新映射，则可能会再次调用此事件。要确保特定事件仅被调用一次且不再调用，可以应用`once=True`参数（0.9.4中新增）：
- en: '[PRE226]'
  id: totrans-1347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: See also
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
- en: '[PRE227]'
  id: totrans-1352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Receive an object instance after a DELETE statement has been emitted corresponding
    to that instance.
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出对应于该实例的 DELETE 语句后接收对象实例。
- en: 'Example argument forms:'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE228]'
  id: totrans-1355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Note
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，并且**不**适用于在[ORM 启用的
    INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html#orm-expression-update-delete)中描述的
    ORM DML 操作。要拦截 ORM DML 事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to emit additional SQL statements on the given connection
    as well as to perform application specific bookkeeping related to a deletion event.
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于在给定连接上发出额外的 SQL 语句，以及执行与删除事件相关的应用程序特定的簿记。
- en: The event is often called for a batch of objects of the same class after their
    DELETE statements have been emitted at once in a previous step.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: 该事件通常在之前的步骤中一次发出多个相同类的对象的 DELETE 语句后调用。
- en: Warning
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: Mapper级别的刷新事件仅允许对仅限于操作的行的本地属性进行**非常有限的操作**，同时允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何SQL。**请完全阅读**[Mapper级别的刷新事件](session_events.html#session-persistence-mapper)中关于使用这些方法的指南；通常，应优先使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行一般的刷新更改。
- en: 'Parameters:'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-1363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit DELETE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-1364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于发出此实例的DELETE语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这为当前事务提供了一个处理该实例特定于目标数据库的句柄。'
- en: '`target` – the mapped instance being deleted. If the event is configured with
    `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在删除的映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE229]'
  id: totrans-1370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Receive an object instance after an INSERT statement is emitted corresponding
    to that instance.
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出与该实例对应的INSERT语句后接收一个对象实例。
- en: 'Example argument forms:'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE230]'
  id: totrans-1373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Note
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，**不**适用于描述在[ORM-启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html#orm-expression-update-delete)中的ORM
    DML操作。要拦截ORM DML事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to modify in-Python-only state on the instance after an INSERT
    occurs, as well as to emit additional SQL statements on the given connection.
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于修改实例发生INSERT后的仅在Python中的状态，以及在给定连接上发出附加的SQL语句。
- en: The event is often called for a batch of objects of the same class after their
    INSERT statements have been emitted at once in a previous step. In the extremely
    rare case that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object can be configured with `batch=False`, which will
    cause batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 该事件通常在一批相同类的对象的INSERT语句一次性发出后被调用。在极为罕见的情况下，如果这不是理想的情况，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象可以配置为`batch=False`，这将导致实例批次被拆分为单个（性能较差）事件->持久化->事件步骤。
- en: Warning
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 仅允许在操作的行上的局部属性上执行**非常有限的操作**，以及在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上允许发出任何 SQL。 **请务必充分阅读**有关使用这些方法的指南的[Mapper级别刷新事件](session_events.html#session-persistence-mapper)的说明；一般情况下，应优先考虑[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行一般性刷新更改。
- en: 'Parameters:'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-1381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 这个事件目标的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit INSERT statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出 INSERT 语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这提供了一个句柄到目标数据库上当前事务的处理，该事务特定于此实例。'
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在持久化的映射实例。如果事件配置为 `raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: No return value is supported by this event.
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持此事件的返回值。
- en: See also
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久化事件](session_events.html#session-persistence-events)'
- en: '[PRE231]'
  id: totrans-1388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Receive a class and mapper when the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") has been fully constructed.
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")完全构建完成时，接收一个类和映射器。
- en: 'Example argument forms:'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE232]'
  id: totrans-1391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: This event is called after the initial constructor for [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") completes. This occurs after the [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class") event and after the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") has done an initial pass of its arguments to generate
    its collection of [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects, which are accessible via the [`Mapper.get_property()`](mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property") method and the [`Mapper.iterate_properties`](mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties") attribute.
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在初始构造函数完成后调用[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。这发生在[`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class")事件之后，也发生在[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对其参数进行初始遍历以生成其[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象集合之后，该集合可通过[`Mapper.get_property()`](mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property")方法和[`Mapper.iterate_properties`](mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties")属性访问。
- en: This event differs from the [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event in that it is invoked
    within the constructor for [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"),
    rather than within the [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") process. Currently, this event is the only
    one which is appropriate for handlers that wish to create additional mapped classes
    in response to the construction of this [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), which will be part of the same configure step when [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") next runs.
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 该事件与[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")事件的不同之处在于它在[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的构造函数内调用，而不是在[`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")过程中调用。目前，这是唯一一个适用于希望在构造此[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")时创建其他映射类的处理程序的事件，这些映射类将在下次运行[`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")时成为同一配置步骤的一部分。
- en: New in version 2.0.2.
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中新增。
- en: See also
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Versioning Objects](examples.html#examples-versioning) - an example which
    illustrates the use of the [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event to create new mappers
    to record change-audit histories on objects.'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象版本控制](examples.html#examples-versioning) - 一个示例，演示了使用[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")事件创建新的映射器以记录对象的变更审计历史。'
- en: '[PRE233]'
  id: totrans-1397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Receive an object instance after an UPDATE statement is emitted corresponding
    to that instance.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出与该实例相对应的UPDATE语句之后接收对象实例。
- en: 'Example argument forms:'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE234]'
  id: totrans-1400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Note
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，并且**不**适用于在[ORM启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html#orm-expression-update-delete)中描述的ORM
    DML操作。要拦截ORM DML事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to modify in-Python-only state on the instance after an UPDATE
    occurs, as well as to emit additional SQL statements on the given connection.
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于修改更新后的实例上的仅在Python中的状态，以及在给定连接上发出附加SQL语句。
- en: This method is called for all instances that are marked as “dirty”, *even those
    which have no net changes to their column-based attributes*, and for which no
    UPDATE statement has proceeded. An object is marked as dirty when any of its column-based
    attributes have a “set attribute” operation called or when any of its collections
    are modified. If, at update time, no column-based attributes have any net changes,
    no UPDATE statement will be issued. This means that an instance being sent to
    [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update "sqlalchemy.orm.MapperEvents.after_update")
    is *not* a guarantee that an UPDATE statement has been issued.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有标记为“脏”的实例都会调用此方法，*即使它们的基于列的属性没有任何净变化*，并且没有进行UPDATE语句。当对象的任何基于列的属性被调用“设置属性”操作或其任何集合被修改时，对象被标记为脏。如果在更新时，没有基于列的属性有任何净变化，则不会发出UPDATE语句。这意味着被发送到[`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update
    "sqlalchemy.orm.MapperEvents.after_update")的实例*不能*保证已发出UPDATE语句。
- en: To detect if the column-based attributes on the object have net changes, and
    therefore resulted in an UPDATE statement, use `object_session(instance).is_modified(instance,
    include_collections=False)`.
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测对象上基于列的属性是否有净变化，从而导致UPDATE语句，请使用`object_session(instance).is_modified(instance,
    include_collections=False)`。
- en: The event is often called for a batch of objects of the same class after their
    UPDATE statements have been emitted at once in a previous step. In the extremely
    rare case that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") can be configured with `batch=False`, which will cause
    batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一步骤一次性发出它们的UPDATE语句之后，往往为同一类对象的一批对象调用事件。在极其罕见的情况下，如果这不是可取的，[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")可以配置为`batch=False`，这将导致实例批次被分解为单个（性能较差）事件->持久化->事件步骤。
- en: Warning
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: Mapper级别的刷新事件仅允许对仅与正在操作的行本地属性进行**非常有限的操作**，并允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何SQL。**请完整阅读**[Mapper级刷新事件](session_events.html#session-persistence-mapper)的注释以获取有关使用这些方法的指南；一般而言，应首选[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行一般的刷新更改。
- en: 'Parameters:'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-1410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 这个事件目标的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit UPDATE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-1411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出UPDATE语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这提供了一个句柄到当前事务的目标数据库，该事务特定于此实例。'
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 被持久化的映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE235]'
  id: totrans-1417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Called before a series of mappers have been configured.
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 在一系列映射器配置之前调用。
- en: 'Example argument forms:'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE236]'
  id: totrans-1420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: The [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event is invoked each time the
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function is invoked, before the function has done any of its work. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")函数时，都会调用[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")事件，在函数尚未执行任何工作之前。 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")通常在首次使用映射时自动调用，以及每次新的映射器可用并检测到新的映射器使用时调用。
- en: 'This event can **only** be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class, and not to individual mappings or mapped classes.
    It is only invoked for all mappings as a whole:'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类，而不适用于单个映射或映射类。它仅为所有映射作为一个整体调用：
- en: '[PRE237]'
  id: totrans-1423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Contrast this event to [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), which is invoked after the series
    of mappers has been configured, as well as [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured"), which are both invoked on a
    per-mapper basis.
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 将此事件与[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")进行对比，后者在一系列映射器已配置之后调用，以及[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")和[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")，它们在每个映射器基础上调用。
- en: 'Theoretically this event is called once per application, but is actually called
    any time new mappers are to be affected by a [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call. If new mappings are constructed after
    existing ones have already been used, this event will likely be called again.
    To ensure that a particular event is only called once and no further, the `once=True`
    argument (new in 0.9.4) can be applied:'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，此事件在应用程序中每次调用一次，但实际上，任何时候新的映射器都会受到[`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")调用的影响。如果在已使用现有映射器之后构造新映射，则可能会再次调用此事件。为确保仅调用特定事件一次且不再调用，可以应用`once=True`参数（0.9.4中的新功能）：
- en: '[PRE238]'
  id: totrans-1426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: See also
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
- en: '[PRE239]'
  id: totrans-1431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Receive an object instance before a DELETE statement is emitted corresponding
    to that instance.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出与该实例对应的DELETE语句之前接收一个对象实例。
- en: 'Example argument forms:'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE240]'
  id: totrans-1434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Note
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅适用于**[会话刷新操作](session_basics.html#session-flushing)，**不适用于**在[ORM-Enabled
    INSERT, UPDATE, 和 DELETE statements](queryguide/dml.html#orm-expression-update-delete)中描述的ORM
    DML操作。要拦截ORM DML事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to emit additional SQL statements on the given connection
    as well as to perform application specific bookkeeping related to a deletion event.
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于在给定连接上发出额外的SQL语句，以及执行与删除事件相关的应用程序特定簿记。
- en: The event is often called for a batch of objects of the same class before their
    DELETE statements are emitted at once in a later step.
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: 该事件通常在后续步骤中一次性发出同一类对象的批量DELETE语句之前为其进行调用。
- en: Warning
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 仅允许在仅对操作的行本地属性上进行**非常有限的操作**，以及允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何SQL语句。**请务必充分阅读**[Mapper-level Flush Events](session_events.html#session-persistence-mapper)中的注意事项，以获取使用这些方法的指南；通常，应优先使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行常规的刷新更改。
- en: 'Parameters:'
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-1442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit DELETE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-1443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出DELETE语句的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这提供了一个句柄进入与此实例特定目标数据库上的当前事务。'
- en: '`target` – the mapped instance being deleted. If the event is configured with
    `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在删除的映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: 'Returns:'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久化事件](session_events.html#session-persistence-events)'
- en: '[PRE241]'
  id: totrans-1449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Receive an object instance before an INSERT statement is emitted corresponding
    to that instance.
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出与该实例对应的INSERT语句之前接收对象实例。
- en: 'Example argument forms:'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE242]'
  id: totrans-1452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Note
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，**不**适用于[ORM启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html#orm-expression-update-delete)中描述的ORM
    DML操作。要拦截ORM DML事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to modify local, non-object related attributes on the instance
    before an INSERT occurs, as well as to emit additional SQL statements on the given
    connection.
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于在发生INSERT之前修改实例上的本地、非对象相关属性，以及在给定连接上发出附加的SQL语句。
- en: The event is often called for a batch of objects of the same class before their
    INSERT statements are emitted at once in a later step. In the extremely rare case
    that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object can be configured with `batch=False`, which will
    cause batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: 在稍后的步骤中一次性发出它们的INSERT语句之前，通常为同一类对象的一批对象调用此事件。在极为罕见的情况下，如果这不是理想的情况，可以使用`batch=False`配置[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象，这将导致实例批次被拆分为单个（性能较差）事件->持久化->事件步骤。
- en: Warning
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: Mapper级别的刷新事件仅允许**非常有限的操作**，仅限于对正在操作的行本地属性的操作，以及允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何SQL。**请完全阅读**[Mapper级别刷新事件](session_events.html#session-persistence-mapper)中的注意事项，以获取有关使用这些方法的指南；通常，应优先使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行一般的刷新更改。
- en: 'Parameters:'
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-1460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit INSERT statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-1461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出 INSERT 语句的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。这提供了一个在目标数据库上当前事务中使用的句柄，该事务特定于此实例。'
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在持久化的映射实例。如果事件配置为 `raw=True`，则这将改为与实例关联的 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 状态管理对象。'
- en: 'Returns:'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is supported by this event.
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE243]'
  id: totrans-1467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: Called right before a specific mapper is to be configured.
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定映射器配置之前调用。
- en: 'Example argument forms:'
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE244]'
  id: totrans-1470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: This event is intended to allow a specific mapper to be skipped during the configure
    step, by returning the `interfaces.EXT_SKIP` symbol which indicates to the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call that this particular mapper (or hierarchy
    of mappers, if `propagate=True` is used) should be skipped in the current configuration
    run. When one or more mappers are skipped, the he “new mappers” flag will remain
    set, meaning the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function will continue to be called when mappers
    are used, to continue to try to configure all available mappers.
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件旨在允许在配置步骤中跳过特定映射器，方法是返回 `interfaces.EXT_SKIP` 符号，该符号表示向 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 调用指示此特定映射器（或如果使用 `propagate=True` 则是映射器层次结构）应在当前配置运行中被跳过。当跳过一个或多个映射器时，将保持“新映射器”标志设置，这意味着当使用映射器时，将继续调用
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    函数，以继续尝试配置所有可用的映射器。
- en: In comparison to the other configure-level events, [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured"), [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured"), the :meth;`.MapperEvents.before_mapper_configured`
    event provides for a meaningful return value when it is registered with the `retval=True`
    parameter.
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他配置级事件 [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")、[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 和 [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") 相比，当使用 `retval=True` 参数注册时，:meth;`.MapperEvents.before_mapper_configured`
    事件在注册时提供了有意义的返回值。
- en: New in version 1.3.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能。
- en: 'e.g.:'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE245]'
  id: totrans-1475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: See also
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
- en: '[PRE246]'
  id: totrans-1480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Receive an object instance before an UPDATE statement is emitted corresponding
    to that instance.
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出相应于该实例的 UPDATE 语句之前接收对象实例。
- en: 'Example argument forms:'
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE247]'
  id: totrans-1483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: Note
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件**仅**适用于[会话刷新操作](session_basics.html#session-flushing)，**不**适用于[ORM启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html#orm-expression-update-delete)中描述的ORM
    DML操作。要拦截ORM DML事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")。
- en: This event is used to modify local, non-object related attributes on the instance
    before an UPDATE occurs, as well as to emit additional SQL statements on the given
    connection.
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件用于在UPDATE发生之前修改实例上的本地、非对象相关属性，以及在给定连接上发出额外的SQL语句。
- en: This method is called for all instances that are marked as “dirty”, *even those
    which have no net changes to their column-based attributes*. An object is marked
    as dirty when any of its column-based attributes have a “set attribute” operation
    called or when any of its collections are modified. If, at update time, no column-based
    attributes have any net changes, no UPDATE statement will be issued. This means
    that an instance being sent to [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") is *not* a guarantee that an UPDATE
    statement will be issued, although you can affect the outcome here by modifying
    attributes so that a net change in value does exist.
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法适用于所有被标记为“脏”的实例，*即使它们的基于列的属性没有净变化*。当对象的任何基于列的属性被调用“设置属性”操作或其集合被修改时，对象被标记为脏。如果在更新时，没有基于列的属性有任何净变化，那么不会发出UPDATE语句。这意味着将实例发送到[`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update")并*不*保证会发出UPDATE语句，尽管您可以通过修改属性以使值存在净变化来影响结果。
- en: To detect if the column-based attributes on the object have net changes, and
    will therefore generate an UPDATE statement, use `object_session(instance).is_modified(instance,
    include_collections=False)`.
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测对象的基于列的属性是否有净变化，并因此生成UPDATE语句，请使用`object_session(instance).is_modified(instance,
    include_collections=False)`。
- en: The event is often called for a batch of objects of the same class before their
    UPDATE statements are emitted at once in a later step. In the extremely rare case
    that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") can be configured with `batch=False`, which will cause
    batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: 在稍后的步骤中，通常在一批相同类的对象之前调用此事件，然后一次发出它们的UPDATE语句。在极为罕见的情况下，如果这不可取，可以配置[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")为`batch=False`，这将导致实例批次被拆分为单个（性能较差）事件->持久化->事件步骤。
- en: Warning
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: Mapper级别的刷新事件仅允许**非常有限的操作**，仅限于操作的行本地属性，以及允许在给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上发出任何SQL。请**完全阅读**[Mapper级别刷新事件](session_events.html#session-persistence-mapper)中的注意事项，以获取有关使用这些方法的指导；通常，应优先使用[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")方法进行一般的刷新更改。
- en: 'Parameters:'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-1493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件目标的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit UPDATE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 用于为此实例发出 UPDATE 语句的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 。这提供了一个句柄进入当前数据库的事务，特定于此实例。'
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 正在持久化的映射实例。如果事件配置为 `raw=True`，则这将是与实例关联的 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 状态管理对象。'
- en: 'Returns:'
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: No return value is supported by this event.
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件不支持返回值。
- en: See also
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久性事件](session_events.html#session-persistence-events)'
- en: '[PRE248]'
  id: totrans-1500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: reference back to the _Dispatch class.
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 参考回到 _Dispatch 类。
- en: Bidirectional against _Dispatch._events
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 双向反对 _Dispatch._events
- en: '[PRE249]'
  id: totrans-1503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: Receive a class when the mapper is first constructed, before instrumentation
    is applied to the mapped class.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 当映射器首次构造时接收类，然后应用到映射类之前的仪器。
- en: 'Example argument forms:'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE250]'
  id: totrans-1506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: This event is the earliest phase of mapper construction. Most attributes of
    the mapper are not yet initialized. To receive an event within initial mapper
    construction where basic state is available such as the [`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") collection, the [`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") event may be a better
    choice.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件是映射器构造的最早阶段。大多数映射器的属性尚未初始化。要在初始映射器构造中接收事件，在其中可以使用基本状态的情况下，例如 [`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") 集合，可能更好地选择 [`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") 事件。
- en: 'This listener can either be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class overall, or to any un-mapped class which serves
    as a base for classes that will be mapped (using the `propagate=True` flag):'
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 此侦听器可以应用于整个 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    类，也可以应用于任何未映射的类，该类用作将要映射的类的基类（使用 `propagate=True` 标志）：
- en: '[PRE251]'
  id: totrans-1509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'Parameters:'
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-1511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 此事件目标的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    。'
- en: '`class_` – the mapped class.'
  id: totrans-1512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 映射的类。'
- en: See also
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")'
- en: '[PRE252]'
  id: totrans-1515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Called when a specific mapper has completed its own configuration within the
    scope of the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call.
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 当特定映射器在 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 调用范围内完成其自身配置时调用。
- en: 'Example argument forms:'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE253]'
  id: totrans-1518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: The [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event is invoked for each mapper
    that is encountered when the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function proceeds through the current list
    of not-yet-configured mappers. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 函数通过当前尚未配置的映射器列表进行时，对遇到的每个映射器调用 [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") 事件。通常在首次使用映射时自动调用 [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")，以及每次有新映射器可用并检测到新映射器使用时。
- en: When the event is called, the mapper should be in its final state, but **not
    including backrefs** that may be invoked from other mappers; they might still
    be pending within the configuration operation. Bidirectional relationships that
    are instead configured via the [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") argument *will* be fully available, since this
    style of relationship does not rely upon other possibly-not-configured mappers
    to know that they exist.
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用事件时，映射器应处于最终状态，但**不包括**可能从其他映射器调用的反向引用；它们可能仍在配置操作中挂起。通过[`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")参数配置的双向关系将完全可用，因为这种关系方式不依赖于其他可能尚未配置的映射器来知道它们的存在。
- en: For an event that is guaranteed to have **all** mappers ready to go including
    backrefs that are defined only on other mappings, use the [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event; this event invokes only
    after all known mappings have been fully configured.
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个保证**所有**映射都准备就绪，包括仅在其他映射上定义的反向引用的事件，请使用[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")事件；此事件仅在所有已知映射完全配置后才调用。
- en: The [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event, unlike [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") or [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), is called for each mapper/class
    individually, and the mapper is passed to the event itself. It also is called
    exactly once for a particular mapper. The event is therefore useful for configurational
    steps that benefit from being invoked just once on a specific mapper basis, which
    don’t require that “backref” configurations are necessarily ready yet.
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")或[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")不同，[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")事件为每个映射/类单独调用，并将映射器传递给事件本身。对于特定映射器，该事件仅调用一次。因此，该事件对于在特定映射器基础上仅调用一次的配置步骤非常有用，这些步骤不要求“反向引用”配置必须已准备就绪。
- en: 'Parameters:'
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  id: totrans-1524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 这个事件的目标是[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`class_` – the mapped class.'
  id: totrans-1525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 映射的类。'
- en: See also
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
- en: Instance Events
  id: totrans-1530
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例事件
- en: Instance events are focused on the construction of ORM mapped instances, including
    when they are instantiated as [transient](../glossary.html#term-transient) objects,
    when they are loaded from the database and become [persistent](../glossary.html#term-persistent)
    objects, as well as when database refresh or expiration operations occur on the
    object.
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: 实例事件专注于ORM映射实例的构建，包括当它们作为[瞬态](../glossary.html#term-transient)对象实例化时，当它们从数据库加载并成为[持久](../glossary.html#term-persistent)对象时，以及当数据库刷新或过期操作发生在对象上时。
- en: '| Object Name | Description |'
  id: totrans-1532
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1533
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [InstanceEvents](#sqlalchemy.orm.InstanceEvents) | Define events specific
    to object lifecycle. |'
  id: totrans-1534
  prefs: []
  type: TYPE_TB
  zh: '| [InstanceEvents](#sqlalchemy.orm.InstanceEvents) | 定义特定于对象生命周期的事件。 |'
- en: '[PRE254]'
  id: totrans-1535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Define events specific to object lifecycle.
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 定义特定于对象生命周期的事件。
- en: 'e.g.:'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE255]'
  id: totrans-1538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Available targets include:'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的目标包括：
- en: mapped classes
  id: totrans-1540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已映射的类
- en: unmapped superclasses of mapped or to-be-mapped classes (using the `propagate=True`
    flag)
  id: totrans-1541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已映射或将要映射的类的未映射超类（使用`propagate=True`标志）
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects'
  id: totrans-1542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象'
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class itself indicates listening for all mappers.
  id: totrans-1543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类本身指示侦听所有映射器。'
- en: Instance events are closely related to mapper events, but are more specific
    to the instance and its instrumentation, rather than its system of persistence.
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 实例事件与映射器事件密切相关，但更具体于实例及其仪器化，而不是其持久化系统。
- en: When using [`InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents"),
    several modifiers are available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function.
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents")时，[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")函数提供了几个修饰符。
- en: 'Parameters:'
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`propagate=False` – When True, the event listener should be applied to all
    inheriting classes as well as the class which is the target of this listener.'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate=False` – 当为True时，事件监听器应该应用于所有继承类，以及作为此监听器目标的类。'
- en: '`raw=False` – When True, the “target” argument passed to applicable event listener
    functions will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  id: totrans-1548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw=False` – 当为True时，适用的事件监听器函数传递给“target”参数将是实例的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")管理对象，而不是映射实例本身。'
- en: '`restore_load_context=False` –'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restore_load_context=False` –'
- en: Applies to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") and [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") events. Restores the loader context of
    the object when the event hook is complete, so that ongoing eager load operations
    continue to target the object appropriately. A warning is emitted if the object
    is moved to a new loader context from within one of these events if this flag
    is not set.
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 适用于[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")和[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")事件。在事件钩子完成后恢复对象的加载器上下文，以便持续的急加载操作继续适当地针对对象。如果在这些事件之一内部将对象移动到新的加载器上下文中并且未设置此标志，则会发出警告。
- en: New in version 1.3.14.
  id: totrans-1551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.3.14中的新内容。
- en: '**Members**'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispatch](#sqlalchemy.orm.InstanceEvents.dispatch), [expire()](#sqlalchemy.orm.InstanceEvents.expire),
    [first_init()](#sqlalchemy.orm.InstanceEvents.first_init), [init()](#sqlalchemy.orm.InstanceEvents.init),
    [init_failure()](#sqlalchemy.orm.InstanceEvents.init_failure), [load()](#sqlalchemy.orm.InstanceEvents.load),
    [pickle()](#sqlalchemy.orm.InstanceEvents.pickle), [refresh()](#sqlalchemy.orm.InstanceEvents.refresh),
    [refresh_flush()](#sqlalchemy.orm.InstanceEvents.refresh_flush), [unpickle()](#sqlalchemy.orm.InstanceEvents.unpickle)'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispatch](#sqlalchemy.orm.InstanceEvents.dispatch), [expire()](#sqlalchemy.orm.InstanceEvents.expire),
    [first_init()](#sqlalchemy.orm.InstanceEvents.first_init), [init()](#sqlalchemy.orm.InstanceEvents.init),
    [init_failure()](#sqlalchemy.orm.InstanceEvents.init_failure), [load()](#sqlalchemy.orm.InstanceEvents.load),
    [pickle()](#sqlalchemy.orm.InstanceEvents.pickle), [refresh()](#sqlalchemy.orm.InstanceEvents.refresh),
    [refresh_flush()](#sqlalchemy.orm.InstanceEvents.refresh_flush), [unpickle()](#sqlalchemy.orm.InstanceEvents.unpickle)'
- en: '**Class signature**'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE256]'
  id: totrans-1556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: reference back to the _Dispatch class.
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯到_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 双向对_Dispatch._events
- en: '[PRE257]'
  id: totrans-1559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Receive an object instance after its attributes or some subset have been expired.
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 在其属性或某些子集被过期后接收对象实例。
- en: 'Example argument forms:'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE258]'
  id: totrans-1562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: ‘keys’ is a list of attribute names. If None, the entire state was expired.
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: ‘keys’是属性名称列表。如果为None，则整个状态已过期。
- en: 'Parameters:'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，则此处将替代与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`attrs` – sequence of attribute names which were expired, or None if all attributes
    were expired.'
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attrs` – 被过期的属性名称序列，如果所有属性均已过期则为None。'
- en: '[PRE259]'
  id: totrans-1567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: Called when the first instance of a particular mapping is called.
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: 当特定映射的第一个实例被调用时调用。
- en: 'Example argument forms:'
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE260]'
  id: totrans-1570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: This event is called when the `__init__` method of a class is called the first
    time for that particular class. The event invokes before `__init__` actually proceeds
    as well as before the [`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init
    "sqlalchemy.orm.InstanceEvents.init") event is invoked.
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: 当为该特定类第一次调用`__init__`方法时调用此事件。该事件在`__init__`实际执行之前以及在调用[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init
    "sqlalchemy.orm.InstanceEvents.init")事件之前调用。
- en: '[PRE261]'
  id: totrans-1572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Receive an instance when its constructor is called.
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: 当其构造函数被调用时接收一个实例。
- en: 'Example argument forms:'
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE262]'
  id: totrans-1575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: This method is only called during a userland construction of an object, in conjunction
    with the object’s constructor, e.g. its `__init__` method. It is not called when
    an object is loaded from the database; see the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") event in order to intercept a database load.
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅在对象的用户空间构造期间调用，与对象的构造函数（例如其`__init__`方法）一起。当对象从数据库加载时不会调用它；请参阅[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")事件以拦截数据库加载。
- en: The event is called before the actual `__init__` constructor of the object is
    called. The `kwargs` dictionary may be modified in-place in order to affect what
    is passed to `__init__`.
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际调用对象的`__init__`构造函数之前调用该事件。`kwargs`字典可以就地修改，以影响传递给`__init__`的内容。
- en: 'Parameters:'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射的实例。如果事件配置为`raw=True`，则这将是与该实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`args` – positional arguments passed to the `__init__` method. This is passed
    as a tuple and is currently immutable.'
  id: totrans-1580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args` – 传递给`__init__`方法的位置参数。这将作为元组传递，目前不可变。'
- en: '`kwargs` – keyword arguments passed to the `__init__` method. This structure
    *can* be altered in place.'
  id: totrans-1581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – 传递给`__init__`方法的关键字参数。此结构*可以*就地更改。'
- en: See also
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceEvents.init_failure()`](#sqlalchemy.orm.InstanceEvents.init_failure
    "sqlalchemy.orm.InstanceEvents.init_failure")'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.init_failure()`](#sqlalchemy.orm.InstanceEvents.init_failure
    "sqlalchemy.orm.InstanceEvents.init_failure")'
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
- en: '[PRE263]'
  id: totrans-1585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Receive an instance when its constructor has been called, and raised an exception.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: 当其构造函数被调用并引发异常时接收一个实例。
- en: 'Example argument forms:'
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE264]'
  id: totrans-1588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: This method is only called during a userland construction of an object, in conjunction
    with the object’s constructor, e.g. its `__init__` method. It is not called when
    an object is loaded from the database.
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅在对象的用户空间构造期间调用，与对象的构造函数（例如其`__init__`方法）一起。当对象从数据库加载时不会调用它。
- en: The event is invoked after an exception raised by the `__init__` method is caught.
    After the event is invoked, the original exception is re-raised outwards, so that
    the construction of the object still raises an exception. The actual exception
    and stack trace raised should be present in `sys.exc_info()`.
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 在捕获到`__init__`方法引发的异常后调用该事件。调用事件后，原始异常将重新引发，以便对象的构造仍然引发异常。应在`sys.exc_info()`中提供实际异常和堆栈跟踪引发的异常。
- en: 'Parameters:'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射的实例。如果事件配置为`raw=True`，则这将是与该实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`args` – positional arguments that were passed to the `__init__` method.'
  id: totrans-1593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args` – 传递给`__init__`方法的位置参数。'
- en: '`kwargs` – keyword arguments that were passed to the `__init__` method.'
  id: totrans-1594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – 传递给`__init__`方法的关键字参数。'
- en: See also
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
- en: '[PRE265]'
  id: totrans-1598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Receive an object instance after it has been created via `__new__`, and after
    initial attribute population has occurred.
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过 `__new__` 创建对象实例并进行初始属性填充之后接收对象实例。
- en: 'Example argument forms:'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE266]'
  id: totrans-1601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: This typically occurs when the instance is created based on incoming result
    rows, and is only called once for that instance’s lifetime.
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常发生在基于传入结果行创建实例时，并且仅针对该实例的生命周期调用一次。
- en: Warning
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: During a result-row load, this event is invoked when the first row received
    for this instance is processed. When using eager loading with collection-oriented
    attributes, the additional rows that are to be loaded / processed in order to
    load subsequent collection items have not occurred yet. This has the effect both
    that collections will not be fully loaded, as well as that if an operation occurs
    within this event handler that emits another database load operation for the object,
    the “loading context” for the object can change and interfere with the existing
    eager loaders still in progress.
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果行加载期间，当处理此实例的第一行接收到时会调用此事件。当使用带有集合定向属性的急切加载时，用于加载后续集合项的其他行尚未发生 / 处理。这既会导致集合不会完全加载，也会导致如果在此事件处理程序内发生了导致对象发出另一个数据库加载操作的操作，则对象的“加载上下文”可能会发生变化，并干扰正在进行的现有急切加载程序。
- en: 'Examples of what can cause the “loading context” to change within the event
    handler include, but are not necessarily limited to:'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 导致事件处理程序内的“加载上下文”发生变化的原因示例包括但不限于：
- en: accessing deferred attributes that weren’t part of the row, will trigger an
    “undefer” operation and refresh the object
  id: totrans-1606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问未包含在行中的延迟属性将触发“取消延迟”操作并刷新对象。
- en: accessing attributes on a joined-inheritance subclass that weren’t part of the
    row, will trigger a refresh operation.
  id: totrans-1607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问未包含在行中的联接继承子类的属性将触发刷新操作。
- en: 'As of SQLAlchemy 1.3.14, a warning is emitted when this occurs. The [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") option may be used on the event to prevent this
    warning; this will ensure that the existing loading context is maintained for
    the object after the event is called:'
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQLAlchemy 1.3.14 开始，当发生这种情况时会发出警告。[`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") 选项可用于事件上以防止此警告；这将确保在调用事件后保持对象的现有加载上下文：
- en: '[PRE267]'
  id: totrans-1609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'Changed in version 1.3.14: Added [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") and [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") flags which apply to “on load” events, which will
    ensure that the loading context for an object is restored when the event hook
    is complete; a warning is emitted if the load context of the object changes without
    this flag being set.'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.14 版更改：增加了 [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") 和 [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") 标志，适用于“加载”事件，将确保在事件挂钩完成时恢复对象的加载上下文；如果没有设置此标志，则会发出警告，指示对象的加载上下文发生了变化。
- en: The [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    event is also available in a class-method decorator format called [`reconstructor()`](mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor").
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    事件也以类方法装饰器格式可用，称为 [`reconstructor()`](mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor")。'
- en: 'Parameters:'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射的实例。如果事件配置了 `raw=True`，则会变成与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`context` – the [`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") corresponding to the current [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in progress. This argument may be `None` if the load does
    not correspond to a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query"),
    such as during [`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").'
  id: totrans-1614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 与当前进行中的[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对应的[`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext")。如果加载不对应于[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")，例如在[`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")期间，此参数可能为`None`。'
- en: See also
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: '[维护跨加载的非映射状态](mapping_styles.html#mapped-class-load-events)'
- en: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
- en: '[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh "sqlalchemy.orm.InstanceEvents.refresh")'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh "sqlalchemy.orm.InstanceEvents.refresh")'
- en: '[`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")'
- en: '[PRE268]'
  id: totrans-1620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Receive an object instance when its associated state is being pickled.
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: 在其关联状态被pickled时接收对象实例。
- en: 'Example argument forms:'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE269]'
  id: totrans-1623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'Parameters:'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`state_dict` – the dictionary returned by `__getstate__`, containing the state
    to be pickled.'
  id: totrans-1626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state_dict` – 由`__getstate__`返回的字典，包含要被pickled的状态。'
- en: '[PRE270]'
  id: totrans-1627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Receive an object instance after one or more attributes have been refreshed
    from a query.
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: 在从查询中刷新一个或多个属性后接收对象实例。
- en: 'Example argument forms:'
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE271]'
  id: totrans-1630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Contrast this to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") method, which is invoked when the object
    is first loaded from a query.
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")方法形成对比，当对象首次从查询中加载时会调用该方法。
- en: Note
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This event is invoked within the loader process before eager loaders may have
    been completed, and the object’s state may not be complete. Additionally, invoking
    row-level refresh operations on the object will place the object into a new loader
    context, interfering with the existing load context. See the note on [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") for background on making use of the [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") parameter, in order to resolve this scenario.
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载器进程中在急切加载器可能已完成之前调用此事件，并且对象的状态可能不完整。此外，在对象上调用行级刷新操作将使对象进入新的加载器上下文，干扰现有的加载上下文。有关如何利用[`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents")参数解决此场景的背景，请参阅有关[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load")的注释。
- en: 'Parameters:'
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，则这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`context` – the [`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") corresponding to the current [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in progress.'
  id: totrans-1636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 与当前进行中的[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对应的[`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext")。'
- en: '`attrs` – sequence of attribute names which were populated, or None if all
    column-mapped, non-deferred attributes were populated.'
  id: totrans-1637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attrs` – 已填充的属性名称序列，如果所有列映射的非延迟属性都已填充，则为None。'
- en: See also
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: '[在加载过程中保持非映射状态](mapping_styles.html#mapped-class-load-events)'
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
- en: '[PRE272]'
  id: totrans-1641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: Receive an object instance after one or more attributes that contain a column-level
    default or onupdate handler have been refreshed during persistence of the object’s
    state.
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象的状态持久化过程中，当一个或多个包含列级默认值或onupdate处理程序的属性被刷新后，会收到一个对象实例。
- en: 'Example argument forms:'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE273]'
  id: totrans-1644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: This event is the same as [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") except it is invoked within the unit
    of work flush process, and includes only non-primary-key columns that have column
    level default or onupdate handlers, including Python callables as well as server
    side defaults and triggers which may be fetched via the RETURNING clause.
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh "sqlalchemy.orm.InstanceEvents.refresh")相同，只是在工作单元刷新过程中调用，并且仅包括具有列级默认值或onupdate处理程序的非主键列，包括Python可调用对象以及通过RETURNING子句获取的服务器端默认值和触发器。
- en: Note
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While the [`InstanceEvents.refresh_flush()`](#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") event is triggered for an object
    that was INSERTed as well as for an object that was UPDATEd, the event is geared
    primarily towards the UPDATE process; it is mostly an internal artifact that INSERT
    actions can also trigger this event, and note that **primary key columns for an
    INSERTed row are explicitly omitted** from this event. In order to intercept the
    newly INSERTed state of an object, the [`SessionEvents.pending_to_persistent()`](#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent") and [`MapperEvents.after_insert()`](#sqlalchemy.orm.MapperEvents.after_insert
    "sqlalchemy.orm.MapperEvents.after_insert") are better choices.
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`InstanceEvents.refresh_flush()`](#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")事件是为INSERT和UPDATE的对象触发的，但该事件主要针对UPDATE过程；这主要是一个内部工件，INSERT操作也可以触发此事件，并注意**INSERT行的主键列明确地在此事件中被省略**。为了拦截对象的新INSERT状态，[`SessionEvents.pending_to_persistent()`](#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent")和[`MapperEvents.after_insert()`](#sqlalchemy.orm.MapperEvents.after_insert
    "sqlalchemy.orm.MapperEvents.after_insert")是更好的选择。
- en: 'Parameters:'
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，那么这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  id: totrans-1650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush_context` – 处理刷新细节的内部[`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction")对象。'
- en: '`attrs` – sequence of attribute names which were populated.'
  id: totrans-1651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attrs` – 被填充的属性名称序列。'
- en: See also
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: '[在加载过程中保持非映射状态](mapping_styles.html#mapped-class-load-events)'
- en: '[Fetching Server-Generated Defaults](persistence_techniques.html#orm-server-defaults)'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: '[获取服务器生成的默认值](persistence_techniques.html#orm-server-defaults)'
- en: '[Column INSERT/UPDATE Defaults](../core/defaults.html)'
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: '[列的INSERT/UPDATE默认值](../core/defaults.html)'
- en: '[PRE274]'
  id: totrans-1656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: Receive an object instance after its associated state has been unpickled.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 在关联状态被反pickle后，收到一个对象实例。
- en: 'Example argument forms:'
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE275]'
  id: totrans-1659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'Parameters:'
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  id: totrans-1661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 映射实例。如果事件配置为`raw=True`，那么这将是与实例关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")状态管理对象。'
- en: '`state_dict` – the dictionary sent to `__setstate__`, containing the state
    dictionary which was pickled.'
  id: totrans-1662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state_dict` – 发送给`__setstate__`的字典，包含被pickle的状态字典。'
- en: '## Attribute Events'
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: '## 属性事件'
- en: Attribute events are triggered as things occur on individual attributes of ORM
    mapped objects. These events form the basis for things like [custom validation
    functions](mapped_attributes.html#simple-validators) as well as [backref handlers](backref.html#relationships-backref).
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: 属性事件在ORM映射对象的各个属性发生事情时触发。这些事件构成了诸如[自定义验证函数](mapped_attributes.html#simple-validators)和[反向引用处理程序](backref.html#relationships-backref)等功能的基础。
- en: See also
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changing Attribute Behavior](mapped_attributes.html)'
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: '[更改属性行为](mapped_attributes.html)'
- en: '| Object Name | Description |'
  id: totrans-1667
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1668
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AttributeEvents](#sqlalchemy.orm.AttributeEvents) | Define events for object
    attributes. |'
  id: totrans-1669
  prefs: []
  type: TYPE_TB
  zh: '| [AttributeEvents](#sqlalchemy.orm.AttributeEvents) | 为对象属性定义事件。 |'
- en: '[PRE276]'
  id: totrans-1670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: Define events for object attributes.
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 为对象属性定义事件。
- en: These are typically defined on the class-bound descriptor for the target class.
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 这些通常在目标类的类绑定描述符上定义。
- en: 'For example, to register a listener that will receive the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event:'
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要注册一个将接收[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件的监听器：
- en: '[PRE277]'
  id: totrans-1674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'Listeners have the option to return a possibly modified version of the value,
    when the [`AttributeEvents.retval`](#sqlalchemy.orm.AttributeEvents.params.retval
    "sqlalchemy.orm.AttributeEvents") flag is passed to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") or [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"), such as below, illustrated using the [`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set") event:'
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`AttributeEvents.retval`](#sqlalchemy.orm.AttributeEvents.params.retval "sqlalchemy.orm.AttributeEvents")标志传递给[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")或[`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for")时，监听器可以选择返回可能修改的值的版本，如下所示，使用[`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set")事件进行说明：
- en: '[PRE278]'
  id: totrans-1676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: A validation function like the above can also raise an exception such as `ValueError`
    to halt the operation.
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 类似上述的验证函数也可以引发异常，如`ValueError`以停止操作。
- en: 'The [`AttributeEvents.propagate`](#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents") flag is also important when applying listeners
    to mapped classes that also have mapped subclasses, as when using mapper inheritance
    patterns:'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: 当将监听器应用于具有映射子类的映射类时，[`AttributeEvents.propagate`](#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents")标志也很重要，例如在使用映射器继承模式时：
- en: '[PRE279]'
  id: totrans-1679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: The full list of modifiers available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") and [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for") functions are below.
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    和 [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    函数可用的所有修饰符如下。'
- en: 'Parameters:'
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`active_history=False` – When True, indicates that the “set” event would like
    to receive the “old” value being replaced unconditionally, even if this requires
    firing off database loads. Note that `active_history` can also be set directly
    via [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    and [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship").'
  id: totrans-1682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_history=False` – 当为True时，表示“set”事件希望无条件接收被替换的“旧”值，即使这需要触发数据库加载。请注意，`active_history`也可以通过[`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")和[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")直接设置。'
- en: '`propagate=False` – When True, the listener function will be established not
    just for the class attribute given, but for attributes of the same name on all
    current subclasses of that class, as well as all future subclasses of that class,
    using an additional listener that listens for instrumentation events.'
  id: totrans-1683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate=False` – 当为True时，监听器函数将不仅为给定的类属性建立，还将为该类的所有当前子类以及该类的所有未来子类上具有相同名称的属性建立一个额外的监听器，该监听器监听仪器事件。'
- en: '`raw=False` – When True, the “target” argument to the event will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw=False` – 当为True时，事件的“target”参数将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")管理对象，而不是映射实例本身。'
- en: '`retval=False` – when True, the user-defined event listening must return the
    “value” argument from the function. This gives the listening function the opportunity
    to change the value that is ultimately used for a “set” or “append” event.'
  id: totrans-1685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retval=False` – 当为True时，用户定义的事件监听必须从函数返回“value”参数。这使得监听函数有机会改变最终用于“set”或“append”事件的值。'
- en: '**Members**'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[append()](#sqlalchemy.orm.AttributeEvents.append), [append_wo_mutation()](#sqlalchemy.orm.AttributeEvents.append_wo_mutation),
    [bulk_replace()](#sqlalchemy.orm.AttributeEvents.bulk_replace), [dispatch](#sqlalchemy.orm.AttributeEvents.dispatch),
    [dispose_collection()](#sqlalchemy.orm.AttributeEvents.dispose_collection), [init_collection()](#sqlalchemy.orm.AttributeEvents.init_collection),
    [init_scalar()](#sqlalchemy.orm.AttributeEvents.init_scalar), [modified()](#sqlalchemy.orm.AttributeEvents.modified),
    [remove()](#sqlalchemy.orm.AttributeEvents.remove), [set()](#sqlalchemy.orm.AttributeEvents.set)'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: '[append()](#sqlalchemy.orm.AttributeEvents.append), [append_wo_mutation()](#sqlalchemy.orm.AttributeEvents.append_wo_mutation),
    [bulk_replace()](#sqlalchemy.orm.AttributeEvents.bulk_replace), [dispatch](#sqlalchemy.orm.AttributeEvents.dispatch),
    [dispose_collection()](#sqlalchemy.orm.AttributeEvents.dispose_collection), [init_collection()](#sqlalchemy.orm.AttributeEvents.init_collection),
    [init_scalar()](#sqlalchemy.orm.AttributeEvents.init_scalar), [modified()](#sqlalchemy.orm.AttributeEvents.modified),
    [remove()](#sqlalchemy.orm.AttributeEvents.remove), [set()](#sqlalchemy.orm.AttributeEvents.set)'
- en: '**Class signature**'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE280]'
  id: totrans-1690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Receive a collection append event.
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: 接收集合追加事件。
- en: 'Example argument forms:'
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE281]'
  id: totrans-1693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: The append event is invoked for each element as it is appended to the collection.
    This occurs for single-item appends as well as for a “bulk replace” operation.
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 每当元素被追加到集合中时，都会调用追加事件。这适用于单个元素追加以及“批量替换”操作。
- en: 'Parameters:'
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-1696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器注册为`raw=True`，则这将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象。'
- en: '`value` – the value being appended. If this listener is registered with `retval=True`,
    the listener function must return this value, or a new value which replaces it.'
  id: totrans-1697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 被追加的值。如果此监听器注册为`retval=True`，则监听函数必须返回此值，或替换它的新值。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation, as well as be inspected for information about the source
    of the event.'
  id: totrans-1698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 一个代表事件启动的`Event`实例。可能会被backref处理程序修改其原始值，以控制链式事件传播，同时也可以被检查以获取有关事件源的信息。'
- en: '`key` –'
  id: totrans-1699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` –'
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `collection[some_key_or_index] = value`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")参数设置为True来建立事件时，这将是操作中使用的键，例如`collection[some_key_or_index]
    = value`。如果未使用[`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")设置事件，则根本不会传递该参数；这是为了允许与不包括`key`参数的现���事件处理程序向后兼容。
- en: New in version 2.0.
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版中的新内容。
- en: 'Returns:'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: if the event was registered with `retval=True`, the given value, or a new effective
    value, should be returned.
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事件注册时使用`retval=True`，应返回给定值或新的有效值。
- en: See also
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，如传播到子类。'
- en: '[`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")'
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")'
- en: '[PRE282]'
  id: totrans-1707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Receive a collection append event where the collection was not actually mutated.
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个集合追加事件，其中集合实际上未发生变化。
- en: 'Example argument forms:'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE283]'
  id: totrans-1710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: This event differs from [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") in that it is fired off for de-duplicating
    collections such as sets and dictionaries, when the object already exists in the
    target collection. The event does not have a return value and the identity of
    the given object cannot be changed.
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append "sqlalchemy.orm.AttributeEvents.append")不同，因为它是为了去重集合（如集合和字典）而触发的，当对象已经存在于目标集合中时。该事件没有返回值，给定对象的标识不能更改。
- en: The event is used for cascading objects into a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when the collection has already been mutated via a backref
    event.
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: 当集合已通过反向引用事件发生变异时，此事件用于级联对象到[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: 'Parameters:'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-1714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果侦听器注册为`raw=True`，这将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象。'
- en: '`value` – the value that would be appended if the object did not already exist
    in the collection.'
  id: totrans-1715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 如果对象尚未存在于集合中，则将要附加的值。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation, as well as be inspected for information about the source
    of the event.'
  id: totrans-1716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 代表事件启动的`Event`实例。可以通过反向引用处理程序修改其原始值，以控制链式事件传播，并且可以检查有关事件源的信息。'
- en: '`key` –'
  id: totrans-1717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` –'
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `collection[some_key_or_index] = value`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")参数设置为 True 来建立事件时，这将是操作中使用的键，例如 `collection[some_key_or_index]
    = value`。如果没有使用[`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")来设置事件，则根本不会将参数传递给事件；这是为了允许与不包括`key`参数的现有事件处理程序保持向后兼容。
- en: New in version 2.0.
  id: totrans-1719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新内容。
- en: 'Returns:'
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: No return value is defined for this event.
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: 没有为此事件定义返回值。
- en: New in version 1.4.15.
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.15 中的新内容。
- en: '[PRE284]'
  id: totrans-1723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: Receive a collection ‘bulk replace’ event.
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个集合‘批量替换’事件。
- en: 'Example argument forms:'
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE285]'
  id: totrans-1726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: This event is invoked for a sequence of values as they are incoming to a bulk
    collection set operation, which can be modified in place before the values are
    treated as ORM objects. This is an “early hook” that runs before the bulk replace
    routine attempts to reconcile which objects are already present in the collection
    and which are being removed by the net replace operation.
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 当值作为批量集合设置操作的一部分传入时，将调用此事件，可以在值被视为 ORM 对象之前就地修改。这是一个“早期挂钩”，在批量替换例程尝试协调哪些对象已经存在于集合中，哪些对象被净替换操作移除之前运行。
- en: 'It is typical that this method be combined with use of the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event. When using both of these events,
    note that a bulk replace operation will invoke the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event for all new items, even after [`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") has been invoked for the collection
    as a whole. In order to determine if an [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event is part of a bulk replace, use
    the symbol `attributes.OP_BULK_REPLACE` to test the incoming initiator:'
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这个方法会与[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件一起使用。当同时使用这两个事件时，请注意，批量替换操作将为所有新项目调用[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件，即使在为整个集合调用[`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")之后。为了确定[`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")事件是否是批量替换的一部分，请使用符号`attributes.OP_BULK_REPLACE`来测试传入的initiator：
- en: '[PRE286]'
  id: totrans-1729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: New in version 1.2.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的新功能。
- en: 'Parameters:'
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-1732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器以`raw=True`注册，这将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象。'
- en: '`value` – a sequence (e.g. a list) of the values being set. The handler can
    modify this list in place.'
  id: totrans-1733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 被设置的值的序列（例如列表）。处理程序可以直接修改此列表。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 代表事件启动的`Event`实例。'
- en: '`keys` –'
  id: totrans-1735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys` –'
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the sequence
    of keys used in the operation, typically only for a dictionary update. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")参数设置为True来建立事件时，这将是操作中使用的键的序列，通常仅用于字典更新。如果未使用[`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")设置事件，参数根本不会传递给事件；这是为了允许与不包括`key`参数的现有事件处理程序保持向后兼容。
- en: New in version 2.0.
  id: totrans-1737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，例如传播到子类。'
- en: '[PRE287]'
  id: totrans-1740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: reference back to the _Dispatch class.
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
  zh: 参考回到_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 双向对_Dispatch._events
- en: '[PRE288]'
  id: totrans-1743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: Receive a ‘collection dispose’ event.
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: 接收“集合处理”事件。
- en: 'Example argument forms:'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE289]'
  id: totrans-1746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'This event is triggered for a collection-based attribute when a collection
    is replaced, that is:'
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: 当集合被替换时，此事件将为基于集合的属性触发，即：
- en: '[PRE290]'
  id: totrans-1748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: The old collection received will contain its previous contents.
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: 旧集合接收到的将包含其先前的内容。
- en: 'Changed in version 1.2: The collection passed to [`AttributeEvents.dispose_collection()`](#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection") will now have its contents
    before the dispose intact; previously, the collection would be empty.'
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的更改：传递给[`AttributeEvents.dispose_collection()`](#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection")的集合现在在处理之前会保持其内容；以前，集合将为空。
- en: See also
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，例如传播到子类。'
- en: '[PRE291]'
  id: totrans-1753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Receive a ‘collection init’ event.
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: 接收“集合初始化”事件。
- en: 'Example argument forms:'
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE292]'
  id: totrans-1756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: This event is triggered for a collection-based attribute, when the initial “empty
    collection” is first generated for a blank attribute, as well as for when the
    collection is replaced with a new one, such as via a set event.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 当为空属性首次生成初始的“空集合”时以及当集合被新集合替换时，例如通过 set 事件，将触发此事件。
- en: 'E.g., given that `User.addresses` is a relationship-based collection, the event
    is triggered here:'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，给定`User.addresses`是基于关系的集合，此处触发事件：
- en: '[PRE293]'
  id: totrans-1759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: 'and also during replace operations:'
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在替换操作期间也是如此：
- en: '[PRE294]'
  id: totrans-1761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: 'Parameters:'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-1763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果监听器注册为`raw=True`，则这将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象。'
- en: '`collection` – the new collection. This will always be generated from what
    was specified as [`relationship.collection_class`](relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship"), and will always be empty.'
  id: totrans-1764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collection` – 新的集合。这将始终从[`relationship.collection_class`](relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship")中指定的内容生成，并且始终为空。'
- en: '`collection_adapter` – the [`CollectionAdapter`](collection_api.html#sqlalchemy.orm.collections.CollectionAdapter
    "sqlalchemy.orm.collections.CollectionAdapter") that will mediate internal access
    to the collection.'
  id: totrans-1765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collection_adapter` – 将调解对集合的内部访问的[`CollectionAdapter`](collection_api.html#sqlalchemy.orm.collections.CollectionAdapter
    "sqlalchemy.orm.collections.CollectionAdapter")。'
- en: See also
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于监听器选项的背景，例如传播到子类。'
- en: '[`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") - “scalar” version of this event.'
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") - 此事件的“标量”版本。'
- en: '[PRE295]'
  id: totrans-1769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: Receive a scalar “init” event.
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个标量“init”事件。
- en: 'Example argument forms:'
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE296]'
  id: totrans-1772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'This event is invoked when an uninitialized, unpersisted scalar attribute is
    accessed, e.g. read:'
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问未初始化的、未持久化的标量属性时，会调用此事件，例如读取：
- en: '[PRE297]'
  id: totrans-1774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: The ORM’s default behavior when this occurs for an un-initialized attribute
    is to return the value `None`; note this differs from Python’s usual behavior
    of raising `AttributeError`. The event here can be used to customize what value
    is actually returned, with the assumption that the event listener would be mirroring
    a default generator that is configured on the Core [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object as well.
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: 当此事件发生在未初始化的属性上时，ORM 的默认行为是返回值`None`；请注意，这与 Python 的通常行为不同，Python 通常会引发`AttributeError`。此处的事件可用于自定义实际返回的值，假设事件侦听器将镜像配置在
    Core [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象上的默认生成器。
- en: Since a default generator on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") might also produce a changing value such as a timestamp,
    the [`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event handler can also be used to
    **set** the newly returned value, so that a Core-level default generation function
    effectively fires off only once, but at the moment the attribute is accessed on
    the non-persisted object. Normally, no change to the object’s state is made when
    an uninitialized attribute is accessed (much older SQLAlchemy versions did in
    fact change the object’s state).
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")上的默认生成器可能也会产生一个变化的值，例如时间戳，所以[`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar")事件处理程序也可以用于**设置**新返回的值，以便 Core 级别的默认生成函数仅在访问非持久化对象上的属性时触发一次，但是在这一刻。通常，当访问未初始化的属性时，不会对对象的状态进行任何更改（较旧的
    SQLAlchemy 版本实际上会更改对象的状态）。
- en: 'If a default generator on a column returned a particular constant, a handler
    might be used as follows:'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列上的默认生成器返回特定常量，则可能会使用处理程序如下：
- en: '[PRE298]'
  id: totrans-1778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: 'Above, we initialize the attribute `MyClass.some_attribute` to the value of
    `SOME_CONSTANT`. The above code includes the following features:'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们将属性`MyClass.some_attribute`初始化为`SOME_CONSTANT`的值。以上代码包括以下功能：
- en: By setting the value `SOME_CONSTANT` in the given `dict_`, we indicate that
    this value is to be persisted to the database. This supersedes the use of `SOME_CONSTANT`
    in the default generator for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). The `active_column_defaults.py` example given at
    [Attribute Instrumentation](examples.html#examples-instrumentation) illustrates
    using the same approach for a changing default, e.g. a timestamp generator. In
    this particular example, it is not strictly necessary to do this since `SOME_CONSTANT`
    would be part of the INSERT statement in either case.
  id: totrans-1780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在给定的`dict_`中设置值`SOME_CONSTANT`，我们指示该值将被持久化到数据库中。这将取代在[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的默认生成器中使用`SOME_CONSTANT`。在[属性仪器化](examples.html#examples-instrumentation)中给出的`active_column_defaults.py`示例说明了使用相同方法进行更改默认值的方法，例如时间戳生成器。在这个特定的例子中，这样做并不是严格必要的，因为`SOME_CONSTANT`无论如何都会成为INSERT语句的一部分。
- en: By establishing the `retval=True` flag, the value we return from the function
    will be returned by the attribute getter. Without this flag, the event is assumed
    to be a passive observer and the return value of our function is ignored.
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过建立`retval=True`标志，我们从函数返回的值将由属性获取器返回。没有此标志，事件被视为被动观察者，我们函数的返回值将被忽略。
- en: The `propagate=True` flag is significant if the mapped class includes inheriting
    subclasses, which would also make use of this event listener. Without this flag,
    an inheriting subclass will not use our event handler.
  id: totrans-1782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果映射类包括继承的子类，则`propagate=True`标志是重要的，这些子类也会使用此事件侦听器。没有此标志，继承的子类将不使用我们的事件处理程序。
- en: 'In the above example, the attribute set event [`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set") as well as the related validation feature
    provided by [`validates`](mapped_attributes.html#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    is **not** invoked when we apply our value to the given `dict_`. To have these
    events to invoke in response to our newly generated value, apply the value to
    the given object as a normal attribute set operation:'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，当我们将值应用于给定的`dict_`时，不会调用属性设置事件[`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set")以及由[`validates`](mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates")提供的相关验证功能。要使这些事件响应我们新生成的值而调用，请将该值应用于给定对象作为普通属性设置操作：
- en: '[PRE299]'
  id: totrans-1784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: When multiple listeners are set up, the generation of the value is “chained”
    from one listener to the next by passing the value returned by the previous listener
    that specifies `retval=True` as the `value` argument of the next listener.
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置了多个侦听器时，值的生成会从一个侦听器“链式”传递到下一个侦听器，通过将由前一个指定了`retval=True`的侦听器返回的值作为下一个侦听器的`value`参数传递。
- en: 'Parameters:'
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-1787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果侦听器使用`raw=True`注册，这将是[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象。'
- en: '`value` – the value that is to be returned before this event listener were
    invoked. This value begins as the value `None`, however will be the return value
    of the previous event handler function if multiple listeners are present.'
  id: totrans-1788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 在调用此事件侦听器之前要返回的值。此值最初为值`None`，但如果存在多个侦听器，则将是前一个事件处理程序函数的返回值。'
- en: '`dict_` – the attribute dictionary of this mapped object. This is normally
    the `__dict__` of the object, but in all cases represents the destination that
    the attribute system uses to get at the actual value of this attribute. Placing
    the value in this dictionary has the effect that the value will be used in the
    INSERT statement generated by the unit of work.'
  id: totrans-1789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dict_` – 此映射对象的属性字典。这通常是对象的`__dict__`，但在所有情况下都表示属性系统用于访问此属性的实际值的目标。将值放入此字典中的效果是该值将在工作单元生成的INSERT语句中使用。'
- en: See also
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AttributeEvents.init_collection()`](#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") - collection version of this
    event'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents.init_collection()`](#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") - 此事件的集合版本'
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于侦听器选项的背景，例如传播到子类。'
- en: '[Attribute Instrumentation](examples.html#examples-instrumentation) - see the
    `active_column_defaults.py` example.'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: '[属性仪表化](examples.html#examples-instrumentation) - 查看 `active_column_defaults.py`
    示例。'
- en: '[PRE300]'
  id: totrans-1794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: Receive a ‘modified’ event.
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个“修改”事件。
- en: 'Example argument forms:'
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE301]'
  id: totrans-1797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: This event is triggered when the [`flag_modified()`](session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") function is used to trigger a modify
    event on an attribute without any specific value being set.
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`flag_modified()`](session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") 函数触发属性上的修改事件时，会触发此事件，而不设置任何特定值。
- en: New in version 1.2.
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中的内容。
- en: 'Parameters:'
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-1801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果侦听器注册为 `raw=True`，则这将是 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.'
  id: totrans-1802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 表示事件启动的 `Event` 的实例。'
- en: See also
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 有关侦听器选项的背景，如传播到子类。'
- en: '[PRE302]'
  id: totrans-1805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Receive a collection remove event.
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个集合移除事件。
- en: 'Example argument forms:'
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE303]'
  id: totrans-1808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'Parameters:'
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-1810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果侦听器注册为 `raw=True`，则这将是 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象。'
- en: '`value` – the value being removed.'
  id: totrans-1811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 被移除的值。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation.'
  id: totrans-1812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 表示事件启动的 `Event` 的实例。可能会被 backref 处理程序修改其原始值，以控制链式事件传播。'
- en: '`key` –'
  id: totrans-1813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` –'
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `del collection[some_key_or_index]`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  id: totrans-1814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") 参数设置为 True 来建立事件时，这将是操作中使用的键，例如 `del collection[some_key_or_index]`。如果未使用
    [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") 来设置事件，则根本不会传递该参数给事件；这是为了与不包括 `key` 参数的现有事件处理程序的向后兼容性。
- en: New in version 2.0.
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中的内容。
- en: 'Returns:'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: No return value is defined for this event.
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件未定义返回值。
- en: See also
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 有关侦听器选项的背景，如传播到子类。'
- en: '[PRE304]'
  id: totrans-1820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: Receive a scalar set event.
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个标量设置事件。
- en: 'Example argument forms:'
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE305]'
  id: totrans-1823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: 'Parameters:'
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  id: totrans-1825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 接收事件的对象实例。如果侦听器注册为 `raw=True`，则这将是 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象。'
- en: '`value` – the value being set. If this listener is registered with `retval=True`,
    the listener function must return this value, or a new value which replaces it.'
  id: totrans-1826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 被设置的值。如果此侦听器注册为 `retval=True`，则侦听器函数必须返回此值，或者替换它的新值。'
- en: '`oldvalue` – the previous value being replaced. This may also be the symbol
    `NEVER_SET` or `NO_VALUE`. If the listener is registered with `active_history=True`,
    the previous value of the attribute will be loaded from the database if the existing
    value is currently unloaded or expired.'
  id: totrans-1827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`oldvalue` – 被替换的先前值。这也可以是符号 `NEVER_SET` 或 `NO_VALUE`。如果侦听器注册为 `active_history=True`，则如果现有值当前未加载或过期，则将从数据库加载属性的先前值。'
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation.'
  id: totrans-1828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` – 代表事件启动的`Event`实例。可能会被backref处理程序修改其原始值，以控制链式事件传播。'
- en: 'Returns:'
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: if the event was registered with `retval=True`, the given value, or a new effective
    value, should be returned.
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事件是以`retval=True`注册的，则应返回给定值或新的有效值。
- en: See also
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - 关于侦听器选项的背景，如传播到子类。'
- en: Query Events
  id: totrans-1833
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询事件
- en: '| Object Name | Description |'
  id: totrans-1834
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1835
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [QueryEvents](#sqlalchemy.orm.QueryEvents) | Represent events within the
    construction of a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. |'
  id: totrans-1836
  prefs: []
  type: TYPE_TB
  zh: '| [QueryEvents](#sqlalchemy.orm.QueryEvents) | 在构建[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象时表示事件。 |'
- en: '[PRE306]'
  id: totrans-1837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: Represent events within the construction of a [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象时表示事件。
- en: Legacy Feature
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: 传统特性
- en: The [`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    event methods are legacy as of SQLAlchemy 2.0, and only apply to direct use of
    the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. They are not used for [2.0 style](../glossary.html#term-2.0-style) statements.
    For events to intercept and modify 2.0 style ORM use, use the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")事件方法在SQLAlchemy
    2.0中已过时，仅适用于直接使用[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象。它们不适用于[2.0风格](../glossary.html#term-2.0-style)语句。要拦截和修改2.0风格ORM使用的事件，请使用[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子。'
- en: The [`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    hooks are now superseded by the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")钩子现在已被[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩取代。'
- en: '**Members**'
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[before_compile()](#sqlalchemy.orm.QueryEvents.before_compile), [before_compile_delete()](#sqlalchemy.orm.QueryEvents.before_compile_delete),
    [before_compile_update()](#sqlalchemy.orm.QueryEvents.before_compile_update),
    [dispatch](#sqlalchemy.orm.QueryEvents.dispatch)'
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: '[before_compile()](#sqlalchemy.orm.QueryEvents.before_compile), [before_compile_delete()](#sqlalchemy.orm.QueryEvents.before_compile_delete),
    [before_compile_update()](#sqlalchemy.orm.QueryEvents.before_compile_update),
    [dispatch](#sqlalchemy.orm.QueryEvents.dispatch)'
- en: '**Class signature**'
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE307]'
  id: totrans-1846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: Receive the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object before it is composed into a core [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object.
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: 在将其组成为核心[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象之前接收[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。
- en: 'Example argument forms:'
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE308]'
  id: totrans-1849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event is superseded by the much more
    capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook. In version 1.4, the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event is **no longer used** for ORM-level
    attribute loads, such as loads of deferred or expired attributes as well as relationship
    loaders. See the new examples in [ORM Query Events](examples.html#examples-session-orm-events)
    which illustrate new ways of intercepting and modifying ORM queries for the most
    common purpose of adding arbitrary filter criteria.'
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本起已弃用：[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件被更强大的[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子取代。在1.4版本中，[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件**不再**用于ORM级别的属性加载，例如延迟加载或过期属性以及关联加载器的加载。请参阅[ORM查询事件](examples.html#examples-session-orm-events)中的新示例，该示例说明了拦截和修改ORM查询以添加任意筛选条件的常见目的的新方法。
- en: 'This event is intended to allow changes to the query given:'
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件旨在允许对给定的查询进行更改：
- en: '[PRE309]'
  id: totrans-1852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: The event should normally be listened with the `retval=True` parameter set,
    so that the modified query may be returned.
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应该使用`retval=True`参数监听事件，以便修改后的查询可以返回。
- en: 'The [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event by default will disallow “baked”
    queries from caching a query, if the event hook returns a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. This affects both direct use of the baked query
    extension as well as its operation within lazy loaders and eager loaders for relationships.
    In order to re-establish the query being cached, apply the event adding the `bake_ok`
    flag:'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件将禁止“baked”查询缓存查询，如果事件钩子返回一个新的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。这影响到对烘焙查询扩展的直接使用以及它在延迟加载器和关系的贪婪加载器中的操作。为了重新建立缓存查询，请应用添加了`bake_ok`标志的事件：
- en: '[PRE310]'
  id: totrans-1855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: When `bake_ok` is set to True, the event hook will only be invoked once, and
    not called for subsequent invocations of a particular query that is being cached.
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: 当`bake_ok`设置为True时，事件钩子将仅被调用一次，并且不会为正在被缓存的特定查询的后续调用调用。
- en: 'New in version 1.3.11: - added the “bake_ok” flag to the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event and disallowed caching via
    the “baked” extension from occurring for event handlers that return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object if this flag is not set.'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3.11开始：- 在[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件中添加了“bake_ok”标志，并且如果未设置此标志，则不允许通过“baked”扩展缓存返回新的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的事件处理程序发生。
- en: See also
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
- en: '[Using the before_compile event](extensions/baked.html#baked-with-before-compile)'
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用before_compile事件](extensions/baked.html#baked-with-before-compile)'
- en: '[PRE311]'
  id: totrans-1862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: Allow modifications to the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object within [`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete").
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: 允许在[`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete "sqlalchemy.orm.Query.delete")中对[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象进行修改。
- en: 'Example argument forms:'
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE312]'
  id: totrans-1865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete") event is superseded by the
    much more capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.'
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版弃用：[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")事件已被更加强大的[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子所取代。
- en: Like the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, this event should be configured
    with `retval=True`, and the modified [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object returned, as in
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件类似，此事件应配置为`retval=True`，并返回修改后的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，如下所示：
- en: '[PRE313]'
  id: totrans-1868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: 'Parameters:'
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`query` – a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    instance; this is also the `.query` attribute of the given “delete context” object.'
  id: totrans-1870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` – 一个[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")实例；这也是给定“删除上下文”对象的`.query`属性。'
- en: '`delete_context` – a “delete context” object which is the same kind of object
    as described in `QueryEvents.after_bulk_delete.delete_context`.'
  id: totrans-1871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete_context` – 一个“删除上下文”对象，其类型与`QueryEvents.after_bulk_delete.delete_context`中描述的对象相同。'
- en: New in version 1.2.17.
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.2.17起新增。
- en: See also
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
- en: '[PRE314]'
  id: totrans-1876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: Allow modifications to the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object within [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update").
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
  zh: 允许在[`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update "sqlalchemy.orm.Query.update")中修改[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。
- en: 'Example argument forms:'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE315]'
  id: totrans-1879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update") event is superseded by the
    much more capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.'
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版弃用：[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")事件已被更加强大的[`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子所取代。
- en: Like the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, if the event is to be used
    to alter the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, it should be configured with `retval=True`, and the modified [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object returned, as in
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件类似，如果要使用该事件来修改[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，则应将其配置为`retval=True`，并返回修改后的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，如下所示：
- en: '[PRE316]'
  id: totrans-1882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: The `.values` dictionary of the “update context” object can also be modified
    in place as illustrated above.
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: “更新上下文”对象的`.values`字典也可以像上面示例中那样就地修改。
- en: 'Parameters:'
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`query` – a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    instance; this is also the `.query` attribute of the given “update context” object.'
  id: totrans-1885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` – 一个[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")实例；这也是给定“更新上下文”对象的`.query`属性。'
- en: '`update_context` – an “update context” object which is the same kind of object
    as described in `QueryEvents.after_bulk_update.update_context`. The object has
    a `.values` attribute in an UPDATE context which is the dictionary of parameters
    passed to [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update"). This dictionary can be modified to alter the VALUES
    clause of the resulting UPDATE statement.'
  id: totrans-1886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update_context` – 一个“更新上下文”对象，与 `QueryEvents.after_bulk_update.update_context`
    中描述的对象类型相同。对象具有在 UPDATE 上下文中的一个 `.values` 属性，该属性是传递给 [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 的参数字典。此字典可以修改以更改结果 UPDATE 语句的 VALUES 子句。'
- en: New in version 1.2.17.
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2.17中的新功能。
- en: See also
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
- en: '[PRE317]'
  id: totrans-1891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: reference back to the _Dispatch class.
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯到 _Dispatch 类。
- en: Bidirectional against _Dispatch._events
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 对 _Dispatch._events 进行双向处理
- en: '## Instrumentation Events'
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: '## 仪器化事件'
- en: Defines SQLAlchemy’s system of class instrumentation.
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了SQLAlchemy的类仪器化系统。
- en: This module is usually not directly visible to user applications, but defines
    a large part of the ORM’s interactivity.
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块通常不直接对用户应用程序可见，但定义了ORM交互的大部分内容。
- en: instrumentation.py deals with registration of end-user classes for state tracking.
    It interacts closely with state.py and attributes.py which establish per-instance
    and per-class-attribute instrumentation, respectively.
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: instrumentation.py 处理最终用户类的注册以进行状态跟踪。它与 state.py 和 attributes.py 密切交互，分别为每个实例和每个类属性仪器化。
- en: The class instrumentation system can be customized on a per-class or global
    basis using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") module, which provides the means to build and
    specify alternate instrumentation forms.
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: 类仪器化系统可以使用 [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") 模块在每个类或全局基础上进行自定义，该模块提供了构建和指定替代仪器化形式的方法。
- en: '| Object Name | Description |'
  id: totrans-1899
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1900
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [InstrumentationEvents](#sqlalchemy.orm.InstrumentationEvents) | Events related
    to class instrumentation events. |'
  id: totrans-1901
  prefs: []
  type: TYPE_TB
  zh: '| [InstrumentationEvents](#sqlalchemy.orm.InstrumentationEvents) | 与类仪器化事件相关的事件。
    |'
- en: '[PRE318]'
  id: totrans-1902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: Events related to class instrumentation events.
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: 与类仪器化事件相关的事件。
- en: The listeners here support being established against any new style class, that
    is any object that is a subclass of ‘type’. Events will then be fired off for
    events against that class. If the “propagate=True” flag is passed to event.listen(),
    the event will fire off for subclasses of that class as well.
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的监听器支持针对任何新样式类（即任何类型的子类为 'type'）建立，然后对该类的事件将被触发。如果将“propagate=True”标志传递给 event.listen()，则该事件也将对该类的子类触发。
- en: The Python `type` builtin is also accepted as a target, which when used has
    the effect of events being emitted for all classes.
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 `type` 内建函数也被接受为目标，当使用时会导致为所有类发出事件。
- en: Note the “propagate” flag here is defaulted to `True`, unlike the other class
    level events where it defaults to `False`. This means that new subclasses will
    also be the subject of these events, when a listener is established on a superclass.
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里的“propagate”标志默认为`True`，与其他类级事件不同，默认为`False`。这意味着当在超类上建立监听器时，新的子类也将成为这些事件的对象。
- en: '**Members**'
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[attribute_instrument()](#sqlalchemy.orm.InstrumentationEvents.attribute_instrument),
    [class_instrument()](#sqlalchemy.orm.InstrumentationEvents.class_instrument),
    [class_uninstrument()](#sqlalchemy.orm.InstrumentationEvents.class_uninstrument),
    [dispatch](#sqlalchemy.orm.InstrumentationEvents.dispatch)'
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: '[attribute_instrument()](#sqlalchemy.orm.InstrumentationEvents.attribute_instrument),
    [class_instrument()](#sqlalchemy.orm.InstrumentationEvents.class_instrument),
    [class_uninstrument()](#sqlalchemy.orm.InstrumentationEvents.class_uninstrument),
    [dispatch](#sqlalchemy.orm.InstrumentationEvents.dispatch)'
- en: '**Class signature**'
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.InstrumentationEvents`](#sqlalchemy.orm.InstrumentationEvents
    "sqlalchemy.orm.InstrumentationEvents") (`sqlalchemy.event.Events`)
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.InstrumentationEvents`](#sqlalchemy.orm.InstrumentationEvents
    "sqlalchemy.orm.InstrumentationEvents") (`sqlalchemy.event.Events`)
- en: '[PRE319]'
  id: totrans-1911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: Called when an attribute is instrumented.
  id: totrans-1912
  prefs: []
  type: TYPE_NORMAL
  zh: 当属性被仪器化时调用。
- en: 'Example argument forms:'
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE320]'
  id: totrans-1914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-1915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: Called after the given class is instrumented.
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定类被检测之后调用。
- en: 'Example argument forms:'
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE322]'
  id: totrans-1918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: To get at the [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager"),
    use `manager_of_class()`.
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取[`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")，请使用`manager_of_class()`。
- en: '[PRE323]'
  id: totrans-1920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: Called before the given class is uninstrumented.
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定类被取消检测之前调用。
- en: 'Example argument forms:'
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE324]'
  id: totrans-1923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: To get at the [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager"),
    use `manager_of_class()`.
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取[`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")，请使用`manager_of_class()`。
- en: '[PRE325]'
  id: totrans-1925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: reference back to the _Dispatch class.
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
  zh: 参考回_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: 双向反对_Dispatch._events
