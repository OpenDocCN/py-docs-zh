- en: Generalized Convolutions in JAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAX 中的广义卷积
- en: 原文：[`jax.readthedocs.io/en/latest/notebooks/convolutions.html`](https://jax.readthedocs.io/en/latest/notebooks/convolutions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/notebooks/convolutions.html`](https://jax.readthedocs.io/en/latest/notebooks/convolutions.html)
- en: '![Open in Colab](https://colab.research.google.com/github/google/jax/blob/main/docs/notebooks/convolutions.ipynb)
    ![Open in Kaggle](https://kaggle.com/kernels/welcome?src=https://github.com/google/jax/blob/main/docs/notebooks/convolutions.ipynb)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![在 Colab 中打开](https://colab.research.google.com/github/google/jax/blob/main/docs/notebooks/convolutions.ipynb)
    ![在 Kaggle 中打开](https://kaggle.com/kernels/welcome?src=https://github.com/google/jax/blob/main/docs/notebooks/convolutions.ipynb)'
- en: 'JAX provides a number of interfaces to compute convolutions across data, including:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 提供了多种接口来跨数据计算卷积，包括：
- en: '`jax.numpy.convolve()` (also `jax.numpy.correlate()`)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.convolve()`（也有`jax.numpy.correlate()`）'
- en: '`jax.scipy.signal.convolve()` (also `correlate()`)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.signal.convolve()`（也有`correlate()`）'
- en: '`jax.scipy.signal.convolve2d()` (also `correlate2d()`)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.signal.convolve2d()`（也有`correlate2d()`）'
- en: '`jax.lax.conv_general_dilated()`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax.conv_general_dilated()`'
- en: For basic convolution operations, the `jax.numpy` and `jax.scipy` operations
    are usually sufficient. If you want to do more general batched multi-dimensional
    convolution, the `jax.lax` function is where you should start.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基本的卷积操作，`jax.numpy` 和 `jax.scipy` 的操作通常足够使用。如果要进行更一般的批量多维卷积，`jax.lax` 函数是你应该开始的地方。
- en: Basic One-dimensional Convolution
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的一维卷积
- en: 'Basic one-dimensional convolution is implemented by `jax.numpy.convolve()`,
    which provides a JAX interface for [`numpy.convolve()`](https://numpy.org/doc/stable/reference/generated/numpy.convolve.html#numpy.convolve
    "(in NumPy v2.0)"). Here is a simple example of 1D smoothing implemented via a
    convolution:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的一维卷积由`jax.numpy.convolve()`实现，它为[`numpy.convolve()`](https://numpy.org/doc/stable/reference/generated/numpy.convolve.html#numpy.convolve
    "(在 NumPy v2.0)")提供了一个 JAX 接口。这里是通过卷积实现的简单一维平滑的例子：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![../_images/e961d0a0fbc2816ce80591a1da477bbb60ca788cd7033a4fd6553e0369a2dcbf.png](img/f79966682ffcbcb8f10ef6a819cfc5da.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/e961d0a0fbc2816ce80591a1da477bbb60ca788cd7033a4fd6553e0369a2dcbf.png](img/f79966682ffcbcb8f10ef6a819cfc5da.png)'
- en: The `mode` parameter controls how boundary conditions are treated; here we use
    `mode='same'` to ensure that the output is the same size as the input.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`参数控制如何处理边界条件；这里我们使用`mode=''same''`确保输出与输入大小相同。'
- en: For more information, see the `jax.numpy.convolve()` documentation, or the documentation
    associated with the original [`numpy.convolve()`](https://numpy.org/doc/stable/reference/generated/numpy.convolve.html#numpy.convolve
    "(in NumPy v2.0)") function.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅`jax.numpy.convolve()`文档，或与原始[`numpy.convolve()`](https://numpy.org/doc/stable/reference/generated/numpy.convolve.html#numpy.convolve
    "(在 NumPy v2.0)")函数相关的文档。
- en: Basic N-dimensional Convolution
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的*N*维卷积
- en: For *N*-dimensional convolution, `jax.scipy.signal.convolve()` provides a similar
    interface to that of `jax.numpy.convolve()`, generalized to *N* dimensions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*N*维卷积，`jax.scipy.signal.convolve()`提供了类似于`jax.numpy.convolve()`的界面，推广到*N*维。
- en: 'For example, here is a simple approach to de-noising an image based on convolution
    with a Gaussian filter:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里是一种使用高斯滤波器进行图像去噪的简单方法：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![../_images/cfa90156f790ef47f43618a7b4369c686b8a52f253f7f316ccc76360b27b1090.png](img/7d961651756c17c0a99c98f086c5ea09.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/cfa90156f790ef47f43618a7b4369c686b8a52f253f7f316ccc76360b27b1090.png](img/7d961651756c17c0a99c98f086c5ea09.png)'
- en: Like in the one-dimensional case, we use `mode='same'` to specify how we would
    like edges to be handled. For more information on available options in *N*-dimensional
    convolutions, see the `jax.scipy.signal.convolve()` documentation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如同一维情况，我们使用`mode='same'`指定如何处理边缘。有关*N*维卷积中可用选项的更多信息，请参阅`jax.scipy.signal.convolve()`文档。
- en: General Convolutions
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广义卷积
- en: For the more general types of batched convolutions often useful in the context
    of building deep neural networks, JAX and XLA offer the very general N-dimensional
    **conv_general_dilated** function, but it’s not very obvious how to use it. We’ll
    give some examples of the common use-cases.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在构建深度神经网络中通常有用的更一般类型的批量卷积，JAX 和 XLA 提供了非常通用的 N 维**conv_general_dilated**函数，但如何使用它并不是很明显。我们将给出一些常见用例的示例。
- en: A survey of the family of convolutional operators, [a guide to convolutional
    arithmetic](https://arxiv.org/abs/1603.07285), is highly recommended reading!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一篇关于卷积算术的家族调查，[卷积算术指南](https://arxiv.org/abs/1603.07285)，强烈推荐阅读！
- en: 'Let’s define a simple diagonal edge kernel:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个简单的对角边缘核：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![../_images/c1b68affefa9c6fa409beeda4a0301aba932fec55465efd74fcdffd03f04faa8.png](img/276d4a01c60ff957e05745fcbbf0e1d2.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/c1b68affefa9c6fa409beeda4a0301aba932fec55465efd74fcdffd03f04faa8.png](img/276d4a01c60ff957e05745fcbbf0e1d2.png)'
- en: 'And we’ll make a simple synthetic image:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将创建一个简单的合成图像：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![../_images/1ed93c894919df616fdd321a7985a911cc662cb1e021c0951116ab0821b042d2.png](img/5caffdc29f11de4c01519d9c3dd8c14d.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/1ed93c894919df616fdd321a7985a911cc662cb1e021c0951116ab0821b042d2.png](img/5caffdc29f11de4c01519d9c3dd8c14d.png)'
- en: lax.conv and lax.conv_with_general_padding
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`lax.conv` 和 `lax.conv_with_general_padding`'
- en: These are the simple convenience functions for convolutions
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是卷积的简单便捷函数
- en: ️⚠️ The convenience `lax.conv`, `lax.conv_with_general_padding` helper function
    assume **NCHW** images and **OIHW** kernels.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ️⚠️ 便捷函数 `lax.conv`，`lax.conv_with_general_padding` 假定 **NCHW** 图像和 **OIHW**
    卷积核。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![../_images/d9bee780828085fbc09b1d92d421d3003963e72bbe4c17ab02bbe9fcfc18edbd.png](img/2e5efe6381662a2a7ed237ba757bc4d6.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/d9bee780828085fbc09b1d92d421d3003963e72bbe4c17ab02bbe9fcfc18edbd.png](img/2e5efe6381662a2a7ed237ba757bc4d6.png)'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![../_images/2daccd0cd7424c739ea9d1af43c2dfd330c45cea6ce5a8dc0196126917bed5e7.png](img/540b5f46a71aa47f61baf1763c4450b1.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/2daccd0cd7424c739ea9d1af43c2dfd330c45cea6ce5a8dc0196126917bed5e7.png](img/540b5f46a71aa47f61baf1763c4450b1.png)'
- en: Dimension Numbers define dimensional layout for conv_general_dilated
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维度编号定义了 `conv_general_dilated` 的维度布局
- en: 'The important argument is the 3-tuple of axis layout arguments: (Input Layout,
    Kernel Layout, Output Layout)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的参数是轴布局的三元组：（输入布局，卷积核布局，输出布局）
- en: '**N** - batch dimension'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**N** - 批次维度'
- en: '**H** - spatial height'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**H** - 空间高度'
- en: '**W** - spatial width'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**W** - 空间宽度'
- en: '**C** - channel dimension'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C** - 通道维度'
- en: '**I** - kernel *input* channel dimension'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**I** - 卷积核 *输入* 通道维度'
- en: '**O** - kernel *output* channel dimension'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**O** - 卷积核 *输出* 通道维度'
- en: ⚠️ To demonstrate the flexibility of dimension numbers we choose a **NHWC**
    image and **HWIO** kernel convention for `lax.conv_general_dilated` below.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ⚠️ 为了展示维度编号的灵活性，我们选择了 **NHWC** 图像和 **HWIO** 卷积核约定，如下所示 `lax.conv_general_dilated`。
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: SAME padding, no stride, no dilation
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SAME 填充，无步长，无扩张
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![../_images/d9bee780828085fbc09b1d92d421d3003963e72bbe4c17ab02bbe9fcfc18edbd.png](img/2e5efe6381662a2a7ed237ba757bc4d6.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/d9bee780828085fbc09b1d92d421d3003963e72bbe4c17ab02bbe9fcfc18edbd.png](img/2e5efe6381662a2a7ed237ba757bc4d6.png)'
- en: VALID padding, no stride, no dilation
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: VALID 填充，无步长，无扩张
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![../_images/d8f21810f67381c4e5e5ba5e6bcd0f0d8b830af5381b0975dec0b9b38a51afce.png](img/f80b1d21fa54cf1f49fe574b81f958ef.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/d8f21810f67381c4e5e5ba5e6bcd0f0d8b830af5381b0975dec0b9b38a51afce.png](img/f80b1d21fa54cf1f49fe574b81f958ef.png)'
- en: SAME padding, 2,2 stride, no dilation
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SAME 填充，2,2 步长，无扩张
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![../_images/8051cc233d17fe493c7e0ffd2c2dbc0773e61b4d1138afef6d075b8d8cbfb3cc.png](img/37a5838c540df746a86ce15d3bb0ef71.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/8051cc233d17fe493c7e0ffd2c2dbc0773e61b4d1138afef6d075b8d8cbfb3cc.png](img/37a5838c540df746a86ce15d3bb0ef71.png)'
- en: VALID padding, no stride, rhs kernel dilation ~ Atrous convolution (excessive
    to illustrate)
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: VALID 填充，无步长，rhs 卷积核扩张 ~ 膨胀卷积（用于演示）
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![../_images/3242ab6a93d02ac641e42bd7b9087627444554747e07711b8e61b41904571b71.png](img/4f16c994e14bbfdd9d099fffc2e5abd9.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/3242ab6a93d02ac641e42bd7b9087627444554747e07711b8e61b41904571b71.png](img/4f16c994e14bbfdd9d099fffc2e5abd9.png)'
- en: VALID padding, no stride, lhs=input dilation ~ Transposed Convolution
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: VALID 填充，无步长，lhs=input 扩张 ~ 转置卷积
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![../_images/c3363d9a17e1cf60f967a6658f171abff3a047bd9a6dc9a57f7c3f5850964c82.png](img/cb19dd89902788c0e2cc076ec1a48289.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/c3363d9a17e1cf60f967a6658f171abff3a047bd9a6dc9a57f7c3f5850964c82.png](img/cb19dd89902788c0e2cc076ec1a48289.png)'
- en: 'We can use the last to, for instance, implement *transposed convolutions*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用最后一个示例，比如实现 *转置卷积*：
- en: '[PRE23]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![../_images/a31887582f261bc887008a3d1ccc329a276e965031f3a3d6f07365c86b694ede.png](img/49ff0f7697e4e37e9bc87de4910d5344.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/a31887582f261bc887008a3d1ccc329a276e965031f3a3d6f07365c86b694ede.png](img/49ff0f7697e4e37e9bc87de4910d5344.png)'
- en: 1D Convolutions
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1D 卷积
- en: 'You aren’t limited to 2D convolutions, a simple 1D demo is below:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅限于2D卷积，下面是一个简单的1D演示：
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![../_images/f14439a560314f430af73acf634bc696a09066b2609b4e5bace068b40cbfe639.png](img/dba7566216d992189974ce9f231aa30c.png)
    ![../_images/a816d20e944cdb9853c00466568be6f3d6f956c461202d6b33c6b4a821c21748.png](img/000dc195ccf8e4a2a374335c2321b133.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/f14439a560314f430af73acf634bc696a09066b2609b4e5bace068b40cbfe639.png](img/dba7566216d992189974ce9f231aa30c.png)
    ![../_images/a816d20e944cdb9853c00466568be6f3d6f956c461202d6b33c6b4a821c21748.png](img/000dc195ccf8e4a2a374335c2321b133.png)'
- en: 3D Convolutions
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3D 卷积
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![../_images/aa5fabdf6a7e20bcb9b3f6ed4fdecb7c85355a4c25dbf8bd5083f19fc5e44ccc.png](img/c19aa20810da1132fc4c052d9d9faa85.png)
    ![../_images/f7f2915cb609bebbd6319369ebe9fb40e258ed1ca2c6e92c5ee2ac275562cb94.png](img/317130b3b016ffbed6b09e7292976eb7.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/aa5fabdf6a7e20bcb9b3f6ed4fdecb7c85355a4c25dbf8bd5083f19fc5e44ccc.png](img/c19aa20810da1132fc4c052d9d9faa85.png)
    ![../_images/f7f2915cb609bebbd6319369ebe9fb40e258ed1ca2c6e92c5ee2ac275562cb94.png](img/317130b3b016ffbed6b09e7292976eb7.png)'
