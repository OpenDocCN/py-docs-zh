- en: How to Think in JAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 JAX 中思考
- en: 原文：[`jax.readthedocs.io/en/latest/notebooks/thinking_in_jax.html`](https://jax.readthedocs.io/en/latest/notebooks/thinking_in_jax.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/notebooks/thinking_in_jax.html`](https://jax.readthedocs.io/en/latest/notebooks/thinking_in_jax.html)
- en: '![Open in Colab](https://colab.research.google.com/github/google/jax/blob/main/docs/notebooks/thinking_in_jax.ipynb)
    ![Open in Kaggle](https://kaggle.com/kernels/welcome?src=https://github.com/google/jax/blob/main/docs/notebooks/thinking_in_jax.ipynb)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![在 Colab 中打开](https://colab.research.google.com/github/google/jax/blob/main/docs/notebooks/thinking_in_jax.ipynb)
    ![在 Kaggle 中打开](https://kaggle.com/kernels/welcome?src=https://github.com/google/jax/blob/main/docs/notebooks/thinking_in_jax.ipynb)'
- en: JAX provides a simple and powerful API for writing accelerated numerical code,
    but working effectively in JAX sometimes requires extra consideration. This document
    is meant to help build a ground-up understanding of how JAX operates, so that
    you can use it more effectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 提供了一个简单而强大的 API 用于编写加速数值代码，但在 JAX 中有效工作有时需要额外考虑。本文档旨在帮助建立对 JAX 如何运行的基础理解，以便您更有效地使用它。
- en: JAX vs. NumPy
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX vs. NumPy
- en: '**Key Concepts:**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键概念：**'
- en: JAX provides a NumPy-inspired interface for convenience.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 提供了一个方便的类似于 NumPy 的接口。
- en: Through duck-typing, JAX arrays can often be used as drop-in replacements of
    NumPy arrays.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过鸭子类型，JAX 数组通常可以直接替换 NumPy 数组。
- en: Unlike NumPy arrays, JAX arrays are always immutable.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不像 NumPy 数组，JAX 数组总是不可变的。
- en: 'NumPy provides a well-known, powerful API for working with numerical data.
    For convenience, JAX provides `jax.numpy` which closely mirrors the numpy API
    and provides easy entry into JAX. Almost anything that can be done with `numpy`
    can be done with `jax.numpy`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 提供了一个众所周知且功能强大的 API 用于处理数值数据。为方便起见，JAX 提供了 `jax.numpy`，它紧密反映了 NumPy API，并为进入
    JAX 提供了便捷的入口。几乎可以用 `jax.numpy` 完成 `numpy` 可以完成的任何事情：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![../_images/a5186b574da824b332762dc6cb1c9829034a3a27f1f5dc7ba79658eb4c9e3715.png](img/6eb981014c27d82251fc8cff5e846ec1.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/a5186b574da824b332762dc6cb1c9829034a3a27f1f5dc7ba79658eb4c9e3715.png](img/6eb981014c27d82251fc8cff5e846ec1.png)'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![../_images/4d0f0e6e14cb62a4e3105aeb1c1f8fe608774b82fd3073f26a9813de35f414eb.png](img/1d7910ee9627b0211663f6cac235493b.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/4d0f0e6e14cb62a4e3105aeb1c1f8fe608774b82fd3073f26a9813de35f414eb.png](img/1d7910ee9627b0211663f6cac235493b.png)'
- en: The code blocks are identical aside from replacing `np` with `jnp`, and the
    results are the same. As we can see, JAX arrays can often be used directly in
    place of NumPy arrays for things like plotting.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块除了用 `jnp` 替换 `np` 外，其余完全相同。正如我们所见，JAX 数组通常可以直接替换 NumPy 数组，用于诸如绘图等任务。
- en: 'The arrays themselves are implemented as different Python types:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数组本身是作为不同的 Python 类型实现的：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Python’s [duck-typing](https://en.wikipedia.org/wiki/Duck_typing) allows JAX
    arrays and NumPy arrays to be used interchangeably in many places.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 [鸭子类型](https://en.wikipedia.org/wiki/Duck_typing) 允许在许多地方可互换使用 JAX
    数组和 NumPy 数组。
- en: 'However, there is one important difference between JAX and NumPy arrays: JAX
    arrays are immutable, meaning that once created their contents cannot be changed.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，JAX 和 NumPy 数组之间有一个重要的区别：JAX 数组是不可变的，一旦创建，其内容无法更改。
- en: 'Here is an example of mutating an array in NumPy:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个在 NumPy 中突变数组的例子：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The equivalent in JAX results in an error, as JAX arrays are immutable:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JAX 中，等效操作会导致错误，因为 JAX 数组是不可变的：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For updating individual elements, JAX provides an [indexed update syntax](https://jax.readthedocs.io/en/latest/jax.ops.html#indexed-update-operators)
    that returns an updated copy:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更新单个元素，JAX 提供了一个 [索引更新语法](https://jax.readthedocs.io/en/latest/jax.ops.html#indexed-update-operators)，返回一个更新后的副本：
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'NumPy, lax & XLA: JAX API layering'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy、lax 和 XLA：JAX API 层次结构
- en: '**Key Concepts:**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键概念：**'
- en: '`jax.numpy` is a high-level wrapper that provides a familiar interface.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy` 是一个提供熟悉接口的高级包装器。'
- en: '`jax.lax` is a lower-level API that is stricter and often more powerful.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax` 是一个更严格且通常更强大的低级 API。'
- en: All JAX operations are implemented in terms of operations in [XLA](https://www.tensorflow.org/xla/)
    – the Accelerated Linear Algebra compiler.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 JAX 操作都是基于 [XLA](https://www.tensorflow.org/xla/) – 加速线性代数编译器中的操作实现的。
- en: If you look at the source of `jax.numpy`, you’ll see that all the operations
    are eventually expressed in terms of functions defined in `jax.lax`. You can think
    of `jax.lax` as a stricter, but often more powerful, API for working with multi-dimensional
    arrays.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看 `jax.numpy` 的源代码，您会看到所有操作最终都是以 `jax.lax` 中定义的函数形式表达的。您可以将 `jax.lax` 视为更严格但通常更强大的
    API，用于处理多维数组。
- en: 'For example, while `jax.numpy` will implicitly promote arguments to allow operations
    between mixed data types, `jax.lax` will not:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，虽然`jax.numpy`将隐式促进参数以允许不同数据类型之间的操作，但`jax.lax`不会：
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If using `jax.lax` directly, you’ll have to do type promotion explicitly in
    such cases:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果直接使用`jax.lax`，在这种情况下你将需要显式地进行类型提升：
- en: '[PRE18]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Along with this strictness, `jax.lax` also provides efficient APIs for some
    more general operations than are supported by NumPy.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这种严格性外，`jax.lax`还提供了一些比NumPy支持的更一般操作更高效的API。
- en: 'For example, consider a 1D convolution, which can be expressed in NumPy this
    way:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个1D卷积，在NumPy中可以这样表达：
- en: '[PRE20]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Under the hood, this NumPy operation is translated to a much more general convolution
    implemented by [`lax.conv_general_dilated`](https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.conv_general_dilated.html):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，这个NumPy操作被转换为由[`lax.conv_general_dilated`](https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.conv_general_dilated.html)实现的更通用的卷积：
- en: '[PRE22]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is a batched convolution operation designed to be efficient for the types
    of convolutions often used in deep neural nets. It requires much more boilerplate,
    but is far more flexible and scalable than the convolution provided by NumPy (See
    [Convolutions in JAX](https://jax.readthedocs.io/en/latest/notebooks/convolutions.html)
    for more detail on JAX convolutions).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种批处理卷积操作，专为深度神经网络中经常使用的卷积类型设计，需要更多的样板代码，但比NumPy提供的卷积更灵活和可扩展（有关JAX卷积的更多细节，请参见[Convolutions
    in JAX](https://jax.readthedocs.io/en/latest/notebooks/convolutions.html)）。
- en: At their heart, all `jax.lax` operations are Python wrappers for operations
    in XLA; here, for example, the convolution implementation is provided by [XLA:ConvWithGeneralPadding](https://www.tensorflow.org/xla/operation_semantics#convwithgeneralpadding_convolution).
    Every JAX operation is eventually expressed in terms of these fundamental XLA
    operations, which is what enables just-in-time (JIT) compilation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，所有`jax.lax`操作都是XLA中操作的Python包装器；例如，在这里，卷积实现由[XLA:ConvWithGeneralPadding](https://www.tensorflow.org/xla/operation_semantics#convwithgeneralpadding_convolution)提供。每个JAX操作最终都是基于这些基本XLA操作表达的，这就是使得即时（JIT）编译成为可能的原因。
- en: To JIT or not to JIT
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要JIT或不要JIT
- en: '**Key Concepts:**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键概念：**'
- en: By default JAX executes operations one at a time, in sequence.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，JAX按顺序逐个执行操作。
- en: Using a just-in-time (JIT) compilation decorator, sequences of operations can
    be optimized together and run at once.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用即时（JIT）编译装饰器，可以优化操作序列并一次运行：
- en: Not all JAX code can be JIT compiled, as it requires array shapes to be static
    & known at compile time.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并非所有JAX代码都可以进行JIT编译，因为它要求数组形状在编译时是静态且已知的。
- en: The fact that all JAX operations are expressed in terms of XLA allows JAX to
    use the XLA compiler to execute blocks of code very efficiently.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所有JAX操作都是基于XLA表达的事实，使得JAX能够使用XLA编译器非常高效地执行代码块。
- en: 'For example, consider this function that normalizes the rows of a 2D matrix,
    expressed in terms of `jax.numpy` operations:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑此函数，它对二维矩阵的行进行标准化，表达为`jax.numpy`操作：
- en: '[PRE24]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A just-in-time compiled version of the function can be created using the `jax.jit`
    transform:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`jax.jit`变换创建函数的即时编译版本：
- en: '[PRE25]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This function returns the same results as the original, up to standard floating-point
    accuracy:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与原始函数相同的结果，达到标准浮点精度：
- en: '[PRE26]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'But due to the compilation (which includes fusing of operations, avoidance
    of allocating temporary arrays, and a host of other tricks), execution times can
    be orders of magnitude faster in the JIT-compiled case (note the use of `block_until_ready()`
    to account for JAX’s [asynchronous dispatch](https://jax.readthedocs.io/en/latest/async_dispatch.html)):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但由于编译（其中包括操作的融合、避免分配临时数组以及其他许多技巧），在JIT编译的情况下，执行时间可以比非常数级别快得多（请注意使用`block_until_ready()`以考虑JAX的[异步调度](https://jax.readthedocs.io/en/latest/async_dispatch.html)）：
- en: '[PRE28]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'That said, `jax.jit` does have limitations: in particular, it requires all
    arrays to have static shapes. That means that some JAX operations are incompatible
    with JIT compilation.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，`jax.jit`确实存在一些限制：特别是，它要求所有数组具有静态形状。这意味着一些JAX操作与JIT编译不兼容。
- en: 'For example, this operation can be executed in op-by-op mode:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，此操作可以在逐操作模式下执行：
- en: '[PRE30]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'But it returns an error if you attempt to execute it in jit mode:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果您尝试在jit模式下执行它，则会返回错误：
- en: '[PRE32]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This is because the function generates an array whose shape is not known at
    compile time: the size of the output depends on the values of the input array,
    and so it is not compatible with JIT.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为该函数生成的数组形状在编译时未知：输出的大小取决于输入数组的值，因此与 JIT 不兼容。
- en: 'JIT mechanics: tracing and static variables'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JIT 机制：跟踪和静态变量
- en: '**Key Concepts:**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键概念：**'
- en: JIT and other JAX transforms work by *tracing* a function to determine its effect
    on inputs of a specific shape and type.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JIT 和其他 JAX 转换通过跟踪函数来确定其对特定形状和类型输入的影响。
- en: Variables that you don’t want to be traced can be marked as *static*
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不希望被追踪的变量可以标记为*静态*
- en: 'To use `jax.jit` effectively, it is useful to understand how it works. Let’s
    put a few `print()` statements within a JIT-compiled function and then call the
    function:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效使用 `jax.jit`，理解其工作原理是很有用的。让我们在一个 JIT 编译的函数中放几个 `print()` 语句，然后调用该函数：
- en: '[PRE34]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Notice that the print statements execute, but rather than printing the data
    we passed to the function, though, it prints *tracer* objects that stand-in for
    them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，打印语句执行，但打印的不是我们传递给函数的数据，而是打印*追踪器*对象，这些对象代替它们。
- en: These tracer objects are what `jax.jit` uses to extract the sequence of operations
    specified by the function. Basic tracers are stand-ins that encode the **shape**
    and **dtype** of the arrays, but are agnostic to the values. This recorded sequence
    of computations can then be efficiently applied within XLA to new inputs with
    the same shape and dtype, without having to re-execute the Python code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些追踪器对象是 `jax.jit` 用来提取函数指定的操作序列的基本替代物，编码数组的**形状**和**dtype**，但对值是不可知的。然后可以有效地将这个记录的计算序列应用于具有相同形状和dtype的新输入，而无需重新执行
    Python 代码。
- en: 'When we call the compiled function again on matching inputs, no re-compilation
    is required and nothing is printed because the result is computed in compiled
    XLA rather than in Python:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在匹配的输入上再次调用编译函数时，无需重新编译，也不打印任何内容，因为结果在编译的 XLA 中计算，而不是在 Python 中：
- en: '[PRE37]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The extracted sequence of operations is encoded in a JAX expression, or *jaxpr*
    for short. You can view the jaxpr using the `jax.make_jaxpr` transformation:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的操作序列编码在 JAX 表达式中，简称为 *jaxpr*。您可以使用 `jax.make_jaxpr` 转换查看 jaxpr：
- en: '[PRE39]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Note one consequence of this: because JIT compilation is done *without* information
    on the content of the array, control flow statements in the function cannot depend
    on traced values. For example, this fails:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这一后果：因为 JIT 编译是在没有数组内容信息的情况下完成的，所以函数中的控制流语句不能依赖于追踪的值。例如，这将失败：
- en: '[PRE41]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If there are variables that you would not like to be traced, they can be marked
    as static for the purposes of JIT compilation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有不希望被追踪的变量，可以将它们标记为静态以供 JIT 编译使用：
- en: '[PRE43]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Note that calling a JIT-compiled function with a different static argument
    results in re-compilation, so the function still works as expected:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用不同的静态参数调用 JIT 编译函数会导致重新编译，所以函数仍然如预期般工作：
- en: '[PRE45]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Understanding which values and operations will be static and which will be traced
    is a key part of using `jax.jit` effectively.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 理解哪些值和操作将是静态的，哪些将被追踪，是有效使用 `jax.jit` 的关键部分。
- en: Static vs Traced Operations
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态与追踪操作
- en: '**Key Concepts:**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键概念：**'
- en: Just as values can be either static or traced, operations can be static or traced.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就像值可以是静态的或者被追踪的一样，操作也可以是静态的或者被追踪的。
- en: Static operations are evaluated at compile-time in Python; traced operations
    are compiled & evaluated at run-time in XLA.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态操作在 Python 中在编译时评估；跟踪操作在 XLA 中在运行时编译并评估。
- en: Use `numpy` for operations that you want to be static; use `jax.numpy` for operations
    that you want to be traced.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `numpy` 进行您希望静态的操作；使用 `jax.numpy` 进行您希望被追踪的操作。
- en: 'This distinction between static and traced values makes it important to think
    about how to keep a static value static. Consider this function:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 静态和追踪值的区别使得重要的是考虑如何保持静态值的静态。考虑这个函数：
- en: '[PRE47]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This fails with an error specifying that a tracer was found instead of a 1D
    sequence of concrete values of integer type. Let’s add some print statements to
    the function to understand why this is happening:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这会因为找到追踪器而不是整数类型的具体值的 1D 序列而失败。让我们向函数中添加一些打印语句，以了解其原因：
- en: '[PRE49]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Notice that although `x` is traced, `x.shape` is a static value. However, when
    we use `jnp.array` and `jnp.prod` on this static value, it becomes a traced value,
    at which point it cannot be used in a function like `reshape()` that requires
    a static input (recall: array shapes must be static).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意尽管`x`被追踪，`x.shape`是一个静态值。然而，当我们在这个静态值上使用`jnp.array`和`jnp.prod`时，它变成了一个被追踪的值，在这种情况下，它不能用于像`reshape()`这样需要静态输入的函数（回想：数组形状必须是静态的）。
- en: 'A useful pattern is to use `numpy` for operations that should be static (i.e.
    done at compile-time), and use `jax.numpy` for operations that should be traced
    (i.e. compiled and executed at run-time). For this function, it might look like
    this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的模式是使用`numpy`进行应该是静态的操作（即在编译时完成），并使用`jax.numpy`进行应该被追踪的操作（即在运行时编译和执行）。对于这个函数，可能会像这样：
- en: '[PRE51]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: For this reason, a standard convention in JAX programs is to `import numpy as
    np` and `import jax.numpy as jnp` so that both interfaces are available for finer
    control over whether operations are performed in a static matter (with `numpy`,
    once at compile-time) or a traced manner (with `jax.numpy`, optimized at run-time).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在JAX程序中的一个标准约定是`import numpy as np`和`import jax.numpy as jnp`，这样两个接口都可以用来更精细地控制操作是以静态方式（使用`numpy`，一次在编译时）还是以追踪方式（使用`jax.numpy`，在运行时优化）执行。
