- en: TextPage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本页
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/textpage.html](https://pymupdf.readthedocs.io/en/latest/textpage.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pymupdf.readthedocs.io/en/latest/textpage.html](https://pymupdf.readthedocs.io/en/latest/textpage.html)
- en: This class represents text and images shown on a document page. All [MuPDF document
    types](how-to-open-a-file.html#supported-file-types) are supported.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此类代表文档页面上显示的文本和图像。支持所有的[MuPDF文档类型](how-to-open-a-file.html#supported-file-types)。
- en: The usual ways to create a textpage are [`DisplayList.get_textpage()`](displaylist.html#DisplayList.get_textpage
    "DisplayList.get_textpage") and [`Page.get_textpage()`](page.html#Page.get_textpage
    "Page.get_textpage"). Because there is a limited set of methods in this class,
    there exist wrappers in [Page](page.html#page) which are handier to use. The last
    column of this table shows these corresponding [Page](page.html#page) methods.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文本页的常规方法是使用[`DisplayList.get_textpage()`](displaylist.html#DisplayList.get_textpage
    "DisplayList.get_textpage")和[`Page.get_textpage()`](page.html#Page.get_textpage
    "Page.get_textpage")。因为此类中的方法集合有限，在[Page](page.html#page)中存在更方便使用的包装器。此表的最后一列显示了这些相应的[Page](page.html#page)方法。
- en: For a description of what this class is all about, see Appendix 2.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此类的描述，请参阅附录2。
- en: '| **Method** | **Description** | page get_text or search method |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** | 页面 get_text 或 search 方法 |'
- en: '| --- | --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| [`extractText()`](#TextPage.extractText "TextPage.extractText") | extract
    plain text | “text” |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`extractText()`](#TextPage.extractText "TextPage.extractText") | 提取纯文本 |
    “text” |'
- en: '| [`extractTEXT()`](#TextPage.extractTEXT "TextPage.extractTEXT") | synonym
    of previous | “text” |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`extractTEXT()`](#TextPage.extractTEXT "TextPage.extractTEXT") | 与上一个同义
    | “text” |'
- en: '| [`extractBLOCKS()`](#TextPage.extractBLOCKS "TextPage.extractBLOCKS") | plain
    text grouped in blocks | “blocks” |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`extractBLOCKS()`](#TextPage.extractBLOCKS "TextPage.extractBLOCKS") | 分组在块中的纯文本
    | “blocks” |'
- en: '| [`extractWORDS()`](#TextPage.extractWORDS "TextPage.extractWORDS") | all
    words with their bbox | “words” |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`extractWORDS()`](#TextPage.extractWORDS "TextPage.extractWORDS") | 带有它们的bbox的所有单词
    | “words” |'
- en: '| [`extractHTML()`](#TextPage.extractHTML "TextPage.extractHTML") | page content
    in HTML format | “html” |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`extractHTML()`](#TextPage.extractHTML "TextPage.extractHTML") | HTML 格式的页面内容
    | “html” |'
- en: '| [`extractXHTML()`](#TextPage.extractXHTML "TextPage.extractXHTML") | page
    content in XHTML format | “xhtml” |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`extractXHTML()`](#TextPage.extractXHTML "TextPage.extractXHTML") | XHTML
    格式的页面内容 | “xhtml” |'
- en: '| [`extractXML()`](#TextPage.extractXML "TextPage.extractXML") | page text
    in XML format | “xml” |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`extractXML()`](#TextPage.extractXML "TextPage.extractXML") | XML 格式的页面文本
    | “xml” |'
- en: '| [`extractDICT()`](#TextPage.extractDICT "TextPage.extractDICT") | page content
    in *dict* format | “dict” |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`extractDICT()`](#TextPage.extractDICT "TextPage.extractDICT") | *dict*
    格式的页面内容 | “dict” |'
- en: '| [`extractJSON()`](#TextPage.extractJSON "TextPage.extractJSON") | page content
    in JSON format | “json” |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`extractJSON()`](#TextPage.extractJSON "TextPage.extractJSON") | JSON 格式的页面内容
    | “json” |'
- en: '| [`extractRAWDICT()`](#TextPage.extractRAWDICT "TextPage.extractRAWDICT")
    | page content in *dict* format | “rawdict” |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`extractRAWDICT()`](#TextPage.extractRAWDICT "TextPage.extractRAWDICT")
    | *dict* 格式的页面内容 | “rawdict” |'
- en: '| [`extractRAWJSON()`](#TextPage.extractRAWJSON "TextPage.extractRAWJSON")
    | page content in JSON format | “rawjson” |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`extractRAWJSON()`](#TextPage.extractRAWJSON "TextPage.extractRAWJSON")
    | JSON 格式的页面内容 | “rawjson” |'
- en: '| [`search()`](#TextPage.search "TextPage.search") | Search for a string in
    the page | [`Page.search_for()`](page.html#Page.search_for "Page.search_for")
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`search()`](#TextPage.search "TextPage.search") | 在页面中搜索字符串 | [`Page.search_for()`](page.html#Page.search_for
    "Page.search_for") |'
- en: '**Class API**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**类 API**'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Return a string of the page’s complete text. The text is UTF-8 unicode and in
    the same sequence as specified at the time of document creation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 返回页面的完整文本字符串。文本是UTF-8 unicode格式的，与文档创建时指定的顺序相同。
- en: 'Parameters:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**sort** (*bool*) – (new in v1.19.1) sort the output by vertical, then horizontal
    coordinates. In many cases, this should suffice to generate a “natural” reading
    order.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**sort** (*bool*) – (v1.19.1 新增) 根据垂直然后水平坐标对输出进行排序。在许多情况下，这应该足以生成“自然”的阅读顺序。'
- en: 'Return type:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: str
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: str
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Textpage content as a list of text lines grouped by block. Each list items
    looks like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以文本行分组的文本页内容列表。每个列表项如下所示：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first four entries are the block’s bbox coordinates, *block_type* is 1 for
    an image block, 0 for text. *block_no* is the block sequence number. Multiple
    text lines are joined via line breaks.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前四个条目是块的bbox坐标，*block_type*为图像块为1，文本为0。*block_no*是块的序号。多个文本行通过换行符连接。
- en: For an image block, its bbox and a text line with some image meta information
    is included – **not the image content**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图像块，其bbox和带有一些图像元信息的文本行包含在内 – **不包括图像内容**。
- en: This is a high-speed method with just enough information to output plain text
    in desired reading sequence.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种高速方法，提供了足够的信息以按所需阅读顺序输出纯文本。
- en: 'Return type:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: list
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 列表
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Changed in v1.23.5: added `delimiters` parameter'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: v1.23.5 中的变更：添加了 `delimiters` 参数
- en: 'Textpage content as a list of single words with bbox information. An item of
    this list looks like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作为带有 bbox 信息的单词列表的文本页内容。此列表的项如下所示：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Parameters:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**delimiters** (*str*) – (new in v1.23.5) use these characters as *additional*
    word separators. By default, all white spaces (including the non-breaking space
    `0xA0`) indicate start and end of a word. Now you can specify more characters
    causing this. For instance, the default will return `"john.doe@outlook.com"` as
    **one** word. If you specify `delimiters="@."` then the **four** words `"john"`,
    `"doe"`, `"outlook"`, `"com"` will be returned. Other possible uses include ignoring
    punctuation characters `delimiters=string.punctuation`. The “word” strings will
    not contain any delimiting character.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**delimiters** (*str*) – （v1.23.5 中新增）将这些字符用作 *额外* 的单词分隔符。默认情况下，所有空格（包括非断行空格
    `0xA0`）表示单词的起始和结束。现在您可以指定更多字符来引起这种情况。例如，默认情况下将 `"john.doe@outlook.com"` 返回为**一个**单词。如果指定
    `delimiters="@."`，那么**四个**单词 `"john"`、`"doe"`、`"outlook"`、`"com"` 将被返回。其他可能的用途包括忽略标点字符
    `delimiters=string.punctuation`。这些“单词”字符串将不包含任何分隔字符。'
- en: This is a high-speed method which e.g. allows extracting text from within given
    areas or recovering the text reading sequence.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种高速方法，例如允许从给定区域提取文本或恢复文本阅读顺序。
- en: 'Return type:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: list
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 列表
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Textpage content as a string in HTML format. This version contains complete
    formatting and positioning information. Images are included (encoded as base64
    strings). You need an HTML package to interpret the output in Python. Your internet
    browser should be able to adequately display this information, but see [Controlling
    Quality of HTML Output](app1.html#htmlquality).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以 HTML 格式的字符串表示的文本页内容。此版本包含完整的格式和位置信息。图像已包含（编码为 base64 字符串）。您需要一个 HTML 包来在 Python
    中解释输出。您的互联网浏览器应能够充分显示此信息，但请参见 [控制 HTML 输出的质量](app1.html#htmlquality)。
- en: 'Return type:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: str
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: str
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Textpage content as a Python dictionary. Provides same information detail as
    HTML. See below for the structure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Python 字典的文本页内容。提供与 HTML 相同的详细信息。请参见下面的结构。
- en: 'Parameters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**sort** (*bool*) – (new in v1.19.1) sort the output by vertical, then horizontal
    coordinates. In many cases, this should suffice to generate a “natural” reading
    order.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**sort** (*bool*) – （v1.19.1 中新增）按垂直然后水平坐标对输出进行排序。在许多情况下，这应该足以生成“自然”的阅读顺序。'
- en: 'Return type:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: dict
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: dict
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Textpage content as a JSON string. Created by `json.dumps(TextPage.extractDICT())`.
    It is included for backlevel compatibility. You will probably use this method
    ever only for outputting the result to some file. The method detects binary image
    data and converts them to base64 encoded strings.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `json.dumps(TextPage.extractDICT())` 创建的 JSON 字符串表示的文本页内容。这是为了向后兼容而包含的。您可能仅用于将结果输出到某个文件。此方法检测到二进制图像数据并将其转换为
    base64 编码字符串。
- en: 'Parameters:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**sort** (*bool*) – (new in v1.19.1) sort the output by vertical, then horizontal
    coordinates. In many cases, this should suffice to generate a “natural” reading
    order.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**sort** (*bool*) – （v1.19.1 中新增）按垂直然后水平坐标对输出进行排序。在许多情况下，这应该足以生成“自然”的阅读顺序。'
- en: 'Return type:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: str
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: str
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Textpage content as a string in XHTML format. Text information detail is comparable
    with [`extractTEXT()`](#TextPage.extractTEXT "TextPage.extractTEXT"), but also
    contains images (base64 encoded). This method makes no attempt to re-create the
    original visual appearance.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以 XHTML 格式的字符串表示的文本页内容。文本信息的详细程度与 [`extractTEXT()`](#TextPage.extractTEXT "TextPage.extractTEXT")
    相当，但还包含图像（base64 编码）。此方法不试图重新创建原始的视觉外观。
- en: 'Return type:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: str
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: str
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Textpage content as a string in XML format. This contains complete formatting
    information about every single character on the page: font, size, line, paragraph,
    location, color, etc. Contains no images. You need an XML package to interpret
    the output in Python.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以 XML 格式的字符串表示的文本页内容。此格式包含有关页面上每个字符的完整格式信息：字体、大小、行、段落、位置、颜色等。不包含图像。您需要一个 XML
    包来在 Python 中解释输出。
- en: 'Return type:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: str
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: str
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Textpage content as a Python dictionary – technically similar to [`extractDICT()`](#TextPage.extractDICT
    "TextPage.extractDICT"), and it contains that information as a subset (including
    any images). It provides additional detail down to each character, which makes
    using XML obsolete in many cases. See below for the structure.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Textpage 内容作为一个 Python 字典 – 在技术上类似于 [`extractDICT()`](#TextPage.extractDICT
    "TextPage.extractDICT")，它包含该信息的一个子集（包括任何图像）。它提供了每个字符的额外细节，这在许多情况下使得使用 XML 成为过时。见下文了解结构。
- en: 'Parameters:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**sort** (*bool*) – (new in v1.19.1) sort the output by vertical, then horizontal
    coordinates. In many cases, this should suffice to generate a “natural” reading
    order.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**sort**（*bool*） – （在 v1.19.1 中新添加）按垂直和水平坐标排序输出。在许多情况下，这应足以生成“自然”的阅读顺序。'
- en: 'Return type:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '返回类型:'
- en: dict
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: dict
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Textpage content as a JSON string. Created by `json.dumps(TextPage.extractRAWDICT())`.
    You will probably use this method ever only for outputting the result to some
    file. The method detects binary image data and converts them to base64 encoded
    strings.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Textpage 内容作为 JSON 字符串。通过 `json.dumps(TextPage.extractRAWDICT())` 创建。你可能只会用这个方法将结果输出到某个文件中。该方法检测到二进制图像数据并将其转换为
    base64 编码的字符串。
- en: 'Parameters:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**sort** (*bool*) – (new in v1.19.1) sort the output by vertical, then horizontal
    coordinates. In many cases, this should suffice to generate a “natural” reading
    order.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**sort**（*bool*） – （在 v1.19.1 中新添加）按垂直和水平坐标排序输出。在许多情况下，这应足以生成“自然”的阅读顺序。'
- en: 'Return type:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '返回类型:'
- en: str
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: str
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Changed in v1.18.2
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 v1.18.2 中已更改
- en: Search for *string* and return a list of found locations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索*字符串*并返回找到的位置列表。
- en: 'Parameters:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**needle** (*str*) – the string to search for. Upper and lower cases will all
    match if needle consists of ASCII letters only – it does not yet work for “Ä”
    versus “ä”, etc.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**needle**（*str*） – 要搜索的字符串。如果 needle 只包含 ASCII 字母，则大小写都会匹配 – 对于 “Ä” 和 “ä”
    等情况目前尚不适用。'
- en: '**quads** (*bool*) – return quadrilaterals instead of rectangles.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**quads**（*bool*） – 返回四边形而不是矩形。'
- en: 'Return type:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '返回类型:'
- en: list
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: list
- en: 'Returns:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: a list of [Rect](rect.html#rect) or [Quad](quad.html#quad) objects, each surrounding
    a found *needle* occurrence. As the search string may contain spaces, its parts
    may be found on different lines. In this case, more than one rectangle (resp.
    quadrilateral) are returned. **(Changed in v1.18.2)** The method **now supports
    dehyphenation**, so it will find e.g. “method”, even if it was hyphenated in two
    parts “meth-” and “od” across two lines. The two returned rectangles will contain
    “meth” (no hyphen) and “od”.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包围找到的*needle*出现的 [Rect](rect.html#rect) 或 [Quad](quad.html#quad) 对象列表。由于搜索字符串可能包含空格，其部分可能在不同行上找到。在这种情况下，将返回多个矩形（或四边形）。**(v1.18.2中已更改)**
    该方法现在支持去连字符化，因此即使在两行中连字符分为“meth-”和“od”两部分，“method”也会被找到。返回的两个矩形将包含“meth”（没有连字符）和“od”。
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '**Overview of changes in v1.18.2:**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**v1.18.2 变更概览:**'
- en: 'The `hit_max` parameter has been removed: all hits are always returned.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`hit_max` 参数已移除：现在始终返回所有命中项。'
- en: 'The [Rect](rect.html) parameter of the [TextPage](#textpage) is now respected:
    only text inside this area is examined. Only characters with fully contained bboxes
    are considered. The wrapper method [`Page.search_for()`](page.html#Page.search_for
    "Page.search_for") correspondingly supports a *clip* parameter.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Rect](rect.html) 参数在 [TextPage](#textpage) 中得到了尊重：只检查此区域内的文本。仅考虑完全包含 bbox
    的字符。包装方法 [`Page.search_for()`](page.html#Page.search_for "Page.search_for") 相应地支持
    *clip* 参数。'
- en: '**Hyphenated words** are now found.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连字符词**现在可以找到了。'
- en: '**Overlapping rectangles** in the same line are now automatically joined. We
    assume that such separations are an artifact created by multiple marked content
    groups, containing parts of the same search needle.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同一行中的**重叠矩形**现在会自动合并。我们假设这样的分离是由包含同一搜索针部分的多个标记内容组件创建的副产品。
- en: 'Example Quad versus Rect: when searching for needle “pymupdf”, then the corresponding
    entry will either be the blue rectangle, or, if *quads* was specified, the quad
    *Quad(ul, ur, ll, lr)*.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 Quad 与 Rect：当搜索 needle “pymupdf” 时，相应的条目将是蓝色矩形，或者如果指定了 *quads*，则为四边形 *Quad(ul,
    ur, ll, lr)*。
- en: '![_images/img-quads.jpg](../Images/dd342f79fb80249423116ac8e3c9c731.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-quads.jpg](../Images/dd342f79fb80249423116ac8e3c9c731.png)'
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The rectangle associated with the text page. This either equals the rectangle
    of the creating page or the `clip` parameter of [`Page.get_textpage()`](page.html#Page.get_textpage
    "Page.get_textpage") and text extraction / searching methods.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 与文本页相关联的矩形。这可以等于创建页面的矩形或[`Page.get_textpage()`](page.html#Page.get_textpage
    "Page.get_textpage")及文本提取/搜索方法的`clip`参数。
- en: Note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The output of text searching and most text extractions **is restricted to this
    rectangle**. (X)HTML and XML output will however always extract the full page.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 文本搜索和大多数文本提取的输出**受此矩形的限制**。然而，(X)HTML和XML输出始终会提取整个页面。
- en: '## Structure of Dictionary Outputs'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '## 字典输出结构'
- en: 'Methods [`TextPage.extractDICT()`](#TextPage.extractDICT "TextPage.extractDICT"),
    [`TextPage.extractJSON()`](#TextPage.extractJSON "TextPage.extractJSON"), [`TextPage.extractRAWDICT()`](#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT"), and [`TextPage.extractRAWJSON()`](#TextPage.extractRAWJSON
    "TextPage.extractRAWJSON") return dictionaries, containing the page’s text and
    image content. The dictionary structures of all four methods are almost equal.
    They strive to map the text page’s information hierarchy of blocks, lines, spans
    and characters as precisely as possible, by representing each of these by its
    own sub-dictionary:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`TextPage.extractDICT()`](#TextPage.extractDICT "TextPage.extractDICT")，[`TextPage.extractJSON()`](#TextPage.extractJSON
    "TextPage.extractJSON")，[`TextPage.extractRAWDICT()`](#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT")和[`TextPage.extractRAWJSON()`](#TextPage.extractRAWJSON
    "TextPage.extractRAWJSON")返回包含页面文本和图像内容的字典。这四种方法的字典结构几乎相同。它们力求尽可能准确地映射文本页面的信息层次结构，包括块、行、跨度和字符，通过分别表示每个子字典来实现：
- en: A **page** consists of a list of **block dictionaries**.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一页由一系列**块字典**组成。
- en: A (text) **block** consists of a list of **line dictionaries**.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个（text）**块**由一系列**行字典**组成。
- en: A **line** consists of a list of **span dictionaries**.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一行由一系列**跨度字典**组成。
- en: A **span** either consists of the text itself or, for the RAW variants, a list
    of **character dictionaries**.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**跨度**要么由文本本身组成，要么（对于RAW变体）由一系列**字符字典**组成。
- en: 'RAW variants: a **character** is a dictionary of its origin, bbox and unicode.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RAW变体：**字符**是其来源、bbox和unicode的字典。
- en: 'All PyMuPDF geometry objects herein (points, rectangles, matrices) are represented
    by there **“like”** formats: a [`rect_like`](glossary.html#rect_like "rect_like")
    *tuple* is used instead of a [Rect](rect.html#rect), etc. The reasons for this
    are performance and memory considerations:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此处所有PyMuPDF几何对象（点、矩形、矩阵）均以其**“like”**格式表示：使用[`rect_like`](glossary.html#rect_like
    "rect_like") *tuple*代替[Rect](rect.html#rect)，等等。这样做的原因是性能和内存考虑：
- en: This code is written in C, where Python tuples can easily be generated. The
    geometry objects on the other hand are defined in Python source only. A conversion
    of each Python tuple into its corresponding geometry object would add significant
    – and largely unnecessary – execution time.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此代码用C语言编写，其中Python元组可以轻松生成。另一方面，几何对象仅在Python源代码中定义。将每个Python元组转换为其对应的几何对象将增加显著的（但基本上不必要的）执行时间。
- en: A 4-tuple needs about 168 bytes, the corresponding [Rect](rect.html#rect) 472
    bytes - almost three times the size. A “dict” dictionary for a text-heavy page
    contains 300+ bbox objects – which thus require about 50 KB storage as 4-tuples
    versus 140 KB as [Rect](rect.html#rect) objects. A “rawdict” output for such a
    page will however contain **4 to 5 thousand** bboxes, so in this case we talk
    about 750 KB versus 2 MB.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个4元组大约需要168字节，相应的[Rect](rect.html#rect)需要472字节 - 几乎是其三倍大小。对于文本密集型页面，一个“dict”字典包含300多个bbox对象
    - 因此，需要约50 KB存储空间作为4元组，而作为[Rect](rect.html#rect)对象则需要约140 KB。然而，对于这样的页面，一个“rawdict”输出将包含**4至5千**个bbox，因此在这种情况下，我们谈论的是750
    KB与2 MB的区别。
- en: 'Please also note, that only **bboxes** (= [`rect_like`](glossary.html#rect_like
    "rect_like") 4-tuples) are returned, whereas a [TextPage](#textpage) actually
    has the **full position information** – in [Quad](quad.html#quad) format. The
    reason for this decision is again a memory consideration: a [`quad_like`](glossary.html#quad_like
    "quad_like") needs 488 bytes (3 times the size of a [`rect_like`](glossary.html#rect_like
    "rect_like")). Given the mentioned amounts of generated bboxes, returning [`quad_like`](glossary.html#quad_like
    "quad_like") information would have a significant impact.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意，只有 **bbox**（= [`rect_like`](glossary.html#rect_like "rect_like") 的四元组）被返回，而实际上
    [TextPage](#textpage) 包含了 **完整的位置信息** – 以 [Quad](quad.html#quad) 格式展示。再次提及这一决定的原因是内存考量：一个
    [`quad_like`](glossary.html#quad_like "quad_like") 需要 488 字节（是 [`rect_like`](glossary.html#rect_like
    "rect_like") 大小的 3 倍）。考虑到生成的 bbox 数量，返回 [`quad_like`](glossary.html#quad_like
    "quad_like") 信息将会产生显著影响。
- en: In the vast majority of cases, we are dealing with **horizontal text only**,
    where bboxes provide entirely sufficient information.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在绝大多数情况下，我们处理的是**仅水平文本**，其中 bbox 提供了完全足够的信息。
- en: 'In addition, **the full quad information is not lost**: it can be recovered
    as needed for lines, spans, and characters by using the appropriate function from
    the following list:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**完整的四边形信息并未丢失**：可以通过以下列表中的适当函数按需恢复行、跨度和字符的信息：
- en: '[`recover_quad()`](functions.html#recover_quad "recover_quad") – the quad of
    a complete span'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`recover_quad()`](functions.html#recover_quad "recover_quad") – 完整跨度的四边形'
- en: '[`recover_span_quad()`](functions.html#recover_span_quad "recover_span_quad")
    – the quad of a character subset of a span'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`recover_span_quad()`](functions.html#recover_span_quad "recover_span_quad")
    – 跨度字符子集的四边形'
- en: '[`recover_line_quad()`](functions.html#recover_line_quad "recover_line_quad")
    – the quad of a line'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`recover_line_quad()`](functions.html#recover_line_quad "recover_line_quad")
    – 行的四边形'
- en: '[`recover_char_quad()`](functions.html#recover_char_quad "recover_char_quad")
    – the quad of a character'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`recover_char_quad()`](functions.html#recover_char_quad "recover_char_quad")
    – 字符的四边形'
- en: As mentioned, using these functions is ever only needed, if the text is **not
    written horizontally** – `line["dir"] != (1, 0)` – and you need the quad for text
    marker annotations ([`Page.add_highlight_annot()`](page.html#Page.add_highlight_annot
    "Page.add_highlight_annot") and friends).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，仅在文本 **非水平书写** – `line["dir"] != (1, 0)` – 且需要用于文本标记注释的四边形时，才有必要使用这些函数
    ([`Page.add_highlight_annot()`](page.html#Page.add_highlight_annot "Page.add_highlight_annot")
    和相关功能)。
- en: '![_images/img-textpage.png](../Images/1fad3323220c40ba524a34c147d62563.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-textpage.png](../Images/1fad3323220c40ba524a34c147d62563.png)'
- en: Page Dictionary
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面字典
- en: '| **Key** | **Value** |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| width | width of the `clip` rectangle *(float)* |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| width | `clip` 矩形的宽度 *(浮点数)* |'
- en: '| height | height of the `clip` rectangle *(float)* |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| height | `clip` 矩形的高度 *(浮点数)* |'
- en: '| blocks | *list* of block dictionaries |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| blocks | 图像块字典的 *列表* |'
- en: Block Dictionaries
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块字典
- en: Block dictionaries come in two different formats for **image blocks** and for
    **text blocks**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 块字典以 **图像块** 和 **文本块** 两种不同格式出现。
- en: '*(Changed in v1.18.0)* – new dict key *number*, the block number.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(在 v1.18.0 中更改)* – 新字典键 *number*，块编号。'
- en: '*(Changed in v1.18.11)* – new dict key *transform*, the image transformation
    matrix for image blocks.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(在 v1.18.11 中更改)* – 新字典键 *transform*，图像块的图像变换矩阵。'
- en: '*(Changed in v1.18.11)* – new dict key *size*, the size of the image in bytes
    for image blocks.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(在 v1.18.11 中更改)* – 新字典键 *size*，图像块的图像大小，以字节为单位。'
- en: '**Image block:**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像块:**'
- en: '| **Key** | **Value** |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| type | 1 = image *(int)* |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| type | 1 = 图像 *(整数)* |'
- en: '| bbox | image bbox on page ([`rect_like`](glossary.html#rect_like "rect_like"))
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 页面上图像的bbox ([`rect_like`](glossary.html#rect_like "rect_like")) |'
- en: '| number | block count *(int)* |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| number | 块计数 *(整数)* |'
- en: '| ext | image type *(str)*, as file extension, see below |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| ext | 图像类型 *(字符串)*，作为文件扩展名，请参见下文 |'
- en: '| width | original image width *(int)* |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| width | 原始图像宽度 *(整数)* |'
- en: '| height | original image height *(int)* |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| height | 原始图像高度 *(整数)* |'
- en: '| colorspace | colorspace component count *(int)* |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| colorspace | 颜色空间组件计数 *(整数)* |'
- en: '| xres | resolution in x-direction *(int)* |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| xres | x 方向分辨率 *(整数)* |'
- en: '| yres | resolution in y-direction *(int)* |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| yres | y 方向分辨率 *(整数)* |'
- en: '| bpc | bits per component *(int)* |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| bpc | 每组件位数 *(整数)* |'
- en: '| transform | matrix transforming image rect to bbox ([`matrix_like`](glossary.html#matrix_like
    "matrix_like")) |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| transform | 将图像矩形转换为bbox的矩阵 ([`matrix_like`](glossary.html#matrix_like "matrix_like"))
    |'
- en: '| size | size of the image in bytes *(int)* |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| size | 图像大小，以字节为单位 *(整数)* |'
- en: '| image | image content *(bytes)* |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| image | 图像内容 *(字节)* |'
- en: Possible values of the “ext” key are “bmp”, “gif”, “jpeg”, “jpx” (JPEG 2000),
    “jxr” (JPEG XR), “png”, “pnm”, and “tiff”.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: “ext”键的可能值为“bmp”, “gif”, “jpeg”, “jpx” (JPEG 2000), “jxr” (JPEG XR), “png”,
    “pnm”和“tiff”。
- en: Note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: An image block is generated for **all and every image occurrence** on the page.
    Hence there may be duplicates, if an image is shown at different locations.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面上的每一张图片都会生成一个图像块。因此，如果一个图片在不同位置显示，可能会有重复。
- en: '[TextPage](#textpage) and corresponding method [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") are **available for all document types**. Only for PDF documents,
    methods [`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images") / [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images") offer some overlapping functionality as far as image lists
    are concerned. But both lists **may or may not** contain the same items. Any differences
    are most probably caused by one of the following:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[TextPage](#textpage)和相应的方法[`Page.get_text()`](page.html#Page.get_text "Page.get_text")适用于所有文档类型。仅对于PDF文档，方法[`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images") / [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images")在图像列表方面提供部分重叠功能。但两个列表可能包含**相同的项，也可能不同**。任何差异很可能是由以下原因之一引起的：'
- en: “Inline” images (see page 214 of the [Adobe PDF References](app3.html#adobemanual))
    of a PDF page are contained in a textpage, but **do not appear** in [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images").
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF页面的“内嵌”图像（见[Adobe PDF参考手册](app3.html#adobemanual)第214页）包含在文本页中，但**不会**显示在[`Page.get_images()`](page.html#Page.get_images
    "Page.get_images")中。
- en: ''
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Annotations may also contain images – these will **not appear** in [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images").
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释也可能包含图像 - 这些图像将**不会**显示在[`Page.get_images()`](page.html#Page.get_images "Page.get_images")中。
- en: ''
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Image blocks in a textpage are generated for **every** image location – whether
    or not there are any duplicates. This is in contrast to [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images"), which will list each image only once (per reference name).
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本页中的图像块会生成所有图像位置，无论是否存在重复。这与[`Page.get_images()`](page.html#Page.get_images
    "Page.get_images")不同，后者每个参考名称仅列出一次图像。
- en: ''
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Images mentioned in the page’s [`object`](glossary.html#object "object") definition
    will **always** appear in [`Page.get_images()`](page.html#Page.get_images "Page.get_images")
    [[1]](#f1). But it may happen, that there is no “display” command in the page’s
    [`contents`](glossary.html#contents "contents") (erroneously or on purpose). In
    this case the image will **not appear** in the textpage.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面上的[`object`](glossary.html#object "object")定义中提到的图像将始终出现在[`Page.get_images()`](page.html#Page.get_images
    "Page.get_images")中 [[1]](#f1)。但可能会发生以下情况，即页面的[`contents`](glossary.html#contents
    "contents")中没有“display”命令（错误地或有意省略）。在这种情况下，该图像将**不会**出现在文本页中。
- en: 'The image’s “transformation matrix” is defined as the matrix, for which the
    expression `bbox / transform == pymupdf.Rect(0, 0, 1, 1)` is true, lookup details
    here: [Image Transformation Matrix](app3.html#imagetransformation).'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像的“变换矩阵”定义为满足表达式`bbox / transform == pymupdf.Rect(0, 0, 1, 1)`的矩阵，详细信息请参阅：[图像变换矩阵](app3.html#imagetransformation)。
- en: '**Text block:**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本块：**'
- en: '| **Key** | **Value** |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| **Key** | **Value** |'
- en: '| --- | --- |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| type | 0 = text *(int)* |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| type | 0 = 文本 *(整数)* |'
- en: '| bbox | block rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 块矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| number | block count *(int)* |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| number | 块计数 *(整数)* |'
- en: '| lines | *list* of text line dictionaries |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| lines | *文本行字典列表* |'
- en: Line Dictionary
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行字典
- en: '| **Key** | **Value** |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| **Key** | **Value** |'
- en: '| --- | --- |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| bbox | line rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 行矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| wmode | writing mode *(int)*: 0 = horizontal, 1 = vertical |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| wmode | 编写模式 *(整数)*：0 = 水平，1 = 垂直 |'
- en: '| dir | writing direction, [`point_like`](glossary.html#point_like "point_like")
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| dir | 编写方向，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| spans | *list* of span dictionaries |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| spans | *span字典列表* |'
- en: 'The value of key *“dir”* is the **unit vector** `dir = (cosine, -sine)` of
    the angle, which the text has relative to the x-axis [[2]](#f2). See the following
    picture: The word in each quadrant (counter-clockwise from top-right to bottom-right)
    is rotated by 30, 120, 210 and 300 degrees respectively.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 键 *“dir”* 的值是相对于x轴的角度的**单位向量** `dir = (cosine, -sine)`，见下图：每个象限内的单词（顺时针从右上到右下）分别旋转30°、120°、210°和300°。
- en: '[![_images/img-line-dir.png](../Images/15ecc7ea6bdd91ad4e72dbbef2a91170.png)](_images/img-line-dir.png)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-line-dir.png](../Images/15ecc7ea6bdd91ad4e72dbbef2a91170.png)](_images/img-line-dir.png)'
- en: Span Dictionary
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Span 字典
- en: Spans contain the actual text. A line contains **more than one span only**,
    if it contains text with different font properties.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Span 包含实际文本。如果一行包含具有不同字体属性的文本，则包含**多个 span**。
- en: Changed in version 1.14.17 Spans now also have a *bbox* key (again).
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自版本 1.14.17 更改 Spans 现在也有一个 *bbox* 键（再次）。
- en: Changed in version 1.17.6 Spans now also have an *origin* key.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自版本 1.17.6 更改 Spans 现在也有一个 *origin* 键。
- en: '| **Key** | **Value** |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| **Key** | **Value** |'
- en: '| --- | --- |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| bbox | span rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| bbox | span 矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| origin | the first character’s origin, [`point_like`](glossary.html#point_like
    "point_like") |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| origin | 第一个字符的来源，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| font | font name *(str)* |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| font | 字体名称 *(字符串)* |'
- en: '| ascender | ascender of the font *(float)* |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| ascender | 字体的 ascender *(浮点数)* |'
- en: '| descender | descender of the font *(float)* |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| descender | 字体的 descender *(浮点数)* |'
- en: '| size | font size *(float)* |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| size | 字体大小 *(浮点数)* |'
- en: '| flags | font characteristics *(int)* |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| flags | 字体特性 *(整数)* |'
- en: '| color | text color in sRGB format *(int)* |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| color | sRGB 格式下的文本颜色 *(整数)* |'
- en: '| text | (only for `extractDICT()`) text *(str)* |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| text | (仅适用于 `extractDICT()`) 文本 *(字符串)* |'
- en: '| chars | (only for `extractRAWDICT()`) *list* of character dictionaries |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| chars | (仅适用于 `extractRAWDICT()`) 字符字典的*列表* |'
- en: '*(New in version 1.16.0):* *“color”* is the text color encoded in sRGB (int)
    format, e.g. 0xFF0000 for red. There are functions for converting this integer
    back to formats (r, g, b) (PDF with float values from 0 to 1) [`sRGB_to_pdf()`](functions.html#sRGB_to_pdf
    "sRGB_to_pdf"), or (R, G, B), [`sRGB_to_rgb()`](functions.html#sRGB_to_rgb "sRGB_to_rgb")
    (with integer values from 0 to 255).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*(新增于版本 1.16.0):* *“color”* 是以 sRGB 编码的文本颜色（整数），例如红色为 0xFF0000。有函数可以将此整数转换回格式
    (r, g, b)（PDF 中的浮点值从 0 到 1）[`sRGB_to_pdf()`](functions.html#sRGB_to_pdf "sRGB_to_pdf")，或者
    (R, G, B)，[`sRGB_to_rgb()`](functions.html#sRGB_to_rgb "sRGB_to_rgb")（整数值从 0 到
    255）。'
- en: '*(New in v1.18.5):* *“ascender”* and *“descender”* are font properties, provided
    relative to [`fontsize`](glossary.html#fontsize "fontsize") 1\. Note that descender
    is a negative value. The following picture shows the relationship to other values
    and properties.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '*(新增于 v1.18.5):* *“ascender”* 和 *“descender”* 是字体属性，相对于 [`fontsize`](glossary.html#fontsize
    "fontsize") 1。请注意，descender 是一个负值。以下图片展示了它们与其他值和属性的关系。'
- en: '[![_images/img-asc-desc.png](../Images/9ea0597ab8c50db132b5765ca4c0e43b.png)](_images/img-asc-desc.png)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-asc-desc.png](../Images/9ea0597ab8c50db132b5765ca4c0e43b.png)](_images/img-asc-desc.png)'
- en: 'These numbers may be used to compute the minimum height of a character (or
    span) – as opposed to the standard height provided in the “bbox” values (which
    actually represents the **line height**). The following code recalculates the
    span bbox to have a height of **fontsize** exactly fitting the text inside:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字可以用来计算字符（或 span）的最小高度，与“bbox”值中提供的标准高度相对应（实际上代表**行高**）。以下代码重新计算 span 的 bbox，确保其高度与
    **fontsize** 恰好适合文本内容：
- en: '[PRE16]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Caution
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The above calculation may deliver a **larger** height! This may e.g. happen
    for OCRed documents, where the risk of all sorts of text artifacts is high. MuPDF
    tries to come up with a reasonable bbox height, independently from the [`fontsize`](glossary.html#fontsize
    "fontsize") found in the PDF. So please ensure that the height of `span["bbox"]`
    is **larger** than `span["size"]`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述计算可能会得到一个**更大**的高度！例如在 OCR 文档中可能发生，那里各种文本伪影的风险较高。MuPDF 尝试提供一个合理的 bbox 高度，与
    PDF 中找到的 [`fontsize`](glossary.html#fontsize "fontsize") 无关。因此，请确保 `span["bbox"]`
    的高度**大于** `span["size"]`。
- en: Note
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may request PyMuPDF to do all of the above automatically by executing `pymupdf.TOOLS.set_small_glyph_heights(True)`.
    This sets a global parameter so that all subsequent text searches and text extractions
    are based on reduced glyph heights, where meaningful.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行 `pymupdf.TOOLS.set_small_glyph_heights(True)` 要求 PyMuPDF 自动执行以上所有操作。这会设置一个全局参数，以便所有后续的文本搜索和文本提取都基于降低的字形高度，而这些高度是有意义的。
- en: The following shows the original span rectangle in red and the rectangle with
    re-computed height in blue.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了原始 span 矩形为红色，重新计算高度后的矩形为蓝色。
- en: '[![_images/img-span-rect.png](../Images/08fd3328e61e00b5de7d30a5eb69dfb4.png)](_images/img-span-rect.png)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-span-rect.png](../Images/08fd3328e61e00b5de7d30a5eb69dfb4.png)](_images/img-span-rect.png)'
- en: '*“flags”* is an integer, which represents font properties except for the first
    bit 0\. They are to be interpreted like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '*“标志”* 是一个整数，代表字体属性，但第一个位 0 除外。其解释如下：'
- en: 'bit 0: superscripted (2⁰) – not a font property, detected by MuPDF code.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 0 位：上标 (2⁰) - 不是字体属性，MuPDF 代码检测到的。
- en: 'bit 1: italic (2¹)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 1 位：斜体 (2¹)
- en: 'bit 2: serifed (2²)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位 2：衬线体 (2²)
- en: 'bit 3: monospaced (2³)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位 3：等宽字体 (2³)
- en: 'bit 4: bold (2⁴)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 4 位：粗体 (2⁴)
- en: 'Test these characteristics like so:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 测试这些特性的方式如下：
- en: '[PRE17]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Bits 1 thru 4 are font properties, i.e. encoded in the font program. Please
    note, that this information is not necessarily correct or complete: fonts quite
    often contain wrong data here.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 位 1 到 4 是字体属性，即在字体程序中编码。请注意，此信息未必正确或完整：字体往往在这里包含错误数据。
- en: Character Dictionary for `extractRAWDICT()`
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`extractRAWDICT()` 的字符字典'
- en: '| **Key** | **Value** |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| origin | character’s left baseline point, [`point_like`](glossary.html#point_like
    "point_like") |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| origin | 字符的左基线点，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| bbox | character rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 字符矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| c | the character (unicode) |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| c | 字符（Unicode） |'
- en: 'This image shows the relationship between a character’s bbox and its quad:
    [![textpagechar](../Images/ee61a05de894965b12f164a4bd64419d.png)](_images/img-textpage-char.png)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此图显示了字符的边界框和其四边形之间的关系：[![textpagechar](../Images/ee61a05de894965b12f164a4bd64419d.png)](_images/img-textpage-char.png)
- en: Footnotes
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 脚注
- en: Do you have any feedback on this page?
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你对这一页有什么反馈吗？
- en: '* * *'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此软件按原样提供，不带任何明示或暗示的保证。此软件根据许可分发，未经授权不得复制、修改或分发。有关详细信息，请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)，或联系美国加利福尼亚州旧金山市
    Mesa 街 39 号 108A 室的 Artifex Software Inc。。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此文档涵盖了所有 1.24.4 版本及以前的版本。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ## Structure of Dictionary Outputs'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ## 字典输出的结构'
- en: 'Methods [`TextPage.extractDICT()`](#TextPage.extractDICT "TextPage.extractDICT"),
    [`TextPage.extractJSON()`](#TextPage.extractJSON "TextPage.extractJSON"), [`TextPage.extractRAWDICT()`](#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT"), and [`TextPage.extractRAWJSON()`](#TextPage.extractRAWJSON
    "TextPage.extractRAWJSON") return dictionaries, containing the page’s text and
    image content. The dictionary structures of all four methods are almost equal.
    They strive to map the text page’s information hierarchy of blocks, lines, spans
    and characters as precisely as possible, by representing each of these by its
    own sub-dictionary:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 [`TextPage.extractDICT()`](#TextPage.extractDICT "TextPage.extractDICT")，[`TextPage.extractJSON()`](#TextPage.extractJSON
    "TextPage.extractJSON")，[`TextPage.extractRAWDICT()`](#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT") 和 [`TextPage.extractRAWJSON()`](#TextPage.extractRAWJSON
    "TextPage.extractRAWJSON") 返回包含页面文本和图像内容的字典。所有四种方法的字典结构几乎相同。它们力图通过表示每个子字典来尽可能精确地映射文本页面的信息层次结构：块、行、跨度和字符：
- en: A **page** consists of a list of **block dictionaries**.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 **页面** 由一系列 **块字典** 组成。
- en: A (text) **block** consists of a list of **line dictionaries**.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个（文本） **块** 由一系列 **行字典** 组成。
- en: A **line** consists of a list of **span dictionaries**.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条 **线** 由一系列 **跨度字典** 组成。
- en: A **span** either consists of the text itself or, for the RAW variants, a list
    of **character dictionaries**.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 **跨度** 可以是文本本身，也可以是原始变体的 **字符字典** 列表。
- en: 'RAW variants: a **character** is a dictionary of its origin, bbox and unicode.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始变体：一个 **字符** 是其原点、边界框和 Unicode 的字典。
- en: 'All PyMuPDF geometry objects herein (points, rectangles, matrices) are represented
    by there **“like”** formats: a [`rect_like`](glossary.html#rect_like "rect_like")
    *tuple* is used instead of a [Rect](rect.html#rect), etc. The reasons for this
    are performance and memory considerations:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这里所有的 PyMuPDF 几何对象（点、矩形、矩阵）都用其 **“like”** 格式表示：使用 [`rect_like`](glossary.html#rect_like
    "rect_like") *元组* 代替 [Rect](rect.html#rect) 等。这样做是出于性能和内存考虑：
- en: This code is written in C, where Python tuples can easily be generated. The
    geometry objects on the other hand are defined in Python source only. A conversion
    of each Python tuple into its corresponding geometry object would add significant
    – and largely unnecessary – execution time.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此代码是用 C 语言编写的，其中 Python 元组可以轻松生成。另一方面，几何对象仅在 Python 源代码中定义。将每个 Python 元组转换为其相应的几何对象会增加显著的执行时间，这在大多数情况下是不必要的。
- en: A 4-tuple needs about 168 bytes, the corresponding [Rect](rect.html#rect) 472
    bytes - almost three times the size. A “dict” dictionary for a text-heavy page
    contains 300+ bbox objects – which thus require about 50 KB storage as 4-tuples
    versus 140 KB as [Rect](rect.html#rect) objects. A “rawdict” output for such a
    page will however contain **4 to 5 thousand** bboxes, so in this case we talk
    about 750 KB versus 2 MB.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 4 元组大约需要 168 字节，相应的 [Rect](rect.html#rect) 则需要 472 字节，几乎是前者的三倍大小。一个文本密集型页面的
    "dict" 字典包含 300 多个 bbox 对象，因此以 4 元组形式需要约 50 KB 存储空间，而以 [Rect](rect.html#rect)
    对象形式需要约 140 KB。然而，对于这样的页面，“rawdict”输出将包含 **4 到 5 千个** bbox，这种情况下大约是 750 KB 对比
    2 MB。
- en: 'Please also note, that only **bboxes** (= [`rect_like`](glossary.html#rect_like
    "rect_like") 4-tuples) are returned, whereas a [TextPage](#textpage) actually
    has the **full position information** – in [Quad](quad.html#quad) format. The
    reason for this decision is again a memory consideration: a [`quad_like`](glossary.html#quad_like
    "quad_like") needs 488 bytes (3 times the size of a [`rect_like`](glossary.html#rect_like
    "rect_like")). Given the mentioned amounts of generated bboxes, returning [`quad_like`](glossary.html#quad_like
    "quad_like") information would have a significant impact.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意，仅返回 **bboxes** (= [`rect_like`](glossary.html#rect_like "rect_like") 4
    元组)，而 [TextPage](#textpage) 实际上具有完整的位置信息 – 以 [Quad](quad.html#quad) 格式表示。再次考虑内存使用的原因，做出这样的决定：[`quad_like`](glossary.html#quad_like
    "quad_like") 需要 488 字节（是 [`rect_like`](glossary.html#rect_like "rect_like") 的三倍大小）。考虑到生成的
    bbox 数量，返回 [`quad_like`](glossary.html#quad_like "quad_like") 信息会有显著影响。
- en: In the vast majority of cases, we are dealing with **horizontal text only**,
    where bboxes provide entirely sufficient information.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在绝大多数情况下，我们只处理 **水平文本**，在这种情况下，bbox 提供的信息已经完全足够。
- en: 'In addition, **the full quad information is not lost**: it can be recovered
    as needed for lines, spans, and characters by using the appropriate function from
    the following list:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，**完整的四边形信息没有丢失**：可以根据需要使用以下列表中的适当函数来恢复行、跨度和字符的四边形信息：
- en: '[`recover_quad()`](functions.html#recover_quad "recover_quad") – the quad of
    a complete span'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`recover_quad()`](functions.html#recover_quad "recover_quad") – 完整跨度的四边形'
- en: '[`recover_span_quad()`](functions.html#recover_span_quad "recover_span_quad")
    – the quad of a character subset of a span'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`recover_span_quad()`](functions.html#recover_span_quad "recover_span_quad")
    – 跨度子集的四边形'
- en: '[`recover_line_quad()`](functions.html#recover_line_quad "recover_line_quad")
    – the quad of a line'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`recover_line_quad()`](functions.html#recover_line_quad "recover_line_quad")
    – 行的四边形'
- en: '[`recover_char_quad()`](functions.html#recover_char_quad "recover_char_quad")
    – the quad of a character'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`recover_char_quad()`](functions.html#recover_char_quad "recover_char_quad")
    – 字符的四边形'
- en: As mentioned, using these functions is ever only needed, if the text is **not
    written horizontally** – `line["dir"] != (1, 0)` – and you need the quad for text
    marker annotations ([`Page.add_highlight_annot()`](page.html#Page.add_highlight_annot
    "Page.add_highlight_annot") and friends).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前述的，只有在文本 **非水平写入** 的情况下才需要使用这些函数 – `line["dir"] != (1, 0)` – 并且需要用于文本标记注释的四边形
    ([`Page.add_highlight_annot()`](page.html#Page.add_highlight_annot "Page.add_highlight_annot")
    和其它相关函数)。
- en: '![_images/img-textpage.png](../Images/1fad3323220c40ba524a34c147d62563.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![_images/img-textpage.png](../Images/1fad3323220c40ba524a34c147d62563.png)'
- en: Page Dictionary
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面字典
- en: '| **Key** | **Value** |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| width | width of the `clip` rectangle *(float)* |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| width | `clip` 矩形的宽度 *(浮点数)* |'
- en: '| height | height of the `clip` rectangle *(float)* |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| height | `clip` 矩形的高度 *(浮点数)* |'
- en: '| blocks | *list* of block dictionaries |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| blocks | 块字典的 *列表* |'
- en: Block Dictionaries
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块字典
- en: Block dictionaries come in two different formats for **image blocks** and for
    **text blocks**.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 块字典有两种不同的格式，分别用于 **图像块** 和 **文本块**。
- en: '*(Changed in v1.18.0)* – new dict key *number*, the block number.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(更改于 v1.18.0)* – 新字典键 *number*，块编号。'
- en: '*(Changed in v1.18.11)* – new dict key *transform*, the image transformation
    matrix for image blocks.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(更改于 v1.18.11)* – 新字典键 *transform*，图像块的图像变换矩阵。'
- en: '*(Changed in v1.18.11)* – new dict key *size*, the size of the image in bytes
    for image blocks.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(更改于 v1.18.11)* – 新字典键 *size*，图像块中图像的大小（以字节为单位）。'
- en: '**Image block:**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像块：**'
- en: '| **Key** | **Value** |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| type | 1 = image *(int)* |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| type | 1 = 图像 *(整数)* |'
- en: '| bbox | image bbox on page ([`rect_like`](glossary.html#rect_like "rect_like"))
    |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 页面上图像边界框（[`rect_like`](glossary.html#rect_like "rect_like")） |'
- en: '| number | block count *(int)* |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| number | 块计数 *(整数)* |'
- en: '| ext | image type *(str)*, as file extension, see below |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| ext | 图像类型 *(字符串)*，作为文件扩展名，详见下文 |'
- en: '| width | original image width *(int)* |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| width | 原始图像宽度 *(整数)* |'
- en: '| height | original image height *(int)* |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| height | 原始图像高度 *(整数)* |'
- en: '| colorspace | colorspace component count *(int)* |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| colorspace | 色彩空间组件计数 *(整数)* |'
- en: '| xres | resolution in x-direction *(int)* |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| xres | x 方向的分辨率 *(整数)* |'
- en: '| yres | resolution in y-direction *(int)* |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| yres | y 方向的分辨率 *(整数)* |'
- en: '| bpc | bits per component *(int)* |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| bpc | 每个组件的比特数 *(整数)* |'
- en: '| transform | matrix transforming image rect to bbox ([`matrix_like`](glossary.html#matrix_like
    "matrix_like")) |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| transform | 将图像矩形转换为边界框的矩阵（[`matrix_like`](glossary.html#matrix_like "matrix_like")）
    |'
- en: '| size | size of the image in bytes *(int)* |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| size | 图像大小，以字节为单位 *(整数)* |'
- en: '| image | image content *(bytes)* |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| image | 图像内容 *(字节)* |'
- en: Possible values of the “ext” key are “bmp”, “gif”, “jpeg”, “jpx” (JPEG 2000),
    “jxr” (JPEG XR), “png”, “pnm”, and “tiff”.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: “ext” 键的可能取值包括 “bmp”, “gif”, “jpeg”, “jpx” (JPEG 2000), “jxr” (JPEG XR), “png”,
    “pnm” 和 “tiff”。
- en: Note
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An image block is generated for **all and every image occurrence** on the page.
    Hence there may be duplicates, if an image is shown at different locations.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对页面上每个图像出现的位置生成图像块。因此，如果图像在不同位置显示，则可能存在重复。
- en: '[TextPage](#textpage) and corresponding method [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") are **available for all document types**. Only for PDF documents,
    methods [`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images") / [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images") offer some overlapping functionality as far as image lists
    are concerned. But both lists **may or may not** contain the same items. Any differences
    are most probably caused by one of the following:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[TextPage](#textpage) 和相应方法[`Page.get_text()`](page.html#Page.get_text "Page.get_text")
    适用于所有文档类型。仅针对 PDF 文档，方法[`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images") / [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images") 在图像列表方面提供了一些重叠功能。但两个列表**可能或可能不会**包含相同的项目。任何差异很可能是由以下原因之一引起的：'
- en: “Inline” images (see page 214 of the [Adobe PDF References](app3.html#adobemanual))
    of a PDF page are contained in a textpage, but **do not appear** in [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images").
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF 页面的“内联”图像（参见[Adobe PDF 参考手册](app3.html#adobemanual)第214页）包含在文本页中，但**不会出现**在[`Page.get_images()`](page.html#Page.get_images
    "Page.get_images")中。
- en: ''
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Annotations may also contain images – these will **not appear** in [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images").
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释中也可能包含图像 – 这些图像将**不会出现**在[`Page.get_images()`](page.html#Page.get_images "Page.get_images")中。
- en: ''
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Image blocks in a textpage are generated for **every** image location – whether
    or not there are any duplicates. This is in contrast to [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images"), which will list each image only once (per reference name).
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文本页中，每个图像位置都会生成图像块 – 无论是否存在任何重复。这与[`Page.get_images()`](page.html#Page.get_images
    "Page.get_images")不同，后者只会列出每个图像一次（根据引用名称）。
- en: ''
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Images mentioned in the page’s [`object`](glossary.html#object "object") definition
    will **always** appear in [`Page.get_images()`](page.html#Page.get_images "Page.get_images")
    [[1]](#f1). But it may happen, that there is no “display” command in the page’s
    [`contents`](glossary.html#contents "contents") (erroneously or on purpose). In
    this case the image will **not appear** in the textpage.
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面的[`object`](glossary.html#object "object")定义中提到的图像将**始终**出现在[`Page.get_images()`](page.html#Page.get_images
    "Page.get_images")中[[1]](#f1)。但可能会出现这样的情况，即页面的[`contents`](glossary.html#contents
    "contents")中没有“display”命令（错误地或有意）。在这种情况下，该图像将**不会**出现在文本页中。
- en: 'The image’s “transformation matrix” is defined as the matrix, for which the
    expression `bbox / transform == pymupdf.Rect(0, 0, 1, 1)` is true, lookup details
    here: [Image Transformation Matrix](app3.html#imagetransformation).'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像的“变换矩阵”定义为矩阵，使得表达式 `bbox / transform == pymupdf.Rect(0, 0, 1, 1)` 成立，请参阅详细信息：[图像变换矩阵](app3.html#imagetransformation)。
- en: '**Text block:**'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本块：**'
- en: '| **Key** | **Value** |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| type | 0 = text *(int)* |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| type | 0 = 文本 *(整数)* |'
- en: '| bbox | block rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 块矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| number | block count *(int)* |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| number | 块计数 *(整数)* |'
- en: '| lines | *list* of text line dictionaries |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| lines | 文本行字典的*列表* |'
- en: Line Dictionary
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行字典
- en: '| **Key** | **Value** |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| bbox | line rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 行矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| wmode | writing mode *(int)*: 0 = horizontal, 1 = vertical |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| wmode | 书写模式 *(int)*: 0 = 水平, 1 = 垂直 |'
- en: '| dir | writing direction, [`point_like`](glossary.html#point_like "point_like")
    |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| dir | 书写方向，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| spans | *list* of span dictionaries |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| spans | 跨度字典的*列表* |'
- en: 'The value of key *“dir”* is the **unit vector** `dir = (cosine, -sine)` of
    the angle, which the text has relative to the x-axis [[2]](#f2). See the following
    picture: The word in each quadrant (counter-clockwise from top-right to bottom-right)
    is rotated by 30, 120, 210 and 300 degrees respectively.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 键*“dir”*的值是角度相对于x轴的**单位向量** `dir = (cosine, -sine)`，见图示：每个象限中的词（从右上方逆时针到右下方）分别旋转30度、120度、210度和300度。
- en: '[![_images/img-line-dir.png](../Images/15ecc7ea6bdd91ad4e72dbbef2a91170.png)](_images/img-line-dir.png)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-line-dir.png](../Images/15ecc7ea6bdd91ad4e72dbbef2a91170.png)](_images/img-line-dir.png)'
- en: Span Dictionary
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跨度字典
- en: Spans contain the actual text. A line contains **more than one span only**,
    if it contains text with different font properties.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 跨度包含实际文本。如果一行包含具有不同字体属性的文本，则该行包含**多个跨度**。
- en: Changed in version 1.14.17 Spans now also have a *bbox* key (again).
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本 1.14.17 更改，跨度现在也有一个*bbox*键（再次）。
- en: Changed in version 1.17.6 Spans now also have an *origin* key.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本 1.17.6 更改，跨度现在也有一个*origin*键。
- en: '| **Key** | **Value** |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| bbox | span rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 跨度矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| origin | the first character’s origin, [`point_like`](glossary.html#point_like
    "point_like") |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| origin | 第一个字符的起源，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| font | font name *(str)* |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| font | 字体名称 *(str)* |'
- en: '| ascender | ascender of the font *(float)* |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| ascender | 字体的上升部分 *(float)* |'
- en: '| descender | descender of the font *(float)* |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| descender | 字体的下降部分 *(float)* |'
- en: '| size | font size *(float)* |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| size | 字体大小 *(float)* |'
- en: '| flags | font characteristics *(int)* |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| flags | 字体特性 *(int)* |'
- en: '| color | text color in sRGB format *(int)* |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| color | sRGB格式文本颜色 *(int)* |'
- en: '| text | (only for `extractDICT()`) text *(str)* |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| text | （仅适用于`extractDICT()`）文本 *(str)* |'
- en: '| chars | (only for `extractRAWDICT()`) *list* of character dictionaries |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| chars | （仅适用于`extractRAWDICT()`）字符字典的*列表* |'
- en: '*(New in version 1.16.0):* *“color”* is the text color encoded in sRGB (int)
    format, e.g. 0xFF0000 for red. There are functions for converting this integer
    back to formats (r, g, b) (PDF with float values from 0 to 1) [`sRGB_to_pdf()`](functions.html#sRGB_to_pdf
    "sRGB_to_pdf"), or (R, G, B), [`sRGB_to_rgb()`](functions.html#sRGB_to_rgb "sRGB_to_rgb")
    (with integer values from 0 to 255).'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '*(自版本 1.16.0新增):* *“color”* 是以sRGB（int）格式编码的文本颜色，例如红色为0xFF0000。有函数可将此整数转换回格式（r,
    g, b）（PDF中浮点值从0到1）[`sRGB_to_pdf()`](functions.html#sRGB_to_pdf "sRGB_to_pdf")，或（R,
    G, B），[`sRGB_to_rgb()`](functions.html#sRGB_to_rgb "sRGB_to_rgb")（值从0到255的整数）。'
- en: '*(New in v1.18.5):* *“ascender”* and *“descender”* are font properties, provided
    relative to [`fontsize`](glossary.html#fontsize "fontsize") 1\. Note that descender
    is a negative value. The following picture shows the relationship to other values
    and properties.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '*(新增于v1.18.5):* *“ascender”* 和 *“descender”* 是与[`fontsize`](glossary.html#fontsize
    "fontsize") 1相关的字体属性。注意descender是一个负值。以下图片显示了与其他值和属性的关系。'
- en: '[![_images/img-asc-desc.png](../Images/9ea0597ab8c50db132b5765ca4c0e43b.png)](_images/img-asc-desc.png)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-asc-desc.png](../Images/9ea0597ab8c50db132b5765ca4c0e43b.png)](_images/img-asc-desc.png)'
- en: 'These numbers may be used to compute the minimum height of a character (or
    span) – as opposed to the standard height provided in the “bbox” values (which
    actually represents the **line height**). The following code recalculates the
    span bbox to have a height of **fontsize** exactly fitting the text inside:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字可用于计算字符（或跨度）的最小高度 - 与“bbox”值中提供的标准高度相反（实际上代表**行高**）。以下代码重新计算跨度的bbox，确保其高度完全适合文本内的**fontsize**：
- en: '[PRE18]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Caution
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The above calculation may deliver a **larger** height! This may e.g. happen
    for OCRed documents, where the risk of all sorts of text artifacts is high. MuPDF
    tries to come up with a reasonable bbox height, independently from the [`fontsize`](glossary.html#fontsize
    "fontsize") found in the PDF. So please ensure that the height of `span["bbox"]`
    is **larger** than `span["size"]`.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 上述计算可能会得到**更大**的高度！这可能发生在OCRed文档中，那里各种文本伪影的风险很高。MuPDF试图独立于PDF中找到的[`fontsize`](glossary.html#fontsize
    "fontsize")，提供一个合理的bbox高度。因此，请确保`span["bbox"]`的高度**大于**`span["size"]`。
- en: Note
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may request PyMuPDF to do all of the above automatically by executing `pymupdf.TOOLS.set_small_glyph_heights(True)`.
    This sets a global parameter so that all subsequent text searches and text extractions
    are based on reduced glyph heights, where meaningful.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行`pymupdf.TOOLS.set_small_glyph_heights(True)`来请求PyMuPDF自动执行上述所有操作。这会设置一个全局参数，以便所有后续的文本搜索和文本提取都基于降低的字形高度（在有意义时）。
- en: The following shows the original span rectangle in red and the rectangle with
    re-computed height in blue.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了原始跨度矩形为红色，重新计算高度后的矩形为蓝色。
- en: '[![_images/img-span-rect.png](../Images/08fd3328e61e00b5de7d30a5eb69dfb4.png)](_images/img-span-rect.png)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-span-rect.png](../Images/08fd3328e61e00b5de7d30a5eb69dfb4.png)](_images/img-span-rect.png)'
- en: '*“flags”* is an integer, which represents font properties except for the first
    bit 0\. They are to be interpreted like this:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '*“flags”* 是一个整数，代表除了第一个位 0 以外的字体属性。它们应该按照以下方式解释：'
- en: 'bit 0: superscripted (2⁰) – not a font property, detected by MuPDF code.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '位 0: 上标（2⁰） – 不是字体属性，由MuPDF代码检测。'
- en: 'bit 1: italic (2¹)'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '位 1: 斜体（2¹）'
- en: 'bit 2: serifed (2²)'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '位 2: 衬线字体（2²）'
- en: 'bit 3: monospaced (2³)'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '位 3: 等宽字体（2³）'
- en: 'bit 4: bold (2⁴)'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '位 4: 粗体（2⁴）'
- en: 'Test these characteristics like so:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 如此测试这些特性：
- en: '[PRE19]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Bits 1 thru 4 are font properties, i.e. encoded in the font program. Please
    note, that this information is not necessarily correct or complete: fonts quite
    often contain wrong data here.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 位 1 到 4 是字体属性，即编码在字体程序中。请注意，此信息未必正确或完整：字体往往在此处包含错误数据。
- en: Character Dictionary for `extractRAWDICT()`
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`extractRAWDICT()` 的字符字典'
- en: '| **Key** | **Value** |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| **关键字** | **数值** |'
- en: '| --- | --- |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| origin | character’s left baseline point, [`point_like`](glossary.html#point_like
    "point_like") |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| origin | 字符左基线点，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| bbox | character rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 字符矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| c | the character (unicode) |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| c | 字符（unicode） |'
- en: 'This image shows the relationship between a character’s bbox and its quad:
    [![textpagechar](../Images/ee61a05de894965b12f164a4bd64419d.png)](_images/img-textpage-char.png)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这幅图展示了字符bbox与其quad之间的关系：[![textpagechar](../Images/ee61a05de894965b12f164a4bd64419d.png)](_images/img-textpage-char.png)
- en: Footnotes
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 脚注
- en: Do you have any feedback on this page?
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 您对本页面有何反馈？
- en: '* * *'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * '
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 此软件按原样提供，不带任何明示或暗示的担保。此软件在许可证下分发，并且未经授权不得复制、修改或分发。请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)的许可信息或联系美国加利福尼亚州旧金山Mesa街39号108A套房的Artifex
    Software Inc.了解更多信息。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档涵盖所有1.24.4版本及更早版本。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
- en: Page Dictionary
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面字典
- en: '| **Key** | **Value** |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| **关键字** | **数值** |'
- en: '| --- | --- |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| width | width of the `clip` rectangle *(float)* |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| width | `clip` 矩形的宽度 *(浮点数)* |'
- en: '| height | height of the `clip` rectangle *(float)* |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| height | `clip` 矩形的高度 *(浮点数)* |'
- en: '| blocks | *list* of block dictionaries |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| blocks | *块* 字典列表 |'
- en: Block Dictionaries
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块字典
- en: Block dictionaries come in two different formats for **image blocks** and for
    **text blocks**.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 块字典有两种不同的格式，适用于**图像块**和**文本块**。
- en: '*(Changed in v1.18.0)* – new dict key *number*, the block number.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(在v1.18.0中更改)* – 新的字典键 *number*，块编号。'
- en: '*(Changed in v1.18.11)* – new dict key *transform*, the image transformation
    matrix for image blocks.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(在 v1.18.11 中更改)* – 新字典键 *transform*，图像块的转换矩阵。'
- en: '*(Changed in v1.18.11)* – new dict key *size*, the size of the image in bytes
    for image blocks.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(在 v1.18.11 中更改)* – 新字典键 *size*，图像块的字节大小。'
- en: '**Image block:**'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像块：**'
- en: '| **Key** | **Value** |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| **关键字** | **数值** |'
- en: '| --- | --- |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| type | 1 = image *(int)* |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 1 = 图像 *(int)* |'
- en: '| bbox | image bbox on page ([`rect_like`](glossary.html#rect_like "rect_like"))
    |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 页面上的图像边界框 ([`rect_like`](glossary.html#rect_like "rect_like")) |'
- en: '| number | block count *(int)* |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| 数量 | 块计数 *(int)* |'
- en: '| ext | image type *(str)*, as file extension, see below |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| 扩展名 | 图像类型 *(str)*，作为文件扩展名，见下文 |'
- en: '| width | original image width *(int)* |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| 宽度 | 原始图像宽度 *(int)* |'
- en: '| height | original image height *(int)* |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| 高度 | 原始图像高度 *(int)* |'
- en: '| colorspace | colorspace component count *(int)* |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| 颜色空间 | 颜色空间组件计数 *(int)* |'
- en: '| xres | resolution in x-direction *(int)* |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| xres | x 方向分辨率 *(int)* |'
- en: '| yres | resolution in y-direction *(int)* |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| yres | y 方向分辨率 *(int)* |'
- en: '| bpc | bits per component *(int)* |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| bpc | 每分量的位数 *(int)* |'
- en: '| transform | matrix transforming image rect to bbox ([`matrix_like`](glossary.html#matrix_like
    "matrix_like")) |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| 转换 | 将图像矩形转换为边界框的矩阵 ([`matrix_like`](glossary.html#matrix_like "matrix_like"))
    |'
- en: '| size | size of the image in bytes *(int)* |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| 大小 | 图像大小（字节为单位） *(int)* |'
- en: '| image | image content *(bytes)* |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| 图像 | 图像内容 *(bytes)* |'
- en: Possible values of the “ext” key are “bmp”, “gif”, “jpeg”, “jpx” (JPEG 2000),
    “jxr” (JPEG XR), “png”, “pnm”, and “tiff”.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: “ext” 键的可能值为 “bmp”, “gif”, “jpeg”, “jpx” (JPEG 2000), “jxr” (JPEG XR), “png”,
    “pnm”, 和 “tiff”。
- en: Note
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 注：
- en: An image block is generated for **all and every image occurrence** on the page.
    Hence there may be duplicates, if an image is shown at different locations.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文本页中为每个图像位置生成图像块 —— 因此如果图像在不同位置显示，则可能存在重复。
- en: '[TextPage](#textpage) and corresponding method [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") are **available for all document types**. Only for PDF documents,
    methods [`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images") / [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images") offer some overlapping functionality as far as image lists
    are concerned. But both lists **may or may not** contain the same items. Any differences
    are most probably caused by one of the following:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`TextPage`](#textpage) 和对应的方法 [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") 适用于所有文档类型。对于PDF文档，方法 [`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images") / [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images") 在图像列表方面提供了一些重叠功能。但是这两个列表可能会或者可能不会包含相同的项目。任何差异很可能是由以下原因之一造成的：'
- en: “Inline” images (see page 214 of the [Adobe PDF References](app3.html#adobemanual))
    of a PDF page are contained in a textpage, but **do not appear** in [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images").
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF页的“内联”图像（见[Adobe PDF 参考手册](app3.html#adobemanual)第214页）包含在文本页中，但不会出现在 [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images") 中。
- en: ''
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Annotations may also contain images – these will **not appear** in [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images").
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释中也可能包含图像 —— 这些图像不会出现在 [`Page.get_images()`](page.html#Page.get_images "Page.get_images")
    中。
- en: ''
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Image blocks in a textpage are generated for **every** image location – whether
    or not there are any duplicates. This is in contrast to [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images"), which will list each image only once (per reference name).
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本页中的图像块为每个图像位置生成 —— 无论是否存在任何重复。这与 [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images") 的行为形成对比，后者将仅列出每个图像的一次（每个参考名称）。
- en: ''
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Images mentioned in the page’s [`object`](glossary.html#object "object") definition
    will **always** appear in [`Page.get_images()`](page.html#Page.get_images "Page.get_images")
    [[1]](#f1). But it may happen, that there is no “display” command in the page’s
    [`contents`](glossary.html#contents "contents") (erroneously or on purpose). In
    this case the image will **not appear** in the textpage.
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面的 [`object`](glossary.html#object "object") 定义中提到的图像将始终出现在 [`Page.get_images()`](page.html#Page.get_images
    "Page.get_images") 中 [[1]](#f1)。但可能会出现以下情况，在页面的 [`contents`](glossary.html#contents
    "contents") 中没有“display”命令（错误或故意省略）。在这种情况下，图像将不会出现在文本页中。
- en: 'The image’s “transformation matrix” is defined as the matrix, for which the
    expression `bbox / transform == pymupdf.Rect(0, 0, 1, 1)` is true, lookup details
    here: [Image Transformation Matrix](app3.html#imagetransformation).'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像的“转换矩阵”被定义为满足表达式 `bbox / transform == pymupdf.Rect(0, 0, 1, 1)` 的矩阵，详情请参见：[图像转换矩阵](app3.html#imagetransformation)。
- en: '**Text block:**'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本块：**'
- en: '| **Key** | **Value** |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| type | 0 = text *(int)* |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 0 = 文本 *(整数)* |'
- en: '| bbox | block rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 块矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| number | block count *(int)* |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| 数量 | 块计数 *(整数)* |'
- en: '| lines | *list* of text line dictionaries |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| lines | *文本行字典列表* |'
- en: Line Dictionary
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行字典
- en: '| **Key** | **Value** |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| bbox | line rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 行矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| wmode | writing mode *(int)*: 0 = horizontal, 1 = vertical |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| wmode | 写作模式 *(整数)*：0 = 水平，1 = 垂直 |'
- en: '| dir | writing direction, [`point_like`](glossary.html#point_like "point_like")
    |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| dir | 写作方向，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| spans | *list* of span dictionaries |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| spans | *跨度字典列表* |'
- en: 'The value of key *“dir”* is the **unit vector** `dir = (cosine, -sine)` of
    the angle, which the text has relative to the x-axis [[2]](#f2). See the following
    picture: The word in each quadrant (counter-clockwise from top-right to bottom-right)
    is rotated by 30, 120, 210 and 300 degrees respectively.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 键值 *“dir”* 的值是文本相对于 x 轴的角度的 **单位向量** `dir = (cosine, -sine)` [[2]](#f2)。请参见下图：每个象限的单词（从右上到右下逆时针）分别旋转了
    30、120、210 和 300 度。
- en: '[![_images/img-line-dir.png](../Images/15ecc7ea6bdd91ad4e72dbbef2a91170.png)](_images/img-line-dir.png)'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-line-dir.png](../Images/15ecc7ea6bdd91ad4e72dbbef2a91170.png)](_images/img-line-dir.png)'
- en: Span Dictionary
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跨度字典
- en: Spans contain the actual text. A line contains **more than one span only**,
    if it contains text with different font properties.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 跨度包含实际的文本。只有当一行包含具有不同字体属性的文本时，它才包含 **多个跨度**。
- en: Changed in version 1.14.17 Spans now also have a *bbox* key (again).
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改于版本 1.14.17，跨度现在也有一个 *bbox* 键（再次）。
- en: Changed in version 1.17.6 Spans now also have an *origin* key.
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改于版本 1.17.6，跨度现在也有一个 *origin* 键。
- en: '| **Key** | **Value** |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| bbox | span rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 跨度矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| origin | the first character’s origin, [`point_like`](glossary.html#point_like
    "point_like") |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '| origin | 第一个字符的原点，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| font | font name *(str)* |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '| font | 字体名称 *(字符串)* |'
- en: '| ascender | ascender of the font *(float)* |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| ascender | 字体的升头 *(浮点数)* |'
- en: '| descender | descender of the font *(float)* |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| 降头 | 字体的降头 *(浮点数)* |'
- en: '| size | font size *(float)* |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| size | 字体大小 *(浮点数)* |'
- en: '| flags | font characteristics *(int)* |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| flags | 字体特征 *(整数)* |'
- en: '| color | text color in sRGB format *(int)* |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| color | 文本颜色，sRGB 格式 *(整数)* |'
- en: '| text | (only for `extractDICT()`) text *(str)* |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| text | （仅用于 `extractDICT()`）文本 *(字符串)* |'
- en: '| chars | (only for `extractRAWDICT()`) *list* of character dictionaries |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| chars | （仅用于 `extractRAWDICT()`）*字符字典列表* |'
- en: '*(New in version 1.16.0):* *“color”* is the text color encoded in sRGB (int)
    format, e.g. 0xFF0000 for red. There are functions for converting this integer
    back to formats (r, g, b) (PDF with float values from 0 to 1) [`sRGB_to_pdf()`](functions.html#sRGB_to_pdf
    "sRGB_to_pdf"), or (R, G, B), [`sRGB_to_rgb()`](functions.html#sRGB_to_rgb "sRGB_to_rgb")
    (with integer values from 0 to 255).'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '*(版本 1.16.0 新增)：* *“color”* 是以 sRGB (整数) 格式编码的文本颜色，例如红色的 0xFF0000。有函数可以将此整数转换回格式（r，g，b）（从
    0 到 1 的浮点数）[`sRGB_to_pdf()`](functions.html#sRGB_to_pdf "sRGB_to_pdf")，或（R，G，B），[`sRGB_to_rgb()`](functions.html#sRGB_to_rgb
    "sRGB_to_rgb")（从 0 到 255 的整数值）。'
- en: '*(New in v1.18.5):* *“ascender”* and *“descender”* are font properties, provided
    relative to [`fontsize`](glossary.html#fontsize "fontsize") 1\. Note that descender
    is a negative value. The following picture shows the relationship to other values
    and properties.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '*(版本 1.18.5 新增)：* *“ascender”* 和 *“descender”* 是字体属性，相对于 [`fontsize`](glossary.html#fontsize
    "fontsize") 1 提供。请注意，descender 是一个负值。下图显示了它们与其他值和属性的关系。'
- en: '[![_images/img-asc-desc.png](../Images/9ea0597ab8c50db132b5765ca4c0e43b.png)](_images/img-asc-desc.png)'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-asc-desc.png](../Images/9ea0597ab8c50db132b5765ca4c0e43b.png)](_images/img-asc-desc.png)'
- en: 'These numbers may be used to compute the minimum height of a character (or
    span) – as opposed to the standard height provided in the “bbox” values (which
    actually represents the **line height**). The following code recalculates the
    span bbox to have a height of **fontsize** exactly fitting the text inside:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字可用于计算字符（或跨度）的最小高度 - 与“bbox”值中提供的标准高度相对（实际上表示 **行高**）。以下代码重新计算跨度 bbox，使其高度正好为
    **fontsize**，以适应其中的文本：
- en: '[PRE20]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Caution
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The above calculation may deliver a **larger** height! This may e.g. happen
    for OCRed documents, where the risk of all sorts of text artifacts is high. MuPDF
    tries to come up with a reasonable bbox height, independently from the [`fontsize`](glossary.html#fontsize
    "fontsize") found in the PDF. So please ensure that the height of `span["bbox"]`
    is **larger** than `span["size"]`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 上述计算可能会得到一个**更大**的高度！这种情况可能发生在OCR文档中，那里各种文本伪影的风险很高。MuPDF试图提供一个合理的bbox高度，独立于PDF中找到的[`fontsize`](glossary.html#fontsize
    "fontsize")。因此，请确保`span["bbox"]`的高度**大于**`span["size"]`。
- en: Note
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may request PyMuPDF to do all of the above automatically by executing `pymupdf.TOOLS.set_small_glyph_heights(True)`.
    This sets a global parameter so that all subsequent text searches and text extractions
    are based on reduced glyph heights, where meaningful.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行`pymupdf.TOOLS.set_small_glyph_heights(True)`来请求PyMuPDF自动完成上述所有操作。这将设置一个全局参数，以便所有后续的文本搜索和文本提取都基于降低的字形高度，以提供更有意义的结果。
- en: The following shows the original span rectangle in red and the rectangle with
    re-computed height in blue.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了原始span矩形为红色，重新计算高度后的矩形为蓝色。
- en: '[![_images/img-span-rect.png](../Images/08fd3328e61e00b5de7d30a5eb69dfb4.png)](_images/img-span-rect.png)'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '[![_images/img-span-rect.png](../Images/08fd3328e61e00b5de7d30a5eb69dfb4.png)](_images/img-span-rect.png)'
- en: '*“flags”* is an integer, which represents font properties except for the first
    bit 0\. They are to be interpreted like this:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '*“flags”*是一个整数，代表字体属性，除了第一个位0。它们应该这样解释：'
- en: 'bit 0: superscripted (2⁰) – not a font property, detected by MuPDF code.'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bit 0: 上标（2⁰） - 不是字体属性，由MuPDF代码检测到。'
- en: 'bit 1: italic (2¹)'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bit 1: 斜体（2¹）'
- en: 'bit 2: serifed (2²)'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bit 2: 衬线字体（2²）'
- en: 'bit 3: monospaced (2³)'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bit 3: 等宽字体（2³）'
- en: 'bit 4: bold (2⁴)'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bit 4: 粗体（2⁴）'
- en: 'Test these characteristics like so:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 测试这些特性如下：
- en: '[PRE21]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Bits 1 thru 4 are font properties, i.e. encoded in the font program. Please
    note, that this information is not necessarily correct or complete: fonts quite
    often contain wrong data here.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 位1到4是字体属性，即编码在字体程序中。请注意，这些信息不一定正确或完整：字体往往在这里包含错误的数据。
- en: Character Dictionary for `extractRAWDICT()`
  id: totrans-448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取`extractRAWDICT()`的字符字典
- en: '| **Key** | **Value** |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '| **关键词** | **数值** |'
- en: '| --- | --- |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| origin | character’s left baseline point, [`point_like`](glossary.html#point_like
    "point_like") |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| origin | 字符的左基线点，[`point_like`](glossary.html#point_like "point_like") |'
- en: '| bbox | character rectangle, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| bbox | 字符矩形，[`rect_like`](glossary.html#rect_like "rect_like") |'
- en: '| c | the character (unicode) |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '| c | 字符（Unicode） |'
- en: 'This image shows the relationship between a character’s bbox and its quad:
    [![textpagechar](../Images/ee61a05de894965b12f164a4bd64419d.png)](_images/img-textpage-char.png)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 此图片展示了字符bbox与其quad之间的关系：[![textpagechar](../Images/ee61a05de894965b12f164a4bd64419d.png)](_images/img-textpage-char.png)
- en: Footnotes
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 脚注
- en: Do you have any feedback on this page?
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 您对本页有任何反馈吗？
- en: '* * *'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按原样提供，不附带任何明示或暗示的保证。此软件在许可下分发，未经授权不得复制、修改或分发。请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)的许可信息或联系美国旧金山CA
    94129 Mesa街39号108A套房的Artifex Software Inc.以获取更多信息。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 此文档覆盖了所有版本直到1.24.4。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
