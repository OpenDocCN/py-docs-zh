- en: Third Party Integration Issues
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方集成问题
- en: 原文：[https://docs.sqlalchemy.org/en/20/faq/thirdparty.html](https://docs.sqlalchemy.org/en/20/faq/thirdparty.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/faq/thirdparty.html](https://docs.sqlalchemy.org/en/20/faq/thirdparty.html)
- en: '[I’m getting errors related to “`numpy.int64`”, “`numpy.bool_`”, etc.](#i-m-getting-errors-related-to-numpy-int64-numpy-bool-etc)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我遇到了与“`numpy.int64`”、“`numpy.bool_`”等相关的错误。](#i-m-getting-errors-related-to-numpy-int64-numpy-bool-etc)'
- en: '[SQL expression for WHERE/HAVING role expected, got True](#sql-expression-for-where-having-role-expected-got-true)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[预期为WHERE/HAVING角色的SQL表达式，实际得到了True](#sql-expression-for-where-having-role-expected-got-true)'
- en: '## I’m getting errors related to “`numpy.int64`”, “`numpy.bool_`”, etc.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '## 我遇到了与“`numpy.int64`”、“`numpy.bool_`”等相关的错误。'
- en: The [numpy](https://numpy.org) package has its own numeric datatypes that extend
    from Python’s numeric types, but contain some behaviors that in some cases make
    them impossible to reconcile with some of SQLAlchemy’s behaviors, as well as in
    some cases with those of the underlying DBAPI driver in use.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[numpy](https://numpy.org)包具有其自己的数字数据类型，它们是从Python的数字类型扩展而来的，但是其中包含一些行为，在某些情况下使它们无法与SQLAlchemy的一些行为以及使用的底层DBAPI驱动程序的一些行为协调一致。'
- en: 'Two errors which can occur are `ProgrammingError: can''t adapt type ''numpy.int64''`
    on a backend such as psycopg2, and `ArgumentError: SQL expression object expected,
    got object of type <class ''numpy.bool_''> instead`; in more recent versions of
    SQLAlchemy this may be `ArgumentError: SQL expression for WHERE/HAVING role expected,
    got True`.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '可能出现的两个错误是在诸如psycopg2这样的后端上出现`ProgrammingError: can''t adapt type ''numpy.int64''`，以及在最近版本的SQLAlchemy中可能会出现`ArgumentError:
    SQL expression for WHERE/HAVING role expected, got True`；在更早的版本中可能会是`ArgumentError:
    SQL expression object expected, got object of type <class ''numpy.bool_''> instead`。'
- en: 'In the first case, the issue is due to psycopg2 not having an appropriate lookup
    entry for the `int64` datatype such that it is not accepted directly by queries.
    This may be illustrated from code based on the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况中，问题是由于psycopg2没有为`int64`数据类型提供适当的查找条目，因此它不能直接被查询接受。这可以通过以下代码进行说明：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the latter case, the issue is due to the `numpy.int64` datatype overriding
    the `__eq__()` method and enforcing that the return type of an expression is `numpy.True`
    or `numpy.False`, which breaks SQLAlchemy’s expression language behavior that
    expects to return [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions from Python equality comparisons:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在后一种情况中，问题是由于`numpy.int64`数据类型重写了`__eq__()`方法并强制返回表达式的返回类型为`numpy.True`或`numpy.False`，这破坏了SQLAlchemy的表达式语言行为，后者期望从Python的等式比较中返回[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These errors are both solved in the same way, which is that special numpy datatypes
    need to be replaced with regular Python values. Examples include applying the
    Python `int()` function to types like `numpy.int32` and `numpy.int64` and the
    Python `float()` function to `numpy.float32`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误都可以通过相同的方法解决，即需要将特殊的numpy数据类型替换为常规的Python值。例如，对于诸如`numpy.int32`和`numpy.int64`之类的类型，应用Python的`int()`函数，对于`numpy.float32`应用Python的`float()`函数：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: SQL expression for WHERE/HAVING role expected, got True
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预期为WHERE/HAVING角色的SQL表达式，实际得到了True。
- en: See [I’m getting errors related to “numpy.int64”, “numpy.bool_”, etc.](#numpy-int64).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[我遇到了与“numpy.int64”、“numpy.bool_”等相关的错误。](#numpy-int64)
- en: '## I’m getting errors related to “`numpy.int64`”, “`numpy.bool_`”, etc.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '## 我遇到了与“`numpy.int64`”、“`numpy.bool_`”等相关的错误。'
- en: The [numpy](https://numpy.org) package has its own numeric datatypes that extend
    from Python’s numeric types, but contain some behaviors that in some cases make
    them impossible to reconcile with some of SQLAlchemy’s behaviors, as well as in
    some cases with those of the underlying DBAPI driver in use.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[numpy](https://numpy.org)包具有其自己的数字数据类型，它们是从Python的数字类型扩展而来的，但是其中包含一些行为，在某些情况下使它们无法与SQLAlchemy的一些行为以及使用的底层DBAPI驱动程序的一些行为协调一致。'
- en: 'Two errors which can occur are `ProgrammingError: can''t adapt type ''numpy.int64''`
    on a backend such as psycopg2, and `ArgumentError: SQL expression object expected,
    got object of type <class ''numpy.bool_''> instead`; in more recent versions of
    SQLAlchemy this may be `ArgumentError: SQL expression for WHERE/HAVING role expected,
    got True`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '可能出现的两个错误是在诸如psycopg2这样的后端上出现`ProgrammingError: can''t adapt type ''numpy.int64''`，以及在最近版本的SQLAlchemy中可能会出现`ArgumentError:
    SQL expression for WHERE/HAVING role expected, got True`；在更早的版本中可能会是`ArgumentError:
    SQL expression object expected, got object of type <class ''numpy.bool_''> instead`。'
- en: 'In the first case, the issue is due to psycopg2 not having an appropriate lookup
    entry for the `int64` datatype such that it is not accepted directly by queries.
    This may be illustrated from code based on the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，问题是因为 psycopg2 没有适当的查找条目来处理 `int64` 数据类型，因此它不会直接被查询接受。这可以从以下基于代码的示例中说明：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the latter case, the issue is due to the `numpy.int64` datatype overriding
    the `__eq__()` method and enforcing that the return type of an expression is `numpy.True`
    or `numpy.False`, which breaks SQLAlchemy’s expression language behavior that
    expects to return [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions from Python equality comparisons:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在后一种情况下，问题是由于 `numpy.int64` 数据类型覆盖了 `__eq__()` 方法，并强制表达式的返回类型为 `numpy.True`
    或 `numpy.False`，这违反了 SQLAlchemy 表达式语言的行为，后者期望从 Python 相等比较中返回[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 表达式：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'These errors are both solved in the same way, which is that special numpy datatypes
    need to be replaced with regular Python values. Examples include applying the
    Python `int()` function to types like `numpy.int32` and `numpy.int64` and the
    Python `float()` function to `numpy.float32`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误都可以用同样的方法解决，即需要将特殊的 numpy 数据类型替换为常规的 Python 值。例如，对像 `numpy.int32` 和 `numpy.int64`
    这样的类型应用 Python 的 `int()` 函数，以及对 `numpy.float32` 应用 Python 的 `float()` 函数：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: SQL expression for WHERE/HAVING role expected, got True
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 期望 WHERE/HAVING 角色的 SQL 表达式，得到了 True
- en: See [I’m getting errors related to “numpy.int64”, “numpy.bool_”, etc.](#numpy-int64).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[I’m getting errors related to “numpy.int64”, “numpy.bool_”, 等](#numpy-int64)。
