- en: Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/event.html](https://docs.sqlalchemy.org/en/20/core/event.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/event.html](https://docs.sqlalchemy.org/en/20/core/event.html)
- en: SQLAlchemy includes an event API which publishes a wide variety of hooks into
    the internals of both SQLAlchemy Core and ORM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 包括一个事件 API，它发布了一系列钩子，可以进入 SQLAlchemy 核心和 ORM 的内部。
- en: Event Registration
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件注册
- en: Subscribing to an event occurs through a single API point, the [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function, or alternatively the [`listens_for()`](#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for") decorator. These functions accept a target, a
    string identifier which identifies the event to be intercepted, and a user-defined
    listening function. Additional positional and keyword arguments to these two functions
    may be supported by specific types of events, which may specify alternate interfaces
    for the given event function, or provide instructions regarding secondary event
    targets based on the given target.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅事件通过单个 API 点完成，即[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")
    函数，或者可以使用[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    装饰器。这些函数接受一个目标，一个字符串标识符，用于标识要拦截的事件，以及一个用户定义的监听函数。这两个函数的额外位置参数和关键字参数可能会被特定类型的事件支持，这些事件可能会指定给定事件函数的备用接口，或者根据给定目标提供有关次要事件目标的指令。
- en: 'The name of an event and the argument signature of a corresponding listener
    function is derived from a class bound specification method, which exists bound
    to a marker class that’s described in the documentation. For example, the documentation
    for [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") indicates that the event name is `"connect"`
    and that a user-defined listener function should receive two positional arguments:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 事件的名称和相应监听函数的参数签名是从绑定到文档中描述的标记类的绑定规范方法派生的。例如，对于[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") 的文档表明，事件名称为`"connect"`，并且用户定义的监听函数应接收两个位置参数：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To listen with the [`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    decorator looks like:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    装饰器进行监听如下所示：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '## Named Argument Styles'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '## 命名参数样式'
- en: 'There are some varieties of argument styles which can be accepted by listener
    functions. Taking the example of [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect"), this function is documented as receiving
    `dbapi_connection` and `connection_record` arguments. We can opt to receive these
    arguments by name, by establishing a listener function that accepts `**keyword`
    arguments, by passing `named=True` to either [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen") or [`listens_for()`](#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 监听函数可以接受一些参数样式的变化。以[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") 为例，此函数被记录为接收`dbapi_connection` 和 `connection_record`
    参数。我们可以选择通过名称接收这些参数，通过建立一个接受 `**keyword` 参数的监听函数，或通过向 [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen") 或 [`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    传递 `named=True` 来实现：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When using named argument passing, the names listed in the function argument
    specification will be used as keys in the dictionary.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名参数传递时，函数参数规范中列出的名称将用作字典中的键。
- en: 'Named style passes all arguments by name regardless of the function signature,
    so specific arguments may be listed as well, in any order, as long as the names
    match up:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 命名样式通过名称传递所有参数，而不考虑函数签名，因此特定参数也可以以任何顺序列出，只要名称匹配即可：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Above, the presence of `**kw` tells [`listens_for()`](#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for") that arguments should be passed to the function
    by name, rather than positionally.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，存在 `**kw` 告诉 [`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    参数应该通过名称而不是位置传递给函数。
- en: Targets
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标
- en: 'The [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") function
    is very flexible regarding targets. It generally accepts classes, instances of
    those classes, and related classes or objects from which the appropriate target
    can be derived. For example, the above mentioned `"connect"` event accepts [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") classes and objects as well as [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") classes and objects:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") 函数在目标方面非常灵活。它通常接受类、这些类的实例以及相关类或对象，可以从中派生适当的目标。例如，上述提到的
    `"connect"` 事件接受 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    类和对象，以及 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 类和对象：'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '## Modifiers'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '## 修饰符'
- en: 'Some listeners allow modifiers to be passed to [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen"). These modifiers sometimes provide alternate calling
    signatures for listeners. Such as with ORM events, some event listeners can have
    a return value which modifies the subsequent handling. By default, no listener
    ever requires a return value, but by passing `retval=True` this value can be supported:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一些监听器允许传递修饰符给 [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")。这些修饰符有时会为监听器提供替代的调用签名。例如，在
    ORM 事件中，一些事件监听器可以具有修改后续处理的返回值。默认情况下，没有监听器需要返回值，但通过传递 `retval=True` 可以支持此值：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Events and Multiprocessing
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件和多进程
- en: SQLAlchemy’s event hooks are implemented with Python functions and objects,
    so events propagate via Python function calls. Python multiprocessing follows
    the same way we think about OS multiprocessing, such as a parent process forking
    a child process, thus we can describe the SQLAlchemy event system’s behavior using
    the same model.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的事件钩子是用 Python 函数和对象实现的，因此事件通过 Python 函数调用进行传播。Python 的多进程遵循我们对操作系统多进程的思考方式，例如父进程派生子进程，因此我们可以使用相同的模型描述
    SQLAlchemy 事件系统的行为。
- en: Event hooks registered in a parent process will be present in new child processes
    that are forked from that parent after the hooks have been registered, since the
    child process starts with a copy of all existing Python structures from the parent
    when spawned. Child processes that already exist before the hooks are registered
    will not receive those new event hooks, as changes made to Python structures in
    a parent process do not propagate to child processes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在父进程中注册的事件钩子将存在于从注册这些钩子后派生的新子进程中，因为在生成子进程时，子进程会以父进程的所有现有 Python 结构的副本开始。在注册钩子之前已存在的子进程将不会接收到这些新的事件钩子，因为父进程中对
    Python 结构的更改不会传播到子进程。
- en: For the events themselves, these are Python function calls, which do not have
    any ability to propagate between processes. SQLAlchemy’s event system does not
    implement any inter-process communication. It is possible to implement event hooks
    that use Python inter-process messaging within them, however this would need to
    be implemented by the user.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于事件本身，这些都是 Python 函数调用，没有任何能力在进程之间传播。SQLAlchemy 的事件系统不实现任何进程间通信。可以实现使用 Python
    进程间消息传递的事件钩子，但这需要用户自己实现。
- en: Event Reference
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件参考
- en: 'Both SQLAlchemy Core and SQLAlchemy ORM feature a wide variety of event hooks:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy Core 和 SQLAlchemy ORM 都提供了各种各样的事件钩子：
- en: '**Core Events** - these are described in [Core Events](events.html) and include
    event hooks specific to connection pool lifecycle, SQL statement execution, transaction
    lifecycle, and schema creation and teardown.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心事件** - 这些事件在 [核心事件](events.html) 中描述，包括特定于连接池生命周期、SQL 语句执行、事务生命周期和模式创建和拆除的事件钩子。'
- en: '**ORM Events** - these are described in [ORM Events](../orm/events.html), and
    include event hooks specific to class and attribute instrumentation, object initialization
    hooks, attribute on-change hooks, session state, flush, and commit hooks, mapper
    initialization, object/result population, and per-instance persistence hooks.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ORM 事件** - 这些事件在 [ORM 事件](../orm/events.html) 中描述，包括特定于类和属性检测、对象初始化钩子、属性更改钩子、会话状态、刷新和提交钩子、映射器初始化、对象/结果填充和每个实例持久性钩子的事件钩子。'
- en: API Reference
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 参考
- en: '| Object Name | Description |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [contains](#sqlalchemy.event.contains)(target, identifier, fn) | Return True
    if the given target/ident/fn is set up to listen. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [contains](#sqlalchemy.event.contains)(target, identifier, fn) | 如果给定的目标/标识符/fn
    设置为监听，则返回 True。 |'
- en: '| [listen](#sqlalchemy.event.listen)(target, identifier, fn, *args, **kw) |
    Register a listener function for the given target. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [listen](#sqlalchemy.event.listen)(target, identifier, fn, *args, **kw) |
    为给定目标注册监听器函数。 |'
- en: '| [listens_for](#sqlalchemy.event.listens_for)(target, identifier, *args, **kw)
    | Decorate a function as a listener for the given target + identifier. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [listens_for](#sqlalchemy.event.listens_for)(target, identifier, *args, **kw)
    | 将函数装饰为给定目标 + 标识符的监听器。 |'
- en: '| [remove](#sqlalchemy.event.remove)(target, identifier, fn) | Remove an event
    listener. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [remove](#sqlalchemy.event.remove)(target, identifier, fn) | 移除事件监听器。 |'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Register a listener function for the given target.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定目标注册监听器函数。
- en: The [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") function
    is part of the primary interface for the SQLAlchemy event system, documented at
    [Events](#).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") 函数是 SQLAlchemy
    事件系统的主要接口之一，在 [Events](#) 中有文档说明。'
- en: 'e.g.:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Parameters:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`insert` (*bool*) – The default behavior for event handlers is to append the
    decorated user defined function to an internal list of registered event listeners
    upon discovery. If a user registers a function with `insert=True`, SQLAlchemy
    will insert (prepend) the function to the internal list upon discovery. This feature
    is not typically used or recommended by the SQLAlchemy maintainers, but is provided
    to ensure certain user defined functions can run before others, such as when [Changing
    the sql_mode in MySQL](../dialects/mysql.html#mysql-sql-mode).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert`（*bool*） - 事件处理程序的默认行为是在发现时将装饰的用户定义函数附加到注册的事件监听器的内部列表中。如果用户使用 `insert=True`
    注册函数，则 SQLAlchemy 将在发现时将函数插入（前置）到内部列表中。此功能通常不由 SQLAlchemy 维护者使用或推荐使用，但提供此功能是为了确保某些用户定义的函数可以在其他函数之前运行，例如在
    [修改 MySQL 中的 sql_mode](../dialects/mysql.html#mysql-sql-mode) 时。'
- en: '`named` (*bool*) – When using named argument passing, the names listed in the
    function argument specification will be used as keys in the dictionary. See [Named
    Argument Styles](#event-named-argument-styles).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`named`（*bool*） - 使用命名参数传递时，函数参数规范中列出的名称将用作字典中的键。参见 [命名参数风格](#event-named-argument-styles)。'
- en: '`once` (*bool*) – Private/Internal API usage. Deprecated. This parameter would
    provide that an event function would run only once per given target. It does not
    however imply automatic de-registration of the listener function; associating
    an arbitrarily high number of listeners without explicitly removing them will
    cause memory to grow unbounded even if `once=True` is specified.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`once`（*bool*） - 私有/内部 API 使用。已弃用。该参数将确保事件函数仅在给定目标上运行一次。但这并不意味着自动取消注册监听器函数；如果不显式地移除监听器函数，即使指定了
    `once=True`，也会导致内存无限增长。'
- en: '`propagate` (*bool*) – The `propagate` kwarg is available when working with
    ORM instrumentation and mapping events. See [`MapperEvents`](../orm/events.html#sqlalchemy.orm.MapperEvents
    "sqlalchemy.orm.MapperEvents") and [`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") for examples.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate`（*bool*） - 在使用 ORM 仪表化和映射事件时可用 `propagate` kwarg。参见 [`MapperEvents`](../orm/events.html#sqlalchemy.orm.MapperEvents
    "sqlalchemy.orm.MapperEvents") 和 [`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") 以获取示例。'
- en: '`retval` (*bool*) –'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retval`（*bool*） -'
- en: This flag applies only to specific event listeners, each of which includes documentation
    explaining when it should be used. By default, no listener ever requires a return
    value. However, some listeners do support special behaviors for return values,
    and include in their documentation that the `retval=True` flag is necessary for
    a return value to be processed.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标志仅适用于特定的事件监听器，每个监听器都包含解释何时应使用它的文档。默认情况下，没有监听器需要返回值。但是，一些监听器支持返回值的特殊行为，并在其文档中包含
    `retval=True` 标志是必要的信息。
- en: Event listener suites that make use of [`listen.retval`](#sqlalchemy.event.listen.params.retval
    "sqlalchemy.event.listen") include [`ConnectionEvents`](events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") and [`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents").
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 利用 [`listen.retval`](#sqlalchemy.event.listen.params.retval "sqlalchemy.event.listen.params.retval")
    的事件监听器套件包括 [`ConnectionEvents`](events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") 和 [`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents")。
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") function
    cannot be called at the same time that the target event is being run. This has
    implications for thread safety, and also means an event cannot be added from inside
    the listener function for itself. The list of events to be run are present inside
    of a mutable collection that can’t be changed during iteration.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") 函数不能在目标事件正在运行时调用。这对线程安全性有影响，并且意味着无法从监听器函数内部添加事件本身。在可变集合中存在要运行的事件列表，在迭代过程中不能更改。'
- en: Event registration and removal is not intended to be a “high velocity” operation;
    it is a configurational operation. For systems that need to quickly associate
    and deassociate with events at high scale, use a mutable structure that is handled
    from inside of a single listener.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 事件注册和移除不打算是“高速”操作；这是一个配置操作。对于需要在高比例上快速关联和取消关联事件的系统，请使用从单个监听器内部处理的可变结构。
- en: See also
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")'
- en: '[`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove")'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Decorate a function as a listener for the given target + identifier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数装饰为给定目标 + 标识符的监听器。
- en: The [`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    decorator is part of the primary interface for the SQLAlchemy event system, documented
    at [Events](#).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    装饰器是 SQLAlchemy 事件系统的主要接口的一部分，文档位于 [Events](#)。'
- en: This function generally shares the same kwargs as `listens()`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数通常与 `listens()` 共享相同的 kwargs。
- en: 'e.g.:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A given function can also be invoked for only the first invocation of the event
    using the `once` argument:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `once` 参数，也可以仅调用给定函数的事件的第一次调用：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Warning
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `once` argument does not imply automatic de-registration of the listener
    function after it has been invoked a first time; a listener entry will remain
    associated with the target object. Associating an arbitrarily high number of listeners
    without explicitly removing them will cause memory to grow unbounded even if `once=True`
    is specified.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`once` 参数并不意味着在第一次调用后自动注销监听器函数；监听器条目将保留与目标对象的关联。即使指定了 `once=True`，如果不明确删除，关联任意数量的监听器将导致内存无限增长。'
- en: See also
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") - general
    description of event listening'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") - 事件监听的概述'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Remove an event listener.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 移除事件监听器。
- en: The arguments here should match exactly those which were sent to [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen"); all the event registration which proceeded as a result
    of this call will be reverted by calling [`remove()`](#sqlalchemy.event.remove
    "sqlalchemy.event.remove") with the same arguments.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的参数应与发送到 [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")
    的参数完全匹配；通过使用相同的参数调用 [`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove")
    将撤消由此调用导致的所有事件注册。
- en: 'e.g.:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Above, the listener function associated with `SomeMappedClass` was also propagated
    to subclasses of `SomeMappedClass`; the [`remove()`](#sqlalchemy.event.remove
    "sqlalchemy.event.remove") function will revert all of these operations.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，与 `SomeMappedClass` 关联的监听器函数也被传播到 `SomeMappedClass` 的子类；[`remove()`](#sqlalchemy.event.remove
    "sqlalchemy.event.remove") 函数将撤消所有这些操作。
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove") function
    cannot be called at the same time that the target event is being run. This has
    implications for thread safety, and also means an event cannot be removed from
    inside the listener function for itself. The list of events to be run are present
    inside of a mutable collection that can’t be changed during iteration.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove") 函数不能在目标事件正在运行时调用。这对线程安全性有影响，并且意味着无法从监听器函数内部删除事件本身。在可变集合中存在要运行的事件列表，在迭代过程中不能更改。'
- en: Event registration and removal is not intended to be a “high velocity” operation;
    it is a configurational operation. For systems that need to quickly associate
    and deassociate with events at high scale, use a mutable structure that is handled
    from inside of a single listener.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 事件注册和移除不打算是“高速”操作；这是一个配置操作。对于需要在高比例上快速关联和取消关联事件的系统，请使用从单个监听器内部处理的可变结构。
- en: See also
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")'
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Return True if the given target/ident/fn is set up to listen.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的目标/标识/函数设置为监听，则返回 True。
- en: Event Registration
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件注册
- en: Subscribing to an event occurs through a single API point, the [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function, or alternatively the [`listens_for()`](#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for") decorator. These functions accept a target, a
    string identifier which identifies the event to be intercepted, and a user-defined
    listening function. Additional positional and keyword arguments to these two functions
    may be supported by specific types of events, which may specify alternate interfaces
    for the given event function, or provide instructions regarding secondary event
    targets based on the given target.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单个 API 点进行事件订阅，即[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")函数，或者选择使用[`listens_for()`](#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for")装饰器。这些函数接受一个目标，一个字符串标识符，用于识别要拦截的事件，并且接受一个用户定义的监听函数。这两个函数的其他位置参数和关键字参数可能会被特定类型的事件支持，这些事件可能会指定给定事件函数的替代接口，或者根据给定目标提供关于次要事件目标的说明。
- en: 'The name of an event and the argument signature of a corresponding listener
    function is derived from a class bound specification method, which exists bound
    to a marker class that’s described in the documentation. For example, the documentation
    for [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") indicates that the event name is `"connect"`
    and that a user-defined listener function should receive two positional arguments:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 事件的名称和相应监听函数的参数签名是从绑定到在文档中描述的标记类的类绑定规范方法派生的。例如，[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") 的文档指示事件名称是`"connect"`，并且用户定义的监听函数应该接收两个位置参数：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To listen with the [`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    decorator looks like:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")装饰器进行监听如下所示：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '## Named Argument Styles'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '## 命名参数风格'
- en: 'There are some varieties of argument styles which can be accepted by listener
    functions. Taking the example of [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect"), this function is documented as receiving
    `dbapi_connection` and `connection_record` arguments. We can opt to receive these
    arguments by name, by establishing a listener function that accepts `**keyword`
    arguments, by passing `named=True` to either [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen") or [`listens_for()`](#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些论证风格的变体可以被监听函数接受。以[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect")为例，该函数被记录为接收`dbapi_connection`和`connection_record`参数。我们可以选择通过名称接收这些参数，通过建立一个接受`**keyword`参数的监听函数，或者通过将`named=True`传递给[`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen")或[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")来接收：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When using named argument passing, the names listed in the function argument
    specification will be used as keys in the dictionary.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名参数传递时，函数参数规范中列出的名称将用作字典中的键。
- en: 'Named style passes all arguments by name regardless of the function signature,
    so specific arguments may be listed as well, in any order, as long as the names
    match up:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Named 风格通过名称传递所有参数，而不管函数签名如何，因此特定参数也可以列出，以任何顺序，只要名称匹配即可：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Above, the presence of `**kw` tells [`listens_for()`](#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for") that arguments should be passed to the function
    by name, rather than positionally.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的 `**kw` 告诉[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")应该按名称而不是按位置传递参数给函数。
- en: Targets
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标
- en: 'The [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") function
    is very flexible regarding targets. It generally accepts classes, instances of
    those classes, and related classes or objects from which the appropriate target
    can be derived. For example, the above mentioned `"connect"` event accepts [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") classes and objects as well as [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") classes and objects:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") 函数在目标方面非常灵活。它通常接受类、这些类的实例以及相关类或对象，从中可以派生出适当的目标。例如，上述提到的
    `"connect"` 事件也接受 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    类和对象，以及 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 类和对象：'
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '## Modifiers'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '## 修饰符'
- en: 'Some listeners allow modifiers to be passed to [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen"). These modifiers sometimes provide alternate calling
    signatures for listeners. Such as with ORM events, some event listeners can have
    a return value which modifies the subsequent handling. By default, no listener
    ever requires a return value, but by passing `retval=True` this value can be supported:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一些监听器允许传递修饰符给 [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")。这些修饰符有时会为监听器提供替代的调用签名。例如，对于
    ORM 事件，一些事件监听器可以有一个返回值，该返回值修改了后续的处理方式。默认情况下，没有任何监听器需要返回值，但是通过传递 `retval=True`，可以支持该值：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Events and Multiprocessing
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件和多处理
- en: SQLAlchemy’s event hooks are implemented with Python functions and objects,
    so events propagate via Python function calls. Python multiprocessing follows
    the same way we think about OS multiprocessing, such as a parent process forking
    a child process, thus we can describe the SQLAlchemy event system’s behavior using
    the same model.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的事件钩子是通过 Python 函数和对象实现的，因此事件通过 Python 函数调用传播。Python 多进程遵循与我们所思考的操作系统多进程相同的方式，例如父进程分叉出子进程，因此我们可以使用相同的模型描述
    SQLAlchemy 事件系统的行为。
- en: Event hooks registered in a parent process will be present in new child processes
    that are forked from that parent after the hooks have been registered, since the
    child process starts with a copy of all existing Python structures from the parent
    when spawned. Child processes that already exist before the hooks are registered
    will not receive those new event hooks, as changes made to Python structures in
    a parent process do not propagate to child processes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在父进程中注册的事件钩子将存在于从该父进程分叉出的新子进程中，因为子进程在生成时从父进程开始时具有所有现有 Python 结构的副本。在注册钩子之前存在的子进程将不会接收到这些新的事件钩子，因为在父进程中对
    Python 结构所做的更改不会传播到子进程。
- en: For the events themselves, these are Python function calls, which do not have
    any ability to propagate between processes. SQLAlchemy’s event system does not
    implement any inter-process communication. It is possible to implement event hooks
    that use Python inter-process messaging within them, however this would need to
    be implemented by the user.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于事件本身，这些是 Python 函数调用，它们没有任何传播到进程之间的能力。SQLAlchemy 的事件系统不实现任何进程间通信。可能会实现在其中使用
    Python 进程间消息传递的事件钩子，但这需要用户实现。
- en: Event Reference
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件参考
- en: 'Both SQLAlchemy Core and SQLAlchemy ORM feature a wide variety of event hooks:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 核心和 SQLAlchemy ORM 都具有各种各样的事件钩子：
- en: '**Core Events** - these are described in [Core Events](events.html) and include
    event hooks specific to connection pool lifecycle, SQL statement execution, transaction
    lifecycle, and schema creation and teardown.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心事件** - 这些在 [核心事件](events.html) 中描述，包括特定于连接池生命周期、SQL 语句执行、事务生命周期和架构创建和拆除的事件钩子。'
- en: '**ORM Events** - these are described in [ORM Events](../orm/events.html), and
    include event hooks specific to class and attribute instrumentation, object initialization
    hooks, attribute on-change hooks, session state, flush, and commit hooks, mapper
    initialization, object/result population, and per-instance persistence hooks.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ORM 事件** - 这些在 [ORM 事件](../orm/events.html) 中描述，包括特定于类和属性检测、对象初始化钩子、属性变更钩子、会话状态、刷新和提交钩子、映射器初始化、对象/结果填充和每个实例持久性钩子的事件钩子。'
- en: API Reference
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 参考
- en: '| Object Name | Description |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [contains](#sqlalchemy.event.contains)(target, identifier, fn) | Return True
    if the given target/ident/fn is set up to listen. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [contains](#sqlalchemy.event.contains)(target, identifier, fn) | 如果给定的目标/标识符/fn
    被设置为监听，则返回 True。 |'
- en: '| [listen](#sqlalchemy.event.listen)(target, identifier, fn, *args, **kw) |
    Register a listener function for the given target. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [listen](#sqlalchemy.event.listen)(target, identifier, fn, *args, **kw) |
    为给定的目标注册一个侦听器函数。 |'
- en: '| [listens_for](#sqlalchemy.event.listens_for)(target, identifier, *args, **kw)
    | Decorate a function as a listener for the given target + identifier. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [listens_for](#sqlalchemy.event.listens_for)(target, identifier, *args, **kw)
    | 将函数装饰为给定目标 + 标识符的侦听器。 |'
- en: '| [remove](#sqlalchemy.event.remove)(target, identifier, fn) | Remove an event
    listener. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [remove](#sqlalchemy.event.remove)(target, identifier, fn) | 移除一个事件侦听器。 |'
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Register a listener function for the given target.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的目标注册一个侦听器函数。
- en: The [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") function
    is part of the primary interface for the SQLAlchemy event system, documented at
    [Events](#).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")函数是 SQLAlchemy
    事件系统的主要接口之一，在[事件](#)中有文档说明。'
- en: 'e.g.:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Parameters:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`insert` (*bool*) – The default behavior for event handlers is to append the
    decorated user defined function to an internal list of registered event listeners
    upon discovery. If a user registers a function with `insert=True`, SQLAlchemy
    will insert (prepend) the function to the internal list upon discovery. This feature
    is not typically used or recommended by the SQLAlchemy maintainers, but is provided
    to ensure certain user defined functions can run before others, such as when [Changing
    the sql_mode in MySQL](../dialects/mysql.html#mysql-sql-mode).'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert` (*bool*) – 事件处理程序的默认行为是在发现时将装饰的用户定义函数追加到已注册的事件侦听器的内部列表中。如果用户使用 `insert=True`
    注册一个函数，SQLAlchemy 将在发现时将函数插入（预置）到内部列表中。这个功能通常不被 SQLAlchemy 维护者使用或推荐，但为了确保某些用户定义的函数可以在其他函数之前运行，比如[更改
    MySQL 中的 sql_mode](../dialects/mysql.html#mysql-sql-mode)时，提供了此功能。'
- en: '`named` (*bool*) – When using named argument passing, the names listed in the
    function argument specification will be used as keys in the dictionary. See [Named
    Argument Styles](#event-named-argument-styles).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`named` (*bool*) – 在使用命名参数传递时，函数参数规范中列出的名称将用作字典中的键。请参阅[命名参数风格](#event-named-argument-styles)。'
- en: '`once` (*bool*) – Private/Internal API usage. Deprecated. This parameter would
    provide that an event function would run only once per given target. It does not
    however imply automatic de-registration of the listener function; associating
    an arbitrarily high number of listeners without explicitly removing them will
    cause memory to grow unbounded even if `once=True` is specified.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`once` (*bool*) – 私有/内部 API 使用。已弃用。此参数将提供事件函数仅在给定目标上运行一次。但是，这并不意味着侦听器函数会自动取消注册；如果未显式删除关联的任意数量的侦听器，则即使指定了
    `once=True`，内存也会无限增长。'
- en: '`propagate` (*bool*) – The `propagate` kwarg is available when working with
    ORM instrumentation and mapping events. See [`MapperEvents`](../orm/events.html#sqlalchemy.orm.MapperEvents
    "sqlalchemy.orm.MapperEvents") and [`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") for examples.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate` (*bool*) – 在使用 ORM 仪器和映射事件时，`propagate` 关键字参数是可用的。参见[`MapperEvents`](../orm/events.html#sqlalchemy.orm.MapperEvents
    "sqlalchemy.orm.MapperEvents")和[`MapperEvents.before_mapper_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")进行示例。'
- en: '`retval` (*bool*) –'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retval` (*bool*) –'
- en: This flag applies only to specific event listeners, each of which includes documentation
    explaining when it should be used. By default, no listener ever requires a return
    value. However, some listeners do support special behaviors for return values,
    and include in their documentation that the `retval=True` flag is necessary for
    a return value to be processed.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标志仅适用于特定的事件侦听器，每个事件侦听器都包含说明何时应该使用它的文档。默认情况下，没有侦听器需要返回值。但是，一些侦听器确实支持返回值的特殊行为，并在其文档中包含了必须使用
    `retval=True` 标志才能处理返回值的说明。
- en: Event listener suites that make use of [`listen.retval`](#sqlalchemy.event.listen.params.retval
    "sqlalchemy.event.listen") include [`ConnectionEvents`](events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") and [`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents").
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 利用[`listen.retval`](#sqlalchemy.event.listen.params.retval "sqlalchemy.event.listen")的事件侦听器套件包括[`ConnectionEvents`](events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")和[`AttributeEvents`](../orm/events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents")。
- en: Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") function
    cannot be called at the same time that the target event is being run. This has
    implications for thread safety, and also means an event cannot be added from inside
    the listener function for itself. The list of events to be run are present inside
    of a mutable collection that can’t be changed during iteration.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") 函数不能在目标事件正在运行时调用。这对线程安全性有影响，并且还意味着无法从监听器函数内部为自身添加事件。要运行的事件列表存在于一个可变集合内，在迭代期间不能更改。'
- en: Event registration and removal is not intended to be a “high velocity” operation;
    it is a configurational operation. For systems that need to quickly associate
    and deassociate with events at high scale, use a mutable structure that is handled
    from inside of a single listener.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 事件注册和移除并不意味着是“高速”操作；它是一种配置操作。对于需要在高比例下快速关联和取消关联事件的系统，请使用可变结构，并且从单个监听器内部处理。
- en: See also
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")'
- en: '[`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove")'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove")'
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Decorate a function as a listener for the given target + identifier.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数装饰为给定目标 + 标识符的监听器。
- en: The [`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    decorator is part of the primary interface for the SQLAlchemy event system, documented
    at [Events](#).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listens_for()`](#sqlalchemy.event.listens_for "sqlalchemy.event.listens_for")
    装饰器是 SQLAlchemy 事件系统的主要接口之一，在[事件](#)文档中有说明。'
- en: This function generally shares the same kwargs as `listens()`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数通常具有与 `listens()` 相同的 kwargs。
- en: 'e.g.:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A given function can also be invoked for only the first invocation of the event
    using the `once` argument:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `once` 参数，给定函数还可以仅在事件的第一次调用时被调用：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Warning
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `once` argument does not imply automatic de-registration of the listener
    function after it has been invoked a first time; a listener entry will remain
    associated with the target object. Associating an arbitrarily high number of listeners
    without explicitly removing them will cause memory to grow unbounded even if `once=True`
    is specified.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`once` 参数不意味着在第一次调用后自动取消注册监听器函数；监听器条目将保持与目标对象的关联。如果不显式移除，关联任意数量的监听器将导致内存无限增长，即使指定了
    `once=True`。'
- en: See also
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") - general
    description of event listening'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen") - 事件监听的一般描述'
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Remove an event listener.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 移除事件监听器。
- en: The arguments here should match exactly those which were sent to [`listen()`](#sqlalchemy.event.listen
    "sqlalchemy.event.listen"); all the event registration which proceeded as a result
    of this call will be reverted by calling [`remove()`](#sqlalchemy.event.remove
    "sqlalchemy.event.remove") with the same arguments.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的参数应与发送到 [`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")
    的参数完全匹配；通过使用相同的参数调用 [`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove")
    将撤消此调用结果的所有事件注册。
- en: 'e.g.:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Above, the listener function associated with `SomeMappedClass` was also propagated
    to subclasses of `SomeMappedClass`; the [`remove()`](#sqlalchemy.event.remove
    "sqlalchemy.event.remove") function will revert all of these operations.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 上述中，与 `SomeMappedClass` 关联的监听器函数也传播到了 `SomeMappedClass` 的子类；[`remove()`](#sqlalchemy.event.remove
    "sqlalchemy.event.remove") 函数将撤销所有这些操作。
- en: Note
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove") function
    cannot be called at the same time that the target event is being run. This has
    implications for thread safety, and also means an event cannot be removed from
    inside the listener function for itself. The list of events to be run are present
    inside of a mutable collection that can’t be changed during iteration.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`remove()`](#sqlalchemy.event.remove "sqlalchemy.event.remove") 函数不能在目标事件正在运行时调用。这对线程安全性有影响，并且还意味着无法从监听器函数内部移除事件本身。要运行的事件列表存在于一个可变集合内，在迭代期间不能更改。'
- en: Event registration and removal is not intended to be a “high velocity” operation;
    it is a configurational operation. For systems that need to quickly associate
    and deassociate with events at high scale, use a mutable structure that is handled
    from inside of a single listener.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 事件注册和移除并不意味着是“高速”操作；它是一种配置操作。对于需要在高比例下快速关联和取消关联事件的系统，请使用可变结构，并且从单个监听器内部处理。
- en: See also
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](#sqlalchemy.event.listen "sqlalchemy.event.listen")'
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Return True if the given target/ident/fn is set up to listen.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的目标/标识符/函数已设置为监听，则返回 True。
