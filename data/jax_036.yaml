- en: JAX Errors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAX 错误
- en: 原文：[`jax.readthedocs.io/en/latest/errors.html`](https://jax.readthedocs.io/en/latest/errors.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/errors.html`](https://jax.readthedocs.io/en/latest/errors.html)
- en: This page lists a few of the errors you might encounter when using JAX, along
    with representative examples of how one might fix them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面列出了在使用 JAX 时可能遇到的一些错误，以及如何修复它们的代表性示例。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This error occurs when a JAX Tracer object is used in a context where a concrete
    value is required (see Different kinds of JAX values for more on what a Tracer
    is). In some situations, it can be easily fixed by marking problematic values
    as static; in others, it may indicate that your program is doing operations that
    are not directly supported by JAX’s JIT compilation model.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当 JAX 追踪器对象在需要具体值的上下文中使用时（参见关于 Tracer 是什么的更多信息），会发生此错误。在某些情况下，可以通过将问题值标记为静态来轻松修复；在其他情况下，可能表明您的程序正在执行
    JAX JIT 编译模型不直接支持的操作。
- en: 'Examples:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: Traced value where static value is expected
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在期望静态值的位置使用跟踪值
- en: 'One common cause of this error is using a traced value where a static value
    is required. For example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 导致此错误的一个常见原因是在需要静态值的位置使用跟踪值。例如：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This can often be fixed by marking the problematic argument as static:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可以通过将问题参数标记为静态来解决此问题：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Shape depends on Traced Value
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 形状依赖于跟踪的值
- en: 'Such an error may also arise when a shape in your JIT-compiled computation
    depends on the values within a traced quantity. For example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JIT 编译的计算中，如果形状依赖于跟踪数量中的值时，也可能出现此类错误。例如：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is an example of an operation that is incompatible with JAX’s JIT compilation
    model, which requires array sizes to be known at compile-time. Here the size of
    the returned array depends on the contents of x, and such code cannot be JIT compiled.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与 JAX JIT 编译模型不兼容的操作示例，该模型要求在编译时知道数组大小。这里返回的数组大小取决于 x 的内容，这样的代码不能 JIT 编译。
- en: 'In many cases it is possible to work around this by modifying the logic used
    in the function; for example here is code with a similar issue:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，可以通过修改函数中使用的逻辑来解决此问题；例如，这里是一个类似问题的代码：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And here is how you might express the same operation in a way that avoids creation
    of a dynamically-sized index array:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何以避免创建动态大小索引数组的方式表达相同操作的示例：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To understand more subtleties having to do with tracers vs. regular values,
    and concrete vs. abstract values, you may want to read Different kinds of JAX
    values.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解与跟踪器与常规值，具体与抽象值相关的更多细微差别，可以阅读有关不同类型的 JAX 值的内容。
- en: 'Parameters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**tracer** (*core.Tracer*)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追踪器** (*core.Tracer*)'
- en: '**context** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.12 中)"))'
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This error occurs when a PRNG key is reused in an unsafe manner. Key reuse is
    checked only when jax_debug_key_reuse is set to True.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PRNG 密钥以不安全的方式重复使用时，会发生此错误。仅在设置 `jax_debug_key_reuse` 为 True 时检查密钥重复使用。
- en: 'Here is a simple example of code that would lead to such an error:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是导致此类错误的代码简单示例：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This sort of key reuse is problematic because the JAX PRNG is stateless, and
    keys must be manually split; For more information on this see [Sharp Bits: Random
    Numbers](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#random-numbers).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '此类密钥重用存在问题，因为 JAX PRNG 是无状态的，必须手动分割密钥；有关更多信息，请参见 [Sharp Bits: Random Numbers](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#random-numbers)。'
- en: 'Parameters:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**message** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**消息** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.12 中)"))'
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This error occurs when a program attempts to use non-concrete boolean indices
    in a traced indexing operation. Under JIT compilation, JAX arrays must have static
    shapes (i.e. shapes that are known at compile-time) and so boolean masks must
    be used carefully. Some logic implemented via boolean masking is simply not possible
    in a `jax.jit()` function; in other cases, the logic can be re-expressed in a
    JIT-compatible way, often using the three-argument version of `where()`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序尝试在跟踪索引操作中使用非具体布尔索引时，会发生此错误。在 JIT 编译下，JAX 数组必须具有静态形状（即在编译时已知的形状），因此布尔掩码必须小心使用。某些逻辑通过布尔掩码实现可能在
    `jax.jit()` 函数中根本不可能；在其他情况下，可以使用 `where()` 的三参数版本以 JIT 兼容的方式重新表达逻辑。
- en: Following are a few examples of when this error might arise.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能导致此错误的几个示例。
- en: Constructing arrays via boolean masking
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过布尔掩码构建数组
- en: 'This most commonly arises when attempting to create an array via a boolean
    mask within a JIT context. For example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试在 JIT 上下文中通过布尔遮罩创建数组时最常见出现此错误。例如：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This function is attempting to return only the positive values in the input
    array; the size of this returned array cannot be determined at compile-time unless
    x is marked as static, and so operations like this cannot be performed under JIT
    compilation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数试图仅返回输入数组中的正值；除非将 x 标记为静态，否则在编译时无法确定返回数组的大小，因此无法在 JIT 编译下执行此类操作。
- en: Reexpressible Boolean Logic
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可重新表达的布尔逻辑
- en: 'Although creating dynamically sized arrays is not supported directly, in many
    cases it is possible to re-express the logic of the computation in terms of a
    JIT-compatible operation. For example, here is another function that fails under
    JIT for the same reason:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不直接支持创建动态大小的数组，但在许多情况下可以重新表达计算逻辑以符合 JIT 兼容的操作。例如，以下是另一个因相同原因在 JIT 下失败的函数：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this case, however, the problematic array is only an intermediate value,
    and we can instead express the same logic in terms of the JIT-compatible three-argument
    version of `jax.numpy.where()`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种情况下，有问题的数组仅是一个中间值，我们可以使用支持 JIT 的三参数版本的 `jax.numpy.where()` 表达相同的逻辑：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This pattern of replacing boolean masking with three-argument `where()` is a
    common solution to this sort of problem.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将布尔遮罩替换为带有三个参数的 `where()` 的模式是解决这类问题的常见方法。
- en: Boolean indexing into JAX arrays
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对 JAX 数组进行布尔索引
- en: 'The other situation where this error often arises is when using boolean indices,
    such as with `.at[...].set(...)`. Here is a simple example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个经常出现此错误的情况是使用布尔索引，例如 `.at[...].set(...)`。以下是一个简单的示例：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This function is attempting to set values smaller than zero to a scalar fill
    value. As above, this can be addressed by re-expressing the logic in terms of
    `where()`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数试图将小于零的值设置为标量填充值。与上述类似，可以通过在 `where()` 中重新表达逻辑来解决此问题：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Parameters:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**tracer** (*core.Tracer*)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**tracer** (*core.Tracer*)'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This error occurs when a program attempts to convert a JAX Tracer object into
    a standard NumPy array (see Different kinds of JAX values for more on what a Tracer
    is). It typically occurs in one of a few situations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序尝试将 JAX 追踪对象转换为标准的 NumPy 数组时会发生此错误（详见不同类型的 JAX 值，了解追踪器的更多信息）。通常情况下会发生在几种情况之一。
- en: Using non-JAX functions in JAX transformations
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JAX 变换中使用非 JAX 函数
- en: 'This error can occur if you attempt to use a non-JAX library like `numpy` or
    `scipy` inside a JAX transformation (`jit()`, `grad()`, `jax.vmap()`, etc.). For
    example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试在 JAX 变换（`jit()`、`grad()`、`jax.vmap()` 等）内部使用非 JAX 库如 `numpy` 或 `scipy`，则可能会导致此错误。例如：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this case, you can fix the issue by using `jax.numpy.sin()` in place of
    `numpy.sin()`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以通过使用 `jax.numpy.sin()` 替换 `numpy.sin()` 来解决问题：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See also [External Callbacks](https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html)
    for options for calling back to host-side computations from transformed JAX code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [External Callbacks](https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html)
    了解从转换的 JAX 代码返回到主机端计算的选项。
- en: Indexing a numpy array with a tracer
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用追踪器索引 numpy 数组
- en: 'If this error arises on a line that involves array indexing, it may be that
    the array being indexed `x` is a standard numpy.ndarray while the indices `idx`
    are traced JAX arrays. For example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此错误出现在涉及数组索引的行上，则可能是被索引的数组 `x` 是标准的 numpy.ndarray，而索引 `idx` 是追踪的 JAX 数组。例如：
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Depending on the context, you may fix this by converting the numpy array into
    a JAX array:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上下文，你可以通过将 numpy 数组转换为 JAX 数组来解决此问题：
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'or by declaring the index as a static argument:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 或者通过将索引声明为静态参数：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To understand more subtleties having to do with tracers vs. regular values,
    and concrete vs. abstract values, you may want to read Different kinds of JAX
    values.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解关于追踪器与常规值、具体值与抽象值的更多微妙之处，可以阅读有关不同类型的 JAX 值。
- en: 'Parameters:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**tracer** (*core.Tracer*)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**tracer** (*core.Tracer*)'
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This error occurs when a traced value in JAX is used in a context where a boolean
    value is expected (see Different kinds of JAX values for more on what a Tracer
    is).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当在期望布尔值的上下文中使用 JAX 中的追踪值时会出现此错误（详见不同类型的 JAX 值，了解追踪器的更多信息）。
- en: The boolean cast may be an explicit (e.g. `bool(x)`) or implicit, through use
    of control flow (e.g. `if x > 0` or `while x`), use of Python boolean operators
    (e.g. `z = x and y`, `z = x or y`, `z = not x`) or functions that use them (e.g.
    `z = max(x, y)`, `z = min(x, y)` etc.).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔转换可以是显式的（例如`bool(x)`）或隐式的，通过控制流的使用（例如`if x > 0`或`while x`）、使用Python布尔运算符（例如`z
    = x and y`、`z = x or y`、`z = not x`）或使用它们的函数（例如`z = max(x, y)`、`z = min(x, y)`等）。
- en: In some situations, this problem can be easily fixed by marking traced values
    as static; in others, it may indicate that your program is doing operations that
    are not directly supported by JAX’s JIT compilation model.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，通过将跟踪值标记为静态，可以轻松解决此问题；在其他情况下，这可能表明您的程序正在执行JAX JIT编译模型不直接支持的操作。
- en: 'Examples:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: Traced value used in control flow
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制流中使用跟踪值
- en: 'One case where this often arises is when a traced value is used in Python control
    flow. For example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个经常出现这种情况的案例是，当跟踪值用于 Python 控制流时。例如：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We could mark both inputs `x` and `y` as static, but that would defeat the
    purpose of using `jax.jit()` here. Another option is to re-express the if statement
    in terms of the three-term `jax.numpy.where()`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将输入的`x`和`y`都标记为静态，但这样做将破坏在这里使用`jax.jit()`的目的。另一个选择是将if语句重新表达为三项`jax.numpy.where()`：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For more complicated control flow including loops, see Control flow operators.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包括循环在内的更复杂的控制流，请参阅控制流运算符。
- en: Control flow on traced values
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪值在控制流中的使用
- en: 'Another common cause of this error is if you inadvertently trace over a boolean
    flag. For example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的错误原因是，如果您无意中在布尔标志上进行跟踪。例如：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here because the flag `normalize` is traced, it cannot be used in Python control
    flow. In this situation, the best solution is probably to mark this value as static:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，因为标志`normalize`被跟踪，所以不能在Python控制流中使用它。在这种情况下，最好的解决方案可能是将此值标记为静态：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: For more on `static_argnums`, see the documentation of `jax.jit()`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`static_argnums`的更多信息，请参阅`jax.jit()`的文档。
- en: Using non-JAX aware functions
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非 JAX 感知的函数
- en: 'Another common cause of this error is using non-JAX aware functions within
    JAX code. For example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的错误原因是在 JAX 代码中使用非 JAX 感知的函数。例如：
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In this case, the error occurs because Python’s built-in `min` function is
    not compatible with JAX transforms. This can be fixed by replacing it with `jnp.minumum`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，错误是因为 Python 的内置`min`函数与 JAX 变换不兼容。可以通过将其替换为`jnp.minimum`来修复这个问题：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: To understand more subtleties having to do with tracers vs. regular values,
    and concrete vs. abstract values, you may want to read Different kinds of JAX
    values.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要更深入了解关于跟踪器与常规值、具体值与抽象值之间的微妙差别，您可能需要阅读关于不同类型 JAX 值的文档。
- en: 'Parameters:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**tracer** (*core.Tracer*)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**tracer**（*core.Tracer*）'
- en: '[PRE30]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This error can occur when a JAX Tracer object is used in a context where a Python
    integer is expected (see Different kinds of JAX values for more on what a Tracer
    is). It typically occurs in a few situations.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在期望Python整数的上下文中使用JAX Tracer对象，则可能会出现此错误（有关Tracer是什么的更多信息，请参阅关于不同类型JAX值的内容）。它通常发生在几种情况下。
- en: Passing a tracer in place of an integer
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将跟踪器放在整数位置
- en: 'This error can occur if you attempt to pass a traced value to a function that
    requires a static integer argument; for example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您试图将跟踪值传递给需要静态整数参数的函数，则可能会出现此错误；例如：
- en: '[PRE31]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When this happens, the solution is often to mark the problematic argument as
    static:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现这种情况时，解决方案通常是将有问题的参数标记为静态：
- en: '[PRE32]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'An alternative is to apply the transformation to a closure that encapsulates
    the arguments to be protected, either manually as below or by using [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial
    "(in Python v3.12)"):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是将转换应用于封装要保护参数的闭包，可以手动执行如下或使用[`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial
    "（在 Python v3.12 中）")：
- en: '[PRE33]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Note a new closure is created at every invocation, which defeats the compilation
    caching mechanism, which is why static_argnums is preferred.**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**请注意，每次调用都会创建一个新的闭包，这会破坏编译缓存机制，这也是为什么首选`static_argnums`的原因。**'
- en: Indexing a list with a Tracer
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用跟踪器索引列表
- en: 'This error can occur if you attempt to index a Python list with a traced quantity.
    For example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试使用跟踪的量索引Python列表，则可能会出现此错误。例如：
- en: '[PRE34]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Depending on the context, you can generally fix this either by converting the
    list to a JAX array:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上下文，通常可以通过将列表转换为JAX数组来解决此问题：
- en: '[PRE35]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'or by declaring the index as a static argument:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 或者通过将索引声明为静态参数来声明：
- en: '[PRE36]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: To understand more subtleties having to do with tracers vs. regular values,
    and concrete vs. abstract values, you may want to read Different kinds of JAX
    values.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要更深入理解跟踪器与常规值以及具体与抽象值之间的微妙差别，您可以阅读有关不同类型JAX值的文档。
- en: 'Parameters:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**tracer** (*core.Tracer*)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**tracer**（*core.Tracer*）'
- en: '[PRE37]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This error occurs when you use a JAX value that has leaked out of a function.
    What does it mean to leak a value? If you use a JAX transformation on a function
    `f` that stores, in some scope outside of `f`, a reference to an intermediate
    value, that value is considered to have been leaked. Leaking values is a side
    effect. (Read more about avoiding side effects in [Pure Functions](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#pure-functions))
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用从函数中泄漏出来的JAX值时，会出现此错误。泄漏值是什么意思？如果您对函数`f`应用JAX转换，并在`f`外某个作用域存储了一个中间值的引用，那么该值被视为已泄漏。泄漏值是副作用。（阅读更多关于避免副作用的内容，请参阅[Pure
    Functions](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#pure-functions)）
- en: 'JAX detects leaks when you then use the leaked value in another operation later
    on, at which point it raises an `UnexpectedTracerError`. To fix this, avoid side
    effects: if a function computes a value needed in an outer scope, return that
    value from the transformed function explicitly.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: JAX在你稍后在另一个操作中使用泄露的值时检测到泄漏，此时会引发`UnexpectedTracerError`。要修复此问题，请避免副作用：如果一个函数计算了外部作用域需要的值，则需要明确从转换后的函数中返回该值。
- en: Specifically, a `Tracer` is JAX’s internal representation of a function’s intermediate
    values during transformations, e.g. within `jit()`, `pmap()`, `vmap()`, etc. Encountering
    a `Tracer` outside of a transformation implies a leak.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，`Tracer`是JAX在转换期间函数中间值的内部表示，例如在`jit()`、`pmap()`、`vmap()`等内部。在转换之外遇到`Tracer`表示泄漏。
- en: Life-cycle of a leaked value
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 泄漏值的生命周期
- en: 'Consider the following example of a transformed function which leaks a value
    to an outer scope:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下转换函数的示例，它将一个值泄漏到外部作用域：
- en: '[PRE38]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this example we leak a Traced value from an inner transformed scope to an
    outer scope. We get an `UnexpectedTracerError` when the leaked value is used,
    not when the value is leaked.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们从内部转换作用域泄漏了一个跟踪值到外部作用域。当使用泄漏值而不是泄漏值时，会出现`UnexpectedTracerError`。
- en: 'This example also demonstrates the life-cycle of a leaked value:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例还展示了泄漏值的生命周期：
- en: A function is transformed (in this case, by `jit()`)
  id: totrans-125
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数被转换了（在本例中，通过`jit()`）。
- en: ''
  id: totrans-126
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-127
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The transformed function is called (initiating an abstract trace of the function
    and turning `x` into a `Tracer`)
  id: totrans-128
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用了转换后的函数（启动函数的抽象跟踪，并将`x`转换为`Tracer`）。
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-130
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The intermediate value `y`, which will later be leaked, is created (an intermediate
    value of a traced function is also a `Tracer`)
  id: totrans-131
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 中间值`y`被创建，稍后将被泄漏（跟踪函数的中间值也是`Tracer`）。
- en: ''
  id: totrans-132
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The value is leaked (appended to a list in an outer scope, escaping the function
    through a side-channel)
  id: totrans-134
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该值已泄漏（通过外部作用域的一个侧通道将其追加到列表中逃逸函数）
- en: ''
  id: totrans-135
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-136
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The leaked value is used, and an UnexpectedTracerError is raised.
  id: totrans-137
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用了泄漏的值，并引发了UnexpectedTracerError。
- en: 'The UnexpectedTracerError message tries to point to these locations in your
    code by including information about each stage. Respectively:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: UnexpectedTracerError消息试图通过包含有关每个阶段信息的方法来指出代码中的这些位置。依次：
- en: The name of the transformed function (`side_effecting`) and which transform
    kicked off the trace `jit()`).
  id: totrans-139
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换后函数的名称（`side_effecting`）以及触发跟踪的转换名称`jit()`）。
- en: ''
  id: totrans-140
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-141
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A reconstructed stack trace of where the leaked Tracer was created, which includes
    where the transformed function was called. (`When the Tracer was created, the
    final 5 stack frames were...`).
  id: totrans-142
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 泄漏的Tracer创建时的重构堆栈跟踪，包括调用转换后函数的位置。（`When the Tracer was created, the final 5
    stack frames were...`）。
- en: ''
  id: totrans-143
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-144
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: From the reconstructed stack trace, the line of code that created the leaked
    Tracer.
  id: totrans-145
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从重构的堆栈跟踪中，创建泄漏Tracer的代码行。
- en: ''
  id: totrans-146
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-147
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The leak location is not included in the error message because it is difficult
    to pin down! JAX can only tell you what the leaked value looks like (what shape
    it has and where it was created) and what boundary it was leaked over (the name
    of the transformation and the name of the transformed function).
  id: totrans-148
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误消息中不包括泄漏位置，因为难以确定！JAX只能告诉你泄漏值的外观（其形状和创建位置）以及泄漏的边界（变换的名称和转换后函数的名称）。
- en: ''
  id: totrans-149
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-150
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The current error’s stack trace points to where the value is used.
  id: totrans-151
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前错误的堆栈跟踪指向值的使用位置。
- en: 'The error can be fixed by the returning the value out of the transformed function:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将值从转换函数返回来修复错误：
- en: '[PRE39]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Leak checker
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 泄漏检查器
- en: As discussed in point 2 and 3 above, JAX shows a reconstructed stack trace which
    points to where the leaked value was created. This is because JAX only raises
    an error when the leaked value is used, not when the value is leaked. This is
    not the most useful place to raise this error, because you need to know the location
    where the Tracer was leaked to fix the error.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如上述第2和第3点所讨论的那样，JAX显示了一个重建的堆栈跟踪，指出了泄露值的创建位置。这是因为JAX仅在使用泄露值时才会引发错误，而不是在值泄漏时。这不是引发此错误的最有用的地方，因为您需要知道泄露跟踪器的位置来修复错误。
- en: To make this location easier to track down, you can use the leak checker. When
    the leak checker is enabled, an error is raised as soon as a `Tracer` is leaked.
    (To be more exact, it will raise an error when the transformed function from which
    the `Tracer` is leaked returns)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易跟踪此位置，您可以使用泄漏检查器。当启用泄漏检查器时，一旦泄露了`Tracer`，就会引发错误。（更确切地说，在从中泄漏`Tracer`的转换函数返回时会引发错误）
- en: To enable the leak checker you can use the `JAX_CHECK_TRACER_LEAKS` environment
    variable or the `with jax.checking_leaks()` context manager.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用泄漏检查器，可以使用`JAX_CHECK_TRACER_LEAKS`环境变量或`with jax.checking_leaks()`上下文管理器。
- en: Note
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this tool is experimental and may report false positives. It works
    by disabling some JAX caches, so it will have a negative effect on performance
    and should only be used when debugging.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此工具属于实验性质，可能会报告错误的情况。它通过禁用某些JAX缓存工作，因此会对性能产生负面影响，应仅在调试时使用。
- en: 'Example usage:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE40]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Parameters:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**msg** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)"))'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**msg** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12中)"))'
