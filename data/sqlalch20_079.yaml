- en: Operator Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符参考
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/operators.html](https://docs.sqlalchemy.org/en/20/core/operators.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/operators.html](https://docs.sqlalchemy.org/en/20/core/operators.html)
- en: This section details usage of the operators that are available to construct
    SQL expressions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了用于构建 SQL 表达式的运算符的用法。
- en: 'These methods are presented in terms of the [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators") and [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") base classes. The methods are then
    available on descendants of these classes, including:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法按照 [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    和 [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 基类的方式呈现。然后这些方法可用于这些类的后代，包括：
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象'
- en: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    objects more generally, which are the root of all Core SQL Expression language
    column-level expressions'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    对象更一般地，这些对象是所有 Core SQL 表达式语言列级表达式的根'
- en: '[`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") objects, which are ORM level mapped attributes.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 对象，这些对象是 ORM 级别的映射属性。'
- en: 'The operators are first introduced in the tutorial sections, including:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符首先在教程部分中介绍，包括：
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html) - unified tutorial in
    [2.0 style](../glossary.html#term-2.0-style)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 统一教程](../tutorial/index.html) - 以 [2.0 风格](../glossary.html#term-2.0-style)
    呈现的统一教程'
- en: '[Object Relational Tutorial](../orm/tutorial.html) - ORM tutorial in [1.x style](../glossary.html#term-1.x-style)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对象关系教程](../orm/tutorial.html) - ORM 教程以 [1.x 风格](../glossary.html#term-1.x-style)
    呈现'
- en: '[SQL Expression Language Tutorial](tutorial.html) - Core tutorial in [1.x style](../glossary.html#term-1.x-style)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL 表达式语言教程](tutorial.html) - 以 [1.x 风格](../glossary.html#term-1.x-style)
    呈现的核心教程'
- en: Comparison Operators
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较运算符
- en: 'Basic comparisons which apply to many datatypes, including numerics, strings,
    dates, and many others:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基本比较，适用于许多数据类型，包括数值、字符串、日期等：
- en: '[`ColumnOperators.__eq__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__eq__
    "sqlalchemy.sql.expression.ColumnOperators.__eq__") (Python “`==`” operator):'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__eq__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__eq__
    "sqlalchemy.sql.expression.ColumnOperators.__eq__") （Python “`==`” 运算符）：'
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`ColumnOperators.__ne__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__ne__
    "sqlalchemy.sql.expression.ColumnOperators.__ne__") (Python “`!=`” operator):'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__ne__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__ne__
    "sqlalchemy.sql.expression.ColumnOperators.__ne__") （Python “`!=`” 运算符）：'
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`ColumnOperators.__gt__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__gt__
    "sqlalchemy.sql.expression.ColumnOperators.__gt__") (Python “`>`” operator):'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__gt__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__gt__
    "sqlalchemy.sql.expression.ColumnOperators.__gt__") （Python “`>`” 运算符）：'
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`ColumnOperators.__lt__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__lt__
    "sqlalchemy.sql.expression.ColumnOperators.__lt__") (Python “`<`” operator):'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__lt__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__lt__
    "sqlalchemy.sql.expression.ColumnOperators.__lt__") （Python “`<`” 运算符）：'
- en: '[PRE3]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[`ColumnOperators.__ge__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__ge__
    "sqlalchemy.sql.expression.ColumnOperators.__ge__") (Python “`>=`” operator):'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__ge__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__ge__
    "sqlalchemy.sql.expression.ColumnOperators.__ge__") （Python “`>=`” 运算符）：'
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[`ColumnOperators.__le__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__le__
    "sqlalchemy.sql.expression.ColumnOperators.__le__") (Python “`<=`” operator):'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__le__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__le__
    "sqlalchemy.sql.expression.ColumnOperators.__le__") （Python “`<=`” 运算符）：'
- en: '[PRE5]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between"):'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between")：'
- en: '[PRE6]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: IN Comparisons
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IN 比较
- en: The SQL IN operator is a subject all its own in SQLAlchemy. As the IN operator
    is usually used against a list of fixed values, SQLAlchemy’s feature of bound
    parameter coercion makes use of a special form of SQL compilation that renders
    an interim SQL string for compilation that’s formed into the final list of bound
    parameters in a second step. In other words, “it just works”.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SQL IN 运算符是 SQLAlchemy 中的一个主题。 由于 IN 运算符通常针对一组固定值使用，因此 SQLAlchemy 的绑定参数 coercion
    功能利用了特殊形式的 SQL 编译，将中间 SQL 字符串渲染为最终绑定参数列表，然后在第二步形成。 换句话说，“它只是工作”。
- en: IN against a list of values
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对一组值的 IN
- en: 'IN is available most typically by passing a list of values to the [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") method:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常通过将值列表传递给 [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 方法来实现 IN：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The special bound form `__[POSTCOMPILE` is rendered into individual parameters
    at execution time, illustrated below:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的绑定形式`__[POSTCOMPILE` 在执行时被渲染为单独的参数，如下所示：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Empty IN Expressions
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空 IN 表达式
- en: 'SQLAlchemy produces a mathematically valid result for an empty IN expression
    by rendering a backend-specific subquery that returns no rows. Again in other
    words, “it just works”:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 通过渲染一个返回零行的特定于后端的子查询来为空 IN 表达式产生数学上有效的结果。 再换句话说，“它只是工作”：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The “empty set” subquery above generalizes correctly and is also rendered in
    terms of the IN operator which remains in place.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的“空集”子查询正确地进行了概括，并且还以保持不变的 IN 运算符形式呈现。
- en: NOT IN
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NOT IN
- en: '“NOT IN” is available via the [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operator:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “NOT IN”可通过[`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符获得：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is typically more easily available by negating with the `~` operator:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，通过`~`运算符否定更容易实现：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tuple IN Expressions
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组 IN 表达式
- en: 'Comparison of tuples to tuples is common with IN, as among other use cases
    accommodates for the case when matching rows to a set of potential composite primary
    key values. The [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct provides the basic building block
    for tuple comparisons. The `Tuple.in_()` operator then receives a list of tuples:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IN 与元组进行元组比较是常见的，因为在其他用例中，它可以适应将行匹配到一组潜在的复合主键值的情况。 [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") 构造提供了元组比较的基本构建块。 `Tuple.in_()` 运算符然后接收元组列表：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To illustrate the parameters rendered:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明渲染的参数：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Subquery IN
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子查询 IN
- en: 'Finally, the [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators work with subqueries.
    The form provides that a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct is passed in directly, without any
    explicit conversion to a named subquery:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符与子查询一起使用。 这种形式提供了直接传递 [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造的方法，无需任何显式转换为命名子查询：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Tuples work as expected:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 元组按预期工作：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Identity Comparisons
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份比较
- en: 'These operators involve testing for special SQL values such as `NULL`, boolean
    constants such as `true` or `false` which some databases support:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运算符涉及测试特殊的 SQL 值，如`NULL`，一些数据库支持的布尔常量，如`true`或`false`：
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_"):'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")：'
- en: 'This operator will provide exactly the SQL for “x IS y”, most often seen as
    “<expr> IS NULL”. The `NULL` constant is most easily acquired using regular Python
    `None`:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此运算符将为“x IS y”提供确切的 SQL，最常见的是“<expr> IS NULL”。 使用常规 Python `None` 最容易获得`NULL`
    常量：
- en: '[PRE16]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'SQL NULL is also explicitly available, if needed, using the [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，SQL NULL 也可以显式使用[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 构造：
- en: '[PRE17]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") operator is automatically invoked
    when using the [`ColumnOperators.__eq__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__eq__
    "sqlalchemy.sql.expression.ColumnOperators.__eq__") overloaded operator, i.e.
    `==`, in conjunction with the `None` or [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") value. In this way, there’s typically not a
    need to use [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") explicitly, particularly when
    used with a dynamic value:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`ColumnOperators.__eq__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__eq__
    "sqlalchemy.sql.expression.ColumnOperators.__eq__")重载运算符，即`==`，与`None`或[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")值一起使用时，[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")运算符会自动调用。因此，通常不需要显式使用[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")，特别是在与动态值一起使用时：
- en: '[PRE18]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that the Python `is` operator is **not overloaded**. Even though Python
    provides hooks to overload operators such as `==` and `!=`, it does **not** provide
    any way to redefine `is`.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，Python的`is`运算符**没有被重载**。尽管Python提供了重载运算符如`==`和`!=`的钩子，但它**没有**提供任何重新定义`is`的方法。
- en: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not"):'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")：'
- en: 'Similar to [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_"), produces “IS NOT”:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似于[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")，生成“IS NOT”：
- en: '[PRE19]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Is similarly equivalent to `!= None`:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等同于`!= None`：
- en: '[PRE20]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from"):'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from")：'
- en: 'Produces SQL IS DISTINCT FROM:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成SQL IS DISTINCT FROM：
- en: '[PRE21]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from"):'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from")：'
- en: 'Produces SQL IS NOT DISTINCT FROM:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成SQL IS NOT DISTINCT FROM：
- en: '[PRE22]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: String Comparisons
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串比较：
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"):'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")：'
- en: '[PRE23]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"):'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")：'
- en: 'Case insensitive LIKE makes use of the SQL `lower()` function on a generic
    backend. On the PostgreSQL backend it will use `ILIKE`:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大小写不敏感的LIKE使用通用后端上的SQL `lower()`函数。在PostgreSQL后端上，它将使用`ILIKE`：
- en: '[PRE24]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike"):'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike")：'
- en: '[PRE25]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike"):'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike")：'
- en: '[PRE26]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: String Containment
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串包含：
- en: 'String containment operators are basically built as a combination of LIKE and
    the string concatenation operator, which is `||` on most backends or sometimes
    a function like `concat()`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串包含运算符基本上是由LIKE和字符串连接运算符组合而成，大多数后端使用`||`，有时候也会使用像`concat()`这样的函数：
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")：'
- en: '[PRE27]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")：'
- en: '[PRE28]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")：'
- en: '[PRE29]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: String matching
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串匹配
- en: 'Matching operators are always backend-specific and may provide different behaviors
    and results on different databases:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配运算符始终是特定于后端的，并且在不同数据库上可能提供不同的行为和结果：
- en: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match"):'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match")：'
- en: 'This is a dialect-specific operator that makes use of the MATCH feature of
    the underlying database, if available:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一种方言特定的运算符，如果底层数据库支持 MATCH 功能，则使用它：
- en: '[PRE30]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match"):'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")：'
- en: 'This operator is dialect specific. We can illustrate it in terms of for example
    the PostgreSQL dialect:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此运算符是方言特定的。我们可以用 PostgreSQL 方言举例说明：
- en: '[PRE31]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or MySQL:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或 MySQL：
- en: '[PRE32]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '## String Alteration'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '## 字符串改动'
- en: '[`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat"):'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat")：'
- en: 'String concatenation:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串连接：
- en: '[PRE33]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This operator is available via [`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__"), that is, the Python `+`
    operator, when working with a column expression that derives from [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"):'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此运算符通过 [`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__") 可用，即，当使用从 [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") 派生的列表达式时，Python `+` 运算符：
- en: '[PRE34]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The operator will produce the appropriate database-specific construct, such
    as on MySQL it’s historically been the `concat()` SQL function:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此运算符将产生适当的特定于数据库的构造，例如在 MySQL 上，它历来是 `concat()` SQL 函数：
- en: '[PRE35]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace"):'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")：'
- en: 'Complementary to `ColumnOperators.regexp()` this produces REGEXP REPLACE equivalent
    for the backends which support it:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 `ColumnOperators.regexp()` 互补，这产生了支持它的后端的 REGEXP REPLACE 等效项：
- en: '[PRE36]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate"):'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate")：'
- en: 'Produces the COLLATE SQL operator which provides for specific collations at
    expression time:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生 COLLATE SQL 运算符，为表达式提供特定的排序规则：
- en: '[PRE37]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To use COLLATE against a literal value, use the [`literal()`](sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") construct:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要对字面值使用 COLLATE，使用 [`literal()`](sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") 构造：
- en: '[PRE38]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Arithmetic Operators
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算符
- en: '[`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__"), [`ColumnOperators.__radd__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__radd__
    "sqlalchemy.sql.expression.ColumnOperators.__radd__") (Python “`+`” operator):'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__")，[`ColumnOperators.__radd__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__radd__
    "sqlalchemy.sql.expression.ColumnOperators.__radd__")（Python “`+`” 运算符）：'
- en: '[PRE39]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note that when the datatype of the expression is [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") or similar, the [`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__") operator instead produces
    [string concatenation](#queryguide-operators-concat-op).
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，当表达式的数据类型是 [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    或类似类型时，[`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__") 运算符会产生 [字符串连接](#queryguide-operators-concat-op)：
- en: '[`ColumnOperators.__sub__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__sub__
    "sqlalchemy.sql.expression.ColumnOperators.__sub__"), [`ColumnOperators.__rsub__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rsub__
    "sqlalchemy.sql.expression.ColumnOperators.__rsub__") (Python “`-`” operator):'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__sub__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__sub__
    "sqlalchemy.sql.expression.ColumnOperators.__sub__"), [`ColumnOperators.__rsub__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rsub__
    "sqlalchemy.sql.expression.ColumnOperators.__rsub__") （Python “`-`” 运算符）：'
- en: '[PRE40]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[`ColumnOperators.__mul__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__mul__
    "sqlalchemy.sql.expression.ColumnOperators.__mul__"), [`ColumnOperators.__rmul__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rmul__
    "sqlalchemy.sql.expression.ColumnOperators.__rmul__") (Python “`*`” operator):'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__mul__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__mul__
    "sqlalchemy.sql.expression.ColumnOperators.__mul__"), [`ColumnOperators.__rmul__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rmul__
    "sqlalchemy.sql.expression.ColumnOperators.__rmul__") （Python “`*`” 运算符）：'
- en: '[PRE41]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[`ColumnOperators.__truediv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__truediv__
    "sqlalchemy.sql.expression.ColumnOperators.__truediv__"), [`ColumnOperators.__rtruediv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rtruediv__
    "sqlalchemy.sql.expression.ColumnOperators.__rtruediv__") (Python “`/`” operator).
    This is the Python `truediv` operator, which will ensure integer true division
    occurs:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__truediv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__truediv__
    "sqlalchemy.sql.expression.ColumnOperators.__truediv__"), [`ColumnOperators.__rtruediv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rtruediv__
    "sqlalchemy.sql.expression.ColumnOperators.__rtruediv__") （Python “`/`” 运算符）。这是
    Python 的 `truediv` 运算符，它将确保进行整数真除法：'
- en: '[PRE42]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Changed in version 2.0: The Python `/` operator now ensures integer true division
    takes place'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0 起更改：Python 的 `/` 运算符现在确保进行整数真除法。
- en: '[`ColumnOperators.__floordiv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__floordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__floordiv__"), [`ColumnOperators.__rfloordiv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__") (Python “`//`” operator).
    This is the Python `floordiv` operator, which will ensure floor division occurs.
    For the default backend as well as backends such as PostgreSQL, the SQL `/` operator
    normally behaves this way for integer values:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__floordiv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__floordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__floordiv__"), [`ColumnOperators.__rfloordiv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__") （Python “`//`” 运算符）。这是
    Python 的 `floordiv` 运算符，它将确保进行地板除法。对于默认后端以及诸如 PostgreSQL 之类的后端，SQL `/` 运算符通常以这种方式处理整数值：'
- en: '[PRE43]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For backends that don’t use floor division by default, or when used with numeric
    values, the FLOOR() function is used to ensure floor division:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于默认不使用地板除法的后端，或者当与数字值一起使用时，使用 FLOOR() 函数以确保地板除法：
- en: '[PRE44]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'New in version 2.0: Support for FLOOR division'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增：支持地板除法
- en: '[`ColumnOperators.__mod__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__mod__
    "sqlalchemy.sql.expression.ColumnOperators.__mod__"), [`ColumnOperators.__rmod__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rmod__
    "sqlalchemy.sql.expression.ColumnOperators.__rmod__") (Python “`%`” operator):'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__mod__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__mod__
    "sqlalchemy.sql.expression.ColumnOperators.__mod__"), [`ColumnOperators.__rmod__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rmod__
    "sqlalchemy.sql.expression.ColumnOperators.__rmod__") （Python “`%`” 运算符）：'
- en: '[PRE45]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '## Bitwise Operators'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '## 位运算符'
- en: Bitwise operator functions provide uniform access to bitwise operators across
    different backends, which are expected to operate on compatible values such as
    integers and bit-strings (e.g. PostgreSQL [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") and similar). Note that these are **not**
    general boolean operators.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 位运算符函数提供了对不同后端的位运算符的统一访问，这些后端预期在兼容值（例如整数和位字符串，如 PostgreSQL [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") 等）上进行操作。请注意，这些**不是**通用布尔运算符。
- en: 'New in version 2.0.2: Added dedicated operators for bitwise operations.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增：添加了专用于位运算的运算符。
- en: '[`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not"), [`bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.bitwise_not
    "sqlalchemy.sql.expression.bitwise_not"). Available as a column-level method,
    producing a bitwise NOT clause against a parent object:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not")，[`bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.bitwise_not
    "sqlalchemy.sql.expression.bitwise_not")。作为一个列级方法可用，针对父对象产生按位 NOT 子句：'
- en: '[PRE46]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This operator is also available as a column-expression-level method, applying
    bitwise NOT to an individual column expression:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个操作符也作为列表达式级方法可用，将按位 NOT 应用于单个列表达式：
- en: '[PRE47]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") produces bitwise AND:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") 产生按位与：'
- en: '[PRE48]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") produces bitwise OR:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") 产生按位或：'
- en: '[PRE49]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") produces bitwise XOR:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") 产生按位异或：'
- en: '[PRE50]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'For PostgreSQL dialects, “#” is used to represent bitwise XOR; this emits automatically
    when using one of these backends:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 PostgreSQL 方言，“#” 被用来表示按位异或；当使用这些后端之一时，它会自动发出：
- en: '[PRE51]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift"), [`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") produce bitwise shift
    operators:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift")，[`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") 产生按位移动操作符：'
- en: '[PRE52]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Using Conjunctions and Negations
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用连接词和否定词
- en: 'The most common conjunction, “AND”, is automatically applied if we make repeated
    use of the [`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") method, as well as similar methods such
    as [`Update.where()`](dml.html#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](dml.html#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where"):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的连接词 “AND”，如果我们重复使用 [`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") 方法，以及类似的方法如 [`Update.where()`](dml.html#sqlalchemy.sql.expression.Update.where
    "sqlalchemy.sql.expression.Update.where") 和 [`Delete.where()`](dml.html#sqlalchemy.sql.expression.Delete.where
    "sqlalchemy.sql.expression.Delete.where")，则会自动应用：
- en: '[PRE53]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where "sqlalchemy.sql.expression.Select.where"),
    [`Update.where()`](dml.html#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](dml.html#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    also accept multiple expressions with the same effect:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where "sqlalchemy.sql.expression.Select.where")，[`Update.where()`](dml.html#sqlalchemy.sql.expression.Update.where
    "sqlalchemy.sql.expression.Update.where") 和 [`Delete.where()`](dml.html#sqlalchemy.sql.expression.Delete.where
    "sqlalchemy.sql.expression.Delete.where") 也接受具有相同效果的多个表达式：'
- en: '[PRE54]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The “AND” conjunction, as well as its partner “OR”, are both available directly
    using the [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    and [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    functions:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: “AND” 连接词以及其伴侣 “OR”，都可以直接使用 [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 和 [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") 函数获得：
- en: '[PRE55]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'A negation is available using the [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") function. This will typically invert the operator
    in a boolean expression:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")
    函数可得到否定。这通常会反转布尔表达式中的操作符：
- en: '[PRE56]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'It also may apply a keyword such as `NOT` when appropriate:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当适用时，也可以应用关键词如 `NOT`：
- en: '[PRE57]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Conjunction Operators
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑与运算符
- en: 'The above conjunction functions [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_"), [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_"), [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") are also available as overloaded Python operators:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 上述逻辑连接函数[`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_"),
    [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_"),
    [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")
    也可以作为Python运算符进行重载：
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Python `&`, `|` and `~` operators take high precedence in the language;
    as a result, parenthesis must usually be applied for operands that themselves
    contain expressions, as indicated in the examples below.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的`&`、`|`和`~`运算符在语言中具有高优先级；因此，通常必须为包含表达式的操作数应用括号，如下面的示例所示。
- en: '[`Operators.__and__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__") (Python “`&`” operator):'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Operators.__and__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__") (Python “`&`” operator):'
- en: 'The Python binary `&` operator is overloaded to behave the same as [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") (note parenthesis around the two operands):'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python二进制`&`运算符被重载，以与[`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 相同（请注意两个操作数周围的括号）：
- en: '[PRE58]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[`Operators.__or__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") (Python “`|`” operator):'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Operators.__or__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") (Python “`|`” operator):'
- en: 'The Python binary `|` operator is overloaded to behave the same as [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") (note parenthesis around the two operands):'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python二进制`|`运算符被重载，以与[`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") 相同（请注意两个操作数周围的括号）：
- en: '[PRE59]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[`Operators.__invert__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") (Python “`~`” operator):'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Operators.__invert__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") (Python “`~`” operator):'
- en: 'The Python binary `~` operator is overloaded to behave the same as [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_"), either inverting the existing operator, or
    applying the `NOT` keyword to the expression as a whole:'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python二进制`~`运算符被重载，以与[`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") 相同，可以反转现有运算符，或将`NOT`关键字应用于整个表达式：
- en: '[PRE60]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Comparison Operators
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较运算符
- en: 'Basic comparisons which apply to many datatypes, including numerics, strings,
    dates, and many others:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 基本比较适用于许多数据类型，包括数字、字符串、日期等：
- en: '[`ColumnOperators.__eq__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__eq__
    "sqlalchemy.sql.expression.ColumnOperators.__eq__") (Python “`==`” operator):'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__eq__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__eq__
    "sqlalchemy.sql.expression.ColumnOperators.__eq__") (Python “`==`” operator):'
- en: '[PRE61]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[`ColumnOperators.__ne__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__ne__
    "sqlalchemy.sql.expression.ColumnOperators.__ne__") (Python “`!=`” operator):'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__ne__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__ne__
    "sqlalchemy.sql.expression.ColumnOperators.__ne__") (Python “`!=`” operator):'
- en: '[PRE62]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[`ColumnOperators.__gt__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__gt__
    "sqlalchemy.sql.expression.ColumnOperators.__gt__") (Python “`>`” operator):'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__gt__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__gt__
    "sqlalchemy.sql.expression.ColumnOperators.__gt__") (Python “`>`” operator):'
- en: '[PRE63]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[`ColumnOperators.__lt__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__lt__
    "sqlalchemy.sql.expression.ColumnOperators.__lt__") (Python “`<`” operator):'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__lt__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__lt__
    "sqlalchemy.sql.expression.ColumnOperators.__lt__") (Python “`<`” operator):'
- en: '[PRE64]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[`ColumnOperators.__ge__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__ge__
    "sqlalchemy.sql.expression.ColumnOperators.__ge__") (Python “`>=`” operator):'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__ge__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__ge__
    "sqlalchemy.sql.expression.ColumnOperators.__ge__") (Python “`>=`” operator):'
- en: '[PRE65]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[`ColumnOperators.__le__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__le__
    "sqlalchemy.sql.expression.ColumnOperators.__le__") (Python “`<=`” operator):'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__le__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__le__
    "sqlalchemy.sql.expression.ColumnOperators.__le__") (Python “`<=`” operator):'
- en: '[PRE66]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between"):'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between"):'
- en: '[PRE67]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: IN Comparisons
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IN 比较
- en: The SQL IN operator is a subject all its own in SQLAlchemy. As the IN operator
    is usually used against a list of fixed values, SQLAlchemy’s feature of bound
    parameter coercion makes use of a special form of SQL compilation that renders
    an interim SQL string for compilation that’s formed into the final list of bound
    parameters in a second step. In other words, “it just works”.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 的 IN 操作符在 SQLAlchemy 中是一个单独的主题。由于 IN 操作符通常针对一组固定值使用，SQLAlchemy 的绑定参数强制转换特性利用一种特殊形式的
    SQL 编译，在第二步形成最终的绑定参数列表。换句话说，"它就是这样工作"。
- en: IN against a list of values
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对值列表的 IN
- en: 'IN is available most typically by passing a list of values to the [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") method:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将值列表传递给 [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 方法，通常可以使用 IN：
- en: '[PRE68]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The special bound form `__[POSTCOMPILE` is rendered into individual parameters
    at execution time, illustrated below:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的绑定形式 `__[POSTCOMPILE` 在执行时被渲染为单独的参数，如下所示：
- en: '[PRE69]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Empty IN Expressions
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空的 IN 表达式
- en: 'SQLAlchemy produces a mathematically valid result for an empty IN expression
    by rendering a backend-specific subquery that returns no rows. Again in other
    words, “it just works”:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 通过渲染一个特定于后端的子查询返回没有行的有效数学结果，从而为空的 IN 表达式生成一个中间值。换句话说，"它就是这样工作"：
- en: '[PRE70]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The “empty set” subquery above generalizes correctly and is also rendered in
    terms of the IN operator which remains in place.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的“空集合”子查询正确地泛化，并且也是以 IN 操作符的形式呈现的，该操作符保持不变。
- en: NOT IN
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NOT IN
- en: '“NOT IN” is available via the [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operator:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: “NOT IN” 可通过 [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符使用：
- en: '[PRE71]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'This is typically more easily available by negating with the `~` operator:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通常通过使用 `~` 运算符进行否定更容易：
- en: '[PRE72]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Tuple IN Expressions
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组 IN 表达式
- en: 'Comparison of tuples to tuples is common with IN, as among other use cases
    accommodates for the case when matching rows to a set of potential composite primary
    key values. The [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct provides the basic building block
    for tuple comparisons. The `Tuple.in_()` operator then receives a list of tuples:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IN 与元组比较是常见的，除了其他用例外，它适应了将行匹配到一组潜在的复合主键值的情况。[`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") 构造提供了元组比较的基本构建块。然后 `Tuple.in_()` 运算符接收一个元组列表：
- en: '[PRE73]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'To illustrate the parameters rendered:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '为了说明渲染的参数： '
- en: '[PRE74]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Subquery IN
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子查询 IN
- en: 'Finally, the [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators work with subqueries.
    The form provides that a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct is passed in directly, without any
    explicit conversion to a named subquery:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符与子查询一起使用。该形式允许直接传递 [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造，无需明确转换为命名子查询：
- en: '[PRE75]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Tuples work as expected:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 元组按预期工作：
- en: '[PRE76]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: IN against a list of values
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对值列表的 IN
- en: 'IN is available most typically by passing a list of values to the [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") method:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将值列表传递给 [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 方法，通常可以使用 IN：
- en: '[PRE77]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The special bound form `__[POSTCOMPILE` is rendered into individual parameters
    at execution time, illustrated below:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的绑定形式 `__[POSTCOMPILE` 在执行时被渲染为单独的参数，如下所示：
- en: '[PRE78]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Empty IN Expressions
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空的 IN 表达式
- en: 'SQLAlchemy produces a mathematically valid result for an empty IN expression
    by rendering a backend-specific subquery that returns no rows. Again in other
    words, “it just works”:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy通过渲染一个特定于后端的子查询来为空IN表达式生成一个数学上有效的结果，该子查询不返回任何行。换句话说，“它只是有效地工作”：
- en: '[PRE79]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The “empty set” subquery above generalizes correctly and is also rendered in
    terms of the IN operator which remains in place.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 上述“空集”子查询正确地进行了泛化，并且也以IN操作符的形式呈现在原位。
- en: NOT IN
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NOT IN
- en: '“NOT IN” is available via the [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operator:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: “NOT IN” 可通过[`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符获得：
- en: '[PRE80]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'This is typically more easily available by negating with the `~` operator:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通常通过使用`~`操作符进行否定更容易获得：
- en: '[PRE81]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Tuple IN Expressions
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组 IN 表达式
- en: 'Comparison of tuples to tuples is common with IN, as among other use cases
    accommodates for the case when matching rows to a set of potential composite primary
    key values. The [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct provides the basic building block
    for tuple comparisons. The `Tuple.in_()` operator then receives a list of tuples:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IN进行元组与元组的比较很常见，因为除了其他用例外，还适用于将匹配行与一组潜在的复合主键值进行匹配的情况。[`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") 构造提供了元组比较的基本构建块。然后`Tuple.in_()` 操作符接收一个元组列表：
- en: '[PRE82]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'To illustrate the parameters rendered:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染参数的示例：
- en: '[PRE83]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Subquery IN
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子查询 IN
- en: 'Finally, the [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators work with subqueries.
    The form provides that a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct is passed in directly, without any
    explicit conversion to a named subquery:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符与子查询一起使用。该形式提供了直接传入[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造的方式，无需明确转换为命名子查询：
- en: '[PRE84]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Tuples work as expected:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 元组按预期工作：
- en: '[PRE85]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Identity Comparisons
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份比较
- en: 'These operators involve testing for special SQL values such as `NULL`, boolean
    constants such as `true` or `false` which some databases support:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作符涉及测试特殊的SQL值，如`NULL`，一些数据库支持的布尔常量，如`true`或`false`：
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_"):'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_"):'
- en: 'This operator will provide exactly the SQL for “x IS y”, most often seen as
    “<expr> IS NULL”. The `NULL` constant is most easily acquired using regular Python
    `None`:'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该操作符将提供“x IS y”的确切SQL，通常表示为“<expr> IS NULL”。使用常规的Python `None` 最容易获得`NULL` 常量：
- en: '[PRE86]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'SQL NULL is also explicitly available, if needed, using the [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct:'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，SQL NULL 也可以明确使用[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 构造获得：
- en: '[PRE87]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") operator is automatically invoked
    when using the [`ColumnOperators.__eq__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__eq__
    "sqlalchemy.sql.expression.ColumnOperators.__eq__") overloaded operator, i.e.
    `==`, in conjunction with the `None` or [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") value. In this way, there’s typically not a
    need to use [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") explicitly, particularly when
    used with a dynamic value:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`ColumnOperators.__eq__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__eq__
    "sqlalchemy.sql.expression.ColumnOperators.__eq__") 重载的操作符，即`==`，与`None`或[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")值一起使用时，[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") 操作符会自动调用。因此，通常不需要显式使用[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")，特别是在与动态值一起使用时：
- en: '[PRE88]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Note that the Python `is` operator is **not overloaded**. Even though Python
    provides hooks to overload operators such as `==` and `!=`, it does **not** provide
    any way to redefine `is`.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，Python 的 `is` 运算符**未被重载**。即使 Python 提供了像 `==` 和 `!=` 这样的运算符重载钩子，它也**没有**提供任何重新定义
    `is` 的方法。
- en: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not"):'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not"):'
- en: 'Similar to [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_"), produces “IS NOT”:'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似于 [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")，生成“IS NOT”：
- en: '[PRE89]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Is similarly equivalent to `!= None`:'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样等价于 `!= None`：
- en: '[PRE90]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from"):'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from"):'
- en: 'Produces SQL IS DISTINCT FROM:'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成 SQL IS DISTINCT FROM：
- en: '[PRE91]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from"):'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from"):'
- en: 'Produces SQL IS NOT DISTINCT FROM:'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成 SQL IS NOT DISTINCT FROM：
- en: '[PRE92]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: String Comparisons
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串比较
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"):'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"):'
- en: '[PRE93]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"):'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"):'
- en: 'Case insensitive LIKE makes use of the SQL `lower()` function on a generic
    backend. On the PostgreSQL backend it will use `ILIKE`:'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不区分大小写的 LIKE 在通用后端上使用 SQL `lower()` 函数。在 PostgreSQL 后端上，它将使用 `ILIKE`：
- en: '[PRE94]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike"):'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike"):'
- en: '[PRE95]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike"):'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike"):'
- en: '[PRE96]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: String Containment
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串包含
- en: 'String containment operators are basically built as a combination of LIKE and
    the string concatenation operator, which is `||` on most backends or sometimes
    a function like `concat()`:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串包含运算符基本上是由 LIKE 和字符串连接运算符构建的，后端上为 `||` 或者有时是像 `concat()` 这样的函数：
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
- en: '[PRE97]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
- en: '[PRE98]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
- en: '[PRE99]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: String matching
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串匹配
- en: 'Matching operators are always backend-specific and may provide different behaviors
    and results on different databases:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配运算符始终是特定于后端的，可能在不同的数据库上提供不同的行为和结果：
- en: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match"):'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match"):'
- en: 'This is a dialect-specific operator that makes use of the MATCH feature of
    the underlying database, if available:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个特定于方言的运算符，如果底层数据库支持 MATCH 特性，则使用它：
- en: '[PRE100]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match"):'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match"):'
- en: 'This operator is dialect specific. We can illustrate it in terms of for example
    the PostgreSQL dialect:'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此运算符是方言特定的。我们可以用 PostgreSQL 方言举例说明：
- en: '[PRE101]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Or MySQL:'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者 MySQL：
- en: '[PRE102]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '## String Alteration'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '## 字符串修改'
- en: '[`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat"):'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat")：'
- en: 'String concatenation:'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串连接：
- en: '[PRE103]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'This operator is available via [`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__"), that is, the Python `+`
    operator, when working with a column expression that derives from [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"):'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用从 [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    派生的列表达式时，此运算符可通过 [`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__") 提供，即 Python 的 `+` 运算符：
- en: '[PRE104]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The operator will produce the appropriate database-specific construct, such
    as on MySQL it’s historically been the `concat()` SQL function:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该运算符将产生适当的数据库特定结构，例如在 MySQL 上，它历史上一直是 `concat()` SQL 函数：
- en: '[PRE105]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace"):'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")：'
- en: 'Complementary to `ColumnOperators.regexp()` this produces REGEXP REPLACE equivalent
    for the backends which support it:'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 `ColumnOperators.regexp()` 互补，对于支持的后端，会产生等效的 REGEXP REPLACE：
- en: '[PRE106]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate"):'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate")：'
- en: 'Produces the COLLATE SQL operator which provides for specific collations at
    expression time:'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成 COLLATE SQL 运算符，可在表达式时间为特定排序提供支持：
- en: '[PRE107]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'To use COLLATE against a literal value, use the [`literal()`](sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") construct:'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 若要针对字面值使用 COLLATE，请使用 [`literal()`](sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") 构造：
- en: '[PRE108]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Arithmetic Operators
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算符
- en: '[`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__"), [`ColumnOperators.__radd__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__radd__
    "sqlalchemy.sql.expression.ColumnOperators.__radd__") (Python “`+`” operator):'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__")，[`ColumnOperators.__radd__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__radd__
    "sqlalchemy.sql.expression.ColumnOperators.__radd__")（Python “`+`” 运算符）：'
- en: '[PRE109]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Note that when the datatype of the expression is [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") or similar, the [`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__") operator instead produces
    [string concatenation](#queryguide-operators-concat-op).
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，当表达式的数据类型是 [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    或类似时，[`ColumnOperators.__add__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__") 运算符会产生字符串连接而不是 [字符串连接](#queryguide-operators-concat-op)：
- en: '[`ColumnOperators.__sub__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__sub__
    "sqlalchemy.sql.expression.ColumnOperators.__sub__"), [`ColumnOperators.__rsub__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rsub__
    "sqlalchemy.sql.expression.ColumnOperators.__rsub__") (Python “`-`” operator):'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__sub__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__sub__
    "sqlalchemy.sql.expression.ColumnOperators.__sub__")，[`ColumnOperators.__rsub__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rsub__
    "sqlalchemy.sql.expression.ColumnOperators.__rsub__")（Python “`-`” 运算符）：'
- en: '[PRE110]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[`ColumnOperators.__mul__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__mul__
    "sqlalchemy.sql.expression.ColumnOperators.__mul__"), [`ColumnOperators.__rmul__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rmul__
    "sqlalchemy.sql.expression.ColumnOperators.__rmul__") (Python “`*`” operator):'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__mul__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__mul__
    "sqlalchemy.sql.expression.ColumnOperators.__mul__")，[`ColumnOperators.__rmul__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rmul__
    "sqlalchemy.sql.expression.ColumnOperators.__rmul__")（Python “`*`” 运算符）：'
- en: '[PRE111]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[`ColumnOperators.__truediv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__truediv__
    "sqlalchemy.sql.expression.ColumnOperators.__truediv__"), [`ColumnOperators.__rtruediv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rtruediv__
    "sqlalchemy.sql.expression.ColumnOperators.__rtruediv__") (Python “`/`” operator).
    This is the Python `truediv` operator, which will ensure integer true division
    occurs:'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__truediv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__truediv__
    "sqlalchemy.sql.expression.ColumnOperators.__truediv__"), [`ColumnOperators.__rtruediv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rtruediv__
    "sqlalchemy.sql.expression.ColumnOperators.__rtruediv__")（Python “`/`” 运算符）。这是
    Python 的 `truediv` 运算符，它确保进行整数真除法：'
- en: '[PRE112]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Changed in version 2.0: The Python `/` operator now ensures integer true division
    takes place'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 2.0 版本中更改：Python `/` 运算符现在确保进行整数真除法
- en: '[`ColumnOperators.__floordiv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__floordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__floordiv__"), [`ColumnOperators.__rfloordiv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__") (Python “`//`” operator).
    This is the Python `floordiv` operator, which will ensure floor division occurs.
    For the default backend as well as backends such as PostgreSQL, the SQL `/` operator
    normally behaves this way for integer values:'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__floordiv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__floordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__floordiv__"), [`ColumnOperators.__rfloordiv__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__")（Python “`//`” 运算符）。这是
    Python 的 `floordiv` 运算符，它确保进行 floor division。对于默认后端以及诸如 PostgreSQL 这样的后端，SQL `/`
    运算符通常以这种方式对整数值进行操作：'
- en: '[PRE113]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'For backends that don’t use floor division by default, or when used with numeric
    values, the FLOOR() function is used to ensure floor division:'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于默认不使用 floor division 的后端，或者与数值一起使用时，使用 FLOOR() 函数来确保进行 floor division：
- en: '[PRE114]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'New in version 2.0: Support for FLOOR division'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能：支持 FLOOR division
- en: '[`ColumnOperators.__mod__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__mod__
    "sqlalchemy.sql.expression.ColumnOperators.__mod__"), [`ColumnOperators.__rmod__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rmod__
    "sqlalchemy.sql.expression.ColumnOperators.__rmod__") (Python “`%`” operator):'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.__mod__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__mod__
    "sqlalchemy.sql.expression.ColumnOperators.__mod__"), [`ColumnOperators.__rmod__()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__rmod__
    "sqlalchemy.sql.expression.ColumnOperators.__rmod__")（Python “`%`” 运算符）：'
- en: '[PRE115]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '## Bitwise Operators'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '## 按位运算符'
- en: Bitwise operator functions provide uniform access to bitwise operators across
    different backends, which are expected to operate on compatible values such as
    integers and bit-strings (e.g. PostgreSQL [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") and similar). Note that these are **not**
    general boolean operators.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 按位运算符函数提供了对不同后端的位运算符的统一访问，这些后端预计将对兼容的值（例如整数和位字符串，例如 PostgreSQL [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") 和类似的）进行操作。请注意，这些**不是**通用布尔运算符。
- en: 'New in version 2.0.2: Added dedicated operators for bitwise operations.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2 版本中的新功能：添加了专用位运算符。
- en: '[`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not"), [`bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.bitwise_not
    "sqlalchemy.sql.expression.bitwise_not"). Available as a column-level method,
    producing a bitwise NOT clause against a parent object:'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not"), [`bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.bitwise_not
    "sqlalchemy.sql.expression.bitwise_not")。作为列级方法可用，对父对象生成按位 NOT 子句：'
- en: '[PRE116]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'This operator is also available as a column-expression-level method, applying
    bitwise NOT to an individual column expression:'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个运算符也作为列表达式级别的方法可用，对单个列表达式应用按位 NOT：
- en: '[PRE117]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") produces bitwise AND:'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") 产生按位与：'
- en: '[PRE118]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") produces bitwise OR:'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") 产生按位 OR：'
- en: '[PRE119]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") produces bitwise XOR:'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") 产生按位异或操作符：'
- en: '[PRE120]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'For PostgreSQL dialects, “#” is used to represent bitwise XOR; this emits automatically
    when using one of these backends:'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 PostgreSQL 方言，“#” 用于表示按位异或；在使用其中一个后端时会自动发出：
- en: '[PRE121]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift"), [`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") produce bitwise shift
    operators:'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift")，[`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") 产生按位移动操作符：'
- en: '[PRE122]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Using Conjunctions and Negations
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用连接词和否定
- en: 'The most common conjunction, “AND”, is automatically applied if we make repeated
    use of the [`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") method, as well as similar methods such
    as [`Update.where()`](dml.html#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](dml.html#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where"):'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们反复使用 [`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") 方法，以及类似的方法如 [`Update.where()`](dml.html#sqlalchemy.sql.expression.Update.where
    "sqlalchemy.sql.expression.Update.where") 和 [`Delete.where()`](dml.html#sqlalchemy.sql.expression.Delete.where
    "sqlalchemy.sql.expression.Delete.where")，最常见的连接词“AND”会自动应用：
- en: '[PRE123]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where "sqlalchemy.sql.expression.Select.where"),
    [`Update.where()`](dml.html#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](dml.html#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    also accept multiple expressions with the same effect:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where "sqlalchemy.sql.expression.Select.where")、[`Update.where()`](dml.html#sqlalchemy.sql.expression.Update.where
    "sqlalchemy.sql.expression.Update.where") 和 [`Delete.where()`](dml.html#sqlalchemy.sql.expression.Delete.where
    "sqlalchemy.sql.expression.Delete.where") 也接受具有相同效果的多个表达式：'
- en: '[PRE124]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The “AND” conjunction, as well as its partner “OR”, are both available directly
    using the [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    and [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    functions:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: “AND” 连接词以及其伴侣“OR”可以直接使用 [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 和 [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") 函数：
- en: '[PRE125]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'A negation is available using the [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") function. This will typically invert the operator
    in a boolean expression:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")
    函数可进行否定。这通常会反转布尔表达式中的运算符：
- en: '[PRE126]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'It also may apply a keyword such as `NOT` when appropriate:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当时还可以应��关键字，如 `NOT`：
- en: '[PRE127]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Conjunction Operators
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接操作符
- en: 'The above conjunction functions [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_"), [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_"), [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") are also available as overloaded Python operators:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 上述连接函数 [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")、[`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")、[`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") 也可作为 Python 中的重载运算符使用：
- en: Note
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Python `&`, `|` and `~` operators take high precedence in the language;
    as a result, parenthesis must usually be applied for operands that themselves
    contain expressions, as indicated in the examples below.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的 `&`、`|` 和 `~` 操作符在语言中具有高优先级；因此，通常需要为包含表达式的操作数应用括号，如下面的示例所示。
- en: '[`Operators.__and__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__") (Python “`&`” operator):'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Operators.__and__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__")（Python “`&`” 操作符）：'
- en: 'The Python binary `&` operator is overloaded to behave the same as [`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") (note parenthesis around the two operands):'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python的二进制`&`运算符被重载，以与[`and_()`](sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")（注意两个操作数周围的括号）行为相同：
- en: '[PRE128]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[`Operators.__or__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") (Python “`|`” operator):'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Operators.__or__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") (Python “`|`” operator):'
- en: 'The Python binary `|` operator is overloaded to behave the same as [`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") (note parenthesis around the two operands):'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python的二进制`|`运算符被重载，以与[`or_()`](sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")（注意两个操作数周围的括号）行为相同：
- en: '[PRE129]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[`Operators.__invert__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") (Python “`~`” operator):'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Operators.__invert__()`](sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") (Python “`~`” operator):'
- en: 'The Python binary `~` operator is overloaded to behave the same as [`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_"), either inverting the existing operator, or
    applying the `NOT` keyword to the expression as a whole:'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python的二进制`~`运算符被重载，以与[`not_()`](sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_")行为相同，可以反转现有运算符，或将`NOT`关键字应用于整个表达式：
- en: '[PRE130]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
