- en: ORM Exceptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM 异常
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/exceptions.html](https://docs.sqlalchemy.org/en/20/orm/exceptions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/exceptions.html](https://docs.sqlalchemy.org/en/20/orm/exceptions.html)
- en: SQLAlchemy ORM exceptions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy ORM 异常。
- en: '| Object Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ConcurrentModificationError](#sqlalchemy.orm.exc.ConcurrentModificationError)
    | alias of [`StaleDataError`](#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [ConcurrentModificationError](#sqlalchemy.orm.exc.ConcurrentModificationError)
    | [`StaleDataError`](#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")的别名
    |'
- en: '| [NO_STATE](#sqlalchemy.orm.exc.NO_STATE) | Exception types that may be raised
    by instrumentation implementations. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [NO_STATE](#sqlalchemy.orm.exc.NO_STATE) | 可能由仪器实现引发的异常类型。 |'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: alias of [`StaleDataError`](#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`StaleDataError`](#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")的别名'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An attempt to access unloaded attributes on a mapped instance that is detached.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试访问已分离的映射实例上未加载的属性。
- en: '**Class signature**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.DetachedInstanceError`](#sqlalchemy.orm.exc.DetachedInstanceError
    "sqlalchemy.orm.exc.DetachedInstanceError") ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.DetachedInstanceError`](#sqlalchemy.orm.exc.DetachedInstanceError
    "sqlalchemy.orm.exc.DetachedInstanceError") ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A invalid condition was detected during flush().
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 flush() 过程中检测到无效条件。
- en: '**Class signature**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.FlushError`](#sqlalchemy.orm.exc.FlushError "sqlalchemy.orm.exc.FlushError")
    ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.FlushError`](#sqlalchemy.orm.exc.FlushError "sqlalchemy.orm.exc.FlushError")
    ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A loader strategy for an attribute does not exist.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个属性的加载策略不存在。
- en: '**Class signature**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.LoaderStrategyException`](#sqlalchemy.orm.exc.LoaderStrategyException
    "sqlalchemy.orm.exc.LoaderStrategyException") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.LoaderStrategyException`](#sqlalchemy.orm.exc.LoaderStrategyException
    "sqlalchemy.orm.exc.LoaderStrategyException") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Exception types that may be raised by instrumentation implementations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可能由仪器实现引发的异常类型。
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A refresh operation failed to retrieve the database row corresponding to an
    object’s known primary key identity.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新操作未能检索到与对象已知主键标识符对应的数据库行。
- en: A refresh operation proceeds when an expired attribute is accessed on an object,
    or when [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    is used to retrieve an object which is, upon retrieval, detected as expired. A
    SELECT is emitted for the target row based on primary key; if no row is returned,
    this exception is raised.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当在对象上访问过期属性或使用[`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")检索到被检测为过期的对象时，刷新操作会进行。基于主键发出目标行的SELECT；如果没有返回行，则引发此异常。
- en: The true meaning of this exception is simply that no row exists for the primary
    key identifier associated with a persistent object. The row may have been deleted,
    or in some cases the primary key updated to a new value, outside of the ORM’s
    management of the target object.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个异常的真正含义只是与持久对象关联的主键标识符对应的行不存在。该行可能已被删除，或在某些情况下，主键已更新为新值，超出了ORM对目标对象的管理。
- en: '**Class signature**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.ObjectDeletedError`](#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.ObjectDeletedError`](#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An operation cannot complete due to an object being garbage collected.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于对象被垃圾回收而无法完成操作。
- en: '**Class signature**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.ObjectDereferencedError`](#sqlalchemy.orm.exc.ObjectDereferencedError
    "sqlalchemy.orm.exc.ObjectDereferencedError") ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.ObjectDereferencedError`](#sqlalchemy.orm.exc.ObjectDereferencedError
    "sqlalchemy.orm.exc.ObjectDereferencedError")（[`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")）
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: An operation encountered database state that is unaccounted for.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 遇到了未被考虑到的数据库状态操作。
- en: 'Conditions which cause this to happen include:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 导致此情况发生的条件包括：
- en: A flush may have attempted to update or delete rows and an unexpected number
    of rows were matched during the UPDATE or DELETE statement. Note that when version_id_col
    is used, rows in UPDATE or DELETE statements are also matched against the current
    known version identifier.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个刷新可能已尝试更新或删除行，并且在UPDATE或DELETE语句期间匹配到了意外数量的行。请注意，当使用version_id_col时，UPDATE或DELETE语句中的行也将与当前已知的版本标识符匹配。
- en: A mapped object with version_id_col was refreshed, and the version number coming
    back from the database does not match that of the object itself.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有version_id_col的映射对象被刷新，而从数据库返回的版本号与对象本身的版本号不匹配。
- en: A object is detached from its parent object, however the object was previously
    attached to a different parent identity which was garbage collected, and a decision
    cannot be made if the new parent was really the most recent “parent”.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个对象从其父对象中分离出来，然而该对象以前附加到了另一个父标识，该父标识已被垃圾收集，并且无法确定新的父标识是否真的是最新的“父”。
- en: '**Class signature**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.StaleDataError`](#sqlalchemy.orm.exc.StaleDataError
    "sqlalchemy.orm.exc.StaleDataError") ([`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.StaleDataError`](#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")（[`sqlalchemy.exc.SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")）
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: An mapping operation was requested for an unknown class.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请求了一个未知类的映射操作。
- en: '**Class signature**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.UnmappedClassError`](#sqlalchemy.orm.exc.UnmappedClassError
    "sqlalchemy.orm.exc.UnmappedClassError") ([`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError
    "sqlalchemy.orm.exc.UnmappedError"))
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.UnmappedClassError`](#sqlalchemy.orm.exc.UnmappedClassError
    "sqlalchemy.orm.exc.UnmappedClassError")（[`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError
    "sqlalchemy.orm.exc.UnmappedError")）
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Mapping operation was requested on an unknown column.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请求了一个未知列的映射操作。
- en: '**Class signature**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.UnmappedColumnError`](#sqlalchemy.orm.exc.UnmappedColumnError
    "sqlalchemy.orm.exc.UnmappedColumnError") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.UnmappedColumnError`](#sqlalchemy.orm.exc.UnmappedColumnError
    "sqlalchemy.orm.exc.UnmappedColumnError")（[`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")）
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Base for exceptions that involve expected mappings not present.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 引发涉及未出现预期映射的异常的基类。
- en: '**Class signature**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError
    "sqlalchemy.orm.exc.UnmappedError") ([`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError "sqlalchemy.orm.exc.UnmappedError")（[`sqlalchemy.exc.InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")）
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: An mapping operation was requested for an unknown instance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请求了一个未知实例的映射操作。
- en: '**Class signature**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.exc.UnmappedInstanceError`](#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError") ([`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError
    "sqlalchemy.orm.exc.UnmappedError"))
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.exc.UnmappedInstanceError`](#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError")（[`sqlalchemy.orm.exc.UnmappedError`](#sqlalchemy.orm.exc.UnmappedError
    "sqlalchemy.orm.exc.UnmappedError")）
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
