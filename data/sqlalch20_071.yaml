- en: Horizontal Sharding
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平分片
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/horizontal_shard.html](https://docs.sqlalchemy.org/en/20/orm/extensions/horizontal_shard.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/horizontal_shard.html](https://docs.sqlalchemy.org/en/20/orm/extensions/horizontal_shard.html)
- en: Horizontal sharding support.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 水平分片支持。
- en: Defines a rudimental ‘horizontal sharding’ system which allows a Session to
    distribute queries and persistence operations across multiple databases.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了一个基本的“水平分片”系统，允许会话在多个数据库之间分发查询和持久化操作。
- en: For a usage example, see the [Horizontal Sharding](../examples.html#examples-sharding)
    example included in the source distribution.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有关用法示例，请参见源分发中包含的[水平分片](../examples.html#examples-sharding)示例。
- en: Deep Alchemy
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: The horizontal sharding extension is an advanced feature, involving a complex
    statement -> database interaction as well as use of semi-public APIs for non-trivial
    cases. Simpler approaches to refering to multiple database “shards”, most commonly
    using a distinct [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    per “shard”, should always be considered first before using this more complex
    and less-production-tested system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 水平分片扩展是一个高级功能，涉及复杂的语句 -> 数据库交互以及对非平凡情况使用半公共 API。在使用这种更复杂且 less-production-tested
    系统之前，应始终首先考虑更简单的引用多个数据库“分片”的方法，最常见的是每个“分片”使用一个独立的[`会话`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: API Documentation
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 文档
- en: '| Object Name | Description |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [set_shard_id](#sqlalchemy.ext.horizontal_shard.set_shard_id) | a loader
    option for statements to apply a specific shard id to the primary query as well
    as for additional relationship and column loaders. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [set_shard_id](#sqlalchemy.ext.horizontal_shard.set_shard_id) | 一个加载器选项，用于为语句应用特定的分片
    ID 到主查询，以及为其他关系和列加载器。 |'
- en: '| [ShardedQuery](#sqlalchemy.ext.horizontal_shard.ShardedQuery) | Query class
    used with [`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession "sqlalchemy.ext.horizontal_shard.ShardedSession").
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [分片查询](#sqlalchemy.ext.horizontal_shard.ShardedQuery) | 与[`分片会话`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")一起使用的查询类。 |'
- en: '| [ShardedSession](#sqlalchemy.ext.horizontal_shard.ShardedSession) |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [分片会话](#sqlalchemy.ext.horizontal_shard.ShardedSession) |  |'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Members**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.horizontal_shard.ShardedSession.__init__), [connection_callable()](#sqlalchemy.ext.horizontal_shard.ShardedSession.connection_callable),
    [get_bind()](#sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.horizontal_shard.ShardedSession.__init__), [connection_callable()](#sqlalchemy.ext.horizontal_shard.ShardedSession.connection_callable),
    [get_bind()](#sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind)'
- en: '**Class signature**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.horizontal_shard.ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") ([`sqlalchemy.orm.session.Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session"))
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.horizontal_shard.ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") ([`sqlalchemy.orm.session.Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session"))
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Construct a ShardedSession.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 ShardedSession。
- en: 'Parameters:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`shard_chooser` – A callable which, passed a Mapper, a mapped instance, and
    possibly a SQL clause, returns a shard ID. This id may be based off of the attributes
    present within the object, or on some round-robin scheme. If the scheme is based
    on a selection, it should set whatever state on the instance to mark it in the
    future as participating in that shard.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shard_chooser` – 一个可调用对象，传入一个 Mapper、一个映射实例，可能还有一个 SQL 子句，返回一个分片 ID。该 ID 可能基于对象中存在的属性，或者基于某种轮询方案。如果方案基于选择，则应在实例上设置任何状态，以标记它在未来参与该分片。'
- en: '`identity_chooser` –'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity_chooser` –'
- en: A callable, passed a Mapper and primary key argument, which should return a
    list of shard ids where this primary key might reside.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可调用对象，传入一个 Mapper 和主键参数，应返回一个主键可能存在的分片 ID 列表。
- en: 'Changed in version 2.0: The `identity_chooser` parameter supersedes the `id_chooser`
    parameter.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 2.0 版本中更改：`identity_chooser` 参数取代了 `id_chooser` 参数。
- en: '`execute_chooser` –'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute_chooser` –'
- en: For a given [`ORMExecuteState`](../session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState"), returns the list of shard_ids where the query
    should be issued. Results from all shards returned will be combined together into
    a single listing.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于给定的[`ORMExecuteState`](../session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState")，返回应发出查询的 shard_ids 列表。从所有返回的 shards 中返回的结果将合并到一个列表中。
- en: 'Changed in version 1.4: The `execute_chooser` parameter supersedes the `query_chooser`
    parameter.'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`execute_chooser`参数取代了`query_chooser`参数。
- en: '`shards` – A dictionary of string shard names to [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shards` – 一个字符串分片名称到[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象的字典。'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Provide a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to use in the unit of work flush process.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个用于工作单元刷新过程中使用的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Return a “bind” to which this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")绑定的“bind”。
- en: The “bind” is usually an instance of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “bind”通常是[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的实例，除非[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")已经明确地直接绑定到[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的情况。
- en: For a multiply-bound or unbound [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `mapper` or `clause` arguments are used to determine
    the appropriate bind to return.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多重绑定或未绑定的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，使用`mapper`或`clause`参数确定要返回的适当绑定。
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush"), call, etc.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当通过ORM操作调用[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")时，通常会出现“映射器”参数，例如[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")中的每个单独的INSERT/UPDATE/DELETE操作，在[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")调用中等。
- en: 'The order of resolution is:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 解析顺序为：
- en: if mapper given and [`Session.binds`](../session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session") is present, locate a bind based first on the mapper
    in use, then on the mapped class in use, then on any base classes that are present
    in the `__mro__` of the mapped class, from more specific superclasses to more
    general.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了映射器并且[`Session.binds`](../session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session")存在，则首先基于正在使用的映射器，然后基于正在使用的映射类，然后基于映射类的`__mro__`中存在的任何基类，从更具体的超类到更一般的超类进行绑定定位。
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了子句并且`Session.binds`存在，则基于在`Session.binds`中找到的给定子句中存在的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象进行绑定定位。
- en: if `Session.binds` is present, return that.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`Session.binds`存在，则返回该绑定。
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了子句，则尝试返回一个与最终与该子句关联的[`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")绑定。
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了映射器，尝试返回一个与最终与该映射器映射的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他可选择对象关联的[`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")绑定。
- en: No bind can be found, [`UnboundExecutionError`](../../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找不到绑定时，会引发[`UnboundExecutionError`](../../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError")。
- en: Note that the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method can be overridden on a user-defined
    subclass of [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to provide any kind of bind resolution scheme. See the example at [Custom Vertical
    Partitioning](../persistence_techniques.html#session-custom-partitioning).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") 方法可以在用户定义的 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 子类上被重写，以提供任何类型的绑定解析方案。请参阅 [自定义垂直分区](../persistence_techniques.html#session-custom-partitioning)
    中的示例。
- en: 'Parameters:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    and secondly by consulting the [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated with the [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is mapped for a bind.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 可选的映射类或相应的 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 实例。绑定可以首先从与此 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 关联的“binds”映射中查询 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")，其次从 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 映射到的 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的 [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 中查询绑定。'
- en: '`clause` – A [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clause` – 一个 [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")（即 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")、[`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 等）。如果 `mapper` 参数不存在或无法生成绑定，则将搜索给定的表达式构造，通常是与绑定的
    [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联的 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。'
- en: See also
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](../persistence_techniques.html#session-partitioning)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个会话多个数据库后端）](../persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](../session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](../session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_mapper()`](../session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](../session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
- en: '[`Session.bind_table()`](../session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](../session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: a loader option for statements to apply a specific shard id to the primary query
    as well as for additional relationship and column loaders.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 语句的加载器选项，用于将特定的分片 id 应用于主查询，以及额外的关系和列加载器。
- en: 'The [`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")
    option may be applied using the [`Executable.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") method of any executable statement:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")
    选项可以使用任何可执行语句的 [`Executable.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") 方法应用：'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Above, the statement when invoked will limit to the “shard1” shard identifier
    for the primary query as well as for all relationship and column loading strategies,
    including eager loaders such as [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload"), deferred column loaders like [`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer"), and the lazy relationship loader [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload").
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的语句在调用时将限制为主查询的“shard1”分片标识符，以及所有关系和列加载策略，包括像[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")这样的急切加载器，像[`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")这样的延迟列加载器，以及惰性关系加载器[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")。
- en: In this way, the [`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") option has much wider scope than
    using the “shard_id” argument within the [`Session.execute.bind_arguments`](../session_api.html#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute") dictionary.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，[`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")选项的范围比在[`Session.execute.bind_arguments`](../session_api.html#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute")字典中使用“shard_id”参数要广泛得多。
- en: New in version 2.0.0.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.0版本中的新功能。
- en: '**Members**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.horizontal_shard.set_shard_id.__init__), [propagate_to_loaders](#sqlalchemy.ext.horizontal_shard.set_shard_id.propagate_to_loaders)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.horizontal_shard.set_shard_id.__init__), [propagate_to_loaders](#sqlalchemy.ext.horizontal_shard.set_shard_id.propagate_to_loaders)'
- en: '**Class signature**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.horizontal_shard.set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") (`sqlalchemy.orm.ORMOption`)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.horizontal_shard.set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") (`sqlalchemy.orm.ORMOption`)
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Construct a [`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")
    option.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")选项。
- en: 'Parameters:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`shard_id` – shard identifier'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shard_id` – 分片标识符'
- en: '`propagate_to_loaders` – if left at its default of `True`, the shard option
    will take place for lazy loaders such as [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") and [`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer"); if False, the option will not be propagated to loaded
    objects. Note that [`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") always limits to the shard_id of the parent row in any
    case, so the parameter only has a net effect on the behavior of the [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") strategy.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate_to_loaders` – 如果保持默认值`True`，则分片选项将适用于诸如[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")和[`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")之类的惰性加载器；如果为False，则该选项不会传播到加载的对象。请注意，[`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")在任何情况下始终限制为父行的shard_id，因此该参数仅对[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")策略的行为产生净效果。'
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: if True, indicate this option should be carried along to “secondary” SELECT
    statements that occur for relationship lazy loaders as well as attribute load
    / refresh operations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则表示此选项应该在“次要”SELECT语句中传递，这些语句发生在关系惰性加载器以及属性加载/刷新操作中。
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Query class used with [`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession").
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession "sqlalchemy.ext.horizontal_shard.ShardedSession")一起使用的查询类。
- en: Legacy Feature
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留特性
- en: The [`ShardedQuery`](#sqlalchemy.ext.horizontal_shard.ShardedQuery "sqlalchemy.ext.horizontal_shard.ShardedQuery")
    is a subclass of the legacy [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") class. The [`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") now supports 2.0 style execution
    via the `ShardedSession.execute()` method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ShardedQuery`](#sqlalchemy.ext.horizontal_shard.ShardedQuery "sqlalchemy.ext.horizontal_shard.ShardedQuery")是遗留[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")类的子类。 [`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")现在通过`ShardedSession.execute()`方法支持2.0风格的执行。'
- en: '**Members**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[set_shard()](#sqlalchemy.ext.horizontal_shard.ShardedQuery.set_shard)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[set_shard()](#sqlalchemy.ext.horizontal_shard.ShardedQuery.set_shard)'
- en: '**Class signature**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.horizontal_shard.ShardedQuery`](#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") ([`sqlalchemy.orm.Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"))
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.horizontal_shard.ShardedQuery`](#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") ([`sqlalchemy.orm.Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"))的构造函数
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Return a new query, limited to a single shard ID.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的查询，限制为单个分片 ID。
- en: All subsequent operations with the returned query will be against the single
    shard regardless of other state.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的查询的所有后续操作将针对单个分片执行，而不考虑其他状态。
- en: 'The shard_id can be passed for a 2.0 style execution to the bind_arguments
    dictionary of [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 分片 ID 可以传递给 [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 的 bind_arguments 字典，以进行 2.0 样式的执行：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: API Documentation
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 文档
- en: '| Object Name | Description |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [set_shard_id](#sqlalchemy.ext.horizontal_shard.set_shard_id) | a loader
    option for statements to apply a specific shard id to the primary query as well
    as for additional relationship and column loaders. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [set_shard_id](#sqlalchemy.ext.horizontal_shard.set_shard_id) | 用于语句的加载器选项，以将特定的分片
    ID 应用于主查询，以及额外的关系和列加载器。 |'
- en: '| [ShardedQuery](#sqlalchemy.ext.horizontal_shard.ShardedQuery) | Query class
    used with [`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession "sqlalchemy.ext.horizontal_shard.ShardedSession").
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [ShardedQuery](#sqlalchemy.ext.horizontal_shard.ShardedQuery) | 与 [`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") 一起使用的查询类。 |'
- en: '| [ShardedSession](#sqlalchemy.ext.horizontal_shard.ShardedSession) |  |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [ShardedSession](#sqlalchemy.ext.horizontal_shard.ShardedSession) |  |'
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Members**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.horizontal_shard.ShardedSession.__init__), [connection_callable()](#sqlalchemy.ext.horizontal_shard.ShardedSession.connection_callable),
    [get_bind()](#sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.horizontal_shard.ShardedSession.__init__), [connection_callable()](#sqlalchemy.ext.horizontal_shard.ShardedSession.connection_callable),
    [get_bind()](#sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind)'
- en: '**Class signature**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.horizontal_shard.ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") ([`sqlalchemy.orm.session.Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session"))
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.horizontal_shard.ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") ([`sqlalchemy.orm.session.Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.session.Session"))的构造函数
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Construct a ShardedSession.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 ShardedSession。
- en: 'Parameters:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`shard_chooser` – A callable which, passed a Mapper, a mapped instance, and
    possibly a SQL clause, returns a shard ID. This id may be based off of the attributes
    present within the object, or on some round-robin scheme. If the scheme is based
    on a selection, it should set whatever state on the instance to mark it in the
    future as participating in that shard.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shard_chooser` – 一个可调用对象，传入 Mapper、映射实例和可能的 SQL 子句，返回一个分片 ID。此 ID 可能基于对象中存在的属性，或者基于某种循环选择方案。如果方案基于选择，则应在实例上设置将来标记其参与该分片的任何状态。'
- en: '`identity_chooser` –'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity_chooser` –'
- en: A callable, passed a Mapper and primary key argument, which should return a
    list of shard ids where this primary key might reside.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可调用对象，传入 Mapper 和主键参数，应返回此主键可能存在的分片 ID 列表。
- en: 'Changed in version 2.0: The `identity_chooser` parameter supersedes the `id_chooser`
    parameter.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 2.0 版本中更改：`identity_chooser` 参数取代了 `id_chooser` 参数。
- en: '`execute_chooser` –'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute_chooser` –'
- en: For a given [`ORMExecuteState`](../session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState"), returns the list of shard_ids where the query
    should be issued. Results from all shards returned will be combined together into
    a single listing.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于给定的[`ORMExecuteState`](../session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState")，返回应发出查询的分片 ID 列表。返回的所有分片的结果将合并为单个列表。
- en: 'Changed in version 1.4: The `execute_chooser` parameter supersedes the `query_chooser`
    parameter.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`execute_chooser` 参数取代了 `query_chooser` 参数。
- en: '`shards` – A dictionary of string shard names to [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shards` – 一个字符串分片名称到[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象的字典。'
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Provide a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to use in the unit of work flush process.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个用于工作单元刷新过程中使用的[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Return a “bind” to which this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")绑定的“绑定”。
- en: The “bind” is usually an instance of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: “绑定”通常是[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的一个实例，除非[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")已经被显式地直接绑定到[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。
- en: For a multiply-bound or unbound [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `mapper` or `clause` arguments are used to determine
    the appropriate bind to return.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多重绑定或未绑定的[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，将使用`mapper`或`clause`参数来确定要返回的适当绑定。
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush"), call, etc.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，“mapper”参数通常在通过ORM操作调用[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")时存在，例如[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")中的每个单独的INSERT/UPDATE/DELETE操作，在[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")调用等。
- en: 'The order of resolution is:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 解析的顺序如下：
- en: if mapper given and [`Session.binds`](../session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session") is present, locate a bind based first on the mapper
    in use, then on the mapped class in use, then on any base classes that are present
    in the `__mro__` of the mapped class, from more specific superclasses to more
    general.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了映射器并且存在[`Session.binds`](../session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session")，则首先基于正在使用的映射器，然后基于正在使用的映射类，然后基于映射类的`__mro__`中存在的任何基类，从更具体的超类到更一般的超类。
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了子句并且存在`Session.binds`，则基于在`Session.binds`中找到的给定子句中的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象定位绑定。
- en: if `Session.binds` is present, return that.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在`Session.binds`，则返回该绑定。
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了子句，则尝试返回与该子句最终相关联的[`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")相关的绑定。
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了映射器，则尝试返回与最终与该映射器映射的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他可选择对象相关联的[`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")相关的绑定。
- en: No bind can be found, [`UnboundExecutionError`](../../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找不到绑定时，会引发[`UnboundExecutionError`](../../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError")。
- en: Note that the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method can be overridden on a user-defined
    subclass of [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to provide any kind of bind resolution scheme. See the example at [Custom Vertical
    Partitioning](../persistence_techniques.html#session-custom-partitioning).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，[`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法可以在[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的用户定义子类上被覆盖，以提供任何类型的绑定解析方案。 请参阅[自定义垂直分区](../persistence_techniques.html#session-custom-partitioning)中的示例。
- en: 'Parameters:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    and secondly by consulting the [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated with the [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is mapped for a bind.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 可选的映射类或对应的[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")实例。
    绑定可以首先通过查阅与此[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")关联的“binds”映射，其次通过查阅[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")映射到的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联的[`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")进行绑定。'
- en: '`clause` – A [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clause` – 一个[`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")（例如[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，[`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")等）。 如果未提供`mapper`参数或无法生成绑定，则将搜索给定的表达式构造以查找绑定元素，通常是与绑定的[`MetaData`](../../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。'
- en: See also
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](../persistence_techniques.html#session-partitioning)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个 Session 的多个数据库后端）](../persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](../session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](../session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_mapper()`](../session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](../session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
- en: '[`Session.bind_table()`](../session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](../session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: a loader option for statements to apply a specific shard id to the primary query
    as well as for additional relationship and column loaders.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 语句的加载器选项，可将特定的 shard id 应用于主查询以及用于额外的关系和列加载器。
- en: 'The [`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")
    option may be applied using the [`Executable.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") method of any executable statement:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用任何可执行语句的[`Executable.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")方法应用[`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id")选项：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Above, the statement when invoked will limit to the “shard1” shard identifier
    for the primary query as well as for all relationship and column loading strategies,
    including eager loaders such as [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload"), deferred column loaders like [`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer"), and the lazy relationship loader [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload").
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，当调用语句时，主查询以及所有关系和列加载策略，包括诸如[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")、延迟列加载器[`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")和惰性关系加载器[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")等都将限制为“shard1”分片标识符。
- en: In this way, the [`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") option has much wider scope than
    using the “shard_id” argument within the [`Session.execute.bind_arguments`](../session_api.html#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute") dictionary.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，[`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")选项的范围比在[`Session.execute.bind_arguments`](../session_api.html#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute")字典中使用“shard_id”参数要广泛得多。
- en: New in version 2.0.0.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.0版本中的新功能。
- en: '**Members**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.horizontal_shard.set_shard_id.__init__), [propagate_to_loaders](#sqlalchemy.ext.horizontal_shard.set_shard_id.propagate_to_loaders)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.horizontal_shard.set_shard_id.__init__), [propagate_to_loaders](#sqlalchemy.ext.horizontal_shard.set_shard_id.propagate_to_loaders)'
- en: '**Class signature**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.horizontal_shard.set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") (`sqlalchemy.orm.ORMOption`)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.horizontal_shard.set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id")（`sqlalchemy.orm.ORMOption`）
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Construct a [`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")
    option.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`set_shard_id`](#sqlalchemy.ext.horizontal_shard.set_shard_id "sqlalchemy.ext.horizontal_shard.set_shard_id")选项。
- en: 'Parameters:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`shard_id` – shard identifier'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shard_id` – 分片标识符'
- en: '`propagate_to_loaders` – if left at its default of `True`, the shard option
    will take place for lazy loaders such as [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") and [`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer"); if False, the option will not be propagated to loaded
    objects. Note that [`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") always limits to the shard_id of the parent row in any
    case, so the parameter only has a net effect on the behavior of the [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") strategy.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate_to_loaders` – 如果保持默认值`True`，则`shard`选项将对懒加载器（如[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")和[`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")）生效；如果为`False`，则该选项将不会传播到已加载的对象。请注意，[`defer()`](../queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")无论如何都会限制到父行的`shard_id`，因此该参数仅对[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")策略的行为产生净效果。'
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: if True, indicate this option should be carried along to “secondary” SELECT
    statements that occur for relationship lazy loaders as well as attribute load
    / refresh operations.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为`True`，表示此选项应传递到关系懒加载器以及属性加载/刷新操作中发生的“次要”SELECT语句。
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Query class used with [`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession").
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession "sqlalchemy.ext.horizontal_shard.ShardedSession")一起使用的查询类。
- en: Legacy Feature
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留特性
- en: The [`ShardedQuery`](#sqlalchemy.ext.horizontal_shard.ShardedQuery "sqlalchemy.ext.horizontal_shard.ShardedQuery")
    is a subclass of the legacy [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") class. The [`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") now supports 2.0 style execution
    via the `ShardedSession.execute()` method.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ShardedQuery`](#sqlalchemy.ext.horizontal_shard.ShardedQuery "sqlalchemy.ext.horizontal_shard.ShardedQuery")是遗留[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")类的子类。[`ShardedSession`](#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")现在通过`ShardedSession.execute()`方法支持2.0风格的执行。'
- en: '**Members**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[set_shard()](#sqlalchemy.ext.horizontal_shard.ShardedQuery.set_shard)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[set_shard()](#sqlalchemy.ext.horizontal_shard.ShardedQuery.set_shard)'
- en: '**Class signature**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.horizontal_shard.ShardedQuery`](#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") ([`sqlalchemy.orm.Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"))
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.horizontal_shard.ShardedQuery`](#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")（[`sqlalchemy.orm.Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")）
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Return a new query, limited to a single shard ID.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的查询，限定在单个分片 ID。
- en: All subsequent operations with the returned query will be against the single
    shard regardless of other state.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的查询的所有后续操作都将针对单个分片进行，而不考虑其他状态。
- en: 'The shard_id can be passed for a 2.0 style execution to the bind_arguments
    dictionary of [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: shard_id 可以传递给 [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 的 bind_arguments 字典，用于执行 2.0 风格的操作：
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
