- en: Key Concepts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键概念
- en: 原文：[`jax.readthedocs.io/en/latest/key-concepts.html`](https://jax.readthedocs.io/en/latest/key-concepts.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/key-concepts.html`](https://jax.readthedocs.io/en/latest/key-concepts.html)
- en: This section briefly introduces some key concepts of the JAX package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节简要介绍了 JAX 包的一些关键概念。
- en: '## JAX arrays (`jax.Array`)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## JAX 数组 (`jax.Array`)'
- en: The default array implementation in JAX is `jax.Array`. In many ways it is similar
    to the [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)") type that you may be familar with from the NumPy package, but
    it has some important differences.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 中的默认数组实现是 `jax.Array`。在许多方面，它与您可能熟悉的 NumPy 包中的 [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v2.0 中)") 类型相似，但它也有一些重要的区别。
- en: Array creation
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组创建
- en: We typically don’t call the `jax.Array` constructor directly, but rather create
    arrays via JAX API functions. For example, `jax.numpy` provides familar NumPy-style
    array construction functionality such as `jax.numpy.zeros()`, `jax.numpy.linspace()`,
    `jax.numpy.arange()`, etc.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常不直接调用 `jax.Array` 构造函数，而是通过 JAX API 函数创建数组。例如，`jax.numpy` 提供了类似 NumPy 风格的数组构造功能，如
    `jax.numpy.zeros()`、`jax.numpy.linspace()`、`jax.numpy.arange()` 等。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you use Python type annotations in your code, `jax.Array` is the appropriate
    annotation for jax array objects (see `jax.typing` for more discussion).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在代码中使用 Python 类型注解，`jax.Array` 是 jax 数组对象的适当注释（参见 `jax.typing` 以获取更多讨论）。
- en: Array devices and sharding
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组设备和分片
- en: 'JAX Array objects have a `devices` method that lets you inspect where the contents
    of the array are stored. In the simplest cases, this will be a single CPU device:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 数组对象具有一个 `devices` 方法，允许您查看数组内容存储在哪里。在最简单的情况下，这将是单个 CPU 设备：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In general, an array may be *sharded* across multiple devices, in a manner
    that can be inspected via the `sharding` attribute:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，数组可能会在多个设备上 *分片*，您可以通过 `sharding` 属性进行检查：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here the array is on a single device, but in general a JAX array can be sharded
    across multiple devices, or even multiple hosts. To read more about sharded arrays
    and parallel computation, refer to Introduction to sharded computation  ## Transformations'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，数组位于单个设备上，但通常情况下，JAX 数组可以分布在多个设备或者多个主机上。要了解更多关于分片数组和并行计算的信息，请参阅分片计算介绍##
    变换
- en: Along with functions to operate on arrays, JAX includes a number of transformations
    which operate on JAX functions. These include
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用于操作数组的函数外，JAX 还包括许多用于操作 JAX 函数的变换。这些变换包括
- en: '`jax.jit()`: Just-in-time (JIT) compilation; see Just-in-time compilation'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.jit()`: 即时（JIT）编译；参见即时编译'
- en: '`jax.vmap()`: Vectorizing transform; see Automatic vectorization'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.vmap()`: 向量化变换；参见自动向量化'
- en: '`jax.grad()`: Gradient transform; see Automatic differentiation'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.grad()`: 梯度变换；参见自动微分'
- en: 'as well as several others. Transformations accept a function as an argument,
    and return a new transformed function. For example, here’s how you might JIT-compile
    a simple SELU function:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以及其他几个。变换接受一个函数作为参数，并返回一个新的转换后的函数。例如，这是您可能如何对一个简单的 SELU 函数进行 JIT 编译：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Often you’ll see transformations applied using Python’s decorator syntax for
    convenience:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您会看到使用 Python 的装饰器语法来应用变换以方便操作：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Transformations like `jit()`, `vmap()`, `grad()`, and others are key to using
    JAX effectively, and we’ll cover them in detail in later sections.  ## Tracing'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`jit()`、`vmap()`、`grad()` 等变换对于有效使用 JAX 至关重要，我们将在后续章节中详细介绍它们。## 跟踪'
- en: The magic behind transformations is the notion of a Tracer. Tracers are abstract
    stand-ins for array objects, and are passed to JAX functions in order to extract
    the sequence of operations that the function encodes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 变换背后的魔法是跟踪器的概念。跟踪器是数组对象的抽象替身，传递给 JAX 函数，以提取函数编码的操作序列。
- en: 'You can see this by printing any array value within transformed JAX code; for
    example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打印转换后的 JAX 代码中的任何数组值来看到这一点；例如：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The value printed is not the array `x`, but a `Tracer` instance that represents
    essential attributes of `x`, such as its `shape` and `dtype`. By executing the
    function with traced values, JAX can determine the sequence of operations encoded
    by the function before those operations are actually executed: transformations
    like `jit()`, `vmap()`, and `grad()` can then map this sequence of input operations
    to a transformed sequence of operations.  ## Jaxprs'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '打印的值不是数组 `x`，而是代表 `x` 的关键属性的 `Tracer` 实例，比如它的 `shape` 和 `dtype`。通过使用追踪值执行函数，JAX
    可以确定函数编码的操作序列，然后在实际执行这些操作之前执行转换：例如 `jit()`、`vmap()` 和 `grad()` 可以将输入操作序列映射到变换后的操作序列。  ##
    Jaxprs'
- en: JAX has its own intermediate representation for sequences of operations, known
    as a jaxpr. A jaxpr (short for *JAX exPRession*) is a simple representation of
    a functional program, comprising a sequence of primitive operations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 对操作序列有自己的中间表示形式，称为 jaxpr。jaxpr（*JAX exPRession* 的缩写）是一个函数程序的简单表示，包含一系列原始操作。
- en: 'For example, consider the `selu` function we defined above:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑我们上面定义的 `selu` 函数：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can use the `jax.make_jaxpr()` utility to convert this function into a jaxpr
    given a particular input:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `jax.make_jaxpr()` 实用程序来将该函数转换为一个 jaxpr，给定特定的输入：
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Comparing this to the Python function definition, we see that it encodes the
    precise sequence of operations that the function represents. We’ll go into more
    depth about jaxprs later in JAX internals: The jaxpr language.  ## Pytrees'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '与 Python 函数定义相比，可以看出它编码了函数表示的精确操作序列。我们稍后将深入探讨 JAX 内部的 jaxprs：jaxpr 语言。  ##
    Pytrees'
- en: 'JAX functions and transformations fundamentally operate on arrays, but in practice
    it is convenient to write code that work with collections of arrays: for example,
    a neural network might organize its parameters in a dictionary of arrays with
    meaningful keys. Rather than handle such structures on a case-by-case basis, JAX
    relies on the pytree abstraction to treat such collections in a uniform matter.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 函数和转换基本上操作数组，但实际上编写处理数组集合的代码更为方便：例如，神经网络可能会将其参数组织在具有有意义键的数组字典中。与其逐案处理这类结构，JAX
    依赖于 pytree 抽象来统一处理这些集合。
- en: 'Here are some examples of objects that can be treated as pytrees:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可以作为 pytrees 处理的对象的示例：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: JAX has a number of general-purpose utilities for working with PyTrees; for
    example the functions `jax.tree.map()` can be used to map a function to every
    leaf in a tree, and `jax.tree.reduce()` can be used to apply a reduction across
    the leaves in a tree.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 提供了许多用于处理 PyTrees 的通用实用程序；例如函数 `jax.tree.map()` 可以用于将函数映射到树中的每个叶子，而 `jax.tree.reduce()`
    可以用于在树中的叶子上应用约简操作。
- en: You can learn more in the Working with pytrees tutorial.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在《使用 pytrees 教程》中了解更多信息。
