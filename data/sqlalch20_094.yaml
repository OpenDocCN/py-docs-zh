- en: The Type Hierarchy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型层次结构
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/type_basics.html](https://docs.sqlalchemy.org/en/20/core/type_basics.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/type_basics.html](https://docs.sqlalchemy.org/en/20/core/type_basics.html)
- en: SQLAlchemy provides abstractions for most common database data types, as well
    as several techniques for customization of datatypes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy提供了对大多数常见数据库数据类型的抽象，以及多种自定义数据类型的技术。
- en: Database types are represented using Python classes, all of which ultimately
    extend from the base type class known as [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"). There are two general categories of datatypes,
    each of which express themselves within the typing hierarchy in different ways.
    The category used by an individual datatype class can be identified based on the
    use of two different naming conventions, which are “CamelCase” and “UPPERCASE”.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库类型使用Python类表示，所有这些类最终都是从名为[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")的基本类型类扩展而来。有两种一般类别的数据类型，它们在类型层次结构中以不同的方式表达自己。根据两种不同的命名约定，即“驼峰命名法”和“大写字母”，可以识别个别数据类型类使用的类别。
- en: See also
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting up MetaData with Table objects](../tutorial/metadata.html#tutorial-core-metadata)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial).
    Illustrates the most rudimental use of [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") type objects to define [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") metadata and introduces the concept of type objects
    in tutorial form.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用表对象设置MetaData](../tutorial/metadata.html#tutorial-core-metadata) - 在[SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)中。以教程形式演示了使用[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类型对象定义[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")元数据并介绍了类型对象的概念的最基本用法。'
- en: The “CamelCase” datatypes
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “驼峰命名法”数据类型
- en: The rudimental types have “CamelCase” names such as [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String"), [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"),
    [`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"), and [`DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"). All of the immediate subclasses of [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") are “CamelCase” types. The “CamelCase” types are
    to the greatest degree possible **database agnostic**, meaning they can all be
    used on any database backend where they will behave in such a way as appropriate
    to that backend in order to produce the desired behavior.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 初级类型的命名采用“驼峰命名法”，如[`String`](#sqlalchemy.types.String "sqlalchemy.types.String")、[`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")、[`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")和[`DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")。所有[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")的直接子类都是“驼峰命名法”类型。尽可能“驼峰命名法”类型是**与数据库无关的**，这意味着它们可以在任何数据库后端上使用，在这些后端上，它们将以适合该后端的方式行事，以产生所需的行为。
- en: 'An example of a straightforward “CamelCase” datatype is [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String"). On most backends, using this datatype in a [table
    specification](metadata.html#metadata-describing) will correspond to the `VARCHAR`
    database type being used on the target backend, delivering string values to and
    from the database, as in the example below:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的“驼峰命名法”数据类型示例是[`String`](#sqlalchemy.types.String "sqlalchemy.types.String")。在大多数后端上，将此数据类型用于[table
    specification](metadata.html#metadata-describing)将对应于在目标后端上使用`VARCHAR`数据库类型，从而在数据库和数据库之间传递字符串值，如下例所示：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When using a particular [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") definition or in any SQL expression overall, if no
    arguments are required it may be passed as the class itself, that is, without
    instantiating it with `()`. If arguments are needed, such as the length argument
    of 60 in the `"email_address"` column above, the type may be instantiated.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在表定义或整体SQL表达式中使用特定的[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类时，如果不需要参数，则可以将其作为类本身传递，即不需要实例化它，例如上面的`"email_address"`列中的长度参数60。如果需要参数，则可以将类型实例化。
- en: Another “CamelCase” datatype that expresses more backend-specific behavior is
    the [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") datatype.
    Unlike [`String`](#sqlalchemy.types.String "sqlalchemy.types.String"), which represents
    a string datatype that all databases have, not every backend has a real “boolean”
    datatype; some make use of integers or BIT values 0 and 1, some have boolean literal
    constants `true` and `false` while others dont. For this datatype, [`Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") may render `BOOLEAN` on a backend such as PostgreSQL,
    `BIT` on the MySQL backend and `SMALLINT` on Oracle. As data is sent and received
    from the database using this type, based on the dialect in use it may be interpreting
    Python numeric or boolean values.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个表达更具后端特定行为的“驼峰命名法”数据类型是[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")数据类型。与[`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")表示所有数据库都具有的字符串数据类型不同，不是每个后端都有真正的“布尔”数据类型；一些后端使用整数或比特值
    0 和 1，一些具有布尔字面常量`true`和`false`，而另一些则没有。对于此数据类型，[`Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")在后端（如 PostgreSQL）上可能会呈现为`BOOLEAN`，在 MySQL 后端上可能为`BIT`，在
    Oracle 上可能为`SMALLINT`。当使用此类型发送和接收数据到数据库时，根据正在使用的方言，它可能会解释 Python 数字或布尔值。
- en: The typical SQLAlchemy application will likely wish to use primarily “CamelCase”
    types in the general case, as they will generally provide the best basic behavior
    and be automatically portable to all backends.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的 SQLAlchemy 应用程序通常会在一般情况下主要使用“驼峰命名法”类型，因为它们通常提供最佳的基本行为，并且可以自动地在所有后端上移植。
- en: Reference for the general set of “CamelCase” datatypes is below at [Generic
    “CamelCase” Types](#types-generic).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通用“驼峰命名法”数据类型的参考资料请参见[通用“驼峰命名法”类型](#types-generic)。
- en: The “UPPERCASE” datatypes
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “大写字母”数据类型
- en: In contrast to the “CamelCase” types are the “UPPERCASE” datatypes. These datatypes
    are always inherited from a particular “CamelCase” datatype, and always represent
    an **exact** datatype. When using an “UPPERCASE” datatype, the name of the type
    is always rendered exactly as given, without regard for whether or not the current
    backend supports it. Therefore the use of “UPPERCASE” types in a SQLAlchemy application
    indicates that specific datatypes are required, which then implies that the application
    would normally, without additional steps taken, be limited to those backends which
    use the type exactly as given. Examples of UPPERCASE types include [`VARCHAR`](#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"), [`NUMERIC`](#sqlalchemy.types.NUMERIC "sqlalchemy.types.NUMERIC"),
    [`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.types.INTEGER"), and [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"), which inherit directly from the previously mentioned
    “CamelCase” types [`String`](#sqlalchemy.types.String "sqlalchemy.types.String"),
    [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"), [`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), and [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime"),
    respectively.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与“驼峰命名法”类型相反的是“大写字母”数据类型。这些数据类型总是从特定的“驼峰命名法”数据类型继承，并且始终表示**确切**的数据类型。当使用“大写字母”数据类型时，类型的名称始终精确地呈现，而不考虑当前后端是否支持它。因此，在
    SQLAlchemy 应用程序中使用“大写字母”类型表示需要特定数据类型，这随后意味着应用程序通常（如果没有采取额外步骤）会受限于那些完全使用给定类型的后端。大写字母类型的示例包括[`VARCHAR`](#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR")、[`NUMERIC`](#sqlalchemy.types.NUMERIC "sqlalchemy.types.NUMERIC")、[`INTEGER`](#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER")和[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")，它们直接继承自前面提到的“驼峰命名法”类型[`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")、[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")、[`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")和[`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")。
- en: The “UPPERCASE” datatypes that are part of `sqlalchemy.types` are common SQL
    types that typically expect to be available on at least two backends if not more.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`sqlalchemy.types`的一部分的“大写字母”数据类型是通用 SQL 类型，通常期望在至少两个后端上可用。
- en: Reference for the general set of “UPPERCASE” datatypes is below at [SQL Standard
    and Multiple Vendor “UPPERCASE” Types](#types-sqlstandard).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通用“大写字母”数据类型的参考资料请参见[SQL 标准和多供应商“大写字母”类型](#types-sqlstandard)。
- en: '## Backend-specific “UPPERCASE” datatypes'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '## 后端特定的“大写字母”数据类型'
- en: Most databases also have their own datatypes that are either fully specific
    to those databases, or add additional arguments that are specific to those databases.
    For these datatypes, specific SQLAlchemy dialects provide **backend-specific**
    “UPPERCASE” datatypes, for a SQL type that has no analogue on other backends.
    Examples of backend-specific uppercase datatypes include PostgreSQL’s [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"), SQL Server’s [`IMAGE`](../dialects/mssql.html#sqlalchemy.dialects.mssql.IMAGE
    "sqlalchemy.dialects.mssql.IMAGE") and MySQL’s [`TINYTEXT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TINYTEXT
    "sqlalchemy.dialects.mysql.TINYTEXT").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库还具有完全特定于这些数据库的数据类型，或者添加了特定于这些数据库的附加参数。对于这些数据类型，特定的SQLAlchemy方言提供了**后端特定**的“大写”数据类型，用于在其他后端上没有类似物的SQL类型。后端特定大写数据类型的示例包括PostgreSQL的[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")、SQL Server的[`IMAGE`](../dialects/mssql.html#sqlalchemy.dialects.mssql.IMAGE
    "sqlalchemy.dialects.mssql.IMAGE")和MySQL的[`TINYTEXT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TINYTEXT
    "sqlalchemy.dialects.mysql.TINYTEXT")。
- en: Specific backends may also include “UPPERCASE” datatypes that extend the arguments
    available from that same “UPPERCASE” datatype as found in the `sqlalchemy.types`
    module. An example is when creating a MySQL string datatype, one might want to
    specify MySQL-specific arguments such as `charset` or `national`, which are available
    from the MySQL version of [`VARCHAR`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR") as the MySQL-only parameters [`VARCHAR.charset`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR") and [`VARCHAR.national`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.national
    "sqlalchemy.dialects.mysql.VARCHAR").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 某些后端还可能包括“大写”数据类型，这些数据类型扩展了来自`sqlalchemy.types`模块中相同“大写”数据类型的参数。例如，当创建MySQL字符串数据类型时，可能希望指定MySQL特定参数，如`charset`或`national`，这些参数可以从MySQL版本的[`VARCHAR`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR")作为仅MySQL参数[`VARCHAR.charset`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR")和[`VARCHAR.national`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.national
    "sqlalchemy.dialects.mysql.VARCHAR")。
- en: 'API documentation for backend-specific types are in the dialect-specific documentation,
    listed at [Dialects](../dialects/index.html).  ## Using “UPPERCASE” and Backend-specific
    types for multiple backends'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 后端特定类型的API文档在方言特定文档中列出，详见[方言](../dialects/index.html)。## 使用“大写”和后端特定类型用于多个后端
- en: Reviewing the presence of “UPPERCASE” and “CamelCase” types leads to the natural
    use case of how to make use of “UPPERCASE” datatypes for backend-specific options,
    but only when that backend is in use. To tie together the database-agnostic “CamelCase”
    and backend-specific “UPPERCASE” systems, one makes use of the [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method in order to **compose** types
    together to work with specific behaviors on specific backends.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 检查“大写”和“驼峰”类型的存在自然会引出如何在使用特定后端时利用“大写”数据类型的自然用例，但仅当该后端正在使用时。为了将数据库无关的“驼峰”和特定后端的“大写”系统联系在一起，可以使用[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法将类型组合在一起，以在特定后端上使用特定行为。
- en: 'Such as, to use the [`String`](#sqlalchemy.types.String "sqlalchemy.types.String")
    datatype, but when running on MySQL to make use of the [`VARCHAR.charset`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR") parameter of [`VARCHAR`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR") when the table is created on MySQL or MariaDB,
    [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") may be used as below:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用[`String`](#sqlalchemy.types.String "sqlalchemy.types.String")数据类型，但在运行时在MySQL上使用[`VARCHAR.charset`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR")参数的[`VARCHAR`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR")创建表时，可以使用[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")如下所示：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above table definition, the `"bio"` column will have string-behaviors
    on all backends. On most backends it will render in DDL as `VARCHAR`. However
    on MySQL and MariaDB (indicated by database URLs that start with `mysql` or `mariadb`),
    it will render as `VARCHAR(255) CHARACTER SET utf8`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的表定义中，`"bio"`列将在所有后端上具有字符串行为。在大多数后端上，它将在DDL中呈现为`VARCHAR`。然而，在MySQL和MariaDB（通过以`mysql`或`mariadb`开头的数据库URL表示）上，它将呈现为`VARCHAR(255)
    CHARACTER SET utf8`。
- en: See also
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") - additional usage examples and notes  ##
    Generic “CamelCase” Types'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") - 附加用法示例和注意事项  ## 通用“驼峰大小写”类型'
- en: Generic types specify a column that can read, write and store a particular type
    of Python data. SQLAlchemy will choose the best database column type available
    on the target database when issuing a `CREATE TABLE` statement. For complete control
    over which column type is emitted in `CREATE TABLE`, such as `VARCHAR` see [SQL
    Standard and Multiple Vendor “UPPERCASE” Types](#types-sqlstandard) and the other
    sections of this chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通用类型指定一个列，该列可以读取、写入和存储特定类型的Python数据。当发出`CREATE TABLE`语句时，SQLAlchemy将选择目标数据库上可用的最佳数据库列类型。对于完全控制在`CREATE
    TABLE`中发出的列类型，比如`VARCHAR`，请参见[SQL标准和多个供应商的“大写”类型](#types-sqlstandard)和本章的其他部分。
- en: '| Object Name | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BigInteger](#sqlalchemy.types.BigInteger) | A type for bigger `int` integers.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [BigInteger](#sqlalchemy.types.BigInteger) | 用于较大的`int`整数的类型。 |'
- en: '| [Boolean](#sqlalchemy.types.Boolean) | A bool datatype. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [Boolean](#sqlalchemy.types.Boolean) | 一个布尔数据类型。 |'
- en: '| [Date](#sqlalchemy.types.Date) | A type for `datetime.date()` objects. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [Date](#sqlalchemy.types.Date) | 用于`datetime.date()`对象的类型。 |'
- en: '| [DateTime](#sqlalchemy.types.DateTime) | A type for `datetime.datetime()`
    objects. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [DateTime](#sqlalchemy.types.DateTime) | 用于`datetime.datetime()`对象的类型。 |'
- en: '| [Double](#sqlalchemy.types.Double) | A type for double `FLOAT` floating point
    types. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [Double](#sqlalchemy.types.Double) | 用于双精度`FLOAT`浮点类型的类型。 |'
- en: '| [Enum](#sqlalchemy.types.Enum) | Generic Enum Type. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [Enum](#sqlalchemy.types.Enum) | 通用枚举类型。 |'
- en: '| [Float](#sqlalchemy.types.Float) | Type representing floating point types,
    such as `FLOAT` or `REAL`. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [Float](#sqlalchemy.types.Float) | 代表浮点类型，如`FLOAT`或`REAL`的类型。 |'
- en: '| [Integer](#sqlalchemy.types.Integer) | A type for `int` integers. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [Integer](#sqlalchemy.types.Integer) | 一个`int`整数的类型。 |'
- en: '| [Interval](#sqlalchemy.types.Interval) | A type for `datetime.timedelta()`
    objects. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [Interval](#sqlalchemy.types.Interval) | 用于`datetime.timedelta()`对象的类型。 |'
- en: '| [LargeBinary](#sqlalchemy.types.LargeBinary) | A type for large binary byte
    data. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [LargeBinary](#sqlalchemy.types.LargeBinary) | 用于大型二进制字节数据的类型。 |'
- en: '| [MatchType](#sqlalchemy.types.MatchType) | Refers to the return type of the
    MATCH operator. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [MatchType](#sqlalchemy.types.MatchType) | 指代MATCH运算符的返回类型。 |'
- en: '| [Numeric](#sqlalchemy.types.Numeric) | Base for non-integer numeric types,
    such as `NUMERIC`, `FLOAT`, `DECIMAL`, and other variants. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [Numeric](#sqlalchemy.types.Numeric) | 非整数数字类型的基类，如`NUMERIC`、`FLOAT`、`DECIMAL`和其他变体。
    |'
- en: '| [PickleType](#sqlalchemy.types.PickleType) | Holds Python objects, which
    are serialized using pickle. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [PickleType](#sqlalchemy.types.PickleType) | 包含使用pickle序列化的Python对象。 |'
- en: '| [SchemaType](#sqlalchemy.types.SchemaType) | Add capabilities to a type which
    allow for schema-level DDL to be associated with a type. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [SchemaType](#sqlalchemy.types.SchemaType) | 添加了允许将模式级DDL与类型关联的类型的功能。 |'
- en: '| [SmallInteger](#sqlalchemy.types.SmallInteger) | A type for smaller `int`
    integers. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [SmallInteger](#sqlalchemy.types.SmallInteger) | 用于较小的`int`整数的类型。 |'
- en: '| [String](#sqlalchemy.types.String) | The base for all string and character
    types. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [String](#sqlalchemy.types.String) | 所有字符串和字符类型的基类。 |'
- en: '| [Text](#sqlalchemy.types.Text) | A variably sized string type. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [Text](#sqlalchemy.types.Text) | 可变大小的字符串类型。 |'
- en: '| [Time](#sqlalchemy.types.Time) | A type for `datetime.time()` objects. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [Time](#sqlalchemy.types.Time) | 用于`datetime.time()`对象的类型。 |'
- en: '| [Unicode](#sqlalchemy.types.Unicode) | A variable length Unicode string type.
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [Unicode](#sqlalchemy.types.Unicode) | 一个可变长度的Unicode字符串类型。 |'
- en: '| [UnicodeText](#sqlalchemy.types.UnicodeText) | An unbounded-length Unicode
    string type. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [UnicodeText](#sqlalchemy.types.UnicodeText) | 一个无限长度的Unicode字符串类型。 |'
- en: '| [Uuid](#sqlalchemy.types.Uuid) | Represent a database agnostic UUID datatype.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [Uuid](#sqlalchemy.types.Uuid) | 表示与数据库无关的UUID数据类型。 |'
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A type for bigger `int` integers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用于较大的`int`整数的类型。
- en: Typically generates a `BIGINT` in DDL, and otherwise acts like a normal [`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") on the Python side.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DDL 中通常生成 `BIGINT`，在 Python 端则像正常的 [`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    一样操作。
- en: '**Class signature**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A bool datatype.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔数据类型。
- en: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") typically
    uses BOOLEAN or SMALLINT on the DDL side, and on the Python side deals in `True`
    or `False`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") 通常在 DDL 方面使用
    BOOLEAN 或 SMALLINT，在 Python 方面处理 `True` 或 `False`。'
- en: The [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") datatype
    currently has two levels of assertion that the values persisted are simple true/false
    values. For all backends, only the Python values `None`, `True`, `False`, `1`
    or `0` are accepted as parameter values. For those backends that don’t support
    a “native boolean” datatype, an option exists to also create a CHECK constraint
    on the target column
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") 数据类型目前有两个断言级别，用于确保持久化的值是简单的
    true/false 值。对于所有后端，仅接受 Python 值 `None`、`True`、`False`、`1` 或 `0` 作为参数值。对于不支持“本地布尔”数据类型的后端，还可以在目标列上创建
    CHECK 约束的选项'
- en: 'Changed in version 1.2: the [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    datatype now asserts that incoming Python values are already in pure boolean form.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 版本中的变化：[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    数据类型现在断言传入的 Python 值已经是纯布尔形式。
- en: '**Members**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Boolean.__init__), [bind_processor()](#sqlalchemy.types.Boolean.bind_processor),
    [literal_processor()](#sqlalchemy.types.Boolean.literal_processor), [python_type](#sqlalchemy.types.Boolean.python_type),
    [result_processor()](#sqlalchemy.types.Boolean.result_processor)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Boolean.__init__), [bind_processor()](#sqlalchemy.types.Boolean.bind_processor),
    [literal_processor()](#sqlalchemy.types.Boolean.literal_processor), [python_type](#sqlalchemy.types.Boolean.python_type),
    [result_processor()](#sqlalchemy.types.Boolean.result_processor)'
- en: '**Class signature**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    ([`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType"),
    `sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    ([`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType"),
    `sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Construct a Boolean.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个布尔值。
- en: 'Parameters:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`create_constraint` –'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. If the boolean is generated as an int/smallint, also create
    a CHECK constraint on the table that ensures 1 or 0 as a value.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。如果布尔值生成为 int/smallint，还会在表上创建一个 CHECK 约束，以确保值为 1 或 0。
- en: Note
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Boolean.name`](#sqlalchemy.types.Boolean.params.name "sqlalchemy.types.Boolean")
    parameter or by setting up an appropriate naming convention; see [Configuring
    Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议 CHECK 约束具有明确的名称，以支持模式管理方面的关注。可以通过设置 [`Boolean.name`](#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") 参数或设置适当的命名约定来实现；有关背景信息，请参阅 [配置约束命名约定](constraints.html#constraint-naming-conventions)。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4 版本中的变化：- 此标志现在默认为 False，表示非本机枚举类型不会生成 CHECK 约束。
- en: '`name` – if a CHECK constraint is generated, specify the name of the constraint.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 如果生成了 CHECK 约束，请指定约束的名称。'
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Return a conversion function for processing bind values.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一位置参数，并返回一个要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，方法应返回 `None`。
- en: Note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**方言特定类型对象**调用，该对象通常**是方言中使用的私有对象**，并且不是公共类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供备用的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非明确地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供备用行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**dialect** – 正在使用的方言实例。'
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理要直接呈现而不使用绑定的文字值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常在DDL生成以及某些后端不接受绑定参数的情况下使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个字面Python值作为唯一的位置参数，并返回一个字符串表示以在SQL语句中呈现。
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**方言特定类型对象**调用，该对象通常**是方言中使用的私有对象**，并且不是公共类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供备用的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非明确地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供备用行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return a conversion function for processing result row values.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个结果行列值作为唯一的位置参数，并将返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则方法应返回`None`。
- en: Note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常**私有于使用的方言**，并且不是与公共类型对象相同的类型对象，这意味着不可能通过继承[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非显式地继承[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供替代行为，需实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩充现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在cursor.description中接收到的DBAPI coltype参数。'
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A type for `datetime.date()` objects.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`datetime.date()`对象的类型。
- en: '**Members**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_dbapi_type()](#sqlalchemy.types.Date.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Date.literal_processor),
    [python_type](#sqlalchemy.types.Date.python_type)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_dbapi_type()](#sqlalchemy.types.Date.get_dbapi_type)，[literal_processor()](#sqlalchemy.types.Date.literal_processor)，[python_type](#sqlalchemy.types.Date.python_type)'
- en: '**Class signature**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Date`](#sqlalchemy.types.Date "sqlalchemy.types.Date")
    (`sqlalchemy.types._RenderISO8601NoT`, `sqlalchemy.types.HasExpressionLookup`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Date`](#sqlalchemy.types.Date "sqlalchemy.types.Date")（`sqlalchemy.types._RenderISO8601NoT`，`sqlalchemy.types.HasExpressionLookup`，[`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层DB-API中相应的类型对象（如果有）。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对于调用`setinputsizes()`可能很有用。
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理直接呈现而不使用绑定的文字值的转换函数。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常用于DDL生成以及某些情况下后端不接受绑定参数时，将使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个文字Python值作为唯一的位置参数，并将返回一个字符串表示以在SQL语句中呈现。
- en: Note
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法仅在**特定方言的类型对象**相关时才被调用，这通常是**私有于正在使用的方言**的，并且不是公共类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非明确地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 提供替代行为，请实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供 [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 的实现。
- en: See also
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A type for `datetime.datetime()` objects.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于`datetime.datetime()`对象的类型。
- en: Date and time types return objects from the Python `datetime` module. Most DBAPIs
    have built in support for the datetime module, with the noted exception of SQLite.
    In the case of SQLite, date and time types are stored as strings which are then
    converted back to datetime objects when rows are returned.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 日期和时间类型返回来自Python `datetime` 模块的对象。大多数DBAPI都内置支持datetime模块，但SQLite是个例外。在SQLite的情况下，日期和时间类型存储为字符串，然后在返回行时将其转换回datetime对象。
- en: For the time representation within the datetime type, some backends include
    additional options, such as timezone support and fractional seconds support. For
    fractional seconds, use the dialect-specific datatype, such as [`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME
    "sqlalchemy.dialects.mysql.TIME"). For timezone support, use at least the [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype, if not the dialect-specific datatype object.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在datetime类型内的时间表示中，一些后端包括其他选项，例如时区支持和分数秒支持。对于分数秒，使用特定于方言的数据类型，例如[`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME
    "sqlalchemy.dialects.mysql.TIME")。对于时区支持，至少使用[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP")数据类型，如果不是特定于方言的数据类型对象。
- en: '**Members**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DateTime.__init__), [get_dbapi_type()](#sqlalchemy.types.DateTime.get_dbapi_type),
    [literal_processor()](#sqlalchemy.types.DateTime.literal_processor), [python_type](#sqlalchemy.types.DateTime.python_type)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DateTime.__init__), [get_dbapi_type()](#sqlalchemy.types.DateTime.get_dbapi_type),
    [literal_processor()](#sqlalchemy.types.DateTime.literal_processor), [python_type](#sqlalchemy.types.DateTime.python_type)'
- en: '**Class signature**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    (`sqlalchemy.types._RenderISO8601NoT`, `sqlalchemy.types.HasExpressionLookup`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    (`sqlalchemy.types._RenderISO8601NoT`, `sqlalchemy.types.HasExpressionLookup`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Construct a new [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime").
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的 [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")。
- en: 'Parameters:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**timezone** – boolean. Indicates that the datetime type should enable timezone
    support, if available on the **base date/time-holding type only**. It is recommended
    to make use of the [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    datatype directly when using this flag, as some databases include separate generic
    date/time-holding types distinct from the timezone-capable TIMESTAMP datatype,
    such as Oracle.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**timezone** – 布尔值。指示日期时间类型是否应启用时区支持，如果仅在**基本日期/时间保存类型上可用**。建议在使用此标志时直接使用[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") 数据类型，因为一些数据库包括与支持时区的 TIMESTAMP 数据类型不同的单独的通用日期/时间保存类型，如
    Oracle。'
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，返回底层 DB-API 的相应类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于调用`setinputsizes()`可能很有用。
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理直接呈现而不使用绑定的字面值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常用于 DDL 生成以及在某些后端不接受绑定参数的情况下使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面的 Python 值作为唯一的位置参数，并返回一个字符串表示，以在 SQL 语句中呈现。
- en: Note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常**私有于正在使用的方言**，并且不是公共类型对象，这意味着不可通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类来提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 的实现。
- en: See also
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Generic Enum Type.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通用枚举类型。
- en: The [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") type provides a
    set of possible string values which the column is constrained towards.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 类型提供了一组可能的字符串值，列受其约束。'
- en: The [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") type will make
    use of the backend’s native “ENUM” type if one is available; otherwise, it uses
    a VARCHAR datatype. An option also exists to automatically produce a CHECK constraint
    when the VARCHAR (so called “non-native”) variant is produced; see the [`Enum.create_constraint`](#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") flag.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可用，[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 类型将使用后端的本机“ENUM”类型；否则，它使用
    VARCHAR 数据类型。还存在一个选项，即在生成 VARCHAR（所谓的“非本机”）变体时自动生成 CHECK 约束；请参阅[`Enum.create_constraint`](#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") 标志。
- en: The [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") type also provides
    in-Python validation of string values during both read and write operations. When
    reading a value from the database in a result set, the string value is always
    checked against the list of possible values and a `LookupError` is raised if no
    match is found. When passing a value to the database as a plain string within
    a SQL statement, if the [`Enum.validate_strings`](#sqlalchemy.types.Enum.params.validate_strings
    "sqlalchemy.types.Enum") parameter is set to True, a `LookupError` is raised for
    any string value that’s not located in the given list of possible values; note
    that this impacts usage of LIKE expressions with enumerated values (an unusual
    use case).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 类型在 Python 中也提供了对字符串值进行读写操作期间的验证。从结果集中读取数据库中的值时，始终检查字符串值是否与可能值列表匹配，如果找不到匹配项，则引发
    `LookupError`。在将值作为 SQL 语句中的纯字符串传递给数据库时，如果 [`Enum.validate_strings`](#sqlalchemy.types.Enum.params.validate_strings
    "sqlalchemy.types.Enum") 参数设置为 True，则对于未位于给定可能值列表中的任何字符串值，都会引发 `LookupError`；请注意，这会影响到具有枚举值的
    LIKE 表达式的使用（这是一个不寻常的用例）。'
- en: The source of enumerated values may be a list of string values, or alternatively
    a PEP-435-compliant enumerated class. For the purposes of the [`Enum`](#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype, this class need only provide a `__members__`
    method.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举值的来源可以是字符串值列表，或者是符合 PEP-435 的枚举类。对于 [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    数据类型，此类只需要提供一个 `__members__` 方法即可。
- en: 'When using an enumerated class, the enumerated objects are used both for input
    and output, rather than strings as is the case with a plain-string enumerated
    type:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用枚举类时，枚举对象用于输入和输出，而不是字符串，就像普通字符串枚举类型一样：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Above, the string names of each element, e.g. “one”, “two”, “three”, are persisted
    to the database; the values of the Python Enum, here indicated as integers, are
    **not** used; the value of each enum can therefore be any kind of Python object
    whether or not it is persistable.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，每个元素的字符串名称（例如“one”、“two”、“three”）都会被持久化到数据库中；Python 枚举的值，这里表示为整数，**不会**被使用；因此，每个枚举的值可以是任何类型的
    Python 对象，无论它是否可持久化。
- en: 'In order to persist the values and not the names, the [`Enum.values_callable`](#sqlalchemy.types.Enum.params.values_callable
    "sqlalchemy.types.Enum") parameter may be used. The value of this parameter is
    a user-supplied callable, which is intended to be used with a PEP-435-compliant
    enumerated class and returns a list of string values to be persisted. For a simple
    enumeration that uses string values, a callable such as `lambda x: [e.value for
    e in x]` is sufficient.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '为了持久化值而不是名称，可以使用 [`Enum.values_callable`](#sqlalchemy.types.Enum.params.values_callable
    "sqlalchemy.types.Enum") 参数。该参数的值是一个用户提供的可调用对象，旨在与符合 PEP-435 的枚举类一起使用，并返回要持久化的字符串值列表。对于使用字符串值的简单枚举，像
    `lambda x: [e.value for e in x]` 这样的可调用对象就足够了。'
- en: See also
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Using Python Enum or pep-586 Literal types in the type map](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)
    - background on using the [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    datatype with the ORM’s [ORM Annotated Declarative](../orm/declarative_tables.html#orm-declarative-mapped-column)
    feature.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[在类型映射中使用 Python 枚举或 pep-586 Literal 类型](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)
    - 使用 ORM 的 [ORM 注释声明](../orm/declarative_tables.html#orm-declarative-mapped-column)
    功能时，关于在类型映射中使用 [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 数据类型的背景信息。'
- en: '[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    - PostgreSQL-specific type, which has additional functionality.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    - PostgreSQL 特定类型，具有额外的功能。'
- en: '[`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    - MySQL-specific type'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    - MySQL 特定类型'
- en: '**Members**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Enum.__init__), [create()](#sqlalchemy.types.Enum.create),
    [drop()](#sqlalchemy.types.Enum.drop)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Enum.__init__), [create()](#sqlalchemy.types.Enum.create),
    [drop()](#sqlalchemy.types.Enum.drop)'
- en: '**Class signature**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"),
    [`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType"),
    `sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")（[`sqlalchemy.types.String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")，[`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")，`sqlalchemy.types.Emulated`，[`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Construct an enum.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 构造枚举。
- en: Keyword arguments which don’t apply to a specific backend are ignored by that
    backend.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 不适用于特定后端的关键字参数将被该后端忽略。
- en: 'Parameters:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*enums` – either exactly one PEP-435 compliant enumerated type or one or more
    string labels.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*enums` – 要么正好一个符合 PEP-435 标准的枚举类型，要么一个或多个字符串标签。'
- en: '`create_constraint` –'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. When creating a non-native enumerated type, also build a
    CHECK constraint on the database against the valid values.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。创建非本地枚举类型时，还在数据库上构建 CHECK 约束以针对有效值。
- en: Note
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Enum.name`](#sqlalchemy.types.Enum.params.name "sqlalchemy.types.Enum")
    parameter or by setting up an appropriate naming convention; see [Configuring
    Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议为 CHECK 约束指定显式名称，以支持模式管理方面的问题。这可以通过设置 [`Enum.name`](#sqlalchemy.types.Enum.params.name
    "sqlalchemy.types.Enum") 参数或设置适当的命名约定来实现；有关背景，请参见[配置约束命名约定](constraints.html#constraint-naming-conventions)。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 1.4 更改： - 此标志现在默认为 False，意味着对非本地枚举类型不会生成 CHECK 约束。
- en: '`metadata` –'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` –'
- en: Associate this type directly with a `MetaData` object. For types that exist
    on the target database as an independent schema construct (PostgreSQL), this type
    will be created and dropped within `create_all()` and `drop_all()` operations.
    If the type is not associated with any `MetaData` object, it will associate itself
    with each `Table` in which it is used, and will be created when any of those individual
    tables are created, after a check is performed for its existence. The type is
    only dropped when `drop_all()` is called for that `Table` object’s metadata, however.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此类型直接关联到 `MetaData` 对象。对于作为独立模式构造存在于目标数据库上的类型（如 PostgreSQL），此类型将在 `create_all()`
    和 `drop_all()` 操作中创建和删除。如果该类型未与任何 `MetaData` 对象相关联，则它将与使用它的每个 `Table` 相关联，并且将在创建任何这些单独表时创建，并在检查其存在后创建。但是，仅在对该
    `Table` 对象的元数据调用 `drop_all()` 时才会删除该类型。
- en: The value of the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object, if set, will be used as the default value
    of the [`Enum.schema`](#sqlalchemy.types.Enum.params.schema "sqlalchemy.types.Enum")
    on this object if an explicit value is not otherwise supplied.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果设置了[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象的 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数的值，并且未显式提供值，则将使用该对象上的 [`Enum.schema`](#sqlalchemy.types.Enum.params.schema
    "sqlalchemy.types.Enum") 的默认值。
- en: 'Changed in version 1.4.12: [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    inherits the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object if present, when passed using the [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum") parameter.'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 1.4.12 更改：[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 如果传递使用[`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum") 参数时继承 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象的[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数（如果存在）。
- en: '`name` – The name of this type. This is required for PostgreSQL and any future
    supported database which requires an explicitly named type, or an explicitly named
    constraint in order to generate the type and/or a table that uses it. If a PEP-435
    enumerated class was used, its name (converted to lower case) is used by default.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 此类型的名称。这对于 PostgreSQL 和任何将来需要显式命名类型或显式命名约束以生成使用它的类型和/或表的支持数据库是必需的。如果使用了
    PEP-435 枚举类，则默认情况下使用其名称（转换为小写）。'
- en: '`native_enum` – Use the database’s native ENUM type when available. Defaults
    to True. When False, uses VARCHAR + check constraint for all backends. When False,
    the VARCHAR length can be controlled with [`Enum.length`](#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum"); currently “length” is ignored if native_enum=True.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`native_enum` – 在可用时使用数据库的本机 ENUM 类型。默认为 True。当为 False 时，对所有后端使用 VARCHAR +
    检查约束。当为 False 时，如果 native_enum=True，则“length”将被忽略。'
- en: '`length` –'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` –'
- en: Allows specifying a custom length for the VARCHAR when a non-native enumeration
    datatype is used. By default it uses the length of the longest value.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许在使用非本机枚举数据类型时为 VARCHAR 指定自定义长度。默认情况下，它使用最长值的长度。
- en: 'Changed in version 2.0.0: The [`Enum.length`](#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") parameter is used unconditionally for `VARCHAR` rendering
    regardless of the [`Enum.native_enum`](#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") parameter, for those backends where `VARCHAR` is used
    for enumerated datatypes.'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0.0 开始更改：无条件地使用 [`Enum.length`](#sqlalchemy.types.Enum.params.length "sqlalchemy.types.Enum")
    参数进行 `VARCHAR` 渲染，而不管 [`Enum.native_enum`](#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") 参数的设置情况，对于那些使用 `VARCHAR` 作为枚举数据类型的后端。
- en: '`schema` –'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: Schema name of this type. For types that exist on the target database as an
    independent schema construct (PostgreSQL), this parameter specifies the named
    schema in which the type is present.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此类型的模式名称。对于作为独立模式构造存在于目标数据库上的类型（PostgreSQL），此参数指定了类型存在的命名模式。
- en: If not present, the schema name will be taken from the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection if passed as [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum"), for a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") that includes the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果不存在，则在传递为 [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata "sqlalchemy.types.Enum")
    的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    中获取模式名称，对于包含 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")。
- en: 'Changed in version 1.4.12: [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    inherits the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object if present, when passed using the [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum") parameter.'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4.12 开始更改：如果使用 [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum") 参数传递，则 [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    继承了 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象的 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数（如果存在）。
- en: Otherwise, if the [`Enum.inherit_schema`](#sqlalchemy.types.Enum.params.inherit_schema
    "sqlalchemy.types.Enum") flag is set to `True`, the schema will be inherited from
    the associated [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object if any; when [`Enum.inherit_schema`](#sqlalchemy.types.Enum.params.inherit_schema
    "sqlalchemy.types.Enum") is at its default of `False`, the owning table’s schema
    is **not** used.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则，如果[`Enum.inherit_schema`](#sqlalchemy.types.Enum.params.inherit_schema "sqlalchemy.types.Enum")标志设置为`True`，则模式将从相关的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象继承，如果有的话；当[`Enum.inherit_schema`](#sqlalchemy.types.Enum.params.inherit_schema
    "sqlalchemy.types.Enum")处于默认值`False`时，不使用所属表的模式。
- en: '`quote` – Set explicit quoting preferences for the type’s name.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` – 为类型的名称设置明确的引用首选项。'
- en: '`inherit_schema` – When `True`, the “schema” from the owning [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will be copied to the “schema” attribute of this [`Enum`](#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), replacing whatever value was passed for the `schema`
    attribute. This also takes effect when using the [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") operation.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inherit_schema` – 当为 `True` 时，将从所属 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的“schema”复制到此 [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    的“schema”属性中，替换传递给 `schema` 属性的任何值。这也会在使用 [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 操作时生效。'
- en: '`validate_strings` – when True, string values that are being passed to the
    database in a SQL statement will be checked for validity against the list of enumerated
    values. Unrecognized values will result in a `LookupError` being raised.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate_strings` – 当为 True 时，将传递给 SQL 语句的字符串值将被检查是否有效。未识别的值将引发 `LookupError`。'
- en: '`values_callable` –'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values_callable` –'
- en: 'A callable which will be passed the PEP-435 compliant enumerated type, which
    should then return a list of string values to be persisted. This allows for alternate
    usages such as using the string value of an enum to be persisted to the database
    instead of its name. The callable must return the values to be persisted in the
    same order as iterating through the Enum’s `__member__` attribute. For example
    `lambda x: [i.value for i in x]`.'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '一个可调用对象，将传递符合 PEP-435 的枚举类型，然后应返回要持久化的字符串值列表。这允许替代用法，例如使用枚举的字符串值而不是其名称持久化到数据库中。可调用对象必须以与迭代枚举的
    `__member__` 属性相同的顺序返回要持久化的值。例如 `lambda x: [i.value for i in x]`。'
- en: New in version 1.2.3.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.2.3 起新增。
- en: '`sort_key_function` –'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_key_function` –'
- en: a Python callable which may be used as the “key” argument in the Python `sorted()`
    built-in. The SQLAlchemy ORM requires that primary key columns which are mapped
    must be sortable in some way. When using an unsortable enumeration object such
    as a Python 3 `Enum` object, this parameter may be used to set a default sort
    key function for the objects. By default, the database value of the enumeration
    is used as the sorting function.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以作为 Python `sorted()` 内置函数中的“key”参数使用的 Python 可调用对象。SQLAlchemy ORM 要求映射的主键列必须以某种方式可排序。当使用不可排序的枚举对象，如
    Python 3 的 `Enum` 对象时，可以使用此参数为对象设置默认的排序键函数。默认情况下，枚举的数据库值被用作排序函数。
- en: New in version 1.3.8.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.3.8 起新增。
- en: '`omit_aliases` –'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`omit_aliases` –'
- en: A boolean that when true will remove aliases from pep 435 enums. defaults to
    `True`.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 true 时，将从 pep 435 枚举中删除别名的布尔值。默认为 `True`。
- en: 'Changed in version 2.0: This parameter now defaults to True.'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 2.0 起更改：此参数现在默认为 True。
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*inherited from the* [`SchemaType.create()`](#sqlalchemy.types.SchemaType.create
    "sqlalchemy.types.SchemaType.create") *method of* [`SchemaType`](#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaType.create()`](#sqlalchemy.types.SchemaType.create "sqlalchemy.types.SchemaType.create")
    *方法的* [`SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")'
- en: Issue CREATE DDL for this type, if applicable.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如适用，为此类型发出 CREATE DDL。
- en: '[PRE22]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '*inherited from the* [`SchemaType.drop()`](#sqlalchemy.types.SchemaType.drop
    "sqlalchemy.types.SchemaType.drop") *method of* [`SchemaType`](#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaType.drop()`](#sqlalchemy.types.SchemaType.drop "sqlalchemy.types.SchemaType.drop")
    *方法的* [`SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")'
- en: Issue DROP DDL for this type, if applicable.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如适用，为此类型发出 DROP DDL。
- en: '[PRE23]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: A type for double `FLOAT` floating point types.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 用于双 `FLOAT` 浮点类型的类型。
- en: Typically generates a `DOUBLE` or `DOUBLE_PRECISION` in DDL, and otherwise acts
    like a normal [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") on the
    Python side.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在 DDL 中生成 `DOUBLE` 或 `DOUBLE_PRECISION`，否则在 Python 方面的行为类似于普通的 [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")。
- en: New in version 2.0.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 起新增。
- en: '**Class signature**'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double")
    ([`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float"))
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double")
    ([`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float"))
- en: '[PRE24]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Type representing floating point types, such as `FLOAT` or `REAL`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 表示浮点类型的类型，例如 `FLOAT` 或 `REAL`。
- en: This type returns Python `float` objects by default, unless the [`Float.asdecimal`](#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") flag is set to `True`, in which case they are coerced
    to `decimal.Decimal` objects.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此类型返回Python `float`对象，除非将[`Float.asdecimal`](#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float")标志设置为`True`，在这种情况下，它们将被强制转换为`decimal.Decimal`对象。
- en: When a [`Float.precision`](#sqlalchemy.types.Float.params.precision "sqlalchemy.types.Float")
    is not provided in a [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    type some backend may compile this type as an 8 bytes / 64 bit float datatype.
    To use a 4 bytes / 32 bit float datatype a precision <= 24 can usually be provided
    or the [`REAL`](#sqlalchemy.types.REAL "sqlalchemy.types.REAL") type can be used.
    This is known to be the case in the PostgreSQL and MSSQL dialects that render
    the type as `FLOAT` that’s in both an alias of `DOUBLE PRECISION`. Other third
    party dialects may have similar behavior.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Float.precision`](#sqlalchemy.types.Float.params.precision "sqlalchemy.types.Float")在[`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")类型中未提供时，某些后端可能将此类型编译为8字节/64位浮点数据类型。要使用4字节/32位浮点数据类型，通常可以提供精度<=
    24，或者可以使用[`REAL`](#sqlalchemy.types.REAL "sqlalchemy.types.REAL")类型。已知在将类型呈现为`FLOAT`的PostgreSQL和MSSQL方言中，这种情况是成立的，这两者都是`DOUBLE
    PRECISION`的别名。其他第三方方言可能具有类似的行为。
- en: '**Members**'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Float.__init__), [result_processor()](#sqlalchemy.types.Float.result_processor)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Float.__init__), [result_processor()](#sqlalchemy.types.Float.result_processor)'
- en: '**Class signature**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    ([`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"))
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")（[`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")）
- en: '[PRE25]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Construct a Float.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个浮点数。
- en: 'Parameters:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于在DDL `CREATE TABLE`中使用的数字精度。后端**应该**尝试确保此精度指示了通用[`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型的数字位数。
- en: Note
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Oracle后端，在渲染DDL时，不接受[`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float")参数，因为Oracle不支持将浮点精度指定为小数位数。相反，请使用特定于Oracle的[`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT")数据类型，并指定[`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")参数。这是SQLAlchemy 2.0版本中的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个数据库通用的[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为Oracle单独指定二进制精度，请使用[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")如下所示：
- en: '[PRE26]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")相同的标志，但默认为`False`。请注意，将此标志设置为`True`会导致浮点数转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在将浮点数转换为 Python 小数时使用的默认精度。由于十进制的不准确性，浮点值通常会更长，而大多数浮点数据库类型没有“精度”的概念，因此默认情况下，当转换时，浮点类型将查找前十位小数。指定此值将覆盖该长度。请注意，如果未另行指定，则
    MySQL 浮点类型将使用“精度”作为`decimal_return_scale`的默认值。'
- en: '[PRE27]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Return a conversion function for processing result row values.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个结果行列值作为唯一的位置参数，并将返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，该方法应返回`None`。
- en: Note
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于一个**方言特定类型对象**调用，该对象通常是**正在使用的方言中的私有对象**，并且不是与公共对象相同的类型对象，这意味着无法子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类以提供替代[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非明确子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供替代行为，请实现[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩充现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`方言` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中接收的 DBAPI coltype 参数。'
- en: '[PRE28]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A type for `int` integers.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 一种适用于`int`整数的类型。
- en: '**Members**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_dbapi_type()](#sqlalchemy.types.Integer.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Integer.literal_processor),
    [python_type](#sqlalchemy.types.Integer.python_type)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_dbapi_type()](#sqlalchemy.types.Integer.get_dbapi_type)，[literal_processor()](#sqlalchemy.types.Integer.literal_processor)，[python_type](#sqlalchemy.types.Integer.python_type)'
- en: '**Class signature**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    (`sqlalchemy.types.HasExpressionLookup`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    (`sqlalchemy.types.HasExpressionLookup`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE29]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，返回底层 DB-API 的相应类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对于调用`setinputsizes()`可能很有用。
- en: '[PRE30]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理直接呈现的字面值的转换函数，而无需使用绑定。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数在编译器使用 “literal_binds” 标志时使用，通常用于 DDL 生成以及在某些后端不接受绑定参数的情况下。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面的 Python 值作为唯一的位置参数，并返回一个字符串表示以在 SQL 语句中呈现。
- en: Note
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于 **特定方言类型对象** 调用，该对象通常是 **特定方言私有的**，并且与公共类型对象不同，这意味着不可能通过子类化 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类来提供替代的 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 方法，除非显式子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 提供替代行为，请实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供 [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 的实现。
- en: See also
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE31]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: A type for `datetime.timedelta()` objects.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 `datetime.timedelta()` 对象的类型。
- en: The Interval type deals with `datetime.timedelta` objects. In PostgreSQL and
    Oracle, the native `INTERVAL` type is used; for others, the value is stored as
    a date which is relative to the “epoch” (Jan. 1, 1970).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Interval 类型处理 `datetime.timedelta` 对象。在 PostgreSQL 和 Oracle 中，使用原生的 `INTERVAL`
    类型；对于其他数据库，该值存储为相对于“epoch”（1970 年 1 月 1 日）的日期。
- en: Note that the `Interval` type does not currently provide date arithmetic operations
    on platforms which do not support interval types natively. Such operations usually
    require transformation of both sides of the expression (such as, conversion of
    both sides into integer epoch values first) which currently is a manual procedure
    (such as via [`expression.func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Interval` 类型当前在不原生支持间隔类型的平台上不提供日期算术操作。这些操作通常需要对表达式的两侧进行转换（例如，首先将两侧转换为整数时期值），目前这是一个手动过程（例如，通过
    [`expression.func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")）。
- en: '**Members**'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Interval.__init__), [adapt_to_emulated()](#sqlalchemy.types.Interval.adapt_to_emulated),
    [bind_processor()](#sqlalchemy.types.Interval.bind_processor), [cache_ok](#sqlalchemy.types.Interval.cache_ok),
    [coerce_compared_value()](#sqlalchemy.types.Interval.coerce_compared_value), [comparator_factory](#sqlalchemy.types.Interval.comparator_factory),
    [impl](#sqlalchemy.types.Interval.impl), [python_type](#sqlalchemy.types.Interval.python_type),
    [result_processor()](#sqlalchemy.types.Interval.result_processor)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Interval.__init__), [adapt_to_emulated()](#sqlalchemy.types.Interval.adapt_to_emulated),
    [bind_processor()](#sqlalchemy.types.Interval.bind_processor), [cache_ok](#sqlalchemy.types.Interval.cache_ok),
    [coerce_compared_value()](#sqlalchemy.types.Interval.coerce_compared_value), [comparator_factory](#sqlalchemy.types.Interval.comparator_factory),
    [impl](#sqlalchemy.types.Interval.impl), [python_type](#sqlalchemy.types.Interval.python_type),
    [result_processor()](#sqlalchemy.types.Interval.result_processor)'
- en: '**Class signature**'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Interval`](#sqlalchemy.types.Interval "sqlalchemy.types.Interval")
    (`sqlalchemy.types.Emulated`, `sqlalchemy.types._AbstractInterval`, [`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Interval`](#sqlalchemy.types.Interval "sqlalchemy.types.Interval")
    (`sqlalchemy.types.Emulated`, `sqlalchemy.types._AbstractInterval`, [`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
- en: '[PRE33]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Class signature**'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Interval.Comparator`](#sqlalchemy.types.Interval.Comparator
    "sqlalchemy.types.Interval.Comparator") (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Interval.Comparator`](#sqlalchemy.types.Interval.Comparator
    "sqlalchemy.types.Interval.Comparator") (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
- en: '[PRE34]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Construct an Interval object.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Interval 对象。
- en: 'Parameters:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`native` – when True, use the actual INTERVAL type provided by the database,
    if supported (currently PostgreSQL, Oracle). Otherwise, represent the interval
    data as an epoch value regardless.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`native` – 当为 True 时，如果支持（目前是 PostgreSQL、Oracle），则使用数据库提供的实际 INTERVAL 类型。否则，无论如何都将间隔数据表示为时代值。'
- en: '`second_precision` – For native interval types which support a “fractional
    seconds precision” parameter, i.e. Oracle and PostgreSQL'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`second_precision` – 对于支持“分秒精度”参数的本机间隔类型，例如 Oracle 和 PostgreSQL'
- en: '`day_precision` – for native interval types which support a “day precision”
    parameter, i.e. Oracle.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`day_precision` – 对于支持“天精度”参数的本机间隔类型，例如 Oracle。'
- en: '[PRE35]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Given an impl class, adapt this type to the impl assuming “emulated”.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 impl 类，将此类型适配到 impl，假设“模拟”。
- en: The impl should also be an “emulated” version of this type, most likely the
    same class as this type itself.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: impl 还应该是此类型的“模拟”版本，很可能是与此类型本身相同的类。
- en: 'e.g.: sqltypes.Enum adapts to the Enum class.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：sqltypes.Enum 适应于 Enum 类。
- en: '[PRE36]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Return a conversion function for processing bind values.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收绑定参数值作为唯一的位置参数，并返回要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常**是正在使用的方言的私有对象**，并且不是公共类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式地对[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类进行子类化。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 正在使用的方言实例。'
- en: '[PRE37]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Indicate if statements using this [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") are “safe to cache”.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 指示使用此[`ExternalType`](type_api.html#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")的语句是否“安全缓存”。
- en: 'The default value `None` will emit a warning and then not allow caching of
    a statement which includes this type. Set to `False` to disable statements using
    this type from being cached at all without a warning. When set to `True`, the
    object’s class and selected elements from its state will be used as part of the
    cache key. For example, using a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '默认值`None`会发出警告，然后不允许缓存包含此类型的语句。设置为`False`以禁用完全不带警告缓存使用此类型的语句。当设置为`True`时，将使用对象的类和其状态的选定元素作为缓存键的一部分。例如，使用[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
- en: '[PRE38]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The cache key for the above type would be equivalent to:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类型的缓存键将等同于：
- en: '[PRE39]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The caching scheme will extract attributes from the type that correspond to
    the names of parameters in the `__init__()` method. Above, the “choices” attribute
    becomes part of the cache key but “internal_only” does not, because there is no
    parameter named “internal_only”.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存方案将从类型中提取与`__init__()`方法中参数名称对应的属性。上面的“choices”属性成为缓存键的一部分，但“internal_only”不会，因为没有名为“internal_only”的参数。
- en: The requirements for cacheable elements is that they are hashable and also that
    they indicate the same SQL rendered for expressions using this type every time
    for a given cache value.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 可缓存元素的要求是它们是可哈希的，并且它们指示对于给定缓存值的表达式每次返回相同的 SQL 渲染。
- en: 'To accommodate for datatypes that refer to unhashable structures such as dictionaries,
    sets and lists, these objects can be made “cacheable” by assigning hashable structures
    to the attributes whose names correspond with the names of the arguments. For
    example, a datatype which accepts a dictionary of lookup values may publish this
    as a sorted series of tuples. Given a previously un-cacheable type as:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应引用不可哈希结构（如字典、集合和列表）的数据类型，这些对象可以通过将可哈希结构分配给与参数名称对应的属性来“可缓存”。例如，一个接受查找值字典的数据类型可以将其发布为排序后的元组序列。假设以前不可缓存的类型如下：
- en: '[PRE40]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Where “lookup” is a dictionary. The type will not be able to generate a cache
    key:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 其中“lookup”是一个字典。该类型将无法生成缓存键：
- en: '[PRE41]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If we **did** set up such a cache key, it wouldn’t be usable. We would get
    a tuple structure that contains a dictionary inside of it, which cannot itself
    be used as a key in a “cache dictionary” such as SQLAlchemy’s statement cache,
    since Python dictionaries aren’t hashable:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们**确实**设置了这样一个缓存键，它将无法使用。我们将得到一个包含字典的元组结构，该字典本身不能用作“缓存字典”中的键，例如 SQLAlchemy
    的语句缓存，因为 Python 字典不可哈希：
- en: '[PRE42]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The type may be made cacheable by assigning a sorted tuple of tuples to the
    “.lookup” attribute:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将排序后的元组分配给“lookup”属性，可以使类型成为可缓存的：
- en: '[PRE43]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Where above, the cache key for `LookupType({"a": 10, "b": 20})` will be:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述情况下，`LookupType({"a": 10, "b": 20})`的缓存键将是：'
- en: '[PRE44]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'New in version 1.4.14: - added the `cache_ok` flag to allow some configurability
    of caching for [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") classes.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.14 中新增：- 添加了 `cache_ok` 标志，以允许对 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类进行某些缓存配置。
- en: 'New in version 1.4.28: - added the [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") mixin which generalizes the `cache_ok` flag to
    both the [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    and [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    classes.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.28 中新增：- 添加了 [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") 混合类，它将 `cache_ok` 标志推广到 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 和 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: See also
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL 编译缓存](connections.html#sql-caching)'
- en: '[PRE45]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Suggest a type for a ‘coerced’ Python value in an expression.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式中为‘coerced’ Python 值建议一个类型。
- en: Given an operator and value, gives the type a chance to return a type which
    the value should be coerced into.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个运算符和值，使类型有机会返回一个值应该被强制转换为的类型。
- en: The default behavior here is conservative; if the right-hand side is already
    coerced into a SQL type based on its Python type, it is usually left alone.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的默认行为是保守的；如果右侧已根据其Python类型强制转换为SQL类型，则通常会保持不变。
- en: End-user functionality extension here should generally be via [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"), which provides more liberal behavior in that
    it defaults to coercing the other side of the expression into this type, thus
    applying special Python conversions above and beyond those needed by the DBAPI
    to both ides. It also provides the public method [`TypeDecorator.coerce_compared_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.coerce_compared_value
    "sqlalchemy.types.TypeDecorator.coerce_compared_value") which is intended for
    end-user customization of this behavior.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的最终用户功能扩展通常应通过 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 实现，该实现具有更宽松的行为，因为它默认将表达式的另一侧强制转换为此类型，从而对除 DBAPI
    需要的特殊 Python 转换之外的内容进行应用。它还提供了 [`TypeDecorator.coerce_compared_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.coerce_compared_value
    "sqlalchemy.types.TypeDecorator.coerce_compared_value") 的公共方法，该方法用于最终用户自定义此行为。
- en: '[PRE46]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: alias of [`Comparator`](#sqlalchemy.types.Interval.Comparator "sqlalchemy.sql.sqltypes.Interval.Comparator")
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 别名 [`Comparator`](#sqlalchemy.types.Interval.Comparator "sqlalchemy.sql.sqltypes.Interval.Comparator")
- en: '[PRE47]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: alias of [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.sql.sqltypes.DateTime")
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 别名 [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.sql.sqltypes.DateTime")
- en: '[PRE48]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Return a conversion function for processing result row values.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个结果行列值作为唯一的位置参数，并将返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，方法应返回`None`。
- en: Note
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 仅相对于**方言特定类型对象**调用此方法，该对象通常**私有于正在使用的方言**，并且与公共面向对象不同，这意味着无法通过子类化 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类来提供替代的 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 方法，除非显式地子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 提供替代行为，实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类并提供 [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 的实现。
- en: See also
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中接收到的 DBAPI coltype 参数。'
- en: '[PRE50]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: A type for large binary byte data.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 用于大型二进制字节数据的类型。
- en: The [`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    type corresponds to a large and/or unlengthed binary type for the target platform,
    such as BLOB on MySQL and BYTEA for PostgreSQL. It also handles the necessary
    conversions for the DBAPI.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    类型对应于目标平台的大型和/或无长度的二进制类型，例如 MySQL 上的 BLOB 和 PostgreSQL 上的 BYTEA。它还处理了 DBAPI 的必要转换。'
- en: '**Members**'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.LargeBinary.__init__)'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.LargeBinary.__init__)'
- en: '**Class signature**'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    (`sqlalchemy.types._Binary`)
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    (`sqlalchemy.types._Binary`)
- en: '[PRE51]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Construct a LargeBinary type.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个大型二进制类型。
- en: 'Parameters:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**长度** – 可选，用于 DDL 语句的列长度，用于那些接受长度的二进制类型，例如 MySQL 的 BLOB 类型。'
- en: '[PRE52]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Refers to the return type of the MATCH operator.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是 MATCH 操作符的返回类型。
- en: As the [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") is probably the most open-ended
    operator in generic SQLAlchemy Core, we can’t assume the return type at SQL evaluation
    time, as MySQL returns a floating point, not a boolean, and other backends might
    do something different. So this type acts as a placeholder, currently subclassing
    [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean"). The type allows
    dialects to inject result-processing functionality if needed, and on MySQL will
    return floating-point values.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 可能是 SQLAlchemy 核心中最开放的运算符，我们不能在
    SQL 评估时假设返回类型，因为 MySQL 返回浮点数而不是布尔值，其他后端可能会执行不同的操作。因此，此类型充当占位符，目前是 [`Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 的子类。该类型允许方言在需要时注入结果处理功能，在 MySQL 上将返回浮点值。
- en: '**Class signature**'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.MatchType`](#sqlalchemy.types.MatchType "sqlalchemy.types.MatchType")
    ([`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean"))
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.MatchType`](#sqlalchemy.types.MatchType "sqlalchemy.types.MatchType")
    ([`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean"))
- en: '[PRE53]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Base for non-integer numeric types, such as `NUMERIC`, `FLOAT`, `DECIMAL`, and
    other variants.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 非整数数字类型的基类，例如 `NUMERIC`、`FLOAT`、`DECIMAL` 和其他变体。
- en: The [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") datatype
    when used directly will render DDL corresponding to precision numerics if available,
    such as `NUMERIC(precision, scale)`. The [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    subclass will attempt to render a floating-point datatype such as `FLOAT(precision)`.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接使用 [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") 数据类型时，如果可用，会呈现对应精度数字的
    DDL，例如 `NUMERIC(precision, scale)`。当使用 [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    子类时，会尝试呈现浮点数据类型，例如 `FLOAT(precision)`。
- en: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") returns Python
    `decimal.Decimal` objects by default, based on the default value of `True` for
    the [`Numeric.asdecimal`](#sqlalchemy.types.Numeric.params.asdecimal "sqlalchemy.types.Numeric")
    parameter. If this parameter is set to False, returned values are coerced to Python
    `float` objects.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") 默认返回 Python
    `decimal.Decimal` 对象，基于 [`Numeric.asdecimal`](#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric") 参数的默认值 `True`。如果此参数设置为 False，则返回的值将被强制转换为 Python `float`
    对象。'
- en: The [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") subtype, being
    more specific to floating point, defaults the [`Float.asdecimal`](#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") flag to False so that the default Python datatype is
    `float`.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") 子类型更具体于浮点数，默认情况下，[`Float.asdecimal`](#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") 标志设置为 False，以便默认的 Python 数据类型为 `float`。'
- en: Note
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using a [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    datatype against a database type that returns Python floating point values to
    the driver, the accuracy of the decimal conversion indicated by [`Numeric.asdecimal`](#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric") may be limited. The behavior of specific numeric/floating
    point datatypes is a product of the SQL datatype in use, the Python [DBAPI](../glossary.html#term-DBAPI)
    in use, as well as strategies that may be present within the SQLAlchemy dialect
    in use. Users requiring specific precision/ scale are encouraged to experiment
    with the available datatypes in order to determine the best results.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 当针对返回 Python 浮点值的数据库类型使用 [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    数据类型时，由 [`Numeric.asdecimal`](#sqlalchemy.types.Numeric.params.asdecimal "sqlalchemy.types.Numeric")
    指示的十进制转换的精度可能受到限制。具体数字/浮点数据类型的行为取决于正在使用的 SQL 数据类型、正在使用的 Python [DBAPI](../glossary.html#term-DBAPI)
    以及在使用的 SQLAlchemy 方言中可能存在的策略。鼓励需要特定精度/比例的用户尝试使用可用数据类型以确定最佳结果。
- en: '**Members**'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Numeric.__init__), [bind_processor()](#sqlalchemy.types.Numeric.bind_processor),
    [get_dbapi_type()](#sqlalchemy.types.Numeric.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Numeric.literal_processor),
    [python_type](#sqlalchemy.types.Numeric.python_type), [result_processor()](#sqlalchemy.types.Numeric.result_processor)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Numeric.__init__), [bind_processor()](#sqlalchemy.types.Numeric.bind_processor),
    [get_dbapi_type()](#sqlalchemy.types.Numeric.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Numeric.literal_processor),
    [python_type](#sqlalchemy.types.Numeric.python_type), [result_processor()](#sqlalchemy.types.Numeric.result_processor)'
- en: '**Class signature**'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    (`sqlalchemy.types.HasExpressionLookup`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    (`sqlalchemy.types.HasExpressionLookup`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE54]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Construct a Numeric.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Numeric。
- en: 'Parameters:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – the numeric precision for use in DDL `CREATE TABLE`.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 用于 DDL `CREATE TABLE` 的数值精度。'
- en: '`scale` – the numeric scale for use in DDL `CREATE TABLE`.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 用于 DDL `CREATE TABLE` 的数值比例。'
- en: '`asdecimal` – default True. Return whether or not values should be sent as
    Python Decimal objects, or as floats. Different DBAPIs send one or the other based
    on datatypes - the Numeric type will ensure that return values are one or the
    other across DBAPIs consistently.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 默认为 True。返回值是否应该作为 Python Decimal 对象发送，还是作为浮点数发送。不同的 DBAPI 根据数据类型发送其中之一
    - Numeric 类型将确保跨 DBAPI 一致地返回值为其中之一。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Types which do include an explicit
    “.scale” value, such as the base [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    as well as the MySQL float types, will use the value of “.scale” as the default
    for decimal_return_scale, if not otherwise specified.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在从浮点数转换为 Python 十进制数时使用的默认精度。由于十进制不精确，浮点值通常会更长，并且大多数浮点数据库类型都没有“精度”的概念，因此默认情况下，浮点类型在转换时会查找前十位小数。指定此值将覆盖该长度。包括显式“.scale”值的类型，例如基本
    [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") 和 MySQL 浮点类型，将使用“.scale”值作为默认的
    decimal_return_scale，如果未另行指定。'
- en: When using the `Numeric` type, care should be taken to ensure that the asdecimal
    setting is appropriate for the DBAPI in use - when Numeric applies a conversion
    from Decimal->float or float-> Decimal, this conversion incurs an additional performance
    overhead for all result columns received.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Numeric` 类型时，应注意确保 asdecimal 设置适用于正在使用的 DBAPI - 当 Numeric 应用从 Decimal->float
    或 float-> Decimal 的转换时，此转换会为接收到的所有结果列产生额外的性能开销。
- en: DBAPIs that return Decimal natively (e.g. psycopg2) will have better accuracy
    and higher performance with a setting of `True`, as the native translation to
    Decimal reduces the amount of floating- point issues at play, and the Numeric
    type itself doesn’t need to apply any further conversions. However, another DBAPI
    which returns floats natively *will* incur an additional conversion overhead,
    and is still subject to floating point data loss - in which case `asdecimal=False`
    will at least remove the extra conversion overhead.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 Decimal 值的 DBAPI（例如 psycopg2）将在设置为`True`时具有更好的精度和更高的性能，因为对 Decimal 的本机转换减少了浮点问题的发生，并且
    Numeric 类型本身不需要进行任何进一步的转换。然而，另一个返回浮点数的 DBAPI 将会产生额外的转换开销，并且仍然可能发生浮点数据丢失 - 在这种情况下，`asdecimal=False`
    至少会消除额外的转换开销。
- en: '[PRE55]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Return a conversion function for processing bind values.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一的位置参数，并返回要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回 `None`。
- en: Note
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**方言特定类型对象**调用，通常**私有于使用的方言**，并且不是与公共类型对象相同的类型对象，这意味着无法简单地通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，需要实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 正在使用的方言实例。'
- en: '[PRE56]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，从底层DB-API返回相应的类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以用于调用`setinputsizes()`。
- en: '[PRE57]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理直接渲染而不使用绑定的文字值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常用于DDL生成以及某些后端不接受绑定参数的情况下，将使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个文字 Python 值作为唯一的位置参数，并返回一个字符串表示，以在 SQL 语句中呈现。
- en: Note
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅针对**方言特定类型对象**，通常**私有于使用的方言**，并且与公共类型对象不同，这意味着无法简单地通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 提供替代行为，需实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供一个 [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 的实现。
- en: See also
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE58]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Return a conversion function for processing result row values.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理结果行值。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个结果行列值作为唯一的位置参数，并将返回一个值以返回给用户。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，该方法应返回 `None`。
- en: Note
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅在**特定方言类型对象**相对调用，该对象通常**是方言中私有的**，并且不是与公共面向用户的对象相同，这意味着无法子类化 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类以提供替代 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 方法，除非显式子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 提供替代行为，需实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供一个 [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 的实现。
- en: See also
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中接收到的 DBAPI coltype 参数。'
- en: '[PRE60]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Holds Python objects, which are serialized using pickle.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 持有由 pickle 序列化的 Python 对象。
- en: PickleType builds upon the Binary type to apply Python’s `pickle.dumps()` to
    incoming objects, and `pickle.loads()` on the way out, allowing any pickleable
    Python object to be stored as a serialized binary field.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: PickleType 是建立在 Binary 类型之上的，它将 Python 的 `pickle.dumps()` 应用于传入的对象，并在传出时应用 `pickle.loads()`，允许任何可
    pickle 的 Python 对象被存储为序列化的二进制字段。
- en: To allow ORM change events to propagate for elements associated with [`PickleType`](#sqlalchemy.types.PickleType
    "sqlalchemy.types.PickleType"), see [Mutation Tracking](../orm/extensions/mutable.html).
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 若要允许与 [`PickleType`](#sqlalchemy.types.PickleType "sqlalchemy.types.PickleType")
    关联的元素的 ORM 更改事件传播，请参见 [变异跟踪](../orm/extensions/mutable.html)。
- en: '**Members**'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.PickleType.__init__), [bind_processor()](#sqlalchemy.types.PickleType.bind_processor),
    [cache_ok](#sqlalchemy.types.PickleType.cache_ok), [compare_values()](#sqlalchemy.types.PickleType.compare_values),
    [impl](#sqlalchemy.types.PickleType.impl), [result_processor()](#sqlalchemy.types.PickleType.result_processor)'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.PickleType.__init__), [bind_processor()](#sqlalchemy.types.PickleType.bind_processor),
    [cache_ok](#sqlalchemy.types.PickleType.cache_ok), [compare_values()](#sqlalchemy.types.PickleType.compare_values),
    [impl](#sqlalchemy.types.PickleType.impl), [result_processor()](#sqlalchemy.types.PickleType.result_processor)'
- en: '**Class signature**'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.PickleType`](#sqlalchemy.types.PickleType "sqlalchemy.types.PickleType")
    ([`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.PickleType`](#sqlalchemy.types.PickleType "sqlalchemy.types.PickleType")（[`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")）
- en: '[PRE61]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Construct a PickleType.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个PickleType。
- en: 'Parameters:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`protocol` – defaults to `pickle.HIGHEST_PROTOCOL`.'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protocol` – 默认为`pickle.HIGHEST_PROTOCOL`。'
- en: '`pickler` – defaults to pickle. May be any object with pickle-compatible `dumps`
    and `loads` methods.'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pickler` – 默认为pickle。可以是具有pickle兼容的`dumps`和`loads`方法的任何对象。'
- en: '`comparator` – a 2-arg callable predicate used to compare values of this type.
    If left as `None`, the Python “equals” operator is used to compare values.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comparator` – 用于比较此类型的值的二元调用谓词。如果保持为`None`，则使用Python的“equals”运算符来比较值。'
- en: '`impl` –'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl` –'
- en: 'A binary-storing [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    class or instance to use in place of the default [`LargeBinary`](#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"). For example the :class: _mysql.LONGBLOB class
    may be more effective when using MySQL.'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '用于替代默认的[`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")的二进制存储[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或实例。例如，在使用MySQL时，:class: _mysql.LONGBLOB类可能更有效。'
- en: New in version 1.4.20.
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.20 中新增。
- en: '[PRE62]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Provide a bound value processing function for the given [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect").
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")提供绑定值处理函数。
- en: This is the method that fulfills the [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") contract for bound value conversion which normally
    occurs via the [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现绑定值转换的[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")合约的方法，通常通过[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法实现。
- en: Note
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: User-defined subclasses of [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") should **not** implement this method, and should
    instead implement [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param") so that the “inner” processing
    provided by the implementing type is maintained.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")子类**不应**实现此方法，而应实现[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")，以便保持实现类型提供的“内部”处理。
- en: 'Parameters:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 正在使用的方言实例。'
- en: '[PRE63]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Indicate if statements using this [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") are “safe to cache”.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 表明使用此[`ExternalType`](type_api.html#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")的语句是否“安全可缓存”。
- en: 'The default value `None` will emit a warning and then not allow caching of
    a statement which includes this type. Set to `False` to disable statements using
    this type from being cached at all without a warning. When set to `True`, the
    object’s class and selected elements from its state will be used as part of the
    cache key. For example, using a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值`None`将发出警告，然后不允许缓存包含此类型的语句。设置为`False`可完全禁用包含此类型的语句的缓存而不发出警告。设置为`True`时，对象的类和其状态的选定元素将用作缓存键的一部分。例如，使用[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")：
- en: '[PRE64]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The cache key for the above type would be equivalent to:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类型的缓存键相当于：
- en: '[PRE65]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The caching scheme will extract attributes from the type that correspond to
    the names of parameters in the `__init__()` method. Above, the “choices” attribute
    becomes part of the cache key but “internal_only” does not, because there is no
    parameter named “internal_only”.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存方案将从与`__init__()`方法中参数名称相对应的类型中提取属性。在上面的示例中，“choices”属性成为缓存键的一部分，但“internal_only”则不是，因为没有名为“internal_only”的参数。
- en: The requirements for cacheable elements is that they are hashable and also that
    they indicate the same SQL rendered for expressions using this type every time
    for a given cache value.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 可缓存元素的要求是它们是可哈希的，并且还要表明每次针对给定缓存值使用此类型的表达式时生成相同的 SQL 渲染。
- en: 'To accommodate for datatypes that refer to unhashable structures such as dictionaries,
    sets and lists, these objects can be made “cacheable” by assigning hashable structures
    to the attributes whose names correspond with the names of the arguments. For
    example, a datatype which accepts a dictionary of lookup values may publish this
    as a sorted series of tuples. Given a previously un-cacheable type as:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应引用不可哈希结构（如字典、集合和列表）的数据类型，可以通过将可哈希结构分配给与参数名称相对应的属性来使这些对象“可缓存”。例如，一个接受查找值字典的数据类型可以将其公开为排序后的元组序列。假设先前不可缓存的类型为：
- en: '[PRE66]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Where “lookup” is a dictionary. The type will not be able to generate a cache
    key:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的“lookup”是一个字典。该类型将无法生成缓存键：
- en: '[PRE67]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'If we **did** set up such a cache key, it wouldn’t be usable. We would get
    a tuple structure that contains a dictionary inside of it, which cannot itself
    be used as a key in a “cache dictionary” such as SQLAlchemy’s statement cache,
    since Python dictionaries aren’t hashable:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们**设置了**这样一个缓存键，它是不能用的。我们会得到一个包含字典的元组结构，其中的字典本身不能作为“缓存字典”（例如 SQLAlchemy 的语句缓存）中的键，因为
    Python 字典不可哈希：
- en: '[PRE68]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The type may be made cacheable by assigning a sorted tuple of tuples to the
    “.lookup” attribute:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将排序后的元组元组分配给“lookup”属性来使类型可缓存：
- en: '[PRE69]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Where above, the cache key for `LookupType({"a": 10, "b": 20})` will be:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述情况下，`LookupType({"a": 10, "b": 20})`的缓存键将是：'
- en: '[PRE70]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'New in version 1.4.14: - added the `cache_ok` flag to allow some configurability
    of caching for [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") classes.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.14 开始：- 添加了`cache_ok`标志，以允许对[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类进行某种缓存配置。
- en: 'New in version 1.4.28: - added the [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") mixin which generalizes the `cache_ok` flag to
    both the [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    and [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    classes.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.28 开始：- 添加了 [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") 混合类型，它将`cache_ok`标志推广到 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 和 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: See also
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL 编译缓存](connections.html#sql-caching)'
- en: '[PRE71]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Given two values, compare them for equality.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个值，比较它们是否相等。
- en: By default this calls upon [`TypeEngine.compare_values()`](type_api.html#sqlalchemy.types.TypeEngine.compare_values
    "sqlalchemy.types.TypeEngine.compare_values") of the underlying “impl”, which
    in turn usually uses the Python equals operator `==`.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这将调用底层“impl”的 [`TypeEngine.compare_values()`](type_api.html#sqlalchemy.types.TypeEngine.compare_values
    "sqlalchemy.types.TypeEngine.compare_values") 方法，而该方法通常使用 Python 等号运算符`==`。
- en: This function is used by the ORM to compare an original-loaded value with an
    intercepted “changed” value, to determine if a net change has occurred.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数由 ORM 用于比较原始加载值与拦截的“更改”值，以确定是否发生了净变化。
- en: '[PRE72]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: alias of [`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.sql.sqltypes.LargeBinary")
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.sql.sqltypes.LargeBinary")
    的别名'
- en: '[PRE73]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Provide a result value processing function for the given [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect").
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    提供结果值处理函数。
- en: This is the method that fulfills the [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") contract for bound value conversion which normally
    occurs via the [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 方法正常发生的绑定值转换的方法，用于实现 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 合约的方法。
- en: Note
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: User-defined subclasses of [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") should **not** implement this method, and should
    instead implement [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") so that the “inner” processing
    provided by the implementing type is maintained.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 用户自定义的 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    的子类**不应该**实现这个方法，而应该实现 [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 方法，以便保持实现类型提供的“内部”处理。
- en: 'Parameters:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – A SQLAlchemy data type'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 一个 SQLAlchemy 数据类型'
- en: '[PRE74]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Add capabilities to a type which allow for schema-level DDL to be associated
    with a type.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 为类型添加允许与类型关联的模式级 DDL 的功能。
- en: Supports types that must be explicitly created/dropped (i.e. PG ENUM type) as
    well as types that are complimented by table or schema level constraints, triggers,
    and other rules.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 支持必须显式创建/删除的类型（例如 PG ENUM 类型），以及受表或模式级约束、触发器和其他规则补充的类型。
- en: '[`SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    classes can also be targets for the [`DDLEvents.before_parent_attach()`](events.html#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach") and [`DDLEvents.after_parent_attach()`](events.html#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach") events, where the events fire
    off surrounding the association of the type object with a parent [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    类还可以成为 [`DDLEvents.before_parent_attach()`](events.html#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach") 和 [`DDLEvents.after_parent_attach()`](events.html#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach") 事件的目标，这些事件在类型对象与父 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联时触发。 '
- en: See also
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")'
- en: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")'
- en: '**Members**'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[adapt()](#sqlalchemy.types.SchemaType.adapt), [copy()](#sqlalchemy.types.SchemaType.copy),
    [create()](#sqlalchemy.types.SchemaType.create), [drop()](#sqlalchemy.types.SchemaType.drop),
    [name](#sqlalchemy.types.SchemaType.name)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[adapt()](#sqlalchemy.types.SchemaType.adapt), [copy()](#sqlalchemy.types.SchemaType.copy),
    [create()](#sqlalchemy.types.SchemaType.create), [drop()](#sqlalchemy.types.SchemaType.drop),
    [name](#sqlalchemy.types.SchemaType.name)'
- en: '**Class signature**'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, `sqlalchemy.types.TypeEngineMixin`)
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")（`sqlalchemy.sql.expression.SchemaEventTarget`,
    `sqlalchemy.types.TypeEngineMixin`）
- en: '[PRE75]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Issue CREATE DDL for this type, if applicable.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 如适用，请为此类型生成 CREATE DDL。
- en: '[PRE78]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Issue DROP DDL for this type, if applicable.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 如适用，请为此类型生成 DROP DDL。
- en: '[PRE79]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: A type for smaller `int` integers.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 用于较小的 `int` 整数的类型。
- en: Typically generates a `SMALLINT` in DDL, and otherwise acts like a normal [`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") on the Python side.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在 DDL 中生成 `SMALLINT`，在 Python 端的行为与普通的 [`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 类型相似。
- en: '**Class signature**'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger")（[`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")）
- en: '[PRE81]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The base for all string and character types.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 所有字符串和字符类型的基类。
- en: In SQL, corresponds to VARCHAR.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，对应于 VARCHAR。
- en: The length field is usually required when the String type is used within a CREATE
    TABLE statement, as VARCHAR requires a length on most databases.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 当在CREATE TABLE语句中使用String类型时，通常需要长度字段，因为大多数数据库都要求VARCHAR指定长度。
- en: '**Members**'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.String.__init__), [bind_processor()](#sqlalchemy.types.String.bind_processor),
    [get_dbapi_type()](#sqlalchemy.types.String.get_dbapi_type), [literal_processor()](#sqlalchemy.types.String.literal_processor),
    [python_type](#sqlalchemy.types.String.python_type), [result_processor()](#sqlalchemy.types.String.result_processor)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.String.__init__), [bind_processor()](#sqlalchemy.types.String.bind_processor),
    [get_dbapi_type()](#sqlalchemy.types.String.get_dbapi_type), [literal_processor()](#sqlalchemy.types.String.literal_processor),
    [python_type](#sqlalchemy.types.String.python_type), [result_processor()](#sqlalchemy.types.String.result_processor)'
- en: '**Class signature**'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String")
    ([`sqlalchemy.types.Concatenable`](type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String")
    ([`sqlalchemy.types.Concatenable`](type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE82]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Create a string-holding type.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串持有类型。
- en: 'Parameters:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，列的长度，用于DDL和CAST表达式。如果不会发出`CREATE TABLE`，可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的VARCHAR，则在发出`CREATE
    TABLE` DDL时将引发异常。值是以字节还是字符解释的是与数据库相关的。'
- en: '`collation` –'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行渲染。例如：
- en: '[PRE83]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Note
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE84]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Return a conversion function for processing bind values.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一的位置参数，并返回一个要发送到DB-API的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则方法应返回`None`。
- en: Note
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于**方言特定类型对象**调用，该对象通常**是正在使用的方言的私有对象**，并且不是公共类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 提供替代行为，请实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供 [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param") 的实现。
- en: See also
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 使用的方言实例。'
- en: '[PRE85]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，从底层 DB-API 返回相应的类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对于调用 `setinputsizes()` 很有用。
- en: '[PRE86]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理直接呈现而不使用绑定的文字值的转换函数。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常用于 DDL 生成以及在某些后端不接受绑定参数的情况下使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个原始的 Python 值作为唯一的位置参数，并返回一个字符串表示，用于在 SQL 语句中呈现。
- en: Note
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅针对**特定方言类型对象**调用，该对象通常是**使用的方言私有**，并且不是公共类型对象，这意味着无法子类化 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类以提供替代 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 方法，除非显式子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 提供替代行为，请实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供 [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 的实现。
- en: See also
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE87]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Return a conversion function for processing result row values.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个结果行列值作为唯一的位置参数，并返回一个值以返回给用户。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，该方法应返回 `None`。
- en: Note
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定于方言的类型对象**调用，该对象通常是特定方言中**私有的**，并且不是与公共接口相同的类型对象，这意味着不可通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供备用的[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供备用行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在cursor.description中收到的DBAPI coltype参数。'
- en: '[PRE89]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: A variably sized string type.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 可变大小的字符串类型。
- en: In SQL, usually corresponds to CLOB or TEXT. In general, TEXT objects do not
    have a length; while some databases will accept a length argument here, it will
    be rejected by others.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，通常对应于CLOB或TEXT。一般而言，TEXT对象没有长度；虽然某些数据库将在此处接受长度参数，但其他数据库将拒绝它。
- en: '**Class signature**'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text")（[`sqlalchemy.types.String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")）
- en: '[PRE90]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: A type for `datetime.time()` objects.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`datetime.time()`对象的类型。
- en: '**Members**'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_dbapi_type()](#sqlalchemy.types.Time.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Time.literal_processor),
    [python_type](#sqlalchemy.types.Time.python_type)'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_dbapi_type()](#sqlalchemy.types.Time.get_dbapi_type)，[literal_processor()](#sqlalchemy.types.Time.literal_processor)，[python_type](#sqlalchemy.types.Time.python_type)'
- en: '**Class signature**'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Time`](#sqlalchemy.types.Time "sqlalchemy.types.Time")
    (`sqlalchemy.types._RenderISO8601NoT`, `sqlalchemy.types.HasExpressionLookup`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Time`](#sqlalchemy.types.Time "sqlalchemy.types.Time")（`sqlalchemy.types._RenderISO8601NoT`，`sqlalchemy.types.HasExpressionLookup`，[`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE91]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，从底层DB-API返回相应的类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对于调用`setinputsizes()`可能很有用。
- en: '[PRE92]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理字面值的转换函数，这些字面值将直接呈现，而不使用绑定。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时使用此函数，通常在DDL生成以及某些后端不接受绑定参数的情况下使用。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面的Python值作为唯一的位置参数，并返回一个要在SQL语句中呈现的字符串表示。
- en: Note
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于**特定方言的类型对象**调用，该对象通常**私有于正在使用的方言**，并且与公共面向的类型对象不同，这意味着无法子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类以提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE93]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: A variable length Unicode string type.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 变长Unicode字符串类型。
- en: The [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") type is
    a [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") subclass that
    assumes input and output strings that may contain non-ASCII characters, and for
    some backends implies an underlying column type that is explicitly supporting
    of non-ASCII data, such as `NVARCHAR` on Oracle and SQL Server. This will impact
    the output of `CREATE TABLE` statements and `CAST` functions at the dialect level.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")类型是一个[`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")子类，假定输入和输出字符串可能包含非ASCII字符，并且对于一些后端，暗示着明确支持非ASCII数据的底层列类型，比如在Oracle和SQL
    Server上的`NVARCHAR`。这将影响方言级别的`CREATE TABLE`语句和`CAST`函数的输出。'
- en: The character encoding used by the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    type that is used to transmit and receive data to the database is usually determined
    by the DBAPI itself. All modern DBAPIs accommodate non-ASCII strings but may have
    different methods of managing database encodings; if necessary, this encoding
    should be configured as detailed in the notes for the target DBAPI in the [Dialects](../dialects/index.html)
    section.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中用于传输和接收数据的[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")类型使用的字符编码通常由DBAPI本身确定。所有现代DBAPI都支持非ASCII字符串，但可能具有不同的管理数据库编码的方法；如有必要，应按照[Dialects](../dialects/index.html)部分目标DBAPI的注意事项进行配置。
- en: In modern SQLAlchemy, use of the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    datatype does not imply any encoding/decoding behavior within SQLAlchemy itself.
    In Python 3, all string objects are inherently Unicode capable, and SQLAlchemy
    does not produce bytestring objects nor does it accommodate a DBAPI that does
    not return Python Unicode objects in result sets for string values.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代SQLAlchemy中，使用[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")数据类型不意味着SQLAlchemy本身具有任何编码/解码行为。在Python
    3中，所有字符串对象都具有Unicode功能，并且SQLAlchemy不会生成字节字符串对象，也不会适应不返回Python Unicode对象作为字符串值结果集的DBAPI。
- en: Warning
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Some database backends, particularly SQL Server with pyodbc, are known to have
    undesirable behaviors regarding data that is noted as being of `NVARCHAR` type
    as opposed to `VARCHAR`, including datatype mismatch errors and non-use of indexes.
    See the section on [`DialectEvents.do_setinputsizes()`](events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes") for background on working
    around unicode character issues for backends like SQL Server with pyodbc as well
    as cx_Oracle.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库后端，特别是使用 pyodbc 的 SQL Server，已知存在与被标记为 `NVARCHAR` 类型而不是 `VARCHAR` 类型的数据相关的不良行为，包括数据类型不匹配错误和不使用索引。
    有关解决像 SQL Server 与 pyodbc 以及 cx_Oracle 这样的后端的 Unicode 字符问题的背景信息，请参阅关于 [`DialectEvents.do_setinputsizes()`](events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes") 的部分。
- en: See also
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    - unlengthed textual counterpart to [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode").'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    - 与 [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 相对应的无长度文本类型。'
- en: '[`DialectEvents.do_setinputsizes()`](events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes")'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_setinputsizes()`](events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes")'
- en: '**Class signature**'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
- en: '[PRE95]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: An unbounded-length Unicode string type.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 一个无界限长度的 Unicode 字符串类型。
- en: See [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") for details
    on the unicode behavior of this object.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 参阅 [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 以了解此对象的
    Unicode 行为详细信息。
- en: Like [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode"), usage
    the [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    type implies a unicode-capable type being used on the backend, such as `NCLOB`,
    `NTEXT`.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 类似，使用 [`UnicodeText`](#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") 类型意味着在后端使用 Unicode 能力类型，如 `NCLOB`、`NTEXT`。
- en: '**Class signature**'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
- en: '[PRE96]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Represent a database agnostic UUID datatype.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数据库无关的 UUID 数据类型。
- en: For backends that have no “native” UUID datatype, the value will make use of
    `CHAR(32)` and store the UUID as a 32-character alphanumeric hex string.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有“本地”UUID数据类型的后端，该值将使用 `CHAR(32)` 并将 UUID 作为32个字符的字母数字十六进制字符串进行存储。
- en: For backends which are known to support `UUID` directly or a similar uuid-storing
    datatype such as SQL Server’s `UNIQUEIDENTIFIER`, a “native” mode enabled by default
    allows these types will be used on those backends.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已知直接支持 `UUID` 或类似的 uuid 存储数据类型（例如 SQL Server 的 `UNIQUEIDENTIFIER`）的后端，启用默认的“本地”模式将允许在这些后端使用这些类型。
- en: 'In its default mode of use, the [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    datatype expects **Python uuid objects**, from the Python [uuid](https://docs.python.org/3/library/uuid.html)
    module:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 在其默认使用模式下，[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") 数据类型期望来自
    Python [uuid](https://docs.python.org/3/library/uuid.html) 模块的**Python uuid 对象**：
- en: '[PRE97]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: To have the [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") datatype
    work with string-based Uuids (e.g. 32 character hexadecimal strings), pass the
    [`Uuid.as_uuid`](#sqlalchemy.types.Uuid.params.as_uuid "sqlalchemy.types.Uuid")
    parameter with the value `False`.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 要使 [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") 数据类型与基于字符串的 Uuid（例如
    32 字符十六进制字符串）配合使用，传递 [`Uuid.as_uuid`](#sqlalchemy.types.Uuid.params.as_uuid "sqlalchemy.types.Uuid")
    参数，并将值设为 `False`。
- en: New in version 2.0.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") - represents exactly
    the `UUID` datatype without any backend-agnostic behaviors.'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") - 表示没有任何后端不可知行为的 `UUID`
    数据类型。'
- en: '**Members**'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Uuid.__init__), [bind_processor()](#sqlalchemy.types.Uuid.bind_processor),
    [coerce_compared_value()](#sqlalchemy.types.Uuid.coerce_compared_value), [literal_processor()](#sqlalchemy.types.Uuid.literal_processor),
    [python_type](#sqlalchemy.types.Uuid.python_type), [result_processor()](#sqlalchemy.types.Uuid.result_processor)'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Uuid.__init__), [bind_processor()](#sqlalchemy.types.Uuid.bind_processor),
    [coerce_compared_value()](#sqlalchemy.types.Uuid.coerce_compared_value), [literal_processor()](#sqlalchemy.types.Uuid.literal_processor),
    [python_type](#sqlalchemy.types.Uuid.python_type), [result_processor()](#sqlalchemy.types.Uuid.result_processor)'
- en: '**Class signature**'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    (`sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    (`sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE98]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Construct a [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") type.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") 类型。
- en: 'Parameters:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`as_uuid=True` –'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_uuid=True` –'
- en: if True, values will be interpreted as Python uuid objects, converting to/from
    string via the DBAPI.
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则将值解释为 Python uuid 对象，通过 DBAPI 转换为/从字符串。
- en: '`native_uuid=True` – if True, backends that support either the `UUID` datatype
    directly, or a UUID-storing value (such as SQL Server’s `UNIQUEIDENTIFIER` will
    be used by those backends. If False, a `CHAR(32)` datatype will be used for all
    backends regardless of native support.'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`native_uuid=True` – 如果为 True，则支持直接的 `UUID` 数据类型或存储 UUID 值的后端（例如 SQL Server
    的 `UNIQUEIDENTIFIER`）将使用这些后端。如果为 False，则对于所有后端都将使用 `CHAR(32)` 数据类型，而不管原生支持情况。'
- en: '[PRE99]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Return a conversion function for processing bind values.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理绑定值。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个绑定参数值作为唯一的位置参数，并返回一个要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回 `None`。
- en: Note
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于一个**特定方言的类型对象**调用，该对象通常**是正在使用的方言的私有对象**，并且不是与公共类型对象相同的类型对象，这意味着不可通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供备用 [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 方法，除非明确子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 提供替代行为，请实现 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类并提供 [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param") 的实现。
- en: See also
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 正在使用的方言实例。'
- en: '[PRE100]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: See [`TypeEngine.coerce_compared_value()`](type_api.html#sqlalchemy.types.TypeEngine.coerce_compared_value
    "sqlalchemy.types.TypeEngine.coerce_compared_value") for a description.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 有关说明，请参阅 [`TypeEngine.coerce_compared_value()`](type_api.html#sqlalchemy.types.TypeEngine.coerce_compared_value
    "sqlalchemy.types.TypeEngine.coerce_compared_value")。
- en: '[PRE101]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理要直接渲染而不使用绑定的文本值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，将使用此函数，通常在DDL生成以及后端不接受绑定参数的某些情况下使用。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面Python值作为唯一位置参数，并返回要在SQL语句中呈现的字符串表示。
- en: Note
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言的类型对象**调用，该对象通常是**正在使用的方言的私有对象**，并且不是与公共类型对象相同的类型对象，这意味着无法通过子类化
    [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    类来提供替代 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 方法，除非显式地子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 提供替代行为，实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类并提供 [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 的实现。
- en: See also
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE102]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Return a conversion function for processing result row values.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收结果行列值作为唯一位置参数，并将返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言的类型对象**调用，该对象通常是**正在使用的方言的私有对象**，并且不是与公共类型对象相同的类型对象，这意味着无法通过子类化
    [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    类来提供替代 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 方法，除非显式地子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 提供替代行为，实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类并提供 [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 的实现。
- en: See also
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`方言` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.  ## SQL
    Standard and Multiple Vendor “UPPERCASE” Types'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中接收的 DBAPI coltype 参数。## SQL 标准和多厂商“大写”类型'
- en: This category of types refers to types that are either part of the SQL standard,
    or are potentially found within a subset of database backends. Unlike the “generic”
    types, the SQL standard/multi-vendor types have **no** guarantee of working on
    all backends, and will only work on those backends that explicitly support them
    by name. That is, the type will always emit its exact name in DDL with `CREATE
    TABLE` is issued.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 这类类型指的是那些要么是 SQL 标准的一部分，要么可能在一些数据库后端的子集中找到的类型。与“通用”类型不同，SQL 标准/多厂商类型**没有**保证在所有后端上工作，并且只会在那些明确以名称支持它们的后端上工作。也就是说，当发出
    `CREATE TABLE` 时，该类型将始终以其确切名称在 DDL 中发出。
- en: '| Object Name | Description |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
  zh: 对象名称 | 描述 |
- en: '| --- | --- |'
  id: totrans-651
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ARRAY](#sqlalchemy.types.ARRAY) | Represent a SQL Array type. |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
  zh: '| [数组](#sqlalchemy.types.ARRAY) | 表示 SQL 数组类型。 |'
- en: '| [BIGINT](#sqlalchemy.types.BIGINT) | The SQL BIGINT type. |'
  id: totrans-653
  prefs: []
  type: TYPE_TB
  zh: '| [大整数](#sqlalchemy.types.BIGINT) | SQL BIGINT 类型。 |'
- en: '| [BINARY](#sqlalchemy.types.BINARY) | The SQL BINARY type. |'
  id: totrans-654
  prefs: []
  type: TYPE_TB
  zh: '| [BINARY](#sqlalchemy.types.BINARY) | SQL BINARY 类型。 |'
- en: '| [BLOB](#sqlalchemy.types.BLOB) | The SQL BLOB type. |'
  id: totrans-655
  prefs: []
  type: TYPE_TB
  zh: '| [BLOB](#sqlalchemy.types.BLOB) | SQL BLOB 类型。 |'
- en: '| [BOOLEAN](#sqlalchemy.types.BOOLEAN) | The SQL BOOLEAN type. |'
  id: totrans-656
  prefs: []
  type: TYPE_TB
  zh: '| [布尔型](#sqlalchemy.types.BOOLEAN) | SQL 布尔类型。 |'
- en: '| [CHAR](#sqlalchemy.types.CHAR) | The SQL CHAR type. |'
  id: totrans-657
  prefs: []
  type: TYPE_TB
  zh: '| [CHAR](#sqlalchemy.types.CHAR) | SQL CHAR 类型。 |'
- en: '| [CLOB](#sqlalchemy.types.CLOB) | The CLOB type. |'
  id: totrans-658
  prefs: []
  type: TYPE_TB
  zh: '| [CLOB](#sqlalchemy.types.CLOB) | CLOB 类型。 |'
- en: '| [DATE](#sqlalchemy.types.DATE) | The SQL DATE type. |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
  zh: '| [日期](#sqlalchemy.types.DATE) | SQL DATE 类型。 |'
- en: '| [DATETIME](#sqlalchemy.types.DATETIME) | The SQL DATETIME type. |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
  zh: '| [日期时间](#sqlalchemy.types.DATETIME) | SQL DATETIME 类型。 |'
- en: '| [DECIMAL](#sqlalchemy.types.DECIMAL) | The SQL DECIMAL type. |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
  zh: '| [十进制](#sqlalchemy.types.DECIMAL) | SQL DECIMAL 类型。 |'
- en: '| [DOUBLE](#sqlalchemy.types.DOUBLE) | The SQL DOUBLE type. |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| [双精度](#sqlalchemy.types.DOUBLE) | SQL DOUBLE 类型。 |'
- en: '| [DOUBLE_PRECISION](#sqlalchemy.types.DOUBLE_PRECISION) | The SQL DOUBLE PRECISION
    type. |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
  zh: '| [双精度浮点数](#sqlalchemy.types.DOUBLE_PRECISION) | SQL DOUBLE PRECISION 类型。 |'
- en: '| [FLOAT](#sqlalchemy.types.FLOAT) | The SQL FLOAT type. |'
  id: totrans-664
  prefs: []
  type: TYPE_TB
  zh: '| [浮点数](#sqlalchemy.types.FLOAT) | SQL FLOAT 类型。 |'
- en: '| [INT](#sqlalchemy.types.INT) | alias of [`INTEGER`](#sqlalchemy.types.INTEGER
    "sqlalchemy.sql.sqltypes.INTEGER") |'
  id: totrans-665
  prefs: []
  type: TYPE_TB
  zh: '| [整数](#sqlalchemy.types.INT) | [`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.sql.sqltypes.INTEGER")
    的别名 |'
- en: '| [INTEGER](#sqlalchemy.types.INTEGER) | The SQL INT or INTEGER type. |'
  id: totrans-666
  prefs: []
  type: TYPE_TB
  zh: '| [整数](#sqlalchemy.types.INTEGER) | SQL INT 或 INTEGER 类型。 |'
- en: '| [JSON](#sqlalchemy.types.JSON) | Represent a SQL JSON type. |'
  id: totrans-667
  prefs: []
  type: TYPE_TB
  zh: '| [JSON](#sqlalchemy.types.JSON) | 表示 SQL JSON 类型。 |'
- en: '| [NCHAR](#sqlalchemy.types.NCHAR) | The SQL NCHAR type. |'
  id: totrans-668
  prefs: []
  type: TYPE_TB
  zh: '| [NCHAR](#sqlalchemy.types.NCHAR) | SQL NCHAR 类型。 |'
- en: '| [NUMERIC](#sqlalchemy.types.NUMERIC) | The SQL NUMERIC type. |'
  id: totrans-669
  prefs: []
  type: TYPE_TB
  zh: '| [数值](#sqlalchemy.types.NUMERIC) | SQL NUMERIC 类型。 |'
- en: '| [NVARCHAR](#sqlalchemy.types.NVARCHAR) | The SQL NVARCHAR type. |'
  id: totrans-670
  prefs: []
  type: TYPE_TB
  zh: '| [NVARCHAR](#sqlalchemy.types.NVARCHAR) | SQL NVARCHAR 类型。 |'
- en: '| [REAL](#sqlalchemy.types.REAL) | The SQL REAL type. |'
  id: totrans-671
  prefs: []
  type: TYPE_TB
  zh: '| [实数](#sqlalchemy.types.REAL) | SQL REAL 类型。 |'
- en: '| [SMALLINT](#sqlalchemy.types.SMALLINT) | The SQL SMALLINT type. |'
  id: totrans-672
  prefs: []
  type: TYPE_TB
  zh: '| [小整数](#sqlalchemy.types.SMALLINT) | SQL SMALLINT 类型。 |'
- en: '| [TEXT](#sqlalchemy.types.TEXT) | The SQL TEXT type. |'
  id: totrans-673
  prefs: []
  type: TYPE_TB
  zh: '| [文本](#sqlalchemy.types.TEXT) | SQL TEXT 类型。 |'
- en: '| [TIME](#sqlalchemy.types.TIME) | The SQL TIME type. |'
  id: totrans-674
  prefs: []
  type: TYPE_TB
  zh: '| [时间](#sqlalchemy.types.TIME) | SQL TIME 类型。 |'
- en: '| [TIMESTAMP](#sqlalchemy.types.TIMESTAMP) | The SQL TIMESTAMP type. |'
  id: totrans-675
  prefs: []
  type: TYPE_TB
  zh: '| [时间戳](#sqlalchemy.types.TIMESTAMP) | SQL TIMESTAMP 类型。 |'
- en: '| [UUID](#sqlalchemy.types.UUID) | Represent the SQL UUID type. |'
  id: totrans-676
  prefs: []
  type: TYPE_TB
  zh: '| [UUID](#sqlalchemy.types.UUID) | 表示 SQL UUID 类型。 |'
- en: '| [VARBINARY](#sqlalchemy.types.VARBINARY) | The SQL VARBINARY type. |'
  id: totrans-677
  prefs: []
  type: TYPE_TB
  zh: '| [VARBINARY](#sqlalchemy.types.VARBINARY) | SQL VARBINARY 类型。 |'
- en: '| [VARCHAR](#sqlalchemy.types.VARCHAR) | The SQL VARCHAR type. |'
  id: totrans-678
  prefs: []
  type: TYPE_TB
  zh: '| [可变长度字符串](#sqlalchemy.types.VARCHAR) | SQL VARCHAR 类型。 |'
- en: '[PRE104]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Represent a SQL Array type.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL 数组类型。
- en: Note
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This type serves as the basis for all ARRAY operations. However, currently **only
    the PostgreSQL backend has support for SQL arrays in SQLAlchemy**. It is recommended
    to use the PostgreSQL-specific [`sqlalchemy.dialects.postgresql.ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type directly when using ARRAY types with
    PostgreSQL, as it provides additional operators specific to that backend.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型是所有 ARRAY 操作的基础。然而，目前**只有 PostgreSQL 后端支持 SQLAlchemy 中的 SQL 数组**。建议在与 PostgreSQL
    使用 ARRAY 类型时直接使用 PostgreSQL 特定的[`sqlalchemy.dialects.postgresql.ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型，因为它提供了特定于该后端的附加运算符。
- en: '[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") is part of the
    Core in support of various SQL standard functions such as [`array_agg`](functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") which explicitly involve arrays; however,
    with the exception of the PostgreSQL backend and possibly some third-party dialects,
    no other SQLAlchemy built-in dialect has support for this type.'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")是 Core 中支持各种 SQL
    标准函数的一部分，例如[`array_agg`](functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")，这些函数明确涉及数组；然而，除了
    PostgreSQL 后端和可能一些第三方方言外，没有其他 SQLAlchemy 内置方言支持这种类型。'
- en: 'An [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") type is constructed
    given the “type” of element:'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 给定元素的“类型”，构造了一个[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")类型：
- en: '[PRE105]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The above type represents an N-dimensional array, meaning a supporting backend
    such as PostgreSQL will interpret values with any number of dimensions automatically.
    To produce an INSERT construct that passes in a 1-dimensional array of integers:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类型表示一个 N 维数组，这意味着支持的后端（如 PostgreSQL）将自动解释具有任意维度数量的值。要生成传入整数一维数组的 INSERT 构造：
- en: '[PRE106]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") type can be
    constructed given a fixed number of dimensions:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据固定的维度数量构造[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")类型：
- en: '[PRE107]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Sending a number of dimensions is optional, but recommended if the datatype
    is to represent arrays of more than one dimension. This number is used:'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 发送维度数量是可选的，但如果数据类型要表示多维数组，则建议这样做。这个数字被用于：
- en: When emitting the type declaration itself to the database, e.g. `INTEGER[][]`
  id: totrans-691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将类型声明本身发送到数据库时，例如，`INTEGER[][]`
- en: When translating Python values to database values, and vice versa, e.g. an ARRAY
    of [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") objects uses
    this number to efficiently access the string values inside of array structures
    without resorting to per-row type inspection
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将 Python 值转换为数据库值，反之亦然，例如，一个包含[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")对象的数组使用这个数字来有效地访问数组结构内的字符串值，而不需要进行逐行类型检查
- en: 'When used with the Python `getitem` accessor, the number of dimensions serves
    to define the kind of type that the `[]` operator should return, e.g. for an ARRAY
    of INTEGER with two dimensions:'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当与 Python 的`getitem`访问器一起使用时，维度数量用于定义`[]`运算符应返回的类型，例如，对于具有两个维度的整数数组：
- en: '[PRE108]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: For 1-dimensional arrays, an [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    instance with no dimension parameter will generally assume single-dimensional
    behaviors.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一维数组，没有维度参数的[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")实例通常假定单维行为。
- en: 'SQL expressions of type [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    have support for “index” and “slice” behavior. The `[]` operator produces expression
    constructs which will produce the appropriate SQL, both for SELECT statements:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")的 SQL 表达式支持“索引”和“切片”行为。`[]`运算符生成表达式构造，这些构造将为
    SELECT 语句生成适当的 SQL：
- en: '[PRE109]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'as well as UPDATE statements when the [`Update.values()`](dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") method is used:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在使用[`Update.values()`](dml.html#sqlalchemy.sql.expression.Update.values "sqlalchemy.sql.expression.Update.values")方法时进行
    UPDATE 语句：
- en: '[PRE110]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Indexed access is one-based by default; for zero-based index conversion, set
    [`ARRAY.zero_indexes`](#sqlalchemy.types.ARRAY.params.zero_indexes "sqlalchemy.types.ARRAY").
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，索引访问是基于一的；要进行从零开始的索引转换，请设置[`ARRAY.zero_indexes`](#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY")。
- en: The [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") type also provides
    for the operators [`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all"). The PostgreSQL-specific version of [`ARRAY`](#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") also provides additional operators.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") 类型还提供运算符 [`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 和 [`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")。PostgreSQL 特定版本的 [`ARRAY`](#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 还提供了其他运算符。'
- en: '**Detecting Changes in ARRAY columns when using the ORM**'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '**在使用 ORM 时检测 ARRAY 列的更改**'
- en: 'The [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") type, when
    used with the SQLAlchemy ORM, does not detect in-place mutations to the array.
    In order to detect these, the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension must be used, using the [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") class:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQLAlchemy ORM 一起使用时，[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型不会检测对数组的原位突变。为了检测到这些变化，必须使用 [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展，并使用 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 类：
- en: '[PRE111]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: This extension will allow “in-place” changes such to the array such as `.append()`
    to produce events which will be detected by the unit of work. Note that changes
    to elements **inside** the array, including subarrays that are mutated in place,
    are **not** detected.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展将允许对数组进行“原位”更改，例如 `.append()` 以产生单位工作检测到的事件。请注意，对数组中的元素进行更改，包括原地突变的子数组，不会被检测到。
- en: Alternatively, assigning a new array value to an ORM element that replaces the
    old one will always trigger a change event.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，将新的数组值分配给替换旧值的 ORM 元素将始终触发更改事件。
- en: See also
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.dialects.postgresql.ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")'
- en: '**Members**'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.ARRAY.__init__), [contains()](#sqlalchemy.types.ARRAY.Comparator.contains),
    [any()](#sqlalchemy.types.ARRAY.Comparator.any), [all()](#sqlalchemy.types.ARRAY.Comparator.all)'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.ARRAY.__init__), [contains()](#sqlalchemy.types.ARRAY.Comparator.contains),
    [any()](#sqlalchemy.types.ARRAY.Comparator.any), [all()](#sqlalchemy.types.ARRAY.Comparator.all)'
- en: '**Class signature**'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.types.Indexable`](type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable"), [`sqlalchemy.types.Concatenable`](type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.types.Indexable`](type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable"), [`sqlalchemy.types.Concatenable`](type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE112]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Construct an [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY").
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")。
- en: 'E.g.:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE113]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Arguments are:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是：
- en: 'Parameters:'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`item_type` – The data type of items of this array. Note that dimensionality
    is irrelevant here, so multi-dimensional arrays like `INTEGER[][]`, are constructed
    as `ARRAY(Integer)`, not as `ARRAY(ARRAY(Integer))` or such.'
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`item_type` – 此数组项的数据类型。请注意，此处维度不相关，因此像 `INTEGER[][]` 这样的多维数组被构造为 `ARRAY(Integer)`，而不是
    `ARRAY(ARRAY(Integer))` 或类似的。'
- en: '`as_tuple=False` – Specify whether return results should be converted to tuples
    from lists. This parameter is not generally needed as a Python list corresponds
    well to a SQL array.'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_tuple=False` – 指定返回结果是否应从列表转换为元组。通常不需要此参数，因为 Python 列表很好地对应于 SQL 数组。'
- en: '`dimensions` – if non-None, the ARRAY will assume a fixed number of dimensions.
    This impacts how the array is declared on the database, how it goes about interpreting
    Python and result values, as well as how expression behavior in conjunction with
    the “getitem” operator works. See the description at [`ARRAY`](#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") for additional detail.'
  id: totrans-721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dimensions` – 如果不是None，则数组将假定具有固定数量的维度。这影响了数组在数据库上的声明方式，以及它如何解释Python和结果值，以及如何与“getitem”运算符结合使用时的表达式行为。有关更多详细信息，请参见[`ARRAY`](#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的描述。'
- en: '`zero_indexes=False` – when True, index values will be converted between Python
    zero-based and SQL one-based indexes, e.g. a value of one will be added to all
    index values before passing to the database.'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zero_indexes=False` – 当为True时，索引值将在Python零基础和SQL一基础索引之间转换，例如，在传递到数据库之前，所有索引值都将增加一个值。'
- en: '[PRE114]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Define comparison operations for [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY").
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")定义比较操作。
- en: More operators are available on the dialect-specific form of this type. See
    [`Comparator`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator").
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型的方言特定形式上还有更多的操作符。参见[`Comparator`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator")。
- en: '**Class signature**'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.ARRAY.Comparator`](#sqlalchemy.types.ARRAY.Comparator
    "sqlalchemy.types.ARRAY.Comparator") (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.ARRAY.Comparator`](#sqlalchemy.types.ARRAY.Comparator "sqlalchemy.types.ARRAY.Comparator")
    (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
- en: '[PRE115]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '`ARRAY.contains()` not implemented for the base ARRAY type. Use the dialect-specific
    ARRAY type.'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARRAY.contains()` 对于基本的数组类型没有实现。请使用特定于方言的数组类型。'
- en: See also
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") - PostgreSQL specific version.'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") - PostgreSQL 特定版本。'
- en: '[PRE116]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Return `other operator ANY (array)` clause.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`other operator ANY (array)`子句。
- en: Legacy Feature
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 传统功能
- en: This method is an [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    - specific construct that is now superseded by the [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") function, which features a different calling
    style. The [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    function is also mirrored at the method level via the [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是一个[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") - 特定的构造，现在已经被[`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")函数取代，其具有不同的调用风格。[`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")函数也通过[`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")方法在方法级别进行了镜像。
- en: 'Usage of array-specific [`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") is as follows:'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组特定的[`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any "sqlalchemy.types.ARRAY.Comparator.any")的用法如下：
- en: '[PRE117]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Parameters:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式'
- en: '`operator` – an operator object from the `sqlalchemy.sql.operators` package,
    defaults to `eq()`.'
  id: totrans-740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operator` – 来自`sqlalchemy.sql.operators`包的操作符对象，默认为`eq()`。'
- en: See also
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '[`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")'
- en: '[`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all "sqlalchemy.types.ARRAY.Comparator.all")'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all "sqlalchemy.types.ARRAY.Comparator.all")'
- en: '[PRE118]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Return `other operator ALL (array)` clause.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`other operator ALL (array)`子句。
- en: Legacy Feature
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 传统功能
- en: This method is an [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    - specific construct that is now superseded by the [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") function, which features a different calling
    style. The [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    function is also mirrored at the method level via the [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是一个 [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") - 特定构造，现在已被
    [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    函数取代，具有不同的调用风格。[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    函数也通过 [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") 方法在方法级别进行了镜像。
- en: 'Usage of array-specific [`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") is as follows:'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特定于数组的 [`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all "sqlalchemy.types.ARRAY.Comparator.all")
    如下：
- en: '[PRE119]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Parameters:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式'
- en: '`operator` – an operator object from the `sqlalchemy.sql.operators` package,
    defaults to `eq()`.'
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operator` – 来自 `sqlalchemy.sql.operators` 包的操作对象，默认为 `eq()`。'
- en: See also
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")'
- en: '[`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any "sqlalchemy.types.ARRAY.Comparator.any")'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any "sqlalchemy.types.ARRAY.Comparator.any")'
- en: '[PRE120]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: The SQL BIGINT type.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BIGINT 类型。
- en: See also
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger")
    - documentation for the base type.'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger")
    - 基本类型的文档。'
- en: '**Class signature**'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BIGINT`](#sqlalchemy.types.BIGINT "sqlalchemy.types.BIGINT")
    ([`sqlalchemy.types.BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger"))
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.BIGINT`](#sqlalchemy.types.BIGINT "sqlalchemy.types.BIGINT")（[`sqlalchemy.types.BigInteger`](#sqlalchemy.types.BigInteger
    "sqlalchemy.types.BigInteger")）
- en: '[PRE121]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: The SQL BINARY type.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BINARY 类型。
- en: '**Class signature**'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BINARY`](#sqlalchemy.types.BINARY "sqlalchemy.types.BINARY")
    (`sqlalchemy.types._Binary`)
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.BINARY`](#sqlalchemy.types.BINARY "sqlalchemy.types.BINARY")（`sqlalchemy.types._Binary`）
- en: '[PRE122]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: The SQL BLOB type.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BLOB 类型。
- en: '**Members**'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.BLOB.__init__)'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.BLOB.__init__)'
- en: '**Class signature**'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BLOB`](#sqlalchemy.types.BLOB "sqlalchemy.types.BLOB")
    ([`sqlalchemy.types.LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary"))
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.BLOB`](#sqlalchemy.types.BLOB "sqlalchemy.types.BLOB")（[`sqlalchemy.types.LargeBinary`](#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")）
- en: '[PRE123]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '*inherited from the* `sqlalchemy.types.LargeBinary.__init__` *method of* [`LargeBinary`](#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    *的* `sqlalchemy.types.LargeBinary.__init__` *方法*'
- en: Construct a LargeBinary type.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 LargeBinary 类型。
- en: 'Parameters:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选，用于 DDL 语句中的列长度，适用于接受长度的二进制类型，如 MySQL BLOB 类型。'
- en: '[PRE124]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: The SQL BOOLEAN type.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BOOLEAN 类型。
- en: '**Members**'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.BOOLEAN.__init__)'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.BOOLEAN.__init__)'
- en: '**Class signature**'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BOOLEAN`](#sqlalchemy.types.BOOLEAN "sqlalchemy.types.BOOLEAN")
    ([`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean"))
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.BOOLEAN`](#sqlalchemy.types.BOOLEAN "sqlalchemy.types.BOOLEAN")（[`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")）
- en: '[PRE125]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '*inherited from the* `sqlalchemy.types.Boolean.__init__` *method of* [`Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") *的*
    `sqlalchemy.types.Boolean.__init__` *方法*'
- en: Construct a Boolean.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个布尔值。
- en: 'Parameters:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`create_constraint` –'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. If the boolean is generated as an int/smallint, also create
    a CHECK constraint on the table that ensures 1 or 0 as a value.
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。如果布尔值生成为 int/smallint，还会在表上创建一个 CHECK 约束，确保值为 1 或 0。
- en: Note
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Boolean.name`](#sqlalchemy.types.Boolean.params.name "sqlalchemy.types.Boolean")
    parameter or by setting up an appropriate naming convention; see [Configuring
    Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议 CHECK 约束具有明确的名称，以支持模式管理问题。可以通过设置 [`Boolean.name`](#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") 参数或设置适当的命名约定来建立这一点；参见[配置约束命名约定](constraints.html#constraint-naming-conventions)以获取背景信息。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本1.4中更改：-此标志现在默认为False，表示对非本地枚举类型不会生成CHECK约束。
- en: '`name` – if a CHECK constraint is generated, specify the name of the constraint.'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 如果生成 CHECK 约束，请指定约束的名称。'
- en: '[PRE126]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: The SQL CHAR type.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: SQL CHAR 类型。
- en: '**Members**'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.CHAR.__init__)'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.CHAR.__init__)'
- en: '**Class signature**'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.CHAR`](#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.CHAR`](#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")（[`sqlalchemy.types.String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")）
- en: '[PRE127]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串类型。
- en: 'Parameters:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选的，用于 DDL 和 CAST 表达式中的列长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。该值是以字节还是字符解释的取决于数据库。'
- en: '`collation` –'
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的，用于 DDL 和 CAST 表达式中的列级排序。使用SQLite、MySQL 和 PostgreSQL 支持的 COLLATE 关键字渲染。例如：
- en: '[PRE128]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Note
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非 ASCII 数据的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE129]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: The CLOB type.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: CLOB 类型。
- en: This type is found in Oracle and Informix.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型在Oracle和Informix中找到。
- en: '**Members**'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.CLOB.__init__)'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.CLOB.__init__)'
- en: '**Class signature**'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.CLOB`](#sqlalchemy.types.CLOB "sqlalchemy.types.CLOB")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.CLOB`](#sqlalchemy.types.CLOB "sqlalchemy.types.CLOB")（[`sqlalchemy.types.Text`](#sqlalchemy.types.Text
    "sqlalchemy.types.Text")）
- en: '[PRE130]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串类型。
- en: 'Parameters:'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选的，用于 DDL 和 CAST 表达式中的列长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。该值是以字节还是字符解释的取决于数据库。'
- en: '`collation` –'
  id: totrans-821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字呈现。例如：
- en: '[PRE131]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Note
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应使用 [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    或 [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型来存储非 ASCII 数据的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE132]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: The SQL DATE type.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DATE 类型。
- en: '**Class signature**'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DATE`](#sqlalchemy.types.DATE "sqlalchemy.types.DATE")
    ([`sqlalchemy.types.Date`](#sqlalchemy.types.Date "sqlalchemy.types.Date"))
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.DATE`](#sqlalchemy.types.DATE "sqlalchemy.types.DATE")
    ([`sqlalchemy.types.Date`](#sqlalchemy.types.Date "sqlalchemy.types.Date"))
- en: '[PRE133]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: The SQL DATETIME type.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DATETIME 类型。
- en: '**Members**'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DATETIME.__init__)'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DATETIME.__init__)'
- en: '**Class signature**'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DATETIME`](#sqlalchemy.types.DATETIME "sqlalchemy.types.DATETIME")
    ([`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime"))
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.DATETIME`](#sqlalchemy.types.DATETIME "sqlalchemy.types.DATETIME")
    ([`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime"))
- en: '[PRE134]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '*inherited from the* `sqlalchemy.types.DateTime.__init__` *method of* [`DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.types.DateTime.__init__` *方法* [`DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")'
- en: Construct a new [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime").
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的 [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")。
- en: 'Parameters:'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**timezone** – boolean. Indicates that the datetime type should enable timezone
    support, if available on the **base date/time-holding type only**. It is recommended
    to make use of the [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    datatype directly when using this flag, as some databases include separate generic
    date/time-holding types distinct from the timezone-capable TIMESTAMP datatype,
    such as Oracle.'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '**timezone** – boolean。指示日期时间类型是否应在**仅在基本日期/时间持有类型上**启用时区支持。建议在使用此标志时直接使用 [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") 数据类型，因为一些数据库包括与时区功能的 TIMESTAMP 数据类型不同的独立通用日期/时间持有类型，例如
    Oracle。'
- en: '[PRE135]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: The SQL DECIMAL type.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DECIMAL 类型。
- en: See also
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") - documentation
    for the base type.'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DECIMAL.__init__)'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DECIMAL.__init__)'
- en: '**Class signature**'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DECIMAL`](#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")
    ([`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"))
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.DECIMAL`](#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")
    ([`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"))
- en: '[PRE136]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '*inherited from the* `sqlalchemy.types.Numeric.__init__` *method of* [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.types.Numeric.__init__` *方法* [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")'
- en: Construct a Numeric.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 Numeric。
- en: 'Parameters:'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – the numeric precision for use in DDL `CREATE TABLE`.'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 用于DDL `CREATE TABLE` 的数字精度。'
- en: '`scale` – the numeric scale for use in DDL `CREATE TABLE`.'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 用于DDL `CREATE TABLE` 的数字规模。'
- en: '`asdecimal` – default True. Return whether or not values should be sent as
    Python Decimal objects, or as floats. Different DBAPIs send one or the other based
    on datatypes - the Numeric type will ensure that return values are one or the
    other across DBAPIs consistently.'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 默认为 True。返回值是否应作为 Python Decimal 对象发送，或作为浮点数发送。不同的 DBAPI 根据数据类型发送其中之一
    - 数字类型将确保在 DBAPI 中一致地返回其中之一。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Types which do include an explicit
    “.scale” value, such as the base [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    as well as the MySQL float types, will use the value of “.scale” as the default
    for decimal_return_scale, if not otherwise specified.'
  id: totrans-856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 将浮点数转换为 Python 十进制时要使用的默认精度。由于十进制的不精确性，浮点值通常会更长，而大多数浮点数据库类型并没有“精度”的概念，因此默认情况下，浮点类型在转换时会查找前十位小数。指定此值将覆盖该长度。包含显式“.scale”值的类型，例如基本[`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")以及 MySQL 浮点类型，将使用“.scale”的值作为默认的decimal_return_scale，如果未另行指定。'
- en: When using the `Numeric` type, care should be taken to ensure that the asdecimal
    setting is appropriate for the DBAPI in use - when Numeric applies a conversion
    from Decimal->float or float-> Decimal, this conversion incurs an additional performance
    overhead for all result columns received.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Numeric` 类型时，应注意确保 asdecimal 设置适用于正在使用的 DBAPI - 当 Numeric 应用从 Decimal->float
    或 float-> Decimal 的转换时，此转换会为接收到的所有结果列增加额外的性能开销。
- en: DBAPIs that return Decimal natively (e.g. psycopg2) will have better accuracy
    and higher performance with a setting of `True`, as the native translation to
    Decimal reduces the amount of floating- point issues at play, and the Numeric
    type itself doesn’t need to apply any further conversions. However, another DBAPI
    which returns floats natively *will* incur an additional conversion overhead,
    and is still subject to floating point data loss - in which case `asdecimal=False`
    will at least remove the extra conversion overhead.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 本地返回 Decimal 的 DBAPI（例如 psycopg2）将在设置为 `True` 时具有更好的准确性和更高的性能，因为对 Decimal 的本地转换减少了涉及的浮点问题的数量，并且
    Numeric 类型本身不需要应用任何进一步的转换。但是，另一个本地返回浮点数的 DBAPI *将* 增加额外的转换开销，并且仍然可能存在浮点数据丢失 -
    在这种情况下，`asdecimal=False` 将至少消除额外的转换开销。
- en: '[PRE137]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: The SQL DOUBLE type.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DOUBLE 类型。
- en: New in version 2.0.
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中新增。
- en: See also
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double") - documentation
    for the base type.'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DOUBLE.__init__)'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DOUBLE.__init__)'
- en: '**Class signature**'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DOUBLE`](#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE")
    ([`sqlalchemy.types.Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double"))
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.DOUBLE`](#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE")（[`sqlalchemy.types.Double`](#sqlalchemy.types.Double
    "sqlalchemy.types.Double")）。
- en: '[PRE138]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") *的* `sqlalchemy.types.Float.__init__`
    *方法*'
- en: Construct a Float.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL `CREATE TABLE` 中用于使用的数字精度。后端**应该**尽量确保此精度表示通用[`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型的数字位数。
- en: Note
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，当渲染 DDL 时，不接受[`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float")参数，因为 Oracle 不支持指定为小数位数的浮点精度。而是使用 Oracle 特定的[`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT")数据类型并指定[`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")参数。这是 SQLAlchemy 2.0 版本的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个数据库不可知的[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为Oracle分别指定二进制精度，请使用[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")如下：
- en: '[PRE139]'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")相同的标志，但默认为`False`。请注意，将此标志设置为`True`会导致浮点数转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在将浮点数转换为Python十进制数时使用的默认标度。由于十进制不准确性，浮点值通常会更长，并且大多数浮点数据库类型没有“标度”的概念，因此，默认情况下，浮点类型在转换时会查找前十个小数位。指定此值将覆盖该长度。请注意，如果未另行指定，包括“标度”的MySQL浮点类型将使用“标度”作为`decimal_return_scale`的默认值。'
- en: '[PRE140]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: The SQL DOUBLE PRECISION type.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DOUBLE PRECISION 类型。
- en: New in version 2.0.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0中的新功能。
- en: See also
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double") - documentation
    for the base type.'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DOUBLE_PRECISION.__init__)'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DOUBLE_PRECISION.__init__)'
- en: '**Class signature**'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DOUBLE_PRECISION`](#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") ([`sqlalchemy.types.Double`](#sqlalchemy.types.Double
    "sqlalchemy.types.Double"))
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.DOUBLE_PRECISION`](#sqlalchemy.types.DOUBLE_PRECISION "sqlalchemy.types.DOUBLE_PRECISION")
    ([`sqlalchemy.types.Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double"))
- en: '[PRE141]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") *的* `sqlalchemy.types.Float.__init__`
    *方法*'
- en: Construct a Float.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个Float。
- en: 'Parameters:'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于DDL `CREATE TABLE`中的数字精度。后端**应该**尝试确保此精度表示通用[`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型的数字位数。
- en: Note
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Oracle后端，在渲染DDL时，不接受[`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float")参数，因为Oracle不支持将浮点精度指定为小数位数。相反，请使用特定于Oracle的[`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT")数据类型，并指定[`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")参数。这是SQLAlchemy 2.0中的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个数据库不可知的[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为Oracle分别指定二进制精度，请使用[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")如下：
- en: '[PRE142]'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")相同的标志，但默认为`False`。请注意，将此标志设置为`True`会导致浮点数转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 将浮点数转换为 Python 十进制数时要使用的默认标度。由于十进制不准确，浮点值通常会更长，并且大多数浮点数据库类型没有“标度”概念，因此默认情况下，浮点类型在转换时会查找前十个小数位。指定此值将覆盖该长度。请注意，MySQL
    浮点类型包括“标度”，如果没有另外指定，将使用“标度”作为 `decimal_return_scale` 的默认值。'
- en: '[PRE143]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: The SQL FLOAT type.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: SQL FLOAT 类型。
- en: See also
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") - documentation
    for the base type.'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.FLOAT.__init__)'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.FLOAT.__init__) '
- en: '**Class signature**'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.FLOAT`](#sqlalchemy.types.FLOAT "sqlalchemy.types.FLOAT")
    ([`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float"))
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.FLOAT`](#sqlalchemy.types.FLOAT "sqlalchemy.types.FLOAT")
    （[`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")）。
- en: '[PRE144]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") 的 `sqlalchemy.types.Float.__init__`
    *方法*'
- en: Construct a Float.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 DDL `CREATE TABLE` 中的数字精度。后端**应该**尝试确保此精度指示了通用 [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型的位数。
- en: Note
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时，不接受 [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 参数，因为 Oracle 不支持将浮点精度指定为小数位数。而是使用 Oracle 特定的 [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，并指定 [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") 参数。这是 SQLAlchemy 版本 2.0 中的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个与数据库无关的 [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为
    Oracle 分别指定二进制精度，请使用 [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下：
- en: '[PRE145]'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与 [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    相同的标志，但默认为 `False`。请注意，将此标志设置为 `True` 会导致浮点转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 将浮点数转换为 Python 十进制数时要使用的默认标度。由于十进制不准确，浮点值通常会更长，并且大多数浮点数据库类型没有“标度”概念，因此默认情况下，浮点类型在转换时会查找前十个小数位。指定此值将覆盖该长度。请注意，MySQL
    浮点类型包括“标度”，如果没有另外指定，将使用“标度”作为 `decimal_return_scale` 的默认值。'
- en: '[PRE146]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: alias of [`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.sql.sqltypes.INTEGER")
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.sql.sqltypes.INTEGER") 的别名'
- en: '[PRE147]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Represent a SQL JSON type.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL JSON 类型。
- en: Note
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") is provided as a facade
    for vendor-specific JSON types. Since it supports JSON SQL operations, it only
    works on backends that have an actual JSON type, currently:'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 被提供为供应商特定的 JSON 类型的外观。由于它支持
    JSON SQL 操作，因此它仅适用于具有实际 JSON 类型的后端，目前有:'
- en: PostgreSQL - see [`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") for backend-specific notes
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 有关特定于后端的注意事项，请参阅 [`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 和 [`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")
- en: MySQL - see [`sqlalchemy.dialects.mysql.JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON") for backend-specific notes
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 有关特定于后端的注意事项，请参阅 [`sqlalchemy.dialects.mysql.JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")
- en: SQLite as of version 3.9 - see [`sqlalchemy.dialects.sqlite.JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON") for backend-specific notes
  id: totrans-929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite 截至版本 3.9 - 有关特定于后端的注意事项，请参阅 [`sqlalchemy.dialects.sqlite.JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON")
- en: Microsoft SQL Server 2016 and later - see [`sqlalchemy.dialects.mssql.JSON`](../dialects/mssql.html#sqlalchemy.dialects.mssql.JSON
    "sqlalchemy.dialects.mssql.JSON") for backend-specific notes
  id: totrans-930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server 2016 及更高版本 - 有关特定于后端的注意事项，请参阅 [`sqlalchemy.dialects.mssql.JSON`](../dialects/mssql.html#sqlalchemy.dialects.mssql.JSON
    "sqlalchemy.dialects.mssql.JSON")
- en: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") is part of the Core
    in support of the growing popularity of native JSON datatypes.'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 是核心的一部分，支持原生 JSON
    数据类型日益增长的流行度。'
- en: 'The [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type stores arbitrary
    JSON format data, e.g.:'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 类型存储任意的 JSON 格式数据，例如:'
- en: '[PRE148]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '**JSON-Specific Expression Operators**'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON 特定的表达式运算符**'
- en: 'The [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") datatype provides
    these additional SQL operations:'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 数据类型提供了这些额外的 SQL 操作:'
- en: 'Keyed index operations:'
  id: totrans-936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '键索引操作:'
- en: '[PRE149]'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Integer index operations:'
  id: totrans-938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '整数索引操作:'
- en: '[PRE150]'
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Path index operations:'
  id: totrans-940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '路径索引操作:'
- en: '[PRE151]'
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Data casters for specific JSON element types, subsequent to an index or path
    operation being invoked:'
  id: totrans-942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '针对特定 JSON 元素类型的数据转换器，在调用索引或路径操作后:'
- en: '[PRE152]'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: New in version 1.3.11.
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3.11 版中的新功能。
- en: Additional operations may be available from the dialect-specific versions of
    [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON"), such as [`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") which both offer additional PostgreSQL-specific
    operations.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还可以从 [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 的特定于方言的版本中获得其他操作，例如
    [`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 和 [`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")，它们都提供了额外的特定于 PostgreSQL 的操作。
- en: '**Casting JSON Elements to Other Types**'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '**将 JSON 元素转换为其他类型**'
- en: 'Index operations, i.e. those invoked by calling upon the expression using the
    Python bracket operator as in `some_column[''some key'']`, return an expression
    object whose type defaults to [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    by default, so that further JSON-oriented instructions may be called upon the
    result type. However, it is likely more common that an index operation is expected
    to return a specific scalar element, such as a string or integer. In order to
    provide access to these elements in a backend-agnostic way, a series of data casters
    are provided:'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '索引操作，即通过使用 Python 方括号操作符调用表达式，如 `some_column[''some key'']`，将返回一个类型默认为 [`JSON`](#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 的表达式对象，默认情况下，以便可以调用进一步的面向 JSON 的指令。然而，更常见的情况是希望索引操作返回特定的标量元素，例如字符串或整数。为了以与后端无关的方式提供对这些元素的访问，提供了一系列数据转换器:'
- en: '[`Comparator.as_string()`](#sqlalchemy.types.JSON.Comparator.as_string "sqlalchemy.types.JSON.Comparator.as_string")
    - return the element as a string'
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Comparator.as_string()`](#sqlalchemy.types.JSON.Comparator.as_string "sqlalchemy.types.JSON.Comparator.as_string")
    - 将元素作为字符串返回'
- en: '[`Comparator.as_boolean()`](#sqlalchemy.types.JSON.Comparator.as_boolean "sqlalchemy.types.JSON.Comparator.as_boolean")
    - return the element as a boolean'
  id: totrans-949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Comparator.as_boolean()`](#sqlalchemy.types.JSON.Comparator.as_boolean "sqlalchemy.types.JSON.Comparator.as_boolean")
    - 将元素返回为布尔值'
- en: '[`Comparator.as_float()`](#sqlalchemy.types.JSON.Comparator.as_float "sqlalchemy.types.JSON.Comparator.as_float")
    - return the element as a float'
  id: totrans-950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Comparator.as_float()`](#sqlalchemy.types.JSON.Comparator.as_float "sqlalchemy.types.JSON.Comparator.as_float")
    - 将元素返回为浮点数'
- en: '[`Comparator.as_integer()`](#sqlalchemy.types.JSON.Comparator.as_integer "sqlalchemy.types.JSON.Comparator.as_integer")
    - return the element as an integer'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Comparator.as_integer()`](#sqlalchemy.types.JSON.Comparator.as_integer "sqlalchemy.types.JSON.Comparator.as_integer")
    - 将元素返回为整数'
- en: 'These data casters are implemented by supporting dialects in order to assure
    that comparisons to the above types will work as expected, such as:'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据转换器由支持方言实现，以确保与上述类型的比较将按预期工作，例如：
- en: '[PRE153]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'New in version 1.3.11: Added type-specific casters for the basic JSON data
    element types.'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.11中新增了基本JSON数据元素类型的特定类型转换器。
- en: Note
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The data caster functions are new in version 1.3.11, and supersede the previous
    documented approaches of using CAST; for reference, this looked like:'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 数据转换器函数是1.3.11版本中的新功能，取代了以前记录的使用CAST的方法；作为参考，这看起来像是：
- en: '[PRE154]'
  id: totrans-957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'The above case now works directly as:'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 上述情况现在直接有效为：
- en: '[PRE155]'
  id: totrans-959
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: For details on the previous comparison approach within the 1.3.x series, see
    the documentation for SQLAlchemy 1.2 or the included HTML files in the doc/ directory
    of the version’s distribution.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 有关1.3.x系列中先前比较方法的详细信息，请参阅SQLAlchemy 1.2的文档或版本分发的doc/目录中包含的HTML文件。
- en: '**Detecting Changes in JSON columns when using the ORM**'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: '**当使用ORM时检测JSON列中的更改**'
- en: The [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type, when used
    with the SQLAlchemy ORM, does not detect in-place mutations to the structure.
    In order to detect these, the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension must be used, most typically using the [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") class. This extension will allow “in-place”
    changes to the datastructure to produce events which will be detected by the unit
    of work. See the example at [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") for a simple example involving a dictionary.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 当与SQLAlchemy ORM一起使用时，[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    类型不会检测到对结构的原地突变。为了检测这些情况，必须使用[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展，通常使用[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")类。此扩展将允许对数据结构进行“原地”更改以产生事件，这些事件将被工作单元检测到。有关涉及字典的简单示例，请参见[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")中的示例。
- en: Alternatively, assigning a JSON structure to an ORM element that replaces the
    old one will always trigger a change event.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，将JSON结构分配给替换旧结构的ORM元素将始终触发更改事件。
- en: '**Support for JSON null vs. SQL NULL**'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持JSON null与SQL NULL**'
- en: 'When working with NULL values, the [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type recommends the use of two specific constants in order to differentiate between
    a column that evaluates to SQL NULL, e.g. no value, vs. the JSON-encoded string
    of `"null"`. To insert or select against a value that is SQL NULL, use the constant
    [`null()`](sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null").
    This symbol may be passed as a parameter value specifically when using the [`JSON`](#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype, which contains special logic that interprets
    this symbol to mean that the column value should be SQL NULL as opposed to JSON
    `"null"`:'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理NULL值时，[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 类型建议使用两个特定的常量来区分一个计算为SQL
    NULL的列，例如，没有值，与JSON编码的字符串`"null"`。要插入或选择SQL NULL的值，请使用常量[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")。当使用包含特殊逻辑的[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")数据类型时，此符号可以作为参数值传递，该逻辑解释此符号表示列值应为SQL
    NULL，而不是JSON的`"null"`：
- en: '[PRE156]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'To insert or select against a value that is JSON `"null"`, use the constant
    [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL"):'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 要插入或选择JSON的值为`"null"`，请使用常量[`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")：
- en: '[PRE157]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: The [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type supports a
    flag [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null "sqlalchemy.types.JSON")
    which when set to True will result in the Python constant `None` evaluating to
    the value of SQL NULL, and when set to False results in the Python constant `None`
    evaluating to the value of JSON `"null"`. The Python value `None` may be used
    in conjunction with either [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")
    and [`null()`](sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    in order to indicate NULL values, but care must be taken as to the value of the
    [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null "sqlalchemy.types.JSON")
    in these cases.
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 类型支持一个标志 [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")，当设置为 True 时，Python 常量 `None` 将评估为 SQL NULL 的值，当设置为 False
    时，Python 常量 `None` 将评估为 JSON `"null"` 的值。Python 值 `None` 可以与 [`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") 和 [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 结合使用，以指示 NULL 值，但在这些情况下必须注意 [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 的值。'
- en: '**Customizing the JSON Serializer**'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义 JSON 序列化器**'
- en: The JSON serializer and deserializer used by [`JSON`](#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") defaults to Python’s `json.dumps` and `json.loads` functions;
    in the case of the psycopg2 dialect, psycopg2 may be using its own custom loader
    function.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 序列化器和反序列化器使用了[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")默认的
    Python `json.dumps` 和 `json.loads` 函数；在 psycopg2 方言的情况下，psycopg2 可能会使用自己的自定义加载器函数。
- en: 'In order to affect the serializer / deserializer, they are currently configurable
    at the [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    level via the [`create_engine.json_serializer`](engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine") and [`create_engine.json_deserializer`](engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine") parameters. For example, to turn off `ensure_ascii`:'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 为了影响序列化器/反序列化器，它们目前可以在 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 级别通过 [`create_engine.json_serializer`](engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine") 和 [`create_engine.json_deserializer`](engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine") 参数进行配置。例如，要关闭 `ensure_ascii`：
- en: '[PRE158]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Changed in version 1.3.7: SQLite dialect’s `json_serializer` and `json_deserializer`
    parameters renamed from `_json_serializer` and `_json_deserializer`.'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.3.7 起更改：SQLite 方言的 `json_serializer` 和 `json_deserializer` 参数从 `_json_serializer`
    和 `_json_deserializer` 重命名。
- en: See also
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")'
- en: '[`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")'
- en: '[`sqlalchemy.dialects.mysql.JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.mysql.JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")'
- en: '[`sqlalchemy.dialects.sqlite.JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON")'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.sqlite.JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON")'
- en: '**Members**'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[as_boolean()](#sqlalchemy.types.JSON.Comparator.as_boolean), [as_float()](#sqlalchemy.types.JSON.Comparator.as_float),
    [as_integer()](#sqlalchemy.types.JSON.Comparator.as_integer), [as_json()](#sqlalchemy.types.JSON.Comparator.as_json),
    [as_numeric()](#sqlalchemy.types.JSON.Comparator.as_numeric), [as_string()](#sqlalchemy.types.JSON.Comparator.as_string),
    [bind_processor()](#sqlalchemy.types.JSON.JSONElementType.bind_processor), [literal_processor()](#sqlalchemy.types.JSON.JSONElementType.literal_processor),
    [NULL](#sqlalchemy.types.JSON.NULL), [__init__()](#sqlalchemy.types.JSON.__init__),
    [bind_processor()](#sqlalchemy.types.JSON.bind_processor), [comparator_factory](#sqlalchemy.types.JSON.comparator_factory),
    [hashable](#sqlalchemy.types.JSON.hashable), [python_type](#sqlalchemy.types.JSON.python_type),
    [result_processor()](#sqlalchemy.types.JSON.result_processor), [should_evaluate_none](#sqlalchemy.types.JSON.should_evaluate_none)'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '[as_boolean()](#sqlalchemy.types.JSON.Comparator.as_boolean), [as_float()](#sqlalchemy.types.JSON.Comparator.as_float),
    [as_integer()](#sqlalchemy.types.JSON.Comparator.as_integer), [as_json()](#sqlalchemy.types.JSON.Comparator.as_json),
    [as_numeric()](#sqlalchemy.types.JSON.Comparator.as_numeric), [as_string()](#sqlalchemy.types.JSON.Comparator.as_string),
    [bind_processor()](#sqlalchemy.types.JSON.JSONElementType.bind_processor), [literal_processor()](#sqlalchemy.types.JSON.JSONElementType.literal_processor),
    [NULL](#sqlalchemy.types.JSON.NULL), [__init__()](#sqlalchemy.types.JSON.__init__),
    [bind_processor()](#sqlalchemy.types.JSON.bind_processor), [comparator_factory](#sqlalchemy.types.JSON.comparator_factory),
    [hashable](#sqlalchemy.types.JSON.hashable), [python_type](#sqlalchemy.types.JSON.python_type),
    [result_processor()](#sqlalchemy.types.JSON.result_processor), [should_evaluate_none](#sqlalchemy.types.JSON.should_evaluate_none)'
- en: '**Class signature**'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    ([`sqlalchemy.types.Indexable`](type_api.html#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable"),
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    ([`sqlalchemy.types.Indexable`](type_api.html#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable"),
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
- en: '[PRE159]'
  id: totrans-984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Define comparison operations for [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON").
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 为 [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 定义比较操作。
- en: '**Class signature**'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.Comparator`](#sqlalchemy.types.JSON.Comparator
    "sqlalchemy.types.JSON.Comparator") (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.JSON.Comparator`](#sqlalchemy.types.JSON.Comparator "sqlalchemy.types.JSON.Comparator")
    (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
- en: '[PRE160]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Cast an indexed value as boolean.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为布尔值。
- en: 'e.g.:'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE161]'
  id: totrans-991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: New in version 1.3.11.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.3.11 版本开始新增。
- en: '[PRE162]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Cast an indexed value as float.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为浮点数。
- en: 'e.g.:'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE163]'
  id: totrans-996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: New in version 1.3.11.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.3.11 版本开始新增。
- en: '[PRE164]'
  id: totrans-998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Cast an indexed value as integer.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为整数。
- en: 'e.g.:'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE165]'
  id: totrans-1001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: New in version 1.3.11.
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.3.11 版本开始新增。
- en: '[PRE166]'
  id: totrans-1003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Cast an indexed value as JSON.
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为 JSON。
- en: 'e.g.:'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE167]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: This is typically the default behavior of indexed elements in any case.
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是任何情况下索引元素的默认行为。
- en: Note that comparison of full JSON structures may not be supported by all backends.
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有后端都支持对完整 JSON 结构的比较。
- en: New in version 1.3.11.
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.3.11 版本开始新增。
- en: '[PRE168]'
  id: totrans-1010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Cast an indexed value as numeric/decimal.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为数值/小数。
- en: 'e.g.:'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE169]'
  id: totrans-1013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: New in version 1.4.0b2.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4.0b2 版本开始新增。
- en: '[PRE170]'
  id: totrans-1015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Cast an indexed value as string.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为字符串。
- en: 'e.g.:'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE171]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: New in version 1.3.11.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.3.11 版本开始新增。
- en: '[PRE172]'
  id: totrans-1020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Common function for index / path elements in a JSON expression.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 表达式中索引/路径元素的常见函数。
- en: '**Class signature**'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONElementType`](#sqlalchemy.types.JSON.JSONElementType
    "sqlalchemy.types.JSON.JSONElementType") ([`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.JSON.JSONElementType`](#sqlalchemy.types.JSON.JSONElementType)
    ([`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
- en: '[PRE173]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Return a conversion function for processing bind values.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一位置参数，并返回一个要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则方法应返回 `None`。
- en: Note
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常是**私有于正在使用的方言**的，并且不是公共类型对象，这意味着不可通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** - 正在使用的方言实例。'
- en: '[PRE174]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理直接呈现而不使用绑定的字面值的转换函数。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常在 DDL 生成以及某些后端不接受绑定参数的情况下使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面的 Python 值作为唯一的位置参数，并返回一个字符串表示，以在 SQL 语句中呈现。
- en: Note
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常是**私有于正在使用的方言**的，并且不是公共类型对象，这意味着不可通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE175]'
  id: totrans-1044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Placeholder for the datatype of a JSON index value.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 索引值的数据类型的占位符。
- en: This allows execution-time processing of JSON index values for special syntaxes.
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许对特殊语法的 JSON 索引值进行执行时处理。
- en: '**Class signature**'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONIndexType`](#sqlalchemy.types.JSON.JSONIndexType
    "sqlalchemy.types.JSON.JSONIndexType") (`sqlalchemy.types.JSONElementType`)
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.JSON.JSONIndexType`](#sqlalchemy.types.JSON.JSONIndexType
    "sqlalchemy.types.JSON.JSONIndexType") (`sqlalchemy.types.JSONElementType`)
- en: '[PRE176]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Placeholder for the datatype of a JSON index value.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 索引值的数据类型的占位符。
- en: This allows execution-time processing of JSON index values for special syntaxes.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许对特殊语法的 JSON 索引值进行执行时处理。
- en: '**Class signature**'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONIntIndexType`](#sqlalchemy.types.JSON.JSONIntIndexType
    "sqlalchemy.types.JSON.JSONIntIndexType") (`sqlalchemy.types.JSONIndexType`)
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.JSON.JSONIntIndexType`](#sqlalchemy.types.JSON.JSONIntIndexType
    "sqlalchemy.types.JSON.JSONIntIndexType") (`sqlalchemy.types.JSONIndexType`)
- en: '[PRE177]'
  id: totrans-1054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Placeholder type for JSON path operations.
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 路径操作的占位符类型。
- en: This allows execution-time processing of a path-based index value into a specific
    SQL syntax.
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许对基于路径的索引值进行执行时处理，转换为特定的 SQL 语法。
- en: '**Class signature**'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONPathType`](#sqlalchemy.types.JSON.JSONPathType
    "sqlalchemy.types.JSON.JSONPathType") (`sqlalchemy.types.JSONElementType`)
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.JSON.JSONPathType`](#sqlalchemy.types.JSON.JSONPathType
    "sqlalchemy.types.JSON.JSONPathType") (`sqlalchemy.types.JSONElementType`)
- en: '[PRE178]'
  id: totrans-1059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Placeholder for the datatype of a JSON index value.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 索引值的数据类型的占位符。
- en: This allows execution-time processing of JSON index values for special syntaxes.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许对特殊语法的 JSON 索引值进行执行时处理。
- en: '**Class signature**'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONStrIndexType`](#sqlalchemy.types.JSON.JSONStrIndexType
    "sqlalchemy.types.JSON.JSONStrIndexType") (`sqlalchemy.types.JSONIndexType`)
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.JSON.JSONStrIndexType`](#sqlalchemy.types.JSON.JSONStrIndexType
    "sqlalchemy.types.JSON.JSONStrIndexType") (`sqlalchemy.types.JSONIndexType`)
- en: '[PRE179]'
  id: totrans-1064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Describe the json value of NULL.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 NULL 的 JSON 值。
- en: 'This value is used to force the JSON value of `"null"` to be used as the value.
    A value of Python `None` will be recognized either as SQL NULL or JSON `"null"`,
    based on the setting of the [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag; the [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")
    constant can be used to always resolve to JSON `"null"` regardless of this setting.
    This is in contrast to the [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct, which always resolves to SQL NULL.
    E.g.:'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 此值用于强制使用 JSON 值`"null"`作为值。Python 的`None`值将根据[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 标志的设置被识别为 SQL NULL 或 JSON`"null"`，常量[`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") 可以始终解析为 JSON`"null"`，而不考虑此设置。这与总是解析为 SQL NULL 的[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 构造形成对比。例如：
- en: '[PRE180]'
  id: totrans-1067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'In order to set JSON NULL as a default value for a column, the most transparent
    method is to use [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text"):'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 JSON NULL 设置为列的默认值，最透明的方法是使用[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")：
- en: '[PRE181]'
  id: totrans-1069
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: While it is possible to use [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")
    in this context, the [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")
    value will be returned as the value of the column, which in the context of the
    ORM or other repurposing of the default value, may not be desirable. Using a SQL
    expression means the value will be re-fetched from the database within the context
    of retrieving generated defaults.
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在这种情况下可以使用[`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")，但[`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") 值将作为列的值返回，这在 ORM 或其他重新使用默认值的情况下可能不理想。使用 SQL 表达式意味着值将在检索生成的默认值的上下文中从数据库重新获取。
- en: '[PRE182]'
  id: totrans-1071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Construct a [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 类型。
- en: 'Parameters:'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**none_as_null=False** –'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: '**none_as_null=False** –'
- en: 'if True, persist the value `None` as a SQL NULL value, not the JSON encoding
    of `null`. Note that when this flag is False, the [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct can still be used to persist a NULL
    value, which may be passed directly as a parameter value that is specially interpreted
    by the [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type as SQL NULL:'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则将值`None`持久化为 SQL NULL 值，而不是`null`的 JSON 编码。请注意，当此标志为 False 时，[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 构造仍然可以用于持久化 NULL 值，可以直接作为参数值传递，由[`JSON`](#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 类型特别解释为 SQL NULL：
- en: '[PRE183]'
  id: totrans-1076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Note
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null "sqlalchemy.types.JSON")
    does **not** apply to the values passed to [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"); a value of `None` passed for these parameters means
    “no default present”.'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null "sqlalchemy.types.JSON")
    不适用于传递给 [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 和 [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 的值；对于这些参数传递的`None`值意味着“没有默认值”。'
- en: Additionally, when used in SQL comparison expressions, the Python value `None`
    continues to refer to SQL null, and not JSON NULL. The [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag refers explicitly to the **persistence** of the
    value within an INSERT or UPDATE statement. The [`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") value should be used for SQL expressions that wish
    to compare to JSON null.
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 SQL 比较表达式中使用时，Python 值`None`仍然指向 SQL null，而不是 JSON NULL。[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 标志明确指的是值在 INSERT 或 UPDATE 语句中的**持久性**。应该使用[`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL")值用于希望与 JSON null 进���比较的 SQL 表达式。
- en: See also
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
- en: '[PRE184]'
  id: totrans-1082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Return a conversion function for processing bind values.
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一的位置参数，并返回一个要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常**私有于正在使用的方言**，并且不是公共类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 正在使用的方言实例。'
- en: '[PRE185]'
  id: totrans-1093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: alias of [`Comparator`](#sqlalchemy.types.JSON.Comparator "sqlalchemy.sql.sqltypes.JSON.Comparator")
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.types.JSON.Comparator "sqlalchemy.sql.sqltypes.JSON.Comparator")
    的别名。'
- en: '[PRE186]'
  id: totrans-1095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Flag, if False, means values from this type aren’t hashable.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 标志，如果为 False，则表示该类型的值不可哈希。
- en: Used by the ORM when uniquing result lists.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ORM 中用于去重结果列表。
- en: '[PRE187]'
  id: totrans-1098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-1099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Return a conversion function for processing result row values.
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收结果行列值作为唯一的位置参数，并将返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回 `None`。
- en: Note
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于**特定方言类型对象**调用，该对象通常是**正在使用的方言的私有对象**，并且不是公共类型对象，这意味着无法通过继承 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类来提供替代 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 方法，除非显式地继承 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 提供替代行为，请实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类并提供 [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 的实现。
- en: See also
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-1109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-1110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中接收的 DBAPI coltype 参数。'
- en: '[PRE189]'
  id: totrans-1111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: If True, the Python constant `None` is considered to be handled explicitly by
    this type.
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则 Python 常量 `None` 被视为由此类型显式处理。
- en: The ORM uses this flag to indicate that a positive value of `None` is passed
    to the column in an INSERT statement, rather than omitting the column from the
    INSERT statement which has the effect of firing off column-level defaults. It
    also allows types which have special behavior for Python None, such as a JSON
    type, to indicate that they’d like to handle the None value explicitly.
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 使用此标志指示在 INSERT 语句中传递了 None 的正值到列中，而不是省略了 INSERT 语句中的列，这会触发列级默认值。它还允许具有对
    Python None 的特殊行为（例如 JSON 类型）的类型指示它们希望显式处理 None 值。
- en: To set this flag on an existing type, use the [`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") method.
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 要在现有类型上设置此标志，请使用 [`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") 方法。
- en: See also
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") 方法。'
- en: '[PRE190]'
  id: totrans-1117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: The SQL INT or INTEGER type.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: SQL INT 或 INTEGER 类型。
- en: See also
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer") - documentation
    for the base type.'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer") - 基本类型的文档。'
- en: '**Class signature**'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.types.INTEGER")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.types.INTEGER")（[`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")）
- en: '[PRE191]'
  id: totrans-1123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: The SQL NCHAR type.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NCHAR 类型。
- en: '**Members**'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.NCHAR.__init__)'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.NCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.NCHAR`](#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    ([`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode"))
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.NCHAR`](#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    ([`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode"))
- en: '[PRE192]'
  id: totrans-1129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") 的 `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于 DDL 和 CAST 表达式中的列的长度。如果不会发出 `CREATE TABLE`，则可以安全地省略。某些数据库可能需要在
    DDL 中使用长度，并且如果包含了没有长度的 `VARCHAR`，则在发出 `CREATE TABLE` DDL 时会引发异常。值是以字节还是字符解释是与数据库特定的。'
- en: '`collation` –'
  id: totrans-1134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于 DDL 和 CAST 表达式中的列级排序规则。在 SQLite、MySQL 和 PostgreSQL 中支持使用 COLLATE 关键字进行渲染。例如：
- en: '[PRE193]'
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Note
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 或
    [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型应该用于预期存储非 ASCII 数据的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE194]'
  id: totrans-1139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: The SQL NVARCHAR type.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NVARCHAR 类型。
- en: '**Members**'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.NVARCHAR.__init__)'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.NVARCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.NVARCHAR`](#sqlalchemy.types.NVARCHAR "sqlalchemy.types.NVARCHAR")
    ([`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode"))
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.NVARCHAR`](#sqlalchemy.types.NVARCHAR "sqlalchemy.types.NVARCHAR")
    ([`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode"))
- en: '[PRE195]'
  id: totrans-1145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") 的 `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于 DDL 和 CAST 表达式中的列的长度。如果不会发出 `CREATE TABLE`，则可以安全地省略。某些数据库可能需要在
    DDL 中使用长度，并且如果包含了没有长度的 `VARCHAR`，则在发出 `CREATE TABLE` DDL 时会引发异常。值是以字节还是字符解释是与数据库特定的。'
- en: '`collation` –'
  id: totrans-1150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于 DDL 和 CAST 表达式中的列级排序规则。在 SQLite、MySQL 和 PostgreSQL 中支持使用 COLLATE 关键字进行渲染。例如：
- en: '[PRE196]'
  id: totrans-1152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Note
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 或
    [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型应该用于预期存储非 ASCII 数据的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE197]'
  id: totrans-1155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: The SQL NUMERIC type.
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NUMERIC 类型。
- en: See also
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") - documentation
    for the base type.'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") - 基础类型的文档。'
- en: '**Members**'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.NUMERIC.__init__)'
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.NUMERIC.__init__)'
- en: '**Class signature**'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.NUMERIC`](#sqlalchemy.types.NUMERIC "sqlalchemy.types.NUMERIC")
    ([`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"))
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.NUMERIC`](#sqlalchemy.types.NUMERIC "sqlalchemy.types.NUMERIC")（[`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")）
- en: '[PRE198]'
  id: totrans-1163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '*inherited from the* `sqlalchemy.types.Numeric.__init__` *method of* [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") *的*
    `sqlalchemy.types.Numeric.__init__` *方法*'
- en: Construct a Numeric.
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Numeric。
- en: 'Parameters:'
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – the numeric precision for use in DDL `CREATE TABLE`.'
  id: totrans-1167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` - 用于DDL `CREATE TABLE` 中的数值精度。'
- en: '`scale` – the numeric scale for use in DDL `CREATE TABLE`.'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` - 用于DDL `CREATE TABLE` 中的数值标度。'
- en: '`asdecimal` – default True. Return whether or not values should be sent as
    Python Decimal objects, or as floats. Different DBAPIs send one or the other based
    on datatypes - the Numeric type will ensure that return values are one or the
    other across DBAPIs consistently.'
  id: totrans-1169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` - 默认为 True。返回值应该作为 Python Decimal 对象还是作为浮点数发送。根据数据类型不同，不同的 DBAPIs
    会发送其中之一 - Numeric 类型将确保返回值在各个 DBAPIs 之间一致地是其中之一。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Types which do include an explicit
    “.scale” value, such as the base [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    as well as the MySQL float types, will use the value of “.scale” as the default
    for decimal_return_scale, if not otherwise specified.'
  id: totrans-1170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` - 转换浮点数为 Python decimal 时使用的默认精度。由于浮点数的不准确性，浮点数值通常会更长，而大多数浮点数数据库类型没有“标度”概念，因此默认情况下，float
    类型在转换时查找前十位小数点。指定此值将覆盖该长度。包含显式“.scale”值的类型，例如基本 [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") 和 MySQL 浮点类型，如果未另行指定，将使用“.scale”的值作为 decimal_return_scale
    的默认值。'
- en: When using the `Numeric` type, care should be taken to ensure that the asdecimal
    setting is appropriate for the DBAPI in use - when Numeric applies a conversion
    from Decimal->float or float-> Decimal, this conversion incurs an additional performance
    overhead for all result columns received.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Numeric` 类型时，应注意确保 asdecimal 设置适用于所使用的 DBAPI - 当 Numeric 应用从 Decimal->float
    或 float-> Decimal 的转换时，此转换会为所有接收到的结果列增加额外的性能开销。
- en: DBAPIs that return Decimal natively (e.g. psycopg2) will have better accuracy
    and higher performance with a setting of `True`, as the native translation to
    Decimal reduces the amount of floating- point issues at play, and the Numeric
    type itself doesn’t need to apply any further conversions. However, another DBAPI
    which returns floats natively *will* incur an additional conversion overhead,
    and is still subject to floating point data loss - in which case `asdecimal=False`
    will at least remove the extra conversion overhead.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 本地返回 Decimal 的 DBAPI（例如 psycopg2）将通过设置为 `True` 获得更好的准确性和更高的性能，因为本地转换为 Decimal
    可降低浮点数问题的数量，并且 Numeric 类型本身不需要应用任何进一步的转换。但是，另一个本地返回浮点数的 DBAPI *将* 需要额外的转换开销，并且仍然可能存在浮点数据丢失
    - 在这种情况下，`asdecimal=False` 将至少消除额外的转换开销。
- en: '[PRE199]'
  id: totrans-1173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: The SQL REAL type.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: SQL REAL 类型。
- en: See also
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") - documentation
    for the base type.'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.REAL.__init__)'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.REAL.__init__)'
- en: '**Class signature**'
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.REAL`](#sqlalchemy.types.REAL "sqlalchemy.types.REAL")
    ([`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float"))
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.REAL`](#sqlalchemy.types.REAL "sqlalchemy.types.REAL")（[`sqlalchemy.types.Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")）
- en: '[PRE200]'
  id: totrans-1181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") *的* `sqlalchemy.types.Float.__init__`
    *方法*'
- en: Construct a Float.
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-1185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` -'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于DDL `CREATE TABLE` 中的数值精度。后端**应**尽量确保此精度指示了通用 [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型的数字位数。
- en: Note
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Oracle后端，在渲染DDL时不接受[`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float")参数，因为Oracle不支持以小数位数指定浮点精度。而是使用特定于Oracle的[`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT")数据类型，并指定[`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")参数。这是SQLAlchemy 2.0版本的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个与Oracle分开指定二进制精度的数据库不可知的[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，请使用[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")如下所示：
- en: '[PRE201]'
  id: totrans-1190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")相同的标志，但默认为`False`。请注意，将此标志设置为`True`会导致浮点转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-1192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 将浮点数转换为Python十进制数时使用的默认精度。由于十进制不准确，浮点值通常会更长，并且大多数浮点数据库类型都没有“精度”的概念，因此默认情况下，浮点类型在转换时会查找前十位小数。指定此值将覆盖该长度。请注意，如果未另行指定，则MySQL浮点类型将使用“精度”作为decimal_return_scale的默认值。'
- en: '[PRE202]'
  id: totrans-1193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: The SQL SMALLINT type.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: SQL SMALLINT 类型。
- en: See also
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger")
    - documentation for the base type.'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger")
    - 基础类型的文档。'
- en: '**Class signature**'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.SMALLINT`](#sqlalchemy.types.SMALLINT "sqlalchemy.types.SMALLINT")
    ([`sqlalchemy.types.SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger"))
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.SMALLINT`](#sqlalchemy.types.SMALLINT "sqlalchemy.types.SMALLINT")
    ([`sqlalchemy.types.SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger"))
- en: '[PRE203]'
  id: totrans-1199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: The SQL TEXT type.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: SQL TEXT 类型。
- en: '**Members**'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.TEXT.__init__)'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.TEXT.__init__)'
- en: '**Class signature**'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.TEXT`](#sqlalchemy.types.TEXT "sqlalchemy.types.TEXT")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.TEXT`](#sqlalchemy.types.TEXT "sqlalchemy.types.TEXT") ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text
    "sqlalchemy.types.Text"))
- en: '[PRE204]'
  id: totrans-1205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个保存字符串的类型。
- en: 'Parameters:'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选项，在DDL和CAST表达式中用于列的长度。如果不会发出`CREATE TABLE`，可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包括没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。值是按字节还是字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-1210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选项，在DDL和CAST表达式中使用的列级排序规则。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字呈现。例如：
- en: '[PRE205]'
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Note
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该为预期存储非 ASCII 数据的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 使用 [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    或 [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE206]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: The SQL TIME type.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: SQL TIME 类型。
- en: '**Class signature**'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.TIME`](#sqlalchemy.types.TIME "sqlalchemy.types.TIME")
    ([`sqlalchemy.types.Time`](#sqlalchemy.types.Time "sqlalchemy.types.Time"))
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.TIME`](#sqlalchemy.types.TIME "sqlalchemy.types.TIME")（[`sqlalchemy.types.Time`](#sqlalchemy.types.Time
    "sqlalchemy.types.Time")）
- en: '[PRE207]'
  id: totrans-1219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: The SQL TIMESTAMP type.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: SQL TIMESTAMP 类型。
- en: '[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP") datatypes
    have support for timezone storage on some backends, such as PostgreSQL and Oracle.
    Use the `TIMESTAMP.timezone` argument in order to enable “TIMESTAMP WITH TIMEZONE”
    for these backends.'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP") 数据类型在一些后端（如
    PostgreSQL 和 Oracle）上支持时区存储。请使用 `TIMESTAMP.timezone` 参数以在这些后端上启用“TIMESTAMP WITH
    TIMEZONE”。'
- en: '**Members**'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.TIMESTAMP.__init__), [get_dbapi_type()](#sqlalchemy.types.TIMESTAMP.get_dbapi_type)'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.TIMESTAMP.__init__)，[get_dbapi_type()](#sqlalchemy.types.TIMESTAMP.get_dbapi_type)'
- en: '**Class signature**'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    ([`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime"))
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")（[`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")）
- en: '[PRE208]'
  id: totrans-1226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Construct a new [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP").
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")。
- en: 'Parameters:'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**timezone** – boolean. Indicates that the TIMESTAMP type should enable timezone
    support, if available on the target database. On a per-dialect basis is similar
    to “TIMESTAMP WITH TIMEZONE”. If the target database does not support timezones,
    this flag is ignored.'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: '**timezone** – 布尔值。指示 TIMESTAMP 类型应该在目标数据库上启用时区支持（如果可用）。在每个方言上类似于“TIMESTAMP
    WITH TIMEZONE”。如果目标数据库不支持时区，则此标志将被忽略。'
- en: '[PRE209]'
  id: totrans-1230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层 DB-API 的相应类型对象（如果有）。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于调用 `setinputsizes()` 等操作可能很有用。
- en: '[PRE210]'
  id: totrans-1233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Represent the SQL UUID type.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL UUID 类型。
- en: This is the SQL-native form of the [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    database agnostic datatype, and is backwards compatible with the previous PostgreSQL-only
    version of `UUID`.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与以前的仅限于 PostgreSQL 版本的 `UUID` 向后兼容的 SQL 本地形式的 [`Uuid`](#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据库无关数据类型。
- en: The [`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") datatype only works
    on databases that have a SQL datatype named `UUID`. It will not function for backends
    which don’t have this exact-named type, including SQL Server. For backend-agnostic
    UUID values with native support, including for SQL Server’s `UNIQUEIDENTIFIER`
    datatype, use the [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") datatype.
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") 数据类型仅适用于具有名为 `UUID`
    的 SQL 数据类型的数据库。对于没有这个确切命名类型的后端，包括 SQL Server，在其上不起作用。对于具有本机支持的与后端无关的 UUID 值，包括
    SQL Server 的 `UNIQUEIDENTIFIER` 数据类型，请使用 [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    数据类型。'
- en: New in version 2.0.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中的新增内容。
- en: See also
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")'
- en: '**Members**'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.UUID.__init__)'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.UUID.__init__)'
- en: '**Class signature**'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    ([`sqlalchemy.types.Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid"), `sqlalchemy.types.NativeForEmulated`)
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID")（[`sqlalchemy.types.Uuid`](#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")，`sqlalchemy.types.NativeForEmulated`）
- en: '[PRE211]'
  id: totrans-1244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Construct a [`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") type.
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") 类型。
- en: 'Parameters:'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**as_uuid=True** –'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: '**as_uuid=True** –'
- en: if True, values will be interpreted as Python uuid objects, converting to/from
    string via the DBAPI.
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则值将被解释为 Python uuid 对象，并通过 DBAPI 转换为/从字符串。
- en: '[PRE212]'
  id: totrans-1249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: The SQL VARBINARY type.
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: SQL VARBINARY 类型。
- en: '**Class signature**'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.VARBINARY`](#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")
    (`sqlalchemy.types._Binary`)
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.VARBINARY`](#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")（`sqlalchemy.types._Binary`）
- en: '[PRE213]'
  id: totrans-1253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: The SQL VARCHAR type.
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: SQL VARCHAR类型。
- en: '**Members**'
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.VARCHAR.__init__)'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.VARCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.VARCHAR`](#sqlalchemy.types.VARCHAR "sqlalchemy.types.VARCHAR")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.VARCHAR`](#sqlalchemy.types.VARCHAR "sqlalchemy.types.VARCHAR")（[`sqlalchemy.types.String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")）
- en: '[PRE214]'
  id: totrans-1259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法继承*'
- en: Create a string-holding type.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于DDL和CAST表达式中的列的长度。 如果不会发出`CREATE TABLE`，可以安全地省略。 某些数据库可能需要在DDL中使用`length`，如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。 值是以字节还是字符解释是与数据库特定的。'
- en: '`collation` –'
  id: totrans-1264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式中的列级排序规则。 使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行呈现。 例如：
- en: '[PRE215]'
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Note
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。 这些数据类型将确保在数据库上使用正确的类型。
- en: The “CamelCase” datatypes
  id: totrans-1269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “驼峰大小写”数据类型
- en: The rudimental types have “CamelCase” names such as [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String"), [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"),
    [`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"), and [`DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"). All of the immediate subclasses of [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") are “CamelCase” types. The “CamelCase” types are
    to the greatest degree possible **database agnostic**, meaning they can all be
    used on any database backend where they will behave in such a way as appropriate
    to that backend in order to produce the desired behavior.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 初级类型具有“驼峰大小写”名称，如[`String`](#sqlalchemy.types.String "sqlalchemy.types.String")、[`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")、[`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")和[`DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")。 所有[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")的直接子类都是“驼峰大小写”类型。 “驼峰大小写”类型在尽可能大的程度上是**与数据库无关的**，这意味着它们可以在任何数据库后端上使用，在那里它们将以适当的方式行事，以产生所需的行为。
- en: 'An example of a straightforward “CamelCase” datatype is [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String"). On most backends, using this datatype in a [table
    specification](metadata.html#metadata-describing) will correspond to the `VARCHAR`
    database type being used on the target backend, delivering string values to and
    from the database, as in the example below:'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的“驼峰大小写”数据类型的例子是[`String`](#sqlalchemy.types.String "sqlalchemy.types.String")。
    在大多数后端上，使用此数据类型在[table specification](metadata.html#metadata-describing)中将对应于在目标后端上使用的`VARCHAR`数据库类型，将字符串值传递到数据库中，如下例所示：
- en: '[PRE216]'
  id: totrans-1272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: When using a particular [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") definition or in any SQL expression overall, if no
    arguments are required it may be passed as the class itself, that is, without
    instantiating it with `()`. If arguments are needed, such as the length argument
    of 60 in the `"email_address"` column above, the type may be instantiated.
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    定义或整体 SQL 表达式中使用特定的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    类时，如果不需要参数，可以将其作为类本身传递，即，不用 `()` 实例化。如果需要参数，比如上面的 `"email_address"` 列中的长度参数 60，可以实例化该类型。
- en: Another “CamelCase” datatype that expresses more backend-specific behavior is
    the [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") datatype.
    Unlike [`String`](#sqlalchemy.types.String "sqlalchemy.types.String"), which represents
    a string datatype that all databases have, not every backend has a real “boolean”
    datatype; some make use of integers or BIT values 0 and 1, some have boolean literal
    constants `true` and `false` while others dont. For this datatype, [`Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") may render `BOOLEAN` on a backend such as PostgreSQL,
    `BIT` on the MySQL backend and `SMALLINT` on Oracle. As data is sent and received
    from the database using this type, based on the dialect in use it may be interpreting
    Python numeric or boolean values.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个表达更多后端特定行为的“CamelCase” 数据类型是 [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    数据类型。与 [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") 不同，后端并非每一个都有真正的“boolean”数据类型；有些使用整数或位值
    0 和 1，有些具有布尔字面常量 `true` 和 `false`，而其他的则不具备。对于这种数据类型，[`Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 在后端（如 PostgreSQL）可能呈现为 `BOOLEAN`，在 MySQL 后端为 `BIT`，在
    Oracle 中为 `SMALLINT`。根据使用的方言，作为使用该类型从数据库发送和接收数据的结果，它可能会解释 Python 数值或布尔值。
- en: The typical SQLAlchemy application will likely wish to use primarily “CamelCase”
    types in the general case, as they will generally provide the best basic behavior
    and be automatically portable to all backends.
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的 SQLAlchemy 应用程序可能会主要使用一般情况下的“CamelCase” 类型，因为它们通常提供最佳的基本行为，并且可以自动移植到所有后端。
- en: Reference for the general set of “CamelCase” datatypes is below at [Generic
    “CamelCase” Types](#types-generic).
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的“CamelCase” 数据类型的参考在下面的 [通用“CamelCase” 类型](#types-generic) 处。
- en: The “UPPERCASE” datatypes
  id: totrans-1277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “UPPERCASE” 数据类型
- en: In contrast to the “CamelCase” types are the “UPPERCASE” datatypes. These datatypes
    are always inherited from a particular “CamelCase” datatype, and always represent
    an **exact** datatype. When using an “UPPERCASE” datatype, the name of the type
    is always rendered exactly as given, without regard for whether or not the current
    backend supports it. Therefore the use of “UPPERCASE” types in a SQLAlchemy application
    indicates that specific datatypes are required, which then implies that the application
    would normally, without additional steps taken, be limited to those backends which
    use the type exactly as given. Examples of UPPERCASE types include [`VARCHAR`](#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"), [`NUMERIC`](#sqlalchemy.types.NUMERIC "sqlalchemy.types.NUMERIC"),
    [`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.types.INTEGER"), and [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"), which inherit directly from the previously mentioned
    “CamelCase” types [`String`](#sqlalchemy.types.String "sqlalchemy.types.String"),
    [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"), [`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), and [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime"),
    respectively.
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: 与“CamelCase” 类型相反的是“UPPERCASE” 数据类型。这些数据类型始终继承自特定的“CamelCase” 数据类型，并且始终表示**精确的**数据类型。在使用“UPPERCASE”
    数据类型时，类型的名称始终如实呈现，不考虑当前后端是否支持它。因此，在 SQLAlchemy 应用程序中使用“UPPERCASE” 类型表明需要特定的数据类型，这意味着应用程序通常（在没有采取其他步骤的情况下）会受限于以给定类型精确使用的后端。UPPERCASE
    类型的示例包括 [`VARCHAR`](#sqlalchemy.types.VARCHAR "sqlalchemy.types.VARCHAR")、[`NUMERIC`](#sqlalchemy.types.NUMERIC
    "sqlalchemy.types.NUMERIC")、[`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.types.INTEGER")
    和 [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")，它们直接继承自先前提到的“CamelCase”
    类型 [`String`](#sqlalchemy.types.String "sqlalchemy.types.String")、[`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")、[`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    和 [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")。
- en: The “UPPERCASE” datatypes that are part of `sqlalchemy.types` are common SQL
    types that typically expect to be available on at least two backends if not more.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.types`中的“大写”数据类型是常见的SQL类型，通常希望至少在两个后端上可用，如果不是更多。'
- en: Reference for the general set of “UPPERCASE” datatypes is below at [SQL Standard
    and Multiple Vendor “UPPERCASE” Types](#types-sqlstandard).
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 一般的“大写”数据类型的参考如下所示：[SQL标准和多供应商“大写”类型](#types-sqlstandard)。
- en: '## Backend-specific “UPPERCASE” datatypes'
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: '## 后端特定“大写”数据类型'
- en: Most databases also have their own datatypes that are either fully specific
    to those databases, or add additional arguments that are specific to those databases.
    For these datatypes, specific SQLAlchemy dialects provide **backend-specific**
    “UPPERCASE” datatypes, for a SQL type that has no analogue on other backends.
    Examples of backend-specific uppercase datatypes include PostgreSQL’s [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"), SQL Server’s [`IMAGE`](../dialects/mssql.html#sqlalchemy.dialects.mssql.IMAGE
    "sqlalchemy.dialects.mssql.IMAGE") and MySQL’s [`TINYTEXT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TINYTEXT
    "sqlalchemy.dialects.mysql.TINYTEXT").
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库还具有自己的数据类型，这些数据类型要么完全特定于这些数据库，要么添加了特定于这些数据库的附加参数。对于这些数据类型，特定的SQLAlchemy方言提供**特定于后端**的“大写”数据类型，用于没有在其他后端上有类似物的SQL类型。后端特定大写数据类型的示例包括PostgreSQL的[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")、SQL Server的[`IMAGE`](../dialects/mssql.html#sqlalchemy.dialects.mssql.IMAGE
    "sqlalchemy.dialects.mssql.IMAGE")和MySQL的[`TINYTEXT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TINYTEXT
    "sqlalchemy.dialects.mysql.TINYTEXT")。
- en: Specific backends may also include “UPPERCASE” datatypes that extend the arguments
    available from that same “UPPERCASE” datatype as found in the `sqlalchemy.types`
    module. An example is when creating a MySQL string datatype, one might want to
    specify MySQL-specific arguments such as `charset` or `national`, which are available
    from the MySQL version of [`VARCHAR`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR") as the MySQL-only parameters [`VARCHAR.charset`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR") and [`VARCHAR.national`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.national
    "sqlalchemy.dialects.mysql.VARCHAR").
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 特定后端可能还包括“大写”数据类型，这些数据类型扩展了`sqlalchemy.types`模块中同一“大写”数据类型可用的参数。例如，在创建MySQL字符串数据类型时，可能希望指定MySQL特定参数，如`charset`或`national`，这些参数可从MySQL版本的[`VARCHAR`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR")中获得，作为MySQL专用参数[`VARCHAR.charset`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR")和[`VARCHAR.national`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.national
    "sqlalchemy.dialects.mysql.VARCHAR")。
- en: API documentation for backend-specific types are in the dialect-specific documentation,
    listed at [Dialects](../dialects/index.html).
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 后端特定类型的API文档位于方言特定文档中，在[Dialects](../dialects/index.html)列出。
- en: '## Using “UPPERCASE” and Backend-specific types for multiple backends'
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: '## 对于多个后端使用“大写”和后端特定类型'
- en: Reviewing the presence of “UPPERCASE” and “CamelCase” types leads to the natural
    use case of how to make use of “UPPERCASE” datatypes for backend-specific options,
    but only when that backend is in use. To tie together the database-agnostic “CamelCase”
    and backend-specific “UPPERCASE” systems, one makes use of the [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method in order to **compose** types
    together to work with specific behaviors on specific backends.
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 查看“大写”和“CamelCase”类型的存在，自然会引出如何利用后端特定选项使用“大写”数据类型的用例，但仅当该后端正在使用时。为了将数据库不可知的“CamelCase”和后端特定的“大写”系统联系在一起，可以使用[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法将类型组合在一起，以便在特定后端上使用特定行为。
- en: 'Such as, to use the [`String`](#sqlalchemy.types.String "sqlalchemy.types.String")
    datatype, but when running on MySQL to make use of the [`VARCHAR.charset`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR") parameter of [`VARCHAR`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR") when the table is created on MySQL or MariaDB,
    [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") may be used as below:'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用 [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") 数据类型，但在
    MySQL 上运行时要利用 [`VARCHAR.charset`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR.params.charset
    "sqlalchemy.dialects.mysql.VARCHAR") 参数的 [`VARCHAR`](../dialects/mysql.html#sqlalchemy.dialects.mysql.VARCHAR
    "sqlalchemy.dialects.mysql.VARCHAR") 在创建表时在 MySQL 或 MariaDB 上使用时，可以使用 [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下所示：
- en: '[PRE217]'
  id: totrans-1288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: In the above table definition, the `"bio"` column will have string-behaviors
    on all backends. On most backends it will render in DDL as `VARCHAR`. However
    on MySQL and MariaDB (indicated by database URLs that start with `mysql` or `mariadb`),
    it will render as `VARCHAR(255) CHARACTER SET utf8`.
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述表定义中，“bio”列将在所有后端具有字符串行为。在大多数后端上，它将呈现为 `DDL`，例如 `VARCHAR`。然而，在 MySQL 和 MariaDB（通过以
    `mysql` 或 `mariadb` 开头的数据库 URL 表示）上，它将呈现为 `VARCHAR(255) CHARACTER SET utf8`。
- en: See also
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") - additional usage examples and notes'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") - 附加使用示例和说明'
- en: '## Generic “CamelCase” Types'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: '## 通用“驼峰命名”类型'
- en: Generic types specify a column that can read, write and store a particular type
    of Python data. SQLAlchemy will choose the best database column type available
    on the target database when issuing a `CREATE TABLE` statement. For complete control
    over which column type is emitted in `CREATE TABLE`, such as `VARCHAR` see [SQL
    Standard and Multiple Vendor “UPPERCASE” Types](#types-sqlstandard) and the other
    sections of this chapter.
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: 通用类型指定可以读取、写入和存储特定类型的 Python 数据的列。当发出 `CREATE TABLE` 语句时，SQLAlchemy 将选择目标数据库上可用的最佳数据库列类型。要完全控制在
    `CREATE TABLE` 中发出的列类型，例如 `VARCHAR`，请参阅 [SQL 标准和多供应商“大写”类型](#types-sqlstandard)
    和本章的其他部分。
- en: '| Object Name | Description |'
  id: totrans-1294
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1295
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BigInteger](#sqlalchemy.types.BigInteger) | A type for bigger `int` integers.
    |'
  id: totrans-1296
  prefs: []
  type: TYPE_TB
  zh: '| [BigInteger](#sqlalchemy.types.BigInteger) | 用于更大的 `int` 整数的类型。 |'
- en: '| [Boolean](#sqlalchemy.types.Boolean) | A bool datatype. |'
  id: totrans-1297
  prefs: []
  type: TYPE_TB
  zh: '| [Boolean](#sqlalchemy.types.Boolean) | 布尔数据类型。 |'
- en: '| [Date](#sqlalchemy.types.Date) | A type for `datetime.date()` objects. |'
  id: totrans-1298
  prefs: []
  type: TYPE_TB
  zh: '| [Date](#sqlalchemy.types.Date) | 用于 `datetime.date()` 对象的类型。 |'
- en: '| [DateTime](#sqlalchemy.types.DateTime) | A type for `datetime.datetime()`
    objects. |'
  id: totrans-1299
  prefs: []
  type: TYPE_TB
  zh: '| [DateTime](#sqlalchemy.types.DateTime) | 用于 `datetime.datetime()` 对象的类型。
    |'
- en: '| [Double](#sqlalchemy.types.Double) | A type for double `FLOAT` floating point
    types. |'
  id: totrans-1300
  prefs: []
  type: TYPE_TB
  zh: '| [Double](#sqlalchemy.types.Double) | 用于双精度 `FLOAT` 浮点类型的类型。 |'
- en: '| [Enum](#sqlalchemy.types.Enum) | Generic Enum Type. |'
  id: totrans-1301
  prefs: []
  type: TYPE_TB
  zh: '| [Enum](#sqlalchemy.types.Enum) | 通用枚举类型。 |'
- en: '| [Float](#sqlalchemy.types.Float) | Type representing floating point types,
    such as `FLOAT` or `REAL`. |'
  id: totrans-1302
  prefs: []
  type: TYPE_TB
  zh: '| [Float](#sqlalchemy.types.Float) | 表示浮点类型，例如 `FLOAT` 或 `REAL` 的类型。 |'
- en: '| [Integer](#sqlalchemy.types.Integer) | A type for `int` integers. |'
  id: totrans-1303
  prefs: []
  type: TYPE_TB
  zh: '| [Integer](#sqlalchemy.types.Integer) | 用于 `int` 整数的类型。 |'
- en: '| [Interval](#sqlalchemy.types.Interval) | A type for `datetime.timedelta()`
    objects. |'
  id: totrans-1304
  prefs: []
  type: TYPE_TB
  zh: '| [Interval](#sqlalchemy.types.Interval) | 用于 `datetime.timedelta()` 对象的类型。
    |'
- en: '| [LargeBinary](#sqlalchemy.types.LargeBinary) | A type for large binary byte
    data. |'
  id: totrans-1305
  prefs: []
  type: TYPE_TB
  zh: '| [LargeBinary](#sqlalchemy.types.LargeBinary) | 用于大型二进制字节数据的类型。 |'
- en: '| [MatchType](#sqlalchemy.types.MatchType) | Refers to the return type of the
    MATCH operator. |'
  id: totrans-1306
  prefs: []
  type: TYPE_TB
  zh: '| [MatchType](#sqlalchemy.types.MatchType) | 指 MATCH 运算符的返回类型。 |'
- en: '| [Numeric](#sqlalchemy.types.Numeric) | Base for non-integer numeric types,
    such as `NUMERIC`, `FLOAT`, `DECIMAL`, and other variants. |'
  id: totrans-1307
  prefs: []
  type: TYPE_TB
  zh: '| [Numeric](#sqlalchemy.types.Numeric) | 非整数数值类型的基础，例如 `NUMERIC`、`FLOAT`、`DECIMAL`
    和其他变体。 |'
- en: '| [PickleType](#sqlalchemy.types.PickleType) | Holds Python objects, which
    are serialized using pickle. |'
  id: totrans-1308
  prefs: []
  type: TYPE_TB
  zh: '| [PickleType](#sqlalchemy.types.PickleType) | 存储使用 pickle 序列化的 Python 对象。
    |'
- en: '| [SchemaType](#sqlalchemy.types.SchemaType) | Add capabilities to a type which
    allow for schema-level DDL to be associated with a type. |'
  id: totrans-1309
  prefs: []
  type: TYPE_TB
  zh: '| [SchemaType](#sqlalchemy.types.SchemaType) | 为类型添加功能，允许将模式级 DDL 与类型关联起来。
    |'
- en: '| [SmallInteger](#sqlalchemy.types.SmallInteger) | A type for smaller `int`
    integers. |'
  id: totrans-1310
  prefs: []
  type: TYPE_TB
  zh: '| [SmallInteger](#sqlalchemy.types.SmallInteger) | 用于较小的 `int` 整数的类型。 |'
- en: '| [String](#sqlalchemy.types.String) | The base for all string and character
    types. |'
  id: totrans-1311
  prefs: []
  type: TYPE_TB
  zh: '| [String](#sqlalchemy.types.String) | 所有字符串和字符类型的基类。 |'
- en: '| [Text](#sqlalchemy.types.Text) | A variably sized string type. |'
  id: totrans-1312
  prefs: []
  type: TYPE_TB
  zh: '| [Text](#sqlalchemy.types.Text) | 可变大小的字符串类型。 |'
- en: '| [Time](#sqlalchemy.types.Time) | A type for `datetime.time()` objects. |'
  id: totrans-1313
  prefs: []
  type: TYPE_TB
  zh: '| [Time](#sqlalchemy.types.Time) | 用于 `datetime.time()` 对象的类型。 |'
- en: '| [Unicode](#sqlalchemy.types.Unicode) | A variable length Unicode string type.
    |'
  id: totrans-1314
  prefs: []
  type: TYPE_TB
  zh: '| [Unicode](#sqlalchemy.types.Unicode) | 一个可变长度的 Unicode 字符串类型。 |'
- en: '| [UnicodeText](#sqlalchemy.types.UnicodeText) | An unbounded-length Unicode
    string type. |'
  id: totrans-1315
  prefs: []
  type: TYPE_TB
  zh: '| [UnicodeText](#sqlalchemy.types.UnicodeText) | 一个长度不受限制的 Unicode 字符串类型。 |'
- en: '| [Uuid](#sqlalchemy.types.Uuid) | Represent a database agnostic UUID datatype.
    |'
  id: totrans-1316
  prefs: []
  type: TYPE_TB
  zh: '| [Uuid](#sqlalchemy.types.Uuid) | 表示数据库无关的 UUID 数据类型。 |'
- en: '[PRE218]'
  id: totrans-1317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: A type for bigger `int` integers.
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 用于更大的 `int` 整数的类型。
- en: Typically generates a `BIGINT` in DDL, and otherwise acts like a normal [`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") on the Python side.
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在 DDL 中生成一个 `BIGINT`，在 Python 端表现得像一个普通的 [`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")。
- en: '**Class signature**'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
- en: '[PRE219]'
  id: totrans-1322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: A bool datatype.
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 一个布尔值数据类型。
- en: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") typically
    uses BOOLEAN or SMALLINT on the DDL side, and on the Python side deals in `True`
    or `False`.'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") 通常在 DDL 端使用
    BOOLEAN 或 SMALLINT，在 Python 端处理 `True` 或 `False`。'
- en: The [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") datatype
    currently has two levels of assertion that the values persisted are simple true/false
    values. For all backends, only the Python values `None`, `True`, `False`, `1`
    or `0` are accepted as parameter values. For those backends that don’t support
    a “native boolean” datatype, an option exists to also create a CHECK constraint
    on the target column
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") 数据类型当前有两个级别的断言，即持久化的值是简单的真/假值。对于所有后端，只接受
    Python 值 `None`、`True`、`False`、`1` 或 `0` 作为参数值。对于那些不支持“原生布尔值”数据类型的后端，还可以选择在目标列上创建一个
    CHECK 约束'
- en: 'Changed in version 1.2: the [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    datatype now asserts that incoming Python values are already in pure boolean form.'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.2 开始：[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    数据类型现在断言传入的 Python 值已经是纯布尔形式。
- en: '**Members**'
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Boolean.__init__), [bind_processor()](#sqlalchemy.types.Boolean.bind_processor),
    [literal_processor()](#sqlalchemy.types.Boolean.literal_processor), [python_type](#sqlalchemy.types.Boolean.python_type),
    [result_processor()](#sqlalchemy.types.Boolean.result_processor)'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Boolean.__init__), [bind_processor()](#sqlalchemy.types.Boolean.bind_processor),
    [literal_processor()](#sqlalchemy.types.Boolean.literal_processor), [python_type](#sqlalchemy.types.Boolean.python_type),
    [result_processor()](#sqlalchemy.types.Boolean.result_processor)'
- en: '**Class signature**'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    ([`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType"),
    `sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    ([`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType"),
    `sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE220]'
  id: totrans-1331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Construct a Boolean.
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个布尔值。
- en: 'Parameters:'
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`create_constraint` –'
  id: totrans-1334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. If the boolean is generated as an int/smallint, also create
    a CHECK constraint on the table that ensures 1 or 0 as a value.
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。如果布尔值生成为 int/smallint，则在表上创建一个 CHECK 约束，确保值为 1 或 0。
- en: Note
  id: totrans-1336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Boolean.name`](#sqlalchemy.types.Boolean.params.name "sqlalchemy.types.Boolean")
    parameter or by setting up an appropriate naming convention; see [Configuring
    Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议 CHECK 约束具有明确的名称，以支持模式管理问题。这可以通过设置 [`Boolean.name`](#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean") 参数或设置适当的命名约定来实现；参见[配置约束命名约定](constraints.html#constraint-naming-conventions)以获取背景信息。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：- 此标志现在默认为 False，表示对于非本机枚举类型不生成 CHECK 约束。
- en: '`name` – if a CHECK constraint is generated, specify the name of the constraint.'
  id: totrans-1339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 如果生成了 CHECK 约束，则指定约束的名称。'
- en: '[PRE221]'
  id: totrans-1340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: Return a conversion function for processing bind values.
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一的位置参数，并返回一个要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则方法应返回 `None`。
- en: Note
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 仅相对于 **方言特定的类型对象** 调用此方法，该对象通常是 **当前使用的方言的私有对象**，并且不是公共面向的相同类型对象，这意味着不可通过子类化
    [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    类来提供替代的 [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 方法，除非显式地子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 提供替代行为，需实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供 [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param") 的实现。
- en: See also
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 当前使用的方言实例。'
- en: '[PRE222]'
  id: totrans-1351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理直接渲染而不使用绑定的字面值的转换函数。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时使用此函数，通常在 DDL 生成以及某些后端不接受绑定参数的情况下使用。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面的 Python 值作为唯一的位置参数，并返回一个字符串表示以在 SQL 语句中渲染。
- en: Note
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 仅相对于 **方言特定的类型对象** 调用此方法，该对象通常是 **当前使用的方言的私有对象**，并且不是公共面向的相同类型对象，这意味着不可通过子类化
    [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    类来提供替代的 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 方法，除非显式地子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 提供备用行为，实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供一个 [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 的实现。
- en: See also
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE223]'
  id: totrans-1360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-1361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Return a conversion function for processing result row values.
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个结果行列值作为唯一的位置参数，并返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，该方法应返回`None`。
- en: Note
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于一个**方言特定的类型对象**调用，该对象通常是**私有于正在使用的方言**，并且不是公共面向的类型对象，这意味着不可能为了提供一个备用的[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法而子类化一个[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 提供备用行为，实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供一个 [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 的实现。
- en: See also
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-1371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-1372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中接收到的 DBAPI coltype 参数。'
- en: '[PRE225]'
  id: totrans-1373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: A type for `datetime.date()` objects.
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 一种用于`datetime.date()`对象的类型。
- en: '**Members**'
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_dbapi_type()](#sqlalchemy.types.Date.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Date.literal_processor),
    [python_type](#sqlalchemy.types.Date.python_type)'
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_dbapi_type()](#sqlalchemy.types.Date.get_dbapi_type)、[literal_processor()](#sqlalchemy.types.Date.literal_processor)、[python_type](#sqlalchemy.types.Date.python_type)'
- en: '**Class signature**'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Date`](#sqlalchemy.types.Date "sqlalchemy.types.Date")
    (`sqlalchemy.types._RenderISO8601NoT`, `sqlalchemy.types.HasExpressionLookup`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Date`](#sqlalchemy.types.Date "sqlalchemy.types.Date")（`sqlalchemy.types._RenderISO8601NoT`、`sqlalchemy.types.HasExpressionLookup`、[`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE226]'
  id: totrans-1379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，从底层的 DB-API 返回相应的类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对于调用`setinputsizes()`可能会有用。
- en: '[PRE227]'
  id: totrans-1382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理直接渲染而不使用绑定的字面值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时使用此函数，通常用于DDL生成以及某些情况下后端不接受绑定参数的情况。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面Python值作为唯一的位置参数，并返回一个字符串表示以在SQL语句中呈现。
- en: Note
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常**私有于正在使用的方言**，并且不是公共类型对象，这意味着无法子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类以提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE228]'
  id: totrans-1391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-1392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: A type for `datetime.datetime()` objects.
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`datetime.datetime()`对象的类型。
- en: Date and time types return objects from the Python `datetime` module. Most DBAPIs
    have built in support for the datetime module, with the noted exception of SQLite.
    In the case of SQLite, date and time types are stored as strings which are then
    converted back to datetime objects when rows are returned.
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 日期和时间类型返回来自Python `datetime` 模块的对象。大多数DBAPI都内置支持datetime模块，但SQLite是个例外。在SQLite的情况下，日期和时间类型被存储为字符串，然后在返回行时转换回datetime对象。
- en: For the time representation within the datetime type, some backends include
    additional options, such as timezone support and fractional seconds support. For
    fractional seconds, use the dialect-specific datatype, such as [`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME
    "sqlalchemy.dialects.mysql.TIME"). For timezone support, use at least the [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") datatype, if not the dialect-specific datatype object.
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 对于datetime类型中的时间表示，某些后端包括其他选项，例如时区支持和分数秒支持。对于分数秒，使用方言特定的数据类型，例如[`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME
    "sqlalchemy.dialects.mysql.TIME")。对于时区支持，请至少使用[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP")数据类型，如果不是方言特定的数据类型对象的话。
- en: '**Members**'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DateTime.__init__), [get_dbapi_type()](#sqlalchemy.types.DateTime.get_dbapi_type),
    [literal_processor()](#sqlalchemy.types.DateTime.literal_processor), [python_type](#sqlalchemy.types.DateTime.python_type)'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DateTime.__init__), [get_dbapi_type()](#sqlalchemy.types.DateTime.get_dbapi_type),
    [literal_processor()](#sqlalchemy.types.DateTime.literal_processor), [python_type](#sqlalchemy.types.DateTime.python_type)'
- en: '**Class signature**'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    (`sqlalchemy.types._RenderISO8601NoT`, `sqlalchemy.types.HasExpressionLookup`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    (`sqlalchemy.types._RenderISO8601NoT`, `sqlalchemy.types.HasExpressionLookup`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
- en: '[PRE230]'
  id: totrans-1400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Construct a new [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime").
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")。
- en: 'Parameters:'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**timezone** – boolean. Indicates that the datetime type should enable timezone
    support, if available on the **base date/time-holding type only**. It is recommended
    to make use of the [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    datatype directly when using this flag, as some databases include separate generic
    date/time-holding types distinct from the timezone-capable TIMESTAMP datatype,
    such as Oracle.'
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: '**timezone** – boolean。指示日期时间类型是否应启用时区支持，仅适用于**基本日期/时间保持类型**。建议在使用此标志时直接使用[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP")数据类型，因为某些数据库包括与时区可用的TIMESTAMP数据类型不同的单独的通用日期/时间保持类型，如Oracle。'
- en: '[PRE231]'
  id: totrans-1404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，从底层DB-API返回相应的类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对调用`setinputsizes()`可能很有用。
- en: '[PRE232]'
  id: totrans-1407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理要直接呈现而不使用绑定的文字值的转换函数。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，将使用此函数，通常在DDL生成以及某些不接受绑定参数的后端场景中使用。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面的Python值作为唯一的位置参数，并返回一个字符串表示，以在SQL语句中呈现。
- en: Note
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法仅在**特定方言类型对象**的相对位置上调用，该对象通常**是使用的方言的私有部分**，并且与公共类型对象不同，这意味着无法子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类以提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式地对[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类进行子类化。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE233]'
  id: totrans-1416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-1417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Generic Enum Type.
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 通用枚举类型。
- en: The [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") type provides a
    set of possible string values which the column is constrained towards.
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型提供了一组可能的字符串值，该列受其约束。'
- en: The [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") type will make
    use of the backend’s native “ENUM” type if one is available; otherwise, it uses
    a VARCHAR datatype. An option also exists to automatically produce a CHECK constraint
    when the VARCHAR (so called “non-native”) variant is produced; see the [`Enum.create_constraint`](#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") flag.
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可用，[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型将使用后端的本机“ENUM”类型；否则，它使用VARCHAR数据类型。当产生VARCHAR（所谓的“非本机”）变体时，还存在一种自动生成CHECK约束的选项；请参阅[`Enum.create_constraint`](#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum")标志。
- en: The [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") type also provides
    in-Python validation of string values during both read and write operations. When
    reading a value from the database in a result set, the string value is always
    checked against the list of possible values and a `LookupError` is raised if no
    match is found. When passing a value to the database as a plain string within
    a SQL statement, if the [`Enum.validate_strings`](#sqlalchemy.types.Enum.params.validate_strings
    "sqlalchemy.types.Enum") parameter is set to True, a `LookupError` is raised for
    any string value that’s not located in the given list of possible values; note
    that this impacts usage of LIKE expressions with enumerated values (an unusual
    use case).
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 类型还提供了在 Python 中对字符串值进行读写操作时的验证。在结果集中从数据库中读取值时，始终会检查字符串值是否与可能值列表匹配，如果没有找到匹配项，则会引发
    `LookupError`。在将值作为纯字符串传递给 SQL 语句中的数据库时，如果 [`Enum.validate_strings`](#sqlalchemy.types.Enum.params.validate_strings
    "sqlalchemy.types.Enum") 参数设置为 True，则对于不在给定可能值列表中的任何字符串值都会引发 `LookupError`；请注意，这会影响使用枚举值的
    LIKE 表达式的用法（一个不寻常的用例）。'
- en: The source of enumerated values may be a list of string values, or alternatively
    a PEP-435-compliant enumerated class. For the purposes of the [`Enum`](#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype, this class need only provide a `__members__`
    method.
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举值的来源可以是字符串值列表，也可以是符合 PEP-435 的枚举类。对于 [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    数据类型，此类只需要提供一个 `__members__` 方法。
- en: 'When using an enumerated class, the enumerated objects are used both for input
    and output, rather than strings as is the case with a plain-string enumerated
    type:'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用枚举类时，枚举对象用于输入和输出，而不是字符串，这与普通字符串枚举类型的情况不同：
- en: '[PRE235]'
  id: totrans-1424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Above, the string names of each element, e.g. “one”, “two”, “three”, are persisted
    to the database; the values of the Python Enum, here indicated as integers, are
    **not** used; the value of each enum can therefore be any kind of Python object
    whether or not it is persistable.
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，每个元素的字符串名称，例如“one”、“two”、“three”，被持久化到数据库中；Python 枚举的值，这里表示为整数，**不会**被使用；因此，每个枚举的值可以是任何类型的
    Python 对象，无论它是否可持久化。
- en: 'In order to persist the values and not the names, the [`Enum.values_callable`](#sqlalchemy.types.Enum.params.values_callable
    "sqlalchemy.types.Enum") parameter may be used. The value of this parameter is
    a user-supplied callable, which is intended to be used with a PEP-435-compliant
    enumerated class and returns a list of string values to be persisted. For a simple
    enumeration that uses string values, a callable such as `lambda x: [e.value for
    e in x]` is sufficient.'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: '为了持久化值而不是名称，可以使用 [`Enum.values_callable`](#sqlalchemy.types.Enum.params.values_callable
    "sqlalchemy.types.Enum") 参数。该参数的值是一个用户提供的可调用对象，用于与符合 PEP-435 的枚举类一起使用，并返回要持久化的字符串值列表。对于使用字符串值的简单枚举，诸如
    `lambda x: [e.value for e in x]` 这样的可调用对象就足够了。'
- en: See also
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Python Enum or pep-586 Literal types in the type map](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)
    - background on using the [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    datatype with the ORM’s [ORM Annotated Declarative](../orm/declarative_tables.html#orm-declarative-mapped-column)
    feature.'
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: '[在类型映射中使用 Python 枚举或 pep-586 字面类型](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)
    - 关于在 ORM 的 [ORM Annotated Declarative](../orm/declarative_tables.html#orm-declarative-mapped-column)
    特性中使用 [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 数据类型的背景信息。'
- en: '[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    - PostgreSQL-specific type, which has additional functionality.'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    - PostgreSQL 特定类型，具有附加功能。'
- en: '[`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    - MySQL-specific type'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    - MySQL 特定类型'
- en: '**Members**'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Enum.__init__), [create()](#sqlalchemy.types.Enum.create),
    [drop()](#sqlalchemy.types.Enum.drop)'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Enum.__init__), [create()](#sqlalchemy.types.Enum.create),
    [drop()](#sqlalchemy.types.Enum.drop)'
- en: '**Class signature**'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"),
    [`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType"),
    `sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.types.Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 类（[`sqlalchemy.types.String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")、[`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")、`sqlalchemy.types.Emulated`、[`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）'
- en: '[PRE236]'
  id: totrans-1435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: Construct an enum.
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个枚举。
- en: Keyword arguments which don’t apply to a specific backend are ignored by that
    backend.
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 不适用于特定后端的关键字参数将被该后端忽略。
- en: 'Parameters:'
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*enums` – either exactly one PEP-435 compliant enumerated type or one or more
    string labels.'
  id: totrans-1439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*enums` – 要么是符合 PEP-435 的枚举类型，要么是一个或多个字符串标签。'
- en: '`create_constraint` –'
  id: totrans-1440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. When creating a non-native enumerated type, also build a
    CHECK constraint on the database against the valid values.
  id: totrans-1441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。当创建一个非本地枚举类型时，在数据库上还会构建一个 CHECK 约束，用于对有效值进行检查。
- en: Note
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Enum.name`](#sqlalchemy.types.Enum.params.name "sqlalchemy.types.Enum")
    parameter or by setting up an appropriate naming convention; see [Configuring
    Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议为 CHECK 约束指定一个显式名称，以支持模式管理方面的问题。这可以通过设置 [`Enum.name`](#sqlalchemy.types.Enum.params.name
    "sqlalchemy.types.Enum") 参数或设置适当的命名约定来实现；请参阅 [配置约束命名约定](constraints.html#constraint-naming-conventions)
    以获取背景信息。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 1.4 版中更改：- 此标志现在默认为 False，意味着不会为非本地枚举类型生成 CHECK 约束。
- en: '`metadata` –'
  id: totrans-1445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` –'
- en: Associate this type directly with a `MetaData` object. For types that exist
    on the target database as an independent schema construct (PostgreSQL), this type
    will be created and dropped within `create_all()` and `drop_all()` operations.
    If the type is not associated with any `MetaData` object, it will associate itself
    with each `Table` in which it is used, and will be created when any of those individual
    tables are created, after a check is performed for its existence. The type is
    only dropped when `drop_all()` is called for that `Table` object’s metadata, however.
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此类型直接与 `MetaData` 对象关联。对于在目标数据库上作为独立模式构造存在的类型（PostgreSQL），此类型将在 `create_all()`
    和 `drop_all()` 操作中创建和删除。如果该类型未与任何 `MetaData` 对象关联，则它将与使用它的每个 `Table` 关联，并且将在创建任何这些单个表之一后创建，在检查其是否存在后。但是，仅在对该
    `Table` 对象的元数据调用 `drop_all()` 时才会删除该类型。
- en: The value of the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object, if set, will be used as the default value
    of the [`Enum.schema`](#sqlalchemy.types.Enum.params.schema "sqlalchemy.types.Enum")
    on this object if an explicit value is not otherwise supplied.
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果设置了 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数，则该参数的值将用作此对象上 [`Enum.schema`](#sqlalchemy.types.Enum.params.schema
    "sqlalchemy.types.Enum") 的默认值，如果没有显式指定值的话。
- en: 'Changed in version 1.4.12: [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    inherits the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object if present, when passed using the [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum") parameter.'
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 1.4.12 版中更改：如果使用 [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum") 参数传递，则 [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    将继承 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    对象的 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数（如果存在）。
- en: '`name` – The name of this type. This is required for PostgreSQL and any future
    supported database which requires an explicitly named type, or an explicitly named
    constraint in order to generate the type and/or a table that uses it. If a PEP-435
    enumerated class was used, its name (converted to lower case) is used by default.'
  id: totrans-1449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 此类型的名称。对于需要显式命名的类型或显式命名约束以生成使用它的类型和/或表的未来支持的任何数据库，这是必需的。如果使用了 PEP-435
    枚举类，则默认情况下使用其名称（转换为小写）。'
- en: '`native_enum` – Use the database’s native ENUM type when available. Defaults
    to True. When False, uses VARCHAR + check constraint for all backends. When False,
    the VARCHAR length can be controlled with [`Enum.length`](#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum"); currently “length” is ignored if native_enum=True.'
  id: totrans-1450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`native_enum` – 在可用时使用数据库的原生 ENUM 类型。默认为 True。当为 False 时，对所有后端使用 VARCHAR +
    检查约束。当为 False 时，可以使用[`Enum.length`](#sqlalchemy.types.Enum.params.length "sqlalchemy.types.Enum")控制
    VARCHAR 长度；当前如果 native_enum=True，则“length”被忽略。'
- en: '`length` –'
  id: totrans-1451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` –'
- en: Allows specifying a custom length for the VARCHAR when a non-native enumeration
    datatype is used. By default it uses the length of the longest value.
  id: totrans-1452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许在使用非本机枚举数据类型时为 VARCHAR 指定自定义长度。默认情况下，它使用最长值的长度。
- en: 'Changed in version 2.0.0: The [`Enum.length`](#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") parameter is used unconditionally for `VARCHAR` rendering
    regardless of the [`Enum.native_enum`](#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") parameter, for those backends where `VARCHAR` is used
    for enumerated datatypes.'
  id: totrans-1453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 2.0.0 版中更改：[`Enum.length`](#sqlalchemy.types.Enum.params.length "sqlalchemy.types.Enum")参数无条件地用于`VARCHAR`渲染，而不管[`Enum.native_enum`](#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")参数，在其中`VARCHAR`用于枚举数据类型。
- en: '`schema` –'
  id: totrans-1454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: Schema name of this type. For types that exist on the target database as an
    independent schema construct (PostgreSQL), this parameter specifies the named
    schema in which the type is present.
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此类型的模式名称。对于作为独立模式构造存在于目标数据库上的类型（PostgreSQL），此参数指定了类型存在的命名模式。
- en: If not present, the schema name will be taken from the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection if passed as [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum"), for a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") that includes the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter.
  id: totrans-1456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果不存在，则从[`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata "sqlalchemy.types.Enum")传递的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中获取模式名称，用于包括[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")。
- en: 'Changed in version 1.4.12: [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    inherits the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object if present, when passed using the [`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata
    "sqlalchemy.types.Enum") parameter.'
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 1.4.12 版中更改：当使用[`Enum.metadata`](#sqlalchemy.types.Enum.params.metadata "sqlalchemy.types.Enum")参数传递时，[`Enum`](#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")继承了[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象的[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数。
- en: Otherwise, if the [`Enum.inherit_schema`](#sqlalchemy.types.Enum.params.inherit_schema
    "sqlalchemy.types.Enum") flag is set to `True`, the schema will be inherited from
    the associated [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object if any; when [`Enum.inherit_schema`](#sqlalchemy.types.Enum.params.inherit_schema
    "sqlalchemy.types.Enum") is at its default of `False`, the owning table’s schema
    is **not** used.
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则，如果[`Enum.inherit_schema`](#sqlalchemy.types.Enum.params.inherit_schema "sqlalchemy.types.Enum")标志设置为`True`，则架构将从关联的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象继承，如果有的话；当[`Enum.inherit_schema`](#sqlalchemy.types.Enum.params.inherit_schema
    "sqlalchemy.types.Enum")处于其默认值`False`时，不使用拥有表的架构。
- en: '`quote` – Set explicit quoting preferences for the type’s name.'
  id: totrans-1459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` – 为类型的名称设置显式引号首选项。'
- en: '`inherit_schema` – When `True`, the “schema” from the owning [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will be copied to the “schema” attribute of this [`Enum`](#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), replacing whatever value was passed for the `schema`
    attribute. This also takes effect when using the [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") operation.'
  id: totrans-1460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inherit_schema` – 当为 `True` 时，将从拥有的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 复制“schema”到此 [`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    的“schema”属性，替换传递给 `schema` 属性的任何值。在使用 [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 操作时也会生效。'
- en: '`validate_strings` – when True, string values that are being passed to the
    database in a SQL statement will be checked for validity against the list of enumerated
    values. Unrecognized values will result in a `LookupError` being raised.'
  id: totrans-1461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate_strings` – 当为 True 时，将检查传递给 SQL 语句中的数据库的字符串值是否有效。未识别的值将导致引发 `LookupError`。'
- en: '`values_callable` –'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values_callable` –'
- en: 'A callable which will be passed the PEP-435 compliant enumerated type, which
    should then return a list of string values to be persisted. This allows for alternate
    usages such as using the string value of an enum to be persisted to the database
    instead of its name. The callable must return the values to be persisted in the
    same order as iterating through the Enum’s `__member__` attribute. For example
    `lambda x: [i.value for i in x]`.'
  id: totrans-1463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '一个可调用对象，将传递符合 PEP-435 规范的枚举类型，然后应返回要持久化的字符串值列表。这允许替代用法，例如将枚举的字符串值持久化到数据库中，而不是其名称。可调用对象必须以与遍历
    Enum 的 `__member__` 属性相同的顺序返回要持久化的值。例如 `lambda x: [i.value for i in x]`。'
- en: New in version 1.2.3.
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.2.3 中新增。
- en: '`sort_key_function` –'
  id: totrans-1465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_key_function` –'
- en: a Python callable which may be used as the “key” argument in the Python `sorted()`
    built-in. The SQLAlchemy ORM requires that primary key columns which are mapped
    must be sortable in some way. When using an unsortable enumeration object such
    as a Python 3 `Enum` object, this parameter may be used to set a default sort
    key function for the objects. By default, the database value of the enumeration
    is used as the sorting function.
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个 Python 可调用对象，可用作 Python `sorted()` 内置函数中的“key”参数。SQLAlchemy ORM 要求映射的主键列必须以某种方式可排序。当使用不可排序的枚举对象，如
    Python 3 的 `Enum` 对象时，可以使用此参数为对象设置默认排序键函数。默认情况下，枚举的数据库值用作排序函数。
- en: New in version 1.3.8.
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.3.8 中新增。
- en: '`omit_aliases` –'
  id: totrans-1468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`omit_aliases` –'
- en: A boolean that when true will remove aliases from pep 435 enums. defaults to
    `True`.
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个布尔值，当为 true 时将从 pep 435 枚举中删除别名。默认为 `True`。
- en: 'Changed in version 2.0: This parameter now defaults to True.'
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 2.0 中更改：此参数现在默认为 True。
- en: '[PRE237]'
  id: totrans-1471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '*inherited from the* [`SchemaType.create()`](#sqlalchemy.types.SchemaType.create
    "sqlalchemy.types.SchemaType.create") *method of* [`SchemaType`](#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")'
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaType.create()`](#sqlalchemy.types.SchemaType.create "sqlalchemy.types.SchemaType.create")
    *方法的* [`SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")'
- en: Issue CREATE DDL for this type, if applicable.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类型发出 CREATE DDL，如果适用。
- en: '[PRE238]'
  id: totrans-1474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '*inherited from the* [`SchemaType.drop()`](#sqlalchemy.types.SchemaType.drop
    "sqlalchemy.types.SchemaType.drop") *method of* [`SchemaType`](#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaType.drop()`](#sqlalchemy.types.SchemaType.drop "sqlalchemy.types.SchemaType.drop")
    *方法的* [`SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")'
- en: Issue DROP DDL for this type, if applicable.
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类型发出 DROP DDL，如果适用。
- en: '[PRE239]'
  id: totrans-1477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: A type for double `FLOAT` floating point types.
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 用于双 `FLOAT` 浮点类型的类型。
- en: Typically generates a `DOUBLE` or `DOUBLE_PRECISION` in DDL, and otherwise acts
    like a normal [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") on the
    Python side.
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在 DDL 中生成 `DOUBLE` 或 `DOUBLE_PRECISION`，在 Python 端则像普通的 [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 一样运行。
- en: New in version 2.0.
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '**Class signature**'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double")
    ([`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float"))
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double")
    ([`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float"))
- en: '[PRE240]'
  id: totrans-1483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Type representing floating point types, such as `FLOAT` or `REAL`.
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 表示浮点类型的类型，如 `FLOAT` 或 `REAL`。
- en: This type returns Python `float` objects by default, unless the [`Float.asdecimal`](#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") flag is set to `True`, in which case they are coerced
    to `decimal.Decimal` objects.
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此类型返回Python `float`对象，除非将[`Float.asdecimal`](#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float")标志设置为`True`，在这种情况下，它们将被强制转换为`decimal.Decimal`对象。
- en: When a [`Float.precision`](#sqlalchemy.types.Float.params.precision "sqlalchemy.types.Float")
    is not provided in a [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    type some backend may compile this type as an 8 bytes / 64 bit float datatype.
    To use a 4 bytes / 32 bit float datatype a precision <= 24 can usually be provided
    or the [`REAL`](#sqlalchemy.types.REAL "sqlalchemy.types.REAL") type can be used.
    This is known to be the case in the PostgreSQL and MSSQL dialects that render
    the type as `FLOAT` that’s in both an alias of `DOUBLE PRECISION`. Other third
    party dialects may have similar behavior.
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: 当在[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")类型中未提供[`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float")时，某些后端可能将此类型编译为8字节/64位浮点数据类型。要使用4字节/32位浮点数据类型，通常可以提供精度<=
    24，或者可以使用[`REAL`](#sqlalchemy.types.REAL "sqlalchemy.types.REAL")类型。这在将类型呈现为`FLOAT`的PostgreSQL和MSSQL方言中是已知的，这两者都是`DOUBLE
    PRECISION`的别名。其他第三方方言可能具有类似的行为。
- en: '**Members**'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Float.__init__), [result_processor()](#sqlalchemy.types.Float.result_processor)'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Float.__init__), [result_processor()](#sqlalchemy.types.Float.result_processor)'
- en: '**Class signature**'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    ([`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"))
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")（[`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")）
- en: '[PRE241]'
  id: totrans-1491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Construct a Float.
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个Float。
- en: 'Parameters:'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于DDL `CREATE TABLE`中的数字精度。后端**应该**尝试确保此精度指示通用[`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型的数字位数。
- en: Note
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-1497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Oracle后端，在渲染DDL时，不接受[`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float")参数，因为Oracle不支持将浮点精度指定为小数位数。相反，请使用特定于Oracle的[`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT")数据类型，并指定[`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")参数。这是SQLAlchemy 2.0版本的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个与数据库无关的[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为Oracle分别指定二进制精度，请使用[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")如下：
- en: '[PRE242]'
  id: totrans-1499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-1500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")相同的标志，但默认为`False`。请注意，将此标志设置为`True`会导致浮点转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-1501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 将浮点数转换为 Python 十进制数时使用的默认精度。由于浮点数的不精确性，浮点数值通常会更长，大多数浮点数数据库类型没有“精度”概念，因此默认情况下，float
    类型在转换时会寻找前十个小数位。指定此值将覆盖该长度。请注意，如果未另行指定，具有“精度”的 MySQL 浮点数类型将使用“精度”作为 decimal_return_scale
    的默认值。'
- en: '[PRE243]'
  id: totrans-1502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: Return a conversion function for processing result row values.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用函数，该函数将接收一个结果行列值作为唯一位置参数，并返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 仅相对于**特定方言类型对象**调用此方法，该对象通常是正在使用的方言的**私有类型**，并且不是公共类型对象，这意味着无法通过继承[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非明确地继承[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-1512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 使用中的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-1513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中接收到的 DBAPI coltype 参数。'
- en: '[PRE244]'
  id: totrans-1514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: A type for `int` integers.
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 一种用于`int`整数的类型。
- en: '**Members**'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_dbapi_type()](#sqlalchemy.types.Integer.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Integer.literal_processor),
    [python_type](#sqlalchemy.types.Integer.python_type)'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_dbapi_type()](#sqlalchemy.types.Integer.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Integer.literal_processor),
    [python_type](#sqlalchemy.types.Integer.python_type)'
- en: '**Class signature**'
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    (`sqlalchemy.types.HasExpressionLookup`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")（`sqlalchemy.types.HasExpressionLookup`，[`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE245]'
  id: totrans-1520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层 DB-API 的相应类型对象（如果有）。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对于调用 `setinputsizes()` 非常有用。
- en: '[PRE246]'
  id: totrans-1523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理要直接呈现而不使用绑定的文字值的转换函数。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常用于 DDL 生成以及某些后端不接受绑定参数的情况时，将使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面上的 Python 值作为唯一的位置参数，并返回一个字符串表示，用于在 SQL 语句中呈现。
- en: Note
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于**特定方言类型对象**调用，该对象通常是**私有于正在使用的方言**，并且与公共面向的对象不是同一类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非明确子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE247]'
  id: totrans-1532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-1533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: A type for `datetime.timedelta()` objects.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`datetime.timedelta()`对象的类型。
- en: The Interval type deals with `datetime.timedelta` objects. In PostgreSQL and
    Oracle, the native `INTERVAL` type is used; for others, the value is stored as
    a date which is relative to the “epoch” (Jan. 1, 1970).
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 间隔类型处理`datetime.timedelta`对象。在 PostgreSQL 和 Oracle 中，使用本地`INTERVAL`类型；对于其他数据库，该值存储为相对于“epoch”（1970
    年 1 月 1 日）的日期。
- en: Note that the `Interval` type does not currently provide date arithmetic operations
    on platforms which do not support interval types natively. Such operations usually
    require transformation of both sides of the expression (such as, conversion of
    both sides into integer epoch values first) which currently is a manual procedure
    (such as via [`expression.func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")).
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Interval`类型目前在不支持本地间隔类型的平台上不提供日期算术运算。此类操作通常需要转换表达式的两侧（例如，首先将两侧转换为整数 epoch
    值），这目前是一个手动过程（例如，通过[`expression.func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")）。
- en: '**Members**'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Interval.__init__), [adapt_to_emulated()](#sqlalchemy.types.Interval.adapt_to_emulated),
    [bind_processor()](#sqlalchemy.types.Interval.bind_processor), [cache_ok](#sqlalchemy.types.Interval.cache_ok),
    [coerce_compared_value()](#sqlalchemy.types.Interval.coerce_compared_value), [comparator_factory](#sqlalchemy.types.Interval.comparator_factory),
    [impl](#sqlalchemy.types.Interval.impl), [python_type](#sqlalchemy.types.Interval.python_type),
    [result_processor()](#sqlalchemy.types.Interval.result_processor)'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Interval.__init__), [adapt_to_emulated()](#sqlalchemy.types.Interval.adapt_to_emulated),
    [bind_processor()](#sqlalchemy.types.Interval.bind_processor), [cache_ok](#sqlalchemy.types.Interval.cache_ok),
    [coerce_compared_value()](#sqlalchemy.types.Interval.coerce_compared_value), [comparator_factory](#sqlalchemy.types.Interval.comparator_factory),
    [impl](#sqlalchemy.types.Interval.impl), [python_type](#sqlalchemy.types.Interval.python_type),
    [result_processor()](#sqlalchemy.types.Interval.result_processor)'
- en: '**Class signature**'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Interval`](#sqlalchemy.types.Interval "sqlalchemy.types.Interval")
    (`sqlalchemy.types.Emulated`, `sqlalchemy.types._AbstractInterval`, [`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Interval`](#sqlalchemy.types.Interval "sqlalchemy.types.Interval")（`sqlalchemy.types.Emulated`，`sqlalchemy.types._AbstractInterval`，[`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
- en: '[PRE249]'
  id: totrans-1541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '**Class signature**'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Interval.Comparator`](#sqlalchemy.types.Interval.Comparator
    "sqlalchemy.types.Interval.Comparator") (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Interval.Comparator`](#sqlalchemy.types.Interval.Comparator
    "sqlalchemy.types.Interval.Comparator")（`sqlalchemy.types.Comparator`，`sqlalchemy.types.Comparator`）
- en: '[PRE250]'
  id: totrans-1544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Construct an Interval object.
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Interval 对象。
- en: 'Parameters:'
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`native` – when True, use the actual INTERVAL type provided by the database,
    if supported (currently PostgreSQL, Oracle). Otherwise, represent the interval
    data as an epoch value regardless.'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`native` – 当为 True 时，如果支持（当前为 PostgreSQL、Oracle），则使用数据库提供的实际 INTERVAL 类型。否则，无论如何都将间隔数据表示为时代值。'
- en: '`second_precision` – For native interval types which support a “fractional
    seconds precision” parameter, i.e. Oracle and PostgreSQL'
  id: totrans-1548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`second_precision` – 用于支持“分秒精度”的本机间隔类型的参数，即 Oracle 和 PostgreSQL'
- en: '`day_precision` – for native interval types which support a “day precision”
    parameter, i.e. Oracle.'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`day_precision` – 对于支持“日精度”的本机间隔类型的参数，例如 Oracle。'
- en: '[PRE251]'
  id: totrans-1550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Given an impl class, adapt this type to the impl assuming “emulated”.
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 impl 类，将此类型适配到 impl，假设“模拟”。
- en: The impl should also be an “emulated” version of this type, most likely the
    same class as this type itself.
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: impl 也应是此类型的“模拟”版本，很可能是与此类型本身相同的类。
- en: 'e.g.: sqltypes.Enum adapts to the Enum class.'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：sqltypes.Enum 适应于 Enum 类。
- en: '[PRE252]'
  id: totrans-1554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Return a conversion function for processing bind values.
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个绑定参数值作为唯一的位置参数，并返回要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言的类型对象**调用，该类型对象通常是**正在使用的方言的私有对象**，并不是公共类型对象，因此无法通过对[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类进行子类化来提供替代的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式地对[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类进行子类化。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，请实现[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩充现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: '**dialect** – 正在使用的方言实例。'
- en: '[PRE253]'
  id: totrans-1565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Indicate if statements using this [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") are “safe to cache”.
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 指示使用此[`ExternalType`](type_api.html#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")的语句是否“可安全缓存”。
- en: 'The default value `None` will emit a warning and then not allow caching of
    a statement which includes this type. Set to `False` to disable statements using
    this type from being cached at all without a warning. When set to `True`, the
    object’s class and selected elements from its state will be used as part of the
    cache key. For example, using a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: '默认值`None`会发出警告，然后不允许缓存包含此类型的语句。将其设置为`False`可完全禁用使用此类型的语句进行缓存而不发出警告。当设置为`True`时，对象的类和其状态的选定元素将用作缓存键的一部分。例如，使用[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
- en: '[PRE254]'
  id: totrans-1568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'The cache key for the above type would be equivalent to:'
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类型的缓存键将等效于：
- en: '[PRE255]'
  id: totrans-1570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: The caching scheme will extract attributes from the type that correspond to
    the names of parameters in the `__init__()` method. Above, the “choices” attribute
    becomes part of the cache key but “internal_only” does not, because there is no
    parameter named “internal_only”.
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存方案将从与`__init__()`方法中参数名称对应的类型中提取属性。在上面的例子中，“choices”属性成为缓存键的一部分，但“internal_only”不是，因为没有名为“internal_only”的参数。
- en: The requirements for cacheable elements is that they are hashable and also that
    they indicate the same SQL rendered for expressions using this type every time
    for a given cache value.
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: 可缓存元素的要求是它们是可哈希的，并且对于给定的缓存值，它们表示使用此类型的表达式的相同SQL每次都相同。
- en: 'To accommodate for datatypes that refer to unhashable structures such as dictionaries,
    sets and lists, these objects can be made “cacheable” by assigning hashable structures
    to the attributes whose names correspond with the names of the arguments. For
    example, a datatype which accepts a dictionary of lookup values may publish this
    as a sorted series of tuples. Given a previously un-cacheable type as:'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应引用不可哈希结构的数据类型，例如字典、集合和列表，这些对象可以通过将可哈希结构分配给与参数名称对应的属性来“缓存”。例如，接受查找值字典的数据类型可以将其发布为排序后的元组系列。给定一个先前无法缓存的类型如下：
- en: '[PRE256]'
  id: totrans-1574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Where “lookup” is a dictionary. The type will not be able to generate a cache
    key:'
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: 其中“lookup”是一个字典。该类型将无法生成缓存键：
- en: '[PRE257]'
  id: totrans-1576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'If we **did** set up such a cache key, it wouldn’t be usable. We would get
    a tuple structure that contains a dictionary inside of it, which cannot itself
    be used as a key in a “cache dictionary” such as SQLAlchemy’s statement cache,
    since Python dictionaries aren’t hashable:'
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们确实设置了这样的缓存键，它将无法使用。我们将获得一个包含其中的字典的元组结构，这个元组本身不能作为“缓存字典”中的键使用，例如SQLAlchemy的语句缓存，因为Python字典不可哈希：
- en: '[PRE258]'
  id: totrans-1578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'The type may be made cacheable by assigning a sorted tuple of tuples to the
    “.lookup” attribute:'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将排序后的元组分配给“.lookup”属性使该类型可缓存：
- en: '[PRE259]'
  id: totrans-1580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'Where above, the cache key for `LookupType({"a": 10, "b": 20})` will be:'
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述情况中，`LookupType({"a": 10, "b": 20})`的缓存键将是：'
- en: '[PRE260]'
  id: totrans-1582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'New in version 1.4.14: - added the `cache_ok` flag to allow some configurability
    of caching for [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") classes.'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.14版的新内容：- 添加了`cache_ok`标志，以允许对[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类的缓存进行一些可配置性。
- en: 'New in version 1.4.28: - added the [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") mixin which generalizes the `cache_ok` flag to
    both the [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    and [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    classes.'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.28版的新内容：- 添加了[`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType")混合类型，它将`cache_ok`标志推广到[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")和[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: See also
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL 编译缓存](connections.html#sql-caching)'
- en: '[PRE261]'
  id: totrans-1587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Suggest a type for a ‘coerced’ Python value in an expression.
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式中为“强制转换”Python值建议一种类型。
- en: Given an operator and value, gives the type a chance to return a type which
    the value should be coerced into.
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个运算符和值，让类型有机会返回一个应该将值强制转换为的类型。
- en: The default behavior here is conservative; if the right-hand side is already
    coerced into a SQL type based on its Python type, it is usually left alone.
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的默认行为是保守的；如果右侧已经根据其Python类型强制转换为SQL类型，则通常会保持不变。
- en: End-user functionality extension here should generally be via [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"), which provides more liberal behavior in that
    it defaults to coercing the other side of the expression into this type, thus
    applying special Python conversions above and beyond those needed by the DBAPI
    to both ides. It also provides the public method [`TypeDecorator.coerce_compared_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.coerce_compared_value
    "sqlalchemy.types.TypeDecorator.coerce_compared_value") which is intended for
    end-user customization of this behavior.
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的最终用户功能扩展通常应通过 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 实现，它提供更自由的行为，因为它默认将表达式的另一侧强制转换为此类型，从而对两侧应用特殊的
    Python 转换，除了 DBAPI 需要的转换之外。它还提供了公共方法 [`TypeDecorator.coerce_compared_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.coerce_compared_value
    "sqlalchemy.types.TypeDecorator.coerce_compared_value")，用于最终用户自定义此行为。
- en: '[PRE262]'
  id: totrans-1592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: alias of [`Comparator`](#sqlalchemy.types.Interval.Comparator "sqlalchemy.sql.sqltypes.Interval.Comparator")
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.types.Interval.Comparator "sqlalchemy.sql.sqltypes.Interval.Comparator")
    的别名'
- en: '[PRE263]'
  id: totrans-1594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: alias of [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.sql.sqltypes.DateTime")
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.sql.sqltypes.DateTime")
    的别名'
- en: '[PRE264]'
  id: totrans-1596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-1597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Return a conversion function for processing result row values.
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个结果行列值作为唯一的位置参数，并将返回一个值以返回给用户。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，该方法应返回 `None`。
- en: Note
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于**特定方言类型对象**调用，这通常是**正在使用的方言的私有对象**，并且不是公共面向用户的对象，这意味着不可行地子类化 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类以提供替代 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 方法，除非明确子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 提供替代行为，请实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类并提供一个 [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 的实现。
- en: See also
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-1607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中收到的 DBAPI coltype 参数。'
- en: '[PRE266]'
  id: totrans-1609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: A type for large binary byte data.
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 用于大型二进制字节数据的类型。
- en: The [`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    type corresponds to a large and/or unlengthed binary type for the target platform,
    such as BLOB on MySQL and BYTEA for PostgreSQL. It also handles the necessary
    conversions for the DBAPI.
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    类型对应于目标平台上的大型和/或无长度二进制类型，如 MySQL 上的 BLOB 和 PostgreSQL 上的 BYTEA。它还处理了 DBAPI 的必要转换。'
- en: '**Members**'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.LargeBinary.__init__)'
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.LargeBinary.__init__)'
- en: '**Class signature**'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    (`sqlalchemy.types._Binary`)
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    (`sqlalchemy.types._Binary`)
- en: '[PRE267]'
  id: totrans-1616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Construct a LargeBinary type.
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 LargeBinary 类型。
- en: 'Parameters:'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选，用于DDL语句中的列长度，用于那些接受长度的二进制类型，如MySQL的BLOB类型。'
- en: '[PRE268]'
  id: totrans-1620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Refers to the return type of the MATCH operator.
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是MATCH运算符的返回类型。
- en: As the [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") is probably the most open-ended
    operator in generic SQLAlchemy Core, we can’t assume the return type at SQL evaluation
    time, as MySQL returns a floating point, not a boolean, and other backends might
    do something different. So this type acts as a placeholder, currently subclassing
    [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean"). The type allows
    dialects to inject result-processing functionality if needed, and on MySQL will
    return floating-point values.
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match")可能是通用SQLAlchemy Core中最开放的运算符，我们不能假设SQL评估时的返回类型，因为MySQL返回浮点数，而不是布尔值，其他后端可能会执行不同的操作。因此，此类型充当占位符，当前是[`Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")的子类。该类型允许方言在需要时注入结果处理功能，并且在MySQL上将返回浮点值。
- en: '**Class signature**'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.MatchType`](#sqlalchemy.types.MatchType "sqlalchemy.types.MatchType")
    ([`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean"))
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.MatchType`](#sqlalchemy.types.MatchType "sqlalchemy.types.MatchType")（[`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")）
- en: '[PRE269]'
  id: totrans-1625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Base for non-integer numeric types, such as `NUMERIC`, `FLOAT`, `DECIMAL`, and
    other variants.
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 非整数数值类型的基类，如`NUMERIC`、`FLOAT`、`DECIMAL`和其他变体。
- en: The [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") datatype
    when used directly will render DDL corresponding to precision numerics if available,
    such as `NUMERIC(precision, scale)`. The [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    subclass will attempt to render a floating-point datatype such as `FLOAT(precision)`.
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")数据类型时，如果可用，将呈现与精度数值对应的DDL，例如`NUMERIC(precision,
    scale)`。[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")子类将尝试呈现浮点数据类型，如`FLOAT(precision)`。
- en: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") returns Python
    `decimal.Decimal` objects by default, based on the default value of `True` for
    the [`Numeric.asdecimal`](#sqlalchemy.types.Numeric.params.asdecimal "sqlalchemy.types.Numeric")
    parameter. If this parameter is set to False, returned values are coerced to Python
    `float` objects.'
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")默认返回Python
    `decimal.Decimal`对象，基于[`Numeric.asdecimal`](#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric")参数的默认值为`True`。如果将此参数设置为False，则返回的值将被强制转换为Python `float`对象。'
- en: The [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") subtype, being
    more specific to floating point, defaults the [`Float.asdecimal`](#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") flag to False so that the default Python datatype is
    `float`.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")子类型，更具体地针对浮点数，默认将[`Float.asdecimal`](#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float")标志设置为False，以便默认Python数据类型为`float`。'
- en: Note
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using a [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    datatype against a database type that returns Python floating point values to
    the driver, the accuracy of the decimal conversion indicated by [`Numeric.asdecimal`](#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric") may be limited. The behavior of specific numeric/floating
    point datatypes is a product of the SQL datatype in use, the Python [DBAPI](../glossary.html#term-DBAPI)
    in use, as well as strategies that may be present within the SQLAlchemy dialect
    in use. Users requiring specific precision/ scale are encouraged to experiment
    with the available datatypes in order to determine the best results.
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")数据类型与返回Python浮点值给驱动程序的数据库类型相对应时，由[`Numeric.asdecimal`](#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric")指示的十进制转换的准确性可能受到限制。特定数值/浮点数据类型的行为是使用的SQL数据类型、使用的Python
    [DBAPI](../glossary.html#term-DBAPI)以及可能存在于使用的SQLAlchemy方言中的策略的产物。鼓励需要特定精度/比例的用户尝试使用可用的数据类型，以确定最佳结果。
- en: '**Members**'
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Numeric.__init__), [bind_processor()](#sqlalchemy.types.Numeric.bind_processor),
    [get_dbapi_type()](#sqlalchemy.types.Numeric.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Numeric.literal_processor),
    [python_type](#sqlalchemy.types.Numeric.python_type), [result_processor()](#sqlalchemy.types.Numeric.result_processor)'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Numeric.__init__), [bind_processor()](#sqlalchemy.types.Numeric.bind_processor),
    [get_dbapi_type()](#sqlalchemy.types.Numeric.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Numeric.literal_processor),
    [python_type](#sqlalchemy.types.Numeric.python_type), [result_processor()](#sqlalchemy.types.Numeric.result_processor)'
- en: '**Class signature**'
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    (`sqlalchemy.types.HasExpressionLookup`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    (`sqlalchemy.types.HasExpressionLookup`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE270]'
  id: totrans-1636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Construct a Numeric.
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Numeric。
- en: 'Parameters:'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – the numeric precision for use in DDL `CREATE TABLE`.'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 用于 DDL `CREATE TABLE` 中的数字精度。'
- en: '`scale` – the numeric scale for use in DDL `CREATE TABLE`.'
  id: totrans-1640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 用于 DDL `CREATE TABLE` 中的数字精度。'
- en: '`asdecimal` – default True. Return whether or not values should be sent as
    Python Decimal objects, or as floats. Different DBAPIs send one or the other based
    on datatypes - the Numeric type will ensure that return values are one or the
    other across DBAPIs consistently.'
  id: totrans-1641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 默认为 True。返回值是否应该作为 Python 十进制对象发送，还是作为浮点数发送。不同的 DBAPI 基于数据类型发送其中之一
    - Numeric 类型将确保返回值在不同的 DBAPI 中一致地是其中之一。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Types which do include an explicit
    “.scale” value, such as the base [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    as well as the MySQL float types, will use the value of “.scale” as the default
    for decimal_return_scale, if not otherwise specified.'
  id: totrans-1642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在从浮点数转换为 Python 十进制数时要使用的默认精度。由于十进制不精确性，浮点值通常会更长，而大多数浮点数据库类型都没有“精度”概念，因此默认情况下，浮点类型在转换时会查找前十位小数点。指定此值将覆盖该长度。包括显式“.scale”值的类型，如基础
    [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") 以及 MySQL 浮点类型，将使用“`.scale`”值作为
    decimal_return_scale 的默认值，如果没有另外指定的话。'
- en: When using the `Numeric` type, care should be taken to ensure that the asdecimal
    setting is appropriate for the DBAPI in use - when Numeric applies a conversion
    from Decimal->float or float-> Decimal, this conversion incurs an additional performance
    overhead for all result columns received.
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Numeric` 类型时，应注意确保 asdecimal 设置适用于正在使用的 DBAPI - 当 Numeric 应用从 Decimal->float
    或 float-> Decimal 的转换时，此转换会为接收到的所有结果列增加额外的性能开销。
- en: DBAPIs that return Decimal natively (e.g. psycopg2) will have better accuracy
    and higher performance with a setting of `True`, as the native translation to
    Decimal reduces the amount of floating- point issues at play, and the Numeric
    type itself doesn’t need to apply any further conversions. However, another DBAPI
    which returns floats natively *will* incur an additional conversion overhead,
    and is still subject to floating point data loss - in which case `asdecimal=False`
    will at least remove the extra conversion overhead.
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: 原生返回 Decimal 的 DBAPI（例如 psycopg2）在设置为 `True` 时将具有更好的精度和更高的性能，因为原生转换为 Decimal
    可减少浮点问题的数量，并且 Numeric 类型本身不需要应用任何进一步的转换。然而，另一个原生返回浮点数的 DBAPI *将* 增加额外的转换开销，并且仍然受到浮点数据丢失的影响
    - 在这种情况下，`asdecimal=False` 至少会消除额外的转换开销。
- en: '[PRE271]'
  id: totrans-1645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Return a conversion function for processing bind values.
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个绑定参数值作为唯一的位置参数，并返回一个要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回 `None`。
- en: Note
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**，该对象通常**是方言中私有的**，并且与公共对象不同，这意味着无法子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类以提供替代的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**dialect** – Dialect instance in use.'
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** - 使用中的方言实例。'
- en: '[PRE272]'
  id: totrans-1656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，从底层DB-API返回相应的类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对于调用`setinputsizes()`可能很有用。
- en: '[PRE273]'
  id: totrans-1659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理直接呈现而不使用绑定的文本值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，将使用此函数，通常用于DDL生成以及在某些后端不接受绑定参数的情况下。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面Python值作为唯一位置参数，并返回一个字符串表示以在SQL语句中呈现。
- en: Note
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**，该对象通常**是方言中私有的**，并且与公共对象不同，这意味着无法子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类以提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 若要为 [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 提供替代行为，请实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供一个 [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 的实现。
- en: See also
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩充现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE274]'
  id: totrans-1668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-1669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Return a conversion function for processing result row values.
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理结果行值。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个结果行列值作为唯一的位置参数，并返回一个值以返回给用户。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回 `None`。
- en: Note
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅针对 **特定方言类型对象** 调用，该对象通常 **私有于正在使用的方言**，并且不是与公共面向用户的类型对象相同的类型对象，这意味着不可能为了提供替代
    [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 方法而对 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类进行子类化，除非显式子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: 若要为 [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 提供替代行为，请实现一个 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供一个 [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 的实现。
- en: See also
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩充现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`dialect` – Dialect instance in use.'
  id: totrans-1679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的 Dialect 实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-1680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在`cursor.description`中接收的 DBAPI coltype 参数。'
- en: '[PRE276]'
  id: totrans-1681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: Holds Python objects, which are serialized using pickle.
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: 持有使用 pickle 进行序列化的 Python 对象。
- en: PickleType builds upon the Binary type to apply Python’s `pickle.dumps()` to
    incoming objects, and `pickle.loads()` on the way out, allowing any pickleable
    Python object to be stored as a serialized binary field.
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: PickleType 在 Binary 类的基础上构建，将 Python 的 `pickle.dumps()` 应用于传入对象，并在传出时应用 `pickle.loads()`，从而允许将任何可
    pickle 的 Python 对象存储为序列化的二进制字段。
- en: To allow ORM change events to propagate for elements associated with [`PickleType`](#sqlalchemy.types.PickleType
    "sqlalchemy.types.PickleType"), see [Mutation Tracking](../orm/extensions/mutable.html).
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: 若要允许与 [`PickleType`](#sqlalchemy.types.PickleType "sqlalchemy.types.PickleType")
    关联的元素的 ORM 更改事件传播，请参阅 [Mutation Tracking](../orm/extensions/mutable.html)。
- en: '**Members**'
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.PickleType.__init__), [bind_processor()](#sqlalchemy.types.PickleType.bind_processor),
    [cache_ok](#sqlalchemy.types.PickleType.cache_ok), [compare_values()](#sqlalchemy.types.PickleType.compare_values),
    [impl](#sqlalchemy.types.PickleType.impl), [result_processor()](#sqlalchemy.types.PickleType.result_processor)'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.PickleType.__init__), [bind_processor()](#sqlalchemy.types.PickleType.bind_processor),
    [cache_ok](#sqlalchemy.types.PickleType.cache_ok), [compare_values()](#sqlalchemy.types.PickleType.compare_values),
    [impl](#sqlalchemy.types.PickleType.impl), [result_processor()](#sqlalchemy.types.PickleType.result_processor)'
- en: '**Class signature**'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.PickleType`](#sqlalchemy.types.PickleType "sqlalchemy.types.PickleType")
    ([`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.PickleType`](#sqlalchemy.types.PickleType "sqlalchemy.types.PickleType")
    ([`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
- en: '[PRE277]'
  id: totrans-1689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: Construct a PickleType.
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 PickleType。
- en: 'Parameters:'
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`protocol` – defaults to `pickle.HIGHEST_PROTOCOL`.'
  id: totrans-1692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protocol` – 默认为 `pickle.HIGHEST_PROTOCOL`。'
- en: '`pickler` – defaults to pickle. May be any object with pickle-compatible `dumps`
    and `loads` methods.'
  id: totrans-1693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pickler` – 默认为 pickle。可以是具有 pickle 兼容的 `dumps` 和 `loads` 方法的任何对象。'
- en: '`comparator` – a 2-arg callable predicate used to compare values of this type.
    If left as `None`, the Python “equals” operator is used to compare values.'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comparator` – 用于比较此类型值的 2-参数可调用谓词。如果保持为 `None`，则使用 Python 的“equals”运算符来比较值。'
- en: '`impl` –'
  id: totrans-1695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl` –'
- en: 'A binary-storing [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    class or instance to use in place of the default [`LargeBinary`](#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"). For example the :class: _mysql.LONGBLOB class
    may be more effective when using MySQL.'
  id: totrans-1696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '用于替代默认的 [`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    的二进制存储 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    类或实例。例如，在使用 MySQL 时，可以更有效地使用 :class: _mysql.LONGBLOB 类。'
- en: New in version 1.4.20.
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.20 中新增。
- en: '[PRE278]'
  id: totrans-1698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: Provide a bound value processing function for the given [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect").
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    提供一个绑定值处理函数。
- en: This is the method that fulfills the [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") contract for bound value conversion which normally
    occurs via the [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method.
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现了 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    合约的方法，用于绑定值转换，通常通过 [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 方法实现。
- en: Note
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: User-defined subclasses of [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") should **not** implement this method, and should
    instead implement [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param") so that the “inner” processing
    provided by the implementing type is maintained.
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    的子类**不应**实现此方法，而应该实现 [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param") 方法，以保持实现类型提供的“内部”处理。
- en: 'Parameters:'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: '**dialect** – 正在使用的 Dialect 实例。'
- en: '[PRE279]'
  id: totrans-1705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: Indicate if statements using this [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") are “safe to cache”.
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此 [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")
    表示的 if 语句是“可缓存的”。
- en: 'The default value `None` will emit a warning and then not allow caching of
    a statement which includes this type. Set to `False` to disable statements using
    this type from being cached at all without a warning. When set to `True`, the
    object’s class and selected elements from its state will be used as part of the
    cache key. For example, using a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值 `None` 将发出警告，然后不允许缓存包含此类型的语句。设置为 `False` 以完全禁用包含此类型的语句的缓存，而无需警告。当设置为 `True`
    时，对象的类和其状态的选定元素将作为缓存键的一部分使用。例如，使用 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")：
- en: '[PRE280]'
  id: totrans-1708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'The cache key for the above type would be equivalent to:'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类型的缓存键将等价于：
- en: '[PRE281]'
  id: totrans-1710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: The caching scheme will extract attributes from the type that correspond to
    the names of parameters in the `__init__()` method. Above, the “choices” attribute
    becomes part of the cache key but “internal_only” does not, because there is no
    parameter named “internal_only”.
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存方案将从与`__init__()`方法中的参数名称对应的类型中提取属性。上述，“choices”属性成为缓存键的一部分，但“internal_only”则不是，因为没有名为“internal_only”的参数。
- en: The requirements for cacheable elements is that they are hashable and also that
    they indicate the same SQL rendered for expressions using this type every time
    for a given cache value.
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: 可缓存元素的要求是它们是可散列的，并且它们指示对于给定缓存值，每次使用此类型的表达式渲染相同的 SQL。
- en: 'To accommodate for datatypes that refer to unhashable structures such as dictionaries,
    sets and lists, these objects can be made “cacheable” by assigning hashable structures
    to the attributes whose names correspond with the names of the arguments. For
    example, a datatype which accepts a dictionary of lookup values may publish this
    as a sorted series of tuples. Given a previously un-cacheable type as:'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应引用诸如字典、集合和列表之类的不可散列结构的数据类型，这些对象可以通过将可散列结构赋值给与参数名称对应的属性来使其“可缓存”。例如，一个接受字典查找值的数据类型可以将其发布为一系列排序后的元组。给定先前不可缓存的类型如下：
- en: '[PRE282]'
  id: totrans-1714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: 'Where “lookup” is a dictionary. The type will not be able to generate a cache
    key:'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 当“lookup”是一个字典时，该类型将无法生成缓存键：
- en: '[PRE283]'
  id: totrans-1716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: 'If we **did** set up such a cache key, it wouldn’t be usable. We would get
    a tuple structure that contains a dictionary inside of it, which cannot itself
    be used as a key in a “cache dictionary” such as SQLAlchemy’s statement cache,
    since Python dictionaries aren’t hashable:'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们**确实**设置了这样一个缓存键，它将无法使用。我们将得到一个包含字典的元组结构，其中字典本身无法作为“缓存字典”（如 SQLAlchemy 的语句缓存）中的键使用，因为
    Python 字典不可散列：
- en: '[PRE284]'
  id: totrans-1718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'The type may be made cacheable by assigning a sorted tuple of tuples to the
    “.lookup” attribute:'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将一个排序后的元组的元组赋值给“.lookup”属性，可以使该类型可缓存：
- en: '[PRE285]'
  id: totrans-1720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'Where above, the cache key for `LookupType({"a": 10, "b": 20})` will be:'
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述情况下，`LookupType({"a": 10, "b": 20})`的缓存键将为：'
- en: '[PRE286]'
  id: totrans-1722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: 'New in version 1.4.14: - added the `cache_ok` flag to allow some configurability
    of caching for [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") classes.'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.14 开始：- 添加了 `cache_ok` 标志，以允许对[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类的缓存进行一些可配置化。
- en: 'New in version 1.4.28: - added the [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") mixin which generalizes the `cache_ok` flag to
    both the [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    and [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    classes.'
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.28 开始：- 添加了 [`ExternalType`](type_api.html#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") 混入，它将 `cache_ok` 标志推广到 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 和 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: See also
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL 编译缓存](connections.html#sql-caching)'
- en: '[PRE287]'
  id: totrans-1727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: Given two values, compare them for equality.
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个值，比较它们是否相等。
- en: By default this calls upon [`TypeEngine.compare_values()`](type_api.html#sqlalchemy.types.TypeEngine.compare_values
    "sqlalchemy.types.TypeEngine.compare_values") of the underlying “impl”, which
    in turn usually uses the Python equals operator `==`.
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这将调用底层“impl”的[`TypeEngine.compare_values()`](type_api.html#sqlalchemy.types.TypeEngine.compare_values
    "sqlalchemy.types.TypeEngine.compare_values")，而这通常会使用 Python 的等号运算符`==`。
- en: This function is used by the ORM to compare an original-loaded value with an
    intercepted “changed” value, to determine if a net change has occurred.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数由 ORM 用于比较原始加载的值与拦截的“更改”值，以确定是否发生了净变化。
- en: '[PRE288]'
  id: totrans-1731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: alias of [`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.sql.sqltypes.LargeBinary")
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.sql.sqltypes.LargeBinary")
    的别名'
- en: '[PRE289]'
  id: totrans-1733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: Provide a result value processing function for the given [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect").
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")提供结果值处理函数。
- en: This is the method that fulfills the [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") contract for bound value conversion which normally
    occurs via the [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method.
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 这是满足绑定值转换的[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")契约的方法，通常通过[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法实现。
- en: Note
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: User-defined subclasses of [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") should **not** implement this method, and should
    instead implement [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") so that the “inner” processing
    provided by the implementing type is maintained.
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")的子类**不应**实现此方法，而应该实现[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")，以便保持实现类型提供的“内部”处理。
- en: 'Parameters:'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-1739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – A SQLAlchemy data type'
  id: totrans-1740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 一个SQLAlchemy数据类型'
- en: '[PRE290]'
  id: totrans-1741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: Add capabilities to a type which allow for schema-level DDL to be associated
    with a type.
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 为类型添加允许将模式级DDL与类型关联的功能。
- en: Supports types that must be explicitly created/dropped (i.e. PG ENUM type) as
    well as types that are complimented by table or schema level constraints, triggers,
    and other rules.
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: 支持必须显式创建/删除的类型（即PG ENUM类型），以及通过表或模式级约束、触发器和其他规则补充的类型。
- en: '[`SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    classes can also be targets for the [`DDLEvents.before_parent_attach()`](events.html#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach") and [`DDLEvents.after_parent_attach()`](events.html#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach") events, where the events fire
    off surrounding the association of the type object with a parent [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    类也可以成为[`DDLEvents.before_parent_attach()`](events.html#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach")和[`DDLEvents.after_parent_attach()`](events.html#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach")事件的目标，这些事件在类型对象与父[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")关联时触发。'
- en: See also
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")'
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enum`](#sqlalchemy.types.Enum "sqlalchemy.types.Enum")'
- en: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")'
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")'
- en: '**Members**'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[adapt()](#sqlalchemy.types.SchemaType.adapt), [copy()](#sqlalchemy.types.SchemaType.copy),
    [create()](#sqlalchemy.types.SchemaType.create), [drop()](#sqlalchemy.types.SchemaType.drop),
    [name](#sqlalchemy.types.SchemaType.name)'
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: '[adapt()](#sqlalchemy.types.SchemaType.adapt), [copy()](#sqlalchemy.types.SchemaType.copy),
    [create()](#sqlalchemy.types.SchemaType.create), [drop()](#sqlalchemy.types.SchemaType.drop),
    [name](#sqlalchemy.types.SchemaType.name)'
- en: '**Class signature**'
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, `sqlalchemy.types.TypeEngineMixin`)
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.SchemaType`](#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")（`sqlalchemy.sql.expression.SchemaEventTarget`，`sqlalchemy.types.TypeEngineMixin`）
- en: '[PRE291]'
  id: totrans-1752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-1753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-1754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: Issue CREATE DDL for this type, if applicable.
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 如适用，为此类型发出CREATE DDL。
- en: '[PRE294]'
  id: totrans-1756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: Issue DROP DDL for this type, if applicable.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 如适用，为此类型发出DROP DDL。
- en: '[PRE295]'
  id: totrans-1758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-1759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: A type for smaller `int` integers.
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 用于较小的`int`整数的类型。
- en: Typically generates a `SMALLINT` in DDL, and otherwise acts like a normal [`Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") on the Python side.
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在DDL中生成`SMALLINT`，在Python端则像普通的[`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer")一样运行。
- en: '**Class signature**'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger")（[`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")）
- en: '[PRE297]'
  id: totrans-1764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: The base for all string and character types.
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: 所有字符串和字符类型的基础。
- en: In SQL, corresponds to VARCHAR.
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中对应于VARCHAR。
- en: The length field is usually required when the String type is used within a CREATE
    TABLE statement, as VARCHAR requires a length on most databases.
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: 当 String 类型在 CREATE TABLE 语句中使用时，通常需要长度字段，因为大多数数据库上的 VARCHAR 都需要长度。
- en: '**Members**'
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.String.__init__), [bind_processor()](#sqlalchemy.types.String.bind_processor),
    [get_dbapi_type()](#sqlalchemy.types.String.get_dbapi_type), [literal_processor()](#sqlalchemy.types.String.literal_processor),
    [python_type](#sqlalchemy.types.String.python_type), [result_processor()](#sqlalchemy.types.String.result_processor)'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.String.__init__), [bind_processor()](#sqlalchemy.types.String.bind_processor),
    [get_dbapi_type()](#sqlalchemy.types.String.get_dbapi_type), [literal_processor()](#sqlalchemy.types.String.literal_processor),
    [python_type](#sqlalchemy.types.String.python_type), [result_processor()](#sqlalchemy.types.String.result_processor)'
- en: '**Class signature**'
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String")
    ([`sqlalchemy.types.Concatenable`](type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String")
    ([`sqlalchemy.types.Concatenable`](type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE298]'
  id: totrans-1772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: Create a string-holding type.
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-1775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选项，用于 DDL 和 CAST 表达式中列的长度。如果不会发出 `CREATE TABLE`，则可以安全地省略。某些数据库可能需要用于
    DDL 的长度，并且在包含没有长度的 `VARCHAR` 的 `CREATE TABLE` DDL 时会引发异常。该值是以字节还是字符进行解释取决于数据库。'
- en: '`collation` –'
  id: totrans-1776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-1777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选项，用于 DDL 和 CAST 表达式的列级排序。使用 SQLite、MySQL 和 PostgreSQL 支持的 COLLATE 关键字进行渲染。例如：
- en: '[PRE299]'
  id: totrans-1778
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: Note
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-1780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用 [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    或 [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型来存储非 ASCII 数据的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE300]'
  id: totrans-1781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: Return a conversion function for processing bind values.
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数以处理绑定值。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一的位置参数，并返回要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于特定于方言的类型对象调用，该对象通常是正在使用的方言的私有类型对象，并且与公共类型对象不同，这意味着无法通过子类化 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类来提供替代 [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 方法，除非显式子类化 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 正在使用的方言实例。'
- en: '[PRE301]'
  id: totrans-1792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层DB-API中相应的类型对象（如果有）。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对调用`setinputsizes()`可能很有用。
- en: '[PRE302]'
  id: totrans-1795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理直接渲染而不使用绑定的字面值的转换函数。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时使用此函数，通常用于DDL生成以及在某些后端不接受绑定参数的情况下。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面Python值作为唯一的位置参数，并返回要在SQL语句中呈现的字符串表示。
- en: Note
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**进行调用，该对象通常**私有于正在使用的方言**，并且不是公共类型对象，这意味着无法通过对[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类进行子类化来提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式地对[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类进行子类化。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE303]'
  id: totrans-1804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-1805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: Return a conversion function for processing result row values.
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个结果行列值作为唯一的位置参数，并返回一个值以返回给用户。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于**特定方言类型对象**调用，该对象通常**私有于使用的方言**，并且不是公共类型对象，这意味着不可通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供替代行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-1815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 使用中的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-1816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在cursor.description中接收的DBAPI coltype参数。'
- en: '[PRE305]'
  id: totrans-1817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: A variably sized string type.
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: 可变大小的字符串类型。
- en: In SQL, usually corresponds to CLOB or TEXT. In general, TEXT objects do not
    have a length; while some databases will accept a length argument here, it will
    be rejected by others.
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，通常对应于CLOB或TEXT。一般来说，TEXT对象没有长度；虽然一些数据库会接受这里的长度参数，但其他数据库会拒绝。
- en: '**Class signature**'
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text") ([`sqlalchemy.types.String`](#sqlalchemy.types.String
    "sqlalchemy.types.String"))
- en: '[PRE306]'
  id: totrans-1822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: A type for `datetime.time()` objects.
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`datetime.time()`对象的类型。
- en: '**Members**'
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_dbapi_type()](#sqlalchemy.types.Time.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Time.literal_processor),
    [python_type](#sqlalchemy.types.Time.python_type)'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_dbapi_type()](#sqlalchemy.types.Time.get_dbapi_type), [literal_processor()](#sqlalchemy.types.Time.literal_processor),
    [python_type](#sqlalchemy.types.Time.python_type)'
- en: '**Class signature**'
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Time`](#sqlalchemy.types.Time "sqlalchemy.types.Time")
    (`sqlalchemy.types._RenderISO8601NoT`, `sqlalchemy.types.HasExpressionLookup`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Time`](#sqlalchemy.types.Time "sqlalchemy.types.Time") (`sqlalchemy.types._RenderISO8601NoT`,
    `sqlalchemy.types.HasExpressionLookup`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE307]'
  id: totrans-1828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: 如��有的话，从底层DB-API返回相应的类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于调用`setinputsizes()`可能很有用，例如。
- en: '[PRE308]'
  id: totrans-1831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理直接呈现而不使用绑定的字面值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常用于DDL生成以及某些后端不接受绑定参数的情况下使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面的Python值作为唯一的位置参数，并返回一个字符串表示以在SQL语句中呈现。
- en: Note
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅针对**特定方言类型对象**，通常**仅限于正在使用的方言私有**，并且与公共类型对象不同，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE309]'
  id: totrans-1840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-1841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: A variable length Unicode string type.
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: 可变长度Unicode字符串类型。
- en: The [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") type is
    a [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") subclass that
    assumes input and output strings that may contain non-ASCII characters, and for
    some backends implies an underlying column type that is explicitly supporting
    of non-ASCII data, such as `NVARCHAR` on Oracle and SQL Server. This will impact
    the output of `CREATE TABLE` statements and `CAST` functions at the dialect level.
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")类型是一个[`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")子类，假设输入和输出的字符串可能包含非ASCII字符，并且对于某些后端，暗示着明确支持非ASCII数据的底层列类型，比如在Oracle和SQL
    Server上的`NVARCHAR`。这将影响方言级别的`CREATE TABLE`语句和`CAST`函数的输出。'
- en: The character encoding used by the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    type that is used to transmit and receive data to the database is usually determined
    by the DBAPI itself. All modern DBAPIs accommodate non-ASCII strings but may have
    different methods of managing database encodings; if necessary, this encoding
    should be configured as detailed in the notes for the target DBAPI in the [Dialects](../dialects/index.html)
    section.
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")类型用于与数据库传输和接收数据的字符编码通常由DBAPI自身确定。所有现代DBAPI都支持非ASCII字符串，但可能有不同的管理数据库编码的方法；如果必要，应按照[Dialects](../dialects/index.html)部分中目标DBAPI的说明进行配置。'
- en: In modern SQLAlchemy, use of the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    datatype does not imply any encoding/decoding behavior within SQLAlchemy itself.
    In Python 3, all string objects are inherently Unicode capable, and SQLAlchemy
    does not produce bytestring objects nor does it accommodate a DBAPI that does
    not return Python Unicode objects in result sets for string values.
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的SQLAlchemy中，使用[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")数据类型不会暗示SQLAlchemy本身的任何编码/解码行为。在Python
    3中，所有字符串对象都具有Unicode能力，SQLAlchemy不会生成字节串对象，也不会适应DBAPI不返回Python Unicode对象作为字符串值结果集的情况。
- en: Warning
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Some database backends, particularly SQL Server with pyodbc, are known to have
    undesirable behaviors regarding data that is noted as being of `NVARCHAR` type
    as opposed to `VARCHAR`, including datatype mismatch errors and non-use of indexes.
    See the section on [`DialectEvents.do_setinputsizes()`](events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes") for background on working
    around unicode character issues for backends like SQL Server with pyodbc as well
    as cx_Oracle.
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库后端，特别是使用pyodbc的SQL Server，已知对被注明为`NVARCHAR`类型而不是`VARCHAR`类型的数据存在不良行为，包括数据类型不匹配错误和不使用索引。请参阅有关如何解决像SQL
    Server与pyodbc以及cx_Oracle这样的后端的unicode字符问题的背景信息的部分[`DialectEvents.do_setinputsizes()`](events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes")。
- en: See also
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    - unlengthed textual counterpart to [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode").'
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    - 与[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")的无长度文本对应。'
- en: '[`DialectEvents.do_setinputsizes()`](events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes")'
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.do_setinputsizes()`](events.html#sqlalchemy.events.DialectEvents.do_setinputsizes
    "sqlalchemy.events.DialectEvents.do_setinputsizes")'
- en: '**Class signature**'
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
- en: '[PRE311]'
  id: totrans-1853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: An unbounded-length Unicode string type.
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: 一个无界限长度的Unicode字符串类型。
- en: See [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") for details
    on the unicode behavior of this object.
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此对象的unicode行为的详细信息，请参阅[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")。
- en: Like [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode"), usage
    the [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    type implies a unicode-capable type being used on the backend, such as `NCLOB`,
    `NTEXT`.
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")，使用[`UnicodeText`](#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")类型意味着在后端使用了一个支持unicode的类型，比如`NCLOB`，`NTEXT`。
- en: '**Class signature**'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
- en: '[PRE312]'
  id: totrans-1859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: Represent a database agnostic UUID datatype.
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个数据库通用的UUID数据类型。
- en: For backends that have no “native” UUID datatype, the value will make use of
    `CHAR(32)` and store the UUID as a 32-character alphanumeric hex string.
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有“原生”UUID数据类型的后端，该值将使用`CHAR(32)`并将UUID存储为32个字符的十六进制字符串。
- en: For backends which are known to support `UUID` directly or a similar uuid-storing
    datatype such as SQL Server’s `UNIQUEIDENTIFIER`, a “native” mode enabled by default
    allows these types will be used on those backends.
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已知直接支持`UUID`或类似的存储uuid的数据类型（例如SQL Server的`UNIQUEIDENTIFIER`）的后端，默认启用的“原生”模式将允许在这些后端上使用这些类型。
- en: 'In its default mode of use, the [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    datatype expects **Python uuid objects**, from the Python [uuid](https://docs.python.org/3/library/uuid.html)
    module:'
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: 在其默认使用模式下，[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")数据类型期望来自Python
    [uuid](https://docs.python.org/3/library/uuid.html)模块的**Python uuid对象**：
- en: '[PRE313]'
  id: totrans-1864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: To have the [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") datatype
    work with string-based Uuids (e.g. 32 character hexadecimal strings), pass the
    [`Uuid.as_uuid`](#sqlalchemy.types.Uuid.params.as_uuid "sqlalchemy.types.Uuid")
    parameter with the value `False`.
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
  zh: 要使[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")数据类型与基于字符串的Uuids（例如32个字符的十六进制字符串）一起工作，请将[`Uuid.as_uuid`](#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid")参数传递值为`False`。
- en: New in version 2.0.
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中添加。
- en: See also
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") - represents exactly
    the `UUID` datatype without any backend-agnostic behaviors.'
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") - 表示仅具有后端不可知行为的`UUID`数据类型。'
- en: '**Members**'
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.Uuid.__init__), [bind_processor()](#sqlalchemy.types.Uuid.bind_processor),
    [coerce_compared_value()](#sqlalchemy.types.Uuid.coerce_compared_value), [literal_processor()](#sqlalchemy.types.Uuid.literal_processor),
    [python_type](#sqlalchemy.types.Uuid.python_type), [result_processor()](#sqlalchemy.types.Uuid.result_processor)'
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.Uuid.__init__), [bind_processor()](#sqlalchemy.types.Uuid.bind_processor),
    [coerce_compared_value()](#sqlalchemy.types.Uuid.coerce_compared_value), [literal_processor()](#sqlalchemy.types.Uuid.literal_processor),
    [python_type](#sqlalchemy.types.Uuid.python_type), [result_processor()](#sqlalchemy.types.Uuid.result_processor)'
- en: '**Class signature**'
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    (`sqlalchemy.types.Emulated`, [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") (`sqlalchemy.types.Emulated`,
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
- en: '[PRE314]'
  id: totrans-1873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: Construct a [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") type.
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")类型。
- en: 'Parameters:'
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`as_uuid=True` –'
  id: totrans-1876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_uuid=True` –'
- en: if True, values will be interpreted as Python uuid objects, converting to/from
    string via the DBAPI.
  id: totrans-1877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则值将被解释为Python uuid对象，并通过DBAPI转换为/从字符串。
- en: '`native_uuid=True` – if True, backends that support either the `UUID` datatype
    directly, or a UUID-storing value (such as SQL Server’s `UNIQUEIDENTIFIER` will
    be used by those backends. If False, a `CHAR(32)` datatype will be used for all
    backends regardless of native support.'
  id: totrans-1878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`native_uuid=True` – 如果为True，则支持直接使用`UUID`数据类型或存储UUID值的后端（例如SQL Server的`UNIQUEIDENTIFIER`）将由这些后端使用。
    如果为False，则无论原生支持如何，所有后端都将使用`CHAR(32)`数据类型。'
- en: '[PRE315]'
  id: totrans-1879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: Return a conversion function for processing bind values.
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收绑定参数值作为唯一的位置参数，并将返回要发送到DB-API的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言的类型对象**调用，该对象通常是**正在使用的方言的私有对象**，并且不是与公共类型对象相同的类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供备用[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非明确地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供备用行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 使用中的方言实例。'
- en: '[PRE316]'
  id: totrans-1890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: See [`TypeEngine.coerce_compared_value()`](type_api.html#sqlalchemy.types.TypeEngine.coerce_compared_value
    "sqlalchemy.types.TypeEngine.coerce_compared_value") for a description.
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`TypeEngine.coerce_compared_value()`](type_api.html#sqlalchemy.types.TypeEngine.coerce_compared_value
    "sqlalchemy.types.TypeEngine.coerce_compared_value")以获取描述信息。
- en: '[PRE317]'
  id: totrans-1892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理要直接呈现而不使用绑定的字面值的转换函数。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时使用此函数，该标志通常用于 DDL 生成以及在某些情况下，后端不接受绑定参数的情况下使用。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面上的 Python 值作为唯一的位置参数，并返回一个字符串表示，用于在 SQL 语句中呈现。
- en: Note
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅针对**特定方言的类型对象**调用，该对象通常**私有于正在使用的方言**，并且不是公共面向的类型对象，这意味着不可能通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE318]'
  id: totrans-1901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-1902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: Return a conversion function for processing result row values.
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个结果行列值作为唯一的位置参数，并返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，该方法应返回`None`。
- en: Note
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅针对**特定方言的类型对象**调用，该对象通常**私有于正在使用的方言**，并且不是公共面向的类型对象，这意味着不可能通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供替代行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-1912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-1913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在cursor.description中收到的DBAPI coltype 参数。'
- en: '## SQL Standard and Multiple Vendor “UPPERCASE” Types'
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: '## SQL标准和多供应商“大写”类型'
- en: This category of types refers to types that are either part of the SQL standard,
    or are potentially found within a subset of database backends. Unlike the “generic”
    types, the SQL standard/multi-vendor types have **no** guarantee of working on
    all backends, and will only work on those backends that explicitly support them
    by name. That is, the type will always emit its exact name in DDL with `CREATE
    TABLE` is issued.
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: 此类类型指的是SQL标准的一部分，或者可能在一些数据库后端的子集中找到的类型。与“通用”类型不同，SQL标准/多供应商类型**没有**保证在所有后端上工作，并且只会在明确通过名称支持它们的后端上工作。也就是说，当发出`CREATE
    TABLE`时，该类型将始终以其确切的名称在DDL中发出。
- en: '| Object Name | Description |'
  id: totrans-1916
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1917
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ARRAY](#sqlalchemy.types.ARRAY) | Represent a SQL Array type. |'
  id: totrans-1918
  prefs: []
  type: TYPE_TB
  zh: '| [ARRAY](#sqlalchemy.types.ARRAY) | 表示 SQL Array 类型。 |'
- en: '| [BIGINT](#sqlalchemy.types.BIGINT) | The SQL BIGINT type. |'
  id: totrans-1919
  prefs: []
  type: TYPE_TB
  zh: '| [BIGINT](#sqlalchemy.types.BIGINT) | SQL BIGINT 类型。 |'
- en: '| [BINARY](#sqlalchemy.types.BINARY) | The SQL BINARY type. |'
  id: totrans-1920
  prefs: []
  type: TYPE_TB
  zh: '| [BINARY](#sqlalchemy.types.BINARY) | SQL BINARY 类型。 |'
- en: '| [BLOB](#sqlalchemy.types.BLOB) | The SQL BLOB type. |'
  id: totrans-1921
  prefs: []
  type: TYPE_TB
  zh: '| [BLOB](#sqlalchemy.types.BLOB) | SQL BLOB 类型。 |'
- en: '| [BOOLEAN](#sqlalchemy.types.BOOLEAN) | The SQL BOOLEAN type. |'
  id: totrans-1922
  prefs: []
  type: TYPE_TB
  zh: '| [BOOLEAN](#sqlalchemy.types.BOOLEAN) | SQL BOOLEAN 类型。 |'
- en: '| [CHAR](#sqlalchemy.types.CHAR) | The SQL CHAR type. |'
  id: totrans-1923
  prefs: []
  type: TYPE_TB
  zh: '| [CHAR](#sqlalchemy.types.CHAR) | SQL CHAR 类型。 |'
- en: '| [CLOB](#sqlalchemy.types.CLOB) | The CLOB type. |'
  id: totrans-1924
  prefs: []
  type: TYPE_TB
  zh: '| [CLOB](#sqlalchemy.types.CLOB) | CLOB 类型。 |'
- en: '| [DATE](#sqlalchemy.types.DATE) | The SQL DATE type. |'
  id: totrans-1925
  prefs: []
  type: TYPE_TB
  zh: '| [DATE](#sqlalchemy.types.DATE) | SQL DATE 类型。 |'
- en: '| [DATETIME](#sqlalchemy.types.DATETIME) | The SQL DATETIME type. |'
  id: totrans-1926
  prefs: []
  type: TYPE_TB
  zh: '| [DATETIME](#sqlalchemy.types.DATETIME) | SQL DATETIME 类型。 |'
- en: '| [DECIMAL](#sqlalchemy.types.DECIMAL) | The SQL DECIMAL type. |'
  id: totrans-1927
  prefs: []
  type: TYPE_TB
  zh: '| [DECIMAL](#sqlalchemy.types.DECIMAL) | SQL DECIMAL 类型。 |'
- en: '| [DOUBLE](#sqlalchemy.types.DOUBLE) | The SQL DOUBLE type. |'
  id: totrans-1928
  prefs: []
  type: TYPE_TB
  zh: '| [DOUBLE](#sqlalchemy.types.DOUBLE) | SQL DOUBLE 类型。 |'
- en: '| [DOUBLE_PRECISION](#sqlalchemy.types.DOUBLE_PRECISION) | The SQL DOUBLE PRECISION
    type. |'
  id: totrans-1929
  prefs: []
  type: TYPE_TB
  zh: '| [DOUBLE_PRECISION](#sqlalchemy.types.DOUBLE_PRECISION) | SQL DOUBLE PRECISION
    类型。 |'
- en: '| [FLOAT](#sqlalchemy.types.FLOAT) | The SQL FLOAT type. |'
  id: totrans-1930
  prefs: []
  type: TYPE_TB
  zh: '| [FLOAT](#sqlalchemy.types.FLOAT) | SQL FLOAT 类型。 |'
- en: '| [INT](#sqlalchemy.types.INT) | alias of [`INTEGER`](#sqlalchemy.types.INTEGER
    "sqlalchemy.sql.sqltypes.INTEGER") |'
  id: totrans-1931
  prefs: []
  type: TYPE_TB
  zh: '| [INT](#sqlalchemy.types.INT) | [`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.sql.sqltypes.INTEGER")
    的别名 |'
- en: '| [INTEGER](#sqlalchemy.types.INTEGER) | The SQL INT or INTEGER type. |'
  id: totrans-1932
  prefs: []
  type: TYPE_TB
  zh: '| [INTEGER](#sqlalchemy.types.INTEGER) | SQL INT 或 INTEGER 类型。 |'
- en: '| [JSON](#sqlalchemy.types.JSON) | Represent a SQL JSON type. |'
  id: totrans-1933
  prefs: []
  type: TYPE_TB
  zh: '| [JSON](#sqlalchemy.types.JSON) | 表示 SQL JSON 类型。 |'
- en: '| [NCHAR](#sqlalchemy.types.NCHAR) | The SQL NCHAR type. |'
  id: totrans-1934
  prefs: []
  type: TYPE_TB
  zh: '| [NCHAR](#sqlalchemy.types.NCHAR) | SQL NCHAR 类型。 |'
- en: '| [NUMERIC](#sqlalchemy.types.NUMERIC) | The SQL NUMERIC type. |'
  id: totrans-1935
  prefs: []
  type: TYPE_TB
  zh: '| [NUMERIC](#sqlalchemy.types.NUMERIC) | SQL NUMERIC 类型。 |'
- en: '| [NVARCHAR](#sqlalchemy.types.NVARCHAR) | The SQL NVARCHAR type. |'
  id: totrans-1936
  prefs: []
  type: TYPE_TB
  zh: '| [NVARCHAR](#sqlalchemy.types.NVARCHAR) | SQL NVARCHAR 类型。 |'
- en: '| [REAL](#sqlalchemy.types.REAL) | The SQL REAL type. |'
  id: totrans-1937
  prefs: []
  type: TYPE_TB
  zh: '| [REAL](#sqlalchemy.types.REAL) | SQL REAL 类型。 |'
- en: '| [SMALLINT](#sqlalchemy.types.SMALLINT) | The SQL SMALLINT type. |'
  id: totrans-1938
  prefs: []
  type: TYPE_TB
  zh: '| [SMALLINT](#sqlalchemy.types.SMALLINT) | SQL SMALLINT 类型。 |'
- en: '| [TEXT](#sqlalchemy.types.TEXT) | The SQL TEXT type. |'
  id: totrans-1939
  prefs: []
  type: TYPE_TB
  zh: '| [TEXT](#sqlalchemy.types.TEXT) | SQL TEXT 类型。 |'
- en: '| [TIME](#sqlalchemy.types.TIME) | The SQL TIME type. |'
  id: totrans-1940
  prefs: []
  type: TYPE_TB
  zh: '| [TIME](#sqlalchemy.types.TIME) | SQL TIME 类型。 |'
- en: '| [TIMESTAMP](#sqlalchemy.types.TIMESTAMP) | The SQL TIMESTAMP type. |'
  id: totrans-1941
  prefs: []
  type: TYPE_TB
  zh: '| [TIMESTAMP](#sqlalchemy.types.TIMESTAMP) | SQL TIMESTAMP 类型。 |'
- en: '| [UUID](#sqlalchemy.types.UUID) | Represent the SQL UUID type. |'
  id: totrans-1942
  prefs: []
  type: TYPE_TB
  zh: '| [UUID](#sqlalchemy.types.UUID) | 表示 SQL UUID 类型。 |'
- en: '| [VARBINARY](#sqlalchemy.types.VARBINARY) | The SQL VARBINARY type. |'
  id: totrans-1943
  prefs: []
  type: TYPE_TB
  zh: '| [VARBINARY](#sqlalchemy.types.VARBINARY) | SQL VARBINARY 类型。 |'
- en: '| [VARCHAR](#sqlalchemy.types.VARCHAR) | The SQL VARCHAR type. |'
  id: totrans-1944
  prefs: []
  type: TYPE_TB
  zh: '| [VARCHAR](#sqlalchemy.types.VARCHAR) | SQL VARCHAR 类型。 |'
- en: '[PRE320]'
  id: totrans-1945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: Represent a SQL Array type.
  id: totrans-1946
  prefs: []
  type: TYPE_NORMAL
  zh: 表示SQL数组类型。
- en: Note
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This type serves as the basis for all ARRAY operations. However, currently **only
    the PostgreSQL backend has support for SQL arrays in SQLAlchemy**. It is recommended
    to use the PostgreSQL-specific [`sqlalchemy.dialects.postgresql.ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type directly when using ARRAY types with
    PostgreSQL, as it provides additional operators specific to that backend.
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型为所有ARRAY操作提供了基础。然而，目前**只有PostgreSQL后端支持SQL数组在SQLAlchemy中**。建议在与PostgreSQL一起使用ARRAY类型时直接使用PostgreSQL特定的[`sqlalchemy.dialects.postgresql.ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型，因为它提供了特定于该后端的附加运算符。
- en: '[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") is part of the
    Core in support of various SQL standard functions such as [`array_agg`](functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") which explicitly involve arrays; however,
    with the exception of the PostgreSQL backend and possibly some third-party dialects,
    no other SQLAlchemy built-in dialect has support for this type.'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")是核心的一部分，支持各种SQL标准函数，例如[`array_agg`](functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")，明确涉及数组；但是，除了PostgreSQL后端和可能一些第三方方言外，没有其他SQLAlchemy内置方言支持此类型。'
- en: 'An [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") type is constructed
    given the “type” of element:'
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
  zh: 给定元素的“类型”，构造[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")类型：
- en: '[PRE321]'
  id: totrans-1951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: 'The above type represents an N-dimensional array, meaning a supporting backend
    such as PostgreSQL will interpret values with any number of dimensions automatically.
    To produce an INSERT construct that passes in a 1-dimensional array of integers:'
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: 以上类型表示一个N维数组，意味着支持的后端（例如PostgreSQL）将自动解释具有任意维数的值。要生成传递整数的一维数组的INSERT构造：
- en: '[PRE322]'
  id: totrans-1953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: 'The [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") type can be
    constructed given a fixed number of dimensions:'
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: 给定固定维数，可以构造[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")类型：
- en: '[PRE323]'
  id: totrans-1955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'Sending a number of dimensions is optional, but recommended if the datatype
    is to represent arrays of more than one dimension. This number is used:'
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
  zh: 发送维度数量是可选的，但是如果数据类型要表示多于一个维度的数组，则建议使用。此数字用于：
- en: When emitting the type declaration itself to the database, e.g. `INTEGER[][]`
  id: totrans-1957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将类型声明本身发射到数据库时，例如`INTEGER[][]`
- en: When translating Python values to database values, and vice versa, e.g. an ARRAY
    of [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") objects uses
    this number to efficiently access the string values inside of array structures
    without resorting to per-row type inspection
  id: totrans-1958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将Python值翻译为数据库值，反之亦然时，例如，一个由[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")对象组成的数组使用此数字来有效地访问数组结构内的字符串值，而不是使用每行类型检查。
- en: 'When used with the Python `getitem` accessor, the number of dimensions serves
    to define the kind of type that the `[]` operator should return, e.g. for an ARRAY
    of INTEGER with two dimensions:'
  id: totrans-1959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当与Python `getitem`访问器一起使用时，维数的数量用于定义`[]`操作符应返回的类型的种类，例如具有两个维度的INTEGER数组：
- en: '[PRE324]'
  id: totrans-1960
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: For 1-dimensional arrays, an [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    instance with no dimension parameter will generally assume single-dimensional
    behaviors.
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一维数组，通常假设没有维度参数的[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")实例将假定单维行为。
- en: 'SQL expressions of type [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    have support for “index” and “slice” behavior. The `[]` operator produces expression
    constructs which will produce the appropriate SQL, both for SELECT statements:'
  id: totrans-1962
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")的SQL表达式支持“索引”和“切片”行为。`[]`操作符生成表达式构造，其将为SELECT语句生成适当的SQL，例如：
- en: '[PRE325]'
  id: totrans-1963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: 'as well as UPDATE statements when the [`Update.values()`](dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") method is used:'
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
  zh: 以及当使用[`Update.values()`](dml.html#sqlalchemy.sql.expression.Update.values "sqlalchemy.sql.expression.Update.values")方法时的UPDATE语句：
- en: '[PRE326]'
  id: totrans-1965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: Indexed access is one-based by default; for zero-based index conversion, set
    [`ARRAY.zero_indexes`](#sqlalchemy.types.ARRAY.params.zero_indexes "sqlalchemy.types.ARRAY").
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
  zh: 索引访问默认为基于一的；要进行从零开始的索引转换，请设置[`ARRAY.zero_indexes`](#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY")。
- en: The [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") type also provides
    for the operators [`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all"). The PostgreSQL-specific version of [`ARRAY`](#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") also provides additional operators.
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") 类型还提供了操作符 [`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 和 [`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")。PostgreSQL 特定版本的 [`ARRAY`](#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 还提供了额外的操作符。'
- en: '**Detecting Changes in ARRAY columns when using the ORM**'
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
  zh: '**在使用 ORM 时检测 ARRAY 列中的更改**'
- en: 'The [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") type, when
    used with the SQLAlchemy ORM, does not detect in-place mutations to the array.
    In order to detect these, the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension must be used, using the [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") class:'
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQLAlchemy ORM 一起使用时，[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型不会检测对数组的原地突变。为了检测到这些变化，必须使用 [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展，并使用 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 类：
- en: '[PRE327]'
  id: totrans-1970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: This extension will allow “in-place” changes such to the array such as `.append()`
    to produce events which will be detected by the unit of work. Note that changes
    to elements **inside** the array, including subarrays that are mutated in place,
    are **not** detected.
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展将允许对数组进行“原地”更改，例如 `.append()` 会产生可以被工作单元检测到的事件。请注意，对数组内的元素的更改，包括原地突变的子数组，**不会**被检测到。
- en: Alternatively, assigning a new array value to an ORM element that replaces the
    old one will always trigger a change event.
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，将新的数组值分配给替换旧值的 ORM 元素将始终触发更改事件。
- en: See also
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.dialects.postgresql.ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")'
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")'
- en: '**Members**'
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.ARRAY.__init__), [contains()](#sqlalchemy.types.ARRAY.Comparator.contains),
    [any()](#sqlalchemy.types.ARRAY.Comparator.any), [all()](#sqlalchemy.types.ARRAY.Comparator.all)'
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.ARRAY.__init__), [contains()](#sqlalchemy.types.ARRAY.Comparator.contains),
    [any()](#sqlalchemy.types.ARRAY.Comparator.any), [all()](#sqlalchemy.types.ARRAY.Comparator.all)'
- en: '**Class signature**'
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.types.Indexable`](type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable"), [`sqlalchemy.types.Concatenable`](type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.types.Indexable`](type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable"), [`sqlalchemy.types.Concatenable`](type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE328]'
  id: totrans-1979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: Construct an [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY").
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")。
- en: 'E.g.:'
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE329]'
  id: totrans-1982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'Arguments are:'
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: 参数为：
- en: 'Parameters:'
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`item_type` – The data type of items of this array. Note that dimensionality
    is irrelevant here, so multi-dimensional arrays like `INTEGER[][]`, are constructed
    as `ARRAY(Integer)`, not as `ARRAY(ARRAY(Integer))` or such.'
  id: totrans-1985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`item_type` – 此数组项的数据类型。请注意，此处的维度是无关紧要的，因此像 `INTEGER[][]` 这样的多维数组，构造为 `ARRAY(Integer)`，而不是
    `ARRAY(ARRAY(Integer))` 或类似的结构。'
- en: '`as_tuple=False` – Specify whether return results should be converted to tuples
    from lists. This parameter is not generally needed as a Python list corresponds
    well to a SQL array.'
  id: totrans-1986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_tuple=False` – 指定返回结果是否应从列表转换为元组。通常不需要此参数，因为 Python 列表很好地对应于 SQL 数组。'
- en: '`dimensions` – if non-None, the ARRAY will assume a fixed number of dimensions.
    This impacts how the array is declared on the database, how it goes about interpreting
    Python and result values, as well as how expression behavior in conjunction with
    the “getitem” operator works. See the description at [`ARRAY`](#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") for additional detail.'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dimensions` – 如果非 None，则 ARRAY 将假定固定数量的维度。这会影响数组在数据库中的声明方式，以及它如何解释 Python
    和结果值，以及与“getitem”运算符结合使用时表达式的行为。有关详细信息，请参阅 [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    的描述。'
- en: '`zero_indexes=False` – when True, index values will be converted between Python
    zero-based and SQL one-based indexes, e.g. a value of one will be added to all
    index values before passing to the database.'
  id: totrans-1988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zero_indexes=False` – 当为 True 时，索引值将在 Python 以零为基础和 SQL 以一为基础的索引之间转换，例如，在传递给数据库之前，所有索引值都将增加一个值。'
- en: '[PRE330]'
  id: totrans-1989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: Define comparison operations for [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY").
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: 为 [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") 定义比较操作。
- en: More operators are available on the dialect-specific form of this type. See
    [`Comparator`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator").
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型的特定于方言的形式上还提供了更多操作符。请参阅 [`Comparator`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator")。
- en: '**Class signature**'
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.ARRAY.Comparator`](#sqlalchemy.types.ARRAY.Comparator
    "sqlalchemy.types.ARRAY.Comparator") (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.ARRAY.Comparator`](#sqlalchemy.types.ARRAY.Comparator
    "sqlalchemy.types.ARRAY.Comparator") (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
- en: '[PRE331]'
  id: totrans-1994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '`ARRAY.contains()` not implemented for the base ARRAY type. Use the dialect-specific
    ARRAY type.'
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARRAY.contains()` 未为基本 ARRAY 类型实现。请使用特定于方言的 ARRAY 类型。'
- en: See also
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") - PostgreSQL specific version.'
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") - PostgreSQL 特定版本。'
- en: '[PRE332]'
  id: totrans-1998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: Return `other operator ANY (array)` clause.
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `other operator ANY (array)` 子句。
- en: Legacy Feature
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
  zh: 旧特性
- en: This method is an [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    - specific construct that is now superseded by the [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") function, which features a different calling
    style. The [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    function is also mirrored at the method level via the [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method.
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是一个 [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") - 特定的构造，现在已被
    [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    函数取代，后者具有不同的调用方式。 [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    函数也通过 [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 方法在方法级别进行了镜像。
- en: 'Usage of array-specific [`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") is as follows:'
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组特定的 [`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any "sqlalchemy.types.ARRAY.Comparator.any")
    如下所示：
- en: '[PRE333]'
  id: totrans-2003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'Parameters:'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-2005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式'
- en: '`operator` – an operator object from the `sqlalchemy.sql.operators` package,
    defaults to `eq()`.'
  id: totrans-2006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operator` – `sqlalchemy.sql.operators` 包中的操作符对象，默认为 `eq()`。'
- en: See also
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")'
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: '[`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")'
- en: '[`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all "sqlalchemy.types.ARRAY.Comparator.all")'
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all "sqlalchemy.types.ARRAY.Comparator.all")'
- en: '[PRE334]'
  id: totrans-2010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Return `other operator ALL (array)` clause.
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `other operator ALL (array)` 子句。
- en: Legacy Feature
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: 旧特性
- en: This method is an [`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    - specific construct that is now superseded by the [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") function, which features a different calling
    style. The [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    function is also mirrored at the method level via the [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method.
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是一个特定的[`ARRAY`](#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")构造，现在已被具有不同调用风格的[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")函数取代。[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")函数也通过[`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法在方法级别进行了镜像。
- en: 'Usage of array-specific [`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") is as follows:'
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特定于数组的[`Comparator.all()`](#sqlalchemy.types.ARRAY.Comparator.all "sqlalchemy.types.ARRAY.Comparator.all")的方法如下：
- en: '[PRE335]'
  id: totrans-2015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'Parameters:'
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-2017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`operator` – an operator object from the `sqlalchemy.sql.operators` package,
    defaults to `eq()`.'
  id: totrans-2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operator` – 来自`sqlalchemy.sql.operators`包的操作符对象，默认为`eq()`。'
- en: See also
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")'
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
  zh: '[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")'
- en: '[`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any "sqlalchemy.types.ARRAY.Comparator.any")'
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator.any()`](#sqlalchemy.types.ARRAY.Comparator.any "sqlalchemy.types.ARRAY.Comparator.any")'
- en: '[PRE336]'
  id: totrans-2022
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: The SQL BIGINT type.
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BIGINT 类型。
- en: See also
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger")
    - documentation for the base type.'
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger")
    - 基本类型的文档。'
- en: '**Class signature**'
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BIGINT`](#sqlalchemy.types.BIGINT "sqlalchemy.types.BIGINT")
    ([`sqlalchemy.types.BigInteger`](#sqlalchemy.types.BigInteger "sqlalchemy.types.BigInteger"))
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.BIGINT`](#sqlalchemy.types.BIGINT "sqlalchemy.types.BIGINT")（[`sqlalchemy.types.BigInteger`](#sqlalchemy.types.BigInteger
    "sqlalchemy.types.BigInteger")）
- en: '[PRE337]'
  id: totrans-2028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: The SQL BINARY type.
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BINARY 类型。
- en: '**Class signature**'
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BINARY`](#sqlalchemy.types.BINARY "sqlalchemy.types.BINARY")
    (`sqlalchemy.types._Binary`)
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.BINARY`](#sqlalchemy.types.BINARY "sqlalchemy.types.BINARY")（`sqlalchemy.types._Binary`）
- en: '[PRE338]'
  id: totrans-2032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: The SQL BLOB type.
  id: totrans-2033
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BLOB 类型。
- en: '**Members**'
  id: totrans-2034
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.BLOB.__init__)'
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.BLOB.__init__)'
- en: '**Class signature**'
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BLOB`](#sqlalchemy.types.BLOB "sqlalchemy.types.BLOB")
    ([`sqlalchemy.types.LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary"))
  id: totrans-2037
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.BLOB`](#sqlalchemy.types.BLOB "sqlalchemy.types.BLOB")（[`sqlalchemy.types.LargeBinary`](#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")）
- en: '[PRE339]'
  id: totrans-2038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '*inherited from the* `sqlalchemy.types.LargeBinary.__init__` *method of* [`LargeBinary`](#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
  id: totrans-2039
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`LargeBinary`](#sqlalchemy.types.LargeBinary "sqlalchemy.types.LargeBinary")
    *的* `sqlalchemy.types.LargeBinary.__init__` *方法*'
- en: Construct a LargeBinary type.
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个LargeBinary类型。
- en: 'Parameters:'
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选，用于DDL语句中的列长度，用于那些接受长度的二进制类型，如MySQL BLOB类型。'
- en: '[PRE340]'
  id: totrans-2043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: The SQL BOOLEAN type.
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: SQL BOOLEAN 类型。
- en: '**Members**'
  id: totrans-2045
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.BOOLEAN.__init__)'
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.BOOLEAN.__init__)'
- en: '**Class signature**'
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.BOOLEAN`](#sqlalchemy.types.BOOLEAN "sqlalchemy.types.BOOLEAN")
    ([`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean"))
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.BOOLEAN`](#sqlalchemy.types.BOOLEAN "sqlalchemy.types.BOOLEAN")（[`sqlalchemy.types.Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")）
- en: '[PRE341]'
  id: totrans-2049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '*inherited from the* `sqlalchemy.types.Boolean.__init__` *method of* [`Boolean`](#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")'
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Boolean`](#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean") *的*
    `sqlalchemy.types.Boolean.__init__` *方法*'
- en: Construct a Boolean.
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个Boolean。
- en: 'Parameters:'
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`create_constraint` –'
  id: totrans-2053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_constraint` –'
- en: defaults to False. If the boolean is generated as an int/smallint, also create
    a CHECK constraint on the table that ensures 1 or 0 as a value.
  id: totrans-2054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为False。如果布尔值生成为int/smallint，还要在表上创建一个CHECK约束，以确保值为1或0。
- en: Note
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: it is strongly recommended that the CHECK constraint have an explicit name in
    order to support schema-management concerns. This can be established either by
    setting the [`Boolean.name`](#sqlalchemy.types.Boolean.params.name "sqlalchemy.types.Boolean")
    parameter or by setting up an appropriate naming convention; see [Configuring
    Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    for background.
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强烈建议CHECK约束具有明确的名称，以支持模式管理方面的考虑。可以通过设置[`Boolean.name`](#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean")参数或设置适当的命名约定来建立。有关背景，请参阅[配置约束命名约定](constraints.html#constraint-naming-conventions)。
- en: 'Changed in version 1.4: - this flag now defaults to False, meaning no CHECK
    constraint is generated for a non-native enumerated type.'
  id: totrans-2057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改： - 此标志现在默认为False，表示为非本地枚举类型不生成CHECK约束。
- en: '`name` – if a CHECK constraint is generated, specify the name of the constraint.'
  id: totrans-2058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 如果生成CHECK约束，请指定约束的名称。'
- en: '[PRE342]'
  id: totrans-2059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: The SQL CHAR type.
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
  zh: SQL CHAR类型。
- en: '**Members**'
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.CHAR.__init__)'
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.CHAR.__init__)'
- en: '**Class signature**'
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.CHAR`](#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.CHAR`](#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
- en: '[PRE343]'
  id: totrans-2065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法继承*'
- en: Create a string-holding type.
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-2069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选项，用于DDL和CAST表达式中列的长度。如果不会发出`CREATE TABLE`，可以安全地省略。某些数据库可能需要DDL中的`length`，如果包括了没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。该值被解释为字节还是字符取决于数据库。'
- en: '`collation` –'
  id: totrans-2070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选项，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字呈现。例如：
- en: '[PRE344]'
  id: totrans-2072
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Note
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，应该使用[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型来存储非ASCII数据的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE345]'
  id: totrans-2075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: The CLOB type.
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
  zh: CLOB类型。
- en: This type is found in Oracle and Informix.
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型在Oracle和Informix中找到。
- en: '**Members**'
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.CLOB.__init__)'
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.CLOB.__init__)'
- en: '**Class signature**'
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.CLOB`](#sqlalchemy.types.CLOB "sqlalchemy.types.CLOB")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.CLOB`](#sqlalchemy.types.CLOB "sqlalchemy.types.CLOB")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
- en: '[PRE346]'
  id: totrans-2082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法继承*'
- en: Create a string-holding type.
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-2086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选项，用于DDL和CAST表达式中列的长度。如果不会发出`CREATE TABLE`，可以安全地省略。某些数据库可能需要DDL中的`length`，如果包括了没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。该值被解释为字节还是字符取决于数据库。'
- en: '`collation` –'
  id: totrans-2087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-2088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的，用于DDL和CAST表达式的列级校对。在SQLite、MySQL和PostgreSQL中使用COLLATE关键字呈现。例如：
- en: '[PRE347]'
  id: totrans-2089
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: Note
  id: totrans-2090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-2091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，期望存储非ASCII数据的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    应使用 [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 或 [`UnicodeText`](#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") 数据类型。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE348]'
  id: totrans-2092
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: The SQL DATE type.
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DATE 类型。
- en: '**Class signature**'
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DATE`](#sqlalchemy.types.DATE "sqlalchemy.types.DATE")
    ([`sqlalchemy.types.Date`](#sqlalchemy.types.Date "sqlalchemy.types.Date"))
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.DATE`](#sqlalchemy.types.DATE "sqlalchemy.types.DATE")（[`sqlalchemy.types.Date`](#sqlalchemy.types.Date
    "sqlalchemy.types.Date")的）
- en: '[PRE349]'
  id: totrans-2096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: The SQL DATETIME type.
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DATETIME 类型。
- en: '**Members**'
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DATETIME.__init__)'
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DATETIME.__init__)'
- en: '**Class signature**'
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DATETIME`](#sqlalchemy.types.DATETIME "sqlalchemy.types.DATETIME")
    ([`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime"))
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.DATETIME`](#sqlalchemy.types.DATETIME "sqlalchemy.types.DATETIME")（[`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")的）
- en: '[PRE350]'
  id: totrans-2102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '*inherited from the* `sqlalchemy.types.DateTime.__init__` *method of* [`DateTime`](#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    *的* `sqlalchemy.types.DateTime.__init__` *方法*'
- en: Construct a new [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime").
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的 [`DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")。
- en: 'Parameters:'
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**timezone** – boolean. Indicates that the datetime type should enable timezone
    support, if available on the **base date/time-holding type only**. It is recommended
    to make use of the [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    datatype directly when using this flag, as some databases include separate generic
    date/time-holding types distinct from the timezone-capable TIMESTAMP datatype,
    such as Oracle.'
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: '**timezone** – 布尔值。指示日期/时间类型应在仅在**基本日期/时间持有类型上可用**时启用时区支持。建议在使用此标志时直接使用 [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP") 数据类型，因为一些数据库包括与时区支持 TIMESTAMP 数据类型不同的单独的通用日期/时间持有类型，比如
    Oracle。'
- en: '[PRE351]'
  id: totrans-2107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: The SQL DECIMAL type.
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DECIMAL 类型。
- en: See also
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") - documentation
    for the base type.'
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-2111
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DECIMAL.__init__)'
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DECIMAL.__init__)'
- en: '**Class signature**'
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DECIMAL`](#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")
    ([`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"))
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.DECIMAL`](#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")（[`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")的）
- en: '[PRE352]'
  id: totrans-2115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '*inherited from the* `sqlalchemy.types.Numeric.__init__` *method of* [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")'
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") *的*
    `sqlalchemy.types.Numeric.__init__` *方法*'
- en: Construct a Numeric.
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 Numeric。
- en: 'Parameters:'
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – the numeric precision for use in DDL `CREATE TABLE`.'
  id: totrans-2119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 用于DDL `CREATE TABLE` 的数值精度。'
- en: '`scale` – the numeric scale for use in DDL `CREATE TABLE`.'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 用于DDL `CREATE TABLE` 的数值刻度。'
- en: '`asdecimal` – default True. Return whether or not values should be sent as
    Python Decimal objects, or as floats. Different DBAPIs send one or the other based
    on datatypes - the Numeric type will ensure that return values are one or the
    other across DBAPIs consistently.'
  id: totrans-2121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 默认为 True。返回值是否应发送为Python Decimal对象，还是作为浮点数。不同的DBAPI基于数据类型发送其中之一
    - Numeric 类型将确保跨DBAPI一致地返回值为其中之一。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Types which do include an explicit
    “.scale” value, such as the base [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    as well as the MySQL float types, will use the value of “.scale” as the default
    for decimal_return_scale, if not otherwise specified.'
  id: totrans-2122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 默认精度，在将浮点数转换为 Python 十进制数时使用。由于浮点数的不准确性，浮点数值通常会更长，而大多数浮点数数据库类型没有“精度”的概念，因此默认情况下，浮点数类型在转换时会查找前十位小数。指定此值将覆盖该长度。包括显式“.scale”值的类型，例如基本的[`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")以及 MySQL 浮点类型，如果未另行指定，则将使用“.scale”的值作为 decimal_return_scale
    的默认值。'
- en: When using the `Numeric` type, care should be taken to ensure that the asdecimal
    setting is appropriate for the DBAPI in use - when Numeric applies a conversion
    from Decimal->float or float-> Decimal, this conversion incurs an additional performance
    overhead for all result columns received.
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `Numeric` 类型时，应注意确保 asdecimal 设置适用于正在使用的 DBAPI - 当 Numeric 应用从 Decimal->float
    或 float-> Decimal 的转换时，此转换会为接收到的所有结果列增加额外的性能开销。
- en: DBAPIs that return Decimal natively (e.g. psycopg2) will have better accuracy
    and higher performance with a setting of `True`, as the native translation to
    Decimal reduces the amount of floating- point issues at play, and the Numeric
    type itself doesn’t need to apply any further conversions. However, another DBAPI
    which returns floats natively *will* incur an additional conversion overhead,
    and is still subject to floating point data loss - in which case `asdecimal=False`
    will at least remove the extra conversion overhead.
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: 原生返回 Decimal 的 DBAPI（例如 psycopg2）将具有更好的准确性和更高的性能，设置为 `True`，因为原生翻译为 Decimal
    可减少浮点数问题的数量，并且 Numeric 类型本身不需要应用任何进一步的转换。但是，另一个原生返回浮点数的 DBAPI *将*增加额外的转换开销，并且仍然会受到浮点数数据丢失的影响
    - 在这种情况下，`asdecimal=False` 将至少消除额外的转换开销。
- en: '[PRE353]'
  id: totrans-2125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: The SQL DOUBLE type.
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DOUBLE 类型。
- en: New in version 2.0.
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中新增。
- en: See also
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double") - documentation
    for the base type.'
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DOUBLE.__init__)'
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DOUBLE.__init__)'
- en: '**Class signature**'
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DOUBLE`](#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE")
    ([`sqlalchemy.types.Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double"))
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.DOUBLE`](#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE")
    ([`sqlalchemy.types.Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double"))
- en: '[PRE354]'
  id: totrans-2134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") *的* `sqlalchemy.types.Float.__init__`
    *方法继承*'
- en: Construct a Float.
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-2138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 DDL `CREATE TABLE` 中的数字精度。后端**应**尝试确保此精度指示通用[`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型的数字位数。
- en: Note
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-2141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时，[`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 参数不被接受，因为 Oracle 不支持指定浮点精度为小数位数。相反，请使用 Oracle 特定的[`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，并指定 [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") 参数。这是 SQLAlchemy 2.0 中的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个数据库无关的[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为 Oracle
    单独指定二进制精度，请使用 [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下所示：
- en: '[PRE355]'
  id: totrans-2143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-2144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与 [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    相同的标志，但默认值为 `False`。请注意，将此标志设置为 `True` 会导致浮点数转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-2145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在将浮点数转换为 Python 十进制数时使用的默认精度。由于十进制不准确性，浮点值通常会更长，并且大多数浮点数据库类型没有“精度”概念，因此默认情况下，浮点类型在转换时会查找前十位小数点。指定此值将覆盖该长度。请注意，如果未另行指定，包括“精度”的
    MySQL 浮点类型将使用“精度”作为 decimal_return_scale 的默认值。'
- en: '[PRE356]'
  id: totrans-2146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: The SQL DOUBLE PRECISION type.
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DOUBLE PRECISION 类型。
- en: New in version 2.0.
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: See also
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double") - documentation
    for the base type.'
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Double`](#sqlalchemy.types.Double "sqlalchemy.types.Double") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.DOUBLE_PRECISION.__init__)'
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.DOUBLE_PRECISION.__init__)'
- en: '**Class signature**'
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.DOUBLE_PRECISION`](#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") ([`sqlalchemy.types.Double`](#sqlalchemy.types.Double
    "sqlalchemy.types.Double"))
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.DOUBLE_PRECISION`](#sqlalchemy.types.DOUBLE_PRECISION "sqlalchemy.types.DOUBLE_PRECISION")（[`sqlalchemy.types.Double`](#sqlalchemy.types.Double
    "sqlalchemy.types.Double")）
- en: '[PRE357]'
  id: totrans-2155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") 的 `sqlalchemy.types.Float.__init__`
    *方法*'
- en: Construct a Float.
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-2159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-2160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL `CREATE TABLE` 中用于使用的数字精度。后端**应**尝试确保此精度指示了用于通用 [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型的数字位数。
- en: Note
  id: totrans-2161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时，不接受 [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 参数，因为 Oracle 不支持以小数位数指定的浮点精度。而是使用特定于 Oracle 的 [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，并指定 [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") 参数。这是 SQLAlchemy 2.0 中的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-2163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个数据库无关的[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为 Oracle
    单独指定二进制精度，请使用 [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下所示：
- en: '[PRE358]'
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-2165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与 [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    相同的标志，但默认值为 `False`。请注意，将此标志设置为 `True` 会导致浮点数转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-2166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在将浮点数转换为 Python 十进制数时使用的默认精度。由于十进制不准确性，浮点数值通常会更长，大多数浮点数据库类型没有“精度”概念，因此默认情况下，浮点类型在转换时会查找前十位小数点。指定此值将覆盖该长度。请注意，MySQL
    浮点类型（包括“精度”）将使用“精度”作为 decimal_return_scale 的默认值，如果未另行指定。'
- en: '[PRE359]'
  id: totrans-2167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: The SQL FLOAT type.
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
  zh: SQL FLOAT 类型。
- en: See also
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") - documentation
    for the base type.'
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-2171
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.FLOAT.__init__)'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.FLOAT.__init__)'
- en: '**Class signature**'
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.FLOAT`](#sqlalchemy.types.FLOAT "sqlalchemy.types.FLOAT")
    ([`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float"))
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.FLOAT`](#sqlalchemy.types.FLOAT "sqlalchemy.types.FLOAT")（[`sqlalchemy.types.Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")）
- en: '[PRE360]'
  id: totrans-2175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") *的* `sqlalchemy.types.Float.__init__`
    *方法*'
- en: Construct a Float.
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-2179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 DDL `CREATE TABLE` 中的数字精度。后端 **应该** 尝试确保此精度指示通用 [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型的数字位数。
- en: Note
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时，不接受 [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 参数，因为 Oracle 不支持将浮点精度指定为小数位数。相反，请使用特定于 Oracle 的 [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，并指定 [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") 参数。这是 SQLAlchemy 2.0 版本的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-2183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个与数据库无关的 [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为
    Oracle 单独指定二进制精度，请使用 [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下所示：
- en: '[PRE361]'
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-2185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与 [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    相同的标志，但默认值为 `False`。请注意，将此标志设置为 `True` 会导致浮点数转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-2186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在将浮点数转换为 Python 十进制数时使用的默认精度。由于十进制不准确性，浮点数值通常会更长，大多数浮点数据库类型没有“精度”概念，因此默认情况下，浮点类型在转换时会查找前十位小数点。指定此值将覆盖该长度。请注意，MySQL
    浮点类型（包括“精度”）将使用“精度”作为 decimal_return_scale 的默认值，如果未另行指定。'
- en: '[PRE362]'
  id: totrans-2187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: alias of [`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.sql.sqltypes.INTEGER")
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.sql.sqltypes.INTEGER") 的别名'
- en: '[PRE363]'
  id: totrans-2189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: Represent a SQL JSON type.
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL JSON 类型。
- en: Note
  id: totrans-2191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") is provided as a facade
    for vendor-specific JSON types. Since it supports JSON SQL operations, it only
    works on backends that have an actual JSON type, currently:'
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 作为厂商特定 JSON 类型的门面提供。由于它支持
    JSON SQL 操作，因此它仅适用于具有实际 JSON 类型的后端，目前包括：'
- en: PostgreSQL - see [`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") for backend-specific notes
  id: totrans-2193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 有关特定后端说明，请参阅 [`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 和 [`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")
- en: MySQL - see [`sqlalchemy.dialects.mysql.JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON") for backend-specific notes
  id: totrans-2194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 有关特定后端说明，请参阅 [`sqlalchemy.dialects.mysql.JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")
- en: SQLite as of version 3.9 - see [`sqlalchemy.dialects.sqlite.JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON") for backend-specific notes
  id: totrans-2195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自 SQLite 3.9 版本起 - 有关特定后端说明，请参阅 [`sqlalchemy.dialects.sqlite.JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON")
- en: Microsoft SQL Server 2016 and later - see [`sqlalchemy.dialects.mssql.JSON`](../dialects/mssql.html#sqlalchemy.dialects.mssql.JSON
    "sqlalchemy.dialects.mssql.JSON") for backend-specific notes
  id: totrans-2196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server 2016 及更高版本 - 有关特定后端说明，请参阅 [`sqlalchemy.dialects.mssql.JSON`](../dialects/mssql.html#sqlalchemy.dialects.mssql.JSON
    "sqlalchemy.dialects.mssql.JSON")
- en: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") is part of the Core
    in support of the growing popularity of native JSON datatypes.'
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 是核心的一部分，支持本机 JSON
    数据类型的日益流行。'
- en: 'The [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type stores arbitrary
    JSON format data, e.g.:'
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 类型可存储任意的 JSON 格式数据，例如：'
- en: '[PRE364]'
  id: totrans-2199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '**JSON-Specific Expression Operators**'
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: '**特定于 JSON 的表达式运算符**'
- en: 'The [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") datatype provides
    these additional SQL operations:'
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 数据类型提供以下附加 SQL 操作：'
- en: 'Keyed index operations:'
  id: totrans-2202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键索引操作：
- en: '[PRE365]'
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'Integer index operations:'
  id: totrans-2204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数索引操作：
- en: '[PRE366]'
  id: totrans-2205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'Path index operations:'
  id: totrans-2206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径索引操作：
- en: '[PRE367]'
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: 'Data casters for specific JSON element types, subsequent to an index or path
    operation being invoked:'
  id: totrans-2208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对特定 JSON 元素类型的数据转换器，在索引或路径操作被调用后：
- en: '[PRE368]'
  id: totrans-2209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: New in version 1.3.11.
  id: totrans-2210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 1.3.11 新增。
- en: Additional operations may be available from the dialect-specific versions of
    [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON"), such as [`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") and [`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") which both offer additional PostgreSQL-specific
    operations.
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: 针对特定数据库方言的版本可能提供额外的操作，例如 [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    的特定于数据库方言的版本，如 [`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 和 [`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 都提供额外的 PostgreSQL 特定操作。
- en: '**Casting JSON Elements to Other Types**'
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: '**将 JSON 元素转换为其他类型**'
- en: 'Index operations, i.e. those invoked by calling upon the expression using the
    Python bracket operator as in `some_column[''some key'']`, return an expression
    object whose type defaults to [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    by default, so that further JSON-oriented instructions may be called upon the
    result type. However, it is likely more common that an index operation is expected
    to return a specific scalar element, such as a string or integer. In order to
    provide access to these elements in a backend-agnostic way, a series of data casters
    are provided:'
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: 索引操作，即通过 Python 方括号操作符调用表达式的操作，例如 `some_column['some key']`，默认返回一个类型为 [`JSON`](#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 的表达式对象，以便对结果类型调用进一步的 JSON 导向指令。然而，更常见的情况可能是期望索引操作返回特定的标量元素，例如字符串或整数。为了以后端不可知的方式提供对这些元素的访问，提供了一系列的数据转换器：
- en: '[`Comparator.as_string()`](#sqlalchemy.types.JSON.Comparator.as_string "sqlalchemy.types.JSON.Comparator.as_string")
    - return the element as a string'
  id: totrans-2214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Comparator.as_string()`](#sqlalchemy.types.JSON.Comparator.as_string "sqlalchemy.types.JSON.Comparator.as_string")
    - 将元素作为字符串返回'
- en: '[`Comparator.as_boolean()`](#sqlalchemy.types.JSON.Comparator.as_boolean "sqlalchemy.types.JSON.Comparator.as_boolean")
    - return the element as a boolean'
  id: totrans-2215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Comparator.as_boolean()`](#sqlalchemy.types.JSON.Comparator.as_boolean "sqlalchemy.types.JSON.Comparator.as_boolean")
    - 将元素作为布尔值返回'
- en: '[`Comparator.as_float()`](#sqlalchemy.types.JSON.Comparator.as_float "sqlalchemy.types.JSON.Comparator.as_float")
    - return the element as a float'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Comparator.as_float()`](#sqlalchemy.types.JSON.Comparator.as_float "sqlalchemy.types.JSON.Comparator.as_float")
    - 将元素作为浮点数返回'
- en: '[`Comparator.as_integer()`](#sqlalchemy.types.JSON.Comparator.as_integer "sqlalchemy.types.JSON.Comparator.as_integer")
    - return the element as an integer'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Comparator.as_integer()`](#sqlalchemy.types.JSON.Comparator.as_integer "sqlalchemy.types.JSON.Comparator.as_integer")
    - 将元素作为整数返回'
- en: 'These data casters are implemented by supporting dialects in order to assure
    that comparisons to the above types will work as expected, such as:'
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据转换器通过支持的方言实现，以确保对上述类型的比较能够正常工作，例如：
- en: '[PRE369]'
  id: totrans-2219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: 'New in version 1.3.11: Added type-specific casters for the basic JSON data
    element types.'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.11 版本新增：为基本 JSON 数据元素添加了类型特定的转换器。
- en: Note
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The data caster functions are new in version 1.3.11, and supersede the previous
    documented approaches of using CAST; for reference, this looked like:'
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: 数据转换器函数是在 1.3.11 版本中新增的，取代了以前文档化的使用 CAST 的方法；作为参考，以前的做法如下所示：
- en: '[PRE370]'
  id: totrans-2223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: 'The above case now works directly as:'
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: 上述情况现在直接起作用：
- en: '[PRE371]'
  id: totrans-2225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: For details on the previous comparison approach within the 1.3.x series, see
    the documentation for SQLAlchemy 1.2 or the included HTML files in the doc/ directory
    of the version’s distribution.
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 1.3.x 系列中先前比较方法的详细信息，请参阅 SQLAlchemy 1.2 的文档或版本发行版的 doc/ 目录中包含的 HTML 文件。
- en: '**Detecting Changes in JSON columns when using the ORM**'
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: '**在使用 ORM 时检测 JSON 列中的更改**'
- en: The [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type, when used
    with the SQLAlchemy ORM, does not detect in-place mutations to the structure.
    In order to detect these, the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension must be used, most typically using the [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") class. This extension will allow “in-place”
    changes to the datastructure to produce events which will be detected by the unit
    of work. See the example at [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") for a simple example involving a dictionary.
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQLAlchemy ORM 一起使用时，[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    类型不会检测结构的原地变化。为了检测这些变化，必须使用 [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展，最常见的是使用 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 类。此扩展将允许对数据结构的“原地”更改产生事件，这些事件将被工作单元检测到。有关涉及字典的简单示例的示例，请参阅
    [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")。
- en: Alternatively, assigning a JSON structure to an ORM element that replaces the
    old one will always trigger a change event.
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，将 JSON 结构分配给替换旧结构的 ORM 元素将始终触发更改事件。
- en: '**Support for JSON null vs. SQL NULL**'
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持 JSON null 与 SQL NULL**'
- en: 'When working with NULL values, the [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type recommends the use of two specific constants in order to differentiate between
    a column that evaluates to SQL NULL, e.g. no value, vs. the JSON-encoded string
    of `"null"`. To insert or select against a value that is SQL NULL, use the constant
    [`null()`](sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null").
    This symbol may be passed as a parameter value specifically when using the [`JSON`](#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype, which contains special logic that interprets
    this symbol to mean that the column value should be SQL NULL as opposed to JSON
    `"null"`:'
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 NULL 值时，[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 类型建议使用两个特定的常量来区分一个评估为
    SQL NULL 的列（例如，没有值），与 JSON 编码的字符串 `"null"`。要插入或选择一个 SQL NULL 值，请使用常量 [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")。当使用包含特殊逻辑的 [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    数据类型时，可以将此符号作为参数值传递，解释为列值应为 SQL NULL 而不是 JSON 的 `"null"`：
- en: '[PRE372]'
  id: totrans-2232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: 'To insert or select against a value that is JSON `"null"`, use the constant
    [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL"):'
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
  zh: 要插入或选择 JSON `"null"` 值，请使用常量 [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")：
- en: '[PRE373]'
  id: totrans-2234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: The [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type supports a
    flag [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null "sqlalchemy.types.JSON")
    which when set to True will result in the Python constant `None` evaluating to
    the value of SQL NULL, and when set to False results in the Python constant `None`
    evaluating to the value of JSON `"null"`. The Python value `None` may be used
    in conjunction with either [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")
    and [`null()`](sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    in order to indicate NULL values, but care must be taken as to the value of the
    [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null "sqlalchemy.types.JSON")
    in these cases.
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型支持一个标志[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")，当设置为True时，Python常量`None`将评估为SQL NULL的值，当设置为False时，Python常量`None`将评估为JSON中的值`"null"`。在这些情况下，Python值`None`可以与[`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL")和[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")结合使用以指示NULL值，但必须注意在这些情况下[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")的值。'
- en: '**Customizing the JSON Serializer**'
  id: totrans-2236
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义JSON序列化器**'
- en: The JSON serializer and deserializer used by [`JSON`](#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") defaults to Python’s `json.dumps` and `json.loads` functions;
    in the case of the psycopg2 dialect, psycopg2 may be using its own custom loader
    function.
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")默认使用Python的`json.dumps`和`json.loads`函数作为JSON序列化器和反序列化器；在psycopg2方言的情况下，psycopg2可能正在使用其自定义的加载器函数。'
- en: 'In order to affect the serializer / deserializer, they are currently configurable
    at the [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    level via the [`create_engine.json_serializer`](engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine") and [`create_engine.json_deserializer`](engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine") parameters. For example, to turn off `ensure_ascii`:'
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 为了影响序列化器/反序列化器，它们目前可以在[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")级别通过[`create_engine.json_serializer`](engines.html#sqlalchemy.create_engine.params.json_serializer
    "sqlalchemy.create_engine")和[`create_engine.json_deserializer`](engines.html#sqlalchemy.create_engine.params.json_deserializer
    "sqlalchemy.create_engine")参数进行配置。例如，要关闭`ensure_ascii`：
- en: '[PRE374]'
  id: totrans-2239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: 'Changed in version 1.3.7: SQLite dialect’s `json_serializer` and `json_deserializer`
    parameters renamed from `_json_serializer` and `_json_deserializer`.'
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3.7开始更改：SQLite方言的`json_serializer`和`json_deserializer`参数从`_json_serializer`和`_json_deserializer`重命名。
- en: See also
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")'
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.JSON`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")'
- en: '[`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")'
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")'
- en: '[`sqlalchemy.dialects.mysql.JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")'
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.mysql.JSON`](../dialects/mysql.html#sqlalchemy.dialects.mysql.JSON
    "sqlalchemy.dialects.mysql.JSON")'
- en: '[`sqlalchemy.dialects.sqlite.JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON")'
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.sqlite.JSON`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.JSON
    "sqlalchemy.dialects.sqlite.JSON")'
- en: '**Members**'
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[as_boolean()](#sqlalchemy.types.JSON.Comparator.as_boolean), [as_float()](#sqlalchemy.types.JSON.Comparator.as_float),
    [as_integer()](#sqlalchemy.types.JSON.Comparator.as_integer), [as_json()](#sqlalchemy.types.JSON.Comparator.as_json),
    [as_numeric()](#sqlalchemy.types.JSON.Comparator.as_numeric), [as_string()](#sqlalchemy.types.JSON.Comparator.as_string),
    [bind_processor()](#sqlalchemy.types.JSON.JSONElementType.bind_processor), [literal_processor()](#sqlalchemy.types.JSON.JSONElementType.literal_processor),
    [NULL](#sqlalchemy.types.JSON.NULL), [__init__()](#sqlalchemy.types.JSON.__init__),
    [bind_processor()](#sqlalchemy.types.JSON.bind_processor), [comparator_factory](#sqlalchemy.types.JSON.comparator_factory),
    [hashable](#sqlalchemy.types.JSON.hashable), [python_type](#sqlalchemy.types.JSON.python_type),
    [result_processor()](#sqlalchemy.types.JSON.result_processor), [should_evaluate_none](#sqlalchemy.types.JSON.should_evaluate_none)'
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
  zh: '[as_boolean()](#sqlalchemy.types.JSON.Comparator.as_boolean), [as_float()](#sqlalchemy.types.JSON.Comparator.as_float),
    [as_integer()](#sqlalchemy.types.JSON.Comparator.as_integer), [as_json()](#sqlalchemy.types.JSON.Comparator.as_json),
    [as_numeric()](#sqlalchemy.types.JSON.Comparator.as_numeric), [as_string()](#sqlalchemy.types.JSON.Comparator.as_string),
    [bind_processor()](#sqlalchemy.types.JSON.JSONElementType.bind_processor), [literal_processor()](#sqlalchemy.types.JSON.JSONElementType.literal_processor),
    [NULL](#sqlalchemy.types.JSON.NULL), [__init__()](#sqlalchemy.types.JSON.__init__),
    [bind_processor()](#sqlalchemy.types.JSON.bind_processor), [comparator_factory](#sqlalchemy.types.JSON.comparator_factory),
    [hashable](#sqlalchemy.types.JSON.hashable), [python_type](#sqlalchemy.types.JSON.python_type),
    [result_processor()](#sqlalchemy.types.JSON.result_processor), [should_evaluate_none](#sqlalchemy.types.JSON.should_evaluate_none) '
- en: '**Class signature**'
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    ([`sqlalchemy.types.Indexable`](type_api.html#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable"),
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: '类 [`sqlalchemy.types.JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    ([`sqlalchemy.types.Indexable`](type_api.html#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable"),
    [`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")) '
- en: '[PRE375]'
  id: totrans-2250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: Define comparison operations for [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON").
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
  zh: 为 [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") 定义比较操作。
- en: '**Class signature**'
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.Comparator`](#sqlalchemy.types.JSON.Comparator
    "sqlalchemy.types.JSON.Comparator") (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`)
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
  zh: '类 [`sqlalchemy.types.JSON.Comparator`](#sqlalchemy.types.JSON.Comparator "sqlalchemy.types.JSON.Comparator")
    (`sqlalchemy.types.Comparator`, `sqlalchemy.types.Comparator`) '
- en: '[PRE376]'
  id: totrans-2254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: Cast an indexed value as boolean.
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为布尔值。
- en: 'e.g.:'
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE377]'
  id: totrans-2257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: New in version 1.3.11.
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.11 中的新功能。
- en: '[PRE378]'
  id: totrans-2259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Cast an indexed value as float.
  id: totrans-2260
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为浮点数。
- en: 'e.g.:'
  id: totrans-2261
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE379]'
  id: totrans-2262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: New in version 1.3.11.
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.11 中的新功能。
- en: '[PRE380]'
  id: totrans-2264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: Cast an indexed value as integer.
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为整数。
- en: 'e.g.:'
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE381]'
  id: totrans-2267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: New in version 1.3.11.
  id: totrans-2268
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.11 中的新功能。
- en: '[PRE382]'
  id: totrans-2269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: Cast an indexed value as JSON.
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为 JSON。
- en: 'e.g.:'
  id: totrans-2271
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE383]'
  id: totrans-2272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: This is typically the default behavior of indexed elements in any case.
  id: totrans-2273
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是任何情况下索引元素的默认行为。
- en: Note that comparison of full JSON structures may not be supported by all backends.
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有后端都支持完整 JSON 结构的比较。
- en: New in version 1.3.11.
  id: totrans-2275
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.11 中的新功能。
- en: '[PRE384]'
  id: totrans-2276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: Cast an indexed value as numeric/decimal.
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为数字/十进制数。
- en: 'e.g.:'
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE385]'
  id: totrans-2279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: New in version 1.4.0b2.
  id: totrans-2280
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新功能。
- en: '[PRE386]'
  id: totrans-2281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: Cast an indexed value as string.
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引值转换为字符串。
- en: 'e.g.:'
  id: totrans-2283
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE387]'
  id: totrans-2284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: New in version 1.3.11.
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.11 中的新功能。
- en: '[PRE388]'
  id: totrans-2286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: Common function for index / path elements in a JSON expression.
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 表达式中索引 / 路径元素的常见函数。
- en: '**Class signature**'
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONElementType`](#sqlalchemy.types.JSON.JSONElementType
    "sqlalchemy.types.JSON.JSONElementType") ([`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
  zh: '类 [`sqlalchemy.types.JSON.JSONElementType`](#sqlalchemy.types.JSON.JSONElementType
    "sqlalchemy.types.JSON.JSONElementType") ([`sqlalchemy.types.TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")) '
- en: '[PRE389]'
  id: totrans-2290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: Return a conversion function for processing bind values.
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用函数，该函数将接收绑定参数值作为唯一的位置参数，并返回要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅与**方言特定类型对象**相关，该对象通常**私有于正在使用的方言**，并且与公共类型对象不同，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类并提供[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: '**dialect** – 正在使用的方言实例。'
- en: '[PRE390]'
  id: totrans-2301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理直接呈现而不使用绑定的字面值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时，通常在DDL生成以及某些后端不接受绑定参数的情况下使用此函数。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-2304
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面Python值作为唯一的位置参数，并返回一个要在SQL语句中呈现的字符串表示。
- en: Note
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅与**方言特定类型对象**相关，该对象通常**私有于正在使用的方言**，并且与公共类型对象不同，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法，除非显式地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-2307
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类并提供[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE391]'
  id: totrans-2310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: Placeholder for the datatype of a JSON index value.
  id: totrans-2311
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 索引值的数据类型占位符。
- en: This allows execution-time processing of JSON index values for special syntaxes.
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许对特殊语法的 JSON 索引值进行执行时处理。
- en: '**Class signature**'
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONIndexType`](#sqlalchemy.types.JSON.JSONIndexType
    "sqlalchemy.types.JSON.JSONIndexType") (`sqlalchemy.types.JSONElementType`)
  id: totrans-2314
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.JSON.JSONIndexType`](#sqlalchemy.types.JSON.JSONIndexType
    "sqlalchemy.types.JSON.JSONIndexType") (`sqlalchemy.types.JSONElementType`)
- en: '[PRE392]'
  id: totrans-2315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: Placeholder for the datatype of a JSON index value.
  id: totrans-2316
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 索引值的数据类型占位符。
- en: This allows execution-time processing of JSON index values for special syntaxes.
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许对特殊语法的 JSON 索引值进行执行时处理。
- en: '**Class signature**'
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONIntIndexType`](#sqlalchemy.types.JSON.JSONIntIndexType
    "sqlalchemy.types.JSON.JSONIntIndexType") (`sqlalchemy.types.JSONIndexType`)
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.JSON.JSONIntIndexType`](#sqlalchemy.types.JSON.JSONIntIndexType
    "sqlalchemy.types.JSON.JSONIntIndexType") (`sqlalchemy.types.JSONIndexType`)
- en: '[PRE393]'
  id: totrans-2320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: Placeholder type for JSON path operations.
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 路径操作的占位符类型。
- en: This allows execution-time processing of a path-based index value into a specific
    SQL syntax.
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许将基于路径的索引值在特定 SQL 语法中进行执行时处理。
- en: '**Class signature**'
  id: totrans-2323
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONPathType`](#sqlalchemy.types.JSON.JSONPathType
    "sqlalchemy.types.JSON.JSONPathType") (`sqlalchemy.types.JSONElementType`)
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.JSON.JSONPathType`](#sqlalchemy.types.JSON.JSONPathType
    "sqlalchemy.types.JSON.JSONPathType") (`sqlalchemy.types.JSONElementType`)
- en: '[PRE394]'
  id: totrans-2325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: Placeholder for the datatype of a JSON index value.
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 索引值的数据类型占位符。
- en: This allows execution-time processing of JSON index values for special syntaxes.
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许对特殊语法的 JSON 索引值进行执行时处理。
- en: '**Class signature**'
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.JSON.JSONStrIndexType`](#sqlalchemy.types.JSON.JSONStrIndexType
    "sqlalchemy.types.JSON.JSONStrIndexType") (`sqlalchemy.types.JSONIndexType`)
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.JSON.JSONStrIndexType`](#sqlalchemy.types.JSON.JSONStrIndexType
    "sqlalchemy.types.JSON.JSONStrIndexType") (`sqlalchemy.types.JSONIndexType`)
- en: '[PRE395]'
  id: totrans-2330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: Describe the json value of NULL.
  id: totrans-2331
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 NULL 的 JSON 值。
- en: 'This value is used to force the JSON value of `"null"` to be used as the value.
    A value of Python `None` will be recognized either as SQL NULL or JSON `"null"`,
    based on the setting of the [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag; the [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")
    constant can be used to always resolve to JSON `"null"` regardless of this setting.
    This is in contrast to the [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct, which always resolves to SQL NULL.
    E.g.:'
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
  zh: 此值用于强制使用 JSON 值`"null"`作为值。Python 的`None`值将根据[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")标志的设置被识别为 SQL NULL 或 JSON`"null"`，常量[`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL")可用于始终解析为 JSON`"null"`，而不考虑此设置。这与始终解析为 SQL NULL 的[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")构造形成对比。例如：
- en: '[PRE396]'
  id: totrans-2333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: 'In order to set JSON NULL as a default value for a column, the most transparent
    method is to use [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text"):'
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 JSON NULL 设置为列的默认值，最透明的方法是使用[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")：
- en: '[PRE397]'
  id: totrans-2335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: While it is possible to use [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")
    in this context, the [`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")
    value will be returned as the value of the column, which in the context of the
    ORM or other repurposing of the default value, may not be desirable. Using a SQL
    expression means the value will be re-fetched from the database within the context
    of retrieving generated defaults.
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在这种情况下可以使用[`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")，但[`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL")的值将作为列的值返回，这在ORM或其他默认值重新用途的情况下可能不理想。使用 SQL 表达式意味着该值将在检索生成的默认值的上下文中重新从数据库中获取。
- en: '[PRE398]'
  id: totrans-2337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: Construct a [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type.
  id: totrans-2338
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型。
- en: 'Parameters:'
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**none_as_null=False** –'
  id: totrans-2340
  prefs: []
  type: TYPE_NORMAL
  zh: '**none_as_null=False** –'
- en: 'if True, persist the value `None` as a SQL NULL value, not the JSON encoding
    of `null`. Note that when this flag is False, the [`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct can still be used to persist a NULL
    value, which may be passed directly as a parameter value that is specially interpreted
    by the [`JSON`](#sqlalchemy.types.JSON "sqlalchemy.types.JSON") type as SQL NULL:'
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则将值`None`持久化为 SQL 的 NULL 值，而不是`null`的 JSON 编码。请注意，当此标志为 False 时，[`null()`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 构造仍然可以用于持久化 NULL 值，可以直接作为参数值传递，该参数值会被[`JSON`](#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 类型解释为 SQL NULL：
- en: '[PRE399]'
  id: totrans-2342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: Note
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null "sqlalchemy.types.JSON")
    does **not** apply to the values passed to [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"); a value of `None` passed for these parameters means
    “no default present”.'
  id: totrans-2344
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null "sqlalchemy.types.JSON")
    不适用于传递给[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 和 [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")的值；对于这些参数传递的值为`None`意味着“没有默认值”。'
- en: Additionally, when used in SQL comparison expressions, the Python value `None`
    continues to refer to SQL null, and not JSON NULL. The [`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") flag refers explicitly to the **persistence** of the
    value within an INSERT or UPDATE statement. The [`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL") value should be used for SQL expressions that wish
    to compare to JSON null.
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 SQL 比较表达式中使用时，Python 值`None`仍然指代 SQL null，而不是 JSON NULL。[`JSON.none_as_null`](#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") 标志明确指示了在 INSERT 或 UPDATE 语句中持久化该值时的情况。应使用[`JSON.NULL`](#sqlalchemy.types.JSON.NULL
    "sqlalchemy.types.JSON.NULL")值来表示希望与 JSON null 进行比较的 SQL 表达式。
- en: See also
  id: totrans-2346
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.NULL`](#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
- en: '[PRE400]'
  id: totrans-2348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: Return a conversion function for processing bind values.
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一的位置参数，并返回要发送到 DB-API 的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-2351
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于**特定方言类型对象**调用，该对象通常**私有于正在使用的方言**，并且不是与公共面向的对象相同的类型对象，这意味着不可能通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类来提供备用的[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 方法，除非明确子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") 类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个实现[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
  zh: '**dialect** – 正在使用的方言实例。'
- en: '[PRE401]'
  id: totrans-2359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: alias of [`Comparator`](#sqlalchemy.types.JSON.Comparator "sqlalchemy.sql.sqltypes.JSON.Comparator")
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.types.JSON.Comparator "sqlalchemy.sql.sqltypes.JSON.Comparator")的别名'
- en: '[PRE402]'
  id: totrans-2361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: Flag, if False, means values from this type aren’t hashable.
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为False，则意味着此类型的值不可哈希。
- en: Used by the ORM when uniquing result lists.
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
  zh: 当ORM对结果列表进行唯一化时使用。
- en: '[PRE403]'
  id: totrans-2364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-2365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: Return a conversion function for processing result row values.
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-2367
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，它将接收一个结果行列值作为唯一的位置参数，并返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常是正在使用的方言中的**私有对象**，并且不是公共类型对象的相同类型对象，这意味着无法通过子类化[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非明确地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-2371
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-2375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-2376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在cursor.description中接收的DBAPI coltype参数。'
- en: '[PRE405]'
  id: totrans-2377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: If True, the Python constant `None` is considered to be handled explicitly by
    this type.
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则认为Python常量`None`由此类型明确处理。
- en: The ORM uses this flag to indicate that a positive value of `None` is passed
    to the column in an INSERT statement, rather than omitting the column from the
    INSERT statement which has the effect of firing off column-level defaults. It
    also allows types which have special behavior for Python None, such as a JSON
    type, to indicate that they’d like to handle the None value explicitly.
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
  zh: ORM使用此标志指示在INSERT语句中将正值的`None`传递给列，而不是省略INSERT语句中的列，这会触发列级默认值。它还允许具有Python None的特殊行为的类型（例如JSON类型）指示它们希望明确处理None值。
- en: To set this flag on an existing type, use the [`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") method.
  id: totrans-2380
  prefs: []
  type: TYPE_NORMAL
  zh: 要在现有类型上设置此标志，请使用[`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")方法。
- en: See also
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")'
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")'
- en: '[PRE406]'
  id: totrans-2383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: The SQL INT or INTEGER type.
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
  zh: SQL INT或INTEGER类型。
- en: See also
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer") - documentation
    for the base type.'
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer") - 基础类型的文档。'
- en: '**Class signature**'
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.types.INTEGER")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
  id: totrans-2388
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.INTEGER`](#sqlalchemy.types.INTEGER "sqlalchemy.types.INTEGER")
    ([`sqlalchemy.types.Integer`](#sqlalchemy.types.Integer "sqlalchemy.types.Integer"))
- en: '[PRE407]'
  id: totrans-2389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: The SQL NCHAR type.
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NCHAR类型。
- en: '**Members**'
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.NCHAR.__init__)'
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.NCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.NCHAR`](#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")
    ([`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode"))
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.NCHAR`](#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")（[`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")）
- en: '[PRE408]'
  id: totrans-2395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-2399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选的，用于DDL和CAST表达式中的列的长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。值是以字节还是字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-2400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字呈现。例如：
- en: '[PRE409]'
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: Note
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 或
    [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型应该用于预期存储非ASCII数据的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE410]'
  id: totrans-2405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: The SQL NVARCHAR type.
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NVARCHAR 类型。
- en: '**Members**'
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.NVARCHAR.__init__)'
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.NVARCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.NVARCHAR`](#sqlalchemy.types.NVARCHAR "sqlalchemy.types.NVARCHAR")
    ([`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode"))
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.NVARCHAR`](#sqlalchemy.types.NVARCHAR "sqlalchemy.types.NVARCHAR")（[`sqlalchemy.types.Unicode`](#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")）
- en: '[PRE411]'
  id: totrans-2411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-2415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选的，用于DDL和CAST表达式中的列的长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要在DDL中使用长度，并且如果包含没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。值是以字节还是字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-2416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-2417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的，用于DDL和CAST表达式中的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字呈现。���如：
- en: '[PRE412]'
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: Note
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 或
    [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型应该用于预期存储非ASCII数据的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE413]'
  id: totrans-2421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: The SQL NUMERIC type.
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: SQL NUMERIC 类型。
- en: See also
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") - documentation
    for the base type.'
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.NUMERIC.__init__)'
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.NUMERIC.__init__)'
- en: '**Class signature**'
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.NUMERIC`](#sqlalchemy.types.NUMERIC "sqlalchemy.types.NUMERIC")
    ([`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric"))
  id: totrans-2428
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.NUMERIC`](#sqlalchemy.types.NUMERIC "sqlalchemy.types.NUMERIC")（[`sqlalchemy.types.Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")）。
- en: '[PRE414]'
  id: totrans-2429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '*inherited from the* `sqlalchemy.types.Numeric.__init__` *method of* [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")'
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric") *的*
    `sqlalchemy.types.Numeric.__init__` *方法。'
- en: Construct a Numeric.
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个数字。
- en: 'Parameters:'
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – the numeric precision for use in DDL `CREATE TABLE`.'
  id: totrans-2433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 用于 DDL `CREATE TABLE` 中的数字精度。'
- en: '`scale` – the numeric scale for use in DDL `CREATE TABLE`.'
  id: totrans-2434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale` – 用于 DDL `CREATE TABLE` 中的数字比例。'
- en: '`asdecimal` – default True. Return whether or not values should be sent as
    Python Decimal objects, or as floats. Different DBAPIs send one or the other based
    on datatypes - the Numeric type will ensure that return values are one or the
    other across DBAPIs consistently.'
  id: totrans-2435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 默认为 True。返回值是否应发送为 Python 十进制对象或浮点数。不同的 DBAPI 根据数据类型发送其中之一 -
    Numeric 类型将确保返回值在各个 DBAPI 中始终一致地是其中之一。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Types which do include an explicit
    “.scale” value, such as the base [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    as well as the MySQL float types, will use the value of “.scale” as the default
    for decimal_return_scale, if not otherwise specified.'
  id: totrans-2436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 将浮点数转换为 Python 十进制数时要使用的默认精度。由于十进制的不准确性，浮点数值通常会更长，而大多数浮点数据库类型没有“精度”的概念，因此默认情况下，浮点类型在转换时会查找前十位小数。指定此值将覆盖该长度。具有显式“`.scale`”值的类型（例如基本[`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")以及 MySQL 浮点类型）将使用“`.scale`”值作为`decimal_return_scale`的默认值，如果未另行指定。'
- en: When using the `Numeric` type, care should be taken to ensure that the asdecimal
    setting is appropriate for the DBAPI in use - when Numeric applies a conversion
    from Decimal->float or float-> Decimal, this conversion incurs an additional performance
    overhead for all result columns received.
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Numeric`类型时，应注意确保`asdecimal`设置适用于正在使用的 DBAPI - 当 Numeric 应用 Decimal->float
    或 float-> Decimal 的转换时，此转换会为接收到的所有结果列带来额外的性能开销。
- en: DBAPIs that return Decimal natively (e.g. psycopg2) will have better accuracy
    and higher performance with a setting of `True`, as the native translation to
    Decimal reduces the amount of floating- point issues at play, and the Numeric
    type itself doesn’t need to apply any further conversions. However, another DBAPI
    which returns floats natively *will* incur an additional conversion overhead,
    and is still subject to floating point data loss - in which case `asdecimal=False`
    will at least remove the extra conversion overhead.
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
  zh: 本机返回 Decimal 的 DBAPI（例如 psycopg2）将具有更好的精度和更高的性能，设置为`True`，因为对 Decimal 的本机转换减少了涉及的浮点问题的数量，并且
    Numeric 类型本身不需要应用任何进一步的转换。但是，另一个本机返回浮点数的 DBAPI *将*产生额外的转换开销，并且仍然受到浮点数据丢失的影响 -
    在这种情况下，`asdecimal=False`至少会消除额外的转换开销。
- en: '[PRE415]'
  id: totrans-2439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: The SQL REAL type.
  id: totrans-2440
  prefs: []
  type: TYPE_NORMAL
  zh: SQL REAL 类型。
- en: See also
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") - documentation
    for the base type.'
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") - 基本类型的文档。'
- en: '**Members**'
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.REAL.__init__)'
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.REAL.__init__)'
- en: '**Class signature**'
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.REAL`](#sqlalchemy.types.REAL "sqlalchemy.types.REAL")
    ([`sqlalchemy.types.Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float"))
  id: totrans-2446
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.REAL`](#sqlalchemy.types.REAL "sqlalchemy.types.REAL")（[`sqlalchemy.types.Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")）。
- en: '[PRE416]'
  id: totrans-2447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float") *的* `sqlalchemy.types.Float.__init__`
    *方法。'
- en: Construct a Float.
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个浮点数。
- en: 'Parameters:'
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-2451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-2452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 DDL `CREATE TABLE` 中的数字精度。后端**应**尝试确保此精度指示了用于通用[`Float`](#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型的数字位数。
- en: Note
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时，不接受 [`Float.precision`](#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 参数，因为 Oracle 不支持将浮点精度指定为小数位数。相反，使用 Oracle 特定的 [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，并指定 [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") 参数。这是 SQLAlchemy 版本 2.0 中的新功能。
- en: 'To create a database agnostic [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")
    that separately specifies binary precision for Oracle, use [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-2455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个与数据库无关的 [`Float`](#sqlalchemy.types.Float "sqlalchemy.types.Float")，可以分别为
    Oracle 指定二进制精度，请使用 [`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下所示：
- en: '[PRE417]'
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-2457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与 [`Numeric`](#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    相同的标志，但默认为 `False`。请注意，将此标志设置为 `True` 将导致浮点转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在将浮点数转换为 Python 十进制数时要使用的默认比例。由于十进制的不精确性，浮点值通常会更长，而大多数浮点数据库类型都没有“比例”的概念，因此，默认情况下，浮点类型在转换时会寻找前十个小数位数。指定此值将覆盖该长度。请注意，MySQL
    浮点类型包括“比例”，如果没有另外指定，则将使用“比例”作为 decimal_return_scale 的默认值。'
- en: '[PRE418]'
  id: totrans-2459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: The SQL SMALLINT type.
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: SQL SMALLINT 类型。
- en: See also
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger")
    - documentation for the base type.'
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger")
    - 基本类型的文档。'
- en: '**Class signature**'
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.SMALLINT`](#sqlalchemy.types.SMALLINT "sqlalchemy.types.SMALLINT")
    ([`sqlalchemy.types.SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger"))
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.SMALLINT`](#sqlalchemy.types.SMALLINT "sqlalchemy.types.SMALLINT")
    ([`sqlalchemy.types.SmallInteger`](#sqlalchemy.types.SmallInteger "sqlalchemy.types.SmallInteger"))
- en: '[PRE419]'
  id: totrans-2465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: The SQL TEXT type.
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: SQL TEXT 类型。
- en: '**Members**'
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.TEXT.__init__)'
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.TEXT.__init__)'
- en: '**Class signature**'
  id: totrans-2469
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.TEXT`](#sqlalchemy.types.TEXT "sqlalchemy.types.TEXT")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.TEXT`](#sqlalchemy.types.TEXT "sqlalchemy.types.TEXT")
    ([`sqlalchemy.types.Text`](#sqlalchemy.types.Text "sqlalchemy.types.Text"))
- en: '[PRE420]'
  id: totrans-2471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") 的 `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串持有类型。
- en: 'Parameters:'
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-2475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于在 DDL 和 CAST 表达式中的列长度。如果不会发出 `CREATE TABLE`，则可以安全地省略。某些数据库可能需要在
    DDL 中使用长度，并且如果包含了没有长度的 `VARCHAR`，则在发出 `CREATE TABLE` DDL 时将引发异常。值是按字节还是按字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-2476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于在 DDL 和 CAST 表达式中的列级别排序。使用 SQLite、MySQL 和 PostgreSQL 支持的 COLLATE 关键字渲染。例如：
- en: '[PRE421]'
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: Note
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")或[`UnicodeText`](#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText")数据类型应该用于预期存储非ASCII数据的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE422]'
  id: totrans-2481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: The SQL TIME type.
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
  zh: SQL的时间类型。
- en: '**Class signature**'
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.TIME`](#sqlalchemy.types.TIME "sqlalchemy.types.TIME")
    ([`sqlalchemy.types.Time`](#sqlalchemy.types.Time "sqlalchemy.types.Time"))
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.TIME`](#sqlalchemy.types.TIME "sqlalchemy.types.TIME")
    ([`sqlalchemy.types.Time`](#sqlalchemy.types.Time "sqlalchemy.types.Time"))
- en: '[PRE423]'
  id: totrans-2485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: The SQL TIMESTAMP type.
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
  zh: SQL的时间戳类型。
- en: '[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP") datatypes
    have support for timezone storage on some backends, such as PostgreSQL and Oracle.
    Use the `TIMESTAMP.timezone` argument in order to enable “TIMESTAMP WITH TIMEZONE”
    for these backends.'
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")数据类型在一些后端（如PostgreSQL和Oracle）上支持时区存储。使用`TIMESTAMP.timezone`参数以启用这些后端的“带时区的TIMESTAMP”。'
- en: '**Members**'
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.TIMESTAMP.__init__), [get_dbapi_type()](#sqlalchemy.types.TIMESTAMP.get_dbapi_type)'
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.TIMESTAMP.__init__), [get_dbapi_type()](#sqlalchemy.types.TIMESTAMP.get_dbapi_type)'
- en: '**Class signature**'
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    ([`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime"))
  id: totrans-2491
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")
    ([`sqlalchemy.types.DateTime`](#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime"))
- en: '[PRE424]'
  id: totrans-2492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: Construct a new [`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP").
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`TIMESTAMP`](#sqlalchemy.types.TIMESTAMP "sqlalchemy.types.TIMESTAMP")。
- en: 'Parameters:'
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**timezone** – boolean. Indicates that the TIMESTAMP type should enable timezone
    support, if available on the target database. On a per-dialect basis is similar
    to “TIMESTAMP WITH TIMEZONE”. If the target database does not support timezones,
    this flag is ignored.'
  id: totrans-2495
  prefs: []
  type: TYPE_NORMAL
  zh: '**时区** – 布尔值。表示如果目标数据库支持时区，则应该启用TIMESTAMP类型的时区支持。在每个方言基础上类似于“带时区的TIMESTAMP”。如果目标数据库不支持时区，则忽略此标志。'
- en: '[PRE425]'
  id: totrans-2496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-2497
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在的话，从底层DB-API返回相应的类型对象。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于例如调用`setinputsizes()`是有用的。
- en: '[PRE426]'
  id: totrans-2499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: Represent the SQL UUID type.
  id: totrans-2500
  prefs: []
  type: TYPE_NORMAL
  zh: 表示SQL UUID类型。
- en: This is the SQL-native form of the [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    database agnostic datatype, and is backwards compatible with the previous PostgreSQL-only
    version of `UUID`.
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")数据库不可知数据类型的SQL本机形式，并且与以前的仅适用于PostgreSQL版本的UUID向后兼容。
- en: The [`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") datatype only works
    on databases that have a SQL datatype named `UUID`. It will not function for backends
    which don’t have this exact-named type, including SQL Server. For backend-agnostic
    UUID values with native support, including for SQL Server’s `UNIQUEIDENTIFIER`
    datatype, use the [`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid") datatype.
  id: totrans-2502
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID")数据类型仅在具有名为UUID的SQL数据类型的数据库上工作。它不会对不具有此精确名称类型的后端（包括SQL
    Server）产生影响。对于具有本地支持的后端不可知UUID值，包括对于SQL Server的`UNIQUEIDENTIFIER`数据类型，请使用[`Uuid`](#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")数据类型。'
- en: New in version 2.0.
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-2504
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")'
  id: totrans-2505
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")'
- en: '**Members**'
  id: totrans-2506
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.UUID.__init__)'
  id: totrans-2507
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.UUID.__init__)'
- en: '**Class signature**'
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    ([`sqlalchemy.types.Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid"), `sqlalchemy.types.NativeForEmulated`)
  id: totrans-2509
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    ([`sqlalchemy.types.Uuid`](#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid"), `sqlalchemy.types.NativeForEmulated`)
- en: '[PRE427]'
  id: totrans-2510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: Construct a [`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID") type.
  id: totrans-2511
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`UUID`](#sqlalchemy.types.UUID "sqlalchemy.types.UUID")类型。
- en: 'Parameters:'
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**as_uuid=True** –'
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
  zh: '**as_uuid=True** –'
- en: if True, values will be interpreted as Python uuid objects, converting to/from
    string via the DBAPI.
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则值将被解释为Python uuid对象，并通过DBAPI转换为/从字符串。
- en: '[PRE428]'
  id: totrans-2515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: The SQL VARBINARY type.
  id: totrans-2516
  prefs: []
  type: TYPE_NORMAL
  zh: SQL VARBINARY类型。
- en: '**Class signature**'
  id: totrans-2517
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.VARBINARY`](#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")
    (`sqlalchemy.types._Binary`)
  id: totrans-2518
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.VARBINARY`](#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")
    (`sqlalchemy.types._Binary`)
- en: '[PRE429]'
  id: totrans-2519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: The SQL VARCHAR type.
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
  zh: SQL VARCHAR 类型。
- en: '**Members**'
  id: totrans-2521
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.types.VARCHAR.__init__)'
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.types.VARCHAR.__init__)'
- en: '**Class signature**'
  id: totrans-2523
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.VARCHAR`](#sqlalchemy.types.VARCHAR "sqlalchemy.types.VARCHAR")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
  id: totrans-2524
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.types.VARCHAR`](#sqlalchemy.types.VARCHAR "sqlalchemy.types.VARCHAR")
    ([`sqlalchemy.types.String`](#sqlalchemy.types.String "sqlalchemy.types.String"))
- en: '[PRE430]'
  id: totrans-2525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](#sqlalchemy.types.String "sqlalchemy.types.String") *的* `sqlalchemy.types.String.__init__`
    *方法*'
- en: Create a string-holding type.
  id: totrans-2527
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串持有类型。
- en: 'Parameters:'
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-2529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于DDL和CAST表达式中的列长度。如果不会发出`CREATE TABLE`，则可以安全地省略。某些数据库可能需要DDL中的`length`，如果包含了没有长度的`VARCHAR`，则在发出`CREATE
    TABLE` DDL时会引发异常。该值是以字节还是字符解释的，具体取决于数据库。'
- en: '`collation` –'
  id: totrans-2530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于DDL和CAST表达式的列级排序规则。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字进行渲染。例如：
- en: '[PRE431]'
  id: totrans-2532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: Note
  id: totrans-2533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    or [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    datatypes should be used for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode") 或
    [`UnicodeText`](#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型应该被用于期望存储非 ASCII 数据的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
